// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const GRANT = 57467
const GRANTS = 57468
const GREATEST = 57469
const GROUP = 57470
const GROUPING = 57471
const HAVING = 57472
const HELP = 57473
const HIGH = 57474
const HOUR = 57475
const IMPORT = 57476
const INCREMENTAL = 57477
const IF = 57478
const IFNULL = 57479
const ILIKE = 57480
const IN = 57481
const INTERLEAVE = 57482
const INDEX = 57483
const INDEXES = 57484
const INITIALLY = 57485
const INNER = 57486
const INSERT = 57487
const INT = 57488
const INT2VECTOR = 57489
const INT2 = 57490
const INT4 = 57491
const INT8 = 57492
const INT64 = 57493
const INTEGER = 57494
const INTERSECT = 57495
const INTERVAL = 57496
const INTO = 57497
const IS = 57498
const ISOLATION = 57499
const JOB = 57500
const JOBS = 57501
const JOIN = 57502
const KEY = 57503
const KEYS = 57504
const KV = 57505
const LATERAL = 57506
const LC_CTYPE = 57507
const LC_COLLATE = 57508
const LEADING = 57509
const LEAST = 57510
const LEFT = 57511
const LEVEL = 57512
const LIKE = 57513
const LIMIT = 57514
const LOCAL = 57515
const LOCALTIME = 57516
const LOCALTIMESTAMP = 57517
const LOW = 57518
const LSHIFT = 57519
const MATCH = 57520
const MINUTE = 57521
const MONTH = 57522
const NAN = 57523
const NAME = 57524
const NAMES = 57525
const NATURAL = 57526
const NEXT = 57527
const NO = 57528
const NO_INDEX_JOIN = 57529
const NORMAL = 57530
const NOT = 57531
const NOTHING = 57532
const NULL = 57533
const NULLIF = 57534
const NULLS = 57535
const NUMERIC = 57536
const OF = 57537
const OFF = 57538
const OFFSET = 57539
const OID = 57540
const ON = 57541
const ONLY = 57542
const OPTIONS = 57543
const OR = 57544
const ORDER = 57545
const ORDINALITY = 57546
const OUT = 57547
const OUTER = 57548
const OVER = 57549
const OVERLAPS = 57550
const OVERLAY = 57551
const PARENT = 57552
const PARTIAL = 57553
const PARTITION = 57554
const PASSWORD = 57555
const PAUSE = 57556
const PLACING = 57557
const PLANS = 57558
const POSITION = 57559
const PRECEDING = 57560
const PRECISION = 57561
const PREPARE = 57562
const PRIMARY = 57563
const PRIORITY = 57564
const QUERIES = 57565
const QUERY = 57566
const RANGE = 57567
const READ = 57568
const REAL = 57569
const RECURSIVE = 57570
const REF = 57571
const REFERENCES = 57572
const REGCLASS = 57573
const REGPROC = 57574
const REGPROCEDURE = 57575
const REGNAMESPACE = 57576
const REGTYPE = 57577
const RENAME = 57578
const REPEATABLE = 57579
const RELEASE = 57580
const RESET = 57581
const RESTORE = 57582
const RESTRICT = 57583
const RESUME = 57584
const RETURNING = 57585
const REVOKE = 57586
const RIGHT = 57587
const ROLLBACK = 57588
const ROLLUP = 57589
const ROW = 57590
const ROWS = 57591
const RSHIFT = 57592
const SAVEPOINT = 57593
const SCATTER = 57594
const SEARCH = 57595
const SECOND = 57596
const SELECT = 57597
const SEQUENCES = 57598
const SERIAL = 57599
const SERIALIZABLE = 57600
const SESSION = 57601
const SESSIONS = 57602
const SESSION_USER = 57603
const SET = 57604
const SETTING = 57605
const SETTINGS = 57606
const SHOW = 57607
const SIMILAR = 57608
const SIMPLE = 57609
const SMALLINT = 57610
const SMALLSERIAL = 57611
const SNAPSHOT = 57612
const SOME = 57613
const SPLIT = 57614
const SQL = 57615
const START = 57616
const STATUS = 57617
const STDIN = 57618
const STRICT = 57619
const STRING = 57620
const STORE = 57621
const STORING = 57622
const SUBSTRING = 57623
const SYMMETRIC = 57624
const SYSTEM = 57625
const TABLE = 57626
const TABLES = 57627
const TEMP = 57628
const TEMPLATE = 57629
const TEMPORARY = 57630
const TESTING_RANGES = 57631
const TESTING_RELOCATE = 57632
const TEXT = 57633
const THEN = 57634
const TIME = 57635
const TIMESTAMP = 57636
const TIMESTAMPTZ = 57637
const TO = 57638
const TRAILING = 57639
const TRACE = 57640
const TRANSACTION = 57641
const TREAT = 57642
const TRIM = 57643
const TRUE = 57644
const TRUNCATE = 57645
const TYPE = 57646
const UNBOUNDED = 57647
const UNCOMMITTED = 57648
const UNION = 57649
const UNIQUE = 57650
const UNKNOWN = 57651
const UPDATE = 57652
const UPSERT = 57653
const USE = 57654
const USER = 57655
const USERS = 57656
const USING = 57657
const UUID = 57658
const VALID = 57659
const VALIDATE = 57660
const VALUE = 57661
const VALUES = 57662
const VARCHAR = 57663
const VARIADIC = 57664
const VIEW = 57665
const VARYING = 57666
const WHEN = 57667
const WHERE = 57668
const WINDOW = 57669
const WITH = 57670
const WITHIN = 57671
const WITHOUT = 57672
const WRITE = 57673
const YEAR = 57674
const ZONE = 57675
const NOT_LA = 57676
const WITH_LA = 57677
const AS_LA = 57678
const POSTFIXOP = 57679
const UMINUS = 57680
const HELPTOKEN = 57681

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6509

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	358, 54,
	-2, 670,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	141, 523,
	-2, 0,
	-1, 61,
	92, 670,
	145, 670,
	310, 670,
	311, 670,
	-2, 0,
	-1, 72,
	103, 645,
	112, 645,
	153, 645,
	172, 645,
	197, 645,
	203, 645,
	307, 645,
	-2, 634,
	-1, 103,
	4, 672,
	20, 672,
	21, 672,
	23, 672,
	28, 672,
	33, 672,
	34, 672,
	35, 672,
	36, 672,
	37, 672,
	38, 672,
	39, 672,
	40, 672,
	41, 672,
	42, 672,
	44, 672,
	45, 672,
	46, 672,
	47, 672,
	48, 672,
	51, 672,
	52, 672,
	53, 672,
	55, 672,
	56, 672,
	60, 672,
	61, 672,
	62, 672,
	64, 672,
	66, 672,
	67, 672,
	68, 672,
	71, 672,
	72, 672,
	73, 672,
	81, 672,
	82, 672,
	83, 672,
	84, 672,
	85, 672,
	86, 672,
	87, 672,
	88, 672,
	90, 672,
	92, 672,
	94, 672,
	97, 672,
	98, 672,
	100, 672,
	104, 672,
	105, 672,
	106, 672,
	107, 672,
	108, 672,
	109, 672,
	113, 672,
	114, 672,
	115, 672,
	116, 672,
	117, 672,
	119, 672,
	121, 672,
	126, 672,
	127, 672,
	129, 672,
	131, 672,
	132, 672,
	133, 672,
	134, 672,
	135, 672,
	136, 672,
	137, 672,
	140, 672,
	142, 672,
	145, 672,
	146, 672,
	147, 672,
	148, 672,
	149, 672,
	150, 672,
	151, 672,
	152, 672,
	154, 672,
	157, 672,
	158, 672,
	159, 672,
	161, 672,
	162, 672,
	163, 672,
	165, 672,
	166, 672,
	168, 672,
	170, 672,
	173, 672,
	176, 672,
	178, 672,
	179, 672,
	180, 672,
	181, 672,
	182, 672,
	183, 672,
	185, 672,
	186, 672,
	187, 672,
	188, 672,
	192, 672,
	193, 672,
	194, 672,
	195, 672,
	196, 672,
	198, 672,
	200, 672,
	201, 672,
	204, 672,
	205, 672,
	207, 672,
	209, 672,
	210, 672,
	211, 672,
	212, 672,
	213, 672,
	214, 672,
	216, 672,
	217, 672,
	218, 672,
	219, 672,
	220, 672,
	222, 672,
	223, 672,
	224, 672,
	225, 672,
	226, 672,
	227, 672,
	228, 672,
	229, 672,
	231, 672,
	232, 672,
	233, 672,
	234, 672,
	235, 672,
	236, 672,
	237, 672,
	238, 672,
	239, 672,
	240, 672,
	241, 672,
	242, 672,
	244, 672,
	246, 672,
	247, 672,
	248, 672,
	249, 672,
	251, 672,
	252, 672,
	253, 672,
	254, 672,
	256, 672,
	257, 672,
	258, 672,
	259, 672,
	260, 672,
	262, 672,
	263, 672,
	264, 672,
	265, 672,
	267, 672,
	268, 672,
	269, 672,
	270, 672,
	272, 672,
	273, 672,
	274, 672,
	275, 672,
	276, 672,
	277, 672,
	278, 672,
	279, 672,
	280, 672,
	281, 672,
	283, 672,
	285, 672,
	286, 672,
	287, 672,
	288, 672,
	289, 672,
	290, 672,
	291, 672,
	293, 672,
	294, 672,
	295, 672,
	298, 672,
	299, 672,
	300, 672,
	301, 672,
	303, 672,
	304, 672,
	305, 672,
	306, 672,
	309, 672,
	310, 672,
	311, 672,
	312, 672,
	314, 672,
	316, 672,
	317, 672,
	318, 672,
	319, 672,
	320, 672,
	321, 672,
	324, 672,
	329, 672,
	330, 672,
	331, 672,
	332, 672,
	333, 672,
	-2, 0,
	-1, 116,
	103, 644,
	112, 644,
	153, 644,
	172, 644,
	197, 644,
	203, 644,
	307, 644,
	-2, 637,
	-1, 120,
	1, 572,
	157, 572,
	222, 572,
	226, 572,
	357, 572,
	358, 572,
	-2, 0,
	-1, 122,
	1, 572,
	357, 572,
	358, 572,
	-2, 0,
	-1, 123,
	1, 572,
	357, 572,
	358, 572,
	-2, 0,
	-1, 124,
	1, 576,
	357, 576,
	358, 576,
	-2, 0,
	-1, 131,
	4, 678,
	5, 678,
	6, 678,
	7, 678,
	8, 678,
	9, 678,
	20, 678,
	21, 678,
	23, 678,
	28, 678,
	29, 678,
	33, 678,
	34, 678,
	35, 678,
	36, 678,
	37, 678,
	38, 678,
	39, 678,
	40, 678,
	41, 678,
	42, 678,
	44, 678,
	45, 678,
	46, 678,
	47, 678,
	48, 678,
	49, 678,
	50, 678,
	51, 678,
	52, 678,
	53, 678,
	55, 678,
	56, 678,
	58, 678,
	60, 678,
	61, 678,
	62, 678,
	64, 678,
	66, 678,
	67, 678,
	68, 678,
	70, 678,
	71, 678,
	72, 678,
	73, 678,
	75, 678,
	76, 678,
	77, 678,
	79, 678,
	80, 678,
	81, 678,
	82, 678,
	83, 678,
	84, 678,
	85, 678,
	86, 678,
	87, 678,
	88, 678,
	90, 678,
	92, 678,
	94, 678,
	97, 678,
	98, 678,
	100, 678,
	104, 678,
	105, 678,
	106, 678,
	107, 678,
	108, 678,
	109, 678,
	110, 678,
	113, 678,
	114, 678,
	115, 678,
	116, 678,
	117, 678,
	119, 678,
	121, 678,
	124, 678,
	126, 678,
	127, 678,
	129, 678,
	131, 678,
	132, 678,
	133, 678,
	134, 678,
	135, 678,
	136, 678,
	137, 678,
	138, 678,
	140, 678,
	142, 678,
	144, 678,
	145, 678,
	146, 678,
	147, 678,
	148, 678,
	149, 678,
	150, 678,
	151, 678,
	152, 678,
	154, 678,
	156, 678,
	157, 678,
	158, 678,
	159, 678,
	160, 678,
	161, 678,
	162, 678,
	163, 678,
	165, 678,
	166, 678,
	168, 678,
	169, 678,
	170, 678,
	171, 678,
	173, 678,
	176, 678,
	178, 678,
	179, 678,
	180, 678,
	181, 678,
	182, 678,
	183, 678,
	184, 678,
	185, 678,
	186, 678,
	187, 678,
	188, 678,
	189, 678,
	191, 678,
	192, 678,
	193, 678,
	194, 678,
	195, 678,
	196, 678,
	198, 678,
	201, 678,
	204, 678,
	205, 678,
	206, 678,
	207, 678,
	208, 678,
	209, 678,
	210, 678,
	211, 678,
	212, 678,
	213, 678,
	214, 678,
	216, 678,
	217, 678,
	218, 678,
	219, 678,
	220, 678,
	222, 678,
	223, 678,
	224, 678,
	225, 678,
	226, 678,
	227, 678,
	228, 678,
	229, 678,
	231, 678,
	232, 678,
	233, 678,
	234, 678,
	235, 678,
	236, 678,
	237, 678,
	238, 678,
	239, 678,
	240, 678,
	241, 678,
	242, 678,
	244, 678,
	245, 678,
	246, 678,
	247, 678,
	248, 678,
	249, 678,
	251, 678,
	252, 678,
	253, 678,
	254, 678,
	256, 678,
	257, 678,
	258, 678,
	259, 678,
	260, 678,
	261, 678,
	262, 678,
	263, 678,
	264, 678,
	265, 678,
	266, 678,
	267, 678,
	268, 678,
	269, 678,
	270, 678,
	272, 678,
	273, 678,
	274, 678,
	275, 678,
	276, 678,
	277, 678,
	278, 678,
	279, 678,
	280, 678,
	281, 678,
	283, 678,
	285, 678,
	286, 678,
	287, 678,
	288, 678,
	289, 678,
	290, 678,
	291, 678,
	293, 678,
	294, 678,
	295, 678,
	298, 678,
	299, 678,
	300, 678,
	301, 678,
	302, 678,
	303, 678,
	304, 678,
	305, 678,
	306, 678,
	309, 678,
	310, 678,
	311, 678,
	312, 678,
	313, 678,
	314, 678,
	316, 678,
	317, 678,
	318, 678,
	319, 678,
	320, 678,
	321, 678,
	324, 678,
	329, 678,
	330, 678,
	331, 678,
	332, 678,
	333, 678,
	334, 678,
	340, 678,
	345, 678,
	346, 678,
	347, 678,
	354, 678,
	360, 678,
	-2, 0,
	-1, 134,
	1, 54,
	358, 54,
	-2, 670,
	-1, 600,
	123, 1266,
	296, 1266,
	339, 1266,
	356, 1266,
	-2, 0,
	-1, 601,
	123, 1218,
	296, 1218,
	339, 1218,
	356, 1218,
	-2, 0,
	-1, 603,
	123, 1324,
	296, 1324,
	339, 1324,
	356, 1324,
	-2, 0,
	-1, 605,
	123, 1346,
	296, 1346,
	339, 1346,
	356, 1346,
	-2, 0,
	-1, 612,
	1, 309,
	357, 309,
	358, 309,
	-2, 1271,
	-1, 638,
	1, 391,
	353, 391,
	355, 391,
	357, 391,
	358, 391,
	-2, 0,
	-1, 639,
	1, 439,
	120, 439,
	353, 439,
	355, 439,
	357, 439,
	358, 439,
	-2, 0,
	-1, 645,
	1, 405,
	353, 405,
	355, 405,
	357, 405,
	358, 405,
	-2, 0,
	-1, 647,
	1, 409,
	353, 409,
	355, 409,
	357, 409,
	358, 409,
	-2, 0,
	-1, 650,
	1, 417,
	353, 417,
	355, 417,
	357, 417,
	358, 417,
	-2, 0,
	-1, 651,
	1, 422,
	353, 422,
	355, 422,
	357, 422,
	358, 422,
	-2, 0,
	-1, 654,
	1, 432,
	353, 432,
	355, 432,
	357, 432,
	358, 432,
	-2, 0,
	-1, 663,
	112, 680,
	172, 680,
	197, 680,
	-2, 640,
	-1, 666,
	112, 679,
	172, 679,
	197, 679,
	-2, 638,
	-1, 796,
	354, 1196,
	-2, 1189,
	-1, 797,
	354, 1197,
	-2, 1190,
	-1, 803,
	5, 853,
	354, 853,
	-2, 1397,
	-1, 828,
	5, 812,
	-2, 1367,
	-1, 829,
	5, 847,
	354, 847,
	-2, 1369,
	-1, 830,
	5, 822,
	-2, 1370,
	-1, 831,
	5, 821,
	-2, 1371,
	-1, 832,
	5, 847,
	354, 847,
	-2, 1374,
	-1, 833,
	5, 847,
	354, 847,
	-2, 1375,
	-1, 834,
	5, 848,
	-2, 1378,
	-1, 835,
	5, 804,
	-2, 1379,
	-1, 836,
	5, 804,
	-2, 1380,
	-1, 837,
	5, 829,
	-2, 1384,
	-1, 838,
	5, 814,
	-2, 1385,
	-1, 839,
	5, 815,
	-2, 1386,
	-1, 840,
	5, 805,
	-2, 1391,
	-1, 841,
	5, 806,
	-2, 1392,
	-1, 842,
	5, 807,
	-2, 1393,
	-1, 843,
	5, 808,
	-2, 1394,
	-1, 844,
	5, 809,
	-2, 1395,
	-1, 845,
	5, 810,
	-2, 1396,
	-1, 846,
	5, 804,
	-2, 1401,
	-1, 847,
	5, 813,
	-2, 1406,
	-1, 848,
	5, 811,
	-2, 1409,
	-1, 849,
	5, 845,
	354, 845,
	-2, 1411,
	-1, 850,
	5, 849,
	-2, 1414,
	-1, 851,
	5, 851,
	-2, 1415,
	-1, 852,
	5, 844,
	354, 844,
	-2, 1420,
	-1, 870,
	213, 668,
	-2, 516,
	-1, 874,
	199, 1193,
	-2, 0,
	-1, 909,
	1, 209,
	353, 209,
	355, 209,
	357, 209,
	358, 209,
	-2, 643,
	-1, 912,
	4, 1419,
	10, 1419,
	11, 1419,
	13, 1419,
	14, 1419,
	15, 1419,
	16, 1419,
	17, 1419,
	18, 1419,
	20, 1419,
	21, 1419,
	23, 1419,
	26, 1419,
	28, 1419,
	30, 1419,
	33, 1419,
	34, 1419,
	35, 1419,
	36, 1419,
	37, 1419,
	38, 1419,
	39, 1419,
	40, 1419,
	41, 1419,
	42, 1419,
	44, 1419,
	45, 1419,
	46, 1419,
	47, 1419,
	48, 1419,
	51, 1419,
	52, 1419,
	53, 1419,
	55, 1419,
	56, 1419,
	57, 1419,
	60, 1419,
	61, 1419,
	62, 1419,
	63, 1419,
	64, 1419,
	66, 1419,
	67, 1419,
	68, 1419,
	70, 1419,
	71, 1419,
	72, 1419,
	73, 1419,
	81, 1419,
	82, 1419,
	83, 1419,
	84, 1419,
	85, 1419,
	86, 1419,
	87, 1419,
	88, 1419,
	90, 1419,
	92, 1419,
	94, 1419,
	97, 1419,
	98, 1419,
	100, 1419,
	104, 1419,
	105, 1419,
	106, 1419,
	107, 1419,
	108, 1419,
	109, 1419,
	113, 1419,
	114, 1419,
	115, 1419,
	116, 1419,
	117, 1419,
	118, 1419,
	119, 1419,
	121, 1419,
	124, 1419,
	126, 1419,
	127, 1419,
	129, 1419,
	131, 1419,
	132, 1419,
	133, 1419,
	134, 1419,
	135, 1419,
	136, 1419,
	137, 1419,
	138, 1419,
	139, 1419,
	140, 1419,
	142, 1419,
	144, 1419,
	145, 1419,
	146, 1419,
	147, 1419,
	148, 1419,
	149, 1419,
	150, 1419,
	151, 1419,
	152, 1419,
	154, 1419,
	156, 1419,
	157, 1419,
	158, 1419,
	159, 1419,
	160, 1419,
	161, 1419,
	162, 1419,
	163, 1419,
	165, 1419,
	166, 1419,
	168, 1419,
	169, 1419,
	170, 1419,
	171, 1419,
	173, 1419,
	176, 1419,
	177, 1419,
	178, 1419,
	179, 1419,
	180, 1419,
	181, 1419,
	182, 1419,
	183, 1419,
	184, 1419,
	185, 1419,
	186, 1419,
	187, 1419,
	188, 1419,
	192, 1419,
	193, 1419,
	194, 1419,
	195, 1419,
	196, 1419,
	198, 1419,
	201, 1419,
	202, 1419,
	204, 1419,
	205, 1419,
	207, 1419,
	209, 1419,
	210, 1419,
	211, 1419,
	212, 1419,
	213, 1419,
	214, 1419,
	216, 1419,
	217, 1419,
	218, 1419,
	219, 1419,
	220, 1419,
	222, 1419,
	223, 1419,
	224, 1419,
	225, 1419,
	226, 1419,
	227, 1419,
	228, 1419,
	229, 1419,
	231, 1419,
	232, 1419,
	233, 1419,
	234, 1419,
	235, 1419,
	236, 1419,
	237, 1419,
	238, 1419,
	239, 1419,
	240, 1419,
	241, 1419,
	242, 1419,
	244, 1419,
	245, 1419,
	246, 1419,
	247, 1419,
	248, 1419,
	249, 1419,
	250, 1419,
	251, 1419,
	252, 1419,
	253, 1419,
	254, 1419,
	256, 1419,
	257, 1419,
	258, 1419,
	259, 1419,
	260, 1419,
	262, 1419,
	263, 1419,
	264, 1419,
	265, 1419,
	266, 1419,
	267, 1419,
	268, 1419,
	269, 1419,
	270, 1419,
	272, 1419,
	273, 1419,
	274, 1419,
	275, 1419,
	276, 1419,
	277, 1419,
	278, 1419,
	279, 1419,
	280, 1419,
	281, 1419,
	283, 1419,
	285, 1419,
	286, 1419,
	287, 1419,
	288, 1419,
	289, 1419,
	290, 1419,
	291, 1419,
	293, 1419,
	294, 1419,
	295, 1419,
	298, 1419,
	299, 1419,
	300, 1419,
	301, 1419,
	303, 1419,
	304, 1419,
	305, 1419,
	306, 1419,
	309, 1419,
	310, 1419,
	311, 1419,
	312, 1419,
	314, 1419,
	316, 1419,
	317, 1419,
	318, 1419,
	319, 1419,
	320, 1419,
	321, 1419,
	324, 1419,
	329, 1419,
	330, 1419,
	331, 1419,
	332, 1419,
	333, 1419,
	334, 1419,
	335, 1419,
	337, 1419,
	338, 1419,
	339, 1419,
	340, 1419,
	342, 1419,
	343, 1419,
	344, 1419,
	345, 1419,
	346, 1419,
	347, 1419,
	348, 1419,
	349, 1419,
	350, 1419,
	352, 1419,
	355, 1419,
	356, 1419,
	359, 1419,
	360, 1419,
	-2, 0,
	-1, 941,
	123, 1346,
	296, 1346,
	339, 1346,
	356, 1346,
	-2, 0,
	-1, 1009,
	112, 679,
	172, 679,
	197, 679,
	-2, 641,
	-1, 1063,
	103, 645,
	112, 645,
	153, 645,
	172, 645,
	197, 645,
	203, 645,
	307, 645,
	-2, 739,
	-1, 1144,
	103, 645,
	112, 645,
	153, 645,
	172, 645,
	197, 645,
	203, 645,
	307, 645,
	-2, 972,
	-1, 1154,
	354, 1173,
	-2, 1161,
	-1, 1171,
	355, 1113,
	-2, 0,
	-1, 1406,
	1, 740,
	70, 740,
	103, 740,
	112, 740,
	124, 740,
	128, 740,
	130, 740,
	144, 740,
	153, 740,
	160, 740,
	169, 740,
	172, 740,
	184, 740,
	197, 740,
	199, 740,
	203, 740,
	243, 740,
	245, 740,
	307, 740,
	315, 740,
	326, 740,
	327, 740,
	336, 740,
	353, 740,
	355, 740,
	357, 740,
	358, 740,
	359, 740,
	-2, 739,
	-1, 1466,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 888,
	-1, 1467,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 889,
	-1, 1468,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 890,
	-1, 1472,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 894,
	-1, 1473,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 895,
	-1, 1474,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 896,
	-1, 1477,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 901,
	-1, 1483,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 903,
	-1, 1485,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 907,
	-1, 1486,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 908,
	-1, 1487,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 909,
	-1, 1488,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 910,
	-1, 1514,
	208, 1055,
	-2, 1058,
	-1, 1556,
	123, 1095,
	354, 1196,
	-2, 1189,
	-1, 1557,
	123, 1096,
	-2, 1363,
	-1, 1558,
	123, 1097,
	-2, 1270,
	-1, 1559,
	123, 1098,
	-2, 1233,
	-1, 1560,
	123, 1099,
	-2, 1250,
	-1, 1561,
	123, 1100,
	-2, 1269,
	-1, 1562,
	123, 1101,
	-2, 1321,
	-1, 1768,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 902,
	-1, 1769,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 904,
	-1, 1774,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 905,
	-1, 1792,
	208, 1054,
	-2, 1057,
	-1, 2003,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 906,
	-1, 2008,
	156, 0,
	-2, 922,
	-1, 2018,
	208, 1056,
	-2, 1059,
	-1, 2060,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 949,
	-1, 2061,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 950,
	-1, 2062,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 951,
	-1, 2066,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 955,
	-1, 2067,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 956,
	-1, 2068,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 957,
	-1, 2194,
	156, 0,
	-2, 923,
	-1, 2197,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 926,
	-1, 2198,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 928,
	-1, 2299,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 927,
	-1, 2300,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 929,
	-1, 2307,
	156, 0,
	-2, 958,
	-1, 2362,
	156, 0,
	-2, 959,
	-1, 2433,
	36, 0,
	138, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 1366,
}

const sqlPrivate = 57344

const sqlLast = 42053

var sqlAct = [...]int{

	797, 2432, 2091, 2462, 2416, 2418, 1627, 2385, 2274, 2417,
	1635, 1200, 2431, 667, 1928, 2337, 2037, 1974, 1607, 2235,
	2101, 71, 1693, 2153, 787, 2167, 2124, 2122, 795, 1241,
	1291, 1207, 1292, 723, 468, 1896, 773, 452, 25, 1220,
	173, 1975, 1401, 1898, 173, 1611, 864, 1061, 1723, 1606,
	2254, 1057, 173, 790, 2133, 1038, 2116, 1624, 964, 1858,
	1901, 173, 1702, 1066, 470, 794, 1610, 173, 173, 1150,
	1044, 173, 1203, 1636, 173, 1857, 1803, 1512, 1410, 1419,
	1445, 173, 1710, 1945, 1402, 1442, 438, 1367, 1319, 1689,
	945, 1677, 1522, 611, 675, 115, 1196, 1585, 1500, 1538,
	767, 1497, 1069, 1071, 687, 1039, 944, 1532, 435, 1181,
	772, 1608, 896, 1629, 1552, 1185, 899, 729, 688, 910,
	693, 1139, 1614, 766, 732, 1375, 173, 173, 1388, 1048,
	584, 711, 889, 116, 173, 1011, 1012, 1317, 679, 1029,
	672, 606, 789, 1013, 164, 117, 460, 886, 1214, 2168,
	169, 1028, 588, 604, 392, 709, 115, 1959, 1791, 1017,
	1960, 173, 173, 173, 173, 948, 1628, 1058, 173, 173,
	1222, 1222, 25, 671, 671, 2459, 2440, 1222, 684, 1091,
	2166, 2428, 38, 1943, 2427, 1650, 2424, 753, 1650, 1650,
	1091, 2412, 2411, 39, 666, 1665, 1665, 726, 2402, 1912,
	1913, 2380, 1658, 2376, 39, 2249, 42, 1091, 676, 1377,
	2368, 2364, 576, 1242, 2166, 1658, 2319, 42, 2316, 2314,
	2166, 2301, 1091, 2166, 715, 1658, 716, 2285, 48, 115,
	949, 1091, 2284, 2262, 950, 2259, 2166, 1091, 2221, 1091,
	2381, 2199, 1650, 2196, 730, 1650, 2188, 1658, 1665, 664,
	1650, 2186, 632, 1443, 2165, 1650, 2146, 59, 2166, 2115,
	1091, 663, 1795, 1605, 60, 608, 61, 1088, 1796, 2110,
	2249, 739, 743, 1605, 749, 1948, 1948, 2012, 737, 741,
	747, 1650, 713, 1955, 1922, 1885, 1376, 1956, 1886, 1091,
	63, 1094, 1095, 64, 1114, 1115, 1116, 1124, 1125, 1126,
	1937, 1875, 1873, 2073, 64, 1876, 1650, 1117, 1872, 1871,
	1794, 1792, 1650, 1650, 1097, 1650, 1650, 1128, 1443, 1094,
	1095, 2015, 1114, 1115, 1116, 1124, 1125, 1126, 1726, 1650,
	1802, 1408, 1650, 1699, 1632, 1117, 1667, 1091, 1096, 1657,
	1650, 1665, 1097, 1658, 1111, 1128, 1649, 1604, 1382, 1091,
	1650, 1605, 1381, 1828, 1829, 1234, 1846, 1847, 1848, 1235,
	1094, 1095, 1886, 1223, 1223, 1692, 1096, 1300, 1675, 2193,
	1223, 1516, 1111, 65, 1033, 751, 923, 134, 921, 2169,
	920, 919, 918, 1097, 65, 917, 916, 915, 914, 913,
	717, 714, 659, 1828, 1829, 658, 1846, 1847, 1848, 1102,
	173, 68, 173, 173, 657, 173, 1843, 1096, 630, 2192,
	173, 131, 68, 629, 131, 690, 173, 628, 1679, 1121,
	1129, 627, 626, 625, 99, 131, 624, 1102, 623, 173,
	173, 173, 173, 173, 757, 99, 1912, 1127, 693, 622,
	133, 621, 855, 133, 620, 1376, 1843, 1121, 1129, 619,
	618, 903, 1119, 617, 133, 616, 615, 614, 1112, 672,
	599, 1834, 1094, 1095, 598, 1127, 597, 426, 1102, 425,
	1535, 424, 423, 131, 422, 407, 132, 1828, 1829, 132,
	1119, 1228, 1221, 1118, 125, 1097, 1112, 125, 1351, 406,
	132, 126, 398, 868, 126, 397, 872, 396, 125, 1849,
	131, 1834, 133, 395, 388, 126, 387, 674, 158, 1096,
	118, 1118, 157, 118, 156, 155, 1718, 1536, 154, 153,
	1844, 152, 892, 892, 118, 151, 743, 1112, 150, 133,
	149, 1113, 148, 888, 1828, 1829, 147, 146, 132, 1849,
	145, 749, 144, 863, 143, 142, 141, 1122, 140, 139,
	138, 137, 136, 135, 1549, 1547, 911, 1828, 1829, 1113,
	1844, 1545, 893, 1537, 1534, 132, 1828, 1829, 1062, 1323,
	1102, 173, 118, 125, 2452, 1122, 959, 2430, 2423, 2390,
	126, 2359, 2317, 2226, 2242, 1834, 2222, 173, 1024, 2214,
	2213, 2212, 2208, 1845, 2207, 2206, 2205, 2132, 2121, 1631,
	1113, 2088, 2083, 2082, 173, 2081, 2023, 1888, 1884, 1880,
	1877, 1865, 1856, 693, 1827, 1120, 1824, 1823, 1108, 1109,
	1110, 1123, 1821, 1107, 1105, 1106, 1098, 1099, 1100, 1101,
	1103, 1104, 1808, 1845, 1807, 693, 1238, 1730, 1539, 1024,
	2223, 1508, 1834, 1120, 1844, 1406, 1108, 1109, 1110, 1123,
	724, 1107, 1105, 1106, 1098, 1099, 1100, 1101, 1103, 1104,
	1158, 173, 1060, 1023, 924, 1834, 1206, 962, 1870, 1059,
	1151, 684, 1142, 2039, 1834, 2403, 1926, 1010, 757, 2371,
	1840, 1841, 1842, 2358, 861, 1839, 1837, 1838, 1830, 1831,
	1832, 1833, 1835, 1836, 1106, 1098, 1099, 1100, 1101, 1103,
	1104, 955, 2357, 2356, 1660, 2348, 2346, 2331, 2330, 173,
	2329, 173, 2309, 2271, 2250, 2229, 1533, 1845, 2219, 2172,
	1840, 1841, 1842, 2099, 1844, 1839, 1837, 1838, 1830, 1831,
	1832, 1833, 1835, 1836, 173, 173, 2097, 1899, 1663, 2241,
	1009, 2096, 932, 2094, 2007, 942, 1983, 1509, 1982, 1963,
	1037, 693, 173, 691, 1688, 672, 1951, 939, 470, 1855,
	131, 1817, 1687, 1816, 1813, 1788, 1783, 1502, 1761, 1756,
	1743, 743, 1094, 1095, 1742, 1042, 1728, 1698, 1008, 1186,
	1189, 1597, 1543, 1089, 1393, 1199, 960, 1193, 1179, 133,
	1178, 1177, 1092, 672, 1176, 1097, 1175, 1845, 1174, 1100,
	1101, 1103, 1104, 1094, 1095, 1173, 1060, 1172, 1171, 664,
	1837, 1838, 1830, 1831, 1832, 1833, 1835, 1836, 1170, 1096,
	1743, 663, 1169, 115, 1168, 132, 1097, 1167, 854, 1020,
	1021, 1166, 1165, 125, 1164, 1163, 1162, 1056, 1155, 1032,
	126, 1143, 1142, 725, 730, 1067, 1036, 938, 927, 907,
	1096, 1030, 2340, 2248, 2201, 2120, 1958, 1954, 1064, 118,
	1394, 2252, 1151, 173, 1716, 1924, 1034, 1140, 954, 1830,
	1831, 1832, 1833, 1835, 1836, 173, 2251, 1094, 1095, 1079,
	1102, 173, 952, 173, 1205, 173, 1828, 1829, 2245, 173,
	1961, 1838, 1830, 1831, 1832, 1833, 1835, 1836, 1062, 1077,
	1097, 1914, 1090, 1832, 1833, 1835, 1836, 1548, 1546, 1443,
	1198, 1102, 1879, 934, 1544, 862, 1878, 1078, 1094, 1095,
	1767, 1239, 1191, 173, 1096, 953, 951, 1192, 1160, 693,
	1111, 173, 1154, 1225, 1929, 1204, 1227, 173, 2255, 1628,
	2040, 1097, 1183, 1184, 1799, 1523, 1311, 1310, 1211, 690,
	685, 1002, 1187, 693, 693, 1182, 1908, 1828, 1829, 1535,
	470, 1970, 1190, 1828, 1829, 1096, 2393, 173, 1307, 1072,
	1112, 1073, 173, 1197, 1060, 1654, 2449, 173, 173, 1934,
	173, 1248, 173, 2180, 173, 1102, 173, 706, 2450, 1588,
	1003, 743, 1668, 1215, 1324, 1215, 2295, 173, 888, 2375,
	2294, 2293, 725, 173, 173, 1316, 1536, 704, 702, 1157,
	1843, 684, 684, 700, 2292, 697, 1998, 994, 1412, 1996,
	1412, 1967, 1925, 412, 1994, 1966, 1411, 1661, 1213, 1812,
	1811, 1314, 173, 1216, 173, 1810, 1809, 173, 1770, 159,
	1653, 952, 1484, 1113, 1112, 1439, 1074, 1350, 1435, 1301,
	173, 1433, 1537, 1534, 427, 1374, 1072, 1420, 1073, 470,
	1325, 1031, 173, 750, 2191, 1834, 173, 1236, 1601, 173,
	1237, 1834, 1600, 173, 1455, 1293, 413, 173, 1294, 1625,
	591, 1298, 173, 1349, 953, 1348, 115, 672, 173, 470,
	1313, 1320, 173, 1396, 1312, 2001, 1285, 470, 592, 1308,
	1339, 2090, 2276, 1881, 1194, 1395, 1328, 1098, 1099, 1100,
	1101, 1103, 1104, 1385, 1499, 1315, 1431, 1113, 1413, 2374,
	162, 1332, 1437, 1441, 1844, 1423, 661, 1539, 2409, 937,
	1844, 1454, 571, 1074, 1217, 431, 1301, 988, 1098, 1099,
	1100, 1101, 1103, 1104, 2033, 1499, 1352, 1539, 1248, 1248,
	1354, 664, 1424, 1426, 664, 664, 1353, 1690, 1691, 593,
	730, 1985, 1371, 1363, 672, 1372, 1364, 1365, 1380, 672,
	1523, 2456, 1481, 1902, 989, 1763, 730, 1758, 163, 1407,
	1386, 1390, 1391, 1001, 1754, 967, 1072, 743, 1073, 1935,
	1064, 2420, 743, 430, 1429, 1416, 400, 1845, 749, 1434,
	173, 1198, 1295, 1845, 1440, 1533, 2449, 173, 1082, 1107,
	1105, 1106, 1098, 1099, 1100, 1101, 1103, 1104, 173, 1539,
	173, 1520, 173, 1933, 1422, 173, 1836, 173, 1347, 173,
	173, 173, 173, 1094, 1095, 1671, 693, 1329, 2471, 1222,
	173, 415, 414, 1333, 933, 1334, 1673, 1335, 1506, 1336,
	1648, 1337, 1630, 1504, 1630, 1992, 1097, 1409, 1104, 594,
	1510, 1507, 1080, 1074, 1180, 2305, 1075, 1674, 1343, 1345,
	2351, 1070, 670, 1620, 1479, 1482, 2313, 404, 2421, 1672,
	1096, 708, 2399, 1563, 707, 1137, 1815, 691, 686, 1839,
	1837, 1838, 1830, 1831, 1832, 1833, 1835, 1836, 1830, 1831,
	1832, 1833, 1835, 1836, 698, 698, 2400, 1478, 1446, 1453,
	699, 1421, 698, 993, 2277, 1642, 1389, 2465, 892, 1405,
	892, 160, 669, 671, 470, 1986, 2128, 1656, 1639, 115,
	1634, 1299, 173, 2419, 2422, 115, 429, 595, 998, 749,
	749, 1102, 1646, 1651, 975, 1645, 2455, 1086, 173, 173,
	173, 1655, 173, 1075, 911, 1652, 1662, 1643, 1676, 1644,
	161, 2448, 389, 1085, 1772, 432, 2446, 943, 1327, 596,
	1279, 173, 671, 2234, 1906, 428, 1622, 1664, 173, 470,
	1766, 930, 1700, 1083, 173, 173, 2161, 1706, 173, 1187,
	936, 1190, 922, 173, 461, 1498, 173, 1184, 1183, 1016,
	1112, 1084, 1480, 999, 173, 1301, 968, 1669, 662, 2476,
	173, 173, 173, 1705, 570, 760, 173, 466, 1902, 173,
	1015, 2162, 948, 462, 2287, 173, 173, 173, 173, 173,
	2286, 2472, 1223, 2217, 173, 115, 173, 421, 1720, 1570,
	173, 1704, 1719, 969, 2269, 2454, 966, 1708, 1709, 1680,
	463, 1714, 1707, 2343, 1729, 2463, 1000, 416, 1681, 749,
	1683, 1736, 743, 1686, 1495, 1682, 1094, 1095, 1755, 1684,
	465, 1248, 1306, 1113, 1760, 782, 668, 1715, 399, 1493,
	1014, 1697, 1701, 1075, 2030, 2176, 948, 949, 730, 1097,
	1969, 950, 2069, 1780, 730, 730, 2179, 1505, 730, 1739,
	1735, 1623, 405, 2178, 1212, 1016, 1201, 401, 1778, 1051,
	2464, 2475, 1731, 1096, 2029, 170, 1304, 402, 390, 393,
	1732, 2157, 948, 2158, 672, 2386, 1342, 408, 1305, 1054,
	2031, 2466, 1753, 2218, 1724, 1015, 433, 1279, 1279, 1801,
	866, 976, 574, 170, 1757, 1387, 582, 865, 1359, 587,
	1489, 949, 1302, 2160, 1052, 950, 613, 2102, 1490, 166,
	1491, 2270, 2163, 1745, 1496, 1107, 1105, 1106, 1098, 1099,
	1100, 1101, 1103, 1104, 1102, 2236, 961, 1744, 591, 1775,
	464, 1773, 1696, 1771, 391, 2175, 2070, 949, 1713, 1776,
	1384, 950, 2071, 1781, 579, 1014, 592, 672, 1383, 573,
	1725, 712, 712, 2177, 1787, 1539, 173, 948, 669, 393,
	885, 1047, 883, 874, 1798, 2092, 173, 2227, 173, 1360,
	173, 2267, 1765, 173, 2134, 455, 33, 173, 1946, 1542,
	1053, 1740, 173, 1112, 173, 467, 393, 393, 745, 393,
	2159, 173, 2308, 170, 754, 997, 2268, 1887, 3, 1889,
	986, 417, 984, 672, 173, 693, 1890, 593, 2216, 1893,
	454, 32, 1859, 1248, 1860, 1051, 693, 173, 590, 2006,
	591, 1492, 2000, 982, 1882, 1822, 693, 980, 1494, 802,
	1862, 1863, 1864, 1916, 1917, 1054, 1918, 1921, 592, 1782,
	1904, 418, 1666, 857, 978, 1910, 972, 173, 1930, 856,
	1777, 1049, 1603, 453, 29, 1438, 1113, 1779, 451, 22,
	1052, 755, 1248, 1891, 173, 881, 1883, 1432, 756, 1006,
	173, 419, 1005, 420, 696, 1050, 928, 752, 1907, 173,
	173, 1828, 1829, 1894, 684, 450, 19, 1915, 1340, 1331,
	1712, 992, 1197, 1161, 1541, 1920, 2415, 1964, 2383, 593,
	578, 1197, 2020, 2150, 1047, 572, 1278, 594, 1931, 1932,
	33, 1146, 1957, 884, 1936, 882, 996, 1990, 1981, 1938,
	1897, 985, 1980, 983, 1962, 1939, 1988, 1953, 1968, 1999,
	1941, 448, 18, 735, 1895, 1944, 1053, 1626, 1947, 1989,
	1949, 1991, 1950, 115, 981, 32, 449, 17, 979, 1105,
	1106, 1098, 1099, 1100, 1101, 1103, 1104, 1942, 1051, 1979,
	442, 13, 1619, 2009, 1965, 977, 173, 971, 2025, 2026,
	2027, 1972, 1231, 1740, 730, 444, 16, 1230, 1054, 1229,
	1226, 174, 1224, 1993, 1087, 595, 880, 1248, 29, 1834,
	443, 14, 1081, 22, 1049, 441, 12, 701, 703, 594,
	1076, 2324, 1233, 1052, 2450, 2247, 1711, 447, 10, 991,
	1279, 720, 1018, 440, 8, 2246, 2019, 596, 1050, 2016,
	19, 1322, 1923, 1248, 1248, 613, 2117, 870, 613, 2326,
	875, 721, 1248, 1248, 1694, 878, 456, 173, 1428, 173,
	2109, 393, 446, 6, 2041, 471, 173, 1232, 1844, 693,
	2043, 2046, 2353, 2098, 613, 613, 393, 900, 754, 2048,
	2032, 2034, 2035, 173, 173, 1248, 18, 2076, 2111, 2169,
	2095, 445, 5, 1278, 1278, 589, 1412, 595, 1296, 1053,
	173, 17, 1427, 970, 2077, 1019, 1412, 2361, 173, 439,
	4, 2103, 1425, 2135, 470, 13, 1695, 1022, 1436, 173,
	1430, 694, 173, 2093, 722, 2382, 580, 2104, 2106, 596,
	16, 2232, 470, 173, 173, 2130, 2108, 173, 173, 173,
	2138, 1845, 1633, 2105, 1621, 14, 2113, 1704, 2131, 2118,
	12, 1618, 2145, 1373, 173, 2114, 2112, 1297, 799, 173,
	1240, 173, 10, 173, 173, 173, 2142, 173, 8, 173,
	2173, 693, 2174, 2170, 2137, 2144, 2139, 1981, 2141, 2469,
	2474, 1980, 2136, 2261, 2149, 1828, 1829, 1094, 1095, 1026,
	1025, 2140, 2203, 1639, 730, 1094, 1095, 6, 2119, 2089,
	2036, 2190, 2028, 1446, 2044, 1094, 1095, 2195, 1026, 1927,
	173, 1874, 1446, 2049, 1721, 1602, 613, 1599, 1979, 1399,
	1598, 1531, 1279, 1148, 1027, 1892, 5, 1158, 1097, 730,
	1156, 1248, 931, 1839, 1837, 1838, 1830, 1831, 1832, 1833,
	1835, 1836, 1096, 1004, 4, 2080, 995, 990, 987, 613,
	973, 935, 1096, 660, 2275, 459, 853, 1330, 974, 1717,
	1392, 2398, 2209, 1814, 2336, 2304, 1540, 173, 173, 1159,
	52, 1279, 1977, 2183, 693, 776, 2215, 2187, 2151, 1971,
	1613, 1612, 2228, 473, 1309, 2230, 798, 2233, 678, 1981,
	1554, 1447, 858, 1980, 1981, 800, 1245, 801, 1980, 1246,
	1188, 788, 1243, 1513, 908, 1637, 393, 1146, 1503, 1521,
	1797, 1517, 1152, 768, 780, 1525, 2237, 2231, 2243, 779,
	472, 173, 1518, 173, 2253, 470, 173, 1555, 1555, 1568,
	1979, 1580, 2238, 2239, 173, 1979, 926, 1592, 1593, 1595,
	470, 1722, 2244, 1905, 2240, 1358, 1685, 1355, 1987, 403,
	1825, 906, 1577, 1569, 587, 1565, 712, 2260, 2258, 2265,
	2279, 1981, 1007, 2281, 1043, 1980, 2263, 1138, 1638, 958,
	1911, 1659, 1035, 1366, 2280, 719, 695, 718, 2278, 393,
	393, 956, 1303, 1670, 1131, 1198, 2297, 1130, 2303, 705,
	2345, 2290, 2291, 947, 946, 1202, 1279, 170, 2296, 1738,
	2470, 2352, 1979, 1984, 1248, 173, 2392, 130, 693, 127,
	129, 128, 173, 758, 859, 1764, 1278, 2315, 79, 2310,
	173, 173, 693, 693, 1981, 31, 173, 30, 1980, 98,
	2325, 173, 1279, 1279, 97, 96, 95, 94, 173, 694,
	2318, 1279, 1279, 1248, 2273, 2323, 2332, 2347, 2333, 2327,
	2321, 93, 92, 91, 2334, 2335, 90, 89, 2341, 88,
	87, 86, 85, 173, 173, 1979, 2322, 2350, 84, 2342,
	83, 82, 81, 2339, 1279, 609, 78, 77, 2349, 76,
	75, 28, 24, 102, 173, 23, 21, 27, 2360, 26,
	2369, 15, 693, 2367, 9, 20, 57, 173, 2370, 58,
	56, 693, 693, 55, 54, 11, 50, 49, 393, 2363,
	47, 46, 45, 44, 2373, 2320, 7, 173, 101, 173,
	1210, 672, 173, 41, 470, 40, 393, 100, 393, 113,
	393, 2378, 2379, 1248, 1218, 110, 112, 2388, 109, 111,
	2404, 114, 2389, 2406, 106, 107, 108, 2405, 105, 104,
	2372, 37, 173, 2410, 36, 35, 34, 2, 2394, 2407,
	1, 0, 0, 2408, 2289, 0, 1981, 2413, 170, 2414,
	1980, 0, 0, 2425, 173, 0, 170, 0, 2439, 0,
	173, 2429, 613, 2437, 0, 0, 173, 0, 0, 38,
	2441, 0, 2438, 2445, 2366, 925, 2442, 2443, 2447, 0,
	39, 929, 1362, 2451, 0, 2453, 0, 1979, 1278, 0,
	0, 0, 613, 42, 694, 0, 0, 613, 2461, 2460,
	1279, 0, 170, 613, 2467, 613, 2468, 613, 0, 613,
	0, 613, 2391, 2473, 0, 48, 694, 0, 0, 0,
	0, 2477, 1341, 0, 0, 0, 0, 0, 613, 613,
	0, 0, 0, 0, 0, 0, 0, 1278, 0, 0,
	0, 0, 1786, 2161, 59, 0, 2154, 0, 0, 1789,
	0, 60, 581, 61, 2152, 0, 0, 587, 2156, 712,
	0, 0, 754, 457, 0, 0, 0, 1805, 1806, 0,
	1639, 0, 458, 0, 695, 393, 0, 63, 2162, 0,
	64, 0, 0, 458, 0, 0, 0, 1404, 0, 0,
	0, 393, 0, 0, 393, 0, 0, 0, 1417, 0,
	2155, 0, 393, 0, 0, 0, 0, 393, 0, 0,
	0, 0, 0, 393, 0, 1854, 0, 1444, 0, 461,
	0, 1040, 1040, 0, 0, 0, 0, 1867, 1045, 0,
	461, 0, 694, 0, 0, 0, 1571, 0, 0, 471,
	0, 0, 466, 0, 0, 0, 0, 0, 462, 0,
	0, 0, 0, 466, 0, 0, 0, 1247, 0, 462,
	65, 0, 1278, 0, 1132, 1133, 1134, 1135, 1136, 0,
	0, 1281, 0, 1279, 1145, 463, 0, 1280, 2157, 0,
	2158, 0, 0, 0, 1153, 0, 463, 0, 68, 0,
	0, 0, 0, 0, 0, 465, 0, 0, 1278, 1278,
	0, 131, 0, 0, 0, 1338, 465, 1278, 1278, 0,
	2160, 99, 1279, 0, 0, 0, 0, 0, 0, 2163,
	0, 0, 0, 0, 0, 1609, 0, 0, 0, 0,
	133, 0, 754, 0, 0, 0, 0, 0, 0, 0,
	1278, 0, 0, 393, 0, 1641, 0, 613, 0, 695,
	613, 0, 613, 0, 393, 393, 1647, 754, 0, 0,
	0, 0, 0, 0, 0, 1417, 132, 0, 0, 0,
	0, 695, 0, 0, 125, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1995, 2159, 0, 0,
	118, 1997, 1279, 0, 0, 464, 0, 0, 0, 0,
	694, 0, 0, 0, 777, 72, 464, 0, 0, 0,
	0, 0, 0, 0, 1247, 1247, 0, 0, 2013, 0,
	0, 0, 0, 0, 694, 694, 0, 0, 1281, 1281,
	0, 471, 0, 0, 1280, 1280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1678, 0, 0,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 467, 0, 393, 393, 393, 72, 393, 0, 0,
	0, 0, 0, 0, 0, 0, 1278, 695, 0, 0,
	0, 0, 0, 0, 472, 2074, 393, 0, 0, 0,
	0, 0, 0, 393, 0, 0, 2084, 0, 0, 393,
	393, 0, 0, 393, 0, 0, 0, 1356, 1404, 1361,
	0, 1404, 0, 0, 0, 1368, 0, 0, 0, 1727,
	665, 0, 0, 673, 0, 393, 1733, 1734, 0, 0,
	471, 1417, 0, 0, 1741, 0, 0, 0, 731, 72,
	1746, 1747, 1749, 1751, 1752, 0, 0, 0, 0, 393,
	0, 1759, 0, 1571, 1571, 1762, 1244, 0, 0, 0,
	471, 0, 0, 0, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 1784, 1785, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464,
	1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474,
	1475, 1476, 1477, 0, 1483, 0, 1485, 1486, 1487, 1488,
	0, 0, 0, 0, 0, 0, 0, 0, 1571, 1571,
	1571, 0, 0, 1511, 0, 0, 0, 0, 0, 0,
	1145, 0, 0, 0, 0, 0, 0, 0, 0, 1278,
	0, 0, 1851, 1852, 1853, 695, 0, 0, 1550, 1551,
	0, 0, 1567, 0, 1579, 1581, 1586, 1589, 1590, 1591,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 695,
	695, 0, 0, 0, 0, 0, 472, 0, 1278, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 694, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 393, 0, 1244, 1244, 0, 0, 0, 0, 0,
	0, 1210, 0, 1210, 0, 613, 0, 1247, 393, 0,
	0, 0, 1900, 0, 0, 0, 0, 393, 0, 1909,
	0, 1281, 0, 0, 0, 0, 393, 1280, 0, 0,
	0, 0, 0, 0, 0, 2257, 0, 0, 0, 1678,
	0, 0, 0, 0, 0, 0, 0, 0, 1278, 0,
	0, 0, 1678, 0, 0, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 471, 0, 0, 0, 0,
	0, 0, 2283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 393, 0, 0, 472, 0, 0, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 1571, 1571, 393,
	0, 0, 0, 0, 0, 1404, 0, 0, 0, 0,
	0, 0, 673, 0, 754, 1404, 0, 0, 0, 0,
	471, 2004, 2005, 0, 0, 0, 0, 0, 0, 1976,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1040,
	0, 0, 0, 0, 1045, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1571, 1571, 1571, 1571,
	1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
	1571, 1571, 1571, 1571, 1571, 0, 1571, 0, 0, 0,
	2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
	2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 1247,
	2072, 2038, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1281, 0, 0, 0, 0, 0, 1280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 695, 0, 0, 0, 0, 0, 0, 0,
	0, 1768, 1769, 0, 0, 0, 0, 1774, 1247, 0,
	0, 0, 0, 0, 0, 0, 2395, 2396, 2397, 0,
	0, 2401, 1281, 0, 0, 0, 0, 0, 1280, 0,
	0, 0, 1417, 0, 1210, 0, 0, 0, 0, 1793,
	0, 2100, 0, 0, 0, 0, 1800, 0, 0, 1804,
	0, 0, 0, 0, 0, 0, 0, 0, 393, 393,
	0, 0, 0, 0, 0, 0, 1818, 0, 0, 0,
	0, 0, 0, 0, 0, 2125, 1244, 0, 0, 0,
	472, 0, 0, 2127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 754, 1145, 0,
	0, 0, 0, 0, 0, 1586, 1586, 1586, 1404, 754,
	665, 0, 2147, 2148, 1417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1976, 754,
	0, 0, 0, 1247, 2181, 472, 2182, 0, 393, 2184,
	2185, 0, 393, 0, 2189, 0, 0, 1281, 0, 0,
	0, 1903, 0, 1280, 0, 0, 694, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 694, 1063, 1247,
	1247, 0, 0, 1919, 0, 0, 0, 694, 1247, 1247,
	0, 0, 0, 1281, 1281, 2210, 0, 0, 0, 1280,
	1280, 0, 1281, 1281, 0, 0, 0, 0, 1280, 1280,
	0, 0, 0, 0, 1141, 0, 1144, 0, 0, 0,
	1940, 1247, 0, 1149, 0, 1368, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1281, 0, 0, 0, 0,
	0, 1280, 0, 0, 0, 1952, 0, 0, 0, 0,
	1976, 0, 754, 1609, 0, 1976, 0, 0, 1571, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1973, 0, 0, 1244, 0,
	0, 0, 2272, 0, 0, 0, 0, 0, 0, 0,
	0, 1828, 1829, 0, 1846, 1847, 1848, 0, 0, 0,
	2002, 0, 0, 2003, 0, 0, 1417, 2011, 2264, 0,
	0, 2266, 1571, 0, 0, 2008, 0, 0, 0, 393,
	0, 0, 1976, 0, 2017, 0, 0, 1244, 0, 0,
	0, 0, 2021, 0, 0, 1919, 2307, 0, 0, 0,
	0, 0, 0, 0, 1843, 0, 0, 2298, 0, 0,
	0, 0, 0, 0, 0, 2045, 0, 0, 0, 2047,
	0, 0, 0, 0, 0, 0, 0, 1247, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1281, 0, 0, 0, 1976, 0, 1280, 0, 0,
	393, 0, 2078, 2079, 0, 0, 0, 754, 0, 1834,
	0, 2085, 2086, 2087, 1571, 2125, 2125, 0, 0, 0,
	694, 2338, 0, 0, 0, 0, 1404, 0, 0, 0,
	0, 695, 0, 1210, 0, 0, 0, 0, 2362, 0,
	0, 0, 695, 0, 0, 1040, 72, 1849, 0, 0,
	0, 0, 695, 0, 0, 0, 0, 1045, 2354, 2355,
	0, 0, 1244, 0, 0, 471, 0, 0, 1844, 0,
	0, 0, 665, 0, 0, 665, 665, 0, 0, 393,
	0, 0, 0, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 2377, 0, 0, 0, 0, 0, 1244, 1244,
	0, 0, 0, 0, 731, 0, 0, 1244, 1244, 0,
	0, 0, 2387, 0, 754, 0, 0, 393, 0, 0,
	1063, 2171, 694, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 1976, 0, 72,
	1244, 1845, 0, 0, 0, 0, 0, 2338, 0, 2194,
	1247, 0, 0, 2197, 2198, 0, 0, 0, 2200, 0,
	0, 0, 0, 0, 1281, 2202, 0, 2204, 0, 754,
	1280, 0, 0, 0, 0, 393, 0, 0, 0, 0,
	0, 2444, 0, 2211, 1501, 0, 0, 0, 0, 1247,
	0, 0, 0, 0, 0, 0, 0, 673, 0, 0,
	0, 0, 1144, 1281, 0, 0, 0, 0, 0, 1280,
	0, 0, 0, 0, 0, 0, 2220, 0, 0, 0,
	0, 0, 0, 0, 0, 694, 0, 0, 1840, 1841,
	1842, 0, 0, 1839, 1837, 1838, 1830, 1831, 1832, 1833,
	1835, 1836, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1094, 1095, 0,
	1114, 1115, 1116, 1124, 1125, 1126, 0, 0, 0, 72,
	0, 72, 0, 1117, 0, 695, 471, 2256, 0, 1247,
	1097, 0, 0, 1128, 0, 0, 1244, 0, 0, 72,
	0, 471, 0, 1281, 0, 72, 0, 0, 0, 1280,
	0, 0, 0, 0, 1096, 0, 0, 0, 0, 0,
	1111, 0, 0, 0, 1828, 1829, 0, 1846, 1847, 1848,
	472, 2288, 0, 0, 0, 0, 0, 0, 0, 0,
	2010, 0, 0, 0, 0, 2299, 2300, 0, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 694,
	0, 0, 0, 0, 0, 1102, 2312, 1843, 0, 0,
	0, 0, 0, 694, 694, 0, 0, 695, 0, 0,
	0, 0, 0, 0, 0, 1121, 1129, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 1127, 1094, 1095, 0, 1114, 1115, 1116,
	1124, 1125, 1126, 0, 2344, 0, 0, 0, 1119, 0,
	1117, 0, 1834, 0, 1112, 0, 0, 1097, 0, 0,
	1128, 0, 731, 0, 0, 0, 0, 0, 731, 731,
	0, 0, 731, 694, 0, 0, 0, 0, 0, 1118,
	0, 1096, 694, 694, 0, 0, 0, 1111, 0, 1244,
	1849, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1045, 0, 0, 471, 0, 0, 0, 0,
	695, 1844, 0, 0, 0, 72, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 1113, 1244, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1102, 1122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 472, 1121, 1129, 0, 0, 2426, 1501, 0, 0,
	0, 0, 2436, 2436, 0, 0, 472, 0, 0, 0,
	1127, 0, 0, 0, 1845, 0, 0, 1144, 0, 0,
	0, 0, 0, 0, 0, 1119, 0, 0, 0, 0,
	0, 1112, 0, 0, 0, 0, 2436, 0, 0, 0,
	0, 1120, 0, 0, 1108, 1109, 1110, 1123, 1244, 1107,
	1105, 1106, 1098, 1099, 1100, 1101, 1103, 1104, 0, 0,
	0, 0, 0, 0, 0, 0, 1869, 0, 0, 0,
	0, 0, 2436, 0, 695, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 695, 695,
	1144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1840, 1841, 1842, 1113, 0, 1839, 1837, 1838, 1830,
	1831, 1832, 1833, 1835, 1836, 0, 0, 0, 0, 0,
	1122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 673, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 695, 0,
	0, 0, 0, 0, 0, 0, 0, 695, 695, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1120, 0,
	472, 1108, 1109, 1110, 1123, 0, 1107, 1105, 1106, 1098,
	1099, 1100, 1101, 1103, 1104, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 1530, 0, 796, 785, 786,
	783, 784, 775, 0, 0, 0, 0, 0, 731, 0,
	0, 0, 0, 175, 176, 1527, 177, 0, 0, 0,
	0, 813, 778, 0, 0, 0, 178, 179, 180, 332,
	828, 334, 829, 181, 830, 831, 0, 182, 338, 339,
	183, 184, 781, 812, 832, 833, 342, 0, 185, 824,
	0, 804, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 475, 193, 194, 195, 0, 805, 806,
	808, 0, 807, 809, 196, 197, 394, 198, 834, 199,
	835, 836, 0, 200, 0, 201, 0, 202, 1528, 0,
	827, 204, 0, 205, 0, 0, 0, 769, 206, 207,
	208, 814, 815, 792, 0, 0, 209, 210, 837, 838,
	839, 0, 211, 0, 212, 0, 0, 476, 0, 213,
	825, 0, 354, 0, 214, 215, 216, 217, 218, 821,
	823, 478, 0, 222, 0, 219, 0, 477, 220, 840,
	221, 841, 842, 843, 844, 845, 0, 803, 0, 479,
	223, 224, 225, 480, 226, 227, 228, 0, 230, 229,
	0, 826, 481, 231, 482, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 483, 239, 240,
	242, 241, 764, 0, 793, 822, 243, 846, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 484,
	249, 485, 816, 250, 251, 252, 253, 254, 731, 255,
	817, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	847, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 486, 278,
	279, 770, 280, 731, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 810, 292, 281, 282, 293, 487,
	294, 848, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 849, 299, 300, 818, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 850, 851, 0,
	0, 311, 312, 819, 820, 791, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 811, 321, 0, 384,
	322, 323, 324, 385, 852, 1526, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 765, 0, 0,
	0, 0, 0, 763, 0, 0, 0, 0, 761, 762,
	1529, 0, 0, 0, 0, 0, 0, 771, 1524, 0,
	0, 0, 0, 774, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 469, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2328, 0, 175, 176, 488, 177, 489, 490, 491, 492,
	331, 493, 494, 495, 496, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 497, 182, 338, 339, 183,
	184, 498, 499, 340, 341, 342, 500, 185, 343, 501,
	474, 502, 186, 187, 188, 0, 189, 503, 190, 191,
	192, 504, 475, 193, 194, 195, 505, 506, 508, 507,
	509, 510, 511, 196, 197, 394, 198, 344, 199, 345,
	346, 512, 200, 513, 201, 514, 202, 515, 516, 203,
	204, 517, 205, 518, 1144, 519, 347, 206, 207, 208,
	348, 349, 520, 521, 522, 209, 210, 350, 351, 352,
	0, 211, 523, 212, 524, 525, 476, 526, 213, 353,
	527, 354, 528, 214, 215, 216, 217, 218, 355, 356,
	478, 529, 222, 530, 219, 531, 477, 220, 357, 221,
	358, 359, 360, 361, 362, 532, 363, 533, 479, 223,
	224, 225, 480, 226, 227, 228, 534, 230, 229, 535,
	364, 481, 231, 482, 536, 232, 537, 538, 233, 0,
	234, 235, 236, 238, 365, 237, 483, 239, 240, 242,
	241, 539, 540, 541, 366, 243, 367, 244, 245, 542,
	246, 543, 544, 247, 545, 546, 248, 368, 484, 249,
	485, 369, 250, 251, 252, 253, 254, 547, 255, 370,
	256, 371, 257, 548, 258, 259, 260, 261, 262, 372,
	263, 264, 549, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 550, 277, 486, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 551, 289, 374,
	288, 290, 291, 552, 292, 281, 282, 293, 487, 294,
	375, 376, 295, 553, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 554, 303, 555, 304, 305, 306,
	307, 308, 309, 310, 556, 379, 380, 381, 557, 558,
	311, 312, 382, 383, 559, 313, 314, 315, 316, 560,
	561, 317, 318, 319, 320, 562, 321, 563, 384, 322,
	323, 324, 385, 386, 564, 565, 325, 566, 567, 568,
	569, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 469, 0,
	0, 0, 0, 0, 1397, 0, 0, 0, 0, 0,
	0, 0, 0, 1398, 175, 176, 488, 177, 489, 490,
	491, 492, 331, 493, 494, 495, 496, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 497, 182, 338,
	339, 183, 184, 498, 499, 340, 341, 342, 500, 185,
	343, 501, 474, 502, 186, 187, 188, 0, 189, 503,
	190, 191, 192, 504, 475, 193, 194, 195, 505, 506,
	508, 507, 509, 510, 511, 196, 197, 394, 198, 344,
	199, 345, 346, 512, 200, 513, 201, 514, 202, 515,
	516, 203, 204, 517, 205, 518, 0, 519, 347, 206,
	207, 208, 348, 349, 520, 521, 522, 209, 210, 350,
	351, 352, 0, 211, 523, 212, 524, 525, 476, 526,
	213, 353, 527, 354, 528, 214, 215, 216, 217, 218,
	355, 356, 478, 529, 222, 530, 219, 531, 477, 220,
	357, 221, 358, 359, 360, 361, 362, 532, 363, 533,
	479, 223, 224, 225, 480, 226, 227, 228, 534, 230,
	229, 535, 364, 481, 231, 482, 536, 232, 537, 538,
	233, 0, 234, 235, 236, 238, 365, 237, 483, 239,
	240, 242, 241, 539, 540, 541, 366, 243, 367, 244,
	245, 542, 246, 543, 544, 247, 545, 546, 248, 368,
	484, 249, 485, 369, 250, 251, 252, 253, 254, 547,
	255, 370, 256, 371, 257, 548, 258, 259, 260, 261,
	262, 372, 263, 264, 549, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 550, 277, 486,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 551,
	289, 374, 288, 290, 291, 552, 292, 281, 282, 293,
	487, 294, 375, 376, 295, 553, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 554, 303, 555, 304,
	305, 306, 307, 308, 309, 310, 556, 379, 380, 381,
	557, 558, 311, 312, 382, 383, 559, 313, 314, 315,
	316, 560, 561, 317, 318, 319, 320, 562, 321, 563,
	384, 322, 323, 324, 385, 386, 564, 565, 325, 566,
	567, 568, 569, 326, 327, 328, 329, 330, 0, 0,
	0, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2143, 175, 176, 488,
	177, 489, 490, 491, 492, 331, 493, 494, 495, 496,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	497, 182, 338, 339, 183, 184, 498, 499, 340, 341,
	342, 500, 185, 343, 501, 474, 502, 186, 187, 188,
	0, 189, 503, 190, 191, 192, 504, 475, 193, 194,
	195, 505, 506, 508, 507, 509, 510, 511, 196, 197,
	394, 198, 344, 199, 345, 346, 512, 200, 513, 201,
	514, 202, 515, 516, 203, 204, 517, 205, 518, 0,
	519, 347, 206, 207, 208, 348, 349, 520, 521, 522,
	209, 210, 350, 351, 352, 0, 211, 523, 212, 524,
	525, 476, 526, 213, 353, 527, 354, 528, 214, 215,
	216, 217, 218, 355, 356, 478, 529, 222, 530, 219,
	531, 477, 220, 357, 221, 358, 359, 360, 361, 362,
	532, 363, 533, 479, 223, 224, 225, 480, 226, 227,
	228, 534, 230, 229, 535, 364, 481, 231, 482, 536,
	232, 537, 538, 233, 0, 234, 235, 236, 238, 365,
	237, 483, 239, 240, 242, 241, 539, 540, 541, 366,
	243, 367, 244, 245, 542, 246, 543, 544, 247, 545,
	546, 248, 368, 484, 249, 485, 369, 250, 251, 252,
	253, 254, 547, 255, 370, 256, 371, 257, 548, 258,
	259, 260, 261, 262, 372, 263, 264, 549, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	550, 277, 486, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 551, 289, 374, 288, 290, 291, 552, 292,
	281, 282, 293, 487, 294, 375, 376, 295, 553, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 554,
	303, 555, 304, 305, 306, 307, 308, 309, 310, 556,
	379, 380, 381, 557, 558, 311, 312, 382, 383, 559,
	313, 314, 315, 316, 560, 561, 317, 318, 319, 320,
	562, 321, 563, 384, 322, 323, 324, 385, 386, 564,
	565, 325, 566, 567, 568, 569, 326, 327, 328, 329,
	330, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1093, 0, 0, 175, 176, 488,
	177, 489, 490, 491, 492, 331, 493, 494, 495, 496,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	497, 182, 338, 339, 183, 184, 498, 499, 340, 341,
	342, 500, 185, 343, 501, 474, 502, 186, 187, 188,
	0, 189, 503, 190, 191, 192, 504, 475, 193, 194,
	195, 505, 506, 508, 507, 509, 510, 511, 196, 197,
	394, 198, 344, 199, 345, 346, 512, 200, 513, 201,
	514, 202, 515, 516, 203, 204, 517, 205, 518, 0,
	519, 347, 206, 207, 208, 348, 349, 520, 521, 522,
	209, 210, 350, 351, 352, 0, 211, 523, 212, 524,
	525, 476, 526, 213, 353, 527, 354, 528, 214, 215,
	216, 217, 218, 355, 356, 478, 529, 222, 530, 219,
	531, 477, 220, 357, 221, 358, 359, 360, 361, 362,
	532, 363, 533, 479, 223, 224, 225, 480, 226, 227,
	228, 534, 230, 229, 535, 364, 481, 231, 482, 536,
	232, 537, 538, 233, 0, 234, 235, 236, 238, 365,
	237, 483, 239, 240, 242, 241, 539, 540, 541, 366,
	243, 367, 244, 245, 542, 246, 543, 544, 247, 545,
	546, 248, 368, 484, 249, 485, 369, 250, 251, 252,
	253, 254, 547, 255, 370, 256, 371, 257, 548, 258,
	259, 260, 261, 262, 372, 263, 264, 549, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	550, 277, 486, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 551, 289, 374, 288, 290, 291, 552, 292,
	281, 282, 293, 487, 294, 375, 376, 295, 553, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 554,
	303, 555, 304, 305, 306, 307, 308, 309, 310, 556,
	379, 380, 381, 557, 558, 311, 312, 382, 383, 559,
	313, 314, 315, 316, 560, 561, 317, 318, 319, 320,
	562, 321, 563, 384, 322, 323, 324, 385, 386, 564,
	565, 325, 566, 567, 568, 569, 326, 327, 328, 329,
	330, 796, 785, 786, 783, 784, 775, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 813, 778, 0, 0, 0,
	178, 179, 180, 332, 828, 334, 829, 181, 830, 831,
	0, 182, 338, 339, 183, 184, 781, 812, 832, 833,
	342, 0, 185, 824, 0, 804, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 475, 193, 194,
	195, 0, 805, 806, 808, 0, 807, 809, 196, 197,
	394, 198, 834, 199, 835, 836, 1046, 200, 0, 201,
	0, 202, 0, 0, 827, 204, 0, 205, 0, 0,
	0, 769, 206, 207, 208, 814, 815, 792, 0, 0,
	209, 210, 837, 838, 839, 0, 211, 0, 212, 0,
	0, 476, 0, 213, 825, 0, 354, 0, 214, 215,
	216, 217, 218, 821, 823, 478, 0, 222, 0, 219,
	0, 477, 220, 840, 221, 841, 842, 843, 844, 845,
	0, 803, 0, 479, 223, 224, 225, 480, 226, 227,
	228, 0, 230, 229, 0, 826, 481, 231, 482, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 483, 239, 240, 242, 241, 764, 0, 793, 822,
	243, 846, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 484, 249, 485, 816, 250, 251, 252,
	253, 254, 0, 255, 817, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 847, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 486, 278, 279, 770, 280, 0, 284, 285,
	286, 287, 131, 289, 374, 288, 290, 291, 810, 292,
	281, 282, 293, 487, 294, 848, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 849, 299, 300, 818, 0,
	303, 133, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 850, 851, 0, 0, 311, 312, 819, 820, 791,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	811, 321, 0, 384, 322, 323, 324, 912, 852, 0,
	0, 325, 0, 0, 0, 125, 326, 327, 328, 329,
	330, 765, 126, 0, 0, 0, 0, 763, 0, 0,
	0, 0, 761, 762, 0, 0, 0, 0, 0, 0,
	0, 1147, 0, 0, 0, 0, 674, 774, 796, 785,
	786, 783, 784, 775, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 813, 778, 0, 0, 0, 178, 179, 180,
	332, 828, 334, 829, 181, 830, 831, 0, 182, 338,
	339, 183, 184, 781, 812, 832, 833, 342, 0, 185,
	824, 0, 804, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 475, 193, 194, 195, 0, 805,
	806, 808, 0, 807, 809, 196, 197, 394, 198, 834,
	199, 835, 836, 0, 200, 0, 201, 0, 202, 0,
	0, 827, 204, 0, 205, 0, 0, 0, 769, 206,
	207, 208, 814, 815, 792, 0, 0, 209, 210, 837,
	838, 839, 0, 211, 0, 212, 0, 0, 476, 0,
	213, 825, 0, 354, 0, 214, 215, 216, 217, 218,
	821, 823, 478, 0, 222, 0, 219, 0, 477, 220,
	840, 221, 841, 842, 843, 844, 845, 0, 803, 0,
	479, 223, 224, 225, 480, 226, 227, 228, 0, 230,
	229, 0, 826, 481, 231, 482, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 483, 239,
	240, 242, 241, 764, 0, 793, 822, 243, 846, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	484, 249, 485, 816, 250, 251, 252, 253, 254, 0,
	255, 817, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 847, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 486,
	278, 279, 770, 280, 0, 284, 285, 286, 287, 131,
	289, 374, 288, 290, 291, 810, 292, 281, 282, 293,
	487, 294, 848, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 849, 299, 300, 818, 0, 303, 133, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 850, 851,
	0, 0, 311, 312, 819, 820, 791, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 811, 321, 0,
	384, 322, 323, 324, 912, 852, 0, 0, 325, 0,
	0, 0, 125, 326, 327, 328, 329, 330, 765, 126,
	0, 0, 0, 0, 763, 0, 0, 0, 0, 761,
	762, 796, 785, 786, 783, 784, 775, 0, 1147, 0,
	0, 0, 0, 0, 774, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 813, 778, 0, 0, 0,
	178, 179, 180, 332, 828, 334, 829, 181, 830, 831,
	0, 182, 338, 339, 183, 184, 781, 812, 832, 833,
	342, 0, 185, 824, 0, 804, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 475, 193, 194,
	195, 0, 805, 806, 808, 0, 807, 809, 196, 197,
	394, 198, 834, 199, 835, 836, 0, 200, 0, 201,
	0, 202, 0, 0, 827, 204, 0, 205, 0, 0,
	0, 769, 206, 207, 208, 814, 815, 792, 0, 0,
	209, 210, 837, 838, 839, 0, 211, 0, 212, 0,
	0, 476, 0, 213, 825, 0, 354, 0, 214, 215,
	216, 217, 218, 821, 823, 478, 0, 222, 0, 219,
	0, 477, 220, 840, 221, 841, 842, 843, 844, 845,
	0, 803, 0, 479, 223, 224, 225, 480, 226, 227,
	228, 0, 230, 229, 0, 826, 481, 231, 482, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 483, 239, 240, 242, 241, 764, 0, 793, 822,
	243, 846, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 484, 249, 485, 816, 250, 251, 252,
	253, 254, 0, 255, 817, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 847, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 486, 278, 279, 770, 280, 0, 284, 285,
	286, 287, 131, 289, 374, 288, 290, 291, 810, 292,
	281, 282, 293, 487, 294, 848, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 849, 299, 300, 818, 0,
	303, 133, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 850, 851, 0, 0, 311, 312, 819, 820, 791,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	811, 321, 0, 384, 322, 323, 324, 912, 852, 0,
	0, 325, 0, 0, 0, 125, 326, 327, 328, 329,
	330, 765, 126, 0, 0, 0, 0, 763, 0, 0,
	0, 0, 761, 762, 796, 785, 786, 783, 784, 775,
	0, 1147, 0, 0, 0, 0, 0, 774, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 813, 778,
	0, 0, 0, 178, 179, 180, 332, 828, 334, 829,
	181, 830, 831, 1582, 182, 338, 339, 183, 184, 781,
	812, 832, 833, 342, 0, 185, 824, 0, 804, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	475, 193, 194, 195, 0, 805, 806, 808, 0, 807,
	809, 196, 197, 394, 198, 834, 199, 835, 836, 0,
	200, 0, 201, 0, 202, 0, 0, 827, 204, 0,
	205, 0, 0, 0, 769, 206, 207, 208, 814, 815,
	792, 0, 0, 209, 210, 837, 838, 839, 0, 211,
	0, 212, 0, 1587, 476, 0, 213, 825, 0, 354,
	0, 214, 215, 216, 217, 218, 821, 823, 478, 0,
	222, 0, 219, 0, 477, 220, 840, 221, 841, 842,
	843, 844, 845, 0, 803, 0, 479, 223, 224, 225,
	480, 226, 227, 228, 0, 230, 229, 1583, 826, 481,
	231, 482, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 483, 239, 240, 242, 241, 764,
	0, 793, 822, 243, 846, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 484, 249, 485, 816,
	250, 251, 252, 253, 254, 0, 255, 817, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 847, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 486, 278, 279, 770, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 810, 292, 281, 282, 293, 487, 294, 848, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 849, 299,
	300, 818, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 850, 851, 0, 1584, 311, 312,
	819, 820, 791, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 811, 321, 0, 384, 322, 323, 324,
	385, 852, 0, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 765, 0, 0, 0, 0, 0,
	763, 0, 0, 0, 0, 761, 762, 796, 785, 786,
	783, 784, 775, 0, 771, 0, 0, 0, 0, 0,
	774, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 813, 778, 0, 0, 0, 178, 179, 180, 332,
	828, 334, 829, 181, 830, 831, 0, 182, 338, 339,
	183, 184, 781, 812, 832, 833, 342, 0, 185, 824,
	0, 804, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 475, 193, 194, 195, 0, 805, 806,
	808, 0, 807, 809, 196, 197, 394, 198, 834, 199,
	835, 836, 0, 200, 0, 201, 0, 202, 0, 0,
	827, 204, 0, 205, 0, 0, 0, 769, 206, 207,
	208, 814, 815, 792, 0, 0, 209, 210, 837, 838,
	839, 0, 211, 0, 212, 0, 0, 476, 0, 213,
	825, 0, 354, 0, 214, 215, 216, 217, 218, 821,
	823, 478, 0, 222, 0, 219, 0, 477, 220, 840,
	221, 841, 842, 843, 844, 845, 0, 803, 0, 479,
	223, 224, 225, 480, 226, 227, 228, 0, 230, 229,
	0, 826, 481, 231, 482, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 483, 239, 240,
	242, 241, 764, 2107, 793, 822, 243, 846, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 484,
	249, 485, 816, 250, 251, 252, 253, 254, 0, 255,
	817, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	847, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 486, 278,
	279, 770, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 810, 292, 281, 282, 293, 487,
	294, 848, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 849, 299, 300, 818, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 850, 851, 0,
	0, 311, 312, 819, 820, 791, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 811, 321, 0, 384,
	322, 323, 324, 385, 852, 0, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 765, 0, 0,
	0, 0, 0, 763, 0, 0, 0, 0, 761, 762,
	1041, 796, 785, 786, 783, 784, 775, 771, 0, 0,
	0, 0, 0, 774, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 813, 778, 0, 0, 0,
	178, 179, 180, 332, 828, 334, 829, 181, 830, 831,
	0, 182, 338, 339, 183, 184, 781, 812, 832, 833,
	342, 0, 185, 824, 0, 804, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 475, 193, 194,
	195, 0, 805, 806, 808, 0, 807, 809, 196, 197,
	394, 198, 834, 199, 835, 836, 0, 200, 0, 201,
	0, 202, 0, 0, 827, 204, 0, 205, 0, 0,
	0, 769, 206, 207, 208, 814, 815, 792, 0, 0,
	209, 210, 837, 838, 839, 0, 211, 0, 212, 0,
	0, 476, 0, 213, 825, 0, 354, 0, 214, 215,
	216, 217, 218, 821, 823, 478, 0, 222, 1370, 219,
	0, 477, 220, 840, 221, 841, 842, 843, 844, 845,
	0, 803, 0, 479, 223, 224, 225, 480, 226, 227,
	228, 0, 230, 229, 0, 826, 481, 231, 482, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 483, 239, 240, 242, 241, 764, 0, 793, 822,
	243, 846, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 484, 249, 485, 816, 250, 251, 252,
	253, 254, 0, 255, 817, 256, 371, 257, 1369, 258,
	259, 260, 261, 262, 847, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 486, 278, 279, 770, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 810, 292,
	281, 282, 293, 487, 294, 848, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 849, 299, 300, 818, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 850, 851, 0, 0, 311, 312, 819, 820, 791,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	811, 321, 0, 384, 322, 323, 324, 385, 852, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 765, 0, 0, 0, 0, 0, 763, 0, 0,
	0, 0, 761, 762, 796, 785, 786, 783, 784, 775,
	0, 771, 0, 0, 0, 0, 0, 774, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 813, 778,
	0, 0, 0, 178, 179, 180, 332, 828, 334, 829,
	181, 830, 831, 0, 182, 338, 339, 183, 184, 781,
	812, 832, 833, 342, 0, 185, 824, 0, 804, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	475, 193, 194, 195, 0, 805, 806, 808, 0, 807,
	809, 196, 197, 394, 198, 834, 199, 835, 836, 0,
	200, 0, 201, 0, 202, 0, 0, 827, 204, 0,
	205, 0, 0, 0, 769, 206, 207, 208, 814, 815,
	792, 0, 0, 209, 210, 837, 838, 839, 0, 211,
	0, 212, 0, 0, 476, 0, 213, 825, 0, 354,
	0, 214, 215, 216, 217, 218, 821, 823, 478, 0,
	222, 0, 219, 0, 477, 220, 840, 221, 841, 842,
	843, 844, 845, 0, 803, 0, 479, 223, 224, 225,
	480, 226, 227, 228, 0, 230, 229, 0, 826, 481,
	231, 482, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 483, 239, 240, 242, 241, 764,
	0, 793, 822, 243, 846, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 484, 249, 485, 816,
	250, 251, 252, 253, 254, 0, 255, 817, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 847, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 486, 278, 279, 770, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 810, 292, 281, 282, 293, 487, 294, 848, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 849, 299,
	300, 818, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 850, 851, 0, 0, 311, 312,
	819, 820, 791, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 811, 321, 0, 384, 322, 323, 324,
	385, 852, 0, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 765, 0, 0, 0, 0, 0,
	763, 0, 0, 0, 0, 761, 762, 0, 0, 0,
	0, 0, 1151, 1519, 771, 0, 0, 0, 0, 0,
	774, 796, 785, 786, 783, 784, 775, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 813, 778, 0, 0, 0,
	178, 179, 180, 332, 828, 334, 829, 181, 830, 831,
	0, 182, 338, 339, 183, 184, 781, 812, 832, 833,
	342, 0, 185, 824, 0, 804, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 475, 193, 194,
	195, 0, 805, 806, 808, 0, 807, 809, 196, 197,
	394, 198, 834, 199, 835, 836, 1046, 200, 0, 201,
	0, 202, 0, 0, 827, 204, 0, 205, 0, 0,
	0, 769, 206, 207, 208, 814, 815, 792, 0, 0,
	209, 210, 837, 838, 839, 0, 211, 0, 212, 0,
	0, 476, 0, 213, 825, 0, 354, 0, 214, 215,
	216, 217, 218, 821, 823, 478, 0, 222, 0, 219,
	0, 477, 220, 840, 221, 841, 842, 843, 844, 845,
	0, 803, 0, 479, 223, 224, 225, 480, 226, 227,
	228, 0, 230, 229, 0, 826, 481, 231, 482, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 483, 239, 240, 242, 241, 764, 0, 793, 822,
	243, 846, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 484, 249, 485, 816, 250, 251, 252,
	253, 254, 0, 255, 817, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 847, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 486, 278, 279, 770, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 810, 292,
	281, 282, 293, 487, 294, 848, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 849, 299, 300, 818, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 850, 851, 0, 0, 311, 312, 819, 820, 791,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	811, 321, 0, 384, 322, 323, 324, 385, 852, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 765, 0, 0, 0, 0, 0, 763, 0, 0,
	0, 0, 761, 762, 796, 785, 786, 783, 784, 775,
	0, 771, 0, 0, 0, 0, 0, 774, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 813, 778,
	0, 0, 0, 178, 179, 180, 332, 828, 334, 829,
	181, 830, 831, 0, 182, 338, 339, 183, 184, 781,
	812, 832, 833, 342, 0, 185, 824, 0, 804, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	475, 193, 194, 195, 0, 805, 806, 808, 0, 807,
	809, 196, 197, 394, 198, 834, 199, 835, 836, 0,
	200, 0, 201, 0, 202, 0, 0, 827, 204, 0,
	205, 0, 0, 0, 769, 206, 207, 208, 814, 815,
	792, 0, 0, 209, 210, 837, 838, 839, 0, 211,
	0, 212, 0, 0, 476, 0, 213, 825, 0, 354,
	0, 214, 215, 216, 217, 218, 821, 823, 478, 0,
	222, 0, 219, 0, 477, 220, 840, 221, 841, 842,
	843, 844, 845, 0, 803, 0, 479, 223, 224, 225,
	480, 226, 227, 228, 0, 230, 229, 0, 826, 481,
	231, 482, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 483, 239, 240, 242, 241, 764,
	0, 793, 822, 243, 846, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 484, 249, 485, 816,
	250, 251, 252, 253, 254, 0, 255, 817, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 847, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 486, 278, 279, 770, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 810, 292, 281, 282, 293, 487, 294, 848, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 849, 299,
	300, 818, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 850, 851, 0, 0, 311, 312,
	819, 820, 791, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 811, 321, 0, 384, 322, 323, 324,
	385, 852, 0, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 765, 0, 0, 0, 0, 0,
	763, 0, 0, 0, 0, 761, 762, 796, 785, 786,
	783, 784, 775, 0, 771, 2075, 0, 0, 0, 0,
	774, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 813, 778, 0, 0, 0, 178, 179, 180, 332,
	828, 334, 829, 181, 830, 831, 0, 182, 338, 339,
	183, 184, 781, 812, 832, 833, 342, 0, 185, 824,
	0, 804, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 475, 193, 194, 195, 0, 805, 806,
	808, 0, 807, 809, 196, 197, 394, 198, 834, 199,
	835, 836, 0, 200, 0, 201, 0, 202, 0, 0,
	827, 204, 0, 205, 0, 0, 0, 769, 206, 207,
	208, 814, 815, 792, 0, 0, 209, 210, 837, 838,
	839, 0, 211, 0, 212, 0, 0, 476, 0, 213,
	825, 0, 354, 0, 214, 215, 216, 217, 218, 821,
	823, 478, 0, 222, 0, 219, 0, 477, 220, 840,
	221, 841, 842, 843, 844, 845, 0, 803, 0, 479,
	223, 224, 225, 480, 226, 227, 228, 0, 230, 229,
	0, 826, 481, 231, 482, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 483, 239, 240,
	242, 241, 764, 0, 793, 822, 243, 846, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 484,
	249, 485, 816, 250, 251, 252, 253, 254, 0, 255,
	817, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	847, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 486, 278,
	279, 770, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 810, 292, 281, 282, 293, 487,
	294, 848, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 849, 299, 300, 818, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 850, 851, 0,
	0, 311, 312, 819, 820, 791, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 811, 321, 0, 384,
	322, 323, 324, 385, 852, 2024, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 765, 0, 0,
	0, 0, 0, 763, 0, 0, 0, 0, 761, 762,
	796, 785, 786, 783, 784, 775, 0, 771, 0, 0,
	0, 0, 0, 774, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 813, 778, 0, 0, 0, 178,
	179, 180, 332, 828, 334, 829, 181, 830, 831, 0,
	182, 338, 339, 183, 184, 781, 812, 832, 833, 342,
	0, 185, 824, 0, 804, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 475, 193, 194, 195,
	0, 805, 806, 808, 0, 807, 809, 196, 197, 394,
	198, 834, 199, 835, 836, 0, 200, 0, 201, 0,
	202, 0, 0, 827, 204, 0, 205, 0, 0, 0,
	769, 206, 207, 208, 814, 815, 792, 0, 0, 209,
	210, 837, 838, 839, 0, 211, 0, 212, 0, 0,
	476, 0, 213, 825, 0, 354, 0, 214, 215, 216,
	217, 218, 821, 823, 478, 0, 222, 0, 219, 0,
	477, 220, 840, 221, 841, 842, 843, 844, 845, 0,
	803, 0, 479, 223, 224, 225, 480, 226, 227, 228,
	0, 230, 229, 0, 826, 481, 231, 482, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	483, 239, 240, 242, 241, 764, 0, 793, 822, 243,
	846, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 484, 249, 485, 816, 250, 251, 252, 253,
	254, 0, 255, 817, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 847, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 486, 278, 279, 770, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 810, 292, 281,
	282, 293, 487, 294, 848, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 849, 299, 300, 818, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	850, 851, 0, 0, 311, 312, 819, 820, 791, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 811,
	321, 0, 384, 322, 323, 324, 385, 852, 0, 0,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	765, 0, 0, 0, 0, 0, 763, 0, 0, 0,
	0, 761, 762, 796, 785, 786, 783, 784, 775, 0,
	771, 2014, 0, 0, 0, 0, 774, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 813, 778, 0,
	0, 0, 178, 179, 180, 332, 828, 334, 829, 181,
	830, 831, 0, 182, 338, 339, 183, 184, 781, 812,
	832, 833, 342, 0, 185, 824, 0, 804, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 475,
	193, 194, 195, 0, 805, 806, 808, 0, 807, 809,
	196, 197, 394, 198, 834, 199, 835, 836, 0, 200,
	0, 201, 0, 202, 0, 0, 827, 204, 0, 205,
	0, 0, 0, 769, 206, 207, 208, 814, 815, 792,
	0, 0, 209, 210, 837, 838, 839, 0, 211, 0,
	212, 0, 1587, 476, 0, 213, 825, 0, 354, 0,
	214, 215, 216, 217, 218, 821, 823, 478, 0, 222,
	0, 219, 0, 477, 220, 840, 221, 841, 842, 843,
	844, 845, 0, 803, 0, 479, 223, 224, 225, 480,
	226, 227, 228, 0, 230, 229, 0, 826, 481, 231,
	482, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 483, 239, 240, 242, 241, 764, 0,
	793, 822, 243, 846, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 484, 249, 485, 816, 250,
	251, 252, 253, 254, 0, 255, 817, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 847, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 486, 278, 279, 770, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	810, 292, 281, 282, 293, 487, 294, 848, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 849, 299, 300,
	818, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 850, 851, 0, 0, 311, 312, 819,
	820, 791, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 811, 321, 0, 384, 322, 323, 324, 385,
	852, 0, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 765, 0, 0, 0, 0, 0, 763,
	0, 0, 0, 0, 761, 762, 796, 785, 786, 783,
	784, 775, 0, 771, 0, 0, 0, 0, 0, 774,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	813, 778, 0, 0, 0, 178, 179, 180, 332, 828,
	334, 829, 181, 830, 831, 0, 182, 338, 339, 183,
	184, 781, 812, 832, 833, 342, 0, 185, 824, 0,
	804, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 475, 193, 194, 195, 0, 805, 806, 808,
	0, 807, 809, 196, 197, 394, 198, 834, 199, 835,
	836, 0, 200, 0, 201, 0, 202, 0, 0, 827,
	204, 0, 205, 0, 0, 0, 769, 206, 207, 208,
	814, 815, 792, 0, 0, 209, 210, 837, 838, 839,
	0, 211, 0, 212, 0, 0, 476, 0, 213, 825,
	0, 354, 0, 214, 215, 216, 217, 218, 821, 823,
	478, 0, 222, 0, 219, 0, 477, 220, 840, 221,
	841, 842, 843, 844, 845, 0, 803, 0, 479, 223,
	224, 225, 480, 226, 227, 228, 0, 230, 229, 0,
	826, 481, 231, 482, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 483, 239, 240, 242,
	241, 764, 0, 793, 822, 243, 846, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 484, 249,
	485, 816, 250, 251, 252, 253, 254, 0, 255, 817,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 847,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 486, 278, 279,
	770, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 810, 292, 281, 282, 293, 487, 294,
	848, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	849, 299, 300, 818, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 850, 851, 0, 0,
	311, 312, 819, 820, 791, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 811, 321, 0, 384, 322,
	323, 324, 385, 852, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 765, 0, 0, 0,
	0, 0, 763, 0, 0, 0, 0, 761, 762, 1041,
	0, 0, 0, 0, 0, 0, 771, 0, 0, 0,
	0, 1596, 774, 796, 785, 786, 783, 784, 775, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 813, 778, 0,
	0, 0, 178, 179, 180, 332, 828, 334, 829, 181,
	830, 831, 0, 182, 338, 339, 183, 184, 781, 812,
	832, 833, 342, 0, 185, 824, 0, 804, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 475,
	193, 194, 195, 0, 805, 806, 808, 0, 807, 809,
	196, 197, 394, 198, 834, 199, 835, 836, 0, 200,
	0, 201, 0, 202, 0, 0, 827, 204, 0, 205,
	0, 0, 0, 769, 206, 207, 208, 814, 815, 792,
	0, 0, 209, 210, 837, 838, 839, 0, 211, 0,
	212, 0, 0, 476, 0, 213, 825, 0, 354, 0,
	214, 215, 216, 217, 218, 821, 823, 478, 0, 222,
	0, 219, 0, 477, 220, 840, 221, 841, 842, 843,
	844, 845, 0, 803, 0, 479, 223, 224, 225, 480,
	226, 227, 228, 0, 230, 229, 0, 826, 481, 231,
	482, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 483, 239, 240, 242, 241, 764, 0,
	793, 822, 243, 846, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 484, 249, 485, 816, 250,
	251, 252, 253, 254, 0, 255, 817, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 847, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 486, 278, 279, 770, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	810, 292, 281, 282, 293, 487, 294, 848, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 849, 299, 300,
	818, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 850, 851, 0, 0, 311, 312, 819,
	820, 791, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 811, 321, 0, 384, 322, 323, 324, 385,
	852, 0, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 765, 0, 0, 0, 0, 0, 763,
	0, 0, 0, 0, 761, 762, 0, 0, 0, 0,
	0, 0, 0, 771, 0, 0, 0, 0, 1594, 774,
	796, 785, 786, 783, 784, 775, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 813, 778, 0, 0, 0, 178,
	179, 180, 332, 828, 334, 829, 181, 830, 831, 0,
	182, 338, 339, 183, 184, 781, 812, 832, 833, 342,
	0, 185, 824, 0, 804, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 475, 193, 194, 195,
	0, 805, 806, 808, 0, 807, 809, 196, 197, 394,
	198, 834, 199, 835, 836, 0, 200, 0, 201, 0,
	202, 0, 0, 827, 204, 0, 205, 0, 0, 0,
	769, 206, 207, 208, 814, 815, 792, 0, 0, 209,
	210, 837, 838, 839, 0, 211, 0, 212, 0, 0,
	476, 0, 213, 825, 0, 354, 0, 214, 215, 216,
	217, 218, 821, 823, 478, 0, 222, 0, 219, 0,
	477, 220, 840, 221, 841, 842, 843, 844, 845, 0,
	803, 0, 479, 223, 224, 225, 480, 226, 227, 228,
	0, 230, 229, 0, 826, 481, 231, 482, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	483, 239, 240, 242, 241, 764, 0, 793, 822, 243,
	846, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 484, 249, 485, 816, 250, 251, 252, 253,
	254, 0, 255, 817, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 847, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 486, 278, 279, 770, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 810, 292, 281,
	282, 293, 487, 294, 848, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 849, 299, 300, 818, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	850, 851, 0, 0, 311, 312, 819, 820, 791, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 811,
	321, 0, 384, 322, 323, 324, 385, 852, 0, 0,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	765, 0, 0, 0, 0, 0, 763, 0, 0, 0,
	0, 761, 762, 0, 0, 0, 0, 0, 0, 0,
	771, 0, 0, 0, 0, 1578, 774, 796, 785, 786,
	783, 784, 775, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 813, 778, 0, 0, 0, 178, 179, 180, 332,
	828, 334, 829, 181, 830, 831, 0, 182, 338, 339,
	183, 184, 781, 812, 832, 833, 342, 0, 185, 824,
	0, 804, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 475, 193, 194, 195, 0, 805, 806,
	808, 0, 807, 809, 196, 197, 394, 198, 834, 199,
	835, 836, 0, 200, 0, 201, 0, 202, 0, 0,
	827, 204, 0, 205, 0, 0, 0, 769, 206, 207,
	208, 814, 815, 792, 0, 0, 209, 210, 837, 838,
	839, 0, 211, 0, 212, 0, 0, 476, 0, 213,
	825, 0, 354, 0, 214, 215, 216, 217, 218, 821,
	823, 478, 0, 222, 0, 219, 0, 477, 220, 840,
	221, 841, 842, 843, 844, 845, 0, 803, 0, 479,
	223, 224, 225, 480, 226, 227, 228, 0, 230, 229,
	0, 826, 481, 231, 482, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 483, 239, 240,
	242, 241, 764, 0, 793, 822, 243, 846, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 484,
	249, 485, 816, 250, 251, 252, 253, 254, 0, 255,
	817, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	847, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 486, 278,
	279, 770, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 810, 292, 281, 282, 293, 487,
	294, 848, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 849, 299, 300, 818, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 850, 851, 0,
	0, 311, 312, 819, 820, 791, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 811, 321, 0, 384,
	322, 323, 324, 385, 852, 0, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 765, 0, 0,
	0, 0, 0, 763, 0, 0, 0, 0, 761, 762,
	0, 0, 0, 0, 0, 0, 0, 771, 0, 0,
	0, 0, 1566, 774, 796, 785, 786, 783, 784, 775,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 813, 778,
	0, 0, 0, 178, 179, 180, 332, 828, 334, 829,
	181, 830, 831, 0, 182, 338, 339, 183, 184, 781,
	812, 832, 833, 342, 0, 185, 824, 0, 804, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	475, 193, 194, 195, 0, 805, 806, 808, 0, 807,
	809, 196, 197, 394, 198, 834, 199, 835, 836, 0,
	200, 0, 201, 0, 202, 0, 0, 827, 204, 0,
	205, 0, 0, 0, 769, 206, 207, 208, 814, 815,
	792, 0, 0, 209, 210, 837, 838, 839, 0, 211,
	0, 212, 0, 0, 476, 0, 213, 825, 0, 354,
	0, 214, 215, 216, 217, 218, 821, 823, 478, 0,
	222, 0, 219, 0, 477, 220, 840, 221, 841, 842,
	843, 844, 845, 0, 803, 0, 479, 223, 224, 225,
	480, 226, 227, 228, 0, 230, 229, 0, 826, 481,
	231, 482, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 483, 239, 240, 242, 241, 764,
	0, 793, 822, 243, 846, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 484, 249, 485, 816,
	250, 251, 252, 253, 254, 0, 255, 817, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 847, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 486, 278, 279, 770, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 810, 292, 281, 282, 293, 487, 294, 848, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 849, 299,
	300, 818, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 850, 851, 0, 0, 311, 312,
	819, 820, 791, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 811, 321, 0, 384, 322, 323, 324,
	385, 852, 0, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 765, 0, 0, 0, 0, 0,
	763, 0, 0, 0, 0, 761, 762, 0, 0, 0,
	0, 0, 0, 0, 771, 0, 0, 0, 0, 1564,
	774, 1556, 785, 786, 783, 784, 775, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 813, 778, 0, 0, 0,
	178, 179, 180, 332, 828, 334, 829, 181, 830, 831,
	0, 182, 338, 339, 183, 184, 781, 812, 832, 833,
	342, 0, 185, 824, 0, 804, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 475, 193, 194,
	195, 0, 805, 806, 808, 0, 807, 809, 196, 197,
	394, 198, 834, 1559, 835, 836, 0, 200, 0, 201,
	0, 202, 0, 0, 827, 204, 0, 205, 0, 0,
	0, 769, 206, 207, 208, 814, 815, 792, 0, 0,
	209, 210, 837, 838, 839, 0, 211, 0, 212, 0,
	0, 476, 0, 213, 825, 0, 354, 0, 214, 215,
	1560, 217, 218, 821, 823, 478, 0, 222, 0, 219,
	0, 477, 220, 840, 221, 841, 842, 843, 844, 845,
	0, 803, 0, 479, 223, 224, 225, 480, 226, 227,
	228, 0, 230, 229, 0, 826, 481, 231, 482, 0,
	232, 0, 0, 233, 0, 234, 1561, 1558, 238, 365,
	237, 483, 239, 240, 242, 241, 764, 0, 793, 822,
	243, 846, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 484, 249, 485, 816, 250, 251, 252,
	253, 254, 0, 255, 817, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 847, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 486, 278, 279, 770, 280, 0, 284, 285,
	286, 1562, 0, 289, 374, 288, 290, 291, 810, 292,
	281, 282, 293, 487, 294, 848, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 849, 299, 300, 818, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 850, 851, 0, 0, 311, 312, 819, 820, 791,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	811, 321, 0, 384, 322, 323, 324, 385, 852, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 1557,
	330, 765, 0, 0, 0, 0, 0, 763, 0, 0,
	0, 0, 761, 762, 0, 0, 0, 0, 0, 0,
	0, 771, 0, 0, 0, 0, 1553, 774, 1556, 785,
	786, 783, 784, 775, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 813, 778, 0, 0, 0, 178, 179, 180,
	332, 828, 334, 829, 181, 830, 831, 0, 182, 338,
	339, 183, 184, 781, 812, 832, 833, 342, 0, 185,
	824, 0, 804, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 475, 193, 194, 195, 0, 805,
	806, 808, 0, 807, 809, 196, 197, 394, 198, 834,
	1559, 835, 836, 0, 200, 0, 201, 0, 202, 0,
	0, 827, 204, 0, 205, 0, 0, 0, 769, 206,
	207, 208, 814, 815, 792, 0, 0, 209, 210, 837,
	838, 839, 0, 211, 0, 212, 0, 0, 476, 0,
	213, 825, 0, 354, 0, 214, 215, 1560, 217, 218,
	821, 823, 478, 0, 222, 0, 219, 0, 477, 220,
	840, 221, 841, 842, 843, 844, 845, 0, 803, 0,
	479, 223, 224, 225, 480, 226, 227, 228, 0, 230,
	229, 0, 826, 481, 231, 482, 0, 232, 0, 0,
	233, 0, 234, 1561, 1558, 238, 365, 237, 483, 239,
	240, 242, 241, 764, 0, 793, 822, 243, 846, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	484, 249, 485, 816, 250, 251, 252, 253, 254, 0,
	255, 817, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 847, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 486,
	278, 279, 770, 280, 0, 284, 285, 286, 1562, 0,
	289, 374, 288, 290, 291, 810, 292, 281, 282, 293,
	487, 294, 848, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 849, 299, 300, 818, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 850, 851,
	0, 0, 311, 312, 819, 820, 791, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 811, 321, 0,
	384, 322, 323, 324, 385, 852, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 1557, 330, 765, 0,
	0, 0, 0, 0, 763, 0, 0, 0, 0, 761,
	762, 796, 785, 786, 783, 784, 775, 0, 771, 0,
	0, 0, 0, 0, 774, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 813, 778, 0, 0, 0,
	178, 179, 180, 332, 828, 334, 829, 181, 830, 831,
	0, 182, 338, 339, 183, 184, 781, 812, 832, 833,
	342, 0, 185, 824, 0, 804, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 475, 193, 194,
	195, 0, 805, 806, 808, 0, 807, 809, 196, 197,
	394, 198, 834, 199, 835, 836, 0, 200, 0, 201,
	0, 202, 0, 0, 827, 204, 0, 205, 0, 0,
	0, 769, 206, 207, 208, 814, 815, 792, 0, 0,
	209, 210, 837, 838, 839, 0, 211, 0, 212, 0,
	0, 476, 0, 213, 825, 0, 354, 0, 214, 215,
	216, 217, 218, 821, 823, 478, 0, 222, 0, 219,
	0, 477, 220, 840, 221, 841, 842, 843, 844, 845,
	0, 803, 0, 479, 223, 224, 225, 480, 226, 227,
	228, 0, 230, 229, 0, 826, 481, 231, 482, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 483, 239, 240, 242, 241, 764, 0, 793, 822,
	243, 846, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 484, 249, 485, 816, 250, 251, 252,
	253, 254, 0, 255, 817, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 847, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 486, 278, 279, 770, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 810, 292,
	281, 282, 293, 487, 294, 848, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 849, 299, 300, 818, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 850, 851, 0, 0, 311, 312, 819, 820, 791,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	811, 321, 0, 384, 322, 323, 324, 385, 852, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 765, 0, 0, 0, 0, 0, 763, 0, 0,
	0, 0, 761, 762, 0, 0, 0, 0, 0, 0,
	0, 771, 1514, 0, 0, 0, 1400, 774, 796, 785,
	786, 783, 784, 775, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 813, 778, 0, 0, 0, 178, 179, 180,
	332, 828, 334, 829, 181, 830, 831, 0, 182, 338,
	339, 183, 184, 781, 812, 832, 833, 342, 0, 185,
	824, 0, 804, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 475, 193, 194, 195, 0, 805,
	806, 808, 0, 807, 809, 196, 197, 394, 198, 834,
	199, 835, 836, 0, 200, 0, 201, 0, 202, 0,
	0, 827, 204, 0, 205, 0, 0, 0, 769, 206,
	207, 208, 814, 815, 792, 0, 0, 209, 210, 837,
	838, 839, 0, 211, 0, 212, 0, 0, 476, 0,
	213, 825, 0, 354, 0, 214, 215, 216, 217, 218,
	821, 823, 478, 0, 222, 0, 219, 0, 477, 220,
	840, 221, 841, 842, 843, 844, 845, 0, 803, 0,
	479, 223, 224, 225, 480, 226, 227, 228, 0, 230,
	229, 0, 826, 481, 231, 482, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 483, 239,
	240, 242, 241, 764, 0, 793, 822, 243, 846, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	484, 249, 485, 816, 250, 251, 252, 253, 254, 0,
	255, 817, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 847, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 486,
	278, 279, 770, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 810, 292, 281, 282, 293,
	487, 294, 848, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 849, 299, 300, 818, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 850, 851,
	0, 0, 311, 312, 819, 820, 791, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 811, 321, 0,
	384, 322, 323, 324, 385, 852, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 765, 0,
	0, 0, 0, 0, 763, 0, 0, 0, 0, 761,
	762, 796, 785, 786, 783, 784, 775, 0, 771, 0,
	0, 0, 0, 0, 774, 0, 0, 175, 176, 1357,
	177, 0, 0, 0, 0, 813, 778, 0, 0, 0,
	178, 179, 180, 332, 828, 334, 829, 181, 830, 831,
	0, 182, 338, 339, 183, 184, 781, 812, 832, 833,
	342, 0, 185, 824, 0, 804, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 475, 193, 194,
	195, 0, 805, 806, 808, 0, 807, 809, 196, 197,
	394, 198, 834, 199, 835, 836, 0, 200, 0, 201,
	0, 202, 0, 0, 827, 204, 0, 205, 0, 0,
	0, 769, 206, 207, 208, 814, 815, 792, 0, 0,
	209, 210, 837, 838, 839, 0, 211, 0, 212, 0,
	0, 476, 0, 213, 825, 0, 354, 0, 214, 215,
	216, 217, 218, 821, 823, 478, 0, 222, 0, 219,
	0, 477, 220, 840, 221, 841, 842, 843, 844, 845,
	0, 803, 0, 479, 223, 224, 225, 480, 226, 227,
	228, 0, 230, 229, 0, 826, 481, 231, 482, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 483, 239, 240, 242, 241, 764, 0, 793, 822,
	243, 846, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 484, 249, 485, 816, 250, 251, 252,
	253, 254, 0, 255, 817, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 847, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 486, 278, 279, 770, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 810, 292,
	281, 282, 293, 487, 294, 848, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 849, 299, 300, 818, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 850, 851, 0, 0, 311, 312, 819, 820, 791,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	811, 321, 0, 384, 322, 323, 324, 385, 852, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 765, 0, 0, 0, 0, 0, 763, 0, 0,
	0, 0, 761, 762, 0, 0, 0, 0, 0, 0,
	0, 771, 0, 0, 0, 0, 860, 774, 796, 785,
	786, 783, 784, 775, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 813, 778, 0, 0, 0, 178, 179, 180,
	332, 828, 334, 829, 181, 830, 831, 0, 182, 338,
	339, 183, 184, 781, 812, 832, 833, 342, 0, 185,
	824, 0, 804, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 475, 193, 194, 195, 0, 805,
	806, 808, 0, 807, 809, 196, 197, 394, 198, 834,
	199, 835, 836, 0, 200, 0, 201, 0, 202, 0,
	0, 827, 204, 0, 205, 0, 0, 0, 769, 206,
	207, 208, 814, 815, 792, 0, 0, 209, 210, 837,
	838, 839, 0, 211, 0, 212, 0, 0, 476, 0,
	213, 825, 0, 354, 0, 214, 215, 216, 217, 218,
	821, 823, 478, 0, 222, 0, 219, 0, 477, 220,
	840, 221, 841, 842, 843, 844, 845, 0, 803, 0,
	479, 223, 224, 225, 480, 226, 227, 228, 0, 230,
	229, 0, 826, 481, 231, 482, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 483, 239,
	240, 242, 241, 764, 0, 793, 822, 243, 846, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	484, 249, 485, 816, 250, 251, 252, 253, 254, 0,
	255, 817, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 847, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 486,
	278, 279, 770, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 810, 292, 281, 282, 293,
	487, 294, 848, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 849, 299, 300, 818, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 850, 851,
	0, 0, 311, 312, 819, 820, 791, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 811, 321, 0,
	384, 322, 323, 324, 385, 852, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 765, 0,
	0, 0, 0, 0, 763, 0, 0, 0, 0, 761,
	762, 0, 0, 0, 0, 0, 0, 0, 771, 0,
	0, 0, 0, 759, 774, 796, 785, 786, 783, 784,
	775, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 813,
	778, 0, 0, 0, 178, 179, 180, 332, 828, 334,
	829, 181, 830, 831, 0, 182, 338, 339, 183, 184,
	781, 812, 832, 833, 342, 0, 185, 824, 0, 804,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 475, 193, 194, 195, 0, 805, 806, 808, 0,
	807, 809, 196, 197, 394, 198, 834, 199, 835, 836,
	0, 200, 0, 201, 0, 202, 0, 0, 827, 204,
	0, 205, 0, 0, 0, 769, 206, 207, 208, 814,
	815, 792, 0, 0, 209, 210, 837, 838, 839, 0,
	211, 0, 212, 0, 0, 476, 0, 213, 825, 0,
	354, 0, 214, 215, 216, 217, 218, 821, 823, 478,
	0, 222, 0, 219, 0, 477, 220, 840, 221, 841,
	842, 843, 844, 845, 0, 803, 0, 479, 223, 224,
	225, 480, 226, 227, 228, 0, 230, 229, 0, 826,
	481, 231, 482, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 483, 239, 240, 242, 241,
	764, 0, 793, 822, 243, 846, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 484, 249, 485,
	816, 250, 251, 252, 253, 254, 0, 255, 817, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 847, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 486, 278, 279, 770,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 810, 292, 281, 282, 293, 487, 294, 848,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 849,
	299, 300, 818, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 850, 851, 0, 0, 311,
	312, 819, 820, 791, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 811, 321, 0, 384, 322, 323,
	324, 385, 852, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 765, 0, 0, 0, 0,
	0, 763, 0, 0, 0, 0, 761, 762, 796, 785,
	786, 783, 784, 775, 0, 771, 0, 0, 0, 0,
	0, 774, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 813, 778, 0, 0, 0, 178, 179, 180,
	332, 828, 334, 829, 181, 830, 831, 0, 182, 338,
	339, 183, 184, 781, 812, 832, 833, 342, 0, 185,
	824, 0, 804, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 475, 193, 194, 2435, 0, 805,
	806, 808, 0, 807, 809, 196, 197, 394, 198, 834,
	199, 835, 836, 0, 200, 0, 201, 0, 202, 0,
	0, 827, 204, 0, 205, 0, 0, 0, 769, 206,
	207, 208, 814, 815, 792, 0, 0, 209, 210, 837,
	838, 839, 0, 211, 0, 212, 0, 0, 476, 0,
	213, 825, 0, 354, 0, 214, 215, 216, 217, 218,
	821, 823, 478, 0, 222, 0, 219, 0, 477, 220,
	840, 221, 841, 842, 843, 844, 845, 0, 803, 0,
	479, 223, 224, 225, 480, 226, 227, 228, 0, 230,
	229, 0, 826, 481, 231, 482, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 483, 239,
	240, 242, 241, 764, 0, 793, 822, 243, 846, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	484, 249, 485, 816, 250, 251, 252, 253, 254, 0,
	255, 817, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 847, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 486,
	278, 279, 770, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 810, 292, 281, 282, 293,
	487, 294, 848, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 849, 299, 300, 818, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 850, 851,
	0, 0, 311, 312, 819, 820, 791, 313, 314, 2434,
	316, 0, 0, 317, 318, 319, 320, 811, 321, 0,
	384, 322, 323, 324, 385, 852, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 765, 0,
	0, 0, 0, 0, 763, 0, 0, 0, 0, 761,
	762, 796, 785, 786, 783, 784, 775, 0, 771, 0,
	0, 0, 0, 0, 774, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 813, 778, 0, 0, 0,
	178, 179, 180, 2433, 828, 334, 829, 181, 830, 831,
	0, 182, 338, 339, 183, 184, 781, 812, 832, 833,
	342, 0, 185, 824, 0, 804, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 475, 193, 194,
	2435, 0, 805, 806, 808, 0, 807, 809, 196, 197,
	394, 198, 834, 199, 835, 836, 0, 200, 0, 201,
	0, 202, 0, 0, 827, 204, 0, 205, 0, 0,
	0, 769, 206, 207, 208, 814, 815, 792, 0, 0,
	209, 210, 837, 838, 839, 0, 211, 0, 212, 0,
	0, 476, 0, 213, 825, 0, 354, 0, 214, 215,
	216, 217, 218, 821, 823, 478, 0, 222, 0, 219,
	0, 477, 220, 840, 221, 841, 842, 843, 844, 845,
	0, 803, 0, 479, 223, 224, 225, 480, 226, 227,
	228, 0, 230, 229, 0, 826, 481, 231, 482, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 483, 239, 240, 242, 241, 764, 0, 793, 822,
	243, 846, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 484, 249, 485, 816, 250, 251, 252,
	253, 254, 0, 255, 817, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 847, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 486, 278, 279, 770, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 810, 292,
	281, 282, 293, 487, 294, 848, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 849, 299, 300, 818, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 850, 851, 0, 0, 311, 312, 819, 820, 791,
	313, 314, 2434, 316, 0, 0, 317, 318, 319, 320,
	811, 321, 0, 384, 322, 323, 324, 385, 852, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 765, 0, 0, 0, 0, 0, 763, 0, 0,
	0, 0, 761, 762, 796, 785, 786, 783, 784, 775,
	0, 771, 0, 0, 0, 0, 0, 774, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 813, 778,
	0, 0, 0, 178, 179, 180, 332, 828, 334, 829,
	181, 830, 831, 0, 182, 338, 339, 183, 184, 781,
	812, 832, 833, 342, 0, 185, 824, 0, 804, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	475, 193, 194, 195, 0, 805, 806, 808, 0, 807,
	809, 196, 197, 394, 198, 834, 199, 835, 836, 0,
	200, 0, 201, 0, 202, 0, 0, 827, 204, 0,
	205, 0, 0, 0, 769, 206, 207, 208, 814, 815,
	792, 0, 0, 209, 210, 837, 838, 839, 0, 211,
	0, 212, 0, 0, 476, 0, 213, 825, 0, 354,
	0, 214, 215, 216, 217, 218, 821, 823, 478, 0,
	222, 0, 219, 0, 477, 220, 840, 221, 841, 842,
	843, 844, 845, 0, 803, 0, 479, 223, 224, 225,
	480, 226, 227, 228, 0, 230, 229, 0, 826, 481,
	231, 482, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 483, 239, 240, 242, 241, 764,
	0, 793, 822, 243, 846, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 484, 249, 485, 816,
	250, 251, 252, 253, 254, 0, 255, 817, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 847, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 486, 278, 279, 770, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 810, 292, 281, 282, 293, 487, 294, 848, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 849, 299,
	300, 818, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 850, 851, 0, 0, 311, 312,
	819, 820, 791, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 811, 321, 0, 384, 322, 323, 324,
	385, 852, 0, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 765, 0, 0, 0, 0, 0,
	763, 0, 0, 0, 0, 761, 762, 796, 785, 786,
	783, 784, 775, 0, 771, 0, 0, 0, 0, 0,
	774, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 813, 778, 0, 0, 0, 178, 179, 180, 332,
	828, 334, 829, 181, 830, 831, 0, 182, 338, 339,
	183, 184, 781, 812, 832, 833, 342, 0, 185, 824,
	0, 804, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 475, 193, 194, 195, 0, 805, 806,
	808, 0, 807, 809, 196, 197, 394, 198, 834, 199,
	835, 836, 0, 200, 0, 201, 0, 202, 0, 0,
	827, 204, 0, 205, 0, 0, 0, 769, 206, 207,
	208, 814, 815, 792, 0, 0, 209, 210, 837, 838,
	839, 0, 211, 0, 212, 0, 0, 476, 0, 213,
	825, 0, 354, 0, 214, 215, 216, 217, 218, 821,
	823, 478, 0, 222, 0, 219, 0, 477, 220, 840,
	221, 841, 842, 843, 844, 845, 0, 803, 0, 479,
	223, 224, 225, 480, 226, 227, 228, 0, 230, 229,
	0, 826, 481, 231, 482, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 483, 239, 240,
	242, 241, 0, 0, 793, 822, 243, 846, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 484,
	249, 485, 816, 250, 251, 252, 253, 254, 0, 255,
	817, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	847, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 486, 278,
	279, 1576, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 810, 292, 281, 282, 293, 487,
	294, 848, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 849, 299, 300, 818, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 850, 851, 0,
	0, 311, 312, 819, 820, 791, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 811, 321, 0, 384,
	322, 323, 324, 385, 852, 0, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 796, 785, 786,
	783, 784, 775, 1574, 0, 0, 0, 0, 1572, 1573,
	0, 0, 0, 175, 176, 0, 177, 1575, 0, 0,
	0, 813, 778, 774, 0, 0, 178, 179, 180, 332,
	828, 334, 829, 181, 830, 831, 0, 182, 338, 339,
	183, 184, 0, 812, 832, 833, 342, 0, 185, 824,
	0, 804, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 475, 193, 194, 195, 0, 805, 806,
	808, 0, 807, 809, 196, 197, 394, 198, 834, 199,
	835, 836, 0, 200, 0, 201, 0, 202, 0, 0,
	827, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 814, 815, 792, 0, 0, 209, 210, 837, 838,
	839, 0, 211, 0, 212, 0, 0, 476, 0, 213,
	825, 0, 354, 0, 214, 215, 216, 217, 218, 821,
	823, 478, 0, 222, 0, 219, 0, 477, 220, 840,
	221, 841, 842, 843, 844, 845, 0, 803, 0, 479,
	223, 224, 225, 480, 226, 227, 228, 0, 230, 229,
	0, 826, 481, 231, 482, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 483, 239, 240,
	242, 241, 0, 0, 793, 822, 243, 846, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 484,
	249, 485, 816, 250, 251, 252, 253, 254, 0, 255,
	817, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	847, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 486, 278,
	279, 1576, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 810, 292, 281, 282, 293, 487,
	294, 848, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 849, 299, 300, 818, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 850, 851, 0,
	0, 311, 312, 819, 820, 791, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 811, 321, 0, 384,
	322, 323, 324, 385, 852, 0, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 796, 785, 786,
	783, 784, 775, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 1575, 0, 0,
	0, 813, 778, 774, 0, 0, 178, 179, 180, 0,
	828, 334, 829, 181, 830, 831, 0, 182, 338, 339,
	183, 184, 781, 812, 832, 833, 342, 0, 185, 824,
	0, 804, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 475, 193, 194, 2435, 0, 805, 806,
	808, 0, 807, 809, 196, 197, 394, 198, 834, 199,
	835, 836, 0, 200, 0, 201, 0, 202, 0, 0,
	827, 204, 0, 205, 0, 0, 0, 769, 206, 207,
	208, 814, 815, 792, 0, 0, 209, 210, 837, 838,
	839, 0, 211, 0, 212, 0, 0, 476, 0, 213,
	825, 0, 354, 0, 214, 215, 216, 217, 218, 821,
	823, 0, 0, 222, 0, 219, 0, 477, 220, 840,
	221, 841, 842, 843, 844, 845, 0, 803, 0, 0,
	223, 224, 225, 480, 226, 227, 228, 0, 230, 229,
	0, 826, 481, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 483, 239, 240,
	242, 241, 764, 0, 793, 822, 243, 846, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 484,
	249, 485, 816, 250, 251, 252, 253, 254, 0, 255,
	817, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	847, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 486, 278,
	279, 770, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 810, 292, 281, 282, 293, 0,
	294, 848, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 849, 299, 300, 818, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 850, 851, 0,
	0, 311, 312, 819, 820, 791, 313, 314, 2434, 316,
	0, 0, 317, 318, 319, 320, 811, 321, 0, 384,
	322, 323, 324, 385, 852, 0, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 796, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 761, 762,
	0, 0, 0, 175, 176, 0, 177, 771, 0, 0,
	0, 813, 0, 774, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 812, 340, 341, 342, 0, 185, 824,
	0, 804, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 475, 193, 194, 195, 0, 805, 806,
	808, 0, 807, 809, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 814, 815, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 476, 0, 213,
	825, 0, 354, 0, 214, 215, 216, 217, 218, 821,
	823, 478, 0, 222, 0, 219, 0, 477, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 479,
	223, 224, 225, 480, 226, 227, 228, 0, 230, 229,
	0, 826, 481, 231, 482, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 483, 239, 240,
	242, 241, 0, 0, 0, 822, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 484,
	249, 485, 816, 250, 251, 252, 253, 254, 0, 255,
	817, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 486, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 810, 292, 281, 282, 293, 487,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 818, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 819, 820, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 811, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 0, 325, 909, 0,
	692, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 331, 0, 0, 1978, 0, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 0,
	182, 338, 339, 183, 184, 0, 0, 340, 341, 342,
	0, 185, 343, 0, 474, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 475, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 344, 199, 345, 346, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	347, 206, 207, 208, 348, 349, 0, 0, 0, 209,
	210, 350, 351, 352, 0, 211, 0, 212, 0, 0,
	476, 0, 213, 353, 0, 354, 0, 214, 215, 216,
	217, 218, 355, 356, 478, 0, 222, 0, 219, 0,
	477, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 479, 223, 224, 225, 480, 226, 227, 228,
	0, 230, 229, 0, 364, 481, 231, 482, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	483, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 484, 249, 485, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 486, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 131, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 487, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	133, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 912, 386, 0, 0,
	325, 0, 0, 0, 125, 326, 327, 328, 329, 330,
	0, 126, 692, 689, 0, 690, 685, 680, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	118, 177, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 0, 182, 338, 339, 183, 184, 0, 0, 340,
	341, 342, 0, 185, 343, 0, 474, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 475, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 344, 199, 345, 346, 1321, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 348, 349, 682, 0,
	0, 209, 210, 350, 351, 352, 0, 211, 0, 212,
	0, 0, 476, 0, 213, 353, 0, 354, 0, 214,
	215, 216, 217, 218, 355, 356, 478, 0, 222, 0,
	219, 0, 477, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 479, 223, 224, 225, 480, 226,
	227, 228, 0, 230, 229, 0, 364, 481, 231, 482,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 483, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 683, 0, 247,
	0, 0, 248, 368, 484, 249, 485, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 486, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 487, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	681, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 692, 689, 0, 690, 685, 680, 0, 0,
	0, 0, 0, 691, 686, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 0, 182, 338, 339, 183, 184, 0, 0, 340,
	341, 342, 0, 185, 343, 0, 474, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 475, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 344, 199, 345, 346, 1318, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 348, 349, 682, 0,
	0, 209, 210, 350, 351, 352, 0, 211, 0, 212,
	0, 0, 476, 0, 213, 353, 0, 354, 0, 214,
	215, 216, 217, 218, 355, 356, 478, 0, 222, 0,
	219, 0, 477, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 479, 223, 224, 225, 480, 226,
	227, 228, 0, 230, 229, 0, 364, 481, 231, 482,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 483, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 683, 0, 247,
	0, 0, 248, 368, 484, 249, 485, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 486, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 487, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	681, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 692, 689, 0, 690, 685, 680, 0, 0,
	0, 0, 0, 691, 686, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 0, 182, 338, 339, 183, 184, 0, 0, 340,
	341, 342, 0, 185, 343, 0, 474, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 475, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 344, 199, 345, 346, 957, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 348, 349, 682, 0,
	0, 209, 210, 350, 351, 352, 0, 211, 0, 212,
	0, 0, 476, 0, 213, 353, 0, 354, 0, 214,
	215, 216, 217, 218, 355, 356, 478, 0, 222, 0,
	219, 0, 477, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 479, 223, 224, 225, 480, 226,
	227, 228, 0, 230, 229, 0, 364, 481, 231, 482,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 483, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 683, 0, 247,
	0, 0, 248, 368, 484, 249, 485, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 486, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 487, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	681, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 677, 0, 692, 689, 0, 690, 685, 680,
	0, 0, 0, 691, 686, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 474, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	475, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	682, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 476, 0, 213, 353, 0, 354,
	0, 214, 215, 216, 217, 218, 355, 356, 478, 0,
	222, 0, 219, 0, 477, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 479, 223, 224, 225,
	480, 226, 227, 228, 0, 230, 229, 0, 364, 481,
	231, 482, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 483, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 683,
	0, 247, 0, 0, 248, 368, 484, 249, 485, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 486, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 487, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 681, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 0, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 692, 689, 0, 690, 685, 680,
	0, 0, 0, 0, 0, 691, 686, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 474, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	475, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	682, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 476, 0, 213, 353, 0, 354,
	0, 214, 215, 216, 217, 218, 355, 356, 478, 0,
	222, 0, 219, 0, 477, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 479, 223, 224, 225,
	480, 226, 227, 228, 0, 230, 229, 0, 364, 481,
	231, 482, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 483, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 683,
	0, 247, 0, 0, 248, 368, 484, 249, 485, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 486, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 487, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 681, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 0, 674, 325, 172, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 691, 686, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 355, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 734, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 131, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 133, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 912, 386, 0, 0, 325, 0, 172, 0, 125,
	326, 327, 328, 329, 330, 0, 126, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 728, 0, 1065, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 734, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 131, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 133, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 912, 386, 0, 0, 325, 674, 0,
	172, 125, 326, 327, 328, 329, 330, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 331, 728, 0, 1065, 0, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 0,
	182, 338, 339, 183, 184, 0, 0, 340, 341, 342,
	0, 185, 343, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 344, 199, 345, 346, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	347, 206, 207, 208, 348, 349, 0, 0, 0, 209,
	210, 350, 351, 352, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 353, 0, 354, 0, 214, 215, 216,
	217, 218, 355, 356, 0, 0, 222, 0, 219, 0,
	0, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 223, 224, 225, 0, 226, 227, 228,
	0, 230, 229, 0, 364, 0, 231, 0, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 0, 249, 0, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 131, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	133, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 912, 386, 0, 0,
	325, 1703, 0, 172, 125, 326, 327, 328, 329, 330,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	118, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 734,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 0, 0, 325, 727, 0, 172, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	331, 728, 0, 733, 0, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 0, 182, 338, 339, 183,
	184, 0, 0, 340, 341, 342, 0, 185, 343, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 344, 199, 345,
	346, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 347, 206, 207, 208,
	348, 349, 0, 0, 0, 209, 210, 350, 351, 352,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 353,
	0, 354, 0, 214, 215, 216, 217, 218, 355, 356,
	0, 0, 222, 0, 219, 0, 0, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 223,
	224, 225, 0, 226, 227, 228, 0, 230, 229, 0,
	364, 0, 231, 0, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 0, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 734, 247, 0, 0, 248, 368, 0, 249,
	0, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 0, 325, 0, 172, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 728, 0, 733, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 214, 215, 216, 217, 218,
	355, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 734, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 0, 325, 0,
	172, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 331, 0, 728, 0, 733, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 0,
	182, 338, 339, 183, 184, 0, 0, 340, 341, 342,
	0, 185, 343, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 344, 199, 345, 346, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	347, 206, 207, 208, 348, 349, 0, 0, 0, 209,
	210, 350, 351, 352, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 353, 0, 354, 0, 214, 215, 216,
	217, 218, 355, 356, 0, 0, 222, 0, 219, 0,
	0, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 223, 224, 225, 0, 226, 227, 228,
	0, 230, 229, 0, 364, 0, 231, 0, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 0, 249, 0, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 0, 0,
	325, 0, 0, 172, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 1195, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 0, 0, 325, 0, 172, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 1640, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 355, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 0, 0, 325, 0, 172, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 2039, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 796, 785, 786,
	783, 784, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 1068, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	828, 334, 829, 181, 830, 831, 0, 182, 338, 339,
	183, 184, 0, 0, 832, 833, 342, 0, 185, 343,
	0, 474, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 475, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 834, 199,
	835, 836, 0, 200, 0, 201, 0, 202, 0, 0,
	827, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 792, 0, 0, 209, 210, 837, 838,
	839, 0, 211, 0, 212, 0, 0, 476, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 478, 0, 222, 0, 219, 0, 477, 220, 840,
	221, 841, 842, 843, 844, 845, 0, 803, 0, 479,
	223, 224, 225, 480, 226, 227, 228, 0, 230, 229,
	0, 364, 481, 231, 482, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 483, 239, 240,
	242, 241, 0, 0, 793, 366, 243, 846, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 484,
	249, 485, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	847, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 486, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 487,
	294, 848, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 849, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 850, 851, 0,
	0, 311, 312, 382, 383, 791, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 852, 0, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 963, 0, 692,
	689, 0, 0, 0, 965, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 474, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 475, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 476,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 478, 0, 222, 0, 219, 0, 477,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 479, 223, 224, 225, 480, 226, 227, 228, 0,
	230, 229, 0, 364, 481, 231, 482, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 483,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 484, 249, 485, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	486, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 487, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 0, 577, 325,
	172, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 0,
	182, 338, 339, 183, 184, 0, 0, 340, 341, 342,
	0, 185, 343, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 168,
	198, 344, 199, 345, 346, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	347, 206, 207, 208, 348, 349, 0, 0, 0, 209,
	210, 350, 351, 352, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 353, 0, 354, 0, 214, 215, 216,
	217, 218, 355, 356, 0, 0, 222, 0, 219, 0,
	0, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 223, 224, 225, 0, 226, 227, 228,
	0, 230, 229, 0, 364, 0, 231, 0, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 0, 249, 0, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	167, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 0, 165,
	325, 172, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 171, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	168, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 167, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 692,
	689, 325, 0, 0, 965, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 171, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 474, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 475, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 476,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 478, 0, 222, 0, 219, 0, 477,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 479, 223, 224, 225, 480, 226, 227, 228, 0,
	230, 229, 0, 364, 481, 231, 482, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 483,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 484, 249, 485, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	486, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 487, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 172, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 168, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 167, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 692, 689, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	171, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 474,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 475, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 476, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 355, 356, 478,
	0, 222, 0, 219, 0, 477, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 479, 223, 224,
	225, 480, 226, 227, 228, 0, 230, 229, 0, 364,
	481, 231, 482, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 483, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 484, 249, 485,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 486, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 487, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 172, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 692, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 171, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 474, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 475, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 476, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 478, 0, 222, 0, 219,
	0, 477, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 479, 223, 224, 225, 480, 226, 227,
	228, 0, 230, 229, 0, 364, 481, 231, 482, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 483, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 484, 249, 485, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 486, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 487, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 172,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 1420,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	1418, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 1617, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 1423, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 0, 0, 222, 1615, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 1422, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 1616, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 172, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 1420, 185, 343,
	0, 0, 1415, 186, 187, 188, 0, 189, 1418, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 1423, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 1414,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 1422, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 1421, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 887, 325, 172, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 214, 215, 216, 217, 218,
	355, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 734, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 740, 325, 172,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 742, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 734, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 0, 736, 325,
	172, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 0,
	182, 338, 339, 183, 184, 0, 0, 340, 341, 342,
	0, 185, 343, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 344, 199, 345, 346, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	347, 206, 207, 208, 348, 349, 0, 0, 0, 209,
	210, 350, 351, 352, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 353, 0, 354, 0, 214, 215, 216,
	217, 218, 738, 356, 0, 0, 222, 0, 219, 0,
	0, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 223, 224, 225, 0, 226, 227, 228,
	0, 230, 229, 0, 364, 0, 231, 0, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 734, 247, 0, 0,
	248, 368, 0, 249, 0, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 0, 411,
	325, 172, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 410,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 409, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 172,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 1403, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 172, 2126, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 172, 2126, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 355, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 2123, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 172, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 734,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 0, 1346, 325, 172, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 353, 0, 354,
	0, 214, 215, 216, 217, 218, 355, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 0, 1344, 325, 172, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 355, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 172, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 175,
	176, 1326, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 0, 1209, 325, 172, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 353, 0, 354,
	0, 214, 215, 216, 217, 218, 1208, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 0, 610, 325, 172, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 940, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 355, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 612, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 607, 380, 381, 0, 0, 311,
	941, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 0, 905, 325, 172, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 0, 182, 338, 339, 183,
	184, 0, 0, 340, 341, 342, 0, 185, 343, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 344, 199, 345,
	346, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 347, 206, 207, 208,
	348, 349, 0, 0, 0, 209, 210, 350, 351, 352,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 353,
	0, 354, 0, 214, 215, 216, 217, 218, 904, 356,
	0, 0, 222, 0, 219, 0, 0, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 223,
	224, 225, 0, 226, 227, 228, 0, 230, 229, 0,
	364, 0, 231, 0, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 0, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 0, 249,
	0, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 902, 325, 172, 0, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 901,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 898, 325, 172, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 214, 215, 216, 217, 218,
	897, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 895, 325, 172,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 894, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 0, 891, 325,
	172, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 0,
	182, 338, 339, 183, 184, 0, 0, 340, 341, 342,
	0, 185, 343, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 344, 199, 345, 346, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	347, 206, 207, 208, 348, 349, 0, 0, 0, 209,
	210, 350, 351, 352, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 353, 0, 354, 0, 214, 215, 216,
	217, 218, 890, 356, 0, 0, 222, 0, 219, 0,
	0, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 223, 224, 225, 0, 226, 227, 228,
	0, 230, 229, 0, 364, 0, 231, 0, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 0, 249, 0, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 172, 0,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 175, 176, 879, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 214, 215, 216, 217, 218,
	355, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 877, 325, 172,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 876, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 0, 873, 325,
	172, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 0,
	182, 338, 339, 183, 184, 0, 0, 340, 341, 342,
	0, 185, 343, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 344, 199, 345, 346, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	347, 206, 207, 208, 348, 349, 0, 0, 0, 209,
	210, 350, 351, 352, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 353, 0, 354, 0, 214, 215, 216,
	217, 218, 355, 356, 0, 0, 222, 0, 219, 0,
	0, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 223, 224, 225, 0, 226, 227, 228,
	0, 230, 229, 0, 364, 0, 231, 0, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 0, 249, 0, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 0, 871,
	325, 172, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	867, 325, 172, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 0, 182, 338, 339, 183, 184, 0, 0, 340,
	341, 342, 0, 185, 343, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 344, 199, 345, 346, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 348, 349, 0, 0,
	0, 209, 210, 350, 351, 352, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 353, 0, 354, 0, 214,
	215, 216, 217, 218, 869, 356, 0, 0, 222, 0,
	219, 0, 0, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 364, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 746, 325, 172, 0, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 748, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 0, 744, 325, 172, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 353, 0, 354,
	0, 214, 215, 216, 217, 218, 355, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 0, 610, 325, 172, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 601, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 355, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 600, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 612, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 602,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	603, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 607, 380, 381, 0, 0, 311,
	605, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 0, 585, 325, 172, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 0, 182, 338, 339, 183,
	184, 0, 0, 340, 341, 342, 0, 185, 343, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 344, 199, 345,
	346, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 347, 206, 207, 208,
	348, 349, 0, 0, 0, 209, 210, 350, 351, 352,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 353,
	0, 354, 0, 214, 215, 216, 217, 218, 355, 356,
	0, 0, 222, 0, 219, 0, 0, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 223,
	224, 225, 0, 226, 227, 228, 0, 230, 229, 0,
	364, 0, 231, 0, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 0, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 0, 249,
	0, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	373, 280, 0, 586, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 583, 325, 172, 0, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 575, 325, 172, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 214, 215, 216, 217, 218,
	355, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 434, 325, 172,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 172, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 172, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 1750, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 172, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 1748, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 172, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 1737, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 172,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 586, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 172, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 1219, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 0, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 172, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 355, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 710,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 172, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 0, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 0, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 0, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 0, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 1094, 1095, 0, 1114, 1115, 1116, 1124,
	1125, 1126, 0, 0, 0, 0, 0, 0, 0, 1117,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 1128,
	0, 1094, 1095, 0, 1114, 1115, 1116, 1124, 1125, 1126,
	0, 0, 0, 0, 0, 0, 0, 1117, 0, 0,
	1096, 0, 0, 0, 1097, 0, 1111, 1128, 0, 1094,
	1095, 0, 1114, 1115, 1116, 1124, 1125, 1126, 0, 0,
	0, 0, 0, 0, 0, 1117, 0, 0, 1096, 0,
	0, 0, 1097, 0, 1111, 1128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1096, 0, 0, 0,
	0, 1102, 1111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1121, 1129, 0, 0, 0, 0, 0, 0, 1102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1121,
	1129, 0, 0, 0, 1119, 0, 0, 1102, 0, 0,
	1112, 0, 0, 0, 0, 0, 0, 1127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1121, 1129, 0,
	0, 0, 1119, 0, 0, 1118, 0, 0, 1112, 0,
	0, 0, 0, 0, 0, 1127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1119, 0, 0, 1118, 0, 0, 1112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1113, 0, 0, 0, 0, 0, 0,
	0, 1118, 0, 0, 0, 0, 0, 0, 0, 1122,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1113, 0, 1828, 1829, 0, 1846, 1847, 1848, 0,
	0, 0, 0, 0, 0, 0, 0, 1122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1094, 1095, 1113,
	1114, 1115, 1116, 1124, 1125, 1126, 0, 0, 0, 0,
	0, 0, 0, 1117, 0, 1122, 0, 0, 0, 0,
	1097, 0, 0, 1128, 0, 0, 1843, 1120, 0, 0,
	1108, 1109, 1110, 1123, 0, 1107, 1105, 1106, 1098, 1099,
	1100, 1101, 1103, 1104, 1096, 0, 0, 0, 0, 0,
	1111, 0, 1868, 0, 0, 1120, 0, 0, 1108, 1109,
	1110, 1123, 0, 1107, 1105, 1106, 1098, 1099, 1100, 1101,
	1103, 1104, 0, 0, 0, 0, 0, 0, 0, 0,
	1820, 1834, 0, 1120, 0, 0, 1108, 1109, 1110, 1123,
	0, 1107, 1105, 1106, 1098, 1099, 1100, 1101, 1103, 1104,
	0, 0, 1850, 0, 2384, 1102, 1094, 1095, 0, 1114,
	1115, 1116, 1124, 1125, 1126, 0, 0, 0, 0, 1849,
	0, 0, 1117, 0, 0, 1121, 1129, 0, 0, 1097,
	0, 0, 1128, 0, 0, 0, 0, 0, 0, 0,
	1844, 0, 0, 1127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1096, 0, 0, 0, 0, 1119, 1111,
	0, 0, 0, 0, 1112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1118,
	0, 1828, 1829, 0, 1846, 1847, 1848, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1845, 1102, 1094, 1095, 0, 1114, 1115,
	1116, 1124, 1125, 1126, 0, 0, 0, 0, 0, 0,
	0, 1117, 0, 0, 1121, 1129, 0, 1113, 1097, 0,
	0, 1128, 0, 0, 1843, 0, 0, 0, 0, 0,
	0, 0, 1127, 1122, 0, 0, 0, 0, 0, 0,
	0, 0, 1096, 0, 0, 0, 0, 1119, 1111, 0,
	0, 0, 0, 1112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1118, 1834,
	1840, 1841, 1842, 0, 0, 1839, 1837, 1838, 1830, 1831,
	1832, 1833, 1835, 1836, 0, 0, 0, 0, 0, 0,
	0, 1120, 0, 1102, 1108, 1109, 1110, 1123, 0, 1107,
	1105, 1106, 1098, 1099, 1100, 1101, 1103, 1104, 0, 0,
	0, 0, 2365, 1121, 1129, 0, 1113, 0, 1094, 1095,
	0, 1114, 1115, 1116, 1124, 1125, 1126, 0, 1844, 0,
	0, 1127, 1122, 0, 1117, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 1128, 0, 1119, 0, 0, 0,
	0, 0, 1112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1096, 0, 0, 0, 0,
	0, 1111, 0, 0, 0, 0, 0, 1118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1120, 1845, 0, 1108, 1109, 1110, 1123, 0, 1107, 1105,
	1106, 1098, 1099, 1100, 1101, 1103, 1104, 0, 0, 0,
	0, 2311, 0, 0, 0, 1113, 1102, 1094, 1095, 0,
	1114, 1115, 1116, 1124, 1125, 1126, 0, 0, 0, 0,
	0, 1122, 0, 1117, 0, 0, 1121, 1129, 0, 0,
	1097, 0, 0, 1128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1096, 0, 0, 0, 0, 1119,
	1111, 0, 0, 0, 0, 1112, 0, 0, 1840, 1841,
	1842, 0, 0, 1839, 1837, 1838, 1830, 1831, 1832, 1833,
	1835, 1836, 0, 0, 0, 0, 0, 0, 0, 1120,
	1118, 0, 1108, 1109, 1110, 1123, 0, 1107, 1105, 1106,
	1098, 1099, 1100, 1101, 1103, 1104, 0, 0, 0, 0,
	2306, 0, 0, 0, 0, 1102, 1094, 1095, 0, 1114,
	1115, 1116, 1124, 1125, 1126, 0, 0, 0, 0, 0,
	0, 0, 1117, 0, 0, 1121, 1129, 0, 1113, 1097,
	0, 0, 1128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1127, 1122, 0, 0, 0, 0, 0,
	0, 0, 0, 1096, 0, 0, 0, 0, 1119, 1111,
	0, 0, 0, 0, 1112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1120, 0, 1102, 1108, 1109, 1110, 1123, 0,
	1107, 1105, 1106, 1098, 1099, 1100, 1101, 1103, 1104, 0,
	0, 0, 0, 2302, 1121, 1129, 0, 1113, 0, 1094,
	1095, 0, 1114, 1115, 1116, 1124, 1125, 1126, 0, 0,
	0, 0, 1127, 1122, 0, 1117, 0, 0, 0, 0,
	0, 0, 1097, 0, 0, 1128, 0, 1119, 0, 0,
	0, 0, 0, 1112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1096, 0, 0, 0,
	0, 0, 1111, 0, 0, 0, 0, 0, 1118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1120, 0, 0, 1108, 1109, 1110, 1123, 0, 1107,
	1105, 1106, 1098, 1099, 1100, 1101, 1103, 1104, 0, 0,
	0, 0, 2282, 0, 0, 0, 1113, 1102, 1094, 1095,
	0, 1114, 1115, 1116, 1124, 1125, 1126, 0, 0, 0,
	0, 0, 1122, 0, 1117, 0, 0, 1121, 1129, 0,
	0, 1097, 0, 0, 1128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1096, 0, 0, 0, 0,
	1119, 1111, 0, 0, 0, 0, 1112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1120, 1118, 0, 1108, 1109, 1110, 1123, 0, 1107, 1105,
	1106, 1098, 1099, 1100, 1101, 1103, 1104, 0, 0, 0,
	0, 2225, 0, 0, 0, 0, 1102, 1094, 1095, 0,
	1114, 1115, 1116, 1124, 1125, 1126, 0, 0, 0, 0,
	0, 0, 0, 1117, 0, 0, 1121, 1129, 0, 1113,
	1097, 0, 0, 1128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1127, 1122, 0, 0, 0, 0,
	0, 0, 0, 0, 1096, 0, 0, 0, 0, 1119,
	1111, 0, 0, 0, 0, 1112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1120, 0, 1102, 1108, 1109, 1110, 1123,
	0, 1107, 1105, 1106, 1098, 1099, 1100, 1101, 1103, 1104,
	0, 0, 0, 0, 2224, 1121, 1129, 0, 1113, 0,
	1094, 1095, 0, 1114, 1115, 1116, 1124, 1125, 1126, 0,
	0, 0, 0, 1127, 1122, 0, 1117, 0, 0, 0,
	0, 0, 0, 1097, 0, 0, 1128, 0, 1119, 0,
	0, 0, 0, 0, 1112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1096, 0, 0,
	0, 0, 0, 1111, 0, 0, 0, 0, 0, 1118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1120, 0, 0, 1108, 1109, 1110, 1123, 0,
	1107, 1105, 1106, 1098, 1099, 1100, 1101, 1103, 1104, 0,
	0, 0, 0, 2164, 0, 0, 0, 1113, 1102, 1094,
	1095, 0, 1114, 1115, 1116, 1124, 1125, 1126, 0, 0,
	0, 0, 0, 1122, 0, 1117, 0, 0, 1121, 1129,
	0, 0, 1097, 0, 0, 1128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1096, 0, 0, 0,
	0, 1119, 1111, 0, 0, 0, 0, 1112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1120, 1118, 0, 1108, 1109, 1110, 1123, 0, 1107,
	1105, 1106, 1098, 1099, 1100, 1101, 1103, 1104, 0, 0,
	0, 0, 2129, 0, 0, 0, 0, 1102, 1094, 1095,
	0, 1114, 1115, 1116, 1124, 1125, 1126, 0, 0, 0,
	0, 0, 0, 0, 1117, 0, 0, 1121, 1129, 0,
	1113, 1097, 0, 0, 1128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1127, 1122, 0, 0, 0,
	0, 0, 0, 0, 0, 1096, 0, 0, 0, 0,
	1119, 1111, 0, 0, 0, 0, 1112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1120, 0, 1102, 1108, 1109, 1110,
	1123, 0, 1107, 1105, 1106, 1098, 1099, 1100, 1101, 1103,
	1104, 0, 0, 0, 0, 2042, 1121, 1129, 0, 1113,
	0, 1094, 1095, 0, 1114, 1115, 1116, 1124, 1125, 1126,
	0, 0, 0, 0, 1127, 1122, 0, 1117, 0, 0,
	0, 0, 0, 0, 1097, 0, 0, 1128, 0, 1119,
	0, 0, 0, 0, 0, 1112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1096, 0,
	0, 0, 0, 0, 1111, 0, 0, 0, 0, 0,
	1118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1120, 0, 0, 1108, 1109, 1110, 1123,
	0, 1107, 1105, 1106, 1098, 1099, 1100, 1101, 1103, 1104,
	0, 0, 0, 0, 2018, 0, 0, 0, 1113, 1102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1122, 0, 0, 0, 0, 1121,
	1129, 0, 1094, 1095, 0, 0, 0, 0, 1124, 1125,
	1126, 0, 0, 0, 0, 0, 0, 1127, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 1128, 0,
	0, 0, 1119, 0, 0, 0, 0, 0, 1112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1096,
	0, 0, 0, 0, 0, 1111, 0, 0, 0, 0,
	0, 0, 1120, 1118, 0, 1108, 1109, 1110, 1123, 38,
	1107, 1105, 1106, 1098, 1099, 1100, 1101, 1103, 1104, 0,
	39, 120, 0, 1515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 42, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 0, 0,
	1102, 1113, 0, 43, 0, 48, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1122, 0, 0,
	1121, 1129, 0, 0, 0, 0, 51, 0, 0, 0,
	53, 0, 0, 0, 59, 0, 0, 123, 0, 0,
	0, 60, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1119, 0, 0, 0, 0, 0, 1112,
	0, 62, 0, 0, 0, 0, 0, 63, 0, 0,
	64, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1120, 0, 0, 1108, 1109,
	1110, 1123, 0, 1107, 1105, 1106, 1098, 1099, 1100, 1101,
	1103, 1104, 0, 0, 1790, 1094, 1095, 0, 1114, 1115,
	1116, 1124, 1125, 1126, 0, 0, 0, 0, 0, 0,
	0, 1117, 0, 0, 0, 0, 0, 0, 1097, 0,
	0, 1128, 1113, 0, 0, 0, 0, 0, 0, 1094,
	1095, 0, 1114, 1115, 1116, 1124, 1125, 1126, 1122, 0,
	65, 0, 1096, 0, 0, 1117, 66, 0, 1111, 0,
	0, 0, 1097, 0, 0, 1128, 0, 0, 0, 0,
	0, 0, 0, 0, 73, 74, 67, 0, 68, 0,
	69, 0, 124, 0, 0, 0, 1096, 70, 0, 0,
	0, 131, 1111, 0, 0, 0, 0, 0, 80, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 1102, 2458, 0, 1120, 0, 0, 0,
	133, 0, 1123, 0, 1107, 1105, 1106, 1098, 1099, 1100,
	1101, 1103, 1104, 1121, 1129, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 1102, 119, 1860,
	0, 1127, 1859, 0, 1094, 1095, 132, 1114, 1115, 1116,
	1124, 1125, 1126, 0, 125, 0, 1119, 1121, 1129, 0,
	1117, 126, 1112, 0, 0, 1694, 0, 1097, 0, 0,
	1128, 0, 0, 0, 0, 1127, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 0, 1118, 0, 0,
	1119, 1096, 0, 0, 0, 0, 1112, 1111, 0, 0,
	0, 0, 0, 2457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1118, 0, 0, 0, 0, 0, 1695, 0, 1828,
	1829, 0, 1846, 1847, 1848, 1113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1122, 1102, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1113,
	0, 0, 1121, 1129, 0, 0, 0, 0, 0, 0,
	0, 0, 1843, 0, 0, 1122, 0, 0, 1379, 0,
	1127, 0, 0, 0, 1094, 1095, 0, 1114, 1115, 1116,
	1124, 1125, 1126, 0, 0, 1119, 0, 0, 0, 0,
	1117, 1112, 0, 0, 1378, 0, 0, 1097, 0, 1120,
	1128, 0, 1108, 1109, 1110, 1123, 0, 1107, 1105, 1106,
	1098, 1099, 1100, 1101, 1103, 1104, 1118, 1834, 0, 0,
	0, 1096, 0, 0, 0, 0, 0, 1111, 0, 0,
	0, 0, 0, 1120, 0, 0, 1108, 1109, 1110, 1123,
	0, 1107, 1105, 1106, 1098, 1099, 1100, 1101, 1103, 1104,
	0, 0, 0, 0, 0, 1849, 0, 0, 0, 0,
	0, 0, 0, 0, 1113, 1094, 1095, 0, 1114, 1115,
	1116, 1124, 1125, 1126, 0, 0, 1844, 0, 0, 0,
	1122, 1117, 1102, 0, 0, 0, 0, 0, 1097, 0,
	0, 1128, 0, 1094, 1095, 0, 1114, 1115, 1116, 1124,
	1125, 1126, 1121, 1129, 0, 0, 0, 0, 0, 1117,
	0, 0, 1096, 0, 0, 0, 1097, 0, 1111, 1128,
	1127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1119, 0, 0, 0, 0,
	1096, 1112, 0, 0, 0, 0, 1111, 0, 1120, 1845,
	0, 1108, 1109, 1110, 1123, 0, 1107, 1105, 1106, 1098,
	1099, 1100, 1101, 1103, 1104, 0, 1118, 0, 0, 0,
	0, 0, 0, 1102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1121, 1129, 0, 0, 0, 0, 0,
	0, 1102, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1127, 0, 0, 1113, 0, 0, 0, 0, 0,
	0, 1121, 1129, 0, 0, 0, 1119, 0, 0, 0,
	1122, 0, 1112, 0, 0, 0, 1840, 1841, 1842, 1127,
	0, 1839, 1837, 1838, 1830, 1831, 1832, 1833, 1835, 1836,
	0, 0, 0, 0, 1119, 0, 0, 1118, 671, 0,
	1112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1120, 0,
	0, 1108, 1109, 1110, 1123, 1113, 1107, 1105, 1106, 1098,
	1099, 1100, 1101, 1103, 1104, 0, 0, 0, 0, 0,
	0, 1122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1094, 1095, 1113, 1114, 1115, 1116, 1124, 1125, 1126,
	0, 0, 0, 0, 0, 0, 0, 1117, 0, 1122,
	0, 0, 0, 0, 1097, 0, 0, 1128, 0, 0,
	1094, 1095, 0, 1114, 1115, 1116, 1124, 1125, 1126, 0,
	0, 0, 0, 0, 0, 2022, 1117, 0, 1096, 0,
	1861, 0, 0, 1097, 1111, 0, 1128, 0, 0, 1120,
	0, 0, 1108, 1109, 1110, 1123, 0, 1107, 1105, 1106,
	1098, 1099, 1100, 1101, 1103, 1104, 0, 1096, 0, 0,
	0, 0, 0, 1111, 0, 0, 0, 1120, 0, 0,
	1108, 1109, 1110, 1123, 0, 1107, 1105, 1106, 1098, 1099,
	1100, 1101, 1103, 1104, 0, 0, 0, 0, 0, 1102,
	0, 0, 0, 0, 1866, 0, 1094, 1095, 0, 1114,
	1115, 1116, 1124, 1125, 1126, 0, 0, 0, 0, 1121,
	1129, 0, 1117, 0, 0, 0, 0, 0, 1102, 1097,
	0, 0, 1128, 0, 0, 0, 0, 1127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1121, 1129,
	0, 0, 1119, 1096, 0, 0, 0, 0, 1112, 1111,
	0, 0, 0, 0, 0, 0, 1127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1119, 0, 1118, 0, 0, 0, 1112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1118, 0, 1102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1113, 0, 0, 1121, 1129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1122, 0, 0,
	0, 0, 1127, 0, 0, 0, 0, 0, 0, 0,
	1113, 0, 0, 0, 0, 0, 0, 1119, 0, 0,
	0, 0, 0, 1112, 0, 0, 1122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1094, 1095, 0, 1114,
	1115, 1116, 1124, 1125, 1126, 0, 0, 0, 1118, 0,
	0, 0, 1117, 0, 0, 0, 1819, 0, 0, 1097,
	0, 1826, 1128, 0, 0, 1120, 0, 0, 1108, 1109,
	1110, 1123, 0, 1107, 1105, 1106, 1098, 1099, 1100, 1101,
	1103, 1104, 0, 1096, 0, 0, 0, 0, 0, 1111,
	0, 0, 0, 0, 1120, 0, 1113, 1108, 1109, 1110,
	1123, 0, 1107, 1105, 1106, 1098, 1099, 1100, 1101, 1103,
	1104, 0, 1122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1094, 1095, 0, 1114, 1115, 1116, 1124, 1125,
	1126, 0, 0, 0, 0, 0, 0, 0, 1117, 0,
	0, 0, 0, 0, 1102, 1097, 0, 0, 1128, 0,
	0, 1094, 1095, 0, 1114, 1115, 1116, 1124, 1125, 1126,
	0, 0, 0, 0, 1121, 1129, 0, 0, 0, 1096,
	0, 0, 0, 0, 1097, 1111, 0, 1128, 0, 0,
	1120, 0, 1127, 1108, 1109, 1110, 1123, 0, 1107, 1105,
	1106, 1098, 1099, 1100, 1101, 1103, 1104, 1119, 1096, 0,
	0, 0, 0, 1112, 1111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1118, 0,
	1102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1121, 1129, 0, 0, 0, 0, 0, 0, 0, 1102,
	0, 1055, 0, 0, 0, 0, 0, 0, 1127, 0,
	0, 0, 0, 0, 0, 0, 1113, 38, 0, 1121,
	1129, 0, 0, 1119, 0, 0, 0, 0, 39, 1112,
	0, 0, 1122, 0, 0, 0, 0, 1127, 0, 0,
	0, 42, 1094, 1095, 0, 1114, 1115, 1116, 1124, 1125,
	1126, 0, 1119, 0, 1118, 0, 0, 0, 1112, 0,
	0, 0, 0, 48, 0, 1097, 0, 0, 1128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1096,
	0, 0, 59, 0, 0, 1111, 0, 0, 0, 60,
	1120, 61, 1113, 1108, 1109, 1110, 1123, 0, 1107, 1105,
	1106, 1098, 1099, 1100, 1101, 1103, 1104, 0, 1122, 0,
	0, 0, 0, 0, 0, 63, 0, 0, 64, 0,
	0, 1113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 436, 0, 0, 0, 1122, 0, 0,
	1102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 38, 0, 0, 0, 0, 0,
	1121, 1129, 0, 0, 0, 39, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1120, 0, 42, 1108,
	1109, 1110, 1123, 0, 1107, 1105, 1106, 1098, 1099, 1100,
	1101, 1103, 1104, 1119, 0, 0, 0, 0, 65, 1112,
	48, 0, 0, 0, 0, 1120, 0, 0, 1108, 1109,
	1110, 1123, 0, 1107, 1105, 1106, 1098, 1099, 1100, 1101,
	1103, 1104, 0, 38, 0, 0, 68, 0, 0, 59,
	0, 0, 0, 0, 39, 0, 60, 0, 61, 131,
	0, 0, 0, 0, 0, 0, 0, 42, 0, 99,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 63, 0, 0, 64, 0, 0, 133, 48,
	0, 0, 1113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	0, 0, 0, 0, 132, 60, 0, 61, 0, 0,
	0, 0, 125, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 63, 0, 0, 64, 0, 0, 0, 118, 0,
	0, 0, 0, 0, 0, 65, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1120, 0, 0, 1108,
	1109, 1110, 1123, 0, 1107, 1105, 1106, 1098, 1099, 1100,
	1101, 1103, 1104, 68, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 0, 1267,
	1257, 1286, 1249, 1277, 1276, 0, 99, 1251, 1250, 0,
	0, 0, 0, 1288, 1287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 65, 133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1282, 0, 1274,
	1273, 0, 68, 0, 0, 0, 0, 0, 0, 1272,
	0, 132, 0, 0, 0, 131, 0, 0, 0, 125,
	0, 0, 0, 0, 0, 99, 126, 1271, 1269, 1270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1260, 1259,
	1261, 1262, 1263, 1264, 1265, 0, 1285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 1267, 1257, 1286, 1249, 1277, 1276, 125, 0,
	1251, 1250, 0, 0, 1253, 126, 1288, 1287, 0, 0,
	0, 0, 0, 0, 0, 0, 1275, 0, 0, 0,
	1258, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	631, 0, 591, 0, 0, 0, 0, 0, 0, 0,
	1282, 0, 1274, 1273, 0, 0, 0, 0, 0, 1268,
	636, 0, 1272, 1450, 1448, 1449, 1452, 1451, 0, 0,
	0, 0, 634, 0, 0, 0, 0, 0, 0, 0,
	1271, 1269, 1270, 0, 0, 0, 0, 0, 0, 1254,
	0, 0, 0, 635, 0, 0, 0, 0, 637, 0,
	1266, 1255, 0, 643, 644, 0, 0, 653, 0, 0,
	1290, 1260, 1259, 1261, 1262, 1263, 1264, 1265, 0, 1285,
	0, 593, 638, 1252, 0, 0, 1283, 1284, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 656, 0, 0, 1253, 1256, 0,
	0, 0, 0, 1289, 0, 0, 0, 0, 0, 1275,
	0, 0, 0, 1258, 639, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 640,
	641, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1268, 0, 0, 0, 0, 647, 0, 0,
	642, 649, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 646, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 594, 1254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1266, 1255, 0, 0, 0, 0, 0,
	0, 0, 0, 1290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1252, 0, 0, 1283,
	1284, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1256, 0, 0, 0, 0, 1289, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 633, 650, 595,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 651, 0, 0, 0, 655, 0, 0,
	0, 596, 0, 0, 0, 0, 648, 652, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 654,
}
var sqlPact = [...]int{

	39826, -1000, 19, -1000, -1000, 196, -1000, -1000, -1000, 195,
	194, 193, -1000, 192, 191, 189, -1000, 188, 187, 185,
	183, 180, 179, 175, 173, -1000, 171, 168, -1000, -1000,
	-1000, 164, 162, 161, 158, 157, 155, 151, 1037, 23237,
	149, 147, 1360, 35393, 146, 140, 138, 135, 1194, 132,
	118, 26747, 931, 1435, 117, 115, 114, 112, 110, 1052,
	35075, 41311, 2511, 5997, 1130, 1597, 34754, 22916, 1592, 2500,
	34433, -1000, -1000, 34112, 1666, 109, 107, 103, -1000, -1000,
	33791, 100, 99, 98, 96, 93, 92, 87, 84, 82,
	71, 69, 66, 65, 64, -1000, 60, 56, 51, 41738,
	47, 38, 35, 1124, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 218, -1000, 1169, 505, 18380,
	1013, 1011, 1006, 1005, 985, 37301, 35393, 34, -133, 33,
	-1000, 1859, 648, 20322, 39826, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	26426, 26105, 33470, 33149, 767, -1000, 16, 24509, 35393, -1000,
	78, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	14371, 14014, 561, 78, -1000, -1000, -1000, -1000, -1000, 32828,
	-1000, 32507, 32186, 1472, 31865, -1000, -1000, -1000, -1000, 31544,
	-1000, -1000, 1713, 1610, 1608, 25784, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 31226, 30905,
	30584, 30263, 29942, 495, -1000, -1000, -1000, 17056, -1000, -1000,
	-1000, -1000, 32, -1000, -1000, 31, -1000, 30, 29, 28,
	25, 24, -1000, -1000, 23, 21, 1193, -1000, -1000, 17,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	35393, -1000, 15400, -1000, 494, -1000, 1603, -1000, 15400, -1000,
	1182, -1000, -1000, -1000, -1000, -1000, 35393, -1000, -1000, 1076,
	-1000, -1000, -1000, -1000, -1000, -1000, 911, -1000, -1000, -1000,
	2079, 1127, 493, 29621, -1000, 1365, -1000, 593, 745, -1000,
	-1000, -1000, 18048, 220, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1574, 22595, 1183, 1878, 1694, 2078, 1342,
	1692, 1675, 1671, 1650, 1648, 2076, 914, 2075, 1739, 1015,
	2074, 1643, 1181, 667, 2071, 1599, 1596, -1000, -1000, -1000,
	28019, -1000, -1000, 1169, -1000, -1000, -1000, 1308, 1840, 1840,
	1840, 1903, 308, 284, -1000, 218, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2012, -1000, -1000, -1000,
	-1000, 2047, -1000, -1000, -1000, -1000, 1265, -1000, -1000, 1265,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 765, 36665, 15,
	35393, -1000, 492, 15, -1000, -1000, 489, -1000, 10472, 10472,
	-1000, -1000, -1000, -1000, -1000, 8757, 1684, -1000, 41164, -193,
	315, 563, -1000, 19353, 21933, -1000, -1000, 1035, 1746, 627,
	-1000, 1026, 1738, 459, -1000, 972, -1000, 1111, 1730, -93,
	23555, 24509, 16, -10, -1000, -1000, -1000, 5667, 41022, -1000,
	-1000, 15400, 15400, 15400, 15400, 15400, 1077, 515, -1000, 488,
	487, 7027, -1000, -1000, 2046, -1000, -1000, -1000, 318, -1000,
	-1000, 15400, 78, -1000, -1000, -1000, -1000, 484, 2055, -1000,
	655, -1000, -1000, -1000, 599, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1623, 482, 481, 480, -1000, -1000,
	-1000, -1000, 478, 477, 473, 470, 468, 464, 454, 453,
	451, 444, 442, 440, 437, 436, 434, 1045, -1000, 631,
	-1000, -1000, 631, 631, -1000, 425, 425, 426, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 425, -1000, -1000, -1000,
	592, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 433, 41022,
	-1000, 828, 20966, 78, -1000, -1000, -1000, -1000, 431, 1317,
	607, -1000, 312, -1000, 29300, 607, 1315, -1000, -1000, -1000,
	28019, -1000, 35393, -1000, 35393, -1000, 872, -1000, 36983, 123,
	1728, -1000, -1000, 123, 1726, -1000, 122, 1725, -1000, -1000,
	-1000, 1723, -1000, -10, 1718, -1000, -1000, 15400, 0, -1000,
	-1000, -1000, 648, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 23873, 1325, 567, 41022, 1960, 41665, 23555, 41022,
	23873, -1000, -1000, -1000, -1000, -1000, 35393, -1000, 15400, -1000,
	1957, 1329, 8, -1000, -1000, -1000, -1000, -1000, 1382, 1340,
	768, 942, 17718, 17388, 1798, -1000, -1000, -1000, 213, 5997,
	-1000, -1000, -1000, -1000, -1000, -1000, 28979, -1000, -1000, -1000,
	1104, 35393, -1000, -1000, 1619, -1000, 23873, 35393, -1000, 35393,
	-1000, 35393, -1000, 35393, -1000, 35393, -1000, -1000, -1000, -1000,
	-1000, 2396, -1000, 1618, -1000, -1000, 35393, -1000, 1356, -1000,
	-1000, -1000, 28661, 28340, -1000, 944, 799, 129, -1000, -1000,
	1308, -1000, 1202, 1423, 13657, 1434, 15400, 218, -1000, -1000,
	218, 218, 8057, -1000, -1000, -1000, -1000, -1000, -1000, 8,
	-1000, 36665, -1000, 35393, 15, 1953, 35393, -1000, 86, -1000,
	40284, -1000, 86, -7, -1000, 41022, -1000, 1438, 1430, 20644,
	1385, 1110, 1110, 1110, -1000, 430, 507, 563, 4992, 13314,
	-1000, 27065, 1115, 233, 290, 19031, 1684, -1000, 35393, -28,
	961, -1000, 25463, 1877, 1867, 1823, 28019, 1917, 156, 1594,
	755, 28019, 752, 1915, 156, 1582, 749, 35393, 5997, 573,
	-1000, 35393, -1000, -1000, 41532, 41665, 5997, 781, 15400, 15400,
	15400, 15400, 15400, 15400, 15400, 15400, 15400, 15400, 15400, 15400,
	15400, 15400, 15400, 15400, 15400, 15400, 15400, 15400, 15400, 15400,
	1136, 15400, 746, 15400, 15400, 15400, 15400, 1369, 1113, 413,
	1226, -1000, 2007, 2007, 2007, 41051, 41051, 393, 515, -1000,
	15400, -1000, 156, 12957, 284, 39508, 12, 6684, -1000, -1000,
	-1000, 8400, 620, 41022, 78, 4463, -1000, 2044, 873, 1631,
	1501, 428, 559, 553, 552, 15400, 15400, 12614, 12257, 11900,
	15743, 11543, 15400, 7370, 15400, 15400, 15400, 15400, 11186, 10829,
	-1000, 427, -1000, -1000, -1000, -1000, 2043, -1000, -1000, 2040,
	-1000, 779, 775, 2038, -1000, 1579, -8, -1000, -1000, 25145,
	1951, 1708, -1000, 1060, -1000, 1944, 35393, 1177, 1312, -1000,
	-1000, 792, 1683, 613, 245, 1942, 245, 21289, -1000, 35393,
	-1000, 35393, -1000, -1000, 35393, -1000, 35393, -1000, 35393, 35393,
	35393, 35393, -9, 41022, 41380, 24827, 744, -1000, 660, 25145,
	170, -16, -1000, 675, -1000, -1000, -1000, -1000, 384, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 426, 1045, 425, 425, 425, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 592, -1000, -1000, 631, 631, 631, -1000,
	-1000, -18, -1000, 1569, -1000, 586, -19, 693, 8, -1000,
	1265, -1000, 1009, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2052, 9, -1000, -1000,
	9, -1000, -1000, 5997, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 35393, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	159, -1000, -1000, -1000, -1000, -1000, -1000, 35393, 35393, 35393,
	-1000, 28019, -1000, -1000, -1000, -1000, 41022, -1000, 408, -1000,
	-1000, 41022, 909, 1455, -1000, 1455, 6, -1000, 40134, 1421,
	35393, -1000, -1000, 423, -22, 613, 10472, 19999, 5997, -1000,
	613, 8757, -1000, 20644, 20644, 1541, 1428, 20644, -1000, -1000,
	-1000, -1000, 27065, 509, 563, 27065, -1000, 2037, 1413, -27,
	-1000, -1000, -1000, 35393, 422, -1000, 563, 282, 1165, 35393,
	35393, 35393, -1000, -1000, 1311, 36347, 1310, 41665, 35393, -1000,
	420, 416, 1416, 1402, 35393, 35393, 36029, 35711, 35393, 948,
	156, -1000, 415, 35393, 941, 35393, 156, -1000, 414, 35393,
	939, -1000, 1487, 1185, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 587, 452, 452, 908, 908,
	908, 908, 2025, 350, 793, 1456, 39772, 39772, 39772, 1223,
	762, 762, 39772, 39772, 39772, 41051, 4104, 867, 15400, 15400,
	742, 1082, 413, 867, 15400, 867, 867, 867, 867, -1000,
	1398, -1000, -1000, -1000, -1000, 1566, 412, 15743, 15743, -1000,
	-1000, -1000, 7027, 16073, -1000, -1000, -1000, -1000, 411, 15400,
	-1000, 39641, -205, -44, -1000, -1000, 15400, -43, -91, -1000,
	-1000, 845, -1000, 15400, -1000, -29, 15400, 15400, 15400, 279,
	-1000, 277, -1000, 740, -1000, 739, 734, 733, -1000, 410,
	1079, 409, 407, 15400, -1000, -1000, -1000, -1000, -1000, -1000,
	40936, 37971, 267, -1000, 1552, -170, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 262, -1000, 261, -1000, 40756, -170, 259,
	38213, -1000, 15743, 15743, 15743, 7027, 405, 257, -1000, 40019,
	-170, 40670, 10129, 10129, 10129, 256, 40641, 15400, -170, 37943,
	3957, 309, -46, -47, -1000, -53, -1000, 2034, -54, 255,
	583, 579, 254, 827, 1551, 35393, 253, -70, 3, 41665,
	-1000, -1000, -1000, -1000, -1000, 35393, 466, 35393, 156, 35393,
	2050, 156, 35393, 1680, 1670, 398, 35393, 930, 15400, 1175,
	-1000, 19676, 636, 35393, 930, 77, -1000, -1000, -1000, 562,
	35393, -1000, -1000, 123, 123, -1000, 122, -1000, -10, -1000,
	15400, -1000, -1000, 35393, 23555, -71, -1000, -1000, 41665, -1000,
	513, 669, -1000, 2032, 606, 23555, 35393, -1000, 1450, -1000,
	-1000, 917, -1000, 963, -1000, 18710, -1000, -59, -1000, -1000,
	-1000, -1000, -1000, 573, -1000, 909, -1000, 15400, 2031, -1000,
	-1000, -1000, 8057, -1000, -1000, -1000, 35393, -177, 170, -1000,
	1500, -1000, -83, -1000, 1684, -1000, 1500, -1000, -1000, 1541,
	-1000, 402, 15400, 20644, -1000, 504, -1000, -72, -1000, 27065,
	-1000, 503, -202, -1000, 551, -1000, 563, 395, 35393, 27065,
	-1000, -1000, -1000, 729, 725, 1674, -1000, 1301, -1000, 644,
	-1000, 1003, 15400, 16733, 394, 392, 1063, -1000, 1672, 1191,
	1663, 1191, -1000, -28, 959, -1000, 15400, -1000, 723, -1000,
	-1000, 15400, -1000, 720, 606, 1549, 812, 15400, 867, 867,
	15400, 15743, 15743, -1000, 867, -1000, -1000, -1000, -1000, -1000,
	1546, 390, 15400, 41665, 4014, 3601, -78, -1000, 9786, -38,
	-1000, 15400, -1000, 39399, -1000, -1000, 510, 1651, -1000, 15400,
	40403, 251, 9443, -1000, 40375, -30, -30, -1000, 2027, 1334,
	1351, 965, 893, 2023, -1000, 21611, 614, 1120, 39290, 41532,
	41665, -1000, 15400, -1000, -1000, 1539, 15400, -1000, 41532, 41665,
	15743, 15743, 15743, 15743, 15743, 15743, 15743, 15743, 15743, 15743,
	15743, 15743, 15743, 15743, 15743, 15743, 15743, 15743, 15743, 1397,
	15743, 2005, 2005, 2005, -56, 9100, -1000, 1544, 1539, 15400,
	15400, 41665, 250, 248, 247, -1000, 15400, -170, 15400, 15400,
	15400, -1000, -1000, -1000, 246, -1000, 2022, -1000, -1000, -1000,
	-1000, -1000, 825, -1000, 1475, -1000, 25145, 389, 35393, 387,
	-1000, 382, -1000, -1000, 369, 35393, 1391, 398, 24191, -1000,
	607, -1000, 7713, 41022, -1000, 930, 1826, -86, -1000, -1000,
	-1000, 613, 21289, 20644, 8757, -96, -1000, -1000, -1000, 41022,
	-59, 1805, 1805, -1000, 2021, -1000, 502, 243, -1000, 27701,
	-1000, -59, -1000, -1000, -1000, -1000, -1000, 35393, -1000, 1126,
	39157, -1000, 1853, 5997, 242, 1494, 1899, -1000, 20644, 1494,
	-1000, 35393, 41022, -1000, -193, -1000, 2014, -1000, -1000, 1413,
	-1000, 5334, 27065, 35393, -99, -1000, 35393, 35393, 35393, 1649,
	-1000, 2439, -1000, 39048, -101, -1000, 322, 1862, 15400, -1000,
	-1000, 365, 16733, 35393, -1000, 1396, 1414, 679, 35393, -1000,
	35393, -1000, 35393, 35393, 35393, -104, 35393, -109, 35393, -1000,
	23555, 771, 2015, 867, 383, 343, 15400, 41665, 41202, -112,
	15400, 15400, -1000, -114, -1000, 15400, 501, 41022, -1000, -1000,
	-1000, 41022, 15400, 2017, 15400, 241, 240, 239, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 237, -1000, -1000, 37619,
	15400, 236, -1000, 235, 234, 41022, 1544, 41022, -1000, -1000,
	556, 556, 876, 876, 876, 876, 2005, 547, 953, 467,
	947, 947, 947, 1721, 524, 524, 947, 947, 947, 1535,
	1338, 364, 40219, 15400, -117, -1000, -1000, -1000, 41022, 41022,
	231, -1000, -1000, -1000, -170, 281, 38939, 38806, -1000, 228,
	-1000, -1000, 1478, -1000, 16733, 361, 35393, 25145, 1931, 16733,
	1174, 1410, 398, 24191, -1000, 792, -73, -1000, -1000, 385,
	156, 930, -1000, -84, -1000, 549, 1783, -1000, 1773, 500,
	-1000, -1000, -89, 360, -1000, 537, 522, -1000, -1000, -1000,
	-1000, 1853, -1000, 611, 15400, 15400, 1684, 611, -120, 563,
	-1000, -1000, -1000, 2006, -1000, -122, -1000, -1000, -1000, -1000,
	35393, -1000, 35393, -1000, 5997, 35393, 1510, 1253, -1000, -1000,
	1400, 359, 15743, 35393, -1000, 1034, 16733, 1853, 78, 5997,
	1853, 38697, 4463, -123, -128, 1239, -1000, 1233, 15400, -1000,
	41665, 1191, 1191, -1000, 718, 705, 704, -1000, 700, -1000,
	-111, 22263, 15400, 15400, 41202, -134, -1000, 867, 867, -1000,
	38588, -1000, 41022, -1000, 40375, -1000, -1000, -1000, -1000, 1053,
	-1000, 38455, -1000, -1000, -1000, -1000, 15743, 1519, 358, 41665,
	38346, -1000, -1000, 15400, -1000, -1000, -1000, 1066, -136, 16733,
	-137, 227, 156, -139, 35393, -1000, 398, 24191, -1000, 1670,
	1755, 35393, 1814, -1000, -1000, 356, 354, 353, -1000, 27383,
	27383, 23555, 23555, -1000, -1000, 35393, 41022, -170, -1000, -1000,
	27065, 499, -1000, -1000, 1332, -1000, -1000, 35393, 1264, -1000,
	-1000, 15400, 40219, 352, 1475, 351, -1000, -1000, -1000, -1000,
	-1000, -1000, 1862, -29, -1000, 1040, -1000, -1000, 41022, 1845,
	-1000, -1000, 35393, 35393, 349, 348, -1000, 329, 78, 867,
	867, -1000, -1000, 226, 1120, 1893, -1000, 38431, 15743, 41665,
	-144, -1000, 38237, 35393, 1034, -145, -1000, 1475, -1000, 1034,
	325, 24191, -1000, 1391, 809, -152, 35393, -1000, -1000, 6327,
	23555, 23555, -1000, -154, -1000, -1000, -119, -1000, 1925, -1000,
	-1000, -1000, -1000, 1644, 37999, 1347, 35393, -1000, 35393, 1853,
	224, 35393, 651, 5997, -1000, -1000, 15400, 15400, 15400, -1000,
	1057, 15400, 38431, -157, -1000, -1000, 321, 1475, 1034, -1000,
	1475, 16733, -1000, 1410, 866, -1000, 613, -1000, -163, -164,
	-1000, 35393, 319, 1635, -1000, 1134, 1067, 223, -169, -1000,
	-1000, 312, -1000, 15400, -1000, -171, -174, -30, 222, 15057,
	15057, -170, -1000, 35393, -1000, 1475, -1000, -179, -1000, 21289,
	-1000, 606, 606, -1000, -1000, 35393, -1000, 1167, 1162, 896,
	-1000, -1000, -1000, -1000, -1000, 1347, 41022, -1000, -1000, 219,
	-1000, -1000, -1000, 16403, 1227, 923, 39985, -1000, -180, -1000,
	1034, -160, -1000, -1000, -1000, -1000, 1762, -1000, 666, 1269,
	1269, 1134, 2017, 1983, -1000, -1000, -1000, -1000, -1000, 1190,
	1475, -1000, -1000, 1990, -1000, -1000, 1320, -1000, -1000, 14714,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2390, 2387, 1648, 1939, 2386, 2385, 2384, 2381, 2379,
	2378, 2376, 2375, 2374, 2371, 2369, 2368, 2366, 2365, 2359,
	1921, 2357, 1892, 2355, 2353, 2348, 2346, 1863, 2343, 2342,
	2341, 2340, 2337, 2336, 1857, 2335, 1845, 2334, 2333, 2330,
	2329, 2326, 1840, 1825, 2325, 86, 108, 1810, 2324, 2321,
	1796, 1781, 1735, 2319, 2317, 1708, 2316, 2315, 37, 2313,
	2312, 2311, 2310, 2309, 2307, 2306, 141, 153, 2305, 1703,
	2302, 2301, 2300, 2298, 2292, 2291, 2290, 2289, 2287, 2286,
	2283, 2282, 2281, 2267, 2266, 2265, 2264, 2259, 152, 2257,
	2255, 1660, 1625, 2248, 2245, 26, 27, 14, 56, 21,
	145, 2764, 133, 2241, 2240, 2239, 2237, 2236, 2233, 22,
	103, 102, 2231, 39, 2230, 2229, 57, 35, 20, 19,
	2225, 90, 2224, 2223, 1475, 31, 2220, 2219, 130, 2217,
	24, 25, 110, 150, 148, 116, 112, 2214, 2213, 2212,
	2211, 49, 111, 2, 2207, 2205, 11, 76, 13, 2203,
	17, 18, 2202, 2201, 125, 2200, 62, 96, 1559, 93,
	132, 989, 2199, 55, 10, 73, 2198, 2197, 149, 46,
	2194, 33, 83, 135, 2192, 60, 159, 128, 82, 129,
	114, 2185, 2183, 2182, 97, 2181, 107, 99, 2180, 2179,
	78, 2178, 136, 143, 2177, 2176, 89, 2175, 113, 2174,
	2173, 151, 139, 106, 8, 45, 66, 6, 1547, 1540,
	121, 77, 51, 48, 2171, 1852, 1439, 1415, 36, 100,
	75, 59, 98, 54, 69, 142, 29, 2166, 2152, 123,
	2149, 2144, 2143, 2142, 2140, 92, 2139, 2138, 70, 138,
	84, 42, 47, 87, 41, 63, 124, 117, 147, 105,
	2135, 85, 119, 2134, 213, 2132, 2131, 1988, 115, 2130,
	2129, 2127, 1699, 1693, 1679, 53, 2126, 2125, 828, 442,
	2122, 2121, 80, 2120, 109, 104, 2118, 137, 265, 34,
	2116, 118, 58, 88, 2114, 32, 30, 0, 2086, 1831,
	2113, 122, 79, 2111, 2110, 2109, 2108, 23, 4, 5,
	7, 9, 3, 65, 28, 2105, 2102, 131, 94, 72,
	2100, 155, 2099, 2096, 2095, 50, 2094, 15, 2093, 16,
	2092, 2091, 12, 1, 2090, 2089, 144, 2088, 91, 2087,
	1886, 2085, 146, 2084, 2083, 1724, 43, 101,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 5, 5, 5, 5, 5, 5,
	7, 7, 8, 8, 6, 6, 6, 6, 6, 9,
	9, 10, 16, 13, 18, 12, 12, 15, 15, 111,
	111, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 108, 108, 113, 113,
	113, 115, 115, 112, 112, 107, 107, 20, 20, 56,
	56, 98, 51, 51, 51, 285, 285, 286, 286, 94,
	94, 95, 95, 95, 95, 96, 96, 97, 97, 97,
	26, 26, 26, 22, 22, 22, 22, 22, 23, 23,
	24, 24, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 34, 34, 35, 35,
	35, 35, 35, 35, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 41, 41, 41, 39, 39,
	39, 38, 38, 38, 37, 37, 37, 40, 40, 40,
	160, 160, 159, 159, 162, 162, 42, 42, 42, 42,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 46,
	46, 46, 46, 46, 46, 46, 46, 253, 253, 252,
	44, 44, 227, 227, 47, 47, 185, 185, 48, 48,
	48, 48, 48, 49, 49, 57, 57, 326, 326, 326,
	330, 330, 331, 331, 332, 332, 332, 332, 332, 332,
	332, 328, 328, 54, 54, 54, 93, 93, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 63, 63, 65,
	62, 62, 62, 64, 64, 64, 64, 66, 66, 66,
	66, 67, 67, 67, 67, 67, 68, 68, 140, 140,
	278, 277, 277, 283, 283, 283, 138, 138, 138, 138,
	138, 139, 139, 139, 276, 276, 276, 276, 284, 284,
	284, 284, 284, 284, 282, 282, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 81, 81, 81, 88, 88, 88, 88, 88,
	88, 88, 70, 70, 75, 75, 75, 75, 75, 71,
	71, 76, 76, 77, 77, 78, 78, 78, 78, 78,
	78, 72, 72, 72, 72, 80, 80, 80, 80, 79,
	79, 85, 85, 85, 85, 85, 85, 82, 82, 82,
	82, 83, 83, 83, 86, 86, 86, 86, 73, 73,
	74, 74, 87, 87, 84, 84, 84, 43, 327, 327,
	329, 329, 52, 52, 30, 30, 31, 31, 141, 141,
	142, 142, 206, 206, 206, 206, 143, 143, 114, 114,
	114, 205, 295, 295, 296, 296, 296, 296, 296, 296,
	297, 297, 297, 297, 297, 297, 297, 293, 293, 294,
	291, 291, 292, 292, 292, 292, 333, 333, 204, 204,
	146, 146, 300, 300, 300, 300, 298, 298, 298, 298,
	298, 301, 299, 302, 302, 302, 302, 302, 239, 239,
	239, 90, 90, 32, 32, 120, 120, 33, 33, 29,
	29, 29, 189, 189, 150, 150, 244, 244, 244, 131,
	131, 109, 109, 109, 14, 11, 11, 11, 11, 11,
	11, 19, 19, 17, 17, 190, 190, 191, 191, 53,
	53, 55, 55, 60, 60, 89, 89, 89, 89, 89,
	89, 21, 21, 21, 21, 25, 25, 25, 25, 59,
	59, 335, 335, 127, 127, 127, 127, 128, 128, 201,
	201, 202, 202, 202, 203, 203, 203, 122, 121, 123,
	123, 28, 28, 28, 116, 116, 117, 117, 118, 118,
	119, 119, 336, 336, 50, 50, 50, 92, 92, 134,
	134, 198, 198, 198, 200, 200, 199, 199, 199, 175,
	175, 175, 91, 91, 155, 155, 164, 164, 165, 165,
	250, 166, 166, 58, 58, 101, 101, 99, 99, 99,
	99, 99, 99, 100, 100, 100, 102, 102, 102, 102,
	102, 102, 102, 105, 105, 105, 106, 106, 106, 104,
	104, 308, 308, 308, 311, 311, 307, 309, 309, 310,
	310, 334, 334, 176, 176, 176, 145, 144, 144, 148,
	148, 147, 149, 149, 243, 243, 243, 173, 173, 173,
	173, 192, 192, 193, 193, 194, 194, 195, 195, 195,
	196, 196, 197, 197, 172, 172, 223, 223, 103, 103,
	103, 154, 154, 154, 156, 156, 213, 213, 213, 214,
	214, 212, 212, 212, 212, 245, 245, 245, 245, 245,
	245, 245, 245, 324, 324, 324, 325, 325, 242, 242,
	246, 246, 246, 246, 246, 246, 240, 240, 240, 240,
	241, 241, 251, 251, 179, 179, 179, 179, 177, 177,
	178, 178, 247, 247, 247, 247, 174, 174, 248, 248,
	248, 207, 207, 254, 254, 254, 272, 272, 153, 153,
	153, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 256, 256,
	256, 256, 258, 258, 258, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 271, 271, 271, 271, 271, 259, 259,
	266, 266, 267, 267, 268, 269, 260, 260, 261, 261,
	262, 263, 270, 270, 270, 270, 274, 274, 264, 264,
	264, 264, 264, 265, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 187, 187,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 217, 217, 217, 217, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 303, 303, 303,
	303, 303, 303, 303, 303, 305, 305, 306, 306, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 312, 312, 313,
	313, 315, 315, 316, 316, 317, 318, 318, 318, 319,
	320, 320, 314, 314, 321, 321, 321, 322, 322, 323,
	323, 323, 323, 323, 229, 229, 229, 230, 230, 231,
	237, 237, 237, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 129,
	129, 129, 129, 129, 161, 161, 226, 226, 224, 224,
	224, 228, 228, 180, 180, 273, 273, 273, 273, 273,
	273, 273, 181, 181, 181, 188, 182, 182, 183, 183,
	183, 183, 183, 183, 220, 221, 184, 184, 184, 222,
	222, 232, 236, 236, 235, 234, 234, 233, 233, 210,
	210, 211, 211, 209, 208, 169, 169, 168, 168, 167,
	167, 337, 337, 238, 238, 170, 170, 171, 163, 163,
	249, 249, 249, 249, 157, 157, 136, 136, 158, 158,
	132, 132, 135, 135, 133, 133, 133, 133, 151, 151,
	152, 152, 130, 130, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 275, 275, 275, 225, 124,
	124, 124, 125, 125, 126, 126, 280, 280, 280, 281,
	281, 281, 281, 279, 279, 279, 279, 279, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 1, 1, 1, 3, 4,
	6, 6, 6, 5, 5, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 7, 2, 6,
	2, 1, 12, 12, 2, 1, 1, 1, 3, 3,
	0, 3, 1, 3, 1, 1, 3, 2, 5, 0,
	4, 6, 7, 1, 2, 1, 2, 2, 3, 3,
	3, 3, 1, 2, 1, 2, 1, 2, 1, 2,
	3, 1, 2, 1, 2, 2, 6, 3, 2, 2,
	2, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 2, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 3, 5, 3,
	1, 3, 1, 2, 2, 3, 2, 2, 5, 3,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 2, 1, 1, 1, 3, 1,
	5, 2, 3, 0, 3, 2, 3, 0, 2, 3,
	2, 3, 2, 6, 2, 6, 2, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 3, 4, 3, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 3, 3,
	3, 1, 3, 3, 1, 1, 2, 2, 1, 0,
	1, 1, 3, 1, 1, 1, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 2, 2, 3, 3, 1, 1, 1, 1, 1,
	2, 2, 3, 3, 4, 4, 3, 4, 4, 4,
	3, 2, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 2, 3, 3, 3, 2,
	3, 4, 3, 5, 3, 4, 5, 2, 3, 3,
	3, 4, 2, 3, 4, 3, 3, 3, 4, 4,
	4, 4, 2, 3, 5, 5, 6, 2, 2, 0,
	2, 0, 3, 2, 7, 10, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 1, 1,
	0, 3, 2, 0, 3, 1, 2, 2, 3, 6,
	2, 1, 1, 2, 4, 2, 5, 7, 8, 5,
	3, 1, 4, 6, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 2, 4, 3, 3, 0, 6, 3, 11,
	14, 4, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 8, 10, 8,
	10, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 3, 2, 2, 2, 1, 2, 1, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 2, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	0, 1, 3, 2, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 3, 6, 3, 1,
	3, 1, 4, 2, 8, 5, 4, 3, 0, 2,
	2, 0, 8, 3, 2, 0, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 2, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 8, 8, 2, 4, 4, 4, 2,
	2, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 4, 5, 2, 2, 1,
	1, 2, 5, 2, 3, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 3, 0, 2, 0, 2, 2,
	3, 3, 2, 0, 1, 3, 3, 5, 1, 1,
	3, 2, 4, 4, 0, 8, 4, 6, 3, 3,
	1, 5, 5, 0, 2, 3, 1, 3, 2, 0,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 5, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 1, 1, 2, 3,
	0, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 4, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 2, 1,
	3, 1, 1, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 3, 4, 1, 1, 1, 5,
	1, 3, 3, 1, 3, 3, 1, 3, 3, 1,
	1, 1, 1, 6, 6, 4, 3, 4, 3, 4,
	3, 4, 4, 3, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 3, 5, 4, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 3, 1, 3, 3, 3,
	2, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 2, 2, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 1, 1, 2, 2, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -26, -27, -48,
	-34, -35, -36, -47, -42, -49, -43, -50, -51, -52,
	-44, -56, -55, -57, -60, -58, -53, -54, -61, -69,
	-89, -90, -91, -92, -5, -6, -7, -8, 23, 34,
	-23, -24, 47, 67, -28, -29, -30, -31, 69, -32,
	-33, 90, -310, 94, -37, -38, -39, -41, -40, 98,
	105, 107, 125, 131, 134, 214, 220, 240, 242, 244,
	251, -99, -101, 238, 239, -62, -63, -64, -65, -93,
	262, -70, -71, -72, -73, -74, -75, -76, -77, -78,
	-79, -80, -81, -82, -83, -84, -85, -86, -87, 265,
	-21, -25, -59, 303, -9, -10, -13, -12, -11, -16,
	-18, -15, -17, -19, -14, -308, -102, -100, 354, 312,
	35, 274, 61, 101, 246, 328, 335, -105, -103, -104,
	-106, 255, 320, 284, 358, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 2,
	284, 323, 83, 141, -326, 2, -158, 284, 83, -133,
	-124, 347, 4, -287, -289, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 55, 60, 61, 62, 64,
	66, 67, 68, 71, 72, 73, 81, 82, 84, 86,
	90, 92, 94, 97, 98, 100, 105, 106, 107, 113,
	114, 119, 121, 126, 131, 132, 133, 134, 135, 142,
	145, 147, 140, 157, 158, 159, 161, 162, 163, 166,
	165, 170, 173, 176, 178, 179, 180, 183, 181, 185,
	186, 188, 187, 193, 195, 196, 198, 201, 204, 207,
	210, 211, 212, 213, 214, 216, 218, 220, 222, 223,
	224, 225, 226, 228, 229, 231, 232, 233, 234, 235,
	238, 236, 237, 239, 240, 241, 242, 244, 246, 247,
	249, 263, 264, 275, 251, 252, 253, 254, 258, 256,
	259, 260, 262, 265, 267, 270, 273, 274, 276, 279,
	280, 277, 272, 283, 285, 286, 287, 288, 289, 290,
	291, 298, 299, 303, 304, 305, 306, 309, 310, 311,
	312, 314, 317, 318, 319, 324, 329, 330, 331, 332,
	333, 28, 36, 37, 38, 39, 41, 42, 45, 46,
	51, 52, 53, 56, 85, 87, 88, 104, 108, 109,
	115, 116, 117, 127, 129, 136, 137, 146, 148, 149,
	150, 151, 152, 154, 168, 182, 192, 194, 205, 209,
	217, 219, 227, 248, 257, 268, 269, 278, 281, 293,
	294, 295, 300, 301, 316, 320, 321, 357, 357, 2,
	158, 224, -132, -124, 83, 357, 357, 357, 357, 284,
	2, 313, 323, -189, 83, 308, 357, 357, -124, 220,
	22, 2, 92, 145, 311, 310, 22, 216, 256, 286,
	288, 2, 357, 357, 357, 357, 357, 2, 323, 284,
	141, 83, 313, -124, 2, -46, 2, 354, -45, -4,
	-27, -36, -47, -42, -43, -20, -22, -34, -51, -50,
	-52, -55, -58, -69, -91, -92, -330, 2, 22, -331,
	-332, 69, 98, 125, 255, 145, 92, 310, -279, 4,
	-287, -289, -288, -290, 58, 70, 124, 144, 138, 156,
	160, 169, 171, 184, 206, 208, 245, 266, 22, 24,
	25, 26, 27, 29, 30, 31, 32, 43, 49, 50,
	54, 57, 59, 65, 69, 74, 75, 77, 76, 78,
	79, 80, 89, 91, 93, 95, 96, 99, 101, 103,
	110, 111, 112, 120, 122, 123, 125, 128, 130, 139,
	141, 143, 153, 155, 164, 167, 172, 174, 175, 189,
	190, 191, 197, 199, 200, 202, 203, 215, 221, 230,
	243, 255, 261, 271, 282, 284, 292, 296, 297, 302,
	307, 308, 313, 315, 322, 323, 325, 326, 327, 328,
	284, 2, 158, 2, -124, 2, -326, 2, 158, 2,
	-330, 2, -124, 2, -128, 2, 251, -124, -88, 259,
	2, 4, 22, 83, 183, 261, 293, 357, 357, 357,
	173, 55, 248, 259, -67, 299, -66, 293, -278, -68,
	2, -159, 183, -124, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 2, -88, 259, 34, 55, 22, 60, 84, 126,
	141, 142, 162, 65, 66, 223, 173, 159, 298, 163,
	260, 285, 299, 69, 314, 289, 106, 357, 357, 357,
	-334, 2, 284, -100, -102, -101, -147, -148, 307, 153,
	103, 203, -99, -101, 2, -308, -283, 2, -276, -239,
	9, 302, 110, 199, -282, 8, 346, -275, -281, 5,
	7, 345, 4, -287, -289, -288, -335, 2, 299, 299,
	2, -335, 2, -335, 2, -127, 2, 299, 296, -311,
	228, -307, -124, -311, 357, 357, 359, 357, -144, -145,
	2, 22, 95, -171, 2, 354, -245, 2, 352, -247,
	-132, -101, -246, 354, 200, -3, 2, -247, 136, -132,
	2, -247, 136, -132, 2, -124, 2, -135, 136, -132,
	296, 359, -158, -151, -124, -209, -208, 356, -215, 2,
	-217, 345, 346, 340, 189, 334, -229, -219, -232, 104,
	248, 354, -132, -218, 360, 9, -305, -101, 29, -230,
	-231, 49, -124, 7, 8, 5, 6, -130, -256, -225,
	-265, 302, 110, 191, -303, -304, 4, -287, -280, -257,
	-267, -261, -264, 154, 58, 75, 76, 79, 77, 80,
	261, 313, 50, 28, 108, 109, 209, 217, 281, 300,
	301, 136, 192, 137, 56, 127, 168, 97, 37, 39,
	41, 42, 51, 52, 85, 87, 88, 115, 116, 117,
	146, 148, 149, 150, 151, 152, 194, 227, 268, 278,
	294, 295, 321, -288, -268, -269, -262, -263, -270, -215,
	2, 123, 354, -168, -169, -208, -209, 2, -159, 136,
	-124, 2, -159, 2, 141, -124, 136, 2, -124, 22,
	123, 2, 155, 2, 155, 2, -248, 2, -247, -160,
	136, 2, -159, -160, 136, 2, -136, 136, 2, -135,
	-124, 136, 2, -151, 136, 2, -185, 354, -253, 2,
	-252, -281, 320, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 199, 359, -159, -215, -227, 354, 123, -215,
	199, -124, -88, 333, 2, 2, 263, 2, 354, -67,
	53, 299, -202, 2, -203, -121, -122, -123, 157, 222,
	226, 333, 296, 339, 123, -283, -140, 89, -162, 356,
	-88, 2, -285, 2, -282, 9, 263, 2, 223, 260,
	55, 123, 2, 2, -327, 2, 199, 123, 2, 123,
	2, 123, 2, 123, 2, 123, 2, 2, 223, 260,
	2, 120, 2, 298, 2, 2, 123, 2, 157, 222,
	275, 2, 284, 323, 2, 123, 123, -174, -247, -147,
	-148, -173, -192, -193, 172, 112, 197, -176, 22, 95,
	-176, -176, 44, 355, 355, 8, 7, 7, -201, -202,
	-201, 296, -128, 359, -311, -152, 354, -171, -163, -249,
	-215, 347, -163, -170, -238, -215, 89, 70, -179, 160,
	184, 124, 169, 245, 144, 7, -46, -212, 360, 354,
	347, -242, 335, -101, -246, 354, -245, -132, 354, -111,
	236, -110, 21, 23, 98, 318, 104, 272, 290, 252,
	236, 104, 236, 272, 290, 252, 236, 104, 360, -285,
	-133, 359, -279, 347, 10, 11, 57, 33, 345, 346,
	347, 348, 118, 349, 350, 343, 344, 342, 337, 338,
	339, 63, 177, 250, 13, 14, 15, 26, 202, 171,
	334, 138, 266, 340, 16, 17, 18, 156, 36, 139,
	-129, -137, -215, -215, -215, -215, -215, 208, -167, -210,
	352, -101, 354, 354, -101, -215, -161, 354, 7, -101,
	-224, 352, -233, -215, -168, 354, 5, 354, 5, -312,
	329, 120, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	219, -274, 324, -274, -274, -258, 354, -258, -259, 354,
	-258, 330, 335, 354, 276, 355, -157, -132, -169, 354,
	-146, 189, -120, -309, 328, -146, 354, -125, 136, 2,
	-124, -309, 189, -248, -134, -132, -134, 262, -124, 30,
	-113, 359, 48, 241, 104, -113, 104, -113, 359, 104,
	104, 104, -161, -215, 355, 359, -326, -332, 69, 354,
	30, -226, -254, -255, -257, -266, -260, -264, -265, 40,
	46, 45, 291, 182, 257, 269, 316, 38, 198, 147,
	146, 148, 149, 150, 151, 152, 268, 37, 227, 116,
	117, 115, 97, 88, 87, 194, 42, 41, -268, -269,
	-262, -263, 85, 294, 295, 154, 39, 52, 51, 321,
	278, -286, -285, -326, -66, -278, -161, 30, -202, 2,
	359, -203, 170, -139, 176, 188, 132, 200, 331, -284,
	5, 4, -225, -239, 89, 173, -265, -277, 89, -283,
	-277, 89, 73, 356, -279, -159, 22, 264, 2, -278,
	-329, 120, -326, -278, -278, -278, -278, -278, 259, -46,
	120, -124, 170, -278, 2, -278, 2, 284, 141, 284,
	-113, 359, -173, -193, -192, -194, -215, 22, -197, 114,
	185, -215, -217, -100, -100, -100, -149, -243, -215, 221,
	141, -128, -307, 30, -151, -154, 359, 123, 30, 4,
	-154, 359, 355, 160, 160, -245, -179, 160, -177, 206,
	-177, -177, -324, 354, 353, -242, -279, 352, 361, -161,
	2, -241, -240, 30, -124, 204, 355, -132, 359, 296,
	-190, 65, 59, -205, 136, 59, -291, -124, 65, -292,
	54, 308, 221, 122, -190, 65, -190, 65, 65, -247,
	33, -58, 123, 296, -247, 296, 33, -58, 123, 296,
	-135, -279, -251, 336, -124, -272, -254, -271, 232, 233,
	231, 235, 234, -254, -279, 293, -215, -215, -215, -215,
	-215, -215, -215, -215, -215, -215, -215, -215, -215, -215,
	-215, -215, -215, -215, -215, -215, -215, -215, 171, 138,
	266, 36, 139, -215, 296, -215, -215, -215, -215, 181,
	189, 191, 302, 110, 309, 95, 195, -337, 282, 32,
	-222, -101, 354, -237, 27, 271, 22, -229, 248, 354,
	-210, -215, -211, -161, 355, 355, 359, -161, -228, 353,
	-224, -236, -235, 325, 355, -161, 322, 22, 95, 347,
	2, 7, -186, 332, 180, 86, 133, 179, -187, 254,
	-313, 113, 128, 354, 355, 2, 355, 2, 355, 2,
	-215, -215, -180, 2, -273, -161, 4, 332, 180, 86,
	133, 179, 254, -180, 2, -181, 2, -215, -161, -182,
	-216, -217, 345, 346, 340, 354, 248, -183, 2, -215,
	-161, -215, 43, 167, 297, -184, -215, 123, -161, -215,
	-215, -215, -161, -161, 2, -161, 2, 354, 7, 7,
	293, 293, 7, 123, 355, 359, -141, -151, -142, -124,
	-206, -205, -293, -294, -291, 141, 308, 111, 30, 104,
	213, 30, 199, 189, -116, 287, 104, -207, 326, -198,
	-58, 354, 89, 30, -198, -164, -165, -250, -166, -132,
	354, -124, -159, -160, -160, -135, -136, -124, -151, 355,
	359, -46, -252, 296, 315, -142, -45, 355, 359, -153,
	29, 352, -186, 354, -251, 359, 123, 355, 299, -203,
	-138, 226, 270, 237, 258, 359, -279, -328, -124, 259,
	-46, -132, -135, -132, -247, -195, -275, 354, 346, -196,
	248, 249, 359, -109, 31, 93, 161, -132, 354, 355,
	-207, -249, -156, 2, -245, -279, -207, -238, -245, -245,
	-178, 315, 199, 160, -245, -240, 355, -325, 7, -242,
	-241, 7, -214, -213, 121, 187, 355, -124, 354, -242,
	355, -110, -132, -124, -124, 189, -205, 136, -115, 189,
	-254, -124, 354, 354, 161, 161, -124, -124, 136, -124,
	136, -124, -124, -111, 236, -58, 354, -132, 236, -124,
	-58, 354, -124, 236, -94, 135, 195, 333, -215, -215,
	296, -337, 282, -222, -215, 181, 191, 302, 110, 309,
	95, 195, 123, 354, -216, -216, -161, -219, 354, -161,
	353, 363, 355, -215, 353, 353, 359, -234, -235, 99,
	-215, -148, 359, -147, -215, -161, -161, 355, 355, 296,
	296, 296, 296, 354, -318, 207, 354, 354, -215, 30,
	359, 355, 123, 355, 355, -188, 215, 355, 10, 11,
	345, 346, 347, 348, 118, 349, 350, 343, 344, 342,
	337, 338, 339, 63, 177, 250, 13, 14, 15, 156,
	139, -216, -216, -216, -161, 354, 355, -220, -221, 123,
	120, 30, -184, -184, -184, 355, 123, -161, 359, 359,
	359, 355, 355, 355, 7, 355, 359, 355, 333, 333,
	355, 276, 123, -132, 355, 355, 359, -125, 141, -125,
	-58, -159, 5, -58, -132, 104, -117, 100, -336, 339,
	-124, -175, 243, -215, -175, -200, 199, -157, 320, -124,
	-175, -155, 359, 123, 339, -157, -113, -113, -113, -215,
	-328, -285, 355, -254, 352, 353, 7, 7, -97, 328,
	-285, -328, -121, 306, 62, 226, -283, 359, -251, -196,
	-215, -243, -132, 360, -45, -172, 128, -251, 359, -172,
	-178, 354, -215, -245, 353, 355, 359, -241, 353, 359,
	362, 339, -242, 354, -151, -240, 296, 296, 104, 189,
	317, -295, -292, -215, -150, -244, -124, -306, 354, -303,
	-304, -130, 354, 354, -108, 98, 262, -191, 104, -113,
	104, -113, 296, -190, 65, -161, 296, -161, 296, -97,
	123, 283, -215, -215, -216, -216, 123, 354, -215, -226,
	26, 26, 355, -161, 355, 359, -211, -215, 355, -224,
	101, -215, 292, 355, 322, -148, -148, -148, 5, 180,
	133, 179, -187, 179, -187, -187, 7, -319, -124, 354,
	326, -147, 355, -272, -254, -215, -220, -215, -272, -254,
	-216, -216, -216, -216, -216, -216, -216, -216, -216, -216,
	-216, -216, -216, -216, -216, -216, -216, -216, -216, 95,
	189, 195, -216, 359, -161, 355, -221, -220, -215, -215,
	-254, 355, 355, 355, -161, -215, -215, -215, 355, 7,
	276, -143, 140, -206, 354, -125, 354, 354, -146, 354,
	-124, -118, 166, -336, -282, -309, -163, 190, -175, 64,
	355, -207, -165, -156, -238, 355, -98, 71, -98, 7,
	353, 355, -96, 201, -95, -124, 5, -124, 200, 355,
	-109, -279, 355, -223, 130, 44, -245, -223, -151, -212,
	7, -213, -279, 352, -241, -151, 355, -124, -124, -205,
	104, -296, 65, -297, 57, 111, 69, 189, 191, 308,
	221, 54, 89, 230, 355, 355, 359, -131, -168, 57,
	-131, -215, 354, -150, -151, 189, 89, 189, 89, 82,
	304, -124, -124, -132, -124, -124, 355, -132, 355, -124,
	-286, 293, 26, 26, -215, -226, 355, -215, -215, 355,
	-215, 353, -215, 5, -215, 355, 355, 355, 355, -320,
	-124, -215, 355, 355, 355, -221, 123, 95, 195, 354,
	-215, 355, 355, 359, 355, 355, 355, 139, -150, 354,
	-151, -141, 30, -150, 199, -119, 165, -336, -282, -116,
	-199, 354, 199, -58, -175, 339, 82, 82, 353, 359,
	354, 339, 339, -109, -315, 327, -215, -161, -315, 355,
	-242, 7, 355, -205, -124, -279, -124, 111, 136, 191,
	161, 354, -216, -132, -204, -333, 68, 280, -244, -109,
	-279, -109, 355, -161, 355, 355, 191, 191, -215, -254,
	-113, -113, 296, 296, 296, 296, -218, -130, -124, -215,
	-215, 355, 355, -148, -314, 212, 355, -216, 123, 354,
	-226, 355, -215, 210, 355, -150, 355, 355, -58, 355,
	-132, -336, -282, -117, 96, -151, 65, -171, -101, 354,
	354, 354, -95, -96, -285, -285, -316, -317, -124, -241,
	353, -297, -125, 189, -215, -126, 354, -143, 354, -131,
	-148, 230, -112, 57, -124, -124, 354, 354, 354, 355,
	-148, 44, -216, -226, 355, 355, -132, -204, 355, -143,
	-204, 354, -282, -118, 310, 190, 355, -124, -286, -286,
	355, 359, 30, 104, 355, -300, 178, -124, -151, -109,
	355, -132, -107, 315, -279, -161, -161, -161, -321, 225,
	249, -161, 355, 354, -143, -204, -143, -150, -119, 262,
	-207, 355, 355, -317, -319, 111, -298, -301, -299, 199,
	124, 211, 267, 355, 355, -146, -215, 355, 355, -148,
	355, -322, -323, 36, 305, 73, -215, -322, -151, -143,
	355, -164, -97, -97, -124, -299, 199, -301, 199, 310,
	92, -300, 355, -323, 218, 119, 248, 218, 119, 355,
	-204, -207, -302, 186, 241, 48, 262, -302, -298, 26,
	-114, 48, 241, -143, 20, 191, 89, -323,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 7, 8, 9, 10,
	12, 14, 16, 17, 19, 21, 23, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 45, 46,
	47, 48, 50, 52, 55, 57, 59, 61, 0, 0,
	143, 145, 0, 0, 152, 154, 156, 158, -2, 161,
	163, 0, 0, 0, 174, 176, 178, 180, 182, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 633, -2, 0, 0, 278, 280, 282, 284, 285,
	0, 336, 338, 340, 342, 344, 346, 348, 350, 352,
	354, 356, 358, 360, 362, 364, 365, 367, 369, 0,
	555, 557, 559, -2, 64, 65, 66, 67, 68, 74,
	75, 76, 77, 70, 72, 669, -2, 680, 0, 0,
	-2, 0, -2, -2, -2, 0, 0, 646, 648, 650,
	652, -2, 0, 0, -2, 6, 11, 13, 15, 18,
	20, 22, 25, 27, 29, 31, 33, 35, 37, 39,
	42, 44, 49, 51, 53, 56, 58, 60, 62, 63,
	0, 0, 0, 0, 0, 118, 257, 0, 1231, 1158,
	1164, 1165, 1189, 1190, 1191, 1208, 1209, 1210, 1211, 1212,
	1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
	1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1232, 1233,
	1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243,
	1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253,
	1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263,
	1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273,
	1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
	1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
	1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
	1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
	1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
	1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
	1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
	1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,
	1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
	1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
	1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
	1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
	1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403,
	1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
	1414, 1415, 1416, 1417, 1418, 1419, 1420, 144, 146, 147,
	0, 0, 0, 1160, 1231, 153, 155, 157, 159, 0,
	165, 0, 0, 0, 0, 522, 162, 164, 248, 1291,
	250, 252, 0, 0, 0, 0, 168, 169, 170, 171,
	172, 173, 175, 177, 179, 181, 183, 184, 0, 0,
	0, 0, 0, 247, 245, 206, 207, 0, 229, 230,
	231, 232, 233, 235, 236, 210, 212, 213, 215, 217,
	219, 221, 223, 224, 225, 227, 0, 254, 260, 261,
	262, 264, 265, 266, 267, 268, 269, 270, 437, 1203,
	1204, 1205, 1206, 1207, 1421, 1422, 1423, 1424, 1425, 1426,
	1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436,
	1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446,
	1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456,
	1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466,
	1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
	1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486,
	1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496,
	1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506,
	1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516,
	0, 124, 0, 443, 243, 241, 0, 120, 0, 552,
	0, 256, 553, 554, 549, 550, 1318, 578, 273, 0,
	275, 375, 376, 377, 378, 379, 0, 279, 281, 283,
	-2, -2, 1407, -2, 291, -2, 301, 1413, 0, 304,
	305, 310, -2, 202, 337, 339, 341, 343, 345, 347,
	349, 351, 353, 355, 357, 359, 361, 363, 366, 368,
	370, 371, 372, 0, 0, 0, 376, 0, -2, -2,
	0, 0, 0, 0, 0, -2, 0, -2, 0, 0,
	-2, -2, 0, 0, -2, 0, 0, 556, 558, 560,
	0, 512, 671, -2, 644, 645, -2, 0, 675, 675,
	675, 0, 0, 645, 643, 0, 276, 277, 313, 314,
	315, 324, 325, 326, 327, 508, 0, 510, 334, 335,
	1185, 0, 1199, 1200, 1201, 1202, 580, 562, 571, 580,
	564, 565, 566, 567, 568, 569, 570, 573, 0, 661,
	1297, 664, 1171, 662, 647, 649, 0, 651, 0, 0,
	655, 677, 676, 708, 709, 0, 659, 660, 670, 724,
	762, 739, 730, 0, 0, 2, 69, 0, 1389, 762,
	71, 0, 1389, 762, 73, 0, 78, 0, 1389, 1163,
	0, 0, 258, 259, 1168, 1166, 1167, 0, 148, 149,
	870, 0, 0, 0, 0, 0, 0, 962, 964, 1381,
	1407, 0, 966, 967, 0, 969, 971, 972, 0, 975,
	976, 1128, 1160, 1174, 1175, 1176, 1177, 0, 0, 1180,
	0, 1182, 1183, 1184, 1028, 986, -2, -2, 1172, 798,
	799, 800, 801, -2, 1421, 990, 993, 996, 999, 1000,
	1001, 1002, 0, 1365, 1382, 1383, 1403, 1404, 1412, 1416,
	1417, 1389, 1400, 1390, 1377, 1387, 1398, 1237, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1198, 832, 833, 838, 839, 841, 150,
	151, 0, 0, 1161, 1137, 1135, 1136, 160, 491, 1389,
	-2, 514, 491, 518, -2, 668, 1389, 593, 249, 251,
	0, 167, 0, 606, 0, 608, 0, 623, 768, 110,
	1389, 187, 200, 110, 1389, 190, 110, 1389, 193, 1156,
	194, 1389, 196, 197, 1389, 199, 244, 0, 0, -2,
	237, 239, -2, 234, 211, 214, 216, 218, 220, 222,
	226, 228, 0, 0, 0, 442, 0, 0, 0, 551,
	0, 577, 274, 380, 381, 286, 0, 288, 0, 290,
	1376, -2, 293, 294, 581, 584, 585, 586, 0, 0,
	0, 0, 0, 0, 0, 306, 307, 308, 203, 0,
	373, 374, 382, 383, 125, 126, 0, 386, 407, 419,
	0, 0, 390, 392, 441, 394, 0, 0, 396, 0,
	398, 0, 400, 0, 402, 0, 404, 406, 408, 420,
	410, 670, 412, 0, 414, 418, 0, 423, 0, 425,
	426, 427, 0, 0, 433, 0, 0, 110, 766, -2,
	0, 639, 689, 690, 0, 0, 0, 0, 673, 674,
	0, 0, 0, 635, 636, 509, 1187, 1186, 561, 579,
	563, 0, 575, 0, 663, 0, 0, 710, 713, 1148,
	1152, 1153, 713, 0, 1145, 1143, 1144, 0, 0, 0,
	0, 759, 759, 759, 757, 733, 0, 739, 0, 0,
	763, 751, 0, -2, 730, 0, 0, 764, 0, 79,
	546, 89, 0, 546, 546, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 753,
	1159, 0, 1133, 1134, 0, 0, 0, 0, 1063, 1064,
	1065, 1066, 1067, 1068, 1071, 1072, 1069, 1070, 1073, 1074,
	1075, 0, 0, 0, 1076, 1077, 1078, 0, 0, 1080,
	0, 1082, 0, 0, 0, 0, 0, 0, 1142, 0,
	0, 1079, 875, 876, 877, 899, 900, 0, 963, 1139,
	1132, 965, 0, 0, -2, 1084, 0, 0, 968, 973,
	974, 0, 0, 1127, -2, 0, 1179, 0, 867, 1030,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1107, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	817, 835, 846, 843, 842, 819, 0, 818, 816, 0,
	820, 0, 0, 0, 140, 0, 0, 1154, 1138, 449,
	0, 0, 513, 0, 667, 0, 0, 0, 1389, 521,
	1192, 595, 0, 772, 0, 609, 0, 0, 769, 0,
	185, 0, 108, 109, 0, 188, 0, 191, 0, 0,
	0, 0, 0, 1084, 670, 0, 0, 263, 0, 0,
	670, 0, 1086, 780, 781, 782, 783, 784, 867, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 829, 0, 804, 804, 804, 821, 822, 830, 831,
	836, 837, 848, 849, 851, 853, 847, 847, 847, 844,
	845, 753, 127, 0, 287, 0, 0, 0, 295, 296,
	0, 583, 0, 587, 321, 322, 323, 589, 590, 302,
	328, 329, 330, 331, 332, 333, 0, 297, 299, 311,
	298, 300, 303, 0, 204, 384, 385, 387, 388, 389,
	393, 0, 438, 395, 397, 399, 401, 403, 411, 415,
	670, 421, 424, 428, 429, 430, 431, 0, 0, 0,
	511, 0, 642, 687, 688, 691, 695, 696, 699, 702,
	703, 693, 870, 656, 657, 658, 681, 682, 533, 0,
	0, 574, 665, 0, 0, 772, 0, 0, 0, 1151,
	772, 0, 1147, 0, 0, 0, 0, 0, 754, 758,
	755, 756, 0, 0, 739, 751, 721, 0, 0, 0,
	728, 729, 750, 0, 749, 738, -2, 0, 0, 0,
	0, 0, 545, 91, 1389, 0, 112, 0, 0, 481,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 1162, 130, 0, 1169, 871, 776, 777, 823, 824,
	825, 826, 827, 872, 873, 0, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, -2, -2, -2, 891,
	892, 893, -2, -2, -2, 897, 898, -2, 1081, 1083,
	0, 1142, 0, -2, 0, -2, -2, -2, -2, 911,
	0, 913, 916, 918, 920, 0, 0, 0, 0, 1141,
	930, 1119, 0, 0, 1060, 1061, 1062, 915, 0, 0,
	1140, 1131, 0, 0, -2, 970, 0, 0, 0, 1090,
	1091, 1126, 1122, 0, 977, 680, 0, 0, 0, 0,
	984, 0, 1188, 854, 855, 856, 857, 858, 859, 868,
	1038, 0, 0, 0, 991, 992, 994, 995, 997, 998,
	0, 0, 0, 1006, 0, 1094, -2, -2, -2, -2,
	-2, -2, -2, 0, 1008, 0, 1010, 1084, 1104, 0,
	0, 933, 0, 0, 0, 0, 1407, 0, 1013, 1084,
	1112, 0, 0, 0, 0, 0, 1084, 0, 1118, 0,
	0, 0, 0, 0, 1024, 0, 1026, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 448, 1168,
	450, 452, 453, 454, 455, 1193, 0, 1193, 0, 0,
	0, 0, 0, 0, 597, 603, 0, 621, 0, 621,
	611, 0, 0, 0, 621, 625, 626, 628, 629, 0,
	0, 770, 201, 110, 110, 1157, 110, 195, 198, 246,
	0, 208, 238, 0, 0, 0, 240, 242, 0, 773,
	775, 0, 785, 0, 139, 0, 0, 289, 0, 582,
	588, 0, 318, 0, 320, 0, 205, 440, 271, 413,
	416, 434, 435, 753, 767, 0, 697, 0, 0, 694,
	700, 701, 0, 684, 531, 532, 0, 0, 670, 1170,
	705, 1149, 753, 712, 714, 1150, 705, 1146, 741, 0,
	743, 0, 0, 0, 745, 0, 734, 0, 736, 751,
	726, 0, 0, 719, 0, 718, 739, 747, 0, 0,
	765, 90, 535, 0, 0, 0, 93, 1389, 101, 0,
	463, 0, 0, 0, 0, 0, 548, 102, 1389, 110,
	1389, 110, 103, 80, 546, 81, 0, 541, 0, 534,
	82, 0, 543, 0, 139, 0, 0, 0, -2, -2,
	0, 0, 0, 931, -2, 912, 914, 917, 919, 921,
	0, 0, 0, 0, 0, 0, 0, 932, 0, 0,
	1129, 1132, -2, 1085, 1088, 1089, 0, 0, 1123, 0,
	0, 0, 0, 679, 680, 680, 680, 983, 0, 0,
	0, 0, 0, 0, 985, 0, 0, 0, 0, 0,
	0, 1005, 0, 1007, 1009, 0, 0, 1011, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 936, 937, 938, 0, 0, 1012, 1110, 1111, 0,
	0, 0, 0, 0, 0, 1018, 0, 1117, 0, 0,
	0, 1022, 1023, 1025, 0, 802, 0, 828, 850, 852,
	840, 141, 0, 1155, 457, 490, 0, 0, 1193, 0,
	446, 491, 515, 517, 0, 0, 599, 603, 0, 602,
	668, 166, 0, 771, 604, 621, 0, 0, 613, 610,
	607, 772, 0, 0, 0, 0, 186, 189, 192, 1085,
	253, 0, 0, 1087, 0, 778, 0, 0, 119, 0,
	128, 255, 292, 316, 317, 319, 312, 0, 436, 0,
	0, 683, 533, 0, 0, 707, 0, 711, 0, 707,
	742, 0, 761, 744, 724, 735, 0, 732, 722, 0,
	723, 0, 751, 0, 0, 731, 0, 0, 0, 0,
	111, 461, 480, 0, 0, 524, 530, 530, 0, 987,
	988, 0, 0, 0, 95, 0, 0, 0, 0, 99,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 874, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 1120, 0, 1055, 0, 0, 1131, -2, 1092,
	1121, 1125, 0, 978, 0, 0, 0, 0, 1181, 860,
	861, 862, 863, 864, 865, 866, 0, 1036, 1037, 1041,
	0, 0, 989, 0, 0, 1093, 1103, 1105, 934, 935,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	-2, -2, -2, 952, 953, 954, -2, -2, -2, 0,
	0, 0, 1106, 0, 0, 1058, 1108, 1109, 1114, 1115,
	0, 1015, 1016, 1017, 1116, 0, 0, 0, 834, 0,
	142, 444, 0, 451, 0, 0, 0, 449, 0, 0,
	0, 601, 603, 0, 594, 595, 619, 620, 605, 618,
	0, 621, 627, 624, 630, 0, 0, 121, 0, 0,
	779, 786, 137, 1281, 135, 132, 134, 272, 692, 698,
	685, 533, 666, 1032, 0, 0, 715, 1032, 0, 739,
	737, 720, 716, 0, 727, 0, 748, 537, 539, 92,
	0, 462, 0, 465, 0, 0, 0, 0, 471, 472,
	0, 0, 0, 0, 482, 489, 0, 533, 1173, 0,
	533, 0, 0, 0, 0, 0, 107, 0, 0, 547,
	0, 110, 110, 536, 0, 0, 0, 542, 0, 544,
	129, 0, 0, 0, -2, 0, 924, -2, -2, 1054,
	1085, 1130, 1124, 1178, 680, 979, 981, 982, 869, 1043,
	1040, 0, 1027, 1003, 1004, 1102, 0, 0, 0, 0,
	1085, 1057, 1014, 0, 1020, 1021, 803, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 603, 0, 596, 597,
	0, 0, 0, 612, 622, 0, 0, 0, 774, 0,
	0, 0, 0, 686, 653, 0, 706, 704, 654, 760,
	751, 0, 746, 94, 0, 466, 467, 1193, 0, 470,
	473, 0, 475, 1195, 457, 0, 486, 487, 525, 526,
	529, 527, 530, 680, 484, 0, 96, 97, 106, 114,
	98, 104, 0, 0, 0, 0, 752, 0, 0, -2,
	-2, 925, 1056, 0, 680, 0, 1029, -2, 0, 0,
	0, 1059, 0, 0, 489, 0, 479, 457, 447, 489,
	0, 0, 598, 599, 0, 0, 0, 631, 632, 0,
	0, 0, 136, 0, 131, 133, 1031, 1033, 0, 725,
	717, 464, 468, 0, 0, 495, 0, 483, 0, 533,
	0, 0, 116, 0, 538, 540, 0, 0, 0, 980,
	1046, 0, -2, 0, 960, 1019, 0, 457, 489, 445,
	457, 0, 600, 601, 0, 615, 772, 617, 0, 0,
	138, 0, 0, 0, 474, 500, 0, 0, 0, 528,
	978, 491, 100, 0, 113, 0, 0, 680, 0, 0,
	0, 1042, 961, 0, 477, 457, 519, 0, 592, 0,
	616, 139, 139, 1034, 1035, 0, 476, 496, 497, 0,
	492, 493, 494, 1194, 488, 495, 115, 86, 88, 0,
	1039, 1044, 1047, -2, 1349, 1228, 0, 1045, 0, 478,
	489, 772, 122, 123, 469, 498, 0, 499, 0, 0,
	0, 500, 0, 0, 1049, 1050, 1051, 1052, 1053, 460,
	457, 614, 501, 0, 504, 505, 0, 502, 485, 0,
	456, 458, 459, 520, 503, 506, 507, 1048,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 343, 3, 349, 344, 3,
	354, 355, 347, 345, 359, 346, 356, 348, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 363, 358,
	337, 339, 338, 3, 360, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 352, 3, 353, 350, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 361, 342, 362, 340,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 341,
	57680, 351, 57681, 357, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:862
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:868
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:874
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 6:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:884
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:889
		{
			return helpWith(sqllex, "DELETE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 18:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:903
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:905
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:908
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:909
		{
			return helpWith(sqllex, "RESET")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:913
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:915
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "ALTER")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:964
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:975
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:986
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1006
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1020
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1026
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1032
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1038
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1044
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1048
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1054
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1058
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1104
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1127
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1137
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = nil
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = DropCascade
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = DropRestrict
		}
	case 110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = DropDefault
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1199
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1200
		{
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1203
		{
			return unimplemented(sqllex, "alter using")
		}
	case 116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1204
		{
		}
	case 117:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1231
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1257
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.str = "CSV"
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1288
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1292
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1295
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1364
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1384
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1385
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1386
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1394
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1397
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1405
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1408
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1416
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1417
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1419
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1422
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1423
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			return helpWith(sqllex, "CREATE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1435
		{
			return helpWith(sqllex, "DELETE")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1445
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1447
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1448
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			return helpWith(sqllex, "DROP")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1475
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1490
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1513
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1528
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1543
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1594
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1603
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1606
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1608
		{
			return helpWith(sqllex, "DELETE")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1609
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1610
		{
			return helpWith(sqllex, "INSERT")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1611
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1612
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1618
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1619
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1626
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1627
		{ /* SKIP DOC */
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1656
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1680
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1735
		{
			return helpWith(sqllex, "GRANT")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1755
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1763
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1777
		{
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1845
		{
			return helpWith(sqllex, "RESET")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1850
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1853
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1857
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1858
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1859
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1860
		{ /* SKIP DOC */
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1861
		{ /* SKIP DOC */
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1862
		{
			return unimplemented(sqllex, "set local")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1875
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1925
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1930
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1934
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1955
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1958
		{
			return unimplemented(sqllex, "set from current")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1960
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1966
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1970
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1976
		{
		}
	case 309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1978
		{
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = Low
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = Normal
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = High
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2097
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2098
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2099
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2101
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2108
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2113
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2114
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			return helpWith(sqllex, "SHOW")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2124
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.str = "client_encoding"
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2138
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2139
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2150
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2167
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2172
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2183
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2194
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2205
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2216
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2221
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2226
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2237
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2242
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2253
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2272
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2285
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2290
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2308
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2328
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2331
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2339
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2343
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2350
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2361
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2372
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2380
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2383
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2387
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2391
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2395
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2407
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2432
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2435
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2534
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2538
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = DropDefault
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2548
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2589
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2611
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2753
		{
			return unimplemented(sqllex, "match full")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2754
		{
			return unimplemented(sqllex, "match partial")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2755
		{
			return unimplemented(sqllex, "match simple")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2756
		{
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2762
		{
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2763
		{
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2764
		{
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2765
		{
		}
	case 500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2766
		{
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2769
		{
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2772
		{
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2775
		{
			return unimplemented(sqllex, "no action")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2778
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2779
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2780
		{
			return unimplemented(sqllex, "action set null")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2781
		{
			return unimplemented(sqllex, "action set default")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2806
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2817
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2821
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 517:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2842
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2882
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = true
		}
	case 523:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = false
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2912
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2913
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2916
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2917
		{
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = Ascending
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = Descending
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 534:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2935
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2957
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2959
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = true
		}
	case 546:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = false
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2992
		{
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2993
		{
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3004
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3012
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3015
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3026
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3030
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3031
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3032
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3050
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3055
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3068
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3073
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3081
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3088
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3091
		{
		}
	case 572:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3092
		{
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.str = ""
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.str = ""
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3139
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3148
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[2].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = ReadOnly
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = ReadWrite
		}
	case 591:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3218
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.str = ""
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.str = ""
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 599:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.str = ""
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.str = ""
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3261
		{
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3262
		{
		}
	case 604:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3286
		{
			return helpWith(sqllex, "INSERT")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3303
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3345
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3349
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3357
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 622:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3380
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3384
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3385
		{
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3415
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3514
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3549
		{
			return helpWith(sqllex, "SELECT")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3550
		{
			return helpWith(sqllex, "VALUES")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3551
		{
			return helpWith(sqllex, "TABLE")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3597
		{
			return helpWith(sqllex, "SELECT")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3641
		{
			return helpWith(sqllex, "TABLE")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3652
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3653
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3654
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3657
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3658
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3661
		{
			return unimplemented(sqllex, "cte")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3664
		{
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3665
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3668
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3669
		{
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3672
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3673
		{
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = true
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = false
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3685
		{
			sqlVAL.union.val = false
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = true
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3696
		{
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3697
		{
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3744
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3764
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3816
		{
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3817
		{
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3820
		{
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3821
		{
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 705:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3879
		{
			return helpWith(sqllex, "VALUES")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3881
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3896
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = &From{}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3918
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3936
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3963
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4000
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4025
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = nil
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4066
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4072
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = true
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = false
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.str = astFullJoin
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.str = astLeftJoin
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.str = astRightJoin
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.str = astInnerJoin
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4183
		{
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4184
		{
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4270
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4284
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4292
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4316
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 786:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4327
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4357
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4390
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4399
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = nil
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4464
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4520
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4560
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4592
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4614
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4618
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4622
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4626
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4631
		{
		}
	case 847:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4632
		{
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 850:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 852:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = year
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = month
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = day
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = hour
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = minute
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = month
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = hour
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = minute
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4706
		{
			sqlVAL.union.val = minute
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 867:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = nil
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = second
		}
	case 869:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4727
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4762
		{
			return unimplemented(sqllex, "at tz")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4791
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4807
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4815
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4843
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4930
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4996
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5024
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5068
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5116
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5128
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5132
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5153
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5169
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5182
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5222
		{
			return unimplemented(sqllex, "variadic")
		}
	case 980:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5223
		{
			return unimplemented(sqllex, "variadic")
		}
	case 981:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5225
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5229
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5233
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5236
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 985:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5247
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5263
		{
			return unimplemented(sqllex, "func_application")
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5264
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 989:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5268
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5270
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5274
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5277
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5286
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5288
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5292
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5295
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5296
		{
			return unimplemented(sqllex, "current role")
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5297
		{
			return unimplemented(sqllex, "current user")
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5298
		{
			return unimplemented(sqllex, "session user")
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5299
		{
			return unimplemented(sqllex, "user")
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5309
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5312
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5317
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5322
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5324
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5328
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5331
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5332
		{
			return unimplemented(sqllex, "treat")
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5334
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5338
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5342
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5346
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5350
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5354
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5358
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5362
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5366
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5369
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5374
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5378
		{
			return unimplemented(sqllex, "within group")
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5379
		{
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5383
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5387
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5398
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5414
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5426
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5430
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5437
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5456
		{
			sqlVAL.str = ""
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5462
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5466
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5476
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5477
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5478
		{
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5481
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5482
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5488
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5489
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5490
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5491
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5492
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5503
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5507
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5511
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5517
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5521
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5527
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5533
		{
			sqlVAL.union.val = Any
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5537
		{
			sqlVAL.union.val = Some
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5541
		{
			sqlVAL.union.val = All
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5546
		{
			sqlVAL.union.val = Plus
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = Minus
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5548
		{
			sqlVAL.union.val = Mult
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5549
		{
			sqlVAL.union.val = Div
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5550
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5551
		{
			sqlVAL.union.val = Mod
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5552
		{
			sqlVAL.union.val = Bitand
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5553
		{
			sqlVAL.union.val = Bitor
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5554
		{
			sqlVAL.union.val = Pow
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5555
		{
			sqlVAL.union.val = Bitxor
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5556
		{
			sqlVAL.union.val = LT
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5557
		{
			sqlVAL.union.val = GT
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5558
		{
			sqlVAL.union.val = EQ
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5559
		{
			sqlVAL.union.val = LE
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5560
		{
			sqlVAL.union.val = GE
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5561
		{
			sqlVAL.union.val = NE
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5565
		{
			sqlVAL.union.val = Like
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5566
		{
			sqlVAL.union.val = NotLike
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5567
		{
			sqlVAL.union.val = ILike
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5568
		{
			sqlVAL.union.val = NotILike
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5579
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5583
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5589
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5593
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5599
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5603
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5607
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5613
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5617
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5623
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5627
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5649
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5653
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5657
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5691
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5695
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5699
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5703
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5707
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5711
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5717
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5729
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5733
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5737
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5743
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5747
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5758
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5765
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5769
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5775
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5781
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5785
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5792
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5798
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5802
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5809
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5815
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5821
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5827
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5831
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5837
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5841
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5847
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5856
		{
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5857
		{
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5866
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5872
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5876
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5885
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5891
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5895
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5901
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5910
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5914
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5918
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5926
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5930
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5936
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5940
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5950
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5961
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5965
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5971
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5975
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5988
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5996
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6000
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6006
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6010
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6016
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6019
		{
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6029
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6033
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6040
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6044
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6048
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6052
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6055
		{
			return unimplemented(sqllex, "func const")
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6057
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6061
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6064
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6070
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6074
		{
			sqlVAL.union.val = DNull
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6081
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6085
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6091
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6126
		{
			sqlVAL.str = ""
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6132
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6136
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
