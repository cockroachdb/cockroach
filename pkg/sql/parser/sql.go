// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:465
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_SCHEMA = 57417
const CURRENT_ROLE = 57418
const CURRENT_TIME = 57419
const CURRENT_TIMESTAMP = 57420
const CURRENT_USER = 57421
const CYCLE = 57422
const DATA = 57423
const DATABASE = 57424
const DATABASES = 57425
const DATE = 57426
const DAY = 57427
const DEC = 57428
const DECIMAL = 57429
const DEFAULT = 57430
const DEALLOCATE = 57431
const DEFERRABLE = 57432
const DELETE = 57433
const DESC = 57434
const DISCARD = 57435
const DISTINCT = 57436
const DO = 57437
const DOUBLE = 57438
const DROP = 57439
const ELSE = 57440
const ENCODING = 57441
const END = 57442
const ESCAPE = 57443
const EXCEPT = 57444
const EXISTS = 57445
const EXECUTE = 57446
const EXPERIMENTAL_FINGERPRINTS = 57447
const EXPLAIN = 57448
const EXTRACT = 57449
const EXTRACT_DURATION = 57450
const FALSE = 57451
const FAMILY = 57452
const FETCH = 57453
const FILTER = 57454
const FIRST = 57455
const FLOAT = 57456
const FLOAT4 = 57457
const FLOAT8 = 57458
const FLOORDIV = 57459
const FOLLOWING = 57460
const FOR = 57461
const FORCE_INDEX = 57462
const FOREIGN = 57463
const FROM = 57464
const FULL = 57465
const GRANT = 57466
const GRANTS = 57467
const GREATEST = 57468
const GROUP = 57469
const GROUPING = 57470
const HAVING = 57471
const HELP = 57472
const HIGH = 57473
const HOUR = 57474
const INCREMENTAL = 57475
const IF = 57476
const IFNULL = 57477
const ILIKE = 57478
const IN = 57479
const INTERLEAVE = 57480
const INDEX = 57481
const INDEXES = 57482
const INITIALLY = 57483
const INNER = 57484
const INSERT = 57485
const INT = 57486
const INT2VECTOR = 57487
const INT2 = 57488
const INT4 = 57489
const INT8 = 57490
const INT64 = 57491
const INTEGER = 57492
const INTERSECT = 57493
const INTERVAL = 57494
const INTO = 57495
const IS = 57496
const ISOLATION = 57497
const JOB = 57498
const JOBS = 57499
const JOIN = 57500
const KEY = 57501
const KEYS = 57502
const KV = 57503
const LATERAL = 57504
const LC_CTYPE = 57505
const LC_COLLATE = 57506
const LEADING = 57507
const LEAST = 57508
const LEFT = 57509
const LEVEL = 57510
const LIKE = 57511
const LIMIT = 57512
const LOCAL = 57513
const LOCALTIME = 57514
const LOCALTIMESTAMP = 57515
const LOW = 57516
const LSHIFT = 57517
const MATCH = 57518
const MINUTE = 57519
const MONTH = 57520
const NAN = 57521
const NAME = 57522
const NAMES = 57523
const NATURAL = 57524
const NEXT = 57525
const NO = 57526
const NO_INDEX_JOIN = 57527
const NORMAL = 57528
const NOT = 57529
const NOTHING = 57530
const NULL = 57531
const NULLIF = 57532
const NULLS = 57533
const NUMERIC = 57534
const OF = 57535
const OFF = 57536
const OFFSET = 57537
const OID = 57538
const ON = 57539
const ONLY = 57540
const OPTIONS = 57541
const OR = 57542
const ORDER = 57543
const ORDINALITY = 57544
const OUT = 57545
const OUTER = 57546
const OVER = 57547
const OVERLAPS = 57548
const OVERLAY = 57549
const PARENT = 57550
const PARTIAL = 57551
const PARTITION = 57552
const PASSWORD = 57553
const PAUSE = 57554
const PLACING = 57555
const PLANS = 57556
const POSITION = 57557
const PRECEDING = 57558
const PRECISION = 57559
const PREPARE = 57560
const PRIMARY = 57561
const PRIORITY = 57562
const QUERIES = 57563
const QUERY = 57564
const RANGE = 57565
const READ = 57566
const REAL = 57567
const RECURSIVE = 57568
const REF = 57569
const REFERENCES = 57570
const REGCLASS = 57571
const REGPROC = 57572
const REGPROCEDURE = 57573
const REGNAMESPACE = 57574
const REGTYPE = 57575
const RENAME = 57576
const REPEATABLE = 57577
const RELEASE = 57578
const RESET = 57579
const RESTORE = 57580
const RESTRICT = 57581
const RESUME = 57582
const RETURNING = 57583
const REVOKE = 57584
const RIGHT = 57585
const ROLLBACK = 57586
const ROLLUP = 57587
const ROW = 57588
const ROWS = 57589
const RSHIFT = 57590
const SAVEPOINT = 57591
const SCATTER = 57592
const SEARCH = 57593
const SECOND = 57594
const SELECT = 57595
const SEQUENCES = 57596
const SERIAL = 57597
const SERIALIZABLE = 57598
const SESSION = 57599
const SESSIONS = 57600
const SESSION_USER = 57601
const SET = 57602
const SETTING = 57603
const SETTINGS = 57604
const SHOW = 57605
const SIMILAR = 57606
const SIMPLE = 57607
const SMALLINT = 57608
const SMALLSERIAL = 57609
const SNAPSHOT = 57610
const SOME = 57611
const SPLIT = 57612
const SQL = 57613
const START = 57614
const STATUS = 57615
const STDIN = 57616
const STRICT = 57617
const STRING = 57618
const STORING = 57619
const SUBSTRING = 57620
const SYMMETRIC = 57621
const SYSTEM = 57622
const TABLE = 57623
const TABLES = 57624
const TEMP = 57625
const TEMPLATE = 57626
const TEMPORARY = 57627
const TESTING_RANGES = 57628
const TESTING_RELOCATE = 57629
const TEXT = 57630
const THEN = 57631
const TIME = 57632
const TIMESTAMP = 57633
const TIMESTAMPTZ = 57634
const TO = 57635
const TRAILING = 57636
const TRACE = 57637
const TRANSACTION = 57638
const TREAT = 57639
const TRIM = 57640
const TRUE = 57641
const TRUNCATE = 57642
const TYPE = 57643
const UNBOUNDED = 57644
const UNCOMMITTED = 57645
const UNION = 57646
const UNIQUE = 57647
const UNKNOWN = 57648
const UPDATE = 57649
const UPSERT = 57650
const USE = 57651
const USER = 57652
const USERS = 57653
const USING = 57654
const UUID = 57655
const VALID = 57656
const VALIDATE = 57657
const VALUE = 57658
const VALUES = 57659
const VARCHAR = 57660
const VARIADIC = 57661
const VIEW = 57662
const VARYING = 57663
const WHEN = 57664
const WHERE = 57665
const WINDOW = 57666
const WITH = 57667
const WITHIN = 57668
const WITHOUT = 57669
const WRITE = 57670
const YEAR = 57671
const ZONE = 57672
const NOT_LA = 57673
const WITH_LA = 57674
const AS_LA = 57675
const POSTFIXOP = 57676
const UMINUS = 57677

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5693

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 36,
	354, 36,
	-2, 464,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 61,
	1, 437,
	197, 437,
	241, 437,
	350, 437,
	352, 437,
	354, 437,
	-2, 447,
	-1, 76,
	1, 440,
	197, 440,
	241, 440,
	350, 440,
	352, 440,
	354, 440,
	-2, 446,
	-1, 85,
	1, 36,
	354, 36,
	-2, 464,
	-1, 483,
	1, 188,
	354, 188,
	-2, 1050,
	-1, 554,
	111, 474,
	170, 474,
	195, 474,
	-2, 443,
	-1, 557,
	111, 473,
	170, 473,
	195, 473,
	-2, 441,
	-1, 637,
	351, 977,
	-2, 970,
	-1, 638,
	351, 978,
	-2, 971,
	-1, 644,
	5, 644,
	351, 644,
	-2, 1175,
	-1, 669,
	5, 603,
	-2, 1145,
	-1, 670,
	5, 638,
	351, 638,
	-2, 1147,
	-1, 671,
	5, 613,
	-2, 1148,
	-1, 672,
	5, 612,
	-2, 1149,
	-1, 673,
	5, 638,
	351, 638,
	-2, 1152,
	-1, 674,
	5, 638,
	351, 638,
	-2, 1153,
	-1, 675,
	5, 639,
	-2, 1156,
	-1, 676,
	5, 595,
	-2, 1157,
	-1, 677,
	5, 595,
	-2, 1158,
	-1, 678,
	5, 620,
	-2, 1162,
	-1, 679,
	5, 605,
	-2, 1163,
	-1, 680,
	5, 606,
	-2, 1164,
	-1, 681,
	5, 596,
	-2, 1169,
	-1, 682,
	5, 597,
	-2, 1170,
	-1, 683,
	5, 598,
	-2, 1171,
	-1, 684,
	5, 599,
	-2, 1172,
	-1, 685,
	5, 600,
	-2, 1173,
	-1, 686,
	5, 601,
	-2, 1174,
	-1, 687,
	5, 595,
	-2, 1179,
	-1, 688,
	5, 604,
	-2, 1184,
	-1, 689,
	5, 602,
	-2, 1187,
	-1, 690,
	5, 636,
	351, 636,
	-2, 1189,
	-1, 691,
	5, 640,
	-2, 1192,
	-1, 692,
	5, 642,
	-2, 1193,
	-1, 693,
	5, 635,
	351, 635,
	-2, 1198,
	-1, 811,
	111, 473,
	170, 473,
	195, 473,
	-2, 444,
	-1, 920,
	102, 447,
	111, 447,
	151, 447,
	170, 447,
	195, 447,
	201, 447,
	304, 447,
	-2, 763,
	-1, 929,
	351, 954,
	-2, 942,
	-1, 1210,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 679,
	-1, 1211,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 680,
	-1, 1212,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 681,
	-1, 1216,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 685,
	-1, 1217,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 686,
	-1, 1218,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 687,
	-1, 1221,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 692,
	-1, 1227,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 694,
	-1, 1229,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 698,
	-1, 1230,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 699,
	-1, 1231,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 700,
	-1, 1232,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 701,
	-1, 1258,
	206, 836,
	-2, 839,
	-1, 1295,
	122, 876,
	351, 977,
	-2, 970,
	-1, 1296,
	122, 877,
	-2, 1141,
	-1, 1297,
	122, 878,
	-2, 1049,
	-1, 1298,
	122, 879,
	-2, 1013,
	-1, 1299,
	122, 880,
	-2, 1030,
	-1, 1300,
	122, 881,
	-2, 1048,
	-1, 1301,
	122, 882,
	-2, 1100,
	-1, 1484,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 693,
	-1, 1485,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 695,
	-1, 1490,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 696,
	-1, 1508,
	206, 835,
	-2, 838,
	-1, 1675,
	102, 447,
	111, 447,
	151, 447,
	170, 447,
	195, 447,
	201, 447,
	304, 447,
	-2, 530,
	-1, 1717,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 697,
	-1, 1722,
	154, 0,
	-2, 713,
	-1, 1732,
	206, 837,
	-2, 840,
	-1, 1774,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 740,
	-1, 1775,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 741,
	-1, 1776,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 742,
	-1, 1780,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 746,
	-1, 1781,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 747,
	-1, 1782,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 748,
	-1, 1866,
	1, 531,
	70, 531,
	102, 531,
	111, 531,
	123, 531,
	127, 531,
	129, 531,
	142, 531,
	151, 531,
	158, 531,
	167, 531,
	170, 531,
	182, 531,
	195, 531,
	197, 531,
	201, 531,
	241, 531,
	243, 531,
	304, 531,
	312, 531,
	323, 531,
	324, 531,
	333, 531,
	350, 531,
	352, 531,
	354, 531,
	355, 531,
	-2, 530,
	-1, 1916,
	154, 0,
	-2, 714,
	-1, 1919,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 717,
	-1, 1920,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 719,
	-1, 2037,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 718,
	-1, 2038,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 720,
	-1, 2045,
	154, 0,
	-2, 749,
	-1, 2112,
	154, 0,
	-2, 750,
	-1, 2193,
	36, 0,
	136, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 1144,
}

const sqlPrivate = 57344

const sqlLast = 32157

var sqlAct = [...]int{

	638, 2192, 1820, 2176, 1340, 2221, 2141, 2177, 1348, 2178,
	2009, 1108, 2191, 1862, 636, 2069, 1751, 1670, 1394, 1965,
	2035, 1423, 1861, 1990, 628, 1673, 1830, 1114, 999, 60,
	1888, 347, 1874, 614, 1645, 1412, 1971, 982, 98, 98,
	1000, 98, 1688, 1977, 704, 342, 24, 1398, 1600, 1574,
	579, 635, 349, 98, 98, 98, 869, 631, 1849, 558,
	98, 1393, 1840, 98, 1661, 1687, 1647, 1110, 844, 1397,
	536, 98, 1349, 1519, 545, 831, 841, 1281, 1432, 1573,
	98, 98, 925, 1189, 98, 1480, 1438, 98, 98, 98,
	98, 1256, 1152, 98, 98, 1161, 1656, 1134, 565, 75,
	331, 329, 1184, 1419, 1068, 1435, 1266, 1386, 563, 1433,
	1244, 971, 594, 749, 846, 608, 539, 1241, 832, 748,
	540, 870, 1321, 1275, 714, 725, 716, 956, 1342, 1292,
	916, 24, 607, 568, 1141, 1401, 814, 813, 815, 531,
	76, 468, 90, 1066, 482, 630, 457, 717, 478, 75,
	710, 557, 975, 77, 960, 566, 94, 794, 795, 819,
	1507, 984, 2080, 471, 1889, 2081, 1278, 2219, 1341, 99,
	866, 1185, 984, 984, 1324, 1671, 2201, 1654, 529, 1887,
	1668, 309, 562, 2188, 75, 2187, 1373, 2184, 1373, 576,
	866, 2174, 582, 1659, 866, 589, 346, 562, 2171, 2160,
	1611, 866, 1367, 1373, 2138, 1511, 1345, 866, 36, 1612,
	1512, 1185, 522, 1279, 585, 2122, 555, 1510, 1887, 37,
	65, 350, 1373, 1544, 1545, 479, 1143, 2118, 2114, 554,
	866, 1367, 39, 1188, 2128, 2106, 570, 346, 2105, 1890,
	860, 2076, 74, 546, 2077, 1188, 67, 2063, 871, 872,
	1887, 1659, 40, 2060, 74, 1142, 866, 2058, 1280, 1277,
	1887, 2039, 2020, 2019, 1367, 866, 1887, 1631, 1787, 1993,
	49, 874, 1373, 1729, 54, 871, 872, 53, 48, 50,
	1150, 1943, 49, 74, 1373, 68, 1635, 871, 872, 53,
	1921, 50, 866, 1373, 1918, 873, 1908, 1367, 874, 1373,
	1422, 1907, 1886, 51, 1373, 1887, 1384, 1260, 827, 55,
	874, 49, 1058, 1814, 81, 51, 1339, 592, 53, 98,
	50, 737, 873, 871, 872, 98, 98, 98, 98, 98,
	1550, 545, 1809, 1282, 873, 1339, 1373, 346, 1726, 575,
	888, 1373, 83, 85, 51, 1634, 874, 722, 866, 1985,
	598, 1518, 985, 1544, 1545, 879, 1562, 1563, 1564, 1591,
	563, 542, 1592, 985, 985, 1589, 2211, 694, 1373, 1915,
	873, 81, 1588, 1587, 1508, 1373, 1373, 1373, 84, 1080,
	1674, 1429, 879, 74, 866, 763, 79, 1377, 1560, 1372,
	1373, 2190, 1373, 80, 879, 1366, 2183, 56, 1367, 83,
	826, 1338, 1149, 52, 1339, 1148, 1559, 2146, 2109, 2061,
	1276, 49, 78, 889, 993, 1951, 1948, 994, 53, 351,
	50, 70, 71, 38, 711, 57, 81, 58, 1944, 69,
	879, 1936, 1371, 1637, 59, 84, 64, 1935, 81, 1252,
	889, 547, 1611, 79, 51, 62, 1934, 1930, 64, 1929,
	80, 726, 889, 98, 83, 1928, 1113, 66, 1927, 1142,
	1550, 1561, 1866, 1839, 1818, 81, 83, 81, 988, 1344,
	98, 719, 719, 98, 98, 720, 933, 64, 703, 983,
	1106, 1802, 1797, 1796, 545, 72, 890, 1795, 889, 1737,
	84, 1633, 545, 83, 73, 83, 837, 1565, 79, 1596,
	546, 1593, 84, 1672, 701, 80, 1581, 1572, 1543, 1540,
	79, 1539, 1537, 890, 1524, 1523, 1442, 80, 1560, 1289,
	1288, 1287, 98, 826, 78, 890, 825, 1753, 98, 84,
	926, 84, 78, 1816, 2163, 598, 78, 2125, 2104, 79,
	2103, 2102, 2094, 2092, 1253, 2084, 80, 2072, 2056, 98,
	98, 98, 2047, 98, 1554, 1546, 1547, 1548, 1549, 1551,
	1552, 890, 767, 78, 2108, 78, 2006, 81, 98, 1950,
	1995, 1959, 1941, 1913, 1893, 1854, 1828, 64, 1826, 98,
	875, 876, 877, 878, 880, 881, 1825, 1823, 759, 926,
	1721, 1561, 545, 98, 1696, 83, 1695, 1571, 1533, 349,
	545, 1532, 1529, 1504, 884, 882, 883, 875, 876, 877,
	878, 880, 881, 766, 812, 1499, 884, 882, 883, 875,
	876, 877, 878, 880, 881, 1246, 836, 1471, 811, 1469,
	867, 84, 1456, 800, 1455, 747, 742, 744, 1428, 79,
	961, 964, 563, 1331, 1286, 1456, 80, 1107, 835, 580,
	968, 954, 953, 546, 883, 875, 876, 877, 878, 880,
	881, 546, 767, 798, 757, 330, 952, 951, 950, 949,
	767, 948, 947, 946, 796, 945, 944, 1556, 1557, 1558,
	943, 942, 1555, 1553, 1554, 1546, 1547, 1548, 1549, 1551,
	1552, 941, 940, 804, 1983, 807, 543, 1418, 547, 939,
	1544, 1545, 938, 98, 937, 1417, 555, 930, 98, 98,
	98, 919, 98, 864, 1544, 1545, 871, 872, 78, 554,
	822, 823, 830, 828, 746, 733, 1544, 1545, 731, 98,
	98, 2202, 1621, 702, 2079, 1982, 1956, 98, 1955, 874,
	1923, 98, 1855, 871, 872, 1620, 98, 917, 973, 865,
	1544, 1545, 837, 755, 2082, 987, 545, 545, 990, 1648,
	1954, 546, 1613, 873, 349, 1185, 874, 966, 350, 546,
	98, 1674, 967, 98, 854, 98, 98, 98, 98, 98,
	98, 1595, 1594, 1483, 786, 758, 98, 922, 929, 1006,
	873, 98, 98, 1064, 852, 1081, 756, 1111, 98, 935,
	1481, 958, 959, 1972, 1341, 1754, 1267, 1550, 957, 98,
	1607, 853, 1683, 711, 790, 1515, 1079, 2149, 2117, 1112,
	2208, 1550, 932, 1628, 1901, 2209, 1376, 515, 98, 1095,
	88, 98, 962, 1550, 995, 755, 516, 1105, 521, 1278,
	98, 520, 965, 784, 2030, 2029, 552, 2028, 98, 1140,
	879, 547, 98, 791, 783, 2027, 997, 1711, 974, 547,
	98, 349, 977, 75, 98, 1560, 1082, 98, 837, 847,
	1710, 848, 1680, 1679, 349, 1154, 1815, 1117, 756, 1051,
	1528, 1707, 1527, 1053, 1052, 1526, 1279, 87, 1413, 1525,
	1486, 1374, 1180, 1228, 1055, 1155, 1182, 324, 1076, 1173,
	1069, 1181, 1176, 1178, 1075, 1198, 797, 591, 1049, 1154,
	1912, 1335, 1190, 1197, 1084, 1153, 1334, 1089, 1199, 1103,
	528, 1057, 1714, 1065, 1102, 546, 546, 1804, 857, 1006,
	1006, 1280, 1277, 350, 1597, 969, 1083, 2116, 1561, 1104,
	2011, 1166, 1168, 1660, 729, 849, 745, 1243, 855, 847,
	1119, 848, 1121, 1120, 325, 1243, 2180, 1171, 561, 547,
	555, 1138, 2161, 555, 555, 856, 351, 547, 978, 1183,
	1146, 1056, 1187, 1130, 973, 315, 1131, 1132, 847, 98,
	848, 98, 98, 1158, 98, 1698, 1179, 98, 782, 98,
	98, 780, 98, 98, 1282, 545, 1664, 1747, 1086, 2215,
	1162, 1090, 1091, 1092, 1093, 1094, 1282, 560, 1250, 1264,
	1601, 1361, 1476, 1248, 2157, 1667, 1099, 1100, 1420, 1421,
	2230, 1343, 1882, 1343, 1473, 849, 862, 316, 781, 86,
	350, 1662, 1546, 1547, 1548, 1549, 1551, 1552, 2158, 1267,
	1665, 2208, 2181, 350, 1605, 548, 1254, 1251, 1548, 1549,
	1551, 1552, 601, 881, 849, 1663, 1883, 562, 1546, 1547,
	1548, 1549, 1551, 1552, 1627, 319, 1101, 1165, 89, 553,
	1979, 2224, 1282, 1302, 549, 875, 876, 877, 878, 880,
	881, 349, 1467, 1276, 550, 861, 728, 1552, 1601, 98,
	984, 787, 75, 2097, 1257, 1362, 326, 75, 2182, 1365,
	1629, 1261, 98, 98, 98, 1269, 1347, 98, 98, 1705,
	1356, 1357, 1385, 955, 98, 726, 1666, 1294, 1294, 1305,
	1363, 1316, 2214, 547, 547, 328, 2043, 1328, 1329, 1330,
	1370, 351, 1408, 1358, 719, 327, 719, 1359, 98, 1360,
	310, 2057, 1531, 1151, 98, 349, 1430, 914, 1699, 2012,
	1865, 1441, 98, 98, 98, 1878, 788, 1879, 98, 1850,
	559, 98, 845, 850, 546, 1164, 752, 98, 98, 98,
	98, 98, 1307, 959, 958, 562, 1440, 858, 1378, 98,
	871, 872, 98, 98, 1225, 1978, 962, 1881, 965, 545,
	1380, 318, 317, 857, 1488, 75, 1884, 1715, 1388, 770,
	1453, 1382, 1242, 874, 523, 1449, 311, 2222, 1835, 789,
	2179, 2231, 1392, 855, 1664, 623, 2207, 1006, 1468, 1744,
	2213, 1470, 1383, 2205, 1964, 1443, 1410, 873, 351, 1390,
	856, 753, 817, 1667, 1381, 754, 771, 1544, 1545, 769,
	1466, 351, 1416, 850, 774, 740, 455, 736, 818, 1848,
	350, 1163, 1939, 95, 95, 1249, 313, 320, 1665, 767,
	1479, 1431, 2223, 2022, 1745, 1444, 2021, 1783, 449, 450,
	451, 2004, 850, 1880, 1496, 470, 563, 2235, 484, 2089,
	1682, 985, 524, 2225, 1223, 1226, 470, 879, 1452, 1494,
	1559, 816, 1448, 458, 1900, 569, 569, 321, 1063, 313,
	1897, 1899, 313, 313, 588, 313, 1411, 1118, 95, 595,
	1482, 1109, 1991, 1743, 350, 463, 818, 1222, 1126, 2142,
	1098, 459, 1059, 1831, 1966, 817, 322, 458, 323, 1517,
	2005, 1458, 1074, 1073, 1666, 542, 537, 1489, 1457, 1282,
	98, 1061, 563, 1487, 1550, 98, 1426, 98, 460, 463,
	752, 1940, 1980, 1062, 98, 459, 1845, 1844, 546, 1491,
	1784, 709, 547, 1503, 1660, 98, 1785, 462, 1957, 1492,
	708, 466, 1514, 1497, 563, 98, 98, 1992, 2234, 1239,
	560, 526, 460, 808, 816, 545, 465, 1821, 1127, 2002,
	1478, 1603, 1841, 1657, 1237, 1615, 1609, 1616, 1617, 1896,
	1898, 462, 1560, 98, 1285, 98, 2046, 98, 1619, 1938,
	1575, 98, 1224, 2003, 1720, 98, 1077, 1664, 1713, 1598,
	1538, 1502, 1498, 1375, 1337, 1006, 1177, 98, 1505, 1174,
	1636, 793, 1638, 792, 696, 785, 1667, 1453, 779, 778,
	98, 1578, 1579, 1580, 777, 776, 1521, 1522, 351, 775,
	1284, 1639, 1662, 772, 1006, 1642, 1606, 707, 599, 525,
	1576, 1665, 1096, 1088, 1233, 1614, 936, 764, 2175, 563,
	1618, 1693, 1234, 2139, 1235, 1561, 1663, 461, 1240, 1493,
	1043, 1694, 1624, 1625, 695, 1871, 1495, 1570, 643, 1630,
	1626, 1703, 1701, 1681, 1632, 1644, 1414, 1406, 1583, 1078,
	1702, 1364, 1704, 992, 991, 989, 986, 981, 1692, 863,
	859, 461, 351, 851, 877, 878, 880, 881, 1734, 1650,
	1652, 1646, 2051, 91, 706, 820, 1676, 75, 1723, 1655,
	705, 464, 98, 75, 313, 1658, 1669, 1666, 1678, 573,
	712, 313, 484, 484, 595, 2209, 1071, 1424, 2053, 1677,
	1685, 1640, 1154, 3, 546, 1170, 547, 1006, 1169, 1808,
	1706, 344, 34, 1712, 2099, 464, 1555, 1553, 1554, 1546,
	1547, 1548, 1549, 1551, 1552, 1890, 1190, 1758, 339, 29,
	1739, 1740, 1741, 1154, 1236, 1190, 1763, 338, 28, 1167,
	765, 1238, 454, 1006, 1006, 1733, 2111, 821, 514, 1730,
	1842, 824, 1006, 1006, 1746, 1748, 1749, 1755, 1425, 337,
	27, 574, 98, 98, 1175, 1810, 593, 1172, 1794, 1757,
	596, 1760, 2129, 1790, 1962, 1409, 597, 1405, 1762, 1346,
	335, 26, 98, 343, 18, 1006, 98, 1139, 98, 581,
	340, 15, 1054, 998, 1708, 98, 1709, 34, 545, 336,
	13, 467, 1827, 1807, 1791, 349, 341, 12, 333, 11,
	98, 1369, 2228, 98, 29, 1824, 517, 518, 734, 2233,
	543, 538, 349, 28, 98, 1837, 2173, 1805, 2132, 1727,
	98, 98, 98, 1988, 1811, 741, 1838, 1466, 484, 484,
	1813, 1812, 345, 9, 1817, 27, 1856, 98, 1803, 332,
	8, 1750, 98, 1857, 98, 1822, 98, 98, 98, 802,
	1693, 98, 98, 1832, 545, 1895, 26, 1834, 1833, 18,
	1694, 1891, 1544, 1545, 1851, 1852, 15, 1622, 1847, 1870,
	334, 4, 1590, 871, 872, 13, 527, 470, 1336, 871,
	872, 1867, 12, 313, 11, 1925, 1788, 1692, 871, 872,
	1917, 2010, 547, 1333, 98, 1332, 698, 1798, 802, 801,
	1274, 1894, 874, 923, 484, 806, 484, 803, 809, 1843,
	1911, 2155, 1846, 2036, 1742, 1641, 933, 931, 9, 1006,
	873, 456, 1087, 569, 767, 8, 873, 773, 1984, 1853,
	2156, 1931, 1530, 2068, 313, 2042, 1283, 934, 1882, 47,
	1690, 1875, 617, 1872, 1684, 1400, 697, 1399, 95, 1873,
	1937, 352, 1072, 1877, 639, 530, 4, 546, 1293, 1191,
	699, 641, 1003, 642, 350, 1004, 98, 98, 963, 629,
	1001, 724, 1883, 545, 1350, 1247, 1265, 1513, 1693, 927,
	609, 350, 621, 1693, 1960, 98, 98, 1860, 1694, 98,
	620, 1262, 730, 1694, 1876, 1952, 1989, 98, 481, 1953,
	1970, 63, 477, 1604, 98, 1949, 1125, 1415, 1122, 1700,
	1969, 1129, 98, 1050, 98, 1692, 349, 98, 551, 1987,
	1692, 1986, 1541, 546, 732, 98, 1314, 1306, 1961, 1958,
	1303, 349, 1996, 799, 1963, 840, 915, 1351, 1967, 762,
	1610, 1368, 1693, 1968, 1997, 829, 1133, 2000, 572, 571,
	2014, 1395, 1694, 2016, 760, 1060, 1379, 908, 313, 1998,
	907, 519, 2015, 313, 313, 313, 2091, 979, 751, 750,
	2013, 1878, 1407, 1879, 973, 1451, 2229, 2032, 2098, 1692,
	2025, 2026, 2024, 1697, 313, 313, 2031, 2148, 82, 2107,
	2034, 98, 95, 1477, 1975, 1976, 95, 640, 1981, 1006,
	35, 484, 33, 1881, 30, 98, 25, 23, 545, 2052,
	2048, 22, 1884, 98, 1693, 21, 32, 20, 31, 19,
	17, 98, 16, 14, 1694, 484, 2041, 98, 484, 10,
	95, 484, 484, 484, 484, 484, 98, 98, 1308, 1006,
	2075, 1097, 546, 98, 2067, 2054, 484, 484, 2062, 2078,
	2086, 1692, 2093, 470, 2085, 547, 46, 1974, 45, 2083,
	2071, 44, 351, 43, 1116, 2059, 42, 41, 98, 98,
	2088, 7, 2087, 2065, 6, 5, 2, 1, 2066, 351,
	0, 0, 0, 569, 0, 350, 595, 0, 2095, 1880,
	0, 0, 0, 0, 98, 313, 0, 0, 98, 0,
	350, 0, 0, 1159, 2123, 0, 545, 313, 2018, 2121,
	0, 0, 0, 98, 2124, 313, 2113, 0, 2096, 313,
	0, 547, 1186, 349, 98, 98, 563, 0, 0, 0,
	2074, 2130, 0, 98, 2127, 98, 0, 0, 98, 0,
	349, 2131, 2110, 2137, 2133, 1006, 2136, 0, 0, 0,
	0, 0, 0, 2144, 2134, 0, 0, 2145, 0, 0,
	0, 0, 0, 2162, 2164, 0, 2154, 2166, 0, 98,
	0, 2150, 98, 2165, 613, 0, 2126, 546, 0, 0,
	1693, 0, 0, 0, 2169, 2172, 2170, 2168, 0, 0,
	1694, 0, 0, 0, 0, 0, 0, 0, 0, 2185,
	0, 0, 98, 0, 98, 0, 1037, 0, 2200, 0,
	2198, 2197, 0, 0, 0, 312, 98, 1692, 0, 0,
	1544, 1545, 2199, 0, 600, 700, 2206, 2204, 0, 1544,
	1545, 2167, 2210, 0, 313, 2212, 1354, 1355, 0, 313,
	547, 0, 313, 2218, 484, 484, 0, 484, 595, 0,
	0, 0, 2220, 2189, 2227, 2226, 1036, 0, 577, 0,
	1005, 584, 587, 2232, 577, 0, 0, 0, 0, 0,
	2236, 0, 0, 0, 0, 546, 0, 0, 0, 0,
	0, 0, 0, 351, 0, 0, 0, 0, 0, 0,
	0, 0, 350, 0, 0, 0, 0, 0, 351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 2151, 2152, 2153,
	0, 0, 0, 0, 0, 0, 2159, 1550, 0, 0,
	0, 0, 0, 0, 1308, 1308, 1550, 0, 0, 0,
	0, 871, 872, 0, 1387, 0, 1037, 1037, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 313, 313,
	0, 0, 313, 1396, 874, 0, 0, 0, 0, 595,
	0, 0, 0, 0, 0, 547, 0, 0, 0, 738,
	739, 0, 0, 0, 0, 1560, 0, 0, 873, 0,
	0, 0, 0, 313, 1560, 0, 1036, 1036, 0, 313,
	1005, 1005, 1308, 1308, 1308, 0, 0, 313, 1446, 1447,
	0, 0, 0, 1159, 0, 0, 1454, 0, 0, 0,
	0, 0, 1459, 1460, 1462, 1464, 1465, 0, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 1474, 313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 879, 0,
	0, 0, 0, 0, 1500, 1501, 0, 0, 1561, 0,
	0, 0, 0, 0, 0, 0, 0, 1561, 0, 0,
	0, 0, 0, 547, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 833, 833, 0, 0, 0,
	351, 0, 0, 577, 842, 0, 0, 618, 61, 0,
	587, 0, 0, 0, 0, 0, 889, 351, 0, 0,
	0, 0, 0, 0, 0, 0, 909, 910, 911, 912,
	913, 0, 1567, 1568, 1569, 0, 921, 0, 1039, 0,
	0, 0, 0, 0, 0, 0, 928, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 1555,
	1553, 1554, 1546, 1547, 1548, 1549, 1551, 1552, 0, 1553,
	1554, 1546, 1547, 1548, 1549, 1551, 1552, 0, 0, 0,
	0, 0, 0, 556, 0, 0, 564, 0, 1038, 890,
	1308, 1308, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 313, 0, 0, 0, 0,
	313, 0, 1608, 0, 0, 0, 0, 0, 0, 313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1387, 1387, 0, 0, 1037, 0, 0, 0, 0, 1308,
	1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308,
	1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1116, 1308,
	1116, 0, 484, 0, 0, 0, 313, 0, 1039, 1039,
	1649, 882, 883, 875, 876, 877, 878, 880, 881, 0,
	0, 0, 313, 0, 1036, 0, 0, 0, 1005, 0,
	0, 0, 0, 0, 0, 313, 0, 0, 0, 0,
	1718, 1719, 577, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1689, 0, 0, 0, 0, 0, 1038, 1038,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1002,
	1123, 0, 1128, 0, 0, 0, 0, 0, 1135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 838, 0, 0, 0, 0, 0, 1764,
	1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774,
	1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 0, 1786,
	0, 0, 0, 0, 0, 0, 0, 1752, 0, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
	1221, 0, 1227, 0, 1229, 1230, 1231, 1232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 564, 0,
	0, 1255, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1037, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1290, 1291, 0, 0, 1304, 0,
	1315, 1317, 1322, 1325, 1326, 1327, 0, 313, 313, 1002,
	1002, 1037, 0, 0, 0, 0, 0, 972, 0, 0,
	0, 0, 577, 976, 976, 0, 0, 1819, 0, 0,
	0, 1159, 1036, 1116, 0, 0, 1005, 0, 0, 0,
	1829, 0, 0, 584, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 313, 0, 0, 313, 0,
	0, 1036, 0, 0, 0, 1005, 0, 0, 0, 1864,
	0, 0, 0, 0, 0, 1868, 1869, 1159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1689, 595, 0, 0, 0, 1039, 1902, 0, 1903,
	0, 313, 1905, 1906, 0, 0, 1909, 313, 0, 0,
	0, 0, 0, 0, 1037, 0, 1308, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1038, 0, 0, 1932,
	1037, 1037, 0, 0, 1147, 0, 0, 0, 0, 1037,
	1037, 0, 0, 0, 1036, 0, 577, 0, 1005, 0,
	0, 1308, 0, 0, 587, 0, 0, 0, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1037, 0, 0, 0, 833, 0, 0, 0,
	1036, 1036, 842, 556, 1005, 1005, 0, 0, 0, 1036,
	1036, 0, 0, 1005, 1005, 0, 0, 0, 0, 1689,
	0, 595, 1396, 0, 1689, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2007, 0, 0, 0,
	313, 313, 1036, 0, 313, 0, 1005, 0, 918, 0,
	920, 0, 1864, 0, 0, 0, 0, 924, 0, 1994,
	0, 0, 0, 0, 0, 0, 0, 1159, 0, 1999,
	0, 0, 2001, 0, 0, 0, 1484, 1485, 0, 1308,
	313, 0, 1490, 1689, 0, 0, 0, 0, 0, 0,
	0, 2045, 0, 1352, 0, 0, 0, 1002, 587, 0,
	0, 587, 0, 0, 1039, 0, 0, 0, 2033, 0,
	0, 0, 0, 0, 1509, 0, 0, 0, 0, 0,
	0, 1516, 0, 0, 1520, 0, 0, 0, 0, 0,
	0, 0, 0, 1039, 0, 0, 1037, 0, 0, 0,
	1534, 0, 0, 0, 0, 0, 595, 0, 0, 0,
	0, 0, 0, 0, 1038, 1689, 0, 0, 0, 0,
	313, 0, 0, 0, 0, 0, 921, 0, 2070, 0,
	0, 0, 1322, 1322, 1322, 0, 313, 0, 0, 0,
	0, 0, 1864, 1038, 0, 0, 1036, 0, 0, 0,
	1005, 595, 1864, 0, 0, 1602, 0, 0, 1116, 2112,
	0, 0, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1389, 587, 1391, 0,
	0, 577, 0, 2100, 2101, 0, 0, 1623, 0, 0,
	0, 0, 0, 0, 0, 0, 1039, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2119,
	0, 0, 1427, 2120, 0, 0, 0, 556, 1436, 0,
	556, 556, 0, 0, 0, 0, 1445, 0, 595, 0,
	0, 1651, 1039, 1039, 0, 0, 1135, 0, 0, 1864,
	595, 1039, 1039, 0, 0, 0, 1038, 0, 2143, 0,
	595, 61, 0, 313, 61, 0, 0, 1475, 0, 0,
	0, 0, 0, 0, 0, 1002, 0, 0, 0, 1686,
	0, 0, 0, 0, 1039, 0, 1037, 0, 0, 0,
	0, 1689, 1038, 1038, 2070, 0, 0, 1864, 0, 0,
	0, 1038, 1038, 0, 1002, 0, 0, 1716, 0, 0,
	1717, 0, 0, 0, 1245, 0, 0, 0, 0, 0,
	0, 0, 1722, 0, 0, 0, 1037, 313, 0, 595,
	0, 1731, 0, 0, 1038, 0, 1036, 0, 0, 1735,
	1005, 2203, 1623, 0, 0, 0, 0, 0, 0, 871,
	872, 0, 891, 892, 893, 901, 902, 903, 0, 0,
	0, 0, 1759, 0, 0, 894, 1761, 0, 0, 0,
	0, 0, 874, 0, 0, 905, 1036, 0, 0, 0,
	1005, 0, 0, 61, 0, 61, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 1792,
	1793, 61, 888, 0, 0, 0, 61, 1002, 1799, 1800,
	1801, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1599, 833, 0, 0, 1039, 972,
	0, 0, 1037, 0, 0, 0, 0, 842, 972, 0,
	0, 0, 0, 1002, 1002, 0, 0, 0, 0, 577,
	0, 0, 1002, 1002, 0, 0, 879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 898, 906, 0, 1038, 0,
	0, 0, 1036, 0, 0, 1002, 1005, 0, 0, 0,
	0, 0, 0, 904, 0, 1643, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 0, 896, 0,
	0, 1653, 0, 0, 889, 1892, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 895,
	0, 0, 0, 0, 1916, 0, 0, 0, 1919, 1920,
	0, 1437, 0, 1922, 0, 0, 0, 0, 0, 0,
	1924, 0, 1926, 0, 1544, 1545, 0, 1562, 1563, 1564,
	0, 0, 0, 0, 0, 0, 0, 0, 1933, 0,
	61, 0, 0, 61, 0, 0, 0, 890, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 899, 0, 0, 0, 0, 1039, 0,
	0, 1942, 0, 0, 0, 871, 872, 1559, 891, 892,
	893, 901, 902, 903, 0, 0, 0, 0, 0, 1002,
	0, 894, 0, 0, 1245, 0, 0, 0, 874, 0,
	0, 905, 0, 0, 0, 0, 0, 0, 1039, 0,
	0, 0, 0, 0, 920, 0, 0, 0, 1038, 0,
	0, 0, 873, 0, 0, 1973, 0, 0, 888, 0,
	897, 1550, 0, 885, 886, 887, 900, 0, 884, 882,
	883, 875, 876, 877, 878, 880, 881, 0, 0, 0,
	0, 1566, 0, 0, 1945, 0, 1352, 1436, 1038, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1565, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	920, 0, 879, 2023, 0, 0, 0, 0, 0, 1560,
	0, 0, 0, 0, 0, 0, 0, 0, 2037, 2038,
	0, 898, 906, 0, 1436, 0, 0, 1436, 0, 0,
	0, 0, 564, 0, 1039, 0, 0, 0, 0, 904,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2050,
	0, 0, 0, 0, 896, 0, 0, 0, 0, 0,
	889, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1904, 0, 0, 0, 0, 0, 1910, 0, 0, 0,
	0, 0, 1561, 2073, 1038, 895, 0, 0, 0, 1002,
	0, 0, 0, 61, 0, 0, 0, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2090, 0, 0, 0, 0, 0, 61, 0, 0, 0,
	0, 0, 61, 0, 0, 0, 0, 1675, 0, 1002,
	0, 0, 0, 890, 0, 0, 0, 0, 0, 0,
	871, 872, 0, 891, 892, 893, 901, 902, 903, 899,
	0, 0, 0, 0, 0, 0, 894, 0, 0, 0,
	842, 0, 0, 874, 0, 0, 905, 0, 1556, 1557,
	1558, 0, 0, 1555, 1553, 1554, 1546, 1547, 1548, 1549,
	1551, 1552, 0, 0, 0, 0, 0, 873, 0, 0,
	0, 0, 0, 888, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	1436, 0, 0, 1436, 0, 0, 897, 0, 0, 885,
	886, 887, 900, 0, 884, 882, 883, 875, 876, 877,
	878, 880, 881, 0, 0, 1002, 0, 0, 0, 0,
	1586, 1544, 1545, 0, 1562, 1563, 1564, 879, 0, 2008,
	0, 0, 0, 2186, 0, 0, 0, 1914, 0, 0,
	0, 2196, 2196, 0, 0, 0, 898, 906, 0, 871,
	872, 0, 891, 892, 893, 901, 902, 903, 0, 0,
	0, 0, 0, 0, 904, 894, 1544, 1545, 0, 1562,
	1563, 1564, 874, 0, 1559, 905, 0, 2196, 0, 896,
	1437, 0, 1725, 1544, 1545, 889, 1562, 1563, 1564, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 1724,
	0, 0, 888, 0, 0, 0, 0, 0, 0, 2064,
	895, 0, 2196, 0, 0, 0, 0, 0, 0, 1559,
	0, 0, 0, 0, 0, 1436, 0, 1437, 1550, 0,
	1437, 0, 0, 0, 0, 0, 1559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 879, 0, 890, 0,
	0, 0, 0, 0, 0, 1565, 0, 0, 0, 0,
	0, 0, 0, 1550, 899, 898, 906, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1560, 0, 0, 0,
	1550, 0, 0, 904, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 896, 0,
	1565, 0, 0, 0, 889, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1565, 0, 0,
	0, 1560, 0, 0, 0, 0, 0, 0, 0, 895,
	0, 897, 2147, 0, 885, 886, 887, 900, 1560, 884,
	882, 883, 875, 876, 877, 878, 880, 881, 0, 1561,
	0, 0, 0, 0, 0, 1585, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 890, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 899, 1561, 0, 1352, 0, 0, 0,
	0, 0, 1437, 1437, 0, 0, 1437, 0, 0, 0,
	0, 1561, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1556, 1557, 1558, 0, 0,
	1555, 1553, 1554, 1546, 1547, 1548, 1549, 1551, 1552, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	897, 0, 0, 885, 886, 887, 900, 0, 884, 882,
	883, 875, 876, 877, 878, 880, 881, 0, 0, 0,
	1556, 1557, 1558, 0, 1584, 1555, 1553, 1554, 1546, 1547,
	1548, 1549, 1551, 1552, 0, 0, 0, 1556, 1557, 1558,
	0, 0, 1555, 1553, 1554, 1546, 1547, 1548, 1549, 1551,
	1552, 0, 2055, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 101, 367, 102, 368, 369, 370, 371, 253,
	372, 373, 374, 375, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 376, 107, 260, 261, 108, 109,
	377, 378, 262, 263, 264, 379, 110, 265, 380, 353,
	381, 111, 112, 113, 920, 114, 382, 115, 116, 117,
	383, 354, 118, 119, 384, 385, 387, 386, 388, 389,
	390, 120, 121, 314, 122, 266, 123, 267, 268, 391,
	124, 392, 125, 393, 126, 394, 395, 127, 128, 396,
	129, 397, 0, 398, 269, 130, 131, 132, 270, 271,
	399, 400, 401, 133, 134, 272, 273, 274, 0, 135,
	402, 136, 403, 404, 355, 405, 137, 275, 406, 276,
	407, 138, 139, 140, 141, 277, 278, 357, 408, 145,
	409, 142, 410, 356, 143, 279, 144, 280, 281, 282,
	283, 284, 411, 285, 412, 358, 146, 147, 148, 359,
	149, 150, 151, 413, 153, 152, 414, 286, 360, 154,
	361, 415, 155, 416, 417, 156, 0, 157, 158, 159,
	161, 287, 160, 362, 162, 163, 165, 164, 418, 419,
	420, 288, 166, 289, 167, 168, 421, 169, 422, 423,
	170, 424, 425, 171, 290, 363, 172, 364, 291, 173,
	174, 175, 176, 177, 426, 178, 292, 179, 293, 180,
	427, 181, 182, 183, 184, 185, 294, 186, 187, 428,
	188, 189, 190, 191, 192, 194, 195, 193, 196, 197,
	198, 199, 429, 200, 365, 201, 202, 295, 203, 0,
	207, 208, 209, 210, 430, 212, 296, 211, 213, 214,
	431, 215, 204, 205, 216, 366, 217, 297, 298, 218,
	432, 224, 219, 220, 206, 221, 223, 299, 222, 300,
	433, 225, 434, 226, 227, 228, 229, 230, 231, 232,
	435, 301, 302, 303, 436, 437, 233, 234, 304, 305,
	438, 235, 236, 237, 238, 439, 440, 239, 240, 241,
	242, 441, 243, 442, 306, 244, 245, 246, 307, 308,
	443, 444, 247, 445, 446, 447, 448, 248, 249, 250,
	251, 252, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 348, 0, 0, 0, 0, 0, 0,
	1858, 0, 0, 0, 0, 0, 0, 0, 1859, 100,
	101, 367, 102, 368, 369, 370, 371, 253, 372, 373,
	374, 375, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 376, 107, 260, 261, 108, 109, 377, 378,
	262, 263, 264, 379, 110, 265, 380, 353, 381, 111,
	112, 113, 0, 114, 382, 115, 116, 117, 383, 354,
	118, 119, 384, 385, 387, 386, 388, 389, 390, 120,
	121, 314, 122, 266, 123, 267, 268, 391, 124, 392,
	125, 393, 126, 394, 395, 127, 128, 396, 129, 397,
	0, 398, 269, 130, 131, 132, 270, 271, 399, 400,
	401, 133, 134, 272, 273, 274, 0, 135, 402, 136,
	403, 404, 355, 405, 137, 275, 406, 276, 407, 138,
	139, 140, 141, 277, 278, 357, 408, 145, 409, 142,
	410, 356, 143, 279, 144, 280, 281, 282, 283, 284,
	411, 285, 412, 358, 146, 147, 148, 359, 149, 150,
	151, 413, 153, 152, 414, 286, 360, 154, 361, 415,
	155, 416, 417, 156, 0, 157, 158, 159, 161, 287,
	160, 362, 162, 163, 165, 164, 418, 419, 420, 288,
	166, 289, 167, 168, 421, 169, 422, 423, 170, 424,
	425, 171, 290, 363, 172, 364, 291, 173, 174, 175,
	176, 177, 426, 178, 292, 179, 293, 180, 427, 181,
	182, 183, 184, 185, 294, 186, 187, 428, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	429, 200, 365, 201, 202, 295, 203, 0, 207, 208,
	209, 210, 430, 212, 296, 211, 213, 214, 431, 215,
	204, 205, 216, 366, 217, 297, 298, 218, 432, 224,
	219, 220, 206, 221, 223, 299, 222, 300, 433, 225,
	434, 226, 227, 228, 229, 230, 231, 232, 435, 301,
	302, 303, 436, 437, 233, 234, 304, 305, 438, 235,
	236, 237, 238, 439, 440, 239, 240, 241, 242, 441,
	243, 442, 306, 244, 245, 246, 307, 308, 443, 444,
	247, 445, 446, 447, 448, 248, 249, 250, 251, 252,
	0, 0, 0, 348, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2135, 100,
	101, 367, 102, 368, 369, 370, 371, 253, 372, 373,
	374, 375, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 376, 107, 260, 261, 108, 109, 377, 378,
	262, 263, 264, 379, 110, 265, 380, 353, 381, 111,
	112, 113, 0, 114, 382, 115, 116, 117, 383, 354,
	118, 119, 384, 385, 387, 386, 388, 389, 390, 120,
	121, 314, 122, 266, 123, 267, 268, 391, 124, 392,
	125, 393, 126, 394, 395, 127, 128, 396, 129, 397,
	0, 398, 269, 130, 131, 132, 270, 271, 399, 400,
	401, 133, 134, 272, 273, 274, 0, 135, 402, 136,
	403, 404, 355, 405, 137, 275, 406, 276, 407, 138,
	139, 140, 141, 277, 278, 357, 408, 145, 409, 142,
	410, 356, 143, 279, 144, 280, 281, 282, 283, 284,
	411, 285, 412, 358, 146, 147, 148, 359, 149, 150,
	151, 413, 153, 152, 414, 286, 360, 154, 361, 415,
	155, 416, 417, 156, 0, 157, 158, 159, 161, 287,
	160, 362, 162, 163, 165, 164, 418, 419, 420, 288,
	166, 289, 167, 168, 421, 169, 422, 423, 170, 424,
	425, 171, 290, 363, 172, 364, 291, 173, 174, 175,
	176, 177, 426, 178, 292, 179, 293, 180, 427, 181,
	182, 183, 184, 185, 294, 186, 187, 428, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	429, 200, 365, 201, 202, 295, 203, 0, 207, 208,
	209, 210, 430, 212, 296, 211, 213, 214, 431, 215,
	204, 205, 216, 366, 217, 297, 298, 218, 432, 224,
	219, 220, 206, 221, 223, 299, 222, 300, 433, 225,
	434, 226, 227, 228, 229, 230, 231, 232, 435, 301,
	302, 303, 436, 437, 233, 234, 304, 305, 438, 235,
	236, 237, 238, 439, 440, 239, 240, 241, 242, 441,
	243, 442, 306, 244, 245, 246, 307, 308, 443, 444,
	247, 445, 446, 447, 448, 248, 249, 250, 251, 252,
	348, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 0, 100, 101, 367, 102,
	368, 369, 370, 371, 253, 372, 373, 374, 375, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 376,
	107, 260, 261, 108, 109, 377, 378, 262, 263, 264,
	379, 110, 265, 380, 353, 381, 111, 112, 113, 0,
	114, 382, 115, 116, 117, 383, 354, 118, 119, 384,
	385, 387, 386, 388, 389, 390, 120, 121, 314, 122,
	266, 123, 267, 268, 391, 124, 392, 125, 393, 126,
	394, 395, 127, 128, 396, 129, 397, 0, 398, 269,
	130, 131, 132, 270, 271, 399, 400, 401, 133, 134,
	272, 273, 274, 0, 135, 402, 136, 403, 404, 355,
	405, 137, 275, 406, 276, 407, 138, 139, 140, 141,
	277, 278, 357, 408, 145, 409, 142, 410, 356, 143,
	279, 144, 280, 281, 282, 283, 284, 411, 285, 412,
	358, 146, 147, 148, 359, 149, 150, 151, 413, 153,
	152, 414, 286, 360, 154, 361, 415, 155, 416, 417,
	156, 0, 157, 158, 159, 161, 287, 160, 362, 162,
	163, 165, 164, 418, 419, 420, 288, 166, 289, 167,
	168, 421, 169, 422, 423, 170, 424, 425, 171, 290,
	363, 172, 364, 291, 173, 174, 175, 176, 177, 426,
	178, 292, 179, 293, 180, 427, 181, 182, 183, 184,
	185, 294, 186, 187, 428, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 429, 200, 365,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 430,
	212, 296, 211, 213, 214, 431, 215, 204, 205, 216,
	366, 217, 297, 298, 218, 432, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 433, 225, 434, 226, 227,
	228, 229, 230, 231, 232, 435, 301, 302, 303, 436,
	437, 233, 234, 304, 305, 438, 235, 236, 237, 238,
	439, 440, 239, 240, 241, 242, 441, 243, 442, 306,
	244, 245, 246, 307, 308, 443, 444, 247, 445, 446,
	447, 448, 248, 249, 250, 251, 252, 637, 626, 627,
	624, 625, 616, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 654, 619, 0, 0, 0, 103, 104, 105, 254,
	669, 256, 670, 106, 671, 672, 0, 107, 260, 261,
	108, 109, 622, 653, 673, 674, 264, 0, 110, 665,
	0, 645, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 354, 118, 119, 0, 646, 647, 649,
	0, 648, 650, 120, 121, 314, 122, 675, 123, 676,
	677, 843, 124, 0, 125, 0, 126, 0, 0, 668,
	128, 0, 129, 0, 0, 0, 610, 130, 131, 132,
	655, 656, 633, 0, 0, 133, 134, 678, 679, 680,
	0, 135, 0, 136, 0, 0, 355, 0, 137, 666,
	0, 276, 0, 138, 139, 140, 141, 662, 664, 357,
	0, 145, 0, 142, 0, 356, 143, 681, 144, 682,
	683, 684, 685, 686, 0, 644, 0, 358, 146, 147,
	148, 359, 149, 150, 151, 0, 153, 152, 0, 667,
	360, 154, 361, 0, 155, 0, 0, 156, 0, 157,
	158, 159, 161, 287, 160, 362, 162, 163, 165, 164,
	605, 0, 634, 663, 166, 687, 167, 168, 0, 169,
	0, 0, 170, 0, 0, 171, 290, 363, 172, 364,
	657, 173, 174, 175, 176, 177, 0, 178, 658, 179,
	293, 180, 0, 181, 182, 183, 184, 185, 688, 186,
	187, 0, 188, 189, 190, 191, 192, 194, 195, 193,
	196, 197, 198, 199, 0, 200, 365, 201, 202, 611,
	203, 0, 207, 208, 209, 210, 81, 212, 296, 211,
	213, 214, 651, 215, 204, 205, 216, 366, 217, 689,
	298, 218, 0, 224, 219, 220, 206, 221, 223, 690,
	222, 659, 0, 225, 83, 226, 227, 228, 229, 230,
	231, 232, 0, 301, 691, 692, 0, 0, 233, 234,
	660, 661, 632, 235, 236, 237, 238, 0, 0, 239,
	240, 241, 242, 652, 243, 0, 306, 244, 245, 246,
	727, 693, 0, 0, 247, 0, 0, 0, 79, 248,
	249, 250, 251, 252, 606, 80, 0, 0, 0, 0,
	604, 0, 0, 0, 0, 602, 603, 637, 626, 627,
	624, 625, 616, 0, 612, 0, 0, 0, 0, 615,
	0, 0, 0, 100, 101, 1271, 102, 0, 0, 0,
	0, 654, 619, 0, 0, 0, 103, 104, 105, 254,
	669, 256, 670, 106, 671, 672, 0, 107, 260, 261,
	108, 109, 622, 653, 673, 674, 264, 0, 110, 665,
	0, 645, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 354, 118, 119, 0, 646, 647, 649,
	0, 648, 650, 120, 121, 314, 122, 675, 123, 676,
	677, 0, 124, 0, 125, 0, 126, 1272, 0, 668,
	128, 0, 129, 0, 0, 0, 610, 130, 131, 132,
	655, 656, 633, 0, 0, 133, 134, 678, 679, 680,
	0, 135, 0, 136, 0, 0, 355, 0, 137, 666,
	0, 276, 0, 138, 139, 140, 141, 662, 664, 357,
	0, 145, 0, 142, 0, 356, 143, 681, 144, 682,
	683, 684, 685, 686, 0, 644, 0, 358, 146, 147,
	148, 359, 149, 150, 151, 0, 153, 152, 0, 667,
	360, 154, 361, 0, 155, 0, 0, 156, 0, 157,
	158, 159, 161, 287, 160, 362, 162, 163, 165, 164,
	605, 0, 634, 663, 166, 687, 167, 168, 0, 169,
	0, 0, 170, 0, 0, 171, 290, 363, 172, 364,
	657, 173, 174, 175, 176, 177, 0, 178, 658, 179,
	293, 180, 0, 181, 182, 183, 184, 185, 688, 186,
	187, 0, 188, 189, 190, 191, 192, 194, 195, 193,
	196, 197, 198, 199, 0, 200, 365, 201, 202, 611,
	203, 0, 207, 208, 209, 210, 0, 212, 296, 211,
	213, 214, 651, 215, 204, 205, 216, 366, 217, 689,
	298, 218, 0, 224, 219, 220, 206, 221, 223, 690,
	222, 659, 0, 225, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 301, 691, 692, 0, 0, 233, 234,
	660, 661, 632, 235, 236, 237, 238, 0, 0, 239,
	240, 241, 242, 652, 243, 0, 306, 244, 245, 246,
	307, 693, 1270, 0, 247, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 606, 0, 0, 0, 0, 0,
	604, 0, 0, 0, 0, 602, 603, 1273, 637, 626,
	627, 624, 625, 616, 612, 1268, 0, 0, 0, 615,
	0, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 654, 619, 0, 0, 0, 103, 104, 105,
	254, 669, 256, 670, 106, 671, 672, 0, 107, 260,
	261, 108, 109, 622, 653, 673, 674, 264, 0, 110,
	665, 0, 645, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 354, 118, 119, 0, 646, 647,
	649, 0, 648, 650, 120, 121, 314, 122, 675, 123,
	676, 677, 0, 124, 0, 125, 0, 126, 0, 0,
	668, 128, 0, 129, 0, 0, 0, 610, 130, 131,
	132, 655, 656, 633, 0, 0, 133, 134, 678, 679,
	680, 0, 135, 0, 136, 0, 0, 355, 0, 137,
	666, 0, 276, 0, 138, 139, 140, 141, 662, 664,
	357, 0, 145, 0, 142, 0, 356, 143, 681, 144,
	682, 683, 684, 685, 686, 0, 644, 0, 358, 146,
	147, 148, 359, 149, 150, 151, 0, 153, 152, 0,
	667, 360, 154, 361, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 362, 162, 163, 165,
	164, 605, 0, 634, 663, 166, 687, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 363, 172,
	364, 657, 173, 174, 175, 176, 177, 0, 178, 658,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 688,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 365, 201, 202,
	611, 203, 0, 207, 208, 209, 210, 81, 212, 296,
	211, 213, 214, 651, 215, 204, 205, 216, 366, 217,
	689, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	690, 222, 659, 0, 225, 83, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 691, 692, 0, 0, 233,
	234, 660, 661, 632, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 652, 243, 0, 306, 244, 245,
	246, 727, 693, 0, 0, 247, 0, 0, 0, 79,
	248, 249, 250, 251, 252, 606, 80, 0, 0, 0,
	0, 604, 0, 0, 0, 0, 602, 603, 637, 626,
	627, 624, 625, 616, 0, 612, 0, 0, 0, 0,
	615, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 654, 619, 0, 0, 0, 103, 104, 105,
	254, 669, 256, 670, 106, 671, 672, 1318, 107, 260,
	261, 108, 109, 622, 653, 673, 674, 264, 0, 110,
	665, 0, 645, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 354, 118, 119, 0, 646, 647,
	649, 0, 648, 650, 120, 121, 314, 122, 675, 123,
	676, 677, 0, 124, 0, 125, 0, 126, 0, 0,
	668, 128, 0, 129, 0, 0, 0, 610, 130, 131,
	132, 655, 656, 633, 0, 0, 133, 134, 678, 679,
	680, 0, 135, 0, 136, 0, 1323, 355, 0, 137,
	666, 0, 276, 0, 138, 139, 140, 141, 662, 664,
	357, 0, 145, 0, 142, 0, 356, 143, 681, 144,
	682, 683, 684, 685, 686, 0, 644, 0, 358, 146,
	147, 148, 359, 149, 150, 151, 0, 153, 152, 1319,
	667, 360, 154, 361, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 362, 162, 163, 165,
	164, 605, 0, 634, 663, 166, 687, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 363, 172,
	364, 657, 173, 174, 175, 176, 177, 0, 178, 658,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 688,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 365, 201, 202,
	611, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 651, 215, 204, 205, 216, 366, 217,
	689, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	690, 222, 659, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 691, 692, 0, 1320, 233,
	234, 660, 661, 632, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 652, 243, 0, 306, 244, 245,
	246, 307, 693, 0, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 606, 0, 0, 0, 0,
	0, 604, 0, 0, 0, 0, 602, 603, 637, 626,
	627, 624, 625, 616, 0, 612, 0, 0, 0, 0,
	615, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 654, 619, 0, 0, 0, 103, 104, 105,
	254, 669, 256, 670, 106, 671, 672, 0, 107, 260,
	261, 108, 109, 622, 653, 673, 674, 264, 0, 110,
	665, 0, 645, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 354, 118, 119, 0, 646, 647,
	649, 0, 648, 650, 120, 121, 314, 122, 675, 123,
	676, 677, 0, 124, 0, 125, 0, 126, 0, 0,
	668, 128, 0, 129, 0, 0, 0, 610, 130, 131,
	132, 655, 656, 633, 0, 0, 133, 134, 678, 679,
	680, 0, 135, 0, 136, 0, 0, 355, 0, 137,
	666, 0, 276, 0, 138, 139, 140, 141, 662, 664,
	357, 0, 145, 0, 142, 0, 356, 143, 681, 144,
	682, 683, 684, 685, 686, 0, 644, 0, 358, 146,
	147, 148, 359, 149, 150, 151, 0, 153, 152, 0,
	667, 360, 154, 361, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 362, 162, 163, 165,
	164, 605, 1806, 634, 663, 166, 687, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 363, 172,
	364, 657, 173, 174, 175, 176, 177, 0, 178, 658,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 688,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 365, 201, 202,
	611, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 651, 215, 204, 205, 216, 366, 217,
	689, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	690, 222, 659, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 691, 692, 0, 0, 233,
	234, 660, 661, 632, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 652, 243, 0, 306, 244, 245,
	246, 307, 693, 0, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 606, 0, 0, 0, 0,
	0, 604, 0, 0, 0, 0, 602, 603, 834, 637,
	626, 627, 624, 625, 616, 612, 0, 0, 0, 0,
	615, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 654, 619, 0, 0, 0, 103, 104,
	105, 254, 669, 256, 670, 106, 671, 672, 0, 107,
	260, 261, 108, 109, 622, 653, 673, 674, 264, 0,
	110, 665, 0, 645, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 354, 118, 119, 0, 646,
	647, 649, 0, 648, 650, 120, 121, 314, 122, 675,
	123, 676, 677, 0, 124, 0, 125, 0, 126, 0,
	0, 668, 128, 0, 129, 0, 0, 0, 610, 130,
	131, 132, 655, 656, 633, 0, 0, 133, 134, 678,
	679, 680, 0, 135, 0, 136, 0, 0, 355, 0,
	137, 666, 0, 276, 0, 138, 139, 140, 141, 662,
	664, 357, 0, 145, 1137, 142, 0, 356, 143, 681,
	144, 682, 683, 684, 685, 686, 0, 644, 0, 358,
	146, 147, 148, 359, 149, 150, 151, 0, 153, 152,
	0, 667, 360, 154, 361, 0, 155, 0, 0, 156,
	0, 157, 158, 159, 161, 287, 160, 362, 162, 163,
	165, 164, 605, 0, 634, 663, 166, 687, 167, 168,
	0, 169, 0, 0, 170, 0, 0, 171, 290, 363,
	172, 364, 657, 173, 174, 175, 176, 177, 0, 178,
	658, 179, 293, 180, 1136, 181, 182, 183, 184, 185,
	688, 186, 187, 0, 188, 189, 190, 191, 192, 194,
	195, 193, 196, 197, 198, 199, 0, 200, 365, 201,
	202, 611, 203, 0, 207, 208, 209, 210, 0, 212,
	296, 211, 213, 214, 651, 215, 204, 205, 216, 366,
	217, 689, 298, 218, 0, 224, 219, 220, 206, 221,
	223, 690, 222, 659, 0, 225, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 301, 691, 692, 0, 0,
	233, 234, 660, 661, 632, 235, 236, 237, 238, 0,
	0, 239, 240, 241, 242, 652, 243, 0, 306, 244,
	245, 246, 307, 693, 0, 0, 247, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 606, 0, 0, 0,
	0, 0, 604, 0, 0, 0, 0, 602, 603, 637,
	626, 627, 624, 625, 616, 0, 612, 0, 0, 0,
	0, 615, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 654, 619, 0, 0, 0, 103, 104,
	105, 254, 669, 256, 670, 106, 671, 672, 0, 107,
	260, 261, 108, 109, 622, 653, 673, 674, 264, 0,
	110, 665, 0, 645, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 354, 118, 119, 0, 646,
	647, 649, 0, 648, 650, 120, 121, 314, 122, 675,
	123, 676, 677, 0, 124, 0, 125, 0, 126, 0,
	0, 668, 128, 0, 129, 0, 0, 0, 610, 130,
	131, 132, 655, 656, 633, 0, 0, 133, 134, 678,
	679, 680, 0, 135, 0, 136, 0, 0, 355, 0,
	137, 666, 0, 276, 0, 138, 139, 140, 141, 662,
	664, 357, 0, 145, 0, 142, 0, 356, 143, 681,
	144, 682, 683, 684, 685, 686, 0, 644, 0, 358,
	146, 147, 148, 359, 149, 150, 151, 0, 153, 152,
	0, 667, 360, 154, 361, 0, 155, 0, 0, 156,
	0, 157, 158, 159, 161, 287, 160, 362, 162, 163,
	165, 164, 605, 0, 634, 663, 166, 687, 167, 168,
	0, 169, 0, 0, 170, 0, 0, 171, 290, 363,
	172, 364, 657, 173, 174, 175, 176, 177, 0, 178,
	658, 179, 293, 180, 0, 181, 182, 183, 184, 185,
	688, 186, 187, 0, 188, 189, 190, 191, 192, 194,
	195, 193, 196, 197, 198, 199, 0, 200, 365, 201,
	202, 611, 203, 0, 207, 208, 209, 210, 0, 212,
	296, 211, 213, 214, 651, 215, 204, 205, 216, 366,
	217, 689, 298, 218, 0, 224, 219, 220, 206, 221,
	223, 690, 222, 659, 0, 225, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 301, 691, 692, 0, 0,
	233, 234, 660, 661, 632, 235, 236, 237, 238, 0,
	0, 239, 240, 241, 242, 652, 243, 0, 306, 244,
	245, 246, 307, 693, 0, 0, 247, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 606, 0, 0, 0,
	0, 0, 604, 0, 0, 0, 0, 602, 603, 0,
	0, 0, 0, 0, 926, 1263, 612, 0, 0, 0,
	0, 615, 637, 626, 627, 624, 625, 616, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 654, 619, 0, 0,
	0, 103, 104, 105, 254, 669, 256, 670, 106, 671,
	672, 0, 107, 260, 261, 108, 109, 622, 653, 673,
	674, 264, 0, 110, 665, 0, 645, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 354, 118,
	119, 0, 646, 647, 649, 0, 648, 650, 120, 121,
	314, 122, 675, 123, 676, 677, 843, 124, 0, 125,
	0, 126, 0, 0, 668, 128, 0, 129, 0, 0,
	0, 610, 130, 131, 132, 655, 656, 633, 0, 0,
	133, 134, 678, 679, 680, 0, 135, 0, 136, 0,
	0, 355, 0, 137, 666, 0, 276, 0, 138, 139,
	140, 141, 662, 664, 357, 0, 145, 0, 142, 0,
	356, 143, 681, 144, 682, 683, 684, 685, 686, 0,
	644, 0, 358, 146, 147, 148, 359, 149, 150, 151,
	0, 153, 152, 0, 667, 360, 154, 361, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	362, 162, 163, 165, 164, 605, 0, 634, 663, 166,
	687, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 363, 172, 364, 657, 173, 174, 175, 176,
	177, 0, 178, 658, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 688, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 365, 201, 202, 611, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 651, 215, 204,
	205, 216, 366, 217, 689, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 690, 222, 659, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 691,
	692, 0, 0, 233, 234, 660, 661, 632, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 652, 243,
	0, 306, 244, 245, 246, 307, 693, 0, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 606,
	0, 0, 0, 0, 0, 604, 0, 0, 0, 0,
	602, 603, 637, 626, 627, 624, 625, 616, 0, 612,
	0, 0, 0, 0, 615, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 654, 619, 0, 0,
	0, 103, 104, 105, 254, 669, 256, 670, 106, 671,
	672, 0, 107, 260, 261, 108, 109, 622, 653, 673,
	674, 264, 0, 110, 665, 0, 645, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 354, 118,
	119, 0, 646, 647, 649, 0, 648, 650, 120, 121,
	314, 122, 675, 123, 676, 677, 0, 124, 0, 125,
	0, 126, 0, 0, 668, 128, 0, 129, 0, 0,
	0, 610, 130, 131, 132, 655, 656, 633, 0, 0,
	133, 134, 678, 679, 680, 0, 135, 0, 136, 0,
	0, 355, 0, 137, 666, 0, 276, 0, 138, 139,
	140, 141, 662, 664, 357, 0, 145, 0, 142, 0,
	356, 143, 681, 144, 682, 683, 684, 685, 686, 0,
	644, 0, 358, 146, 147, 148, 359, 149, 150, 151,
	0, 153, 152, 0, 667, 360, 154, 361, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	362, 162, 163, 165, 164, 605, 0, 634, 663, 166,
	687, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 363, 172, 364, 657, 173, 174, 175, 176,
	177, 0, 178, 658, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 688, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 365, 201, 202, 611, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 651, 215, 204,
	205, 216, 366, 217, 689, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 690, 222, 659, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 691,
	692, 0, 0, 233, 234, 660, 661, 632, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 652, 243,
	0, 306, 244, 245, 246, 307, 693, 0, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 606,
	0, 0, 0, 0, 0, 604, 0, 0, 0, 0,
	602, 603, 637, 626, 627, 624, 625, 616, 0, 612,
	1789, 0, 0, 0, 615, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 654, 619, 0, 0,
	0, 103, 104, 105, 254, 669, 256, 670, 106, 671,
	672, 0, 107, 260, 261, 108, 109, 622, 653, 673,
	674, 264, 0, 110, 665, 0, 645, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 354, 118,
	119, 0, 646, 647, 649, 0, 648, 650, 120, 121,
	314, 122, 675, 123, 676, 677, 0, 124, 0, 125,
	0, 126, 0, 0, 668, 128, 0, 129, 0, 0,
	0, 610, 130, 131, 132, 655, 656, 633, 0, 0,
	133, 134, 678, 679, 680, 0, 135, 0, 136, 0,
	0, 355, 0, 137, 666, 0, 276, 0, 138, 139,
	140, 141, 662, 664, 357, 0, 145, 0, 142, 0,
	356, 143, 681, 144, 682, 683, 684, 685, 686, 0,
	644, 0, 358, 146, 147, 148, 359, 149, 150, 151,
	0, 153, 152, 0, 667, 360, 154, 361, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	362, 162, 163, 165, 164, 605, 0, 634, 663, 166,
	687, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 363, 172, 364, 657, 173, 174, 175, 176,
	177, 0, 178, 658, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 688, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 365, 201, 202, 611, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 651, 215, 204,
	205, 216, 366, 217, 689, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 690, 222, 659, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 691,
	692, 0, 0, 233, 234, 660, 661, 632, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 652, 243,
	0, 306, 244, 245, 246, 307, 693, 1738, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 606,
	0, 0, 0, 0, 0, 604, 0, 0, 0, 0,
	602, 603, 637, 626, 627, 624, 625, 616, 0, 612,
	0, 0, 0, 0, 615, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 654, 619, 0, 0,
	0, 103, 104, 105, 254, 669, 256, 670, 106, 671,
	672, 0, 107, 260, 261, 108, 109, 622, 653, 673,
	674, 264, 0, 110, 665, 0, 645, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 354, 118,
	119, 0, 646, 647, 649, 0, 648, 650, 120, 121,
	314, 122, 675, 123, 676, 677, 0, 124, 0, 125,
	0, 126, 0, 0, 668, 128, 0, 129, 0, 0,
	0, 610, 130, 131, 132, 655, 656, 633, 0, 0,
	133, 134, 678, 679, 680, 0, 135, 0, 136, 0,
	0, 355, 0, 137, 666, 0, 276, 0, 138, 139,
	140, 141, 662, 664, 357, 0, 145, 0, 142, 0,
	356, 143, 681, 144, 682, 683, 684, 685, 686, 0,
	644, 0, 358, 146, 147, 148, 359, 149, 150, 151,
	0, 153, 152, 0, 667, 360, 154, 361, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	362, 162, 163, 165, 164, 605, 0, 634, 663, 166,
	687, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 363, 172, 364, 657, 173, 174, 175, 176,
	177, 0, 178, 658, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 688, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 365, 201, 202, 611, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 651, 215, 204,
	205, 216, 366, 217, 689, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 690, 222, 659, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 691,
	692, 0, 0, 233, 234, 660, 661, 632, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 652, 243,
	0, 306, 244, 245, 246, 307, 693, 0, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 606,
	0, 0, 0, 0, 0, 604, 0, 0, 0, 0,
	602, 603, 637, 626, 627, 624, 625, 616, 0, 612,
	1728, 0, 0, 0, 615, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 654, 619, 0, 0,
	0, 103, 104, 105, 254, 669, 256, 670, 106, 671,
	672, 0, 107, 260, 261, 108, 109, 622, 653, 673,
	674, 264, 0, 110, 665, 0, 645, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 354, 118,
	119, 0, 646, 647, 649, 0, 648, 650, 120, 121,
	314, 122, 675, 123, 676, 677, 0, 124, 0, 125,
	0, 126, 0, 0, 668, 128, 0, 129, 0, 0,
	0, 610, 130, 131, 132, 655, 656, 633, 0, 0,
	133, 134, 678, 679, 680, 0, 135, 0, 136, 0,
	1323, 355, 0, 137, 666, 0, 276, 0, 138, 139,
	140, 141, 662, 664, 357, 0, 145, 0, 142, 0,
	356, 143, 681, 144, 682, 683, 684, 685, 686, 0,
	644, 0, 358, 146, 147, 148, 359, 149, 150, 151,
	0, 153, 152, 0, 667, 360, 154, 361, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	362, 162, 163, 165, 164, 605, 0, 634, 663, 166,
	687, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 363, 172, 364, 657, 173, 174, 175, 176,
	177, 0, 178, 658, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 688, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 365, 201, 202, 611, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 651, 215, 204,
	205, 216, 366, 217, 689, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 690, 222, 659, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 691,
	692, 0, 0, 233, 234, 660, 661, 632, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 652, 243,
	0, 306, 244, 245, 246, 307, 693, 0, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 606,
	0, 0, 0, 0, 0, 604, 0, 0, 0, 0,
	602, 603, 637, 626, 627, 624, 625, 616, 0, 612,
	0, 0, 0, 0, 615, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 654, 619, 0, 0,
	0, 103, 104, 105, 254, 669, 256, 670, 106, 671,
	672, 0, 107, 260, 261, 108, 109, 622, 653, 673,
	674, 264, 0, 110, 665, 0, 645, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 354, 118,
	119, 0, 646, 647, 649, 0, 648, 650, 120, 121,
	314, 122, 675, 123, 676, 677, 0, 124, 0, 125,
	0, 126, 0, 0, 668, 128, 0, 129, 0, 0,
	0, 610, 130, 131, 132, 655, 656, 633, 0, 0,
	133, 134, 678, 679, 680, 0, 135, 0, 136, 0,
	0, 355, 0, 137, 666, 0, 276, 0, 138, 139,
	140, 141, 662, 664, 357, 0, 145, 0, 142, 0,
	356, 143, 681, 144, 682, 683, 684, 685, 686, 0,
	644, 0, 358, 146, 147, 148, 359, 149, 150, 151,
	0, 153, 152, 0, 667, 360, 154, 361, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	362, 162, 163, 165, 164, 605, 0, 634, 663, 166,
	687, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 363, 172, 364, 657, 173, 174, 175, 176,
	177, 0, 178, 658, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 688, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 365, 201, 202, 611, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 651, 215, 204,
	205, 216, 366, 217, 689, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 690, 222, 659, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 691,
	692, 0, 0, 233, 234, 660, 661, 632, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 652, 243,
	0, 306, 244, 245, 246, 307, 693, 0, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 606,
	0, 0, 0, 0, 0, 604, 0, 0, 0, 0,
	602, 603, 834, 637, 626, 627, 624, 625, 616, 612,
	0, 0, 0, 0, 615, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 654, 619, 0,
	0, 0, 103, 104, 105, 254, 669, 256, 670, 106,
	671, 672, 0, 107, 260, 261, 108, 109, 622, 653,
	673, 674, 264, 0, 110, 665, 0, 645, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 354,
	118, 119, 0, 646, 647, 649, 0, 648, 650, 120,
	121, 314, 122, 675, 123, 676, 677, 0, 124, 0,
	125, 0, 126, 0, 0, 668, 128, 0, 129, 0,
	0, 0, 610, 130, 131, 132, 655, 656, 633, 0,
	0, 133, 134, 678, 679, 680, 0, 135, 0, 136,
	0, 0, 355, 0, 137, 666, 0, 276, 0, 138,
	139, 140, 141, 662, 664, 357, 0, 145, 0, 142,
	0, 356, 143, 681, 144, 682, 683, 684, 685, 686,
	0, 644, 0, 358, 146, 147, 148, 359, 149, 150,
	151, 0, 153, 152, 0, 667, 360, 154, 361, 0,
	155, 0, 0, 156, 0, 157, 158, 159, 161, 287,
	160, 362, 162, 163, 165, 164, 605, 0, 634, 663,
	166, 687, 167, 168, 0, 169, 0, 0, 170, 0,
	0, 171, 290, 363, 172, 364, 657, 173, 174, 175,
	176, 177, 0, 178, 658, 179, 293, 180, 0, 181,
	182, 183, 184, 185, 688, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 365, 201, 202, 611, 203, 0, 207, 208,
	209, 210, 0, 212, 296, 211, 213, 214, 651, 215,
	204, 205, 216, 366, 217, 689, 298, 218, 0, 224,
	219, 220, 206, 221, 223, 690, 222, 659, 0, 225,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 301,
	691, 692, 0, 0, 233, 234, 660, 661, 632, 235,
	236, 237, 238, 0, 0, 239, 240, 241, 242, 652,
	243, 0, 306, 244, 245, 246, 307, 693, 0, 0,
	247, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	606, 0, 0, 0, 0, 0, 604, 0, 0, 0,
	0, 602, 603, 637, 626, 627, 624, 625, 616, 0,
	612, 1258, 0, 0, 0, 615, 0, 0, 0, 100,
	101, 1124, 102, 0, 0, 0, 0, 654, 619, 0,
	0, 0, 103, 104, 105, 254, 669, 256, 670, 106,
	671, 672, 0, 107, 260, 261, 108, 109, 622, 653,
	673, 674, 264, 0, 110, 665, 0, 645, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 354,
	118, 119, 0, 646, 647, 649, 0, 648, 650, 120,
	121, 314, 122, 675, 123, 676, 677, 0, 124, 0,
	125, 0, 126, 0, 0, 668, 128, 0, 129, 0,
	0, 0, 610, 130, 131, 132, 655, 656, 633, 0,
	0, 133, 134, 678, 679, 680, 0, 135, 0, 136,
	0, 0, 355, 0, 137, 666, 0, 276, 0, 138,
	139, 140, 141, 662, 664, 357, 0, 145, 0, 142,
	0, 356, 143, 681, 144, 682, 683, 684, 685, 686,
	0, 644, 0, 358, 146, 147, 148, 359, 149, 150,
	151, 0, 153, 152, 0, 667, 360, 154, 361, 0,
	155, 0, 0, 156, 0, 157, 158, 159, 161, 287,
	160, 362, 162, 163, 165, 164, 605, 0, 634, 663,
	166, 687, 167, 168, 0, 169, 0, 0, 170, 0,
	0, 171, 290, 363, 172, 364, 657, 173, 174, 175,
	176, 177, 0, 178, 658, 179, 293, 180, 0, 181,
	182, 183, 184, 185, 688, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 365, 201, 202, 611, 203, 0, 207, 208,
	209, 210, 0, 212, 296, 211, 213, 214, 651, 215,
	204, 205, 216, 366, 217, 689, 298, 218, 0, 224,
	219, 220, 206, 221, 223, 690, 222, 659, 0, 225,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 301,
	691, 692, 0, 0, 233, 234, 660, 661, 632, 235,
	236, 237, 238, 0, 0, 239, 240, 241, 242, 652,
	243, 0, 306, 244, 245, 246, 307, 693, 0, 0,
	247, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	606, 0, 0, 0, 0, 0, 604, 0, 0, 0,
	0, 602, 603, 637, 626, 627, 624, 625, 616, 0,
	612, 0, 0, 0, 0, 615, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 654, 619, 0,
	0, 0, 103, 104, 105, 254, 669, 256, 670, 106,
	671, 672, 0, 107, 260, 261, 108, 109, 622, 653,
	673, 674, 264, 0, 110, 665, 0, 645, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 354,
	118, 2195, 0, 646, 647, 649, 0, 648, 650, 120,
	121, 314, 122, 675, 123, 676, 677, 0, 124, 0,
	125, 0, 126, 0, 0, 668, 128, 0, 129, 0,
	0, 0, 610, 130, 131, 132, 655, 656, 633, 0,
	0, 133, 134, 678, 679, 680, 0, 135, 0, 136,
	0, 0, 355, 0, 137, 666, 0, 276, 0, 138,
	139, 140, 141, 662, 664, 357, 0, 145, 0, 142,
	0, 356, 143, 681, 144, 682, 683, 684, 685, 686,
	0, 644, 0, 358, 146, 147, 148, 359, 149, 150,
	151, 0, 153, 152, 0, 667, 360, 154, 361, 0,
	155, 0, 0, 156, 0, 157, 158, 159, 161, 287,
	160, 362, 162, 163, 165, 164, 605, 0, 634, 663,
	166, 687, 167, 168, 0, 169, 0, 0, 170, 0,
	0, 171, 290, 363, 172, 364, 657, 173, 174, 175,
	176, 177, 0, 178, 658, 179, 293, 180, 0, 181,
	182, 183, 184, 185, 688, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 365, 201, 202, 611, 203, 0, 207, 208,
	209, 210, 0, 212, 296, 211, 213, 214, 651, 215,
	204, 205, 216, 366, 217, 689, 298, 218, 0, 224,
	219, 220, 206, 221, 223, 690, 222, 659, 0, 225,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 301,
	691, 692, 0, 0, 233, 234, 660, 661, 632, 235,
	236, 2194, 238, 0, 0, 239, 240, 241, 242, 652,
	243, 0, 306, 244, 245, 246, 307, 693, 0, 0,
	247, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	606, 0, 0, 0, 0, 0, 604, 0, 0, 0,
	0, 602, 603, 637, 626, 627, 624, 625, 616, 0,
	612, 0, 0, 0, 0, 615, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 654, 619, 0,
	0, 0, 103, 104, 105, 2193, 669, 256, 670, 106,
	671, 672, 0, 107, 260, 261, 108, 109, 622, 653,
	673, 674, 264, 0, 110, 665, 0, 645, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 354,
	118, 2195, 0, 646, 647, 649, 0, 648, 650, 120,
	121, 314, 122, 675, 123, 676, 677, 0, 124, 0,
	125, 0, 126, 0, 0, 668, 128, 0, 129, 0,
	0, 0, 610, 130, 131, 132, 655, 656, 633, 0,
	0, 133, 134, 678, 679, 680, 0, 135, 0, 136,
	0, 0, 355, 0, 137, 666, 0, 276, 0, 138,
	139, 140, 141, 662, 664, 357, 0, 145, 0, 142,
	0, 356, 143, 681, 144, 682, 683, 684, 685, 686,
	0, 644, 0, 358, 146, 147, 148, 359, 149, 150,
	151, 0, 153, 152, 0, 667, 360, 154, 361, 0,
	155, 0, 0, 156, 0, 157, 158, 159, 161, 287,
	160, 362, 162, 163, 165, 164, 605, 0, 634, 663,
	166, 687, 167, 168, 0, 169, 0, 0, 170, 0,
	0, 171, 290, 363, 172, 364, 657, 173, 174, 175,
	176, 177, 0, 178, 658, 179, 293, 180, 0, 181,
	182, 183, 184, 185, 688, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 365, 201, 202, 611, 203, 0, 207, 208,
	209, 210, 0, 212, 296, 211, 213, 214, 651, 215,
	204, 205, 216, 366, 217, 689, 298, 218, 0, 224,
	219, 220, 206, 221, 223, 690, 222, 659, 0, 225,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 301,
	691, 692, 0, 0, 233, 234, 660, 661, 632, 235,
	236, 2194, 238, 0, 0, 239, 240, 241, 242, 652,
	243, 0, 306, 244, 245, 246, 307, 693, 0, 0,
	247, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	606, 0, 0, 0, 0, 0, 604, 0, 0, 0,
	0, 602, 603, 637, 626, 627, 624, 625, 616, 0,
	612, 0, 0, 0, 0, 615, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 654, 619, 0,
	0, 0, 103, 104, 105, 254, 669, 256, 670, 106,
	671, 672, 0, 107, 260, 261, 108, 109, 622, 653,
	673, 674, 264, 0, 110, 665, 0, 645, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 354,
	118, 119, 0, 646, 647, 649, 0, 648, 650, 120,
	121, 314, 122, 675, 123, 676, 677, 0, 124, 0,
	125, 0, 126, 0, 0, 668, 128, 0, 129, 0,
	0, 0, 610, 130, 131, 132, 655, 656, 633, 0,
	0, 133, 134, 678, 679, 680, 0, 135, 0, 136,
	0, 0, 355, 0, 137, 666, 0, 276, 0, 138,
	139, 140, 141, 662, 664, 357, 0, 145, 0, 142,
	0, 356, 143, 681, 144, 682, 683, 684, 685, 686,
	0, 644, 0, 358, 146, 147, 148, 359, 149, 150,
	151, 0, 153, 152, 0, 667, 360, 154, 361, 0,
	155, 0, 0, 156, 0, 157, 158, 159, 161, 287,
	160, 362, 162, 163, 165, 164, 605, 0, 634, 663,
	166, 687, 167, 168, 0, 169, 0, 0, 170, 0,
	0, 171, 290, 363, 172, 364, 657, 173, 174, 175,
	176, 177, 0, 178, 658, 179, 293, 180, 0, 181,
	182, 183, 184, 185, 688, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 365, 201, 202, 611, 203, 0, 207, 208,
	209, 210, 0, 212, 296, 211, 213, 214, 651, 215,
	204, 205, 216, 366, 217, 689, 298, 218, 0, 224,
	219, 220, 206, 221, 223, 690, 222, 659, 0, 225,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 301,
	691, 692, 0, 0, 233, 234, 660, 661, 632, 235,
	236, 237, 238, 0, 0, 239, 240, 241, 242, 652,
	243, 0, 306, 244, 245, 246, 307, 693, 0, 0,
	247, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	606, 0, 0, 0, 0, 0, 604, 0, 0, 0,
	0, 602, 603, 1295, 626, 627, 624, 625, 616, 0,
	612, 0, 0, 0, 0, 615, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 654, 619, 0,
	0, 0, 103, 104, 105, 254, 669, 256, 670, 106,
	671, 672, 0, 107, 260, 261, 108, 109, 622, 653,
	673, 674, 264, 0, 110, 665, 0, 645, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 354,
	118, 119, 0, 646, 647, 649, 0, 648, 650, 120,
	121, 314, 122, 675, 1298, 676, 677, 0, 124, 0,
	125, 0, 126, 0, 0, 668, 128, 0, 129, 0,
	0, 0, 610, 130, 131, 132, 655, 656, 633, 0,
	0, 133, 134, 678, 679, 680, 0, 135, 0, 136,
	0, 0, 355, 0, 137, 666, 0, 276, 0, 138,
	139, 1299, 141, 662, 664, 357, 0, 145, 0, 142,
	0, 356, 143, 681, 144, 682, 683, 684, 685, 686,
	0, 644, 0, 358, 146, 147, 148, 359, 149, 150,
	151, 0, 153, 152, 0, 667, 360, 154, 361, 0,
	155, 0, 0, 156, 0, 157, 1300, 1297, 161, 287,
	160, 362, 162, 163, 165, 164, 605, 0, 634, 663,
	166, 687, 167, 168, 0, 169, 0, 0, 170, 0,
	0, 171, 290, 363, 172, 364, 657, 173, 174, 175,
	176, 177, 0, 178, 658, 179, 293, 180, 0, 181,
	182, 183, 184, 185, 688, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 365, 201, 202, 611, 203, 0, 207, 208,
	209, 1301, 0, 212, 296, 211, 213, 214, 651, 215,
	204, 205, 216, 366, 217, 689, 298, 218, 0, 224,
	219, 220, 206, 221, 223, 690, 222, 659, 0, 225,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 301,
	691, 692, 0, 0, 233, 234, 660, 661, 632, 235,
	236, 237, 238, 0, 0, 239, 240, 241, 242, 652,
	243, 0, 306, 244, 245, 246, 307, 693, 0, 0,
	247, 0, 0, 0, 0, 248, 249, 250, 1296, 252,
	606, 0, 0, 0, 0, 0, 604, 0, 0, 0,
	0, 602, 603, 637, 626, 627, 624, 625, 616, 0,
	612, 0, 0, 0, 0, 615, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 654, 619, 0,
	0, 0, 103, 104, 105, 254, 669, 256, 670, 106,
	671, 672, 0, 107, 260, 261, 108, 109, 622, 653,
	673, 674, 264, 0, 110, 665, 0, 645, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 354,
	118, 119, 0, 646, 647, 649, 0, 648, 650, 120,
	121, 314, 122, 675, 123, 676, 677, 0, 124, 0,
	125, 0, 126, 0, 0, 668, 128, 0, 129, 0,
	0, 0, 610, 130, 131, 132, 655, 656, 633, 0,
	0, 133, 134, 678, 679, 680, 0, 135, 0, 136,
	0, 0, 355, 0, 137, 666, 0, 276, 0, 138,
	139, 140, 141, 662, 664, 357, 0, 145, 0, 142,
	0, 356, 143, 681, 144, 682, 683, 684, 685, 686,
	0, 644, 0, 358, 146, 147, 148, 359, 149, 150,
	151, 0, 153, 152, 0, 667, 360, 154, 361, 0,
	155, 0, 0, 156, 0, 157, 158, 159, 161, 287,
	160, 362, 162, 163, 165, 164, 0, 0, 634, 663,
	166, 687, 167, 168, 0, 169, 0, 0, 170, 0,
	0, 171, 290, 363, 172, 364, 657, 173, 174, 175,
	176, 177, 0, 178, 658, 179, 293, 180, 0, 181,
	182, 183, 184, 185, 688, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 365, 201, 202, 1313, 203, 0, 207, 208,
	209, 210, 0, 212, 296, 211, 213, 214, 651, 215,
	204, 205, 216, 366, 217, 689, 298, 218, 0, 224,
	219, 220, 206, 221, 223, 690, 222, 659, 0, 225,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 301,
	691, 692, 0, 0, 233, 234, 660, 661, 632, 235,
	236, 237, 238, 0, 0, 239, 240, 241, 242, 652,
	243, 0, 306, 244, 245, 246, 307, 693, 0, 0,
	247, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	0, 0, 0, 0, 0, 0, 1311, 0, 0, 0,
	0, 1309, 1310, 637, 626, 627, 624, 625, 616, 0,
	1312, 0, 0, 0, 0, 615, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 654, 619, 0,
	0, 0, 103, 104, 105, 254, 669, 256, 670, 106,
	671, 672, 0, 107, 260, 261, 108, 109, 0, 653,
	673, 674, 264, 0, 110, 665, 0, 645, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 354,
	118, 119, 0, 646, 647, 649, 0, 648, 650, 120,
	121, 314, 122, 675, 123, 676, 677, 0, 124, 0,
	125, 0, 126, 0, 0, 668, 128, 0, 129, 0,
	0, 0, 269, 130, 131, 132, 655, 656, 633, 0,
	0, 133, 134, 678, 679, 680, 0, 135, 0, 136,
	0, 0, 355, 0, 137, 666, 0, 276, 0, 138,
	139, 140, 141, 662, 664, 357, 0, 145, 0, 142,
	0, 356, 143, 681, 144, 682, 683, 684, 685, 686,
	0, 644, 0, 358, 146, 147, 148, 359, 149, 150,
	151, 0, 153, 152, 0, 667, 360, 154, 361, 0,
	155, 0, 0, 156, 0, 157, 158, 159, 161, 287,
	160, 362, 162, 163, 165, 164, 0, 0, 634, 663,
	166, 687, 167, 168, 0, 169, 0, 0, 170, 0,
	0, 171, 290, 363, 172, 364, 657, 173, 174, 175,
	176, 177, 0, 178, 658, 179, 293, 180, 0, 181,
	182, 183, 184, 185, 688, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 365, 201, 202, 1313, 203, 0, 207, 208,
	209, 210, 0, 212, 296, 211, 213, 214, 651, 215,
	204, 205, 216, 366, 217, 689, 298, 218, 0, 224,
	219, 220, 206, 221, 223, 690, 222, 659, 0, 225,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 301,
	691, 692, 0, 0, 233, 234, 660, 661, 632, 235,
	236, 237, 238, 0, 0, 239, 240, 241, 242, 652,
	243, 0, 306, 244, 245, 246, 307, 693, 0, 0,
	247, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	0, 0, 637, 626, 627, 624, 625, 616, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 101,
	1312, 102, 0, 0, 0, 615, 654, 619, 0, 0,
	0, 103, 104, 105, 0, 669, 256, 670, 106, 671,
	672, 0, 107, 260, 261, 108, 109, 622, 653, 673,
	674, 264, 0, 110, 665, 0, 645, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 354, 118,
	2195, 0, 646, 647, 649, 0, 648, 650, 120, 121,
	314, 122, 675, 123, 676, 677, 0, 124, 0, 125,
	0, 126, 0, 0, 668, 128, 0, 129, 0, 0,
	0, 610, 130, 131, 132, 655, 656, 633, 0, 0,
	133, 134, 678, 679, 680, 0, 135, 0, 136, 0,
	0, 355, 0, 137, 666, 0, 276, 0, 138, 139,
	140, 141, 662, 664, 0, 0, 145, 0, 142, 0,
	356, 143, 681, 144, 682, 683, 684, 685, 686, 0,
	644, 0, 0, 146, 147, 148, 359, 149, 150, 151,
	0, 153, 152, 0, 667, 360, 154, 0, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	362, 162, 163, 165, 164, 605, 0, 634, 663, 166,
	687, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 363, 172, 364, 657, 173, 174, 175, 176,
	177, 0, 178, 658, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 688, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 365, 201, 202, 611, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 651, 215, 204,
	205, 216, 0, 217, 689, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 690, 222, 659, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 691,
	692, 0, 0, 233, 234, 660, 661, 632, 235, 236,
	2194, 238, 0, 0, 239, 240, 241, 242, 652, 243,
	0, 306, 244, 245, 246, 307, 693, 0, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 637,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	602, 603, 0, 0, 0, 100, 101, 0, 102, 612,
	0, 0, 0, 654, 615, 0, 0, 0, 103, 104,
	105, 254, 255, 256, 257, 106, 258, 259, 0, 107,
	260, 261, 108, 109, 0, 653, 262, 263, 264, 0,
	110, 665, 0, 645, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 354, 118, 119, 0, 646,
	647, 649, 0, 648, 650, 120, 121, 314, 122, 266,
	123, 267, 268, 0, 124, 0, 125, 0, 126, 0,
	0, 127, 128, 0, 129, 0, 0, 0, 269, 130,
	131, 132, 655, 656, 0, 0, 0, 133, 134, 272,
	273, 274, 0, 135, 0, 136, 0, 0, 355, 0,
	137, 666, 0, 276, 0, 138, 139, 140, 141, 662,
	664, 357, 0, 145, 0, 142, 0, 356, 143, 279,
	144, 280, 281, 282, 283, 284, 0, 285, 0, 358,
	146, 147, 148, 359, 149, 150, 151, 0, 153, 152,
	0, 667, 360, 154, 361, 0, 155, 0, 0, 156,
	0, 157, 158, 159, 161, 287, 160, 362, 162, 163,
	165, 164, 0, 0, 0, 663, 166, 289, 167, 168,
	0, 169, 0, 0, 170, 0, 0, 171, 290, 363,
	172, 364, 657, 173, 174, 175, 176, 177, 0, 178,
	658, 179, 293, 180, 0, 181, 182, 183, 184, 185,
	294, 186, 187, 0, 188, 189, 190, 191, 192, 194,
	195, 193, 196, 197, 198, 199, 0, 200, 365, 201,
	202, 295, 203, 0, 207, 208, 209, 210, 0, 212,
	296, 211, 213, 214, 651, 215, 204, 205, 216, 366,
	217, 297, 298, 218, 0, 224, 219, 220, 206, 221,
	223, 299, 222, 659, 0, 225, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 301, 302, 303, 0, 0,
	233, 234, 660, 661, 0, 235, 236, 237, 238, 0,
	0, 239, 240, 241, 242, 652, 243, 0, 306, 244,
	245, 246, 307, 308, 0, 0, 247, 0, 544, 0,
	0, 248, 249, 250, 251, 252, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 253, 0, 0, 0, 1691, 103, 104, 105,
	254, 255, 256, 257, 106, 258, 259, 0, 107, 260,
	261, 108, 109, 0, 0, 262, 263, 264, 0, 110,
	265, 0, 353, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 354, 118, 119, 0, 0, 0,
	0, 0, 0, 0, 120, 121, 314, 122, 266, 123,
	267, 268, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 269, 130, 131,
	132, 270, 271, 0, 0, 0, 133, 134, 272, 273,
	274, 0, 135, 0, 136, 0, 0, 355, 0, 137,
	275, 0, 276, 0, 138, 139, 140, 141, 277, 278,
	357, 0, 145, 0, 142, 0, 356, 143, 279, 144,
	280, 281, 282, 283, 284, 0, 285, 0, 358, 146,
	147, 148, 359, 149, 150, 151, 0, 153, 152, 0,
	286, 360, 154, 361, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 362, 162, 163, 165,
	164, 0, 0, 0, 288, 166, 289, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 363, 172,
	364, 291, 173, 174, 175, 176, 177, 0, 178, 292,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 294,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 365, 201, 202,
	295, 203, 0, 207, 208, 209, 210, 81, 212, 296,
	211, 213, 214, 0, 215, 204, 205, 216, 366, 217,
	297, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	299, 222, 300, 0, 225, 83, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 302, 303, 0, 0, 233,
	234, 304, 305, 0, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 0, 243, 0, 306, 244, 245,
	246, 727, 308, 0, 0, 247, 0, 0, 0, 79,
	248, 249, 250, 251, 252, 0, 80, 544, 541, 0,
	542, 537, 532, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 101, 78, 102, 0, 0, 0,
	0, 253, 0, 0, 0, 0, 103, 104, 105, 254,
	255, 256, 257, 106, 258, 259, 0, 107, 260, 261,
	108, 109, 0, 0, 262, 263, 264, 0, 110, 265,
	0, 353, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 354, 118, 119, 0, 0, 0, 0,
	0, 0, 0, 120, 121, 314, 122, 266, 123, 267,
	268, 1070, 124, 0, 125, 0, 126, 0, 0, 127,
	128, 0, 129, 0, 0, 0, 269, 130, 131, 132,
	270, 271, 534, 0, 0, 133, 134, 272, 273, 274,
	0, 135, 0, 136, 0, 0, 355, 0, 137, 275,
	0, 276, 0, 138, 139, 140, 141, 277, 278, 357,
	0, 145, 0, 142, 0, 356, 143, 279, 144, 280,
	281, 282, 283, 284, 0, 285, 0, 358, 146, 147,
	148, 359, 149, 150, 151, 0, 153, 152, 0, 286,
	360, 154, 361, 0, 155, 0, 0, 156, 0, 157,
	158, 159, 161, 287, 160, 362, 162, 163, 165, 164,
	0, 0, 0, 288, 166, 289, 167, 168, 0, 169,
	535, 0, 170, 0, 0, 171, 290, 363, 172, 364,
	291, 173, 174, 175, 176, 177, 0, 178, 292, 179,
	293, 180, 0, 181, 182, 183, 184, 185, 294, 186,
	187, 0, 188, 189, 190, 191, 192, 194, 195, 193,
	196, 197, 198, 199, 0, 200, 365, 201, 202, 295,
	203, 0, 207, 208, 209, 210, 0, 212, 296, 211,
	213, 214, 0, 215, 204, 205, 216, 366, 217, 297,
	298, 218, 0, 224, 219, 220, 206, 221, 223, 299,
	222, 300, 0, 225, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 301, 302, 303, 0, 0, 233, 234,
	304, 305, 533, 235, 236, 237, 238, 0, 0, 239,
	240, 241, 242, 0, 243, 0, 306, 244, 245, 246,
	307, 308, 0, 0, 247, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 544, 541, 0, 542, 537, 532,
	0, 0, 0, 0, 0, 543, 538, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 0, 253, 0,
	0, 0, 0, 103, 104, 105, 254, 255, 256, 257,
	106, 258, 259, 0, 107, 260, 261, 108, 109, 0,
	0, 262, 263, 264, 0, 110, 265, 0, 353, 0,
	111, 112, 113, 0, 114, 0, 115, 116, 117, 0,
	354, 118, 119, 0, 0, 0, 0, 0, 0, 0,
	120, 121, 314, 122, 266, 123, 267, 268, 1067, 124,
	0, 125, 0, 126, 0, 0, 127, 128, 0, 129,
	0, 0, 0, 269, 130, 131, 132, 270, 271, 534,
	0, 0, 133, 134, 272, 273, 274, 0, 135, 0,
	136, 0, 0, 355, 0, 137, 275, 0, 276, 0,
	138, 139, 140, 141, 277, 278, 357, 0, 145, 0,
	142, 0, 356, 143, 279, 144, 280, 281, 282, 283,
	284, 0, 285, 0, 358, 146, 147, 148, 359, 149,
	150, 151, 0, 153, 152, 0, 286, 360, 154, 361,
	0, 155, 0, 0, 156, 0, 157, 158, 159, 161,
	287, 160, 362, 162, 163, 165, 164, 0, 0, 0,
	288, 166, 289, 167, 168, 0, 169, 535, 0, 170,
	0, 0, 171, 290, 363, 172, 364, 291, 173, 174,
	175, 176, 177, 0, 178, 292, 179, 293, 180, 0,
	181, 182, 183, 184, 185, 294, 186, 187, 0, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 0, 200, 365, 201, 202, 295, 203, 0, 207,
	208, 209, 210, 0, 212, 296, 211, 213, 214, 0,
	215, 204, 205, 216, 366, 217, 297, 298, 218, 0,
	224, 219, 220, 206, 221, 223, 299, 222, 300, 0,
	225, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	301, 302, 303, 0, 0, 233, 234, 304, 305, 533,
	235, 236, 237, 238, 0, 0, 239, 240, 241, 242,
	0, 243, 0, 306, 244, 245, 246, 307, 308, 0,
	0, 247, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 544, 541, 0, 542, 537, 532, 0, 0, 0,
	0, 0, 543, 538, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 353, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 354, 118, 119,
	0, 0, 0, 0, 0, 0, 0, 120, 121, 314,
	122, 266, 123, 267, 268, 761, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	269, 130, 131, 132, 270, 271, 534, 0, 0, 133,
	134, 272, 273, 274, 0, 135, 0, 136, 0, 0,
	355, 0, 137, 275, 0, 276, 0, 138, 139, 140,
	141, 277, 278, 357, 0, 145, 0, 142, 0, 356,
	143, 279, 144, 280, 281, 282, 283, 284, 0, 285,
	0, 358, 146, 147, 148, 359, 149, 150, 151, 0,
	153, 152, 0, 286, 360, 154, 361, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 362,
	162, 163, 165, 164, 0, 0, 0, 288, 166, 289,
	167, 168, 0, 169, 535, 0, 170, 0, 0, 171,
	290, 363, 172, 364, 291, 173, 174, 175, 176, 177,
	0, 178, 292, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 294, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	365, 201, 202, 295, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 0, 215, 204, 205,
	216, 366, 217, 297, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 302, 303,
	0, 0, 233, 234, 304, 305, 533, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	306, 244, 245, 246, 307, 308, 0, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 544, 541,
	0, 542, 537, 532, 0, 0, 0, 0, 0, 543,
	538, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 253, 0, 0, 0, 0, 103, 104, 105,
	254, 255, 256, 257, 106, 258, 259, 0, 107, 260,
	261, 108, 109, 0, 0, 262, 263, 264, 0, 110,
	265, 0, 353, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 354, 118, 119, 0, 0, 0,
	0, 0, 0, 0, 120, 121, 314, 122, 266, 123,
	267, 268, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 269, 130, 131,
	132, 270, 271, 534, 0, 0, 133, 134, 272, 273,
	274, 0, 135, 0, 136, 0, 0, 355, 0, 137,
	275, 0, 276, 0, 138, 139, 140, 141, 277, 278,
	357, 0, 145, 0, 142, 0, 356, 143, 279, 144,
	280, 281, 282, 283, 284, 0, 285, 0, 358, 146,
	147, 148, 359, 149, 150, 151, 0, 153, 152, 0,
	286, 360, 154, 361, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 362, 162, 163, 165,
	164, 0, 0, 0, 288, 166, 289, 167, 168, 0,
	169, 535, 0, 170, 0, 0, 171, 290, 363, 172,
	364, 291, 173, 174, 175, 176, 177, 0, 178, 292,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 294,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 365, 201, 202,
	295, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 0, 215, 204, 205, 216, 366, 217,
	297, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	299, 222, 300, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 302, 303, 0, 0, 233,
	234, 304, 305, 533, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 0, 243, 0, 306, 244, 245,
	246, 307, 308, 0, 97, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 543, 538, 253, 0,
	0, 0, 0, 103, 104, 105, 254, 255, 256, 257,
	106, 258, 259, 0, 107, 260, 261, 108, 109, 0,
	0, 262, 263, 264, 0, 110, 265, 0, 0, 0,
	111, 112, 113, 0, 114, 0, 115, 116, 117, 0,
	0, 118, 119, 0, 0, 0, 0, 0, 0, 0,
	120, 121, 314, 122, 266, 123, 267, 268, 0, 124,
	0, 125, 0, 126, 0, 0, 127, 128, 0, 129,
	0, 0, 0, 269, 130, 131, 132, 270, 271, 0,
	0, 0, 133, 134, 272, 273, 274, 0, 135, 0,
	136, 0, 0, 0, 0, 137, 275, 0, 276, 0,
	138, 139, 140, 141, 277, 278, 0, 0, 145, 0,
	142, 0, 0, 143, 279, 144, 280, 281, 282, 283,
	284, 0, 285, 0, 0, 146, 147, 148, 0, 149,
	150, 151, 0, 153, 152, 0, 286, 0, 154, 0,
	0, 155, 0, 0, 156, 0, 157, 158, 159, 161,
	287, 160, 0, 162, 163, 165, 164, 0, 0, 0,
	288, 166, 289, 167, 168, 0, 169, 0, 578, 170,
	0, 0, 171, 290, 0, 172, 0, 291, 173, 174,
	175, 176, 177, 0, 178, 292, 179, 293, 180, 0,
	181, 182, 183, 184, 185, 294, 186, 187, 0, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 0, 200, 0, 201, 202, 295, 203, 0, 207,
	208, 209, 210, 81, 212, 296, 211, 213, 214, 0,
	215, 204, 205, 216, 0, 217, 297, 298, 218, 0,
	224, 219, 220, 206, 221, 223, 299, 222, 300, 0,
	225, 83, 226, 227, 228, 229, 230, 231, 232, 0,
	301, 302, 303, 0, 0, 233, 234, 304, 305, 0,
	235, 236, 237, 238, 0, 0, 239, 240, 241, 242,
	0, 243, 0, 306, 244, 245, 246, 727, 308, 0,
	0, 247, 0, 97, 0, 79, 248, 249, 250, 251,
	252, 0, 80, 0, 0, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 253, 0, 1434,
	0, 1439, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 0, 107, 260, 261, 108, 109, 0, 0,
	262, 263, 264, 0, 110, 265, 0, 0, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 0,
	118, 119, 0, 0, 0, 0, 0, 0, 0, 120,
	121, 314, 122, 266, 123, 267, 268, 0, 124, 0,
	125, 0, 126, 0, 0, 127, 128, 0, 129, 0,
	0, 0, 269, 130, 131, 132, 270, 271, 0, 0,
	0, 133, 134, 272, 273, 274, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 275, 0, 276, 0, 138,
	139, 140, 141, 277, 278, 0, 0, 145, 0, 142,
	0, 0, 143, 279, 144, 280, 281, 282, 283, 284,
	0, 285, 0, 0, 146, 147, 148, 0, 149, 150,
	151, 0, 153, 152, 0, 286, 0, 154, 0, 0,
	155, 0, 0, 156, 0, 157, 158, 159, 161, 287,
	160, 0, 162, 163, 165, 164, 0, 0, 0, 288,
	166, 289, 167, 168, 0, 169, 0, 0, 170, 0,
	0, 171, 290, 0, 172, 0, 291, 173, 174, 175,
	176, 177, 0, 178, 292, 179, 293, 180, 0, 181,
	182, 183, 184, 185, 294, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 0, 201, 202, 295, 203, 0, 207, 208,
	209, 210, 81, 212, 296, 211, 213, 214, 0, 215,
	204, 205, 216, 0, 217, 297, 298, 218, 0, 224,
	219, 220, 206, 221, 223, 299, 222, 300, 0, 225,
	83, 226, 227, 228, 229, 230, 231, 232, 0, 301,
	302, 303, 0, 0, 233, 234, 304, 305, 0, 235,
	236, 237, 238, 0, 0, 239, 240, 241, 242, 0,
	243, 0, 306, 244, 245, 246, 727, 308, 0, 0,
	247, 0, 97, 0, 79, 248, 249, 250, 251, 252,
	0, 80, 0, 0, 0, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 253, 0, 0, 0,
	78, 103, 104, 105, 254, 255, 256, 257, 106, 258,
	259, 0, 107, 260, 261, 108, 109, 0, 0, 262,
	263, 264, 0, 110, 265, 0, 0, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 0, 118,
	119, 0, 0, 0, 0, 0, 0, 0, 120, 121,
	314, 122, 266, 123, 267, 268, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 269, 130, 131, 132, 270, 271, 0, 0, 0,
	133, 134, 272, 273, 274, 0, 135, 0, 136, 0,
	0, 0, 0, 137, 275, 0, 276, 0, 138, 139,
	140, 141, 277, 278, 0, 0, 145, 0, 142, 0,
	0, 143, 279, 144, 280, 281, 282, 283, 284, 0,
	285, 0, 0, 146, 147, 148, 0, 149, 150, 151,
	0, 153, 152, 0, 286, 0, 154, 0, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	0, 162, 163, 165, 164, 0, 0, 0, 288, 166,
	289, 167, 168, 0, 169, 0, 578, 170, 0, 0,
	171, 290, 0, 172, 0, 291, 173, 174, 175, 176,
	177, 0, 178, 292, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 294, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 0, 201, 202, 295, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 0, 215, 204,
	205, 216, 0, 217, 297, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 299, 222, 300, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 302,
	303, 0, 0, 233, 234, 304, 305, 0, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 0, 243,
	0, 306, 244, 245, 246, 307, 308, 0, 0, 247,
	0, 97, 0, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 1434, 0, 1439,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 0, 120, 121, 314,
	122, 266, 123, 267, 268, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	269, 130, 131, 132, 270, 271, 0, 0, 0, 133,
	134, 272, 273, 274, 0, 135, 0, 136, 0, 0,
	0, 0, 137, 275, 0, 276, 0, 138, 139, 140,
	141, 277, 278, 0, 0, 145, 0, 142, 0, 0,
	143, 279, 144, 280, 281, 282, 283, 284, 0, 285,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 286, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 288, 166, 289,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 0, 172, 0, 291, 173, 174, 175, 176, 177,
	0, 178, 292, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 294, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 295, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 297, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 302, 303,
	0, 0, 233, 234, 304, 305, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	306, 244, 245, 246, 307, 308, 0, 0, 247, 0,
	0, 97, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 970,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 0, 120, 121, 314,
	122, 266, 123, 267, 268, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	269, 130, 131, 132, 270, 271, 0, 0, 0, 133,
	134, 272, 273, 274, 0, 135, 0, 136, 0, 0,
	0, 0, 137, 275, 0, 276, 0, 138, 139, 140,
	141, 277, 278, 0, 0, 145, 0, 142, 0, 0,
	143, 279, 144, 280, 281, 282, 283, 284, 0, 285,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 286, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 288, 166, 289,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 0, 172, 0, 291, 173, 174, 175, 176, 177,
	0, 178, 292, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 294, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 295, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 297, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 302, 303,
	0, 0, 233, 234, 304, 305, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	306, 244, 245, 246, 307, 308, 0, 0, 247, 0,
	97, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 253, 0, 0, 0, 1353, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 264,
	0, 110, 265, 0, 0, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 0, 118, 119, 0,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	277, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 0, 0, 247, 0, 97,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 253, 0, 0, 0, 1753, 103, 104,
	105, 254, 255, 256, 257, 106, 258, 259, 0, 107,
	260, 261, 108, 109, 0, 0, 262, 263, 264, 0,
	110, 265, 0, 0, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 0, 118, 119, 0, 0,
	0, 0, 0, 0, 0, 120, 121, 314, 122, 266,
	123, 267, 268, 0, 124, 0, 125, 0, 126, 0,
	0, 127, 128, 0, 129, 0, 0, 0, 269, 130,
	131, 132, 270, 271, 0, 0, 0, 133, 134, 272,
	273, 274, 0, 135, 0, 136, 0, 0, 0, 0,
	137, 275, 0, 276, 0, 138, 139, 140, 141, 277,
	278, 0, 0, 145, 0, 142, 0, 0, 143, 279,
	144, 280, 281, 282, 283, 284, 0, 285, 0, 0,
	146, 147, 148, 0, 149, 150, 151, 0, 153, 152,
	0, 286, 0, 154, 0, 0, 155, 0, 0, 156,
	0, 157, 158, 159, 161, 287, 160, 0, 162, 163,
	165, 164, 0, 0, 0, 288, 166, 289, 167, 168,
	0, 169, 0, 0, 170, 0, 0, 171, 290, 0,
	172, 0, 291, 173, 174, 175, 176, 177, 0, 178,
	292, 179, 293, 180, 0, 181, 182, 183, 184, 185,
	294, 186, 187, 0, 188, 189, 190, 191, 192, 194,
	195, 193, 196, 197, 198, 199, 0, 200, 0, 201,
	202, 295, 203, 0, 207, 208, 209, 210, 0, 212,
	296, 211, 213, 214, 0, 215, 204, 205, 216, 0,
	217, 297, 298, 218, 0, 224, 219, 220, 206, 221,
	223, 299, 222, 300, 0, 225, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 301, 302, 303, 0, 0,
	233, 234, 304, 305, 0, 235, 236, 237, 238, 0,
	0, 239, 240, 241, 242, 0, 243, 0, 306, 244,
	245, 246, 307, 308, 0, 0, 247, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 637, 626, 627, 624,
	625, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 101, 0, 102, 839, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 669,
	256, 670, 106, 671, 672, 0, 107, 260, 261, 108,
	109, 0, 0, 673, 674, 264, 0, 110, 265, 0,
	353, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 354, 118, 119, 0, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 675, 123, 676, 677,
	0, 124, 0, 125, 0, 126, 0, 0, 668, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 633, 0, 0, 133, 134, 678, 679, 680, 0,
	135, 0, 136, 0, 0, 355, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 277, 278, 357, 0,
	145, 0, 142, 0, 356, 143, 681, 144, 682, 683,
	684, 685, 686, 0, 644, 0, 358, 146, 147, 148,
	359, 149, 150, 151, 0, 153, 152, 0, 286, 360,
	154, 361, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 362, 162, 163, 165, 164, 0,
	0, 634, 288, 166, 687, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 363, 172, 364, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 688, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 365, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 366, 217, 689, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 690, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 691, 692, 0, 0, 233, 234, 304,
	305, 632, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	693, 544, 541, 247, 0, 0, 768, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 353, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 354, 118, 119,
	0, 0, 0, 0, 0, 0, 0, 120, 121, 314,
	122, 266, 123, 267, 268, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	269, 130, 131, 132, 270, 271, 0, 0, 0, 133,
	134, 272, 273, 274, 0, 135, 0, 136, 0, 0,
	355, 0, 137, 275, 0, 276, 0, 138, 139, 140,
	141, 277, 278, 357, 0, 145, 0, 142, 0, 356,
	143, 279, 144, 280, 281, 282, 283, 284, 0, 285,
	0, 358, 146, 147, 148, 359, 149, 150, 151, 0,
	153, 152, 0, 286, 360, 154, 361, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 362,
	162, 163, 165, 164, 0, 0, 0, 288, 166, 289,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 363, 172, 364, 291, 173, 174, 175, 176, 177,
	0, 178, 292, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 294, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	365, 201, 202, 295, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 0, 215, 204, 205,
	216, 366, 217, 297, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 302, 303,
	0, 0, 233, 234, 304, 305, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	306, 244, 245, 246, 307, 308, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 0, 120, 121, 93, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 277, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 92, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 544, 541, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 96, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 353, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 354, 118, 119,
	0, 0, 0, 0, 0, 0, 0, 120, 121, 314,
	122, 266, 123, 267, 268, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	269, 130, 131, 132, 270, 271, 0, 0, 0, 133,
	134, 272, 273, 274, 0, 135, 0, 136, 0, 0,
	355, 0, 137, 275, 0, 276, 0, 138, 139, 140,
	141, 277, 278, 357, 0, 145, 0, 142, 0, 356,
	143, 279, 144, 280, 281, 282, 283, 284, 0, 285,
	0, 358, 146, 147, 148, 359, 149, 150, 151, 0,
	153, 152, 0, 286, 360, 154, 361, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 362,
	162, 163, 165, 164, 0, 0, 0, 288, 166, 289,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 363, 172, 364, 291, 173, 174, 175, 176, 177,
	0, 178, 292, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 294, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	365, 201, 202, 295, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 0, 215, 204, 205,
	216, 366, 217, 297, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 302, 303,
	0, 0, 233, 234, 304, 305, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	306, 244, 245, 246, 307, 308, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 277, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 544, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 96, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 353, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 354, 118, 119,
	0, 0, 0, 0, 0, 0, 0, 120, 121, 314,
	122, 266, 123, 267, 268, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	269, 130, 131, 132, 270, 271, 0, 0, 0, 133,
	134, 272, 273, 274, 0, 135, 0, 136, 0, 0,
	355, 0, 137, 275, 0, 276, 0, 138, 139, 140,
	141, 277, 278, 357, 0, 145, 0, 142, 0, 356,
	143, 279, 144, 280, 281, 282, 283, 284, 0, 285,
	0, 358, 146, 147, 148, 359, 149, 150, 151, 0,
	153, 152, 0, 286, 360, 154, 361, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 362,
	162, 163, 165, 164, 0, 0, 0, 288, 166, 289,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 363, 172, 364, 291, 173, 174, 175, 176, 177,
	0, 178, 292, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 294, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	365, 201, 202, 295, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 0, 215, 204, 205,
	216, 366, 217, 297, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 302, 303,
	0, 0, 233, 234, 304, 305, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	306, 244, 245, 246, 307, 308, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 1162, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 1160, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 1404, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 1165, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 277, 278, 0, 0,
	145, 1402, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 1164, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 1403, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 1162, 110, 265, 0, 0, 1157, 111, 112, 113,
	0, 114, 1160, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 0, 120, 121, 314,
	122, 266, 123, 267, 268, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	269, 130, 131, 132, 270, 271, 0, 0, 0, 133,
	134, 272, 273, 274, 0, 135, 0, 136, 1165, 0,
	0, 0, 137, 275, 0, 276, 0, 138, 139, 140,
	141, 1156, 278, 0, 0, 145, 0, 142, 0, 0,
	143, 279, 144, 280, 281, 282, 283, 284, 0, 285,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 286, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 288, 166, 289,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 0, 172, 0, 291, 173, 174, 175, 176, 177,
	0, 178, 292, 179, 293, 180, 1164, 181, 182, 183,
	184, 185, 294, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 295, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 297, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 302, 303,
	0, 0, 233, 234, 304, 305, 0, 235, 236, 237,
	238, 0, 1163, 239, 240, 241, 242, 0, 243, 0,
	306, 244, 245, 246, 307, 308, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 1863, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 277, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 0, 120, 121, 314,
	122, 266, 123, 267, 268, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	269, 130, 131, 132, 270, 271, 0, 0, 0, 133,
	134, 272, 273, 274, 0, 135, 0, 136, 0, 0,
	0, 0, 137, 275, 0, 276, 0, 138, 139, 140,
	141, 277, 278, 0, 0, 145, 0, 142, 0, 0,
	143, 279, 144, 280, 281, 282, 283, 284, 0, 285,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 286, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 288, 166, 289,
	167, 168, 0, 169, 0, 578, 170, 0, 0, 171,
	290, 0, 172, 0, 291, 173, 174, 175, 176, 177,
	0, 178, 292, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 294, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 295, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 297, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 302, 303,
	0, 0, 233, 234, 304, 305, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	306, 244, 245, 246, 307, 308, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 1085, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 277, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 0, 120, 121, 314,
	122, 266, 123, 267, 268, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	269, 130, 131, 132, 270, 271, 0, 0, 0, 133,
	134, 272, 273, 274, 0, 135, 0, 136, 0, 0,
	0, 0, 137, 275, 0, 276, 0, 138, 139, 140,
	141, 996, 278, 0, 0, 145, 0, 142, 0, 0,
	143, 279, 144, 280, 281, 282, 283, 284, 0, 285,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 286, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 288, 166, 289,
	167, 168, 0, 169, 0, 578, 170, 0, 0, 171,
	290, 0, 172, 0, 291, 173, 174, 175, 176, 177,
	0, 178, 292, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 294, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 295, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 297, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 302, 303,
	0, 0, 233, 234, 304, 305, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	306, 244, 245, 246, 307, 308, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 735, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 277, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 0, 120, 121, 314,
	122, 266, 123, 267, 268, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	269, 130, 131, 132, 270, 271, 0, 0, 0, 133,
	134, 272, 273, 274, 0, 135, 0, 136, 0, 0,
	0, 0, 137, 275, 0, 276, 0, 138, 139, 140,
	141, 590, 278, 0, 0, 145, 0, 142, 0, 0,
	143, 279, 144, 280, 281, 282, 283, 284, 0, 285,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 286, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 288, 166, 289,
	167, 168, 0, 169, 0, 578, 170, 0, 0, 171,
	290, 0, 172, 0, 291, 173, 174, 175, 176, 177,
	0, 178, 292, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 294, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 295, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 297, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 302, 303,
	0, 0, 233, 234, 304, 305, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	306, 244, 245, 246, 307, 308, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 583, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	578, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 453,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 0, 120, 121, 314,
	122, 266, 123, 267, 268, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	269, 130, 131, 132, 270, 271, 0, 0, 0, 133,
	134, 272, 273, 274, 0, 135, 0, 136, 0, 0,
	0, 0, 137, 275, 0, 276, 0, 138, 139, 140,
	141, 277, 278, 0, 0, 145, 0, 142, 0, 0,
	143, 279, 144, 280, 281, 282, 283, 284, 0, 285,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 286, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 288, 166, 289,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 0, 172, 0, 291, 173, 174, 175, 176, 177,
	0, 178, 292, 179, 293, 452, 0, 181, 182, 183,
	184, 185, 294, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 295, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 297, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 302, 303,
	0, 0, 233, 234, 304, 305, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	306, 244, 245, 246, 307, 308, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 277, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 0, 120, 121, 314,
	122, 266, 123, 267, 268, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	269, 130, 131, 132, 270, 271, 0, 0, 0, 133,
	134, 272, 273, 274, 0, 135, 0, 136, 0, 0,
	0, 0, 137, 275, 0, 276, 0, 138, 139, 140,
	141, 1463, 278, 0, 0, 145, 0, 142, 0, 0,
	143, 279, 144, 280, 281, 282, 283, 284, 0, 285,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 286, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 288, 166, 289,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 0, 172, 0, 291, 173, 174, 175, 176, 177,
	0, 178, 292, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 294, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 295, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 297, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 302, 303,
	0, 0, 233, 234, 304, 305, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	306, 244, 245, 246, 307, 308, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 1461, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 0, 120, 121, 314,
	122, 266, 123, 267, 268, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	269, 130, 131, 132, 270, 271, 0, 0, 0, 133,
	134, 272, 273, 274, 0, 135, 0, 136, 0, 0,
	0, 0, 137, 275, 0, 276, 0, 138, 139, 140,
	141, 1450, 278, 0, 0, 145, 0, 142, 0, 0,
	143, 279, 144, 280, 281, 282, 283, 284, 0, 285,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 286, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 288, 166, 289,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 0, 172, 0, 291, 173, 174, 175, 176, 177,
	0, 178, 292, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 294, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 295, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 297, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 302, 303,
	0, 0, 233, 234, 304, 305, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	306, 244, 245, 246, 307, 308, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 1115, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 0, 120, 121, 314,
	122, 266, 123, 267, 268, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	269, 130, 131, 132, 270, 271, 0, 0, 0, 133,
	134, 272, 273, 274, 0, 135, 0, 136, 0, 0,
	0, 0, 137, 275, 0, 276, 0, 138, 139, 140,
	141, 277, 278, 0, 0, 145, 0, 142, 0, 0,
	143, 279, 144, 280, 281, 282, 283, 284, 0, 285,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 286, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 288, 166, 289,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 0, 172, 0, 291, 173, 174, 175, 176, 177,
	0, 178, 292, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 294, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 295, 203, 0, 469, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 297, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 302, 303,
	0, 0, 233, 234, 304, 305, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	306, 244, 245, 246, 307, 308, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 980, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 277, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 0, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 0, 120, 121, 314,
	122, 266, 123, 267, 268, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	269, 130, 131, 132, 270, 271, 0, 0, 0, 133,
	134, 272, 273, 274, 0, 135, 0, 136, 0, 0,
	0, 0, 137, 275, 0, 276, 0, 138, 139, 140,
	141, 810, 278, 0, 0, 145, 0, 142, 0, 0,
	143, 279, 144, 280, 281, 282, 283, 284, 0, 285,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 286, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 288, 166, 289,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 0, 172, 0, 291, 173, 174, 175, 176, 177,
	0, 178, 292, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 294, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 295, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 297, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 302, 303,
	0, 0, 233, 234, 304, 305, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	306, 244, 245, 246, 307, 308, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 805, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	743, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 0, 120, 121, 314,
	122, 266, 123, 267, 268, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	269, 130, 131, 132, 270, 271, 0, 0, 0, 133,
	134, 272, 273, 274, 0, 135, 0, 136, 0, 0,
	0, 0, 137, 275, 0, 276, 0, 138, 139, 140,
	141, 277, 278, 0, 0, 145, 0, 142, 0, 0,
	143, 279, 144, 280, 281, 282, 283, 284, 0, 285,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 286, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 483, 0,
	162, 163, 165, 164, 0, 0, 0, 288, 166, 289,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 0, 172, 0, 291, 173, 174, 175, 176, 177,
	0, 178, 292, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 294, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 295, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 297, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 480, 302, 303,
	0, 0, 233, 476, 304, 305, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	306, 244, 245, 246, 307, 308, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 277, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 483, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 480, 302, 303, 0, 0, 233, 476, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 0, 120, 121, 314,
	122, 266, 123, 267, 268, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	269, 130, 131, 132, 270, 271, 0, 0, 0, 133,
	134, 272, 273, 274, 0, 135, 0, 136, 0, 0,
	0, 0, 137, 275, 0, 276, 0, 138, 139, 140,
	141, 723, 278, 0, 0, 145, 0, 142, 0, 0,
	143, 279, 144, 280, 281, 282, 283, 284, 0, 285,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 286, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 288, 166, 289,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 0, 172, 0, 291, 173, 174, 175, 176, 177,
	0, 178, 292, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 294, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 295, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 297, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 302, 303,
	0, 0, 233, 234, 304, 305, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	306, 244, 245, 246, 307, 308, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 721, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 0, 120, 121, 314,
	122, 266, 123, 267, 268, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	269, 130, 131, 132, 270, 271, 0, 0, 0, 133,
	134, 272, 273, 274, 0, 135, 0, 136, 0, 0,
	0, 0, 137, 275, 0, 276, 0, 138, 139, 140,
	141, 718, 278, 0, 0, 145, 0, 142, 0, 0,
	143, 279, 144, 280, 281, 282, 283, 284, 0, 285,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 286, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 288, 166, 289,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 0, 172, 0, 291, 173, 174, 175, 176, 177,
	0, 178, 292, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 294, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 295, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 297, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 302, 303,
	0, 0, 233, 234, 304, 305, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	306, 244, 245, 246, 307, 308, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 715, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 0, 120, 121, 314,
	122, 266, 123, 267, 268, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	269, 130, 131, 132, 270, 271, 0, 0, 0, 133,
	134, 272, 273, 274, 0, 135, 0, 136, 0, 0,
	0, 0, 137, 275, 0, 276, 0, 138, 139, 140,
	141, 713, 278, 0, 0, 145, 0, 142, 0, 0,
	143, 279, 144, 280, 281, 282, 283, 284, 0, 285,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 286, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 288, 166, 289,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 0, 172, 0, 291, 173, 174, 175, 176, 177,
	0, 178, 292, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 294, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 295, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 297, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 302, 303,
	0, 0, 233, 234, 304, 305, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	306, 244, 245, 246, 307, 308, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 586, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 0, 120, 121, 314,
	122, 266, 123, 267, 268, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	269, 130, 131, 132, 270, 271, 0, 0, 0, 133,
	134, 272, 273, 274, 0, 135, 0, 136, 0, 0,
	0, 0, 137, 275, 0, 276, 0, 138, 139, 140,
	141, 277, 278, 0, 0, 145, 0, 142, 0, 0,
	143, 279, 144, 280, 281, 282, 283, 284, 0, 285,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 286, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 288, 166, 289,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 0, 172, 0, 291, 173, 174, 175, 176, 177,
	0, 178, 292, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 294, 567, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 295, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 297, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 302, 303,
	0, 0, 233, 234, 304, 305, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	306, 244, 245, 246, 307, 308, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 474, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 277, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 472, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 483, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 475, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 473,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 480, 302, 303, 0, 0, 233, 476, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 0, 120, 121, 314,
	122, 266, 123, 267, 268, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	269, 130, 131, 132, 270, 271, 0, 0, 0, 133,
	134, 272, 273, 274, 0, 135, 0, 136, 0, 0,
	0, 0, 137, 275, 0, 276, 0, 138, 139, 140,
	141, 277, 278, 0, 0, 145, 0, 142, 0, 0,
	143, 279, 144, 280, 281, 282, 283, 284, 0, 285,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 286, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 288, 166, 289,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 0, 172, 0, 291, 173, 174, 0, 176, 177,
	0, 178, 292, 179, 293, 180, 0, 181, 182, 183,
	0, 185, 294, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 295, 0, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 297, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 302, 303,
	0, 0, 233, 234, 304, 305, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	306, 244, 245, 246, 307, 308, 0, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 871, 872,
	0, 891, 892, 893, 901, 902, 903, 0, 0, 0,
	0, 0, 0, 0, 894, 0, 0, 0, 0, 0,
	0, 874, 0, 0, 905, 0, 871, 872, 0, 891,
	892, 893, 901, 902, 903, 0, 0, 0, 0, 0,
	0, 0, 894, 0, 0, 873, 0, 0, 0, 874,
	0, 888, 905, 0, 871, 872, 0, 891, 892, 893,
	901, 902, 903, 0, 0, 0, 0, 0, 0, 0,
	894, 0, 0, 873, 0, 0, 0, 874, 0, 888,
	905, 0, 0, 871, 872, 0, 891, 892, 893, 901,
	902, 903, 0, 0, 0, 0, 0, 0, 0, 894,
	0, 873, 0, 0, 0, 879, 874, 888, 0, 905,
	0, 871, 872, 0, 891, 892, 893, 901, 902, 903,
	0, 0, 0, 0, 898, 906, 0, 894, 0, 0,
	873, 0, 0, 879, 874, 0, 888, 905, 0, 0,
	0, 0, 904, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 898, 906, 0, 0, 0, 896, 873, 0,
	0, 879, 0, 889, 888, 0, 0, 0, 0, 0,
	904, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	898, 906, 0, 0, 0, 896, 0, 0, 895, 0,
	879, 889, 0, 0, 0, 0, 0, 0, 904, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 898,
	906, 0, 0, 896, 0, 0, 895, 0, 879, 889,
	0, 0, 0, 0, 0, 0, 0, 904, 0, 0,
	0, 0, 0, 0, 0, 0, 890, 898, 906, 0,
	0, 0, 896, 0, 895, 0, 0, 0, 889, 0,
	0, 0, 899, 0, 0, 904, 0, 0, 0, 0,
	0, 0, 0, 0, 890, 0, 0, 0, 0, 0,
	896, 0, 0, 895, 0, 0, 889, 0, 0, 0,
	899, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 0, 0,
	0, 895, 0, 0, 0, 0, 0, 0, 899, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 897,
	0, 890, 885, 886, 887, 900, 0, 884, 882, 883,
	875, 876, 877, 878, 880, 881, 0, 899, 0, 0,
	0, 0, 0, 1536, 0, 0, 0, 897, 0, 890,
	885, 886, 887, 900, 0, 884, 882, 883, 875, 876,
	877, 878, 880, 881, 0, 899, 0, 0, 2140, 0,
	0, 0, 0, 0, 0, 897, 0, 0, 885, 886,
	887, 900, 0, 884, 882, 883, 875, 876, 877, 878,
	880, 881, 0, 0, 0, 0, 2115, 0, 0, 0,
	0, 0, 0, 0, 897, 0, 0, 885, 886, 887,
	900, 0, 884, 882, 883, 875, 876, 877, 878, 880,
	881, 0, 0, 0, 0, 2049, 0, 0, 0, 0,
	0, 0, 897, 0, 0, 885, 886, 887, 900, 0,
	884, 882, 883, 875, 876, 877, 878, 880, 881, 0,
	0, 871, 872, 2044, 891, 892, 893, 901, 902, 903,
	0, 0, 0, 0, 0, 0, 0, 894, 0, 0,
	0, 0, 0, 0, 874, 0, 0, 905, 0, 871,
	872, 0, 891, 892, 893, 901, 902, 903, 0, 0,
	0, 0, 0, 0, 0, 894, 0, 0, 873, 0,
	0, 0, 874, 0, 888, 905, 0, 871, 872, 0,
	891, 892, 893, 901, 902, 903, 0, 0, 0, 0,
	0, 0, 0, 894, 0, 0, 873, 0, 0, 0,
	874, 0, 888, 905, 0, 0, 871, 872, 0, 891,
	892, 893, 901, 902, 903, 0, 0, 0, 0, 0,
	0, 0, 894, 0, 873, 0, 0, 0, 879, 874,
	888, 0, 905, 0, 871, 872, 0, 891, 892, 893,
	901, 902, 903, 0, 0, 0, 0, 898, 906, 0,
	894, 0, 0, 873, 0, 0, 879, 874, 0, 888,
	905, 0, 0, 0, 0, 904, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 898, 906, 0, 0, 0,
	896, 873, 0, 0, 879, 0, 889, 888, 0, 0,
	0, 0, 0, 904, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 898, 906, 0, 0, 0, 896, 0,
	0, 895, 0, 879, 889, 0, 0, 0, 0, 0,
	0, 904, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 898, 906, 0, 0, 896, 0, 0, 895,
	0, 879, 889, 0, 0, 0, 0, 0, 0, 0,
	904, 0, 0, 0, 0, 0, 0, 0, 0, 890,
	898, 906, 0, 0, 0, 896, 0, 895, 0, 0,
	0, 889, 0, 0, 0, 899, 0, 0, 904, 0,
	0, 0, 0, 0, 0, 0, 0, 890, 0, 0,
	0, 0, 0, 896, 0, 0, 895, 0, 0, 889,
	0, 0, 0, 899, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 895, 0, 0, 0, 0, 0,
	0, 899, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 897, 0, 890, 885, 886, 887, 900, 0,
	884, 882, 883, 875, 876, 877, 878, 880, 881, 0,
	899, 0, 0, 2040, 0, 0, 0, 0, 0, 0,
	897, 0, 890, 885, 886, 887, 900, 0, 884, 882,
	883, 875, 876, 877, 878, 880, 881, 0, 899, 0,
	0, 2017, 0, 0, 0, 0, 0, 0, 897, 0,
	0, 885, 886, 887, 900, 0, 884, 882, 883, 875,
	876, 877, 878, 880, 881, 0, 0, 0, 0, 1947,
	0, 0, 0, 0, 0, 0, 0, 897, 0, 0,
	885, 886, 887, 900, 0, 884, 882, 883, 875, 876,
	877, 878, 880, 881, 0, 0, 0, 0, 1946, 0,
	0, 0, 0, 0, 0, 897, 0, 0, 885, 886,
	887, 900, 0, 884, 882, 883, 875, 876, 877, 878,
	880, 881, 0, 0, 871, 872, 1885, 891, 892, 893,
	901, 902, 903, 0, 0, 0, 0, 0, 0, 0,
	894, 0, 0, 0, 0, 0, 0, 874, 0, 0,
	905, 0, 871, 872, 0, 891, 892, 893, 901, 902,
	903, 0, 0, 0, 0, 0, 0, 0, 894, 0,
	0, 873, 0, 0, 0, 874, 0, 888, 905, 0,
	871, 872, 0, 891, 892, 893, 901, 902, 903, 0,
	0, 0, 0, 0, 0, 0, 894, 0, 0, 873,
	0, 0, 0, 874, 0, 888, 905, 0, 0, 871,
	872, 0, 891, 892, 893, 901, 902, 903, 0, 0,
	0, 0, 0, 0, 0, 894, 0, 873, 0, 0,
	0, 879, 874, 888, 0, 905, 0, 871, 872, 0,
	891, 892, 893, 901, 902, 903, 0, 0, 0, 0,
	898, 906, 0, 894, 0, 0, 873, 0, 0, 879,
	874, 0, 888, 905, 0, 0, 0, 0, 904, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 898, 906,
	0, 0, 0, 896, 873, 0, 0, 879, 0, 889,
	888, 0, 0, 0, 0, 0, 904, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 898, 906, 0, 0,
	0, 896, 0, 0, 895, 0, 879, 889, 0, 0,
	0, 0, 0, 0, 904, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 898, 906, 0, 0, 896,
	0, 0, 895, 0, 879, 889, 0, 0, 0, 0,
	0, 0, 0, 904, 0, 0, 0, 0, 0, 0,
	0, 0, 890, 898, 906, 0, 0, 0, 896, 0,
	895, 0, 0, 0, 889, 0, 0, 0, 899, 0,
	0, 904, 0, 0, 0, 0, 0, 0, 0, 0,
	890, 0, 0, 0, 0, 0, 896, 0, 0, 895,
	0, 0, 889, 0, 0, 0, 899, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 895, 0, 0,
	0, 0, 0, 0, 899, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 897, 0, 890, 885, 886,
	887, 900, 0, 884, 882, 883, 875, 876, 877, 878,
	880, 881, 0, 899, 0, 0, 1836, 0, 0, 0,
	0, 0, 0, 897, 0, 890, 885, 886, 887, 900,
	0, 884, 882, 883, 875, 876, 877, 878, 880, 881,
	0, 899, 0, 0, 1756, 0, 0, 0, 0, 0,
	0, 897, 0, 0, 885, 886, 887, 900, 0, 884,
	882, 883, 875, 876, 877, 878, 880, 881, 0, 0,
	0, 0, 1732, 0, 0, 0, 0, 0, 0, 0,
	897, 0, 0, 885, 886, 887, 900, 0, 884, 882,
	883, 875, 876, 877, 878, 880, 881, 0, 0, 0,
	0, 1259, 0, 0, 0, 0, 0, 0, 897, 0,
	0, 885, 886, 887, 900, 0, 884, 882, 883, 875,
	876, 877, 878, 880, 881, 871, 872, 1506, 891, 892,
	893, 901, 902, 903, 0, 0, 0, 0, 0, 0,
	0, 894, 0, 0, 0, 0, 0, 0, 874, 0,
	0, 905, 0, 871, 872, 0, 891, 892, 893, 901,
	902, 903, 0, 0, 0, 0, 0, 0, 0, 894,
	0, 0, 873, 0, 0, 0, 874, 0, 888, 905,
	0, 871, 872, 0, 891, 892, 893, 901, 902, 903,
	0, 0, 0, 0, 0, 0, 0, 894, 0, 0,
	873, 0, 1424, 0, 874, 0, 888, 905, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 879, 2217, 888, 0, 0, 0, 1544, 1545,
	0, 1562, 1563, 1564, 0, 0, 0, 0, 0, 0,
	0, 898, 906, 0, 0, 0, 0, 0, 0, 0,
	879, 0, 1576, 1425, 0, 1575, 0, 0, 0, 904,
	0, 1544, 1545, 0, 1562, 1563, 1564, 0, 0, 898,
	906, 0, 0, 0, 896, 0, 0, 0, 879, 0,
	889, 1559, 0, 0, 0, 0, 0, 904, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 898, 906, 0,
	0, 0, 896, 0, 0, 895, 0, 0, 889, 0,
	0, 0, 0, 0, 1559, 904, 0, 0, 0, 0,
	0, 2216, 0, 0, 0, 0, 0, 0, 0, 0,
	896, 0, 0, 895, 0, 1550, 889, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 890, 0, 0, 0, 0, 0, 0,
	0, 895, 0, 0, 0, 0, 0, 0, 1550, 899,
	0, 0, 1565, 0, 0, 0, 0, 0, 1145, 0,
	0, 890, 0, 0, 871, 872, 0, 891, 892, 893,
	901, 902, 903, 1560, 0, 0, 0, 899, 0, 0,
	894, 0, 0, 0, 1144, 0, 0, 874, 0, 890,
	905, 0, 871, 872, 0, 891, 892, 893, 901, 902,
	903, 0, 0, 0, 0, 899, 1560, 0, 894, 0,
	0, 873, 0, 0, 0, 874, 897, 888, 905, 885,
	886, 887, 900, 0, 884, 882, 883, 875, 876, 877,
	878, 880, 881, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 897, 888, 1561, 885, 886, 887,
	900, 0, 884, 882, 883, 875, 876, 877, 878, 880,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 879, 897, 0, 0, 885, 886, 887, 900, 1561,
	884, 882, 883, 875, 876, 877, 878, 880, 881, 0,
	898, 906, 0, 0, 0, 0, 0, 0, 0, 879,
	0, 0, 0, 0, 0, 0, 0, 0, 904, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 898, 906,
	0, 0, 0, 896, 0, 0, 0, 0, 0, 889,
	0, 0, 1556, 1557, 1558, 0, 904, 1555, 1553, 1554,
	1546, 1547, 1548, 1549, 1551, 1552, 0, 0, 0, 0,
	0, 896, 0, 0, 895, 0, 0, 889, 0, 0,
	0, 0, 0, 0, 0, 1556, 1557, 1558, 0, 0,
	1555, 1553, 1554, 1546, 1547, 1548, 1549, 1551, 1552, 0,
	0, 0, 895, 562, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 890, 0, 0, 871, 872, 0, 891, 892,
	893, 901, 902, 903, 0, 0, 0, 0, 899, 0,
	0, 894, 0, 0, 0, 0, 0, 0, 874, 0,
	890, 905, 0, 871, 872, 0, 891, 892, 893, 901,
	902, 903, 0, 0, 0, 0, 899, 0, 0, 894,
	0, 0, 873, 0, 0, 0, 874, 0, 888, 905,
	0, 871, 872, 0, 891, 892, 893, 901, 902, 903,
	0, 0, 0, 0, 0, 0, 0, 894, 0, 0,
	873, 1577, 0, 0, 874, 897, 888, 905, 885, 886,
	887, 900, 0, 884, 882, 883, 875, 876, 877, 878,
	880, 881, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 879, 897, 888, 0, 885, 886, 887, 900,
	0, 884, 882, 883, 875, 876, 877, 878, 880, 881,
	0, 898, 906, 0, 0, 0, 0, 0, 0, 0,
	879, 0, 0, 0, 0, 1582, 0, 0, 0, 904,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 898,
	906, 0, 0, 0, 896, 0, 0, 0, 879, 0,
	889, 0, 0, 0, 0, 0, 0, 904, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 898, 906, 0,
	0, 0, 896, 0, 0, 895, 0, 0, 889, 0,
	0, 0, 0, 0, 0, 904, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	896, 0, 0, 895, 0, 0, 889, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 890, 0, 0, 0, 0, 0, 0,
	0, 895, 0, 0, 0, 0, 0, 0, 0, 899,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 890, 0, 0, 871, 872, 0, 891, 892, 893,
	901, 902, 903, 0, 1736, 0, 0, 899, 0, 0,
	894, 0, 0, 0, 0, 0, 0, 874, 0, 890,
	905, 0, 871, 872, 0, 891, 892, 893, 901, 902,
	903, 0, 0, 0, 0, 899, 0, 0, 894, 0,
	0, 873, 1535, 0, 0, 874, 897, 888, 905, 885,
	886, 887, 900, 0, 884, 882, 883, 875, 876, 877,
	878, 880, 881, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 897, 888, 0, 885, 886, 887,
	900, 0, 884, 882, 883, 875, 876, 877, 878, 880,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 879, 897, 0, 0, 885, 886, 887, 900, 0,
	884, 882, 883, 875, 876, 877, 878, 880, 881, 0,
	898, 906, 0, 0, 0, 0, 0, 0, 0, 879,
	0, 0, 0, 0, 0, 0, 0, 0, 904, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 898, 906,
	0, 0, 0, 896, 0, 0, 0, 0, 0, 889,
	0, 0, 0, 0, 0, 0, 904, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 896, 0, 0, 895, 0, 0, 889, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 895, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 890, 0, 0, 871, 872, 0, 891, 892,
	893, 901, 902, 903, 0, 0, 0, 0, 899, 0,
	0, 894, 0, 0, 0, 0, 0, 0, 874, 0,
	890, 905, 0, 871, 872, 0, 891, 892, 893, 901,
	902, 903, 0, 0, 0, 0, 899, 0, 0, 894,
	0, 0, 873, 0, 0, 0, 874, 0, 888, 905,
	0, 871, 872, 0, 891, 892, 893, 901, 902, 903,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 874, 897, 888, 905, 885, 886,
	887, 900, 0, 884, 882, 883, 875, 876, 877, 878,
	880, 881, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 879, 897, 888, 0, 885, 886, 887, 900,
	0, 884, 882, 883, 875, 876, 877, 878, 880, 881,
	0, 898, 906, 0, 0, 0, 0, 0, 0, 0,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 904,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 898,
	906, 0, 0, 0, 896, 0, 0, 0, 879, 0,
	889, 0, 0, 0, 0, 0, 0, 904, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 898, 906, 0,
	0, 0, 896, 0, 0, 895, 0, 0, 889, 0,
	0, 0, 0, 0, 0, 904, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	896, 0, 0, 0, 0, 0, 889, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 890, 0, 0, 0, 0, 0, 871,
	872, 0, 891, 892, 893, 901, 902, 903, 0, 899,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 890, 874, 0, 0, 905, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 899, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 871, 872, 890,
	0, 0, 888, 901, 902, 903, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 899, 0, 0, 0, 0,
	874, 0, 0, 905, 0, 0, 897, 0, 0, 885,
	886, 887, 900, 0, 884, 882, 883, 875, 876, 877,
	878, 880, 881, 0, 873, 0, 0, 0, 0, 0,
	888, 0, 0, 0, 897, 0, 879, 885, 886, 887,
	900, 0, 884, 882, 883, 875, 876, 877, 878, 880,
	881, 0, 0, 0, 0, 898, 906, 0, 0, 0,
	0, 0, 897, 0, 0, 885, 886, 887, 900, 0,
	884, 882, 883, 875, 876, 877, 878, 880, 881, 0,
	0, 0, 0, 0, 879, 0, 0, 0, 896, 0,
	0, 0, 0, 0, 889, 0, 0, 0, 0, 0,
	0, 0, 0, 898, 906, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1025,
	1015, 1044, 1007, 1035, 1034, 0, 896, 1009, 1008, 0,
	0, 0, 889, 1046, 1045, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 890, 0, 0,
	0, 0, 0, 0, 0, 0, 1040, 0, 1032, 1031,
	0, 0, 0, 899, 0, 0, 0, 0, 1030, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1029, 1027, 1028, 0,
	0, 0, 0, 0, 0, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 899, 0, 0, 0, 0, 1018, 1017, 1019, 1020,
	1021, 1022, 1023, 0, 1043, 0, 0, 0, 0, 0,
	897, 0, 0, 885, 886, 887, 900, 0, 884, 882,
	883, 875, 876, 877, 878, 880, 881, 0, 0, 0,
	0, 0, 1011, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1033, 0, 0, 0, 1016, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 897, 0,
	0, 0, 0, 0, 900, 0, 884, 882, 883, 875,
	876, 877, 878, 880, 881, 0, 0, 1026, 0, 0,
	0, 1194, 1192, 1193, 1196, 1195, 0, 0, 0, 1025,
	1015, 1044, 1007, 1035, 1034, 0, 0, 1009, 1008, 0,
	0, 0, 0, 1046, 1045, 0, 0, 1012, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1024, 1013,
	0, 0, 0, 0, 0, 0, 0, 0, 1048, 485,
	0, 0, 0, 0, 0, 0, 1040, 0, 1032, 1031,
	1010, 0, 0, 1041, 1042, 0, 0, 490, 1030, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 491,
	0, 0, 0, 0, 0, 1014, 1029, 1027, 1028, 0,
	1047, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	492, 0, 0, 0, 0, 493, 0, 0, 0, 0,
	498, 499, 0, 0, 510, 0, 1018, 1017, 1019, 1020,
	1021, 1022, 1023, 0, 1043, 0, 0, 488, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	513, 0, 1011, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1033, 0, 0, 0, 1016, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1026, 0, 0,
	0, 0, 503, 0, 0, 500, 505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 486, 1012, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1024, 1013,
	0, 0, 0, 0, 0, 0, 0, 0, 1048, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1010, 0, 0, 1041, 1042, 0, 501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1014, 0, 0, 0, 0,
	1047, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 504, 506, 487, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 507, 0, 0,
	0, 512, 0, 0, 0, 508, 0, 0, 0, 0,
	489, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 511,
}
var sqlPact = [...]int{

	185, -1000, -11, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 748, 18062, 18062, 984,
	22472, -1000, -1000, -1000, -1000, -1000, -1000, 884, 1043, 815,
	314, 5446, 22472, 22472, 22157, 1224, 1230, 1215, 1224, 24047,
	-1000, -1000, 28142, -1000, 31845, 531, 540, 531, 531, 545,
	24047, 1200, 639, 14874, 764, 212, -1000, 856, 61, 27827,
	22472, 1517, -16, 20267, 298, 185, 21842, 27512, 22472, 21527,
	614, -38, 18692, 22472, -1000, -3, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1336,
	11569, 11569, 382, -3, -1000, 1335, 1217, 1208, 20267, -1000,
	-1000, -1000, -1000, -1000, 27197, 26882, 26567, 26252, 25937, -1000,
	13564, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 805, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 377,
	374, -1000, 21212, -1000, 1050, -1000, -34, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11569, 11569, 1048, -1000, 22472,
	-1000, -1000, 25622, 25307, 685, 373, 1011, -1000, -1000, 542,
	455, -1000, -1000, 14547, 32, -1000, -1000, -1000, -1000, 1348,
	1535, 17747, 978, 1331, -1000, 1047, 1327, 1323, 1322, 1317,
	1316, -1000, 770, -1000, 693, 548, -1000, 1313, 454, 936,
	533, -1000, 1311, 1309, 1011, -1000, 1011, -1000, -1000, -1000,
	613, 24047, -1000, -1000, -1000, -1000, -1000, 20267, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1751, -1000,
	-1000, -1000, -1000, 1760, -1000, -1000, -1000, -1000, 24992, 22472,
	22472, 1244, 24677, -1000, 856, -1000, -1000, -1000, 1121, 1503,
	1503, 1503, 1557, 174, 171, 212, -47, 22472, -1000, 371,
	-47, 9868, 9868, -1000, -1000, 298, -1000, 408, 17105, -1000,
	8168, -1000, 928, 1410, 524, 943, 1407, -116, 851, 792,
	1406, 17747, 18692, -38, -63, -1000, -1000, -1000, 5119, 17747,
	31155, -1000, 11569, 11569, 11569, 11569, 11569, 941, 398, -1000,
	367, 360, 6454, -1000, -1000, 1756, -1000, -1000, -1000, 181,
	-1000, -1000, 11569, -3, -1000, -1000, -1000, -1000, 356, 1772,
	-1000, 471, -1000, -1000, -1000, 473, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1347, 353, 351, 348, -1000,
	-1000, -1000, -1000, 341, 340, 330, 329, 325, 324, 322,
	321, 320, 318, 317, 316, 315, 301, 300, 896, -1000,
	487, -1000, -1000, 487, 487, -1000, 289, 289, 290, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 289, -1000, -1000,
	-1000, 440, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 299,
	31155, 661, 16147, -3, -1000, -1000, -1000, 20267, 22472, 22472,
	708, 24362, -1000, 1404, 124, 1403, -1000, 113, 1402, -1000,
	113, 1401, -63, 1400, 62, -1000, -1000, 298, 20897, 22472,
	1613, 31772, -1000, 11569, -1000, -1000, 18062, 1258, 31155, 31155,
	18062, -1000, -1000, 1612, -1000, 22472, 11569, -43, -1000, -1000,
	-1000, -1000, 1154, 1167, 595, 14220, 13893, 1474, 1328, -1000,
	-1000, -1000, 26, 5446, 214, 674, -1000, -1000, -1000, 20582,
	-1000, -1000, 22472, 1344, 18062, 22472, 22472, 22472, 22472, 22472,
	-1000, -1000, -1000, 534, 1343, 22472, -1000, 1152, -1000, -1000,
	22472, 22472, 785, 638, -1000, -43, -1000, 24047, -1000, 125,
	-1000, -1000, -1000, -1000, 296, 1124, 472, 105, 23732, 472,
	1120, -1000, 1121, -1000, 1053, 1214, 10549, 1205, 11569, 212,
	-1000, -1000, 212, 212, 7475, -1000, -1000, 22472, -47, 1607,
	22472, 104, -1000, 30404, -1000, 104, -1000, -1000, -1000, 22472,
	50, -1000, 31155, -1000, -75, 850, -1000, 19637, 1524, 1493,
	1490, 20267, 1584, 61, 1307, 1581, 61, 1304, 610, 22472,
	5446, 608, 603, 20267, 432, -1000, 22472, -1000, -1000, -122,
	-1000, 31572, 31772, 5446, 628, 11569, 11569, 11569, 11569, 11569,
	11569, 11569, 11569, 11569, 11569, 11569, 11569, 11569, 11569, 11569,
	11569, 11569, 11569, 11569, 11569, 11569, 11569, 1148, 11569, 600,
	11569, 11569, 11569, 11569, 1285, 923, 274, 986, -1000, 1738,
	1738, 1738, 31211, 31211, 193, 398, -1000, 11569, -1000, 10209,
	171, 29769, -48, -1000, -1000, -1000, 7815, 484, 31155, -3,
	6113, -1000, 1753, 754, 1338, 1277, 293, 169, 168, 167,
	11569, 11569, 11909, 11909, 11569, 12249, 11569, 11569, 6794, 11569,
	11569, 11569, 11569, 11569, 11569, -1000, 292, -1000, -1000, -1000,
	-1000, 1748, -1000, -1000, 1746, -1000, 626, 621, 1731, -1000,
	1302, 49, -1000, -1000, 481, 118, 1599, 118, 16467, -1000,
	22472, 22472, -1000, 22472, -1000, -1000, 22472, -1000, 22472, 22472,
	-1000, 22472, 22472, 214, 19007, 957, 1398, 678, 61, 43,
	-1000, 1632, -1000, -1000, -1000, -1000, 81, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 290,
	896, 289, 289, 289, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 440, -1000, -1000, 487, 487, 487, -1000, -1000, 37,
	31155, 598, -1000, 1301, 530, -1000, 460, 35, 1011, 966,
	-1000, -1000, -1000, -1000, -1000, -1000, -49, -1000, -1000, -49,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1771,
	5446, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 22472, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 214, -1000, -1000, -1000,
	-1000, 22472, 22472, 22472, -1000, -1000, 20267, 19322, 1597, 1394,
	921, -1000, 1595, 22472, 1029, 1119, -1000, 604, 1393, -1000,
	-1000, -1000, -1000, 31155, -1000, 354, -1000, -1000, 31155, 772,
	1229, -1000, 1229, -55, -1000, 30191, 1187, 22472, -1000, 287,
	29, 481, 9868, 15828, 5446, -1000, 481, 164, 8168, -1000,
	957, 22472, 22472, 22472, -1000, -1000, 1105, 23417, 1101, 31772,
	22472, -1000, 283, 281, 1179, 1172, 22472, 22472, 23102, 22787,
	22472, 848, 61, -1000, 278, 61, -1000, 276, 22472, 790,
	-1000, 22472, 22472, 778, 1257, 1067, -1000, 475, 17747, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 453,
	1170, 1170, 706, 706, 706, 706, 1729, 313, 238, 2291,
	31447, 31447, 31447, 265, 733, 733, 31447, 31447, 31447, 31211,
	31183, 277, 11569, 11569, 597, 915, 274, 277, 11569, 277,
	277, 277, 277, -1000, 1180, -1000, -1000, -1000, -1000, 1300,
	264, 12249, 12249, -1000, -1000, -1000, 6454, 12589, -1000, -1000,
	-1000, -1000, 252, 11569, -1000, 29797, -199, 22, -1000, -1000,
	11569, -133, -145, -1000, -1000, 717, -1000, 11569, -1000, -4,
	11569, 11569, 11569, 163, 162, -1000, 596, -1000, 592, 589,
	587, -1000, 251, 937, 250, 247, 11569, -1000, -1000, -1000,
	30942, 28778, 160, 1298, -152, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 159, 157, 30914, -152, 156, 3604, -1000, 12249,
	12249, 12249, 6454, 246, 155, 30163, -152, 30701, 9528, 9528,
	9528, 154, 30673, 11569, -152, 4029, 3900, 3655, 21, 20,
	13, 1725, 7, 149, 452, 451, 147, 660, 1297, 22472,
	769, 11569, 847, -1000, 15509, 493, 22472, 769, 87, -1000,
	-1000, -1000, 426, 22472, -1000, -1000, -1000, 124, -1000, 113,
	113, -63, -1000, -1000, 20267, -1000, -1000, 31772, 396, 383,
	-1000, 1720, -1000, 11569, 22472, 22472, 1195, -1000, -1000, -1000,
	761, -1000, 876, -1000, 14874, -1000, -88, -1000, -1000, -1000,
	-1000, 432, -1000, 139, -7, -69, 31772, -1000, -1000, -1000,
	-1000, -1000, 22472, 294, 22472, 61, 22472, -1000, 1770, 61,
	22472, 1392, 1422, 423, 22472, 772, -1000, 11569, 1702, -1000,
	-1000, -1000, 7475, -1000, -1000, -1000, 22472, -179, 61, -1000,
	1266, -1000, -162, 1294, 173, -181, 152, 439, -1000, 15190,
	-1000, 1266, -1000, -1000, -1000, -1000, 580, 579, 1390, -1000,
	1093, -1000, 498, -1000, 946, 11569, 13245, 245, 243, 888,
	-1000, 1389, 1042, 1388, 1042, -1000, -75, 816, -1000, 11569,
	-1000, 11569, -1000, 577, -1000, -1000, 564, 475, 1296, 642,
	-1000, 998, -1000, 11569, 277, 277, 11569, 12249, 12249, -1000,
	277, -1000, -1000, -1000, -1000, -1000, 1292, 239, 11569, 31772,
	4063, 4046, -14, -1000, 9188, -82, -1000, 11569, -1000, 29740,
	-1000, -1000, 240, 1418, -1000, 11569, 30645, 137, 8848, -1000,
	30432, -19, -19, -1000, 1769, 1135, 1087, 820, 742, 1694,
	-1000, 16786, 482, 974, 29712, 31572, 31772, -1000, 11569, -1000,
	-1000, 1288, 11569, -1000, 31572, 31772, 12249, 12249, 12249, 12249,
	12249, 12249, 12249, 12249, 12249, 12249, 12249, 12249, 12249, 12249,
	12249, 12249, 12249, 12249, 12249, 1173, 12249, 1712, 1712, 1712,
	-87, 8508, -1000, 1341, 1288, 11569, 11569, 31772, 135, 131,
	130, -1000, 11569, -152, 11569, 11569, 11569, -1000, -1000, -1000,
	129, -1000, 1691, -1000, -1000, -1000, -1000, -1000, 653, -1000,
	-1000, 7134, 31155, -1000, 769, 1495, -20, -1000, -1000, -1000,
	481, 16467, 15828, 8168, -39, -1000, -1000, -1000, 957, -1000,
	526, 1687, 112, 31155, -88, -88, -1000, -1000, -1000, -1000,
	-1000, 22472, -1000, 1249, -1000, 19322, 236, 22472, 235, -1000,
	227, -1000, -1000, 225, 22472, 1159, 423, 18377, -1000, 472,
	1010, 29684, -1000, 1516, 5446, 111, 1263, 1556, -1000, 15828,
	1199, 1198, 15828, 1091, 955, 955, 955, -1000, 224, 392,
	439, 4451, 11569, 19952, 948, 48, 110, 1294, 1263, 22472,
	22472, 22472, 1382, -1000, 1744, -1000, 29344, -50, -1000, 182,
	1518, 11569, -1000, -1000, 223, 13245, 22472, -1000, 1212, 1213,
	523, 22472, -1000, 22472, -1000, 22472, 22472, 22472, -51, -56,
	22472, 22472, -1000, 17747, 620, 222, 1723, 277, 4001, 343,
	11569, 31772, 31399, -58, 11569, 11569, -1000, -62, -1000, 11569,
	390, 31155, -1000, -1000, -1000, 31155, 11569, 1740, 11569, 106,
	103, 97, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	95, -1000, -1000, 28457, 11569, 94, -1000, 85, 79, 31155,
	1341, 31155, -1000, -1000, 704, 704, 740, 740, 740, 740,
	1712, 213, 690, 2179, 1227, 1227, 1227, 2170, 716, 716,
	1227, 1227, 1227, 1287, 1158, 221, 30248, 11569, -71, -1000,
	-1000, -1000, 31155, 31155, 76, -1000, -1000, -1000, -152, 3389,
	29316, 29287, -1000, 64, -1000, -100, -1000, -1000, 218, 61,
	769, -1000, -104, -1000, 424, -1000, 388, 386, -1000, -1000,
	-1000, 1231, -1000, 13245, 220, 22472, 19322, 1594, 13245, 1027,
	1161, 423, 18377, -1000, 604, -1000, -1000, -1000, 1516, -1000,
	479, 11569, 11569, 1294, 15828, 15828, 873, 1194, 15828, -1000,
	-1000, -1000, -1000, 385, 342, 439, 19952, -1000, 1676, 1192,
	-83, -1000, -1000, 22472, 219, -1000, 439, 479, -1000, -1000,
	-1000, 22472, -1000, 22472, -1000, 5446, 22472, 1279, 1082, -1000,
	-1000, 1171, 215, 12249, 22472, -1000, 872, 13245, 1516, -3,
	5446, 1516, 29259, 6113, -89, -90, 1077, -1000, 1074, 11569,
	-1000, 31772, 1042, 1042, -1000, 562, 554, 552, 551, -1000,
	-1000, -110, 17432, 1768, 11569, 11569, 31399, -91, -1000, 277,
	277, -1000, 29231, -1000, 31155, -1000, 30432, -1000, -1000, -1000,
	-1000, 916, -1000, 28891, -1000, -1000, -1000, -1000, 12249, 1284,
	201, 31772, 28863, -1000, -1000, 11569, -1000, -1000, -1000, 1427,
	22472, 1483, -1000, -1000, 197, -1000, -1000, 933, -95, 13245,
	-99, 57, 61, -105, 22472, -1000, 423, 18377, -1000, 1422,
	-1000, -1000, 22472, 31155, -152, -1000, 873, -1000, 196, 11569,
	15828, -1000, -181, -1000, -111, -1000, 19952, -1000, 384, -193,
	-1000, 418, -1000, 439, 194, 22472, 19952, -1000, -1000, 968,
	-1000, -1000, 22472, 1092, -1000, -1000, 11569, 30248, 192, 1249,
	191, -1000, -1000, -1000, -1000, -1000, -1000, 1518, -4, -1000,
	865, -1000, -1000, 31155, 1507, -1000, -1000, 22472, 22472, 190,
	189, -1000, 187, -3, -117, -1000, 228, 277, 277, -1000,
	-1000, 56, 974, 1552, -1000, 30281, 12249, 31772, -124, -1000,
	28834, 630, -125, 22472, -1000, -1000, 5773, 22472, 872, -137,
	-1000, 1249, -1000, 872, 186, 18377, -1000, 1159, -121, -1000,
	1592, -1000, 22472, 31155, -1000, 439, -1000, 1671, -1000, -1000,
	1192, -1000, 4789, 19952, 22472, -148, -1000, -1000, -1000, 1370,
	28806, 1143, 22472, -1000, 22472, 1516, 55, 22472, 505, 5446,
	-1000, -1000, 11569, 11569, 11569, 1768, -1000, -1000, 1766, -1000,
	791, 11569, 30281, -153, -1000, -1000, 702, -1000, 481, -1000,
	183, 1249, 872, -1000, 1249, 13245, -1000, 1161, 22472, 176,
	-154, 19952, -1000, -1000, -1000, 1669, -1000, -161, -1000, 1358,
	-1000, 1013, 833, 44, -165, -1000, -1000, 105, -1000, 11569,
	-1000, -167, -169, -19, -1000, -1000, 39, 11229, 11229, -152,
	-1000, 16467, -1000, 22472, -1000, 1249, -1000, -176, -1000, -1000,
	-1000, -1000, -1000, 381, -1000, 22472, -1000, 1026, 1019, 734,
	-1000, -1000, -1000, -1000, -1000, 1143, 31155, -1000, -1000, 14,
	-1000, -1000, -1000, 12918, 1004, 753, 30135, -1000, -155, -185,
	-1000, 872, -1000, -1000, -1000, 1454, -1000, 513, 1023, 1023,
	1013, 1740, 1636, -1000, -1000, -1000, -1000, -1000, -1000, 972,
	1249, -1000, 1649, -1000, -1000, 1189, -1000, -1000, 10889, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2037, 2036, 1553, 1730, 2035, 2034, 2031, 1699, 2027,
	2026, 2023, 2021, 2018, 2016, 1692, 1989, 1658, 1656, 1649,
	1983, 100, 101, 1640, 1982, 1980, 1633, 1979, 1978, 1977,
	1976, 1975, 1971, 45, 1967, 1966, 1630, 1609, 1587, 1578,
	1964, 1962, 1561, 1960, 1953, 20, 1950, 85, 1949, 29,
	153, 2457, 140, 1948, 1947, 1943, 21, 114, 68, 1938,
	37, 1936, 1935, 35, 34, 26, 19, 1932, 113, 1929,
	1928, 1215, 27, 1926, 1921, 141, 1920, 24, 30, 2134,
	156, 152, 126, 124, 1917, 1916, 1915, 1914, 61, 1911,
	2, 1909, 1908, 11, 73, 59, 1906, 65, 18, 1905,
	1901, 134, 1900, 78, 111, 1523, 144, 147, 174, 1899,
	75, 8, 72, 1897, 1896, 164, 44, 1895, 50, 96,
	137, 1893, 48, 159, 58, 43, 64, 129, 1890, 1887,
	1886, 122, 1884, 123, 77, 1882, 1878, 92, 1869, 136,
	138, 1868, 1867, 103, 1866, 128, 1865, 1863, 148, 163,
	1862, 157, 1861, 1858, 158, 119, 10, 47, 69, 4,
	1530, 1524, 130, 91, 17, 23, 1856, 1873, 1172, 1052,
	33, 115, 79, 49, 110, 62, 82, 145, 28, 1852,
	1851, 132, 1850, 1842, 1840, 1839, 1837, 106, 1836, 1835,
	76, 139, 13, 22, 25, 97, 42, 109, 86, 105,
	150, 118, 1834, 102, 125, 1831, 40, 1830, 1829, 1957,
	154, 1828, 1825, 1823, 1806, 1756, 1488, 57, 1822, 1821,
	1484, 1434, 1820, 1819, 83, 1818, 127, 116, 1815, 143,
	225, 31, 1814, 120, 70, 104, 1812, 121, 56, 0,
	367, 169, 1811, 135, 95, 1807, 1805, 1804, 1803, 32,
	3, 9, 6, 7, 5, 51, 14, 1802, 1800, 133,
	98, 67, 1799, 155, 1797, 1796, 1795, 36, 1793, 15,
	1792, 16, 1791, 1790, 12, 1, 1789, 1788, 142, 1787,
	107, 1782, 1592, 1781, 146, 1751, 1736, 1598, 66, 117,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 58,
	58, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 55, 55, 60, 60,
	60, 62, 62, 59, 59, 54, 54, 5, 5, 237,
	237, 238, 238, 44, 44, 48, 48, 45, 46, 46,
	47, 47, 7, 7, 7, 6, 6, 8, 8, 8,
	8, 8, 8, 15, 16, 16, 16, 16, 16, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 107,
	107, 106, 106, 109, 109, 18, 18, 21, 21, 21,
	21, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 205, 205, 204, 20, 179, 179, 23, 132,
	132, 24, 24, 24, 24, 25, 32, 278, 278, 278,
	282, 282, 283, 283, 284, 284, 284, 284, 284, 284,
	284, 280, 280, 30, 30, 30, 30, 43, 35, 35,
	35, 35, 35, 35, 152, 149, 149, 148, 148, 148,
	148, 150, 150, 150, 150, 153, 153, 87, 87, 230,
	229, 229, 235, 235, 235, 85, 85, 85, 85, 85,
	86, 86, 86, 228, 228, 228, 228, 236, 236, 236,
	236, 236, 236, 234, 234, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 19, 279, 279, 281,
	281, 27, 37, 37, 38, 38, 39, 39, 39, 39,
	11, 11, 12, 12, 88, 88, 89, 89, 158, 158,
	158, 158, 90, 90, 61, 61, 61, 157, 247, 247,
	248, 248, 248, 248, 248, 248, 249, 249, 249, 249,
	249, 249, 249, 245, 245, 246, 243, 243, 244, 244,
	244, 244, 285, 285, 156, 156, 93, 93, 252, 252,
	252, 252, 250, 250, 250, 250, 250, 253, 251, 254,
	254, 254, 254, 254, 191, 191, 191, 41, 13, 67,
	67, 14, 10, 10, 136, 136, 97, 97, 196, 196,
	196, 78, 78, 56, 56, 56, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 137, 137, 138,
	138, 28, 31, 34, 40, 40, 40, 40, 40, 287,
	287, 74, 74, 74, 74, 75, 75, 151, 151, 154,
	154, 155, 155, 155, 69, 68, 70, 70, 9, 9,
	63, 63, 64, 64, 65, 65, 66, 66, 288, 288,
	26, 26, 26, 81, 81, 145, 145, 145, 147, 147,
	146, 146, 146, 122, 122, 122, 42, 102, 102, 111,
	111, 112, 112, 202, 113, 113, 33, 33, 51, 51,
	49, 49, 49, 49, 49, 49, 50, 50, 52, 52,
	52, 52, 52, 52, 52, 260, 260, 260, 263, 263,
	259, 261, 261, 262, 262, 286, 286, 123, 123, 123,
	92, 91, 91, 95, 95, 94, 96, 96, 195, 195,
	195, 120, 120, 120, 120, 139, 139, 140, 140, 141,
	141, 142, 142, 142, 143, 143, 144, 144, 119, 119,
	175, 175, 53, 53, 101, 101, 103, 103, 165, 165,
	165, 166, 166, 164, 164, 164, 164, 197, 197, 197,
	197, 197, 197, 197, 276, 276, 276, 277, 277, 194,
	194, 198, 198, 198, 198, 198, 198, 192, 192, 192,
	192, 193, 193, 203, 203, 126, 126, 126, 126, 124,
	124, 125, 125, 199, 199, 199, 199, 121, 121, 200,
	200, 200, 159, 159, 206, 206, 206, 224, 224, 100,
	100, 100, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 208,
	208, 208, 208, 210, 210, 210, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 223, 223, 223, 223, 223, 211,
	211, 218, 218, 219, 219, 220, 221, 212, 212, 213,
	213, 214, 215, 222, 222, 222, 222, 226, 226, 216,
	216, 216, 216, 216, 217, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 134,
	134, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 169, 169, 169, 169, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 255, 255,
	255, 255, 255, 255, 255, 257, 257, 258, 258, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 264, 264,
	265, 265, 267, 267, 268, 268, 269, 270, 270, 270,
	271, 272, 272, 266, 266, 273, 273, 273, 274, 274,
	275, 275, 275, 275, 275, 181, 181, 181, 182, 182,
	183, 189, 189, 189, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	76, 76, 76, 76, 76, 108, 108, 178, 178, 176,
	176, 176, 180, 180, 127, 127, 225, 225, 225, 225,
	225, 225, 225, 128, 128, 128, 135, 129, 129, 130,
	130, 130, 130, 130, 130, 172, 173, 131, 131, 131,
	174, 174, 184, 188, 188, 187, 186, 186, 185, 185,
	162, 162, 163, 163, 161, 160, 116, 116, 115, 115,
	114, 114, 289, 289, 190, 190, 117, 117, 118, 110,
	110, 201, 201, 201, 201, 104, 104, 83, 83, 105,
	105, 79, 79, 82, 82, 80, 80, 80, 80, 98,
	98, 99, 99, 77, 77, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 227, 227, 227, 177,
	71, 71, 71, 72, 72, 73, 73, 232, 232, 232,
	233, 233, 233, 233, 231, 231, 231, 231, 231, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 4, 6, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 7, 6, 1,
	1, 1, 3, 3, 0, 2, 0, 2, 1, 3,
	5, 0, 4, 6, 7, 3, 3, 1, 1, 1,
	1, 1, 1, 6, 2, 2, 2, 2, 2, 3,
	5, 4, 6, 4, 6, 4, 6, 3, 5, 1,
	3, 1, 2, 2, 3, 2, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 5, 3, 0, 3, 3,
	0, 2, 3, 2, 3, 6, 6, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 2, 2, 2, 2, 2, 3,
	6, 3, 4, 1, 5, 2, 1, 3, 3, 3,
	3, 1, 3, 3, 1, 2, 2, 1, 0, 1,
	1, 3, 1, 1, 1, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	2, 3, 4, 4, 4, 4, 2, 4, 4, 4,
	4, 4, 4, 2, 3, 3, 2, 3, 4, 4,
	5, 2, 3, 3, 4, 2, 3, 4, 3, 3,
	4, 4, 2, 5, 5, 6, 2, 2, 0, 2,
	0, 3, 6, 6, 5, 5, 4, 12, 4, 12,
	7, 10, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 8, 0, 1, 1, 0, 3, 2, 0,
	3, 1, 2, 2, 3, 6, 2, 1, 1, 2,
	4, 2, 5, 7, 8, 5, 3, 1, 4, 6,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 5, 2,
	0, 6, 11, 14, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 6, 8, 8, 10, 8, 10, 1, 0, 2,
	0, 2, 3, 2, 3, 3, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 0, 1,
	3, 1, 1, 1, 2, 3, 2, 2, 8, 11,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 6, 1, 3, 1, 4, 2, 8, 5,
	4, 3, 0, 2, 2, 0, 8, 2, 0, 1,
	3, 1, 1, 3, 5, 5, 1, 1, 3, 3,
	1, 2, 3, 2, 3, 4, 1, 1, 8, 8,
	1, 2, 4, 4, 4, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 2, 2, 1, 1, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 2, 3, 3, 0, 1, 3, 3, 5,
	1, 1, 3, 2, 4, 4, 0, 7, 4, 6,
	3, 1, 5, 5, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 5, 2, 1, 1, 1,
	1, 4, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 3, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 4, 3, 4, 4, 5, 3, 3,
	3, 3, 3, 4, 3, 4, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 4, 1, 3, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 2, 1, 2, 1, 1, 2,
	1, 3, 1, 1, 2, 2, 1, 1, 3, 5,
	6, 8, 6, 6, 4, 4, 1, 1, 1, 5,
	1, 3, 1, 3, 1, 3, 1, 1, 1, 1,
	6, 6, 4, 4, 4, 4, 4, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 4, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 3, 5, 4, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 3, 1, 3, 3,
	3, 2, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 0, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	3, 5, 1, 0, 2, 2, 1, 1, 1, 2,
	1, 2, 1, 0, 1, 1, 1, 3, 3, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 1, 2, 3, 1, 1, 1, 2, 2, 1,
	3, 3, 0, 1, 2, 1, 1, 1, 1, 6,
	2, 1, 5, 1, 1, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -8, -15,
	-16, -17, -18, -19, -20, -23, -24, -25, -26, -27,
	-29, -31, -32, -34, -33, -35, -36, -37, -38, -39,
	-40, -28, -30, -41, -42, -43, 23, 34, 238, 47,
	67, -9, -10, -11, -12, -13, -14, -262, 93, 97,
	106, 130, 218, 104, 89, 124, 212, 240, 242, 249,
	-49, -51, 260, -152, 263, 35, 272, 61, 100, 244,
	236, 237, 300, 309, 69, -260, -52, -50, 351, 325,
	332, 253, -53, 281, 317, 354, 281, 139, 82, 320,
	-278, -105, 281, 82, -80, -71, 344, 4, -239, -241,
	20, 21, 23, 33, 34, 35, 40, 44, 47, 48,
	55, 60, 61, 62, 64, 66, 67, 68, 71, 72,
	80, 81, 83, 85, 89, 91, 93, 96, 97, 99,
	104, 105, 106, 112, 113, 118, 120, 125, 130, 131,
	132, 133, 140, 143, 145, 138, 155, 156, 157, 159,
	160, 161, 164, 163, 168, 171, 174, 176, 177, 178,
	181, 179, 183, 184, 186, 185, 191, 193, 194, 196,
	199, 202, 205, 208, 209, 210, 211, 212, 214, 216,
	218, 220, 221, 222, 223, 224, 226, 227, 229, 230,
	231, 232, 233, 236, 234, 235, 237, 238, 239, 240,
	242, 244, 245, 247, 261, 262, 273, 249, 250, 251,
	252, 256, 254, 257, 258, 260, 263, 265, 268, 271,
	272, 274, 277, 275, 270, 280, 282, 283, 284, 285,
	286, 287, 288, 295, 296, 300, 301, 302, 303, 306,
	307, 308, 309, 311, 314, 315, 316, 321, 326, 327,
	328, 329, 330, 28, 36, 37, 38, 39, 41, 42,
	45, 46, 51, 52, 53, 56, 84, 86, 87, 103,
	107, 108, 114, 115, 116, 126, 128, 134, 135, 144,
	146, 147, 148, 149, 150, 152, 166, 180, 190, 192,
	203, 207, 215, 217, 225, 246, 255, 266, 267, 276,
	278, 290, 291, 292, 297, 298, 313, 317, 318, -278,
	156, 222, -79, -71, 82, 91, 143, 308, 307, 22,
	214, 254, 283, 285, 82, 139, 281, 320, 310, -22,
	351, -21, -8, -17, -4, -36, -19, -37, -38, -39,
	-23, -18, -33, -26, -42, -15, 23, -231, 4, -239,
	-241, -240, -242, 58, 70, 123, 142, 136, 154, 158,
	167, 169, 182, 204, 206, 243, 264, 22, 24, 25,
	26, 27, 29, 30, 31, 32, 43, 49, 50, 54,
	57, 59, 65, 69, 73, 74, 76, 75, 77, 78,
	79, 88, 90, 92, 94, 95, 98, 100, 102, 109,
	110, 111, 119, 121, 122, 124, 127, 129, 137, 139,
	141, 151, 153, 162, 165, 170, 172, 173, 187, 188,
	189, 195, 197, 198, 200, 201, 213, 219, 228, 241,
	253, 259, 269, 279, 281, 289, 293, 294, 299, 304,
	305, 310, 312, 319, 320, 322, 323, 324, 325, -71,
	-71, -71, 218, 22, -282, 22, -283, -284, 69, 97,
	124, 253, 143, 91, 307, 156, 156, -282, -75, 249,
	-71, -149, 171, 257, 55, 246, 296, -150, -148, -230,
	290, -153, -106, 181, -71, 4, 181, 259, 82, 295,
	22, 34, 55, 60, 83, 125, 139, 140, 65, 66,
	160, 221, 171, 157, 257, 161, 258, 282, 290, 296,
	69, 311, 286, 105, -287, 296, 296, -287, -287, -74,
	296, 293, -75, 4, 82, 259, 181, -286, 281, -235,
	-228, -191, 9, 299, 109, 197, -234, 8, 343, -227,
	-233, 5, 7, 342, 4, -239, -241, -240, 281, 310,
	320, -136, 82, 305, -50, -52, -51, -94, -95, 304,
	151, 102, 201, -49, -51, -260, -263, 226, -259, -71,
	-263, -91, -92, 22, 94, 355, -199, -79, 198, -118,
	351, -3, -199, 134, -79, -82, 134, -79, -71, -199,
	134, 293, 355, -105, -98, -71, -161, -160, 353, 122,
	-167, -169, 342, 343, 337, 187, 331, -181, -171, -184,
	103, 246, 351, -79, -170, 356, 9, -257, -51, 29,
	-182, -183, 49, -71, 7, 8, 5, 6, -77, -208,
	-177, -217, 299, 109, 189, -255, -256, 4, -239, -232,
	-209, -219, -213, -216, 152, 58, 74, 75, 78, 76,
	79, 259, 310, 50, 28, 107, 108, 207, 215, 278,
	297, 298, 134, 190, 135, 56, 126, 166, 96, 37,
	39, 41, 42, 51, 52, 84, 86, 87, 114, 115,
	116, 144, 146, 147, 148, 149, 150, 192, 225, 266,
	276, 291, 292, 318, -240, -220, -221, -214, -215, -222,
	-167, 122, 351, -115, -116, -160, -161, 122, 153, 153,
	-200, -199, -71, 134, -83, 134, -82, -107, 134, -106,
	-107, 134, -98, 134, -205, -204, -233, 317, 281, 139,
	-179, 351, -132, 351, -71, 22, 197, 355, -167, -167,
	197, -71, -149, 53, -149, 261, 351, -154, -155, -68,
	-69, -70, 155, 220, 224, 293, 336, 122, 330, -235,
	-87, 88, -109, 353, 119, 55, -237, -234, 9, 261,
	221, 258, 122, -279, 197, 122, 122, 122, 122, 122,
	221, 258, 295, 161, 295, 122, 330, 155, 220, 273,
	281, 320, 122, 122, -151, -154, -151, 293, -75, -121,
	-199, 8, 7, 7, -106, 134, -71, -106, 139, -71,
	134, -94, -95, -120, -139, -140, 170, 111, 195, -123,
	22, 94, -123, -123, 44, 352, 352, 355, -263, -99,
	351, -110, -201, -167, 344, -110, -118, 344, -79, 351,
	-117, -190, -167, 88, -58, 234, -57, 21, 23, 97,
	315, 103, 270, 287, 250, 270, 287, 250, 234, 103,
	356, 234, 234, 103, -237, -80, 355, -231, 344, -238,
	-237, 10, 11, 57, 33, 342, 343, 344, 345, 117,
	346, 347, 340, 341, 339, 334, 335, 336, 63, 175,
	248, 13, 14, 15, 26, 200, 169, 331, 136, 264,
	337, 16, 17, 18, 154, 36, 137, -76, -84, -167,
	-167, -167, -167, -167, 206, -114, -162, 349, -51, 351,
	-51, -167, -108, 7, -51, -176, 349, -185, -167, -115,
	351, 5, 351, 5, -264, 326, 119, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 217, -226, 321, -226, -226,
	-210, 351, -210, -211, 351, -210, 327, 332, 351, 274,
	352, -104, -79, -116, -200, -81, -79, -81, 260, -71,
	30, 103, -60, 355, 48, 239, 103, -60, 355, 103,
	-60, 103, 103, 352, 355, -199, 134, -82, 30, -178,
	-206, -207, -209, -218, -212, -216, -217, 40, 46, 45,
	288, 180, 255, 267, 313, 38, 196, 145, 144, 146,
	147, 148, 149, 150, 266, 37, 225, 115, 116, 114,
	96, 87, 86, 192, 42, 41, -220, -221, -214, -215,
	84, 291, 292, 152, 39, 52, 51, 318, 276, -108,
	-167, -278, -284, -278, 30, -148, -230, -108, 355, 168,
	-86, 174, 186, 131, 198, 328, -229, 88, -235, -229,
	88, 72, -236, 5, 4, -177, -191, 88, 171, -217,
	353, -231, -22, 262, -106, 22, -230, -281, 119, -278,
	-230, -230, -230, -230, -230, 295, 119, -71, 168, -230,
	-230, 281, 139, 281, -75, -60, 355, 351, -93, 187,
	-261, 325, -93, 351, -72, 134, -71, -261, 187, -120,
	-140, -139, -141, -167, 22, -144, 113, 183, -167, -169,
	-50, -50, -50, -96, -195, -167, 219, 139, -259, 30,
	-98, -101, 355, 122, 30, 4, -101, -79, 355, 352,
	355, 293, -137, 65, 59, -157, 134, 59, -243, -71,
	65, -244, 54, 305, 219, 121, -137, 65, -137, 65,
	65, -199, 33, -33, 122, 33, -33, 122, 293, -82,
	-231, 293, 293, -199, -203, 333, -71, -203, 355, -224,
	-206, -223, 230, 231, 229, 233, 232, -206, -231, 290,
	-167, -167, -167, -167, -167, -167, -167, -167, -167, -167,
	-167, -167, -167, -167, -167, -167, -167, -167, -167, -167,
	-167, -167, 169, 136, 264, 36, 137, -167, 293, -167,
	-167, -167, -167, 179, 187, 189, 299, 109, 306, 94,
	193, -289, 279, 32, -174, -51, 351, -189, 27, 269,
	22, -181, 246, 351, -162, -167, -163, -108, 352, 352,
	355, -108, -180, 350, -176, -188, -187, 322, 352, -108,
	319, 22, 94, 344, 7, -133, 329, 178, 85, 132,
	177, -134, 252, -265, 112, 127, 351, 352, 352, 352,
	-167, -167, -127, -225, -108, 4, 329, 178, 85, 132,
	177, 252, -127, -128, -167, -108, -129, -168, -169, 342,
	343, 337, 351, 246, -130, -167, -108, -167, 43, 165,
	294, -131, -167, 122, -108, -167, -167, -167, -108, -108,
	-108, 351, 7, 7, 290, 290, 7, 122, 352, 355,
	-159, 323, -145, -33, 351, 88, 30, -145, -111, -112,
	-202, -113, -79, 351, -71, -71, -82, -83, -106, -107,
	-107, -98, -22, -204, 103, -21, 352, 355, -100, 29,
	-133, 351, 352, 355, 293, 122, 296, 352, -155, -85,
	224, 268, 235, 256, 355, -231, -280, -71, -22, -79,
	-82, -79, -199, -88, -98, -89, -71, -158, -157, -245,
	-246, -243, 139, 305, 110, 30, 103, -67, 211, 30,
	197, 187, -63, 284, 103, -142, -227, 351, 343, -143,
	246, 247, 355, -56, 31, 92, 159, -79, 351, 352,
	-159, -201, -103, -197, 349, -199, -79, -51, -198, 351,
	-231, -159, 352, -190, -57, -79, -71, -71, 187, -157,
	134, -62, 187, -206, -71, 351, 351, 159, 159, -71,
	-71, 134, -71, 134, -71, -71, -58, 234, -33, 351,
	-33, 351, -71, 234, -71, -79, 234, -44, 133, 193,
	-47, 325, -237, 330, -167, -167, 293, -289, 279, -174,
	-167, 179, 189, 299, 109, 306, 94, 193, 122, 351,
	-168, -168, -108, -171, 351, -108, 350, 359, 352, -167,
	350, 350, 355, -186, -187, 98, -167, -95, 355, -94,
	-167, -108, -108, 352, 352, 293, 293, 293, 293, 351,
	-270, 205, 351, 351, -167, 30, 355, 352, 122, 352,
	352, -135, 213, 352, 10, 11, 342, 343, 344, 345,
	117, 346, 347, 340, 341, 339, 334, 335, 336, 63,
	175, 248, 13, 14, 15, 154, 137, -168, -168, -168,
	-108, 351, 352, -172, -173, 122, 119, 30, -131, -131,
	-131, 352, 122, -108, 355, 355, 355, 352, 352, 352,
	7, 352, 355, 352, 330, 330, 352, 274, 122, -79,
	-122, 241, -167, -122, -147, 197, -104, 317, -71, -122,
	-102, 355, 122, 336, -104, -60, -60, -60, -199, -206,
	349, 349, 7, -167, -280, -280, -68, 303, 62, 224,
	-235, 355, -203, 352, 352, 355, -72, 139, -72, -33,
	-106, 5, -33, -79, 103, -64, 99, -288, 336, -71,
	-143, -167, -195, -79, 356, -21, -119, 127, -203, 355,
	70, -126, 158, 182, 123, 167, 243, 142, 7, -22,
	-164, 356, 351, -194, 332, -51, -198, -197, -119, 293,
	293, 103, 187, 314, -247, -244, -167, -97, -196, -71,
	-258, 351, -255, -256, -77, 351, 351, -55, 97, 260,
	-138, 103, -60, 103, -60, 293, -137, 65, -108, -108,
	293, 293, -47, 122, 280, 199, -167, -167, -168, -168,
	122, 351, -167, -178, 26, 26, 352, -108, 352, 355,
	-163, -167, 352, -176, 100, -167, 289, 352, 319, -95,
	-95, -95, 5, 178, 132, 177, -134, 177, -134, -134,
	7, -271, -71, 351, 323, -94, 352, -224, -206, -167,
	-172, -167, -224, -206, -168, -168, -168, -168, -168, -168,
	-168, -168, -168, -168, -168, -168, -168, -168, -168, -168,
	-168, -168, -168, 94, 187, 193, -168, 355, -108, 352,
	-173, -172, -167, -167, -206, 352, 352, 352, -108, -167,
	-167, -167, 352, 7, 274, -110, 188, -122, 64, 352,
	-159, -112, -103, -190, 352, 350, 7, 7, 352, -71,
	-90, 138, -158, 351, -72, 351, 351, -93, 351, -71,
	-65, 164, -288, -234, -261, 198, 352, -56, -231, 352,
	-175, 129, 44, -197, 158, 158, -197, -126, 158, -124,
	204, -124, -124, -276, 351, 350, -194, -231, 349, 357,
	-108, -193, -192, 30, -71, 202, 352, -175, -71, -71,
	-157, 103, -248, 65, -249, 57, 110, 69, 187, 189,
	305, 219, 54, 88, 228, 352, 352, 355, -78, -115,
	57, -78, -167, 351, -97, -98, 187, 88, 187, 88,
	81, 301, -71, -71, -79, -71, -71, 352, 352, -71,
	-79, -238, 290, 351, 26, 26, -167, -178, 352, -167,
	-167, 352, -167, 350, -167, 5, -167, 352, 352, 352,
	352, -272, -71, -167, 352, 352, 352, -173, 122, 94,
	193, 351, -167, 352, 352, 355, 352, 352, 352, -146,
	351, 197, -33, -122, 336, 350, 350, 137, -97, 351,
	-98, -88, 30, -97, 197, -66, 163, -288, -234, -63,
	-56, -267, 324, -167, -108, -197, -197, -125, 312, 197,
	158, -197, 350, 352, -277, 7, -194, -193, 7, -166,
	-165, 120, 185, 352, -71, 351, -194, -267, -157, -71,
	-231, -71, 110, 134, 189, 159, 351, -168, -79, -156,
	-285, 68, 277, -196, -56, -231, -56, 352, -108, 352,
	352, 189, 189, -167, -206, -60, -60, 293, 293, 293,
	293, -170, -77, -71, -46, -45, 5, -167, -167, 352,
	352, -95, -266, 210, 352, -168, 122, 351, -178, 352,
	-167, 95, -98, 65, -118, -51, 351, 208, 352, -97,
	352, 352, -33, 352, -79, -288, -234, -64, -268, -269,
	-71, -125, 351, -167, -197, -164, 352, 355, -193, 350,
	355, 358, 336, -194, 351, -98, -192, -249, -72, 187,
	-167, -73, 351, -90, 351, -78, -95, 228, -59, 57,
	-71, -71, 351, 351, 351, 355, 352, -48, 336, 352,
	-95, 44, -168, -178, 352, 352, 307, 188, 352, -71,
	-71, -156, 352, -90, -156, 351, -234, -65, 355, 30,
	-98, -194, 7, -165, -231, 349, -193, -98, 352, 103,
	352, -252, 176, -71, -98, -56, 352, -79, -54, 312,
	-231, -108, -108, -108, -45, 5, -273, 223, 247, -108,
	352, 260, -159, 351, -90, -156, -90, -97, -66, -269,
	-271, 352, -192, 7, 352, 110, -250, -253, -251, 197,
	123, 209, 265, 352, 352, -93, -167, 352, 352, -95,
	352, -274, -275, 36, 302, 72, -167, -274, -111, -98,
	-90, 352, 350, -71, -251, 197, -253, 197, 307, 91,
	-252, 352, -275, 216, 118, 246, 216, 118, -159, 352,
	-156, -254, 184, 239, 48, 260, -254, -250, 26, -61,
	48, 239, -90, 20, 189, 88, -275,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 0, 0, 0, 0,
	0, 87, 88, 89, 90, 91, 92, 0, 0, 0,
	464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	436, -2, 0, 173, 0, 380, 0, 380, 380, 384,
	0, 0, 466, 0, 345, 463, -2, 474, 0, 0,
	0, 472, 450, 0, 0, -2, 0, 0, 0, 0,
	0, 147, 0, 1011, 939, 945, 946, 970, 971, 972,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
	1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069,
	1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
	1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
	1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
	1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109,
	1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
	1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
	1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
	1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149,
	1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159,
	1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
	1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
	1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189,
	1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 0,
	0, 0, 0, 941, 1011, 0, 0, 0, 0, 94,
	95, 96, 97, 98, 0, 0, 0, 0, 0, 115,
	0, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 117, 118, 119, 120, 0, 256, 984, 985,
	986, 987, 988, 1199, 1200, 1201, 1202, 1203, 1204, 1205,
	1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
	1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225,
	1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235,
	1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245,
	1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
	1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265,
	1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285,
	1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 137,
	140, 141, 1070, 143, 0, 150, 151, 152, 154, 155,
	156, 157, 158, 159, 160, 0, 0, 0, 373, 1097,
	386, 168, 1045, 1103, 999, 1185, 1124, 176, 181, 0,
	1191, 184, 189, -2, 111, 215, 216, 217, 218, 219,
	220, 0, 0, 0, 226, 258, 0, 0, 0, 0,
	0, 233, 0, 236, 0, 0, 241, 245, 0, 0,
	0, 252, 0, 0, 388, 379, 388, 376, 377, 378,
	381, 0, 371, 163, 164, 165, 166, 0, 465, 167,
	192, 193, 194, 203, 204, 205, 206, 334, 0, 336,
	213, 214, 966, 0, 980, 981, 982, 983, 0, 0,
	0, 0, 0, 344, -2, 446, 447, -2, 0, 469,
	469, 469, 0, 0, 447, 0, 455, 1076, 458, 952,
	456, 0, 0, 471, 470, 0, 451, 553, 0, 502,
	0, 2, 0, 1167, 553, 0, 1167, 944, 0, 0,
	1167, 0, 0, 148, 149, 949, 947, 948, 0, 0,
	85, 661, 0, 0, 0, 0, 0, 0, 753, 755,
	1159, 1185, 0, 757, 758, 0, 760, 762, 763, 0,
	766, 767, 909, 941, 955, 956, 957, 958, 0, 0,
	961, 0, 963, 964, 965, 809, 776, -2, -2, 953,
	589, 590, 591, 592, -2, 1199, 780, 782, 784, 786,
	787, 788, 789, 0, 1143, 1160, 1161, 1181, 1182, 1190,
	1194, 1195, 1167, 1178, 1168, 1155, 1165, 1176, 1017, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 979, 623, 624, 629, 630, 632,
	86, 0, 0, 942, 918, 916, 917, 0, 0, 0,
	0, 559, 99, 1167, 60, 1167, 937, 60, 1167, 109,
	60, 1167, 107, 1167, 0, 132, 134, 1197, 0, 0,
	0, 0, 138, 0, 142, 144, 0, 0, 261, 372,
	0, 385, 169, 1154, 171, 0, 0, 175, 389, 391,
	392, 393, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 187, 112, 0, 464, 0, 221, 69, 70, 0,
	234, 242, 0, 260, 0, 0, 0, 0, 0, 0,
	235, 243, 237, 0, 0, 0, 246, 0, 248, 249,
	0, 0, 0, 0, 374, 387, 375, 0, 383, 60,
	557, 335, 968, 967, 317, 1167, 462, 317, 974, 462,
	1167, -2, 0, 442, 483, 484, 0, 0, 0, 0,
	467, 468, 0, 0, 0, 438, 439, 0, 457, 0,
	0, 505, 929, 933, 934, 505, 503, 554, 555, 0,
	0, 926, 924, 925, 37, 368, 39, 0, 368, 368,
	0, 0, 0, 0, 266, 0, 0, 268, 0, 0,
	0, 0, 0, 0, 544, 940, 0, 914, 915, 544,
	71, 0, 0, 0, 0, 844, 845, 846, 847, 848,
	849, 852, 853, 850, 851, 854, 855, 856, 0, 0,
	0, 857, 858, 859, 0, 0, 861, 0, 863, 0,
	0, 0, 0, 0, 0, 923, 0, 0, 860, 666,
	667, 668, 690, 691, 0, 754, 920, 913, 756, 0,
	-2, 865, 0, 759, 764, 765, 0, 0, 908, -2,
	0, 960, 0, 658, 811, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 888, 894, 0, 0, 0,
	0, 0, 0, 0, 0, 608, 626, 637, 634, 633,
	610, 0, 609, 607, 0, 611, 0, 0, 0, 82,
	0, 0, 935, 919, 563, 0, 413, 0, 0, 560,
	0, 0, 101, 0, 58, 59, 0, 103, 0, 0,
	105, 0, 0, 464, 0, 0, 1167, 0, 464, 0,
	867, 571, 572, 573, 574, 575, 658, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 588, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 605, 606, 620,
	0, 595, 595, 595, 612, 613, 621, 622, 627, 628,
	639, 640, 642, 644, 638, 638, 638, 635, 636, 0,
	865, 0, 153, 0, 0, 172, 0, 0, 0, 0,
	394, 200, 201, 202, 396, 397, 177, 179, 190, 178,
	180, 182, 183, 207, 208, 209, 210, 211, 212, 0,
	0, 113, 239, 224, 222, 223, 225, 227, 0, 257,
	228, 229, 230, 231, 232, 238, 464, 244, 247, 250,
	251, 0, 0, 0, 382, 337, 0, 275, 0, 0,
	340, 461, 0, 0, 0, 1167, 973, 401, 0, 445,
	481, 482, 485, 489, 490, 493, 496, 497, 487, 661,
	452, 453, 454, 475, 476, 355, 0, 0, 459, 0,
	0, 563, 0, 0, 0, 932, 563, 0, 0, 928,
	0, 0, 0, 0, 367, 41, 1167, 0, 62, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 0, 0, 265, 0, 0, 0,
	943, 0, 0, 0, 74, 0, 950, 81, 0, 662,
	567, 568, 614, 615, 616, 617, 618, 663, 664, 0,
	669, 670, 671, 672, 673, 674, 675, 676, 677, 678,
	-2, -2, -2, 682, 683, 684, -2, -2, -2, 688,
	689, -2, 862, 864, 0, 923, 0, -2, 0, -2,
	-2, -2, -2, 702, 0, 704, 707, 709, 711, 0,
	0, 0, 0, 922, 721, 900, 0, 0, 841, 842,
	843, 706, 0, 0, 921, 912, 0, 0, -2, 761,
	0, 0, 0, 871, 872, 907, 903, 0, 768, 474,
	0, 0, 0, 0, 0, 969, 645, 646, 647, 648,
	649, 650, 659, 819, 0, 0, 0, 781, 783, 785,
	0, 0, 0, 0, 875, -2, -2, -2, -2, -2,
	-2, -2, 0, 0, 865, 885, 0, 0, 724, 0,
	0, 0, 0, 1185, 0, 865, 893, 0, 0, 0,
	0, 0, 865, 0, 899, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	425, 0, 425, 415, 0, 0, 0, 425, 428, 429,
	431, 432, 0, 0, 561, 100, 938, 60, 110, 60,
	60, 108, 116, 133, 0, 135, 136, 0, 564, 566,
	576, 0, 139, 0, 0, 0, 0, 174, 390, 395,
	0, 197, 0, 199, 0, 114, 259, 161, 240, 253,
	254, 544, 558, 0, 0, 274, 949, 276, 278, 279,
	280, 281, 974, 0, 974, 0, 0, 338, 0, 0,
	0, 0, 403, 409, 0, 0, 491, 0, 0, 488,
	494, 495, 0, 478, 353, 354, 0, 0, 464, 951,
	499, 930, 544, 506, 464, 516, 553, 530, 521, 0,
	931, 499, 556, 927, 40, 357, 0, 0, 0, 43,
	1167, 51, 0, 289, 0, 0, 0, 0, 0, 370,
	52, 1167, 60, 1167, 60, 53, 38, 368, 262, 0,
	263, 0, 361, 0, 356, 359, 0, 81, 0, 0,
	68, 0, 72, 0, -2, -2, 0, 0, 0, 722,
	-2, 703, 705, 708, 710, 712, 0, 0, 0, 0,
	0, 0, 0, 723, 0, 0, 910, 913, -2, 866,
	869, 870, 0, 0, 904, 0, 0, 0, 0, 473,
	474, 474, 474, 774, 0, 0, 0, 0, 0, 0,
	775, 0, 0, 0, 0, 0, 0, 792, 0, 793,
	794, 0, 0, 795, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 727, 728, 729,
	0, 0, 796, 891, 892, 0, 0, 0, 0, 0,
	0, 801, 0, 898, 0, 0, 0, 805, 806, 807,
	0, 593, 0, 619, 641, 643, 631, 83, 0, 936,
	93, 0, 562, 410, 425, 0, 0, 417, 414, 412,
	563, 0, 0, 0, 0, 102, 104, 106, 0, 868,
	0, 0, 0, 866, 145, 146, 170, 195, 196, 198,
	191, 0, 255, 283, 316, 0, 0, 974, 0, 272,
	317, 339, 341, 0, 0, 405, 409, 0, 408, 462,
	0, 0, 477, 355, 0, 0, 501, 0, 504, 0,
	0, 0, 0, 0, 550, 550, 550, 548, 524, 0,
	530, 0, 0, 542, 0, -2, 521, 0, 501, 0,
	0, 0, 0, 61, 287, 306, 0, 0, 346, 352,
	352, 0, 777, 778, 0, 0, 0, 45, 0, 0,
	0, 0, 49, 0, 55, 0, 0, 0, 0, 0,
	0, 0, 67, 0, 0, 0, 665, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 901, 0, 836, 0,
	0, 912, -2, 873, 902, 906, 0, 769, 0, 0,
	0, 0, 962, 651, 652, 653, 654, 655, 656, 657,
	0, 817, 818, 822, 0, 0, 779, 0, 0, 874,
	884, 886, 725, 726, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, -2, -2, -2, 743, 744, 745,
	-2, -2, -2, 0, 0, 0, 887, 0, 0, 839,
	889, 890, 895, 896, 0, 798, 799, 800, 897, 0,
	0, 0, 625, 0, 84, 423, 424, 411, 422, 0,
	425, 430, 427, 433, 0, 569, 0, 0, 577, 162,
	270, 0, 277, 0, 0, 0, 275, 0, 0, 0,
	407, 409, 0, 400, 401, 486, 492, 479, 355, 460,
	813, 0, 0, 507, 0, 0, 0, 0, 0, 545,
	549, 546, 547, 0, 0, 530, 542, 513, 0, 0,
	0, 520, 541, 0, 540, 529, -2, 813, 363, 365,
	42, 0, 288, 0, 291, 0, 0, 0, 0, 297,
	298, 0, 0, 0, 0, 308, 315, 0, 355, 954,
	0, 355, 0, 0, 0, 0, 0, 57, 0, 0,
	369, 0, 60, 60, 358, 0, 0, 0, 0, 362,
	360, 73, 0, 0, 0, 0, -2, 0, 715, -2,
	-2, 835, 866, 911, 905, 959, 474, 770, 772, 773,
	660, 824, 821, 0, 808, 790, 791, 883, 0, 0,
	0, 0, 866, 838, 797, 0, 803, 804, 594, 0,
	0, 0, 416, 426, 0, 570, 565, 0, 0, 0,
	0, 0, 0, 0, 0, 398, 409, 0, 402, 403,
	480, 448, 0, 500, 498, 532, 0, 534, 0, 0,
	0, 536, 516, 525, 0, 527, 542, 518, 0, 0,
	511, 0, 510, 530, 538, 0, 0, 449, 44, 0,
	292, 293, 974, 0, 296, 299, 0, 301, 976, 283,
	0, 312, 313, 347, 348, 351, 349, 352, 474, 310,
	0, 46, 47, 56, 64, 48, 54, 0, 0, 0,
	0, 543, 0, 0, 0, 78, 76, -2, -2, 716,
	837, 0, 474, 0, 810, -2, 0, 0, 0, 840,
	0, 0, 0, 0, 434, 435, 0, 0, 315, 0,
	305, 283, 273, 315, 0, 0, 404, 405, 812, 814,
	0, 533, 0, 552, 535, 530, 526, 0, 523, 514,
	0, 515, 0, 542, 0, 0, 522, 290, 294, 0,
	0, 321, 0, 309, 0, 355, 0, 0, 66, 0,
	364, 366, 0, 0, 0, 0, 80, 77, 0, 771,
	827, 0, -2, 0, 751, 802, 0, 419, 563, 421,
	0, 283, 315, 271, 283, 0, 406, 407, 0, 0,
	0, 0, 528, 512, 508, 0, 519, 0, 539, 0,
	300, 326, 0, 0, 0, 350, 769, 317, 50, 0,
	63, 0, 0, 474, 79, 75, 0, 0, 0, 823,
	752, 0, 420, 0, 303, 283, 342, 0, 399, 815,
	816, 551, 517, 0, 537, 0, 302, 322, 323, 0,
	318, 319, 320, 975, 314, 321, 65, 267, 269, 0,
	820, 825, 828, -2, 1127, 1008, 0, 826, 563, 0,
	304, 315, 509, 295, 324, 0, 325, 0, 0, 0,
	326, 0, 0, 830, 831, 832, 833, 834, 418, 286,
	283, 327, 0, 330, 331, 0, 328, 311, 0, 282,
	284, 285, 343, 329, 332, 333, 829,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 340, 3, 346, 341, 3,
	351, 352, 344, 342, 355, 343, 353, 345, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 359, 354,
	334, 336, 335, 3, 356, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 349, 3, 350, 347, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 357, 339, 358, 337,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 338, 57677, 348, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:795
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:801
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:807
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:868
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:899
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:908
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:931
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:941
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.union.val = nil
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:980
		{
			sqlVAL.union.val = DropCascade
		}
	case 59:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:984
		{
			sqlVAL.union.val = DropRestrict
		}
	case 60:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = DropDefault
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:994
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 62:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1003
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 64:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1004
		{
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1007
		{
			return unimplemented(sqllex, "alter using")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1008
		{
		}
	case 67:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 74:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 76:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.str = ""
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 80:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 81:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1081
		{
		}
	case 82:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1100
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1104
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1130
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1131
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1132
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1133
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1247
		{ /* SKIP DOC */
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 140:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1425
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1429
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1435
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1442
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1454
		{
			return unimplemented(sqllex, "set local")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1468
		{ /* SKIP DOC */
		}
	case 174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[2].union.transactionModes()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1506
		{
			return unimplemented(sqllex, "set from current")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1509
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1518
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1522
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1526
		{
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1526
		{
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = Low
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = Normal
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = High
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1646
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "client_encoding"}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1650
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1654
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1658
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1766
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1770
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1774
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1778
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1794
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1798
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1802
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1814
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1836
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1852
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1856
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1862
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1866
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1870
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1874
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1918
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1945
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1949
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 286:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = DropDefault
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1959
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2164
		{
			return unimplemented(sqllex, "match full")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2165
		{
			return unimplemented(sqllex, "match partial")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2166
		{
			return unimplemented(sqllex, "match simple")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2167
		{
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2173
		{
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2174
		{
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2175
		{
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2176
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2177
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2180
		{
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2183
		{
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2186
		{
			return unimplemented(sqllex, "no action")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2189
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2190
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			return unimplemented(sqllex, "action set null")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2192
		{
			return unimplemented(sqllex, "action set default")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2224
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2228
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = true
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = false
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2299
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2300
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2303
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2304
		{
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = Ascending
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.union.val = Descending
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2358
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2359
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = true
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = false
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2372
		{
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2373
		{
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2384
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2413
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2422
		{
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2423
		{
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.str = ""
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.str = ""
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2445
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2459
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2469
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = ReadOnly
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = ReadWrite
		}
	case 398:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.str = ""
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.str = ""
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2562
		{
			sqlVAL.str = ""
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2572
		{
			sqlVAL.str = ""
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2577
		{
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2578
		{
		}
	case 410:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2595
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2642
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2646
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2654
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2663
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 426:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2676
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2677
		{
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2904
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2905
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2906
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2909
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2910
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2913
		{
			return unimplemented(sqllex, "cte")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2916
		{
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2917
		{
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2920
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2921
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2924
		{
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2925
		{
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = true
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = false
		}
	case 469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = false
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = true
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2948
		{
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2949
		{
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2996
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3005
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3016
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3025
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3068
		{
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3069
		{
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3072
		{
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3073
		{
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3127
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = &From{}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3163
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3181
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3208
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 517:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3225
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = nil
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3283
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3289
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = true
		}
	case 530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = false
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.str = astFullJoin
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.str = astLeftJoin
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.str = astRightJoin
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.str = astInnerJoin
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3400
		{
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3401
		{
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 563:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3487
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3500
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3501
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3515
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 571:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3524
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3587
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3596
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = nil
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3661
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3757
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 631:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3789
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3828
		{
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3829
		{
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = year
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = month
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = day
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = hour
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = minute
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = month
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = hour
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = minute
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = minute
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = nil
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = second
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3924
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3959
		{
			return unimplemented(sqllex, "at tz")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4127
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4193
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4366
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4379
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4383
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4400
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4404
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4419
		{
			return unimplemented(sqllex, "variadic")
		}
	case 771:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4420
		{
			return unimplemented(sqllex, "variadic")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4443
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4459
		{
			return unimplemented(sqllex, "func_application")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4460
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 779:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4464
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4489
		{
			return unimplemented(sqllex, "current role")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4490
		{
			return unimplemented(sqllex, "current user")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4491
		{
			return unimplemented(sqllex, "session user")
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4492
		{
			return unimplemented(sqllex, "user")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4521
		{
			return unimplemented(sqllex, "treat")
		}
	case 798:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4565
		{
			return unimplemented(sqllex, "within group")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4566
		{
		}
	case 810:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4581
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = Window(nil)
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4601
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 820:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.str = ""
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4663
		{
			return unimplemented(sqllex, "frame range")
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4664
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4665
		{
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4668
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4669
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4675
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4676
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4677
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4678
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4679
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = Any
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = Some
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = All
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = Plus
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = Minus
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = Mult
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = Div
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = FloorDiv
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = Mod
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = Bitand
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4740
		{
			sqlVAL.union.val = Bitor
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = Pow
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = Bitxor
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = LT
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = GT
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = EQ
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = LE
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = GE
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = NE
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = Like
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4753
		{
			sqlVAL.union.val = NotLike
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = ILike
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = NotILike
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4780
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4800
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 883:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4844
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4861
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4920
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 905:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5024
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5043
		{
		}
	case 923:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5044
		{
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5053
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5078
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5082
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5097
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5101
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5105
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5113
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5117
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5133
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5148
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5152
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5158
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5162
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5197
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5206
		{
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5216
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5239
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5242
		{
			return unimplemented(sqllex, "func const")
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5244
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5248
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 962:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5251
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5253
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5257
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5261
		{
			sqlVAL.union.val = DNull
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5268
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5272
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5278
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 974:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5313
		{
			sqlVAL.str = ""
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 976:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
