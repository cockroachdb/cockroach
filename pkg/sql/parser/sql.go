// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:466
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_ROLE = 57417
const CURRENT_TIME = 57418
const CURRENT_TIMESTAMP = 57419
const CURRENT_USER = 57420
const CYCLE = 57421
const DATA = 57422
const DATABASE = 57423
const DATABASES = 57424
const DATE = 57425
const DAY = 57426
const DEC = 57427
const DECIMAL = 57428
const DEFAULT = 57429
const DEALLOCATE = 57430
const DEFERRABLE = 57431
const DELETE = 57432
const DESC = 57433
const DISTINCT = 57434
const DO = 57435
const DOUBLE = 57436
const DROP = 57437
const ELSE = 57438
const ENCODING = 57439
const END = 57440
const ESCAPE = 57441
const EXCEPT = 57442
const EXISTS = 57443
const EXECUTE = 57444
const EXPERIMENTAL_FINGERPRINTS = 57445
const EXPLAIN = 57446
const EXTRACT = 57447
const EXTRACT_DURATION = 57448
const FALSE = 57449
const FAMILY = 57450
const FETCH = 57451
const FILTER = 57452
const FIRST = 57453
const FLOAT = 57454
const FLOAT4 = 57455
const FLOAT8 = 57456
const FLOORDIV = 57457
const FOLLOWING = 57458
const FOR = 57459
const FORCE_INDEX = 57460
const FOREIGN = 57461
const FROM = 57462
const FULL = 57463
const GRANT = 57464
const GRANTS = 57465
const GREATEST = 57466
const GROUP = 57467
const GROUPING = 57468
const HAVING = 57469
const HELP = 57470
const HIGH = 57471
const HOUR = 57472
const INCREMENTAL = 57473
const IF = 57474
const IFNULL = 57475
const ILIKE = 57476
const IN = 57477
const INTERLEAVE = 57478
const INDEX = 57479
const INDEXES = 57480
const INITIALLY = 57481
const INNER = 57482
const INSERT = 57483
const INT = 57484
const INT2VECTOR = 57485
const INT2 = 57486
const INT4 = 57487
const INT8 = 57488
const INT64 = 57489
const INTEGER = 57490
const INTERSECT = 57491
const INTERVAL = 57492
const INTO = 57493
const IS = 57494
const ISOLATION = 57495
const JOB = 57496
const JOIN = 57497
const KEY = 57498
const KEYS = 57499
const KV = 57500
const LATERAL = 57501
const LC_CTYPE = 57502
const LC_COLLATE = 57503
const LEADING = 57504
const LEAST = 57505
const LEFT = 57506
const LEVEL = 57507
const LIKE = 57508
const LIMIT = 57509
const LOCAL = 57510
const LOCALTIME = 57511
const LOCALTIMESTAMP = 57512
const LOW = 57513
const LSHIFT = 57514
const MATCH = 57515
const MINUTE = 57516
const MONTH = 57517
const NAN = 57518
const NAME = 57519
const NAMES = 57520
const NATURAL = 57521
const NEXT = 57522
const NO = 57523
const NO_INDEX_JOIN = 57524
const NORMAL = 57525
const NOT = 57526
const NOTHING = 57527
const NULL = 57528
const NULLIF = 57529
const NULLS = 57530
const NUMERIC = 57531
const OF = 57532
const OFF = 57533
const OFFSET = 57534
const OID = 57535
const ON = 57536
const ONLY = 57537
const OPTIONS = 57538
const OR = 57539
const ORDER = 57540
const ORDINALITY = 57541
const OUT = 57542
const OUTER = 57543
const OVER = 57544
const OVERLAPS = 57545
const OVERLAY = 57546
const PARENT = 57547
const PARTIAL = 57548
const PARTITION = 57549
const PASSWORD = 57550
const PAUSE = 57551
const PLACING = 57552
const POSITION = 57553
const PRECEDING = 57554
const PRECISION = 57555
const PREPARE = 57556
const PRIMARY = 57557
const PRIORITY = 57558
const QUERIES = 57559
const QUERY = 57560
const RANGE = 57561
const READ = 57562
const REAL = 57563
const RECURSIVE = 57564
const REF = 57565
const REFERENCES = 57566
const REGCLASS = 57567
const REGPROC = 57568
const REGPROCEDURE = 57569
const REGNAMESPACE = 57570
const REGTYPE = 57571
const RENAME = 57572
const REPEATABLE = 57573
const RELEASE = 57574
const RESET = 57575
const RESTORE = 57576
const RESTRICT = 57577
const RESUME = 57578
const RETURNING = 57579
const REVOKE = 57580
const RIGHT = 57581
const ROLLBACK = 57582
const ROLLUP = 57583
const ROW = 57584
const ROWS = 57585
const RSHIFT = 57586
const SAVEPOINT = 57587
const SCATTER = 57588
const SEARCH = 57589
const SECOND = 57590
const SELECT = 57591
const SERIAL = 57592
const SERIALIZABLE = 57593
const SESSION = 57594
const SESSIONS = 57595
const SESSION_USER = 57596
const SET = 57597
const SETTING = 57598
const SETTINGS = 57599
const SHOW = 57600
const SIMILAR = 57601
const SIMPLE = 57602
const SMALLINT = 57603
const SMALLSERIAL = 57604
const SNAPSHOT = 57605
const SOME = 57606
const SPLIT = 57607
const SQL = 57608
const START = 57609
const STATUS = 57610
const STDIN = 57611
const STRICT = 57612
const STRING = 57613
const STORING = 57614
const SUBSTRING = 57615
const SYMMETRIC = 57616
const SYSTEM = 57617
const TABLE = 57618
const TABLES = 57619
const TEMPLATE = 57620
const TESTING_RANGES = 57621
const TESTING_RELOCATE = 57622
const TEXT = 57623
const THEN = 57624
const TIME = 57625
const TIMESTAMP = 57626
const TIMESTAMPTZ = 57627
const TO = 57628
const TRAILING = 57629
const TRACE = 57630
const TRANSACTION = 57631
const TREAT = 57632
const TRIM = 57633
const TRUE = 57634
const TRUNCATE = 57635
const TYPE = 57636
const UNBOUNDED = 57637
const UNCOMMITTED = 57638
const UNION = 57639
const UNIQUE = 57640
const UNKNOWN = 57641
const UPDATE = 57642
const UPSERT = 57643
const USE = 57644
const USER = 57645
const USERS = 57646
const USING = 57647
const UUID = 57648
const VALID = 57649
const VALIDATE = 57650
const VALUE = 57651
const VALUES = 57652
const VARCHAR = 57653
const VARIADIC = 57654
const VIEW = 57655
const VARYING = 57656
const WHEN = 57657
const WHERE = 57658
const WINDOW = 57659
const WITH = 57660
const WITHIN = 57661
const WITHOUT = 57662
const WRITE = 57663
const YEAR = 57664
const ZONE = 57665
const NOT_LA = 57666
const WITH_LA = 57667
const AS_LA = 57668
const POSTFIXOP = 57669
const UMINUS = 57670

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5652

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 35,
	347, 35,
	-2, 455,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 59,
	1, 428,
	194, 428,
	237, 428,
	343, 428,
	345, 428,
	347, 428,
	-2, 438,
	-1, 74,
	1, 431,
	194, 431,
	237, 431,
	343, 431,
	345, 431,
	347, 431,
	-2, 437,
	-1, 83,
	1, 35,
	347, 35,
	-2, 455,
	-1, 467,
	1, 180,
	347, 180,
	-2, 1035,
	-1, 537,
	109, 465,
	167, 465,
	192, 465,
	-2, 434,
	-1, 540,
	109, 464,
	167, 464,
	192, 464,
	-2, 432,
	-1, 620,
	344, 964,
	-2, 957,
	-1, 621,
	344, 965,
	-2, 958,
	-1, 627,
	5, 633,
	344, 633,
	-2, 1156,
	-1, 651,
	5, 592,
	-2, 1126,
	-1, 652,
	5, 627,
	344, 627,
	-2, 1128,
	-1, 653,
	5, 602,
	-2, 1129,
	-1, 654,
	5, 601,
	-2, 1130,
	-1, 655,
	5, 627,
	344, 627,
	-2, 1133,
	-1, 656,
	5, 627,
	344, 627,
	-2, 1134,
	-1, 657,
	5, 628,
	-2, 1137,
	-1, 658,
	5, 584,
	-2, 1138,
	-1, 659,
	5, 584,
	-2, 1139,
	-1, 660,
	5, 609,
	-2, 1143,
	-1, 661,
	5, 594,
	-2, 1144,
	-1, 662,
	5, 595,
	-2, 1145,
	-1, 663,
	5, 585,
	-2, 1150,
	-1, 664,
	5, 586,
	-2, 1151,
	-1, 665,
	5, 587,
	-2, 1152,
	-1, 666,
	5, 588,
	-2, 1153,
	-1, 667,
	5, 589,
	-2, 1154,
	-1, 668,
	5, 590,
	-2, 1155,
	-1, 669,
	5, 584,
	-2, 1160,
	-1, 670,
	5, 593,
	-2, 1165,
	-1, 671,
	5, 591,
	-2, 1168,
	-1, 672,
	5, 625,
	344, 625,
	-2, 1170,
	-1, 673,
	5, 629,
	-2, 1173,
	-1, 674,
	5, 631,
	-2, 1174,
	-1, 675,
	5, 624,
	344, 624,
	-2, 1179,
	-1, 793,
	109, 464,
	167, 464,
	192, 464,
	-2, 435,
	-1, 902,
	100, 438,
	109, 438,
	149, 438,
	167, 438,
	192, 438,
	198, 438,
	297, 438,
	-2, 752,
	-1, 911,
	344, 941,
	-2, 929,
	-1, 1189,
	13, 0,
	14, 0,
	15, 0,
	327, 0,
	328, 0,
	329, 0,
	-2, 668,
	-1, 1190,
	13, 0,
	14, 0,
	15, 0,
	327, 0,
	328, 0,
	329, 0,
	-2, 669,
	-1, 1191,
	13, 0,
	14, 0,
	15, 0,
	327, 0,
	328, 0,
	329, 0,
	-2, 670,
	-1, 1195,
	13, 0,
	14, 0,
	15, 0,
	327, 0,
	328, 0,
	329, 0,
	-2, 674,
	-1, 1196,
	13, 0,
	14, 0,
	15, 0,
	327, 0,
	328, 0,
	329, 0,
	-2, 675,
	-1, 1197,
	13, 0,
	14, 0,
	15, 0,
	327, 0,
	328, 0,
	329, 0,
	-2, 676,
	-1, 1200,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	134, 0,
	135, 0,
	166, 0,
	259, 0,
	324, 0,
	330, 0,
	-2, 681,
	-1, 1206,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	134, 0,
	135, 0,
	166, 0,
	259, 0,
	324, 0,
	330, 0,
	-2, 683,
	-1, 1208,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	134, 0,
	135, 0,
	166, 0,
	259, 0,
	324, 0,
	330, 0,
	-2, 687,
	-1, 1209,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	134, 0,
	135, 0,
	166, 0,
	259, 0,
	324, 0,
	330, 0,
	-2, 688,
	-1, 1210,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	134, 0,
	135, 0,
	166, 0,
	259, 0,
	324, 0,
	330, 0,
	-2, 689,
	-1, 1211,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	134, 0,
	135, 0,
	166, 0,
	259, 0,
	324, 0,
	330, 0,
	-2, 690,
	-1, 1237,
	203, 823,
	-2, 826,
	-1, 1273,
	120, 863,
	344, 964,
	-2, 957,
	-1, 1274,
	120, 864,
	-2, 1122,
	-1, 1275,
	120, 865,
	-2, 1034,
	-1, 1276,
	120, 866,
	-2, 1000,
	-1, 1277,
	120, 867,
	-2, 1016,
	-1, 1278,
	120, 868,
	-2, 1033,
	-1, 1279,
	120, 869,
	-2, 1084,
	-1, 1460,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	134, 0,
	135, 0,
	166, 0,
	259, 0,
	324, 0,
	330, 0,
	-2, 682,
	-1, 1461,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	134, 0,
	135, 0,
	166, 0,
	259, 0,
	324, 0,
	330, 0,
	-2, 684,
	-1, 1466,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	134, 0,
	135, 0,
	166, 0,
	259, 0,
	324, 0,
	330, 0,
	-2, 685,
	-1, 1484,
	203, 822,
	-2, 825,
	-1, 1649,
	100, 438,
	109, 438,
	149, 438,
	167, 438,
	192, 438,
	198, 438,
	297, 438,
	-2, 519,
	-1, 1691,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	134, 0,
	135, 0,
	166, 0,
	259, 0,
	324, 0,
	330, 0,
	-2, 686,
	-1, 1696,
	152, 0,
	-2, 702,
	-1, 1706,
	203, 824,
	-2, 827,
	-1, 1748,
	13, 0,
	14, 0,
	15, 0,
	327, 0,
	328, 0,
	329, 0,
	-2, 729,
	-1, 1749,
	13, 0,
	14, 0,
	15, 0,
	327, 0,
	328, 0,
	329, 0,
	-2, 730,
	-1, 1750,
	13, 0,
	14, 0,
	15, 0,
	327, 0,
	328, 0,
	329, 0,
	-2, 731,
	-1, 1754,
	13, 0,
	14, 0,
	15, 0,
	327, 0,
	328, 0,
	329, 0,
	-2, 735,
	-1, 1755,
	13, 0,
	14, 0,
	15, 0,
	327, 0,
	328, 0,
	329, 0,
	-2, 736,
	-1, 1756,
	13, 0,
	14, 0,
	15, 0,
	327, 0,
	328, 0,
	329, 0,
	-2, 737,
	-1, 1838,
	1, 520,
	70, 520,
	100, 520,
	109, 520,
	121, 520,
	125, 520,
	127, 520,
	140, 520,
	149, 520,
	155, 520,
	164, 520,
	167, 520,
	179, 520,
	192, 520,
	194, 520,
	198, 520,
	237, 520,
	239, 520,
	297, 520,
	305, 520,
	316, 520,
	317, 520,
	326, 520,
	343, 520,
	345, 520,
	347, 520,
	348, 520,
	-2, 519,
	-1, 1888,
	152, 0,
	-2, 703,
	-1, 1891,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	134, 0,
	135, 0,
	166, 0,
	259, 0,
	324, 0,
	330, 0,
	-2, 706,
	-1, 1892,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	134, 0,
	135, 0,
	166, 0,
	259, 0,
	324, 0,
	330, 0,
	-2, 708,
	-1, 2008,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	134, 0,
	135, 0,
	166, 0,
	259, 0,
	324, 0,
	330, 0,
	-2, 707,
	-1, 2009,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	134, 0,
	135, 0,
	166, 0,
	259, 0,
	324, 0,
	330, 0,
	-2, 709,
	-1, 2016,
	152, 0,
	-2, 738,
	-1, 2083,
	152, 0,
	-2, 739,
	-1, 2164,
	36, 0,
	134, 0,
	166, 0,
	259, 0,
	324, 0,
	330, 0,
	-2, 1125,
}

const sqlPrivate = 57344

const sqlLast = 31581

var sqlAct = [...]int{

	621, 2163, 1794, 2147, 1318, 2192, 2112, 1326, 1980, 1089,
	2148, 1725, 2149, 2162, 1834, 2040, 541, 1661, 1961, 332,
	1937, 611, 1804, 1846, 2006, 1647, 597, 584, 1860, 619,
	618, 1833, 1644, 1621, 686, 1942, 1948, 96, 96, 1401,
	96, 1662, 1376, 562, 1095, 1550, 1623, 1390, 58, 980,
	334, 96, 96, 96, 851, 519, 1821, 1371, 96, 1327,
	1408, 96, 1812, 1635, 813, 1375, 963, 826, 1549, 96,
	823, 1168, 528, 1260, 1495, 1131, 1091, 1456, 96, 96,
	1372, 1630, 96, 907, 1414, 96, 96, 96, 96, 318,
	23, 96, 96, 1576, 1115, 1235, 1409, 1140, 1364, 1245,
	1397, 1163, 466, 591, 1049, 731, 952, 1223, 852, 1299,
	828, 814, 548, 73, 1220, 522, 316, 698, 1254, 730,
	1320, 523, 707, 590, 1270, 546, 937, 898, 699, 1120,
	551, 1379, 696, 74, 796, 795, 797, 452, 514, 613,
	441, 463, 941, 1047, 956, 462, 1861, 88, 692, 92,
	540, 549, 801, 776, 777, 2051, 455, 1483, 2052, 97,
	1319, 73, 1645, 965, 1642, 965, 1588, 2190, 2172, 965,
	848, 1859, 577, 23, 545, 1411, 512, 75, 2159, 2158,
	331, 1351, 1351, 2155, 2145, 301, 848, 848, 2142, 853,
	854, 848, 1587, 1122, 2131, 2109, 73, 1345, 848, 2093,
	331, 2089, 1859, 568, 848, 2085, 505, 538, 1345, 335,
	1257, 2077, 856, 1164, 2076, 853, 854, 545, 2047, 2034,
	2031, 2048, 1859, 848, 1351, 2029, 72, 79, 1859, 2010,
	553, 529, 1345, 1323, 1991, 1633, 855, 848, 856, 1990,
	1964, 1915, 1859, 1351, 1351, 2099, 72, 1893, 981, 842,
	1351, 537, 47, 1167, 81, 1890, 1258, 559, 1345, 1633,
	565, 48, 855, 572, 1880, 1121, 1879, 1351, 870, 1351,
	1520, 1521, 47, 1538, 1539, 1540, 1858, 1788, 1302, 1859,
	1317, 48, 1607, 1761, 1783, 49, 1887, 1317, 82, 1700,
	1610, 1703, 1351, 848, 861, 1567, 77, 1164, 1568, 1565,
	1259, 1256, 1351, 78, 1564, 49, 1563, 1351, 1129, 1351,
	1611, 96, 96, 96, 96, 96, 96, 848, 528, 1167,
	861, 1400, 76, 1535, 1351, 1487, 1486, 1362, 1239, 1484,
	1488, 1351, 1351, 1405, 809, 1039, 848, 853, 854, 575,
	873, 874, 875, 883, 884, 885, 1355, 719, 558, 1351,
	966, 871, 966, 876, 1350, 1344, 966, 1351, 1345, 1316,
	856, 1128, 1317, 887, 1127, 974, 546, 1494, 975, 676,
	83, 581, 1648, 1061, 1261, 1526, 745, 871, 853, 854,
	1862, 2182, 2161, 2154, 855, 2117, 79, 853, 854, 1956,
	870, 2173, 808, 525, 1587, 79, 704, 2080, 2032, 1920,
	1923, 856, 1916, 1908, 1907, 1906, 79, 1902, 1901, 1900,
	856, 1899, 1541, 81, 1838, 62, 701, 701, 1613, 336,
	1811, 1121, 81, 872, 1792, 855, 79, 1776, 1771, 1770,
	1769, 1711, 1536, 81, 855, 62, 1609, 96, 819, 708,
	1572, 530, 861, 702, 1569, 1646, 1231, 82, 1255, 872,
	1557, 1548, 685, 81, 96, 1519, 82, 96, 96, 1520,
	1521, 880, 888, 969, 77, 964, 915, 82, 528, 1087,
	1349, 78, 1516, 1515, 1513, 77, 528, 529, 1500, 886,
	1499, 76, 78, 861, 1418, 1267, 693, 82, 1266, 808,
	1322, 1094, 861, 878, 908, 77, 76, 1790, 807, 871,
	683, 76, 78, 1727, 1537, 96, 2134, 2096, 2075, 2074,
	2073, 96, 864, 865, 857, 858, 859, 860, 862, 863,
	614, 76, 2065, 2050, 877, 2063, 2055, 2043, 2027, 2018,
	1977, 749, 96, 96, 96, 1966, 96, 866, 864, 865,
	857, 858, 859, 860, 862, 863, 1931, 1913, 1232, 908,
	1922, 96, 1885, 1865, 794, 1826, 1802, 1800, 1799, 1797,
	1695, 1670, 96, 1669, 1526, 1547, 1509, 1508, 1505, 1480,
	1475, 872, 741, 1225, 1447, 528, 96, 1445, 1432, 1431,
	1404, 942, 334, 528, 748, 945, 881, 1532, 1533, 1534,
	1309, 1265, 1531, 1529, 1530, 1522, 1523, 1524, 1525, 1527,
	1528, 849, 818, 1088, 917, 563, 949, 935, 934, 933,
	932, 931, 793, 724, 726, 729, 930, 929, 928, 927,
	817, 1536, 926, 925, 924, 1432, 923, 529, 1520, 1521,
	749, 922, 921, 920, 786, 529, 789, 919, 749, 912,
	901, 76, 780, 812, 546, 728, 715, 713, 1953, 1928,
	1927, 879, 1895, 778, 867, 868, 869, 882, 1827, 866,
	864, 865, 857, 858, 859, 860, 862, 863, 1597, 581,
	1520, 1521, 1520, 1521, 1596, 1917, 899, 819, 739, 2079,
	2053, 1624, 538, 846, 1926, 96, 782, 530, 737, 1589,
	96, 96, 96, 1537, 96, 1164, 804, 805, 1648, 1571,
	1045, 1570, 810, 857, 858, 859, 860, 862, 863, 853,
	854, 96, 96, 947, 859, 860, 862, 863, 948, 96,
	954, 526, 1396, 96, 684, 847, 537, 1954, 96, 1459,
	1395, 738, 856, 1526, 529, 768, 740, 1092, 528, 528,
	1457, 335, 529, 1943, 836, 1319, 334, 853, 854, 1257,
	1728, 1246, 96, 911, 938, 96, 855, 96, 96, 96,
	96, 96, 96, 834, 772, 1062, 968, 1491, 96, 971,
	856, 535, 1583, 96, 96, 1526, 1657, 829, 835, 830,
	96, 2120, 939, 940, 1522, 1523, 1524, 1525, 1527, 1528,
	1604, 96, 2179, 2088, 855, 1258, 311, 1873, 2180, 1093,
	504, 773, 943, 503, 1354, 914, 498, 829, 499, 830,
	96, 86, 946, 96, 861, 765, 1076, 829, 678, 830,
	766, 2001, 96, 2000, 1141, 1999, 1046, 1998, 1110, 978,
	96, 1685, 1684, 1789, 96, 819, 958, 530, 955, 1259,
	1256, 307, 96, 96, 737, 530, 96, 1654, 1086, 96,
	1653, 831, 312, 1504, 1065, 1503, 334, 1502, 1501, 73,
	1033, 1462, 1352, 1063, 1207, 693, 1032, 85, 1098, 1037,
	1034, 871, 1134, 1036, 904, 1177, 1161, 544, 1133, 1057,
	1056, 831, 1050, 1160, 1681, 1157, 976, 738, 779, 1144,
	574, 831, 308, 1119, 1884, 1313, 1067, 529, 529, 1071,
	1072, 1073, 1074, 1075, 1070, 335, 1145, 1147, 2087, 1312,
	1178, 1391, 1133, 1261, 1080, 1081, 1083, 1085, 1132, 711,
	1084, 511, 1688, 1222, 1778, 1152, 543, 769, 1155, 1064,
	1100, 727, 1102, 1101, 1261, 538, 677, 1982, 538, 538,
	1117, 1222, 1573, 872, 530, 764, 954, 1125, 950, 1672,
	2132, 336, 530, 1166, 1286, 1524, 1525, 1527, 1528, 1158,
	96, 1137, 96, 96, 959, 96, 531, 1229, 96, 1218,
	96, 96, 1227, 96, 96, 545, 528, 762, 752, 1111,
	1398, 1399, 1112, 1113, 1216, 1143, 1246, 1255, 536, 2186,
	770, 313, 1243, 532, 1030, 1522, 1523, 1524, 1525, 1527,
	1528, 1452, 1528, 533, 1721, 2151, 84, 1038, 2179, 1150,
	839, 1449, 1577, 763, 753, 335, 1443, 751, 315, 844,
	1230, 1162, 843, 1581, 1603, 1233, 827, 2068, 314, 837,
	1605, 866, 864, 865, 857, 858, 859, 860, 862, 863,
	2201, 965, 771, 87, 838, 2195, 1321, 331, 1321, 1280,
	1386, 310, 309, 1212, 1339, 1082, 2128, 302, 710, 936,
	2185, 1213, 334, 1214, 832, 1204, 1577, 1219, 1142, 2014,
	96, 2028, 1336, 701, 542, 701, 896, 863, 1261, 1325,
	2129, 1363, 1334, 96, 96, 96, 1822, 73, 96, 96,
	2152, 1340, 73, 72, 832, 96, 1343, 708, 1341, 1337,
	1335, 1338, 1169, 1176, 832, 1679, 1348, 530, 530, 1673,
	840, 1837, 506, 1055, 1054, 336, 525, 520, 1507, 47,
	439, 303, 1634, 96, 334, 1406, 839, 545, 48, 1689,
	1417, 96, 96, 96, 1809, 529, 2150, 96, 1854, 1130,
	96, 1983, 2178, 1416, 2153, 837, 96, 96, 96, 96,
	96, 2176, 49, 940, 939, 943, 2184, 946, 96, 1356,
	838, 96, 96, 1202, 1205, 1464, 1472, 442, 528, 1215,
	1936, 1855, 1388, 1638, 756, 1718, 1217, 722, 2193, 1425,
	1236, 1470, 718, 1221, 442, 1455, 1358, 1240, 447, 507,
	73, 1248, 1641, 443, 1366, 1201, 1058, 1360, 1419, 800,
	1993, 1368, 1272, 1272, 1283, 447, 1294, 1636, 734, 1228,
	443, 1634, 1306, 1307, 1308, 2206, 1639, 1361, 1442, 1719,
	444, 335, 1394, 749, 1992, 336, 799, 2202, 966, 1359,
	1757, 1637, 2194, 1407, 987, 1911, 1975, 444, 1869, 446,
	1420, 1444, 626, 2060, 1446, 1656, 1950, 1872, 1286, 1286,
	1467, 1428, 2196, 1044, 1871, 1424, 446, 1389, 2113, 1024,
	1468, 1060, 1638, 1370, 1473, 1493, 1099, 1090, 1850, 1107,
	1851, 735, 1962, 79, 546, 736, 1458, 1059, 1638, 1717,
	1805, 1641, 62, 335, 798, 1079, 509, 1040, 1203, 1938,
	1976, 1640, 799, 1261, 1951, 1042, 1636, 1641, 1434, 1853,
	81, 1433, 1817, 1816, 450, 1639, 449, 1043, 1856, 800,
	691, 690, 1820, 1465, 2205, 1286, 1286, 1286, 96, 1463,
	1637, 1639, 1758, 96, 734, 96, 543, 529, 1759, 790,
	1479, 1795, 96, 1912, 82, 1868, 1963, 1929, 1108, 546,
	1454, 1973, 77, 96, 1490, 530, 1813, 445, 680, 78,
	798, 1870, 1631, 96, 96, 1264, 2017, 1949, 1910, 1551,
	1694, 1687, 508, 528, 445, 1974, 1469, 1574, 317, 1514,
	1474, 546, 1353, 1471, 987, 987, 1315, 1156, 1153, 775,
	1640, 96, 1852, 96, 774, 96, 767, 1429, 1285, 96,
	761, 1031, 760, 96, 759, 758, 1640, 606, 448, 757,
	754, 689, 1591, 582, 1592, 1593, 1554, 1555, 1556, 1552,
	1077, 1520, 1521, 1069, 1579, 448, 96, 918, 746, 1585,
	1263, 2146, 2110, 1843, 1677, 1612, 1675, 1614, 1655, 1582,
	1620, 336, 1392, 1384, 93, 93, 1342, 305, 1590, 973,
	972, 970, 967, 962, 526, 521, 845, 841, 433, 434,
	435, 1600, 1601, 833, 1668, 454, 1708, 1622, 468, 2022,
	1602, 679, 1667, 1666, 546, 802, 454, 1606, 556, 1520,
	1521, 1608, 2180, 1615, 1052, 552, 552, 1618, 2024, 305,
	1402, 688, 305, 305, 571, 305, 1149, 1616, 93, 578,
	89, 1286, 1286, 336, 1626, 1628, 1782, 1133, 3, 1652,
	1650, 2070, 687, 1148, 1478, 1676, 747, 1678, 96, 1862,
	1632, 1481, 1651, 1713, 1714, 1715, 1526, 73, 1594, 1680,
	1133, 1629, 529, 73, 2082, 1697, 1146, 1643, 1659, 1497,
	1498, 1686, 1018, 1814, 623, 803, 438, 530, 557, 806,
	1403, 323, 33, 329, 28, 328, 27, 1154, 327, 26,
	1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
	1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1546,
	1286, 1151, 1707, 1536, 1526, 579, 1720, 1722, 1723, 1704,
	1559, 576, 564, 1731, 1729, 497, 1734, 1854, 96, 96,
	1847, 1784, 1736, 451, 1595, 1764, 580, 2100, 1845, 325,
	25, 1934, 1849, 1387, 1383, 322, 17, 1324, 96, 1118,
	853, 854, 96, 1035, 96, 979, 1347, 2199, 2204, 1765,
	1855, 96, 2144, 1429, 528, 33, 1801, 28, 2103, 27,
	1959, 1536, 26, 856, 96, 1520, 1521, 96, 326, 12,
	1791, 1848, 1779, 330, 11, 1537, 334, 1785, 96, 1786,
	1017, 500, 501, 1777, 96, 96, 96, 855, 1798, 987,
	1787, 1724, 1442, 320, 10, 1829, 324, 9, 784, 1806,
	1828, 96, 1018, 1018, 1781, 1598, 96, 1796, 96, 1807,
	96, 96, 96, 25, 1566, 96, 96, 1866, 528, 17,
	1314, 1668, 1311, 1863, 583, 682, 1823, 1824, 1842, 1667,
	1666, 1819, 1808, 1537, 319, 8, 853, 854, 305, 694,
	305, 468, 468, 578, 1310, 1839, 1253, 1850, 905, 1851,
	321, 4, 12, 785, 1682, 1897, 1683, 11, 96, 2126,
	1815, 2007, 530, 1818, 1529, 1530, 1522, 1523, 1524, 1525,
	1527, 1528, 1883, 749, 1716, 1889, 1617, 10, 1853, 510,
	9, 1867, 915, 855, 853, 854, 913, 1856, 1981, 1701,
	1169, 1732, 784, 783, 440, 1068, 755, 1955, 1825, 1169,
	1737, 2127, 1903, 1506, 2039, 2013, 1262, 916, 46, 1664,
	1909, 600, 1844, 529, 1658, 1378, 1377, 337, 8, 1053,
	1017, 1017, 622, 1530, 1522, 1523, 1524, 1525, 1527, 1528,
	96, 96, 1768, 513, 4, 335, 1271, 528, 1170, 681,
	624, 984, 625, 985, 944, 1930, 612, 96, 96, 1668,
	1935, 96, 982, 706, 1668, 1328, 1762, 1667, 1666, 96,
	1226, 1852, 1667, 1666, 716, 1244, 96, 1772, 1489, 909,
	592, 720, 721, 604, 96, 603, 96, 529, 334, 96,
	1241, 723, 1939, 1957, 468, 468, 1941, 96, 1933, 712,
	1958, 1960, 1940, 334, 1967, 465, 987, 1971, 61, 461,
	1580, 1921, 1106, 1924, 1393, 1968, 1103, 1674, 1925, 534,
	1932, 1668, 1986, 1286, 1517, 714, 1969, 1292, 1284, 1667,
	1666, 1281, 781, 822, 897, 987, 954, 1329, 744, 1586,
	1985, 1984, 454, 1987, 1346, 811, 2003, 1114, 305, 555,
	554, 2002, 1373, 1946, 1947, 2012, 742, 1952, 1041, 1357,
	890, 889, 502, 96, 2062, 1832, 733, 732, 1385, 468,
	788, 468, 1427, 791, 2200, 2069, 1671, 96, 1286, 2119,
	528, 1996, 1997, 80, 96, 2078, 815, 815, 552, 2030,
	2005, 1453, 96, 1668, 34, 824, 986, 1018, 96, 305,
	32, 1667, 1666, 2019, 29, 24, 529, 96, 96, 22,
	2025, 21, 20, 93, 96, 2038, 31, 891, 892, 893,
	894, 895, 2057, 2064, 2042, 2036, 2046, 903, 19, 2049,
	2054, 30, 18, 530, 2058, 2037, 987, 910, 16, 96,
	96, 15, 14, 2023, 13, 45, 2067, 335, 44, 43,
	42, 41, 40, 7, 6, 336, 5, 2066, 2059, 2,
	1, 0, 335, 0, 2033, 96, 0, 0, 0, 96,
	2081, 0, 987, 987, 0, 2094, 0, 528, 2092, 0,
	0, 987, 987, 2095, 96, 1286, 0, 2056, 2045, 0,
	0, 0, 0, 0, 334, 96, 96, 530, 0, 0,
	0, 2098, 1020, 0, 96, 0, 96, 0, 2084, 96,
	2104, 334, 2102, 2105, 987, 1017, 546, 0, 0, 0,
	0, 0, 305, 0, 0, 0, 2107, 305, 305, 305,
	2121, 960, 2097, 1945, 2133, 2135, 986, 986, 2137, 529,
	96, 2125, 2136, 96, 0, 0, 2116, 0, 305, 305,
	0, 0, 2141, 0, 2138, 2140, 93, 2143, 1668, 2139,
	93, 0, 1995, 0, 2101, 468, 1667, 1666, 2156, 0,
	0, 0, 0, 96, 0, 96, 2108, 0, 0, 2171,
	2169, 2160, 0, 2168, 1989, 0, 2115, 96, 0, 468,
	0, 0, 468, 0, 93, 468, 468, 468, 468, 468,
	2177, 2175, 0, 2181, 1018, 1078, 2183, 0, 0, 0,
	468, 468, 0, 0, 2189, 1019, 530, 454, 0, 0,
	0, 2191, 1520, 1521, 0, 2198, 2197, 0, 1097, 0,
	1104, 0, 1109, 1018, 2203, 0, 529, 0, 1116, 0,
	0, 2207, 1020, 1020, 0, 0, 0, 552, 0, 0,
	578, 0, 0, 335, 0, 2170, 987, 336, 0, 305,
	0, 0, 0, 0, 601, 59, 0, 1138, 0, 0,
	335, 305, 336, 0, 0, 1535, 0, 0, 0, 305,
	1159, 1520, 1521, 305, 0, 0, 1165, 0, 983, 1179,
	1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189,
	1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
	1200, 0, 1206, 59, 1208, 1209, 1210, 1211, 0, 0,
	0, 0, 1017, 0, 0, 0, 0, 1526, 0, 0,
	0, 1234, 0, 0, 1018, 0, 0, 0, 539, 0,
	0, 547, 0, 0, 0, 596, 0, 0, 59, 530,
	0, 1017, 0, 1268, 1269, 1019, 1019, 1282, 0, 1293,
	1295, 1300, 1303, 1304, 1305, 0, 853, 854, 0, 0,
	1018, 1018, 0, 0, 0, 0, 0, 0, 0, 1018,
	1018, 0, 0, 0, 1536, 304, 1526, 0, 0, 856,
	0, 0, 2122, 2123, 2124, 0, 0, 305, 0, 1332,
	1333, 2130, 305, 0, 0, 305, 0, 468, 468, 0,
	468, 578, 1018, 855, 0, 0, 0, 0, 0, 1520,
	1521, 986, 1538, 1539, 1540, 0, 0, 560, 983, 983,
	567, 570, 0, 560, 987, 1886, 0, 0, 0, 0,
	0, 0, 0, 1536, 0, 0, 530, 0, 0, 0,
	0, 0, 1017, 0, 0, 0, 1537, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 0, 0, 0, 0,
	0, 861, 1535, 0, 987, 0, 0, 0, 0, 0,
	336, 0, 0, 0, 0, 0, 0, 0, 1017, 1017,
	0, 0, 0, 0, 0, 0, 0, 1017, 1017, 0,
	0, 0, 0, 0, 0, 0, 0, 1365, 0, 0,
	0, 0, 0, 0, 0, 1537, 0, 0, 0, 0,
	305, 305, 305, 0, 1526, 305, 1374, 1020, 871, 0,
	1017, 0, 578, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1531, 1529, 1530, 1522, 1523, 1524,
	1525, 1527, 1528, 815, 1018, 0, 0, 0, 0, 824,
	305, 1541, 0, 0, 0, 0, 0, 0, 305, 1422,
	1423, 0, 0, 0, 1138, 0, 0, 1430, 0, 987,
	0, 1536, 547, 1435, 1436, 1438, 1440, 1441, 0, 0,
	0, 0, 0, 0, 0, 1448, 0, 0, 1450, 305,
	872, 0, 0, 1531, 1529, 1530, 1522, 1523, 1524, 1525,
	1527, 1528, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 986, 0,
	0, 0, 0, 1460, 1461, 0, 0, 0, 0, 1466,
	1019, 0, 0, 0, 0, 0, 0, 0, 0, 1476,
	1477, 0, 0, 1537, 0, 0, 560, 986, 570, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1485, 1017, 0, 0, 0, 0, 0, 1492, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	865, 857, 858, 859, 860, 862, 863, 1510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 983, 0, 0, 1543, 1544, 1545, 0,
	0, 0, 903, 0, 0, 0, 0, 0, 1300, 1300,
	1300, 0, 1018, 0, 1020, 0, 1532, 1533, 1534, 0,
	0, 1531, 1529, 1530, 1522, 1523, 1524, 1525, 1527, 1528,
	0, 1578, 853, 854, 0, 305, 0, 0, 986, 0,
	305, 0, 1584, 1020, 0, 0, 0, 0, 0, 305,
	0, 0, 1018, 0, 0, 856, 0, 0, 0, 0,
	305, 0, 0, 1599, 0, 0, 0, 0, 0, 0,
	1365, 1365, 0, 0, 986, 986, 0, 0, 0, 855,
	0, 0, 0, 986, 986, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 0, 0, 0, 0, 1097, 0,
	1097, 0, 468, 0, 0, 0, 305, 1627, 0, 0,
	1625, 0, 1116, 0, 0, 0, 986, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1019, 0, 0,
	1017, 0, 0, 305, 0, 0, 560, 861, 900, 0,
	902, 0, 0, 1660, 1020, 0, 0, 906, 0, 0,
	1663, 0, 0, 0, 0, 0, 1019, 1018, 0, 0,
	0, 0, 1520, 1521, 0, 1538, 1539, 1540, 0, 0,
	1017, 1690, 1692, 1693, 1691, 0, 0, 0, 1699, 0,
	1020, 1020, 0, 0, 0, 0, 1696, 820, 0, 1020,
	1020, 0, 0, 0, 871, 1705, 0, 0, 0, 0,
	983, 0, 0, 1709, 0, 0, 1599, 0, 0, 0,
	0, 0, 0, 0, 0, 1535, 0, 0, 0, 0,
	0, 0, 1020, 0, 0, 1726, 1733, 0, 0, 983,
	1735, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746,
	1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756,
	0, 1760, 0, 0, 0, 0, 0, 1019, 986, 0,
	0, 0, 0, 1766, 1767, 0, 872, 1526, 0, 0,
	0, 0, 1773, 1774, 1775, 1017, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 815,
	0, 59, 0, 1019, 1019, 0, 0, 0, 0, 0,
	0, 824, 1019, 1019, 1541, 305, 305, 0, 0, 0,
	953, 0, 0, 0, 0, 560, 957, 957, 0, 0,
	0, 0, 0, 0, 1536, 1793, 0, 0, 0, 1138,
	983, 1097, 0, 0, 0, 1019, 567, 570, 1803, 0,
	0, 0, 0, 0, 0, 0, 539, 0, 0, 539,
	539, 305, 0, 0, 305, 0, 0, 857, 858, 859,
	860, 862, 863, 0, 1020, 1836, 983, 983, 0, 0,
	0, 1840, 1841, 1138, 0, 983, 983, 1864, 0, 0,
	59, 0, 0, 59, 0, 0, 0, 1663, 578, 0,
	0, 0, 0, 1874, 0, 1875, 1537, 305, 1877, 1878,
	0, 0, 1881, 305, 0, 0, 1888, 0, 983, 0,
	1891, 1892, 0, 0, 0, 1894, 0, 0, 0, 0,
	0, 0, 1896, 0, 1898, 0, 0, 0, 0, 0,
	0, 0, 0, 1224, 0, 0, 986, 0, 0, 0,
	1905, 0, 0, 0, 0, 1904, 0, 1126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 560,
	0, 0, 0, 0, 0, 0, 0, 570, 0, 0,
	0, 560, 0, 1914, 0, 0, 986, 1019, 0, 1532,
	1533, 1534, 0, 0, 1531, 1529, 1530, 1522, 1523, 1524,
	1525, 1527, 1528, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 59, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1663, 0, 578, 1374, 59,
	1663, 0, 0, 0, 59, 1944, 0, 0, 0, 0,
	0, 0, 0, 0, 305, 305, 0, 0, 305, 0,
	0, 0, 1020, 0, 0, 0, 1836, 0, 0, 0,
	983, 0, 0, 1965, 0, 0, 0, 0, 0, 0,
	0, 1138, 0, 1970, 1978, 0, 1972, 0, 0, 0,
	0, 0, 0, 0, 305, 0, 0, 1663, 0, 0,
	0, 986, 1020, 1994, 0, 1330, 0, 0, 0, 0,
	570, 0, 0, 570, 0, 0, 0, 0, 2008, 2009,
	0, 0, 2004, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2016,
	0, 0, 59, 0, 0, 0, 0, 0, 0, 2021,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 1663,
	0, 0, 0, 0, 305, 1019, 0, 0, 0, 0,
	0, 2041, 2044, 0, 0, 0, 0, 1413, 0, 305,
	0, 0, 0, 0, 0, 1836, 0, 0, 0, 0,
	0, 0, 0, 0, 578, 1836, 0, 1020, 0, 2061,
	0, 1097, 0, 0, 0, 1019, 59, 0, 0, 59,
	0, 0, 0, 0, 0, 0, 0, 0, 1367, 570,
	1369, 0, 0, 560, 0, 0, 2071, 2072, 0, 0,
	0, 0, 0, 0, 0, 0, 2083, 0, 983, 853,
	854, 0, 873, 874, 875, 883, 884, 885, 0, 824,
	0, 0, 2090, 0, 0, 876, 2091, 0, 1412, 0,
	1224, 0, 856, 0, 0, 887, 1421, 0, 0, 0,
	0, 578, 0, 0, 0, 0, 0, 0, 983, 0,
	902, 0, 1836, 578, 0, 0, 855, 0, 0, 0,
	0, 2114, 870, 578, 0, 0, 305, 1451, 0, 853,
	854, 0, 873, 874, 875, 883, 884, 885, 0, 0,
	1019, 0, 0, 0, 0, 876, 0, 0, 0, 0,
	0, 0, 856, 0, 1663, 887, 0, 2041, 0, 0,
	1836, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2157, 0, 861, 902, 855, 0, 0, 0,
	2167, 2167, 870, 0, 0, 0, 0, 0, 0, 0,
	305, 0, 578, 880, 888, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2174, 0, 0, 547, 0, 0,
	0, 886, 0, 983, 0, 0, 2167, 0, 0, 0,
	0, 0, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 871, 0, 0, 861, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2167, 0, 880, 888, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	0, 886, 59, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1575, 0, 878, 0, 0, 953, 59,
	0, 871, 0, 0, 0, 59, 0, 953, 0, 0,
	1649, 0, 0, 872, 0, 0, 0, 0, 560, 0,
	0, 0, 0, 0, 0, 0, 877, 0, 881, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1619, 0, 0, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 881, 0,
	0, 1412, 0, 879, 0, 0, 867, 868, 869, 882,
	0, 866, 864, 865, 857, 858, 859, 860, 862, 863,
	0, 0, 0, 0, 0, 0, 0, 1562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 853, 854,
	0, 873, 874, 875, 883, 884, 885, 0, 0, 0,
	0, 0, 0, 0, 876, 0, 0, 0, 0, 0,
	0, 856, 0, 879, 887, 0, 867, 868, 869, 882,
	0, 866, 864, 865, 857, 858, 859, 860, 862, 863,
	0, 0, 0, 0, 0, 855, 0, 1561, 0, 0,
	0, 870, 0, 1413, 0, 0, 0, 0, 0, 853,
	854, 0, 873, 874, 875, 883, 884, 885, 0, 0,
	0, 0, 0, 0, 0, 876, 0, 0, 0, 0,
	0, 0, 856, 0, 0, 887, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1413, 0,
	0, 1413, 0, 861, 0, 0, 855, 0, 0, 0,
	0, 0, 870, 0, 0, 0, 0, 0, 853, 854,
	0, 0, 880, 888, 883, 884, 885, 0, 0, 0,
	0, 0, 0, 1330, 1412, 0, 0, 0, 0, 0,
	886, 856, 0, 0, 887, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 878, 0, 0, 0, 0, 0,
	871, 0, 0, 0, 861, 855, 0, 0, 0, 0,
	0, 870, 0, 0, 0, 0, 0, 0, 0, 1412,
	0, 0, 1412, 880, 888, 877, 853, 854, 0, 873,
	874, 875, 883, 884, 885, 0, 0, 0, 0, 0,
	0, 886, 0, 0, 0, 0, 0, 0, 0, 856,
	0, 0, 887, 0, 0, 878, 0, 0, 0, 0,
	0, 871, 0, 861, 0, 1876, 0, 0, 0, 0,
	0, 1882, 872, 855, 0, 0, 0, 0, 0, 870,
	0, 0, 880, 888, 0, 0, 877, 881, 59, 0,
	853, 854, 0, 873, 874, 875, 883, 884, 885, 0,
	0, 0, 0, 0, 0, 0, 876, 0, 0, 0,
	0, 0, 0, 856, 878, 0, 887, 0, 0, 0,
	871, 1413, 1413, 0, 0, 1413, 0, 0, 0, 0,
	0, 861, 0, 872, 0, 0, 0, 855, 0, 0,
	0, 0, 0, 870, 0, 0, 0, 0, 881, 0,
	880, 888, 879, 0, 0, 867, 868, 869, 882, 0,
	866, 864, 865, 857, 858, 859, 860, 862, 863, 0,
	0, 0, 0, 0, 0, 0, 1560, 0, 0, 0,
	0, 0, 878, 0, 0, 0, 0, 0, 871, 0,
	0, 0, 872, 0, 0, 861, 0, 0, 0, 0,
	0, 0, 1412, 1412, 0, 0, 1412, 881, 0, 0,
	0, 0, 0, 879, 880, 888, 867, 868, 869, 882,
	0, 866, 864, 865, 857, 858, 859, 860, 862, 863,
	0, 2026, 886, 0, 0, 0, 0, 1512, 0, 59,
	0, 0, 1979, 0, 0, 0, 878, 0, 0, 0,
	0, 0, 871, 0, 0, 0, 1413, 0, 0, 0,
	872, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 879, 0, 0, 881, 0, 877, 882, 0,
	866, 864, 865, 857, 858, 859, 860, 862, 863, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2035, 0, 872, 0, 0, 0, 0, 0,
	0, 0, 902, 0, 0, 0, 0, 1412, 0, 881,
	879, 0, 0, 867, 868, 869, 882, 0, 866, 864,
	865, 857, 858, 859, 860, 862, 863, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 879, 0, 0, 867, 868, 869,
	882, 0, 866, 864, 865, 857, 858, 859, 860, 862,
	863, 0, 0, 0, 0, 2111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2118, 0, 0, 0, 0, 333,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 99, 352, 100, 353,
	354, 355, 356, 245, 357, 358, 359, 360, 101, 102,
	103, 246, 247, 248, 249, 104, 250, 251, 361, 105,
	252, 253, 106, 107, 362, 363, 254, 255, 256, 364,
	108, 257, 365, 338, 366, 109, 110, 111, 1330, 112,
	367, 113, 114, 115, 368, 339, 116, 117, 369, 370,
	371, 372, 373, 374, 118, 119, 306, 120, 258, 121,
	259, 260, 375, 122, 376, 123, 377, 378, 379, 124,
	125, 380, 126, 381, 0, 382, 261, 127, 128, 129,
	262, 263, 383, 384, 385, 130, 131, 264, 265, 266,
	0, 132, 386, 133, 387, 388, 340, 389, 134, 267,
	390, 268, 391, 135, 136, 137, 138, 269, 270, 342,
	392, 142, 393, 139, 394, 341, 140, 271, 141, 272,
	273, 274, 275, 276, 395, 277, 396, 343, 143, 144,
	344, 145, 146, 147, 397, 149, 148, 398, 278, 345,
	150, 346, 399, 151, 400, 401, 152, 0, 153, 154,
	155, 157, 279, 156, 347, 158, 159, 161, 160, 402,
	403, 404, 280, 162, 281, 163, 164, 405, 165, 406,
	407, 166, 408, 409, 167, 282, 348, 168, 349, 283,
	169, 170, 171, 172, 173, 410, 284, 174, 285, 175,
	411, 176, 177, 178, 179, 180, 286, 181, 182, 412,
	183, 184, 185, 186, 187, 189, 190, 188, 191, 192,
	193, 194, 413, 195, 350, 196, 197, 287, 198, 0,
	202, 203, 204, 205, 414, 288, 206, 207, 208, 415,
	209, 199, 200, 210, 351, 211, 289, 290, 212, 416,
	218, 213, 214, 201, 215, 217, 291, 216, 292, 417,
	219, 418, 220, 221, 222, 223, 224, 419, 293, 294,
	295, 420, 421, 225, 226, 296, 297, 422, 227, 228,
	229, 230, 423, 424, 231, 232, 233, 234, 425, 235,
	426, 298, 236, 237, 238, 299, 300, 427, 428, 239,
	429, 430, 431, 432, 240, 241, 242, 243, 244, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	333, 0, 0, 0, 0, 0, 0, 1830, 0, 0,
	0, 0, 0, 0, 0, 1831, 98, 99, 352, 100,
	353, 354, 355, 356, 245, 357, 358, 359, 360, 101,
	102, 103, 246, 247, 248, 249, 104, 250, 251, 361,
	105, 252, 253, 106, 107, 362, 363, 254, 255, 256,
	364, 108, 257, 365, 338, 366, 109, 110, 111, 0,
	112, 367, 113, 114, 115, 368, 339, 116, 117, 369,
	370, 371, 372, 373, 374, 118, 119, 306, 120, 258,
	121, 259, 260, 375, 122, 376, 123, 377, 378, 379,
	124, 125, 380, 126, 381, 0, 382, 261, 127, 128,
	129, 262, 263, 383, 384, 385, 130, 131, 264, 265,
	266, 0, 132, 386, 133, 387, 388, 340, 389, 134,
	267, 390, 268, 391, 135, 136, 137, 138, 269, 270,
	342, 392, 142, 393, 139, 394, 341, 140, 271, 141,
	272, 273, 274, 275, 276, 395, 277, 396, 343, 143,
	144, 344, 145, 146, 147, 397, 149, 148, 398, 278,
	345, 150, 346, 399, 151, 400, 401, 152, 0, 153,
	154, 155, 157, 279, 156, 347, 158, 159, 161, 160,
	402, 403, 404, 280, 162, 281, 163, 164, 405, 165,
	406, 407, 166, 408, 409, 167, 282, 348, 168, 349,
	283, 169, 170, 171, 172, 173, 410, 284, 174, 285,
	175, 411, 176, 177, 178, 179, 180, 286, 181, 182,
	412, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 413, 195, 350, 196, 197, 287, 198,
	0, 202, 203, 204, 205, 414, 288, 206, 207, 208,
	415, 209, 199, 200, 210, 351, 211, 289, 290, 212,
	416, 218, 213, 214, 201, 215, 217, 291, 216, 292,
	417, 219, 418, 220, 221, 222, 223, 224, 419, 293,
	294, 295, 420, 421, 225, 226, 296, 297, 422, 227,
	228, 229, 230, 423, 424, 231, 232, 233, 234, 425,
	235, 426, 298, 236, 237, 238, 299, 300, 427, 428,
	239, 429, 430, 431, 432, 240, 241, 242, 243, 244,
	0, 0, 0, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2106, 98,
	99, 352, 100, 353, 354, 355, 356, 245, 357, 358,
	359, 360, 101, 102, 103, 246, 247, 248, 249, 104,
	250, 251, 361, 105, 252, 253, 106, 107, 362, 363,
	254, 255, 256, 364, 108, 257, 365, 338, 366, 109,
	110, 111, 0, 112, 367, 113, 114, 115, 368, 339,
	116, 117, 369, 370, 371, 372, 373, 374, 118, 119,
	306, 120, 258, 121, 259, 260, 375, 122, 376, 123,
	377, 378, 379, 124, 125, 380, 126, 381, 0, 382,
	261, 127, 128, 129, 262, 263, 383, 384, 385, 130,
	131, 264, 265, 266, 0, 132, 386, 133, 387, 388,
	340, 389, 134, 267, 390, 268, 391, 135, 136, 137,
	138, 269, 270, 342, 392, 142, 393, 139, 394, 341,
	140, 271, 141, 272, 273, 274, 275, 276, 395, 277,
	396, 343, 143, 144, 344, 145, 146, 147, 397, 149,
	148, 398, 278, 345, 150, 346, 399, 151, 400, 401,
	152, 0, 153, 154, 155, 157, 279, 156, 347, 158,
	159, 161, 160, 402, 403, 404, 280, 162, 281, 163,
	164, 405, 165, 406, 407, 166, 408, 409, 167, 282,
	348, 168, 349, 283, 169, 170, 171, 172, 173, 410,
	284, 174, 285, 175, 411, 176, 177, 178, 179, 180,
	286, 181, 182, 412, 183, 184, 185, 186, 187, 189,
	190, 188, 191, 192, 193, 194, 413, 195, 350, 196,
	197, 287, 198, 0, 202, 203, 204, 205, 414, 288,
	206, 207, 208, 415, 209, 199, 200, 210, 351, 211,
	289, 290, 212, 416, 218, 213, 214, 201, 215, 217,
	291, 216, 292, 417, 219, 418, 220, 221, 222, 223,
	224, 419, 293, 294, 295, 420, 421, 225, 226, 296,
	297, 422, 227, 228, 229, 230, 423, 424, 231, 232,
	233, 234, 425, 235, 426, 298, 236, 237, 238, 299,
	300, 427, 428, 239, 429, 430, 431, 432, 240, 241,
	242, 243, 244, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 850, 0, 0, 98,
	99, 352, 100, 353, 354, 355, 356, 245, 357, 358,
	359, 360, 101, 102, 103, 246, 247, 248, 249, 104,
	250, 251, 361, 105, 252, 253, 106, 107, 362, 363,
	254, 255, 256, 364, 108, 257, 365, 338, 366, 109,
	110, 111, 0, 112, 367, 113, 114, 115, 368, 339,
	116, 117, 369, 370, 371, 372, 373, 374, 118, 119,
	306, 120, 258, 121, 259, 260, 375, 122, 376, 123,
	377, 378, 379, 124, 125, 380, 126, 381, 0, 382,
	261, 127, 128, 129, 262, 263, 383, 384, 385, 130,
	131, 264, 265, 266, 0, 132, 386, 133, 387, 388,
	340, 389, 134, 267, 390, 268, 391, 135, 136, 137,
	138, 269, 270, 342, 392, 142, 393, 139, 394, 341,
	140, 271, 141, 272, 273, 274, 275, 276, 395, 277,
	396, 343, 143, 144, 344, 145, 146, 147, 397, 149,
	148, 398, 278, 345, 150, 346, 399, 151, 400, 401,
	152, 0, 153, 154, 155, 157, 279, 156, 347, 158,
	159, 161, 160, 402, 403, 404, 280, 162, 281, 163,
	164, 405, 165, 406, 407, 166, 408, 409, 167, 282,
	348, 168, 349, 283, 169, 170, 171, 172, 173, 410,
	284, 174, 285, 175, 411, 176, 177, 178, 179, 180,
	286, 181, 182, 412, 183, 184, 185, 186, 187, 189,
	190, 188, 191, 192, 193, 194, 413, 195, 350, 196,
	197, 287, 198, 0, 202, 203, 204, 205, 414, 288,
	206, 207, 208, 415, 209, 199, 200, 210, 351, 211,
	289, 290, 212, 416, 218, 213, 214, 201, 215, 217,
	291, 216, 292, 417, 219, 418, 220, 221, 222, 223,
	224, 419, 293, 294, 295, 420, 421, 225, 226, 296,
	297, 422, 227, 228, 229, 230, 423, 424, 231, 232,
	233, 234, 425, 235, 426, 298, 236, 237, 238, 299,
	300, 427, 428, 239, 429, 430, 431, 432, 240, 241,
	242, 243, 244, 620, 609, 610, 607, 608, 599, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 636, 602, 0,
	0, 0, 101, 102, 103, 246, 651, 248, 652, 104,
	653, 654, 0, 105, 252, 253, 106, 107, 605, 635,
	655, 656, 256, 0, 108, 647, 0, 628, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 339,
	116, 117, 0, 629, 631, 0, 630, 632, 118, 119,
	306, 120, 657, 121, 658, 659, 825, 122, 0, 123,
	0, 0, 0, 650, 125, 0, 126, 0, 0, 0,
	593, 127, 128, 129, 637, 638, 616, 0, 0, 130,
	131, 660, 661, 662, 0, 132, 0, 133, 0, 0,
	340, 0, 134, 648, 0, 268, 0, 135, 136, 137,
	138, 644, 646, 342, 0, 142, 0, 139, 0, 341,
	140, 663, 141, 664, 665, 666, 667, 668, 0, 627,
	0, 343, 143, 144, 344, 145, 146, 147, 0, 149,
	148, 0, 649, 345, 150, 346, 0, 151, 0, 0,
	152, 0, 153, 154, 155, 157, 279, 156, 347, 158,
	159, 161, 160, 588, 0, 617, 645, 162, 669, 163,
	164, 0, 165, 0, 0, 166, 0, 0, 167, 282,
	348, 168, 349, 639, 169, 170, 171, 172, 173, 0,
	640, 174, 285, 175, 0, 176, 177, 178, 179, 180,
	670, 181, 182, 0, 183, 184, 185, 186, 187, 189,
	190, 188, 191, 192, 193, 194, 0, 195, 350, 196,
	197, 594, 198, 0, 202, 203, 204, 205, 79, 288,
	206, 207, 208, 633, 209, 199, 200, 210, 351, 211,
	671, 290, 212, 0, 218, 213, 214, 201, 215, 217,
	672, 216, 641, 0, 219, 81, 220, 221, 222, 223,
	224, 0, 293, 673, 674, 0, 0, 225, 226, 642,
	643, 615, 227, 228, 229, 230, 0, 0, 231, 232,
	233, 234, 634, 235, 0, 298, 236, 237, 238, 709,
	675, 0, 0, 239, 0, 0, 0, 77, 240, 241,
	242, 243, 244, 589, 78, 0, 0, 0, 0, 587,
	0, 0, 0, 0, 585, 586, 620, 609, 610, 607,
	608, 599, 0, 595, 0, 0, 0, 0, 598, 0,
	0, 0, 98, 99, 1250, 100, 0, 0, 0, 0,
	636, 602, 0, 0, 0, 101, 102, 103, 246, 651,
	248, 652, 104, 653, 654, 0, 105, 252, 253, 106,
	107, 605, 635, 655, 656, 256, 0, 108, 647, 0,
	628, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 339, 116, 117, 0, 629, 631, 0, 630,
	632, 118, 119, 306, 120, 657, 121, 658, 659, 0,
	122, 0, 123, 0, 1251, 0, 650, 125, 0, 126,
	0, 0, 0, 593, 127, 128, 129, 637, 638, 616,
	0, 0, 130, 131, 660, 661, 662, 0, 132, 0,
	133, 0, 0, 340, 0, 134, 648, 0, 268, 0,
	135, 136, 137, 138, 644, 646, 342, 0, 142, 0,
	139, 0, 341, 140, 663, 141, 664, 665, 666, 667,
	668, 0, 627, 0, 343, 143, 144, 344, 145, 146,
	147, 0, 149, 148, 0, 649, 345, 150, 346, 0,
	151, 0, 0, 152, 0, 153, 154, 155, 157, 279,
	156, 347, 158, 159, 161, 160, 588, 0, 617, 645,
	162, 669, 163, 164, 0, 165, 0, 0, 166, 0,
	0, 167, 282, 348, 168, 349, 639, 169, 170, 171,
	172, 173, 0, 640, 174, 285, 175, 0, 176, 177,
	178, 179, 180, 670, 181, 182, 0, 183, 184, 185,
	186, 187, 189, 190, 188, 191, 192, 193, 194, 0,
	195, 350, 196, 197, 594, 198, 0, 202, 203, 204,
	205, 0, 288, 206, 207, 208, 633, 209, 199, 200,
	210, 351, 211, 671, 290, 212, 0, 218, 213, 214,
	201, 215, 217, 672, 216, 641, 0, 219, 0, 220,
	221, 222, 223, 224, 0, 293, 673, 674, 0, 0,
	225, 226, 642, 643, 615, 227, 228, 229, 230, 0,
	0, 231, 232, 233, 234, 634, 235, 0, 298, 236,
	237, 238, 299, 675, 1249, 0, 239, 0, 0, 0,
	0, 240, 241, 242, 243, 244, 589, 0, 0, 0,
	0, 0, 587, 0, 0, 0, 0, 585, 586, 1252,
	620, 609, 610, 607, 608, 599, 595, 1247, 0, 0,
	0, 598, 0, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 636, 602, 0, 0, 0, 101,
	102, 103, 246, 651, 248, 652, 104, 653, 654, 0,
	105, 252, 253, 106, 107, 605, 635, 655, 656, 256,
	0, 108, 647, 0, 628, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 339, 116, 117, 0,
	629, 631, 0, 630, 632, 118, 119, 306, 120, 657,
	121, 658, 659, 0, 122, 0, 123, 0, 0, 0,
	650, 125, 0, 126, 0, 0, 0, 593, 127, 128,
	129, 637, 638, 616, 0, 0, 130, 131, 660, 661,
	662, 0, 132, 0, 133, 0, 0, 340, 0, 134,
	648, 0, 268, 0, 135, 136, 137, 138, 644, 646,
	342, 0, 142, 0, 139, 0, 341, 140, 663, 141,
	664, 665, 666, 667, 668, 0, 627, 0, 343, 143,
	144, 344, 145, 146, 147, 0, 149, 148, 0, 649,
	345, 150, 346, 0, 151, 0, 0, 152, 0, 153,
	154, 155, 157, 279, 156, 347, 158, 159, 161, 160,
	588, 0, 617, 645, 162, 669, 163, 164, 0, 165,
	0, 0, 166, 0, 0, 167, 282, 348, 168, 349,
	639, 169, 170, 171, 172, 173, 0, 640, 174, 285,
	175, 0, 176, 177, 178, 179, 180, 670, 181, 182,
	0, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 0, 195, 350, 196, 197, 594, 198,
	0, 202, 203, 204, 205, 79, 288, 206, 207, 208,
	633, 209, 199, 200, 210, 351, 211, 671, 290, 212,
	0, 218, 213, 214, 201, 215, 217, 672, 216, 641,
	0, 219, 81, 220, 221, 222, 223, 224, 0, 293,
	673, 674, 0, 0, 225, 226, 642, 643, 615, 227,
	228, 229, 230, 0, 0, 231, 232, 233, 234, 634,
	235, 0, 298, 236, 237, 238, 709, 675, 0, 0,
	239, 0, 0, 0, 77, 240, 241, 242, 243, 244,
	589, 78, 0, 0, 0, 0, 587, 0, 0, 0,
	0, 585, 586, 620, 609, 610, 607, 608, 599, 0,
	595, 0, 0, 0, 0, 598, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 636, 602, 0,
	0, 0, 101, 102, 103, 246, 651, 248, 652, 104,
	653, 654, 1296, 105, 252, 253, 106, 107, 605, 635,
	655, 656, 256, 0, 108, 647, 0, 628, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 339,
	116, 117, 0, 629, 631, 0, 630, 632, 118, 119,
	306, 120, 657, 121, 658, 659, 0, 122, 0, 123,
	0, 0, 0, 650, 125, 0, 126, 0, 0, 0,
	593, 127, 128, 129, 637, 638, 616, 0, 0, 130,
	131, 660, 661, 662, 0, 132, 0, 133, 0, 1301,
	340, 0, 134, 648, 0, 268, 0, 135, 136, 137,
	138, 644, 646, 342, 0, 142, 0, 139, 0, 341,
	140, 663, 141, 664, 665, 666, 667, 668, 0, 627,
	0, 343, 143, 144, 344, 145, 146, 147, 0, 149,
	148, 1297, 649, 345, 150, 346, 0, 151, 0, 0,
	152, 0, 153, 154, 155, 157, 279, 156, 347, 158,
	159, 161, 160, 588, 0, 617, 645, 162, 669, 163,
	164, 0, 165, 0, 0, 166, 0, 0, 167, 282,
	348, 168, 349, 639, 169, 170, 171, 172, 173, 0,
	640, 174, 285, 175, 0, 176, 177, 178, 179, 180,
	670, 181, 182, 0, 183, 184, 185, 186, 187, 189,
	190, 188, 191, 192, 193, 194, 0, 195, 350, 196,
	197, 594, 198, 0, 202, 203, 204, 205, 0, 288,
	206, 207, 208, 633, 209, 199, 200, 210, 351, 211,
	671, 290, 212, 0, 218, 213, 214, 201, 215, 217,
	672, 216, 641, 0, 219, 0, 220, 221, 222, 223,
	224, 0, 293, 673, 674, 0, 1298, 225, 226, 642,
	643, 615, 227, 228, 229, 230, 0, 0, 231, 232,
	233, 234, 634, 235, 0, 298, 236, 237, 238, 299,
	675, 0, 0, 239, 0, 0, 0, 0, 240, 241,
	242, 243, 244, 589, 0, 0, 0, 0, 0, 587,
	0, 0, 0, 0, 585, 586, 620, 609, 610, 607,
	608, 599, 0, 595, 0, 0, 0, 0, 598, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	636, 602, 0, 0, 0, 101, 102, 103, 246, 651,
	248, 652, 104, 653, 654, 0, 105, 252, 253, 106,
	107, 605, 635, 655, 656, 256, 0, 108, 647, 0,
	628, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 339, 116, 117, 0, 629, 631, 0, 630,
	632, 118, 119, 306, 120, 657, 121, 658, 659, 0,
	122, 0, 123, 0, 0, 0, 650, 125, 0, 126,
	0, 0, 0, 593, 127, 128, 129, 637, 638, 616,
	0, 0, 130, 131, 660, 661, 662, 0, 132, 0,
	133, 0, 0, 340, 0, 134, 648, 0, 268, 0,
	135, 136, 137, 138, 644, 646, 342, 0, 142, 0,
	139, 0, 341, 140, 663, 141, 664, 665, 666, 667,
	668, 0, 627, 0, 343, 143, 144, 344, 145, 146,
	147, 0, 149, 148, 0, 649, 345, 150, 346, 0,
	151, 0, 0, 152, 0, 153, 154, 155, 157, 279,
	156, 347, 158, 159, 161, 160, 588, 1780, 617, 645,
	162, 669, 163, 164, 0, 165, 0, 0, 166, 0,
	0, 167, 282, 348, 168, 349, 639, 169, 170, 171,
	172, 173, 0, 640, 174, 285, 175, 0, 176, 177,
	178, 179, 180, 670, 181, 182, 0, 183, 184, 185,
	186, 187, 189, 190, 188, 191, 192, 193, 194, 0,
	195, 350, 196, 197, 594, 198, 0, 202, 203, 204,
	205, 0, 288, 206, 207, 208, 633, 209, 199, 200,
	210, 351, 211, 671, 290, 212, 0, 218, 213, 214,
	201, 215, 217, 672, 216, 641, 0, 219, 0, 220,
	221, 222, 223, 224, 0, 293, 673, 674, 0, 0,
	225, 226, 642, 643, 615, 227, 228, 229, 230, 0,
	0, 231, 232, 233, 234, 634, 235, 0, 298, 236,
	237, 238, 299, 675, 0, 0, 239, 0, 0, 0,
	0, 240, 241, 242, 243, 244, 589, 0, 0, 0,
	0, 0, 587, 0, 0, 0, 0, 585, 586, 816,
	620, 609, 610, 607, 608, 599, 595, 0, 0, 0,
	0, 598, 0, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 636, 602, 0, 0, 0, 101,
	102, 103, 246, 651, 248, 652, 104, 653, 654, 0,
	105, 252, 253, 106, 107, 605, 635, 655, 656, 256,
	0, 108, 647, 0, 628, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 339, 116, 117, 0,
	629, 631, 0, 630, 632, 118, 119, 306, 120, 657,
	121, 658, 659, 0, 122, 0, 123, 0, 0, 0,
	650, 125, 0, 126, 0, 0, 0, 593, 127, 128,
	129, 637, 638, 616, 0, 0, 130, 131, 660, 661,
	662, 0, 132, 0, 133, 0, 0, 340, 0, 134,
	648, 0, 268, 0, 135, 136, 137, 138, 644, 646,
	342, 0, 142, 0, 139, 0, 341, 140, 663, 141,
	664, 665, 666, 667, 668, 0, 627, 0, 343, 143,
	144, 344, 145, 146, 147, 0, 149, 148, 0, 649,
	345, 150, 346, 0, 151, 0, 0, 152, 0, 153,
	154, 155, 157, 279, 156, 347, 158, 159, 161, 160,
	588, 0, 617, 645, 162, 669, 163, 164, 0, 165,
	0, 0, 166, 0, 0, 167, 282, 348, 168, 349,
	639, 169, 170, 171, 172, 173, 0, 640, 174, 285,
	175, 0, 176, 177, 178, 179, 180, 670, 181, 182,
	0, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 0, 195, 350, 196, 197, 594, 198,
	0, 202, 203, 204, 205, 0, 288, 206, 207, 208,
	633, 209, 199, 200, 210, 351, 211, 671, 290, 212,
	0, 218, 213, 214, 201, 215, 217, 672, 216, 641,
	0, 219, 0, 220, 221, 222, 223, 224, 0, 293,
	673, 674, 0, 0, 225, 226, 642, 643, 615, 227,
	228, 229, 230, 0, 0, 231, 232, 233, 234, 634,
	235, 0, 298, 236, 237, 238, 299, 675, 0, 0,
	239, 0, 0, 0, 0, 240, 241, 242, 243, 244,
	589, 0, 0, 0, 0, 0, 587, 0, 0, 0,
	0, 585, 586, 0, 0, 0, 0, 0, 908, 1242,
	595, 0, 0, 0, 0, 598, 620, 609, 610, 607,
	608, 599, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	636, 602, 0, 0, 0, 101, 102, 103, 246, 651,
	248, 652, 104, 653, 654, 0, 105, 252, 253, 106,
	107, 605, 635, 655, 656, 256, 0, 108, 647, 0,
	628, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 339, 116, 117, 0, 629, 631, 0, 630,
	632, 118, 119, 306, 120, 657, 121, 658, 659, 825,
	122, 0, 123, 0, 0, 0, 650, 125, 0, 126,
	0, 0, 0, 593, 127, 128, 129, 637, 638, 616,
	0, 0, 130, 131, 660, 661, 662, 0, 132, 0,
	133, 0, 0, 340, 0, 134, 648, 0, 268, 0,
	135, 136, 137, 138, 644, 646, 342, 0, 142, 0,
	139, 0, 341, 140, 663, 141, 664, 665, 666, 667,
	668, 0, 627, 0, 343, 143, 144, 344, 145, 146,
	147, 0, 149, 148, 0, 649, 345, 150, 346, 0,
	151, 0, 0, 152, 0, 153, 154, 155, 157, 279,
	156, 347, 158, 159, 161, 160, 588, 0, 617, 645,
	162, 669, 163, 164, 0, 165, 0, 0, 166, 0,
	0, 167, 282, 348, 168, 349, 639, 169, 170, 171,
	172, 173, 0, 640, 174, 285, 175, 0, 176, 177,
	178, 179, 180, 670, 181, 182, 0, 183, 184, 185,
	186, 187, 189, 190, 188, 191, 192, 193, 194, 0,
	195, 350, 196, 197, 594, 198, 0, 202, 203, 204,
	205, 0, 288, 206, 207, 208, 633, 209, 199, 200,
	210, 351, 211, 671, 290, 212, 0, 218, 213, 214,
	201, 215, 217, 672, 216, 641, 0, 219, 0, 220,
	221, 222, 223, 224, 0, 293, 673, 674, 0, 0,
	225, 226, 642, 643, 615, 227, 228, 229, 230, 0,
	0, 231, 232, 233, 234, 634, 235, 0, 298, 236,
	237, 238, 299, 675, 0, 0, 239, 0, 0, 0,
	0, 240, 241, 242, 243, 244, 589, 0, 0, 0,
	0, 0, 587, 0, 0, 0, 0, 585, 586, 620,
	609, 610, 607, 608, 599, 0, 595, 0, 0, 0,
	0, 598, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 636, 602, 0, 0, 0, 101, 102,
	103, 246, 651, 248, 652, 104, 653, 654, 0, 105,
	252, 253, 106, 107, 605, 635, 655, 656, 256, 0,
	108, 647, 0, 628, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 339, 116, 117, 0, 629,
	631, 0, 630, 632, 118, 119, 306, 120, 657, 121,
	658, 659, 0, 122, 0, 123, 0, 0, 0, 650,
	125, 0, 126, 0, 0, 0, 593, 127, 128, 129,
	637, 638, 616, 0, 0, 130, 131, 660, 661, 662,
	0, 132, 0, 133, 0, 0, 340, 0, 134, 648,
	0, 268, 0, 135, 136, 137, 138, 644, 646, 342,
	0, 142, 0, 139, 0, 341, 140, 663, 141, 664,
	665, 666, 667, 668, 0, 627, 0, 343, 143, 144,
	344, 145, 146, 147, 0, 149, 148, 0, 649, 345,
	150, 346, 0, 151, 0, 0, 152, 0, 153, 154,
	155, 157, 279, 156, 347, 158, 159, 161, 160, 588,
	0, 617, 645, 162, 669, 163, 164, 0, 165, 0,
	0, 166, 0, 0, 167, 282, 348, 168, 349, 639,
	169, 170, 171, 172, 173, 0, 640, 174, 285, 175,
	0, 176, 177, 178, 179, 180, 670, 181, 182, 0,
	183, 184, 185, 186, 187, 189, 190, 188, 191, 192,
	193, 194, 0, 195, 350, 196, 197, 594, 198, 0,
	202, 203, 204, 205, 0, 288, 206, 207, 208, 633,
	209, 199, 200, 210, 351, 211, 671, 290, 212, 0,
	218, 213, 214, 201, 215, 217, 672, 216, 641, 0,
	219, 0, 220, 221, 222, 223, 224, 0, 293, 673,
	674, 0, 0, 225, 226, 642, 643, 615, 227, 228,
	229, 230, 0, 0, 231, 232, 233, 234, 634, 235,
	0, 298, 236, 237, 238, 299, 675, 0, 0, 239,
	0, 0, 0, 0, 240, 241, 242, 243, 244, 589,
	0, 0, 0, 0, 0, 587, 0, 0, 0, 0,
	585, 586, 620, 609, 610, 607, 608, 599, 0, 595,
	1763, 0, 0, 0, 598, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 636, 602, 0, 0,
	0, 101, 102, 103, 246, 651, 248, 652, 104, 653,
	654, 0, 105, 252, 253, 106, 107, 605, 635, 655,
	656, 256, 0, 108, 647, 0, 628, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 339, 116,
	117, 0, 629, 631, 0, 630, 632, 118, 119, 306,
	120, 657, 121, 658, 659, 0, 122, 0, 123, 0,
	0, 0, 650, 125, 0, 126, 0, 0, 0, 593,
	127, 128, 129, 637, 638, 616, 0, 0, 130, 131,
	660, 661, 662, 0, 132, 0, 133, 0, 0, 340,
	0, 134, 648, 0, 268, 0, 135, 136, 137, 138,
	644, 646, 342, 0, 142, 0, 139, 0, 341, 140,
	663, 141, 664, 665, 666, 667, 668, 0, 627, 0,
	343, 143, 144, 344, 145, 146, 147, 0, 149, 148,
	0, 649, 345, 150, 346, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 279, 156, 347, 158, 159,
	161, 160, 588, 0, 617, 645, 162, 669, 163, 164,
	0, 165, 0, 0, 166, 0, 0, 167, 282, 348,
	168, 349, 639, 169, 170, 171, 172, 173, 0, 640,
	174, 285, 175, 0, 176, 177, 178, 179, 180, 670,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 350, 196, 197,
	594, 198, 0, 202, 203, 204, 205, 0, 288, 206,
	207, 208, 633, 209, 199, 200, 210, 351, 211, 671,
	290, 212, 0, 218, 213, 214, 201, 215, 217, 672,
	216, 641, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 293, 673, 674, 0, 0, 225, 226, 642, 643,
	615, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 634, 235, 0, 298, 236, 237, 238, 299, 675,
	1712, 0, 239, 0, 0, 0, 0, 240, 241, 242,
	243, 244, 589, 0, 0, 0, 0, 0, 587, 0,
	0, 0, 0, 585, 586, 620, 609, 610, 607, 608,
	599, 0, 595, 0, 0, 0, 0, 598, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 0, 636,
	602, 0, 0, 0, 101, 102, 103, 246, 651, 248,
	652, 104, 653, 654, 0, 105, 252, 253, 106, 107,
	605, 635, 655, 656, 256, 0, 108, 647, 0, 628,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 339, 116, 117, 0, 629, 631, 0, 630, 632,
	118, 119, 306, 120, 657, 121, 658, 659, 0, 122,
	0, 123, 0, 0, 0, 650, 125, 0, 126, 0,
	0, 0, 593, 127, 128, 129, 637, 638, 616, 0,
	0, 130, 131, 660, 661, 662, 0, 132, 0, 133,
	0, 0, 340, 0, 134, 648, 0, 268, 0, 135,
	136, 137, 138, 644, 646, 342, 0, 142, 0, 139,
	0, 341, 140, 663, 141, 664, 665, 666, 667, 668,
	0, 627, 0, 343, 143, 144, 344, 145, 146, 147,
	0, 149, 148, 0, 649, 345, 150, 346, 0, 151,
	0, 0, 152, 0, 153, 154, 155, 157, 279, 156,
	347, 158, 159, 161, 160, 588, 0, 617, 645, 162,
	669, 163, 164, 0, 165, 0, 0, 166, 0, 0,
	167, 282, 348, 168, 349, 639, 169, 170, 171, 172,
	173, 0, 640, 174, 285, 175, 0, 176, 177, 178,
	179, 180, 670, 181, 182, 0, 183, 184, 185, 186,
	187, 189, 190, 188, 191, 192, 193, 194, 0, 195,
	350, 196, 197, 594, 198, 0, 202, 203, 204, 205,
	0, 288, 206, 207, 208, 633, 209, 199, 200, 210,
	351, 211, 671, 290, 212, 0, 218, 213, 214, 201,
	215, 217, 672, 216, 641, 0, 219, 0, 220, 221,
	222, 223, 224, 0, 293, 673, 674, 0, 0, 225,
	226, 642, 643, 615, 227, 228, 229, 230, 0, 0,
	231, 232, 233, 234, 634, 235, 0, 298, 236, 237,
	238, 299, 675, 0, 0, 239, 0, 0, 0, 0,
	240, 241, 242, 243, 244, 589, 0, 0, 0, 0,
	0, 587, 0, 0, 0, 0, 585, 586, 620, 609,
	610, 607, 608, 599, 0, 595, 1702, 0, 0, 0,
	598, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 0, 636, 602, 0, 0, 0, 101, 102, 103,
	246, 651, 248, 652, 104, 653, 654, 0, 105, 252,
	253, 106, 107, 605, 635, 655, 656, 256, 0, 108,
	647, 0, 628, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 339, 116, 117, 0, 629, 631,
	0, 630, 632, 118, 119, 306, 120, 657, 121, 658,
	659, 0, 122, 0, 123, 0, 0, 0, 650, 125,
	0, 126, 0, 0, 0, 593, 127, 128, 129, 637,
	638, 616, 0, 0, 130, 131, 660, 661, 662, 0,
	132, 0, 133, 0, 1301, 340, 0, 134, 648, 0,
	268, 0, 135, 136, 137, 138, 644, 646, 342, 0,
	142, 0, 139, 0, 341, 140, 663, 141, 664, 665,
	666, 667, 668, 0, 627, 0, 343, 143, 144, 344,
	145, 146, 147, 0, 149, 148, 0, 649, 345, 150,
	346, 0, 151, 0, 0, 152, 0, 153, 154, 155,
	157, 279, 156, 347, 158, 159, 161, 160, 588, 0,
	617, 645, 162, 669, 163, 164, 0, 165, 0, 0,
	166, 0, 0, 167, 282, 348, 168, 349, 639, 169,
	170, 171, 172, 173, 0, 640, 174, 285, 175, 0,
	176, 177, 178, 179, 180, 670, 181, 182, 0, 183,
	184, 185, 186, 187, 189, 190, 188, 191, 192, 193,
	194, 0, 195, 350, 196, 197, 594, 198, 0, 202,
	203, 204, 205, 0, 288, 206, 207, 208, 633, 209,
	199, 200, 210, 351, 211, 671, 290, 212, 0, 218,
	213, 214, 201, 215, 217, 672, 216, 641, 0, 219,
	0, 220, 221, 222, 223, 224, 0, 293, 673, 674,
	0, 0, 225, 226, 642, 643, 615, 227, 228, 229,
	230, 0, 0, 231, 232, 233, 234, 634, 235, 0,
	298, 236, 237, 238, 299, 675, 0, 0, 239, 0,
	0, 0, 0, 240, 241, 242, 243, 244, 589, 0,
	0, 0, 0, 0, 587, 0, 0, 0, 0, 585,
	586, 620, 609, 610, 607, 608, 599, 0, 595, 0,
	0, 0, 0, 598, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 636, 602, 0, 0, 0,
	101, 102, 103, 246, 651, 248, 652, 104, 653, 654,
	0, 105, 252, 253, 106, 107, 605, 635, 655, 656,
	256, 0, 108, 647, 0, 628, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 339, 116, 117,
	0, 629, 631, 0, 630, 632, 118, 119, 306, 120,
	657, 121, 658, 659, 0, 122, 0, 123, 0, 0,
	0, 650, 125, 0, 126, 0, 0, 0, 593, 127,
	128, 129, 637, 638, 616, 0, 0, 130, 131, 660,
	661, 662, 0, 132, 0, 133, 0, 0, 340, 0,
	134, 648, 0, 268, 0, 135, 136, 137, 138, 644,
	646, 342, 0, 142, 0, 139, 0, 341, 140, 663,
	141, 664, 665, 666, 667, 668, 0, 627, 0, 343,
	143, 144, 344, 145, 146, 147, 0, 149, 148, 0,
	649, 345, 150, 346, 0, 151, 0, 0, 152, 0,
	153, 154, 155, 157, 279, 156, 347, 158, 159, 161,
	160, 588, 0, 617, 645, 162, 669, 163, 164, 0,
	165, 0, 0, 166, 0, 0, 167, 282, 348, 168,
	349, 639, 169, 170, 171, 172, 173, 0, 640, 174,
	285, 175, 0, 176, 177, 178, 179, 180, 670, 181,
	182, 0, 183, 184, 185, 186, 187, 189, 190, 188,
	191, 192, 193, 194, 0, 195, 350, 196, 197, 594,
	198, 0, 202, 203, 204, 205, 0, 288, 206, 207,
	208, 633, 209, 199, 200, 210, 351, 211, 671, 290,
	212, 0, 218, 213, 214, 201, 215, 217, 672, 216,
	641, 0, 219, 0, 220, 221, 222, 223, 224, 0,
	293, 673, 674, 0, 0, 225, 226, 642, 643, 615,
	227, 228, 229, 230, 0, 0, 231, 232, 233, 234,
	634, 235, 0, 298, 236, 237, 238, 299, 675, 0,
	0, 239, 0, 0, 0, 0, 240, 241, 242, 243,
	244, 589, 0, 0, 0, 0, 0, 587, 0, 0,
	0, 0, 585, 586, 816, 620, 609, 610, 607, 608,
	599, 595, 0, 0, 0, 0, 598, 0, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 0, 636,
	602, 0, 0, 0, 101, 102, 103, 246, 651, 248,
	652, 104, 653, 654, 0, 105, 252, 253, 106, 107,
	605, 635, 655, 656, 256, 0, 108, 647, 0, 628,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 339, 116, 117, 0, 629, 631, 0, 630, 632,
	118, 119, 306, 120, 657, 121, 658, 659, 0, 122,
	0, 123, 0, 0, 0, 650, 125, 0, 126, 0,
	0, 0, 593, 127, 128, 129, 637, 638, 616, 0,
	0, 130, 131, 660, 661, 662, 0, 132, 0, 133,
	0, 0, 340, 0, 134, 648, 0, 268, 0, 135,
	136, 137, 138, 644, 646, 342, 0, 142, 0, 139,
	0, 341, 140, 663, 141, 664, 665, 666, 667, 668,
	0, 627, 0, 343, 143, 144, 344, 145, 146, 147,
	0, 149, 148, 0, 649, 345, 150, 346, 0, 151,
	0, 0, 152, 0, 153, 154, 155, 157, 279, 156,
	347, 158, 159, 161, 160, 588, 0, 617, 645, 162,
	669, 163, 164, 0, 165, 0, 0, 166, 0, 0,
	167, 282, 348, 168, 349, 639, 169, 170, 171, 172,
	173, 0, 640, 174, 285, 175, 0, 176, 177, 178,
	179, 180, 670, 181, 182, 0, 183, 184, 185, 186,
	187, 189, 190, 188, 191, 192, 193, 194, 0, 195,
	350, 196, 197, 594, 198, 0, 202, 203, 204, 205,
	0, 288, 206, 207, 208, 633, 209, 199, 200, 210,
	351, 211, 671, 290, 212, 0, 218, 213, 214, 201,
	215, 217, 672, 216, 641, 0, 219, 0, 220, 221,
	222, 223, 224, 0, 293, 673, 674, 0, 0, 225,
	226, 642, 643, 615, 227, 228, 229, 230, 0, 0,
	231, 232, 233, 234, 634, 235, 0, 298, 236, 237,
	238, 299, 675, 0, 0, 239, 0, 0, 0, 0,
	240, 241, 242, 243, 244, 589, 0, 0, 0, 0,
	0, 587, 0, 0, 0, 0, 585, 586, 620, 609,
	610, 607, 608, 599, 0, 595, 1237, 0, 0, 0,
	598, 0, 0, 0, 98, 99, 1105, 100, 0, 0,
	0, 0, 636, 602, 0, 0, 0, 101, 102, 103,
	246, 651, 248, 652, 104, 653, 654, 0, 105, 252,
	253, 106, 107, 605, 635, 655, 656, 256, 0, 108,
	647, 0, 628, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 339, 116, 117, 0, 629, 631,
	0, 630, 632, 118, 119, 306, 120, 657, 121, 658,
	659, 0, 122, 0, 123, 0, 0, 0, 650, 125,
	0, 126, 0, 0, 0, 593, 127, 128, 129, 637,
	638, 616, 0, 0, 130, 131, 660, 661, 662, 0,
	132, 0, 133, 0, 0, 340, 0, 134, 648, 0,
	268, 0, 135, 136, 137, 138, 644, 646, 342, 0,
	142, 0, 139, 0, 341, 140, 663, 141, 664, 665,
	666, 667, 668, 0, 627, 0, 343, 143, 144, 344,
	145, 146, 147, 0, 149, 148, 0, 649, 345, 150,
	346, 0, 151, 0, 0, 152, 0, 153, 154, 155,
	157, 279, 156, 347, 158, 159, 161, 160, 588, 0,
	617, 645, 162, 669, 163, 164, 0, 165, 0, 0,
	166, 0, 0, 167, 282, 348, 168, 349, 639, 169,
	170, 171, 172, 173, 0, 640, 174, 285, 175, 0,
	176, 177, 178, 179, 180, 670, 181, 182, 0, 183,
	184, 185, 186, 187, 189, 190, 188, 191, 192, 193,
	194, 0, 195, 350, 196, 197, 594, 198, 0, 202,
	203, 204, 205, 0, 288, 206, 207, 208, 633, 209,
	199, 200, 210, 351, 211, 671, 290, 212, 0, 218,
	213, 214, 201, 215, 217, 672, 216, 641, 0, 219,
	0, 220, 221, 222, 223, 224, 0, 293, 673, 674,
	0, 0, 225, 226, 642, 643, 615, 227, 228, 229,
	230, 0, 0, 231, 232, 233, 234, 634, 235, 0,
	298, 236, 237, 238, 299, 675, 0, 0, 239, 0,
	0, 0, 0, 240, 241, 242, 243, 244, 589, 0,
	0, 0, 0, 0, 587, 0, 0, 0, 0, 585,
	586, 620, 609, 610, 607, 608, 599, 0, 595, 0,
	0, 0, 0, 598, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 636, 602, 0, 0, 0,
	101, 102, 103, 246, 651, 248, 652, 104, 653, 654,
	0, 105, 252, 253, 106, 107, 605, 635, 655, 656,
	256, 0, 108, 647, 0, 628, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 339, 116, 2166,
	0, 629, 631, 0, 630, 632, 118, 119, 306, 120,
	657, 121, 658, 659, 0, 122, 0, 123, 0, 0,
	0, 650, 125, 0, 126, 0, 0, 0, 593, 127,
	128, 129, 637, 638, 616, 0, 0, 130, 131, 660,
	661, 662, 0, 132, 0, 133, 0, 0, 340, 0,
	134, 648, 0, 268, 0, 135, 136, 137, 138, 644,
	646, 342, 0, 142, 0, 139, 0, 341, 140, 663,
	141, 664, 665, 666, 667, 668, 0, 627, 0, 343,
	143, 144, 344, 145, 146, 147, 0, 149, 148, 0,
	649, 345, 150, 346, 0, 151, 0, 0, 152, 0,
	153, 154, 155, 157, 279, 156, 347, 158, 159, 161,
	160, 588, 0, 617, 645, 162, 669, 163, 164, 0,
	165, 0, 0, 166, 0, 0, 167, 282, 348, 168,
	349, 639, 169, 170, 171, 172, 173, 0, 640, 174,
	285, 175, 0, 176, 177, 178, 179, 180, 670, 181,
	182, 0, 183, 184, 185, 186, 187, 189, 190, 188,
	191, 192, 193, 194, 0, 195, 350, 196, 197, 594,
	198, 0, 202, 203, 204, 205, 0, 288, 206, 207,
	208, 633, 209, 199, 200, 210, 351, 211, 671, 290,
	212, 0, 218, 213, 214, 201, 215, 217, 672, 216,
	641, 0, 219, 0, 220, 221, 222, 223, 224, 0,
	293, 673, 674, 0, 0, 225, 226, 642, 643, 615,
	227, 228, 2165, 230, 0, 0, 231, 232, 233, 234,
	634, 235, 0, 298, 236, 237, 238, 299, 675, 0,
	0, 239, 0, 0, 0, 0, 240, 241, 242, 243,
	244, 589, 0, 0, 0, 0, 0, 587, 0, 0,
	0, 0, 585, 586, 620, 609, 610, 607, 608, 599,
	0, 595, 0, 0, 0, 0, 598, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 636, 602,
	0, 0, 0, 101, 102, 103, 2164, 651, 248, 652,
	104, 653, 654, 0, 105, 252, 253, 106, 107, 605,
	635, 655, 656, 256, 0, 108, 647, 0, 628, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	339, 116, 2166, 0, 629, 631, 0, 630, 632, 118,
	119, 306, 120, 657, 121, 658, 659, 0, 122, 0,
	123, 0, 0, 0, 650, 125, 0, 126, 0, 0,
	0, 593, 127, 128, 129, 637, 638, 616, 0, 0,
	130, 131, 660, 661, 662, 0, 132, 0, 133, 0,
	0, 340, 0, 134, 648, 0, 268, 0, 135, 136,
	137, 138, 644, 646, 342, 0, 142, 0, 139, 0,
	341, 140, 663, 141, 664, 665, 666, 667, 668, 0,
	627, 0, 343, 143, 144, 344, 145, 146, 147, 0,
	149, 148, 0, 649, 345, 150, 346, 0, 151, 0,
	0, 152, 0, 153, 154, 155, 157, 279, 156, 347,
	158, 159, 161, 160, 588, 0, 617, 645, 162, 669,
	163, 164, 0, 165, 0, 0, 166, 0, 0, 167,
	282, 348, 168, 349, 639, 169, 170, 171, 172, 173,
	0, 640, 174, 285, 175, 0, 176, 177, 178, 179,
	180, 670, 181, 182, 0, 183, 184, 185, 186, 187,
	189, 190, 188, 191, 192, 193, 194, 0, 195, 350,
	196, 197, 594, 198, 0, 202, 203, 204, 205, 0,
	288, 206, 207, 208, 633, 209, 199, 200, 210, 351,
	211, 671, 290, 212, 0, 218, 213, 214, 201, 215,
	217, 672, 216, 641, 0, 219, 0, 220, 221, 222,
	223, 224, 0, 293, 673, 674, 0, 0, 225, 226,
	642, 643, 615, 227, 228, 2165, 230, 0, 0, 231,
	232, 233, 234, 634, 235, 0, 298, 236, 237, 238,
	299, 675, 0, 0, 239, 0, 0, 0, 0, 240,
	241, 242, 243, 244, 589, 0, 0, 0, 0, 0,
	587, 0, 0, 0, 0, 585, 586, 620, 609, 610,
	607, 608, 599, 0, 595, 0, 0, 0, 0, 598,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	0, 636, 602, 0, 0, 0, 101, 102, 103, 246,
	651, 248, 652, 104, 653, 654, 0, 105, 252, 253,
	106, 107, 605, 635, 655, 656, 256, 0, 108, 647,
	0, 628, 0, 109, 110, 111, 0, 112, 0, 113,
	114, 115, 0, 339, 116, 117, 0, 629, 631, 0,
	630, 632, 118, 119, 306, 120, 657, 121, 658, 659,
	0, 122, 0, 123, 0, 0, 0, 650, 125, 0,
	126, 0, 0, 0, 593, 127, 128, 129, 637, 638,
	616, 0, 0, 130, 131, 660, 661, 662, 0, 132,
	0, 133, 0, 0, 340, 0, 134, 648, 0, 268,
	0, 135, 136, 137, 138, 644, 646, 342, 0, 142,
	0, 139, 0, 341, 140, 663, 141, 664, 665, 666,
	667, 668, 0, 627, 0, 343, 143, 144, 344, 145,
	146, 147, 0, 149, 148, 0, 649, 345, 150, 346,
	0, 151, 0, 0, 152, 0, 153, 154, 155, 157,
	279, 156, 347, 158, 159, 161, 160, 588, 0, 617,
	645, 162, 669, 163, 164, 0, 165, 0, 0, 166,
	0, 0, 167, 282, 348, 168, 349, 639, 169, 170,
	171, 172, 173, 0, 640, 174, 285, 175, 0, 176,
	177, 178, 179, 180, 670, 181, 182, 0, 183, 184,
	185, 186, 187, 189, 190, 188, 191, 192, 193, 194,
	0, 195, 350, 196, 197, 594, 198, 0, 202, 203,
	204, 205, 0, 288, 206, 207, 208, 633, 209, 199,
	200, 210, 351, 211, 671, 290, 212, 0, 218, 213,
	214, 201, 215, 217, 672, 216, 641, 0, 219, 0,
	220, 221, 222, 223, 224, 0, 293, 673, 674, 0,
	0, 225, 226, 642, 643, 615, 227, 228, 229, 230,
	0, 0, 231, 232, 233, 234, 634, 235, 0, 298,
	236, 237, 238, 299, 675, 0, 0, 239, 0, 0,
	0, 0, 240, 241, 242, 243, 244, 589, 0, 0,
	0, 0, 0, 587, 0, 0, 0, 0, 585, 586,
	1273, 609, 610, 607, 608, 599, 0, 595, 0, 0,
	0, 0, 598, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 636, 602, 0, 0, 0, 101,
	102, 103, 246, 651, 248, 652, 104, 653, 654, 0,
	105, 252, 253, 106, 107, 605, 635, 655, 656, 256,
	0, 108, 647, 0, 628, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 339, 116, 117, 0,
	629, 631, 0, 630, 632, 118, 119, 306, 120, 657,
	1276, 658, 659, 0, 122, 0, 123, 0, 0, 0,
	650, 125, 0, 126, 0, 0, 0, 593, 127, 128,
	129, 637, 638, 616, 0, 0, 130, 131, 660, 661,
	662, 0, 132, 0, 133, 0, 0, 340, 0, 134,
	648, 0, 268, 0, 135, 136, 1277, 138, 644, 646,
	342, 0, 142, 0, 139, 0, 341, 140, 663, 141,
	664, 665, 666, 667, 668, 0, 627, 0, 343, 143,
	144, 344, 145, 146, 147, 0, 149, 148, 0, 649,
	345, 150, 346, 0, 151, 0, 0, 152, 0, 153,
	1278, 1275, 157, 279, 156, 347, 158, 159, 161, 160,
	588, 0, 617, 645, 162, 669, 163, 164, 0, 165,
	0, 0, 166, 0, 0, 167, 282, 348, 168, 349,
	639, 169, 170, 171, 172, 173, 0, 640, 174, 285,
	175, 0, 176, 177, 178, 179, 180, 670, 181, 182,
	0, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 0, 195, 350, 196, 197, 594, 198,
	0, 202, 203, 204, 1279, 0, 288, 206, 207, 208,
	633, 209, 199, 200, 210, 351, 211, 671, 290, 212,
	0, 218, 213, 214, 201, 215, 217, 672, 216, 641,
	0, 219, 0, 220, 221, 222, 223, 224, 0, 293,
	673, 674, 0, 0, 225, 226, 642, 643, 615, 227,
	228, 229, 230, 0, 0, 231, 232, 233, 234, 634,
	235, 0, 298, 236, 237, 238, 299, 675, 0, 0,
	239, 0, 0, 0, 0, 240, 241, 242, 1274, 244,
	589, 0, 0, 0, 0, 0, 587, 0, 0, 0,
	0, 585, 586, 620, 609, 610, 607, 608, 599, 0,
	595, 0, 0, 0, 0, 598, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 636, 602, 0,
	0, 0, 101, 102, 103, 246, 651, 248, 652, 104,
	653, 654, 0, 105, 252, 253, 106, 107, 605, 635,
	655, 656, 256, 0, 108, 647, 0, 628, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 339,
	116, 117, 0, 629, 631, 0, 630, 632, 118, 119,
	306, 120, 657, 121, 658, 659, 0, 122, 0, 123,
	0, 0, 0, 650, 125, 0, 126, 0, 0, 0,
	593, 127, 128, 129, 637, 638, 616, 0, 0, 130,
	131, 660, 661, 662, 0, 132, 0, 133, 0, 0,
	340, 0, 134, 648, 0, 268, 0, 135, 136, 137,
	138, 644, 646, 342, 0, 142, 0, 139, 0, 341,
	140, 663, 141, 664, 665, 666, 667, 668, 0, 627,
	0, 343, 143, 144, 344, 145, 146, 147, 0, 149,
	148, 0, 649, 345, 150, 346, 0, 151, 0, 0,
	152, 0, 153, 154, 155, 157, 279, 156, 347, 158,
	159, 161, 160, 0, 0, 617, 645, 162, 669, 163,
	164, 0, 165, 0, 0, 166, 0, 0, 167, 282,
	348, 168, 349, 639, 169, 170, 171, 172, 173, 0,
	640, 174, 285, 175, 0, 176, 177, 178, 179, 180,
	670, 181, 182, 0, 183, 184, 185, 186, 187, 189,
	190, 188, 191, 192, 193, 194, 0, 195, 350, 196,
	197, 1291, 198, 0, 202, 203, 204, 205, 0, 288,
	206, 207, 208, 633, 209, 199, 200, 210, 351, 211,
	671, 290, 212, 0, 218, 213, 214, 201, 215, 217,
	672, 216, 641, 0, 219, 0, 220, 221, 222, 223,
	224, 0, 293, 673, 674, 0, 0, 225, 226, 642,
	643, 615, 227, 228, 229, 230, 0, 0, 231, 232,
	233, 234, 634, 235, 0, 298, 236, 237, 238, 299,
	675, 0, 0, 239, 0, 0, 0, 0, 240, 241,
	242, 243, 244, 0, 0, 0, 0, 0, 0, 1289,
	0, 0, 0, 0, 1287, 1288, 620, 609, 610, 607,
	608, 599, 0, 1290, 0, 0, 0, 0, 598, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	636, 602, 0, 0, 0, 101, 102, 103, 246, 651,
	248, 652, 104, 653, 654, 0, 105, 252, 253, 106,
	107, 0, 635, 655, 656, 256, 0, 108, 647, 0,
	628, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 339, 116, 117, 0, 629, 631, 0, 630,
	632, 118, 119, 306, 120, 657, 121, 658, 659, 0,
	122, 0, 123, 0, 0, 0, 650, 125, 0, 126,
	0, 0, 0, 261, 127, 128, 129, 637, 638, 616,
	0, 0, 130, 131, 660, 661, 662, 0, 132, 0,
	133, 0, 0, 340, 0, 134, 648, 0, 268, 0,
	135, 136, 137, 138, 644, 646, 342, 0, 142, 0,
	139, 0, 341, 140, 663, 141, 664, 665, 666, 667,
	668, 0, 627, 0, 343, 143, 144, 344, 145, 146,
	147, 0, 149, 148, 0, 649, 345, 150, 346, 0,
	151, 0, 0, 152, 0, 153, 154, 155, 157, 279,
	156, 347, 158, 159, 161, 160, 0, 0, 617, 645,
	162, 669, 163, 164, 0, 165, 0, 0, 166, 0,
	0, 167, 282, 348, 168, 349, 639, 169, 170, 171,
	172, 173, 0, 640, 174, 285, 175, 0, 176, 177,
	178, 179, 180, 670, 181, 182, 0, 183, 184, 185,
	186, 187, 189, 190, 188, 191, 192, 193, 194, 0,
	195, 350, 196, 197, 1291, 198, 0, 202, 203, 204,
	205, 0, 288, 206, 207, 208, 633, 209, 199, 200,
	210, 351, 211, 671, 290, 212, 0, 218, 213, 214,
	201, 215, 217, 672, 216, 641, 0, 219, 0, 220,
	221, 222, 223, 224, 0, 293, 673, 674, 0, 0,
	225, 226, 642, 643, 615, 227, 228, 229, 230, 0,
	0, 231, 232, 233, 234, 634, 235, 0, 298, 236,
	237, 238, 299, 675, 0, 0, 239, 0, 0, 0,
	0, 240, 241, 242, 243, 244, 0, 0, 620, 609,
	610, 607, 608, 599, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 99, 1290, 100, 0, 0,
	0, 598, 636, 602, 0, 0, 0, 101, 102, 103,
	0, 651, 248, 652, 104, 653, 654, 0, 105, 252,
	253, 106, 107, 605, 635, 655, 656, 256, 0, 108,
	647, 0, 628, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 339, 116, 2166, 0, 629, 631,
	0, 630, 632, 118, 119, 306, 120, 657, 121, 658,
	659, 0, 122, 0, 123, 0, 0, 0, 650, 125,
	0, 126, 0, 0, 0, 593, 127, 128, 129, 637,
	638, 616, 0, 0, 130, 131, 660, 661, 662, 0,
	132, 0, 133, 0, 0, 340, 0, 134, 648, 0,
	268, 0, 135, 136, 137, 138, 644, 646, 0, 0,
	142, 0, 139, 0, 341, 140, 663, 141, 664, 665,
	666, 667, 668, 0, 627, 0, 0, 143, 144, 344,
	145, 146, 147, 0, 149, 148, 0, 649, 345, 150,
	0, 0, 151, 0, 0, 152, 0, 153, 154, 155,
	157, 279, 156, 347, 158, 159, 161, 160, 588, 0,
	617, 645, 162, 669, 163, 164, 0, 165, 0, 0,
	166, 0, 0, 167, 282, 348, 168, 349, 639, 169,
	170, 171, 172, 173, 0, 640, 174, 285, 175, 0,
	176, 177, 178, 179, 180, 670, 181, 182, 0, 183,
	184, 185, 186, 187, 189, 190, 188, 191, 192, 193,
	194, 0, 195, 350, 196, 197, 594, 198, 0, 202,
	203, 204, 205, 0, 288, 206, 207, 208, 633, 209,
	199, 200, 210, 0, 211, 671, 290, 212, 0, 218,
	213, 214, 201, 215, 217, 672, 216, 641, 0, 219,
	0, 220, 221, 222, 223, 224, 0, 293, 673, 674,
	0, 0, 225, 226, 642, 643, 615, 227, 228, 2165,
	230, 0, 0, 231, 232, 233, 234, 634, 235, 0,
	298, 236, 237, 238, 299, 675, 0, 0, 239, 0,
	0, 0, 0, 240, 241, 242, 243, 244, 620, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 585,
	586, 0, 0, 0, 98, 99, 0, 100, 595, 0,
	0, 0, 636, 598, 0, 0, 0, 101, 102, 103,
	246, 247, 248, 249, 104, 250, 251, 0, 105, 252,
	253, 106, 107, 0, 635, 254, 255, 256, 0, 108,
	647, 0, 628, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 339, 116, 117, 0, 629, 631,
	0, 630, 632, 118, 119, 306, 120, 258, 121, 259,
	260, 0, 122, 0, 123, 0, 0, 0, 124, 125,
	0, 126, 0, 0, 0, 261, 127, 128, 129, 637,
	638, 0, 0, 0, 130, 131, 264, 265, 266, 0,
	132, 0, 133, 0, 0, 340, 0, 134, 648, 0,
	268, 0, 135, 136, 137, 138, 644, 646, 342, 0,
	142, 0, 139, 0, 341, 140, 271, 141, 272, 273,
	274, 275, 276, 0, 277, 0, 343, 143, 144, 344,
	145, 146, 147, 0, 149, 148, 0, 649, 345, 150,
	346, 0, 151, 0, 0, 152, 0, 153, 154, 155,
	157, 279, 156, 347, 158, 159, 161, 160, 0, 0,
	0, 645, 162, 281, 163, 164, 0, 165, 0, 0,
	166, 0, 0, 167, 282, 348, 168, 349, 639, 169,
	170, 171, 172, 173, 0, 640, 174, 285, 175, 0,
	176, 177, 178, 179, 180, 286, 181, 182, 0, 183,
	184, 185, 186, 187, 189, 190, 188, 191, 192, 193,
	194, 0, 195, 350, 196, 197, 287, 198, 0, 202,
	203, 204, 205, 0, 288, 206, 207, 208, 633, 209,
	199, 200, 210, 351, 211, 289, 290, 212, 0, 218,
	213, 214, 201, 215, 217, 291, 216, 641, 0, 219,
	0, 220, 221, 222, 223, 224, 0, 293, 294, 295,
	0, 0, 225, 226, 642, 643, 0, 227, 228, 229,
	230, 0, 0, 231, 232, 233, 234, 634, 235, 0,
	298, 236, 237, 238, 299, 300, 0, 0, 239, 0,
	527, 0, 0, 240, 241, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 245, 0, 0, 0, 1665, 101,
	102, 103, 246, 247, 248, 249, 104, 250, 251, 0,
	105, 252, 253, 106, 107, 0, 0, 254, 255, 256,
	0, 108, 257, 0, 338, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 339, 116, 117, 0,
	0, 0, 0, 0, 0, 118, 119, 306, 120, 258,
	121, 259, 260, 0, 122, 0, 123, 0, 0, 0,
	124, 125, 0, 126, 0, 0, 0, 261, 127, 128,
	129, 262, 263, 0, 0, 0, 130, 131, 264, 265,
	266, 0, 132, 0, 133, 0, 0, 340, 0, 134,
	267, 0, 268, 0, 135, 136, 137, 138, 269, 270,
	342, 0, 142, 0, 139, 0, 341, 140, 271, 141,
	272, 273, 274, 275, 276, 0, 277, 0, 343, 143,
	144, 344, 145, 146, 147, 0, 149, 148, 0, 278,
	345, 150, 346, 0, 151, 0, 0, 152, 0, 153,
	154, 155, 157, 279, 156, 347, 158, 159, 161, 160,
	0, 0, 0, 280, 162, 281, 163, 164, 0, 165,
	0, 0, 166, 0, 0, 167, 282, 348, 168, 349,
	283, 169, 170, 171, 172, 173, 0, 284, 174, 285,
	175, 0, 176, 177, 178, 179, 180, 286, 181, 182,
	0, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 0, 195, 350, 196, 197, 287, 198,
	0, 202, 203, 204, 205, 79, 288, 206, 207, 208,
	0, 209, 199, 200, 210, 351, 211, 289, 290, 212,
	0, 218, 213, 214, 201, 215, 217, 291, 216, 292,
	0, 219, 81, 220, 221, 222, 223, 224, 0, 293,
	294, 295, 0, 0, 225, 226, 296, 297, 0, 227,
	228, 229, 230, 0, 0, 231, 232, 233, 234, 0,
	235, 0, 298, 236, 237, 238, 709, 300, 0, 0,
	239, 0, 0, 0, 77, 240, 241, 242, 243, 244,
	0, 78, 527, 524, 0, 525, 520, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 99,
	76, 100, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 101, 102, 103, 246, 247, 248, 249, 104, 250,
	251, 0, 105, 252, 253, 106, 107, 0, 0, 254,
	255, 256, 0, 108, 257, 0, 338, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 339, 116,
	117, 0, 0, 0, 0, 0, 0, 118, 119, 306,
	120, 258, 121, 259, 260, 1051, 122, 0, 123, 0,
	0, 0, 124, 125, 0, 126, 0, 0, 0, 261,
	127, 128, 129, 262, 263, 517, 0, 0, 130, 131,
	264, 265, 266, 0, 132, 0, 133, 0, 0, 340,
	0, 134, 267, 0, 268, 0, 135, 136, 137, 138,
	269, 270, 342, 0, 142, 0, 139, 0, 341, 140,
	271, 141, 272, 273, 274, 275, 276, 0, 277, 0,
	343, 143, 144, 344, 145, 146, 147, 0, 149, 148,
	0, 278, 345, 150, 346, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 279, 156, 347, 158, 159,
	161, 160, 0, 0, 0, 280, 162, 281, 163, 164,
	0, 165, 518, 0, 166, 0, 0, 167, 282, 348,
	168, 349, 283, 169, 170, 171, 172, 173, 0, 284,
	174, 285, 175, 0, 176, 177, 178, 179, 180, 286,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 350, 196, 197,
	287, 198, 0, 202, 203, 204, 205, 0, 288, 206,
	207, 208, 0, 209, 199, 200, 210, 351, 211, 289,
	290, 212, 0, 218, 213, 214, 201, 215, 217, 291,
	216, 292, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 293, 294, 295, 0, 0, 225, 226, 296, 297,
	516, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 0, 235, 0, 298, 236, 237, 238, 299, 300,
	0, 0, 239, 0, 0, 0, 0, 240, 241, 242,
	243, 244, 527, 524, 0, 525, 520, 515, 0, 0,
	0, 0, 0, 526, 521, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 101, 102, 103, 246, 247, 248, 249, 104, 250,
	251, 0, 105, 252, 253, 106, 107, 0, 0, 254,
	255, 256, 0, 108, 257, 0, 338, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 339, 116,
	117, 0, 0, 0, 0, 0, 0, 118, 119, 306,
	120, 258, 121, 259, 260, 1048, 122, 0, 123, 0,
	0, 0, 124, 125, 0, 126, 0, 0, 0, 261,
	127, 128, 129, 262, 263, 517, 0, 0, 130, 131,
	264, 265, 266, 0, 132, 0, 133, 0, 0, 340,
	0, 134, 267, 0, 268, 0, 135, 136, 137, 138,
	269, 270, 342, 0, 142, 0, 139, 0, 341, 140,
	271, 141, 272, 273, 274, 275, 276, 0, 277, 0,
	343, 143, 144, 344, 145, 146, 147, 0, 149, 148,
	0, 278, 345, 150, 346, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 279, 156, 347, 158, 159,
	161, 160, 0, 0, 0, 280, 162, 281, 163, 164,
	0, 165, 518, 0, 166, 0, 0, 167, 282, 348,
	168, 349, 283, 169, 170, 171, 172, 173, 0, 284,
	174, 285, 175, 0, 176, 177, 178, 179, 180, 286,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 350, 196, 197,
	287, 198, 0, 202, 203, 204, 205, 0, 288, 206,
	207, 208, 0, 209, 199, 200, 210, 351, 211, 289,
	290, 212, 0, 218, 213, 214, 201, 215, 217, 291,
	216, 292, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 293, 294, 295, 0, 0, 225, 226, 296, 297,
	516, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 0, 235, 0, 298, 236, 237, 238, 299, 300,
	0, 0, 239, 0, 0, 0, 0, 240, 241, 242,
	243, 244, 527, 524, 0, 525, 520, 515, 0, 0,
	0, 0, 0, 526, 521, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 101, 102, 103, 246, 247, 248, 249, 104, 250,
	251, 0, 105, 252, 253, 106, 107, 0, 0, 254,
	255, 256, 0, 108, 257, 0, 338, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 339, 116,
	117, 0, 0, 0, 0, 0, 0, 118, 119, 306,
	120, 258, 121, 259, 260, 743, 122, 0, 123, 0,
	0, 0, 124, 125, 0, 126, 0, 0, 0, 261,
	127, 128, 129, 262, 263, 517, 0, 0, 130, 131,
	264, 265, 266, 0, 132, 0, 133, 0, 0, 340,
	0, 134, 267, 0, 268, 0, 135, 136, 137, 138,
	269, 270, 342, 0, 142, 0, 139, 0, 341, 140,
	271, 141, 272, 273, 274, 275, 276, 0, 277, 0,
	343, 143, 144, 344, 145, 146, 147, 0, 149, 148,
	0, 278, 345, 150, 346, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 279, 156, 347, 158, 159,
	161, 160, 0, 0, 0, 280, 162, 281, 163, 164,
	0, 165, 518, 0, 166, 0, 0, 167, 282, 348,
	168, 349, 283, 169, 170, 171, 172, 173, 0, 284,
	174, 285, 175, 0, 176, 177, 178, 179, 180, 286,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 350, 196, 197,
	287, 198, 0, 202, 203, 204, 205, 0, 288, 206,
	207, 208, 0, 209, 199, 200, 210, 351, 211, 289,
	290, 212, 0, 218, 213, 214, 201, 215, 217, 291,
	216, 292, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 293, 294, 295, 0, 0, 225, 226, 296, 297,
	516, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 0, 235, 0, 298, 236, 237, 238, 299, 300,
	0, 0, 239, 0, 0, 0, 0, 240, 241, 242,
	243, 244, 527, 524, 0, 525, 520, 515, 0, 0,
	0, 0, 0, 526, 521, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 101, 102, 103, 246, 247, 248, 249, 104, 250,
	251, 0, 105, 252, 253, 106, 107, 0, 0, 254,
	255, 256, 0, 108, 257, 0, 338, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 339, 116,
	117, 0, 0, 0, 0, 0, 0, 118, 119, 306,
	120, 258, 121, 259, 260, 0, 122, 0, 123, 0,
	0, 0, 124, 125, 0, 126, 0, 0, 0, 261,
	127, 128, 129, 262, 263, 517, 0, 0, 130, 131,
	264, 265, 266, 0, 132, 0, 133, 0, 0, 340,
	0, 134, 267, 0, 268, 0, 135, 136, 137, 138,
	269, 270, 342, 0, 142, 0, 139, 0, 341, 140,
	271, 141, 272, 273, 274, 275, 276, 0, 277, 0,
	343, 143, 144, 344, 145, 146, 147, 0, 149, 148,
	0, 278, 345, 150, 346, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 279, 156, 347, 158, 159,
	161, 160, 0, 0, 0, 280, 162, 281, 163, 164,
	0, 165, 518, 0, 166, 0, 0, 167, 282, 348,
	168, 349, 283, 169, 170, 171, 172, 173, 0, 284,
	174, 285, 175, 0, 176, 177, 178, 179, 180, 286,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 350, 196, 197,
	287, 198, 0, 202, 203, 204, 205, 0, 288, 206,
	207, 208, 0, 209, 199, 200, 210, 351, 211, 289,
	290, 212, 0, 218, 213, 214, 201, 215, 217, 291,
	216, 292, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 293, 294, 295, 0, 0, 225, 226, 296, 297,
	516, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 0, 235, 0, 298, 236, 237, 238, 299, 300,
	0, 95, 239, 0, 0, 0, 0, 240, 241, 242,
	243, 244, 0, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 526, 521, 245, 0, 0, 0, 0,
	101, 102, 103, 246, 247, 248, 249, 104, 250, 251,
	0, 105, 252, 253, 106, 107, 0, 0, 254, 255,
	256, 0, 108, 257, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 306, 120,
	258, 121, 259, 260, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 261, 127,
	128, 129, 262, 263, 0, 0, 0, 130, 131, 264,
	265, 266, 0, 132, 0, 133, 0, 0, 0, 0,
	134, 267, 0, 268, 0, 135, 136, 137, 138, 269,
	270, 0, 0, 142, 0, 139, 0, 0, 140, 271,
	141, 272, 273, 274, 275, 276, 0, 277, 0, 0,
	143, 144, 0, 145, 146, 147, 0, 149, 148, 0,
	278, 0, 150, 0, 0, 151, 0, 0, 152, 0,
	153, 154, 155, 157, 279, 156, 0, 158, 159, 161,
	160, 0, 0, 0, 280, 162, 281, 163, 164, 0,
	165, 0, 561, 166, 0, 0, 167, 282, 0, 168,
	0, 283, 169, 170, 171, 172, 173, 0, 284, 174,
	285, 175, 0, 176, 177, 178, 179, 180, 286, 181,
	182, 0, 183, 184, 185, 186, 187, 189, 190, 188,
	191, 192, 193, 194, 0, 195, 0, 196, 197, 287,
	198, 0, 202, 203, 204, 205, 79, 288, 206, 207,
	208, 0, 209, 199, 200, 210, 0, 211, 289, 290,
	212, 0, 218, 213, 214, 201, 215, 217, 291, 216,
	292, 0, 219, 81, 220, 221, 222, 223, 224, 0,
	293, 294, 295, 0, 0, 225, 226, 296, 297, 0,
	227, 228, 229, 230, 0, 0, 231, 232, 233, 234,
	0, 235, 0, 298, 236, 237, 238, 709, 300, 0,
	0, 239, 0, 95, 0, 77, 240, 241, 242, 243,
	244, 0, 78, 0, 0, 0, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 245, 0, 1410,
	0, 1415, 101, 102, 103, 246, 247, 248, 249, 104,
	250, 251, 0, 105, 252, 253, 106, 107, 0, 0,
	254, 255, 256, 0, 108, 257, 0, 0, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 0,
	116, 117, 0, 0, 0, 0, 0, 0, 118, 119,
	306, 120, 258, 121, 259, 260, 0, 122, 0, 123,
	0, 0, 0, 124, 125, 0, 126, 0, 0, 0,
	261, 127, 128, 129, 262, 263, 0, 0, 0, 130,
	131, 264, 265, 266, 0, 132, 0, 133, 0, 0,
	0, 0, 134, 267, 0, 268, 0, 135, 136, 137,
	138, 269, 270, 0, 0, 142, 0, 139, 0, 0,
	140, 271, 141, 272, 273, 274, 275, 276, 0, 277,
	0, 0, 143, 144, 0, 145, 146, 147, 0, 149,
	148, 0, 278, 0, 150, 0, 0, 151, 0, 0,
	152, 0, 153, 154, 155, 157, 279, 156, 0, 158,
	159, 161, 160, 0, 0, 0, 280, 162, 281, 163,
	164, 0, 165, 0, 0, 166, 0, 0, 167, 282,
	0, 168, 0, 283, 169, 170, 171, 172, 173, 0,
	284, 174, 285, 175, 0, 176, 177, 178, 179, 180,
	286, 181, 182, 0, 183, 184, 185, 186, 187, 189,
	190, 188, 191, 192, 193, 194, 0, 195, 0, 196,
	197, 287, 198, 0, 202, 203, 204, 205, 79, 288,
	206, 207, 208, 0, 209, 199, 200, 210, 0, 211,
	289, 290, 212, 0, 218, 213, 214, 201, 215, 217,
	291, 216, 292, 0, 219, 81, 220, 221, 222, 223,
	224, 0, 293, 294, 295, 0, 0, 225, 226, 296,
	297, 0, 227, 228, 229, 230, 0, 0, 231, 232,
	233, 234, 0, 235, 0, 298, 236, 237, 238, 709,
	300, 0, 0, 239, 0, 95, 0, 77, 240, 241,
	242, 243, 244, 0, 78, 0, 0, 0, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 0, 245,
	0, 0, 0, 76, 101, 102, 103, 246, 247, 248,
	249, 104, 250, 251, 0, 105, 252, 253, 106, 107,
	0, 0, 254, 255, 256, 0, 108, 257, 0, 0,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 0, 116, 117, 0, 0, 0, 0, 0, 0,
	118, 119, 306, 120, 258, 121, 259, 260, 0, 122,
	0, 123, 0, 0, 0, 124, 125, 0, 126, 0,
	0, 0, 261, 127, 128, 129, 262, 263, 0, 0,
	0, 130, 131, 264, 265, 266, 0, 132, 0, 133,
	0, 0, 0, 0, 134, 267, 0, 268, 0, 135,
	136, 137, 138, 269, 270, 0, 0, 142, 0, 139,
	0, 0, 140, 271, 141, 272, 273, 274, 275, 276,
	0, 277, 0, 0, 143, 144, 0, 145, 146, 147,
	0, 149, 148, 0, 278, 0, 150, 0, 0, 151,
	0, 0, 152, 0, 153, 154, 155, 157, 279, 156,
	0, 158, 159, 161, 160, 0, 0, 0, 280, 162,
	281, 163, 164, 0, 165, 0, 561, 166, 0, 0,
	167, 282, 0, 168, 0, 283, 169, 170, 171, 172,
	173, 0, 284, 174, 285, 175, 0, 176, 177, 178,
	179, 180, 286, 181, 182, 0, 183, 184, 185, 186,
	187, 189, 190, 188, 191, 192, 193, 194, 0, 195,
	0, 196, 197, 287, 198, 0, 202, 203, 204, 205,
	0, 288, 206, 207, 208, 0, 209, 199, 200, 210,
	0, 211, 289, 290, 212, 0, 218, 213, 214, 201,
	215, 217, 291, 216, 292, 0, 219, 0, 220, 221,
	222, 223, 224, 0, 293, 294, 295, 0, 0, 225,
	226, 296, 297, 0, 227, 228, 229, 230, 0, 0,
	231, 232, 233, 234, 0, 235, 0, 298, 236, 237,
	238, 299, 300, 0, 0, 239, 0, 95, 0, 0,
	240, 241, 242, 243, 244, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	0, 245, 0, 1410, 0, 1415, 101, 102, 103, 246,
	247, 248, 249, 104, 250, 251, 0, 105, 252, 253,
	106, 107, 0, 0, 254, 255, 256, 0, 108, 257,
	0, 0, 0, 109, 110, 111, 0, 112, 0, 113,
	114, 115, 0, 0, 116, 117, 0, 0, 0, 0,
	0, 0, 118, 119, 306, 120, 258, 121, 259, 260,
	0, 122, 0, 123, 0, 0, 0, 124, 125, 0,
	126, 0, 0, 0, 261, 127, 128, 129, 262, 263,
	0, 0, 0, 130, 131, 264, 265, 266, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 267, 0, 268,
	0, 135, 136, 137, 138, 269, 270, 0, 0, 142,
	0, 139, 0, 0, 140, 271, 141, 272, 273, 274,
	275, 276, 0, 277, 0, 0, 143, 144, 0, 145,
	146, 147, 0, 149, 148, 0, 278, 0, 150, 0,
	0, 151, 0, 0, 152, 0, 153, 154, 155, 157,
	279, 156, 0, 158, 159, 161, 160, 0, 0, 0,
	280, 162, 281, 163, 164, 0, 165, 0, 0, 166,
	0, 0, 167, 282, 0, 168, 0, 283, 169, 170,
	171, 172, 173, 0, 284, 174, 285, 175, 0, 176,
	177, 178, 179, 180, 286, 181, 182, 0, 183, 184,
	185, 186, 187, 189, 190, 188, 191, 192, 193, 194,
	0, 195, 0, 196, 197, 287, 198, 0, 202, 203,
	204, 205, 0, 288, 206, 207, 208, 0, 209, 199,
	200, 210, 0, 211, 289, 290, 212, 0, 218, 213,
	214, 201, 215, 217, 291, 216, 292, 0, 219, 0,
	220, 221, 222, 223, 224, 0, 293, 294, 295, 0,
	0, 225, 226, 296, 297, 0, 227, 228, 229, 230,
	0, 0, 231, 232, 233, 234, 0, 235, 0, 298,
	236, 237, 238, 299, 300, 0, 0, 239, 0, 0,
	95, 0, 240, 241, 242, 243, 244, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 245, 0, 0, 0, 951, 101,
	102, 103, 246, 247, 248, 249, 104, 250, 251, 0,
	105, 252, 253, 106, 107, 0, 0, 254, 255, 256,
	0, 108, 257, 0, 0, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 0, 116, 117, 0,
	0, 0, 0, 0, 0, 118, 119, 306, 120, 258,
	121, 259, 260, 0, 122, 0, 123, 0, 0, 0,
	124, 125, 0, 126, 0, 0, 0, 261, 127, 128,
	129, 262, 263, 0, 0, 0, 130, 131, 264, 265,
	266, 0, 132, 0, 133, 0, 0, 0, 0, 134,
	267, 0, 268, 0, 135, 136, 137, 138, 269, 270,
	0, 0, 142, 0, 139, 0, 0, 140, 271, 141,
	272, 273, 274, 275, 276, 0, 277, 0, 0, 143,
	144, 0, 145, 146, 147, 0, 149, 148, 0, 278,
	0, 150, 0, 0, 151, 0, 0, 152, 0, 153,
	154, 155, 157, 279, 156, 0, 158, 159, 161, 160,
	0, 0, 0, 280, 162, 281, 163, 164, 0, 165,
	0, 0, 166, 0, 0, 167, 282, 0, 168, 0,
	283, 169, 170, 171, 172, 173, 0, 284, 174, 285,
	175, 0, 176, 177, 178, 179, 180, 286, 181, 182,
	0, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 0, 195, 0, 196, 197, 287, 198,
	0, 202, 203, 204, 205, 0, 288, 206, 207, 208,
	0, 209, 199, 200, 210, 0, 211, 289, 290, 212,
	0, 218, 213, 214, 201, 215, 217, 291, 216, 292,
	0, 219, 0, 220, 221, 222, 223, 224, 0, 293,
	294, 295, 0, 0, 225, 226, 296, 297, 0, 227,
	228, 229, 230, 0, 0, 231, 232, 233, 234, 0,
	235, 0, 298, 236, 237, 238, 299, 300, 0, 0,
	239, 0, 95, 0, 0, 240, 241, 242, 243, 244,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 245, 0, 0, 0,
	1331, 101, 102, 103, 246, 247, 248, 249, 104, 250,
	251, 0, 105, 252, 253, 106, 107, 0, 0, 254,
	255, 256, 0, 108, 257, 0, 0, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 0, 116,
	117, 0, 0, 0, 0, 0, 0, 118, 119, 306,
	120, 258, 121, 259, 260, 0, 122, 0, 123, 0,
	0, 0, 124, 125, 0, 126, 0, 0, 0, 261,
	127, 128, 129, 262, 263, 0, 0, 0, 130, 131,
	264, 265, 266, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 267, 0, 268, 0, 135, 136, 137, 138,
	269, 270, 0, 0, 142, 0, 139, 0, 0, 140,
	271, 141, 272, 273, 274, 275, 276, 0, 277, 0,
	0, 143, 144, 0, 145, 146, 147, 0, 149, 148,
	0, 278, 0, 150, 0, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 279, 156, 0, 158, 159,
	161, 160, 0, 0, 0, 280, 162, 281, 163, 164,
	0, 165, 0, 0, 166, 0, 0, 167, 282, 0,
	168, 0, 283, 169, 170, 171, 172, 173, 0, 284,
	174, 285, 175, 0, 176, 177, 178, 179, 180, 286,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 0, 196, 197,
	287, 198, 0, 202, 203, 204, 205, 0, 288, 206,
	207, 208, 0, 209, 199, 200, 210, 0, 211, 289,
	290, 212, 0, 218, 213, 214, 201, 215, 217, 291,
	216, 292, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 293, 294, 295, 0, 0, 225, 226, 296, 297,
	0, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 0, 235, 0, 298, 236, 237, 238, 299, 300,
	0, 0, 239, 0, 95, 0, 0, 240, 241, 242,
	243, 244, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 245, 0,
	0, 0, 1727, 101, 102, 103, 246, 247, 248, 249,
	104, 250, 251, 0, 105, 252, 253, 106, 107, 0,
	0, 254, 255, 256, 0, 108, 257, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 306, 120, 258, 121, 259, 260, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 261, 127, 128, 129, 262, 263, 0, 0, 0,
	130, 131, 264, 265, 266, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 267, 0, 268, 0, 135, 136,
	137, 138, 269, 270, 0, 0, 142, 0, 139, 0,
	0, 140, 271, 141, 272, 273, 274, 275, 276, 0,
	277, 0, 0, 143, 144, 0, 145, 146, 147, 0,
	149, 148, 0, 278, 0, 150, 0, 0, 151, 0,
	0, 152, 0, 153, 154, 155, 157, 279, 156, 0,
	158, 159, 161, 160, 0, 0, 0, 280, 162, 281,
	163, 164, 0, 165, 0, 0, 166, 0, 0, 167,
	282, 0, 168, 0, 283, 169, 170, 171, 172, 173,
	0, 284, 174, 285, 175, 0, 176, 177, 178, 179,
	180, 286, 181, 182, 0, 183, 184, 185, 186, 187,
	189, 190, 188, 191, 192, 193, 194, 0, 195, 0,
	196, 197, 287, 198, 0, 202, 203, 204, 205, 0,
	288, 206, 207, 208, 0, 209, 199, 200, 210, 0,
	211, 289, 290, 212, 0, 218, 213, 214, 201, 215,
	217, 291, 216, 292, 0, 219, 0, 220, 221, 222,
	223, 224, 0, 293, 294, 295, 0, 0, 225, 226,
	296, 297, 0, 227, 228, 229, 230, 0, 0, 231,
	232, 233, 234, 0, 235, 0, 298, 236, 237, 238,
	299, 300, 0, 0, 239, 0, 0, 0, 0, 240,
	241, 242, 243, 244, 620, 609, 610, 607, 608, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 99, 0, 100, 821, 0, 0, 0, 245, 0,
	0, 0, 0, 101, 102, 103, 246, 651, 248, 652,
	104, 653, 654, 0, 105, 252, 253, 106, 107, 0,
	0, 655, 656, 256, 0, 108, 257, 0, 338, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	339, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 306, 120, 657, 121, 658, 659, 0, 122, 0,
	123, 0, 0, 0, 650, 125, 0, 126, 0, 0,
	0, 261, 127, 128, 129, 262, 263, 616, 0, 0,
	130, 131, 660, 661, 662, 0, 132, 0, 133, 0,
	0, 340, 0, 134, 267, 0, 268, 0, 135, 136,
	137, 138, 269, 270, 342, 0, 142, 0, 139, 0,
	341, 140, 663, 141, 664, 665, 666, 667, 668, 0,
	627, 0, 343, 143, 144, 344, 145, 146, 147, 0,
	149, 148, 0, 278, 345, 150, 346, 0, 151, 0,
	0, 152, 0, 153, 154, 155, 157, 279, 156, 347,
	158, 159, 161, 160, 0, 0, 617, 280, 162, 669,
	163, 164, 0, 165, 0, 0, 166, 0, 0, 167,
	282, 348, 168, 349, 283, 169, 170, 171, 172, 173,
	0, 284, 174, 285, 175, 0, 176, 177, 178, 179,
	180, 670, 181, 182, 0, 183, 184, 185, 186, 187,
	189, 190, 188, 191, 192, 193, 194, 0, 195, 350,
	196, 197, 287, 198, 0, 202, 203, 204, 205, 0,
	288, 206, 207, 208, 0, 209, 199, 200, 210, 351,
	211, 671, 290, 212, 0, 218, 213, 214, 201, 215,
	217, 672, 216, 292, 0, 219, 0, 220, 221, 222,
	223, 224, 0, 293, 673, 674, 0, 0, 225, 226,
	296, 297, 615, 227, 228, 229, 230, 0, 0, 231,
	232, 233, 234, 0, 235, 0, 298, 236, 237, 238,
	299, 675, 527, 524, 239, 0, 0, 750, 0, 240,
	241, 242, 243, 244, 0, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 101, 102, 103, 246, 247, 248, 249, 104, 250,
	251, 0, 105, 252, 253, 106, 107, 0, 0, 254,
	255, 256, 0, 108, 257, 0, 338, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 339, 116,
	117, 0, 0, 0, 0, 0, 0, 118, 119, 306,
	120, 258, 121, 259, 260, 0, 122, 0, 123, 0,
	0, 0, 124, 125, 0, 126, 0, 0, 0, 261,
	127, 128, 129, 262, 263, 0, 0, 0, 130, 131,
	264, 265, 266, 0, 132, 0, 133, 0, 0, 340,
	0, 134, 267, 0, 268, 0, 135, 136, 137, 138,
	269, 270, 342, 0, 142, 0, 139, 0, 341, 140,
	271, 141, 272, 273, 274, 275, 276, 0, 277, 0,
	343, 143, 144, 344, 145, 146, 147, 0, 149, 148,
	0, 278, 345, 150, 346, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 279, 156, 347, 158, 159,
	161, 160, 0, 0, 0, 280, 162, 281, 163, 164,
	0, 165, 0, 0, 166, 0, 0, 167, 282, 348,
	168, 349, 283, 169, 170, 171, 172, 173, 0, 284,
	174, 285, 175, 0, 176, 177, 178, 179, 180, 286,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 350, 196, 197,
	287, 198, 0, 202, 203, 204, 205, 0, 288, 206,
	207, 208, 0, 209, 199, 200, 210, 351, 211, 289,
	290, 212, 0, 218, 213, 214, 201, 215, 217, 291,
	216, 292, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 293, 294, 295, 0, 0, 225, 226, 296, 297,
	0, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 0, 235, 0, 298, 236, 237, 238, 299, 300,
	95, 0, 239, 0, 0, 0, 0, 240, 241, 242,
	243, 244, 0, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 101,
	102, 103, 246, 247, 248, 249, 104, 250, 251, 0,
	105, 252, 253, 106, 107, 0, 0, 254, 255, 256,
	0, 108, 257, 0, 0, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 0, 116, 117, 0,
	0, 0, 0, 0, 0, 118, 119, 91, 120, 258,
	121, 259, 260, 0, 122, 0, 123, 0, 0, 0,
	124, 125, 0, 126, 0, 0, 0, 261, 127, 128,
	129, 262, 263, 0, 0, 0, 130, 131, 264, 265,
	266, 0, 132, 0, 133, 0, 0, 0, 0, 134,
	267, 0, 268, 0, 135, 136, 137, 138, 269, 270,
	0, 0, 142, 0, 139, 0, 0, 140, 271, 141,
	272, 273, 274, 275, 276, 0, 277, 0, 0, 143,
	144, 0, 145, 146, 147, 0, 149, 148, 0, 278,
	0, 150, 0, 0, 151, 0, 0, 152, 0, 153,
	154, 155, 157, 279, 156, 0, 158, 159, 161, 160,
	0, 0, 0, 280, 162, 281, 163, 164, 0, 165,
	0, 0, 166, 0, 0, 167, 282, 0, 168, 0,
	283, 169, 170, 171, 172, 173, 0, 284, 174, 285,
	175, 0, 176, 177, 178, 179, 180, 286, 181, 182,
	0, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 0, 195, 0, 196, 197, 287, 198,
	0, 202, 203, 204, 205, 0, 288, 206, 207, 208,
	0, 209, 199, 200, 210, 0, 211, 289, 290, 212,
	0, 218, 213, 214, 201, 215, 217, 291, 216, 292,
	0, 219, 90, 220, 221, 222, 223, 224, 0, 293,
	294, 295, 0, 0, 225, 226, 296, 297, 0, 227,
	228, 229, 230, 0, 0, 231, 232, 233, 234, 0,
	235, 0, 298, 236, 237, 238, 299, 300, 527, 524,
	239, 0, 0, 0, 0, 240, 241, 242, 243, 244,
	0, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 0, 245, 94, 0, 0, 0, 101, 102, 103,
	246, 247, 248, 249, 104, 250, 251, 0, 105, 252,
	253, 106, 107, 0, 0, 254, 255, 256, 0, 108,
	257, 0, 338, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 339, 116, 117, 0, 0, 0,
	0, 0, 0, 118, 119, 306, 120, 258, 121, 259,
	260, 0, 122, 0, 123, 0, 0, 0, 124, 125,
	0, 126, 0, 0, 0, 261, 127, 128, 129, 262,
	263, 0, 0, 0, 130, 131, 264, 265, 266, 0,
	132, 0, 133, 0, 0, 340, 0, 134, 267, 0,
	268, 0, 135, 136, 137, 138, 269, 270, 342, 0,
	142, 0, 139, 0, 341, 140, 271, 141, 272, 273,
	274, 275, 276, 0, 277, 0, 343, 143, 144, 344,
	145, 146, 147, 0, 149, 148, 0, 278, 345, 150,
	346, 0, 151, 0, 0, 152, 0, 153, 154, 155,
	157, 279, 156, 347, 158, 159, 161, 160, 0, 0,
	0, 280, 162, 281, 163, 164, 0, 165, 0, 0,
	166, 0, 0, 167, 282, 348, 168, 349, 283, 169,
	170, 171, 172, 173, 0, 284, 174, 285, 175, 0,
	176, 177, 178, 179, 180, 286, 181, 182, 0, 183,
	184, 185, 186, 187, 189, 190, 188, 191, 192, 193,
	194, 0, 195, 350, 196, 197, 287, 198, 0, 202,
	203, 204, 205, 0, 288, 206, 207, 208, 0, 209,
	199, 200, 210, 351, 211, 289, 290, 212, 0, 218,
	213, 214, 201, 215, 217, 291, 216, 292, 0, 219,
	0, 220, 221, 222, 223, 224, 0, 293, 294, 295,
	0, 0, 225, 226, 296, 297, 0, 227, 228, 229,
	230, 0, 0, 231, 232, 233, 234, 0, 235, 0,
	298, 236, 237, 238, 299, 300, 95, 0, 239, 0,
	0, 0, 0, 240, 241, 242, 243, 244, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 101, 102, 103, 246, 247,
	248, 249, 104, 250, 251, 0, 105, 252, 253, 106,
	107, 0, 0, 254, 255, 256, 0, 108, 257, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 306, 120, 258, 121, 259, 260, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 261, 127, 128, 129, 262, 263, 0,
	0, 0, 130, 131, 264, 265, 266, 0, 132, 0,
	133, 0, 0, 0, 0, 134, 267, 0, 268, 0,
	135, 136, 137, 138, 269, 270, 0, 0, 142, 0,
	139, 0, 0, 140, 271, 141, 272, 273, 274, 275,
	276, 0, 277, 0, 0, 143, 144, 0, 145, 146,
	147, 0, 149, 148, 0, 278, 0, 150, 0, 0,
	151, 0, 0, 152, 0, 153, 154, 155, 157, 279,
	156, 0, 158, 159, 161, 160, 0, 0, 0, 280,
	162, 281, 163, 164, 0, 165, 0, 0, 166, 0,
	0, 167, 282, 0, 168, 0, 283, 169, 170, 171,
	172, 173, 0, 284, 174, 285, 175, 0, 176, 177,
	178, 179, 180, 286, 181, 182, 0, 183, 184, 185,
	186, 187, 189, 190, 188, 191, 192, 193, 194, 0,
	195, 0, 196, 197, 287, 198, 0, 202, 203, 204,
	205, 0, 288, 206, 207, 208, 0, 209, 199, 200,
	210, 0, 211, 289, 290, 212, 0, 218, 213, 214,
	201, 215, 217, 291, 216, 292, 0, 219, 0, 220,
	221, 222, 223, 224, 0, 293, 294, 295, 0, 0,
	225, 226, 296, 297, 0, 227, 228, 229, 230, 0,
	0, 231, 232, 233, 234, 0, 235, 0, 298, 236,
	237, 238, 299, 300, 527, 0, 239, 0, 0, 0,
	0, 240, 241, 242, 243, 244, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 245, 94,
	0, 0, 0, 101, 102, 103, 246, 247, 248, 249,
	104, 250, 251, 0, 105, 252, 253, 106, 107, 0,
	0, 254, 255, 256, 0, 108, 257, 0, 338, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	339, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 306, 120, 258, 121, 259, 260, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 261, 127, 128, 129, 262, 263, 0, 0, 0,
	130, 131, 264, 265, 266, 0, 132, 0, 133, 0,
	0, 340, 0, 134, 267, 0, 268, 0, 135, 136,
	137, 138, 269, 270, 342, 0, 142, 0, 139, 0,
	341, 140, 271, 141, 272, 273, 274, 275, 276, 0,
	277, 0, 343, 143, 144, 344, 145, 146, 147, 0,
	149, 148, 0, 278, 345, 150, 346, 0, 151, 0,
	0, 152, 0, 153, 154, 155, 157, 279, 156, 347,
	158, 159, 161, 160, 0, 0, 0, 280, 162, 281,
	163, 164, 0, 165, 0, 0, 166, 0, 0, 167,
	282, 348, 168, 349, 283, 169, 170, 171, 172, 173,
	0, 284, 174, 285, 175, 0, 176, 177, 178, 179,
	180, 286, 181, 182, 0, 183, 184, 185, 186, 187,
	189, 190, 188, 191, 192, 193, 194, 0, 195, 350,
	196, 197, 287, 198, 0, 202, 203, 204, 205, 0,
	288, 206, 207, 208, 0, 209, 199, 200, 210, 351,
	211, 289, 290, 212, 0, 218, 213, 214, 201, 215,
	217, 291, 216, 292, 0, 219, 0, 220, 221, 222,
	223, 224, 0, 293, 294, 295, 0, 0, 225, 226,
	296, 297, 0, 227, 228, 229, 230, 0, 0, 231,
	232, 233, 234, 0, 235, 0, 298, 236, 237, 238,
	299, 300, 95, 0, 239, 0, 0, 0, 0, 240,
	241, 242, 243, 244, 0, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 101, 102, 103, 246, 247, 248, 249, 104, 250,
	251, 0, 105, 252, 253, 106, 107, 0, 0, 254,
	255, 256, 1141, 108, 257, 0, 0, 0, 109, 110,
	111, 0, 112, 1139, 113, 114, 115, 0, 0, 116,
	117, 0, 0, 0, 0, 0, 0, 118, 119, 306,
	120, 258, 121, 259, 260, 0, 122, 0, 123, 0,
	0, 0, 124, 125, 0, 126, 0, 0, 0, 261,
	127, 128, 129, 262, 263, 0, 1382, 0, 130, 131,
	264, 265, 266, 0, 132, 0, 133, 1144, 0, 0,
	0, 134, 267, 0, 268, 0, 135, 136, 137, 138,
	269, 270, 0, 0, 142, 1380, 139, 0, 0, 140,
	271, 141, 272, 273, 274, 275, 276, 0, 277, 0,
	0, 143, 144, 0, 145, 146, 147, 0, 149, 148,
	0, 278, 0, 150, 0, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 279, 156, 0, 158, 159,
	161, 160, 0, 0, 0, 280, 162, 281, 163, 164,
	0, 165, 0, 0, 166, 0, 0, 167, 282, 0,
	168, 0, 283, 169, 170, 171, 172, 173, 0, 284,
	174, 285, 175, 1143, 176, 177, 178, 179, 180, 286,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 0, 196, 197,
	287, 198, 0, 202, 203, 204, 205, 0, 288, 206,
	207, 208, 0, 209, 199, 200, 210, 0, 211, 289,
	290, 212, 0, 218, 213, 214, 201, 215, 217, 291,
	216, 292, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 293, 294, 295, 0, 0, 225, 226, 296, 297,
	0, 227, 228, 229, 230, 0, 1381, 231, 232, 233,
	234, 0, 235, 0, 298, 236, 237, 238, 299, 300,
	95, 0, 239, 0, 0, 0, 0, 240, 241, 242,
	243, 244, 0, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 101,
	102, 103, 246, 247, 248, 249, 104, 250, 251, 0,
	105, 252, 253, 106, 107, 0, 0, 254, 255, 256,
	1141, 108, 257, 0, 0, 1136, 109, 110, 111, 0,
	112, 1139, 113, 114, 115, 0, 0, 116, 117, 0,
	0, 0, 0, 0, 0, 118, 119, 306, 120, 258,
	121, 259, 260, 0, 122, 0, 123, 0, 0, 0,
	124, 125, 0, 126, 0, 0, 0, 261, 127, 128,
	129, 262, 263, 0, 0, 0, 130, 131, 264, 265,
	266, 0, 132, 0, 133, 1144, 0, 0, 0, 134,
	267, 0, 268, 0, 135, 136, 137, 138, 1135, 270,
	0, 0, 142, 0, 139, 0, 0, 140, 271, 141,
	272, 273, 274, 275, 276, 0, 277, 0, 0, 143,
	144, 0, 145, 146, 147, 0, 149, 148, 0, 278,
	0, 150, 0, 0, 151, 0, 0, 152, 0, 153,
	154, 155, 157, 279, 156, 0, 158, 159, 161, 160,
	0, 0, 0, 280, 162, 281, 163, 164, 0, 165,
	0, 0, 166, 0, 0, 167, 282, 0, 168, 0,
	283, 169, 170, 171, 172, 173, 0, 284, 174, 285,
	175, 1143, 176, 177, 178, 179, 180, 286, 181, 182,
	0, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 0, 195, 0, 196, 197, 287, 198,
	0, 202, 203, 204, 205, 0, 288, 206, 207, 208,
	0, 209, 199, 200, 210, 0, 211, 289, 290, 212,
	0, 218, 213, 214, 201, 215, 217, 291, 216, 292,
	0, 219, 0, 220, 221, 222, 223, 224, 0, 293,
	294, 295, 0, 0, 225, 226, 296, 297, 0, 227,
	228, 229, 230, 0, 1142, 231, 232, 233, 234, 0,
	235, 0, 298, 236, 237, 238, 299, 300, 95, 0,
	239, 0, 0, 0, 0, 240, 241, 242, 243, 244,
	0, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 0, 245, 0, 1835, 0, 0, 101, 102, 103,
	246, 247, 248, 249, 104, 250, 251, 0, 105, 252,
	253, 106, 107, 0, 0, 254, 255, 256, 0, 108,
	257, 0, 0, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 0, 116, 117, 0, 0, 0,
	0, 0, 0, 118, 119, 306, 120, 258, 121, 259,
	260, 0, 122, 0, 123, 0, 0, 0, 124, 125,
	0, 126, 0, 0, 0, 261, 127, 128, 129, 262,
	263, 0, 0, 0, 130, 131, 264, 265, 266, 0,
	132, 0, 133, 0, 0, 0, 0, 134, 267, 0,
	268, 0, 135, 136, 137, 138, 269, 270, 0, 0,
	142, 0, 139, 0, 0, 140, 271, 141, 272, 273,
	274, 275, 276, 0, 277, 0, 0, 143, 144, 0,
	145, 146, 147, 0, 149, 148, 0, 278, 0, 150,
	0, 0, 151, 0, 0, 152, 0, 153, 154, 155,
	157, 279, 156, 0, 158, 159, 161, 160, 0, 0,
	0, 280, 162, 281, 163, 164, 0, 165, 0, 0,
	166, 0, 0, 167, 282, 0, 168, 0, 283, 169,
	170, 171, 172, 173, 0, 284, 174, 285, 175, 0,
	176, 177, 178, 179, 180, 286, 181, 182, 0, 183,
	184, 185, 186, 187, 189, 190, 188, 191, 192, 193,
	194, 0, 195, 0, 196, 197, 287, 198, 0, 202,
	203, 204, 205, 0, 288, 206, 207, 208, 0, 209,
	199, 200, 210, 0, 211, 289, 290, 212, 0, 218,
	213, 214, 201, 215, 217, 291, 216, 292, 0, 219,
	0, 220, 221, 222, 223, 224, 0, 293, 294, 295,
	0, 0, 225, 226, 296, 297, 0, 227, 228, 229,
	230, 0, 0, 231, 232, 233, 234, 0, 235, 0,
	298, 236, 237, 238, 299, 300, 95, 0, 239, 0,
	0, 0, 0, 240, 241, 242, 243, 244, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 101, 102, 103, 246, 247,
	248, 249, 104, 250, 251, 0, 105, 252, 253, 106,
	107, 0, 0, 254, 255, 256, 0, 108, 257, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 306, 120, 258, 121, 259, 260, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 261, 127, 128, 129, 262, 263, 0,
	0, 0, 130, 131, 264, 265, 266, 0, 132, 0,
	133, 0, 0, 0, 0, 134, 267, 0, 268, 0,
	135, 136, 137, 138, 269, 270, 0, 0, 142, 0,
	139, 0, 0, 140, 271, 141, 272, 273, 274, 275,
	276, 0, 277, 0, 0, 143, 144, 0, 145, 146,
	147, 0, 149, 148, 0, 278, 0, 150, 0, 0,
	151, 0, 0, 152, 0, 153, 154, 155, 157, 279,
	156, 0, 158, 159, 161, 160, 0, 0, 0, 280,
	162, 281, 163, 164, 0, 165, 0, 561, 166, 0,
	0, 167, 282, 0, 168, 0, 283, 169, 170, 171,
	172, 173, 0, 284, 174, 285, 175, 0, 176, 177,
	178, 179, 180, 286, 181, 182, 0, 183, 184, 185,
	186, 187, 189, 190, 188, 191, 192, 193, 194, 0,
	195, 0, 196, 197, 287, 198, 0, 202, 203, 204,
	205, 0, 288, 206, 207, 208, 0, 209, 199, 200,
	210, 0, 211, 289, 290, 212, 0, 218, 213, 214,
	201, 215, 217, 291, 216, 292, 0, 219, 0, 220,
	221, 222, 223, 224, 0, 293, 294, 295, 0, 0,
	225, 226, 296, 297, 0, 227, 228, 229, 230, 0,
	0, 231, 232, 233, 234, 0, 235, 0, 298, 236,
	237, 238, 299, 300, 95, 0, 239, 0, 0, 0,
	0, 240, 241, 242, 243, 244, 0, 0, 0, 0,
	98, 99, 1066, 100, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 101, 102, 103, 246, 247, 248, 249,
	104, 250, 251, 0, 105, 252, 253, 106, 107, 0,
	0, 254, 255, 256, 0, 108, 257, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 306, 120, 258, 121, 259, 260, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 261, 127, 128, 129, 262, 263, 0, 0, 0,
	130, 131, 264, 265, 266, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 267, 0, 268, 0, 135, 136,
	137, 138, 269, 270, 0, 0, 142, 0, 139, 0,
	0, 140, 271, 141, 272, 273, 274, 275, 276, 0,
	277, 0, 0, 143, 144, 0, 145, 146, 147, 0,
	149, 148, 0, 278, 0, 150, 0, 0, 151, 0,
	0, 152, 0, 153, 154, 155, 157, 279, 156, 0,
	158, 159, 161, 160, 0, 0, 0, 280, 162, 281,
	163, 164, 0, 165, 0, 0, 166, 0, 0, 167,
	282, 0, 168, 0, 283, 169, 170, 171, 172, 173,
	0, 284, 174, 285, 175, 0, 176, 177, 178, 179,
	180, 286, 181, 182, 0, 183, 184, 185, 186, 187,
	189, 190, 188, 191, 192, 193, 194, 0, 195, 0,
	196, 197, 287, 198, 0, 202, 203, 204, 205, 0,
	288, 206, 207, 208, 0, 209, 199, 200, 210, 0,
	211, 289, 290, 212, 0, 218, 213, 214, 201, 215,
	217, 291, 216, 292, 0, 219, 0, 220, 221, 222,
	223, 224, 0, 293, 294, 295, 0, 0, 225, 226,
	296, 297, 0, 227, 228, 229, 230, 0, 0, 231,
	232, 233, 234, 0, 235, 0, 298, 236, 237, 238,
	299, 300, 95, 0, 239, 0, 0, 0, 0, 240,
	241, 242, 243, 244, 0, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 101, 102, 103, 246, 247, 248, 249, 104, 250,
	251, 0, 105, 252, 253, 106, 107, 0, 0, 254,
	255, 256, 0, 108, 257, 0, 0, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 0, 116,
	117, 0, 0, 0, 0, 0, 0, 118, 119, 306,
	120, 258, 121, 259, 260, 0, 122, 0, 123, 0,
	0, 0, 124, 125, 0, 126, 0, 0, 0, 261,
	127, 128, 129, 262, 263, 0, 0, 0, 130, 131,
	264, 265, 266, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 267, 0, 268, 0, 135, 136, 137, 138,
	977, 270, 0, 0, 142, 0, 139, 0, 0, 140,
	271, 141, 272, 273, 274, 275, 276, 0, 277, 0,
	0, 143, 144, 0, 145, 146, 147, 0, 149, 148,
	0, 278, 0, 150, 0, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 279, 156, 0, 158, 159,
	161, 160, 0, 0, 0, 280, 162, 281, 163, 164,
	0, 165, 0, 561, 166, 0, 0, 167, 282, 0,
	168, 0, 283, 169, 170, 171, 172, 173, 0, 284,
	174, 285, 175, 0, 176, 177, 178, 179, 180, 286,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 0, 196, 197,
	287, 198, 0, 202, 203, 204, 205, 0, 288, 206,
	207, 208, 0, 209, 199, 200, 210, 0, 211, 289,
	290, 212, 0, 218, 213, 214, 201, 215, 217, 291,
	216, 292, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 293, 294, 295, 0, 0, 225, 226, 296, 297,
	0, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 0, 235, 0, 298, 236, 237, 238, 299, 300,
	95, 0, 239, 0, 0, 0, 0, 240, 241, 242,
	243, 244, 0, 0, 0, 0, 98, 99, 717, 100,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 101,
	102, 103, 246, 247, 248, 249, 104, 250, 251, 0,
	105, 252, 253, 106, 107, 0, 0, 254, 255, 256,
	0, 108, 257, 0, 0, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 0, 116, 117, 0,
	0, 0, 0, 0, 0, 118, 119, 306, 120, 258,
	121, 259, 260, 0, 122, 0, 123, 0, 0, 0,
	124, 125, 0, 126, 0, 0, 0, 261, 127, 128,
	129, 262, 263, 0, 0, 0, 130, 131, 264, 265,
	266, 0, 132, 0, 133, 0, 0, 0, 0, 134,
	267, 0, 268, 0, 135, 136, 137, 138, 269, 270,
	0, 0, 142, 0, 139, 0, 0, 140, 271, 141,
	272, 273, 274, 275, 276, 0, 277, 0, 0, 143,
	144, 0, 145, 146, 147, 0, 149, 148, 0, 278,
	0, 150, 0, 0, 151, 0, 0, 152, 0, 153,
	154, 155, 157, 279, 156, 0, 158, 159, 161, 160,
	0, 0, 0, 280, 162, 281, 163, 164, 0, 165,
	0, 0, 166, 0, 0, 167, 282, 0, 168, 0,
	283, 169, 170, 171, 172, 173, 0, 284, 174, 285,
	175, 0, 176, 177, 178, 179, 180, 286, 181, 182,
	0, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 0, 195, 0, 196, 197, 287, 198,
	0, 202, 203, 204, 205, 0, 288, 206, 207, 208,
	0, 209, 199, 200, 210, 0, 211, 289, 290, 212,
	0, 218, 213, 214, 201, 215, 217, 291, 216, 292,
	0, 219, 0, 220, 221, 222, 223, 224, 0, 293,
	294, 295, 0, 0, 225, 226, 296, 297, 0, 227,
	228, 229, 230, 0, 0, 231, 232, 233, 234, 0,
	235, 0, 298, 236, 237, 238, 299, 300, 95, 0,
	239, 0, 0, 0, 0, 240, 241, 242, 243, 244,
	0, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 101, 102, 103,
	246, 247, 248, 249, 104, 250, 251, 0, 105, 252,
	253, 106, 107, 0, 0, 254, 255, 256, 0, 108,
	257, 0, 0, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 0, 116, 117, 0, 0, 0,
	0, 0, 0, 118, 119, 306, 120, 258, 121, 259,
	260, 0, 122, 0, 123, 0, 0, 0, 124, 125,
	0, 126, 0, 0, 0, 261, 127, 128, 129, 262,
	263, 0, 0, 0, 130, 131, 264, 265, 266, 0,
	132, 0, 133, 0, 0, 0, 0, 134, 267, 0,
	268, 0, 135, 136, 137, 138, 573, 270, 0, 0,
	142, 0, 139, 0, 0, 140, 271, 141, 272, 273,
	274, 275, 276, 0, 277, 0, 0, 143, 144, 0,
	145, 146, 147, 0, 149, 148, 0, 278, 0, 150,
	0, 0, 151, 0, 0, 152, 0, 153, 154, 155,
	157, 279, 156, 0, 158, 159, 161, 160, 0, 0,
	0, 280, 162, 281, 163, 164, 0, 165, 0, 561,
	166, 0, 0, 167, 282, 0, 168, 0, 283, 169,
	170, 171, 172, 173, 0, 284, 174, 285, 175, 0,
	176, 177, 178, 179, 180, 286, 181, 182, 0, 183,
	184, 185, 186, 187, 189, 190, 188, 191, 192, 193,
	194, 0, 195, 0, 196, 197, 287, 198, 0, 202,
	203, 204, 205, 0, 288, 206, 207, 208, 0, 209,
	199, 200, 210, 0, 211, 289, 290, 212, 0, 218,
	213, 214, 201, 215, 217, 291, 216, 292, 0, 219,
	0, 220, 221, 222, 223, 224, 0, 293, 294, 295,
	0, 0, 225, 226, 296, 297, 0, 227, 228, 229,
	230, 0, 0, 231, 232, 233, 234, 0, 235, 0,
	298, 236, 237, 238, 299, 300, 95, 0, 239, 0,
	0, 0, 0, 240, 241, 242, 243, 244, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 101, 102, 103, 246, 247,
	248, 249, 104, 250, 251, 0, 105, 252, 253, 106,
	107, 0, 0, 254, 255, 256, 0, 108, 257, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 306, 120, 258, 121, 259, 260, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 261, 127, 128, 129, 262, 263, 0,
	0, 0, 130, 131, 264, 265, 266, 0, 132, 0,
	133, 0, 0, 0, 0, 134, 267, 0, 268, 0,
	135, 136, 137, 138, 566, 270, 0, 0, 142, 0,
	139, 0, 0, 140, 271, 141, 272, 273, 274, 275,
	276, 0, 277, 0, 0, 143, 144, 0, 145, 146,
	147, 0, 149, 148, 0, 278, 0, 150, 0, 0,
	151, 0, 0, 152, 0, 153, 154, 155, 157, 279,
	156, 0, 158, 159, 161, 160, 0, 0, 0, 280,
	162, 281, 163, 164, 0, 165, 0, 561, 166, 0,
	0, 167, 282, 0, 168, 0, 283, 169, 170, 171,
	172, 173, 0, 284, 174, 285, 175, 0, 176, 177,
	178, 179, 180, 286, 181, 182, 0, 183, 184, 185,
	186, 187, 189, 190, 188, 191, 192, 193, 194, 0,
	195, 0, 196, 197, 287, 198, 0, 202, 203, 204,
	205, 0, 288, 206, 207, 208, 0, 209, 199, 200,
	210, 0, 211, 289, 290, 212, 0, 218, 213, 214,
	201, 215, 217, 291, 216, 292, 0, 219, 0, 220,
	221, 222, 223, 224, 0, 293, 294, 295, 0, 0,
	225, 226, 296, 297, 0, 227, 228, 229, 230, 0,
	0, 231, 232, 233, 234, 0, 235, 0, 298, 236,
	237, 238, 299, 300, 95, 0, 239, 0, 0, 0,
	0, 240, 241, 242, 243, 244, 0, 0, 0, 0,
	98, 99, 437, 100, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 101, 102, 103, 246, 247, 248, 249,
	104, 250, 251, 0, 105, 252, 253, 106, 107, 0,
	0, 254, 255, 256, 0, 108, 257, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 306, 120, 258, 121, 259, 260, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 261, 127, 128, 129, 262, 263, 0, 0, 0,
	130, 131, 264, 265, 266, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 267, 0, 268, 0, 135, 136,
	137, 138, 269, 270, 0, 0, 142, 0, 139, 0,
	0, 140, 271, 141, 272, 273, 274, 275, 276, 0,
	277, 0, 0, 143, 144, 0, 145, 146, 147, 0,
	149, 148, 0, 278, 0, 150, 0, 0, 151, 0,
	0, 152, 0, 153, 154, 155, 157, 279, 156, 0,
	158, 159, 161, 160, 0, 0, 0, 280, 162, 281,
	163, 164, 0, 165, 0, 0, 166, 0, 0, 167,
	282, 0, 168, 0, 283, 169, 170, 171, 172, 173,
	0, 284, 174, 285, 436, 0, 176, 177, 178, 179,
	180, 286, 181, 182, 0, 183, 184, 185, 186, 187,
	189, 190, 188, 191, 192, 193, 194, 0, 195, 0,
	196, 197, 287, 198, 0, 202, 203, 204, 205, 0,
	288, 206, 207, 208, 0, 209, 199, 200, 210, 0,
	211, 289, 290, 212, 0, 218, 213, 214, 201, 215,
	217, 291, 216, 292, 0, 219, 0, 220, 221, 222,
	223, 224, 0, 293, 294, 295, 0, 0, 225, 226,
	296, 297, 0, 227, 228, 229, 230, 0, 0, 231,
	232, 233, 234, 0, 235, 0, 298, 236, 237, 238,
	299, 300, 95, 0, 239, 0, 0, 0, 0, 240,
	241, 242, 243, 244, 0, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 101, 102, 103, 246, 247, 248, 249, 104, 250,
	251, 0, 105, 252, 253, 106, 107, 0, 0, 254,
	255, 256, 0, 108, 257, 0, 0, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 0, 116,
	117, 0, 0, 0, 0, 0, 0, 118, 119, 306,
	120, 258, 121, 259, 260, 0, 122, 0, 123, 0,
	0, 0, 124, 125, 0, 126, 0, 0, 0, 261,
	127, 128, 129, 262, 263, 0, 0, 0, 130, 131,
	264, 265, 266, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 267, 0, 268, 0, 135, 136, 137, 138,
	269, 270, 0, 0, 142, 0, 139, 0, 0, 140,
	271, 141, 272, 273, 274, 275, 276, 0, 277, 0,
	0, 143, 144, 0, 145, 146, 147, 0, 149, 148,
	0, 278, 0, 150, 0, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 279, 156, 0, 158, 159,
	161, 160, 0, 0, 0, 280, 162, 281, 163, 164,
	0, 165, 0, 0, 166, 0, 0, 167, 282, 0,
	168, 0, 283, 169, 170, 171, 172, 173, 0, 284,
	174, 285, 175, 0, 176, 177, 178, 179, 180, 286,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 0, 196, 197,
	287, 198, 0, 202, 203, 204, 205, 0, 288, 206,
	207, 208, 0, 209, 199, 200, 210, 0, 211, 289,
	290, 212, 0, 218, 213, 214, 201, 215, 217, 291,
	216, 292, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 293, 294, 295, 0, 0, 225, 226, 296, 297,
	0, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 0, 235, 0, 298, 236, 237, 238, 299, 300,
	95, 0, 239, 0, 0, 0, 0, 240, 241, 242,
	243, 244, 0, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 101,
	102, 103, 246, 247, 248, 249, 104, 250, 251, 0,
	105, 252, 253, 106, 107, 0, 0, 254, 255, 256,
	0, 108, 257, 0, 0, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 0, 116, 117, 0,
	0, 0, 0, 0, 0, 118, 119, 306, 120, 258,
	121, 259, 260, 0, 122, 0, 123, 0, 0, 0,
	124, 125, 0, 126, 0, 0, 0, 261, 127, 128,
	129, 262, 263, 0, 0, 0, 130, 131, 264, 265,
	266, 0, 132, 0, 133, 0, 0, 0, 0, 134,
	267, 0, 268, 0, 135, 136, 137, 138, 1439, 270,
	0, 0, 142, 0, 139, 0, 0, 140, 271, 141,
	272, 273, 274, 275, 276, 0, 277, 0, 0, 143,
	144, 0, 145, 146, 147, 0, 149, 148, 0, 278,
	0, 150, 0, 0, 151, 0, 0, 152, 0, 153,
	154, 155, 157, 279, 156, 0, 158, 159, 161, 160,
	0, 0, 0, 280, 162, 281, 163, 164, 0, 165,
	0, 0, 166, 0, 0, 167, 282, 0, 168, 0,
	283, 169, 170, 171, 172, 173, 0, 284, 174, 285,
	175, 0, 176, 177, 178, 179, 180, 286, 181, 182,
	0, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 0, 195, 0, 196, 197, 287, 198,
	0, 202, 203, 204, 205, 0, 288, 206, 207, 208,
	0, 209, 199, 200, 210, 0, 211, 289, 290, 212,
	0, 218, 213, 214, 201, 215, 217, 291, 216, 292,
	0, 219, 0, 220, 221, 222, 223, 224, 0, 293,
	294, 295, 0, 0, 225, 226, 296, 297, 0, 227,
	228, 229, 230, 0, 0, 231, 232, 233, 234, 0,
	235, 0, 298, 236, 237, 238, 299, 300, 95, 0,
	239, 0, 0, 0, 0, 240, 241, 242, 243, 244,
	0, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 101, 102, 103,
	246, 247, 248, 249, 104, 250, 251, 0, 105, 252,
	253, 106, 107, 0, 0, 254, 255, 256, 0, 108,
	257, 0, 0, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 0, 116, 117, 0, 0, 0,
	0, 0, 0, 118, 119, 306, 120, 258, 121, 259,
	260, 0, 122, 0, 123, 0, 0, 0, 124, 125,
	0, 126, 0, 0, 0, 261, 127, 128, 129, 262,
	263, 0, 0, 0, 130, 131, 264, 265, 266, 0,
	132, 0, 133, 0, 0, 0, 0, 134, 267, 0,
	268, 0, 135, 136, 137, 138, 1437, 270, 0, 0,
	142, 0, 139, 0, 0, 140, 271, 141, 272, 273,
	274, 275, 276, 0, 277, 0, 0, 143, 144, 0,
	145, 146, 147, 0, 149, 148, 0, 278, 0, 150,
	0, 0, 151, 0, 0, 152, 0, 153, 154, 155,
	157, 279, 156, 0, 158, 159, 161, 160, 0, 0,
	0, 280, 162, 281, 163, 164, 0, 165, 0, 0,
	166, 0, 0, 167, 282, 0, 168, 0, 283, 169,
	170, 171, 172, 173, 0, 284, 174, 285, 175, 0,
	176, 177, 178, 179, 180, 286, 181, 182, 0, 183,
	184, 185, 186, 187, 189, 190, 188, 191, 192, 193,
	194, 0, 195, 0, 196, 197, 287, 198, 0, 202,
	203, 204, 205, 0, 288, 206, 207, 208, 0, 209,
	199, 200, 210, 0, 211, 289, 290, 212, 0, 218,
	213, 214, 201, 215, 217, 291, 216, 292, 0, 219,
	0, 220, 221, 222, 223, 224, 0, 293, 294, 295,
	0, 0, 225, 226, 296, 297, 0, 227, 228, 229,
	230, 0, 0, 231, 232, 233, 234, 0, 235, 0,
	298, 236, 237, 238, 299, 300, 95, 0, 239, 0,
	0, 0, 0, 240, 241, 242, 243, 244, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 101, 102, 103, 246, 247,
	248, 249, 104, 250, 251, 0, 105, 252, 253, 106,
	107, 0, 0, 254, 255, 256, 0, 108, 257, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 306, 120, 258, 121, 259, 260, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 261, 127, 128, 129, 262, 263, 0,
	0, 0, 130, 131, 264, 265, 266, 0, 132, 0,
	133, 0, 0, 0, 0, 134, 267, 0, 268, 0,
	135, 136, 137, 138, 1426, 270, 0, 0, 142, 0,
	139, 0, 0, 140, 271, 141, 272, 273, 274, 275,
	276, 0, 277, 0, 0, 143, 144, 0, 145, 146,
	147, 0, 149, 148, 0, 278, 0, 150, 0, 0,
	151, 0, 0, 152, 0, 153, 154, 155, 157, 279,
	156, 0, 158, 159, 161, 160, 0, 0, 0, 280,
	162, 281, 163, 164, 0, 165, 0, 0, 166, 0,
	0, 167, 282, 0, 168, 0, 283, 169, 170, 171,
	172, 173, 0, 284, 174, 285, 175, 0, 176, 177,
	178, 179, 180, 286, 181, 182, 0, 183, 184, 185,
	186, 187, 189, 190, 188, 191, 192, 193, 194, 0,
	195, 0, 196, 197, 287, 198, 0, 202, 203, 204,
	205, 0, 288, 206, 207, 208, 0, 209, 199, 200,
	210, 0, 211, 289, 290, 212, 0, 218, 213, 214,
	201, 215, 217, 291, 216, 292, 0, 219, 0, 220,
	221, 222, 223, 224, 0, 293, 294, 295, 0, 0,
	225, 226, 296, 297, 0, 227, 228, 229, 230, 0,
	0, 231, 232, 233, 234, 0, 235, 0, 298, 236,
	237, 238, 299, 300, 95, 0, 239, 0, 0, 0,
	0, 240, 241, 242, 243, 244, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 101, 102, 103, 246, 247, 248, 249,
	104, 250, 251, 0, 105, 252, 253, 106, 107, 0,
	0, 254, 255, 256, 0, 108, 257, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 306, 120, 258, 121, 259, 260, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 261, 127, 128, 129, 262, 263, 0, 0, 0,
	130, 131, 264, 265, 266, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 267, 0, 268, 0, 135, 136,
	137, 138, 1096, 270, 0, 0, 142, 0, 139, 0,
	0, 140, 271, 141, 272, 273, 274, 275, 276, 0,
	277, 0, 0, 143, 144, 0, 145, 146, 147, 0,
	149, 148, 0, 278, 0, 150, 0, 0, 151, 0,
	0, 152, 0, 153, 154, 155, 157, 279, 156, 0,
	158, 159, 161, 160, 0, 0, 0, 280, 162, 281,
	163, 164, 0, 165, 0, 0, 166, 0, 0, 167,
	282, 0, 168, 0, 283, 169, 170, 171, 172, 173,
	0, 284, 174, 285, 175, 0, 176, 177, 178, 179,
	180, 286, 181, 182, 0, 183, 184, 185, 186, 187,
	189, 190, 188, 191, 192, 193, 194, 0, 195, 0,
	196, 197, 287, 198, 0, 202, 203, 204, 205, 0,
	288, 206, 207, 208, 0, 209, 199, 200, 210, 0,
	211, 289, 290, 212, 0, 218, 213, 214, 201, 215,
	217, 291, 216, 292, 0, 219, 0, 220, 221, 222,
	223, 224, 0, 293, 294, 295, 0, 0, 225, 226,
	296, 297, 0, 227, 228, 229, 230, 0, 0, 231,
	232, 233, 234, 0, 235, 0, 298, 236, 237, 238,
	299, 300, 95, 0, 239, 0, 0, 0, 0, 240,
	241, 242, 243, 244, 0, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 101, 102, 103, 246, 247, 248, 249, 104, 250,
	251, 0, 105, 252, 253, 106, 107, 0, 0, 254,
	255, 256, 0, 108, 257, 0, 0, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 0, 116,
	117, 0, 0, 0, 0, 0, 0, 118, 119, 306,
	120, 258, 121, 259, 260, 0, 122, 0, 123, 0,
	0, 0, 124, 125, 0, 126, 0, 0, 0, 261,
	127, 128, 129, 262, 263, 0, 0, 0, 130, 131,
	264, 265, 266, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 267, 0, 268, 0, 135, 136, 137, 138,
	269, 270, 0, 0, 142, 0, 139, 0, 0, 140,
	271, 141, 272, 273, 274, 275, 276, 0, 277, 0,
	0, 143, 144, 0, 145, 146, 147, 0, 149, 148,
	0, 278, 0, 150, 0, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 279, 156, 0, 158, 159,
	161, 160, 0, 0, 0, 280, 162, 281, 163, 164,
	0, 165, 0, 0, 166, 0, 0, 167, 282, 0,
	168, 0, 283, 169, 170, 171, 172, 173, 0, 284,
	174, 285, 175, 0, 176, 177, 178, 179, 180, 286,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 0, 196, 197,
	287, 198, 0, 453, 203, 204, 205, 0, 288, 206,
	207, 208, 0, 209, 199, 200, 210, 0, 211, 289,
	290, 212, 0, 218, 213, 214, 201, 215, 217, 291,
	216, 292, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 293, 294, 295, 0, 0, 225, 226, 296, 297,
	0, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 0, 235, 0, 298, 236, 237, 238, 299, 300,
	95, 0, 239, 0, 0, 0, 0, 240, 241, 242,
	243, 244, 0, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 245, 0, 961, 0, 0, 101,
	102, 103, 246, 247, 248, 249, 104, 250, 251, 0,
	105, 252, 253, 106, 107, 0, 0, 254, 255, 256,
	0, 108, 257, 0, 0, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 0, 116, 117, 0,
	0, 0, 0, 0, 0, 118, 119, 306, 120, 258,
	121, 259, 260, 0, 122, 0, 123, 0, 0, 0,
	124, 125, 0, 126, 0, 0, 0, 261, 127, 128,
	129, 262, 263, 0, 0, 0, 130, 131, 264, 265,
	266, 0, 132, 0, 133, 0, 0, 0, 0, 134,
	267, 0, 268, 0, 135, 136, 137, 138, 269, 270,
	0, 0, 142, 0, 139, 0, 0, 140, 271, 141,
	272, 273, 274, 275, 276, 0, 277, 0, 0, 143,
	144, 0, 145, 146, 147, 0, 149, 148, 0, 278,
	0, 150, 0, 0, 151, 0, 0, 152, 0, 153,
	154, 155, 157, 279, 156, 0, 158, 159, 161, 160,
	0, 0, 0, 280, 162, 281, 163, 164, 0, 165,
	0, 0, 166, 0, 0, 167, 282, 0, 168, 0,
	283, 169, 170, 171, 172, 173, 0, 284, 174, 285,
	175, 0, 176, 177, 178, 179, 180, 286, 181, 182,
	0, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 0, 195, 0, 196, 197, 287, 198,
	0, 202, 203, 204, 205, 0, 288, 206, 207, 208,
	0, 0, 199, 200, 210, 0, 211, 289, 290, 212,
	0, 218, 213, 214, 201, 215, 217, 291, 216, 292,
	0, 219, 0, 220, 221, 222, 223, 224, 0, 293,
	294, 295, 0, 0, 225, 226, 296, 297, 0, 227,
	228, 229, 230, 0, 0, 231, 232, 233, 234, 0,
	235, 0, 298, 236, 237, 238, 299, 300, 95, 0,
	239, 0, 0, 0, 0, 240, 241, 242, 243, 244,
	0, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 101, 102, 103,
	246, 247, 248, 249, 104, 250, 251, 0, 105, 252,
	253, 106, 107, 0, 0, 254, 255, 256, 0, 108,
	257, 0, 0, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 0, 116, 117, 0, 0, 0,
	0, 0, 0, 118, 119, 306, 120, 258, 121, 259,
	260, 0, 122, 0, 123, 0, 0, 0, 124, 125,
	0, 126, 0, 0, 0, 261, 127, 128, 129, 262,
	263, 0, 0, 0, 130, 131, 264, 265, 266, 0,
	132, 0, 133, 0, 0, 0, 0, 134, 267, 0,
	268, 0, 135, 136, 137, 138, 792, 270, 0, 0,
	142, 0, 139, 0, 0, 140, 271, 141, 272, 273,
	274, 275, 276, 0, 277, 0, 0, 143, 144, 0,
	145, 146, 147, 0, 149, 148, 0, 278, 0, 150,
	0, 0, 151, 0, 0, 152, 0, 153, 154, 155,
	157, 279, 156, 0, 158, 159, 161, 160, 0, 0,
	0, 280, 162, 281, 163, 164, 0, 165, 0, 0,
	166, 0, 0, 167, 282, 0, 168, 0, 283, 169,
	170, 171, 172, 173, 0, 284, 174, 285, 175, 0,
	176, 177, 178, 179, 180, 286, 181, 182, 0, 183,
	184, 185, 186, 187, 189, 190, 188, 191, 192, 193,
	194, 0, 195, 0, 196, 197, 287, 198, 0, 202,
	203, 204, 205, 0, 288, 206, 207, 208, 0, 209,
	199, 200, 210, 0, 211, 289, 290, 212, 0, 218,
	213, 214, 201, 215, 217, 291, 216, 292, 0, 219,
	0, 220, 221, 222, 223, 224, 0, 293, 294, 295,
	0, 0, 225, 226, 296, 297, 0, 227, 228, 229,
	230, 0, 0, 231, 232, 233, 234, 0, 235, 0,
	298, 236, 237, 238, 299, 300, 95, 0, 239, 0,
	0, 0, 0, 240, 241, 242, 243, 244, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 101, 102, 103, 246, 247,
	248, 249, 104, 250, 251, 0, 105, 252, 253, 106,
	107, 0, 0, 254, 255, 256, 0, 108, 257, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 306, 120, 258, 121, 259, 260, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 261, 127, 128, 129, 262, 263, 0,
	0, 0, 130, 131, 264, 265, 266, 0, 132, 0,
	133, 0, 0, 0, 0, 134, 267, 0, 268, 0,
	135, 136, 137, 138, 787, 270, 0, 0, 142, 0,
	139, 0, 0, 140, 271, 141, 272, 273, 274, 275,
	276, 0, 277, 0, 0, 143, 144, 0, 145, 146,
	147, 0, 149, 148, 0, 278, 0, 150, 0, 0,
	151, 0, 0, 152, 0, 153, 154, 155, 157, 279,
	156, 0, 158, 159, 161, 160, 0, 0, 0, 280,
	162, 281, 163, 164, 0, 165, 0, 0, 166, 0,
	0, 167, 282, 0, 168, 0, 283, 169, 170, 171,
	172, 173, 0, 284, 174, 285, 175, 0, 176, 177,
	178, 179, 180, 286, 181, 182, 0, 183, 184, 185,
	186, 187, 189, 190, 188, 191, 192, 193, 194, 0,
	195, 0, 196, 197, 287, 198, 0, 202, 203, 204,
	205, 0, 288, 206, 207, 208, 0, 209, 199, 200,
	210, 0, 211, 289, 290, 212, 0, 218, 213, 214,
	201, 215, 217, 291, 216, 292, 0, 219, 0, 220,
	221, 222, 223, 224, 0, 293, 294, 295, 0, 0,
	225, 226, 296, 297, 0, 227, 228, 229, 230, 0,
	0, 231, 232, 233, 234, 0, 235, 0, 298, 236,
	237, 238, 299, 300, 95, 0, 239, 0, 0, 0,
	0, 240, 241, 242, 243, 244, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 101, 102, 103, 246, 247, 248, 249,
	104, 250, 251, 0, 105, 252, 253, 106, 107, 0,
	0, 254, 255, 725, 0, 108, 257, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 306, 120, 258, 121, 259, 260, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 261, 127, 128, 129, 262, 263, 0, 0, 0,
	130, 131, 264, 265, 266, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 267, 0, 268, 0, 135, 136,
	137, 138, 269, 270, 0, 0, 142, 0, 139, 0,
	0, 140, 271, 141, 272, 273, 274, 275, 276, 0,
	277, 0, 0, 143, 144, 0, 145, 146, 147, 0,
	149, 148, 0, 278, 0, 150, 0, 0, 151, 0,
	0, 152, 0, 153, 154, 155, 157, 279, 467, 0,
	158, 159, 161, 160, 0, 0, 0, 280, 162, 281,
	163, 164, 0, 165, 0, 0, 166, 0, 0, 167,
	282, 0, 168, 0, 283, 169, 170, 171, 172, 173,
	0, 284, 174, 285, 175, 0, 176, 177, 178, 179,
	180, 286, 181, 182, 0, 183, 184, 185, 186, 187,
	189, 190, 188, 191, 192, 193, 194, 0, 195, 0,
	196, 197, 287, 198, 0, 202, 203, 204, 205, 0,
	288, 206, 207, 208, 0, 209, 199, 200, 210, 0,
	211, 289, 290, 212, 0, 218, 213, 214, 201, 215,
	217, 291, 216, 292, 0, 219, 0, 220, 221, 222,
	223, 224, 0, 464, 294, 295, 0, 0, 225, 460,
	296, 297, 0, 227, 228, 229, 230, 0, 0, 231,
	232, 233, 234, 0, 235, 0, 298, 236, 237, 238,
	299, 300, 95, 0, 239, 0, 0, 0, 0, 240,
	241, 242, 243, 244, 0, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 101, 102, 103, 246, 247, 248, 249, 104, 250,
	251, 0, 105, 252, 253, 106, 107, 0, 0, 254,
	255, 256, 0, 108, 257, 0, 0, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 0, 116,
	117, 0, 0, 0, 0, 0, 0, 118, 119, 306,
	120, 258, 121, 259, 260, 0, 122, 0, 123, 0,
	0, 0, 124, 125, 0, 126, 0, 0, 0, 261,
	127, 128, 129, 262, 263, 0, 0, 0, 130, 131,
	264, 265, 266, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 267, 0, 268, 0, 135, 136, 137, 138,
	269, 270, 0, 0, 142, 0, 139, 0, 0, 140,
	271, 141, 272, 273, 274, 275, 276, 0, 277, 0,
	0, 143, 144, 0, 145, 146, 147, 0, 149, 148,
	0, 278, 0, 150, 0, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 279, 467, 0, 158, 159,
	161, 160, 0, 0, 0, 280, 162, 281, 163, 164,
	0, 165, 0, 0, 166, 0, 0, 167, 282, 0,
	168, 0, 283, 169, 170, 171, 172, 173, 0, 284,
	174, 285, 175, 0, 176, 177, 178, 179, 180, 286,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 0, 196, 197,
	287, 198, 0, 202, 203, 204, 205, 0, 288, 206,
	207, 208, 0, 209, 199, 200, 210, 0, 211, 289,
	290, 212, 0, 218, 213, 214, 201, 215, 217, 291,
	216, 292, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 464, 294, 295, 0, 0, 225, 460, 296, 297,
	0, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 0, 235, 0, 298, 236, 237, 238, 299, 300,
	95, 0, 239, 0, 0, 0, 0, 240, 241, 242,
	243, 244, 0, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 101,
	102, 103, 246, 247, 248, 249, 104, 250, 251, 0,
	105, 252, 253, 106, 107, 0, 0, 254, 255, 256,
	0, 108, 257, 0, 0, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 0, 116, 117, 0,
	0, 0, 0, 0, 0, 118, 119, 306, 120, 258,
	121, 259, 260, 0, 122, 0, 123, 0, 0, 0,
	124, 125, 0, 126, 0, 0, 0, 261, 127, 128,
	129, 262, 263, 0, 0, 0, 130, 131, 264, 265,
	266, 0, 132, 0, 133, 0, 0, 0, 0, 134,
	267, 0, 268, 0, 135, 136, 137, 138, 705, 270,
	0, 0, 142, 0, 139, 0, 0, 140, 271, 141,
	272, 273, 274, 275, 276, 0, 277, 0, 0, 143,
	144, 0, 145, 146, 147, 0, 149, 148, 0, 278,
	0, 150, 0, 0, 151, 0, 0, 152, 0, 153,
	154, 155, 157, 279, 156, 0, 158, 159, 161, 160,
	0, 0, 0, 280, 162, 281, 163, 164, 0, 165,
	0, 0, 166, 0, 0, 167, 282, 0, 168, 0,
	283, 169, 170, 171, 172, 173, 0, 284, 174, 285,
	175, 0, 176, 177, 178, 179, 180, 286, 181, 182,
	0, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 0, 195, 0, 196, 197, 287, 198,
	0, 202, 203, 204, 205, 0, 288, 206, 207, 208,
	0, 209, 199, 200, 210, 0, 211, 289, 290, 212,
	0, 218, 213, 214, 201, 215, 217, 291, 216, 292,
	0, 219, 0, 220, 221, 222, 223, 224, 0, 293,
	294, 295, 0, 0, 225, 226, 296, 297, 0, 227,
	228, 229, 230, 0, 0, 231, 232, 233, 234, 0,
	235, 0, 298, 236, 237, 238, 299, 300, 95, 0,
	239, 0, 0, 0, 0, 240, 241, 242, 243, 244,
	0, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 101, 102, 103,
	246, 247, 248, 249, 104, 250, 251, 0, 105, 252,
	253, 106, 107, 0, 0, 254, 255, 256, 0, 108,
	257, 0, 0, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 0, 116, 117, 0, 0, 0,
	0, 0, 0, 118, 119, 306, 120, 258, 121, 259,
	260, 0, 122, 0, 123, 0, 0, 0, 124, 125,
	0, 126, 0, 0, 0, 261, 127, 128, 129, 262,
	263, 0, 0, 0, 130, 131, 264, 265, 266, 0,
	132, 0, 133, 0, 0, 0, 0, 134, 267, 0,
	268, 0, 135, 136, 137, 138, 703, 270, 0, 0,
	142, 0, 139, 0, 0, 140, 271, 141, 272, 273,
	274, 275, 276, 0, 277, 0, 0, 143, 144, 0,
	145, 146, 147, 0, 149, 148, 0, 278, 0, 150,
	0, 0, 151, 0, 0, 152, 0, 153, 154, 155,
	157, 279, 156, 0, 158, 159, 161, 160, 0, 0,
	0, 280, 162, 281, 163, 164, 0, 165, 0, 0,
	166, 0, 0, 167, 282, 0, 168, 0, 283, 169,
	170, 171, 172, 173, 0, 284, 174, 285, 175, 0,
	176, 177, 178, 179, 180, 286, 181, 182, 0, 183,
	184, 185, 186, 187, 189, 190, 188, 191, 192, 193,
	194, 0, 195, 0, 196, 197, 287, 198, 0, 202,
	203, 204, 205, 0, 288, 206, 207, 208, 0, 209,
	199, 200, 210, 0, 211, 289, 290, 212, 0, 218,
	213, 214, 201, 215, 217, 291, 216, 292, 0, 219,
	0, 220, 221, 222, 223, 224, 0, 293, 294, 295,
	0, 0, 225, 226, 296, 297, 0, 227, 228, 229,
	230, 0, 0, 231, 232, 233, 234, 0, 235, 0,
	298, 236, 237, 238, 299, 300, 95, 0, 239, 0,
	0, 0, 0, 240, 241, 242, 243, 244, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 101, 102, 103, 246, 247,
	248, 249, 104, 250, 251, 0, 105, 252, 253, 106,
	107, 0, 0, 254, 255, 256, 0, 108, 257, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 306, 120, 258, 121, 259, 260, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 261, 127, 128, 129, 262, 263, 0,
	0, 0, 130, 131, 264, 265, 266, 0, 132, 0,
	133, 0, 0, 0, 0, 134, 267, 0, 268, 0,
	135, 136, 137, 138, 700, 270, 0, 0, 142, 0,
	139, 0, 0, 140, 271, 141, 272, 273, 274, 275,
	276, 0, 277, 0, 0, 143, 144, 0, 145, 146,
	147, 0, 149, 148, 0, 278, 0, 150, 0, 0,
	151, 0, 0, 152, 0, 153, 154, 155, 157, 279,
	156, 0, 158, 159, 161, 160, 0, 0, 0, 280,
	162, 281, 163, 164, 0, 165, 0, 0, 166, 0,
	0, 167, 282, 0, 168, 0, 283, 169, 170, 171,
	172, 173, 0, 284, 174, 285, 175, 0, 176, 177,
	178, 179, 180, 286, 181, 182, 0, 183, 184, 185,
	186, 187, 189, 190, 188, 191, 192, 193, 194, 0,
	195, 0, 196, 197, 287, 198, 0, 202, 203, 204,
	205, 0, 288, 206, 207, 208, 0, 209, 199, 200,
	210, 0, 211, 289, 290, 212, 0, 218, 213, 214,
	201, 215, 217, 291, 216, 292, 0, 219, 0, 220,
	221, 222, 223, 224, 0, 293, 294, 295, 0, 0,
	225, 226, 296, 297, 0, 227, 228, 229, 230, 0,
	0, 231, 232, 233, 234, 0, 235, 0, 298, 236,
	237, 238, 299, 300, 95, 0, 239, 0, 0, 0,
	0, 240, 241, 242, 243, 244, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 101, 102, 103, 246, 247, 248, 249,
	104, 250, 251, 0, 105, 252, 253, 106, 107, 0,
	0, 254, 255, 256, 0, 108, 257, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 306, 120, 258, 121, 259, 260, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 261, 127, 128, 129, 262, 263, 0, 0, 0,
	130, 131, 264, 265, 266, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 267, 0, 268, 0, 135, 136,
	137, 138, 697, 270, 0, 0, 142, 0, 139, 0,
	0, 140, 271, 141, 272, 273, 274, 275, 276, 0,
	277, 0, 0, 143, 144, 0, 145, 146, 147, 0,
	149, 148, 0, 278, 0, 150, 0, 0, 151, 0,
	0, 152, 0, 153, 154, 155, 157, 279, 156, 0,
	158, 159, 161, 160, 0, 0, 0, 280, 162, 281,
	163, 164, 0, 165, 0, 0, 166, 0, 0, 167,
	282, 0, 168, 0, 283, 169, 170, 171, 172, 173,
	0, 284, 174, 285, 175, 0, 176, 177, 178, 179,
	180, 286, 181, 182, 0, 183, 184, 185, 186, 187,
	189, 190, 188, 191, 192, 193, 194, 0, 195, 0,
	196, 197, 287, 198, 0, 202, 203, 204, 205, 0,
	288, 206, 207, 208, 0, 209, 199, 200, 210, 0,
	211, 289, 290, 212, 0, 218, 213, 214, 201, 215,
	217, 291, 216, 292, 0, 219, 0, 220, 221, 222,
	223, 224, 0, 293, 294, 295, 0, 0, 225, 226,
	296, 297, 0, 227, 228, 229, 230, 0, 0, 231,
	232, 233, 234, 0, 235, 0, 298, 236, 237, 238,
	299, 300, 95, 0, 239, 0, 0, 0, 0, 240,
	241, 242, 243, 244, 0, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 101, 102, 103, 246, 247, 248, 249, 104, 250,
	251, 0, 105, 252, 253, 106, 107, 0, 0, 254,
	255, 256, 0, 108, 257, 0, 0, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 0, 116,
	117, 0, 0, 0, 0, 0, 0, 118, 119, 306,
	120, 258, 121, 259, 260, 0, 122, 0, 123, 0,
	0, 0, 124, 125, 0, 126, 0, 0, 0, 261,
	127, 128, 129, 262, 263, 0, 0, 0, 130, 131,
	264, 265, 266, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 267, 0, 268, 0, 135, 136, 137, 138,
	695, 270, 0, 0, 142, 0, 139, 0, 0, 140,
	271, 141, 272, 273, 274, 275, 276, 0, 277, 0,
	0, 143, 144, 0, 145, 146, 147, 0, 149, 148,
	0, 278, 0, 150, 0, 0, 151, 0, 0, 152,
	0, 153, 154, 155, 157, 279, 156, 0, 158, 159,
	161, 160, 0, 0, 0, 280, 162, 281, 163, 164,
	0, 165, 0, 0, 166, 0, 0, 167, 282, 0,
	168, 0, 283, 169, 170, 171, 172, 173, 0, 284,
	174, 285, 175, 0, 176, 177, 178, 179, 180, 286,
	181, 182, 0, 183, 184, 185, 186, 187, 189, 190,
	188, 191, 192, 193, 194, 0, 195, 0, 196, 197,
	287, 198, 0, 202, 203, 204, 205, 0, 288, 206,
	207, 208, 0, 209, 199, 200, 210, 0, 211, 289,
	290, 212, 0, 218, 213, 214, 201, 215, 217, 291,
	216, 292, 0, 219, 0, 220, 221, 222, 223, 224,
	0, 293, 294, 295, 0, 0, 225, 226, 296, 297,
	0, 227, 228, 229, 230, 0, 0, 231, 232, 233,
	234, 0, 235, 0, 298, 236, 237, 238, 299, 300,
	95, 0, 239, 0, 0, 0, 0, 240, 241, 242,
	243, 244, 0, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 101,
	102, 103, 246, 247, 248, 249, 104, 250, 251, 0,
	105, 252, 253, 106, 107, 0, 0, 254, 255, 256,
	0, 108, 257, 0, 0, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 0, 116, 117, 0,
	0, 0, 0, 0, 0, 118, 119, 306, 120, 258,
	121, 259, 260, 0, 122, 0, 123, 0, 0, 0,
	124, 125, 0, 126, 0, 0, 0, 261, 127, 128,
	129, 262, 263, 0, 0, 0, 130, 131, 264, 265,
	266, 0, 132, 0, 133, 0, 0, 0, 0, 134,
	267, 0, 268, 0, 135, 136, 137, 138, 569, 270,
	0, 0, 142, 0, 139, 0, 0, 140, 271, 141,
	272, 273, 274, 275, 276, 0, 277, 0, 0, 143,
	144, 0, 145, 146, 147, 0, 149, 148, 0, 278,
	0, 150, 0, 0, 151, 0, 0, 152, 0, 153,
	154, 155, 157, 279, 156, 0, 158, 159, 161, 160,
	0, 0, 0, 280, 162, 281, 163, 164, 0, 165,
	0, 0, 166, 0, 0, 167, 282, 0, 168, 0,
	283, 169, 170, 171, 172, 173, 0, 284, 174, 285,
	175, 0, 176, 177, 178, 179, 180, 286, 181, 182,
	0, 183, 184, 185, 186, 187, 189, 190, 188, 191,
	192, 193, 194, 0, 195, 0, 196, 197, 287, 198,
	0, 202, 203, 204, 205, 0, 288, 206, 207, 208,
	0, 209, 199, 200, 210, 0, 211, 289, 290, 212,
	0, 218, 213, 214, 201, 215, 217, 291, 216, 292,
	0, 219, 0, 220, 221, 222, 223, 224, 0, 293,
	294, 295, 0, 0, 225, 226, 296, 297, 0, 227,
	228, 229, 230, 0, 0, 231, 232, 233, 234, 0,
	235, 0, 298, 236, 237, 238, 299, 300, 95, 0,
	239, 0, 0, 0, 0, 240, 241, 242, 243, 244,
	0, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 101, 102, 103,
	246, 247, 248, 249, 104, 250, 251, 0, 105, 252,
	253, 106, 107, 0, 0, 254, 255, 256, 0, 108,
	257, 0, 0, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 0, 116, 117, 0, 0, 0,
	0, 0, 0, 118, 119, 306, 120, 258, 121, 259,
	260, 0, 122, 0, 123, 0, 0, 0, 124, 125,
	0, 126, 0, 0, 0, 261, 127, 128, 129, 262,
	263, 0, 0, 0, 130, 131, 264, 265, 266, 0,
	132, 0, 133, 0, 0, 0, 0, 134, 267, 0,
	268, 0, 135, 136, 137, 138, 269, 270, 0, 0,
	142, 0, 139, 0, 0, 140, 271, 141, 272, 273,
	274, 275, 276, 0, 277, 0, 0, 143, 144, 0,
	145, 146, 147, 0, 149, 148, 0, 278, 0, 150,
	0, 0, 151, 0, 0, 152, 0, 153, 154, 155,
	157, 279, 156, 0, 158, 159, 161, 160, 0, 0,
	0, 280, 162, 281, 163, 164, 0, 165, 0, 0,
	166, 0, 0, 167, 282, 0, 168, 0, 283, 169,
	170, 171, 172, 173, 0, 284, 174, 285, 175, 0,
	176, 177, 178, 179, 180, 286, 550, 182, 0, 183,
	184, 185, 186, 187, 189, 190, 188, 191, 192, 193,
	194, 0, 195, 0, 196, 197, 287, 198, 0, 202,
	203, 204, 205, 0, 288, 206, 207, 208, 0, 209,
	199, 200, 210, 0, 211, 289, 290, 212, 0, 218,
	213, 214, 201, 215, 217, 291, 216, 292, 0, 219,
	0, 220, 221, 222, 223, 224, 0, 293, 294, 295,
	0, 0, 225, 226, 296, 297, 0, 227, 228, 229,
	230, 0, 0, 231, 232, 233, 234, 0, 235, 0,
	298, 236, 237, 238, 299, 300, 95, 0, 239, 0,
	0, 0, 0, 240, 241, 242, 243, 244, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 101, 102, 103, 246, 247,
	248, 249, 104, 250, 251, 0, 105, 252, 253, 106,
	107, 0, 0, 254, 255, 256, 0, 458, 257, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 306, 120, 258, 121, 259, 260, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 261, 127, 128, 129, 262, 263, 0,
	0, 0, 130, 131, 264, 265, 266, 0, 132, 0,
	133, 0, 0, 0, 0, 134, 267, 0, 268, 0,
	135, 136, 137, 138, 269, 270, 0, 0, 142, 0,
	139, 0, 0, 140, 271, 141, 272, 273, 274, 275,
	276, 0, 277, 0, 0, 143, 144, 0, 145, 146,
	147, 0, 149, 148, 0, 278, 0, 150, 0, 0,
	456, 0, 0, 152, 0, 153, 154, 155, 157, 279,
	467, 0, 158, 159, 161, 160, 0, 0, 0, 280,
	162, 281, 163, 164, 0, 165, 0, 0, 166, 0,
	0, 167, 282, 0, 168, 0, 283, 169, 170, 171,
	172, 173, 0, 284, 174, 285, 175, 0, 176, 177,
	178, 179, 180, 286, 181, 182, 0, 183, 184, 185,
	186, 187, 189, 190, 188, 191, 192, 193, 194, 0,
	195, 0, 196, 197, 459, 198, 0, 202, 203, 204,
	205, 0, 288, 206, 457, 208, 0, 209, 199, 200,
	210, 0, 211, 289, 290, 212, 0, 218, 213, 214,
	201, 215, 217, 291, 216, 292, 0, 219, 0, 220,
	221, 222, 223, 224, 0, 464, 294, 295, 0, 0,
	225, 460, 296, 297, 0, 227, 228, 229, 230, 0,
	0, 231, 232, 233, 234, 0, 235, 0, 298, 236,
	237, 238, 299, 300, 95, 0, 239, 0, 0, 0,
	0, 240, 241, 242, 243, 244, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 101, 102, 103, 246, 247, 248, 249,
	104, 250, 251, 0, 105, 252, 253, 106, 107, 0,
	0, 254, 255, 256, 0, 108, 257, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 306, 120, 258, 121, 259, 260, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 261, 127, 128, 129, 262, 263, 0, 0, 0,
	130, 131, 264, 265, 266, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 267, 0, 268, 0, 135, 136,
	137, 138, 269, 270, 0, 0, 142, 0, 139, 0,
	0, 140, 271, 141, 272, 273, 274, 275, 276, 0,
	277, 0, 0, 143, 144, 0, 145, 146, 147, 0,
	149, 148, 0, 278, 0, 150, 0, 0, 151, 0,
	0, 152, 0, 153, 154, 155, 157, 279, 156, 0,
	158, 159, 161, 160, 0, 0, 0, 280, 162, 281,
	163, 164, 0, 165, 0, 0, 166, 0, 0, 167,
	282, 0, 168, 0, 283, 169, 170, 0, 172, 173,
	0, 284, 174, 285, 175, 0, 176, 177, 178, 0,
	180, 286, 181, 182, 0, 183, 184, 185, 186, 187,
	189, 190, 188, 191, 192, 193, 194, 0, 195, 0,
	196, 197, 287, 0, 0, 202, 203, 204, 205, 0,
	288, 206, 207, 208, 0, 209, 199, 200, 210, 0,
	211, 289, 290, 212, 0, 218, 213, 214, 201, 215,
	217, 291, 216, 292, 0, 219, 0, 220, 221, 222,
	223, 224, 0, 293, 294, 295, 0, 0, 225, 226,
	296, 297, 0, 227, 228, 229, 230, 0, 0, 231,
	232, 233, 234, 0, 235, 0, 298, 236, 237, 238,
	299, 300, 0, 0, 239, 0, 0, 0, 0, 240,
	241, 242, 243, 244, 853, 854, 0, 873, 874, 875,
	883, 884, 885, 0, 0, 0, 0, 0, 0, 0,
	876, 0, 0, 0, 0, 0, 0, 856, 0, 0,
	887, 0, 853, 854, 0, 873, 874, 875, 883, 884,
	885, 0, 0, 0, 0, 0, 0, 0, 876, 0,
	0, 855, 0, 0, 0, 856, 0, 870, 887, 0,
	853, 854, 0, 873, 874, 875, 883, 884, 885, 0,
	0, 0, 0, 0, 0, 0, 876, 0, 0, 855,
	0, 0, 0, 856, 0, 870, 887, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 855, 0, 861,
	0, 0, 0, 870, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 880, 888,
	0, 0, 0, 0, 0, 0, 0, 861, 0, 0,
	0, 0, 0, 0, 0, 0, 886, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 880, 888, 0, 0,
	878, 0, 0, 0, 0, 861, 871, 0, 0, 0,
	0, 0, 0, 0, 886, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 880, 888, 0, 0, 878, 0,
	0, 877, 0, 0, 871, 0, 0, 0, 0, 0,
	0, 0, 886, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 878, 0, 0, 877,
	0, 0, 871, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	0, 0, 0, 0, 0, 0, 0, 877, 0, 0,
	0, 0, 0, 881, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 872, 853, 854, 0,
	873, 874, 875, 883, 884, 885, 0, 0, 0, 0,
	0, 881, 0, 876, 0, 0, 0, 0, 0, 0,
	856, 0, 0, 887, 872, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 881,
	0, 0, 0, 0, 855, 0, 0, 0, 879, 0,
	870, 867, 868, 869, 882, 0, 866, 864, 865, 857,
	858, 859, 860, 862, 863, 0, 0, 0, 0, 2086,
	0, 0, 0, 0, 0, 0, 879, 0, 0, 867,
	868, 869, 882, 0, 866, 864, 865, 857, 858, 859,
	860, 862, 863, 0, 0, 0, 0, 2020, 0, 0,
	0, 0, 861, 0, 879, 0, 0, 867, 868, 869,
	882, 0, 866, 864, 865, 857, 858, 859, 860, 862,
	863, 880, 888, 0, 0, 2015, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 886,
	0, 0, 853, 854, 0, 873, 874, 875, 883, 884,
	885, 0, 0, 878, 0, 0, 0, 0, 876, 871,
	0, 0, 0, 0, 0, 856, 0, 0, 887, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 877, 0, 0, 0, 0, 855,
	0, 0, 0, 0, 0, 870, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 872, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 881, 861, 853, 854,
	0, 873, 874, 875, 883, 884, 885, 0, 0, 0,
	0, 0, 0, 0, 876, 0, 880, 888, 0, 0,
	0, 856, 0, 0, 887, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 886, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 855, 0, 0, 878, 0,
	0, 870, 0, 0, 871, 0, 0, 0, 0, 0,
	0, 879, 0, 0, 867, 868, 869, 882, 0, 866,
	864, 865, 857, 858, 859, 860, 862, 863, 0, 877,
	0, 0, 2011, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 861, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 880, 888, 0, 0, 872, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	886, 881, 0, 853, 854, 0, 873, 874, 875, 883,
	884, 885, 0, 0, 878, 0, 0, 0, 0, 876,
	871, 0, 0, 0, 0, 0, 856, 0, 0, 887,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 877, 0, 0, 0, 0,
	855, 0, 0, 0, 0, 0, 870, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 879, 0, 0, 867,
	868, 869, 882, 0, 866, 864, 865, 857, 858, 859,
	860, 862, 863, 0, 0, 0, 0, 1988, 0, 0,
	0, 0, 872, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 881, 861, 853,
	854, 0, 873, 874, 875, 883, 884, 885, 0, 0,
	0, 0, 0, 0, 0, 876, 0, 880, 888, 0,
	0, 0, 856, 0, 0, 887, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 886, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 855, 0, 0, 878,
	0, 0, 870, 0, 0, 871, 0, 0, 0, 0,
	0, 0, 879, 0, 0, 867, 868, 869, 882, 0,
	866, 864, 865, 857, 858, 859, 860, 862, 863, 0,
	877, 0, 0, 1919, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 861, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 880, 888, 0, 0, 872, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 886, 881, 0, 853, 854, 0, 873, 874, 875,
	883, 884, 885, 0, 0, 878, 0, 0, 0, 0,
	876, 871, 0, 0, 0, 0, 0, 856, 0, 0,
	887, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 0, 0, 0,
	0, 855, 0, 0, 0, 0, 0, 870, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 879, 0, 0,
	867, 868, 869, 882, 0, 866, 864, 865, 857, 858,
	859, 860, 862, 863, 0, 0, 0, 0, 1918, 0,
	0, 0, 0, 872, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 881, 861,
	853, 854, 0, 873, 874, 875, 883, 884, 885, 0,
	0, 0, 0, 0, 0, 0, 876, 0, 880, 888,
	0, 0, 0, 856, 0, 0, 887, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 886, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 855, 0, 0,
	878, 0, 0, 870, 0, 0, 871, 0, 0, 0,
	0, 0, 0, 879, 0, 0, 867, 868, 869, 882,
	0, 866, 864, 865, 857, 858, 859, 860, 862, 863,
	0, 877, 0, 0, 1857, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 861, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 880, 888, 0, 0, 872, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 886, 881, 0, 853, 854, 0, 873, 874,
	875, 883, 884, 885, 0, 0, 878, 0, 0, 0,
	0, 876, 871, 0, 0, 0, 0, 0, 856, 0,
	0, 887, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 877, 0, 0,
	0, 0, 855, 0, 0, 0, 0, 0, 870, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 879, 0,
	0, 867, 868, 869, 882, 0, 866, 864, 865, 857,
	858, 859, 860, 862, 863, 0, 0, 0, 0, 1810,
	0, 0, 0, 0, 872, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 881,
	861, 853, 854, 0, 873, 874, 875, 883, 884, 885,
	0, 0, 0, 0, 0, 0, 0, 876, 0, 880,
	888, 0, 0, 0, 856, 0, 0, 887, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 886, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 855, 0,
	0, 878, 0, 0, 870, 0, 0, 871, 0, 0,
	0, 0, 0, 0, 879, 0, 0, 867, 868, 869,
	882, 0, 866, 864, 865, 857, 858, 859, 860, 862,
	863, 0, 877, 0, 0, 1730, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 861, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 880, 888, 0, 0, 872,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 886, 881, 0, 853, 854, 0, 873,
	874, 875, 883, 884, 885, 0, 0, 878, 0, 0,
	0, 0, 876, 871, 0, 0, 0, 0, 0, 856,
	0, 0, 887, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 877, 0,
	0, 0, 0, 855, 0, 0, 0, 0, 0, 870,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 879,
	0, 0, 867, 868, 869, 882, 0, 866, 864, 865,
	857, 858, 859, 860, 862, 863, 0, 0, 0, 0,
	1706, 0, 0, 0, 0, 872, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	881, 861, 853, 854, 0, 873, 874, 875, 883, 884,
	885, 0, 0, 0, 0, 0, 0, 0, 876, 0,
	880, 888, 0, 0, 0, 856, 0, 0, 887, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 886, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 855,
	0, 0, 878, 0, 0, 870, 0, 0, 871, 0,
	0, 0, 0, 0, 0, 879, 0, 0, 867, 868,
	869, 882, 0, 866, 864, 865, 857, 858, 859, 860,
	862, 863, 0, 877, 0, 0, 1238, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 861, 2188, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 880, 888, 0, 0,
	872, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 886, 881, 0, 853, 854, 0,
	873, 874, 875, 883, 884, 885, 0, 0, 878, 0,
	0, 0, 0, 876, 871, 0, 0, 0, 0, 0,
	856, 0, 0, 887, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 877,
	0, 0, 0, 0, 855, 0, 0, 0, 0, 0,
	870, 0, 0, 0, 2187, 0, 0, 0, 0, 0,
	879, 0, 0, 867, 868, 869, 882, 0, 866, 864,
	865, 857, 858, 859, 860, 862, 863, 0, 0, 1482,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 881, 861, 0, 1552, 0, 0, 1551, 853, 854,
	0, 873, 874, 875, 883, 884, 885, 0, 0, 0,
	0, 880, 888, 0, 876, 0, 0, 0, 0, 1402,
	0, 856, 0, 0, 887, 0, 0, 0, 0, 886,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 878, 0, 855, 0, 0, 0, 871,
	0, 870, 0, 0, 0, 0, 879, 0, 0, 867,
	868, 869, 882, 0, 866, 864, 865, 857, 858, 859,
	860, 862, 863, 0, 877, 0, 0, 0, 0, 1403,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 861, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1124, 872, 880, 888, 0, 0, 853, 854, 0, 873,
	874, 875, 883, 884, 885, 0, 881, 0, 0, 0,
	886, 0, 876, 0, 0, 0, 1123, 0, 0, 856,
	0, 0, 887, 0, 878, 0, 0, 0, 0, 0,
	871, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 855, 0, 0, 0, 0, 0, 870,
	0, 0, 0, 0, 0, 877, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 879, 0, 0, 867, 868, 869, 882, 0, 866,
	864, 865, 857, 858, 859, 860, 862, 863, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 861, 872, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 881, 0, 0,
	880, 888, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 886, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 878, 0, 0, 0, 0, 0, 871, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 879, 877, 0, 867, 868, 869, 882, 35,
	866, 864, 865, 857, 858, 859, 860, 862, 863, 0,
	36, 63, 0, 853, 854, 0, 873, 874, 875, 883,
	884, 885, 0, 38, 0, 0, 0, 0, 0, 876,
	0, 0, 0, 0, 0, 0, 856, 65, 0, 887,
	872, 0, 0, 39, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 881, 0, 0, 0, 0,
	855, 0, 0, 0, 52, 0, 870, 0, 0, 0,
	0, 47, 0, 0, 66, 0, 0, 0, 51, 0,
	48, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 0, 0, 0, 49, 0, 0, 0, 0, 0,
	0, 0, 1520, 1521, 0, 1538, 1539, 1540, 861, 0,
	879, 0, 0, 867, 868, 869, 882, 0, 866, 864,
	865, 857, 858, 859, 860, 862, 863, 880, 888, 0,
	0, 853, 854, 0, 873, 874, 875, 883, 884, 885,
	0, 0, 0, 0, 0, 886, 0, 876, 0, 0,
	0, 0, 0, 0, 856, 1535, 0, 887, 0, 878,
	0, 0, 0, 0, 0, 871, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 855, 0,
	50, 0, 0, 0, 870, 0, 0, 0, 0, 0,
	877, 545, 0, 0, 0, 0, 0, 0, 68, 69,
	37, 0, 55, 0, 56, 0, 67, 1526, 0, 0,
	0, 57, 0, 0, 0, 79, 0, 0, 0, 0,
	0, 60, 0, 0, 62, 0, 0, 1542, 0, 0,
	0, 0, 0, 64, 0, 0, 861, 872, 0, 0,
	0, 0, 81, 0, 1541, 0, 1520, 1521, 0, 1538,
	1539, 1540, 881, 0, 0, 880, 888, 0, 0, 70,
	0, 0, 1698, 0, 1536, 0, 0, 0, 71, 0,
	0, 0, 0, 886, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 77, 0, 0, 878, 0, 0,
	0, 78, 0, 871, 0, 0, 0, 0, 0, 1535,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 0, 0, 879, 877, 0,
	867, 868, 869, 882, 0, 866, 864, 865, 857, 858,
	859, 860, 862, 863, 0, 0, 1537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1526, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 853, 854, 872, 873, 874, 875, 883,
	884, 885, 0, 0, 0, 0, 0, 0, 0, 876,
	881, 0, 0, 0, 0, 0, 856, 0, 1541, 887,
	0, 853, 854, 0, 873, 874, 875, 883, 884, 885,
	0, 0, 0, 1710, 0, 0, 0, 876, 1536, 0,
	855, 1553, 0, 0, 856, 0, 870, 887, 0, 1532,
	1533, 1534, 0, 0, 1531, 1529, 1530, 1522, 1523, 1524,
	1525, 1527, 1528, 0, 0, 0, 0, 0, 855, 0,
	0, 0, 0, 0, 870, 879, 0, 0, 867, 868,
	869, 882, 0, 866, 864, 865, 857, 858, 859, 860,
	862, 863, 0, 0, 0, 0, 0, 0, 861, 0,
	0, 0, 0, 1558, 0, 0, 0, 0, 0, 0,
	1537, 0, 0, 0, 0, 0, 0, 880, 888, 0,
	0, 0, 0, 0, 0, 0, 861, 0, 0, 0,
	0, 0, 0, 0, 0, 886, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 880, 888, 0, 0, 878,
	0, 0, 0, 0, 0, 871, 0, 0, 0, 0,
	0, 0, 0, 886, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 878, 0, 0,
	877, 0, 0, 871, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1532, 1533, 1534, 0, 0, 1531, 1529,
	1530, 1522, 1523, 1524, 1525, 1527, 1528, 0, 877, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 872, 853, 854,
	0, 873, 874, 875, 883, 884, 885, 0, 0, 0,
	0, 0, 881, 0, 876, 0, 0, 0, 0, 0,
	0, 856, 0, 0, 887, 872, 853, 854, 0, 873,
	874, 875, 883, 884, 885, 0, 0, 0, 0, 0,
	881, 0, 876, 0, 0, 855, 1511, 0, 0, 856,
	0, 870, 887, 0, 1520, 1521, 0, 1538, 1539, 1540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 855, 0, 0, 0, 879, 0, 870,
	867, 868, 869, 882, 0, 866, 864, 865, 857, 858,
	859, 860, 862, 863, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 861, 0, 879, 0, 1535, 867, 868,
	869, 882, 0, 866, 864, 865, 857, 858, 859, 860,
	862, 863, 880, 888, 0, 0, 0, 0, 0, 0,
	0, 861, 0, 0, 0, 0, 0, 0, 0, 0,
	886, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	880, 888, 0, 0, 878, 0, 0, 0, 0, 1526,
	871, 0, 0, 0, 0, 0, 0, 0, 886, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 878, 0, 0, 877, 0, 0, 871, 0,
	0, 0, 0, 0, 0, 0, 1541, 0, 1518, 1520,
	1521, 0, 1538, 1539, 1540, 0, 0, 0, 0, 0,
	0, 0, 0, 877, 0, 0, 1536, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 872, 853, 854, 0, 873, 874, 875, 883,
	884, 885, 0, 0, 0, 0, 0, 881, 0, 876,
	0, 0, 1535, 0, 0, 0, 856, 0, 0, 887,
	872, 853, 854, 0, 873, 874, 875, 883, 884, 885,
	0, 0, 0, 0, 0, 881, 0, 876, 0, 0,
	855, 0, 0, 0, 856, 0, 870, 887, 1537, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1526, 0, 0, 0, 855, 0,
	0, 0, 879, 0, 870, 867, 868, 869, 882, 0,
	866, 864, 865, 857, 858, 859, 860, 862, 863, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 861, 0,
	879, 0, 0, 867, 868, 869, 882, 0, 866, 864,
	865, 857, 858, 859, 860, 862, 863, 880, 888, 0,
	0, 1536, 0, 0, 0, 0, 861, 0, 0, 0,
	0, 1532, 1533, 1534, 0, 886, 1531, 1529, 1530, 1522,
	1523, 1524, 1525, 1527, 1528, 880, 888, 0, 0, 878,
	0, 0, 0, 0, 0, 871, 0, 0, 0, 0,
	0, 0, 0, 886, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 878, 0, 0,
	877, 0, 0, 871, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1537, 0, 0, 0, 0, 0, 0,
	853, 854, 0, 873, 874, 875, 883, 884, 885, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 856, 0, 0, 887, 872, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 881, 0, 0, 0, 0, 855, 0, 0,
	0, 0, 0, 870, 0, 872, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	881, 0, 0, 0, 0, 0, 1532, 1533, 1534, 0,
	0, 1531, 1529, 1530, 1522, 1523, 1524, 1525, 1527, 1528,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 861, 0, 879, 0, 0,
	867, 868, 869, 882, 0, 866, 864, 865, 857, 858,
	859, 860, 862, 863, 880, 888, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 879, 0, 0, 867, 868,
	869, 882, 886, 866, 864, 865, 857, 858, 859, 860,
	862, 863, 0, 0, 0, 0, 878, 0, 0, 0,
	0, 0, 871, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1006, 996, 1025, 988, 1016, 1015, 0, 0, 990,
	989, 0, 0, 0, 0, 1027, 1026, 0, 1006, 996,
	1025, 988, 1016, 1015, 0, 0, 990, 989, 0, 0,
	0, 0, 1027, 1026, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1021, 0, 1013,
	1012, 0, 0, 0, 872, 0, 0, 0, 1011, 0,
	0, 0, 0, 0, 1021, 0, 1013, 1012, 0, 881,
	0, 0, 0, 0, 0, 1011, 1010, 1008, 1009, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1010, 1008, 1009, 0, 0, 0, 0,
	469, 0, 0, 0, 0, 0, 999, 998, 1000, 1001,
	1002, 1003, 1004, 0, 1024, 0, 0, 0, 474, 0,
	0, 0, 0, 999, 998, 1000, 1001, 1002, 1003, 1004,
	475, 1024, 0, 0, 879, 0, 0, 867, 868, 869,
	882, 992, 866, 864, 865, 857, 858, 859, 860, 862,
	863, 476, 0, 1014, 0, 0, 477, 997, 992, 0,
	0, 482, 483, 0, 0, 493, 0, 0, 0, 0,
	1014, 0, 0, 0, 997, 0, 0, 472, 478, 0,
	0, 0, 0, 0, 0, 1007, 0, 0, 0, 1173,
	1171, 1172, 1175, 1174, 0, 0, 0, 0, 0, 496,
	0, 0, 1007, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 993, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 0, 1005, 994, 0, 0, 0,
	0, 993, 0, 480, 481, 1029, 0, 0, 0, 0,
	0, 0, 1005, 994, 0, 991, 0, 0, 1022, 1023,
	0, 0, 1029, 484, 488, 0, 0, 0, 0, 0,
	0, 0, 991, 0, 486, 1022, 1023, 0, 0, 0,
	995, 0, 0, 0, 470, 1028, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 995, 0, 0,
	0, 0, 1028, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 487, 489,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 490, 0, 495, 0, 0, 0, 491,
	0, 0, 0, 0, 473, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	494,
}
var sqlPact = [...]int{

	29926, -1000, 23, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 730, 17366, 17366, 903, 21678,
	-1000, -1000, -1000, -1000, -1000, -1000, 751, 715, 1024, 5349,
	21678, 21678, 21370, 1098, 1152, 1150, 1098, 23218, -1000, -1000,
	27222, -1000, 31276, 517, 519, 517, 517, 514, 23218, 1108,
	645, 14248, 690, 137, -1000, 777, -22, 26914, 21678, 1446,
	0, 19522, 261, 29926, 21062, 26606, 21678, 20754, 604, -9,
	17982, 21678, -1000, 25, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1283, 11013, 11013, 380, 25, -1000, 1281, 1160, 1159,
	19522, 26298, 25990, 25682, 25374, 25066, -1000, 12966, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 782, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 303, 302, -1000, 20446, -1000, 988, -1000,
	-1, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11013,
	11013, 983, -1000, 21678, -1000, -1000, 24758, 24450, 675, 301,
	1055, -1000, -1000, 558, 413, -1000, -1000, 13928, 30, -1000,
	-1000, -1000, -1000, 1301, 1451, 17058, 761, 1280, -1000, 980,
	1279, 1275, 1274, 1272, 1270, -1000, 760, 657, 532, -1000,
	1266, 412, 774, 488, -1000, 1264, 1259, 1055, -1000, 1055,
	-1000, -1000, -1000, 602, 23218, -1000, -1000, -1000, -1000, -1000,
	19522, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1755, -1000, -1000, -1000, -1000, 1716, -1000, -1000, -1000,
	-1000, 24142, 21678, 21678, 1192, 23834, -1000, 777, -1000, -1000,
	-1000, 1117, 1443, 1443, 1443, 1495, 153, 144, 137, -14,
	21678, -1000, 299, -14, 9347, 9347, -1000, -1000, 261, -1000,
	340, 16430, -1000, 7682, -1000, 796, 1352, 498, 880, 1346,
	-100, 792, 789, 1345, 17058, 17982, -9, -31, -1000, -1000,
	-1000, 5029, 17058, 30783, -1000, 11013, 11013, 11013, 11013, 11013,
	873, 334, -1000, 297, 296, 6336, -1000, -1000, 1711, -1000,
	-1000, -1000, 152, -1000, -1000, 11013, 25, -1000, -1000, -1000,
	-1000, 295, 1751, -1000, 461, -1000, -1000, -1000, 285, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1300, 293,
	289, -1000, -1000, -1000, -1000, 288, 287, 282, 280, 279,
	278, 275, 274, 273, 272, 267, 266, 265, 264, 263,
	846, -1000, 440, -1000, -1000, 440, 440, -1000, 237, 237,
	241, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 237,
	-1000, -1000, -1000, 393, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 262, 30783, 679, 15493, 25, -1000, -1000, -1000, 19522,
	21678, 21678, 709, 23526, -1000, 1342, 117, 1341, -1000, 115,
	1340, -1000, 115, 1339, -31, 1338, 20, -1000, -1000, 261,
	20138, 21678, 1585, 31161, -1000, 11013, -1000, -1000, 17366, 1115,
	30783, 30783, 17366, -1000, -1000, 1583, -1000, 21678, 11013, -13,
	-1000, -1000, -1000, -1000, 1122, 1124, 505, 13608, 13288, 1402,
	1109, -1000, -1000, -1000, 27, 5349, 177, 672, -1000, -1000,
	-1000, 19830, -1000, -1000, 21678, 1296, 17366, 21678, 21678, 21678,
	21678, 21678, -1000, -1000, -1000, 528, 1293, 21678, -1000, 1120,
	-1000, -1000, 21678, 21678, 779, 644, -1000, -13, -1000, 23218,
	-1000, 121, -1000, -1000, -1000, -1000, 259, 1083, 419, 147,
	22910, 419, 1082, -1000, 1117, -1000, 1007, 1183, 10014, 1158,
	11013, 137, -1000, -1000, 137, 137, 11013, -1000, -1000, 21678,
	-14, 1579, 21678, 73, -1000, 29746, -1000, 73, -1000, -1000,
	-1000, 21678, 16, -1000, 30783, -1000, -40, 853, -1000, 18906,
	1461, 1438, 1421, 19522, 1538, -22, 1258, 1514, -22, 1257,
	599, 21678, 21678, 597, 590, 19522, 369, -1000, 21678, -1000,
	-1000, -29, -1000, 31144, 31161, 5349, 627, 11013, 11013, 11013,
	11013, 11013, 11013, 11013, 11013, 11013, 11013, 11013, 11013, 11013,
	11013, 11013, 11013, 11013, 11013, 11013, 11013, 11013, 11013, 1029,
	11013, 578, 11013, 11013, 11013, 11013, 877, 909, 229, 945,
	-1000, 1744, 1744, 1744, 30990, 30990, 204, 334, -1000, 11013,
	-1000, 9681, 144, 29111, -20, -1000, -1000, -1000, 7336, 436,
	30783, 25, 6002, -1000, 1709, 665, 1310, 1230, 247, 143,
	140, 11013, 11013, 11346, 11346, 11013, 11679, 11013, 11013, 6669,
	11013, 11013, 11013, 11013, 11013, 11013, -1000, 246, -1000, -1000,
	-1000, -1000, 1707, -1000, -1000, 1685, -1000, 626, 612, 1683,
	-1000, 1256, 14, -1000, -1000, 429, 146, 1577, 146, 15806,
	-1000, 21678, 21678, -1000, 21678, -1000, -1000, 21678, -1000, 21678,
	21678, -1000, 21678, 21678, 177, 18290, 756, 1335, 764, 177,
	10, -1000, 1587, -1000, -1000, -1000, -1000, 126, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	241, 846, 237, 237, 237, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 393, -1000, -1000, 440, 440, 440, -1000, -1000,
	9, 30783, 576, -1000, 1252, 515, -1000, 402, 1, 1055,
	966, -1000, -1000, -1000, -1000, -1000, -1000, -21, -1000, -1000,
	-21, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1747, 5349, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 21678,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 177, -1000, -1000,
	-1000, -1000, 21678, 21678, 21678, -1000, -1000, 19522, 18598, 1574,
	1332, 842, -1000, 1573, 21678, 978, 1073, -1000, 633, 1331,
	-1000, -1000, -1000, -1000, 30783, -1000, 386, -1000, -1000, 30783,
	738, 1177, -1000, 1177, -27, -1000, 29618, -1000, 236, -12,
	429, 9347, 15181, 5349, -1000, 429, 139, 7682, -1000, 756,
	21678, 21678, 21678, -1000, -1000, 1071, 22602, 1067, 31161, 21678,
	-1000, 235, 234, 1145, 1142, 21678, 21678, 22294, 21986, 21678,
	786, -22, -1000, 233, -22, -1000, 230, 21678, 781, -1000,
	21678, 21678, 771, 1209, 995, -1000, 422, 17058, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 406, 377,
	377, 737, 737, 737, 737, 1600, 2316, 2702, 179, 3868,
	3868, 3868, 699, 368, 368, 3868, 3868, 3868, 30990, 30811,
	205, 11013, 11013, 575, 891, 229, 205, 11013, 205, 205,
	205, 205, -1000, 1074, -1000, -1000, -1000, -1000, 1250, 226,
	11679, 11679, -1000, -1000, -1000, 6336, 12012, -1000, -1000, -1000,
	-1000, 225, 11013, -1000, 29256, -195, -16, -1000, -1000, 11013,
	-17, -18, -1000, -1000, 671, -1000, 11013, -1000, 19, 11013,
	11013, 11013, 135, 133, -1000, 572, -1000, 571, 569, 567,
	-1000, 224, 916, 223, 222, 11013, -1000, -1000, 30576, 3809,
	129, 1249, -124, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	128, 127, 30548, -124, 110, 30052, -1000, 11679, 11679, 11679,
	6336, 221, 106, 29507, -124, 30341, 9014, 9014, 9014, 105,
	30313, 11013, -124, 3748, 3459, 3399, -39, -41, -46, 1677,
	-50, 99, 378, 376, 95, 673, 1247, 21678, 775, 11013,
	829, -1000, 14869, 462, 21678, 775, 46, -1000, -1000, -1000,
	360, 21678, -1000, -1000, -1000, 117, -1000, 115, 115, -31,
	-1000, -1000, 19522, -1000, -1000, 31161, 332, 326, -1000, 1668,
	-1000, 11013, 21678, 21678, 1171, -1000, -1000, -1000, 728, -1000,
	810, -1000, 14248, -1000, -66, -1000, -1000, -1000, -1000, 369,
	-1000, 91, -55, -38, 31161, -1000, -1000, -1000, -1000, -1000,
	21678, 281, 21678, -22, 21678, -1000, 1741, -22, 21678, 1329,
	1360, 352, 21678, 738, -1000, 11013, 1661, -1000, -1000, -1000,
	11013, -1000, -1000, -1000, 177, -1000, 1227, -1000, -113, 1141,
	157, -187, 101, 373, -1000, 14557, -1000, 1227, -1000, -1000,
	-1000, -1000, 564, 561, 1327, -1000, 1061, -1000, 469, -1000,
	770, 11013, 12654, 219, 217, 854, -1000, 1325, 993, 1323,
	993, -1000, -40, 819, -1000, 11013, -1000, 11013, -1000, 546,
	-1000, -1000, 545, 422, 1241, 647, -1000, 933, -1000, 11013,
	205, 205, 11013, 11679, 11679, -1000, 205, -1000, -1000, -1000,
	-1000, -1000, 1240, 216, 11013, 31161, 30196, 2832, -56, -1000,
	8681, -57, -1000, 11013, -1000, 29005, -1000, -1000, 207, 1358,
	-1000, 11013, 30081, 86, 8348, -1000, 29953, -24, -24, -1000,
	1739, 1104, 1045, 830, 686, 1654, -1000, 16118, 434, 929,
	28860, 31144, 31161, -1000, 11013, -1000, -1000, 1239, 11013, -1000,
	31144, 31161, 11679, 11679, 11679, 11679, 11679, 11679, 11679, 11679,
	11679, 11679, 11679, 11679, 11679, 11679, 11679, 11679, 11679, 11679,
	11679, 1138, 11679, 1625, 1625, 1625, -65, 8015, -1000, 1292,
	1239, 11013, 11013, 31161, 85, 84, 83, -1000, 11013, -124,
	11013, 11013, 11013, -1000, -1000, -1000, 82, -1000, 1646, -1000,
	-1000, -1000, -1000, -1000, 655, -1000, -1000, 7002, 30783, -1000,
	775, 1432, -61, -1000, -1000, -1000, 429, 15806, 15181, 7682,
	-68, -1000, -1000, -1000, 756, -1000, 490, 1633, 79, 30783,
	-66, -66, -1000, -1000, -1000, -1000, -1000, 21678, -1000, 1195,
	-1000, 18598, 215, 21678, 214, -1000, 213, -1000, -1000, 212,
	21678, 1119, 352, 17674, -1000, 419, 939, 28754, -1000, 75,
	1219, 1489, -1000, 15181, 1148, 1147, 15181, 1157, 885, 885,
	885, -1000, 211, 315, 373, 4375, 11013, 19214, 912, 47,
	69, 1141, 1219, 21678, 21678, 21678, 1322, -1000, 1533, -1000,
	28609, -69, -1000, 323, 1452, 11013, -1000, -1000, 209, 12654,
	21678, -1000, 1151, 1167, 503, 21678, -1000, 21678, -1000, 21678,
	21678, 21678, -79, -81, 21678, 21678, -1000, 17058, 611, 208,
	1696, 205, 2369, 260, 11013, 31161, 3936, -90, 11013, 11013,
	-1000, -98, -1000, 11013, 309, 30783, -1000, -1000, -1000, 30783,
	11013, 1720, 11013, 66, 64, 63, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 62, -1000, -1000, 27530, 11013, 60,
	-1000, 59, 58, 30783, 1292, 30783, -1000, -1000, 618, 618,
	662, 662, 662, 662, 1625, 1459, 449, 1401, 2172, 2172,
	2172, 2231, 660, 660, 2172, 2172, 2172, 1238, 1143, 203,
	30604, 11013, -104, -1000, -1000, -1000, 30783, 30783, 57, -1000,
	-1000, -1000, -124, 327, 28503, 28358, -1000, 54, -1000, -83,
	-1000, -1000, 206, -22, 775, -1000, -89, -1000, 355, -1000,
	307, 306, -1000, -1000, -1000, 1202, -1000, 12654, 202, 21678,
	18598, 1571, 12654, 976, 1129, 352, 17674, -1000, 633, -1000,
	-1000, -1000, 426, 11013, 11013, 1141, 15181, 15181, 1052, 1139,
	15181, -1000, -1000, -1000, -1000, 305, 382, 373, 19214, -1000,
	1623, 1154, -105, -1000, -1000, 21678, 191, -1000, 373, 426,
	-1000, -1000, -1000, 21678, -1000, 21678, -1000, 5349, 21678, 1233,
	1050, -1000, -1000, 1134, 186, 11679, 21678, -1000, 869, 12654,
	1449, 25, 5349, 1449, 28252, 6002, -106, -111, 1038, -1000,
	1014, 11013, -1000, 31161, 993, 993, -1000, 541, 539, 537,
	535, -1000, -1000, -95, 16750, 1726, 11013, 11013, 3936, -116,
	-1000, 205, 205, -1000, 28107, -1000, 30783, -1000, 29953, -1000,
	-1000, -1000, -1000, 862, -1000, 27900, -1000, -1000, -1000, -1000,
	11679, 1236, 185, 31161, 27872, -1000, -1000, 11013, -1000, -1000,
	-1000, 1366, 21678, 1413, -1000, -1000, 184, -1000, -1000, 866,
	-120, 12654, -125, 53, -22, -126, 21678, -1000, 352, 17674,
	-1000, 1360, -1000, 21678, 30783, -124, -1000, 1052, -1000, 183,
	11013, 15181, -1000, -187, -1000, -127, -1000, 19214, -1000, 180,
	-193, -1000, 351, -1000, 373, 182, 21678, 19214, -1000, -1000,
	1084, -1000, -1000, 21678, 1059, -1000, -1000, 11013, 30604, 181,
	1195, 178, -1000, -1000, -1000, -1000, -1000, -1000, 1452, 19,
	-1000, 803, -1000, -1000, 30783, 1444, -1000, -1000, 21678, 21678,
	166, 165, -1000, 164, 25, -134, -1000, 350, 205, 205,
	-1000, -1000, 52, 929, 1480, -1000, 30749, 11679, 31161, -140,
	-1000, 27844, 608, -144, 21678, -1000, -1000, 5669, 21678, 869,
	-146, -1000, 1195, -1000, 869, 163, 17674, -1000, 1119, -103,
	-1000, 1567, -1000, 21678, 30783, -1000, 373, -1000, 1621, -1000,
	-1000, 1154, -1000, 4706, 19214, 21678, -150, -1000, -1000, -1000,
	1321, 4000, 1085, 21678, -1000, 21678, 1449, 40, 21678, 476,
	5349, -1000, -1000, 11013, 11013, 11013, 1726, -1000, -1000, 1724,
	-1000, 837, 11013, 30749, -151, -1000, -1000, 695, -1000, 429,
	-1000, 162, 1195, 869, -1000, 1195, 12654, -1000, 1129, 21678,
	159, -157, 19214, -1000, -1000, -1000, 1615, -1000, -161, -1000,
	1313, -1000, 942, 884, 38, -162, -1000, -1000, 147, -1000,
	11013, -1000, -166, -167, -24, -1000, -1000, 37, 10680, 10680,
	-124, -1000, 15806, -1000, 21678, -1000, 1195, -1000, -177, -1000,
	-1000, -1000, -1000, -1000, 48, -1000, 21678, -1000, 957, 948,
	708, -1000, -1000, -1000, -1000, -1000, 1085, 30783, -1000, -1000,
	36, -1000, -1000, -1000, 12334, 944, 747, 29362, -1000, -156,
	-178, -1000, 869, -1000, -1000, -1000, 1382, -1000, 492, 997,
	997, 942, 1720, 1591, -1000, -1000, -1000, -1000, -1000, -1000,
	992, 1195, -1000, 1598, -1000, -1000, 1128, -1000, -1000, 10347,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2020, 2019, 1498, 1720, 2016, 2014, 2013, 1704, 2012,
	2011, 2010, 2009, 2008, 2005, 1666, 1663, 1643, 1638, 2004,
	116, 2002, 2001, 1998, 1605, 1992, 1991, 1988, 1976, 1972,
	1971, 89, 1969, 1965, 1599, 1548, 1545, 1543, 1964, 1960,
	1541, 1954, 1951, 24, 1950, 77, 1945, 48, 177, 2224,
	133, 1943, 1939, 1936, 39, 110, 67, 1935, 66, 1934,
	1932, 47, 33, 22, 20, 1928, 105, 1927, 1926, 1397,
	44, 1924, 1922, 137, 1921, 21, 28, 2305, 149, 144,
	117, 132, 1920, 1919, 1918, 1916, 57, 1912, 2, 1910,
	1909, 9, 74, 16, 1907, 17, 80, 1905, 1904, 129,
	1899, 60, 106, 1490, 102, 128, 278, 1898, 64, 7,
	59, 1897, 1894, 146, 34, 1893, 43, 81, 135, 1892,
	93, 152, 56, 36, 63, 124, 1891, 1888, 1887, 109,
	1885, 118, 73, 1884, 1879, 75, 1877, 134, 136, 1876,
	1874, 100, 1872, 120, 1871, 1870, 145, 156, 1869, 153,
	1868, 1865, 154, 119, 8, 42, 65, 4, 1502, 1481,
	127, 95, 32, 18, 1861, 1391, 1388, 27, 26, 103,
	68, 45, 107, 62, 83, 139, 49, 1859, 1850, 123,
	1845, 1843, 1840, 1839, 1838, 99, 1835, 1830, 70, 138,
	14, 31, 25, 94, 41, 96, 84, 175, 148, 111,
	1825, 101, 122, 1823, 248, 1822, 1816, 1534, 142, 1814,
	1813, 1812, 1461, 1348, 1242, 520, 1811, 1810, 936, 818,
	1809, 1808, 71, 1806, 126, 115, 1803, 143, 141, 19,
	1792, 121, 55, 104, 1789, 108, 54, 0, 369, 159,
	1787, 131, 97, 1786, 1785, 1784, 1782, 23, 3, 12,
	6, 10, 5, 30, 29, 1781, 1779, 130, 112, 76,
	1778, 151, 1777, 1776, 1775, 35, 1774, 15, 1773, 11,
	1772, 1771, 13, 1, 1768, 1767, 147, 1766, 98, 1765,
	1536, 1764, 140, 1758, 1749, 1585, 46, 114,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 56, 56,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 53, 53, 58, 58, 58,
	60, 60, 57, 57, 52, 52, 5, 5, 235, 235,
	236, 236, 42, 42, 46, 46, 43, 44, 44, 45,
	45, 7, 7, 7, 6, 6, 8, 8, 8, 8,
	8, 8, 15, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 105, 105, 104, 104, 107, 107, 17,
	17, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 203, 203, 202, 19, 177, 177,
	21, 130, 130, 22, 22, 22, 22, 23, 30, 276,
	276, 276, 280, 280, 281, 281, 282, 282, 282, 282,
	282, 282, 282, 278, 278, 28, 28, 28, 28, 41,
	33, 33, 33, 33, 33, 33, 150, 147, 147, 146,
	146, 146, 146, 148, 148, 148, 148, 151, 151, 85,
	85, 228, 227, 227, 233, 233, 233, 83, 83, 83,
	83, 83, 84, 84, 84, 226, 226, 226, 226, 234,
	234, 234, 234, 234, 234, 232, 232, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 18, 277, 277,
	279, 279, 25, 35, 35, 36, 36, 37, 37, 37,
	37, 11, 11, 12, 12, 86, 86, 87, 87, 156,
	156, 156, 156, 88, 88, 59, 59, 59, 155, 245,
	245, 246, 246, 246, 246, 246, 246, 247, 247, 247,
	247, 247, 247, 247, 243, 243, 244, 241, 241, 242,
	242, 242, 242, 283, 283, 154, 154, 91, 91, 250,
	250, 250, 250, 248, 248, 248, 248, 248, 251, 249,
	252, 252, 252, 252, 252, 189, 189, 189, 39, 13,
	65, 65, 14, 10, 10, 134, 134, 95, 95, 194,
	194, 194, 76, 76, 54, 54, 54, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 135, 135,
	136, 136, 26, 29, 32, 38, 38, 38, 38, 38,
	285, 285, 72, 72, 72, 72, 73, 73, 149, 149,
	152, 152, 153, 153, 153, 67, 66, 68, 68, 9,
	9, 61, 61, 62, 62, 63, 63, 64, 64, 286,
	286, 24, 24, 24, 79, 79, 143, 143, 143, 145,
	145, 144, 144, 144, 120, 120, 120, 40, 100, 100,
	109, 109, 110, 110, 200, 111, 111, 31, 31, 49,
	49, 47, 47, 47, 47, 47, 47, 48, 48, 50,
	50, 50, 50, 50, 50, 50, 258, 258, 258, 261,
	261, 257, 259, 259, 260, 260, 284, 284, 121, 121,
	121, 90, 89, 89, 93, 93, 92, 94, 94, 193,
	118, 118, 118, 118, 137, 137, 138, 138, 139, 139,
	140, 140, 140, 141, 141, 142, 142, 117, 117, 173,
	173, 51, 51, 99, 99, 101, 101, 163, 163, 163,
	164, 164, 162, 162, 162, 162, 195, 195, 195, 195,
	195, 195, 195, 274, 274, 274, 275, 275, 192, 192,
	196, 196, 196, 196, 196, 196, 190, 190, 190, 190,
	191, 191, 201, 201, 124, 124, 124, 124, 122, 122,
	123, 123, 197, 197, 197, 197, 119, 119, 198, 198,
	198, 157, 157, 204, 204, 204, 222, 222, 98, 98,
	98, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 206, 206,
	206, 206, 208, 208, 208, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 221, 221, 221, 221, 221, 209, 209,
	216, 216, 217, 217, 218, 219, 210, 210, 211, 211,
	212, 213, 220, 220, 220, 220, 224, 224, 214, 214,
	214, 214, 214, 215, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 132, 132,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 167, 167, 167, 167, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 253, 253, 253,
	253, 253, 253, 253, 255, 255, 256, 256, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 262, 262, 263, 263, 265,
	265, 266, 266, 267, 268, 268, 268, 269, 270, 270,
	264, 264, 271, 271, 271, 272, 272, 273, 273, 273,
	273, 273, 179, 179, 179, 180, 180, 181, 187, 187,
	187, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 74, 74, 74,
	74, 74, 106, 106, 176, 176, 174, 174, 174, 178,
	178, 125, 125, 223, 223, 223, 223, 223, 223, 223,
	126, 126, 126, 133, 127, 127, 128, 128, 128, 128,
	128, 128, 170, 171, 129, 129, 129, 172, 172, 182,
	186, 186, 185, 184, 184, 183, 183, 160, 160, 161,
	161, 159, 158, 114, 114, 113, 113, 112, 112, 287,
	287, 188, 188, 115, 115, 116, 108, 108, 199, 199,
	199, 199, 102, 102, 81, 81, 103, 103, 77, 77,
	80, 80, 78, 78, 78, 78, 96, 96, 97, 97,
	75, 75, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 225, 225, 225, 175, 69, 69, 69,
	70, 70, 71, 71, 230, 230, 230, 231, 231, 231,
	231, 229, 229, 229, 229, 229, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 6, 1, 1,
	1, 3, 3, 0, 2, 0, 2, 1, 3, 5,
	0, 4, 6, 7, 3, 3, 1, 1, 1, 1,
	1, 1, 6, 3, 5, 4, 6, 4, 6, 4,
	6, 3, 5, 1, 3, 1, 2, 2, 3, 2,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 5, 3, 0,
	3, 3, 0, 2, 3, 2, 3, 6, 6, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 2, 2, 2, 2,
	2, 3, 6, 3, 4, 1, 5, 2, 1, 3,
	3, 3, 3, 1, 3, 3, 1, 2, 2, 1,
	0, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 2, 3, 4, 4, 4, 4, 2, 4,
	4, 4, 4, 4, 4, 2, 3, 3, 3, 4,
	4, 5, 2, 3, 3, 4, 2, 3, 4, 3,
	3, 4, 4, 2, 5, 5, 6, 2, 2, 0,
	2, 0, 3, 6, 6, 5, 5, 4, 12, 4,
	12, 7, 10, 6, 9, 1, 0, 1, 3, 1,
	1, 1, 1, 8, 0, 1, 1, 0, 3, 2,
	0, 3, 1, 2, 2, 3, 6, 2, 1, 1,
	2, 4, 2, 5, 7, 8, 5, 3, 1, 4,
	6, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 5,
	2, 0, 6, 11, 14, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 6, 8, 8, 10, 8, 10, 1, 0,
	2, 0, 2, 3, 2, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 6, 1, 3, 1, 4, 2, 8,
	5, 4, 3, 0, 2, 2, 0, 8, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 1, 1, 8,
	8, 1, 2, 4, 4, 4, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 3, 1, 3, 2,
	2, 2, 1, 1, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 3, 3, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 7, 4, 6, 3,
	1, 5, 5, 0, 2, 3, 1, 3, 2, 0,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 5, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 1, 1, 3, 4,
	0, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 4, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 2, 1,
	3, 1, 1, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 4, 1, 1, 1, 5, 1,
	3, 1, 3, 1, 1, 1, 1, 6, 6, 4,
	4, 4, 4, 4, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 4, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 3, 5, 4, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 3, 1, 3, 3, 3, 2, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 0, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 2, 2, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 1, 1, 2, 2, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -8, -15,
	-16, -17, -18, -19, -21, -22, -23, -24, -25, -27,
	-29, -30, -32, -31, -33, -34, -35, -36, -37, -38,
	-26, -28, -39, -40, -41, 23, 34, 234, 47, 67,
	-9, -10, -11, -12, -13, -14, -260, 95, 104, 128,
	214, 102, 88, 122, 209, 236, 238, 245, -47, -49,
	255, -150, 258, 35, 267, 61, 98, 240, 232, 233,
	293, 302, 69, -258, -50, -48, 344, 318, 325, 249,
	-51, 276, 310, 347, 276, 137, 81, 313, -276, -103,
	276, 81, -78, -69, 337, 4, -237, -239, 20, 21,
	23, 33, 34, 35, 40, 44, 47, 48, 55, 60,
	61, 62, 64, 66, 67, 68, 71, 72, 79, 80,
	82, 84, 88, 90, 94, 95, 97, 102, 103, 104,
	110, 111, 116, 118, 123, 128, 129, 130, 131, 138,
	141, 143, 136, 153, 154, 156, 157, 158, 161, 160,
	165, 168, 171, 173, 174, 175, 178, 176, 180, 181,
	183, 182, 188, 190, 191, 193, 196, 199, 202, 205,
	206, 207, 208, 209, 212, 214, 216, 217, 218, 219,
	220, 222, 223, 225, 226, 227, 228, 229, 232, 230,
	231, 233, 234, 235, 236, 238, 240, 241, 243, 256,
	257, 268, 245, 246, 247, 248, 251, 252, 253, 255,
	258, 260, 263, 266, 267, 269, 272, 270, 265, 275,
	277, 278, 279, 280, 281, 288, 289, 293, 294, 295,
	296, 299, 300, 301, 302, 304, 307, 308, 309, 314,
	319, 320, 321, 322, 323, 28, 36, 37, 38, 39,
	41, 42, 45, 46, 51, 52, 53, 56, 83, 85,
	86, 101, 105, 106, 112, 113, 114, 124, 126, 132,
	133, 142, 144, 145, 146, 147, 148, 150, 163, 177,
	187, 189, 200, 204, 211, 213, 221, 242, 250, 261,
	262, 271, 273, 283, 284, 285, 290, 291, 306, 310,
	311, -276, 154, 218, -77, -69, 81, 90, 141, 301,
	300, 81, 137, 276, 313, 303, -20, 344, -31, -8,
	-16, -4, -24, -40, -15, -34, -18, -35, -36, -37,
	-17, 23, -229, 4, -237, -239, -238, -240, 58, 70,
	121, 140, 134, 152, 155, 164, 166, 179, 201, 203,
	239, 259, 22, 24, 25, 26, 27, 29, 30, 31,
	32, 43, 49, 50, 54, 57, 59, 65, 69, 73,
	74, 75, 76, 77, 78, 87, 89, 91, 92, 93,
	96, 98, 100, 107, 108, 109, 117, 119, 120, 122,
	125, 127, 135, 137, 139, 149, 151, 159, 162, 167,
	169, 170, 184, 185, 186, 192, 194, 195, 197, 198,
	210, 215, 224, 237, 249, 254, 264, 274, 276, 282,
	286, 287, 292, 297, 298, 303, 305, 312, 313, 315,
	316, 317, 318, -69, -69, -69, 214, 22, -280, 22,
	-281, -282, 69, 95, 122, 249, 141, 90, 300, 154,
	154, -280, -73, 245, -69, -147, 168, 252, 55, 242,
	289, -148, -146, -228, 283, -151, -104, 178, -69, 4,
	178, 254, 81, 288, 22, 34, 55, 60, 82, 123,
	137, 138, 65, 66, 157, 217, 168, 252, 158, 253,
	277, 283, 289, 69, 304, 279, 103, -285, 289, 289,
	-285, -285, -72, 289, 286, -73, 4, 81, 254, 178,
	-284, 276, -233, -226, -189, 9, 292, 107, 194, -232,
	8, 336, -225, -231, 5, 7, 335, 4, -237, -239,
	-238, 276, 303, 313, -134, 81, 298, -48, -50, -49,
	-92, -93, 297, 149, 100, 198, -47, -49, -258, -261,
	222, -257, -69, -261, -89, -90, 22, 92, 348, -197,
	-77, 195, -116, 344, -3, -197, 132, -77, -80, 132,
	-77, -69, -197, 132, 286, 348, -103, -96, -69, -159,
	-158, 346, 120, -165, -167, 335, 336, 330, 184, 324,
	-179, -169, -182, 101, 242, 344, -77, -168, 349, 9,
	-255, -49, 29, -180, -181, 49, -69, 7, 8, 5,
	6, -75, -206, -175, -215, 292, 107, 186, -253, -254,
	4, -237, -230, -207, -217, -211, -214, 150, 58, 74,
	77, 75, 78, 254, 303, 50, 28, 105, 106, 204,
	211, 273, 290, 291, 132, 187, 133, 56, 124, 163,
	94, 37, 39, 41, 42, 51, 52, 83, 85, 86,
	112, 113, 114, 142, 144, 145, 146, 147, 148, 189,
	221, 261, 271, 284, 285, 311, -238, -218, -219, -212,
	-213, -220, -165, 120, 344, -113, -114, -158, -159, 120,
	151, 151, -198, -197, -69, 132, -81, 132, -80, -105,
	132, -104, -105, 132, -96, 132, -203, -202, -231, 310,
	276, 137, -177, 344, -130, 344, -69, 22, 194, 348,
	-165, -165, 194, -69, -147, 53, -147, 256, 344, -152,
	-153, -66, -67, -68, 153, 216, 220, 286, 329, 120,
	323, -233, -85, 87, -107, 346, 117, 55, -235, -232,
	9, 256, 217, 253, 120, -277, 194, 120, 120, 120,
	120, 120, 217, 253, 288, 158, 288, 120, 323, 153,
	216, 268, 276, 313, 120, 120, -149, -152, -149, 286,
	-73, -119, -197, 8, 7, 7, -104, 132, -69, -104,
	137, -69, 132, -92, -93, -118, -137, -138, 167, 109,
	192, -121, 22, 92, -121, -121, 44, 345, 345, 348,
	-261, -97, 344, -108, -199, -165, 337, -108, -116, 337,
	-77, 344, -115, -188, -165, 87, -56, 230, -55, 21,
	23, 95, 308, 101, 265, 280, 246, 265, 280, 246,
	230, 101, 349, 230, 230, 101, -235, -78, 348, -229,
	337, -236, -235, 10, 11, 57, 33, 335, 336, 337,
	338, 115, 339, 340, 333, 334, 332, 327, 328, 329,
	63, 172, 244, 13, 14, 15, 26, 197, 166, 324,
	134, 259, 330, 16, 17, 18, 152, 36, 135, -74,
	-82, -165, -165, -165, -165, -165, 203, -112, -160, 342,
	-49, 344, -49, -165, -106, 7, -49, -174, 342, -183,
	-165, -113, 344, 5, 344, 5, -262, 319, 117, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 213, -224, 314, -224,
	-224, -208, 344, -208, -209, 344, -208, 320, 325, 344,
	269, 345, -102, -77, -114, -198, -79, -77, -79, 255,
	-69, 30, 101, -58, 348, 48, 235, 101, -58, 348,
	101, -58, 101, 101, 345, 348, -197, 132, -80, 30,
	-176, -204, -205, -207, -216, -210, -214, -215, 40, 46,
	45, 281, 177, 250, 262, 306, 38, 193, 143, 142,
	144, 145, 146, 147, 148, 261, 37, 221, 113, 114,
	112, 94, 86, 85, 189, 42, 41, -218, -219, -212,
	-213, 83, 284, 285, 150, 39, 52, 51, 311, 271,
	-106, -165, -276, -282, -276, 30, -146, -228, -106, 348,
	165, -84, 171, 183, 129, 195, 321, -227, 87, -233,
	-227, 87, 72, -234, 5, 4, -175, -189, 87, 168,
	-215, 346, -229, -20, 257, -104, 22, -228, -279, 117,
	-276, -228, -228, -228, -228, -228, 288, 117, -69, 165,
	-228, -228, 276, 137, 276, -73, -58, 348, 344, -91,
	184, -259, 318, -91, 344, -70, 132, -69, -259, 184,
	-118, -138, -137, -139, -165, 22, -142, 111, 180, -165,
	-167, -48, -48, -48, -94, -193, -165, -257, 30, -96,
	-99, 348, 120, 30, 4, -99, -77, 348, 345, 348,
	286, -135, 65, 59, -155, 132, 59, -241, -69, 65,
	-242, 54, 298, 215, 119, -135, 65, -135, 65, 65,
	-197, 33, -31, 120, 33, -31, 120, 286, -80, -69,
	286, 286, -197, -201, 326, -69, -201, 348, -222, -204,
	-221, 226, 227, 225, 229, 228, -204, -229, 283, -165,
	-165, -165, -165, -165, -165, -165, -165, -165, -165, -165,
	-165, -165, -165, -165, -165, -165, -165, -165, -165, -165,
	-165, 166, 134, 259, 36, 135, -165, 286, -165, -165,
	-165, -165, 176, 184, 186, 292, 107, 299, 92, 190,
	-287, 274, 32, -172, -49, 344, -187, 27, 264, 22,
	-179, 242, 344, -160, -165, -161, -106, 345, 345, 348,
	-106, -178, 343, -174, -186, -185, 315, 345, -106, 312,
	22, 92, 337, 7, -131, 322, 175, 84, 130, 174,
	-132, 248, -263, 110, 125, 344, 345, 345, -165, -165,
	-125, -223, -106, 4, 322, 175, 84, 130, 174, 248,
	-125, -126, -165, -106, -127, -166, -167, 335, 336, 330,
	344, 242, -128, -165, -106, -165, 43, 162, 287, -129,
	-165, 120, -106, -165, -165, -165, -106, -106, -106, 344,
	7, 7, 283, 283, 7, 120, 345, 348, -157, 316,
	-143, -31, 344, 87, 30, -143, -109, -110, -200, -111,
	-77, 344, -69, -69, -80, -81, -104, -105, -105, -96,
	-20, -202, 101, -20, 345, 348, -98, 29, -131, 344,
	345, 348, 286, 120, 289, 345, -153, -83, 220, 263,
	231, 251, 348, -229, -278, -69, -20, -77, -80, -77,
	-197, -86, -96, -87, -69, -156, -155, -243, -244, -241,
	137, 298, 108, 30, 101, -65, 208, 30, 194, 184,
	-61, 278, 101, -140, -225, 344, 336, -141, 242, 243,
	348, -54, 31, 91, 344, 345, -157, -199, -101, -195,
	342, -197, -77, -49, -196, 344, -229, -157, 345, -188,
	-55, -77, -69, -69, 184, -155, 132, -60, 184, -204,
	-69, 344, 344, 156, 156, -69, -69, 132, -69, 132,
	-69, -69, -56, 230, -31, 344, -31, 344, -69, 230,
	-69, -77, 230, -42, 131, 190, -45, 318, -235, 323,
	-165, -165, 286, -287, 274, -172, -165, 176, 186, 292,
	107, 299, 92, 190, 120, 344, -166, -166, -106, -169,
	344, -106, 343, 352, 345, -165, 343, 343, 348, -184,
	-185, 96, -165, -93, 348, -92, -165, -106, -106, 345,
	345, 286, 286, 286, 286, 344, -268, 202, 344, 344,
	-165, 30, 348, 345, 120, 345, 345, -133, 210, 345,
	10, 11, 335, 336, 337, 338, 115, 339, 340, 333,
	334, 332, 327, 328, 329, 63, 172, 244, 13, 14,
	15, 152, 135, -166, -166, -166, -106, 344, 345, -170,
	-171, 120, 117, 30, -129, -129, -129, 345, 120, -106,
	348, 348, 348, 345, 345, 345, 7, 345, 348, 345,
	323, 323, 345, 269, 120, -77, -120, 237, -165, -120,
	-145, 194, -102, 310, -69, -120, -100, 348, 120, 329,
	-102, -58, -58, -58, -197, -204, 342, 342, 7, -165,
	-278, -278, -66, 296, 62, 220, -233, 348, -201, 345,
	345, 348, -70, 137, -70, -31, -104, 5, -31, -77,
	101, -62, 97, -286, 329, -69, -141, -165, -193, -20,
	-117, 125, -201, 348, 70, -124, 155, 179, 121, 164,
	239, 140, 7, -20, -162, 349, 344, -192, 325, -49,
	-196, -195, -117, 286, 286, 101, 184, 307, -245, -242,
	-165, -95, -194, -69, -256, 344, -253, -254, -75, 344,
	344, -53, 95, 255, -136, 101, -58, 101, -58, 286,
	-135, 65, -106, -106, 286, 286, -45, 120, 275, 196,
	-165, -165, -166, -166, 120, 344, -165, -176, 26, 26,
	345, -106, 345, 348, -161, -165, 345, -174, 98, -165,
	282, 345, 312, -93, -93, -93, 5, 175, 130, 174,
	-132, 174, -132, -132, 7, -269, -69, 344, 316, -92,
	345, -222, -204, -165, -170, -165, -222, -204, -166, -166,
	-166, -166, -166, -166, -166, -166, -166, -166, -166, -166,
	-166, -166, -166, -166, -166, -166, -166, 92, 184, 190,
	-166, 348, -106, 345, -171, -170, -165, -165, -204, 345,
	345, 345, -106, -165, -165, -165, 345, 7, 269, -108,
	185, -120, 64, 345, -157, -110, -101, -188, 345, 343,
	7, 7, 345, -69, -88, 136, -156, 344, -70, 344,
	344, -91, 344, -69, -63, 161, -286, -232, -259, 195,
	345, 345, -173, 127, 44, -195, 155, 155, -195, -124,
	155, -122, 201, -122, -122, -274, 344, 343, -192, -229,
	342, 350, -106, -191, -190, 30, -69, 199, 345, -173,
	-69, -69, -155, 101, -246, 65, -247, 57, 108, 69,
	184, 186, 298, 215, 54, 87, 224, 345, 345, 348,
	-76, -113, 57, -76, -165, 344, -95, -96, 184, 87,
	184, 87, 80, 294, -69, -69, -77, -69, -69, 345,
	345, -69, -77, -236, 283, 344, 26, 26, -165, -176,
	345, -165, -165, 345, -165, 343, -165, 5, -165, 345,
	345, 345, 345, -270, -69, -165, 345, 345, 345, -171,
	120, 92, 190, 344, -165, 345, 345, 348, 345, 345,
	345, -144, 344, 194, -31, -120, 329, 343, 343, 135,
	-95, 344, -96, -86, 30, -95, 194, -64, 160, -286,
	-232, -61, -265, 317, -165, -106, -195, -195, -123, 305,
	194, 155, -195, 343, 345, -275, 7, -192, -191, 7,
	-164, -163, 118, 182, 345, -69, 344, -192, -265, -155,
	-69, -229, -69, 108, 132, 186, 156, 344, -166, -77,
	-154, -283, 68, 272, -194, -54, -229, -54, 345, -106,
	345, 345, 186, 186, -165, -204, -58, -58, 286, 286,
	286, 286, -168, -75, -69, -44, -43, 5, -165, -165,
	345, 345, -93, -264, 207, 345, -166, 120, 344, -176,
	345, -165, 93, -96, 65, -116, -49, 344, 205, 345,
	-95, 345, 345, -31, 345, -77, -286, -232, -62, -266,
	-267, -69, -123, 344, -165, -195, -162, 345, 348, -191,
	343, 348, 351, 329, -192, 344, -96, -190, -247, -70,
	184, -165, -71, 344, -88, 344, -76, -93, 224, -57,
	57, -69, -69, 344, 344, 344, 348, 345, -46, 329,
	345, -93, 44, -166, -176, 345, 345, 300, 185, 345,
	-69, -69, -154, 345, -88, -154, 344, -232, -63, 348,
	30, -96, -192, 7, -163, -229, 342, -191, -96, 345,
	101, 345, -250, 173, -69, -96, -54, 345, -77, -52,
	305, -229, -106, -106, -106, -43, 5, -271, 219, 243,
	-106, 345, 255, -157, 344, -88, -154, -88, -95, -64,
	-267, -269, 345, -190, 7, 345, 108, -248, -251, -249,
	194, 121, 206, 260, 345, 345, -91, -165, 345, 345,
	-93, 345, -272, -273, 36, 295, 72, -165, -272, -109,
	-96, -88, 345, 343, -69, -249, 194, -251, 194, 300,
	90, -250, 345, -273, 212, 116, 242, 212, 116, -157,
	345, -154, -252, 181, 235, 48, 255, -252, -248, 26,
	-59, 48, 235, -88, 20, 186, 87, -273,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 0, 0, 0, 0, 0,
	86, 87, 88, 89, 90, 91, 0, 0, 455, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 427, -2,
	0, 165, 0, 371, 0, 371, 371, 375, 0, 0,
	457, 0, 336, 454, -2, 465, 0, 0, 0, 463,
	441, 0, 0, -2, 0, 0, 0, 0, 0, 139,
	0, 998, 926, 932, 933, 957, 958, 959, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
	1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
	1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108,
	1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118,
	1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
	1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
	1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
	1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158,
	1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
	1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
	1179, 0, 0, 0, 0, 928, 998, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 0, 247, 971, 972, 973, 974, 975, 1180, 1181,
	1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191,
	1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
	1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241,
	1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251,
	1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261,
	1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271,
	1272, 1273, 1274, 129, 132, 133, 1054, 135, 0, 142,
	143, 144, 146, 147, 148, 149, 150, 151, 152, 0,
	0, 0, 364, 1081, 377, 160, 1030, 1086, 986, 1166,
	1105, 168, 173, 0, 1172, 176, 181, -2, 105, 207,
	208, 209, 210, 211, 212, 0, 0, 0, 218, 249,
	0, 0, 0, 0, 0, 225, 0, 0, 0, 232,
	236, 0, 0, 0, 243, 0, 0, 379, 370, 379,
	367, 368, 369, 372, 0, 362, 155, 156, 157, 158,
	0, 456, 159, 184, 185, 186, 195, 196, 197, 198,
	325, 0, 327, 205, 206, 953, 0, 967, 968, 969,
	970, 0, 0, 0, 0, 0, 335, -2, 437, 438,
	-2, 0, 460, 460, 460, 0, 0, 438, 0, 446,
	1060, 449, 939, 447, 0, 0, 462, 461, 0, 442,
	542, 0, 491, 0, 2, 0, 1148, 542, 0, 1148,
	931, 0, 0, 1148, 0, 0, 140, 141, 936, 934,
	935, 0, 0, 84, 650, 0, 0, 0, 0, 0,
	0, 742, 744, 1140, 1166, 0, 746, 747, 0, 749,
	751, 752, 0, 755, 756, 896, 928, 942, 943, 944,
	945, 0, 0, 948, 0, 950, 951, 952, 796, 765,
	-2, -2, 940, 578, 579, 580, 581, -2, 1180, 769,
	771, 773, 774, 775, 776, 0, 1124, 1141, 1142, 1162,
	1163, 1171, 1175, 1176, 1148, 1159, 1149, 1136, 1146, 1157,
	1003, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 966, 612, 613, 618,
	619, 621, 85, 0, 0, 929, 905, 903, 904, 0,
	0, 0, 0, 548, 93, 1148, 59, 1148, 924, 59,
	1148, 103, 59, 1148, 101, 1148, 0, 124, 126, 1178,
	0, 0, 0, 0, 130, 0, 134, 136, 0, 0,
	252, 363, 0, 376, 161, 1135, 163, 0, 0, 167,
	380, 382, 383, 384, 0, 0, 0, 0, 0, 0,
	0, 177, 178, 179, 106, 0, 455, 0, 213, 68,
	69, 0, 226, 233, 0, 251, 0, 0, 0, 0,
	0, 0, 227, 234, 228, 0, 0, 0, 237, 0,
	239, 240, 0, 0, 0, 0, 365, 378, 366, 0,
	374, 59, 546, 326, 955, 954, 308, 1148, 453, 308,
	961, 453, 1148, -2, 0, 433, 472, 473, 0, 0,
	0, 0, 458, 459, 0, 0, 0, 429, 430, 0,
	448, 0, 0, 494, 916, 920, 921, 494, 492, 543,
	544, 0, 0, 913, 911, 912, 36, 359, 38, 0,
	359, 359, 0, 0, 0, 0, 257, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 533, 927, 0, 901,
	902, 533, 70, 0, 0, 0, 0, 831, 832, 833,
	834, 835, 836, 839, 840, 837, 838, 841, 842, 843,
	0, 0, 0, 844, 845, 846, 0, 0, 848, 0,
	850, 0, 0, 0, 0, 0, 0, 910, 0, 0,
	847, 655, 656, 657, 679, 680, 0, 743, 907, 900,
	745, 0, -2, 852, 0, 748, 753, 754, 0, 0,
	895, -2, 0, 947, 0, 647, 798, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 875, 881, 0, 0,
	0, 0, 0, 0, 0, 0, 597, 615, 626, 623,
	622, 599, 0, 598, 596, 0, 600, 0, 0, 0,
	81, 0, 0, 922, 906, 552, 0, 404, 0, 0,
	549, 0, 0, 95, 0, 57, 58, 0, 97, 0,
	0, 99, 0, 0, 455, 0, 0, 1148, 0, 455,
	0, 854, 560, 561, 562, 563, 564, 647, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 585,
	586, 587, 588, 589, 590, 591, 592, 593, 594, 595,
	609, 0, 584, 584, 584, 601, 602, 610, 611, 616,
	617, 628, 629, 631, 633, 627, 627, 627, 624, 625,
	0, 852, 0, 145, 0, 0, 164, 0, 0, 0,
	0, 385, 192, 193, 194, 387, 388, 169, 171, 182,
	170, 172, 174, 175, 199, 200, 201, 202, 203, 204,
	0, 0, 107, 230, 216, 214, 215, 217, 219, 0,
	248, 220, 221, 222, 223, 224, 229, 455, 235, 238,
	241, 242, 0, 0, 0, 373, 328, 0, 266, 0,
	0, 331, 452, 0, 0, 0, 1148, 960, 392, 0,
	436, 470, 471, 474, 478, 479, 482, 485, 486, 476,
	650, 443, 444, 445, 466, 467, 346, 450, 0, 0,
	552, 0, 0, 0, 919, 552, 0, 0, 915, 0,
	0, 0, 0, 358, 40, 1148, 0, 61, 0, 0,
	298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 256, 0, 0, 0, 930,
	0, 0, 0, 73, 0, 937, 80, 0, 651, 556,
	557, 603, 604, 605, 606, 607, 652, 653, 0, 658,
	659, 660, 661, 662, 663, 664, 665, 666, 667, -2,
	-2, -2, 671, 672, 673, -2, -2, -2, 677, 678,
	-2, 849, 851, 0, 910, 0, -2, 0, -2, -2,
	-2, -2, 691, 0, 693, 696, 698, 700, 0, 0,
	0, 0, 909, 710, 887, 0, 0, 828, 829, 830,
	695, 0, 0, 908, 899, 0, 0, -2, 750, 0,
	0, 0, 858, 859, 894, 890, 0, 757, 465, 0,
	0, 0, 0, 0, 956, 634, 635, 636, 637, 638,
	639, 648, 806, 0, 0, 0, 770, 772, 0, 0,
	0, 0, 862, -2, -2, -2, -2, -2, -2, -2,
	0, 0, 852, 872, 0, 0, 713, 0, 0, 0,
	0, 1166, 0, 852, 880, 0, 0, 0, 0, 0,
	852, 0, 886, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 416, 0,
	416, 406, 0, 0, 0, 416, 419, 420, 422, 423,
	0, 0, 550, 94, 925, 59, 104, 59, 59, 102,
	110, 125, 0, 127, 128, 0, 553, 555, 565, 0,
	131, 0, 0, 0, 0, 166, 381, 386, 0, 189,
	0, 191, 0, 108, 250, 153, 231, 244, 245, 533,
	547, 0, 0, 265, 936, 267, 269, 270, 271, 272,
	961, 0, 961, 0, 0, 329, 0, 0, 0, 0,
	394, 400, 0, 0, 480, 0, 0, 477, 483, 484,
	0, 469, 344, 345, 455, 938, 488, 917, 533, 495,
	455, 505, 542, 519, 510, 0, 918, 488, 545, 914,
	39, 348, 0, 0, 0, 42, 1148, 50, 0, 280,
	0, 0, 0, 0, 0, 361, 51, 1148, 59, 1148,
	59, 52, 37, 359, 253, 0, 254, 0, 352, 0,
	347, 350, 0, 80, 0, 0, 67, 0, 71, 0,
	-2, -2, 0, 0, 0, 711, -2, 692, 694, 697,
	699, 701, 0, 0, 0, 0, 0, 0, 0, 712,
	0, 0, 897, 900, -2, 853, 856, 857, 0, 0,
	891, 0, 0, 0, 0, 464, 465, 465, 465, 763,
	0, 0, 0, 0, 0, 0, 764, 0, 0, 0,
	0, 0, 0, 779, 0, 780, 781, 0, 0, 782,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 716, 717, 718, 0, 0, 783, 878,
	879, 0, 0, 0, 0, 0, 0, 788, 0, 885,
	0, 0, 0, 792, 793, 794, 0, 582, 0, 608,
	630, 632, 620, 82, 0, 923, 92, 0, 551, 401,
	416, 0, 0, 408, 405, 403, 552, 0, 0, 0,
	0, 96, 98, 100, 0, 855, 0, 0, 0, 853,
	137, 138, 162, 187, 188, 190, 183, 0, 246, 274,
	307, 0, 0, 961, 0, 263, 308, 330, 332, 0,
	0, 396, 400, 0, 399, 453, 0, 0, 468, 0,
	490, 0, 493, 0, 0, 0, 0, 0, 539, 539,
	539, 537, 513, 0, 519, 0, 0, 531, 0, -2,
	510, 0, 490, 0, 0, 0, 0, 60, 278, 297,
	0, 0, 337, 343, 343, 0, 766, 767, 0, 0,
	0, 44, 0, 0, 0, 0, 48, 0, 54, 0,
	0, 0, 0, 0, 0, 0, 66, 0, 0, 0,
	654, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	888, 0, 823, 0, 0, 899, -2, 860, 889, 893,
	0, 758, 0, 0, 0, 0, 949, 640, 641, 642,
	643, 644, 645, 646, 0, 804, 805, 809, 0, 0,
	768, 0, 0, 861, 871, 873, 714, 715, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, -2, -2,
	-2, 732, 733, 734, -2, -2, -2, 0, 0, 0,
	874, 0, 0, 826, 876, 877, 882, 883, 0, 785,
	786, 787, 884, 0, 0, 0, 614, 0, 83, 414,
	415, 402, 413, 0, 416, 421, 418, 424, 0, 558,
	0, 0, 566, 154, 261, 0, 268, 0, 0, 0,
	266, 0, 0, 0, 398, 400, 0, 391, 392, 475,
	481, 451, 800, 0, 0, 496, 0, 0, 0, 0,
	0, 534, 538, 535, 536, 0, 0, 519, 531, 502,
	0, 0, 0, 509, 530, 0, 529, 518, -2, 800,
	354, 356, 41, 0, 279, 0, 282, 0, 0, 0,
	0, 288, 289, 0, 0, 0, 0, 299, 306, 0,
	346, 941, 0, 346, 0, 0, 0, 0, 0, 56,
	0, 0, 360, 0, 59, 59, 349, 0, 0, 0,
	0, 353, 351, 72, 0, 0, 0, 0, -2, 0,
	704, -2, -2, 822, 853, 898, 892, 946, 465, 759,
	761, 762, 649, 811, 808, 0, 795, 777, 778, 870,
	0, 0, 0, 0, 853, 825, 784, 0, 790, 791,
	583, 0, 0, 0, 407, 417, 0, 559, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 389, 400, 0,
	393, 394, 439, 0, 489, 487, 521, 0, 523, 0,
	0, 0, 525, 505, 514, 0, 516, 531, 507, 0,
	0, 500, 0, 499, 519, 527, 0, 0, 440, 43,
	0, 283, 284, 961, 0, 287, 290, 0, 292, 963,
	274, 0, 303, 304, 338, 339, 342, 340, 343, 465,
	301, 0, 45, 46, 55, 63, 47, 53, 0, 0,
	0, 0, 532, 0, 0, 0, 77, 75, -2, -2,
	705, 824, 0, 465, 0, 797, -2, 0, 0, 0,
	827, 0, 0, 0, 0, 425, 426, 0, 0, 306,
	0, 296, 274, 264, 306, 0, 0, 395, 396, 799,
	801, 0, 522, 0, 541, 524, 519, 515, 0, 512,
	503, 0, 504, 0, 531, 0, 0, 511, 281, 285,
	0, 0, 312, 0, 300, 0, 346, 0, 0, 65,
	0, 355, 357, 0, 0, 0, 0, 79, 76, 0,
	760, 814, 0, -2, 0, 740, 789, 0, 410, 552,
	412, 0, 274, 306, 262, 274, 0, 397, 398, 0,
	0, 0, 0, 517, 501, 497, 0, 508, 0, 528,
	0, 291, 317, 0, 0, 0, 341, 758, 308, 49,
	0, 62, 0, 0, 465, 78, 74, 0, 0, 0,
	810, 741, 0, 411, 0, 294, 274, 333, 0, 390,
	802, 803, 540, 506, 0, 526, 0, 293, 313, 314,
	0, 309, 310, 311, 962, 305, 312, 64, 258, 260,
	0, 807, 812, 815, -2, 1108, 995, 0, 813, 552,
	0, 295, 306, 498, 286, 315, 0, 316, 0, 0,
	0, 317, 0, 0, 817, 818, 819, 820, 821, 409,
	277, 274, 318, 0, 321, 322, 0, 319, 302, 0,
	273, 275, 276, 334, 320, 323, 324, 816,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 333, 3, 339, 334, 3,
	344, 345, 337, 335, 348, 336, 346, 338, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 352, 347,
	327, 329, 328, 3, 349, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 342, 3, 343, 340, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 350, 332, 351, 330,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 331,
	57670, 341, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:794
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:800
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:806
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:835
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 35:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:850
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:860
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:870
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:877
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:906
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 47:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:909
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:919
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:929
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:939
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:942
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:958
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.union.val = nil
		}
	case 57:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = DropCascade
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:982
		{
			sqlVAL.union.val = DropRestrict
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = DropDefault
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 61:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1001
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 63:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1002
		{
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1005
		{
			return unimplemented(sqllex, "alter using")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1006
		{
		}
	case 66:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 73:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 74:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1050
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 75:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.str = ""
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 79:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 80:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1079
		{
		}
	case 81:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1098
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1102
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{ /* SKIP DOC */
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1408
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1412
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1425
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1437
		{
			return unimplemented(sqllex, "set local")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1451
		{ /* SKIP DOC */
		}
	case 166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[2].union.transactionModes()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1489
		{
			return unimplemented(sqllex, "set from current")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1492
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1505
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1509
		{
		}
	case 180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1509
		{
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = Low
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = Normal
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = High
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1629
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "client_encoding"}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1633
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1637
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1641
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1745
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1749
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1753
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1757
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1765
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1773
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1777
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1781
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1793
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1815
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1831
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1835
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1841
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1845
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1849
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1853
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1924
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1928
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1932
		{
			sqlVAL.union.val = DropDefault
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1938
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1959
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1963
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2134
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2138
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2143
		{
			return unimplemented(sqllex, "match full")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2144
		{
			return unimplemented(sqllex, "match partial")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2145
		{
			return unimplemented(sqllex, "match simple")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2146
		{
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2152
		{
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2153
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2154
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2155
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2156
		{
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2159
		{
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2162
		{
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2165
		{
			return unimplemented(sqllex, "no action")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2168
		{
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2169
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2170
		{
			return unimplemented(sqllex, "action set null")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2171
		{
			return unimplemented(sqllex, "action set default")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2203
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = true
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = false
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2278
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2279
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2282
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2283
		{
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = Ascending
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = Descending
		}
	case 346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2337
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2338
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = true
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = false
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2351
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2352
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2363
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2380
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2392
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2401
		{
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2402
		{
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.str = ""
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2410
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.str = ""
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2448
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2458
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2462
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = ReadOnly
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = ReadWrite
		}
	case 389:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.str = ""
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.str = ""
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.str = ""
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.str = ""
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2556
		{
		}
	case 400:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2557
		{
		}
	case 401:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 403:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2611
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2621
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2625
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2633
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 417:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2655
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2656
		{
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2883
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2884
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2885
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2888
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2889
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2892
		{
			return unimplemented(sqllex, "cte")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2895
		{
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2896
		{
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2899
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2900
		{
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2903
		{
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2904
		{
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = true
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = false
		}
	case 460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = false
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = true
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2927
		{
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2928
		{
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2966
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2986
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3038
		{
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3039
		{
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3042
		{
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3043
		{
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3097
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = &From{}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3133
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3151
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3178
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3195
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = nil
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3253
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3259
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = true
		}
	case 519:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = false
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.str = astFullJoin
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.str = astLeftJoin
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.str = astRightJoin
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.str = astInnerJoin
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3370
		{
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3371
		{
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3457
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3470
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3471
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3485
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 560:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3494
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3557
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3566
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3580
		{
			sqlVAL.union.val = nil
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3631
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3727
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3759
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3798
		{
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3799
		{
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = year
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = month
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = day
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = hour
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = minute
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = month
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = hour
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = minute
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = minute
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = nil
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = second
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3894
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3929
		{
			return unimplemented(sqllex, "at tz")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4097
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4163
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4336
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4389
		{
			return unimplemented(sqllex, "variadic")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4390
		{
			return unimplemented(sqllex, "variadic")
		}
	case 761:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4400
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4413
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4429
		{
			return unimplemented(sqllex, "func_application")
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4430
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4434
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4451
		{
			return unimplemented(sqllex, "current role")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4452
		{
			return unimplemented(sqllex, "current user")
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4453
		{
			return unimplemented(sqllex, "session user")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4454
		{
			return unimplemented(sqllex, "user")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4483
		{
			return unimplemented(sqllex, "treat")
		}
	case 785:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4527
		{
			return unimplemented(sqllex, "within group")
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4528
		{
		}
	case 797:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = Window(nil)
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4553
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4563
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4605
		{
			sqlVAL.str = ""
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4625
		{
			return unimplemented(sqllex, "frame range")
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4626
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 814:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4627
		{
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4630
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4631
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4637
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4638
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4639
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4640
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4641
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = Any
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = Some
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = All
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = Plus
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = Minus
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = Mult
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = Div
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = FloorDiv
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = Mod
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = Bitand
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = Bitor
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = Pow
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = Bitxor
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = LT
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4706
		{
			sqlVAL.union.val = GT
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = EQ
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = LE
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = GE
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = NE
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = Like
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = NotLike
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = ILike
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = NotILike
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4732
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4772
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4844
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 881:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4896
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 892:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 896:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4986
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5005
		{
		}
	case 910:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5006
		{
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5021
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5089
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5124
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5141
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5149
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5165
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5168
		{
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5182
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5197
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5204
		{
			return unimplemented(sqllex, "func const")
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5206
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5210
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 949:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5213
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = DNull
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5230
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5234
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5240
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 961:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.str = ""
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 963:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
