// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:45

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:303
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const EXTRACT_DURATION = 57444
const FALSE = 57445
const FAMILY = 57446
const FETCH = 57447
const FILTER = 57448
const FIRST = 57449
const FLOAT = 57450
const FLOORDIV = 57451
const FOLLOWING = 57452
const FOR = 57453
const FORCE_INDEX = 57454
const FOREIGN = 57455
const FROM = 57456
const FULL = 57457
const GRANT = 57458
const GRANTS = 57459
const GREATEST = 57460
const GROUP = 57461
const GROUPING = 57462
const HAVING = 57463
const HELP = 57464
const HIGH = 57465
const HOUR = 57466
const IF = 57467
const IFNULL = 57468
const ILIKE = 57469
const IN = 57470
const INTERLEAVE = 57471
const INDEX = 57472
const INDEXES = 57473
const INITIALLY = 57474
const INNER = 57475
const INSERT = 57476
const INT = 57477
const INT8 = 57478
const INT64 = 57479
const INTEGER = 57480
const INTERSECT = 57481
const INTERVAL = 57482
const INTO = 57483
const IS = 57484
const ISOLATION = 57485
const JOIN = 57486
const KEY = 57487
const KEYS = 57488
const LATERAL = 57489
const LC_CTYPE = 57490
const LC_COLLATE = 57491
const LEADING = 57492
const LEAST = 57493
const LEFT = 57494
const LEVEL = 57495
const LIKE = 57496
const LIMIT = 57497
const LOCAL = 57498
const LOCALTIME = 57499
const LOCALTIMESTAMP = 57500
const LOW = 57501
const LSHIFT = 57502
const MATCH = 57503
const MINUTE = 57504
const MONTH = 57505
const NAME = 57506
const NAMES = 57507
const NATURAL = 57508
const NEXT = 57509
const NO = 57510
const NO_INDEX_JOIN = 57511
const NORMAL = 57512
const NOT = 57513
const NOTHING = 57514
const NULL = 57515
const NULLIF = 57516
const NULLS = 57517
const NUMERIC = 57518
const OF = 57519
const OFF = 57520
const OFFSET = 57521
const ON = 57522
const ONLY = 57523
const OR = 57524
const ORDER = 57525
const ORDINALITY = 57526
const OUT = 57527
const OUTER = 57528
const OVER = 57529
const OVERLAPS = 57530
const OVERLAY = 57531
const PARENT = 57532
const PARTIAL = 57533
const PARTITION = 57534
const PASSWORD = 57535
const PLACING = 57536
const POSITION = 57537
const PRECEDING = 57538
const PRECISION = 57539
const PREPARE = 57540
const PRIMARY = 57541
const PRIORITY = 57542
const RANGE = 57543
const READ = 57544
const REAL = 57545
const RECURSIVE = 57546
const REF = 57547
const REFERENCES = 57548
const RENAME = 57549
const REPEATABLE = 57550
const RELEASE = 57551
const RESTRICT = 57552
const RETURNING = 57553
const REVOKE = 57554
const RIGHT = 57555
const ROLLBACK = 57556
const ROLLUP = 57557
const ROW = 57558
const ROWS = 57559
const RSHIFT = 57560
const STATUS = 57561
const SAVEPOINT = 57562
const SEARCH = 57563
const SECOND = 57564
const SELECT = 57565
const SERIAL = 57566
const SERIALIZABLE = 57567
const SESSION = 57568
const SESSION_USER = 57569
const SET = 57570
const SHOW = 57571
const SIMILAR = 57572
const SIMPLE = 57573
const SMALLINT = 57574
const SMALLSERIAL = 57575
const SNAPSHOT = 57576
const SOME = 57577
const SPLIT = 57578
const SQL = 57579
const START = 57580
const STDIN = 57581
const STRICT = 57582
const STRING = 57583
const STORING = 57584
const SUBSTRING = 57585
const SYMMETRIC = 57586
const SYSTEM = 57587
const TABLE = 57588
const TABLES = 57589
const TEMPLATE = 57590
const TEXT = 57591
const THEN = 57592
const TIME = 57593
const TIMESTAMP = 57594
const TIMESTAMPTZ = 57595
const TO = 57596
const TRAILING = 57597
const TRANSACTION = 57598
const TREAT = 57599
const TRIM = 57600
const TRUE = 57601
const TRUNCATE = 57602
const TYPE = 57603
const UNBOUNDED = 57604
const UNCOMMITTED = 57605
const UNION = 57606
const UNIQUE = 57607
const UNKNOWN = 57608
const UPDATE = 57609
const UPSERT = 57610
const USER = 57611
const USERS = 57612
const USING = 57613
const VALID = 57614
const VALIDATE = 57615
const VALUE = 57616
const VALUES = 57617
const VARCHAR = 57618
const VARIADIC = 57619
const VIEW = 57620
const VARYING = 57621
const WHEN = 57622
const WHERE = 57623
const WINDOW = 57624
const WITH = 57625
const WITHIN = 57626
const WITHOUT = 57627
const YEAR = 57628
const ZONE = 57629
const NOT_LA = 57630
const WITH_LA = 57631
const AS_LA = 57632
const POSTFIXOP = 57633
const UMINUS = 57634

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4998

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	311, 27,
	-2, 396,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	1, 369,
	180, 369,
	211, 369,
	309, 369,
	311, 369,
	-2, 379,
	-1, 59,
	1, 372,
	180, 372,
	211, 372,
	309, 372,
	311, 372,
	-2, 378,
	-1, 68,
	1, 27,
	311, 27,
	-2, 396,
	-1, 398,
	1, 177,
	311, 177,
	-2, 907,
	-1, 434,
	155, 406,
	179, 406,
	-2, 375,
	-1, 437,
	155, 405,
	179, 405,
	-2, 373,
	-1, 562,
	155, 405,
	179, 405,
	-2, 376,
	-1, 618,
	308, 843,
	-2, 836,
	-1, 619,
	308, 844,
	-2, 837,
	-1, 625,
	5, 543,
	308, 543,
	-2, 1002,
	-1, 649,
	5, 509,
	-2, 976,
	-1, 650,
	5, 537,
	308, 537,
	-2, 978,
	-1, 651,
	5, 517,
	-2, 979,
	-1, 652,
	5, 516,
	-2, 980,
	-1, 653,
	5, 537,
	308, 537,
	-2, 983,
	-1, 654,
	5, 537,
	308, 537,
	-2, 984,
	-1, 655,
	5, 538,
	-2, 987,
	-1, 656,
	5, 503,
	-2, 988,
	-1, 657,
	5, 503,
	-2, 989,
	-1, 658,
	5, 519,
	-2, 993,
	-1, 659,
	5, 504,
	-2, 998,
	-1, 660,
	5, 505,
	-2, 999,
	-1, 661,
	5, 506,
	-2, 1000,
	-1, 662,
	5, 507,
	-2, 1001,
	-1, 663,
	5, 503,
	-2, 1005,
	-1, 664,
	5, 510,
	-2, 1010,
	-1, 665,
	5, 508,
	-2, 1013,
	-1, 666,
	5, 535,
	308, 535,
	-2, 1015,
	-1, 667,
	5, 539,
	-2, 1018,
	-1, 668,
	5, 541,
	-2, 1019,
	-1, 669,
	5, 534,
	308, 534,
	-2, 1023,
	-1, 921,
	97, 379,
	139, 379,
	155, 379,
	179, 379,
	183, 379,
	264, 379,
	-2, 655,
	-1, 929,
	308, 821,
	-2, 809,
	-1, 1134,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 578,
	-1, 1135,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 579,
	-1, 1136,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 580,
	-1, 1140,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 584,
	-1, 1141,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 585,
	-1, 1142,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 586,
	-1, 1145,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 591,
	-1, 1151,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 593,
	-1, 1154,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 598,
	-1, 1155,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 599,
	-1, 1156,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 600,
	-1, 1182,
	188, 727,
	-2, 730,
	-1, 1205,
	114, 743,
	308, 843,
	-2, 836,
	-1, 1206,
	114, 744,
	-2, 972,
	-1, 1207,
	114, 745,
	-2, 905,
	-1, 1208,
	114, 746,
	-2, 876,
	-1, 1209,
	114, 747,
	-2, 891,
	-1, 1210,
	114, 748,
	-2, 904,
	-1, 1211,
	114, 749,
	-2, 940,
	-1, 1362,
	97, 379,
	139, 379,
	155, 379,
	179, 379,
	183, 379,
	264, 379,
	-2, 444,
	-1, 1366,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 592,
	-1, 1367,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 594,
	-1, 1372,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 595,
	-1, 1391,
	188, 726,
	-2, 729,
	-1, 1561,
	1, 445,
	67, 445,
	97, 445,
	115, 445,
	119, 445,
	121, 445,
	133, 445,
	139, 445,
	144, 445,
	152, 445,
	155, 445,
	166, 445,
	179, 445,
	180, 445,
	183, 445,
	211, 445,
	213, 445,
	264, 445,
	271, 445,
	281, 445,
	282, 445,
	290, 445,
	309, 445,
	311, 445,
	312, 445,
	-2, 444,
	-1, 1563,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 596,
	-1, 1568,
	142, 0,
	-2, 610,
	-1, 1576,
	188, 728,
	-2, 731,
	-1, 1610,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 636,
	-1, 1611,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 637,
	-1, 1612,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 638,
	-1, 1616,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 642,
	-1, 1617,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 643,
	-1, 1618,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 644,
	-1, 1729,
	142, 0,
	-2, 611,
	-1, 1732,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 614,
	-1, 1733,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 616,
	-1, 1824,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 615,
	-1, 1825,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 617,
	-1, 1832,
	142, 0,
	-2, 645,
	-1, 1882,
	142, 0,
	-2, 646,
	-1, 1938,
	35, 0,
	127, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 975,
}

const sqlNprod = 1118
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 25017

var sqlAct = [...]int{

	619, 1523, 1917, 1937, 1961, 1772, 1888, 1919, 1936, 609,
	1918, 1017, 438, 1081, 1106, 1587, 924, 844, 1721, 593,
	617, 1795, 1811, 1689, 616, 1702, 734, 269, 1688, 76,
	1009, 1533, 1647, 399, 850, 1714, 1557, 1337, 45, 271,
	76, 76, 76, 1707, 459, 76, 1085, 1099, 76, 1351,
	1539, 19, 1080, 1556, 1447, 1360, 76, 1339, 926, 1448,
	1394, 1549, 1286, 76, 76, 1049, 1084, 76, 685, 581,
	76, 76, 76, 76, 682, 77, 1114, 670, 846, 1231,
	976, 1018, 985, 1345, 1167, 1118, 920, 718, 1192, 257,
	1164, 473, 445, 58, 1033, 867, 26, 1042, 798, 548,
	443, 782, 15, 7, 707, 1075, 1115, 703, 1202, 687,
	475, 591, 582, 549, 272, 779, 273, 1234, 476, 474,
	489, 437, 809, 495, 957, 22, 961, 21, 10, 9,
	58, 8, 6, 4, 262, 255, 486, 873, 448, 565,
	261, 263, 566, 488, 1088, 564, 1116, 386, 778, 800,
	796, 1011, 377, 482, 711, 569, 446, 389, 1008, 547,
	720, 58, 442, 266, 59, 264, 265, 267, 442, 259,
	258, 260, 60, 1818, 720, 1014, 1819, 720, 1046, 1952,
	1010, 1933, 1110, 1925, 1794, 1915, 1110, 1910, 1039, 1909,
	1110, 1884, 1110, 1878, 1039, 1863, 1110, 1389, 1794, 876,
	877, 1853, 1390, 425, 1110, 611, 1826, 1805, 1359, 1039,
	1794, 1297, 1388, 456, 465, 64, 462, 1052, 1349, 469,
	450, 1047, 879, 435, 1802, 1793, 1777, 1110, 1794, 1110,
	1776, 434, 1754, 1110, 1734, 1052, 1731, 1052, 66, 1039,
	1348, 1674, 1673, 878, 1052, 1052, 1298, 1659, 875, 268,
	1110, 76, 76, 76, 76, 76, 697, 498, 1572, 1048,
	1045, 1052, 1509, 396, 1052, 1006, 1503, 67, 1465, 1006,
	1869, 1466, 874, 876, 877, 62, 1463, 1462, 1348, 1052,
	1052, 63, 1461, 1391, 1623, 1052, 1052, 491, 491, 1575,
	1326, 1052, 57, 1110, 1324, 443, 879, 1393, 884, 1111,
	61, 974, 1110, 1061, 1051, 1038, 1052, 1052, 1039, 1005,
	973, 1327, 1006, 972, 64, 1797, 1110, 878, 36, 1050,
	876, 877, 728, 1054, 721, 729, 37, 1176, 1105, 1069,
	577, 839, 499, 838, 500, 790, 477, 66, 721, 576,
	478, 721, 68, 879, 789, 511, 455, 477, 38, 894,
	1361, 478, 478, 1418, 1419, 823, 531, 1972, 1935, 1931,
	1924, 1879, 1803, 1759, 878, 1755, 67, 876, 877, 1747,
	576, 64, 884, 76, 62, 492, 1746, 876, 877, 496,
	63, 1745, 1740, 1044, 1739, 1738, 1686, 1638, 76, 1633,
	879, 76, 76, 1680, 66, 1632, 1631, 483, 1578, 1013,
	879, 1561, 1538, 1513, 1470, 1043, 1329, 895, 1467, 1455,
	1446, 878, 1417, 1414, 1413, 1411, 1399, 893, 1398, 884,
	1325, 878, 1248, 67, 1199, 76, 724, 76, 1198, 76,
	76, 76, 576, 76, 876, 877, 1172, 932, 575, 678,
	719, 849, 1685, 842, 1297, 1908, 874, 563, 76, 64,
	1589, 1898, 1424, 1866, 471, 49, 61, 879, 1845, 76,
	1843, 1834, 555, 1821, 558, 1815, 884, 1800, 1791, 1769,
	1752, 1725, 66, 76, 876, 877, 884, 1696, 878, 271,
	76, 76, 76, 1567, 76, 886, 887, 888, 880, 881,
	882, 883, 885, 519, 905, 562, 1418, 1419, 1531, 1529,
	677, 67, 1528, 76, 76, 1526, 708, 520, 1511, 62,
	1482, 76, 1481, 76, 1445, 63, 1407, 894, 878, 1406,
	1384, 1679, 676, 1380, 498, 498, 1169, 894, 1173, 1313,
	1275, 1274, 271, 76, 61, 76, 76, 76, 76, 76,
	76, 76, 1262, 1261, 1241, 1197, 76, 76, 514, 516,
	1109, 672, 76, 671, 272, 962, 273, 965, 969, 824,
	76, 955, 880, 881, 882, 883, 885, 477, 905, 937,
	954, 478, 552, 554, 953, 895, 848, 723, 76, 550,
	726, 76, 952, 951, 1262, 895, 950, 949, 948, 947,
	946, 945, 944, 705, 871, 1424, 572, 573, 943, 499,
	499, 500, 500, 942, 578, 941, 940, 272, 939, 273,
	435, 882, 883, 885, 930, 905, 928, 61, 434, 843,
	460, 929, 580, 517, 507, 776, 483, 505, 1684, 1499,
	927, 585, 1307, 710, 443, 788, 713, 876, 877, 853,
	1306, 841, 1420, 1421, 1422, 1423, 1425, 732, 472, 730,
	1361, 1820, 889, 886, 887, 888, 880, 881, 882, 883,
	885, 786, 905, 1340, 785, 888, 880, 881, 882, 883,
	885, 693, 905, 1418, 1419, 813, 820, 1683, 1299, 1469,
	967, 76, 1193, 828, 968, 1468, 1365, 541, 526, 76,
	847, 1708, 1010, 76, 525, 1590, 1402, 76, 76, 840,
	958, 76, 688, 624, 689, 1293, 857, 545, 856, 855,
	251, 741, 1476, 923, 71, 76, 869, 76, 76, 674,
	76, 1894, 1948, 76, 1667, 76, 76, 1949, 76, 905,
	498, 424, 819, 423, 435, 979, 678, 435, 435, 546,
	933, 1320, 863, 1852, 1060, 864, 865, 418, 688, 441,
	689, 419, 1785, 1784, 673, 1813, 1497, 247, 1027, 491,
	1496, 491, 252, 1012, 1473, 1012, 70, 1472, 1368, 905,
	990, 992, 1424, 690, 688, 1312, 689, 1311, 959, 960,
	257, 76, 76, 432, 963, 1034, 978, 1422, 1423, 1425,
	966, 440, 1493, 1310, 1309, 1056, 825, 1152, 1053, 829,
	830, 831, 832, 833, 248, 499, 1002, 500, 1510, 836,
	837, 1001, 978, 998, 970, 551, 1245, 735, 977, 690,
	1244, 58, 1100, 1434, 271, 262, 58, 1217, 76, 1123,
	1036, 261, 263, 982, 523, 442, 1035, 1037, 1851, 995,
	999, 1162, 427, 76, 76, 690, 1028, 1003, 1029, 1711,
	76, 1074, 496, 1031, 266, 1160, 264, 265, 267, 1026,
	259, 258, 260, 1025, 1030, 1016, 1774, 1166, 818, 817,
	1498, 811, 806, 524, 986, 694, 76, 1281, 253, 76,
	503, 1435, 69, 1193, 1166, 963, 604, 966, 1273, 701,
	1063, 695, 1921, 1896, 1057, 714, 1055, 960, 959, 272,
	1484, 273, 1058, 1062, 1112, 1149, 1958, 1948, 1050, 1287,
	254, 1518, 1122, 271, 72, 74, 439, 1912, 1103, 1104,
	694, 1969, 1501, 1158, 1291, 1157, 369, 370, 371, 1163,
	1295, 388, 905, 1913, 400, 989, 1280, 250, 249, 1078,
	1170, 1277, 388, 720, 699, 1319, 698, 1846, 821, 449,
	449, 428, 1077, 74, 691, 1287, 74, 74, 468, 74,
	686, 1428, 1420, 1421, 1422, 1423, 1425, 1321, 1922, 1046,
	433, 1050, 522, 956, 429, 1095, 76, 76, 76, 1418,
	1419, 521, 76, 430, 1491, 76, 1180, 1113, 272, 1079,
	273, 76, 76, 76, 76, 76, 502, 1147, 1150, 76,
	691, 1247, 76, 76, 770, 1377, 1964, 76, 1923, 1065,
	975, 1159, 1047, 1830, 76, 1067, 76, 1957, 1161, 1375,
	822, 988, 1792, 76, 1146, 919, 691, 1405, 1255, 1433,
	1189, 1171, 1068, 76, 1550, 1560, 1485, 1515, 522, 442,
	1174, 1066, 1920, 1775, 705, 1177, 1181, 1249, 1184, 705,
	1048, 1045, 443, 1212, 76, 76, 1947, 764, 542, 763,
	76, 1204, 1204, 1215, 1272, 1226, 1945, 1701, 1354, 1097,
	498, 1238, 1239, 1240, 1289, 1516, 534, 1350, 1424, 1370,
	567, 512, 741, 741, 1250, 1970, 1357, 987, 510, 1373,
	76, 568, 76, 1378, 76, 1750, 1165, 1548, 76, 1655,
	1148, 1543, 76, 1956, 568, 1355, 1976, 721, 1779, 1778,
	1050, 76, 1767, 1284, 1301, 543, 1302, 1303, 1840, 1475,
	76, 1292, 1258, 1663, 1328, 1354, 1330, 1332, 1962, 1434,
	1300, 1656, 1254, 1619, 544, 1050, 1098, 74, 484, 74,
	400, 400, 621, 1357, 1331, 499, 854, 500, 1334, 795,
	1666, 845, 1514, 1889, 1352, 567, 1316, 1665, 443, 1315,
	1318, 1034, 1355, 812, 807, 1317, 1356, 1655, 1322, 1648,
	1963, 1323, 1722, 835, 1044, 1374, 1353, 1646, 791, 1304,
	1534, 1650, 1376, 1751, 1703, 793, 1768, 1435, 1965, 741,
	1716, 1264, 521, 1263, 1717, 1975, 794, 1392, 1545, 1656,
	862, 1342, 58, 1544, 1343, 1363, 1036, 481, 443, 740,
	1662, 480, 1035, 1037, 440, 1620, 559, 1524, 1651, 1649,
	1652, 1621, 1687, 1356, 1540, 766, 1364, 1765, 1346, 1723,
	1196, 1833, 1749, 1449, 1566, 1371, 1412, 1450, 1379, 1282,
	1369, 1059, 1004, 540, 1664, 741, 1654, 539, 1766, 538,
	537, 536, 535, 1657, 532, 479, 938, 827, 1195, 508,
	765, 443, 1386, 76, 1429, 1426, 1427, 1428, 1420, 1421,
	1422, 1423, 1425, 1916, 513, 1886, 1480, 400, 400, 1644,
	1401, 1715, 1489, 1487, 1474, 1336, 1651, 1383, 1652, 741,
	1101, 1385, 1093, 1032, 727, 725, 722, 717, 76, 76,
	700, 696, 692, 1584, 1396, 1397, 1338, 1786, 1452, 1453,
	1454, 388, 1653, 74, 1654, 400, 557, 400, 570, 560,
	1949, 1657, 528, 815, 453, 76, 1107, 1505, 76, 3,
	76, 1471, 978, 978, 449, 1788, 994, 76, 993, 991,
	1444, 1502, 1797, 1478, 1848, 74, 1881, 1541, 574, 76,
	1530, 1457, 1041, 76, 1492, 997, 1488, 1500, 1490, 74,
	271, 76, 417, 996, 1527, 1504, 74, 74, 74, 374,
	715, 1870, 1699, 1272, 1508, 1507, 1517, 1519, 1520, 1506,
	1653, 1418, 1419, 1108, 1096, 571, 1350, 1554, 1092, 74,
	74, 454, 1494, 1495, 1525, 1015, 1535, 783, 461, 783,
	870, 529, 787, 1547, 733, 1973, 76, 1569, 1580, 1581,
	1582, 1974, 1639, 385, 1553, 420, 421, 1551, 1552, 400,
	1537, 783, 400, 400, 400, 400, 400, 834, 764, 764,
	763, 763, 400, 400, 1354, 272, 1536, 273, 388, 1418,
	1419, 876, 877, 1071, 1070, 375, 852, 592, 1521, 1577,
	1512, 1464, 1357, 1308, 1246, 1542, 1243, 1242, 1190, 1546,
	1072, 1736, 1867, 1352, 449, 1808, 1705, 872, 1591, 1583,
	1596, 1355, 1333, 76, 76, 76, 73, 1073, 931, 426,
	1424, 1773, 76, 76, 376, 1353, 826, 533, 76, 378,
	76, 1911, 76, 76, 76, 1660, 1661, 76, 76, 1742,
	1404, 1810, 1573, 1627, 1829, 1194, 1174, 1626, 936, 35,
	383, 1691, 597, 1645, 457, 379, 1477, 464, 467, 1087,
	457, 1643, 1640, 1086, 274, 816, 805, 620, 799, 76,
	76, 1434, 1356, 808, 1203, 764, 1695, 763, 675, 380,
	622, 1695, 1697, 738, 623, 76, 76, 1694, 739, 76,
	964, 1693, 1694, 610, 76, 1681, 1693, 382, 736, 76,
	1700, 494, 1347, 1624, 1019, 1191, 1400, 74, 1682, 934,
	596, 1677, 602, 601, 1634, 983, 1178, 504, 1218, 74,
	740, 740, 1698, 74, 1000, 1706, 741, 74, 1720, 1435,
	76, 764, 1704, 763, 1730, 1358, 766, 766, 48, 518,
	394, 74, 395, 1023, 1024, 1290, 74, 1719, 1678, 74,
	1102, 400, 400, 378, 400, 741, 741, 1726, 858, 1486,
	431, 1415, 506, 1224, 741, 741, 1216, 1213, 553, 681,
	1020, 765, 765, 530, 383, 764, 1296, 763, 1040, 379,
	579, 866, 452, 451, 1082, 76, 381, 76, 737, 76,
	76, 1712, 1713, 527, 792, 1718, 1748, 741, 76, 1710,
	1064, 422, 1842, 380, 1094, 1257, 1968, 783, 872, 1847,
	1420, 1421, 1422, 1423, 1425, 1483, 1893, 65, 25, 23,
	76, 382, 1763, 20, 1760, 18, 17, 740, 16, 24,
	384, 1761, 14, 1787, 1120, 1121, 13, 12, 457, 11,
	467, 34, 76, 766, 33, 32, 1695, 1796, 31, 76,
	30, 29, 5, 1798, 1076, 2, 1, 1694, 76, 0,
	0, 1693, 0, 0, 0, 1801, 76, 76, 1789, 74,
	1083, 0, 0, 0, 0, 0, 872, 0, 765, 1822,
	777, 0, 0, 740, 1809, 0, 0, 0, 0, 1814,
	1828, 1804, 0, 0, 0, 0, 1782, 1783, 0, 766,
	0, 1807, 74, 1823, 0, 400, 76, 0, 0, 0,
	381, 0, 0, 741, 1844, 0, 0, 0, 0, 1835,
	0, 0, 0, 0, 0, 76, 76, 740, 0, 76,
	0, 0, 0, 76, 765, 1838, 1218, 1218, 76, 1856,
	1839, 1259, 0, 766, 1695, 1864, 1418, 1419, 0, 0,
	1858, 1865, 0, 1860, 384, 1694, 76, 0, 1857, 1693,
	0, 271, 76, 1872, 1817, 0, 0, 0, 0, 1874,
	443, 1859, 0, 1871, 0, 1877, 0, 1875, 765, 0,
	0, 1868, 1880, 0, 76, 0, 76, 76, 1876, 76,
	0, 1218, 1218, 1218, 0, 0, 0, 1305, 1899, 1891,
	0, 1883, 74, 1252, 1253, 0, 0, 1903, 983, 1902,
	76, 1260, 0, 741, 457, 1901, 1695, 1265, 1266, 1268,
	1270, 1271, 1895, 1900, 1897, 1276, 1907, 1694, 1278, 74,
	1796, 1693, 1906, 74, 1905, 1904, 272, 76, 273, 76,
	74, 1259, 1294, 0, 1932, 1424, 679, 0, 1928, 74,
	1926, 0, 1929, 0, 0, 1930, 705, 76, 1862, 74,
	704, 0, 1942, 0, 0, 0, 1944, 457, 712, 712,
	1946, 0, 764, 1950, 763, 0, 0, 0, 0, 1953,
	1076, 783, 1955, 0, 0, 0, 1076, 1954, 0, 0,
	464, 467, 0, 1967, 1966, 1971, 1434, 0, 741, 1951,
	0, 764, 764, 763, 763, 0, 0, 0, 0, 0,
	764, 764, 763, 763, 0, 0, 852, 1977, 852, 0,
	400, 0, 0, 0, 74, 0, 0, 0, 1341, 0,
	0, 0, 1381, 1382, 0, 0, 0, 1344, 0, 1914,
	0, 1218, 1218, 764, 0, 763, 74, 0, 0, 0,
	0, 0, 0, 0, 1435, 0, 0, 0, 0, 737,
	737, 0, 0, 0, 0, 0, 1934, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	741, 0, 0, 0, 0, 0, 0, 1441, 1442, 1443,
	0, 0, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
	1218, 0, 1218, 268, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 740, 0, 0, 0, 0, 0,
	0, 1429, 1426, 1427, 1428, 1420, 1421, 1422, 1423, 1425,
	766, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 740, 740, 0, 57, 0, 0, 764,
	0, 763, 740, 740, 0, 0, 737, 0, 971, 766,
	766, 0, 0, 0, 0, 765, 0, 0, 766, 766,
	457, 0, 36, 0, 467, 0, 0, 0, 457, 872,
	37, 0, 0, 0, 0, 740, 0, 0, 0, 0,
	0, 0, 1021, 0, 765, 765, 0, 467, 0, 0,
	467, 766, 38, 765, 765, 0, 0, 0, 0, 0,
	0, 0, 737, 0, 74, 74, 0, 0, 0, 0,
	0, 0, 583, 583, 0, 0, 0, 1564, 1565, 0,
	0, 683, 0, 0, 0, 0, 765, 0, 0, 0,
	0, 1522, 1418, 1419, 983, 0, 852, 0, 706, 764,
	0, 763, 0, 1532, 0, 0, 737, 1593, 1594, 0,
	0, 0, 598, 46, 0, 74, 1598, 1599, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 1559, 1600, 1601,
	1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611,
	1612, 1613, 1614, 1615, 1616, 1617, 1618, 0, 1622, 1630,
	46, 740, 0, 64, 0, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 0, 0, 0, 766, 1218, 0,
	457, 436, 1588, 0, 444, 0, 66, 0, 0, 0,
	0, 46, 0, 0, 764, 0, 763, 0, 859, 861,
	0, 1424, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 0, 765, 457, 0, 67, 0, 914, 915, 916,
	917, 918, 0, 62, 0, 0, 922, 0, 0, 63,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 935, 0, 256, 1641,
	1642, 983, 1434, 0, 0, 0, 0, 0, 872, 872,
	0, 740, 0, 0, 1668, 0, 1669, 0, 74, 1671,
	1672, 1218, 0, 1675, 74, 0, 764, 766, 763, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1690, 0, 872, 1083, 0, 1690, 0,
	1435, 0, 765, 1251, 0, 0, 0, 0, 0, 0,
	0, 74, 74, 0, 0, 74, 0, 0, 0, 0,
	1559, 0, 0, 0, 0, 1724, 0, 0, 876, 877,
	1279, 0, 0, 0, 1283, 0, 740, 0, 0, 0,
	0, 704, 0, 0, 0, 1218, 0, 0, 0, 0,
	704, 879, 766, 0, 0, 0, 1743, 0, 0, 0,
	457, 0, 0, 0, 1770, 1781, 0, 0, 0, 444,
	0, 0, 878, 0, 0, 0, 0, 0, 1426, 1427,
	1428, 1420, 1421, 1422, 1423, 1425, 0, 765, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 737, 0, 0, 0, 0, 0, 0,
	0, 983, 0, 1762, 0, 400, 1764, 0, 740, 0,
	0, 0, 0, 0, 74, 1335, 0, 884, 0, 0,
	0, 0, 737, 737, 766, 0, 0, 0, 0, 0,
	0, 737, 737, 0, 0, 0, 872, 457, 0, 1418,
	1419, 0, 1436, 1437, 1438, 0, 0, 1832, 0, 0,
	0, 0, 0, 1690, 0, 1728, 0, 0, 74, 765,
	0, 0, 0, 0, 737, 1812, 0, 0, 894, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 872, 1559, 0, 583, 0, 0, 0, 1433,
	0, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
	1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142,
	1143, 1144, 1145, 0, 1151, 0, 1153, 1154, 1155, 1156,
	0, 0, 852, 0, 0, 0, 895, 0, 0, 0,
	0, 1882, 876, 877, 0, 0, 0, 0, 1424, 0,
	0, 1849, 1850, 0, 0, 1854, 0, 0, 436, 1855,
	0, 1690, 1200, 1201, 400, 879, 1214, 0, 1225, 1227,
	1232, 1235, 1236, 1237, 0, 0, 0, 0, 0, 0,
	1873, 1439, 872, 0, 0, 0, 878, 0, 872, 0,
	737, 0, 0, 683, 0, 0, 0, 0, 0, 1434,
	0, 0, 0, 1418, 1419, 0, 1436, 1437, 1438, 0,
	1890, 0, 872, 74, 0, 400, 0, 880, 881, 882,
	883, 885, 0, 905, 0, 1021, 457, 0, 0, 1285,
	0, 1288, 0, 1690, 0, 0, 1812, 0, 0, 0,
	0, 884, 0, 0, 876, 877, 0, 896, 897, 898,
	906, 907, 908, 1433, 0, 0, 0, 1435, 0, 0,
	899, 0, 0, 74, 0, 872, 0, 879, 0, 910,
	0, 0, 0, 1314, 0, 0, 457, 0, 0, 0,
	457, 0, 436, 1943, 0, 436, 436, 0, 878, 0,
	737, 0, 894, 0, 893, 0, 0, 0, 0, 0,
	0, 0, 1424, 0, 0, 0, 0, 0, 921, 0,
	0, 0, 925, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 868, 401, 0, 0,
	1430, 1431, 1432, 0, 1429, 1426, 1427, 1428, 1420, 1421,
	1422, 1423, 1425, 884, 0, 402, 0, 0, 0, 0,
	895, 0, 0, 1434, 0, 0, 0, 0, 0, 0,
	0, 903, 911, 0, 0, 0, 0, 1366, 1367, 0,
	0, 0, 0, 1372, 0, 737, 909, 0, 0, 0,
	404, 0, 0, 0, 0, 409, 410, 0, 901, 415,
	0, 0, 0, 0, 894, 0, 0, 1387, 0, 0,
	0, 403, 405, 0, 0, 0, 1395, 0, 0, 0,
	0, 1435, 0, 0, 1403, 0, 900, 0, 1408, 1670,
	0, 0, 0, 0, 46, 1676, 46, 889, 886, 887,
	888, 880, 881, 882, 883, 885, 0, 905, 0, 0,
	406, 46, 0, 922, 0, 0, 46, 0, 0, 1232,
	1232, 1232, 895, 407, 408, 876, 877, 737, 896, 897,
	898, 906, 907, 908, 904, 0, 0, 0, 0, 411,
	0, 899, 457, 457, 0, 0, 457, 0, 879, 0,
	910, 0, 1479, 0, 1430, 1431, 1432, 0, 1429, 1426,
	1427, 1428, 1420, 1421, 1422, 1423, 1425, 0, 0, 878,
	0, 0, 0, 0, 0, 893, 0, 0, 583, 0,
	0, 0, 0, 0, 0, 0, 583, 0, 0, 0,
	683, 0, 902, 0, 0, 890, 891, 892, 0, 889,
	886, 887, 888, 880, 881, 882, 883, 885, 0, 905,
	0, 0, 0, 0, 0, 0, 1756, 0, 0, 0,
	0, 0, 0, 0, 884, 0, 0, 0, 0, 0,
	1418, 1419, 0, 1436, 1437, 1438, 0, 0, 0, 0,
	412, 0, 903, 911, 413, 0, 1727, 0, 0, 414,
	0, 0, 0, 0, 0, 1771, 1562, 909, 1117, 1563,
	0, 0, 0, 416, 0, 0, 0, 0, 0, 901,
	1568, 0, 0, 0, 0, 894, 0, 0, 0, 0,
	1433, 0, 0, 0, 1314, 0, 0, 0, 0, 0,
	0, 0, 0, 1585, 1168, 0, 0, 900, 0, 1806,
	0, 0, 0, 1595, 0, 0, 0, 1597, 0, 0,
	0, 0, 0, 0, 0, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1424,
	0, 0, 0, 895, 0, 0, 0, 0, 0, 0,
	1628, 1629, 0, 0, 0, 904, 0, 0, 0, 1635,
	1636, 1637, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1439, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 0, 0, 0, 444, 0, 0, 0,
	0, 0, 0, 902, 0, 0, 890, 891, 892, 0,
	889, 886, 887, 888, 880, 881, 882, 883, 885, 0,
	905, 0, 0, 0, 0, 0, 0, 1460, 876, 877,
	0, 1709, 0, 0, 906, 907, 908, 0, 1435, 0,
	0, 0, 0, 0, 1892, 0, 0, 0, 0, 0,
	0, 879, 0, 910, 0, 0, 0, 1729, 0, 0,
	0, 1732, 1733, 0, 0, 0, 1735, 0, 0, 0,
	1737, 0, 878, 0, 0, 46, 0, 1741, 893, 46,
	0, 1744, 876, 877, 0, 896, 897, 898, 906, 907,
	908, 0, 46, 0, 1021, 0, 0, 0, 899, 0,
	0, 0, 1362, 0, 0, 879, 0, 910, 0, 0,
	0, 1430, 1431, 1432, 1753, 1429, 1426, 1427, 1428, 1420,
	1421, 1422, 1423, 1425, 0, 0, 878, 884, 0, 0,
	0, 0, 893, 1168, 0, 876, 877, 0, 896, 897,
	898, 906, 907, 908, 0, 903, 911, 0, 0, 0,
	0, 899, 921, 0, 0, 0, 1780, 0, 879, 0,
	910, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 901, 0, 0, 0, 0, 0, 894, 878,
	0, 884, 0, 1799, 0, 893, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 903,
	911, 0, 0, 0, 0, 921, 0, 1816, 0, 0,
	0, 0, 0, 0, 909, 0, 0, 0, 1824, 1825,
	0, 0, 0, 0, 0, 0, 901, 0, 0, 0,
	0, 0, 894, 0, 884, 0, 895, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1837, 904, 0,
	0, 0, 903, 911, 900, 0, 0, 0, 1418, 1419,
	1841, 1436, 1437, 1438, 0, 0, 0, 909, 0, 0,
	0, 0, 0, 0, 1571, 0, 0, 0, 0, 901,
	0, 1117, 683, 0, 0, 894, 0, 0, 0, 0,
	895, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 904, 0, 0, 0, 902, 900, 1433, 0,
	0, 0, 0, 889, 886, 887, 888, 880, 881, 882,
	883, 885, 0, 905, 0, 0, 0, 0, 0, 0,
	0, 1117, 0, 0, 0, 1117, 0, 0, 0, 0,
	0, 0, 0, 895, 0, 0, 0, 0, 0, 1418,
	1419, 0, 1436, 1437, 1438, 904, 0, 1424, 0, 0,
	902, 0, 0, 890, 891, 892, 0, 889, 886, 887,
	888, 880, 881, 882, 883, 885, 0, 905, 0, 0,
	0, 0, 0, 0, 1459, 1927, 0, 0, 0, 0,
	1439, 0, 0, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 1941, 1941, 0, 0, 0, 1434, 0,
	0, 0, 0, 902, 0, 0, 890, 891, 892, 0,
	889, 886, 887, 888, 880, 881, 882, 883, 885, 1941,
	905, 0, 0, 0, 0, 0, 0, 1458, 876, 877,
	0, 896, 897, 898, 906, 907, 908, 0, 1424, 0,
	0, 0, 0, 0, 899, 0, 0, 0, 0, 0,
	0, 879, 0, 910, 1941, 0, 1435, 1440, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1439, 878, 0, 0, 0, 46, 0, 893, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1117, 1117, 0,
	0, 1117, 0, 0, 0, 0, 0, 884, 1960, 1430,
	1431, 1432, 0, 1429, 1426, 1427, 1428, 1420, 1421, 1422,
	1423, 1425, 0, 0, 0, 903, 911, 1435, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	909, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 901, 0, 0, 0, 0, 0, 894, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	900, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1959, 0, 0, 0, 0, 0,
	1430, 1431, 1432, 0, 1429, 1426, 1427, 1428, 1420, 1421,
	1422, 1423, 1425, 0, 0, 0, 895, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 904, 0,
	0, 0, 0, 0, 0, 0, 1790, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 902, 0, 270, 890,
	891, 892, 0, 889, 886, 887, 888, 880, 881, 882,
	883, 885, 0, 905, 78, 79, 289, 80, 290, 291,
	292, 293, 197, 294, 295, 296, 297, 81, 82, 198,
	199, 200, 201, 83, 202, 203, 298, 84, 204, 205,
	85, 299, 300, 206, 207, 208, 301, 209, 302, 275,
	303, 86, 87, 88, 921, 89, 304, 90, 91, 92,
	305, 276, 93, 94, 306, 307, 308, 309, 310, 311,
	95, 96, 97, 98, 210, 99, 211, 212, 312, 100,
	313, 101, 314, 315, 316, 102, 103, 317, 104, 318,
	0, 319, 213, 105, 106, 214, 215, 320, 321, 322,
	107, 108, 216, 0, 109, 323, 110, 324, 325, 277,
	326, 111, 217, 327, 218, 328, 112, 113, 114, 219,
	220, 279, 329, 117, 330, 115, 331, 278, 116, 221,
	222, 223, 224, 332, 225, 333, 280, 118, 281, 119,
	120, 334, 122, 121, 335, 226, 282, 123, 283, 336,
	124, 337, 338, 125, 0, 126, 127, 128, 129, 130,
	284, 131, 132, 135, 133, 339, 134, 340, 227, 136,
	228, 137, 138, 341, 342, 343, 344, 345, 139, 229,
	285, 140, 286, 230, 141, 142, 143, 144, 346, 231,
	145, 232, 146, 347, 147, 148, 149, 233, 150, 151,
	348, 153, 154, 152, 155, 349, 156, 287, 157, 158,
	234, 159, 0, 160, 161, 162, 163, 350, 235, 164,
	165, 351, 166, 167, 288, 168, 236, 237, 169, 352,
	175, 170, 171, 172, 174, 238, 173, 239, 353, 176,
	354, 177, 178, 179, 355, 240, 241, 242, 356, 357,
	180, 243, 244, 358, 181, 182, 183, 184, 359, 360,
	185, 186, 187, 361, 188, 362, 189, 190, 191, 245,
	246, 363, 364, 192, 365, 366, 367, 368, 193, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1555, 78,
	79, 289, 80, 290, 291, 292, 293, 197, 294, 295,
	296, 297, 81, 82, 198, 199, 200, 201, 83, 202,
	203, 298, 84, 204, 205, 85, 299, 300, 206, 207,
	208, 301, 209, 302, 275, 303, 86, 87, 88, 0,
	89, 304, 90, 91, 92, 305, 276, 93, 94, 306,
	307, 308, 309, 310, 311, 95, 96, 97, 98, 210,
	99, 211, 212, 312, 100, 313, 101, 314, 315, 316,
	102, 103, 317, 104, 318, 0, 319, 213, 105, 106,
	214, 215, 320, 321, 322, 107, 108, 216, 0, 109,
	323, 110, 324, 325, 277, 326, 111, 217, 327, 218,
	328, 112, 113, 114, 219, 220, 279, 329, 117, 330,
	115, 331, 278, 116, 221, 222, 223, 224, 332, 225,
	333, 280, 118, 281, 119, 120, 334, 122, 121, 335,
	226, 282, 123, 283, 336, 124, 337, 338, 125, 0,
	126, 127, 128, 129, 130, 284, 131, 132, 135, 133,
	339, 134, 340, 227, 136, 228, 137, 138, 341, 342,
	343, 344, 345, 139, 229, 285, 140, 286, 230, 141,
	142, 143, 144, 346, 231, 145, 232, 146, 347, 147,
	148, 149, 233, 150, 151, 348, 153, 154, 152, 155,
	349, 156, 287, 157, 158, 234, 159, 0, 160, 161,
	162, 163, 350, 235, 164, 165, 351, 166, 167, 288,
	168, 236, 237, 169, 352, 175, 170, 171, 172, 174,
	238, 173, 239, 353, 176, 354, 177, 178, 179, 355,
	240, 241, 242, 356, 357, 180, 243, 244, 358, 181,
	182, 183, 184, 359, 360, 185, 186, 187, 361, 188,
	362, 189, 190, 191, 245, 246, 363, 364, 192, 365,
	366, 367, 368, 193, 194, 195, 196, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	709, 0, 0, 78, 79, 289, 80, 290, 291, 292,
	293, 197, 294, 295, 296, 297, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 298, 84, 204, 205, 85,
	299, 300, 206, 207, 208, 301, 209, 302, 275, 303,
	86, 87, 88, 0, 89, 304, 90, 91, 92, 305,
	276, 93, 94, 306, 307, 308, 309, 310, 311, 95,
	96, 97, 98, 210, 99, 211, 212, 312, 100, 313,
	101, 314, 315, 316, 102, 103, 317, 104, 318, 0,
	319, 213, 105, 106, 214, 215, 320, 321, 322, 107,
	108, 216, 0, 109, 323, 110, 324, 325, 277, 326,
	111, 217, 327, 218, 328, 112, 113, 114, 219, 220,
	279, 329, 117, 330, 115, 331, 278, 116, 221, 222,
	223, 224, 332, 225, 333, 280, 118, 281, 119, 120,
	334, 122, 121, 335, 226, 282, 123, 283, 336, 124,
	337, 338, 125, 0, 126, 127, 128, 129, 130, 284,
	131, 132, 135, 133, 339, 134, 340, 227, 136, 228,
	137, 138, 341, 342, 343, 344, 345, 139, 229, 285,
	140, 286, 230, 141, 142, 143, 144, 346, 231, 145,
	232, 146, 347, 147, 148, 149, 233, 150, 151, 348,
	153, 154, 152, 155, 349, 156, 287, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 350, 235, 164, 165,
	351, 166, 167, 288, 168, 236, 237, 169, 352, 175,
	170, 171, 172, 174, 238, 173, 239, 353, 176, 354,
	177, 178, 179, 355, 240, 241, 242, 356, 357, 180,
	243, 244, 358, 181, 182, 183, 184, 359, 360, 185,
	186, 187, 361, 188, 362, 189, 190, 191, 245, 246,
	363, 364, 192, 365, 366, 367, 368, 193, 194, 195,
	196, 618, 607, 608, 605, 606, 594, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 79, 1186,
	80, 0, 0, 0, 0, 634, 600, 0, 0, 0,
	81, 82, 198, 649, 200, 650, 83, 651, 652, 0,
	84, 204, 205, 85, 615, 633, 653, 654, 208, 0,
	645, 0, 626, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 276, 93, 94, 0, 627, 629,
	0, 628, 630, 95, 96, 97, 98, 655, 99, 656,
	657, 0, 100, 0, 101, 0, 1187, 0, 648, 103,
	0, 104, 0, 0, 0, 599, 105, 106, 635, 636,
	613, 0, 0, 107, 108, 658, 0, 109, 0, 110,
	0, 0, 277, 0, 111, 646, 0, 218, 0, 112,
	113, 114, 642, 644, 279, 0, 117, 0, 115, 0,
	278, 116, 659, 660, 661, 662, 0, 625, 0, 280,
	118, 281, 119, 120, 0, 122, 121, 0, 647, 282,
	123, 283, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 284, 131, 132, 135, 133, 589, 134,
	614, 643, 136, 663, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 285, 140, 286, 637, 141, 142, 143,
	144, 0, 638, 145, 232, 146, 0, 147, 148, 149,
	664, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	287, 157, 158, 603, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 631, 166, 167, 288, 168, 665,
	237, 169, 0, 175, 170, 171, 172, 174, 666, 173,
	639, 0, 176, 0, 177, 178, 179, 0, 240, 667,
	668, 0, 0, 180, 640, 641, 612, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 632, 188, 0, 189,
	190, 191, 245, 669, 1185, 0, 192, 0, 0, 0,
	0, 193, 194, 195, 196, 590, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 586, 587, 1188, 0,
	0, 0, 588, 0, 0, 595, 1183, 618, 607, 608,
	605, 606, 594, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 79, 0, 80, 0, 0, 0,
	0, 634, 600, 0, 0, 0, 81, 82, 198, 649,
	200, 650, 83, 651, 652, 0, 84, 204, 205, 85,
	615, 633, 653, 654, 208, 0, 645, 0, 626, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	276, 93, 94, 0, 627, 629, 0, 628, 630, 95,
	96, 97, 98, 655, 99, 656, 657, 684, 100, 0,
	101, 0, 0, 0, 648, 103, 0, 104, 0, 0,
	0, 599, 105, 106, 635, 636, 613, 0, 0, 107,
	108, 658, 0, 109, 0, 110, 0, 0, 277, 0,
	111, 646, 0, 218, 0, 112, 113, 114, 642, 644,
	279, 0, 117, 0, 115, 0, 278, 116, 659, 660,
	661, 662, 0, 625, 0, 280, 118, 281, 119, 120,
	0, 122, 121, 0, 647, 282, 123, 283, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 284,
	131, 132, 135, 133, 589, 134, 614, 643, 136, 663,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 285,
	140, 286, 637, 141, 142, 143, 144, 0, 638, 145,
	232, 146, 0, 147, 148, 149, 664, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 287, 157, 158, 603,
	159, 0, 160, 161, 162, 163, 64, 235, 164, 165,
	631, 166, 167, 288, 168, 665, 237, 169, 0, 175,
	170, 171, 172, 174, 666, 173, 639, 0, 176, 66,
	177, 178, 179, 0, 240, 667, 668, 0, 0, 180,
	640, 641, 612, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 632, 188, 0, 189, 190, 191, 501, 669,
	0, 0, 192, 0, 0, 0, 62, 193, 194, 195,
	196, 590, 63, 618, 607, 608, 605, 606, 594, 0,
	0, 0, 586, 587, 0, 0, 0, 0, 588, 78,
	79, 595, 80, 0, 0, 0, 0, 634, 600, 0,
	0, 0, 81, 82, 198, 649, 200, 650, 83, 651,
	652, 0, 84, 204, 205, 85, 615, 633, 653, 654,
	208, 0, 645, 0, 626, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 276, 93, 94, 0,
	627, 629, 0, 628, 630, 95, 96, 97, 98, 655,
	99, 656, 657, 0, 100, 0, 101, 0, 0, 0,
	648, 103, 0, 104, 0, 0, 0, 599, 105, 106,
	635, 636, 613, 0, 0, 107, 108, 658, 0, 109,
	0, 110, 0, 0, 277, 0, 111, 646, 0, 218,
	0, 112, 113, 114, 642, 644, 279, 0, 117, 0,
	115, 0, 278, 116, 659, 660, 661, 662, 0, 625,
	0, 280, 118, 281, 119, 120, 0, 122, 121, 0,
	647, 282, 123, 283, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 284, 131, 132, 135, 133,
	589, 134, 614, 643, 136, 663, 137, 138, 0, 0,
	0, 0, 0, 139, 229, 285, 140, 286, 637, 141,
	142, 143, 144, 0, 638, 145, 232, 146, 0, 147,
	148, 149, 664, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 287, 157, 158, 603, 159, 0, 160, 161,
	162, 163, 64, 235, 164, 165, 631, 166, 167, 288,
	168, 665, 237, 169, 0, 175, 170, 171, 172, 174,
	666, 173, 639, 0, 176, 66, 177, 178, 179, 0,
	240, 667, 668, 0, 0, 180, 640, 641, 612, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 632, 188,
	0, 189, 190, 191, 501, 669, 0, 0, 192, 0,
	0, 0, 62, 193, 194, 195, 196, 590, 63, 618,
	607, 608, 605, 606, 594, 0, 0, 0, 586, 587,
	0, 0, 0, 0, 588, 78, 79, 595, 80, 0,
	0, 0, 0, 634, 600, 0, 0, 0, 81, 82,
	198, 649, 200, 650, 83, 651, 652, 1228, 84, 204,
	205, 85, 615, 633, 653, 654, 208, 0, 645, 0,
	626, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 276, 93, 94, 0, 627, 629, 0, 628,
	630, 95, 96, 97, 98, 655, 99, 656, 657, 0,
	100, 0, 101, 0, 0, 0, 648, 103, 0, 104,
	0, 0, 0, 599, 105, 106, 635, 636, 613, 0,
	0, 107, 108, 658, 0, 109, 0, 110, 0, 1233,
	277, 0, 111, 646, 0, 218, 0, 112, 113, 114,
	642, 644, 279, 0, 117, 0, 115, 0, 278, 116,
	659, 660, 661, 662, 0, 625, 0, 280, 118, 281,
	119, 120, 0, 122, 121, 1229, 647, 282, 123, 283,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 284, 131, 132, 135, 133, 589, 134, 614, 643,
	136, 663, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 285, 140, 286, 637, 141, 142, 143, 144, 0,
	638, 145, 232, 146, 0, 147, 148, 149, 664, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 287, 157,
	158, 603, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 631, 166, 167, 288, 168, 665, 237, 169,
	0, 175, 170, 171, 172, 174, 666, 173, 639, 0,
	176, 0, 177, 178, 179, 0, 240, 667, 668, 0,
	1230, 180, 640, 641, 612, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 632, 188, 0, 189, 190, 191,
	245, 669, 0, 0, 192, 0, 0, 0, 0, 193,
	194, 195, 196, 590, 0, 618, 607, 608, 605, 606,
	594, 0, 0, 0, 586, 587, 0, 0, 0, 0,
	588, 78, 79, 595, 80, 0, 0, 0, 0, 634,
	600, 0, 0, 0, 81, 82, 198, 649, 200, 650,
	83, 651, 652, 0, 84, 204, 205, 85, 615, 633,
	653, 654, 208, 0, 645, 0, 626, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 276, 93,
	94, 0, 627, 629, 0, 628, 630, 95, 96, 97,
	98, 655, 99, 656, 657, 0, 100, 0, 101, 0,
	0, 0, 648, 103, 0, 104, 0, 0, 0, 599,
	105, 106, 635, 636, 613, 0, 0, 107, 108, 658,
	0, 109, 0, 110, 0, 0, 277, 0, 111, 646,
	0, 218, 0, 112, 113, 114, 642, 644, 279, 0,
	117, 0, 115, 0, 278, 116, 659, 660, 661, 662,
	0, 625, 0, 280, 118, 281, 119, 120, 0, 122,
	121, 0, 647, 282, 123, 283, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 284, 131, 132,
	135, 133, 589, 134, 614, 643, 136, 663, 137, 138,
	0, 0, 0, 0, 0, 139, 229, 285, 140, 286,
	637, 141, 142, 143, 144, 0, 638, 145, 232, 146,
	0, 147, 148, 149, 664, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 287, 157, 158, 603, 159, 0,
	160, 161, 162, 163, 0, 235, 164, 165, 631, 166,
	167, 288, 168, 665, 237, 169, 0, 175, 170, 171,
	172, 174, 666, 173, 639, 0, 176, 0, 177, 178,
	179, 0, 240, 667, 668, 0, 0, 180, 640, 641,
	612, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	632, 188, 0, 189, 190, 191, 245, 669, 0, 0,
	192, 0, 0, 0, 0, 193, 194, 195, 196, 590,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 587, 0, 0, 0, 0, 588, 0, 0, 595,
	1625, 618, 607, 608, 605, 606, 594, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 79, 0,
	80, 0, 0, 0, 0, 634, 600, 0, 0, 0,
	81, 82, 198, 649, 200, 650, 83, 651, 652, 0,
	84, 204, 205, 85, 615, 633, 653, 654, 208, 0,
	645, 0, 626, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 276, 93, 94, 0, 627, 629,
	0, 628, 630, 95, 96, 97, 98, 655, 99, 656,
	657, 0, 100, 0, 101, 0, 0, 0, 648, 103,
	0, 104, 0, 0, 0, 599, 105, 106, 635, 636,
	613, 0, 0, 107, 108, 658, 0, 109, 0, 110,
	0, 0, 277, 0, 111, 646, 0, 218, 0, 112,
	113, 114, 642, 644, 279, 0, 117, 0, 115, 0,
	278, 116, 659, 660, 661, 662, 0, 625, 0, 280,
	118, 281, 119, 120, 0, 122, 121, 0, 647, 282,
	123, 283, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 284, 131, 132, 135, 133, 589, 134,
	614, 643, 136, 663, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 285, 140, 286, 637, 141, 142, 143,
	144, 0, 638, 145, 232, 146, 0, 147, 148, 149,
	664, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	287, 157, 158, 603, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 631, 166, 167, 288, 168, 665,
	237, 169, 0, 175, 170, 171, 172, 174, 666, 173,
	639, 0, 176, 0, 177, 178, 179, 0, 240, 667,
	668, 0, 0, 180, 640, 641, 612, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 632, 188, 0, 189,
	190, 191, 245, 669, 0, 0, 192, 0, 0, 0,
	0, 193, 194, 195, 196, 590, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 586, 587, 0, 0,
	0, 0, 588, 0, 0, 595, 1574, 618, 607, 608,
	605, 606, 594, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 79, 0, 80, 0, 0, 0,
	0, 634, 600, 0, 0, 0, 81, 82, 198, 649,
	200, 650, 83, 651, 652, 0, 84, 204, 205, 85,
	615, 633, 653, 654, 208, 0, 645, 0, 626, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	276, 93, 94, 0, 627, 629, 0, 628, 630, 95,
	96, 97, 98, 655, 99, 656, 657, 0, 100, 0,
	101, 0, 0, 0, 648, 103, 0, 104, 0, 0,
	0, 599, 105, 106, 635, 636, 613, 0, 0, 107,
	108, 658, 0, 109, 0, 110, 0, 0, 277, 0,
	111, 646, 0, 218, 0, 112, 113, 114, 642, 644,
	279, 0, 117, 0, 115, 0, 278, 116, 659, 660,
	661, 662, 0, 625, 0, 280, 118, 281, 119, 120,
	0, 122, 121, 0, 647, 282, 123, 283, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 284,
	131, 132, 135, 133, 589, 134, 614, 643, 136, 663,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 285,
	140, 286, 637, 141, 142, 143, 144, 0, 638, 145,
	232, 146, 0, 147, 148, 149, 664, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 287, 157, 158, 603,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	631, 166, 167, 288, 168, 665, 237, 169, 0, 175,
	170, 171, 172, 174, 666, 173, 639, 0, 176, 0,
	177, 178, 179, 0, 240, 667, 668, 0, 0, 180,
	640, 641, 612, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 632, 188, 0, 189, 190, 191, 245, 669,
	0, 0, 192, 0, 0, 0, 0, 193, 194, 195,
	196, 590, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 587, 0, 0, 0, 0, 588, 0,
	0, 595, 1182, 618, 607, 608, 605, 606, 594, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	79, 0, 80, 0, 0, 0, 0, 634, 600, 0,
	0, 0, 81, 82, 198, 649, 200, 650, 83, 651,
	652, 0, 84, 204, 205, 85, 615, 633, 653, 654,
	208, 0, 645, 0, 626, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 276, 93, 94, 0,
	627, 629, 0, 628, 630, 95, 96, 97, 98, 655,
	99, 656, 657, 0, 100, 0, 101, 0, 0, 0,
	648, 103, 0, 104, 0, 0, 0, 599, 105, 106,
	635, 636, 613, 0, 0, 107, 108, 658, 0, 109,
	0, 110, 0, 0, 277, 0, 111, 646, 0, 218,
	0, 112, 113, 114, 642, 644, 279, 0, 117, 0,
	115, 0, 278, 116, 659, 660, 661, 662, 0, 625,
	0, 280, 118, 281, 119, 120, 0, 122, 121, 0,
	647, 282, 123, 283, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 284, 131, 132, 135, 133,
	589, 134, 614, 643, 136, 663, 137, 138, 0, 0,
	0, 0, 0, 139, 229, 285, 140, 286, 637, 141,
	142, 143, 144, 0, 638, 145, 232, 146, 0, 147,
	148, 149, 664, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 287, 157, 158, 603, 159, 0, 160, 161,
	162, 163, 0, 235, 164, 165, 631, 166, 167, 288,
	168, 665, 237, 169, 0, 175, 170, 171, 172, 174,
	666, 173, 639, 0, 176, 0, 177, 178, 179, 0,
	240, 667, 668, 0, 0, 180, 640, 641, 612, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 632, 188,
	0, 189, 190, 191, 245, 669, 0, 0, 192, 0,
	0, 0, 0, 193, 194, 195, 196, 590, 0, 0,
	0, 0, 618, 607, 608, 605, 606, 594, 586, 587,
	0, 0, 0, 0, 588, 927, 1179, 595, 78, 79,
	0, 80, 0, 0, 0, 0, 634, 600, 0, 0,
	0, 81, 82, 198, 649, 200, 650, 83, 651, 652,
	0, 84, 204, 205, 85, 615, 633, 653, 654, 208,
	0, 645, 0, 626, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 276, 93, 94, 0, 627,
	629, 0, 628, 630, 95, 96, 97, 98, 655, 99,
	656, 657, 0, 100, 0, 101, 0, 0, 0, 648,
	103, 0, 104, 0, 0, 0, 599, 105, 106, 635,
	636, 613, 0, 0, 107, 108, 658, 0, 109, 0,
	110, 0, 0, 277, 0, 111, 646, 0, 218, 0,
	112, 113, 114, 642, 644, 279, 0, 117, 0, 115,
	0, 278, 116, 659, 660, 661, 662, 0, 625, 0,
	280, 118, 281, 119, 120, 0, 122, 121, 0, 647,
	282, 123, 283, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 284, 131, 132, 135, 133, 589,
	134, 614, 643, 136, 663, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 285, 140, 286, 637, 141, 142,
	143, 144, 0, 638, 145, 232, 146, 0, 147, 148,
	149, 664, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 287, 157, 158, 603, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 631, 166, 167, 288, 168,
	665, 237, 169, 0, 175, 170, 171, 172, 174, 666,
	173, 639, 0, 176, 0, 177, 178, 179, 0, 240,
	667, 668, 0, 0, 180, 640, 641, 612, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 632, 188, 0,
	189, 190, 191, 245, 669, 0, 0, 192, 0, 0,
	0, 0, 193, 194, 195, 196, 590, 0, 618, 607,
	608, 605, 606, 594, 0, 0, 0, 586, 587, 584,
	0, 0, 0, 588, 78, 79, 595, 80, 0, 0,
	0, 0, 634, 600, 0, 0, 0, 81, 82, 198,
	649, 200, 650, 83, 651, 652, 0, 84, 204, 205,
	85, 615, 633, 653, 654, 208, 0, 645, 0, 626,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 276, 93, 94, 0, 627, 629, 0, 628, 630,
	95, 96, 97, 98, 655, 99, 656, 657, 0, 100,
	0, 101, 0, 0, 0, 648, 103, 0, 104, 0,
	0, 0, 599, 105, 106, 635, 636, 613, 0, 0,
	107, 108, 658, 0, 109, 0, 110, 0, 0, 277,
	0, 111, 646, 0, 218, 0, 112, 113, 114, 642,
	644, 279, 0, 117, 0, 115, 0, 278, 116, 659,
	660, 661, 662, 0, 625, 0, 280, 118, 281, 119,
	120, 0, 122, 121, 0, 647, 282, 123, 283, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	284, 131, 132, 135, 133, 589, 134, 614, 643, 136,
	663, 137, 138, 0, 0, 0, 0, 0, 139, 229,
	285, 140, 286, 637, 141, 142, 143, 144, 0, 638,
	145, 232, 146, 0, 147, 148, 149, 664, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 287, 157, 158,
	603, 159, 0, 160, 161, 162, 163, 0, 235, 164,
	165, 631, 166, 167, 288, 168, 665, 237, 169, 0,
	175, 170, 171, 172, 174, 666, 173, 639, 0, 176,
	0, 177, 178, 179, 0, 240, 667, 668, 0, 0,
	180, 640, 641, 612, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 632, 188, 0, 189, 190, 191, 245,
	669, 1579, 0, 192, 0, 0, 0, 0, 193, 194,
	195, 196, 590, 0, 618, 607, 608, 605, 606, 594,
	0, 0, 0, 586, 587, 0, 0, 0, 0, 588,
	78, 79, 595, 80, 0, 0, 0, 0, 634, 600,
	0, 0, 0, 81, 82, 198, 649, 200, 650, 83,
	651, 652, 0, 84, 204, 205, 85, 615, 633, 653,
	654, 208, 0, 645, 0, 626, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 276, 93, 94,
	0, 627, 629, 0, 628, 630, 95, 96, 97, 98,
	655, 99, 656, 657, 684, 100, 0, 101, 0, 0,
	0, 648, 103, 0, 104, 0, 0, 0, 599, 105,
	106, 635, 636, 613, 0, 0, 107, 108, 658, 0,
	109, 0, 110, 0, 0, 277, 0, 111, 646, 0,
	218, 0, 112, 113, 114, 642, 644, 279, 0, 117,
	0, 115, 0, 278, 116, 659, 660, 661, 662, 0,
	625, 0, 280, 118, 281, 119, 120, 0, 122, 121,
	0, 647, 282, 123, 283, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 284, 131, 132, 135,
	133, 589, 134, 614, 643, 136, 663, 137, 138, 0,
	0, 0, 0, 0, 139, 229, 285, 140, 286, 637,
	141, 142, 143, 144, 0, 638, 145, 232, 146, 0,
	147, 148, 149, 664, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 287, 157, 158, 603, 159, 0, 160,
	161, 162, 163, 0, 235, 164, 165, 631, 166, 167,
	288, 168, 665, 237, 169, 0, 175, 170, 171, 172,
	174, 666, 173, 639, 0, 176, 0, 177, 178, 179,
	0, 240, 667, 668, 0, 0, 180, 640, 641, 612,
	181, 182, 183, 184, 0, 0, 185, 186, 187, 632,
	188, 0, 189, 190, 191, 245, 669, 0, 0, 192,
	0, 0, 0, 0, 193, 194, 195, 196, 590, 0,
	618, 607, 608, 605, 606, 594, 0, 0, 0, 586,
	587, 0, 0, 0, 0, 588, 78, 79, 595, 80,
	0, 0, 0, 0, 634, 600, 0, 0, 0, 81,
	82, 198, 649, 200, 650, 83, 651, 652, 0, 84,
	204, 205, 85, 615, 633, 653, 654, 208, 0, 645,
	0, 626, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 276, 93, 94, 0, 627, 629, 0,
	628, 630, 95, 96, 97, 98, 655, 99, 656, 657,
	0, 100, 0, 101, 0, 0, 0, 648, 103, 0,
	104, 0, 0, 0, 599, 105, 106, 635, 636, 613,
	0, 0, 107, 108, 658, 0, 109, 0, 110, 0,
	1233, 277, 0, 111, 646, 0, 218, 0, 112, 113,
	114, 642, 644, 279, 0, 117, 0, 115, 0, 278,
	116, 659, 660, 661, 662, 0, 625, 0, 280, 118,
	281, 119, 120, 0, 122, 121, 0, 647, 282, 123,
	283, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 284, 131, 132, 135, 133, 589, 134, 614,
	643, 136, 663, 137, 138, 0, 0, 0, 0, 0,
	139, 229, 285, 140, 286, 637, 141, 142, 143, 144,
	0, 638, 145, 232, 146, 0, 147, 148, 149, 664,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 287,
	157, 158, 603, 159, 0, 160, 161, 162, 163, 0,
	235, 164, 165, 631, 166, 167, 288, 168, 665, 237,
	169, 0, 175, 170, 171, 172, 174, 666, 173, 639,
	0, 176, 0, 177, 178, 179, 0, 240, 667, 668,
	0, 0, 180, 640, 641, 612, 181, 182, 183, 184,
	0, 0, 185, 186, 187, 632, 188, 0, 189, 190,
	191, 245, 669, 0, 0, 192, 0, 0, 0, 0,
	193, 194, 195, 196, 590, 0, 0, 0, 0, 618,
	607, 608, 605, 606, 594, 586, 587, 0, 0, 0,
	0, 588, 0, 0, 595, 78, 79, 860, 80, 0,
	0, 0, 0, 634, 600, 0, 0, 0, 81, 82,
	198, 649, 200, 650, 83, 651, 652, 0, 84, 204,
	205, 85, 615, 633, 653, 654, 208, 0, 645, 0,
	626, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 276, 93, 94, 0, 627, 629, 0, 628,
	630, 95, 96, 97, 98, 655, 99, 656, 657, 0,
	100, 0, 101, 0, 0, 0, 648, 103, 0, 104,
	0, 0, 0, 599, 105, 106, 635, 636, 613, 0,
	0, 107, 108, 658, 0, 109, 0, 110, 0, 0,
	277, 0, 111, 646, 0, 218, 0, 112, 113, 114,
	642, 644, 279, 0, 117, 0, 115, 0, 278, 116,
	659, 660, 661, 662, 0, 625, 0, 280, 118, 281,
	119, 120, 0, 122, 121, 0, 647, 282, 123, 283,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 284, 131, 132, 135, 133, 589, 134, 614, 643,
	136, 663, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 285, 140, 286, 637, 141, 142, 143, 144, 0,
	638, 145, 232, 146, 0, 147, 148, 149, 664, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 287, 157,
	158, 603, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 631, 166, 167, 288, 168, 665, 237, 169,
	0, 175, 170, 171, 172, 174, 666, 173, 639, 0,
	176, 0, 177, 178, 179, 0, 240, 667, 668, 0,
	0, 180, 640, 641, 612, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 632, 188, 0, 189, 190, 191,
	245, 669, 0, 0, 192, 0, 0, 0, 0, 193,
	194, 195, 196, 590, 0, 618, 607, 608, 605, 606,
	594, 0, 0, 0, 586, 587, 0, 0, 0, 0,
	588, 78, 79, 595, 80, 0, 0, 0, 0, 634,
	600, 0, 0, 0, 81, 82, 198, 649, 200, 650,
	83, 651, 652, 0, 84, 204, 205, 85, 615, 633,
	653, 654, 208, 0, 645, 0, 626, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 276, 93,
	1940, 0, 627, 629, 0, 628, 630, 95, 96, 97,
	98, 655, 99, 656, 657, 0, 100, 0, 101, 0,
	0, 0, 648, 103, 0, 104, 0, 0, 0, 599,
	105, 106, 635, 636, 613, 0, 0, 107, 108, 658,
	0, 109, 0, 110, 0, 0, 277, 0, 111, 646,
	0, 218, 0, 112, 113, 114, 642, 644, 279, 0,
	117, 0, 115, 0, 278, 116, 659, 660, 661, 662,
	0, 625, 0, 280, 118, 281, 119, 120, 0, 122,
	121, 0, 647, 282, 123, 283, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 284, 131, 132,
	135, 133, 589, 134, 614, 643, 136, 663, 137, 138,
	0, 0, 0, 0, 0, 139, 229, 285, 140, 286,
	637, 141, 142, 143, 144, 0, 638, 145, 232, 146,
	0, 147, 148, 149, 664, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 287, 157, 158, 603, 159, 0,
	160, 161, 162, 163, 0, 235, 164, 165, 631, 166,
	167, 288, 168, 665, 237, 169, 0, 175, 170, 171,
	172, 174, 666, 173, 639, 0, 176, 0, 177, 178,
	179, 0, 240, 667, 668, 0, 0, 180, 640, 641,
	612, 181, 182, 1939, 184, 0, 0, 185, 186, 187,
	632, 188, 0, 189, 190, 191, 245, 669, 0, 0,
	192, 0, 0, 0, 0, 193, 194, 195, 196, 590,
	0, 618, 607, 608, 605, 606, 594, 0, 0, 0,
	586, 587, 0, 0, 0, 0, 588, 78, 79, 595,
	80, 0, 0, 0, 0, 634, 600, 0, 0, 0,
	81, 82, 1938, 649, 200, 650, 83, 651, 652, 0,
	84, 204, 205, 85, 615, 633, 653, 654, 208, 0,
	645, 0, 626, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 276, 93, 1940, 0, 627, 629,
	0, 628, 630, 95, 96, 97, 98, 655, 99, 656,
	657, 0, 100, 0, 101, 0, 0, 0, 648, 103,
	0, 104, 0, 0, 0, 599, 105, 106, 635, 636,
	613, 0, 0, 107, 108, 658, 0, 109, 0, 110,
	0, 0, 277, 0, 111, 646, 0, 218, 0, 112,
	113, 114, 642, 644, 279, 0, 117, 0, 115, 0,
	278, 116, 659, 660, 661, 662, 0, 625, 0, 280,
	118, 281, 119, 120, 0, 122, 121, 0, 647, 282,
	123, 283, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 284, 131, 132, 135, 133, 589, 134,
	614, 643, 136, 663, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 285, 140, 286, 637, 141, 142, 143,
	144, 0, 638, 145, 232, 146, 0, 147, 148, 149,
	664, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	287, 157, 158, 603, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 631, 166, 167, 288, 168, 665,
	237, 169, 0, 175, 170, 171, 172, 174, 666, 173,
	639, 0, 176, 0, 177, 178, 179, 0, 240, 667,
	668, 0, 0, 180, 640, 641, 612, 181, 182, 1939,
	184, 0, 0, 185, 186, 187, 632, 188, 0, 189,
	190, 191, 245, 669, 0, 0, 192, 0, 0, 0,
	0, 193, 194, 195, 196, 590, 0, 618, 607, 608,
	605, 606, 594, 0, 0, 0, 586, 587, 0, 0,
	0, 0, 588, 78, 79, 595, 80, 0, 0, 0,
	0, 634, 600, 0, 0, 0, 81, 82, 198, 649,
	200, 650, 83, 651, 652, 0, 84, 204, 205, 85,
	615, 633, 653, 654, 208, 0, 645, 0, 626, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	276, 93, 94, 0, 627, 629, 0, 628, 630, 95,
	96, 97, 98, 655, 99, 656, 657, 0, 100, 0,
	101, 0, 0, 0, 648, 103, 0, 104, 0, 0,
	0, 599, 105, 106, 635, 636, 613, 0, 0, 107,
	108, 658, 0, 109, 0, 110, 0, 0, 277, 0,
	111, 646, 0, 218, 0, 112, 113, 114, 642, 644,
	279, 0, 117, 0, 115, 0, 278, 116, 659, 660,
	661, 662, 0, 625, 0, 280, 118, 281, 119, 120,
	0, 122, 121, 0, 647, 282, 123, 283, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 284,
	131, 132, 135, 133, 589, 134, 614, 643, 136, 663,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 285,
	140, 286, 637, 141, 142, 143, 144, 0, 638, 145,
	232, 146, 0, 147, 148, 149, 664, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 287, 157, 158, 603,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	631, 166, 167, 288, 168, 665, 237, 169, 0, 175,
	170, 171, 172, 174, 666, 173, 639, 0, 176, 0,
	177, 178, 179, 0, 240, 667, 668, 0, 0, 180,
	640, 641, 612, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 632, 188, 0, 189, 190, 191, 245, 669,
	0, 0, 192, 0, 0, 0, 0, 193, 194, 195,
	196, 590, 0, 1205, 607, 608, 605, 606, 594, 0,
	0, 0, 586, 587, 0, 0, 0, 0, 588, 78,
	79, 595, 80, 0, 0, 0, 0, 634, 600, 0,
	0, 0, 81, 82, 198, 649, 200, 650, 83, 651,
	652, 0, 84, 204, 205, 85, 615, 633, 653, 654,
	208, 0, 645, 0, 626, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 276, 93, 94, 0,
	627, 629, 0, 628, 630, 95, 96, 97, 98, 655,
	1208, 656, 657, 0, 100, 0, 101, 0, 0, 0,
	648, 103, 0, 104, 0, 0, 0, 599, 105, 106,
	635, 636, 613, 0, 0, 107, 108, 658, 0, 109,
	0, 110, 0, 0, 277, 0, 111, 646, 0, 218,
	0, 112, 113, 1209, 642, 644, 279, 0, 117, 0,
	115, 0, 278, 116, 659, 660, 661, 662, 0, 625,
	0, 280, 118, 281, 119, 120, 0, 122, 121, 0,
	647, 282, 123, 283, 0, 124, 0, 0, 125, 0,
	126, 1210, 1207, 129, 130, 284, 131, 132, 135, 133,
	589, 134, 614, 643, 136, 663, 137, 138, 0, 0,
	0, 0, 0, 139, 229, 285, 140, 286, 637, 141,
	142, 143, 144, 0, 638, 145, 232, 146, 0, 147,
	148, 149, 664, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 287, 157, 158, 603, 159, 0, 160, 161,
	162, 1211, 0, 235, 164, 165, 631, 166, 167, 288,
	168, 665, 237, 169, 0, 175, 170, 171, 172, 174,
	666, 173, 639, 0, 176, 0, 177, 178, 179, 0,
	240, 667, 668, 0, 0, 180, 640, 641, 612, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 632, 188,
	0, 189, 190, 191, 245, 669, 0, 0, 192, 0,
	0, 0, 0, 193, 194, 1206, 196, 590, 0, 618,
	607, 608, 605, 606, 594, 0, 0, 0, 586, 587,
	0, 0, 0, 0, 588, 78, 79, 595, 80, 0,
	0, 0, 0, 634, 600, 0, 0, 0, 81, 82,
	198, 649, 200, 650, 83, 651, 652, 0, 84, 204,
	205, 85, 615, 633, 653, 654, 208, 0, 645, 0,
	626, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 276, 93, 94, 0, 627, 629, 0, 628,
	630, 95, 96, 97, 98, 655, 99, 656, 657, 0,
	100, 0, 101, 0, 0, 0, 648, 103, 0, 104,
	0, 0, 0, 599, 105, 106, 635, 636, 613, 0,
	0, 107, 108, 658, 0, 109, 0, 110, 0, 0,
	277, 0, 111, 646, 0, 218, 0, 112, 113, 114,
	642, 644, 279, 0, 117, 0, 115, 0, 278, 116,
	659, 660, 661, 662, 0, 625, 0, 280, 118, 281,
	119, 120, 0, 122, 121, 0, 647, 282, 123, 283,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 284, 131, 132, 135, 133, 0, 134, 614, 643,
	136, 663, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 285, 140, 286, 637, 141, 142, 143, 144, 0,
	638, 145, 232, 146, 0, 147, 148, 149, 664, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 287, 157,
	158, 1223, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 631, 166, 167, 288, 168, 665, 237, 169,
	0, 175, 170, 171, 172, 174, 666, 173, 639, 0,
	176, 0, 177, 178, 179, 0, 240, 667, 668, 0,
	0, 180, 640, 641, 612, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 632, 188, 0, 189, 190, 191,
	245, 669, 0, 0, 192, 0, 0, 0, 0, 193,
	194, 195, 196, 0, 0, 618, 607, 608, 605, 606,
	594, 0, 0, 0, 1219, 1220, 0, 0, 0, 0,
	1221, 78, 79, 1222, 80, 0, 0, 0, 0, 634,
	600, 0, 0, 0, 81, 82, 0, 649, 200, 650,
	83, 651, 652, 0, 84, 204, 205, 85, 615, 633,
	653, 654, 208, 0, 645, 0, 626, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 276, 93,
	1940, 0, 627, 629, 0, 628, 630, 95, 96, 97,
	98, 655, 99, 656, 657, 0, 100, 0, 101, 0,
	0, 0, 648, 103, 0, 104, 0, 0, 0, 599,
	105, 106, 635, 636, 613, 0, 0, 107, 108, 658,
	0, 109, 0, 110, 0, 0, 277, 0, 111, 646,
	0, 218, 0, 112, 113, 114, 642, 644, 0, 0,
	117, 0, 115, 0, 278, 116, 659, 660, 661, 662,
	0, 625, 0, 0, 118, 281, 119, 120, 0, 122,
	121, 0, 647, 282, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 284, 131, 132,
	135, 133, 589, 134, 614, 643, 136, 663, 137, 138,
	0, 0, 0, 0, 0, 139, 229, 285, 140, 286,
	637, 141, 142, 143, 144, 0, 638, 145, 232, 146,
	0, 147, 148, 149, 664, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 287, 157, 158, 603, 159, 0,
	160, 161, 162, 163, 0, 235, 164, 165, 631, 166,
	167, 0, 168, 665, 237, 169, 0, 175, 170, 171,
	172, 174, 666, 173, 639, 0, 176, 0, 177, 178,
	179, 0, 240, 667, 668, 0, 0, 180, 640, 641,
	612, 181, 182, 1939, 184, 0, 0, 185, 186, 187,
	632, 188, 0, 189, 190, 191, 245, 669, 0, 0,
	192, 0, 0, 0, 0, 193, 194, 195, 196, 0,
	0, 618, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 587, 0, 0, 0, 0, 588, 78, 79, 595,
	80, 0, 0, 0, 0, 634, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 633, 206, 207, 208, 0,
	645, 0, 626, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 276, 93, 94, 0, 627, 629,
	0, 628, 630, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 635, 636,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 277, 0, 111, 646, 0, 218, 0, 112,
	113, 114, 642, 644, 279, 0, 117, 0, 115, 0,
	278, 116, 221, 222, 223, 224, 0, 225, 0, 280,
	118, 281, 119, 120, 0, 122, 121, 0, 647, 282,
	123, 283, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 284, 131, 132, 135, 133, 0, 134,
	0, 643, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 285, 140, 286, 637, 141, 142, 143,
	144, 0, 638, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	287, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 631, 166, 167, 288, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	639, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 640, 641, 0, 181, 182, 183,
	184, 497, 0, 185, 186, 187, 632, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 1692, 206, 207, 208, 0,
	209, 0, 275, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 276, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 277, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 219, 220, 279, 0, 117, 0, 115, 0,
	278, 116, 221, 222, 223, 224, 0, 225, 0, 280,
	118, 281, 119, 120, 0, 122, 121, 0, 226, 282,
	123, 283, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 284, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 285, 140, 286, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	287, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	64, 235, 164, 165, 0, 166, 167, 288, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 66, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 501, 246, 0, 0, 192, 0, 0, 0,
	62, 193, 194, 195, 196, 0, 63, 497, 810, 0,
	811, 806, 801, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 79, 61, 80, 0, 0, 0,
	0, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 275, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	276, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 814, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 803, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 277, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 219, 220,
	279, 0, 117, 0, 115, 0, 278, 116, 221, 222,
	223, 224, 0, 225, 0, 280, 118, 281, 119, 120,
	0, 122, 121, 0, 226, 282, 123, 283, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 284,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 804, 0, 0, 0, 139, 229, 285,
	140, 286, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 287, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 288, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 802, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	497, 810, 192, 811, 806, 801, 0, 193, 194, 195,
	196, 0, 0, 0, 0, 0, 78, 79, 0, 80,
	0, 0, 812, 807, 197, 0, 0, 0, 0, 81,
	82, 198, 199, 200, 201, 83, 202, 203, 0, 84,
	204, 205, 85, 0, 0, 206, 207, 208, 0, 209,
	0, 275, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 276, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 210, 99, 211, 212,
	797, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 213, 105, 106, 214, 215, 803,
	0, 0, 107, 108, 216, 0, 109, 0, 110, 0,
	0, 277, 0, 111, 217, 0, 218, 0, 112, 113,
	114, 219, 220, 279, 0, 117, 0, 115, 0, 278,
	116, 221, 222, 223, 224, 0, 225, 0, 280, 118,
	281, 119, 120, 0, 122, 121, 0, 226, 282, 123,
	283, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 284, 131, 132, 135, 133, 0, 134, 0,
	227, 136, 228, 137, 138, 0, 804, 0, 0, 0,
	139, 229, 285, 140, 286, 230, 141, 142, 143, 144,
	0, 231, 145, 232, 146, 0, 147, 148, 149, 233,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 287,
	157, 158, 234, 159, 0, 160, 161, 162, 163, 0,
	235, 164, 165, 0, 166, 167, 288, 168, 236, 237,
	169, 0, 175, 170, 171, 172, 174, 238, 173, 239,
	0, 176, 0, 177, 178, 179, 0, 240, 241, 242,
	0, 0, 180, 243, 244, 802, 181, 182, 183, 184,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 245, 246, 497, 810, 192, 811, 806, 801, 0,
	193, 194, 195, 196, 0, 0, 0, 0, 0, 78,
	79, 0, 80, 0, 0, 812, 807, 197, 0, 0,
	0, 0, 81, 82, 198, 199, 200, 201, 83, 202,
	203, 0, 84, 204, 205, 85, 0, 0, 206, 207,
	208, 0, 209, 0, 275, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 276, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 210,
	99, 211, 212, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 213, 105, 106,
	214, 215, 803, 0, 0, 107, 108, 216, 0, 109,
	0, 110, 0, 0, 277, 0, 111, 217, 0, 218,
	0, 112, 113, 114, 219, 220, 279, 0, 117, 0,
	115, 0, 278, 116, 221, 222, 223, 224, 0, 225,
	0, 280, 118, 281, 119, 120, 0, 122, 121, 0,
	226, 282, 123, 283, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 284, 131, 132, 135, 133,
	0, 134, 0, 227, 136, 228, 137, 138, 0, 804,
	0, 0, 0, 139, 229, 285, 140, 286, 230, 141,
	142, 143, 144, 0, 231, 145, 232, 146, 0, 147,
	148, 149, 233, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 287, 157, 158, 234, 159, 0, 160, 161,
	162, 163, 0, 235, 164, 165, 0, 166, 167, 288,
	168, 236, 237, 169, 0, 175, 170, 171, 172, 174,
	238, 173, 239, 0, 176, 0, 177, 178, 179, 0,
	240, 241, 242, 0, 0, 180, 243, 244, 802, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 245, 246, 75, 0, 192, 0,
	0, 0, 0, 193, 194, 195, 196, 0, 0, 0,
	0, 0, 78, 79, 0, 80, 0, 0, 812, 807,
	197, 0, 0, 0, 0, 81, 82, 198, 199, 200,
	201, 83, 202, 203, 0, 84, 204, 205, 85, 0,
	0, 206, 207, 208, 0, 209, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 210, 99, 211, 212, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	213, 105, 106, 214, 215, 0, 0, 0, 107, 108,
	216, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	217, 0, 218, 0, 112, 113, 114, 219, 220, 0,
	0, 117, 0, 115, 0, 0, 116, 221, 222, 223,
	224, 0, 225, 0, 0, 118, 0, 119, 120, 0,
	122, 121, 0, 226, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 227, 136, 228, 137,
	138, 0, 0, 458, 0, 0, 139, 229, 0, 140,
	0, 230, 141, 142, 143, 144, 0, 231, 145, 232,
	146, 0, 147, 148, 149, 233, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 234, 159,
	0, 160, 161, 162, 163, 64, 235, 164, 165, 0,
	166, 167, 0, 168, 236, 237, 169, 0, 175, 170,
	171, 172, 174, 238, 173, 239, 0, 176, 66, 177,
	178, 179, 0, 240, 241, 242, 0, 0, 180, 243,
	244, 0, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 501, 246, 0,
	0, 192, 75, 0, 0, 62, 193, 194, 195, 196,
	0, 63, 0, 0, 0, 0, 0, 0, 78, 79,
	0, 80, 0, 0, 0, 0, 197, 0, 0, 0,
	1119, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 219, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 64, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 66, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 501, 246, 0, 0, 192, 75, 0,
	0, 62, 193, 194, 195, 196, 0, 63, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 0, 197, 0, 0, 0, 61, 81, 82, 198,
	199, 200, 201, 83, 202, 203, 0, 84, 204, 205,
	85, 0, 0, 206, 207, 208, 0, 209, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 210, 99, 211, 212, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 213, 105, 106, 214, 215, 0, 0, 0,
	107, 108, 216, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 217, 0, 218, 0, 112, 113, 114, 219,
	220, 0, 0, 117, 0, 115, 0, 0, 116, 221,
	222, 223, 224, 0, 225, 0, 0, 118, 0, 119,
	120, 0, 122, 121, 0, 226, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 227, 136,
	228, 137, 138, 0, 0, 458, 0, 0, 139, 229,
	0, 140, 0, 230, 141, 142, 143, 144, 0, 231,
	145, 232, 146, 0, 147, 148, 149, 233, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	234, 159, 0, 160, 161, 162, 163, 0, 235, 164,
	165, 0, 166, 167, 0, 168, 236, 237, 169, 0,
	175, 170, 171, 172, 174, 238, 173, 239, 0, 176,
	0, 177, 178, 179, 0, 240, 241, 242, 0, 0,
	180, 243, 244, 0, 181, 182, 183, 184, 75, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 245,
	246, 0, 0, 192, 78, 79, 0, 80, 193, 194,
	195, 196, 197, 0, 0, 0, 0, 81, 82, 198,
	199, 200, 201, 83, 202, 203, 0, 84, 204, 205,
	85, 0, 1119, 206, 207, 208, 0, 209, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 210, 99, 211, 212, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 213, 105, 106, 214, 215, 0, 0, 0,
	107, 108, 216, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 217, 0, 218, 0, 112, 113, 114, 219,
	220, 0, 0, 117, 0, 115, 0, 0, 116, 221,
	222, 223, 224, 0, 225, 0, 0, 118, 0, 119,
	120, 0, 122, 121, 0, 226, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 227, 136,
	228, 137, 138, 0, 0, 0, 0, 0, 139, 229,
	0, 140, 0, 230, 141, 142, 143, 144, 0, 231,
	145, 232, 146, 0, 147, 148, 149, 233, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	234, 159, 0, 160, 161, 162, 163, 0, 235, 164,
	165, 0, 166, 167, 0, 168, 236, 237, 169, 0,
	175, 170, 171, 172, 174, 238, 173, 239, 0, 176,
	0, 177, 178, 179, 0, 240, 241, 242, 0, 0,
	180, 243, 244, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 245,
	246, 0, 0, 192, 0, 75, 0, 0, 193, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 0, 0, 197,
	0, 0, 0, 702, 81, 82, 198, 199, 200, 201,
	83, 202, 203, 0, 84, 204, 205, 85, 0, 0,
	206, 207, 208, 0, 209, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 210, 99, 211, 212, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 213,
	105, 106, 214, 215, 0, 0, 0, 107, 108, 216,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 217,
	0, 218, 0, 112, 113, 114, 219, 220, 0, 0,
	117, 0, 115, 0, 0, 116, 221, 222, 223, 224,
	0, 225, 0, 0, 118, 0, 119, 120, 0, 122,
	121, 0, 226, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 227, 136, 228, 137, 138,
	0, 0, 0, 0, 0, 139, 229, 0, 140, 0,
	230, 141, 142, 143, 144, 0, 231, 145, 232, 146,
	0, 147, 148, 149, 233, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 234, 159, 0,
	160, 161, 162, 163, 0, 235, 164, 165, 0, 166,
	167, 0, 168, 236, 237, 169, 0, 175, 170, 171,
	172, 174, 238, 173, 239, 0, 176, 0, 177, 178,
	179, 0, 240, 241, 242, 0, 0, 180, 243, 244,
	0, 181, 182, 183, 184, 75, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 245, 246, 0, 0,
	192, 78, 79, 0, 80, 193, 194, 195, 196, 197,
	0, 0, 0, 0, 81, 82, 198, 199, 200, 201,
	83, 202, 203, 0, 84, 204, 205, 85, 0, 1022,
	206, 207, 208, 0, 209, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 210, 99, 211, 212, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 213,
	105, 106, 214, 215, 0, 0, 0, 107, 108, 216,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 217,
	0, 218, 0, 112, 113, 114, 219, 220, 0, 0,
	117, 0, 115, 0, 0, 116, 221, 222, 223, 224,
	0, 225, 0, 0, 118, 0, 119, 120, 0, 122,
	121, 0, 226, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 227, 136, 228, 137, 138,
	0, 0, 0, 0, 0, 139, 229, 0, 140, 0,
	230, 141, 142, 143, 144, 0, 231, 145, 232, 146,
	0, 147, 148, 149, 233, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 234, 159, 0,
	160, 161, 162, 163, 0, 235, 164, 165, 0, 166,
	167, 0, 168, 236, 237, 169, 0, 175, 170, 171,
	172, 174, 238, 173, 239, 0, 176, 0, 177, 178,
	179, 0, 240, 241, 242, 0, 0, 180, 243, 244,
	0, 181, 182, 183, 184, 75, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 245, 246, 0, 0,
	192, 78, 79, 0, 80, 193, 194, 195, 196, 197,
	0, 0, 0, 0, 81, 82, 198, 199, 200, 201,
	83, 202, 203, 0, 84, 204, 205, 85, 0, 1589,
	206, 207, 208, 0, 209, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 210, 99, 211, 212, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 213,
	105, 106, 214, 215, 0, 0, 0, 107, 108, 216,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 217,
	0, 218, 0, 112, 113, 114, 219, 220, 0, 0,
	117, 0, 115, 0, 0, 116, 221, 222, 223, 224,
	0, 225, 0, 0, 118, 0, 119, 120, 0, 122,
	121, 0, 226, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 227, 136, 228, 137, 138,
	0, 0, 0, 0, 0, 139, 229, 0, 140, 0,
	230, 141, 142, 143, 144, 0, 231, 145, 232, 146,
	0, 147, 148, 149, 233, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 234, 159, 0,
	160, 161, 162, 163, 0, 235, 164, 165, 0, 166,
	167, 0, 168, 236, 237, 169, 0, 175, 170, 171,
	172, 174, 238, 173, 239, 0, 176, 0, 177, 178,
	179, 0, 240, 241, 242, 0, 0, 180, 243, 244,
	0, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 245, 246, 0, 0,
	192, 0, 0, 0, 0, 193, 194, 195, 196, 618,
	607, 608, 605, 606, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 78, 79, 0, 80, 680,
	0, 0, 0, 197, 0, 0, 0, 0, 81, 82,
	198, 649, 200, 650, 83, 651, 652, 0, 84, 204,
	205, 85, 0, 0, 653, 654, 208, 0, 209, 0,
	275, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 276, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 655, 99, 656, 657, 0,
	100, 0, 101, 0, 0, 0, 648, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 613, 0,
	0, 107, 108, 658, 0, 109, 0, 110, 0, 0,
	277, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	219, 220, 279, 0, 117, 0, 115, 0, 278, 116,
	659, 660, 661, 662, 0, 625, 0, 280, 118, 281,
	119, 120, 0, 122, 121, 0, 226, 282, 123, 283,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 284, 131, 132, 135, 133, 0, 134, 614, 227,
	136, 663, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 285, 140, 286, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 664, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 287, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 288, 168, 665, 237, 169,
	0, 175, 170, 171, 172, 174, 666, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 667, 668, 0,
	0, 180, 243, 244, 612, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 669, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 781, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	219, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 780, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 75, 192, 0, 0, 0, 0, 193,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 78,
	79, 0, 80, 0, 0, 0, 784, 197, 0, 0,
	0, 0, 81, 82, 198, 199, 200, 201, 83, 202,
	203, 0, 84, 204, 205, 85, 0, 0, 206, 207,
	208, 0, 209, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 210,
	99, 211, 212, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 213, 105, 106,
	214, 215, 0, 0, 0, 107, 108, 216, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 217, 0, 218,
	0, 112, 113, 114, 219, 220, 0, 0, 117, 0,
	115, 0, 0, 116, 221, 222, 223, 224, 0, 225,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	226, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 227, 136, 228, 137, 138, 0, 0,
	0, 0, 0, 139, 229, 0, 140, 0, 230, 141,
	142, 143, 144, 0, 231, 145, 232, 146, 0, 147,
	148, 149, 233, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 234, 159, 0, 160, 161,
	162, 163, 0, 235, 164, 165, 0, 166, 167, 0,
	168, 236, 237, 169, 0, 175, 170, 171, 172, 174,
	238, 173, 239, 0, 176, 0, 177, 178, 179, 0,
	240, 241, 242, 0, 0, 180, 243, 244, 0, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 245, 246, 0, 497, 192, 0,
	0, 0, 0, 193, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 78, 79, 0, 80, 0, 0, 0,
	784, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 275, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	276, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 277, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 219, 220,
	279, 0, 117, 0, 115, 0, 278, 116, 221, 222,
	223, 224, 0, 225, 0, 280, 118, 281, 119, 120,
	0, 122, 121, 0, 226, 282, 123, 283, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 284,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 285,
	140, 286, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 287, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 288, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 986, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 984, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 1091, 0, 107,
	108, 216, 0, 109, 0, 110, 989, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 219, 220,
	0, 0, 117, 1089, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 988, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 1090, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 986, 209, 0, 0, 981,
	86, 87, 88, 0, 89, 984, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 989, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 980, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 988, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 987, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 1558, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 219, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 219, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 458, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 731, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 458, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 509, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 219, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 470, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 458, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 463, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 458, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 373, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 219, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 372, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 219, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 1269, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 1267, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 1256, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 851, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 219, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 387, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 716, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 219, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 0, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 561, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 556, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 515, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 219, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 398, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 397, 241, 242, 0, 0, 393,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 219, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 398, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 397, 241, 242, 0, 0, 393,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 493, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 490, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 487, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 485, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 466, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 219, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 447, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 219, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 390,
	0, 0, 125, 0, 126, 127, 128, 129, 398, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 392,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 391,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 397, 241, 242, 0, 0, 393,
	243, 244, 0, 181, 182, 183, 184, 75, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 78, 79, 0, 80, 193, 194, 195,
	196, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 219, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 0, 144, 0, 231, 145,
	232, 146, 0, 147, 0, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	0, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 0, 192, 0, 0, 0, 0, 193, 194, 195,
	196, 876, 877, 0, 896, 897, 898, 906, 907, 908,
	0, 0, 0, 0, 0, 0, 0, 899, 0, 0,
	0, 0, 0, 0, 879, 0, 910, 0, 0, 0,
	876, 877, 0, 896, 897, 898, 906, 907, 908, 0,
	0, 0, 0, 0, 0, 878, 899, 0, 0, 0,
	0, 893, 0, 879, 0, 910, 0, 0, 0, 0,
	876, 877, 0, 896, 897, 898, 906, 907, 908, 0,
	0, 0, 0, 0, 878, 0, 899, 0, 0, 0,
	893, 0, 0, 879, 0, 910, 0, 0, 0, 0,
	876, 877, 0, 896, 897, 898, 906, 907, 908, 0,
	884, 0, 0, 0, 878, 0, 899, 0, 0, 0,
	893, 0, 0, 879, 0, 910, 0, 0, 903, 911,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 884,
	0, 0, 0, 909, 878, 0, 0, 0, 0, 0,
	893, 0, 0, 0, 0, 901, 0, 903, 911, 0,
	0, 894, 0, 0, 0, 0, 0, 0, 0, 884,
	0, 0, 909, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 900, 901, 0, 0, 903, 911, 0,
	894, 0, 0, 0, 0, 0, 0, 0, 0, 884,
	0, 0, 909, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 900, 0, 901, 0, 0, 903, 911, 895,
	894, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 904, 909, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 900, 0, 901, 0, 0, 0, 895, 0,
	894, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	904, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 900, 0, 0, 0, 0, 0, 895, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 902,
	904, 0, 890, 891, 892, 0, 889, 886, 887, 888,
	880, 881, 882, 883, 885, 0, 905, 0, 895, 0,
	0, 0, 0, 1410, 0, 0, 0, 0, 902, 0,
	904, 890, 891, 892, 0, 889, 886, 887, 888, 880,
	881, 882, 883, 885, 0, 905, 0, 0, 0, 1887,
	0, 0, 0, 0, 0, 0, 0, 0, 902, 0,
	0, 890, 891, 892, 0, 889, 886, 887, 888, 880,
	881, 882, 883, 885, 0, 905, 0, 0, 0, 1885,
	0, 0, 0, 0, 0, 0, 0, 0, 902, 0,
	0, 890, 891, 892, 0, 889, 886, 887, 888, 880,
	881, 882, 883, 885, 0, 905, 0, 876, 877, 1861,
	896, 897, 898, 906, 907, 908, 0, 0, 0, 0,
	0, 0, 0, 899, 0, 0, 0, 0, 0, 0,
	879, 0, 910, 0, 0, 0, 876, 877, 0, 896,
	897, 898, 906, 907, 908, 0, 0, 0, 0, 0,
	0, 878, 899, 0, 0, 0, 0, 893, 0, 879,
	0, 910, 0, 0, 0, 0, 876, 877, 0, 896,
	897, 898, 906, 907, 908, 0, 0, 0, 0, 0,
	878, 0, 899, 0, 0, 0, 893, 0, 0, 879,
	0, 910, 0, 0, 0, 0, 876, 877, 0, 896,
	897, 898, 906, 907, 908, 0, 884, 0, 0, 0,
	878, 0, 899, 0, 0, 0, 893, 0, 0, 879,
	0, 910, 0, 0, 903, 911, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 884, 0, 0, 0, 909,
	878, 0, 0, 0, 0, 0, 893, 0, 0, 0,
	0, 901, 0, 903, 911, 0, 0, 894, 0, 0,
	0, 0, 0, 0, 0, 884, 0, 0, 909, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 900,
	901, 0, 0, 903, 911, 0, 894, 0, 0, 0,
	0, 0, 0, 0, 0, 884, 0, 0, 909, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 900, 0,
	901, 0, 0, 903, 911, 895, 894, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 904, 909, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 900, 0,
	901, 0, 0, 0, 895, 0, 894, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 904, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 900, 0,
	0, 0, 0, 0, 895, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 902, 904, 0, 890, 891,
	892, 0, 889, 886, 887, 888, 880, 881, 882, 883,
	885, 0, 905, 0, 895, 0, 1836, 0, 0, 0,
	0, 0, 0, 0, 902, 0, 904, 890, 891, 892,
	0, 889, 886, 887, 888, 880, 881, 882, 883, 885,
	0, 905, 0, 0, 0, 1831, 0, 0, 0, 0,
	0, 0, 0, 0, 902, 0, 0, 890, 891, 892,
	0, 889, 886, 887, 888, 880, 881, 882, 883, 885,
	0, 905, 0, 0, 0, 1827, 0, 0, 0, 0,
	0, 0, 0, 0, 902, 0, 0, 890, 891, 892,
	0, 889, 886, 887, 888, 880, 881, 882, 883, 885,
	0, 905, 0, 876, 877, 1758, 896, 897, 898, 906,
	907, 908, 0, 0, 0, 0, 0, 0, 0, 899,
	0, 0, 0, 0, 0, 0, 879, 0, 910, 0,
	0, 0, 876, 877, 0, 896, 897, 898, 906, 907,
	908, 0, 0, 0, 0, 0, 0, 878, 899, 0,
	0, 0, 0, 893, 0, 879, 0, 910, 0, 0,
	0, 0, 876, 877, 0, 896, 897, 898, 906, 907,
	908, 0, 0, 0, 0, 0, 878, 0, 899, 0,
	0, 0, 893, 0, 0, 879, 0, 910, 0, 0,
	0, 0, 876, 877, 0, 896, 897, 898, 906, 907,
	908, 0, 884, 0, 0, 0, 878, 0, 899, 0,
	0, 0, 893, 0, 0, 879, 0, 910, 0, 0,
	903, 911, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 884, 0, 0, 0, 909, 878, 0, 0, 0,
	0, 0, 893, 0, 0, 0, 0, 901, 0, 903,
	911, 0, 0, 894, 0, 0, 0, 0, 0, 0,
	0, 884, 0, 0, 909, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 900, 901, 0, 0, 903,
	911, 0, 894, 0, 0, 0, 0, 0, 0, 0,
	0, 884, 0, 0, 909, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 900, 0, 901, 0, 0, 903,
	911, 895, 894, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 904, 909, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 900, 0, 901, 0, 0, 0,
	895, 0, 894, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 904, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 900, 0, 0, 0, 0, 0,
	895, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 902, 904, 0, 890, 891, 892, 0, 889, 886,
	887, 888, 880, 881, 882, 883, 885, 0, 905, 0,
	895, 0, 1757, 0, 0, 0, 0, 0, 0, 0,
	902, 0, 904, 890, 891, 892, 0, 889, 886, 887,
	888, 880, 881, 882, 883, 885, 0, 905, 0, 0,
	0, 1658, 0, 0, 0, 0, 0, 0, 0, 0,
	902, 0, 0, 890, 891, 892, 0, 889, 886, 887,
	888, 880, 881, 882, 883, 885, 0, 905, 0, 0,
	0, 1592, 0, 0, 0, 0, 0, 0, 0, 0,
	902, 0, 0, 890, 891, 892, 0, 889, 886, 887,
	888, 880, 881, 882, 883, 885, 0, 905, 0, 876,
	877, 1576, 896, 897, 898, 906, 907, 908, 0, 0,
	0, 0, 0, 0, 0, 899, 0, 0, 0, 0,
	0, 0, 879, 0, 910, 0, 0, 0, 876, 877,
	0, 896, 897, 898, 906, 907, 908, 0, 0, 0,
	0, 0, 0, 878, 899, 0, 0, 0, 0, 893,
	0, 879, 0, 910, 0, 0, 0, 0, 876, 877,
	0, 896, 897, 898, 906, 907, 908, 0, 0, 0,
	0, 0, 878, 0, 899, 0, 0, 0, 893, 0,
	0, 879, 0, 910, 0, 0, 0, 0, 876, 877,
	0, 896, 897, 898, 906, 907, 908, 0, 884, 0,
	0, 0, 878, 0, 899, 0, 0, 0, 893, 1107,
	0, 879, 0, 910, 0, 0, 903, 911, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 884, 0, 0,
	0, 909, 878, 0, 0, 0, 0, 0, 893, 0,
	0, 0, 0, 901, 0, 903, 911, 0, 0, 894,
	0, 0, 0, 0, 0, 0, 0, 884, 0, 1450,
	909, 0, 1449, 0, 0, 0, 1108, 0, 0, 0,
	0, 900, 901, 0, 0, 903, 911, 0, 894, 0,
	0, 0, 0, 0, 0, 0, 0, 884, 0, 0,
	909, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	900, 0, 901, 0, 0, 903, 911, 895, 894, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 904,
	909, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	900, 0, 901, 0, 0, 0, 895, 0, 894, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 904, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	900, 0, 0, 0, 0, 0, 895, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 902, 904, 0,
	890, 891, 892, 0, 889, 886, 887, 888, 880, 881,
	882, 883, 885, 0, 905, 0, 895, 0, 1175, 0,
	0, 0, 0, 0, 0, 0, 902, 0, 904, 890,
	891, 892, 0, 889, 886, 887, 888, 880, 881, 882,
	883, 885, 0, 905, 0, 1007, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 902, 0, 0, 890,
	891, 892, 0, 889, 886, 887, 888, 880, 881, 882,
	883, 885, 0, 905, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 902, 0, 0, 890,
	891, 892, 0, 889, 886, 887, 888, 880, 881, 882,
	883, 885, 913, 905, 0, 0, 0, 0, 876, 877,
	0, 896, 897, 898, 906, 907, 908, 0, 0, 0,
	0, 0, 0, 0, 899, 0, 0, 0, 912, 0,
	0, 879, 0, 910, 0, 0, 0, 876, 877, 0,
	896, 897, 898, 906, 907, 908, 0, 0, 0, 0,
	0, 0, 878, 899, 0, 0, 0, 0, 893, 0,
	879, 0, 910, 0, 0, 0, 0, 876, 877, 0,
	896, 897, 898, 906, 907, 908, 0, 0, 0, 0,
	0, 878, 0, 899, 0, 0, 0, 893, 0, 0,
	879, 0, 910, 0, 0, 0, 0, 876, 877, 0,
	896, 897, 898, 906, 907, 908, 0, 884, 0, 0,
	0, 878, 0, 899, 0, 0, 0, 893, 0, 0,
	879, 0, 910, 0, 0, 903, 911, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 884, 0, 0, 0,
	909, 878, 0, 0, 0, 0, 0, 893, 0, 0,
	0, 0, 901, 0, 903, 911, 0, 0, 894, 0,
	0, 0, 0, 0, 0, 0, 884, 0, 0, 909,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	900, 901, 0, 0, 903, 911, 0, 894, 0, 0,
	0, 0, 0, 0, 0, 0, 884, 0, 0, 909,
	0, 1456, 0, 0, 0, 0, 0, 0, 0, 900,
	442, 901, 0, 0, 903, 911, 895, 894, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 904, 909,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 900,
	0, 901, 0, 0, 0, 895, 0, 894, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 904, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 900,
	0, 0, 0, 0, 0, 895, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 902, 904, 0, 890,
	891, 892, 0, 889, 886, 887, 888, 880, 881, 882,
	883, 885, 0, 905, 0, 895, 0, 1586, 0, 0,
	0, 0, 0, 0, 0, 902, 0, 904, 890, 891,
	892, 0, 889, 886, 887, 888, 880, 881, 882, 883,
	885, 0, 905, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 902, 0, 0, 890, 891,
	892, 0, 889, 886, 887, 888, 880, 881, 882, 883,
	885, 0, 905, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 902, 0, 0, 890, 891,
	892, 0, 889, 886, 887, 888, 880, 881, 882, 883,
	885, 0, 905, 876, 877, 0, 896, 897, 898, 906,
	907, 908, 0, 0, 0, 0, 0, 0, 0, 899,
	0, 0, 0, 1451, 0, 0, 879, 0, 910, 0,
	0, 0, 876, 877, 0, 896, 897, 898, 906, 907,
	908, 0, 0, 0, 0, 0, 0, 878, 899, 0,
	0, 0, 0, 893, 0, 879, 0, 910, 0, 0,
	0, 0, 0, 876, 877, 0, 896, 897, 898, 906,
	907, 908, 0, 0, 0, 0, 878, 0, 0, 899,
	0, 0, 893, 1409, 0, 0, 879, 0, 910, 0,
	0, 0, 876, 877, 0, 896, 897, 898, 906, 907,
	908, 0, 884, 0, 0, 0, 0, 878, 899, 0,
	0, 0, 0, 893, 0, 879, 0, 910, 0, 0,
	903, 911, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 884, 0, 0, 0, 909, 878, 0, 0, 0,
	0, 0, 893, 0, 0, 0, 0, 901, 0, 903,
	911, 0, 0, 894, 0, 0, 0, 0, 0, 0,
	0, 0, 884, 0, 909, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 900, 901, 0, 0, 0,
	903, 911, 894, 0, 0, 0, 0, 0, 0, 0,
	0, 884, 0, 0, 0, 909, 0, 0, 0, 0,
	0, 0, 0, 0, 900, 0, 0, 901, 0, 903,
	911, 895, 0, 894, 0, 0, 1416, 0, 0, 0,
	0, 0, 0, 904, 909, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 900, 901, 0, 0, 0,
	895, 0, 894, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 904, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 900, 0, 0, 0, 0, 0,
	0, 895, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 902, 0, 904, 890, 891, 892, 0, 889, 886,
	887, 888, 880, 881, 882, 883, 885, 0, 905, 0,
	895, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	902, 0, 904, 890, 891, 892, 0, 889, 886, 887,
	888, 880, 881, 882, 883, 885, 0, 905, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 902, 0, 0, 890, 891, 892, 0, 889, 886,
	887, 888, 880, 881, 882, 883, 885, 0, 905, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	902, 0, 0, 890, 891, 892, 0, 889, 886, 887,
	888, 880, 881, 882, 883, 885, 0, 905, 876, 877,
	0, 896, 897, 898, 906, 907, 908, 0, 0, 0,
	0, 0, 0, 0, 899, 0, 0, 0, 0, 0,
	0, 879, 0, 910, 0, 0, 876, 877, 0, 896,
	897, 898, 906, 907, 908, 0, 0, 0, 0, 0,
	0, 0, 878, 0, 0, 0, 0, 0, 893, 879,
	0, 910, 0, 0, 876, 877, 0, 896, 897, 898,
	906, 907, 908, 0, 0, 0, 0, 0, 0, 0,
	878, 0, 0, 0, 0, 0, 893, 879, 0, 910,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 884, 878, 0,
	0, 0, 0, 0, 893, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 903, 911, 0, 0, 0,
	0, 0, 0, 0, 0, 884, 0, 0, 0, 0,
	909, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 901, 903, 911, 0, 0, 0, 894, 0,
	0, 0, 0, 884, 0, 0, 0, 0, 909, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	901, 903, 911, 27, 1418, 1419, 894, 1436, 1437, 1438,
	0, 0, 0, 0, 50, 0, 0, 0, 0, 0,
	1570, 0, 0, 0, 0, 0, 0, 0, 901, 0,
	0, 0, 0, 0, 894, 0, 895, 0, 52, 0,
	0, 0, 0, 0, 28, 0, 57, 0, 904, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 895, 41, 0, 0, 0, 0,
	0, 0, 36, 0, 0, 53, 904, 0, 0, 40,
	37, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 895, 0, 0, 0, 42, 0, 0, 0,
	0, 0, 38, 1424, 904, 0, 902, 0, 0, 890,
	891, 892, 0, 889, 886, 887, 888, 880, 881, 882,
	883, 885, 0, 905, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 902, 0, 1439, 890, 891, 892,
	0, 889, 886, 887, 888, 880, 881, 882, 883, 885,
	0, 905, 1418, 1419, 1434, 1436, 1437, 1438, 0, 0,
	0, 0, 902, 0, 0, 890, 891, 892, 0, 889,
	886, 887, 888, 880, 881, 882, 883, 885, 39, 905,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 43, 0, 54, 0, 0, 0, 0, 0,
	44, 0, 1433, 64, 0, 0, 0, 0, 47, 49,
	0, 0, 1435, 0, 0, 0, 0, 0, 51, 0,
	0, 0, 0, 0, 0, 0, 66, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1424, 0, 0, 0, 67, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 0, 0, 0, 63,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1439, 1430, 1431, 1432, 61, 1429,
	1426, 1427, 1428, 1420, 1421, 1422, 1423, 1425, 0, 0,
	0, 0, 1434, 0, 0, 0, 754, 748, 771, 742,
	762, 761, 0, 0, 744, 743, 0, 0, 0, 773,
	772, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	767, 0, 759, 758, 0, 0, 0, 0, 0, 0,
	1435, 757, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 756, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 749, 750, 751, 752, 0,
	770, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1430, 1431, 1432, 0, 1429, 1426, 1427,
	1428, 1420, 1421, 1422, 1423, 1425, 760, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 755, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 0, 0,
	0, 0, 753, 747, 0, 0, 0, 0, 0, 0,
	0, 775, 0, 0, 0, 0, 0, 0, 0, 745,
	0, 0, 768, 769, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 774,
}
var sqlPact = [...]int{

	24450, -1000, 31, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 636, 17013, -1000,
	-1000, -1000, -1000, -1000, -1000, 670, 632, 2050, 4543, 17013,
	17013, 16753, 1423, 1423, 18313, -1000, -1000, 21433, -1000, 2843,
	491, 495, 491, 491, 477, 18313, 596, 705, 148, -1000,
	652, -8, 21173, 17013, 1302, 34, 15453, 312, 24450, 16493,
	20913, 17013, 16233, 340, 41, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1141, 1070, 1066,
	15453, 20653, 20393, 20133, 19873, -1000, 10607, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 750, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 319,
	316, -1000, 15973, -1000, 908, -1000, 33, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 901, -1000, 17013, -1000, -1000,
	19613, 19353, 315, 838, -1000, -1000, 580, 401, 1317, -1000,
	46, -1000, -1000, -1000, 1140, -1000, 896, 1138, 1137, 1136,
	1135, 1133, 1129, 400, 915, 461, -1000, 838, -1000, 838,
	-1000, -1000, -1000, 561, 18313, -1000, 15453, -1000, 19093, 17013,
	17013, 1086, 18833, -1000, 652, -1000, -1000, -1000, 925, 1296,
	1296, 1296, 1305, 129, 123, 148, 18, 17013, -1000, 314,
	18, 7198, 7198, -1000, -1000, 312, -1000, 138, 13321, -1000,
	7770, -1000, 753, 1204, 435, 684, 1203, -57, 739, 737,
	1202, 650, 12524, 41, -1000, -1000, -1000, 9203, 4259, 15453,
	17013, 17013, 667, 18573, -1000, 1199, 128, 1198, -1000, 114,
	1197, -1000, 114, 1196, 13, -1000, -1000, -1000, -1000, -1000,
	-1000, 312, 15713, 17013, 1374, 24740, -1000, 9203, -1000, -1000,
	13865, 1547, 13865, -1000, -1000, 1372, -1000, 9203, -1000, 32,
	23, 1025, 1026, 11166, 10893, 1254, 864, -1000, -1000, -1000,
	45, 4543, 17013, 1146, 13865, 17013, 17013, 17013, 17013, 17013,
	17013, -1000, 1020, -1000, -1000, 17013, 17013, -1000, 21, 19,
	-1000, 18313, -1000, 131, -1000, 311, 980, 407, 133, 18053,
	407, 975, -1000, 925, -1000, 912, 1000, 8345, 9203, 148,
	-1000, -1000, 148, 148, 9203, -1000, -1000, 17013, 18, 1370,
	17013, 134, -1000, 23518, -1000, -1000, 9203, 9203, 9203, 9203,
	9203, 837, -1000, -1000, -1000, 5419, -1000, -1000, 41, 309,
	324, -1000, -1000, 308, 41, -1000, -1000, -1000, -1000, 306,
	1473, 432, -1000, -1000, -1000, 9203, 285, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1145, 300, 298, -1000,
	-1000, -1000, -1000, 297, 295, 290, 284, 283, 282, 281,
	280, 279, 278, 275, 274, 266, 262, 253, 776, -1000,
	421, -1000, -1000, 421, 421, -1000, 247, 247, 249, -1000,
	-1000, -1000, -1000, 247, -1000, -1000, -1000, 395, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 250, 134, -1000, -1000, -1000,
	17013, 1, -1000, 23992, -1000, -11, 756, -1000, 14933, 1277,
	1276, 1274, 15453, 1330, 1322, 559, 17013, 17013, 557, 552,
	15453, -1000, 1128, 0, -1000, -1000, 23158, -158, -1000, -1000,
	411, 91, 1365, 91, 12801, -1000, 17013, 17013, -1000, 17013,
	-1000, -1000, 17013, -1000, 17013, 17013, -1000, 17013, 226, 14413,
	727, 1195, 639, -8, -4, -1000, 1323, -1000, -1000, -1000,
	-1000, 97, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 249, 776, 247, 247,
	247, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 395, -1000,
	-1000, 421, 421, 421, -1000, -1000, -5, 23992, 544, 11,
	14139, 17013, -1000, 42, -1000, -1000, 1127, 488, -6, 772,
	1049, 807, -1000, -1000, -1000, -1000, 17, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1436, -1000, -1000,
	-1000, -1000, 1453, 17, -1000, -1000, -1000, -1000, -1000, 1472,
	-1000, -1000, -1000, 4543, -1000, -1000, -1000, 17013, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 772, 1049,
	-1000, -1000, 15453, 14673, 1358, 1194, 782, -1000, 1354, 17013,
	889, 965, -1000, 574, 1192, -1000, -1000, -1000, -1000, 23992,
	-1000, 23992, 702, 1075, -1000, 1075, 16, -1000, 23218, -1000,
	242, -10, -1000, 411, 7198, 12264, 24740, 24740, 17013, 578,
	9203, 9203, 9203, 9203, 9203, 9203, 9203, 9203, 9203, 9203,
	9203, 9203, 9203, 9203, 9203, 9203, 9203, 9203, 9203, 9203,
	9203, 9203, 870, 9203, 543, 9203, 9203, 9203, 9203, 752,
	852, 218, 4543, -1000, 627, 627, 627, 24316, 24316, 220,
	41, 30, 23129, 15, 41, -1000, -1000, 6909, 6603, 41,
	4827, -1000, 888, 1451, 402, 23992, 1152, 1111, 237, 119,
	115, 9203, 9203, 9489, 9489, 9203, 9775, 9203, 9203, 5705,
	9203, 9203, 9203, 9203, 9203, 9203, -1000, 236, -1000, -1000,
	-1000, -1000, 1450, -1000, -1000, 1449, -1000, 569, 565, 1447,
	411, 113, 7770, -1000, 727, 17013, 17013, 17013, -1000, -1000,
	961, 17793, 951, 24740, 17013, -1000, 235, 234, 1048, 1046,
	17013, 17013, 17533, 17273, 17013, 681, 223, 222, 17013, 734,
	-1000, 17013, 17013, 729, 638, 1125, 17013, -1000, 9203, 698,
	9203, 744, -1000, 11988, 430, 17013, 719, 132, -1000, -1000,
	-1000, 385, 17013, -1000, -1000, -1000, 128, -1000, 114, 114,
	-1000, -1000, 15453, -1000, -1000, -1000, -1000, -1000, -1000, 24740,
	334, 326, -1000, 1446, 540, -1000, 539, 523, 521, -1000,
	221, -1000, 9203, 17013, 14139, 11, 4, -1000, -1000, 17013,
	1049, -1000, -1000, -1000, -1000, 682, -1000, 765, -1000, 11439,
	-1000, -1000, -1000, 888, -1000, -18, -1000, -1000, -1000, -1000,
	111, -19, -1, 24740, -1000, -1000, -1000, -1000, -1000, 17013,
	276, 17013, -8, 17013, -1000, 1467, -8, 17013, 1187, 1212,
	370, 17013, -1000, -1000, -1000, 9203, -1000, -1000, -1000, -8,
	17013, -1000, 1109, -1000, -72, 1319, -105, 361, -1000, 11712,
	-1000, -1000, -1000, 399, 310, 310, 424, 424, 424, 424,
	367, 367, 2438, 189, 3268, 3268, 3268, 2652, 263, 263,
	3268, 3268, 3268, 24316, 24288, 357, 9203, 9203, 514, 835,
	218, 357, 9203, 1431, 357, 357, 357, -1000, 916, -1000,
	-1000, -1000, 1124, 215, 9775, 9775, -1000, -1000, -1000, 5419,
	-1000, -1000, 212, 9203, -1000, -1000, 9203, -95, -110, -1000,
	-1000, -26, -1000, -1000, -15, 9203, 9203, 9203, 109, -1000,
	107, 603, -1000, 9203, 840, 211, 208, 9203, -1000, -1000,
	23963, 21971, 106, 1122, -48, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 105, 104, 23932, -48, 103, 3589, -1000, 9775,
	9775, 9775, 5419, 206, 101, 23188, -48, 23903, 8056, 8056,
	8056, 100, 23607, 9203, -48, 3375, 3322, 2965, -27, -32,
	-33, 1444, -41, 99, 398, 392, 95, 1109, -1000, -1000,
	-1000, -1000, 513, 510, 1186, -1000, 948, -1000, 440, -1000,
	822, 9203, 17013, 204, 202, 808, -1000, 1185, 897, 1184,
	897, -1000, -11, 730, 9203, 9203, -1000, 506, -1000, -1000,
	502, -1000, 631, -1000, 322, 23992, -1000, 7198, 23992, -1000,
	711, 1280, -43, -1000, -1000, 7198, 411, 12801, 12264, 7770,
	-47, -1000, -1000, -1000, 727, -1000, 501, 1443, 94, 989,
	913, 749, 686, 1441, 23992, -18, -1000, -18, -1000, -1000,
	-1000, -1000, -1000, -1000, 17013, 1088, -1000, 14673, 197, 17013,
	194, -1000, 191, -1000, -1000, 190, 17013, 1031, 370, 1432,
	-1000, 407, -1000, 93, -1000, 1103, 1304, -1000, 12264, 924,
	1059, 1054, 12264, 953, 848, 848, 848, -1000, 361, 3964,
	15193, 851, 61, 92, 1319, 9203, 357, 357, 9203, 9775,
	9775, -1000, 357, -1000, -1000, -1000, -1000, 1120, 175, 9203,
	24740, 24464, 3498, -51, 6297, -23, 41, 22832, -1000, -1000,
	324, -1000, 89, 7484, -1000, 23547, -21, -21, -1000, 1464,
	1208, -1000, 9203, 23577, -1000, 13061, 414, 856, 22802, 24740,
	24740, -1000, 9203, -1000, -1000, 1119, 9203, -1000, 24740, 24740,
	9775, 9775, 9775, 9775, 9775, 9775, 9775, 9775, 9775, 9775,
	9775, 9775, 9775, 9775, 9775, 9775, 9775, 9775, 9775, 1044,
	9775, 1429, 1429, 1429, -28, 5991, -1000, 1126, 1119, 9203,
	9203, 24740, 87, 86, 80, -1000, 9203, -48, 9203, 9203,
	9203, -1000, -1000, -1000, 78, -1000, 1405, -1000, -1000, -1000,
	-1000, 1103, 17013, 17013, 17013, 1181, -1000, 1115, -1000, 22772,
	-62, 17013, 17013, -1000, 1039, 1073, 463, 17013, -1000, 17013,
	-1000, 17013, 17013, 17013, -67, -68, 17013, 17013, -1000, -1000,
	-40, 7198, 213, -8, -40, 698, -1000, -34, -1000, 384,
	-1000, 321, 135, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 77, -1000, -1000, 1094, -1000, 10347, 169, 17013, 14673,
	1342, 10347, 887, 1036, 370, 1461, -1000, 574, -1000, 409,
	9203, 9203, 1319, 604, 12264, 12264, 1010, 1050, 12264, -1000,
	-1000, -1000, -1000, 15193, -1000, 1060, -1000, -1000, 17013, 163,
	-1000, 361, 464, 357, 3070, 2559, 9203, 24740, 24344, -73,
	9203, 9203, -1000, -75, -1000, 9203, -1000, -1000, 1456, 9203,
	76, 75, 73, -1000, -1000, 23992, 9203, -1000, -1000, 21693,
	9203, 72, -1000, 67, 60, 23992, 1126, 23992, -1000, -1000,
	486, 486, 1429, 1429, 1429, 1429, 663, 663, 1371, 2202,
	969, 969, 969, 1796, 343, 343, 969, 969, 969, 1118,
	1006, 162, 24612, 9203, -77, -1000, -1000, -1000, 23992, 23992,
	56, -1000, -1000, -1000, -48, 2754, 22743, 22446, -1000, 54,
	409, -1000, -1000, -1000, 17013, -1000, 17013, -1000, 17013, 17013,
	1123, 939, -1000, -1000, 1041, 161, 9775, 17013, -1000, 801,
	-79, -83, 936, -1000, 935, 9203, -1000, 24740, 897, 897,
	-1000, 499, 498, -1000, -1000, -1000, -1000, -40, 1217, 17013,
	1273, -1000, -1000, 160, -1000, -1000, -1000, 832, -84, -1000,
	261, 1288, 9203, -1000, -1000, 159, 10347, -85, 53, -8,
	-102, 17013, -1000, 370, 1460, -1000, 1212, -1000, 17013, 23992,
	-48, 504, -1000, 1010, -1000, 157, 9203, 12264, -1000, -1000,
	-139, -1000, 358, -1000, 155, 17013, 15193, 9203, 9203, 24344,
	-103, -1000, 357, 357, -1000, 22416, -1000, 23547, -1000, -1000,
	-1000, 23992, 821, -1000, 22386, -1000, -1000, -1000, -1000, 9775,
	1117, 153, 24740, 22357, -1000, -1000, 9203, -1000, -1000, -1000,
	-1000, -1000, 1047, -1000, -1000, 17013, 947, -1000, -1000, 9203,
	24612, 152, 1088, 150, -1000, -1000, -1000, 741, -1000, -1000,
	23992, 1290, -1000, -1000, 17013, 17013, 571, -108, 17013, -1000,
	-1000, 5133, 17013, 801, 10347, 1295, 41, 17013, 1295, 22060,
	4827, -114, -1000, 1088, -1000, 801, 145, 1457, -1000, 1031,
	-42, -1000, 1341, 13605, -1000, 17013, 23992, -1000, 1060, -1000,
	4543, 17013, -116, -1000, 357, 357, -1000, -1000, 52, 856,
	1303, -1000, 2713, 9775, 24740, -118, -1000, 22030, -1000, -1000,
	1177, 22000, 992, 17013, -1000, 17013, 17013, 450, 17013, -1000,
	-1000, 665, -1000, 411, -1000, 143, 1088, -1000, -1000, -1000,
	-1000, 1288, -15, 801, -1000, 1088, 10347, -1000, 1036, 17013,
	142, -1000, 137, 41, -120, -1000, -1000, -122, -1000, -1000,
	716, 9203, 2713, -124, -1000, -1000, 1169, -1000, 862, 777,
	51, -126, 133, -1000, 9203, -1000, 12801, -1000, 17013, -1000,
	1295, 50, 1088, -1000, -128, -1000, -1000, -1000, 9203, -1000,
	-1000, 49, 8917, 8917, -48, -1000, 17013, -1000, 886, 876,
	640, -1000, -1000, -1000, -1000, -1000, 992, 23992, -101, -130,
	-1000, -1000, -1000, 801, -21, -1000, -1000, -1000, 10061, 907,
	690, 3678, -1000, -1000, -1000, 1233, -1000, 455, 960, 960,
	862, -1000, 875, 1088, 48, 1379, -1000, -1000, -1000, -1000,
	-1000, -1000, 1391, -1000, -1000, 1022, -1000, -1000, -1000, -1000,
	-1000, -1000, 1456, 8631, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1716, 1715, 1329, 133, 1712, 132, 1711, 1710, 1708,
	1705, 1704, 1701, 103, 131, 129, 135, 128, 1699, 94,
	1697, 1696, 1692, 102, 1689, 1688, 1686, 51, 1685, 1683,
	127, 125, 1679, 1678, 96, 38, 172, 2232, 164, 1677,
	1676, 1675, 14, 109, 68, 1669, 87, 1666, 1665, 47,
	37, 31, 25, 1664, 99, 113, 886, 34, 1662, 1661,
	147, 9, 21, 1447, 101, 154, 143, 136, 1660, 1654,
	1653, 52, 1644, 1, 1643, 1642, 17, 60, 12, 1641,
	28, 13, 1640, 1638, 137, 1636, 76, 107, 115, 33,
	120, 117, 1633, 69, 11, 81, 1630, 16, 86, 1629,
	44, 83, 145, 1628, 62, 155, 61, 35, 49, 108,
	1627, 1626, 1623, 79, 1622, 97, 65, 1621, 1620, 80,
	1619, 139, 142, 1618, 1610, 151, 1608, 1605, 1602, 157,
	1600, 1599, 159, 1598, 5, 46, 66, 30, 118, 110,
	119, 104, 1595, 18, 1588, 1740, 827, 631, 19, 54,
	59, 84, 50, 58, 26, 1577, 1576, 111, 1573, 1572,
	1570, 1569, 1566, 88, 1565, 74, 149, 36, 53, 55,
	95, 23, 106, 85, 146, 153, 112, 1564, 1562, 123,
	1561, 817, 1558, 1553, 1142, 126, 1550, 1548, 1544, 754,
	719, 703, 205, 1543, 1540, 553, 551, 1538, 1534, 124,
	1533, 1528, 150, 263, 27, 1527, 122, 1526, 98, 1525,
	0, 77, 75, 1524, 144, 82, 1523, 1519, 1516, 1513,
	32, 2, 7, 6, 10, 4, 24, 20, 1512, 1511,
	138, 92, 78, 1509, 156, 1508, 1505, 1504, 43, 1501,
	22, 1500, 15, 1499, 1491, 8, 3, 148, 1487, 105,
	1486, 1369, 1484, 152, 1481, 1479, 1362, 57, 90,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	44, 44, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 41, 41, 46,
	46, 46, 48, 48, 45, 45, 40, 40, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 13, 14, 14,
	14, 14, 14, 14, 14, 14, 90, 90, 89, 89,
	92, 92, 15, 15, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 180, 180, 179, 18, 155,
	155, 19, 19, 19, 19, 20, 114, 114, 21, 21,
	21, 21, 22, 26, 247, 247, 247, 251, 251, 252,
	252, 253, 253, 253, 253, 253, 253, 253, 249, 249,
	29, 29, 29, 29, 29, 133, 129, 129, 131, 131,
	131, 131, 55, 128, 128, 128, 128, 130, 130, 130,
	130, 203, 202, 202, 208, 208, 208, 68, 68, 68,
	68, 68, 69, 69, 69, 201, 201, 201, 201, 209,
	209, 209, 209, 209, 209, 70, 70, 70, 207, 207,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	17, 248, 248, 250, 250, 31, 31, 9, 9, 10,
	10, 71, 71, 72, 72, 136, 136, 136, 136, 73,
	73, 47, 47, 47, 135, 218, 218, 219, 219, 219,
	219, 219, 219, 220, 220, 220, 220, 220, 220, 220,
	216, 216, 217, 214, 214, 215, 215, 215, 215, 254,
	254, 134, 134, 76, 76, 223, 223, 223, 223, 221,
	221, 221, 221, 221, 224, 222, 225, 225, 225, 225,
	225, 166, 166, 166, 33, 11, 53, 53, 12, 8,
	8, 118, 118, 80, 80, 171, 171, 171, 62, 62,
	42, 42, 42, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 119, 119, 120, 120, 24, 28,
	32, 32, 32, 32, 32, 256, 256, 59, 59, 59,
	59, 60, 60, 132, 132, 132, 132, 132, 54, 7,
	7, 49, 49, 50, 50, 51, 51, 52, 52, 257,
	257, 23, 23, 23, 23, 23, 65, 65, 125, 125,
	125, 127, 127, 126, 126, 126, 104, 104, 34, 85,
	85, 94, 94, 95, 95, 177, 96, 96, 27, 27,
	37, 37, 35, 35, 35, 35, 35, 35, 36, 36,
	38, 38, 38, 38, 38, 38, 38, 231, 231, 231,
	234, 234, 230, 232, 232, 233, 233, 255, 255, 105,
	105, 105, 75, 74, 74, 78, 78, 77, 79, 79,
	170, 102, 102, 102, 102, 121, 122, 122, 123, 123,
	124, 124, 101, 101, 152, 152, 39, 39, 84, 84,
	86, 86, 143, 143, 144, 144, 142, 142, 142, 172,
	172, 172, 172, 169, 169, 173, 173, 173, 173, 173,
	173, 167, 167, 167, 167, 168, 168, 178, 178, 108,
	108, 108, 108, 106, 106, 107, 107, 174, 174, 174,
	174, 103, 103, 175, 175, 175, 137, 137, 181, 181,
	181, 83, 83, 83, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 183, 183, 183,
	183, 185, 185, 185, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 186, 186,
	193, 193, 194, 194, 195, 196, 187, 187, 188, 188,
	189, 190, 197, 197, 197, 197, 199, 199, 191, 191,
	191, 191, 191, 192, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 116, 116,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 226, 226, 226, 226, 226, 226, 226, 228, 228,
	229, 229, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 235,
	235, 236, 236, 238, 238, 239, 239, 240, 241, 241,
	241, 242, 243, 243, 237, 237, 244, 244, 244, 245,
	245, 246, 246, 246, 246, 246, 157, 157, 157, 158,
	158, 159, 91, 91, 154, 154, 153, 153, 153, 156,
	156, 109, 109, 198, 198, 198, 198, 198, 198, 198,
	110, 110, 110, 117, 111, 111, 112, 112, 112, 112,
	112, 112, 149, 150, 113, 113, 113, 151, 151, 160,
	164, 164, 163, 162, 162, 161, 161, 140, 140, 140,
	140, 141, 141, 139, 138, 97, 97, 98, 98, 258,
	258, 165, 165, 99, 99, 100, 93, 93, 176, 176,
	176, 176, 87, 87, 67, 67, 88, 88, 63, 63,
	66, 66, 64, 64, 64, 64, 81, 81, 82, 82,
	61, 61, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 200, 200, 200, 56, 56, 56, 57,
	57, 58, 58, 205, 205, 205, 206, 206, 206, 206,
	204, 204, 204, 204, 204, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 1, 3, 1, 2,
	2, 3, 2, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 5, 3,
	0, 1, 1, 1, 1, 3, 3, 0, 2, 3,
	2, 3, 6, 6, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 3, 6, 3, 1, 5, 2, 1, 1, 1,
	3, 3, 2, 3, 3, 3, 3, 1, 3, 3,
	2, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 2, 4, 2, 4, 4, 4, 4, 4,
	4, 4, 2, 3, 4, 3, 3, 4, 4, 2,
	2, 2, 0, 2, 0, 8, 8, 7, 10, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 3, 2, 0, 3, 1, 2,
	2, 3, 6, 2, 1, 1, 2, 4, 2, 5,
	7, 8, 5, 3, 1, 4, 6, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 5, 2, 0, 6, 11,
	14, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 6, 8,
	8, 10, 8, 10, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 1, 3, 3, 0, 3, 8,
	11, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 6, 8, 5, 7, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 0, 8, 2,
	0, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 2, 4, 4, 4, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 2, 2, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 3, 3, 0,
	1, 3, 3, 1, 1, 3, 2, 4, 0, 4,
	3, 1, 5, 2, 0, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	1, 2, 4, 1, 1, 1, 2, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 4, 1,
	1, 1, 5, 1, 3, 1, 3, 1, 1, 1,
	1, 6, 6, 4, 4, 4, 4, 4, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 4, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 3, 5, 4,
	3, 5, 1, 3, 1, 3, 3, 3, 2, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 0, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 1, 1, 3,
	5, 1, 0, 2, 2, 1, 2, 0, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 1, 1, 2, 2, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 3, 5,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -13, -14, -15,
	-17, -18, -20, -21, -22, -23, -25, -26, -28, -27,
	-29, -30, -31, -32, -24, -33, -34, 23, 64, -7,
	-8, -9, -10, -11, -12, -233, 92, 100, 122, 198,
	99, 85, 116, 212, 220, -35, -37, 228, -133, 229,
	34, 238, 58, 95, 214, 209, 260, 66, -231, -38,
	-36, 308, 283, 289, 223, -39, 246, 275, 311, 246,
	130, 78, 278, -63, -56, 4, -210, -212, 20, 21,
	23, 33, 34, 39, 43, 46, 57, 58, 59, 61,
	63, 64, 65, 68, 69, 76, 77, 78, 79, 81,
	85, 87, 91, 92, 94, 99, 100, 106, 107, 110,
	112, 117, 122, 123, 124, 131, 134, 129, 143, 145,
	146, 149, 148, 153, 156, 159, 161, 162, 163, 164,
	165, 167, 168, 170, 172, 169, 175, 177, 178, 184,
	187, 190, 191, 192, 193, 196, 198, 200, 201, 202,
	204, 205, 209, 207, 208, 210, 212, 214, 215, 217,
	219, 220, 221, 222, 225, 226, 228, 229, 231, 234,
	237, 238, 239, 242, 240, 236, 245, 247, 248, 249,
	256, 260, 261, 262, 263, 266, 267, 268, 270, 272,
	273, 274, 279, 284, 285, 286, 287, 28, 35, 36,
	37, 38, 40, 41, 44, 45, 49, 50, 51, 53,
	80, 82, 83, 98, 101, 102, 108, 118, 120, 125,
	126, 135, 136, 137, 138, 140, 151, 174, 176, 185,
	189, 195, 197, 203, 216, 224, 232, 233, 241, 243,
	251, 252, 253, 257, 258, 275, 276, 87, 134, 268,
	267, 78, 130, 246, 278, -16, 308, -27, -6, -14,
	-4, -23, -34, -13, -30, -17, -31, -15, 23, -204,
	4, -210, -212, -211, -213, 55, 67, 115, 133, 127,
	142, 144, 152, 154, 166, 186, 188, 213, 230, 22,
	24, 25, 26, 27, 29, 30, 31, 32, 42, 47,
	48, 52, 54, 56, 62, 66, 70, 71, 72, 73,
	74, 75, 84, 86, 88, 89, 90, 93, 95, 97,
	103, 104, 105, 111, 113, 114, 116, 119, 121, 128,
	130, 132, 139, 141, 147, 150, 155, 157, 158, 171,
	173, 179, 180, 181, 182, 183, 194, 199, 206, 211,
	223, 227, 235, 244, 246, 250, 254, 255, 259, 264,
	265, 269, 271, 277, 278, 280, 281, 282, 283, -56,
	-56, -56, 198, 22, -251, 22, -252, -253, 66, 92,
	116, 223, 134, 87, 267, -251, -60, 220, -56, -129,
	156, 226, 216, 256, -130, -128, -203, 251, 165, -89,
	-56, 4, 22, 78, 57, 79, 117, 130, 131, 62,
	63, 146, 247, 251, 256, 66, 270, -256, 256, 256,
	-256, -256, -59, 256, 254, -60, -255, 246, 246, 269,
	278, -118, 78, 265, -36, -38, -37, -77, -78, 264,
	139, 97, 183, -35, -37, -231, -234, 204, -230, -56,
	-234, -74, -75, 22, 89, 312, -174, -63, 181, -100,
	308, -3, -174, 125, -63, -66, 125, -63, -56, -174,
	125, 114, 308, -97, -140, -139, -138, 306, 310, 114,
	141, 141, -175, -174, -56, 125, -67, 125, -66, -90,
	125, -89, -90, 125, -180, -179, -206, 4, -210, -212,
	-211, 275, 246, 130, -155, 308, -114, 308, -56, 22,
	180, 312, 180, -56, -129, 51, -129, 308, -131, -54,
	-55, 143, 200, 254, 293, 114, 287, -70, 5, 84,
	-92, 310, 114, -248, 180, 114, 114, 114, 114, 114,
	114, 287, 143, 200, 219, 246, 278, -132, -54, -55,
	-132, 254, -60, -103, -174, -89, 125, -56, -89, 130,
	-56, 125, -77, -78, -102, -121, -122, 155, 179, -105,
	22, 89, -105, -105, 43, 309, 309, 312, -234, -82,
	308, -93, -176, -145, 301, -147, 299, 300, 305, 171,
	288, -157, -63, -148, 9, 308, -160, -228, -37, 98,
	29, -158, -159, 216, -56, 7, 8, 5, 6, -61,
	-183, -192, 259, 103, 173, 47, -226, -227, 4, -210,
	-205, -184, -194, -188, -191, 140, 55, 71, 74, 72,
	75, 227, 269, 48, 28, 101, 102, 189, 195, 243,
	257, 258, 125, 174, 126, 53, 118, 151, 91, 36,
	38, 40, 41, 49, 50, 80, 82, 83, 108, 135,
	136, 137, 138, 176, 203, 232, 241, 252, 253, 276,
	-211, -195, -196, -189, -190, -197, -93, -100, 301, -63,
	308, -99, -165, -145, 84, -44, 207, -43, 21, 23,
	92, 273, 98, 236, 236, 207, 98, 313, 207, 207,
	98, 239, 309, -87, -63, -140, -145, -141, -204, 301,
	-175, -65, -63, -65, 228, -56, 30, 98, -46, 312,
	46, 210, 98, -46, 312, 98, -46, 98, 309, 312,
	-174, 125, -66, 30, -154, -181, -182, -184, -193, -187,
	-191, -192, 39, 45, 44, 249, 224, 233, 37, 135,
	136, 137, 138, 232, 36, 203, 108, 91, 83, 82,
	176, 41, 40, -195, -196, -189, -190, 80, 252, 253,
	140, 38, 50, 49, 276, 241, -91, -145, -247, -88,
	246, 78, -64, -56, 301, -253, -247, 30, -91, 312,
	312, 153, -69, 159, 170, 123, -202, 84, -208, -201,
	-166, 9, 259, 103, 180, -207, 8, 300, -200, -206,
	5, 7, 299, -202, 84, 69, -209, 5, 4, -192,
	-166, 84, 156, 310, -204, -203, -250, 111, -247, -203,
	-203, -203, -203, -203, -56, 153, -203, -203, 312, 312,
	-60, -46, 312, 308, -76, 171, -232, 283, -76, 308,
	-57, 125, -56, -232, 171, -102, -122, -121, -123, -145,
	22, -145, -147, -36, -36, -36, -79, -170, -145, -230,
	30, -81, -56, -84, 312, 114, 10, 11, 54, 33,
	299, 300, 301, 302, 109, 303, 296, 297, 298, 295,
	291, 292, 293, 60, 160, 218, 13, 14, 15, 26,
	182, 154, 288, 127, 230, 305, 16, 17, 18, 142,
	35, 128, 30, 4, -145, -145, -145, -145, -145, 188,
	-98, -37, -145, -91, -97, -37, -153, 306, 308, -97,
	308, 5, 5, 308, -161, -145, -235, 284, 111, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 197, -199, 279, -199,
	-199, -185, 308, -185, -186, 308, -185, 285, 289, 308,
	-84, -63, 312, 309, 312, 254, -119, 62, 56, -135,
	125, 56, -214, -56, 62, -215, 52, 265, 199, 113,
	-119, 62, -119, 62, 62, -174, 33, 33, 254, -66,
	-56, 254, 254, -174, 114, 309, 312, 307, 316, -137,
	281, -125, -27, 308, 84, 30, -125, -94, -95, -177,
	-96, -63, 308, -56, -56, -66, -67, -89, -90, -90,
	-16, -179, 98, -19, -27, -23, -34, -13, 309, 312,
	-83, 29, -115, 308, 286, 163, 81, 124, 162, -116,
	222, 309, 312, 254, 312, -88, -81, -139, -138, 114,
	256, 309, -55, -54, -68, 202, 234, 208, 225, 312,
	8, 7, 7, 5, -204, -249, -56, -55, -54, -174,
	-71, -81, -72, -56, -136, -135, -216, -217, -214, 130,
	265, 104, 30, 98, -53, 193, 30, 180, 171, -49,
	248, 98, -124, 216, 217, 312, -42, 31, 88, 308,
	312, 309, -137, -176, -86, -172, -174, -37, -173, 308,
	-181, -181, -89, 251, -145, -145, -145, -145, -145, -145,
	-145, -145, -145, -145, -145, -145, -145, -145, -145, -145,
	-145, -145, -145, -145, -145, -145, 154, 127, 230, 35,
	128, -145, 254, -145, -145, -145, -145, 173, 171, 259,
	103, 266, 89, 177, -258, 244, 32, -151, -37, 308,
	-204, -157, 216, 308, -140, 309, 312, -91, -156, 307,
	-153, -91, 309, 309, -91, 277, 22, 89, 301, -115,
	7, -164, -163, 280, -236, 106, 119, 308, 309, 309,
	-145, -145, -109, -198, -91, 4, 286, 163, 81, 124,
	162, 222, -109, -110, -145, -91, -111, -146, -147, 299,
	300, 305, 308, 216, -112, -145, -91, -145, 42, 150,
	255, -113, -145, 114, -91, -145, -145, -145, -91, -91,
	-91, 308, 7, 7, 251, 251, 7, -137, 309, -165,
	-43, -63, -56, -56, 171, -135, 125, -48, 171, -181,
	-56, 308, 308, 145, 145, -56, -56, 125, -56, 125,
	-56, -56, -44, 207, 308, 308, -56, 207, -56, -63,
	207, 239, 114, -63, -141, -145, -104, 211, -145, -104,
	-127, 180, -87, 275, -56, 211, -85, 312, 114, 293,
	-87, -46, -46, -46, -174, -181, 306, 306, 7, 254,
	254, 254, 254, 308, -145, -249, -64, -249, -54, 263,
	59, 202, -208, -115, 312, 309, 309, 312, -57, 130,
	-57, -27, -89, 5, -27, -63, 98, -50, 94, -257,
	293, -56, -170, -19, -56, -101, 119, -178, 312, 290,
	67, -108, 144, 166, 115, 152, 213, 133, -142, 313,
	-169, 289, -37, -173, -172, 287, -145, -145, 254, -258,
	244, -151, -145, 173, 259, 103, 266, 89, 177, 114,
	308, -146, -146, -91, 308, -91, -98, -145, 307, 307,
	312, 309, -78, 312, -77, -145, -91, -91, 309, 309,
	-162, -163, 93, -145, -241, 187, 308, 308, -145, 30,
	312, 309, 114, 309, 309, -117, 194, 309, 10, 11,
	299, 300, 301, 302, 109, 303, 296, 297, 298, 295,
	291, 292, 293, 60, 160, 218, 13, 14, 15, 142,
	128, -146, -146, -146, -91, 308, 309, -149, -150, 114,
	111, 30, -113, -113, -113, 309, 114, -91, 312, 312,
	312, 309, 309, 309, 7, 309, 312, 309, 287, 287,
	309, -101, 254, 254, 98, 171, 272, -218, -215, -145,
	-81, 308, 308, -41, 92, 228, -120, 98, -46, 98,
	-46, 254, -119, 62, -91, -91, 254, 254, 239, 307,
	-93, 211, 61, 309, -93, -137, -95, -86, -165, 309,
	307, 7, 7, 309, 163, 124, 162, -116, 162, -116,
	-116, 7, -56, -73, 129, -136, 308, -57, 308, 308,
	-76, 308, -56, -51, 149, -257, 4, -232, 309, -152,
	121, 43, -172, 177, 144, 144, -172, -108, 144, -106,
	186, -106, -106, -169, -204, 314, -168, -167, 30, -56,
	184, 309, -145, -145, -146, -146, 114, 308, -145, -154,
	26, 26, 309, -91, 309, 312, 309, -153, 309, 277,
	-78, -78, -78, 5, 95, -145, 250, -242, -56, 308,
	281, -77, 309, -181, -181, -145, -149, -145, -181, -181,
	-146, -146, -146, -146, -146, -146, -146, -146, -146, -146,
	-146, -146, -146, -146, -146, -146, -146, -146, -146, 89,
	171, 177, -146, 312, -91, 309, -150, -149, -145, -145,
	-181, 309, 309, 309, -91, -145, -145, -145, 309, 7,
	-152, -56, -56, -135, 98, -219, 62, -220, 54, 104,
	66, 171, 173, 265, 199, 52, 84, 206, 309, 309,
	-81, -81, 171, 84, 171, 84, 77, 261, -56, -56,
	-63, -56, -56, 309, 309, -56, -63, -93, -126, 308,
	180, -27, -104, 293, 307, 307, 309, 128, -80, -171,
	-56, -229, 308, -226, -227, -61, 308, -81, -71, 30,
	-80, 180, -52, 148, -257, 5, -49, -238, 282, -145,
	-91, 245, -172, -172, -107, 271, 180, 144, -172, -168,
	-144, -143, 112, 169, -56, 308, -169, 26, 26, -145,
	-154, 309, -145, -145, 309, -145, 5, -145, 309, 309,
	309, -145, -243, -56, -145, 309, 309, 309, -150, 114,
	89, 177, 308, -145, 309, 309, 312, 309, 309, 309,
	-238, -135, -56, -89, -56, 104, 125, 173, 145, 308,
	-146, -63, -134, -254, 65, 242, 309, 309, 173, 173,
	-145, -181, -46, -46, 254, 254, 90, -81, 62, -100,
	-37, 308, 190, 309, 312, -62, -97, 54, -62, -145,
	308, -80, 309, 309, -27, 309, -63, -257, 5, -50,
	-239, -240, -56, 251, -107, 308, -145, -172, 312, 315,
	293, 308, -81, -167, -145, -145, 309, 309, -78, -237,
	192, 309, -146, 114, 308, -154, 309, -145, -220, -57,
	171, -145, -58, 308, -73, 308, 206, -45, 54, -56,
	-56, 267, 172, 309, -56, -56, -134, -171, -42, -89,
	-42, 309, -91, 309, -73, -134, 308, 5, -51, 312,
	30, -148, -61, -56, -81, -143, -204, -81, 309, 309,
	-78, 43, -146, -154, 309, 309, 98, 309, -223, 161,
	-56, -81, -63, -40, 271, -89, 228, -137, 308, -73,
	-62, -78, -134, -73, -80, -52, -240, -242, 308, 309,
	309, -244, 201, 217, -91, 309, 104, -221, -224, -222,
	180, 115, 191, 231, 309, 309, -76, -145, -94, -81,
	-42, 309, -73, 309, -91, 309, -245, -246, 35, 262,
	69, -145, -245, -56, -222, 180, -224, 180, 267, 87,
	-223, -137, 309, -134, -78, -246, 196, 110, 216, 196,
	110, -225, 168, 210, 46, 228, -225, -221, -47, 46,
	210, -73, 309, 26, 20, 173, 84, -246,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 0, 0, 61,
	62, 63, 64, 65, 66, 0, 0, 396, 0, 0,
	0, 0, 0, 0, 0, 368, -2, 0, 134, 0,
	316, 0, 316, 316, 320, 0, 398, 282, 395, -2,
	406, 0, 0, 0, 404, 382, 0, 0, -2, 0,
	0, 0, 0, 0, 808, 836, 837, 838, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 84, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 0, 200,
	850, 851, 852, 853, 854, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
	1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
	1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108,
	1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 100,
	107, 108, 923, 110, 0, 117, 118, 119, 121, 122,
	123, 124, 125, 126, 127, 0, 309, 938, 322, 130,
	901, 942, 1011, 957, 137, 147, 0, 1017, -2, 151,
	78, 180, 181, 182, 0, 184, 202, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 199, 327, 315, 327,
	312, 313, 314, 317, 0, 308, 0, 397, 0, 0,
	0, 0, 0, 281, -2, 378, 379, -2, 0, 401,
	401, 401, 0, 0, 379, 0, 387, 927, 390, 819,
	388, 0, 0, 403, 402, 0, 383, 467, 0, 426,
	0, 2, 0, 996, 467, 0, 996, 811, 0, 0,
	996, 0, 0, 809, 785, 777, 778, 782, 0, 0,
	0, 0, 0, 473, 68, 996, 51, 996, 804, 51,
	996, 76, 51, 996, 0, 95, 97, 846, 847, 848,
	849, 1022, 0, 0, 0, 0, 105, 0, 109, 111,
	0, 0, 0, 321, 131, 985, 133, 0, 136, 138,
	139, 0, 0, 0, 0, 0, 0, 150, 175, 176,
	79, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 195, 196, 0, 0, 310, 323, 324,
	311, 0, 319, 51, 471, 254, 996, 394, 254, 840,
	394, 996, -2, 0, 374, 413, 414, 0, 0, 0,
	399, 400, 0, 0, 0, 370, 371, 0, 389, 0,
	0, 429, 796, 800, 801, 560, 0, 0, 0, 0,
	0, 0, 649, 650, 787, 0, 653, 654, 655, 990,
	0, 659, 660, 1011, 808, 822, 823, 824, 825, 0,
	0, 0, 830, 831, 832, 776, 700, 669, -2, -2,
	820, 497, 498, 499, 500, -2, 1024, 673, 675, 677,
	678, 679, 680, 0, 974, 991, 992, 1007, 1008, 1016,
	1020, 1021, 996, 1004, 997, 986, 994, 1003, 879, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	845, 522, 523, 528, 529, 531, 429, 427, 468, 469,
	0, 0, 793, 791, 792, 28, 305, 30, 0, 305,
	305, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 802, 786, 781, 0, 783, 784,
	477, 0, 346, 0, 0, 474, 0, 0, 70, 0,
	49, 50, 0, 72, 0, 0, 74, 0, 396, 0,
	0, 996, 0, 396, 0, 734, 483, 484, 485, 486,
	487, 557, 490, 491, 492, 493, 494, 495, 496, 504,
	505, 506, 507, 508, 509, 510, 519, 0, 503, 503,
	503, 516, 517, 520, 521, 526, 527, 538, 539, 541,
	543, 537, 537, 537, 534, 535, 0, 732, 0, 114,
	0, 874, 806, 812, 813, 120, 0, 0, 0, 0,
	0, 0, 142, 162, 163, 164, 143, 145, 152, 154,
	155, 156, 165, 166, 167, 168, 271, 0, 273, 178,
	179, 833, 0, 144, 146, 148, 149, 169, 170, 0,
	172, 173, 174, 0, 80, 183, 185, 0, 201, 186,
	187, 188, 189, 190, 191, 194, 197, 198, 0, 0,
	318, 274, 0, 212, 0, 0, 277, 393, 0, 0,
	0, 996, 839, 332, 0, 377, 411, 412, 415, 418,
	419, 416, 560, 384, 385, 386, 407, 408, 292, 391,
	0, 0, 816, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	790, 0, 0, 799, 565, 566, 567, 589, 590, 0,
	651, -2, 732, 0, 656, 657, 658, 0, 0, -2,
	0, 827, 557, 0, 0, 775, 702, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 755, 761, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 525, 536, 533,
	532, 514, 0, 513, 511, 0, 515, 0, 0, 0,
	477, 0, 0, 795, 0, 0, 0, 0, 304, 32,
	996, 0, 53, 0, 0, 244, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	810, 0, 0, 0, 0, 0, 0, 779, 782, 357,
	0, 357, 348, 0, 0, 0, 344, 360, 361, 363,
	364, 0, 0, 475, 69, 805, 51, 77, 51, 51,
	83, 96, 0, 98, 101, 102, 103, 104, 99, 0,
	478, 480, 488, 0, 544, 545, 546, 547, 548, 549,
	558, 106, 0, 0, 0, 115, 116, 814, 815, 0,
	0, 135, 140, 141, 328, 0, 159, 0, 161, 0,
	272, 835, 834, 557, 81, 203, 128, 325, 326, 472,
	0, 0, 211, 816, 213, 215, 216, 217, 218, 840,
	0, 840, 0, 0, 275, 0, 0, 0, 0, 334,
	340, 0, 417, 420, 421, 0, 410, 290, 291, 396,
	0, 818, 423, 797, 458, 430, 438, 444, 441, 0,
	561, 562, 563, 0, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, -2, -2, -2, 581, 582, 583,
	-2, -2, -2, 587, 588, -2, 0, 0, 0, 790,
	0, -2, 0, 597, -2, -2, -2, 601, 0, 604,
	606, 608, 0, 0, 0, 0, 789, 618, 767, 0,
	798, 603, 0, 0, 788, 787, 0, 0, 0, 738,
	739, 0, -2, 661, 406, 0, 0, 0, 0, 828,
	0, 774, 770, 0, 710, 0, 0, 0, 674, 676,
	0, 0, 0, 0, 742, -2, -2, -2, -2, -2,
	-2, -2, 0, 0, 732, 752, 0, 0, 620, 0,
	0, 0, 0, 1011, 0, 732, 760, 0, 0, 0,
	0, 0, 732, 0, 766, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 423, 470, 794,
	31, 294, 0, 0, 0, 34, 996, 42, 0, 226,
	0, 0, 0, 0, 0, 307, 43, 996, 51, 996,
	51, 44, 29, 305, 0, 0, 298, 0, 293, 296,
	0, 59, 0, 803, 0, 781, 67, 0, 476, 341,
	342, 0, 0, 350, 347, 0, 477, 0, 0, 0,
	0, 71, 73, 75, 0, 735, 0, 0, 0, 0,
	0, 0, 0, 0, 733, 112, 807, 113, 132, 157,
	158, 160, 153, 171, 0, 220, 253, 0, 0, 840,
	0, 209, 254, 276, 278, 0, 0, 336, 340, 0,
	339, 394, 409, 0, 817, 425, 0, 428, 0, 0,
	0, 0, 0, 0, 464, 464, 464, 462, 444, 0,
	456, 0, -2, 441, 0, 0, -2, -2, 0, 0,
	0, 619, -2, 602, 605, 607, 609, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 652, 733, 736, 737,
	0, -2, 0, 0, 405, 406, 406, 406, 667, 0,
	0, 771, 0, 0, 668, 0, 0, 0, 0, 0,
	0, 683, 0, 684, 685, 0, 0, 686, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 623, 624, 625, 0, 0, 687, 758, 759, 0,
	0, 0, 0, 0, 0, 692, 0, 765, 0, 0,
	0, 696, 697, 698, 0, 501, 0, 518, 540, 542,
	530, 425, 0, 0, 0, 0, 52, 224, 243, 0,
	0, 0, 0, 36, 0, 0, 0, 0, 40, 0,
	46, 0, 0, 0, 0, 0, 0, 0, 60, 780,
	356, 0, 355, 0, 345, 357, 362, 359, 365, 0,
	481, 0, 0, 489, 550, 551, 552, 553, 554, 555,
	556, 0, 129, 207, 0, 214, 0, 0, 0, 212,
	0, 0, 0, 338, 340, 0, 331, 332, 392, 704,
	0, 0, 431, 0, 0, 0, 0, 0, 0, 459,
	463, 460, 461, 456, 436, 0, 440, 455, 0, 454,
	443, -2, 564, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 768, 0, 727, 0, -2, 740, 662, 0,
	0, 0, 0, 829, 769, 773, 0, 708, 709, 713,
	0, 0, 672, 0, 0, 741, 751, 753, 621, 622,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	-2, -2, -2, 639, 640, 641, -2, -2, -2, 0,
	0, 0, 754, 0, 0, 730, 756, 757, 762, 763,
	0, 689, 690, 691, 764, 0, 0, 0, 524, 0,
	704, 300, 302, 33, 0, 225, 0, 228, 0, 0,
	0, 0, 234, 235, 0, 0, 0, 0, 245, 252,
	0, 0, 0, 48, 0, 0, 306, 0, 51, 51,
	295, 0, 0, 205, 206, 299, 297, 343, 0, 0,
	0, 349, 358, 0, 482, 479, 559, 0, 0, 283,
	289, 289, 0, 670, 671, 0, 0, 0, 0, 0,
	0, 0, 329, 340, 0, 333, 334, 380, 0, 424,
	422, 0, 446, 0, 448, 0, 0, 0, 450, 439,
	0, 434, 0, 433, 452, 0, 0, 0, 0, -2,
	0, 612, -2, -2, 726, 733, 826, 406, 663, 665,
	666, 772, 715, 712, 0, 699, 681, 682, 750, 0,
	0, 0, 0, 733, 729, 688, 0, 694, 695, 502,
	381, 35, 0, 229, 230, 840, 0, 233, 236, 0,
	238, 842, 220, 0, 249, 250, 247, 0, 37, 38,
	47, 55, 39, 45, 0, 0, 0, 0, 0, 366,
	367, 0, 0, 252, 0, 292, 821, 0, 292, 0,
	0, 0, 242, 220, 210, 252, 0, 0, 335, 336,
	703, 705, 0, 0, 447, 0, 466, 449, 0, 437,
	0, 0, 0, 442, -2, -2, 613, 728, 0, 406,
	0, 701, -2, 0, 0, 0, 731, 0, 227, 231,
	0, 0, 258, 0, 246, 0, 0, 57, 0, 301,
	303, 0, 352, 477, 354, 0, 220, 284, 285, 288,
	286, 289, 406, 252, 208, 220, 0, 337, 338, 0,
	0, 457, 0, 0, 0, 435, 432, 0, 453, 664,
	718, 0, -2, 0, 647, 693, 0, 237, 263, 0,
	0, 0, 254, 41, 0, 54, 0, 353, 0, 240,
	292, 0, 220, 279, 0, 330, 706, 707, 0, 465,
	451, 0, 0, 0, 714, 648, 0, 239, 259, 260,
	0, 255, 256, 257, 841, 251, 258, 56, 477, 0,
	287, 662, 241, 252, 406, 711, 716, 719, -2, 960,
	871, 0, 717, 232, 261, 0, 262, 0, 0, 0,
	263, 351, 223, 220, 0, 0, 721, 722, 723, 724,
	725, 264, 0, 267, 268, 0, 265, 248, 219, 221,
	222, 280, 0, 0, 266, 269, 270, 720,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 297, 3, 303, 298, 3,
	308, 309, 301, 299, 312, 300, 310, 302, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 316, 311,
	291, 293, 292, 3, 313, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 306, 3, 307, 296, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 314, 295, 315, 305,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 294, 57634, 304,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:719
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:725
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:731
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:756
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:767
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:773
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:777
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:783
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:787
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:799
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:804
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:809
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:814
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:819
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:823
		{
			return unimplemented(sqllex)
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:826
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:836
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:846
		{
			return unimplemented(sqllex)
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:849
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:856
		{
			return unimplemented(sqllex)
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:859
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:875
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:885
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = nil
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:895
		{
			sqlVAL.union.val = DropCascade
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:899
		{
			sqlVAL.union.val = DropRestrict
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = DropDefault
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:909
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:918
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:919
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:922
		{
			return unimplemented(sqllex)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:923
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:931
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:935
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:958
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:982
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:990
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:994
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1053
		{ /* SKIP DOC */
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1205
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			return unimplemented(sqllex)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1249
		{ /* SKIP DOC */
		}
	case 135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1312
		{
			return unimplemented(sqllex)
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1318
		{
			return unimplemented(sqllex)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = Low
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = Normal
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = High
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1410
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1429
		{
			return unimplemented(sqllex)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1430
		{
			return unimplemented(sqllex)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1431
		{
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION STATUS"}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1533
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 205:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1629
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1633
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = DropDefault
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1643
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			return unimplemented(sqllex)
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1845
		{
			return unimplemented(sqllex)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1846
		{
			return unimplemented(sqllex)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1847
		{
			return unimplemented(sqllex)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1848
		{
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1855
		{
			return unimplemented(sqllex)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1856
		{
			return unimplemented(sqllex)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1857
		{
			return unimplemented(sqllex)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1858
		{
			return unimplemented(sqllex)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1859
		{
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1862
		{
			return unimplemented(sqllex)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1865
		{
			return unimplemented(sqllex)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1868
		{
			return unimplemented(sqllex)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1869
		{
			return unimplemented(sqllex)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1870
		{
			return unimplemented(sqllex)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1871
		{
			return unimplemented(sqllex)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1872
		{
			return unimplemented(sqllex)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strVal()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[2].str}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.union.val = true
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = false
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1978
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1979
		{
			return unimplemented(sqllex)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1982
		{
			return unimplemented(sqllex)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1983
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = Ascending
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = Descending
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2037
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2038
		{
			return unimplemented(sqllex)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = true
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = false
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2051
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2052
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2085
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2094
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2095
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.str = ""
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.str = ""
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].union.strVal(),
				Encoding: sqlDollar[6].union.strVal(),
				Collate:  sqlDollar[7].union.strVal(),
				CType:    sqlDollar[8].union.strVal(),
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].union.strVal(),
				Encoding:    sqlDollar[9].union.strVal(),
				Collate:     sqlDollar[10].union.strVal(),
				CType:       sqlDollar[11].union.strVal(),
			}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2235
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2237
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2242
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2284
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2288
		{
			return unimplemented(sqllex)
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2313
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2314
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2402
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2541
		{
			return unimplemented(sqllex)
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2542
		{
			return unimplemented(sqllex)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2543
		{
			return unimplemented(sqllex)
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2546
		{
			return unimplemented(sqllex)
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2547
		{
			return unimplemented(sqllex)
		}
	case 392:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2550
		{
			return unimplemented(sqllex)
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2553
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2554
		{
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2557
		{
			return unimplemented(sqllex)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2558
		{
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2561
		{
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2562
		{
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = true
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = false
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = false
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = true
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2585
		{
		}
	case 404:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2586
		{
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2624
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2644
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2685
		{
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2686
		{
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2736
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = &From{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2758
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2768
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2784
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.union.val = true
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = false
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.str = astFullJoin
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.str = astLeftJoin
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.str = astRightJoin
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.str = astInnerJoin
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2940
		{
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2941
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3005
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3031
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3032
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3035
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3036
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3037
		{
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3045
		{
			return unimplemented(sqllex)
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3092
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3101
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = nil
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3150
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3222
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3254
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3293
		{
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3294
		{
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3325
		{
			return unimplemented(sqllex)
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3326
		{
			return unimplemented(sqllex)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3327
		{
			return unimplemented(sqllex)
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3328
		{
			return unimplemented(sqllex)
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3329
		{
			return unimplemented(sqllex)
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3330
		{
			return unimplemented(sqllex)
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3331
		{
			return unimplemented(sqllex)
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3332
		{
			return unimplemented(sqllex)
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3333
		{
			return unimplemented(sqllex)
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3334
		{
			return unimplemented(sqllex)
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3335
		{
			return unimplemented(sqllex)
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			return unimplemented(sqllex)
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3337
		{
			return unimplemented(sqllex)
		}
	case 557:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3338
		{
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3341
		{
			return unimplemented(sqllex)
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3342
		{
			return unimplemented(sqllex)
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3370
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3377
		{
			return unimplemented(sqllex)
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3537
		{
			return unimplemented(sqllex)
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3632
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3636
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3741
		{
			placeholder := NewPlaceholder(sqlDollar[1].str)
			if indirection := sqlDollar[2].union.unresolvedName(); indirection != nil {
				sqlVAL.union.val = &IndirectionExpr{
					Expr:        placeholder,
					Indirection: indirection,
				}
			} else {
				sqlVAL.union.val = placeholder
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3753
		{
			paren := &ParenExpr{Expr: sqlDollar[2].union.expr()}
			if indirection := sqlDollar[4].union.unresolvedName(); indirection != nil {
				sqlVAL.union.val = &IndirectionExpr{
					Expr:        paren,
					Indirection: indirection,
				}
			} else {
				sqlVAL.union.val = paren
			}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        &Subquery{Select: sqlDollar[1].union.selectStmt()},
				Indirection: sqlDollar[2].union.unresolvedName(),
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3807
		{
			return unimplemented(sqllex)
		}
	case 664:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3808
		{
			return unimplemented(sqllex)
		}
	case 665:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3831
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3846
		{
			return unimplemented(sqllex)
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3847
		{
			return unimplemented(sqllex)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3851
		{
			return unimplemented(sqllex)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3868
		{
			return unimplemented(sqllex)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3869
		{
			return unimplemented(sqllex)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3870
		{
			return unimplemented(sqllex)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3871
		{
			return unimplemented(sqllex)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: castExplicit}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3900
		{
			return unimplemented(sqllex)
		}
	case 689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3930
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3944
		{
			return unimplemented(sqllex)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3945
		{
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3948
		{
			return unimplemented(sqllex)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3949
		{
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = Window(nil)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3974
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.str = ""
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4036
		{
			return unimplemented(sqllex)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4037
		{
			return unimplemented(sqllex)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4038
		{
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4041
		{
			return unimplemented(sqllex)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4042
		{
			return unimplemented(sqllex)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4048
		{
			return unimplemented(sqllex)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4049
		{
			return unimplemented(sqllex)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4050
		{
			return unimplemented(sqllex)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4051
		{
			return unimplemented(sqllex)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4052
		{
			return unimplemented(sqllex)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4357
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.union.val = UnresolvedName(nil)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4400
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4405
		{
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4406
		{
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4520
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4553
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4566
		{
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4580
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4599
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4602
		{
			return unimplemented(sqllex)
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4604
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4616
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4620
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = DNull
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.str = ""
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
