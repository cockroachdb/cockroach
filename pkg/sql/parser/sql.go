// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:465
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_SCHEMA = 57417
const CURRENT_ROLE = 57418
const CURRENT_TIME = 57419
const CURRENT_TIMESTAMP = 57420
const CURRENT_USER = 57421
const CYCLE = 57422
const DATA = 57423
const DATABASE = 57424
const DATABASES = 57425
const DATE = 57426
const DAY = 57427
const DEC = 57428
const DECIMAL = 57429
const DEFAULT = 57430
const DEALLOCATE = 57431
const DEFERRABLE = 57432
const DELETE = 57433
const DESC = 57434
const DISCARD = 57435
const DISTINCT = 57436
const DO = 57437
const DOUBLE = 57438
const DROP = 57439
const ELSE = 57440
const ENCODING = 57441
const END = 57442
const ESCAPE = 57443
const EXCEPT = 57444
const EXISTS = 57445
const EXECUTE = 57446
const EXPERIMENTAL_FINGERPRINTS = 57447
const EXPLAIN = 57448
const EXTRACT = 57449
const EXTRACT_DURATION = 57450
const FALSE = 57451
const FAMILY = 57452
const FETCH = 57453
const FILTER = 57454
const FIRST = 57455
const FLOAT = 57456
const FLOAT4 = 57457
const FLOAT8 = 57458
const FLOORDIV = 57459
const FOLLOWING = 57460
const FOR = 57461
const FORCE_INDEX = 57462
const FOREIGN = 57463
const FROM = 57464
const FULL = 57465
const GRANT = 57466
const GRANTS = 57467
const GREATEST = 57468
const GROUP = 57469
const GROUPING = 57470
const HAVING = 57471
const HELP = 57472
const HIGH = 57473
const HOUR = 57474
const INCREMENTAL = 57475
const IF = 57476
const IFNULL = 57477
const ILIKE = 57478
const IN = 57479
const INTERLEAVE = 57480
const INDEX = 57481
const INDEXES = 57482
const INITIALLY = 57483
const INNER = 57484
const INSERT = 57485
const INT = 57486
const INT2VECTOR = 57487
const INT2 = 57488
const INT4 = 57489
const INT8 = 57490
const INT64 = 57491
const INTEGER = 57492
const INTERSECT = 57493
const INTERVAL = 57494
const INTO = 57495
const IS = 57496
const ISOLATION = 57497
const JOB = 57498
const JOBS = 57499
const JOIN = 57500
const KEY = 57501
const KEYS = 57502
const KV = 57503
const LATERAL = 57504
const LC_CTYPE = 57505
const LC_COLLATE = 57506
const LEADING = 57507
const LEAST = 57508
const LEFT = 57509
const LEVEL = 57510
const LIKE = 57511
const LIMIT = 57512
const LOCAL = 57513
const LOCALTIME = 57514
const LOCALTIMESTAMP = 57515
const LOW = 57516
const LSHIFT = 57517
const MATCH = 57518
const MINUTE = 57519
const MONTH = 57520
const NAN = 57521
const NAME = 57522
const NAMES = 57523
const NATURAL = 57524
const NEXT = 57525
const NO = 57526
const NO_INDEX_JOIN = 57527
const NORMAL = 57528
const NOT = 57529
const NOTHING = 57530
const NULL = 57531
const NULLIF = 57532
const NULLS = 57533
const NUMERIC = 57534
const OF = 57535
const OFF = 57536
const OFFSET = 57537
const OID = 57538
const ON = 57539
const ONLY = 57540
const OPTIONS = 57541
const OR = 57542
const ORDER = 57543
const ORDINALITY = 57544
const OUT = 57545
const OUTER = 57546
const OVER = 57547
const OVERLAPS = 57548
const OVERLAY = 57549
const PARENT = 57550
const PARTIAL = 57551
const PARTITION = 57552
const PASSWORD = 57553
const PAUSE = 57554
const PLACING = 57555
const PLANS = 57556
const POSITION = 57557
const PRECEDING = 57558
const PRECISION = 57559
const PREPARE = 57560
const PRIMARY = 57561
const PRIORITY = 57562
const QUERIES = 57563
const QUERY = 57564
const RANGE = 57565
const READ = 57566
const REAL = 57567
const RECURSIVE = 57568
const REF = 57569
const REFERENCES = 57570
const REGCLASS = 57571
const REGPROC = 57572
const REGPROCEDURE = 57573
const REGNAMESPACE = 57574
const REGTYPE = 57575
const RENAME = 57576
const REPEATABLE = 57577
const RELEASE = 57578
const RESET = 57579
const RESTORE = 57580
const RESTRICT = 57581
const RESUME = 57582
const RETURNING = 57583
const REVOKE = 57584
const RIGHT = 57585
const ROLLBACK = 57586
const ROLLUP = 57587
const ROW = 57588
const ROWS = 57589
const RSHIFT = 57590
const SAVEPOINT = 57591
const SCATTER = 57592
const SEARCH = 57593
const SECOND = 57594
const SELECT = 57595
const SEQUENCES = 57596
const SERIAL = 57597
const SERIALIZABLE = 57598
const SESSION = 57599
const SESSIONS = 57600
const SESSION_USER = 57601
const SET = 57602
const SETTING = 57603
const SETTINGS = 57604
const SHOW = 57605
const SIMILAR = 57606
const SIMPLE = 57607
const SMALLINT = 57608
const SMALLSERIAL = 57609
const SNAPSHOT = 57610
const SOME = 57611
const SPLIT = 57612
const SQL = 57613
const START = 57614
const STATUS = 57615
const STDIN = 57616
const STRICT = 57617
const STRING = 57618
const STORING = 57619
const SUBSTRING = 57620
const SYMMETRIC = 57621
const SYSTEM = 57622
const TABLE = 57623
const TABLES = 57624
const TEMP = 57625
const TEMPLATE = 57626
const TEMPORARY = 57627
const TESTING_RANGES = 57628
const TESTING_RELOCATE = 57629
const TEXT = 57630
const THEN = 57631
const TIME = 57632
const TIMESTAMP = 57633
const TIMESTAMPTZ = 57634
const TO = 57635
const TRAILING = 57636
const TRACE = 57637
const TRANSACTION = 57638
const TREAT = 57639
const TRIM = 57640
const TRUE = 57641
const TRUNCATE = 57642
const TYPE = 57643
const UNBOUNDED = 57644
const UNCOMMITTED = 57645
const UNION = 57646
const UNIQUE = 57647
const UNKNOWN = 57648
const UPDATE = 57649
const UPSERT = 57650
const USE = 57651
const USER = 57652
const USERS = 57653
const USING = 57654
const UUID = 57655
const VALID = 57656
const VALIDATE = 57657
const VALUE = 57658
const VALUES = 57659
const VARCHAR = 57660
const VARIADIC = 57661
const VIEW = 57662
const VARYING = 57663
const WHEN = 57664
const WHERE = 57665
const WINDOW = 57666
const WITH = 57667
const WITHIN = 57668
const WITHOUT = 57669
const WRITE = 57670
const YEAR = 57671
const ZONE = 57672
const NOT_LA = 57673
const WITH_LA = 57674
const AS_LA = 57675
const POSTFIXOP = 57676
const UMINUS = 57677

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5855

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 32,
	354, 32,
	-2, 501,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 65,
	1, 474,
	197, 474,
	241, 474,
	350, 474,
	352, 474,
	354, 474,
	-2, 484,
	-1, 113,
	1, 477,
	197, 477,
	241, 477,
	350, 477,
	352, 477,
	354, 477,
	-2, 483,
	-1, 125,
	1, 32,
	354, 32,
	-2, 501,
	-1, 506,
	122, 1082,
	293, 1082,
	336, 1082,
	353, 1082,
	-2, 0,
	-1, 517,
	1, 214,
	354, 214,
	-2, 1087,
	-1, 537,
	111, 511,
	170, 511,
	195, 511,
	-2, 480,
	-1, 545,
	111, 510,
	170, 510,
	195, 510,
	-2, 478,
	-1, 685,
	351, 1014,
	-2, 1007,
	-1, 686,
	351, 1015,
	-2, 1008,
	-1, 692,
	5, 681,
	351, 681,
	-2, 1212,
	-1, 717,
	5, 640,
	-2, 1182,
	-1, 718,
	5, 675,
	351, 675,
	-2, 1184,
	-1, 719,
	5, 650,
	-2, 1185,
	-1, 720,
	5, 649,
	-2, 1186,
	-1, 721,
	5, 675,
	351, 675,
	-2, 1189,
	-1, 722,
	5, 675,
	351, 675,
	-2, 1190,
	-1, 723,
	5, 676,
	-2, 1193,
	-1, 724,
	5, 632,
	-2, 1194,
	-1, 725,
	5, 632,
	-2, 1195,
	-1, 726,
	5, 657,
	-2, 1199,
	-1, 727,
	5, 642,
	-2, 1200,
	-1, 728,
	5, 643,
	-2, 1201,
	-1, 729,
	5, 633,
	-2, 1206,
	-1, 730,
	5, 634,
	-2, 1207,
	-1, 731,
	5, 635,
	-2, 1208,
	-1, 732,
	5, 636,
	-2, 1209,
	-1, 733,
	5, 637,
	-2, 1210,
	-1, 734,
	5, 638,
	-2, 1211,
	-1, 735,
	5, 632,
	-2, 1216,
	-1, 736,
	5, 641,
	-2, 1221,
	-1, 737,
	5, 639,
	-2, 1224,
	-1, 738,
	5, 673,
	351, 673,
	-2, 1226,
	-1, 739,
	5, 677,
	-2, 1229,
	-1, 740,
	5, 679,
	-2, 1230,
	-1, 741,
	5, 672,
	351, 672,
	-2, 1235,
	-1, 789,
	211, 499,
	-2, 377,
	-1, 794,
	111, 510,
	170, 510,
	195, 510,
	-2, 481,
	-1, 953,
	102, 484,
	111, 484,
	151, 484,
	170, 484,
	195, 484,
	201, 484,
	304, 484,
	-2, 800,
	-1, 962,
	351, 991,
	-2, 979,
	-1, 1233,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 716,
	-1, 1234,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 717,
	-1, 1235,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 718,
	-1, 1239,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 722,
	-1, 1240,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 723,
	-1, 1241,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 724,
	-1, 1244,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 729,
	-1, 1250,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 731,
	-1, 1252,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 735,
	-1, 1253,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 736,
	-1, 1254,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 737,
	-1, 1255,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 738,
	-1, 1281,
	206, 873,
	-2, 876,
	-1, 1318,
	122, 913,
	351, 1014,
	-2, 1007,
	-1, 1319,
	122, 914,
	-2, 1178,
	-1, 1320,
	122, 915,
	-2, 1086,
	-1, 1321,
	122, 916,
	-2, 1050,
	-1, 1322,
	122, 917,
	-2, 1067,
	-1, 1323,
	122, 918,
	-2, 1085,
	-1, 1324,
	122, 919,
	-2, 1137,
	-1, 1504,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 730,
	-1, 1505,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 732,
	-1, 1510,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 733,
	-1, 1528,
	206, 872,
	-2, 875,
	-1, 1707,
	102, 484,
	111, 484,
	151, 484,
	170, 484,
	195, 484,
	201, 484,
	304, 484,
	-2, 567,
	-1, 1727,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 734,
	-1, 1732,
	154, 0,
	-2, 750,
	-1, 1742,
	206, 874,
	-2, 877,
	-1, 1784,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 777,
	-1, 1785,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 778,
	-1, 1786,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 779,
	-1, 1790,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 783,
	-1, 1791,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 784,
	-1, 1792,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 785,
	-1, 1898,
	1, 568,
	70, 568,
	102, 568,
	111, 568,
	123, 568,
	127, 568,
	129, 568,
	142, 568,
	151, 568,
	158, 568,
	167, 568,
	170, 568,
	182, 568,
	195, 568,
	197, 568,
	201, 568,
	241, 568,
	243, 568,
	304, 568,
	312, 568,
	323, 568,
	324, 568,
	333, 568,
	350, 568,
	352, 568,
	354, 568,
	355, 568,
	-2, 567,
	-1, 1911,
	154, 0,
	-2, 751,
	-1, 1914,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 754,
	-1, 1915,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 756,
	-1, 2042,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 755,
	-1, 2043,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 757,
	-1, 2050,
	154, 0,
	-2, 786,
	-1, 2131,
	154, 0,
	-2, 787,
	-1, 2212,
	36, 0,
	136, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 1181,
}

const sqlPrivate = 57344

const sqlLast = 31638

var sqlAct = [...]int{

	686, 1818, 2211, 2219, 2069, 2220, 2257, 2184, 2221, 1192,
	1089, 1200, 2210, 2101, 1380, 1761, 1978, 388, 2034, 1894,
	1824, 1893, 2022, 1841, 1421, 546, 1702, 1096, 1949, 1964,
	1647, 630, 676, 1645, 2009, 64, 135, 134, 134, 1003,
	1825, 134, 1705, 1384, 1004, 615, 662, 1402, 134, 1379,
	2003, 1486, 884, 1594, 1881, 1435, 134, 1872, 1693, 390,
	1392, 134, 1593, 1212, 134, 1466, 1304, 134, 1383, 1539,
	876, 958, 1465, 866, 134, 1480, 1201, 1279, 1471, 372,
	23, 1092, 561, 1688, 1184, 364, 1153, 362, 684, 683,
	1155, 1417, 1077, 742, 1127, 391, 763, 1289, 656, 1426,
	1344, 1267, 888, 1264, 1387, 885, 1084, 867, 803, 564,
	762, 796, 1298, 553, 111, 1315, 801, 570, 993, 949,
	134, 134, 565, 989, 134, 655, 643, 1194, 1175, 134,
	134, 811, 113, 604, 126, 810, 512, 114, 809, 494,
	1075, 556, 892, 678, 621, 1965, 380, 638, 779, 1468,
	130, 551, 392, 571, 602, 815, 498, 778, 510, 2112,
	1527, 1086, 2113, 1193, 1086, 2243, 514, 1703, 881, 1498,
	111, 1086, 345, 1301, 2233, 2232, 2230, 1208, 1208, 1963,
	2228, 516, 550, 881, 545, 2206, 1657, 550, 881, 904,
	905, 2203, 1177, 1197, 881, 1497, 2180, 2170, 2143, 1362,
	881, 1963, 1966, 1110, 2133, 23, 497, 1362, 2126, 554,
	572, 881, 907, 1208, 121, 2121, 1564, 1565, 2120, 2108,
	1302, 1700, 2109, 2084, 2081, 2080, 1963, 881, 1963, 2079,
	2067, 2044, 881, 1963, 1362, 2025, 906, 118, 1208, 111,
	2000, 1185, 123, 1208, 538, 1999, 1531, 1962, 1208, 537,
	1963, 1532, 1938, 904, 905, 1208, 924, 925, 926, 934,
	935, 936, 2160, 1691, 1916, 1303, 1300, 1208, 1913, 927,
	1188, 1362, 1691, 612, 573, 606, 907, 1736, 124, 938,
	1208, 1725, 1720, 110, 1191, 1191, 119, 1628, 1611, 1609,
	881, 1612, 1208, 120, 1608, 1176, 912, 1208, 904, 905,
	906, 1607, 1530, 1347, 1208, 1528, 921, 1208, 1208, 1185,
	1462, 112, 115, 881, 1368, 1433, 1361, 1208, 55, 1362,
	56, 907, 1207, 1570, 1190, 1208, 1183, 1191, 1658, 1182,
	900, 1188, 1797, 901, 1739, 881, 1208, 1629, 1564, 1565,
	1305, 1538, 1420, 1376, 58, 906, 1059, 1283, 862, 619,
	647, 134, 1087, 611, 922, 1087, 134, 125, 121, 625,
	912, 2017, 1087, 567, 570, 1706, 1081, 121, 777, 2235,
	2226, 2209, 2191, 2128, 2082, 1943, 1939, 1931, 1930, 931,
	939, 1580, 1929, 1925, 1924, 822, 123, 1923, 1922, 1898,
	1871, 1817, 1812, 904, 905, 123, 1807, 937, 1806, 551,
	571, 1905, 1497, 1805, 1747, 912, 1632, 1627, 1616, 118,
	1564, 1565, 929, 1582, 1583, 1584, 907, 1299, 922, 872,
	1613, 1601, 124, 1592, 1563, 1176, 1704, 923, 1560, 1559,
	119, 124, 1557, 1544, 661, 1543, 1475, 120, 1312, 1366,
	906, 1311, 1310, 928, 822, 1570, 959, 966, 115, 627,
	821, 1275, 1095, 1763, 1581, 110, 1196, 572, 2181, 2159,
	2158, 2151, 2145, 1579, 872, 115, 2141, 121, 1108, 2119,
	2116, 1103, 2104, 2064, 2234, 346, 2052, 117, 1085, 2041,
	2027, 1969, 1961, 112, 1936, 1902, 644, 1564, 1565, 1886,
	55, 923, 56, 629, 1839, 123, 134, 1837, 625, 1836,
	912, 1835, 1832, 1822, 1731, 639, 1815, 932, 1681, 1679,
	134, 1633, 1636, 1591, 1553, 1552, 58, 1570, 570, 915,
	916, 908, 909, 910, 911, 913, 914, 134, 134, 1549,
	2111, 124, 134, 134, 134, 1524, 134, 1519, 1269, 119,
	1461, 134, 134, 134, 134, 134, 120, 1574, 1566, 1567,
	1568, 1569, 1571, 1572, 571, 1904, 1276, 2014, 613, 807,
	994, 997, 1354, 795, 1309, 115, 1088, 1001, 987, 986,
	985, 984, 983, 982, 930, 1580, 570, 918, 919, 920,
	933, 981, 917, 915, 916, 908, 909, 910, 911, 913,
	914, 980, 979, 978, 1570, 977, 976, 975, 1940, 134,
	134, 134, 134, 974, 134, 973, 972, 794, 971, 970,
	773, 572, 571, 963, 952, 134, 115, 616, 1633, 570,
	134, 865, 757, 749, 641, 1945, 390, 570, 1944, 134,
	908, 909, 910, 911, 913, 914, 134, 134, 134, 121,
	134, 904, 905, 882, 1918, 1887, 959, 134, 1581, 117,
	1619, 1618, 1580, 799, 950, 571, 753, 871, 828, 2123,
	761, 890, 391, 571, 907, 1163, 782, 123, 758, 572,
	1566, 1567, 1568, 1569, 1571, 1572, 2114, 784, 628, 780,
	1648, 827, 870, 1564, 1565, 1161, 538, 772, 906, 770,
	999, 537, 1185, 1908, 1499, 1000, 551, 1706, 568, 1416,
	1615, 828, 1162, 124, 818, 819, 2015, 1415, 857, 828,
	1614, 119, 572, 787, 1503, 790, 968, 1301, 120, 392,
	572, 769, 798, 798, 879, 1581, 1065, 910, 911, 913,
	914, 826, 771, 754, 1576, 1577, 1578, 115, 1093, 1575,
	1573, 1574, 1566, 1567, 1568, 1569, 1571, 1572, 854, 1481,
	2004, 860, 134, 118, 1193, 1764, 1535, 134, 863, 872,
	1290, 990, 679, 850, 1302, 1493, 1564, 1565, 1855, 2197,
	880, 570, 570, 2250, 2249, 1993, 526, 549, 390, 525,
	894, 902, 134, 891, 1369, 639, 1156, 535, 1157, 1624,
	613, 543, 134, 965, 903, 1082, 2125, 520, 521, 110,
	845, 1094, 851, 1393, 2099, 2098, 1437, 571, 571, 1303,
	1300, 2097, 1866, 2096, 391, 1870, 1869, 962, 1852, 1566,
	1567, 1568, 1569, 1571, 1572, 352, 548, 112, 600, 1851,
	1548, 134, 1547, 1546, 55, 134, 56, 134, 134, 134,
	134, 134, 134, 1545, 995, 991, 992, 134, 542, 1814,
	1506, 134, 134, 1437, 998, 1459, 1066, 1458, 770, 1436,
	58, 744, 1158, 134, 572, 572, 134, 1456, 1251, 1211,
	1395, 392, 781, 1570, 1099, 134, 550, 353, 618, 1901,
	1174, 1358, 134, 1357, 1305, 599, 1053, 1222, 1403, 1713,
	1151, 1069, 1068, 1054, 567, 562, 134, 649, 134, 1152,
	528, 771, 570, 1102, 1715, 2071, 1105, 390, 1107, 1058,
	1483, 1071, 1078, 1070, 886, 2124, 1156, 1133, 1157, 2174,
	1266, 1083, 1857, 1055, 1221, 756, 847, 2223, 1330, 1266,
	356, 895, 1144, 1156, 1101, 1157, 831, 1305, 571, 1273,
	2240, 2177, 1113, 391, 1271, 898, 1686, 1114, 538, 1213,
	1220, 538, 538, 1123, 1418, 1419, 1124, 1125, 111, 2260,
	842, 1299, 613, 1692, 955, 2178, 1487, 1683, 1394, 1187,
	1757, 1137, 1195, 832, 1195, 1072, 830, 804, 914, 547,
	1290, 2148, 1491, 121, 1170, 1625, 531, 1428, 1209, 2249,
	541, 848, 1158, 117, 890, 572, 1172, 843, 1169, 1180,
	392, 1134, 1398, 2255, 1138, 1139, 1140, 1141, 1142, 1158,
	536, 123, 1131, 2224, 111, 532, 1696, 1148, 1149, 544,
	1572, 1167, 1199, 988, 644, 533, 1487, 598, 1210, 540,
	1623, 1287, 1150, 856, 804, 1699, 613, 1166, 1754, 1047,
	1864, 355, 354, 1086, 849, 1305, 500, 124, 2048, 873,
	2239, 1694, 2056, 947, 1443, 119, 766, 1164, 1073, 1551,
	1697, 1056, 120, 889, 501, 1882, 601, 1897, 1277, 2225,
	613, 893, 893, 1274, 1165, 1695, 529, 550, 1714, 1846,
	1159, 115, 390, 1755, 813, 1858, 134, 1434, 1360, 134,
	2011, 2222, 1325, 2248, 814, 2258, 134, 2246, 1479, 1377,
	1568, 1569, 1571, 1572, 134, 134, 2185, 134, 2091, 134,
	134, 390, 134, 134, 2072, 1977, 111, 2090, 391, 1400,
	500, 767, 357, 1365, 502, 768, 836, 1412, 1410, 1677,
	751, 134, 646, 1372, 378, 2062, 1698, 134, 501, 1934,
	2138, 1989, 530, 812, 1374, 1854, 1154, 391, 2238, 1668,
	2259, 134, 134, 134, 995, 1793, 998, 134, 1305, 1564,
	1565, 134, 358, 2268, 743, 1375, 1664, 1508, 814, 134,
	1370, 2261, 134, 992, 991, 392, 1265, 1373, 134, 390,
	1401, 381, 1119, 671, 1100, 1463, 1272, 1090, 1753, 570,
	1474, 359, 134, 360, 2256, 1248, 1473, 134, 502, 134,
	1438, 1147, 1060, 386, 392, 2010, 134, 1957, 2023, 382,
	1159, 813, 134, 1444, 1446, 391, 1406, 1408, 1407, 1842,
	131, 131, 691, 503, 347, 571, 1409, 1159, 1414, 568,
	563, 349, 551, 1429, 1087, 1378, 383, 1979, 1935, 361,
	1988, 1958, 1451, 1696, 491, 1454, 1489, 496, 1794, 2063,
	496, 1495, 1120, 1476, 1795, 385, 1280, 518, 1992, 111,
	1431, 1441, 1699, 1284, 2267, 1991, 1570, 1292, 1638, 1637,
	812, 828, 392, 2024, 1064, 492, 1424, 1457, 1880, 1317,
	1317, 1328, 572, 1339, 1464, 1405, 798, 1697, 798, 1351,
	1352, 1353, 2012, 1877, 1482, 1246, 1249, 503, 1876, 1492,
	490, 504, 766, 605, 605, 551, 548, 347, 1500, 1181,
	1449, 1502, 131, 622, 637, 636, 1819, 1062, 1537, 381,
	791, 1460, 1946, 1478, 1580, 2060, 1873, 127, 1245, 1063,
	1204, 632, 505, 631, 1689, 1308, 376, 31, 2051, 1933,
	1953, 386, 1954, 1595, 1730, 375, 30, 382, 1712, 2061,
	1558, 1509, 1507, 1518, 370, 27, 374, 17, 1484, 3,
	746, 1455, 1452, 1698, 1990, 384, 1367, 1189, 134, 1523,
	853, 551, 1956, 499, 383, 504, 852, 570, 846, 1262,
	841, 1959, 840, 839, 368, 13, 1534, 838, 837, 134,
	834, 134, 134, 385, 1260, 369, 16, 1581, 134, 635,
	626, 134, 371, 14, 1307, 134, 505, 1617, 1596, 367,
	12, 373, 10, 571, 366, 8, 1631, 1145, 1634, 387,
	365, 4, 1136, 1247, 1516, 134, 969, 1630, 844, 2218,
	2182, 1987, 1862, 1744, 1860, 134, 134, 134, 1853, 1514,
	1644, 134, 1598, 1599, 1600, 134, 134, 134, 134, 134,
	1404, 1397, 1171, 1168, 1160, 1112, 620, 134, 1955, 134,
	134, 745, 31, 623, 1256, 624, 1622, 1621, 1111, 1626,
	572, 30, 1257, 134, 1258, 1109, 1639, 1106, 1263, 1642,
	27, 1104, 17, 1646, 1665, 617, 2036, 1630, 1575, 1573,
	1574, 1566, 1567, 1568, 1569, 1571, 1572, 519, 134, 134,
	816, 1422, 2250, 384, 609, 1653, 1721, 1080, 551, 1511,
	13, 2038, 1010, 1650, 1651, 1655, 1652, 1659, 1448, 1512,
	613, 16, 1719, 1517, 1660, 688, 377, 2130, 14, 2155,
	1678, 1966, 1074, 1680, 633, 12, 1676, 10, 1709, 347,
	8, 833, 1718, 804, 804, 1874, 4, 1687, 1437, 820,
	1690, 1708, 134, 1711, 1447, 1701, 1453, 387, 1710, 1733,
	1450, 1716, 1423, 1437, 2161, 1425, 1749, 1750, 1751, 1445,
	1724, 1723, 817, 1522, 1722, 111, 610, 1975, 1399, 1640,
	1525, 111, 1396, 1198, 1259, 1430, 804, 1432, 1173, 493,
	1692, 1261, 522, 523, 1057, 613, 1002, 1364, 1541, 1542,
	1213, 1768, 2253, 804, 1743, 1740, 613, 2266, 2205, 1213,
	1773, 1041, 1469, 1756, 1758, 1759, 904, 905, 2164, 1767,
	1564, 1565, 2020, 1765, 1770, 1816, 1485, 1813, 1772, 1513,
	134, 889, 1760, 134, 904, 905, 1515, 824, 823, 1590,
	889, 824, 1804, 1696, 1620, 134, 1610, 1800, 570, 1359,
	1603, 1838, 1356, 904, 905, 1355, 1297, 1801, 390, 134,
	1823, 956, 1699, 906, 825, 1920, 1831, 1010, 1010, 2173,
	2035, 1752, 1641, 966, 964, 1849, 907, 1843, 1694, 752,
	755, 1848, 527, 2070, 571, 379, 1135, 1697, 835, 2016,
	1885, 2176, 134, 518, 391, 134, 1833, 1926, 1820, 1550,
	906, 2100, 1695, 2047, 390, 1306, 134, 967, 48, 1827,
	496, 347, 1122, 570, 665, 518, 789, 518, 1947, 792,
	1821, 1889, 1830, 1829, 518, 518, 347, 805, 622, 1386,
	1844, 1845, 1385, 1865, 393, 1067, 687, 555, 1316, 1214,
	391, 572, 747, 689, 1007, 1888, 690, 1008, 996, 571,
	677, 392, 1883, 1884, 1879, 1005, 642, 1875, 1202, 1270,
	1878, 1288, 1533, 1698, 134, 1900, 1041, 1041, 1899, 960,
	657, 1912, 669, 1907, 668, 1285, 748, 2021, 1490, 1861,
	1903, 1863, 347, 347, 859, 347, 1118, 605, 1413, 1115,
	1859, 534, 1561, 640, 1337, 828, 1329, 392, 347, 1326,
	1906, 783, 875, 131, 948, 1203, 572, 776, 1496, 1363,
	864, 1126, 347, 608, 607, 1381, 774, 1061, 1371, 347,
	347, 347, 941, 896, 1932, 940, 524, 2140, 1737, 765,
	131, 764, 1091, 134, 1667, 1643, 2254, 134, 134, 2154,
	1856, 2196, 122, 1960, 570, 2122, 2033, 1970, 1477, 72,
	29, 1973, 134, 134, 134, 1831, 1972, 1967, 28, 1656,
	1976, 134, 91, 134, 90, 134, 134, 134, 1831, 1661,
	134, 134, 1831, 1980, 1983, 89, 1331, 134, 134, 88,
	571, 134, 87, 86, 85, 84, 83, 1974, 82, 134,
	81, 80, 79, 1982, 1685, 1798, 134, 1986, 78, 77,
	76, 75, 74, 515, 71, 134, 1808, 1469, 70, 69,
	2019, 1830, 1829, 68, 1040, 26, 22, 21, 20, 2037,
	25, 24, 18, 15, 1830, 1829, 1981, 9, 1830, 1829,
	2018, 19, 1204, 1469, 2031, 131, 53, 572, 54, 52,
	518, 2028, 2007, 2008, 51, 50, 2013, 2046, 2030, 134,
	2029, 390, 134, 11, 2039, 46, 45, 44, 43, 42,
	134, 41, 7, 39, 38, 496, 6, 390, 2058, 5,
	107, 104, 1009, 106, 103, 1098, 2053, 105, 134, 108,
	100, 570, 2068, 1867, 2075, 1868, 101, 391, 134, 2074,
	102, 99, 2076, 98, 1831, 35, 1831, 890, 34, 33,
	32, 2, 1, 391, 2073, 134, 0, 0, 1892, 0,
	2086, 0, 0, 134, 518, 0, 2088, 571, 518, 134,
	131, 518, 518, 518, 518, 518, 0, 0, 134, 134,
	1146, 2089, 0, 0, 518, 518, 0, 0, 2093, 134,
	2110, 2107, 2117, 2103, 392, 0, 605, 0, 2118, 622,
	1830, 1829, 1830, 1829, 0, 2083, 0, 134, 347, 0,
	392, 134, 0, 2087, 0, 1186, 0, 0, 2115, 1040,
	1040, 2144, 2142, 2129, 572, 0, 0, 551, 2106, 347,
	0, 1206, 0, 0, 2149, 0, 2136, 570, 2137, 2150,
	666, 65, 2132, 0, 0, 0, 0, 134, 134, 0,
	0, 2094, 2095, 0, 2147, 134, 0, 2146, 0, 0,
	1043, 0, 2153, 0, 0, 390, 134, 134, 0, 2162,
	0, 0, 0, 571, 0, 1010, 1469, 1009, 1009, 1469,
	0, 2169, 2166, 0, 0, 2165, 2175, 2168, 0, 2172,
	0, 0, 134, 0, 2187, 1010, 134, 65, 2188, 134,
	2163, 391, 2193, 0, 0, 0, 390, 0, 0, 0,
	2189, 134, 1331, 1331, 134, 0, 0, 0, 0, 2152,
	2195, 2190, 2194, 2198, 2201, 134, 0, 2202, 2006, 0,
	572, 0, 134, 2204, 1831, 0, 2208, 0, 0, 0,
	2227, 2216, 391, 1520, 1521, 0, 2217, 2207, 0, 0,
	904, 905, 539, 2229, 0, 1010, 552, 0, 392, 0,
	0, 1042, 0, 0, 0, 2237, 65, 0, 2236, 134,
	0, 0, 0, 907, 1041, 0, 0, 2247, 0, 2245,
	1331, 1331, 1331, 0, 0, 2252, 0, 2251, 0, 0,
	1830, 1829, 0, 0, 1041, 0, 0, 906, 0, 392,
	0, 0, 0, 921, 2264, 2263, 2265, 2262, 0, 0,
	0, 1587, 1588, 1589, 0, 1043, 1043, 0, 0, 347,
	0, 0, 1382, 2078, 1957, 1006, 0, 1950, 0, 622,
	0, 0, 1010, 0, 0, 1948, 0, 518, 518, 1952,
	518, 0, 347, 347, 0, 1411, 622, 0, 0, 1996,
	0, 0, 0, 0, 1041, 2002, 0, 912, 1958, 0,
	0, 1469, 1469, 0, 347, 1469, 0, 0, 1010, 1010,
	1427, 0, 0, 0, 0, 904, 905, 1010, 1010, 0,
	1951, 0, 0, 0, 347, 347, 347, 0, 0, 118,
	1442, 0, 0, 0, 347, 0, 0, 0, 907, 0,
	0, 0, 347, 0, 0, 347, 0, 0, 0, 0,
	1010, 347, 0, 0, 0, 922, 1042, 1042, 0, 0,
	0, 0, 906, 0, 0, 347, 0, 0, 904, 905,
	347, 1041, 1494, 0, 0, 110, 0, 0, 0, 347,
	0, 0, 0, 0, 2066, 1427, 0, 0, 0, 0,
	0, 907, 0, 0, 0, 1331, 1331, 1953, 0, 1954,
	0, 0, 2085, 112, 0, 0, 0, 1041, 1041, 0,
	55, 0, 56, 2171, 0, 906, 1041, 1041, 0, 0,
	1006, 1006, 912, 0, 2179, 0, 1728, 1729, 923, 1956,
	0, 0, 0, 118, 0, 0, 58, 1469, 1959, 0,
	0, 0, 0, 0, 552, 0, 0, 899, 0, 1041,
	1564, 1565, 2199, 2200, 1331, 1331, 1331, 1331, 1331, 1331,
	1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
	1331, 1331, 1331, 0, 1331, 912, 0, 0, 0, 110,
	922, 0, 0, 0, 1010, 1774, 1775, 1776, 1777, 1778,
	1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788,
	1789, 1790, 1791, 1792, 0, 1796, 0, 112, 0, 0,
	0, 0, 0, 0, 55, 1955, 56, 1040, 0, 917,
	915, 916, 908, 909, 910, 911, 913, 914, 0, 0,
	0, 0, 0, 922, 0, 0, 0, 1040, 0, 0,
	58, 1427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 923, 0, 0, 0, 1570, 0, 121,
	0, 0, 1098, 1143, 1098, 1635, 0, 0, 0, 117,
	0, 518, 0, 2192, 347, 1009, 0, 0, 1649, 0,
	0, 0, 0, 1041, 0, 0, 0, 123, 0, 0,
	0, 0, 0, 0, 0, 1009, 0, 1040, 347, 1204,
	0, 0, 0, 0, 0, 0, 923, 0, 347, 1662,
	1663, 0, 0, 0, 1442, 1580, 0, 0, 1669, 1670,
	1672, 1674, 1675, 124, 0, 0, 0, 0, 0, 0,
	1682, 119, 1684, 347, 539, 0, 0, 0, 120, 0,
	0, 0, 0, 0, 0, 0, 347, 908, 909, 910,
	911, 913, 914, 0, 0, 1009, 0, 115, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 347, 347, 117, 1040, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1581, 1010,
	0, 123, 0, 0, 0, 0, 0, 917, 915, 916,
	908, 909, 910, 911, 913, 914, 0, 0, 0, 0,
	1040, 1040, 0, 1043, 0, 0, 0, 0, 0, 1040,
	1040, 0, 0, 0, 0, 1762, 0, 124, 0, 0,
	0, 0, 1009, 1043, 0, 119, 0, 0, 0, 951,
	0, 953, 120, 0, 0, 0, 1010, 0, 957, 0,
	0, 0, 1040, 0, 0, 0, 0, 0, 0, 0,
	0, 363, 0, 0, 0, 0, 0, 0, 1009, 1009,
	0, 0, 0, 0, 0, 0, 0, 1009, 1009, 0,
	1573, 1574, 1566, 1567, 1568, 1569, 1571, 1572, 1041, 0,
	0, 0, 0, 1043, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1442, 0, 1010, 1098, 1826, 0, 0,
	1009, 0, 0, 0, 1042, 0, 0, 0, 1840, 0,
	0, 1331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1850, 0, 1042, 904, 905, 0, 0, 0,
	0, 934, 935, 936, 0, 1041, 1331, 0, 0, 0,
	0, 0, 2050, 0, 0, 0, 0, 0, 907, 0,
	0, 938, 0, 0, 0, 347, 0, 0, 347, 0,
	1043, 0, 0, 0, 0, 0, 0, 2065, 1006, 1896,
	0, 0, 906, 0, 0, 0, 1040, 0, 921, 0,
	0, 0, 0, 0, 1042, 0, 539, 0, 1006, 539,
	539, 0, 0, 0, 1041, 0, 1043, 1043, 0, 0,
	0, 0, 0, 0, 0, 1043, 1043, 0, 0, 0,
	0, 0, 0, 0, 0, 65, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1927, 648, 1331,
	750, 0, 912, 0, 1009, 0, 0, 0, 1043, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1006, 0,
	0, 931, 939, 0, 0, 0, 0, 904, 905, 0,
	2131, 1042, 0, 65, 0, 65, 0, 785, 786, 0,
	0, 65, 0, 0, 0, 0, 0, 0, 0, 0,
	907, 0, 0, 0, 929, 0, 1826, 0, 0, 0,
	922, 0, 0, 0, 0, 0, 622, 1042, 1042, 1826,
	622, 1382, 0, 1826, 906, 0, 1042, 1042, 0, 0,
	1268, 0, 0, 0, 0, 1984, 1985, 1442, 0, 0,
	0, 0, 0, 0, 1994, 1006, 1995, 0, 347, 1997,
	1998, 0, 0, 2001, 347, 0, 0, 0, 0, 1042,
	347, 347, 0, 0, 347, 868, 868, 0, 0, 0,
	0, 0, 1896, 0, 877, 0, 0, 0, 0, 2026,
	0, 1006, 1006, 923, 912, 2032, 0, 0, 622, 0,
	1006, 1006, 1043, 65, 0, 0, 0, 0, 0, 932,
	0, 1040, 0, 0, 0, 0, 0, 0, 942, 943,
	944, 945, 946, 0, 1564, 1565, 0, 0, 954, 0,
	0, 0, 0, 1006, 0, 0, 0, 0, 961, 0,
	0, 0, 2057, 0, 0, 2059, 0, 0, 0, 0,
	0, 0, 922, 347, 0, 1826, 0, 1826, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1040, 1009,
	0, 347, 0, 0, 0, 0, 930, 1579, 0, 0,
	0, 1442, 933, 0, 917, 915, 916, 908, 909, 910,
	911, 913, 914, 0, 0, 0, 0, 0, 2102, 0,
	0, 0, 0, 1042, 0, 0, 347, 0, 0, 0,
	0, 0, 1896, 0, 0, 0, 0, 0, 0, 0,
	0, 622, 1896, 0, 0, 923, 1009, 1040, 0, 0,
	0, 1570, 2127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 65, 0, 0, 0,
	2135, 0, 0, 0, 1098, 0, 0, 0, 0, 0,
	0, 0, 0, 65, 0, 0, 65, 1006, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1470, 0,
	1116, 0, 1121, 0, 0, 1009, 0, 0, 1128, 1580,
	2156, 2157, 0, 0, 0, 0, 0, 552, 622, 0,
	0, 0, 0, 0, 0, 0, 0, 1043, 0, 1896,
	622, 0, 0, 0, 0, 0, 0, 0, 916, 908,
	909, 910, 911, 913, 914, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2186, 0, 0, 0, 622,
	0, 0, 347, 0, 0, 1826, 0, 0, 0, 0,
	1268, 0, 0, 0, 2102, 0, 0, 1896, 0, 0,
	0, 0, 1581, 0, 1043, 0, 0, 0, 347, 0,
	953, 0, 0, 0, 0, 622, 1223, 1224, 1225, 1226,
	1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236,
	1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 0, 1250,
	0, 1252, 1253, 1254, 1255, 0, 0, 0, 1042, 0,
	0, 0, 2244, 0, 0, 0, 0, 0, 1278, 0,
	0, 0, 0, 1043, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 953, 0, 0, 0,
	0, 1313, 1314, 0, 0, 1327, 0, 1338, 1340, 1345,
	1348, 1349, 1350, 1575, 1573, 1574, 1566, 1567, 1568, 1569,
	1571, 1572, 0, 0, 0, 1042, 0, 0, 0, 0,
	0, 0, 1006, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 65, 0, 0,
	65, 0, 0, 0, 0, 904, 905, 0, 924, 925,
	926, 934, 935, 936, 0, 0, 0, 0, 0, 0,
	0, 927, 0, 0, 1042, 0, 0, 0, 907, 1006,
	0, 938, 0, 904, 905, 0, 924, 925, 926, 934,
	935, 936, 0, 0, 0, 0, 0, 0, 0, 927,
	0, 65, 906, 0, 65, 0, 907, 0, 921, 938,
	0, 0, 65, 0, 0, 0, 1564, 1565, 65, 1582,
	1583, 1584, 0, 1707, 0, 0, 0, 0, 0, 0,
	906, 0, 1910, 0, 0, 0, 921, 0, 1006, 0,
	904, 905, 0, 924, 925, 926, 934, 935, 936, 1470,
	0, 0, 0, 0, 0, 0, 927, 0, 0, 0,
	0, 0, 912, 907, 0, 0, 938, 0, 0, 1579,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 931, 939, 0, 0, 0, 0, 906, 0, 0,
	912, 0, 0, 921, 868, 0, 0, 0, 0, 937,
	877, 0, 0, 0, 0, 0, 0, 0, 0, 931,
	939, 1488, 0, 0, 929, 0, 0, 0, 0, 0,
	922, 0, 0, 1570, 0, 0, 1501, 937, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 929, 0, 0, 928, 0, 912, 922, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1585, 0, 0, 1504, 1505, 0, 931, 939, 0, 1510,
	0, 0, 0, 928, 0, 0, 0, 0, 0, 0,
	0, 1580, 0, 0, 937, 0, 0, 0, 0, 0,
	0, 0, 0, 923, 0, 0, 0, 0, 0, 929,
	0, 1529, 0, 0, 0, 922, 0, 0, 1536, 932,
	0, 1540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 923, 0, 0, 0, 0, 0, 1554, 0, 0,
	928, 0, 0, 0, 0, 0, 0, 932, 0, 0,
	0, 0, 1470, 0, 0, 1470, 0, 0, 0, 0,
	0, 0, 0, 954, 1581, 0, 0, 0, 0, 1345,
	1345, 1345, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 65, 0, 0, 0, 0, 930, 0, 923, 918,
	919, 920, 933, 0, 917, 915, 916, 908, 909, 910,
	911, 913, 914, 0, 932, 0, 0, 0, 0, 0,
	1606, 0, 0, 0, 930, 0, 0, 918, 919, 920,
	933, 0, 917, 915, 916, 908, 909, 910, 911, 913,
	914, 0, 0, 0, 0, 0, 0, 0, 1605, 0,
	0, 0, 0, 1654, 0, 0, 0, 0, 1128, 0,
	1576, 1577, 1578, 0, 0, 1575, 1573, 1574, 1566, 1567,
	1568, 1569, 1571, 1572, 0, 0, 0, 0, 0, 0,
	0, 930, 0, 0, 918, 919, 920, 933, 0, 917,
	915, 916, 908, 909, 910, 911, 913, 914, 0, 0,
	0, 0, 0, 0, 0, 1604, 0, 0, 0, 0,
	0, 0, 0, 904, 905, 0, 924, 925, 926, 934,
	935, 936, 0, 0, 0, 868, 0, 0, 0, 927,
	0, 0, 0, 0, 0, 0, 907, 877, 0, 938,
	0, 1726, 0, 0, 1727, 0, 0, 1470, 1470, 0,
	0, 1470, 0, 0, 1564, 1565, 1732, 1582, 1583, 1584,
	906, 0, 0, 0, 0, 1741, 921, 0, 0, 0,
	1909, 0, 0, 1745, 0, 0, 1501, 0, 0, 2040,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1769, 0, 904, 905,
	1771, 924, 925, 926, 934, 935, 936, 1579, 0, 0,
	0, 0, 0, 0, 927, 0, 0, 0, 0, 0,
	912, 907, 0, 0, 938, 0, 0, 0, 0, 0,
	0, 0, 0, 1802, 1803, 0, 0, 0, 0, 931,
	939, 0, 1809, 1810, 1811, 906, 65, 0, 0, 0,
	0, 921, 0, 0, 0, 0, 0, 937, 0, 0,
	0, 1570, 0, 904, 905, 0, 924, 925, 926, 934,
	935, 936, 929, 0, 1834, 0, 0, 0, 922, 927,
	0, 0, 0, 1470, 0, 0, 907, 0, 0, 938,
	0, 0, 0, 0, 0, 0, 0, 0, 1585, 0,
	0, 0, 0, 928, 0, 912, 0, 0, 0, 0,
	906, 0, 953, 0, 0, 0, 921, 0, 0, 1580,
	0, 0, 0, 0, 931, 939, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 937, 0, 0, 0, 0, 0, 0, 0,
	0, 923, 0, 0, 0, 0, 0, 929, 0, 0,
	0, 0, 0, 922, 0, 0, 0, 932, 1911, 0,
	912, 0, 1914, 1915, 0, 0, 0, 1917, 0, 0,
	0, 0, 0, 0, 1919, 0, 1921, 0, 928, 931,
	939, 0, 1581, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1928, 0, 0, 0, 0, 937, 1564, 1565,
	0, 1582, 1583, 1584, 0, 0, 0, 0, 0, 0,
	0, 0, 929, 0, 1735, 0, 0, 0, 922, 0,
	0, 0, 0, 0, 930, 1937, 923, 918, 919, 920,
	933, 0, 917, 915, 916, 908, 909, 910, 911, 913,
	914, 0, 932, 928, 0, 0, 0, 0, 1556, 0,
	0, 1579, 0, 0, 0, 0, 1968, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1576, 1577,
	1578, 0, 0, 1575, 1573, 1574, 1566, 1567, 1568, 1569,
	1571, 1572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 923, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2005, 0, 0, 0, 1570, 0, 932, 0, 930,
	0, 0, 918, 919, 920, 933, 0, 917, 915, 916,
	908, 909, 910, 911, 913, 914, 0, 0, 904, 905,
	2183, 924, 925, 926, 934, 935, 936, 2042, 2043, 0,
	0, 0, 1585, 0, 927, 0, 0, 0, 0, 0,
	0, 907, 0, 0, 938, 0, 0, 0, 0, 0,
	0, 0, 0, 1580, 0, 0, 0, 0, 2055, 0,
	0, 0, 0, 0, 930, 906, 0, 918, 919, 920,
	933, 921, 917, 915, 916, 908, 909, 910, 911, 913,
	914, 0, 0, 0, 0, 2134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2092,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 912, 1581, 0, 0, 2105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 931, 939, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 877,
	0, 0, 937, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 929, 0, 0,
	0, 0, 2139, 922, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 928, 0,
	0, 0, 1576, 1577, 1578, 0, 0, 1575, 1573, 1574,
	1566, 1567, 1568, 1569, 1571, 1572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 923, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 932, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2215, 2215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2215, 0, 0, 0, 0, 0, 0, 0, 0, 930,
	0, 0, 918, 919, 920, 933, 0, 917, 915, 916,
	908, 909, 910, 911, 913, 914, 389, 0, 0, 0,
	2077, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2215, 136, 137, 408, 138, 409, 410, 411, 412,
	289, 413, 414, 415, 416, 139, 140, 141, 290, 291,
	292, 293, 142, 294, 295, 417, 143, 296, 297, 144,
	145, 418, 419, 298, 299, 300, 420, 146, 301, 421,
	394, 422, 147, 148, 149, 0, 150, 423, 151, 152,
	153, 424, 395, 154, 155, 425, 426, 428, 427, 429,
	430, 431, 156, 157, 348, 158, 302, 159, 303, 304,
	432, 160, 433, 161, 434, 162, 435, 436, 163, 164,
	437, 165, 438, 0, 439, 305, 166, 167, 168, 306,
	307, 440, 441, 442, 169, 170, 308, 309, 310, 0,
	171, 443, 172, 444, 445, 396, 446, 173, 311, 447,
	312, 448, 174, 175, 176, 177, 313, 314, 398, 449,
	181, 450, 178, 451, 397, 179, 315, 180, 316, 317,
	318, 319, 320, 452, 321, 453, 399, 182, 183, 184,
	400, 185, 186, 187, 454, 189, 188, 455, 322, 401,
	190, 402, 456, 191, 457, 458, 192, 0, 193, 194,
	195, 197, 323, 196, 403, 198, 199, 201, 200, 459,
	460, 461, 324, 202, 325, 203, 204, 462, 205, 463,
	464, 206, 465, 466, 207, 326, 404, 208, 405, 327,
	209, 210, 211, 212, 213, 467, 214, 328, 215, 329,
	216, 468, 217, 218, 219, 220, 221, 330, 222, 223,
	469, 224, 225, 226, 227, 228, 230, 231, 229, 232,
	233, 234, 235, 470, 236, 406, 237, 238, 331, 239,
	0, 243, 244, 245, 246, 471, 248, 332, 247, 249,
	250, 472, 251, 240, 241, 252, 407, 253, 333, 334,
	254, 473, 260, 255, 256, 242, 257, 259, 335, 258,
	336, 474, 261, 475, 262, 263, 264, 265, 266, 267,
	268, 476, 337, 338, 339, 477, 478, 269, 270, 340,
	341, 479, 271, 272, 273, 274, 480, 481, 275, 276,
	277, 278, 482, 279, 483, 342, 280, 281, 282, 343,
	344, 484, 485, 283, 486, 487, 488, 489, 284, 285,
	286, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 389, 0, 0, 0, 0, 0,
	0, 1890, 0, 0, 0, 0, 0, 0, 0, 1891,
	136, 137, 408, 138, 409, 410, 411, 412, 289, 413,
	414, 415, 416, 139, 140, 141, 290, 291, 292, 293,
	142, 294, 295, 417, 143, 296, 297, 144, 145, 418,
	419, 298, 299, 300, 420, 146, 301, 421, 394, 422,
	147, 148, 149, 0, 150, 423, 151, 152, 153, 424,
	395, 154, 155, 425, 426, 428, 427, 429, 430, 431,
	156, 157, 348, 158, 302, 159, 303, 304, 432, 160,
	433, 161, 434, 162, 435, 436, 163, 164, 437, 165,
	438, 0, 439, 305, 166, 167, 168, 306, 307, 440,
	441, 442, 169, 170, 308, 309, 310, 0, 171, 443,
	172, 444, 445, 396, 446, 173, 311, 447, 312, 448,
	174, 175, 176, 177, 313, 314, 398, 449, 181, 450,
	178, 451, 397, 179, 315, 180, 316, 317, 318, 319,
	320, 452, 321, 453, 399, 182, 183, 184, 400, 185,
	186, 187, 454, 189, 188, 455, 322, 401, 190, 402,
	456, 191, 457, 458, 192, 0, 193, 194, 195, 197,
	323, 196, 403, 198, 199, 201, 200, 459, 460, 461,
	324, 202, 325, 203, 204, 462, 205, 463, 464, 206,
	465, 466, 207, 326, 404, 208, 405, 327, 209, 210,
	211, 212, 213, 467, 214, 328, 215, 329, 216, 468,
	217, 218, 219, 220, 221, 330, 222, 223, 469, 224,
	225, 226, 227, 228, 230, 231, 229, 232, 233, 234,
	235, 470, 236, 406, 237, 238, 331, 239, 0, 243,
	244, 245, 246, 471, 248, 332, 247, 249, 250, 472,
	251, 240, 241, 252, 407, 253, 333, 334, 254, 473,
	260, 255, 256, 242, 257, 259, 335, 258, 336, 474,
	261, 475, 262, 263, 264, 265, 266, 267, 268, 476,
	337, 338, 339, 477, 478, 269, 270, 340, 341, 479,
	271, 272, 273, 274, 480, 481, 275, 276, 277, 278,
	482, 279, 483, 342, 280, 281, 282, 343, 344, 484,
	485, 283, 486, 487, 488, 489, 284, 285, 286, 287,
	288, 0, 0, 0, 389, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2167,
	136, 137, 408, 138, 409, 410, 411, 412, 289, 413,
	414, 415, 416, 139, 140, 141, 290, 291, 292, 293,
	142, 294, 295, 417, 143, 296, 297, 144, 145, 418,
	419, 298, 299, 300, 420, 146, 301, 421, 394, 422,
	147, 148, 149, 0, 150, 423, 151, 152, 153, 424,
	395, 154, 155, 425, 426, 428, 427, 429, 430, 431,
	156, 157, 348, 158, 302, 159, 303, 304, 432, 160,
	433, 161, 434, 162, 435, 436, 163, 164, 437, 165,
	438, 0, 439, 305, 166, 167, 168, 306, 307, 440,
	441, 442, 169, 170, 308, 309, 310, 0, 171, 443,
	172, 444, 445, 396, 446, 173, 311, 447, 312, 448,
	174, 175, 176, 177, 313, 314, 398, 449, 181, 450,
	178, 451, 397, 179, 315, 180, 316, 317, 318, 319,
	320, 452, 321, 453, 399, 182, 183, 184, 400, 185,
	186, 187, 454, 189, 188, 455, 322, 401, 190, 402,
	456, 191, 457, 458, 192, 0, 193, 194, 195, 197,
	323, 196, 403, 198, 199, 201, 200, 459, 460, 461,
	324, 202, 325, 203, 204, 462, 205, 463, 464, 206,
	465, 466, 207, 326, 404, 208, 405, 327, 209, 210,
	211, 212, 213, 467, 214, 328, 215, 329, 216, 468,
	217, 218, 219, 220, 221, 330, 222, 223, 469, 224,
	225, 226, 227, 228, 230, 231, 229, 232, 233, 234,
	235, 470, 236, 406, 237, 238, 331, 239, 0, 243,
	244, 245, 246, 471, 248, 332, 247, 249, 250, 472,
	251, 240, 241, 252, 407, 253, 333, 334, 254, 473,
	260, 255, 256, 242, 257, 259, 335, 258, 336, 474,
	261, 475, 262, 263, 264, 265, 266, 267, 268, 476,
	337, 338, 339, 477, 478, 269, 270, 340, 341, 479,
	271, 272, 273, 274, 480, 481, 275, 276, 277, 278,
	482, 279, 483, 342, 280, 281, 282, 343, 344, 484,
	485, 283, 486, 487, 488, 489, 284, 285, 286, 287,
	288, 389, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 883, 0, 0, 136, 137, 408,
	138, 409, 410, 411, 412, 289, 413, 414, 415, 416,
	139, 140, 141, 290, 291, 292, 293, 142, 294, 295,
	417, 143, 296, 297, 144, 145, 418, 419, 298, 299,
	300, 420, 146, 301, 421, 394, 422, 147, 148, 149,
	0, 150, 423, 151, 152, 153, 424, 395, 154, 155,
	425, 426, 428, 427, 429, 430, 431, 156, 157, 348,
	158, 302, 159, 303, 304, 432, 160, 433, 161, 434,
	162, 435, 436, 163, 164, 437, 165, 438, 0, 439,
	305, 166, 167, 168, 306, 307, 440, 441, 442, 169,
	170, 308, 309, 310, 0, 171, 443, 172, 444, 445,
	396, 446, 173, 311, 447, 312, 448, 174, 175, 176,
	177, 313, 314, 398, 449, 181, 450, 178, 451, 397,
	179, 315, 180, 316, 317, 318, 319, 320, 452, 321,
	453, 399, 182, 183, 184, 400, 185, 186, 187, 454,
	189, 188, 455, 322, 401, 190, 402, 456, 191, 457,
	458, 192, 0, 193, 194, 195, 197, 323, 196, 403,
	198, 199, 201, 200, 459, 460, 461, 324, 202, 325,
	203, 204, 462, 205, 463, 464, 206, 465, 466, 207,
	326, 404, 208, 405, 327, 209, 210, 211, 212, 213,
	467, 214, 328, 215, 329, 216, 468, 217, 218, 219,
	220, 221, 330, 222, 223, 469, 224, 225, 226, 227,
	228, 230, 231, 229, 232, 233, 234, 235, 470, 236,
	406, 237, 238, 331, 239, 0, 243, 244, 245, 246,
	471, 248, 332, 247, 249, 250, 472, 251, 240, 241,
	252, 407, 253, 333, 334, 254, 473, 260, 255, 256,
	242, 257, 259, 335, 258, 336, 474, 261, 475, 262,
	263, 264, 265, 266, 267, 268, 476, 337, 338, 339,
	477, 478, 269, 270, 340, 341, 479, 271, 272, 273,
	274, 480, 481, 275, 276, 277, 278, 482, 279, 483,
	342, 280, 281, 282, 343, 344, 484, 485, 283, 486,
	487, 488, 489, 284, 285, 286, 287, 288, 685, 674,
	675, 672, 673, 664, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 137, 0, 138, 0, 0,
	0, 0, 702, 667, 0, 0, 0, 139, 140, 141,
	290, 717, 292, 718, 142, 719, 720, 0, 143, 296,
	297, 144, 145, 670, 701, 721, 722, 300, 0, 146,
	713, 0, 693, 0, 147, 148, 149, 0, 150, 0,
	151, 152, 153, 0, 395, 154, 155, 0, 694, 695,
	697, 0, 696, 698, 156, 157, 348, 158, 723, 159,
	724, 725, 878, 160, 0, 161, 0, 162, 0, 0,
	716, 164, 0, 165, 0, 0, 0, 658, 166, 167,
	168, 703, 704, 681, 0, 0, 169, 170, 726, 727,
	728, 0, 171, 0, 172, 0, 0, 396, 0, 173,
	714, 0, 312, 0, 174, 175, 176, 177, 710, 712,
	398, 0, 181, 0, 178, 0, 397, 179, 729, 180,
	730, 731, 732, 733, 734, 0, 692, 0, 399, 182,
	183, 184, 400, 185, 186, 187, 0, 189, 188, 0,
	715, 401, 190, 402, 0, 191, 0, 0, 192, 0,
	193, 194, 195, 197, 323, 196, 403, 198, 199, 201,
	200, 653, 0, 682, 711, 202, 735, 203, 204, 0,
	205, 0, 0, 206, 0, 0, 207, 326, 404, 208,
	405, 705, 209, 210, 211, 212, 213, 0, 214, 706,
	215, 329, 216, 0, 217, 218, 219, 220, 221, 736,
	222, 223, 0, 224, 225, 226, 227, 228, 230, 231,
	229, 232, 233, 234, 235, 0, 236, 406, 237, 238,
	659, 239, 0, 243, 244, 245, 246, 121, 248, 332,
	247, 249, 250, 699, 251, 240, 241, 252, 407, 253,
	737, 334, 254, 0, 260, 255, 256, 242, 257, 259,
	738, 258, 707, 0, 261, 123, 262, 263, 264, 265,
	266, 267, 268, 0, 337, 739, 740, 0, 0, 269,
	270, 708, 709, 680, 271, 272, 273, 274, 0, 0,
	275, 276, 277, 278, 700, 279, 0, 342, 280, 281,
	282, 645, 741, 0, 0, 283, 0, 0, 0, 119,
	284, 285, 286, 287, 288, 654, 120, 0, 0, 0,
	0, 652, 0, 0, 0, 0, 650, 651, 685, 674,
	675, 672, 673, 664, 0, 660, 0, 0, 0, 0,
	663, 0, 0, 0, 136, 137, 1294, 138, 0, 0,
	0, 0, 702, 667, 0, 0, 0, 139, 140, 141,
	290, 717, 292, 718, 142, 719, 720, 0, 143, 296,
	297, 144, 145, 670, 701, 721, 722, 300, 0, 146,
	713, 0, 693, 0, 147, 148, 149, 0, 150, 0,
	151, 152, 153, 0, 395, 154, 155, 0, 694, 695,
	697, 0, 696, 698, 156, 157, 348, 158, 723, 159,
	724, 725, 0, 160, 0, 161, 0, 162, 1295, 0,
	716, 164, 0, 165, 0, 0, 0, 658, 166, 167,
	168, 703, 704, 681, 0, 0, 169, 170, 726, 727,
	728, 0, 171, 0, 172, 0, 0, 396, 0, 173,
	714, 0, 312, 0, 174, 175, 176, 177, 710, 712,
	398, 0, 181, 0, 178, 0, 397, 179, 729, 180,
	730, 731, 732, 733, 734, 0, 692, 0, 399, 182,
	183, 184, 400, 185, 186, 187, 0, 189, 188, 0,
	715, 401, 190, 402, 0, 191, 0, 0, 192, 0,
	193, 194, 195, 197, 323, 196, 403, 198, 199, 201,
	200, 653, 0, 682, 711, 202, 735, 203, 204, 0,
	205, 0, 0, 206, 0, 0, 207, 326, 404, 208,
	405, 705, 209, 210, 211, 212, 213, 0, 214, 706,
	215, 329, 216, 0, 217, 218, 219, 220, 221, 736,
	222, 223, 0, 224, 225, 226, 227, 228, 230, 231,
	229, 232, 233, 234, 235, 0, 236, 406, 237, 238,
	659, 239, 0, 243, 244, 245, 246, 0, 248, 332,
	247, 249, 250, 699, 251, 240, 241, 252, 407, 253,
	737, 334, 254, 0, 260, 255, 256, 242, 257, 259,
	738, 258, 707, 0, 261, 0, 262, 263, 264, 265,
	266, 267, 268, 0, 337, 739, 740, 0, 0, 269,
	270, 708, 709, 680, 271, 272, 273, 274, 0, 0,
	275, 276, 277, 278, 700, 279, 0, 342, 280, 281,
	282, 343, 741, 1293, 0, 283, 0, 0, 0, 0,
	284, 285, 286, 287, 288, 654, 0, 0, 0, 0,
	0, 652, 0, 0, 0, 0, 650, 651, 1296, 685,
	674, 675, 672, 673, 664, 660, 1291, 0, 0, 0,
	663, 0, 0, 0, 0, 136, 137, 0, 138, 0,
	0, 0, 0, 702, 667, 0, 0, 0, 139, 140,
	141, 290, 717, 292, 718, 142, 719, 720, 0, 143,
	296, 297, 144, 145, 670, 701, 721, 722, 300, 0,
	146, 713, 0, 693, 0, 147, 148, 149, 0, 150,
	0, 151, 152, 153, 0, 395, 154, 155, 0, 694,
	695, 697, 0, 696, 698, 156, 157, 348, 158, 723,
	159, 724, 725, 0, 160, 0, 161, 0, 162, 0,
	0, 716, 164, 0, 165, 0, 0, 0, 658, 166,
	167, 168, 703, 704, 681, 0, 0, 169, 170, 726,
	727, 728, 0, 171, 0, 172, 0, 0, 396, 0,
	173, 714, 0, 312, 0, 174, 175, 176, 177, 710,
	712, 398, 0, 181, 0, 178, 0, 397, 179, 729,
	180, 730, 731, 732, 733, 734, 0, 692, 0, 399,
	182, 183, 184, 400, 185, 186, 187, 0, 189, 188,
	0, 715, 401, 190, 402, 0, 191, 0, 0, 192,
	0, 193, 194, 195, 197, 323, 196, 403, 198, 199,
	201, 200, 653, 0, 682, 711, 202, 735, 203, 204,
	0, 205, 0, 0, 206, 0, 0, 207, 326, 404,
	208, 405, 705, 209, 210, 211, 212, 213, 0, 214,
	706, 215, 329, 216, 0, 217, 218, 219, 220, 221,
	736, 222, 223, 0, 224, 225, 226, 227, 228, 230,
	231, 229, 232, 233, 234, 235, 0, 236, 406, 237,
	238, 659, 239, 0, 243, 244, 245, 246, 121, 248,
	332, 247, 249, 250, 699, 251, 240, 241, 252, 407,
	253, 737, 334, 254, 0, 260, 255, 256, 242, 257,
	259, 738, 258, 707, 0, 261, 123, 262, 263, 264,
	265, 266, 267, 268, 0, 337, 739, 740, 0, 0,
	269, 270, 708, 709, 680, 271, 272, 273, 274, 0,
	0, 275, 276, 277, 278, 700, 279, 0, 342, 280,
	281, 282, 645, 741, 0, 0, 283, 0, 0, 0,
	119, 284, 285, 286, 287, 288, 654, 120, 0, 0,
	0, 0, 652, 0, 0, 0, 0, 650, 651, 685,
	674, 675, 672, 673, 664, 0, 660, 0, 0, 0,
	0, 663, 0, 0, 0, 136, 137, 0, 138, 0,
	0, 0, 0, 702, 667, 0, 0, 0, 139, 140,
	141, 290, 717, 292, 718, 142, 719, 720, 1341, 143,
	296, 297, 144, 145, 670, 701, 721, 722, 300, 0,
	146, 713, 0, 693, 0, 147, 148, 149, 0, 150,
	0, 151, 152, 153, 0, 395, 154, 155, 0, 694,
	695, 697, 0, 696, 698, 156, 157, 348, 158, 723,
	159, 724, 725, 0, 160, 0, 161, 0, 162, 0,
	0, 716, 164, 0, 165, 0, 0, 0, 658, 166,
	167, 168, 703, 704, 681, 0, 0, 169, 170, 726,
	727, 728, 0, 171, 0, 172, 0, 1346, 396, 0,
	173, 714, 0, 312, 0, 174, 175, 176, 177, 710,
	712, 398, 0, 181, 0, 178, 0, 397, 179, 729,
	180, 730, 731, 732, 733, 734, 0, 692, 0, 399,
	182, 183, 184, 400, 185, 186, 187, 0, 189, 188,
	1342, 715, 401, 190, 402, 0, 191, 0, 0, 192,
	0, 193, 194, 195, 197, 323, 196, 403, 198, 199,
	201, 200, 653, 0, 682, 711, 202, 735, 203, 204,
	0, 205, 0, 0, 206, 0, 0, 207, 326, 404,
	208, 405, 705, 209, 210, 211, 212, 213, 0, 214,
	706, 215, 329, 216, 0, 217, 218, 219, 220, 221,
	736, 222, 223, 0, 224, 225, 226, 227, 228, 230,
	231, 229, 232, 233, 234, 235, 0, 236, 406, 237,
	238, 659, 239, 0, 243, 244, 245, 246, 0, 248,
	332, 247, 249, 250, 699, 251, 240, 241, 252, 407,
	253, 737, 334, 254, 0, 260, 255, 256, 242, 257,
	259, 738, 258, 707, 0, 261, 0, 262, 263, 264,
	265, 266, 267, 268, 0, 337, 739, 740, 0, 1343,
	269, 270, 708, 709, 680, 271, 272, 273, 274, 0,
	0, 275, 276, 277, 278, 700, 279, 0, 342, 280,
	281, 282, 343, 741, 0, 0, 283, 0, 0, 0,
	0, 284, 285, 286, 287, 288, 654, 0, 0, 0,
	0, 0, 652, 0, 0, 0, 0, 650, 651, 685,
	674, 675, 672, 673, 664, 0, 660, 0, 0, 0,
	0, 663, 0, 0, 0, 136, 137, 0, 138, 0,
	0, 0, 0, 702, 667, 0, 0, 0, 139, 140,
	141, 290, 717, 292, 718, 142, 719, 720, 0, 143,
	296, 297, 144, 145, 670, 701, 721, 722, 300, 0,
	146, 713, 0, 693, 0, 147, 148, 149, 0, 150,
	0, 151, 152, 153, 0, 395, 154, 155, 0, 694,
	695, 697, 0, 696, 698, 156, 157, 348, 158, 723,
	159, 724, 725, 0, 160, 0, 161, 0, 162, 0,
	0, 716, 164, 0, 165, 0, 0, 0, 658, 166,
	167, 168, 703, 704, 681, 0, 0, 169, 170, 726,
	727, 728, 0, 171, 0, 172, 0, 0, 396, 0,
	173, 714, 0, 312, 0, 174, 175, 176, 177, 710,
	712, 398, 0, 181, 0, 178, 0, 397, 179, 729,
	180, 730, 731, 732, 733, 734, 0, 692, 0, 399,
	182, 183, 184, 400, 185, 186, 187, 0, 189, 188,
	0, 715, 401, 190, 402, 0, 191, 0, 0, 192,
	0, 193, 194, 195, 197, 323, 196, 403, 198, 199,
	201, 200, 653, 1717, 682, 711, 202, 735, 203, 204,
	0, 205, 0, 0, 206, 0, 0, 207, 326, 404,
	208, 405, 705, 209, 210, 211, 212, 213, 0, 214,
	706, 215, 329, 216, 0, 217, 218, 219, 220, 221,
	736, 222, 223, 0, 224, 225, 226, 227, 228, 230,
	231, 229, 232, 233, 234, 235, 0, 236, 406, 237,
	238, 659, 239, 0, 243, 244, 245, 246, 0, 248,
	332, 247, 249, 250, 699, 251, 240, 241, 252, 407,
	253, 737, 334, 254, 0, 260, 255, 256, 242, 257,
	259, 738, 258, 707, 0, 261, 0, 262, 263, 264,
	265, 266, 267, 268, 0, 337, 739, 740, 0, 0,
	269, 270, 708, 709, 680, 271, 272, 273, 274, 0,
	0, 275, 276, 277, 278, 700, 279, 0, 342, 280,
	281, 282, 343, 741, 0, 0, 283, 0, 0, 0,
	0, 284, 285, 286, 287, 288, 654, 0, 0, 0,
	0, 0, 652, 0, 0, 0, 0, 650, 651, 869,
	685, 674, 675, 672, 673, 664, 660, 0, 0, 0,
	0, 663, 0, 0, 0, 0, 136, 137, 0, 138,
	0, 0, 0, 0, 702, 667, 0, 0, 0, 139,
	140, 141, 290, 717, 292, 718, 142, 719, 720, 0,
	143, 296, 297, 144, 145, 670, 701, 721, 722, 300,
	0, 146, 713, 0, 693, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 153, 0, 395, 154, 155, 0,
	694, 695, 697, 0, 696, 698, 156, 157, 348, 158,
	723, 159, 724, 725, 0, 160, 0, 161, 0, 162,
	0, 0, 716, 164, 0, 165, 0, 0, 0, 658,
	166, 167, 168, 703, 704, 681, 0, 0, 169, 170,
	726, 727, 728, 0, 171, 0, 172, 0, 0, 396,
	0, 173, 714, 0, 312, 0, 174, 175, 176, 177,
	710, 712, 398, 0, 181, 1130, 178, 0, 397, 179,
	729, 180, 730, 731, 732, 733, 734, 0, 692, 0,
	399, 182, 183, 184, 400, 185, 186, 187, 0, 189,
	188, 0, 715, 401, 190, 402, 0, 191, 0, 0,
	192, 0, 193, 194, 195, 197, 323, 196, 403, 198,
	199, 201, 200, 653, 0, 682, 711, 202, 735, 203,
	204, 0, 205, 0, 0, 206, 0, 0, 207, 326,
	404, 208, 405, 705, 209, 210, 211, 212, 213, 0,
	214, 706, 215, 329, 216, 1129, 217, 218, 219, 220,
	221, 736, 222, 223, 0, 224, 225, 226, 227, 228,
	230, 231, 229, 232, 233, 234, 235, 0, 236, 406,
	237, 238, 659, 239, 0, 243, 244, 245, 246, 0,
	248, 332, 247, 249, 250, 699, 251, 240, 241, 252,
	407, 253, 737, 334, 254, 0, 260, 255, 256, 242,
	257, 259, 738, 258, 707, 0, 261, 0, 262, 263,
	264, 265, 266, 267, 268, 0, 337, 739, 740, 0,
	0, 269, 270, 708, 709, 680, 271, 272, 273, 274,
	0, 0, 275, 276, 277, 278, 700, 279, 0, 342,
	280, 281, 282, 343, 741, 0, 0, 283, 0, 0,
	0, 0, 284, 285, 286, 287, 288, 654, 0, 0,
	0, 0, 0, 652, 0, 0, 0, 0, 650, 651,
	685, 674, 675, 672, 673, 664, 0, 660, 0, 0,
	0, 0, 663, 0, 0, 0, 136, 137, 0, 138,
	0, 0, 0, 0, 702, 667, 0, 0, 0, 139,
	140, 141, 290, 717, 292, 718, 142, 719, 720, 0,
	143, 296, 297, 144, 145, 670, 701, 721, 722, 300,
	0, 146, 713, 0, 693, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 153, 0, 395, 154, 155, 0,
	694, 695, 697, 0, 696, 698, 156, 157, 348, 158,
	723, 159, 724, 725, 0, 160, 0, 161, 0, 162,
	0, 0, 716, 164, 0, 165, 0, 0, 0, 658,
	166, 167, 168, 703, 704, 681, 0, 0, 169, 170,
	726, 727, 728, 0, 171, 0, 172, 0, 0, 396,
	0, 173, 714, 0, 312, 0, 174, 175, 176, 177,
	710, 712, 398, 0, 181, 0, 178, 0, 397, 179,
	729, 180, 730, 731, 732, 733, 734, 0, 692, 0,
	399, 182, 183, 184, 400, 185, 186, 187, 0, 189,
	188, 0, 715, 401, 190, 402, 0, 191, 0, 0,
	192, 0, 193, 194, 195, 197, 323, 196, 403, 198,
	199, 201, 200, 653, 0, 682, 711, 202, 735, 203,
	204, 0, 205, 0, 0, 206, 0, 0, 207, 326,
	404, 208, 405, 705, 209, 210, 211, 212, 213, 0,
	214, 706, 215, 329, 216, 0, 217, 218, 219, 220,
	221, 736, 222, 223, 0, 224, 225, 226, 227, 228,
	230, 231, 229, 232, 233, 234, 235, 0, 236, 406,
	237, 238, 659, 239, 0, 243, 244, 245, 246, 0,
	248, 332, 247, 249, 250, 699, 251, 240, 241, 252,
	407, 253, 737, 334, 254, 0, 260, 255, 256, 242,
	257, 259, 738, 258, 707, 0, 261, 0, 262, 263,
	264, 265, 266, 267, 268, 0, 337, 739, 740, 0,
	0, 269, 270, 708, 709, 680, 271, 272, 273, 274,
	0, 0, 275, 276, 277, 278, 700, 279, 0, 342,
	280, 281, 282, 343, 741, 0, 0, 283, 0, 0,
	0, 0, 284, 285, 286, 287, 288, 654, 0, 0,
	0, 0, 0, 652, 0, 0, 0, 0, 650, 651,
	0, 0, 0, 0, 0, 959, 1286, 660, 0, 0,
	0, 0, 663, 685, 674, 675, 672, 673, 664, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	137, 0, 138, 0, 0, 0, 0, 702, 667, 0,
	0, 0, 139, 140, 141, 290, 717, 292, 718, 142,
	719, 720, 0, 143, 296, 297, 144, 145, 670, 701,
	721, 722, 300, 0, 146, 713, 0, 693, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 153, 0, 395,
	154, 155, 0, 694, 695, 697, 0, 696, 698, 156,
	157, 348, 158, 723, 159, 724, 725, 0, 160, 0,
	161, 0, 162, 0, 0, 716, 164, 0, 165, 0,
	0, 0, 658, 166, 167, 168, 703, 704, 681, 0,
	0, 169, 170, 726, 727, 728, 0, 171, 0, 172,
	0, 0, 396, 0, 173, 714, 0, 312, 0, 174,
	175, 176, 177, 710, 712, 398, 0, 181, 0, 178,
	0, 397, 179, 729, 180, 730, 731, 732, 733, 734,
	0, 692, 0, 399, 182, 183, 184, 400, 185, 186,
	187, 0, 189, 188, 0, 715, 401, 190, 402, 0,
	191, 0, 0, 192, 0, 193, 194, 195, 197, 323,
	196, 403, 198, 199, 201, 200, 653, 0, 682, 711,
	202, 735, 203, 204, 0, 205, 0, 0, 206, 0,
	0, 207, 326, 404, 208, 405, 705, 209, 210, 211,
	212, 213, 0, 214, 706, 215, 329, 216, 0, 217,
	218, 219, 220, 221, 736, 222, 223, 0, 224, 225,
	226, 227, 228, 230, 231, 229, 232, 233, 234, 235,
	0, 236, 406, 237, 238, 659, 239, 0, 243, 244,
	245, 246, 0, 248, 332, 247, 249, 250, 699, 251,
	240, 241, 252, 407, 253, 737, 334, 254, 0, 260,
	255, 256, 242, 257, 259, 738, 258, 707, 0, 261,
	0, 262, 263, 264, 265, 266, 267, 268, 0, 337,
	739, 740, 0, 0, 269, 270, 708, 709, 680, 271,
	272, 273, 274, 0, 0, 275, 276, 277, 278, 700,
	279, 0, 342, 280, 281, 282, 343, 741, 0, 0,
	283, 0, 0, 0, 0, 284, 285, 286, 287, 288,
	654, 0, 0, 0, 0, 0, 652, 0, 0, 0,
	0, 650, 651, 685, 674, 675, 672, 673, 664, 0,
	660, 1799, 0, 0, 0, 663, 0, 0, 0, 136,
	137, 0, 138, 0, 0, 0, 0, 702, 667, 0,
	0, 0, 139, 140, 141, 290, 717, 292, 718, 142,
	719, 720, 0, 143, 296, 297, 144, 145, 670, 701,
	721, 722, 300, 0, 146, 713, 0, 693, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 153, 0, 395,
	154, 155, 0, 694, 695, 697, 0, 696, 698, 156,
	157, 348, 158, 723, 159, 724, 725, 0, 160, 0,
	161, 0, 162, 0, 0, 716, 164, 0, 165, 0,
	0, 0, 658, 166, 167, 168, 703, 704, 681, 0,
	0, 169, 170, 726, 727, 728, 0, 171, 0, 172,
	0, 0, 396, 0, 173, 714, 0, 312, 0, 174,
	175, 176, 177, 710, 712, 398, 0, 181, 0, 178,
	0, 397, 179, 729, 180, 730, 731, 732, 733, 734,
	0, 692, 0, 399, 182, 183, 184, 400, 185, 186,
	187, 0, 189, 188, 0, 715, 401, 190, 402, 0,
	191, 0, 0, 192, 0, 193, 194, 195, 197, 323,
	196, 403, 198, 199, 201, 200, 653, 0, 682, 711,
	202, 735, 203, 204, 0, 205, 0, 0, 206, 0,
	0, 207, 326, 404, 208, 405, 705, 209, 210, 211,
	212, 213, 0, 214, 706, 215, 329, 216, 0, 217,
	218, 219, 220, 221, 736, 222, 223, 0, 224, 225,
	226, 227, 228, 230, 231, 229, 232, 233, 234, 235,
	0, 236, 406, 237, 238, 659, 239, 0, 243, 244,
	245, 246, 0, 248, 332, 247, 249, 250, 699, 251,
	240, 241, 252, 407, 253, 737, 334, 254, 0, 260,
	255, 256, 242, 257, 259, 738, 258, 707, 0, 261,
	0, 262, 263, 264, 265, 266, 267, 268, 0, 337,
	739, 740, 0, 0, 269, 270, 708, 709, 680, 271,
	272, 273, 274, 0, 0, 275, 276, 277, 278, 700,
	279, 0, 342, 280, 281, 282, 343, 741, 1748, 0,
	283, 0, 0, 0, 0, 284, 285, 286, 287, 288,
	654, 0, 0, 0, 0, 0, 652, 0, 0, 0,
	0, 650, 651, 685, 674, 675, 672, 673, 664, 0,
	660, 0, 0, 0, 0, 663, 0, 0, 0, 136,
	137, 0, 138, 0, 0, 0, 0, 702, 667, 0,
	0, 0, 139, 140, 141, 290, 717, 292, 718, 142,
	719, 720, 0, 143, 296, 297, 144, 145, 670, 701,
	721, 722, 300, 0, 146, 713, 0, 693, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 153, 0, 395,
	154, 155, 0, 694, 695, 697, 0, 696, 698, 156,
	157, 348, 158, 723, 159, 724, 725, 0, 160, 0,
	161, 0, 162, 0, 0, 716, 164, 0, 165, 0,
	0, 0, 658, 166, 167, 168, 703, 704, 681, 0,
	0, 169, 170, 726, 727, 728, 0, 171, 0, 172,
	0, 0, 396, 0, 173, 714, 0, 312, 0, 174,
	175, 176, 177, 710, 712, 398, 0, 181, 0, 178,
	0, 397, 179, 729, 180, 730, 731, 732, 733, 734,
	0, 692, 0, 399, 182, 183, 184, 400, 185, 186,
	187, 0, 189, 188, 0, 715, 401, 190, 402, 0,
	191, 0, 0, 192, 0, 193, 194, 195, 197, 323,
	196, 403, 198, 199, 201, 200, 653, 0, 682, 711,
	202, 735, 203, 204, 0, 205, 0, 0, 206, 0,
	0, 207, 326, 404, 208, 405, 705, 209, 210, 211,
	212, 213, 0, 214, 706, 215, 329, 216, 0, 217,
	218, 219, 220, 221, 736, 222, 223, 0, 224, 225,
	226, 227, 228, 230, 231, 229, 232, 233, 234, 235,
	0, 236, 406, 237, 238, 659, 239, 0, 243, 244,
	245, 246, 0, 248, 332, 247, 249, 250, 699, 251,
	240, 241, 252, 407, 253, 737, 334, 254, 0, 260,
	255, 256, 242, 257, 259, 738, 258, 707, 0, 261,
	0, 262, 263, 264, 265, 266, 267, 268, 0, 337,
	739, 740, 0, 0, 269, 270, 708, 709, 680, 271,
	272, 273, 274, 0, 0, 275, 276, 277, 278, 700,
	279, 0, 342, 280, 281, 282, 343, 741, 0, 0,
	283, 0, 0, 0, 0, 284, 285, 286, 287, 288,
	654, 0, 0, 0, 0, 0, 652, 0, 0, 0,
	0, 650, 651, 685, 674, 675, 672, 673, 664, 0,
	660, 1738, 0, 0, 0, 663, 0, 0, 0, 136,
	137, 0, 138, 0, 0, 0, 0, 702, 667, 0,
	0, 0, 139, 140, 141, 290, 717, 292, 718, 142,
	719, 720, 0, 143, 296, 297, 144, 145, 670, 701,
	721, 722, 300, 0, 146, 713, 0, 693, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 153, 0, 395,
	154, 155, 0, 694, 695, 697, 0, 696, 698, 156,
	157, 348, 158, 723, 159, 724, 725, 878, 160, 0,
	161, 0, 162, 0, 0, 716, 164, 0, 165, 0,
	0, 0, 658, 166, 167, 168, 703, 704, 681, 0,
	0, 169, 170, 726, 727, 728, 0, 171, 0, 172,
	0, 0, 396, 0, 173, 714, 0, 312, 0, 174,
	175, 176, 177, 710, 712, 398, 0, 181, 0, 178,
	0, 397, 179, 729, 180, 730, 731, 732, 733, 734,
	0, 692, 0, 399, 182, 183, 184, 400, 185, 186,
	187, 0, 189, 188, 0, 715, 401, 190, 402, 0,
	191, 0, 0, 192, 0, 193, 194, 195, 197, 323,
	196, 403, 198, 199, 201, 200, 653, 0, 682, 711,
	202, 735, 203, 204, 0, 205, 0, 0, 206, 0,
	0, 207, 326, 404, 208, 405, 705, 209, 210, 211,
	212, 213, 0, 214, 706, 215, 329, 216, 0, 217,
	218, 219, 220, 221, 736, 222, 223, 0, 224, 225,
	226, 227, 228, 230, 231, 229, 232, 233, 234, 235,
	0, 236, 406, 237, 238, 659, 239, 0, 243, 244,
	245, 246, 0, 248, 332, 247, 249, 250, 699, 251,
	240, 241, 252, 407, 253, 737, 334, 254, 0, 260,
	255, 256, 242, 257, 259, 738, 258, 707, 0, 261,
	0, 262, 263, 264, 265, 266, 267, 268, 0, 337,
	739, 740, 0, 0, 269, 270, 708, 709, 680, 271,
	272, 273, 274, 0, 0, 275, 276, 277, 278, 700,
	279, 0, 342, 280, 281, 282, 343, 741, 0, 0,
	283, 0, 0, 0, 0, 284, 285, 286, 287, 288,
	654, 0, 0, 0, 0, 0, 652, 0, 0, 0,
	0, 650, 651, 685, 674, 675, 672, 673, 664, 0,
	660, 0, 0, 0, 0, 663, 0, 0, 0, 136,
	137, 0, 138, 0, 0, 0, 0, 702, 667, 0,
	0, 0, 139, 140, 141, 290, 717, 292, 718, 142,
	719, 720, 0, 143, 296, 297, 144, 145, 670, 701,
	721, 722, 300, 0, 146, 713, 0, 693, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 153, 0, 395,
	154, 155, 0, 694, 695, 697, 0, 696, 698, 156,
	157, 348, 158, 723, 159, 724, 725, 0, 160, 0,
	161, 0, 162, 0, 0, 716, 164, 0, 165, 0,
	0, 0, 658, 166, 167, 168, 703, 704, 681, 0,
	0, 169, 170, 726, 727, 728, 0, 171, 0, 172,
	0, 1346, 396, 0, 173, 714, 0, 312, 0, 174,
	175, 176, 177, 710, 712, 398, 0, 181, 0, 178,
	0, 397, 179, 729, 180, 730, 731, 732, 733, 734,
	0, 692, 0, 399, 182, 183, 184, 400, 185, 186,
	187, 0, 189, 188, 0, 715, 401, 190, 402, 0,
	191, 0, 0, 192, 0, 193, 194, 195, 197, 323,
	196, 403, 198, 199, 201, 200, 653, 0, 682, 711,
	202, 735, 203, 204, 0, 205, 0, 0, 206, 0,
	0, 207, 326, 404, 208, 405, 705, 209, 210, 211,
	212, 213, 0, 214, 706, 215, 329, 216, 0, 217,
	218, 219, 220, 221, 736, 222, 223, 0, 224, 225,
	226, 227, 228, 230, 231, 229, 232, 233, 234, 235,
	0, 236, 406, 237, 238, 659, 239, 0, 243, 244,
	245, 246, 0, 248, 332, 247, 249, 250, 699, 251,
	240, 241, 252, 407, 253, 737, 334, 254, 0, 260,
	255, 256, 242, 257, 259, 738, 258, 707, 0, 261,
	0, 262, 263, 264, 265, 266, 267, 268, 0, 337,
	739, 740, 0, 0, 269, 270, 708, 709, 680, 271,
	272, 273, 274, 0, 0, 275, 276, 277, 278, 700,
	279, 0, 342, 280, 281, 282, 343, 741, 0, 0,
	283, 0, 0, 0, 0, 284, 285, 286, 287, 288,
	654, 0, 0, 0, 0, 0, 652, 0, 0, 0,
	0, 650, 651, 685, 674, 675, 672, 673, 664, 0,
	660, 0, 0, 0, 0, 663, 0, 0, 0, 136,
	137, 0, 138, 0, 0, 0, 0, 702, 667, 0,
	0, 0, 139, 140, 141, 290, 717, 292, 718, 142,
	719, 720, 0, 143, 296, 297, 144, 145, 670, 701,
	721, 722, 300, 0, 146, 713, 0, 693, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 153, 0, 395,
	154, 155, 0, 694, 695, 697, 0, 696, 698, 156,
	157, 348, 158, 723, 159, 724, 725, 0, 160, 0,
	161, 0, 162, 0, 0, 716, 164, 0, 165, 0,
	0, 0, 658, 166, 167, 168, 703, 704, 681, 0,
	0, 169, 170, 726, 727, 728, 0, 171, 0, 172,
	0, 0, 396, 0, 173, 714, 0, 312, 0, 174,
	175, 176, 177, 710, 712, 398, 0, 181, 0, 178,
	0, 397, 179, 729, 180, 730, 731, 732, 733, 734,
	0, 692, 0, 399, 182, 183, 184, 400, 185, 186,
	187, 0, 189, 188, 0, 715, 401, 190, 402, 0,
	191, 0, 0, 192, 0, 193, 194, 195, 197, 323,
	196, 403, 198, 199, 201, 200, 653, 0, 682, 711,
	202, 735, 203, 204, 0, 205, 0, 0, 206, 0,
	0, 207, 326, 404, 208, 405, 705, 209, 210, 211,
	212, 213, 0, 214, 706, 215, 329, 216, 0, 217,
	218, 219, 220, 221, 736, 222, 223, 0, 224, 225,
	226, 227, 228, 230, 231, 229, 232, 233, 234, 235,
	0, 236, 406, 237, 238, 659, 239, 0, 243, 244,
	245, 246, 0, 248, 332, 247, 249, 250, 699, 251,
	240, 241, 252, 407, 253, 737, 334, 254, 0, 260,
	255, 256, 242, 257, 259, 738, 258, 707, 0, 261,
	0, 262, 263, 264, 265, 266, 267, 268, 0, 337,
	739, 740, 0, 0, 269, 270, 708, 709, 680, 271,
	272, 273, 274, 0, 0, 275, 276, 277, 278, 700,
	279, 0, 342, 280, 281, 282, 343, 741, 0, 0,
	283, 0, 0, 0, 0, 284, 285, 286, 287, 288,
	654, 0, 0, 0, 0, 0, 652, 0, 0, 0,
	0, 650, 651, 869, 685, 674, 675, 672, 673, 664,
	660, 0, 0, 0, 0, 663, 0, 0, 0, 0,
	136, 137, 0, 138, 0, 0, 0, 0, 702, 667,
	0, 0, 0, 139, 140, 141, 290, 717, 292, 718,
	142, 719, 720, 0, 143, 296, 297, 144, 145, 670,
	701, 721, 722, 300, 0, 146, 713, 0, 693, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 153, 0,
	395, 154, 155, 0, 694, 695, 697, 0, 696, 698,
	156, 157, 348, 158, 723, 159, 724, 725, 0, 160,
	0, 161, 0, 162, 0, 0, 716, 164, 0, 165,
	0, 0, 0, 658, 166, 167, 168, 703, 704, 681,
	0, 0, 169, 170, 726, 727, 728, 0, 171, 0,
	172, 0, 0, 396, 0, 173, 714, 0, 312, 0,
	174, 175, 176, 177, 710, 712, 398, 0, 181, 0,
	178, 0, 397, 179, 729, 180, 730, 731, 732, 733,
	734, 0, 692, 0, 399, 182, 183, 184, 400, 185,
	186, 187, 0, 189, 188, 0, 715, 401, 190, 402,
	0, 191, 0, 0, 192, 0, 193, 194, 195, 197,
	323, 196, 403, 198, 199, 201, 200, 653, 0, 682,
	711, 202, 735, 203, 204, 0, 205, 0, 0, 206,
	0, 0, 207, 326, 404, 208, 405, 705, 209, 210,
	211, 212, 213, 0, 214, 706, 215, 329, 216, 0,
	217, 218, 219, 220, 221, 736, 222, 223, 0, 224,
	225, 226, 227, 228, 230, 231, 229, 232, 233, 234,
	235, 0, 236, 406, 237, 238, 659, 239, 0, 243,
	244, 245, 246, 0, 248, 332, 247, 249, 250, 699,
	251, 240, 241, 252, 407, 253, 737, 334, 254, 0,
	260, 255, 256, 242, 257, 259, 738, 258, 707, 0,
	261, 0, 262, 263, 264, 265, 266, 267, 268, 0,
	337, 739, 740, 0, 0, 269, 270, 708, 709, 680,
	271, 272, 273, 274, 0, 0, 275, 276, 277, 278,
	700, 279, 0, 342, 280, 281, 282, 343, 741, 0,
	0, 283, 0, 0, 0, 0, 284, 285, 286, 287,
	288, 654, 0, 0, 0, 0, 0, 652, 0, 0,
	0, 0, 650, 651, 685, 674, 675, 672, 673, 664,
	0, 660, 1281, 0, 0, 0, 663, 0, 0, 0,
	136, 137, 1117, 138, 0, 0, 0, 0, 702, 667,
	0, 0, 0, 139, 140, 141, 290, 717, 292, 718,
	142, 719, 720, 0, 143, 296, 297, 144, 145, 670,
	701, 721, 722, 300, 0, 146, 713, 0, 693, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 153, 0,
	395, 154, 155, 0, 694, 695, 697, 0, 696, 698,
	156, 157, 348, 158, 723, 159, 724, 725, 0, 160,
	0, 161, 0, 162, 0, 0, 716, 164, 0, 165,
	0, 0, 0, 658, 166, 167, 168, 703, 704, 681,
	0, 0, 169, 170, 726, 727, 728, 0, 171, 0,
	172, 0, 0, 396, 0, 173, 714, 0, 312, 0,
	174, 175, 176, 177, 710, 712, 398, 0, 181, 0,
	178, 0, 397, 179, 729, 180, 730, 731, 732, 733,
	734, 0, 692, 0, 399, 182, 183, 184, 400, 185,
	186, 187, 0, 189, 188, 0, 715, 401, 190, 402,
	0, 191, 0, 0, 192, 0, 193, 194, 195, 197,
	323, 196, 403, 198, 199, 201, 200, 653, 0, 682,
	711, 202, 735, 203, 204, 0, 205, 0, 0, 206,
	0, 0, 207, 326, 404, 208, 405, 705, 209, 210,
	211, 212, 213, 0, 214, 706, 215, 329, 216, 0,
	217, 218, 219, 220, 221, 736, 222, 223, 0, 224,
	225, 226, 227, 228, 230, 231, 229, 232, 233, 234,
	235, 0, 236, 406, 237, 238, 659, 239, 0, 243,
	244, 245, 246, 0, 248, 332, 247, 249, 250, 699,
	251, 240, 241, 252, 407, 253, 737, 334, 254, 0,
	260, 255, 256, 242, 257, 259, 738, 258, 707, 0,
	261, 0, 262, 263, 264, 265, 266, 267, 268, 0,
	337, 739, 740, 0, 0, 269, 270, 708, 709, 680,
	271, 272, 273, 274, 0, 0, 275, 276, 277, 278,
	700, 279, 0, 342, 280, 281, 282, 343, 741, 0,
	0, 283, 0, 0, 0, 0, 284, 285, 286, 287,
	288, 654, 0, 0, 0, 0, 0, 652, 0, 0,
	0, 0, 650, 651, 685, 674, 675, 672, 673, 664,
	0, 660, 0, 0, 0, 0, 663, 0, 0, 0,
	136, 137, 0, 138, 0, 0, 0, 0, 702, 667,
	0, 0, 0, 139, 140, 141, 290, 717, 292, 718,
	142, 719, 720, 0, 143, 296, 297, 144, 145, 670,
	701, 721, 722, 300, 0, 146, 713, 0, 693, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 153, 0,
	395, 154, 2214, 0, 694, 695, 697, 0, 696, 698,
	156, 157, 348, 158, 723, 159, 724, 725, 0, 160,
	0, 161, 0, 162, 0, 0, 716, 164, 0, 165,
	0, 0, 0, 658, 166, 167, 168, 703, 704, 681,
	0, 0, 169, 170, 726, 727, 728, 0, 171, 0,
	172, 0, 0, 396, 0, 173, 714, 0, 312, 0,
	174, 175, 176, 177, 710, 712, 398, 0, 181, 0,
	178, 0, 397, 179, 729, 180, 730, 731, 732, 733,
	734, 0, 692, 0, 399, 182, 183, 184, 400, 185,
	186, 187, 0, 189, 188, 0, 715, 401, 190, 402,
	0, 191, 0, 0, 192, 0, 193, 194, 195, 197,
	323, 196, 403, 198, 199, 201, 200, 653, 0, 682,
	711, 202, 735, 203, 204, 0, 205, 0, 0, 206,
	0, 0, 207, 326, 404, 208, 405, 705, 209, 210,
	211, 212, 213, 0, 214, 706, 215, 329, 216, 0,
	217, 218, 219, 220, 221, 736, 222, 223, 0, 224,
	225, 226, 227, 228, 230, 231, 229, 232, 233, 234,
	235, 0, 236, 406, 237, 238, 659, 239, 0, 243,
	244, 245, 246, 0, 248, 332, 247, 249, 250, 699,
	251, 240, 241, 252, 407, 253, 737, 334, 254, 0,
	260, 255, 256, 242, 257, 259, 738, 258, 707, 0,
	261, 0, 262, 263, 264, 265, 266, 267, 268, 0,
	337, 739, 740, 0, 0, 269, 270, 708, 709, 680,
	271, 272, 2213, 274, 0, 0, 275, 276, 277, 278,
	700, 279, 0, 342, 280, 281, 282, 343, 741, 0,
	0, 283, 0, 0, 0, 0, 284, 285, 286, 287,
	288, 654, 0, 0, 0, 0, 0, 652, 0, 0,
	0, 0, 650, 651, 685, 674, 675, 672, 673, 664,
	0, 660, 0, 0, 0, 0, 663, 0, 0, 0,
	136, 137, 0, 138, 0, 0, 0, 0, 702, 667,
	0, 0, 0, 139, 140, 141, 290, 717, 292, 718,
	142, 719, 720, 0, 143, 296, 297, 144, 145, 670,
	701, 721, 722, 300, 0, 146, 713, 0, 693, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 153, 0,
	395, 154, 155, 0, 694, 695, 697, 0, 696, 698,
	156, 157, 348, 158, 723, 159, 724, 725, 0, 160,
	0, 161, 0, 162, 0, 0, 716, 164, 0, 165,
	0, 0, 0, 658, 166, 167, 168, 703, 704, 681,
	0, 0, 169, 170, 726, 727, 728, 0, 171, 0,
	172, 0, 0, 396, 0, 173, 714, 0, 312, 0,
	174, 175, 176, 177, 710, 712, 398, 0, 181, 0,
	178, 0, 397, 179, 729, 180, 730, 731, 732, 733,
	734, 0, 692, 0, 399, 182, 183, 184, 400, 185,
	186, 187, 0, 189, 188, 0, 715, 401, 190, 402,
	0, 191, 0, 0, 192, 0, 193, 194, 195, 197,
	323, 196, 403, 198, 199, 201, 200, 653, 0, 682,
	711, 202, 735, 203, 204, 0, 205, 0, 0, 206,
	0, 0, 207, 326, 404, 208, 405, 705, 209, 210,
	211, 212, 213, 0, 214, 706, 215, 329, 216, 0,
	217, 218, 219, 220, 221, 736, 222, 223, 0, 224,
	225, 226, 227, 228, 230, 231, 229, 232, 233, 234,
	235, 0, 236, 406, 237, 238, 659, 239, 0, 243,
	244, 245, 246, 0, 248, 332, 247, 249, 250, 699,
	251, 240, 241, 252, 407, 253, 737, 334, 254, 0,
	260, 255, 256, 242, 257, 259, 738, 258, 707, 0,
	261, 0, 262, 263, 264, 265, 266, 267, 268, 0,
	337, 739, 740, 0, 0, 269, 270, 708, 709, 680,
	271, 272, 273, 274, 0, 0, 275, 276, 277, 278,
	700, 279, 0, 342, 280, 281, 282, 343, 741, 0,
	0, 283, 0, 0, 0, 0, 284, 285, 286, 287,
	288, 654, 0, 0, 0, 0, 0, 652, 0, 0,
	0, 0, 650, 651, 685, 674, 675, 672, 673, 664,
	0, 660, 0, 0, 0, 0, 663, 0, 0, 0,
	136, 137, 0, 138, 0, 0, 0, 0, 702, 667,
	0, 0, 0, 139, 140, 141, 2212, 717, 292, 718,
	142, 719, 720, 0, 143, 296, 297, 144, 145, 670,
	701, 721, 722, 300, 0, 146, 713, 0, 693, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 153, 0,
	395, 154, 2214, 0, 694, 695, 697, 0, 696, 698,
	156, 157, 348, 158, 723, 159, 724, 725, 0, 160,
	0, 161, 0, 162, 0, 0, 716, 164, 0, 165,
	0, 0, 0, 658, 166, 167, 168, 703, 704, 681,
	0, 0, 169, 170, 726, 727, 728, 0, 171, 0,
	172, 0, 0, 396, 0, 173, 714, 0, 312, 0,
	174, 175, 176, 177, 710, 712, 398, 0, 181, 0,
	178, 0, 397, 179, 729, 180, 730, 731, 732, 733,
	734, 0, 692, 0, 399, 182, 183, 184, 400, 185,
	186, 187, 0, 189, 188, 0, 715, 401, 190, 402,
	0, 191, 0, 0, 192, 0, 193, 194, 195, 197,
	323, 196, 403, 198, 199, 201, 200, 653, 0, 682,
	711, 202, 735, 203, 204, 0, 205, 0, 0, 206,
	0, 0, 207, 326, 404, 208, 405, 705, 209, 210,
	211, 212, 213, 0, 214, 706, 215, 329, 216, 0,
	217, 218, 219, 220, 221, 736, 222, 223, 0, 224,
	225, 226, 227, 228, 230, 231, 229, 232, 233, 234,
	235, 0, 236, 406, 237, 238, 659, 239, 0, 243,
	244, 245, 246, 0, 248, 332, 247, 249, 250, 699,
	251, 240, 241, 252, 407, 253, 737, 334, 254, 0,
	260, 255, 256, 242, 257, 259, 738, 258, 707, 0,
	261, 0, 262, 263, 264, 265, 266, 267, 268, 0,
	337, 739, 740, 0, 0, 269, 270, 708, 709, 680,
	271, 272, 2213, 274, 0, 0, 275, 276, 277, 278,
	700, 279, 0, 342, 280, 281, 282, 343, 741, 0,
	0, 283, 0, 0, 0, 0, 284, 285, 286, 287,
	288, 654, 0, 0, 0, 0, 0, 652, 0, 0,
	0, 0, 650, 651, 1318, 674, 675, 672, 673, 664,
	0, 660, 0, 0, 0, 0, 663, 0, 0, 0,
	136, 137, 0, 138, 0, 0, 0, 0, 702, 667,
	0, 0, 0, 139, 140, 141, 290, 717, 292, 718,
	142, 719, 720, 0, 143, 296, 297, 144, 145, 670,
	701, 721, 722, 300, 0, 146, 713, 0, 693, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 153, 0,
	395, 154, 155, 0, 694, 695, 697, 0, 696, 698,
	156, 157, 348, 158, 723, 1321, 724, 725, 0, 160,
	0, 161, 0, 162, 0, 0, 716, 164, 0, 165,
	0, 0, 0, 658, 166, 167, 168, 703, 704, 681,
	0, 0, 169, 170, 726, 727, 728, 0, 171, 0,
	172, 0, 0, 396, 0, 173, 714, 0, 312, 0,
	174, 175, 1322, 177, 710, 712, 398, 0, 181, 0,
	178, 0, 397, 179, 729, 180, 730, 731, 732, 733,
	734, 0, 692, 0, 399, 182, 183, 184, 400, 185,
	186, 187, 0, 189, 188, 0, 715, 401, 190, 402,
	0, 191, 0, 0, 192, 0, 193, 1323, 1320, 197,
	323, 196, 403, 198, 199, 201, 200, 653, 0, 682,
	711, 202, 735, 203, 204, 0, 205, 0, 0, 206,
	0, 0, 207, 326, 404, 208, 405, 705, 209, 210,
	211, 212, 213, 0, 214, 706, 215, 329, 216, 0,
	217, 218, 219, 220, 221, 736, 222, 223, 0, 224,
	225, 226, 227, 228, 230, 231, 229, 232, 233, 234,
	235, 0, 236, 406, 237, 238, 659, 239, 0, 243,
	244, 245, 1324, 0, 248, 332, 247, 249, 250, 699,
	251, 240, 241, 252, 407, 253, 737, 334, 254, 0,
	260, 255, 256, 242, 257, 259, 738, 258, 707, 0,
	261, 0, 262, 263, 264, 265, 266, 267, 268, 0,
	337, 739, 740, 0, 0, 269, 270, 708, 709, 680,
	271, 272, 273, 274, 0, 0, 275, 276, 277, 278,
	700, 279, 0, 342, 280, 281, 282, 343, 741, 0,
	0, 283, 0, 0, 0, 0, 284, 285, 286, 1319,
	288, 654, 0, 0, 0, 0, 0, 652, 0, 0,
	0, 0, 650, 651, 685, 674, 675, 672, 673, 664,
	0, 660, 0, 0, 0, 0, 663, 0, 0, 0,
	136, 137, 0, 138, 0, 0, 0, 0, 702, 667,
	0, 0, 0, 139, 140, 141, 290, 717, 292, 718,
	142, 719, 720, 0, 143, 296, 297, 144, 145, 670,
	701, 721, 722, 300, 0, 146, 713, 0, 693, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 153, 0,
	395, 154, 155, 0, 694, 695, 697, 0, 696, 698,
	156, 157, 348, 158, 723, 159, 724, 725, 0, 160,
	0, 161, 0, 162, 0, 0, 716, 164, 0, 165,
	0, 0, 0, 658, 166, 167, 168, 703, 704, 681,
	0, 0, 169, 170, 726, 727, 728, 0, 171, 0,
	172, 0, 0, 396, 0, 173, 714, 0, 312, 0,
	174, 175, 176, 177, 710, 712, 398, 0, 181, 0,
	178, 0, 397, 179, 729, 180, 730, 731, 732, 733,
	734, 0, 692, 0, 399, 182, 183, 184, 400, 185,
	186, 187, 0, 189, 188, 0, 715, 401, 190, 402,
	0, 191, 0, 0, 192, 0, 193, 194, 195, 197,
	323, 196, 403, 198, 199, 201, 200, 0, 0, 682,
	711, 202, 735, 203, 204, 0, 205, 0, 0, 206,
	0, 0, 207, 326, 404, 208, 405, 705, 209, 210,
	211, 212, 213, 0, 214, 706, 215, 329, 216, 0,
	217, 218, 219, 220, 221, 736, 222, 223, 0, 224,
	225, 226, 227, 228, 230, 231, 229, 232, 233, 234,
	235, 0, 236, 406, 237, 238, 1336, 239, 0, 243,
	244, 245, 246, 0, 248, 332, 247, 249, 250, 699,
	251, 240, 241, 252, 407, 253, 737, 334, 254, 0,
	260, 255, 256, 242, 257, 259, 738, 258, 707, 0,
	261, 0, 262, 263, 264, 265, 266, 267, 268, 0,
	337, 739, 740, 0, 0, 269, 270, 708, 709, 680,
	271, 272, 273, 274, 0, 0, 275, 276, 277, 278,
	700, 279, 0, 342, 280, 281, 282, 343, 741, 0,
	0, 283, 0, 0, 0, 0, 284, 285, 286, 287,
	288, 0, 0, 0, 0, 0, 0, 1334, 0, 0,
	0, 0, 1332, 1333, 685, 674, 675, 672, 673, 664,
	0, 1335, 0, 0, 0, 0, 663, 0, 0, 0,
	136, 137, 0, 138, 0, 0, 0, 0, 702, 667,
	0, 0, 0, 139, 140, 141, 290, 717, 292, 718,
	142, 719, 720, 0, 143, 296, 297, 144, 145, 0,
	701, 721, 722, 300, 0, 146, 713, 0, 693, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 153, 0,
	395, 154, 155, 0, 694, 695, 697, 0, 696, 698,
	156, 157, 348, 158, 723, 159, 724, 725, 0, 160,
	0, 161, 0, 162, 0, 0, 716, 164, 0, 165,
	0, 0, 0, 305, 166, 167, 168, 703, 704, 681,
	0, 0, 169, 170, 726, 727, 728, 0, 171, 0,
	172, 0, 0, 396, 0, 173, 714, 0, 312, 0,
	174, 175, 176, 177, 710, 712, 398, 0, 181, 0,
	178, 0, 397, 179, 729, 180, 730, 731, 732, 733,
	734, 0, 692, 0, 399, 182, 183, 184, 400, 185,
	186, 187, 0, 189, 188, 0, 715, 401, 190, 402,
	0, 191, 0, 0, 192, 0, 193, 194, 195, 197,
	323, 196, 403, 198, 199, 201, 200, 0, 0, 682,
	711, 202, 735, 203, 204, 0, 205, 0, 0, 206,
	0, 0, 207, 326, 404, 208, 405, 705, 209, 210,
	211, 212, 213, 0, 214, 706, 215, 329, 216, 0,
	217, 218, 219, 220, 221, 736, 222, 223, 0, 224,
	225, 226, 227, 228, 230, 231, 229, 232, 233, 234,
	235, 0, 236, 406, 237, 238, 1336, 239, 0, 243,
	244, 245, 246, 0, 248, 332, 247, 249, 250, 699,
	251, 240, 241, 252, 407, 253, 737, 334, 254, 0,
	260, 255, 256, 242, 257, 259, 738, 258, 707, 0,
	261, 0, 262, 263, 264, 265, 266, 267, 268, 0,
	337, 739, 740, 0, 0, 269, 270, 708, 709, 680,
	271, 272, 273, 274, 0, 0, 275, 276, 277, 278,
	700, 279, 0, 342, 280, 281, 282, 343, 741, 0,
	0, 283, 0, 0, 0, 0, 284, 285, 286, 287,
	288, 0, 0, 685, 674, 675, 672, 673, 664, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	137, 1335, 138, 0, 0, 0, 663, 702, 667, 0,
	0, 0, 139, 140, 141, 0, 717, 292, 718, 142,
	719, 720, 0, 143, 296, 297, 144, 145, 670, 701,
	721, 722, 300, 0, 146, 713, 0, 693, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 153, 0, 395,
	154, 2214, 0, 694, 695, 697, 0, 696, 698, 156,
	157, 348, 158, 723, 159, 724, 725, 0, 160, 0,
	161, 0, 162, 0, 0, 716, 164, 0, 165, 0,
	0, 0, 658, 166, 167, 168, 703, 704, 681, 0,
	0, 169, 170, 726, 727, 728, 0, 171, 0, 172,
	0, 0, 396, 0, 173, 714, 0, 312, 0, 174,
	175, 176, 177, 710, 712, 0, 0, 181, 0, 178,
	0, 397, 179, 729, 180, 730, 731, 732, 733, 734,
	0, 692, 0, 0, 182, 183, 184, 400, 185, 186,
	187, 0, 189, 188, 0, 715, 401, 190, 0, 0,
	191, 0, 0, 192, 0, 193, 194, 195, 197, 323,
	196, 403, 198, 199, 201, 200, 653, 0, 682, 711,
	202, 735, 203, 204, 0, 205, 0, 0, 206, 0,
	0, 207, 326, 404, 208, 405, 705, 209, 210, 211,
	212, 213, 0, 214, 706, 215, 329, 216, 0, 217,
	218, 219, 220, 221, 736, 222, 223, 0, 224, 225,
	226, 227, 228, 230, 231, 229, 232, 233, 234, 235,
	0, 236, 406, 237, 238, 659, 239, 0, 243, 244,
	245, 246, 0, 248, 332, 247, 249, 250, 699, 251,
	240, 241, 252, 0, 253, 737, 334, 254, 0, 260,
	255, 256, 242, 257, 259, 738, 258, 707, 0, 261,
	0, 262, 263, 264, 265, 266, 267, 268, 0, 337,
	739, 740, 0, 0, 269, 270, 708, 709, 680, 271,
	272, 2213, 274, 0, 0, 275, 276, 277, 278, 700,
	279, 0, 342, 280, 281, 282, 343, 741, 0, 0,
	283, 0, 0, 0, 0, 284, 285, 286, 287, 288,
	685, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 650, 651, 0, 0, 0, 136, 137, 0, 138,
	660, 0, 0, 0, 702, 663, 0, 0, 0, 139,
	140, 141, 290, 291, 292, 293, 142, 294, 295, 0,
	143, 296, 297, 144, 145, 0, 701, 298, 299, 300,
	0, 146, 713, 0, 693, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 153, 0, 395, 154, 155, 0,
	694, 695, 697, 0, 696, 698, 156, 157, 348, 158,
	302, 159, 303, 304, 0, 160, 0, 161, 0, 162,
	0, 0, 163, 164, 0, 165, 0, 0, 0, 305,
	166, 167, 168, 703, 704, 0, 0, 0, 169, 170,
	308, 309, 310, 0, 171, 0, 172, 0, 0, 396,
	0, 173, 714, 0, 312, 0, 174, 175, 176, 177,
	710, 712, 398, 0, 181, 0, 178, 0, 397, 179,
	315, 180, 316, 317, 318, 319, 320, 0, 321, 0,
	399, 182, 183, 184, 400, 185, 186, 187, 0, 189,
	188, 0, 715, 401, 190, 402, 0, 191, 0, 0,
	192, 0, 193, 194, 195, 197, 323, 196, 403, 198,
	199, 201, 200, 0, 0, 0, 711, 202, 325, 203,
	204, 0, 205, 0, 0, 206, 0, 0, 207, 326,
	404, 208, 405, 705, 209, 210, 211, 212, 213, 0,
	214, 706, 215, 329, 216, 0, 217, 218, 219, 220,
	221, 330, 222, 223, 0, 224, 225, 226, 227, 228,
	230, 231, 229, 232, 233, 234, 235, 0, 236, 406,
	237, 238, 331, 239, 0, 243, 244, 245, 246, 0,
	248, 332, 247, 249, 250, 699, 251, 240, 241, 252,
	407, 253, 333, 334, 254, 0, 260, 255, 256, 242,
	257, 259, 335, 258, 707, 0, 261, 0, 262, 263,
	264, 265, 266, 267, 268, 0, 337, 338, 339, 0,
	0, 269, 270, 708, 709, 0, 271, 272, 273, 274,
	0, 0, 275, 276, 277, 278, 700, 279, 0, 342,
	280, 281, 282, 343, 344, 0, 0, 283, 0, 569,
	0, 0, 284, 285, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 137, 0, 138, 0,
	0, 0, 0, 289, 0, 0, 0, 1828, 139, 140,
	141, 290, 291, 292, 293, 142, 294, 295, 0, 143,
	296, 297, 144, 145, 0, 0, 298, 299, 300, 0,
	146, 301, 0, 394, 0, 147, 148, 149, 0, 150,
	0, 151, 152, 153, 0, 395, 154, 155, 0, 0,
	0, 0, 0, 0, 0, 156, 157, 348, 158, 302,
	159, 303, 304, 0, 160, 0, 161, 0, 162, 0,
	0, 163, 164, 0, 165, 0, 0, 0, 305, 166,
	167, 168, 306, 307, 0, 0, 0, 169, 170, 308,
	309, 310, 0, 171, 0, 172, 0, 0, 396, 0,
	173, 311, 0, 312, 0, 174, 175, 176, 177, 313,
	314, 398, 0, 181, 0, 178, 0, 397, 179, 315,
	180, 316, 317, 318, 319, 320, 0, 321, 0, 399,
	182, 183, 184, 400, 185, 186, 187, 0, 189, 188,
	0, 322, 401, 190, 402, 0, 191, 0, 0, 192,
	0, 193, 194, 195, 197, 323, 196, 403, 198, 199,
	201, 200, 0, 0, 0, 324, 202, 325, 203, 204,
	0, 205, 0, 0, 206, 0, 0, 207, 326, 404,
	208, 405, 327, 209, 210, 211, 212, 213, 0, 214,
	328, 215, 329, 216, 0, 217, 218, 219, 220, 221,
	330, 222, 223, 0, 224, 225, 226, 227, 228, 230,
	231, 229, 232, 233, 234, 235, 0, 236, 406, 237,
	238, 331, 239, 0, 243, 244, 245, 246, 121, 248,
	332, 247, 249, 250, 0, 251, 240, 241, 252, 407,
	253, 333, 334, 254, 0, 260, 255, 256, 242, 257,
	259, 335, 258, 336, 0, 261, 123, 262, 263, 264,
	265, 266, 267, 268, 0, 337, 338, 339, 0, 0,
	269, 270, 340, 341, 0, 271, 272, 273, 274, 0,
	0, 275, 276, 277, 278, 0, 279, 0, 342, 280,
	281, 282, 645, 344, 0, 0, 283, 0, 0, 0,
	119, 284, 285, 286, 287, 288, 0, 120, 569, 566,
	0, 567, 562, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 137, 115, 138, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 139, 140, 141,
	290, 291, 292, 293, 142, 294, 295, 0, 143, 296,
	297, 144, 145, 0, 0, 298, 299, 300, 0, 146,
	301, 0, 394, 0, 147, 148, 149, 0, 150, 0,
	151, 152, 153, 0, 395, 154, 155, 0, 0, 0,
	0, 0, 0, 0, 156, 157, 348, 158, 302, 159,
	303, 304, 1079, 160, 0, 161, 0, 162, 0, 0,
	163, 164, 0, 165, 0, 0, 0, 305, 166, 167,
	168, 306, 307, 559, 0, 0, 169, 170, 308, 309,
	310, 0, 171, 0, 172, 0, 0, 396, 0, 173,
	311, 0, 312, 0, 174, 175, 176, 177, 313, 314,
	398, 0, 181, 0, 178, 0, 397, 179, 315, 180,
	316, 317, 318, 319, 320, 0, 321, 0, 399, 182,
	183, 184, 400, 185, 186, 187, 0, 189, 188, 0,
	322, 401, 190, 402, 0, 191, 0, 0, 192, 0,
	193, 194, 195, 197, 323, 196, 403, 198, 199, 201,
	200, 0, 0, 0, 324, 202, 325, 203, 204, 0,
	205, 560, 0, 206, 0, 0, 207, 326, 404, 208,
	405, 327, 209, 210, 211, 212, 213, 0, 214, 328,
	215, 329, 216, 0, 217, 218, 219, 220, 221, 330,
	222, 223, 0, 224, 225, 226, 227, 228, 230, 231,
	229, 232, 233, 234, 235, 0, 236, 406, 237, 238,
	331, 239, 0, 243, 244, 245, 246, 0, 248, 332,
	247, 249, 250, 0, 251, 240, 241, 252, 407, 253,
	333, 334, 254, 0, 260, 255, 256, 242, 257, 259,
	335, 258, 336, 0, 261, 0, 262, 263, 264, 265,
	266, 267, 268, 0, 337, 338, 339, 0, 0, 269,
	270, 340, 341, 558, 271, 272, 273, 274, 0, 0,
	275, 276, 277, 278, 0, 279, 0, 342, 280, 281,
	282, 343, 344, 0, 0, 283, 0, 0, 0, 0,
	284, 285, 286, 287, 288, 569, 566, 0, 567, 562,
	557, 0, 0, 0, 0, 0, 568, 563, 0, 0,
	0, 136, 137, 0, 138, 0, 0, 0, 0, 289,
	0, 0, 0, 0, 139, 140, 141, 290, 291, 292,
	293, 142, 294, 295, 0, 143, 296, 297, 144, 145,
	0, 0, 298, 299, 300, 0, 146, 301, 0, 394,
	0, 147, 148, 149, 0, 150, 0, 151, 152, 153,
	0, 395, 154, 155, 0, 0, 0, 0, 0, 0,
	0, 156, 157, 348, 158, 302, 159, 303, 304, 1076,
	160, 0, 161, 0, 162, 0, 0, 163, 164, 0,
	165, 0, 0, 0, 305, 166, 167, 168, 306, 307,
	559, 0, 0, 169, 170, 308, 309, 310, 0, 171,
	0, 172, 0, 0, 396, 0, 173, 311, 0, 312,
	0, 174, 175, 176, 177, 313, 314, 398, 0, 181,
	0, 178, 0, 397, 179, 315, 180, 316, 317, 318,
	319, 320, 0, 321, 0, 399, 182, 183, 184, 400,
	185, 186, 187, 0, 189, 188, 0, 322, 401, 190,
	402, 0, 191, 0, 0, 192, 0, 193, 194, 195,
	197, 323, 196, 403, 198, 199, 201, 200, 0, 0,
	0, 324, 202, 325, 203, 204, 0, 205, 560, 0,
	206, 0, 0, 207, 326, 404, 208, 405, 327, 209,
	210, 211, 212, 213, 0, 214, 328, 215, 329, 216,
	0, 217, 218, 219, 220, 221, 330, 222, 223, 0,
	224, 225, 226, 227, 228, 230, 231, 229, 232, 233,
	234, 235, 0, 236, 406, 237, 238, 331, 239, 0,
	243, 244, 245, 246, 0, 248, 332, 247, 249, 250,
	0, 251, 240, 241, 252, 407, 253, 333, 334, 254,
	0, 260, 255, 256, 242, 257, 259, 335, 258, 336,
	0, 261, 0, 262, 263, 264, 265, 266, 267, 268,
	0, 337, 338, 339, 0, 0, 269, 270, 340, 341,
	558, 271, 272, 273, 274, 0, 0, 275, 276, 277,
	278, 0, 279, 0, 342, 280, 281, 282, 343, 344,
	0, 0, 283, 0, 0, 0, 0, 284, 285, 286,
	287, 288, 569, 566, 0, 567, 562, 557, 0, 0,
	0, 0, 0, 568, 563, 0, 0, 0, 136, 137,
	0, 138, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 139, 140, 141, 290, 291, 292, 293, 142, 294,
	295, 0, 143, 296, 297, 144, 145, 0, 0, 298,
	299, 300, 0, 146, 301, 0, 394, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 153, 0, 395, 154,
	155, 0, 0, 0, 0, 0, 0, 0, 156, 157,
	348, 158, 302, 159, 303, 304, 775, 160, 0, 161,
	0, 162, 0, 0, 163, 164, 0, 165, 0, 0,
	0, 305, 166, 167, 168, 306, 307, 559, 0, 0,
	169, 170, 308, 309, 310, 0, 171, 0, 172, 0,
	0, 396, 0, 173, 311, 0, 312, 0, 174, 175,
	176, 177, 313, 314, 398, 0, 181, 0, 178, 0,
	397, 179, 315, 180, 316, 317, 318, 319, 320, 0,
	321, 0, 399, 182, 183, 184, 400, 185, 186, 187,
	0, 189, 188, 0, 322, 401, 190, 402, 0, 191,
	0, 0, 192, 0, 193, 194, 195, 197, 323, 196,
	403, 198, 199, 201, 200, 0, 0, 0, 324, 202,
	325, 203, 204, 0, 205, 560, 0, 206, 0, 0,
	207, 326, 404, 208, 405, 327, 209, 210, 211, 212,
	213, 0, 214, 328, 215, 329, 216, 0, 217, 218,
	219, 220, 221, 330, 222, 223, 0, 224, 225, 226,
	227, 228, 230, 231, 229, 232, 233, 234, 235, 0,
	236, 406, 237, 238, 331, 239, 0, 243, 244, 245,
	246, 0, 248, 332, 247, 249, 250, 0, 251, 240,
	241, 252, 407, 253, 333, 334, 254, 0, 260, 255,
	256, 242, 257, 259, 335, 258, 336, 0, 261, 0,
	262, 263, 264, 265, 266, 267, 268, 0, 337, 338,
	339, 0, 0, 269, 270, 340, 341, 558, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 0, 279,
	0, 342, 280, 281, 282, 343, 344, 0, 0, 283,
	0, 0, 0, 0, 284, 285, 286, 287, 288, 569,
	566, 0, 567, 562, 557, 0, 0, 0, 0, 0,
	568, 563, 0, 0, 0, 136, 137, 0, 138, 0,
	0, 0, 0, 289, 0, 0, 0, 0, 139, 140,
	141, 290, 291, 292, 293, 142, 294, 295, 0, 143,
	296, 297, 144, 145, 0, 0, 298, 299, 300, 0,
	146, 301, 0, 394, 0, 147, 148, 149, 0, 150,
	0, 151, 152, 153, 0, 395, 154, 155, 0, 0,
	0, 0, 0, 0, 0, 156, 157, 348, 158, 302,
	159, 303, 304, 0, 160, 0, 161, 0, 162, 0,
	0, 163, 164, 0, 165, 0, 0, 0, 305, 166,
	167, 168, 306, 307, 559, 0, 0, 169, 170, 308,
	309, 310, 0, 171, 0, 172, 0, 0, 396, 0,
	173, 311, 0, 312, 0, 174, 175, 176, 177, 313,
	314, 398, 0, 181, 0, 178, 0, 397, 179, 315,
	180, 316, 317, 318, 319, 320, 0, 321, 0, 399,
	182, 183, 184, 400, 185, 186, 187, 0, 189, 188,
	0, 322, 401, 190, 402, 0, 191, 0, 0, 192,
	0, 193, 194, 195, 197, 323, 196, 403, 198, 199,
	201, 200, 0, 0, 0, 324, 202, 325, 203, 204,
	0, 205, 560, 0, 206, 0, 0, 207, 326, 404,
	208, 405, 327, 209, 210, 211, 212, 213, 0, 214,
	328, 215, 329, 216, 0, 217, 218, 219, 220, 221,
	330, 222, 223, 0, 224, 225, 226, 227, 228, 230,
	231, 229, 232, 233, 234, 235, 0, 236, 406, 237,
	238, 331, 239, 0, 243, 244, 245, 246, 0, 248,
	332, 247, 249, 250, 0, 251, 240, 241, 252, 407,
	253, 333, 334, 254, 0, 260, 255, 256, 242, 257,
	259, 335, 258, 336, 0, 261, 0, 262, 263, 264,
	265, 266, 267, 268, 0, 337, 338, 339, 0, 0,
	269, 270, 340, 341, 558, 271, 272, 273, 274, 0,
	0, 275, 276, 277, 278, 0, 279, 0, 342, 280,
	281, 282, 343, 344, 0, 133, 283, 0, 0, 0,
	0, 284, 285, 286, 287, 288, 0, 0, 0, 0,
	0, 136, 137, 0, 138, 0, 0, 568, 563, 289,
	0, 0, 0, 0, 139, 140, 141, 290, 291, 292,
	293, 142, 294, 295, 0, 143, 296, 297, 144, 145,
	0, 0, 298, 299, 300, 0, 146, 301, 0, 0,
	0, 147, 148, 149, 0, 150, 0, 151, 152, 153,
	0, 0, 154, 155, 0, 0, 0, 0, 0, 0,
	0, 156, 157, 348, 158, 302, 159, 303, 304, 0,
	160, 0, 161, 0, 162, 0, 0, 163, 164, 0,
	165, 0, 0, 0, 305, 166, 167, 168, 306, 307,
	0, 0, 0, 169, 170, 308, 309, 310, 0, 171,
	0, 172, 0, 0, 0, 0, 173, 311, 0, 312,
	0, 174, 175, 176, 177, 313, 314, 0, 0, 181,
	0, 178, 0, 0, 179, 315, 180, 316, 317, 318,
	319, 320, 0, 321, 0, 0, 182, 183, 184, 0,
	185, 186, 187, 0, 189, 188, 0, 322, 0, 190,
	0, 0, 191, 0, 0, 192, 0, 193, 194, 195,
	197, 323, 196, 0, 198, 199, 201, 200, 0, 0,
	0, 324, 202, 325, 203, 204, 0, 205, 0, 614,
	206, 0, 0, 207, 326, 0, 208, 0, 327, 209,
	210, 211, 212, 213, 0, 214, 328, 215, 329, 216,
	0, 217, 218, 219, 220, 221, 330, 222, 223, 0,
	224, 225, 226, 227, 228, 230, 231, 229, 232, 233,
	234, 235, 0, 236, 0, 237, 238, 331, 239, 0,
	243, 244, 245, 246, 121, 248, 332, 247, 249, 250,
	0, 251, 240, 241, 252, 0, 253, 333, 334, 254,
	0, 260, 255, 256, 242, 257, 259, 335, 258, 336,
	0, 261, 123, 262, 263, 264, 265, 266, 267, 268,
	0, 337, 338, 339, 0, 0, 269, 270, 340, 341,
	0, 271, 272, 273, 274, 0, 0, 275, 276, 277,
	278, 0, 279, 0, 342, 280, 281, 282, 645, 344,
	0, 0, 283, 0, 133, 0, 119, 284, 285, 286,
	287, 288, 0, 120, 0, 0, 0, 0, 0, 0,
	136, 137, 0, 138, 0, 0, 0, 0, 289, 0,
	1467, 0, 1472, 139, 140, 141, 290, 291, 292, 293,
	142, 294, 295, 0, 143, 296, 297, 144, 145, 0,
	0, 298, 299, 300, 0, 146, 301, 0, 0, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 153, 0,
	0, 154, 155, 0, 0, 0, 0, 0, 0, 0,
	156, 157, 348, 158, 302, 159, 303, 304, 0, 160,
	0, 161, 0, 162, 0, 0, 163, 164, 0, 165,
	0, 0, 0, 305, 166, 167, 168, 306, 307, 0,
	0, 0, 169, 170, 308, 309, 310, 0, 171, 0,
	172, 0, 0, 0, 0, 173, 311, 0, 312, 0,
	174, 175, 176, 177, 313, 314, 0, 0, 181, 0,
	178, 0, 0, 179, 315, 180, 316, 317, 318, 319,
	320, 0, 321, 0, 0, 182, 183, 184, 0, 185,
	186, 187, 0, 189, 188, 0, 322, 0, 190, 0,
	0, 191, 0, 0, 192, 0, 193, 194, 195, 197,
	323, 196, 0, 198, 199, 201, 200, 0, 0, 0,
	324, 202, 325, 203, 204, 0, 205, 0, 0, 206,
	0, 0, 207, 326, 0, 208, 0, 327, 209, 210,
	211, 212, 213, 0, 214, 328, 215, 329, 216, 0,
	217, 218, 219, 220, 221, 330, 222, 223, 0, 224,
	225, 226, 227, 228, 230, 231, 229, 232, 233, 234,
	235, 0, 236, 0, 237, 238, 331, 239, 0, 243,
	244, 245, 246, 121, 248, 332, 247, 249, 250, 0,
	251, 240, 241, 252, 0, 253, 333, 334, 254, 0,
	260, 255, 256, 242, 257, 259, 335, 258, 336, 0,
	261, 123, 262, 263, 264, 265, 266, 267, 268, 0,
	337, 338, 339, 0, 0, 269, 270, 340, 341, 0,
	271, 272, 273, 274, 0, 0, 275, 276, 277, 278,
	0, 279, 0, 342, 280, 281, 282, 645, 344, 0,
	0, 283, 0, 133, 0, 119, 284, 285, 286, 287,
	288, 0, 120, 0, 0, 0, 0, 0, 0, 136,
	137, 0, 138, 0, 0, 0, 0, 289, 0, 0,
	0, 115, 139, 140, 141, 290, 291, 292, 293, 142,
	294, 295, 0, 143, 296, 297, 144, 145, 0, 0,
	298, 299, 300, 0, 146, 301, 0, 0, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 153, 0, 0,
	154, 155, 0, 0, 0, 0, 0, 0, 0, 156,
	157, 348, 158, 302, 159, 303, 304, 0, 160, 0,
	161, 0, 162, 0, 0, 163, 164, 0, 165, 0,
	0, 0, 305, 166, 167, 168, 306, 307, 0, 0,
	0, 169, 170, 308, 309, 310, 0, 171, 0, 172,
	0, 0, 0, 0, 173, 311, 0, 312, 0, 174,
	175, 176, 177, 313, 314, 0, 0, 181, 0, 178,
	0, 0, 179, 315, 180, 316, 317, 318, 319, 320,
	0, 321, 0, 0, 182, 183, 184, 0, 185, 186,
	187, 0, 189, 188, 0, 322, 0, 190, 0, 0,
	191, 0, 0, 192, 0, 193, 194, 195, 197, 323,
	196, 0, 198, 199, 201, 200, 0, 0, 0, 324,
	202, 325, 203, 204, 0, 205, 0, 614, 206, 0,
	0, 207, 326, 0, 208, 0, 327, 209, 210, 211,
	212, 213, 0, 214, 328, 215, 329, 216, 0, 217,
	218, 219, 220, 221, 330, 222, 223, 0, 224, 225,
	226, 227, 228, 230, 231, 229, 232, 233, 234, 235,
	0, 236, 0, 237, 238, 331, 239, 0, 243, 244,
	245, 246, 0, 248, 332, 247, 249, 250, 0, 251,
	240, 241, 252, 0, 253, 333, 334, 254, 0, 260,
	255, 256, 242, 257, 259, 335, 258, 336, 0, 261,
	0, 262, 263, 264, 265, 266, 267, 268, 0, 337,
	338, 339, 0, 0, 269, 270, 340, 341, 0, 271,
	272, 273, 274, 0, 0, 275, 276, 277, 278, 0,
	279, 0, 342, 280, 281, 282, 343, 344, 0, 0,
	283, 0, 133, 0, 0, 284, 285, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 137,
	0, 138, 0, 0, 0, 0, 289, 0, 1467, 0,
	1472, 139, 140, 141, 290, 291, 292, 293, 142, 294,
	295, 0, 143, 296, 297, 144, 145, 0, 0, 298,
	299, 300, 0, 146, 301, 0, 0, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 153, 0, 0, 154,
	155, 0, 0, 0, 0, 0, 0, 0, 156, 157,
	348, 158, 302, 159, 303, 304, 0, 160, 0, 161,
	0, 162, 0, 0, 163, 164, 0, 165, 0, 0,
	0, 305, 166, 167, 168, 306, 307, 0, 0, 0,
	169, 170, 308, 309, 310, 0, 171, 0, 172, 0,
	0, 0, 0, 173, 311, 0, 312, 0, 174, 175,
	176, 177, 313, 314, 0, 0, 181, 0, 178, 0,
	0, 179, 315, 180, 316, 317, 318, 319, 320, 0,
	321, 0, 0, 182, 183, 184, 0, 185, 186, 187,
	0, 189, 188, 0, 322, 0, 190, 0, 0, 191,
	0, 0, 192, 0, 193, 194, 195, 197, 323, 196,
	0, 198, 199, 201, 200, 0, 0, 0, 324, 202,
	325, 203, 204, 0, 205, 0, 0, 206, 0, 0,
	207, 326, 0, 208, 0, 327, 209, 210, 211, 212,
	213, 0, 214, 328, 215, 329, 216, 0, 217, 218,
	219, 220, 221, 330, 222, 223, 0, 224, 225, 226,
	227, 228, 230, 231, 229, 232, 233, 234, 235, 0,
	236, 0, 237, 238, 331, 239, 0, 243, 244, 245,
	246, 0, 248, 332, 247, 249, 250, 0, 251, 240,
	241, 252, 0, 253, 333, 334, 254, 0, 260, 255,
	256, 242, 257, 259, 335, 258, 336, 0, 261, 0,
	262, 263, 264, 265, 266, 267, 268, 0, 337, 338,
	339, 0, 0, 269, 270, 340, 341, 0, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 0, 279,
	0, 342, 280, 281, 282, 343, 344, 0, 0, 283,
	0, 0, 133, 0, 284, 285, 286, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 137,
	0, 138, 0, 0, 0, 0, 289, 0, 0, 0,
	887, 139, 140, 141, 290, 291, 292, 293, 142, 294,
	295, 0, 143, 296, 297, 144, 145, 0, 0, 298,
	299, 300, 0, 146, 301, 0, 0, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 153, 0, 0, 154,
	155, 0, 0, 0, 0, 0, 0, 0, 156, 157,
	348, 158, 302, 159, 303, 304, 0, 160, 0, 161,
	0, 162, 0, 0, 163, 164, 0, 165, 0, 0,
	0, 305, 166, 167, 168, 306, 307, 0, 0, 0,
	169, 170, 308, 309, 310, 0, 171, 0, 172, 0,
	0, 0, 0, 173, 311, 0, 312, 0, 174, 175,
	176, 177, 313, 314, 0, 0, 181, 0, 178, 0,
	0, 179, 315, 180, 316, 317, 318, 319, 320, 0,
	321, 0, 0, 182, 183, 184, 0, 185, 186, 187,
	0, 189, 188, 0, 322, 0, 190, 0, 0, 191,
	0, 0, 192, 0, 193, 194, 195, 197, 323, 196,
	0, 198, 199, 201, 200, 0, 0, 0, 324, 202,
	325, 203, 204, 0, 205, 0, 0, 206, 0, 0,
	207, 326, 0, 208, 0, 327, 209, 210, 211, 212,
	213, 0, 214, 328, 215, 329, 216, 0, 217, 218,
	219, 220, 221, 330, 222, 223, 0, 224, 225, 226,
	227, 228, 230, 231, 229, 232, 233, 234, 235, 0,
	236, 0, 237, 238, 331, 239, 0, 243, 244, 245,
	246, 0, 248, 332, 247, 249, 250, 0, 251, 240,
	241, 252, 0, 253, 333, 334, 254, 0, 260, 255,
	256, 242, 257, 259, 335, 258, 336, 0, 261, 0,
	262, 263, 264, 265, 266, 267, 268, 0, 337, 338,
	339, 0, 0, 269, 270, 340, 341, 0, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 0, 279,
	0, 342, 280, 281, 282, 343, 344, 0, 0, 283,
	0, 133, 0, 0, 284, 285, 286, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 137, 0,
	138, 0, 0, 0, 0, 289, 0, 0, 0, 1205,
	139, 140, 141, 290, 291, 292, 293, 142, 294, 295,
	0, 143, 296, 297, 144, 145, 0, 0, 298, 299,
	300, 0, 146, 301, 0, 0, 0, 147, 148, 149,
	0, 150, 0, 151, 152, 153, 0, 0, 154, 155,
	0, 0, 0, 0, 0, 0, 0, 156, 157, 348,
	158, 302, 159, 303, 304, 0, 160, 0, 161, 0,
	162, 0, 0, 163, 164, 0, 165, 0, 0, 0,
	305, 166, 167, 168, 306, 307, 0, 0, 0, 169,
	170, 308, 309, 310, 0, 171, 0, 172, 0, 0,
	0, 0, 173, 311, 0, 312, 0, 174, 175, 176,
	177, 313, 314, 0, 0, 181, 0, 178, 0, 0,
	179, 315, 180, 316, 317, 318, 319, 320, 0, 321,
	0, 0, 182, 183, 184, 0, 185, 186, 187, 0,
	189, 188, 0, 322, 0, 190, 0, 0, 191, 0,
	0, 192, 0, 193, 194, 195, 197, 323, 196, 0,
	198, 199, 201, 200, 0, 0, 0, 324, 202, 325,
	203, 204, 0, 205, 0, 0, 206, 0, 0, 207,
	326, 0, 208, 0, 327, 209, 210, 211, 212, 213,
	0, 214, 328, 215, 329, 216, 0, 217, 218, 219,
	220, 221, 330, 222, 223, 0, 224, 225, 226, 227,
	228, 230, 231, 229, 232, 233, 234, 235, 0, 236,
	0, 237, 238, 331, 239, 0, 243, 244, 245, 246,
	0, 248, 332, 247, 249, 250, 0, 251, 240, 241,
	252, 0, 253, 333, 334, 254, 0, 260, 255, 256,
	242, 257, 259, 335, 258, 336, 0, 261, 0, 262,
	263, 264, 265, 266, 267, 268, 0, 337, 338, 339,
	0, 0, 269, 270, 340, 341, 0, 271, 272, 273,
	274, 0, 0, 275, 276, 277, 278, 0, 279, 0,
	342, 280, 281, 282, 343, 344, 0, 0, 283, 0,
	133, 0, 0, 284, 285, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 137, 0, 138,
	0, 0, 0, 0, 289, 0, 0, 0, 1763, 139,
	140, 141, 290, 291, 292, 293, 142, 294, 295, 0,
	143, 296, 297, 144, 145, 0, 0, 298, 299, 300,
	0, 146, 301, 0, 0, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 153, 0, 0, 154, 155, 0,
	0, 0, 0, 0, 0, 0, 156, 157, 348, 158,
	302, 159, 303, 304, 0, 160, 0, 161, 0, 162,
	0, 0, 163, 164, 0, 165, 0, 0, 0, 305,
	166, 167, 168, 306, 307, 0, 0, 0, 169, 170,
	308, 309, 310, 0, 171, 0, 172, 0, 0, 0,
	0, 173, 311, 0, 312, 0, 174, 175, 176, 177,
	313, 314, 0, 0, 181, 0, 178, 0, 0, 179,
	315, 180, 316, 317, 318, 319, 320, 0, 321, 0,
	0, 182, 183, 184, 0, 185, 186, 187, 0, 189,
	188, 0, 322, 0, 190, 0, 0, 191, 0, 0,
	192, 0, 193, 194, 195, 197, 323, 196, 0, 198,
	199, 201, 200, 0, 0, 0, 324, 202, 325, 203,
	204, 0, 205, 0, 0, 206, 0, 0, 207, 326,
	0, 208, 0, 327, 209, 210, 211, 212, 213, 0,
	214, 328, 215, 329, 216, 0, 217, 218, 219, 220,
	221, 330, 222, 223, 0, 224, 225, 226, 227, 228,
	230, 231, 229, 232, 233, 234, 235, 0, 236, 0,
	237, 238, 331, 239, 0, 243, 244, 245, 246, 0,
	248, 332, 247, 249, 250, 0, 251, 240, 241, 252,
	0, 253, 333, 334, 254, 0, 260, 255, 256, 242,
	257, 259, 335, 258, 336, 0, 261, 0, 262, 263,
	264, 265, 266, 267, 268, 0, 337, 338, 339, 0,
	0, 269, 270, 340, 341, 0, 271, 272, 273, 274,
	0, 0, 275, 276, 277, 278, 0, 279, 0, 342,
	280, 281, 282, 343, 344, 0, 0, 283, 0, 0,
	0, 0, 284, 285, 286, 287, 288, 685, 674, 675,
	672, 673, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 137, 0, 138, 874, 0, 0,
	0, 289, 0, 0, 0, 0, 139, 140, 141, 290,
	717, 292, 718, 142, 719, 720, 0, 143, 296, 297,
	144, 145, 0, 0, 721, 722, 300, 0, 146, 301,
	0, 394, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 153, 0, 395, 154, 155, 0, 0, 0, 0,
	0, 0, 0, 156, 157, 348, 158, 723, 159, 724,
	725, 0, 160, 0, 161, 0, 162, 0, 0, 716,
	164, 0, 165, 0, 0, 0, 305, 166, 167, 168,
	306, 307, 681, 0, 0, 169, 170, 726, 727, 728,
	0, 171, 0, 172, 0, 0, 396, 0, 173, 311,
	0, 312, 0, 174, 175, 176, 177, 313, 314, 398,
	0, 181, 0, 178, 0, 397, 179, 729, 180, 730,
	731, 732, 733, 734, 0, 692, 0, 399, 182, 183,
	184, 400, 185, 186, 187, 0, 189, 188, 0, 322,
	401, 190, 402, 0, 191, 0, 0, 192, 0, 193,
	194, 195, 197, 323, 196, 403, 198, 199, 201, 200,
	0, 0, 682, 324, 202, 735, 203, 204, 0, 205,
	0, 0, 206, 0, 0, 207, 326, 404, 208, 405,
	327, 209, 210, 211, 212, 213, 0, 214, 328, 215,
	329, 216, 0, 217, 218, 219, 220, 221, 736, 222,
	223, 0, 224, 225, 226, 227, 228, 230, 231, 229,
	232, 233, 234, 235, 0, 236, 406, 237, 238, 331,
	239, 0, 243, 244, 245, 246, 0, 248, 332, 247,
	249, 250, 0, 251, 240, 241, 252, 407, 253, 737,
	334, 254, 0, 260, 255, 256, 242, 257, 259, 738,
	258, 336, 0, 261, 0, 262, 263, 264, 265, 266,
	267, 268, 0, 337, 739, 740, 0, 0, 269, 270,
	340, 341, 680, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 0, 279, 0, 342, 280, 281, 282,
	343, 741, 569, 566, 283, 0, 0, 829, 0, 284,
	285, 286, 287, 288, 0, 0, 0, 0, 136, 137,
	0, 138, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 139, 140, 141, 290, 291, 292, 293, 142, 294,
	295, 0, 143, 296, 297, 144, 145, 0, 0, 298,
	299, 300, 0, 146, 301, 0, 394, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 153, 0, 395, 154,
	155, 0, 0, 0, 0, 0, 0, 0, 156, 157,
	348, 158, 302, 159, 303, 304, 0, 160, 0, 161,
	0, 162, 0, 0, 163, 164, 0, 165, 0, 0,
	0, 305, 166, 167, 168, 306, 307, 0, 0, 0,
	169, 170, 308, 309, 310, 0, 171, 0, 172, 0,
	0, 396, 0, 173, 311, 0, 312, 0, 174, 175,
	176, 177, 313, 314, 398, 0, 181, 0, 178, 0,
	397, 179, 315, 180, 316, 317, 318, 319, 320, 0,
	321, 0, 399, 182, 183, 184, 400, 185, 186, 187,
	0, 189, 188, 0, 322, 401, 190, 402, 0, 191,
	0, 0, 192, 0, 193, 194, 195, 197, 323, 196,
	403, 198, 199, 201, 200, 0, 0, 0, 324, 202,
	325, 203, 204, 0, 205, 0, 0, 206, 0, 0,
	207, 326, 404, 208, 405, 327, 209, 210, 211, 212,
	213, 0, 214, 328, 215, 329, 216, 0, 217, 218,
	219, 220, 221, 330, 222, 223, 0, 224, 225, 226,
	227, 228, 230, 231, 229, 232, 233, 234, 235, 0,
	236, 406, 237, 238, 331, 239, 0, 243, 244, 245,
	246, 0, 248, 332, 247, 249, 250, 0, 251, 240,
	241, 252, 407, 253, 333, 334, 254, 0, 260, 255,
	256, 242, 257, 259, 335, 258, 336, 0, 261, 0,
	262, 263, 264, 265, 266, 267, 268, 0, 337, 338,
	339, 0, 0, 269, 270, 340, 341, 0, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 0, 279,
	0, 342, 280, 281, 282, 343, 344, 133, 0, 283,
	0, 0, 0, 0, 284, 285, 286, 287, 288, 0,
	0, 0, 0, 136, 137, 0, 138, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 139, 140, 141, 290,
	291, 292, 293, 142, 294, 295, 0, 143, 296, 297,
	144, 145, 0, 0, 298, 299, 300, 0, 146, 301,
	0, 0, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 153, 0, 0, 154, 155, 0, 0, 0, 0,
	0, 0, 0, 156, 157, 129, 158, 302, 159, 303,
	304, 0, 160, 0, 161, 0, 162, 0, 0, 163,
	164, 0, 165, 0, 0, 0, 305, 166, 167, 168,
	306, 307, 0, 0, 0, 169, 170, 308, 309, 310,
	0, 171, 0, 172, 0, 0, 0, 0, 173, 311,
	0, 312, 0, 174, 175, 176, 177, 313, 314, 0,
	0, 181, 0, 178, 0, 0, 179, 315, 180, 316,
	317, 318, 319, 320, 0, 321, 0, 0, 182, 183,
	184, 0, 185, 186, 187, 0, 189, 188, 0, 322,
	0, 190, 0, 0, 191, 0, 0, 192, 0, 193,
	194, 195, 197, 323, 196, 0, 198, 199, 201, 200,
	0, 0, 0, 324, 202, 325, 203, 204, 0, 205,
	0, 0, 206, 0, 0, 207, 326, 0, 208, 0,
	327, 209, 210, 211, 212, 213, 0, 214, 328, 215,
	329, 216, 0, 217, 218, 219, 220, 221, 330, 222,
	223, 0, 224, 225, 226, 227, 228, 230, 231, 229,
	232, 233, 234, 235, 0, 236, 0, 237, 238, 331,
	239, 0, 243, 244, 245, 246, 0, 248, 332, 247,
	249, 250, 0, 251, 240, 241, 252, 0, 253, 333,
	334, 254, 0, 260, 255, 256, 242, 257, 259, 335,
	258, 336, 0, 261, 128, 262, 263, 264, 265, 266,
	267, 268, 0, 337, 338, 339, 0, 0, 269, 270,
	340, 341, 0, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 0, 279, 0, 342, 280, 281, 282,
	343, 344, 569, 566, 283, 0, 0, 0, 0, 284,
	285, 286, 287, 288, 0, 0, 0, 0, 136, 137,
	0, 138, 0, 0, 0, 0, 289, 132, 0, 0,
	0, 139, 140, 141, 290, 291, 292, 293, 142, 294,
	295, 0, 143, 296, 297, 144, 145, 0, 0, 298,
	299, 300, 0, 146, 301, 0, 394, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 153, 0, 395, 154,
	155, 0, 0, 0, 0, 0, 0, 0, 156, 157,
	348, 158, 302, 159, 303, 304, 0, 160, 0, 161,
	0, 162, 0, 0, 163, 164, 0, 165, 0, 0,
	0, 305, 166, 167, 168, 306, 307, 0, 0, 0,
	169, 170, 308, 309, 310, 0, 171, 0, 172, 0,
	0, 396, 0, 173, 311, 0, 312, 0, 174, 175,
	176, 177, 313, 314, 398, 0, 181, 0, 178, 0,
	397, 179, 315, 180, 316, 317, 318, 319, 320, 0,
	321, 0, 399, 182, 183, 184, 400, 185, 186, 187,
	0, 189, 188, 0, 322, 401, 190, 402, 0, 191,
	0, 0, 192, 0, 193, 194, 195, 197, 323, 196,
	403, 198, 199, 201, 200, 0, 0, 0, 324, 202,
	325, 203, 204, 0, 205, 0, 0, 206, 0, 0,
	207, 326, 404, 208, 405, 327, 209, 210, 211, 212,
	213, 0, 214, 328, 215, 329, 216, 0, 217, 218,
	219, 220, 221, 330, 222, 223, 0, 224, 225, 226,
	227, 228, 230, 231, 229, 232, 233, 234, 235, 0,
	236, 406, 237, 238, 331, 239, 0, 243, 244, 245,
	246, 0, 248, 332, 247, 249, 250, 0, 251, 240,
	241, 252, 407, 253, 333, 334, 254, 0, 260, 255,
	256, 242, 257, 259, 335, 258, 336, 0, 261, 0,
	262, 263, 264, 265, 266, 267, 268, 0, 337, 338,
	339, 0, 0, 269, 270, 340, 341, 0, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 0, 279,
	0, 342, 280, 281, 282, 343, 344, 133, 0, 283,
	0, 0, 0, 0, 284, 285, 286, 287, 288, 0,
	0, 0, 0, 136, 137, 0, 138, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 139, 140, 141, 290,
	291, 292, 293, 142, 294, 295, 0, 143, 296, 297,
	144, 145, 0, 0, 298, 299, 300, 0, 146, 301,
	0, 0, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 153, 0, 0, 154, 155, 0, 0, 0, 0,
	0, 0, 0, 156, 157, 348, 158, 302, 159, 303,
	304, 0, 160, 0, 161, 0, 162, 0, 0, 163,
	164, 0, 165, 0, 0, 0, 305, 166, 167, 168,
	306, 307, 0, 0, 0, 169, 170, 308, 309, 310,
	0, 171, 0, 172, 0, 0, 0, 0, 173, 311,
	0, 312, 0, 174, 175, 176, 177, 313, 314, 0,
	0, 181, 0, 178, 0, 0, 179, 315, 180, 316,
	317, 318, 319, 320, 0, 321, 0, 0, 182, 183,
	184, 0, 185, 186, 187, 0, 189, 188, 0, 322,
	0, 190, 0, 0, 191, 0, 0, 192, 0, 193,
	194, 195, 197, 323, 196, 0, 198, 199, 201, 200,
	0, 0, 0, 324, 202, 325, 203, 204, 0, 205,
	0, 0, 206, 0, 0, 207, 326, 0, 208, 0,
	327, 209, 210, 211, 212, 213, 0, 214, 328, 215,
	329, 216, 0, 217, 218, 219, 220, 221, 330, 222,
	223, 0, 224, 225, 226, 227, 228, 230, 231, 229,
	232, 233, 234, 235, 0, 236, 0, 237, 238, 331,
	239, 0, 243, 244, 245, 246, 0, 248, 332, 247,
	249, 250, 0, 251, 240, 241, 252, 0, 253, 333,
	334, 254, 0, 260, 255, 256, 242, 257, 259, 335,
	258, 336, 0, 261, 0, 262, 263, 264, 265, 266,
	267, 268, 0, 337, 338, 339, 0, 0, 269, 270,
	340, 341, 0, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 0, 279, 0, 342, 280, 281, 282,
	343, 344, 569, 0, 283, 0, 0, 0, 0, 284,
	285, 286, 287, 288, 0, 0, 0, 0, 136, 137,
	0, 138, 0, 0, 0, 0, 289, 132, 0, 0,
	0, 139, 140, 141, 290, 291, 292, 293, 142, 294,
	295, 0, 143, 296, 297, 144, 145, 0, 0, 298,
	299, 300, 0, 146, 301, 0, 394, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 153, 0, 395, 154,
	155, 0, 0, 0, 0, 0, 0, 0, 156, 157,
	348, 158, 302, 159, 303, 304, 0, 160, 0, 161,
	0, 162, 0, 0, 163, 164, 0, 165, 0, 0,
	0, 305, 166, 167, 168, 306, 307, 0, 0, 0,
	169, 170, 308, 309, 310, 0, 171, 0, 172, 0,
	0, 396, 0, 173, 311, 0, 312, 0, 174, 175,
	176, 177, 313, 314, 398, 0, 181, 0, 178, 0,
	397, 179, 315, 180, 316, 317, 318, 319, 320, 0,
	321, 0, 399, 182, 183, 184, 400, 185, 186, 187,
	0, 189, 188, 0, 322, 401, 190, 402, 0, 191,
	0, 0, 192, 0, 193, 194, 195, 197, 323, 196,
	403, 198, 199, 201, 200, 0, 0, 0, 324, 202,
	325, 203, 204, 0, 205, 0, 0, 206, 0, 0,
	207, 326, 404, 208, 405, 327, 209, 210, 211, 212,
	213, 0, 214, 328, 215, 329, 216, 0, 217, 218,
	219, 220, 221, 330, 222, 223, 0, 224, 225, 226,
	227, 228, 230, 231, 229, 232, 233, 234, 235, 0,
	236, 406, 237, 238, 331, 239, 0, 243, 244, 245,
	246, 0, 248, 332, 247, 249, 250, 0, 251, 240,
	241, 252, 407, 253, 333, 334, 254, 0, 260, 255,
	256, 242, 257, 259, 335, 258, 336, 0, 261, 0,
	262, 263, 264, 265, 266, 267, 268, 0, 337, 338,
	339, 0, 0, 269, 270, 340, 341, 0, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 0, 279,
	0, 342, 280, 281, 282, 343, 344, 133, 0, 283,
	0, 0, 0, 0, 284, 285, 286, 287, 288, 0,
	0, 0, 0, 136, 137, 0, 138, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 139, 140, 141, 290,
	291, 292, 293, 142, 294, 295, 0, 143, 296, 297,
	144, 145, 0, 0, 298, 299, 300, 1393, 146, 301,
	0, 0, 0, 147, 148, 149, 0, 150, 1391, 151,
	152, 153, 0, 0, 154, 155, 0, 0, 0, 0,
	0, 0, 0, 156, 157, 348, 158, 302, 159, 303,
	304, 0, 160, 0, 161, 0, 162, 0, 0, 163,
	164, 0, 165, 0, 0, 0, 305, 166, 167, 168,
	306, 307, 0, 1390, 0, 169, 170, 308, 309, 310,
	0, 171, 0, 172, 1395, 0, 0, 0, 173, 311,
	0, 312, 0, 174, 175, 176, 177, 313, 314, 0,
	0, 181, 1388, 178, 0, 0, 179, 315, 180, 316,
	317, 318, 319, 320, 0, 321, 0, 0, 182, 183,
	184, 0, 185, 186, 187, 0, 189, 188, 0, 322,
	0, 190, 0, 0, 191, 0, 0, 192, 0, 193,
	194, 195, 197, 323, 196, 0, 198, 199, 201, 200,
	0, 0, 0, 324, 202, 325, 203, 204, 0, 205,
	0, 0, 206, 0, 0, 207, 326, 0, 208, 0,
	327, 209, 210, 211, 212, 213, 0, 214, 328, 215,
	329, 216, 1394, 217, 218, 219, 220, 221, 330, 222,
	223, 0, 224, 225, 226, 227, 228, 230, 231, 229,
	232, 233, 234, 235, 0, 236, 0, 237, 238, 331,
	239, 0, 243, 244, 245, 246, 0, 248, 332, 247,
	249, 250, 0, 251, 240, 241, 252, 0, 253, 333,
	334, 254, 0, 260, 255, 256, 242, 257, 259, 335,
	258, 336, 0, 261, 0, 262, 263, 264, 265, 266,
	267, 268, 0, 337, 338, 339, 0, 0, 269, 270,
	340, 341, 0, 271, 272, 273, 274, 0, 1389, 275,
	276, 277, 278, 0, 279, 0, 342, 280, 281, 282,
	343, 344, 133, 0, 283, 0, 0, 0, 0, 284,
	285, 286, 287, 288, 0, 0, 0, 0, 136, 137,
	0, 138, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 139, 140, 141, 290, 291, 292, 293, 142, 294,
	295, 0, 143, 296, 297, 144, 145, 0, 0, 298,
	299, 300, 1393, 146, 301, 0, 0, 1440, 147, 148,
	149, 0, 150, 1391, 151, 152, 153, 0, 0, 154,
	155, 0, 0, 0, 0, 0, 0, 0, 156, 157,
	348, 158, 302, 159, 303, 304, 0, 160, 0, 161,
	0, 162, 0, 0, 163, 164, 0, 165, 0, 0,
	0, 305, 166, 167, 168, 306, 307, 0, 0, 0,
	169, 170, 308, 309, 310, 0, 171, 0, 172, 1395,
	0, 0, 0, 173, 311, 0, 312, 0, 174, 175,
	176, 177, 1439, 314, 0, 0, 181, 0, 178, 0,
	0, 179, 315, 180, 316, 317, 318, 319, 320, 0,
	321, 0, 0, 182, 183, 184, 0, 185, 186, 187,
	0, 189, 188, 0, 322, 0, 190, 0, 0, 191,
	0, 0, 192, 0, 193, 194, 195, 197, 323, 196,
	0, 198, 199, 201, 200, 0, 0, 0, 324, 202,
	325, 203, 204, 0, 205, 0, 0, 206, 0, 0,
	207, 326, 0, 208, 0, 327, 209, 210, 211, 212,
	213, 0, 214, 328, 215, 329, 216, 1394, 217, 218,
	219, 220, 221, 330, 222, 223, 0, 224, 225, 226,
	227, 228, 230, 231, 229, 232, 233, 234, 235, 0,
	236, 0, 237, 238, 331, 239, 0, 243, 244, 245,
	246, 0, 248, 332, 247, 249, 250, 0, 251, 240,
	241, 252, 0, 253, 333, 334, 254, 0, 260, 255,
	256, 242, 257, 259, 335, 258, 336, 0, 261, 0,
	262, 263, 264, 265, 266, 267, 268, 0, 337, 338,
	339, 0, 0, 269, 270, 340, 341, 0, 271, 272,
	273, 274, 0, 1443, 275, 276, 277, 278, 0, 279,
	0, 342, 280, 281, 282, 343, 344, 133, 0, 283,
	0, 0, 0, 0, 284, 285, 286, 287, 288, 0,
	0, 0, 0, 136, 137, 0, 138, 0, 0, 0,
	0, 289, 0, 1895, 0, 0, 139, 140, 141, 290,
	291, 292, 293, 142, 294, 295, 0, 143, 296, 297,
	144, 145, 0, 0, 298, 299, 300, 0, 146, 301,
	0, 0, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 153, 0, 0, 154, 155, 0, 0, 0, 0,
	0, 0, 0, 156, 157, 348, 158, 302, 159, 303,
	304, 0, 160, 0, 161, 0, 162, 0, 0, 163,
	164, 0, 165, 0, 0, 0, 305, 166, 167, 168,
	306, 307, 0, 0, 0, 169, 170, 308, 309, 310,
	0, 171, 0, 172, 0, 0, 0, 0, 173, 311,
	0, 312, 0, 174, 175, 176, 177, 313, 314, 0,
	0, 181, 0, 178, 0, 0, 179, 315, 180, 316,
	317, 318, 319, 320, 0, 321, 0, 0, 182, 183,
	184, 0, 185, 186, 187, 0, 189, 188, 0, 322,
	0, 190, 0, 0, 191, 0, 0, 192, 0, 193,
	194, 195, 197, 323, 196, 0, 198, 199, 201, 200,
	0, 0, 0, 324, 202, 325, 203, 204, 0, 205,
	0, 0, 206, 0, 0, 207, 326, 0, 208, 0,
	327, 209, 210, 211, 212, 213, 0, 214, 328, 215,
	329, 216, 0, 217, 218, 219, 220, 221, 330, 222,
	223, 0, 224, 225, 226, 227, 228, 230, 231, 229,
	232, 233, 234, 235, 0, 236, 0, 237, 238, 331,
	239, 0, 243, 244, 245, 246, 0, 248, 332, 247,
	249, 250, 0, 251, 240, 241, 252, 0, 253, 333,
	334, 254, 0, 260, 255, 256, 242, 257, 259, 335,
	258, 336, 0, 261, 0, 262, 263, 264, 265, 266,
	267, 268, 0, 337, 338, 339, 0, 0, 269, 270,
	340, 341, 0, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 0, 279, 0, 342, 280, 281, 282,
	343, 344, 133, 0, 283, 0, 0, 0, 0, 284,
	285, 286, 287, 288, 0, 0, 0, 0, 136, 137,
	0, 138, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 139, 140, 141, 290, 291, 292, 293, 142, 294,
	295, 0, 143, 296, 297, 144, 145, 0, 0, 298,
	299, 300, 0, 146, 301, 0, 0, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 153, 0, 0, 154,
	155, 0, 0, 0, 0, 0, 0, 0, 156, 157,
	348, 158, 302, 159, 303, 304, 0, 160, 0, 161,
	0, 162, 0, 0, 163, 164, 0, 165, 0, 0,
	0, 305, 166, 167, 168, 306, 307, 0, 0, 0,
	169, 170, 308, 309, 310, 0, 171, 0, 172, 0,
	0, 0, 0, 173, 311, 0, 312, 0, 174, 175,
	176, 177, 313, 314, 0, 0, 181, 0, 178, 0,
	0, 179, 315, 180, 316, 317, 318, 319, 320, 0,
	321, 0, 0, 182, 183, 184, 0, 185, 186, 187,
	0, 189, 188, 0, 322, 0, 190, 0, 0, 191,
	0, 0, 192, 0, 193, 194, 195, 197, 323, 196,
	0, 198, 199, 201, 200, 0, 0, 0, 324, 202,
	325, 203, 204, 0, 205, 0, 614, 206, 0, 0,
	207, 326, 0, 208, 0, 327, 209, 210, 211, 212,
	213, 0, 214, 328, 215, 329, 216, 0, 217, 218,
	219, 220, 221, 330, 222, 223, 0, 224, 225, 226,
	227, 228, 230, 231, 229, 232, 233, 234, 235, 0,
	236, 0, 237, 238, 331, 239, 0, 243, 244, 245,
	246, 0, 248, 332, 247, 249, 250, 0, 251, 240,
	241, 252, 0, 253, 333, 334, 254, 0, 260, 255,
	256, 242, 257, 259, 335, 258, 336, 0, 261, 0,
	262, 263, 264, 265, 266, 267, 268, 0, 337, 338,
	339, 0, 0, 269, 270, 340, 341, 0, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 0, 279,
	0, 342, 280, 281, 282, 343, 344, 133, 0, 283,
	0, 0, 0, 0, 284, 285, 286, 287, 288, 0,
	0, 0, 0, 136, 137, 1132, 138, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 139, 140, 141, 290,
	291, 292, 293, 142, 294, 295, 0, 143, 296, 297,
	144, 145, 0, 0, 298, 299, 300, 0, 146, 301,
	0, 0, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 153, 0, 0, 154, 155, 0, 0, 0, 0,
	0, 0, 0, 156, 157, 348, 158, 302, 159, 303,
	304, 0, 160, 0, 161, 0, 162, 0, 0, 163,
	164, 0, 165, 0, 0, 0, 305, 166, 167, 168,
	306, 307, 0, 0, 0, 169, 170, 308, 309, 310,
	0, 171, 0, 172, 0, 0, 0, 0, 173, 311,
	0, 312, 0, 174, 175, 176, 177, 313, 314, 0,
	0, 181, 0, 178, 0, 0, 179, 315, 180, 316,
	317, 318, 319, 320, 0, 321, 0, 0, 182, 183,
	184, 0, 185, 186, 187, 0, 189, 188, 0, 322,
	0, 190, 0, 0, 191, 0, 0, 192, 0, 193,
	194, 195, 197, 323, 196, 0, 198, 199, 201, 200,
	0, 0, 0, 324, 202, 325, 203, 204, 0, 205,
	0, 0, 206, 0, 0, 207, 326, 0, 208, 0,
	327, 209, 210, 211, 212, 213, 0, 214, 328, 215,
	329, 216, 0, 217, 218, 219, 220, 221, 330, 222,
	223, 0, 224, 225, 226, 227, 228, 230, 231, 229,
	232, 233, 234, 235, 0, 236, 0, 237, 238, 331,
	239, 0, 243, 244, 245, 246, 0, 248, 332, 247,
	249, 250, 0, 251, 240, 241, 252, 0, 253, 333,
	334, 254, 0, 260, 255, 256, 242, 257, 259, 335,
	258, 336, 0, 261, 0, 262, 263, 264, 265, 266,
	267, 268, 0, 337, 338, 339, 0, 0, 269, 270,
	340, 341, 0, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 0, 279, 0, 342, 280, 281, 282,
	343, 344, 133, 0, 283, 0, 0, 0, 0, 284,
	285, 286, 287, 288, 0, 0, 0, 0, 136, 137,
	0, 138, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 139, 140, 141, 290, 291, 292, 293, 142, 294,
	295, 0, 143, 296, 297, 144, 145, 0, 0, 298,
	299, 300, 0, 146, 301, 0, 0, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 153, 0, 0, 154,
	155, 0, 0, 0, 0, 0, 0, 0, 156, 157,
	348, 158, 302, 159, 303, 304, 0, 160, 0, 161,
	0, 162, 0, 0, 163, 164, 0, 165, 0, 0,
	0, 305, 166, 167, 168, 306, 307, 0, 0, 0,
	169, 170, 308, 309, 310, 0, 171, 0, 172, 0,
	0, 0, 0, 173, 311, 0, 312, 0, 174, 175,
	176, 177, 861, 314, 0, 0, 181, 0, 178, 0,
	0, 179, 315, 180, 316, 317, 318, 319, 320, 0,
	321, 0, 0, 182, 183, 184, 0, 185, 186, 187,
	0, 189, 188, 0, 322, 0, 190, 0, 0, 191,
	0, 0, 192, 0, 193, 194, 195, 197, 323, 196,
	0, 198, 199, 201, 200, 0, 0, 0, 324, 202,
	325, 203, 204, 0, 205, 0, 614, 206, 0, 0,
	207, 326, 0, 208, 0, 327, 209, 210, 211, 212,
	213, 0, 214, 328, 215, 329, 216, 0, 217, 218,
	219, 220, 221, 330, 222, 223, 0, 224, 225, 226,
	227, 228, 230, 231, 229, 232, 233, 234, 235, 0,
	236, 0, 237, 238, 331, 239, 0, 243, 244, 245,
	246, 0, 248, 332, 247, 249, 250, 0, 251, 240,
	241, 252, 0, 253, 333, 334, 254, 0, 260, 255,
	256, 242, 257, 259, 335, 258, 336, 0, 261, 0,
	262, 263, 264, 265, 266, 267, 268, 0, 337, 338,
	339, 0, 0, 269, 270, 340, 341, 0, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 0, 279,
	0, 342, 280, 281, 282, 343, 344, 133, 0, 283,
	0, 0, 0, 0, 284, 285, 286, 287, 288, 0,
	0, 0, 0, 136, 137, 0, 138, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 139, 140, 141, 290,
	291, 292, 293, 142, 294, 295, 0, 143, 296, 297,
	144, 145, 0, 0, 298, 299, 300, 0, 146, 301,
	0, 0, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 153, 0, 0, 154, 155, 0, 0, 0, 0,
	0, 0, 0, 156, 157, 348, 158, 302, 159, 303,
	304, 0, 160, 0, 161, 0, 162, 0, 0, 163,
	164, 0, 165, 0, 0, 0, 305, 166, 167, 168,
	306, 307, 0, 0, 0, 169, 170, 308, 309, 310,
	0, 171, 0, 172, 0, 0, 0, 0, 173, 311,
	0, 312, 0, 174, 175, 176, 177, 855, 314, 0,
	0, 181, 0, 178, 0, 0, 179, 315, 180, 316,
	317, 318, 319, 320, 0, 321, 0, 0, 182, 183,
	184, 0, 185, 186, 187, 0, 189, 188, 0, 322,
	0, 190, 0, 0, 191, 0, 0, 192, 0, 193,
	194, 195, 197, 323, 196, 0, 198, 199, 201, 200,
	0, 0, 0, 324, 202, 325, 203, 204, 0, 205,
	0, 614, 206, 0, 0, 207, 326, 0, 208, 0,
	327, 209, 210, 211, 212, 213, 0, 214, 328, 215,
	329, 216, 0, 217, 218, 219, 220, 221, 330, 222,
	223, 0, 224, 225, 226, 227, 228, 230, 231, 229,
	232, 233, 234, 235, 0, 236, 0, 237, 238, 331,
	239, 0, 243, 244, 245, 246, 0, 248, 332, 247,
	249, 250, 0, 251, 240, 241, 252, 0, 253, 333,
	334, 254, 0, 260, 255, 256, 242, 257, 259, 335,
	258, 336, 0, 261, 0, 262, 263, 264, 265, 266,
	267, 268, 0, 337, 338, 339, 0, 0, 269, 270,
	340, 341, 0, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 0, 279, 0, 342, 280, 281, 282,
	343, 344, 133, 0, 283, 0, 0, 0, 0, 284,
	285, 286, 287, 288, 0, 0, 0, 0, 136, 137,
	634, 138, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 139, 140, 141, 290, 291, 292, 293, 142, 294,
	295, 0, 143, 296, 297, 144, 145, 0, 0, 298,
	299, 300, 0, 146, 301, 0, 0, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 153, 0, 0, 154,
	155, 0, 0, 0, 0, 0, 0, 0, 156, 157,
	348, 158, 302, 159, 303, 304, 0, 160, 0, 161,
	0, 162, 0, 0, 163, 164, 0, 165, 0, 0,
	0, 305, 166, 167, 168, 306, 307, 0, 0, 0,
	169, 170, 308, 309, 310, 0, 171, 0, 172, 0,
	0, 0, 0, 173, 311, 0, 312, 0, 174, 175,
	176, 177, 313, 314, 0, 0, 181, 0, 178, 0,
	0, 179, 315, 180, 316, 317, 318, 319, 320, 0,
	321, 0, 0, 182, 183, 184, 0, 185, 186, 187,
	0, 189, 188, 0, 322, 0, 190, 0, 0, 191,
	0, 0, 192, 0, 193, 194, 195, 197, 323, 196,
	0, 198, 199, 201, 200, 0, 0, 0, 324, 202,
	325, 203, 204, 0, 205, 0, 0, 206, 0, 0,
	207, 326, 0, 208, 0, 327, 209, 210, 211, 212,
	213, 0, 214, 328, 215, 329, 216, 0, 217, 218,
	219, 220, 221, 330, 222, 223, 0, 224, 225, 226,
	227, 228, 230, 231, 229, 232, 233, 234, 235, 0,
	236, 0, 237, 238, 331, 239, 0, 243, 244, 245,
	246, 0, 248, 332, 247, 249, 250, 0, 251, 240,
	241, 252, 0, 253, 333, 334, 254, 0, 260, 255,
	256, 242, 257, 259, 335, 258, 336, 0, 261, 0,
	262, 263, 264, 265, 266, 267, 268, 0, 337, 338,
	339, 0, 0, 269, 270, 340, 341, 0, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 0, 279,
	0, 342, 280, 281, 282, 343, 344, 133, 0, 283,
	0, 0, 0, 0, 284, 285, 286, 287, 288, 0,
	0, 0, 0, 136, 137, 351, 138, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 139, 140, 141, 290,
	291, 292, 293, 142, 294, 295, 0, 143, 296, 297,
	144, 145, 0, 0, 298, 299, 300, 0, 146, 301,
	0, 0, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 153, 0, 0, 154, 155, 0, 0, 0, 0,
	0, 0, 0, 156, 157, 348, 158, 302, 159, 303,
	304, 0, 160, 0, 161, 0, 162, 0, 0, 163,
	164, 0, 165, 0, 0, 0, 305, 166, 167, 168,
	306, 307, 0, 0, 0, 169, 170, 308, 309, 310,
	0, 171, 0, 172, 0, 0, 0, 0, 173, 311,
	0, 312, 0, 174, 175, 176, 177, 313, 314, 0,
	0, 181, 0, 178, 0, 0, 179, 315, 180, 316,
	317, 318, 319, 320, 0, 321, 0, 0, 182, 183,
	184, 0, 185, 186, 187, 0, 189, 188, 0, 322,
	0, 190, 0, 0, 191, 0, 0, 192, 0, 193,
	194, 195, 197, 323, 196, 0, 198, 199, 201, 200,
	0, 0, 0, 324, 202, 325, 203, 204, 0, 205,
	0, 0, 206, 0, 0, 207, 326, 0, 208, 0,
	327, 209, 210, 211, 212, 213, 0, 214, 328, 215,
	329, 350, 0, 217, 218, 219, 220, 221, 330, 222,
	223, 0, 224, 225, 226, 227, 228, 230, 231, 229,
	232, 233, 234, 235, 0, 236, 0, 237, 238, 331,
	239, 0, 243, 244, 245, 246, 0, 248, 332, 247,
	249, 250, 0, 251, 240, 241, 252, 0, 253, 333,
	334, 254, 0, 260, 255, 256, 242, 257, 259, 335,
	258, 336, 0, 261, 0, 262, 263, 264, 265, 266,
	267, 268, 0, 337, 338, 339, 0, 0, 269, 270,
	340, 341, 0, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 0, 279, 0, 342, 280, 281, 282,
	343, 344, 133, 0, 283, 0, 0, 0, 0, 284,
	285, 286, 287, 288, 0, 0, 0, 0, 136, 137,
	0, 138, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 139, 140, 141, 290, 291, 292, 293, 142, 294,
	295, 0, 143, 296, 297, 144, 145, 0, 0, 298,
	299, 300, 0, 146, 301, 0, 0, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 153, 0, 0, 154,
	155, 0, 0, 0, 0, 0, 0, 0, 156, 157,
	348, 158, 302, 159, 303, 304, 0, 160, 0, 161,
	0, 162, 0, 0, 163, 164, 0, 165, 0, 0,
	0, 305, 166, 167, 168, 306, 307, 0, 0, 0,
	169, 170, 308, 309, 310, 0, 171, 0, 172, 0,
	0, 0, 0, 173, 311, 0, 312, 0, 174, 175,
	176, 177, 313, 314, 0, 0, 181, 0, 178, 0,
	0, 179, 315, 180, 316, 317, 318, 319, 320, 0,
	321, 0, 0, 182, 183, 184, 0, 185, 186, 187,
	0, 189, 188, 0, 322, 0, 190, 0, 0, 191,
	0, 0, 192, 0, 193, 194, 195, 197, 323, 196,
	0, 198, 199, 201, 200, 0, 0, 0, 324, 202,
	325, 203, 204, 0, 205, 0, 0, 206, 0, 0,
	207, 326, 0, 208, 0, 327, 209, 210, 211, 212,
	213, 0, 214, 328, 215, 329, 216, 0, 217, 218,
	219, 220, 221, 330, 222, 223, 0, 224, 225, 226,
	227, 228, 230, 231, 229, 232, 233, 234, 235, 0,
	236, 0, 237, 238, 331, 239, 0, 243, 244, 245,
	246, 0, 248, 332, 247, 249, 250, 0, 251, 240,
	241, 252, 0, 253, 333, 334, 254, 0, 260, 255,
	256, 242, 257, 259, 335, 258, 336, 0, 261, 0,
	262, 263, 264, 265, 266, 267, 268, 0, 337, 338,
	339, 0, 0, 269, 270, 340, 341, 0, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 0, 279,
	0, 342, 280, 281, 282, 343, 344, 133, 0, 283,
	0, 0, 0, 0, 284, 285, 286, 287, 288, 0,
	0, 0, 0, 136, 137, 0, 138, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 139, 140, 141, 290,
	291, 292, 293, 142, 294, 295, 0, 143, 296, 297,
	144, 145, 0, 0, 298, 299, 300, 0, 146, 301,
	0, 0, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 153, 0, 0, 154, 155, 0, 0, 0, 0,
	0, 0, 0, 156, 157, 348, 158, 302, 159, 303,
	304, 0, 160, 0, 161, 0, 162, 0, 0, 163,
	164, 0, 165, 0, 0, 0, 305, 166, 167, 168,
	306, 307, 0, 0, 0, 169, 170, 308, 309, 310,
	0, 171, 0, 172, 0, 0, 0, 0, 173, 311,
	0, 312, 0, 174, 175, 176, 177, 1673, 314, 0,
	0, 181, 0, 178, 0, 0, 179, 315, 180, 316,
	317, 318, 319, 320, 0, 321, 0, 0, 182, 183,
	184, 0, 185, 186, 187, 0, 189, 188, 0, 322,
	0, 190, 0, 0, 191, 0, 0, 192, 0, 193,
	194, 195, 197, 323, 196, 0, 198, 199, 201, 200,
	0, 0, 0, 324, 202, 325, 203, 204, 0, 205,
	0, 0, 206, 0, 0, 207, 326, 0, 208, 0,
	327, 209, 210, 211, 212, 213, 0, 214, 328, 215,
	329, 216, 0, 217, 218, 219, 220, 221, 330, 222,
	223, 0, 224, 225, 226, 227, 228, 230, 231, 229,
	232, 233, 234, 235, 0, 236, 0, 237, 238, 331,
	239, 0, 243, 244, 245, 246, 0, 248, 332, 247,
	249, 250, 0, 251, 240, 241, 252, 0, 253, 333,
	334, 254, 0, 260, 255, 256, 242, 257, 259, 335,
	258, 336, 0, 261, 0, 262, 263, 264, 265, 266,
	267, 268, 0, 337, 338, 339, 0, 0, 269, 270,
	340, 341, 0, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 0, 279, 0, 342, 280, 281, 282,
	343, 344, 133, 0, 283, 0, 0, 0, 0, 284,
	285, 286, 287, 288, 0, 0, 0, 0, 136, 137,
	0, 138, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 139, 140, 141, 290, 291, 292, 293, 142, 294,
	295, 0, 143, 296, 297, 144, 145, 0, 0, 298,
	299, 300, 0, 146, 301, 0, 0, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 153, 0, 0, 154,
	155, 0, 0, 0, 0, 0, 0, 0, 156, 157,
	348, 158, 302, 159, 303, 304, 0, 160, 0, 161,
	0, 162, 0, 0, 163, 164, 0, 165, 0, 0,
	0, 305, 166, 167, 168, 306, 307, 0, 0, 0,
	169, 170, 308, 309, 310, 0, 171, 0, 172, 0,
	0, 0, 0, 173, 311, 0, 312, 0, 174, 175,
	176, 177, 1671, 314, 0, 0, 181, 0, 178, 0,
	0, 179, 315, 180, 316, 317, 318, 319, 320, 0,
	321, 0, 0, 182, 183, 184, 0, 185, 186, 187,
	0, 189, 188, 0, 322, 0, 190, 0, 0, 191,
	0, 0, 192, 0, 193, 194, 195, 197, 323, 196,
	0, 198, 199, 201, 200, 0, 0, 0, 324, 202,
	325, 203, 204, 0, 205, 0, 0, 206, 0, 0,
	207, 326, 0, 208, 0, 327, 209, 210, 211, 212,
	213, 0, 214, 328, 215, 329, 216, 0, 217, 218,
	219, 220, 221, 330, 222, 223, 0, 224, 225, 226,
	227, 228, 230, 231, 229, 232, 233, 234, 235, 0,
	236, 0, 237, 238, 331, 239, 0, 243, 244, 245,
	246, 0, 248, 332, 247, 249, 250, 0, 251, 240,
	241, 252, 0, 253, 333, 334, 254, 0, 260, 255,
	256, 242, 257, 259, 335, 258, 336, 0, 261, 0,
	262, 263, 264, 265, 266, 267, 268, 0, 337, 338,
	339, 0, 0, 269, 270, 340, 341, 0, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 0, 279,
	0, 342, 280, 281, 282, 343, 344, 133, 0, 283,
	0, 0, 0, 0, 284, 285, 286, 287, 288, 0,
	0, 0, 0, 136, 137, 0, 138, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 139, 140, 141, 290,
	291, 292, 293, 142, 294, 295, 0, 143, 296, 297,
	144, 145, 0, 0, 298, 299, 300, 0, 146, 301,
	0, 0, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 153, 0, 0, 154, 155, 0, 0, 0, 0,
	0, 0, 0, 156, 157, 348, 158, 302, 159, 303,
	304, 0, 160, 0, 161, 0, 162, 0, 0, 163,
	164, 0, 165, 0, 0, 0, 305, 166, 167, 168,
	306, 307, 0, 0, 0, 169, 170, 308, 309, 310,
	0, 171, 0, 172, 0, 0, 0, 0, 173, 311,
	0, 312, 0, 174, 175, 176, 177, 1666, 314, 0,
	0, 181, 0, 178, 0, 0, 179, 315, 180, 316,
	317, 318, 319, 320, 0, 321, 0, 0, 182, 183,
	184, 0, 185, 186, 187, 0, 189, 188, 0, 322,
	0, 190, 0, 0, 191, 0, 0, 192, 0, 193,
	194, 195, 197, 323, 196, 0, 198, 199, 201, 200,
	0, 0, 0, 324, 202, 325, 203, 204, 0, 205,
	0, 0, 206, 0, 0, 207, 326, 0, 208, 0,
	327, 209, 210, 211, 212, 213, 0, 214, 328, 215,
	329, 216, 0, 217, 218, 219, 220, 221, 330, 222,
	223, 0, 224, 225, 226, 227, 228, 230, 231, 229,
	232, 233, 234, 235, 0, 236, 0, 237, 238, 331,
	239, 0, 243, 244, 245, 246, 0, 248, 332, 247,
	249, 250, 0, 251, 240, 241, 252, 0, 253, 333,
	334, 254, 0, 260, 255, 256, 242, 257, 259, 335,
	258, 336, 0, 261, 0, 262, 263, 264, 265, 266,
	267, 268, 0, 337, 338, 339, 0, 0, 269, 270,
	340, 341, 0, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 0, 279, 0, 342, 280, 281, 282,
	343, 344, 133, 0, 283, 0, 0, 0, 0, 284,
	285, 286, 287, 288, 0, 0, 0, 0, 136, 137,
	0, 138, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 139, 140, 141, 290, 291, 292, 293, 142, 294,
	295, 0, 143, 296, 297, 144, 145, 0, 0, 298,
	299, 300, 0, 146, 301, 0, 0, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 153, 0, 0, 154,
	155, 0, 0, 0, 0, 0, 0, 0, 156, 157,
	348, 158, 302, 159, 303, 304, 0, 160, 0, 161,
	0, 162, 0, 0, 163, 164, 0, 165, 0, 0,
	0, 305, 166, 167, 168, 306, 307, 0, 0, 0,
	169, 170, 308, 309, 310, 0, 171, 0, 172, 0,
	0, 0, 0, 173, 311, 0, 312, 0, 174, 175,
	176, 177, 1097, 314, 0, 0, 181, 0, 178, 0,
	0, 179, 315, 180, 316, 317, 318, 319, 320, 0,
	321, 0, 0, 182, 183, 184, 0, 185, 186, 187,
	0, 189, 188, 0, 322, 0, 190, 0, 0, 191,
	0, 0, 192, 0, 193, 194, 195, 197, 323, 196,
	0, 198, 199, 201, 200, 0, 0, 0, 324, 202,
	325, 203, 204, 0, 205, 0, 0, 206, 0, 0,
	207, 326, 0, 208, 0, 327, 209, 210, 211, 212,
	213, 0, 214, 328, 215, 329, 216, 0, 217, 218,
	219, 220, 221, 330, 222, 223, 0, 224, 225, 226,
	227, 228, 230, 231, 229, 232, 233, 234, 235, 0,
	236, 0, 237, 238, 331, 239, 0, 243, 244, 245,
	246, 0, 248, 332, 247, 249, 250, 0, 251, 240,
	241, 252, 0, 253, 333, 334, 254, 0, 260, 255,
	256, 242, 257, 259, 335, 258, 336, 0, 261, 0,
	262, 263, 264, 265, 266, 267, 268, 0, 337, 338,
	339, 0, 0, 269, 270, 340, 341, 0, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 0, 279,
	0, 342, 280, 281, 282, 343, 344, 133, 0, 283,
	0, 0, 0, 0, 284, 285, 286, 287, 288, 0,
	0, 0, 0, 136, 137, 0, 138, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 139, 140, 141, 290,
	291, 292, 293, 142, 294, 295, 0, 143, 296, 297,
	144, 145, 0, 0, 298, 299, 300, 0, 146, 301,
	0, 0, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 153, 0, 0, 154, 155, 0, 0, 0, 0,
	0, 0, 0, 156, 157, 348, 158, 302, 159, 303,
	304, 0, 160, 0, 161, 0, 162, 0, 0, 163,
	164, 0, 165, 0, 0, 0, 305, 166, 167, 168,
	306, 307, 0, 0, 0, 169, 170, 308, 309, 310,
	0, 171, 0, 172, 0, 0, 0, 0, 173, 311,
	0, 312, 0, 174, 175, 176, 177, 313, 314, 0,
	0, 181, 0, 178, 0, 0, 179, 315, 180, 316,
	317, 318, 319, 320, 0, 321, 0, 0, 182, 183,
	184, 0, 185, 186, 187, 0, 189, 188, 0, 322,
	0, 190, 0, 0, 191, 0, 0, 192, 0, 193,
	194, 195, 197, 323, 196, 0, 198, 199, 201, 200,
	0, 0, 0, 324, 202, 325, 203, 204, 0, 205,
	0, 0, 206, 0, 0, 207, 326, 0, 208, 0,
	327, 209, 210, 211, 212, 213, 0, 214, 328, 215,
	329, 216, 0, 217, 218, 219, 220, 221, 330, 222,
	223, 0, 224, 225, 226, 227, 228, 230, 231, 229,
	232, 233, 234, 235, 0, 236, 0, 237, 238, 331,
	239, 0, 495, 244, 245, 246, 0, 248, 332, 247,
	249, 250, 0, 251, 240, 241, 252, 0, 253, 333,
	334, 254, 0, 260, 255, 256, 242, 257, 259, 335,
	258, 336, 0, 261, 0, 262, 263, 264, 265, 266,
	267, 268, 0, 337, 338, 339, 0, 0, 269, 270,
	340, 341, 0, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 0, 279, 0, 342, 280, 281, 282,
	343, 344, 133, 0, 283, 0, 0, 0, 0, 284,
	285, 286, 287, 288, 0, 0, 0, 0, 136, 137,
	0, 138, 0, 0, 0, 0, 289, 0, 897, 0,
	0, 139, 140, 141, 290, 291, 292, 293, 142, 294,
	295, 0, 143, 296, 297, 144, 145, 0, 0, 298,
	299, 300, 0, 146, 301, 0, 0, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 153, 0, 0, 154,
	155, 0, 0, 0, 0, 0, 0, 0, 156, 157,
	348, 158, 302, 159, 303, 304, 0, 160, 0, 161,
	0, 162, 0, 0, 163, 164, 0, 165, 0, 0,
	0, 305, 166, 167, 168, 306, 307, 0, 0, 0,
	169, 170, 308, 309, 310, 0, 171, 0, 172, 0,
	0, 0, 0, 173, 311, 0, 312, 0, 174, 175,
	176, 177, 313, 314, 0, 0, 181, 0, 178, 0,
	0, 179, 315, 180, 316, 317, 318, 319, 320, 0,
	321, 0, 0, 182, 183, 184, 0, 185, 186, 187,
	0, 189, 188, 0, 322, 0, 190, 0, 0, 191,
	0, 0, 192, 0, 193, 194, 195, 197, 323, 196,
	0, 198, 199, 201, 200, 0, 0, 0, 324, 202,
	325, 203, 204, 0, 205, 0, 0, 206, 0, 0,
	207, 326, 0, 208, 0, 327, 209, 210, 211, 212,
	213, 0, 214, 328, 215, 329, 216, 0, 217, 218,
	219, 220, 221, 330, 222, 223, 0, 224, 225, 226,
	227, 228, 230, 231, 229, 232, 233, 234, 235, 0,
	236, 0, 237, 238, 331, 239, 0, 243, 244, 245,
	246, 0, 248, 332, 247, 249, 250, 0, 0, 240,
	241, 252, 0, 253, 333, 334, 254, 0, 260, 255,
	256, 242, 257, 259, 335, 258, 336, 0, 261, 0,
	262, 263, 264, 265, 266, 267, 268, 0, 337, 338,
	339, 0, 0, 269, 270, 340, 341, 0, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 0, 279,
	0, 342, 280, 281, 282, 343, 344, 133, 0, 283,
	0, 0, 0, 0, 284, 285, 286, 287, 288, 0,
	0, 0, 0, 136, 137, 0, 138, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 139, 140, 141, 290,
	291, 292, 293, 142, 294, 295, 0, 143, 296, 297,
	144, 145, 0, 0, 298, 299, 300, 0, 146, 301,
	0, 0, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 153, 0, 0, 154, 155, 0, 0, 0, 0,
	0, 0, 0, 156, 157, 348, 158, 302, 159, 303,
	304, 0, 160, 0, 161, 0, 162, 0, 0, 163,
	164, 0, 165, 0, 0, 0, 305, 166, 167, 168,
	306, 307, 0, 0, 0, 169, 170, 308, 309, 310,
	0, 171, 0, 172, 0, 0, 0, 0, 173, 311,
	0, 312, 0, 174, 175, 176, 177, 858, 314, 0,
	0, 181, 0, 178, 0, 0, 179, 315, 180, 316,
	317, 318, 319, 320, 0, 321, 0, 0, 182, 183,
	184, 0, 185, 186, 187, 0, 189, 188, 0, 322,
	0, 190, 0, 0, 191, 0, 0, 192, 0, 193,
	194, 195, 197, 323, 196, 0, 198, 199, 201, 200,
	0, 0, 0, 324, 202, 325, 203, 204, 0, 205,
	0, 0, 206, 0, 0, 207, 326, 0, 208, 0,
	327, 209, 210, 211, 212, 213, 0, 214, 328, 215,
	329, 216, 0, 217, 218, 219, 220, 221, 330, 222,
	223, 0, 224, 225, 226, 227, 228, 230, 231, 229,
	232, 233, 234, 235, 0, 236, 0, 237, 238, 331,
	239, 0, 243, 244, 245, 246, 0, 248, 332, 247,
	249, 250, 0, 251, 240, 241, 252, 0, 253, 333,
	334, 254, 0, 260, 255, 256, 242, 257, 259, 335,
	258, 336, 0, 261, 0, 262, 263, 264, 265, 266,
	267, 268, 0, 337, 338, 339, 0, 0, 269, 270,
	340, 341, 0, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 0, 279, 0, 342, 280, 281, 282,
	343, 344, 133, 0, 283, 0, 0, 0, 0, 284,
	285, 286, 287, 288, 0, 0, 0, 0, 136, 137,
	0, 138, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 139, 140, 141, 290, 291, 292, 293, 142, 294,
	295, 0, 143, 296, 297, 144, 145, 0, 0, 298,
	299, 300, 0, 146, 301, 0, 0, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 153, 0, 0, 154,
	155, 0, 0, 0, 0, 0, 0, 0, 156, 157,
	348, 158, 302, 159, 303, 304, 0, 160, 0, 161,
	0, 162, 0, 0, 163, 164, 0, 165, 0, 0,
	0, 305, 166, 167, 168, 306, 307, 0, 0, 0,
	169, 170, 308, 309, 310, 0, 171, 0, 172, 0,
	0, 0, 0, 173, 311, 0, 312, 0, 174, 175,
	176, 177, 808, 314, 0, 0, 181, 0, 178, 0,
	0, 179, 315, 180, 316, 317, 318, 319, 320, 0,
	321, 0, 0, 182, 183, 184, 0, 185, 186, 187,
	0, 189, 188, 0, 322, 0, 190, 0, 0, 191,
	0, 0, 192, 0, 193, 194, 195, 197, 323, 196,
	0, 198, 199, 201, 200, 0, 0, 0, 324, 202,
	325, 203, 204, 0, 205, 0, 0, 206, 0, 0,
	207, 326, 0, 208, 0, 327, 209, 210, 211, 212,
	213, 0, 214, 328, 215, 329, 216, 0, 217, 218,
	219, 220, 221, 330, 222, 223, 0, 224, 225, 226,
	227, 228, 230, 231, 229, 232, 233, 234, 235, 0,
	236, 0, 237, 238, 331, 239, 0, 243, 244, 245,
	246, 0, 248, 332, 247, 249, 250, 0, 251, 240,
	241, 252, 0, 253, 333, 334, 254, 0, 260, 255,
	256, 242, 257, 259, 335, 258, 336, 0, 261, 0,
	262, 263, 264, 265, 266, 267, 268, 0, 337, 338,
	339, 0, 0, 269, 270, 340, 341, 0, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 0, 279,
	0, 342, 280, 281, 282, 343, 344, 133, 0, 283,
	0, 0, 0, 0, 284, 285, 286, 287, 288, 0,
	0, 0, 0, 136, 137, 0, 138, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 139, 140, 141, 290,
	291, 292, 293, 142, 294, 295, 0, 143, 296, 297,
	144, 145, 0, 0, 298, 299, 300, 0, 146, 301,
	0, 0, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 153, 0, 0, 154, 155, 0, 0, 0, 0,
	0, 0, 0, 156, 157, 348, 158, 302, 159, 303,
	304, 0, 160, 0, 161, 0, 162, 0, 0, 163,
	164, 0, 165, 0, 0, 0, 305, 166, 167, 168,
	306, 307, 0, 0, 0, 169, 170, 308, 309, 310,
	0, 171, 0, 172, 0, 0, 0, 0, 173, 311,
	0, 312, 0, 174, 175, 176, 177, 806, 314, 0,
	0, 181, 0, 178, 0, 0, 179, 315, 180, 316,
	317, 318, 319, 320, 0, 321, 0, 0, 182, 183,
	184, 0, 185, 186, 187, 0, 189, 188, 0, 322,
	0, 190, 0, 0, 191, 0, 0, 192, 0, 193,
	194, 195, 197, 323, 196, 0, 198, 199, 201, 200,
	0, 0, 0, 324, 202, 325, 203, 204, 0, 205,
	0, 0, 206, 0, 0, 207, 326, 0, 208, 0,
	327, 209, 210, 211, 212, 213, 0, 214, 328, 215,
	329, 216, 0, 217, 218, 219, 220, 221, 330, 222,
	223, 0, 224, 225, 226, 227, 228, 230, 231, 229,
	232, 233, 234, 235, 0, 236, 0, 237, 238, 331,
	239, 0, 243, 244, 245, 246, 0, 248, 332, 247,
	249, 250, 0, 251, 240, 241, 252, 0, 253, 333,
	334, 254, 0, 260, 255, 256, 242, 257, 259, 335,
	258, 336, 0, 261, 0, 262, 263, 264, 265, 266,
	267, 268, 0, 337, 338, 339, 0, 0, 269, 270,
	340, 341, 0, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 0, 279, 0, 342, 280, 281, 282,
	343, 344, 133, 0, 283, 0, 0, 0, 0, 284,
	285, 286, 287, 288, 0, 0, 0, 0, 136, 137,
	0, 138, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 139, 140, 141, 290, 291, 292, 293, 142, 294,
	295, 0, 143, 296, 297, 144, 145, 0, 0, 298,
	299, 300, 0, 146, 301, 0, 0, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 153, 0, 0, 154,
	155, 0, 0, 0, 0, 0, 0, 0, 156, 157,
	348, 158, 302, 159, 303, 304, 0, 160, 0, 161,
	0, 162, 0, 0, 163, 164, 0, 165, 0, 0,
	0, 305, 166, 167, 168, 306, 307, 0, 0, 0,
	169, 170, 308, 309, 310, 0, 171, 0, 172, 0,
	0, 0, 0, 173, 311, 0, 312, 0, 174, 175,
	176, 177, 802, 314, 0, 0, 181, 0, 178, 0,
	0, 179, 315, 180, 316, 317, 318, 319, 320, 0,
	321, 0, 0, 182, 183, 184, 0, 185, 186, 187,
	0, 189, 188, 0, 322, 0, 190, 0, 0, 191,
	0, 0, 192, 0, 193, 194, 195, 197, 323, 196,
	0, 198, 199, 201, 200, 0, 0, 0, 324, 202,
	325, 203, 204, 0, 205, 0, 0, 206, 0, 0,
	207, 326, 0, 208, 0, 327, 209, 210, 211, 212,
	213, 0, 214, 328, 215, 329, 216, 0, 217, 218,
	219, 220, 221, 330, 222, 223, 0, 224, 225, 226,
	227, 228, 230, 231, 229, 232, 233, 234, 235, 0,
	236, 0, 237, 238, 331, 239, 0, 243, 244, 245,
	246, 0, 248, 332, 247, 249, 250, 0, 251, 240,
	241, 252, 0, 253, 333, 334, 254, 0, 260, 255,
	256, 242, 257, 259, 335, 258, 336, 0, 261, 0,
	262, 263, 264, 265, 266, 267, 268, 0, 337, 338,
	339, 0, 0, 269, 270, 340, 341, 0, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 0, 279,
	0, 342, 280, 281, 282, 343, 344, 133, 0, 283,
	0, 0, 0, 0, 284, 285, 286, 287, 288, 0,
	0, 0, 0, 136, 137, 0, 138, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 139, 140, 141, 290,
	291, 292, 293, 142, 294, 295, 0, 143, 296, 297,
	144, 145, 0, 0, 298, 299, 300, 0, 146, 301,
	0, 0, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 153, 0, 0, 154, 155, 0, 0, 0, 0,
	0, 0, 0, 156, 157, 348, 158, 302, 159, 303,
	304, 0, 160, 0, 161, 0, 162, 0, 0, 163,
	164, 0, 165, 0, 0, 0, 305, 166, 167, 168,
	306, 307, 0, 0, 0, 169, 170, 308, 309, 310,
	0, 171, 0, 172, 0, 0, 0, 0, 173, 311,
	0, 312, 0, 174, 175, 176, 177, 800, 314, 0,
	0, 181, 0, 178, 0, 0, 179, 315, 180, 316,
	317, 318, 319, 320, 0, 321, 0, 0, 182, 183,
	184, 0, 185, 186, 187, 0, 189, 188, 0, 322,
	0, 190, 0, 0, 191, 0, 0, 192, 0, 193,
	194, 195, 197, 323, 196, 0, 198, 199, 201, 200,
	0, 0, 0, 324, 202, 325, 203, 204, 0, 205,
	0, 0, 206, 0, 0, 207, 326, 0, 208, 0,
	327, 209, 210, 211, 212, 213, 0, 214, 328, 215,
	329, 216, 0, 217, 218, 219, 220, 221, 330, 222,
	223, 0, 224, 225, 226, 227, 228, 230, 231, 229,
	232, 233, 234, 235, 0, 236, 0, 237, 238, 331,
	239, 0, 243, 244, 245, 246, 0, 248, 332, 247,
	249, 250, 0, 251, 240, 241, 252, 0, 253, 333,
	334, 254, 0, 260, 255, 256, 242, 257, 259, 335,
	258, 336, 0, 261, 0, 262, 263, 264, 265, 266,
	267, 268, 0, 337, 338, 339, 0, 0, 269, 270,
	340, 341, 0, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 0, 279, 0, 342, 280, 281, 282,
	343, 344, 133, 0, 283, 0, 0, 0, 0, 284,
	285, 286, 287, 288, 0, 0, 0, 0, 136, 137,
	0, 138, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 139, 140, 141, 290, 291, 292, 293, 142, 294,
	295, 0, 143, 296, 297, 144, 145, 0, 0, 298,
	299, 300, 0, 146, 301, 0, 0, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 153, 0, 0, 154,
	155, 0, 0, 0, 0, 0, 0, 0, 156, 157,
	348, 158, 302, 159, 303, 304, 0, 160, 0, 161,
	0, 162, 0, 0, 163, 164, 0, 165, 0, 0,
	0, 305, 166, 167, 168, 306, 307, 0, 0, 0,
	169, 170, 308, 309, 310, 0, 171, 0, 172, 0,
	0, 0, 0, 173, 311, 0, 312, 0, 174, 175,
	176, 177, 797, 314, 0, 0, 181, 0, 178, 0,
	0, 179, 315, 180, 316, 317, 318, 319, 320, 0,
	321, 0, 0, 182, 183, 184, 0, 185, 186, 187,
	0, 189, 188, 0, 322, 0, 190, 0, 0, 191,
	0, 0, 192, 0, 193, 194, 195, 197, 323, 196,
	0, 198, 199, 201, 200, 0, 0, 0, 324, 202,
	325, 203, 204, 0, 205, 0, 0, 206, 0, 0,
	207, 326, 0, 208, 0, 327, 209, 210, 211, 212,
	213, 0, 214, 328, 215, 329, 216, 0, 217, 218,
	219, 220, 221, 330, 222, 223, 0, 224, 225, 226,
	227, 228, 230, 231, 229, 232, 233, 234, 235, 0,
	236, 0, 237, 238, 331, 239, 0, 243, 244, 245,
	246, 0, 248, 332, 247, 249, 250, 0, 251, 240,
	241, 252, 0, 253, 333, 334, 254, 0, 260, 255,
	256, 242, 257, 259, 335, 258, 336, 0, 261, 0,
	262, 263, 264, 265, 266, 267, 268, 0, 337, 338,
	339, 0, 0, 269, 270, 340, 341, 0, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 0, 279,
	0, 342, 280, 281, 282, 343, 344, 133, 0, 283,
	0, 0, 0, 0, 284, 285, 286, 287, 288, 0,
	0, 0, 0, 136, 137, 0, 138, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 139, 140, 141, 290,
	291, 292, 293, 142, 294, 295, 0, 143, 296, 297,
	144, 145, 0, 0, 298, 299, 300, 0, 146, 301,
	0, 0, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 153, 0, 0, 154, 155, 0, 0, 0, 0,
	0, 0, 0, 156, 157, 348, 158, 302, 159, 303,
	304, 0, 160, 0, 161, 0, 162, 0, 0, 163,
	164, 0, 165, 0, 0, 0, 305, 166, 167, 168,
	306, 307, 0, 0, 0, 169, 170, 308, 309, 310,
	0, 171, 0, 172, 0, 0, 0, 0, 173, 311,
	0, 312, 0, 174, 175, 176, 177, 793, 314, 0,
	0, 181, 0, 178, 0, 0, 179, 315, 180, 316,
	317, 318, 319, 320, 0, 321, 0, 0, 182, 183,
	184, 0, 185, 186, 187, 0, 189, 188, 0, 322,
	0, 190, 0, 0, 191, 0, 0, 192, 0, 193,
	194, 195, 197, 323, 196, 0, 198, 199, 201, 200,
	0, 0, 0, 324, 202, 325, 203, 204, 0, 205,
	0, 0, 206, 0, 0, 207, 326, 0, 208, 0,
	327, 209, 210, 211, 212, 213, 0, 214, 328, 215,
	329, 216, 0, 217, 218, 219, 220, 221, 330, 222,
	223, 0, 224, 225, 226, 227, 228, 230, 231, 229,
	232, 233, 234, 235, 0, 236, 0, 237, 238, 331,
	239, 0, 243, 244, 245, 246, 0, 248, 332, 247,
	249, 250, 0, 251, 240, 241, 252, 0, 253, 333,
	334, 254, 0, 260, 255, 256, 242, 257, 259, 335,
	258, 336, 0, 261, 0, 262, 263, 264, 265, 266,
	267, 268, 0, 337, 338, 339, 0, 0, 269, 270,
	340, 341, 0, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 0, 279, 0, 342, 280, 281, 282,
	343, 344, 133, 0, 283, 0, 0, 0, 0, 284,
	285, 286, 287, 288, 0, 0, 0, 0, 136, 137,
	0, 138, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 139, 140, 141, 290, 291, 292, 293, 142, 294,
	295, 0, 143, 296, 297, 144, 145, 0, 0, 298,
	299, 300, 0, 146, 301, 0, 0, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 153, 0, 0, 154,
	155, 0, 0, 0, 0, 0, 0, 0, 156, 157,
	348, 158, 302, 159, 303, 304, 0, 160, 0, 161,
	0, 162, 0, 0, 163, 164, 0, 165, 0, 0,
	0, 305, 166, 167, 168, 306, 307, 0, 0, 0,
	169, 170, 308, 309, 310, 0, 171, 0, 172, 0,
	0, 0, 0, 173, 311, 0, 312, 0, 174, 175,
	176, 177, 788, 314, 0, 0, 181, 0, 178, 0,
	0, 179, 315, 180, 316, 317, 318, 319, 320, 0,
	321, 0, 0, 182, 183, 184, 0, 185, 186, 187,
	0, 189, 188, 0, 322, 0, 190, 0, 0, 191,
	0, 0, 192, 0, 193, 194, 195, 197, 323, 196,
	0, 198, 199, 201, 200, 0, 0, 0, 324, 202,
	325, 203, 204, 0, 205, 0, 0, 206, 0, 0,
	207, 326, 0, 208, 0, 327, 209, 210, 211, 212,
	213, 0, 214, 328, 215, 329, 216, 0, 217, 218,
	219, 220, 221, 330, 222, 223, 0, 224, 225, 226,
	227, 228, 230, 231, 229, 232, 233, 234, 235, 0,
	236, 0, 237, 238, 331, 239, 0, 243, 244, 245,
	246, 0, 248, 332, 247, 249, 250, 0, 251, 240,
	241, 252, 0, 253, 333, 334, 254, 0, 260, 255,
	256, 242, 257, 259, 335, 258, 336, 0, 261, 0,
	262, 263, 264, 265, 266, 267, 268, 0, 337, 338,
	339, 0, 0, 269, 270, 340, 341, 0, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 0, 279,
	0, 342, 280, 281, 282, 343, 344, 133, 0, 283,
	0, 0, 0, 0, 284, 285, 286, 287, 288, 0,
	0, 0, 0, 136, 137, 0, 138, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 139, 140, 141, 290,
	291, 292, 293, 142, 294, 295, 0, 143, 296, 297,
	144, 145, 0, 0, 298, 299, 759, 0, 146, 301,
	0, 0, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 153, 0, 0, 154, 155, 0, 0, 0, 0,
	0, 0, 0, 156, 157, 348, 158, 302, 159, 303,
	304, 0, 160, 0, 161, 0, 162, 0, 0, 163,
	164, 0, 165, 0, 0, 0, 305, 166, 167, 168,
	306, 307, 0, 0, 0, 169, 170, 308, 309, 310,
	0, 171, 0, 172, 0, 0, 0, 0, 173, 311,
	0, 312, 0, 174, 175, 176, 177, 313, 314, 0,
	0, 181, 0, 178, 0, 0, 179, 315, 180, 316,
	317, 318, 319, 320, 0, 321, 0, 0, 182, 183,
	184, 0, 185, 186, 187, 0, 189, 188, 0, 322,
	0, 190, 0, 0, 191, 0, 0, 192, 0, 193,
	194, 195, 197, 323, 517, 0, 198, 199, 201, 200,
	0, 0, 0, 324, 202, 325, 203, 204, 0, 205,
	0, 0, 206, 0, 0, 207, 326, 0, 208, 0,
	327, 209, 210, 211, 212, 213, 0, 214, 328, 215,
	329, 216, 0, 217, 218, 219, 220, 221, 330, 222,
	223, 0, 224, 225, 226, 227, 228, 230, 231, 229,
	232, 233, 234, 235, 0, 236, 0, 237, 238, 331,
	239, 0, 243, 244, 245, 246, 0, 248, 332, 247,
	249, 250, 0, 251, 240, 241, 252, 0, 253, 333,
	334, 254, 0, 260, 255, 256, 242, 257, 259, 335,
	258, 336, 0, 261, 0, 262, 263, 264, 265, 266,
	267, 268, 0, 513, 338, 339, 0, 0, 269, 760,
	340, 341, 0, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 0, 279, 0, 342, 280, 281, 282,
	343, 344, 133, 0, 283, 0, 0, 0, 0, 284,
	285, 286, 287, 288, 0, 0, 0, 0, 136, 137,
	0, 138, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 139, 140, 141, 290, 291, 292, 293, 142, 294,
	295, 0, 143, 296, 297, 144, 145, 0, 0, 298,
	299, 300, 0, 146, 301, 0, 0, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 153, 0, 0, 154,
	155, 0, 0, 0, 0, 0, 0, 0, 156, 157,
	348, 158, 302, 159, 303, 304, 0, 160, 0, 161,
	0, 162, 0, 0, 163, 164, 0, 165, 0, 0,
	0, 305, 166, 167, 168, 306, 307, 0, 0, 0,
	169, 170, 308, 309, 310, 0, 171, 0, 172, 0,
	0, 0, 0, 173, 311, 0, 312, 0, 174, 175,
	176, 177, 313, 314, 0, 0, 181, 0, 178, 0,
	0, 179, 315, 180, 316, 317, 318, 319, 320, 0,
	321, 0, 0, 182, 183, 184, 0, 185, 186, 187,
	0, 189, 188, 0, 322, 0, 190, 0, 0, 191,
	0, 0, 192, 0, 193, 194, 195, 197, 323, 196,
	0, 198, 199, 201, 200, 0, 0, 0, 324, 202,
	325, 203, 204, 0, 205, 0, 0, 206, 0, 0,
	207, 326, 0, 208, 0, 327, 209, 210, 211, 212,
	213, 0, 214, 328, 215, 329, 216, 0, 217, 218,
	219, 220, 221, 330, 603, 223, 0, 224, 225, 226,
	227, 228, 230, 231, 229, 232, 233, 234, 235, 0,
	236, 0, 237, 238, 331, 239, 0, 243, 244, 245,
	246, 0, 248, 332, 247, 249, 250, 0, 251, 240,
	241, 252, 0, 253, 333, 334, 254, 0, 260, 255,
	256, 242, 257, 259, 335, 258, 336, 0, 261, 0,
	262, 263, 264, 265, 266, 267, 268, 0, 337, 338,
	339, 0, 0, 269, 270, 340, 341, 0, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 0, 279,
	0, 342, 280, 281, 282, 343, 344, 133, 0, 283,
	0, 0, 0, 0, 284, 285, 286, 287, 288, 0,
	0, 0, 0, 136, 137, 0, 138, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 139, 140, 141, 290,
	291, 292, 293, 142, 294, 295, 0, 143, 296, 297,
	144, 145, 0, 0, 298, 299, 300, 0, 507, 301,
	0, 0, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 153, 0, 0, 154, 155, 0, 0, 0, 0,
	0, 0, 0, 156, 157, 348, 158, 302, 159, 303,
	304, 0, 160, 0, 161, 0, 162, 0, 0, 163,
	164, 0, 165, 0, 0, 0, 305, 166, 167, 168,
	306, 307, 0, 0, 0, 169, 170, 308, 309, 310,
	0, 171, 0, 172, 0, 0, 0, 0, 173, 311,
	0, 312, 0, 174, 175, 176, 177, 313, 314, 0,
	0, 181, 0, 178, 0, 0, 179, 315, 180, 316,
	317, 318, 319, 320, 0, 321, 0, 0, 182, 183,
	184, 0, 185, 186, 187, 0, 189, 188, 0, 322,
	0, 190, 0, 0, 506, 0, 0, 192, 0, 193,
	194, 195, 197, 323, 517, 0, 198, 199, 201, 200,
	0, 0, 0, 324, 202, 325, 203, 204, 0, 205,
	0, 0, 206, 0, 0, 207, 326, 0, 208, 0,
	327, 209, 210, 211, 212, 213, 0, 214, 328, 215,
	329, 216, 0, 217, 218, 219, 220, 221, 330, 222,
	223, 0, 224, 225, 226, 227, 228, 230, 231, 229,
	232, 233, 234, 235, 0, 236, 0, 237, 238, 508,
	239, 0, 243, 244, 245, 246, 0, 248, 332, 247,
	509, 250, 0, 251, 240, 241, 252, 0, 253, 333,
	334, 254, 0, 260, 255, 256, 242, 257, 259, 335,
	258, 336, 0, 261, 0, 262, 263, 264, 265, 266,
	267, 268, 0, 513, 338, 339, 0, 0, 269, 511,
	340, 341, 0, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 0, 279, 0, 342, 280, 281, 282,
	343, 344, 133, 0, 283, 0, 0, 0, 0, 284,
	285, 286, 287, 288, 0, 0, 0, 0, 136, 137,
	0, 138, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 139, 140, 141, 290, 291, 292, 293, 142, 294,
	295, 0, 143, 296, 297, 144, 145, 0, 0, 298,
	299, 300, 0, 146, 301, 0, 0, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 153, 0, 0, 154,
	155, 0, 0, 0, 0, 0, 0, 0, 156, 157,
	348, 158, 302, 159, 303, 304, 0, 160, 0, 161,
	0, 162, 0, 0, 163, 164, 0, 165, 0, 0,
	0, 305, 166, 167, 168, 306, 307, 0, 0, 0,
	169, 170, 308, 309, 310, 0, 171, 0, 172, 0,
	0, 0, 0, 173, 311, 0, 312, 0, 174, 175,
	176, 177, 313, 314, 0, 0, 181, 0, 178, 0,
	0, 179, 315, 180, 316, 317, 318, 319, 320, 0,
	321, 0, 0, 182, 183, 184, 0, 185, 186, 187,
	0, 189, 188, 0, 322, 0, 190, 0, 0, 191,
	0, 0, 192, 0, 193, 194, 195, 197, 323, 196,
	0, 198, 199, 201, 200, 0, 0, 0, 324, 202,
	325, 203, 204, 0, 205, 0, 0, 206, 0, 0,
	207, 326, 0, 208, 0, 327, 209, 210, 0, 212,
	213, 0, 214, 328, 215, 329, 216, 0, 217, 218,
	219, 0, 221, 330, 222, 223, 0, 224, 225, 226,
	227, 228, 230, 231, 229, 232, 233, 234, 235, 0,
	236, 0, 237, 238, 331, 0, 0, 243, 244, 245,
	246, 0, 248, 332, 247, 249, 250, 0, 251, 240,
	241, 252, 0, 253, 333, 334, 254, 0, 260, 255,
	256, 242, 257, 259, 335, 258, 336, 0, 261, 0,
	262, 263, 264, 265, 266, 267, 268, 0, 337, 338,
	339, 0, 0, 269, 270, 340, 341, 0, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 0, 279,
	0, 342, 280, 281, 282, 343, 344, 0, 0, 283,
	0, 0, 0, 0, 284, 285, 286, 287, 288, 904,
	905, 0, 924, 925, 926, 934, 935, 936, 0, 0,
	0, 0, 0, 0, 0, 927, 0, 0, 0, 0,
	0, 0, 907, 0, 0, 938, 0, 904, 905, 0,
	924, 925, 926, 934, 935, 936, 0, 0, 0, 0,
	0, 0, 0, 927, 0, 0, 906, 0, 0, 0,
	907, 0, 921, 938, 0, 904, 905, 0, 924, 925,
	926, 934, 935, 936, 0, 0, 0, 0, 0, 0,
	0, 927, 0, 0, 906, 0, 0, 0, 907, 0,
	921, 938, 0, 0, 904, 905, 0, 924, 925, 926,
	934, 935, 936, 0, 0, 0, 0, 0, 0, 0,
	927, 0, 906, 0, 0, 0, 912, 907, 921, 0,
	938, 0, 904, 905, 0, 924, 925, 926, 934, 935,
	936, 0, 0, 0, 0, 931, 939, 0, 927, 0,
	0, 906, 0, 0, 912, 907, 0, 921, 938, 0,
	0, 0, 0, 937, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 931, 939, 0, 0, 0, 929, 906,
	0, 0, 912, 0, 922, 921, 0, 0, 0, 0,
	0, 937, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 931, 939, 0, 0, 0, 929, 0, 0, 928,
	0, 912, 922, 0, 0, 0, 0, 0, 0, 937,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	931, 939, 0, 0, 929, 0, 0, 928, 0, 912,
	922, 0, 0, 0, 0, 0, 0, 0, 937, 0,
	0, 0, 0, 0, 0, 0, 0, 923, 931, 939,
	0, 0, 0, 929, 0, 928, 0, 0, 0, 922,
	0, 0, 0, 932, 0, 0, 937, 0, 0, 0,
	0, 0, 0, 0, 0, 923, 0, 0, 0, 0,
	0, 929, 0, 0, 928, 0, 0, 922, 0, 0,
	0, 932, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 923, 0, 0, 0, 0, 0, 0,
	0, 0, 928, 0, 0, 0, 0, 0, 0, 932,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	930, 0, 923, 918, 919, 920, 933, 0, 917, 915,
	916, 908, 909, 910, 911, 913, 914, 0, 932, 0,
	0, 2054, 0, 0, 0, 0, 0, 0, 930, 0,
	923, 918, 919, 920, 933, 0, 917, 915, 916, 908,
	909, 910, 911, 913, 914, 0, 932, 0, 0, 2049,
	0, 0, 0, 0, 0, 0, 930, 0, 0, 918,
	919, 920, 933, 0, 917, 915, 916, 908, 909, 910,
	911, 913, 914, 0, 0, 0, 0, 2045, 0, 0,
	0, 0, 0, 0, 0, 930, 0, 0, 918, 919,
	920, 933, 0, 917, 915, 916, 908, 909, 910, 911,
	913, 914, 0, 0, 0, 0, 1971, 0, 0, 0,
	0, 0, 0, 930, 0, 0, 918, 919, 920, 933,
	0, 917, 915, 916, 908, 909, 910, 911, 913, 914,
	0, 0, 904, 905, 1942, 924, 925, 926, 934, 935,
	936, 0, 0, 0, 0, 0, 0, 0, 927, 0,
	0, 0, 0, 0, 0, 907, 0, 0, 938, 0,
	904, 905, 0, 924, 925, 926, 934, 935, 936, 0,
	0, 0, 0, 0, 0, 0, 927, 0, 0, 906,
	0, 0, 0, 907, 0, 921, 938, 0, 904, 905,
	0, 924, 925, 926, 934, 935, 936, 0, 0, 0,
	0, 0, 0, 0, 927, 0, 0, 906, 0, 0,
	0, 907, 0, 921, 938, 0, 0, 904, 905, 0,
	924, 925, 926, 934, 935, 936, 0, 0, 0, 0,
	0, 0, 0, 927, 0, 906, 0, 0, 0, 912,
	907, 921, 0, 938, 0, 904, 905, 0, 924, 925,
	926, 934, 935, 936, 0, 0, 0, 0, 931, 939,
	0, 927, 0, 0, 906, 0, 0, 912, 907, 0,
	921, 938, 0, 0, 0, 0, 937, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 931, 939, 0, 0,
	0, 929, 906, 0, 0, 912, 0, 922, 921, 0,
	0, 0, 0, 0, 937, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 931, 939, 0, 0, 0, 929,
	0, 0, 928, 0, 912, 922, 0, 0, 0, 0,
	0, 0, 937, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 931, 939, 0, 0, 929, 0, 0,
	928, 0, 912, 922, 0, 0, 0, 0, 0, 0,
	0, 937, 0, 0, 0, 0, 0, 0, 0, 0,
	923, 931, 939, 0, 0, 0, 929, 0, 928, 0,
	0, 0, 922, 0, 0, 0, 932, 0, 0, 937,
	0, 1564, 1565, 0, 1582, 1583, 1584, 0, 923, 0,
	0, 0, 0, 0, 929, 0, 0, 928, 0, 0,
	922, 0, 0, 0, 932, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 923, 0, 0, 0,
	0, 0, 0, 0, 0, 928, 0, 0, 0, 0,
	0, 0, 932, 0, 1579, 0, 0, 0, 0, 0,
	0, 0, 0, 930, 0, 923, 918, 919, 920, 933,
	0, 917, 915, 916, 908, 909, 910, 911, 913, 914,
	0, 932, 0, 0, 1941, 0, 0, 0, 0, 0,
	0, 930, 0, 923, 918, 919, 920, 933, 0, 917,
	915, 916, 908, 909, 910, 911, 913, 914, 1570, 932,
	0, 0, 1847, 0, 0, 0, 0, 0, 0, 930,
	0, 0, 918, 919, 920, 933, 0, 917, 915, 916,
	908, 909, 910, 911, 913, 914, 0, 0, 0, 0,
	1766, 0, 0, 0, 0, 1585, 0, 0, 930, 0,
	0, 918, 919, 920, 933, 0, 917, 915, 916, 908,
	909, 910, 911, 913, 914, 0, 1580, 0, 0, 1742,
	0, 0, 0, 0, 0, 0, 930, 0, 0, 918,
	919, 920, 933, 0, 917, 915, 916, 908, 909, 910,
	911, 913, 914, 0, 0, 904, 905, 1282, 924, 925,
	926, 934, 935, 936, 0, 118, 0, 0, 0, 0,
	0, 927, 0, 0, 0, 0, 36, 92, 907, 0,
	0, 938, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1581,
	0, 0, 906, 94, 0, 0, 0, 0, 921, 40,
	0, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 47, 0, 0, 0, 49, 0, 0, 0, 112,
	0, 0, 95, 0, 0, 0, 55, 0, 56, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 912, 0, 0, 0, 57, 0, 0, 0,
	0, 0, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 931, 939, 0, 0, 1576, 1577, 1578, 0, 0,
	1575, 1573, 1574, 1566, 1567, 1568, 1569, 1571, 1572, 937,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 929, 0, 0, 0, 904, 905,
	922, 924, 925, 926, 934, 935, 936, 0, 0, 0,
	0, 0, 0, 0, 927, 0, 0, 0, 0, 0,
	0, 907, 0, 0, 938, 928, 0, 0, 0, 0,
	0, 0, 0, 0, 59, 0, 0, 0, 0, 0,
	60, 0, 0, 0, 0, 906, 0, 0, 0, 0,
	0, 921, 0, 0, 0, 0, 0, 0, 66, 67,
	37, 0, 61, 0, 62, 0, 96, 0, 0, 0,
	0, 63, 0, 923, 0, 121, 0, 0, 0, 0,
	0, 0, 73, 0, 0, 117, 0, 0, 0, 932,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 912, 2242, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 931, 939, 0, 0, 0, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 124,
	0, 0, 937, 0, 0, 0, 0, 119, 1564, 1565,
	0, 1582, 1583, 1584, 120, 0, 930, 929, 0, 918,
	919, 920, 933, 922, 917, 915, 916, 908, 909, 910,
	911, 913, 914, 115, 0, 1526, 0, 904, 905, 0,
	924, 925, 926, 934, 935, 936, 0, 0, 928, 0,
	0, 0, 0, 927, 0, 0, 0, 0, 0, 0,
	907, 1579, 0, 938, 2241, 0, 0, 0, 0, 0,
	0, 904, 905, 0, 924, 925, 926, 934, 935, 936,
	0, 0, 0, 0, 906, 0, 0, 927, 0, 0,
	921, 0, 1422, 0, 907, 0, 923, 938, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 932, 0, 0, 1570, 1179, 0, 906, 0,
	0, 0, 904, 905, 921, 924, 925, 926, 934, 935,
	936, 0, 0, 0, 0, 1586, 0, 0, 927, 0,
	0, 0, 1178, 0, 912, 907, 1596, 0, 938, 1595,
	0, 0, 1585, 1423, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 931, 939, 0, 0, 0, 0, 906,
	0, 0, 0, 1580, 0, 921, 0, 0, 912, 930,
	0, 937, 918, 919, 920, 933, 0, 917, 915, 916,
	908, 909, 910, 911, 913, 914, 929, 931, 939, 0,
	0, 0, 922, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 937, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 928, 0, 912,
	929, 0, 0, 0, 0, 0, 922, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1581, 0, 931, 939,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 928, 0, 0, 0, 0, 937, 0, 0, 0,
	0, 0, 0, 0, 0, 923, 0, 0, 0, 0,
	0, 929, 0, 0, 0, 0, 0, 922, 0, 0,
	0, 932, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 923,
	0, 0, 928, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 932, 0, 0, 0, 0,
	0, 0, 1576, 1577, 1578, 0, 0, 1575, 1573, 1574,
	1566, 1567, 1568, 1569, 1571, 1572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 930, 0,
	923, 918, 919, 920, 933, 0, 917, 915, 916, 908,
	909, 910, 911, 913, 914, 0, 932, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 930, 0, 0, 918, 919, 920, 933, 0,
	917, 915, 916, 908, 909, 910, 911, 913, 914, 0,
	0, 0, 0, 904, 905, 0, 924, 925, 926, 934,
	935, 936, 0, 0, 0, 0, 0, 0, 0, 927,
	0, 0, 0, 0, 0, 0, 907, 0, 0, 938,
	0, 0, 0, 930, 0, 0, 918, 919, 920, 933,
	0, 917, 915, 916, 908, 909, 910, 911, 913, 914,
	906, 0, 0, 0, 0, 0, 921, 0, 0, 0,
	0, 0, 904, 905, 0, 924, 925, 926, 934, 935,
	936, 0, 0, 0, 0, 0, 0, 0, 927, 0,
	0, 0, 0, 0, 0, 907, 0, 0, 938, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 906,
	912, 0, 0, 0, 0, 921, 0, 904, 905, 0,
	924, 925, 926, 934, 935, 936, 0, 0, 0, 931,
	939, 0, 0, 927, 0, 0, 0, 0, 0, 0,
	907, 0, 0, 938, 0, 0, 0, 937, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 929, 0, 906, 0, 0, 0, 922, 912,
	921, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 931, 939,
	0, 0, 0, 928, 550, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 937, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 929, 0, 0, 912, 0, 0, 922, 0, 1602,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 923, 0, 931, 939, 0, 0, 0, 0, 0,
	0, 0, 928, 0, 0, 0, 0, 932, 0, 0,
	0, 937, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 929, 0, 0, 0,
	0, 0, 922, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	923, 0, 0, 0, 0, 0, 0, 928, 0, 0,
	0, 0, 0, 0, 0, 0, 932, 0, 0, 0,
	0, 0, 0, 0, 930, 0, 0, 918, 919, 920,
	933, 0, 917, 915, 916, 908, 909, 910, 911, 913,
	914, 1746, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 904, 905, 923, 924, 925, 926, 934,
	935, 936, 0, 0, 0, 0, 0, 0, 0, 927,
	0, 932, 0, 1597, 0, 0, 907, 0, 0, 938,
	0, 0, 0, 930, 0, 0, 918, 919, 920, 933,
	0, 917, 915, 916, 908, 909, 910, 911, 913, 914,
	906, 0, 0, 0, 0, 0, 921, 0, 904, 905,
	0, 924, 925, 926, 934, 935, 936, 0, 0, 0,
	0, 0, 0, 0, 927, 0, 0, 0, 0, 0,
	0, 907, 0, 0, 938, 0, 0, 0, 930, 0,
	0, 918, 919, 920, 933, 0, 917, 915, 916, 908,
	909, 910, 911, 913, 914, 906, 0, 0, 0, 0,
	912, 921, 0, 0, 0, 0, 0, 0, 0, 904,
	905, 0, 924, 925, 926, 934, 935, 936, 0, 931,
	939, 0, 0, 0, 0, 927, 0, 0, 0, 1555,
	0, 0, 907, 0, 0, 938, 0, 937, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 929, 0, 0, 912, 906, 0, 922, 0,
	0, 0, 921, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 931, 939, 0, 0, 0, 0,
	0, 0, 0, 928, 0, 0, 0, 0, 0, 0,
	0, 0, 937, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 929, 0, 0,
	0, 0, 0, 922, 0, 0, 912, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 923, 0, 0, 0, 931, 939, 0, 928, 0,
	0, 0, 0, 0, 0, 0, 0, 932, 0, 0,
	0, 1562, 0, 937, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 929, 0,
	0, 0, 0, 0, 922, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 923, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 928,
	0, 0, 932, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 930, 0, 0, 918, 919, 920,
	933, 0, 917, 915, 916, 908, 909, 910, 911, 913,
	914, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 904, 905, 923, 924, 925,
	926, 934, 935, 936, 0, 0, 0, 0, 0, 0,
	0, 927, 0, 932, 0, 0, 0, 0, 907, 930,
	0, 938, 918, 919, 920, 933, 0, 917, 915, 916,
	908, 909, 910, 911, 913, 914, 0, 0, 0, 0,
	0, 0, 906, 0, 0, 0, 0, 0, 921, 0,
	904, 905, 0, 924, 925, 926, 934, 935, 936, 0,
	0, 0, 0, 0, 0, 0, 927, 0, 0, 0,
	0, 0, 0, 907, 0, 0, 938, 0, 0, 0,
	930, 0, 0, 918, 919, 920, 933, 0, 917, 915,
	916, 908, 909, 910, 911, 913, 914, 906, 0, 0,
	0, 0, 912, 921, 0, 0, 0, 0, 0, 904,
	905, 0, 924, 925, 926, 934, 935, 936, 0, 0,
	0, 931, 939, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 907, 0, 0, 938, 0, 0, 0, 937,
	904, 905, 0, 924, 925, 926, 934, 935, 936, 0,
	0, 0, 0, 0, 929, 0, 906, 912, 0, 0,
	922, 0, 921, 907, 0, 0, 938, 0, 1564, 1565,
	0, 1582, 1583, 1584, 0, 0, 931, 939, 0, 0,
	0, 0, 0, 0, 1734, 928, 0, 906, 0, 0,
	0, 0, 0, 921, 937, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 929,
	0, 0, 0, 0, 0, 922, 912, 0, 0, 0,
	0, 1579, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 923, 0, 931, 939, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 912, 0, 932,
	0, 0, 0, 937, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 931, 939, 929, 0,
	0, 0, 0, 0, 922, 1570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 923, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 929,
	0, 0, 0, 0, 932, 922, 0, 0, 0, 0,
	0, 0, 1585, 0, 0, 0, 930, 0, 0, 918,
	919, 920, 933, 0, 917, 915, 916, 908, 909, 910,
	911, 913, 914, 1580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 923, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 932, 0, 0, 0, 0, 0, 0,
	0, 930, 0, 0, 918, 919, 920, 933, 923, 917,
	915, 916, 908, 909, 910, 911, 913, 914, 0, 0,
	0, 0, 0, 0, 932, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1581, 0, 0, 1029,
	1019, 1048, 1011, 1039, 1038, 0, 0, 1013, 1012, 0,
	0, 0, 0, 1050, 1049, 0, 0, 0, 0, 0,
	930, 0, 0, 918, 919, 920, 933, 0, 917, 915,
	916, 908, 909, 910, 911, 913, 914, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1044, 0, 1036, 1035,
	0, 930, 0, 0, 918, 919, 920, 933, 1034, 917,
	915, 916, 908, 909, 910, 911, 913, 914, 0, 0,
	0, 0, 0, 0, 0, 0, 1033, 1031, 1032, 0,
	0, 0, 1576, 1577, 1578, 0, 0, 1575, 1573, 1574,
	1566, 1567, 1568, 1569, 1571, 1572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1022, 1021, 1023, 1024,
	1025, 1026, 1027, 0, 1047, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1029, 1019, 1048, 1011, 1039, 1038,
	0, 0, 1013, 1012, 0, 0, 0, 0, 1050, 1049,
	0, 0, 1015, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1037, 0, 0, 0, 1020, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1044, 0, 1036, 1035, 0, 0, 0, 0, 0,
	0, 0, 0, 1034, 0, 0, 0, 1030, 0, 0,
	500, 1217, 1215, 1216, 1219, 1218, 0, 0, 0, 0,
	0, 1033, 1031, 1032, 0, 0, 0, 0, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 1016, 0, 0,
	575, 0, 0, 0, 0, 0, 0, 0, 1028, 1017,
	0, 1022, 1021, 1023, 1024, 1025, 1026, 1027, 1052, 1047,
	0, 576, 0, 0, 0, 0, 578, 0, 0, 0,
	1014, 584, 585, 1045, 1046, 594, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1015, 502, 579,
	0, 0, 0, 0, 0, 1018, 0, 0, 0, 1037,
	1051, 0, 0, 1020, 0, 0, 0, 0, 0, 0,
	0, 597, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 1030, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 582, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1016, 588, 0, 0, 583, 590, 0, 0,
	0, 0, 0, 1028, 1017, 0, 0, 587, 0, 0,
	0, 0, 0, 1052, 0, 0, 0, 503, 0, 0,
	0, 0, 0, 0, 0, 1014, 0, 0, 1045, 1046,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1018, 0, 0, 0, 0, 1051, 0, 586, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 591, 504, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 0,
	0, 0, 596, 0, 0, 0, 505, 0, 0, 0,
	0, 589, 593, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 595,
}
var sqlPact = [...]int{

	29292, -1000, 3, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 18303, 18303, -1000, -1000,
	22398, -1000, -1000, -1000, -1000, -1000, -1000, 22083, 734, 908,
	-1000, -1000, -1000, -1000, -1000, 22398, 2420, 1112, 5687, 1144,
	22398, 1119, 1112, 23973, -1000, -1000, 23973, 1116, -1000, -1000,
	-1000, -1000, -1000, 27753, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 501, 502, 501, 501, 483, 619, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 920,
	705, 114, 709, -1000, 675, -39, 15115, 31326, 746, 27438,
	22398, 1482, -2, 20508, 266, 29292, 585, -6, 18933, 22398,
	-1000, 6, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1278, 327, 6, -1000, -1000,
	21768, -1000, 1277, 1162, 1161, 20508, -1000, -1000, -1000, -1000,
	-1000, 273, -1000, 13805, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 935, -1000, -5,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11470, 272, 11470, 933, -1000, 22398, -1000, -1000, -1000, 1042,
	-1000, -1000, -1000, -1000, -1000, 403, 1678, 664, 271, 27123,
	-1000, 901, -1000, 391, 565, -1000, -1000, 14788, 15, 901,
	-1000, 901, -1000, -1000, -1000, 579, 23973, 20508, -1000, 11470,
	11470, 26808, 22398, 22398, 1181, 26493, -1000, 675, -1000, -1000,
	26178, 25863, 25548, 25233, 24918, -1000, 973, 1478, 1478, 1478,
	1505, 98, 92, 114, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1630, -1000, -1000, -1000, -1000, 1657, -1000,
	-1000, -1000, -1000, -1000, 1042, 17988, 715, 1486, 1268, -1000,
	929, 1266, 1265, 1261, 1260, 1258, -1000, 739, -1000, 1309,
	505, -1000, 1256, 771, 482, -1000, 1254, 1248, 21453, 24603,
	22398, 21138, -7, 22398, -1000, 270, -7, 10109, 10109, -1000,
	-1000, 266, -1000, 120, 17346, -1000, 9429, -1000, 17988, 18933,
	-6, -20, -1000, -1000, -1000, 5360, 17988, 640, 16388, 6,
	-1000, -1000, -1000, -1000, -1000, 20508, 22398, 22398, 671, 24288,
	-1000, 11470, -22, -1000, -1000, 266, 18303, 1250, 30715, -1000,
	11470, 11470, 11470, 11470, 11470, 847, 305, -1000, 265, 263,
	6695, -1000, -1000, 1654, -1000, -1000, -1000, 97, -1000, -1000,
	11470, 6, -1000, -1000, -1000, -1000, 262, 1669, -1000, 442,
	-1000, -1000, -1000, 390, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1307, 258, 257, 255, -1000, -1000, -1000,
	-1000, 254, 252, 246, 245, 244, 242, 241, 240, 230,
	222, 221, 220, 219, 218, 217, 806, -1000, 440, -1000,
	-1000, 440, 440, -1000, 209, 209, 210, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 209, -1000, -1000, -1000, 363,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 216, 1566, 31227,
	30715, 18303, -1000, -1000, -1000, -1000, 22398, 11470, -1000, 1564,
	901, -9, -1000, -1000, -1000, -1000, 1034, 1143, 528, 887,
	14461, 14134, 1435, -1000, -1000, -1000, 13, 5687, -1000, -9,
	-1000, 23973, -1000, 123, -1000, 30715, 30715, 215, 1000, 413,
	101, 23658, 413, 997, -1000, 973, 116, 1378, -1000, 116,
	1374, 113, 1372, -1000, -153, -1000, 1365, -20, 1352, -1000,
	899, 1100, 10790, 1069, 11470, 114, -1000, -1000, 114, 114,
	7716, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	20823, -1000, -1000, 655, 22398, 1303, 18303, 22398, 22398, 22398,
	22398, 22398, -1000, -1000, 2316, 1298, 22398, 1033, -1000, -1000,
	22398, 22398, 751, 618, 912, 1351, 415, 787, 1350, 764,
	750, 1349, 22398, -7, 1558, 22398, 70, -1000, 29722, -1000,
	70, -1000, -1000, -1000, 22398, -26, -1000, 30715, -1000, 359,
	-1000, 22398, -1000, -1000, -24, -1000, -1000, 1245, -28, -1000,
	-1000, 431, 105, 1553, 105, 16708, -1000, 22398, -30, 30715,
	386, 19248, 576, -1000, 31102, 31227, 5687, 597, 11470, 11470,
	11470, 11470, 11470, 11470, 11470, 11470, 11470, 11470, 11470, 11470,
	11470, 11470, 11470, 11470, 11470, 11470, 11470, 11470, 11470, 11470,
	1159, 11470, 575, 11470, 11470, 11470, 11470, 1285, 897, 187,
	917, -1000, 1624, 1624, 1624, 30829, 30829, 205, 305, -1000,
	11470, -1000, 10450, 92, 28955, -8, -1000, -1000, -1000, 8056,
	438, 30715, 6, 6354, -1000, 1649, 632, 1292, 1208, 213,
	90, 89, 86, 11470, 11470, 12150, 12150, 11470, 12490, 11470,
	11470, 7035, 11470, 11470, 11470, 11470, 11470, 11470, -1000, 211,
	-1000, -1000, -1000, -1000, 1648, -1000, -1000, 1645, -1000, 593,
	591, 1642, -39, -36, -1000, 1568, -1000, -1000, -1000, -1000,
	88, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 210, 806, 209, 209, 209, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 363, -1000, -1000, 440, 440,
	440, -1000, -1000, 1244, -1000, 396, -38, 488, -9, 901,
	909, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1668, -12, -1000, -1000, -12, -1000,
	-1000, 5687, -1000, -1000, -1000, 20508, -1000, -1000, 19563, 1552,
	1348, -1000, 791, -1000, 1548, 22398, 922, 993, -1000, 604,
	1347, -1000, -1000, 22398, 22398, -1000, 22398, -1000, 22398, 22398,
	5687, 22398, 22398, -1000, -1000, -1000, 30715, -1000, 356, -1000,
	-1000, 30715, 708, 1155, -1000, 1155, -13, -1000, 29671, 1117,
	22398, -1000, -1000, -1000, -1000, -1000, 22398, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 730, -1000, -1000, -1000, -1000,
	22398, 22398, 22398, -40, 794, -1000, 19878, 1504, 1489, 1453,
	20508, 1527, -39, 1240, 1523, -39, 1239, 574, 22398, 564,
	562, 20508, -1000, 189, -42, 431, 10109, 16069, 5687, -1000,
	431, 84, 9429, -1000, 1190, 905, -1000, 424, 17988, 636,
	1236, 22398, 725, 11470, 785, -1000, 15750, 448, 22398, 725,
	47, -1000, -1000, -1000, 358, 22398, -1000, -1000, 11470, -1000,
	-1000, 22398, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 384, 383, 383, 631, 631, 631, 631, 1643,
	2967, 2315, 179, 2835, 2835, 2835, 2368, 288, 288, 2835,
	2835, 2835, 30829, 30770, 2190, 11470, 11470, 557, 888, 187,
	2190, 11470, 2190, 2190, 2190, 2190, -1000, 1330, -1000, -1000,
	-1000, -1000, 1231, 186, 12490, 12490, -1000, -1000, -1000, 6695,
	12830, -1000, -1000, -1000, -1000, 184, 11470, -1000, 29295, -199,
	-47, -1000, -1000, 11470, -48, -104, -1000, -1000, 658, -1000,
	11470, -1000, -14, 11470, 11470, 11470, 83, 81, -1000, 550,
	-1000, 540, 539, 537, -1000, 178, 854, 164, 163, 11470,
	-1000, -1000, -1000, 30479, 3923, 80, 1228, -142, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 77, 76, 30418, -142, 72,
	29608, -1000, 12490, 12490, 12490, 6695, 162, 71, 29637, -142,
	30363, 9769, 9769, 9769, 69, 30127, 11470, -142, 3570, 3513,
	3485, -51, -58, -63, 1639, -64, 68, 380, 370, 56,
	-1000, -1000, 31227, 302, 301, -1000, 1637, 22398, -1000, 1147,
	-1000, -1000, 727, -1000, 761, -1000, 15115, -1000, -1000, 55,
	-65, -18, 31227, -1000, -1000, -1000, -1000, -1000, 22398, 267,
	22398, 22398, -1000, 161, 1110, 1109, -39, 22398, 1667, -39,
	22398, 1337, 1384, 344, 22398, -1000, 116, 116, -1000, 113,
	-1000, -1000, -20, 708, -1000, 11470, 1634, -1000, -1000, -1000,
	7716, -1000, -1000, -1000, 22398, -170, -27, -1000, -1000, -1000,
	-1000, -1000, 359, 765, 22398, 22398, 22398, -1000, -1000, 979,
	23343, 962, 31227, 160, 22398, 22398, 23028, 22713, 22398, 895,
	-39, -1000, 158, -39, -1000, 157, 22398, 733, 22398, 22398,
	712, -39, -1000, 1207, -1000, -92, 1520, 214, -189, 75,
	365, -1000, 15431, -1000, 1207, -1000, -1000, 424, 1226, 609,
	-1000, 879, -1000, -1000, 630, -1000, -1000, 7375, 30715, -1000,
	725, 1458, -70, -1000, -1000, -1000, 431, 16708, 16069, 9429,
	-71, 30715, -27, 11470, 2190, 2190, 11470, 12490, 12490, -1000,
	2190, -1000, -1000, -1000, -1000, -1000, 1222, 153, 11470, 31227,
	30888, 4218, -75, -1000, 9089, -21, -1000, 11470, -1000, 28927,
	-1000, -1000, 297, 1333, -1000, 11470, 30072, 52, 8749, -1000,
	30013, -19, -19, -1000, 1666, 1010, 906, 793, 685, 1625,
	-1000, 17027, 432, 876, 28898, 31102, 31227, -1000, 11470, -1000,
	-1000, 1221, 11470, -1000, 31102, 31227, 12490, 12490, 12490, 12490,
	12490, 12490, 12490, 12490, 12490, 12490, 12490, 12490, 12490, 12490,
	12490, 12490, 12490, 12490, 12490, 1061, 12490, 1610, 1610, 1610,
	-23, 8409, -1000, 1289, 1221, 11470, 11470, 31227, 51, 46,
	44, -1000, 11470, -142, 11470, 11470, 11470, -1000, -1000, -1000,
	40, -1000, 1620, -1000, -1000, -1000, -1000, -1000, 499, 1618,
	39, -27, -1000, -1000, -1000, -1000, -1000, 1178, -1000, 19563,
	-1000, 152, 22398, 13486, 151, 749, 11470, 150, 148, -1000,
	146, -1000, -1000, 143, 22398, 1055, 344, 18618, -1000, 413,
	-1000, -1000, -1000, 881, 28870, -1000, 1470, 5687, 22398, -1000,
	-1000, -1000, 536, 525, 1335, -1000, 958, -1000, 454, 825,
	-1000, 1331, 995, 1329, 995, -1000, -40, 747, -1000, 11470,
	-1000, 11470, -1000, 523, -1000, -1000, 522, 38, 1197, 1501,
	-1000, 16069, 1140, 1135, 16069, 1120, 861, 861, 861, -1000,
	138, 295, 365, 4692, 11470, 20193, 865, 33, 37, 1520,
	1197, -1000, 17988, 589, 134, -1000, -60, -1000, -1000, 204,
	-39, 725, -1000, -83, -1000, 357, 1606, 2190, 3964, 3546,
	11470, 31227, 30860, -84, 11470, 11470, -1000, -88, -1000, 11470,
	294, 30715, -1000, -1000, -1000, 30715, 11470, 1660, 11470, 36,
	35, 32, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	31, -1000, -1000, 28068, 11470, 30, -1000, 26, 25, 30715,
	1289, 30715, -1000, -1000, 756, 756, 673, 673, 673, 673,
	1610, 206, 477, 2450, 3104, 3104, 3104, 1149, 328, 328,
	3104, 3104, 3104, 1217, 1045, 133, 29101, 11470, -100, -1000,
	-1000, -1000, 30715, 30715, 24, -1000, -1000, -1000, -142, 243,
	28842, 28502, -1000, 23, -1000, 278, 275, -1000, -1000, 1185,
	-1000, 2220, 13486, 131, -105, -1000, 145, 1474, 11470, -1000,
	-1000, 130, 22398, -1000, 28474, 13486, 22398, 19563, 1547, 13486,
	918, 1074, 344, 18618, -1000, 604, -1000, -1000, -1000, 1470,
	-1000, 22398, 22398, 22398, 1328, -1000, -1000, 1053, 1177, 474,
	22398, -1000, 22398, -1000, 22398, 22398, 22398, -107, -112, 22398,
	22398, -1000, 426, 11470, 11470, 1520, 16069, 16069, 893, 1134,
	16069, -1000, -1000, -1000, -1000, 207, 354, 365, 20193, -1000,
	1615, 1088, -117, -1000, -1000, 22398, 129, -1000, 365, 426,
	-85, 17673, 1665, 1391, 22398, 1446, -1000, -1000, 128, 11470,
	11470, 30860, -121, -1000, 2190, 2190, -1000, 28445, -1000, 30715,
	-1000, 30013, -1000, -1000, -1000, -1000, 838, -1000, 28417, -1000,
	-1000, -1000, -1000, 12490, 1216, 125, 31227, 28389, -1000, -1000,
	11470, -1000, -1000, -1000, -1000, -1000, 844, -1000, 22398, -1000,
	5687, 22398, 1215, 946, -1000, -1000, 1090, 122, 12490, 22398,
	-122, 13486, 837, 13486, 1470, 6, 5687, 1470, 4348, 6354,
	-123, -1000, -127, -128, 22, -39, -129, 22398, -1000, 344,
	18618, -1000, 1384, -1000, -1000, -1000, -1000, 22398, 928, -1000,
	919, 11470, -1000, 31227, 995, 995, -1000, 520, 518, 512,
	511, -1000, -1000, -1000, 22398, 30715, -142, -1000, 893, -1000,
	121, 11470, 16069, -1000, -189, -1000, -133, -1000, 20193, -1000,
	180, -196, -1000, 340, -1000, 365, 119, 22398, 20193, -1000,
	-1000, 118, 6, -137, -1000, 323, 608, -144, 22398, -1000,
	-1000, 6014, 2190, 2190, -1000, -1000, 21, 876, 1483, -1000,
	400, 12490, 31227, -148, -1000, 4073, 22398, 1153, -1000, -1000,
	22398, 953, -1000, -1000, 11470, 29101, 115, 837, -154, 1178,
	111, -1000, -1000, -1000, -1000, -1000, -1000, 1474, -14, -1000,
	-1000, 753, 1178, -1000, 837, 110, 18618, -1000, 1055, -1000,
	-1000, -1000, 30715, 1472, -1000, -1000, 22398, 22398, 109, 108,
	-93, -1000, 1534, -1000, 22398, 30715, -1000, 365, -1000, 1611,
	-1000, -1000, 1088, -1000, 5030, 20193, 22398, -155, -1000, 11470,
	1665, -1000, -1000, 1664, 659, -1000, 431, -1000, -1000, 718,
	11470, 400, -156, -1000, -1000, 107, -1000, -1000, 1327, 4008,
	930, 22398, 1178, 837, -1000, 22398, 1470, 20, 22398, -1000,
	1178, 13486, -1000, 1074, 457, 5687, -1000, -1000, 11470, 11470,
	22398, 102, -161, 20193, -1000, -1000, -1000, 1601, -1000, -167,
	-1000, -19, -1000, -1000, 16708, -1000, 19, 11810, 11810, -142,
	-1000, 22398, 1319, -1000, 894, 804, 18, -1000, 1178, -172,
	-1000, -1000, 101, -1000, -176, -1000, -1000, 11470, -1000, -177,
	-178, -1000, -1000, -1000, -1000, 124, -1000, 17, -160, -1000,
	-1000, -1000, 13159, 932, 694, 29458, -1000, -187, 22398, -1000,
	900, 896, 682, -1000, -1000, -1000, -1000, -1000, -1000, 930,
	837, 30715, -1000, -1000, -1000, 1660, -1000, 1576, -1000, -1000,
	-1000, -1000, -1000, 955, -1000, -1000, 1411, -1000, 467, 911,
	911, 894, 1178, 11130, -1000, -1000, -1000, -1000, 1587, -1000,
	-1000, 1075, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2002, 2001, 1359, 1420, 2000, 1999, 1998, 1995, 1993,
	1991, 1990, 1986, 1980, 1979, 1977, 1974, 1973, 1971, 1970,
	1969, 1966, 1964, 1963, 1962, 1414, 1961, 1959, 1958, 1957,
	1956, 1955, 1411, 1953, 1409, 1945, 1944, 1939, 1938, 1936,
	1402, 1395, 1931, 85, 87, 1384, 1927, 1923, 1356, 1922,
	1921, 1920, 1918, 1917, 79, 1916, 1915, 1913, 1909, 1908,
	1904, 136, 158, 1903, 1354, 1902, 1901, 1900, 1899, 1898,
	1892, 1891, 1890, 1888, 1886, 1885, 1884, 1883, 1882, 1879,
	1875, 1864, 1862, 156, 1858, 1850, 1345, 1336, 1849, 1848,
	18, 1846, 75, 1845, 35, 137, 2090, 132, 1842, 1841,
	1840, 24, 90, 86, 1839, 106, 1836, 1834, 47, 33,
	23, 16, 1832, 96, 1831, 1829, 1183, 27, 1827, 1826,
	139, 1825, 32, 29, 434, 150, 142, 108, 116, 1822,
	1818, 1817, 1816, 49, 1815, 1, 1814, 1813, 10, 69,
	25, 1811, 20, 14, 1810, 1809, 128, 1808, 72, 102,
	1327, 181, 111, 303, 1807, 73, 11, 76, 1805, 1804,
	145, 31, 1802, 45, 83, 138, 1801, 51, 155, 54,
	34, 58, 115, 1799, 1796, 1794, 100, 1793, 112, 66,
	1792, 1791, 55, 1790, 135, 131, 1789, 1788, 91, 1786,
	127, 1780, 1778, 157, 148, 110, 4, 43, 68, 9,
	1333, 1331, 119, 77, 26, 22, 1777, 2457, 928, 897,
	46, 98, 62, 53, 101, 57, 71, 143, 39, 1776,
	1775, 125, 1774, 1772, 1770, 1769, 1762, 97, 1761, 1759,
	70, 141, 19, 21, 42, 94, 40, 65, 78, 149,
	147, 107, 1758, 84, 126, 1756, 44, 1755, 1750, 1525,
	118, 1748, 1747, 1746, 1461, 1360, 1222, 762, 1744, 1743,
	1164, 861, 1742, 1739, 63, 1738, 123, 109, 1737, 140,
	166, 17, 1736, 122, 82, 92, 1735, 105, 52, 0,
	93, 36, 1734, 104, 60, 1732, 1729, 1720, 1718, 28,
	3, 8, 7, 5, 6, 89, 88, 1714, 1709, 133,
	113, 81, 1708, 154, 1707, 1705, 1703, 50, 1701, 13,
	1699, 15, 1697, 1691, 12, 2, 1690, 1689, 134, 1688,
	99, 1686, 1526, 1685, 146, 1683, 1682, 1497, 30, 103,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 4, 4, 5, 5, 5,
	5, 5, 7, 8, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 103, 103,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 100, 100, 105, 105, 105,
	107, 107, 104, 104, 99, 99, 20, 20, 277, 277,
	278, 278, 89, 89, 93, 93, 90, 91, 91, 92,
	92, 24, 24, 24, 21, 21, 22, 23, 25, 25,
	25, 25, 25, 25, 32, 33, 33, 33, 33, 33,
	34, 34, 34, 34, 34, 39, 39, 37, 37, 36,
	36, 35, 35, 38, 38, 152, 152, 151, 151, 154,
	154, 40, 40, 43, 43, 43, 43, 43, 44, 44,
	44, 44, 44, 44, 44, 44, 245, 245, 244, 42,
	219, 219, 45, 177, 177, 46, 46, 46, 46, 47,
	53, 318, 318, 318, 322, 322, 323, 323, 324, 324,
	324, 324, 324, 324, 324, 320, 320, 51, 51, 88,
	56, 56, 56, 56, 56, 56, 58, 60, 57, 57,
	57, 59, 59, 61, 61, 61, 61, 62, 62, 62,
	62, 63, 63, 132, 132, 270, 269, 269, 275, 275,
	275, 130, 130, 130, 130, 130, 131, 131, 131, 268,
	268, 268, 268, 276, 276, 276, 276, 276, 276, 274,
	274, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 76,
	76, 83, 83, 83, 83, 83, 83, 65, 70, 70,
	70, 66, 71, 72, 73, 73, 73, 67, 67, 75,
	75, 75, 74, 80, 80, 80, 80, 77, 77, 77,
	78, 78, 81, 81, 81, 68, 69, 82, 79, 79,
	79, 41, 319, 319, 321, 321, 49, 28, 28, 29,
	29, 133, 133, 134, 134, 198, 198, 198, 198, 135,
	135, 106, 106, 106, 197, 287, 287, 288, 288, 288,
	288, 288, 288, 289, 289, 289, 289, 289, 289, 289,
	285, 285, 286, 283, 283, 284, 284, 284, 284, 325,
	325, 196, 196, 138, 138, 292, 292, 292, 292, 290,
	290, 290, 290, 290, 293, 291, 294, 294, 294, 294,
	294, 231, 231, 231, 85, 30, 112, 112, 31, 27,
	27, 181, 181, 142, 142, 236, 236, 236, 123, 123,
	101, 101, 101, 14, 11, 11, 11, 11, 11, 11,
	19, 19, 17, 17, 182, 182, 183, 183, 50, 52,
	55, 84, 84, 84, 84, 84, 327, 327, 119, 119,
	119, 119, 120, 120, 193, 193, 194, 194, 195, 195,
	195, 114, 113, 115, 115, 26, 26, 108, 108, 109,
	109, 110, 110, 111, 111, 328, 328, 48, 48, 87,
	126, 126, 190, 190, 190, 192, 192, 191, 191, 191,
	167, 167, 167, 86, 147, 147, 156, 156, 157, 157,
	242, 158, 158, 54, 54, 96, 96, 94, 94, 94,
	94, 94, 94, 95, 95, 97, 97, 97, 97, 97,
	97, 97, 300, 300, 300, 303, 303, 299, 301, 301,
	302, 302, 326, 326, 168, 168, 168, 137, 136, 136,
	140, 140, 139, 141, 141, 235, 235, 235, 165, 165,
	165, 165, 184, 184, 185, 185, 186, 186, 187, 187,
	187, 188, 188, 189, 189, 164, 164, 215, 215, 98,
	98, 146, 146, 148, 148, 205, 205, 205, 206, 206,
	204, 204, 204, 204, 237, 237, 237, 237, 237, 237,
	237, 316, 316, 316, 317, 317, 234, 234, 238, 238,
	238, 238, 238, 238, 232, 232, 232, 232, 233, 233,
	243, 243, 171, 171, 171, 171, 169, 169, 170, 170,
	239, 239, 239, 239, 166, 166, 240, 240, 240, 199,
	199, 246, 246, 246, 264, 264, 145, 145, 145, 247,
	247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 248, 248, 248, 248,
	250, 250, 250, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 263, 263, 263, 263, 263, 251, 251, 258, 258,
	259, 259, 260, 261, 252, 252, 253, 253, 254, 255,
	262, 262, 262, 262, 266, 266, 256, 256, 256, 256,
	256, 257, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 179, 179, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	209, 209, 209, 209, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 295, 295, 295, 295, 295,
	295, 295, 297, 297, 298, 298, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 304, 304, 305, 305, 307,
	307, 308, 308, 309, 310, 310, 310, 311, 312, 312,
	306, 306, 313, 313, 313, 314, 314, 315, 315, 315,
	315, 315, 221, 221, 221, 222, 222, 223, 229, 229,
	229, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 121, 121, 121,
	121, 121, 153, 153, 218, 218, 216, 216, 216, 220,
	220, 172, 172, 265, 265, 265, 265, 265, 265, 265,
	173, 173, 173, 180, 174, 174, 175, 175, 175, 175,
	175, 175, 212, 213, 176, 176, 176, 214, 214, 224,
	228, 228, 227, 226, 226, 225, 225, 202, 202, 203,
	203, 201, 200, 161, 161, 160, 160, 159, 159, 329,
	329, 230, 230, 162, 162, 163, 155, 155, 241, 241,
	241, 241, 149, 149, 128, 128, 150, 150, 124, 124,
	127, 127, 125, 125, 125, 125, 143, 143, 144, 144,
	122, 122, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 267, 267, 267, 217, 116, 116, 116,
	117, 117, 118, 118, 272, 272, 272, 273, 273, 273,
	273, 271, 271, 271, 271, 271, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 6, 1, 1,
	1, 3, 3, 0, 2, 0, 2, 1, 3, 5,
	0, 4, 6, 7, 1, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 6, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 4, 6, 4, 6, 4,
	6, 3, 5, 3, 5, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 5,
	3, 0, 3, 3, 0, 2, 3, 2, 3, 6,
	6, 1, 2, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 3, 2,
	1, 1, 1, 1, 1, 3, 4, 5, 3, 2,
	6, 3, 4, 3, 3, 3, 3, 1, 3, 3,
	1, 2, 2, 1, 0, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	3, 1, 1, 1, 1, 1, 2, 3, 4, 4,
	4, 4, 2, 4, 4, 4, 4, 4, 4, 2,
	3, 3, 2, 4, 5, 4, 5, 2, 3, 3,
	4, 2, 4, 3, 3, 4, 4, 2, 5, 5,
	6, 2, 2, 0, 2, 0, 3, 7, 10, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 3, 2, 0, 3, 1, 2,
	2, 3, 6, 2, 1, 1, 2, 4, 2, 5,
	7, 8, 5, 3, 1, 4, 6, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 4, 3, 0, 6, 11,
	14, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 8, 10, 8, 10,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 3,
	2, 3, 3, 2, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 6,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 2, 0, 8, 2, 0, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 1, 1, 8, 8, 1, 2, 4,
	4, 4, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 4, 5, 2, 2,
	1, 1, 2, 5, 2, 3, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 3, 0, 2, 0, 2,
	3, 3, 0, 1, 3, 3, 5, 1, 1, 3,
	2, 4, 4, 0, 7, 4, 6, 3, 1, 5,
	5, 0, 2, 3, 1, 3, 2, 0, 3, 4,
	5, 4, 5, 4, 5, 2, 4, 1, 1, 0,
	5, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 1, 1, 3, 4, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	4, 3, 4, 4, 5, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 2, 1, 2, 1, 1, 2, 1, 3, 1,
	1, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 4, 1, 1, 1, 5, 1, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 6, 6, 4,
	4, 4, 4, 4, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 4, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 3, 5, 4, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 3, 1, 3, 3, 3, 2, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 0, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 2, 2, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 1, 1, 2, 2, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -21, -24, -25, -46,
	-32, -33, -34, -45, -40, -47, -41, -48, -49, -42,
	-52, -53, -55, -54, -50, -51, -56, -64, -84, -85,
	-86, -87, -5, -6, -7, -8, 34, 238, -22, -23,
	67, -26, -27, -28, -29, -30, -31, 89, -302, 93,
	-35, -36, -37, -39, -38, 104, 106, 124, 130, 212,
	218, 240, 242, 249, -94, -96, 236, 237, -57, -58,
	-59, -60, -88, 260, -65, -66, -67, -68, -69, -70,
	-71, -72, -73, -74, -75, -76, -77, -78, -79, -80,
	-81, -82, 35, 272, 61, 100, 244, 300, -9, -10,
	-13, -12, -11, -16, -18, -15, -17, -19, -14, 47,
	69, -300, 97, -97, -95, 351, 309, 263, 23, 325,
	332, 253, -98, 281, 317, 354, -318, -150, 281, 82,
	-125, -116, 344, 4, -279, -281, 20, 21, 23, 33,
	34, 35, 40, 44, 47, 48, 55, 60, 61, 62,
	64, 66, 67, 68, 71, 72, 80, 81, 83, 85,
	89, 91, 93, 96, 97, 99, 104, 105, 106, 112,
	113, 118, 120, 125, 130, 131, 132, 133, 140, 143,
	145, 138, 155, 156, 157, 159, 160, 161, 164, 163,
	168, 171, 174, 176, 177, 178, 181, 179, 183, 184,
	186, 185, 191, 193, 194, 196, 199, 202, 205, 208,
	209, 210, 211, 212, 214, 216, 218, 220, 221, 222,
	223, 224, 226, 227, 229, 230, 231, 232, 233, 236,
	234, 235, 237, 238, 239, 240, 242, 244, 245, 247,
	261, 262, 273, 249, 250, 251, 252, 256, 254, 257,
	258, 260, 263, 265, 268, 271, 272, 274, 277, 275,
	270, 280, 282, 283, 284, 285, 286, 287, 288, 295,
	296, 300, 301, 302, 303, 306, 307, 308, 309, 311,
	314, 315, 316, 321, 326, 327, 328, 329, 330, 28,
	36, 37, 38, 39, 41, 42, 45, 46, 51, 52,
	53, 56, 84, 86, 87, 103, 107, 108, 114, 115,
	116, 126, 128, 134, 135, 144, 146, 147, 148, 149,
	150, 152, 166, 180, 190, 192, 203, 207, 215, 217,
	225, 246, 255, 266, 267, 276, 278, 290, 291, 292,
	297, 298, 313, 317, 318, -318, -124, -116, 82, -116,
	218, 22, 91, 143, 308, 307, 22, 214, 254, 283,
	285, -116, -44, 351, -43, -4, -25, -34, -45, -41,
	-64, -40, -54, -32, -48, -86, -87, -322, 22, -323,
	-324, 69, 97, 124, 253, 143, 91, 307, -271, 4,
	-279, -281, -280, -282, 58, 70, 123, 142, 136, 154,
	158, 167, 169, 182, 204, 206, 243, 264, 22, 24,
	25, 26, 27, 29, 30, 31, 32, 43, 49, 50,
	54, 57, 59, 65, 69, 73, 74, 76, 75, 77,
	78, 79, 88, 90, 92, 94, 95, 98, 100, 102,
	109, 110, 111, 119, 121, 122, 124, 127, 129, 137,
	139, 141, 151, 153, 162, 165, 170, 172, 173, 187,
	188, 189, 195, 197, 198, 200, 201, 213, 219, 228,
	241, 253, 259, 269, 279, 281, 289, 293, 294, 299,
	304, 305, 310, 312, 319, 320, 322, 323, 324, 325,
	156, -116, 156, -322, -120, 249, -116, -120, -83, 257,
	4, 22, 82, 181, 259, 290, 171, 55, 246, 257,
	-62, 296, -61, 290, -270, -63, -151, 181, -116, -327,
	296, 296, -327, -327, -119, 296, 293, -326, 281, 156,
	222, 281, 310, 320, -181, 82, 305, -95, -97, -96,
	320, 281, 139, 82, 310, -139, -140, 304, 151, 102,
	201, -94, -96, -300, -275, -268, -231, 9, 299, 109,
	197, -274, 8, 343, -267, -273, 5, 7, 342, 4,
	-279, -281, -280, -83, 257, 34, 55, 22, 60, 83,
	125, 139, 140, 160, 65, 66, 221, 171, 157, 295,
	161, 258, 282, 296, 69, 311, 286, 105, 281, 139,
	82, 320, -303, 226, -299, -116, -303, -136, -137, 22,
	94, 355, -239, -124, 198, -163, 351, -3, 293, 355,
	-150, -143, -116, -201, -200, 353, 122, 122, 351, -160,
	-161, -200, -201, -116, 22, 122, 153, 153, -240, -239,
	-177, 351, -245, -244, -273, 317, 197, 355, -207, -209,
	342, 343, 337, 187, 331, -221, -211, -224, 103, 246,
	351, -124, -210, 356, 9, -297, -96, 29, -222, -223,
	49, -116, 7, 8, 5, 6, -122, -248, -217, -257,
	299, 109, 189, -295, -296, 4, -279, -272, -249, -259,
	-253, -256, 152, 58, 74, 75, 78, 76, 79, 259,
	310, 50, 28, 107, 108, 207, 215, 278, 297, 298,
	134, 190, 135, 56, 126, 166, 96, 37, 39, 41,
	42, 51, 52, 84, 86, 87, 114, 115, 116, 144,
	146, 147, 148, 149, 150, 192, 225, 266, 276, 291,
	292, 318, -280, -260, -261, -254, -255, -262, -219, 351,
	-207, 197, -116, -83, 330, 2, 261, 351, -62, 53,
	296, -194, -195, -113, -114, -115, 155, 220, 224, 330,
	293, 336, 122, -275, -132, 88, -154, 353, -193, -194,
	-193, 293, -120, -166, -239, -207, -207, -151, 134, -116,
	-151, 139, -116, 134, -139, -140, -152, 134, -151, -152,
	134, -128, 134, -127, -124, -116, 134, -143, 134, -165,
	-184, -185, 170, 111, 195, -168, 22, 94, -168, -168,
	44, 352, 352, 8, 7, 7, -83, -277, -274, 9,
	261, 221, 258, 55, 122, -319, 197, 122, 122, 122,
	122, 122, 221, 258, 119, 295, 122, 155, 220, 273,
	281, 320, 122, 122, -239, 134, -124, -127, 134, -116,
	-239, 134, 355, -303, -144, 351, -155, -241, -207, 344,
	-155, -163, 344, -124, 351, -162, -230, -207, 88, -277,
	-125, 355, -271, 344, -278, -277, 274, 352, -149, -124,
	-161, -240, -126, -124, -126, 260, -116, 30, -153, -207,
	352, 355, -318, -324, 10, 11, 57, 33, 342, 343,
	344, 345, 117, 346, 347, 340, 341, 339, 334, 335,
	336, 63, 175, 248, 13, 14, 15, 26, 200, 169,
	331, 136, 264, 337, 16, 17, 18, 154, 36, 137,
	-121, -129, -207, -207, -207, -207, -207, 206, -159, -202,
	349, -96, 351, -96, -207, -153, 7, -96, -216, 349,
	-225, -207, -160, 351, 5, 351, 5, -304, 326, 119,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 217, -266,
	321, -266, -266, -250, 351, -250, -251, 351, -250, 327,
	332, 351, 30, -218, -246, -247, -249, -258, -252, -256,
	-257, 40, 46, 45, 288, 180, 255, 267, 313, 38,
	196, 145, 144, 146, 147, 148, 149, 150, 266, 37,
	225, 115, 116, 114, 96, 87, 86, 192, 42, 41,
	-260, -261, -254, -255, 84, 291, 292, 152, 39, 52,
	51, 318, 276, -318, -61, -270, -153, 30, -194, 355,
	168, -131, 174, 186, 131, 198, 328, -276, 5, 4,
	-217, -231, 88, 171, -257, -269, 88, -275, -269, 88,
	72, 353, -271, -120, -105, 355, 48, 239, 351, -138,
	187, -112, -301, 325, -138, 351, -117, 134, -116, -301,
	187, -165, -105, 355, 103, -105, 103, -105, 355, 103,
	356, 103, 103, -185, -184, -186, -207, 22, -189, 113,
	183, -207, -209, -95, -95, -95, -141, -235, -207, 219,
	139, -151, 22, 262, -270, -321, 119, -318, -270, -270,
	-270, -270, -270, 257, -44, 119, -116, 168, -270, -270,
	281, 139, 281, -103, 234, -102, 21, 23, 97, 315,
	103, 270, 287, 250, 270, 287, 250, 234, 103, 234,
	234, 103, -299, 30, -143, -146, 355, 122, 30, 4,
	-146, -124, 355, 352, -243, 333, -116, -243, 355, 122,
	352, 355, -199, 323, -190, -54, 351, 88, 30, -190,
	-156, -157, -242, -158, -124, 351, -116, 352, 355, -44,
	-244, 293, -264, -246, -263, 230, 231, 229, 233, 232,
	-246, -271, 290, -207, -207, -207, -207, -207, -207, -207,
	-207, -207, -207, -207, -207, -207, -207, -207, -207, -207,
	-207, -207, -207, -207, -207, 169, 136, 264, 36, 137,
	-207, 293, -207, -207, -207, -207, 179, 187, 189, 299,
	109, 306, 94, 193, -329, 279, 32, -214, -96, 351,
	-229, 27, 269, 22, -221, 246, 351, -202, -207, -203,
	-153, 352, 352, 355, -153, -220, 350, -216, -228, -227,
	322, 352, -153, 319, 22, 94, 344, 7, -178, 329,
	178, 85, 132, 177, -179, 252, -305, 112, 127, 351,
	352, 352, 352, -207, -207, -172, -265, -153, 4, 329,
	178, 85, 132, 177, 252, -172, -173, -207, -153, -174,
	-208, -209, 342, 343, 337, 351, 246, -175, -207, -153,
	-207, 43, 165, 294, -176, -207, 122, -153, -207, -207,
	-207, -153, -153, -153, 351, 7, 7, 290, 290, 7,
	-43, 352, 355, -145, 29, -178, 351, 122, 352, 296,
	-195, -130, 224, 268, 235, 256, 355, -271, -239, -133,
	-143, -134, -116, -198, -197, -285, -286, -283, 139, 305,
	110, 65, -284, 54, 219, 121, 30, 103, 211, 30,
	197, 187, -108, 284, 103, -151, -152, -152, -127, -128,
	-271, -116, -143, -187, -267, 351, 343, -188, 246, 247,
	355, -101, 31, 92, 159, -124, -320, -116, 257, -44,
	-124, -127, -124, 355, 293, -182, 65, 59, -197, 134,
	59, -283, -116, 305, -182, 65, -182, 65, 65, -239,
	33, -54, 122, 33, -54, 122, 293, -127, 293, 293,
	-239, 351, 352, -199, -241, -148, -237, 349, -239, -124,
	-96, -238, 351, -271, -199, 352, -230, -89, 133, 193,
	-92, 325, -277, 274, 122, -124, -167, 241, -207, -167,
	-192, 197, -149, 317, -116, -167, -147, 355, 122, 336,
	-149, -207, -320, 330, -207, -207, 293, -329, 279, -214,
	-207, 179, 189, 299, 109, 306, 94, 193, 122, 351,
	-208, -208, -153, -211, 351, -153, 350, 359, 352, -207,
	350, 350, 355, -226, -227, 98, -207, -140, 355, -139,
	-207, -153, -153, 352, 352, 293, 293, 293, 293, 351,
	-310, 205, 351, 351, -207, 30, 355, 352, 122, 352,
	352, -180, 213, 352, 10, 11, 342, 343, 344, 345,
	117, 346, 347, 340, 341, 339, 334, 335, 336, 63,
	175, 248, 13, 14, 15, 154, 137, -208, -208, -208,
	-153, 351, 352, -212, -213, 122, 119, 30, -176, -176,
	-176, 352, 122, -153, 355, 355, 355, 352, 352, 352,
	7, 352, 355, 352, 330, 330, 352, -246, 349, 349,
	7, -320, -113, 303, 62, 224, -275, 352, 352, 355,
	-246, -117, 139, 351, -117, -116, 351, 159, 159, -54,
	-151, 5, -54, -124, 103, -109, 99, -328, 336, -116,
	-105, -105, -105, -188, -207, -235, -124, 356, 355, -243,
	-102, -124, -116, -116, 187, -197, 134, -107, 187, -116,
	-116, 134, -116, 134, -116, -116, -103, 234, -54, 351,
	-54, 351, -116, 234, -116, -124, 234, -43, -164, 127,
	-243, 355, 70, -171, 158, 182, 123, 167, 243, 142,
	7, -44, -204, 356, 351, -234, 332, -96, -238, -237,
	-164, -92, 122, 280, 199, 274, -155, 188, -167, 64,
	352, -199, -157, -148, -230, 352, -207, -207, -208, -208,
	122, 351, -207, -218, 26, 26, 352, -153, 352, 355,
	-203, -207, 352, -216, 100, -207, 289, 352, 319, -140,
	-140, -140, 5, 178, 132, 177, -179, 177, -179, -179,
	7, -311, -116, 351, 323, -139, 352, -264, -246, -207,
	-212, -207, -264, -246, -208, -208, -208, -208, -208, -208,
	-208, -208, -208, -208, -208, -208, -208, -208, -208, -208,
	-208, -208, -208, 94, 187, 193, -208, 355, -153, 352,
	-213, -212, -207, -207, -246, 352, 352, 352, -153, -207,
	-207, -207, 352, 7, 350, 7, 7, 352, -135, 138,
	-198, -287, 351, -117, -142, -236, -116, -298, 351, -295,
	-296, -122, 351, -284, -207, 351, 351, 351, -138, 351,
	-116, -110, 164, -328, -274, -301, 198, 352, -101, -271,
	-116, 293, 293, 103, 187, 314, -100, 97, 260, -183,
	103, -105, 103, -105, 293, -182, 65, -153, -153, 293,
	293, 352, -215, 129, 44, -237, 158, 158, -237, -171,
	158, -169, 204, -169, -169, -316, 351, 350, -234, -271,
	349, 357, -153, -233, -232, 30, -116, 202, 352, -215,
	-278, 290, 351, -191, 351, 197, -54, -167, 336, 26,
	26, -207, -218, 352, -207, -207, 352, -207, 350, -207,
	5, -207, 352, 352, 352, 352, -312, -116, -207, 352,
	352, 352, -213, 122, 94, 193, 351, -207, 352, 352,
	355, 352, 352, 352, 350, 350, 137, -288, 65, -289,
	57, 110, 69, 187, 189, 305, 219, 54, 88, 228,
	-142, 351, 352, 355, -123, -160, 57, -123, -207, 351,
	-143, 352, -142, -143, -133, 30, -142, 197, -111, 163,
	-328, -274, -108, -101, -116, -116, -197, 103, 187, 88,
	187, 88, 81, 301, -116, -116, -124, -116, -116, 352,
	352, -116, -124, -307, 324, -207, -153, -237, -237, -170,
	312, 197, 158, -237, 350, 352, -317, 7, -234, -233,
	7, -206, -205, 120, 185, 352, -116, 351, -234, -307,
	-210, -122, -116, -91, -90, 5, 95, -143, 65, -163,
	-96, 351, -207, -207, 352, 352, -140, -306, 210, 352,
	-208, 122, 351, -218, 352, -207, 208, -116, -271, -116,
	110, 134, 189, 159, 351, -208, -124, 352, -142, -196,
	-325, 68, 277, -236, -101, -271, -101, 352, -153, 352,
	352, 352, 352, -54, 352, -124, -328, -274, -109, -197,
	189, 189, -207, -246, -105, -105, 293, 293, 293, 293,
	-308, -309, -116, -170, 351, -207, -237, -204, 352, 355,
	-233, 350, 355, 358, 336, -234, 351, -143, -232, 351,
	355, 352, -93, 336, 307, 188, 352, -116, 352, -140,
	44, -208, -218, 352, 352, -116, -289, -117, 187, -207,
	-118, 351, -196, 352, -135, 351, -123, -140, 228, -135,
	-196, 351, -274, -110, -104, 57, -116, -116, 351, 351,
	355, 30, -143, -234, 7, -205, -271, 349, -233, -143,
	352, -153, -90, 5, 260, -199, -313, 223, 247, -153,
	352, 351, 103, 352, -292, 176, -116, -135, -196, -143,
	-101, 352, -124, -135, -142, -111, -99, 312, -271, -153,
	-153, -309, -311, 352, -232, 7, 352, -140, -156, 352,
	-314, -315, 36, 302, 72, -207, -314, -143, 110, -290,
	-293, -291, 197, 123, 209, 265, 352, -135, 352, -138,
	352, -207, 352, 352, 350, 352, -199, -315, 216, 118,
	246, 216, 118, 352, -116, -291, 197, -293, 197, 307,
	91, -292, -196, 26, -106, 48, 239, -294, 184, 239,
	48, 260, -294, -290, -135, -315, 20, 189, 88,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 33, 34, 35, 36, 0, 0, 104, 105,
	0, 108, 109, 110, 111, 112, 113, 0, 0, 0,
	120, 121, 122, 123, 124, 0, 501, 0, 0, 0,
	0, 0, 0, 0, 473, -2, 0, 0, 190, 191,
	192, 193, 194, 0, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 417, 0, 417, 417, 421, 503, 37, 38,
	39, 40, 41, 44, 45, 46, 47, 42, 43, 0,
	382, 500, 0, -2, 511, 0, 0, 0, 0, 0,
	0, 509, 487, 0, 0, -2, 0, 171, 0, 1048,
	976, 982, 983, 1007, 1008, 1009, 1026, 1027, 1028, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
	1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130,
	1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
	1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
	1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
	1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
	1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230,
	1231, 1232, 1233, 1234, 1235, 0, 0, 978, 1048, 165,
	1107, 167, 0, 0, 0, 0, 115, 116, 117, 118,
	119, 164, 141, 0, 148, 149, 150, 151, 152, 153,
	154, 155, 143, 144, 145, 146, 147, 0, 174, 175,
	176, 178, 179, 180, 181, 182, 183, 184, 301, 1021,
	1022, 1023, 1024, 1025, 1236, 1237, 1238, 1239, 1240, 1241,
	1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251,
	1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261,
	1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271,
	1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281,
	1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
	1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301,
	1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311,
	1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321,
	1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331,
	0, 161, 0, 0, 410, 1134, 423, 408, 187, 0,
	261, 262, 263, 264, 265, 0, -2, 1036, 1222, 1140,
	199, 1161, 207, 1228, 0, 210, 215, -2, 137, 425,
	416, 425, 413, 414, 415, 418, 0, 0, 502, 0,
	0, 0, 0, 0, 0, 0, 381, -2, 483, 484,
	0, 0, 0, 0, 0, -2, 0, 506, 506, 506,
	0, 0, 484, 0, 189, 218, 219, 220, 229, 230,
	231, 232, 371, 0, 373, 239, 240, 1003, 0, 1017,
	1018, 1019, 1020, 259, 0, 0, 0, 262, 0, 272,
	303, 0, 0, 0, 0, 0, 279, 0, 282, 0,
	0, 287, 291, 0, 0, 297, 0, 0, 0, 0,
	0, 0, 492, 1113, 495, 989, 493, 0, 0, 508,
	507, 0, 488, 590, 0, 539, 0, 2, 0, 0,
	172, 173, 986, 984, 985, 0, 0, 0, 0, 979,
	955, 953, 954, 166, 168, 0, 0, 0, 0, 596,
	162, 0, 0, 156, 158, 1234, 0, 0, 306, 698,
	0, 0, 0, 0, 0, 0, 790, 792, 1196, 1222,
	0, 794, 795, 0, 797, 799, 800, 0, 803, 804,
	946, 978, 992, 993, 994, 995, 0, 0, 998, 0,
	1000, 1001, 1002, 846, 813, -2, -2, 990, 626, 627,
	628, 629, -2, 1236, 817, 819, 821, 823, 824, 825,
	826, 0, 1180, 1197, 1198, 1218, 1219, 1227, 1231, 1232,
	1204, 1215, 1205, 1192, 1202, 1213, 1054, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1016, 660, 661, 666, 667, 669, 0, 0,
	409, 0, 422, 188, 266, 195, 0, 0, 198, 1191,
	1161, 201, 426, 428, 429, 430, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 213, 138, 0, 411, 424,
	412, 0, 420, 79, 594, 106, 107, 354, 1204, -2,
	354, 1011, 499, 1204, -2, 0, 79, 1204, 135, 79,
	1204, 79, 1204, 974, 981, 131, 1204, 133, 1204, 479,
	520, 521, 0, 0, 0, 0, 504, 505, 0, 0,
	0, 475, 476, 372, 1005, 1004, 260, 267, 88, 89,
	0, 280, 288, 0, 0, 305, 0, 0, 0, 0,
	0, 0, 281, 289, 501, 0, 0, 0, 293, 294,
	0, 0, 0, 0, 0, 1204, 590, 0, 1204, 0,
	0, 1204, 0, 494, 0, 0, 542, 966, 970, 971,
	542, 540, 591, 592, 0, 0, 963, 961, 962, 581,
	977, 0, 951, 952, 581, 90, 101, 0, 0, 972,
	956, 600, 0, 450, 0, 0, 597, 0, 0, 902,
	501, 0, 0, 177, 0, 0, 0, 0, 881, 882,
	883, 884, 885, 886, 889, 890, 887, 888, 891, 892,
	893, 0, 0, 0, 894, 895, 896, 0, 0, 898,
	0, 900, 0, 0, 0, 0, 0, 0, 960, 0,
	0, 897, 703, 704, 705, 727, 728, 0, 791, 957,
	950, 793, 0, -2, 902, 0, 796, 801, 802, 0,
	0, 945, -2, 0, 997, 0, 695, 848, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 925, 931,
	0, 0, 0, 0, 0, 0, 0, 0, 645, 663,
	674, 671, 670, 647, 0, 646, 644, 0, 648, 0,
	0, 0, 501, 0, 904, 608, 609, 610, 611, 612,
	695, 615, 616, 617, 618, 619, 620, 621, 622, 623,
	624, 625, 633, 634, 635, 636, 637, 638, 639, 640,
	641, 642, 643, 657, 0, 632, 632, 632, 649, 650,
	658, 659, 664, 665, 676, 677, 679, 681, 675, 675,
	675, 672, 673, 0, 196, 0, 0, 0, 202, 0,
	0, 431, 226, 227, 228, 433, 434, 208, 233, 234,
	235, 236, 237, 238, 0, 203, 205, 216, 204, 206,
	209, 0, 139, 419, 374, 0, 77, 78, 312, 0,
	0, 375, 0, 498, 0, 0, 0, 1204, 1010, 438,
	0, 482, 125, 0, 0, 127, 0, 129, 0, 0,
	0, 0, 0, 518, 519, 522, 526, 527, 530, 533,
	534, 524, 698, 489, 490, 491, 512, 513, 392, 0,
	0, 268, 269, 270, 271, 273, 0, 302, 274, 275,
	276, 277, 278, 283, 285, 501, 290, 292, 295, 296,
	0, 0, 0, 48, 405, 58, 0, 405, 405, 0,
	0, 0, 0, 54, 0, 0, 56, 0, 0, 0,
	0, 0, 496, 0, 0, 600, 0, 0, 0, 969,
	600, 0, 0, 965, 93, 0, 987, 100, 0, 0,
	0, 0, 462, 0, 462, 452, 0, 0, 0, 462,
	465, 466, 468, 469, 0, 0, 598, 163, 0, 142,
	157, 0, 699, 604, 605, 651, 652, 653, 654, 655,
	700, 701, 0, 706, 707, 708, 709, 710, 711, 712,
	713, 714, 715, -2, -2, -2, 719, 720, 721, -2,
	-2, -2, 725, 726, -2, 899, 901, 0, 960, 0,
	-2, 0, -2, -2, -2, -2, 739, 0, 741, 744,
	746, 748, 0, 0, 0, 0, 959, 758, 937, 0,
	0, 878, 879, 880, 743, 0, 0, 958, 949, 0,
	0, -2, 798, 0, 0, 0, 908, 909, 944, 940,
	0, 805, 511, 0, 0, 0, 0, 0, 1006, 682,
	683, 684, 685, 686, 687, 696, 856, 0, 0, 0,
	818, 820, 822, 0, 0, 0, 0, 912, -2, -2,
	-2, -2, -2, -2, -2, 0, 0, 902, 922, 0,
	0, 761, 0, 0, 0, 0, 1222, 0, 902, 930,
	0, 0, 0, 0, 0, 902, 0, 936, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	159, 160, 0, 601, 603, 613, 0, 0, 197, 0,
	427, 432, 0, 223, 0, 225, 0, 140, 595, 0,
	0, 311, 986, 313, 315, 316, 317, 318, 1011, 0,
	1011, 0, 344, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 446, 0, 136, 79, 79, 975, 79,
	980, 132, 134, 0, 528, 0, 0, 525, 531, 532,
	0, 515, 390, 391, 0, 0, 304, 185, 284, 286,
	298, 299, 581, 0, 0, 0, 0, 404, 60, 1204,
	0, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 53, 0, 0, 0, 0, 0,
	0, 501, 988, 536, 967, 581, 543, 501, 553, 590,
	567, 558, 0, 968, 536, 593, 964, 100, 0, 0,
	87, 0, 91, 102, 0, 973, 114, 0, 599, 447,
	462, 0, 0, 454, 451, 449, 600, 0, 0, 0,
	0, 903, 169, 0, -2, -2, 0, 0, 0, 759,
	-2, 740, 742, 745, 747, 749, 0, 0, 0, 0,
	0, 0, 0, 760, 0, 0, 947, 950, -2, 903,
	906, 907, 0, 0, 941, 0, 0, 0, 0, 510,
	511, 511, 511, 811, 0, 0, 0, 0, 0, 0,
	812, 0, 0, 0, 0, 0, 0, 829, 0, 830,
	831, 0, 0, 832, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 764, 765, 766,
	0, 0, 833, 928, 929, 0, 0, 0, 0, 0,
	0, 838, 0, 935, 0, 0, 0, 842, 843, 844,
	0, 630, 0, 656, 678, 680, 668, 905, 0, 0,
	0, 170, 200, 221, 222, 224, 217, 320, 353, 0,
	326, 0, 1011, 0, 0, 0, 0, 0, 0, 309,
	354, 376, 378, 0, 0, 442, 446, 0, 445, 499,
	126, 128, 130, 0, 0, 514, 392, 0, 0, 300,
	59, 394, 0, 0, 0, 62, 1204, 70, 0, 407,
	71, 1204, 79, 1204, 79, 72, 49, 405, 50, 0,
	51, 0, 402, 0, 393, 400, 0, 0, 538, 0,
	541, 0, 0, 0, 0, 0, 587, 587, 587, 585,
	561, 0, 567, 0, 0, 579, 0, -2, 558, 0,
	538, 86, 0, 0, 0, 103, 460, 461, 448, 459,
	0, 462, 467, 464, 470, 0, 702, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 938, 0, 873, 0,
	0, 949, -2, 910, 939, 943, 0, 806, 0, 0,
	0, 0, 999, 688, 689, 690, 691, 692, 693, 694,
	0, 854, 855, 859, 0, 0, 816, 0, 0, 911,
	921, 923, 762, 763, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, -2, -2, -2, 780, 781, 782,
	-2, -2, -2, 0, 0, 0, 924, 0, 0, 876,
	926, 927, 932, 933, 0, 835, 836, 837, 934, 0,
	0, 0, 662, 0, 606, 0, 0, 614, 307, 0,
	314, 324, 0, 0, 0, 383, 389, 389, 0, 814,
	815, 0, 0, 343, 0, 0, 0, 312, 0, 0,
	0, 444, 446, 0, 437, 438, 523, 529, 516, 392,
	186, 0, 0, 0, 0, 80, 64, 0, 0, 0,
	0, 68, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 497, 850, 0, 0, 544, 0, 0, 0, 0,
	0, 582, 586, 583, 584, 0, 0, 567, 579, 550,
	0, 0, 0, 557, 578, 0, 577, 566, -2, 850,
	92, 0, 0, 0, 0, 0, 453, 463, 0, 0,
	0, -2, 0, 752, -2, -2, 872, 903, 948, 942,
	996, 511, 807, 809, 810, 697, 861, 858, 0, 845,
	827, 828, 920, 0, 0, 0, 0, 903, 875, 834,
	0, 840, 841, 631, 607, 602, 0, 325, 0, 328,
	0, 0, 0, 0, 334, 335, 0, 0, 0, 0,
	0, 0, 352, 0, 392, 991, 0, 392, 0, 0,
	0, 345, 0, 0, 0, 0, 0, 0, 435, 446,
	0, 439, 440, 517, 396, 398, 61, 0, 0, 76,
	0, 0, 406, 0, 79, 79, 395, 0, 0, 0,
	0, 403, 401, 485, 0, 537, 535, 569, 0, 571,
	0, 0, 0, 573, 553, 562, 0, 564, 579, 555,
	0, 0, 548, 0, 547, 567, 575, 0, 0, 486,
	580, 0, 0, 0, 97, 95, 0, 0, 0, 471,
	472, 0, -2, -2, 753, 874, 0, 511, 0, 847,
	-2, 0, 0, 0, 877, 0, 0, 0, 329, 330,
	1011, 0, 333, 336, 0, 338, 1013, 352, 0, 320,
	0, 349, 350, 384, 385, 388, 386, 389, 511, 342,
	347, 0, 320, 310, 352, 0, 0, 441, 442, 63,
	65, 66, 75, 83, 67, 73, 0, 0, 0, 0,
	849, 851, 0, 570, 0, 589, 572, 567, 563, 0,
	560, 551, 0, 552, 0, 579, 0, 0, 559, 0,
	0, 99, 96, 0, 0, 456, 600, 458, 808, 864,
	0, -2, 0, 788, 839, 0, 327, 331, 0, 0,
	358, 0, 320, 352, 346, 0, 392, 0, 0, 308,
	320, 0, 443, 444, 85, 0, 397, 399, 0, 0,
	0, 0, 0, 0, 565, 549, 545, 0, 556, 0,
	576, 511, 98, 94, 0, 457, 0, 0, 0, 860,
	789, 0, 0, 337, 363, 0, 0, 340, 320, 0,
	387, 806, 354, 379, 0, 436, 69, 0, 82, 0,
	0, 852, 853, 588, 554, 0, 574, 0, 600, 857,
	862, 865, -2, 1164, 1045, 0, 863, 0, 0, 339,
	359, 360, 0, 355, 356, 357, 1012, 341, 351, 358,
	352, 84, 55, 57, 546, 0, 455, 0, 867, 868,
	869, 870, 871, 323, 332, 361, 0, 362, 0, 0,
	0, 363, 320, 0, 319, 321, 322, 364, 0, 367,
	368, 0, 365, 348, 380, 866, 366, 369, 370,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 340, 3, 346, 341, 3,
	351, 352, 344, 342, 355, 343, 353, 345, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 359, 354,
	334, 336, 335, 3, 356, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 349, 3, 350, 347, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 357, 339, 358, 337,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 338, 57677, 348, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:856
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:862
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:868
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 32:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:909
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 48:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:950
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:956
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:962
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:968
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:974
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:978
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:984
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:988
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:994
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1034
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1057
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1067
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = nil
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = DropCascade
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = DropRestrict
		}
	case 79:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = DropDefault
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 81:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1129
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 83:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1130
		{
		}
	case 84:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1133
		{
			return unimplemented(sqllex, "alter using")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1134
		{
		}
	case 86:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 93:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 95:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.str = ""
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1207
		{
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1230
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1236
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1262
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1263
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1264
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1265
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1392
		{ /* SKIP DOC */
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1508
		{
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1577
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1588
		{ /* SKIP DOC */
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1589
		{ /* SKIP DOC */
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1590
		{
			return unimplemented(sqllex, "set local")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1655
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1658
		{
			return unimplemented(sqllex, "set from current")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1665
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1669
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1675
		{
		}
	case 214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1677
		{
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = Low
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = Normal
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = High
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.str = "client_encoding"
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1953
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1957
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1961
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1985
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1989
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1993
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2005
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2027
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2061
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2098
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2102
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = DropDefault
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2112
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2317
		{
			return unimplemented(sqllex, "match full")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2318
		{
			return unimplemented(sqllex, "match partial")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2319
		{
			return unimplemented(sqllex, "match simple")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2320
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2326
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2327
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2328
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2329
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2330
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2333
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2336
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2339
		{
			return unimplemented(sqllex, "no action")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2342
		{
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2343
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2344
		{
			return unimplemented(sqllex, "action set null")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2345
		{
			return unimplemented(sqllex, "action set default")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2364
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2377
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 378:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = true
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = false
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2452
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2453
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2456
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2457
		{
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = Ascending
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = Descending
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2469
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 393:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2497
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2499
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = true
		}
	case 405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = false
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2532
		{
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2533
		{
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2544
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2573
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2582
		{
		}
	case 417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2583
		{
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.str = ""
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2595
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.str = ""
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2629
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = ReadOnly
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = ReadWrite
		}
	case 435:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.str = ""
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.str = ""
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.str = ""
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.str = ""
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2737
		{
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2738
		{
		}
	case 447:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2804
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2808
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2816
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 463:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2832
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2838
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2839
		{
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3066
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3067
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3068
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3071
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3072
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3075
		{
			return unimplemented(sqllex, "cte")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3078
		{
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3079
		{
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3082
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3083
		{
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3086
		{
		}
	case 503:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3087
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = true
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = false
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = false
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = true
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3110
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3111
		{
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3158
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3178
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3230
		{
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3231
		{
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3234
		{
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3235
		{
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3289
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &From{}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3325
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3343
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3370
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 554:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3387
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.union.val = nil
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3445
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3451
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = true
		}
	case 567:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = false
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.str = astFullJoin
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.str = astLeftJoin
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.str = astRightJoin
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.str = astInnerJoin
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3562
		{
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3563
		{
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3588
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3649
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3662
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3663
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3677
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3686
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3749
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3758
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = nil
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3823
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3919
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3951
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3990
		{
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3991
		{
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = year
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = month
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = day
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = hour
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = minute
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = month
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = hour
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = minute
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = minute
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = nil
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = second
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4086
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4121
		{
			return unimplemented(sqllex, "at tz")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4289
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4355
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4383
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4395
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4491
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4528
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4581
		{
			return unimplemented(sqllex, "variadic")
		}
	case 808:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4582
		{
			return unimplemented(sqllex, "variadic")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4584
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4588
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4592
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4605
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4621
		{
			return unimplemented(sqllex, "func_application")
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4622
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4626
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4651
		{
			return unimplemented(sqllex, "current role")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4652
		{
			return unimplemented(sqllex, "current user")
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4653
		{
			return unimplemented(sqllex, "session user")
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4654
		{
			return unimplemented(sqllex, "user")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4683
		{
			return unimplemented(sqllex, "treat")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4727
		{
			return unimplemented(sqllex, "within group")
		}
	case 846:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4728
		{
		}
	case 847:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4732
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = Window(nil)
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4753
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4757
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4763
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 857:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.str = ""
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4815
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4825
		{
			return unimplemented(sqllex, "frame range")
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4826
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 864:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4827
		{
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4830
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 866:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4831
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4837
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4838
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4839
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4840
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4841
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = Any
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = Some
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = All
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = Plus
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4896
		{
			sqlVAL.union.val = Minus
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = Mult
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = Div
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = FloorDiv
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = Mod
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = Bitand
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = Bitor
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = Pow
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = Bitxor
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = LT
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = GT
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = EQ
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4908
		{
			sqlVAL.union.val = LE
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = GE
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = NE
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = Like
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = NotLike
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = ILike
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = NotILike
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 920:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4998
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5006
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5012
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5078
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5082
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 942:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 944:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 946:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5141
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5158
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5170
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5180
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5196
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5200
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5205
		{
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5206
		{
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5225
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5234
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5240
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5244
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5289
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5299
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5320
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5324
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5349
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5359
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 989:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5368
		{
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5378
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5382
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5389
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5393
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5397
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5401
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5404
		{
			return unimplemented(sqllex, "func const")
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5406
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5410
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 999:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5413
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5415
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5419
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5423
		{
			sqlVAL.union.val = DNull
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5430
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5434
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5440
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5475
		{
			sqlVAL.str = ""
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5481
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5485
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
