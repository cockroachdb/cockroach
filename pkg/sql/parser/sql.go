// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const GRANT = 57467
const GRANTS = 57468
const GREATEST = 57469
const GROUP = 57470
const GROUPING = 57471
const HAVING = 57472
const HELP = 57473
const HIGH = 57474
const HOUR = 57475
const IMPORT = 57476
const INCREMENTAL = 57477
const IF = 57478
const IFNULL = 57479
const ILIKE = 57480
const IN = 57481
const INTERLEAVE = 57482
const INDEX = 57483
const INDEXES = 57484
const INITIALLY = 57485
const INNER = 57486
const INSERT = 57487
const INT = 57488
const INT2VECTOR = 57489
const INT2 = 57490
const INT4 = 57491
const INT8 = 57492
const INT64 = 57493
const INTEGER = 57494
const INTERSECT = 57495
const INTERVAL = 57496
const INTO = 57497
const IS = 57498
const ISOLATION = 57499
const JOB = 57500
const JOBS = 57501
const JOIN = 57502
const KEY = 57503
const KEYS = 57504
const KV = 57505
const LATERAL = 57506
const LC_CTYPE = 57507
const LC_COLLATE = 57508
const LEADING = 57509
const LEAST = 57510
const LEFT = 57511
const LEVEL = 57512
const LIKE = 57513
const LIMIT = 57514
const LOCAL = 57515
const LOCALTIME = 57516
const LOCALTIMESTAMP = 57517
const LOW = 57518
const LSHIFT = 57519
const MATCH = 57520
const MINUTE = 57521
const MONTH = 57522
const NAN = 57523
const NAME = 57524
const NAMES = 57525
const NATURAL = 57526
const NEXT = 57527
const NO = 57528
const NO_INDEX_JOIN = 57529
const NORMAL = 57530
const NOT = 57531
const NOTHING = 57532
const NULL = 57533
const NULLIF = 57534
const NULLS = 57535
const NUMERIC = 57536
const OF = 57537
const OFF = 57538
const OFFSET = 57539
const OID = 57540
const ON = 57541
const ONLY = 57542
const OPTIONS = 57543
const OR = 57544
const ORDER = 57545
const ORDINALITY = 57546
const OUT = 57547
const OUTER = 57548
const OVER = 57549
const OVERLAPS = 57550
const OVERLAY = 57551
const PARENT = 57552
const PARTIAL = 57553
const PARTITION = 57554
const PASSWORD = 57555
const PAUSE = 57556
const PLACING = 57557
const PLANS = 57558
const POSITION = 57559
const PRECEDING = 57560
const PRECISION = 57561
const PREPARE = 57562
const PRIMARY = 57563
const PRIORITY = 57564
const QUERIES = 57565
const QUERY = 57566
const RANGE = 57567
const READ = 57568
const REAL = 57569
const RECURSIVE = 57570
const REF = 57571
const REFERENCES = 57572
const REGCLASS = 57573
const REGPROC = 57574
const REGPROCEDURE = 57575
const REGNAMESPACE = 57576
const REGTYPE = 57577
const RENAME = 57578
const REPEATABLE = 57579
const RELEASE = 57580
const RESET = 57581
const RESTORE = 57582
const RESTRICT = 57583
const RESUME = 57584
const RETURNING = 57585
const REVOKE = 57586
const RIGHT = 57587
const ROLLBACK = 57588
const ROLLUP = 57589
const ROW = 57590
const ROWS = 57591
const RSHIFT = 57592
const SAVEPOINT = 57593
const SCATTER = 57594
const SEARCH = 57595
const SECOND = 57596
const SELECT = 57597
const SEQUENCES = 57598
const SERIAL = 57599
const SERIALIZABLE = 57600
const SESSION = 57601
const SESSIONS = 57602
const SESSION_USER = 57603
const SET = 57604
const SETTING = 57605
const SETTINGS = 57606
const SHOW = 57607
const SIMILAR = 57608
const SIMPLE = 57609
const SMALLINT = 57610
const SMALLSERIAL = 57611
const SNAPSHOT = 57612
const SOME = 57613
const SPLIT = 57614
const SQL = 57615
const START = 57616
const STATUS = 57617
const STDIN = 57618
const STRICT = 57619
const STRING = 57620
const STORE = 57621
const STORING = 57622
const SUBSTRING = 57623
const SYMMETRIC = 57624
const SYSTEM = 57625
const TABLE = 57626
const TABLES = 57627
const TEMP = 57628
const TEMPLATE = 57629
const TEMPORARY = 57630
const TESTING_RANGES = 57631
const TESTING_RELOCATE = 57632
const TEXT = 57633
const THEN = 57634
const TIME = 57635
const TIMESTAMP = 57636
const TIMESTAMPTZ = 57637
const TO = 57638
const TRAILING = 57639
const TRACE = 57640
const TRANSACTION = 57641
const TREAT = 57642
const TRIM = 57643
const TRUE = 57644
const TRUNCATE = 57645
const TYPE = 57646
const UNBOUNDED = 57647
const UNCOMMITTED = 57648
const UNION = 57649
const UNIQUE = 57650
const UNKNOWN = 57651
const UPDATE = 57652
const UPSERT = 57653
const USE = 57654
const USER = 57655
const USERS = 57656
const USING = 57657
const UUID = 57658
const VALID = 57659
const VALIDATE = 57660
const VALUE = 57661
const VALUES = 57662
const VARCHAR = 57663
const VARIADIC = 57664
const VIEW = 57665
const VARYING = 57666
const WHEN = 57667
const WHERE = 57668
const WINDOW = 57669
const WITH = 57670
const WITHIN = 57671
const WITHOUT = 57672
const WRITE = 57673
const YEAR = 57674
const ZONE = 57675
const NOT_LA = 57676
const WITH_LA = 57677
const AS_LA = 57678
const POSTFIXOP = 57679
const UMINUS = 57680
const HELPTOKEN = 57681

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6507

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	358, 54,
	-2, 664,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	141, 518,
	-2, 0,
	-1, 62,
	92, 664,
	145, 664,
	310, 664,
	311, 664,
	-2, 0,
	-1, 73,
	103, 639,
	112, 639,
	153, 639,
	172, 639,
	197, 639,
	203, 639,
	307, 639,
	-2, 628,
	-1, 104,
	4, 666,
	20, 666,
	21, 666,
	23, 666,
	28, 666,
	33, 666,
	34, 666,
	35, 666,
	36, 666,
	37, 666,
	38, 666,
	39, 666,
	40, 666,
	41, 666,
	42, 666,
	44, 666,
	45, 666,
	46, 666,
	47, 666,
	48, 666,
	51, 666,
	52, 666,
	53, 666,
	55, 666,
	56, 666,
	60, 666,
	61, 666,
	62, 666,
	64, 666,
	66, 666,
	67, 666,
	68, 666,
	71, 666,
	72, 666,
	73, 666,
	81, 666,
	82, 666,
	83, 666,
	84, 666,
	85, 666,
	86, 666,
	87, 666,
	88, 666,
	90, 666,
	92, 666,
	94, 666,
	97, 666,
	98, 666,
	100, 666,
	104, 666,
	105, 666,
	106, 666,
	107, 666,
	108, 666,
	109, 666,
	113, 666,
	114, 666,
	115, 666,
	116, 666,
	117, 666,
	119, 666,
	121, 666,
	126, 666,
	127, 666,
	129, 666,
	131, 666,
	132, 666,
	133, 666,
	134, 666,
	135, 666,
	136, 666,
	137, 666,
	140, 666,
	142, 666,
	145, 666,
	146, 666,
	147, 666,
	148, 666,
	149, 666,
	150, 666,
	151, 666,
	152, 666,
	154, 666,
	157, 666,
	158, 666,
	159, 666,
	161, 666,
	162, 666,
	163, 666,
	165, 666,
	166, 666,
	168, 666,
	170, 666,
	173, 666,
	176, 666,
	178, 666,
	179, 666,
	180, 666,
	181, 666,
	182, 666,
	183, 666,
	185, 666,
	186, 666,
	187, 666,
	188, 666,
	192, 666,
	193, 666,
	194, 666,
	195, 666,
	196, 666,
	198, 666,
	200, 666,
	201, 666,
	204, 666,
	205, 666,
	207, 666,
	209, 666,
	210, 666,
	211, 666,
	212, 666,
	213, 666,
	214, 666,
	216, 666,
	217, 666,
	218, 666,
	219, 666,
	220, 666,
	222, 666,
	223, 666,
	224, 666,
	225, 666,
	226, 666,
	227, 666,
	228, 666,
	229, 666,
	231, 666,
	232, 666,
	233, 666,
	234, 666,
	235, 666,
	236, 666,
	237, 666,
	238, 666,
	239, 666,
	240, 666,
	241, 666,
	242, 666,
	244, 666,
	246, 666,
	247, 666,
	248, 666,
	249, 666,
	251, 666,
	252, 666,
	253, 666,
	254, 666,
	256, 666,
	257, 666,
	258, 666,
	259, 666,
	260, 666,
	262, 666,
	263, 666,
	264, 666,
	265, 666,
	267, 666,
	268, 666,
	269, 666,
	270, 666,
	272, 666,
	273, 666,
	274, 666,
	275, 666,
	276, 666,
	277, 666,
	278, 666,
	279, 666,
	280, 666,
	281, 666,
	283, 666,
	285, 666,
	286, 666,
	287, 666,
	288, 666,
	289, 666,
	290, 666,
	291, 666,
	293, 666,
	294, 666,
	295, 666,
	298, 666,
	299, 666,
	300, 666,
	301, 666,
	303, 666,
	304, 666,
	305, 666,
	306, 666,
	309, 666,
	310, 666,
	311, 666,
	312, 666,
	314, 666,
	316, 666,
	317, 666,
	318, 666,
	319, 666,
	320, 666,
	321, 666,
	324, 666,
	329, 666,
	330, 666,
	331, 666,
	332, 666,
	333, 666,
	-2, 0,
	-1, 117,
	103, 638,
	112, 638,
	153, 638,
	172, 638,
	197, 638,
	203, 638,
	307, 638,
	-2, 631,
	-1, 121,
	1, 567,
	157, 567,
	222, 567,
	226, 567,
	357, 567,
	358, 567,
	-2, 0,
	-1, 123,
	1, 567,
	357, 567,
	358, 567,
	-2, 0,
	-1, 124,
	1, 567,
	357, 567,
	358, 567,
	-2, 0,
	-1, 125,
	1, 571,
	357, 571,
	358, 571,
	-2, 0,
	-1, 132,
	4, 672,
	5, 672,
	6, 672,
	7, 672,
	8, 672,
	9, 672,
	20, 672,
	21, 672,
	23, 672,
	28, 672,
	29, 672,
	33, 672,
	34, 672,
	35, 672,
	36, 672,
	37, 672,
	38, 672,
	39, 672,
	40, 672,
	41, 672,
	42, 672,
	44, 672,
	45, 672,
	46, 672,
	47, 672,
	48, 672,
	49, 672,
	50, 672,
	51, 672,
	52, 672,
	53, 672,
	55, 672,
	56, 672,
	58, 672,
	60, 672,
	61, 672,
	62, 672,
	64, 672,
	66, 672,
	67, 672,
	68, 672,
	70, 672,
	71, 672,
	72, 672,
	73, 672,
	75, 672,
	76, 672,
	77, 672,
	79, 672,
	80, 672,
	81, 672,
	82, 672,
	83, 672,
	84, 672,
	85, 672,
	86, 672,
	87, 672,
	88, 672,
	90, 672,
	92, 672,
	94, 672,
	97, 672,
	98, 672,
	100, 672,
	104, 672,
	105, 672,
	106, 672,
	107, 672,
	108, 672,
	109, 672,
	110, 672,
	113, 672,
	114, 672,
	115, 672,
	116, 672,
	117, 672,
	119, 672,
	121, 672,
	124, 672,
	126, 672,
	127, 672,
	129, 672,
	131, 672,
	132, 672,
	133, 672,
	134, 672,
	135, 672,
	136, 672,
	137, 672,
	138, 672,
	140, 672,
	142, 672,
	144, 672,
	145, 672,
	146, 672,
	147, 672,
	148, 672,
	149, 672,
	150, 672,
	151, 672,
	152, 672,
	154, 672,
	156, 672,
	157, 672,
	158, 672,
	159, 672,
	160, 672,
	161, 672,
	162, 672,
	163, 672,
	165, 672,
	166, 672,
	168, 672,
	169, 672,
	170, 672,
	171, 672,
	173, 672,
	176, 672,
	178, 672,
	179, 672,
	180, 672,
	181, 672,
	182, 672,
	183, 672,
	184, 672,
	185, 672,
	186, 672,
	187, 672,
	188, 672,
	189, 672,
	191, 672,
	192, 672,
	193, 672,
	194, 672,
	195, 672,
	196, 672,
	198, 672,
	201, 672,
	204, 672,
	205, 672,
	206, 672,
	207, 672,
	208, 672,
	209, 672,
	210, 672,
	211, 672,
	212, 672,
	213, 672,
	214, 672,
	216, 672,
	217, 672,
	218, 672,
	219, 672,
	220, 672,
	222, 672,
	223, 672,
	224, 672,
	225, 672,
	226, 672,
	227, 672,
	228, 672,
	229, 672,
	231, 672,
	232, 672,
	233, 672,
	234, 672,
	235, 672,
	236, 672,
	237, 672,
	238, 672,
	239, 672,
	240, 672,
	241, 672,
	242, 672,
	244, 672,
	245, 672,
	246, 672,
	247, 672,
	248, 672,
	249, 672,
	251, 672,
	252, 672,
	253, 672,
	254, 672,
	256, 672,
	257, 672,
	258, 672,
	259, 672,
	260, 672,
	261, 672,
	262, 672,
	263, 672,
	264, 672,
	265, 672,
	266, 672,
	267, 672,
	268, 672,
	269, 672,
	270, 672,
	272, 672,
	273, 672,
	274, 672,
	275, 672,
	276, 672,
	277, 672,
	278, 672,
	279, 672,
	280, 672,
	281, 672,
	283, 672,
	285, 672,
	286, 672,
	287, 672,
	288, 672,
	289, 672,
	290, 672,
	291, 672,
	293, 672,
	294, 672,
	295, 672,
	298, 672,
	299, 672,
	300, 672,
	301, 672,
	302, 672,
	303, 672,
	304, 672,
	305, 672,
	306, 672,
	309, 672,
	310, 672,
	311, 672,
	312, 672,
	313, 672,
	314, 672,
	316, 672,
	317, 672,
	318, 672,
	319, 672,
	320, 672,
	321, 672,
	324, 672,
	329, 672,
	330, 672,
	331, 672,
	332, 672,
	333, 672,
	334, 672,
	340, 672,
	345, 672,
	346, 672,
	347, 672,
	354, 672,
	360, 672,
	-2, 0,
	-1, 135,
	1, 54,
	358, 54,
	-2, 664,
	-1, 598,
	123, 1260,
	296, 1260,
	339, 1260,
	356, 1260,
	-2, 0,
	-1, 599,
	123, 1212,
	296, 1212,
	339, 1212,
	356, 1212,
	-2, 0,
	-1, 601,
	123, 1318,
	296, 1318,
	339, 1318,
	356, 1318,
	-2, 0,
	-1, 603,
	123, 1340,
	296, 1340,
	339, 1340,
	356, 1340,
	-2, 0,
	-1, 610,
	1, 304,
	357, 304,
	358, 304,
	-2, 1265,
	-1, 636,
	1, 386,
	353, 386,
	355, 386,
	357, 386,
	358, 386,
	-2, 0,
	-1, 637,
	1, 434,
	120, 434,
	353, 434,
	355, 434,
	357, 434,
	358, 434,
	-2, 0,
	-1, 643,
	1, 400,
	353, 400,
	355, 400,
	357, 400,
	358, 400,
	-2, 0,
	-1, 645,
	1, 404,
	353, 404,
	355, 404,
	357, 404,
	358, 404,
	-2, 0,
	-1, 648,
	1, 412,
	353, 412,
	355, 412,
	357, 412,
	358, 412,
	-2, 0,
	-1, 649,
	1, 417,
	353, 417,
	355, 417,
	357, 417,
	358, 417,
	-2, 0,
	-1, 652,
	1, 427,
	353, 427,
	355, 427,
	357, 427,
	358, 427,
	-2, 0,
	-1, 661,
	112, 674,
	172, 674,
	197, 674,
	-2, 634,
	-1, 664,
	112, 673,
	172, 673,
	197, 673,
	-2, 632,
	-1, 794,
	354, 1190,
	-2, 1183,
	-1, 795,
	354, 1191,
	-2, 1184,
	-1, 801,
	5, 847,
	354, 847,
	-2, 1391,
	-1, 826,
	5, 806,
	-2, 1361,
	-1, 827,
	5, 841,
	354, 841,
	-2, 1363,
	-1, 828,
	5, 816,
	-2, 1364,
	-1, 829,
	5, 815,
	-2, 1365,
	-1, 830,
	5, 841,
	354, 841,
	-2, 1368,
	-1, 831,
	5, 841,
	354, 841,
	-2, 1369,
	-1, 832,
	5, 842,
	-2, 1372,
	-1, 833,
	5, 798,
	-2, 1373,
	-1, 834,
	5, 798,
	-2, 1374,
	-1, 835,
	5, 823,
	-2, 1378,
	-1, 836,
	5, 808,
	-2, 1379,
	-1, 837,
	5, 809,
	-2, 1380,
	-1, 838,
	5, 799,
	-2, 1385,
	-1, 839,
	5, 800,
	-2, 1386,
	-1, 840,
	5, 801,
	-2, 1387,
	-1, 841,
	5, 802,
	-2, 1388,
	-1, 842,
	5, 803,
	-2, 1389,
	-1, 843,
	5, 804,
	-2, 1390,
	-1, 844,
	5, 798,
	-2, 1395,
	-1, 845,
	5, 807,
	-2, 1400,
	-1, 846,
	5, 805,
	-2, 1403,
	-1, 847,
	5, 839,
	354, 839,
	-2, 1405,
	-1, 848,
	5, 843,
	-2, 1408,
	-1, 849,
	5, 845,
	-2, 1409,
	-1, 850,
	5, 838,
	354, 838,
	-2, 1414,
	-1, 870,
	213, 662,
	-2, 511,
	-1, 874,
	199, 1187,
	-2, 0,
	-1, 909,
	1, 213,
	353, 213,
	355, 213,
	357, 213,
	358, 213,
	-2, 637,
	-1, 912,
	4, 1413,
	10, 1413,
	11, 1413,
	13, 1413,
	14, 1413,
	15, 1413,
	16, 1413,
	17, 1413,
	18, 1413,
	20, 1413,
	21, 1413,
	23, 1413,
	26, 1413,
	28, 1413,
	30, 1413,
	33, 1413,
	34, 1413,
	35, 1413,
	36, 1413,
	37, 1413,
	38, 1413,
	39, 1413,
	40, 1413,
	41, 1413,
	42, 1413,
	44, 1413,
	45, 1413,
	46, 1413,
	47, 1413,
	48, 1413,
	51, 1413,
	52, 1413,
	53, 1413,
	55, 1413,
	56, 1413,
	57, 1413,
	60, 1413,
	61, 1413,
	62, 1413,
	63, 1413,
	64, 1413,
	66, 1413,
	67, 1413,
	68, 1413,
	70, 1413,
	71, 1413,
	72, 1413,
	73, 1413,
	81, 1413,
	82, 1413,
	83, 1413,
	84, 1413,
	85, 1413,
	86, 1413,
	87, 1413,
	88, 1413,
	90, 1413,
	92, 1413,
	94, 1413,
	97, 1413,
	98, 1413,
	100, 1413,
	104, 1413,
	105, 1413,
	106, 1413,
	107, 1413,
	108, 1413,
	109, 1413,
	113, 1413,
	114, 1413,
	115, 1413,
	116, 1413,
	117, 1413,
	118, 1413,
	119, 1413,
	121, 1413,
	124, 1413,
	126, 1413,
	127, 1413,
	129, 1413,
	131, 1413,
	132, 1413,
	133, 1413,
	134, 1413,
	135, 1413,
	136, 1413,
	137, 1413,
	138, 1413,
	139, 1413,
	140, 1413,
	142, 1413,
	144, 1413,
	145, 1413,
	146, 1413,
	147, 1413,
	148, 1413,
	149, 1413,
	150, 1413,
	151, 1413,
	152, 1413,
	154, 1413,
	156, 1413,
	157, 1413,
	158, 1413,
	159, 1413,
	160, 1413,
	161, 1413,
	162, 1413,
	163, 1413,
	165, 1413,
	166, 1413,
	168, 1413,
	169, 1413,
	170, 1413,
	171, 1413,
	173, 1413,
	176, 1413,
	177, 1413,
	178, 1413,
	179, 1413,
	180, 1413,
	181, 1413,
	182, 1413,
	183, 1413,
	184, 1413,
	185, 1413,
	186, 1413,
	187, 1413,
	188, 1413,
	192, 1413,
	193, 1413,
	194, 1413,
	195, 1413,
	196, 1413,
	198, 1413,
	201, 1413,
	202, 1413,
	204, 1413,
	205, 1413,
	207, 1413,
	209, 1413,
	210, 1413,
	211, 1413,
	212, 1413,
	213, 1413,
	214, 1413,
	216, 1413,
	217, 1413,
	218, 1413,
	219, 1413,
	220, 1413,
	222, 1413,
	223, 1413,
	224, 1413,
	225, 1413,
	226, 1413,
	227, 1413,
	228, 1413,
	229, 1413,
	231, 1413,
	232, 1413,
	233, 1413,
	234, 1413,
	235, 1413,
	236, 1413,
	237, 1413,
	238, 1413,
	239, 1413,
	240, 1413,
	241, 1413,
	242, 1413,
	244, 1413,
	245, 1413,
	246, 1413,
	247, 1413,
	248, 1413,
	249, 1413,
	250, 1413,
	251, 1413,
	252, 1413,
	253, 1413,
	254, 1413,
	256, 1413,
	257, 1413,
	258, 1413,
	259, 1413,
	260, 1413,
	262, 1413,
	263, 1413,
	264, 1413,
	265, 1413,
	266, 1413,
	267, 1413,
	268, 1413,
	269, 1413,
	270, 1413,
	272, 1413,
	273, 1413,
	274, 1413,
	275, 1413,
	276, 1413,
	277, 1413,
	278, 1413,
	279, 1413,
	280, 1413,
	281, 1413,
	283, 1413,
	285, 1413,
	286, 1413,
	287, 1413,
	288, 1413,
	289, 1413,
	290, 1413,
	291, 1413,
	293, 1413,
	294, 1413,
	295, 1413,
	298, 1413,
	299, 1413,
	300, 1413,
	301, 1413,
	303, 1413,
	304, 1413,
	305, 1413,
	306, 1413,
	309, 1413,
	310, 1413,
	311, 1413,
	312, 1413,
	314, 1413,
	316, 1413,
	317, 1413,
	318, 1413,
	319, 1413,
	320, 1413,
	321, 1413,
	324, 1413,
	329, 1413,
	330, 1413,
	331, 1413,
	332, 1413,
	333, 1413,
	334, 1413,
	335, 1413,
	337, 1413,
	338, 1413,
	339, 1413,
	340, 1413,
	342, 1413,
	343, 1413,
	344, 1413,
	345, 1413,
	346, 1413,
	347, 1413,
	348, 1413,
	349, 1413,
	350, 1413,
	352, 1413,
	355, 1413,
	356, 1413,
	359, 1413,
	360, 1413,
	-2, 0,
	-1, 937,
	123, 1340,
	296, 1340,
	339, 1340,
	356, 1340,
	-2, 0,
	-1, 1005,
	112, 673,
	172, 673,
	197, 673,
	-2, 635,
	-1, 1059,
	103, 639,
	112, 639,
	153, 639,
	172, 639,
	197, 639,
	203, 639,
	307, 639,
	-2, 733,
	-1, 1140,
	103, 639,
	112, 639,
	153, 639,
	172, 639,
	197, 639,
	203, 639,
	307, 639,
	-2, 966,
	-1, 1150,
	354, 1167,
	-2, 1155,
	-1, 1167,
	355, 1107,
	-2, 0,
	-1, 1401,
	1, 734,
	70, 734,
	103, 734,
	112, 734,
	124, 734,
	128, 734,
	130, 734,
	144, 734,
	153, 734,
	160, 734,
	169, 734,
	172, 734,
	184, 734,
	197, 734,
	199, 734,
	203, 734,
	243, 734,
	245, 734,
	307, 734,
	315, 734,
	326, 734,
	327, 734,
	336, 734,
	353, 734,
	355, 734,
	357, 734,
	358, 734,
	359, 734,
	-2, 733,
	-1, 1461,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 882,
	-1, 1462,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 883,
	-1, 1463,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 884,
	-1, 1467,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 888,
	-1, 1468,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 889,
	-1, 1469,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 890,
	-1, 1472,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 895,
	-1, 1478,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 897,
	-1, 1480,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 901,
	-1, 1481,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 902,
	-1, 1482,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 903,
	-1, 1483,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 904,
	-1, 1509,
	208, 1049,
	-2, 1052,
	-1, 1551,
	123, 1089,
	354, 1190,
	-2, 1183,
	-1, 1552,
	123, 1090,
	-2, 1357,
	-1, 1553,
	123, 1091,
	-2, 1264,
	-1, 1554,
	123, 1092,
	-2, 1227,
	-1, 1555,
	123, 1093,
	-2, 1244,
	-1, 1556,
	123, 1094,
	-2, 1263,
	-1, 1557,
	123, 1095,
	-2, 1315,
	-1, 1763,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 896,
	-1, 1764,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 898,
	-1, 1769,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 899,
	-1, 1787,
	208, 1048,
	-2, 1051,
	-1, 1998,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 900,
	-1, 2003,
	156, 0,
	-2, 916,
	-1, 2013,
	208, 1050,
	-2, 1053,
	-1, 2055,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 943,
	-1, 2056,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 944,
	-1, 2057,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 945,
	-1, 2061,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 949,
	-1, 2062,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 950,
	-1, 2063,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 951,
	-1, 2189,
	156, 0,
	-2, 917,
	-1, 2192,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 920,
	-1, 2193,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 922,
	-1, 2294,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 921,
	-1, 2295,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 923,
	-1, 2302,
	156, 0,
	-2, 952,
	-1, 2357,
	156, 0,
	-2, 953,
	-1, 2428,
	36, 0,
	138, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 1360,
}

const sqlPrivate = 57344

const sqlLast = 42235

var sqlAct = [...]int{

	795, 2427, 2411, 2380, 2412, 2086, 2457, 2413, 1923, 2269,
	1622, 2426, 2032, 1196, 1630, 665, 2332, 2230, 1602, 2096,
	72, 2117, 2162, 1237, 1287, 2148, 1891, 2119, 721, 1969,
	1203, 1688, 771, 1970, 1893, 1288, 2249, 1057, 1619, 1853,
	174, 1396, 864, 1718, 1606, 174, 793, 1601, 2128, 448,
	25, 1040, 466, 174, 1053, 2111, 1199, 1697, 1034, 792,
	1605, 1798, 174, 1631, 1852, 468, 785, 1146, 174, 174,
	1507, 1533, 174, 1896, 960, 174, 1405, 1414, 1440, 1705,
	1940, 1238, 174, 1397, 441, 1362, 941, 1672, 1437, 673,
	116, 1684, 1314, 1192, 1062, 1580, 765, 788, 1495, 1517,
	1492, 1065, 1067, 770, 685, 940, 1035, 1527, 1177, 686,
	910, 896, 609, 899, 1603, 438, 1547, 1181, 1216, 1624,
	1135, 691, 764, 1609, 730, 1383, 709, 174, 174, 1008,
	1044, 1370, 889, 582, 1009, 174, 117, 1007, 1025, 1312,
	670, 165, 677, 458, 727, 886, 787, 604, 395, 1210,
	2163, 170, 116, 707, 1024, 1013, 586, 602, 1954, 38,
	1786, 1955, 174, 174, 174, 174, 1623, 1218, 669, 174,
	174, 1090, 1091, 669, 1110, 1111, 1112, 1120, 1121, 1122,
	664, 118, 2454, 1218, 1054, 25, 1087, 1113, 751, 2435,
	1938, 1218, 2423, 2161, 1093, 682, 1645, 1124, 2422, 1907,
	2419, 1908, 1645, 2407, 1087, 49, 1084, 1660, 2406, 1372,
	574, 2397, 1660, 674, 1645, 1653, 2375, 2371, 1092, 2363,
	2244, 1087, 2376, 2161, 1107, 116, 38, 2359, 2314, 724,
	1660, 1653, 2161, 2311, 60, 2309, 2296, 1087, 728, 2161,
	1653, 61, 2280, 62, 2279, 2257, 1087, 2254, 2161, 1087,
	2216, 1087, 2194, 662, 1645, 2191, 1645, 630, 2183, 1653,
	2181, 713, 1645, 714, 1645, 737, 741, 64, 747, 606,
	2160, 2141, 49, 2110, 2161, 1087, 2105, 1600, 745, 1098,
	1600, 711, 1438, 2244, 2007, 1943, 1090, 1091, 1645, 1110,
	1111, 1112, 1120, 1121, 1122, 1371, 1790, 1789, 661, 1117,
	1125, 60, 1791, 1645, 1932, 1943, 735, 739, 61, 1093,
	62, 2068, 1124, 1438, 1090, 1091, 2010, 1123, 853, 1950,
	1120, 1121, 1122, 1951, 1645, 1403, 1917, 1880, 1087, 1797,
	1881, 1087, 1115, 1092, 64, 1881, 1660, 1093, 1108, 1107,
	1124, 1870, 1868, 1867, 1866, 1871, 1645, 1645, 1645, 1787,
	1721, 1694, 1662, 1645, 1645, 1087, 1645, 1090, 1091, 1051,
	1219, 1092, 1652, 1114, 1644, 1599, 1653, 1107, 1645, 1600,
	1377, 1687, 1670, 1230, 1376, 38, 1219, 1231, 1296, 1511,
	1093, 1029, 749, 919, 1219, 135, 917, 132, 916, 2164,
	915, 132, 914, 913, 1098, 1674, 1627, 100, 715, 1530,
	712, 100, 672, 174, 1092, 174, 174, 657, 174, 656,
	1107, 1109, 655, 174, 1117, 1125, 134, 628, 627, 174,
	134, 49, 1098, 626, 625, 624, 132, 1118, 1823, 1824,
	623, 688, 174, 174, 174, 174, 174, 1907, 622, 621,
	620, 691, 1117, 1125, 619, 1371, 1531, 1115, 618, 617,
	60, 616, 133, 1108, 903, 134, 133, 61, 132, 62,
	126, 670, 1333, 439, 126, 1098, 615, 127, 100, 614,
	613, 127, 612, 597, 596, 1115, 2447, 595, 1224, 429,
	428, 1108, 427, 64, 38, 426, 119, 134, 425, 755,
	119, 133, 1532, 1529, 1217, 1116, 410, 38, 1104, 1105,
	1106, 1119, 1346, 1103, 1101, 1102, 1094, 1095, 1096, 1097,
	1099, 1100, 409, 401, 400, 868, 399, 398, 872, 390,
	2218, 389, 741, 133, 1108, 119, 1109, 388, 1713, 159,
	49, 126, 158, 1090, 1091, 157, 1829, 747, 127, 156,
	155, 154, 1118, 49, 892, 892, 153, 863, 152, 151,
	911, 150, 149, 148, 1109, 147, 1093, 119, 146, 60,
	2425, 145, 132, 888, 144, 893, 61, 1534, 62, 174,
	1118, 143, 60, 142, 1823, 1824, 141, 140, 139, 61,
	1092, 62, 138, 137, 136, 174, 1058, 1318, 1544, 1542,
	1540, 134, 64, 955, 2418, 2385, 2354, 1109, 2312, 2221,
	2237, 2217, 174, 2209, 2208, 64, 1020, 132, 2207, 2203,
	1116, 691, 2202, 1104, 1105, 1106, 1119, 100, 1103, 1101,
	1102, 1094, 1095, 1096, 1097, 1099, 1100, 133, 2201, 2200,
	2127, 1883, 2116, 691, 2083, 126, 134, 132, 1116, 2078,
	2077, 1098, 127, 2076, 1119, 1528, 1103, 1101, 1102, 1094,
	1095, 1096, 1097, 1099, 1100, 132, 2018, 1879, 1875, 174,
	1872, 1626, 1234, 1860, 1823, 1824, 134, 1658, 958, 1851,
	1822, 1819, 133, 1818, 1816, 1803, 1802, 1006, 1725, 1020,
	126, 920, 1829, 1401, 134, 682, 1503, 127, 755, 1103,
	1101, 1102, 1094, 1095, 1096, 1097, 1099, 1100, 722, 1019,
	1108, 2335, 133, 951, 1090, 1091, 119, 174, 1154, 174,
	126, 1147, 1056, 1138, 861, 1202, 132, 127, 2034, 1055,
	133, 2398, 2366, 1005, 2353, 2352, 100, 1093, 126, 132,
	2351, 2343, 174, 174, 2341, 127, 119, 2326, 2325, 100,
	2324, 1839, 938, 1033, 928, 134, 2304, 2266, 2245, 691,
	174, 1092, 670, 2224, 119, 2236, 468, 2214, 134, 935,
	2167, 2094, 741, 1825, 1826, 1827, 1828, 1830, 1831, 689,
	1683, 2092, 1829, 1109, 2091, 2089, 1038, 2002, 1682, 1978,
	1977, 133, 1958, 1946, 1085, 1921, 1850, 1812, 956, 126,
	670, 1811, 1504, 1808, 133, 1783, 127, 1778, 1497, 1756,
	1751, 1738, 126, 1004, 1737, 1723, 1693, 1182, 1088, 127,
	662, 1185, 1098, 1592, 1840, 440, 116, 1538, 1388, 1195,
	1189, 1175, 1174, 1016, 1017, 1173, 1172, 1171, 119, 1170,
	1169, 1090, 1091, 1168, 1167, 728, 1063, 1166, 1165, 1164,
	1028, 1163, 1052, 1162, 1738, 1161, 1160, 1159, 1158, 1151,
	1139, 1138, 1026, 723, 1093, 661, 1060, 1032, 934, 923,
	907, 2243, 1030, 174, 2196, 1103, 1101, 1102, 1094, 1095,
	1096, 1097, 1099, 1100, 1147, 174, 1711, 2115, 1092, 1953,
	1949, 174, 1655, 174, 1389, 174, 1201, 1919, 1136, 174,
	1823, 1824, 1056, 948, 950, 1894, 1075, 2247, 2246, 2240,
	1956, 1086, 1909, 1438, 1058, 1874, 1194, 1832, 1833, 1825,
	1826, 1827, 1828, 1830, 1831, 1187, 1073, 930, 1302, 174,
	1188, 1156, 1873, 1762, 1924, 691, 1200, 174, 947, 403,
	2250, 1150, 1207, 174, 1074, 1623, 949, 2035, 1530, 1179,
	1180, 1543, 1541, 1539, 1518, 862, 1178, 1235, 998, 691,
	691, 1903, 1183, 1794, 1965, 2388, 468, 160, 1090, 1091,
	1649, 2444, 1186, 174, 2175, 1663, 1193, 2370, 174, 2290,
	2289, 2288, 430, 174, 174, 1068, 174, 1069, 174, 702,
	174, 1093, 174, 2445, 741, 1531, 1211, 999, 1211, 2287,
	1929, 1056, 704, 174, 1068, 1993, 1069, 1991, 1962, 174,
	174, 1827, 1828, 1830, 1831, 1092, 1961, 1807, 1319, 700,
	407, 1806, 1221, 1415, 2186, 1223, 1306, 1305, 1805, 688,
	683, 1244, 990, 682, 682, 888, 1209, 1068, 174, 1069,
	174, 1532, 1529, 174, 1212, 1804, 1765, 698, 163, 1094,
	1095, 1096, 1097, 1099, 1100, 1311, 174, 1648, 1479, 1303,
	723, 1369, 1070, 434, 695, 468, 415, 1153, 174, 1434,
	1232, 1430, 174, 1233, 1428, 174, 1098, 948, 1289, 174,
	1027, 1070, 748, 174, 1596, 1320, 1294, 116, 174, 1595,
	1290, 1418, 670, 1450, 174, 468, 852, 2369, 174, 1315,
	1308, 1390, 1620, 468, 1307, 659, 164, 1344, 1343, 1407,
	569, 1309, 1996, 1334, 1070, 1989, 1534, 1391, 1775, 416,
	949, 433, 1407, 1408, 1327, 2085, 1876, 1494, 1406, 668,
	1190, 2404, 1345, 1773, 1426, 1823, 1824, 2271, 1494, 1213,
	1432, 1920, 1323, 1534, 2394, 1980, 1501, 1436, 780, 1349,
	1380, 1499, 933, 1348, 1347, 1449, 1419, 1421, 391, 728,
	662, 1685, 1686, 662, 662, 2451, 1367, 1897, 2395, 670,
	1758, 1366, 579, 2028, 670, 728, 1281, 2466, 1402, 667,
	1375, 1100, 1441, 1448, 1385, 1386, 741, 1381, 171, 1518,
	1417, 741, 456, 396, 1528, 1310, 1060, 747, 1244, 1244,
	1749, 411, 1411, 1194, 1770, 1358, 174, 1435, 1359, 1360,
	436, 2444, 1291, 174, 1771, 1656, 572, 171, 1776, 1066,
	580, 402, 1753, 585, 174, 1515, 174, 1424, 174, 669,
	611, 174, 1429, 174, 984, 174, 174, 174, 174, 459,
	1831, 1078, 691, 1829, 1928, 408, 174, 1324, 1534, 161,
	404, 1342, 1275, 1328, 1901, 1329, 1643, 1330, 929, 1331,
	405, 1332, 464, 2415, 432, 1505, 1502, 1076, 460, 2346,
	1625, 985, 1625, 1218, 963, 710, 710, 1416, 1338, 1340,
	1930, 2308, 1071, 396, 418, 417, 696, 1176, 162, 997,
	1615, 1558, 2300, 435, 1133, 461, 706, 1810, 1897, 705,
	1384, 1071, 1839, 431, 455, 1096, 1097, 1099, 1100, 1981,
	396, 396, 743, 396, 392, 463, 696, 171, 752, 1400,
	669, 1295, 2123, 2450, 456, 1772, 2414, 1634, 989, 468,
	116, 1651, 1774, 666, 1071, 2443, 116, 174, 747, 747,
	1637, 2441, 1629, 892, 697, 892, 1987, 1641, 1640, 2272,
	2416, 911, 1647, 174, 174, 174, 1646, 174, 971, 1404,
	1650, 696, 1657, 1638, 2229, 1639, 1617, 689, 684, 1082,
	2467, 459, 800, 926, 918, 1840, 174, 1767, 1012, 1761,
	393, 1671, 2282, 174, 468, 1081, 1659, 660, 1493, 174,
	174, 1695, 568, 174, 464, 1500, 1701, 1183, 174, 1186,
	460, 174, 1180, 1179, 1322, 1079, 2417, 2281, 957, 174,
	589, 2471, 1664, 932, 2264, 174, 174, 174, 1666, 1275,
	1275, 174, 2449, 1080, 174, 462, 2460, 461, 590, 1668,
	174, 174, 174, 174, 174, 116, 1700, 1714, 1702, 174,
	2064, 174, 1715, 2212, 994, 174, 1011, 463, 2171, 1724,
	1669, 2338, 2174, 2025, 1964, 394, 1676, 747, 1678, 2173,
	741, 1675, 1667, 1823, 1824, 1731, 1219, 1677, 1681, 1833,
	1825, 1826, 1827, 1828, 1830, 1831, 944, 1699, 1047, 1692,
	465, 1710, 459, 1703, 1704, 1750, 728, 1709, 1696, 591,
	424, 1755, 728, 728, 2156, 964, 728, 1734, 1050, 2026,
	939, 1679, 1490, 1730, 1735, 464, 1010, 1823, 1824, 995,
	419, 460, 1618, 2470, 1382, 1208, 1726, 1488, 1727, 1043,
	1244, 1197, 1301, 1048, 1719, 855, 1354, 2024, 670, 2157,
	1583, 1012, 965, 2381, 2065, 962, 1748, 1337, 461, 944,
	2066, 945, 1752, 2213, 1297, 946, 1796, 1011, 2170, 167,
	866, 611, 2097, 870, 611, 972, 875, 462, 463, 2172,
	1838, 878, 996, 2231, 2458, 2265, 1299, 396, 944, 1740,
	865, 1829, 854, 1047, 1534, 588, 1476, 589, 1300, 1739,
	611, 611, 396, 900, 752, 1691, 1768, 1766, 1484, 592,
	1720, 1708, 1379, 1050, 1378, 590, 1485, 1355, 1486, 1049,
	175, 670, 1491, 667, 945, 1782, 577, 1010, 946, 1045,
	874, 174, 465, 2087, 2222, 1829, 571, 2262, 1048, 2459,
	1760, 174, 885, 174, 2129, 174, 1793, 883, 174, 2152,
	1839, 2153, 174, 1046, 797, 1941, 1537, 174, 2303, 174,
	2461, 2211, 2263, 453, 33, 3, 174, 1854, 1707, 452,
	32, 1882, 2001, 1884, 1995, 944, 591, 670, 1877, 174,
	691, 2155, 694, 993, 1817, 469, 1777, 593, 462, 1661,
	2158, 691, 174, 1885, 1839, 1598, 1888, 1433, 1474, 1477,
	1427, 691, 1002, 1857, 1858, 1859, 1001, 449, 29, 924,
	982, 1855, 451, 17, 1049, 1916, 1735, 445, 13, 594,
	1335, 1326, 174, 1840, 420, 1157, 1925, 1536, 1899, 1487,
	980, 1473, 1244, 1905, 1878, 2378, 1489, 611, 750, 174,
	945, 692, 753, 465, 946, 174, 2410, 447, 16, 1892,
	1902, 1889, 2145, 927, 174, 174, 988, 1886, 978, 1910,
	1193, 1275, 754, 976, 421, 1918, 1915, 1840, 2154, 1193,
	611, 974, 1959, 968, 1985, 682, 592, 446, 14, 1926,
	1927, 1244, 576, 1043, 1706, 2015, 1952, 1911, 1912, 1957,
	1913, 589, 570, 1931, 422, 884, 423, 1933, 1994, 33,
	882, 733, 1934, 1936, 992, 32, 699, 701, 1939, 590,
	444, 12, 1944, 116, 1945, 1975, 1942, 2319, 1825, 1826,
	1827, 1828, 1830, 1831, 881, 1937, 1475, 396, 1974, 450,
	10, 981, 2004, 1948, 1983, 1976, 1963, 1047, 1960, 443,
	8, 174, 728, 29, 1967, 2020, 2021, 2022, 17, 442,
	4, 979, 587, 13, 593, 1890, 1988, 1050, 1014, 1834,
	1832, 1833, 1825, 1826, 1827, 1828, 1830, 1831, 1621, 1614,
	591, 1227, 1226, 1045, 987, 585, 1225, 710, 1222, 977,
	1220, 1083, 1048, 16, 975, 1077, 594, 2011, 1072, 2014,
	718, 2445, 973, 1984, 967, 1986, 2242, 1046, 2241, 1689,
	396, 396, 1317, 2112, 2036, 454, 1244, 2027, 2029, 2030,
	719, 1407, 174, 14, 174, 2041, 1229, 1422, 171, 1407,
	2321, 174, 2071, 2038, 691, 1420, 1441, 2039, 1423, 2104,
	2093, 1015, 2043, 1090, 1091, 1441, 2044, 2348, 174, 174,
	2164, 966, 1244, 1244, 2090, 880, 12, 2106, 2072, 2356,
	2130, 1244, 1244, 1275, 1018, 174, 1093, 2098, 1049, 1431,
	1565, 1690, 1425, 174, 2377, 10, 1090, 1091, 2075, 468,
	592, 2227, 2088, 1628, 174, 8, 578, 174, 1616, 1613,
	1092, 1368, 2100, 720, 1244, 4, 2101, 468, 174, 174,
	1293, 2109, 174, 174, 174, 2133, 2108, 1236, 2099, 2125,
	2464, 2107, 1275, 2113, 2103, 2469, 2256, 2140, 2135, 174,
	1823, 1824, 2114, 1092, 174, 2084, 174, 2031, 174, 174,
	174, 2126, 174, 2132, 174, 2165, 691, 2169, 2136, 2139,
	1022, 396, 1922, 1699, 2134, 851, 1869, 2168, 2144, 2137,
	1274, 1634, 728, 1206, 1090, 1091, 1022, 1021, 593, 396,
	2185, 396, 1716, 396, 1975, 1597, 2190, 1214, 1594, 1593,
	1526, 692, 1144, 1023, 2198, 174, 2023, 1974, 2131, 1887,
	1154, 1152, 1000, 991, 1976, 986, 983, 728, 969, 931,
	594, 2156, 658, 2270, 2149, 457, 1325, 171, 970, 1712,
	1387, 2393, 2147, 2204, 1809, 171, 2151, 2331, 2299, 1535,
	470, 611, 1155, 53, 1972, 774, 2146, 1966, 1608, 1607,
	471, 2210, 1304, 796, 676, 1549, 2157, 1442, 856, 798,
	1241, 2178, 174, 174, 799, 2182, 1242, 1275, 1184, 691,
	1244, 611, 786, 1239, 908, 1632, 611, 1498, 2150, 1516,
	2225, 171, 611, 1792, 611, 1148, 611, 766, 611, 2223,
	611, 778, 777, 1513, 2228, 922, 693, 1717, 1900, 2235,
	1353, 1336, 2232, 1275, 1275, 1680, 1975, 611, 611, 2234,
	2226, 1975, 1275, 1275, 1350, 1982, 174, 406, 174, 1974,
	468, 174, 758, 1820, 1974, 2238, 1976, 906, 2248, 174,
	1572, 1976, 1564, 1560, 1003, 468, 585, 1039, 710, 2253,
	1134, 752, 2255, 2233, 1633, 1275, 954, 1274, 1274, 1906,
	2239, 1654, 1031, 1361, 396, 717, 2152, 716, 2153, 952,
	2258, 1298, 1665, 1127, 2274, 2273, 1399, 2276, 1126, 703,
	396, 692, 2260, 396, 2340, 943, 1194, 1412, 1975, 942,
	1198, 396, 1733, 2465, 2347, 2298, 396, 2275, 2155, 2291,
	1979, 1974, 396, 692, 2387, 131, 1439, 2158, 1976, 128,
	174, 130, 129, 691, 1759, 80, 31, 174, 2305, 30,
	99, 98, 97, 96, 95, 174, 174, 691, 691, 94,
	93, 174, 92, 2292, 2310, 2320, 174, 2284, 91, 90,
	89, 2318, 2268, 174, 88, 87, 2316, 2328, 86, 2322,
	85, 1975, 2327, 1244, 84, 2342, 83, 2313, 82, 756,
	857, 859, 2329, 2330, 1974, 2336, 1243, 607, 174, 174,
	1142, 1976, 79, 2337, 2345, 2285, 2286, 2334, 78, 77,
	2344, 76, 28, 24, 103, 2154, 23, 2317, 21, 174,
	22, 27, 1244, 26, 19, 2355, 18, 691, 2364, 2362,
	15, 1275, 174, 9, 2365, 20, 691, 691, 2358, 58,
	59, 57, 56, 2315, 1604, 55, 11, 51, 2368, 692,
	50, 752, 174, 48, 174, 670, 469, 174, 47, 468,
	2373, 2374, 396, 46, 1636, 45, 611, 7, 102, 611,
	42, 611, 2383, 396, 396, 1642, 752, 41, 2399, 40,
	6, 2401, 101, 2400, 1412, 5, 2384, 174, 114, 111,
	113, 110, 2405, 112, 115, 107, 2403, 1090, 1091, 108,
	2409, 2367, 109, 2408, 106, 105, 2402, 1823, 1824, 174,
	2420, 2389, 1244, 37, 36, 174, 2434, 2432, 2424, 35,
	1093, 174, 2361, 1975, 34, 2437, 2438, 2433, 2442, 2436,
	2440, 2, 1, 0, 2446, 0, 1974, 0, 1228, 0,
	2448, 0, 0, 1976, 1092, 0, 0, 0, 0, 1277,
	0, 0, 0, 0, 0, 2455, 693, 2456, 0, 2463,
	2386, 0, 2462, 1243, 1243, 1292, 0, 921, 0, 0,
	0, 2468, 0, 925, 0, 1673, 2472, 0, 0, 1823,
	1824, 0, 1841, 1842, 1843, 0, 0, 0, 0, 775,
	73, 396, 396, 396, 0, 396, 1276, 0, 0, 0,
	0, 0, 0, 0, 1275, 1098, 0, 0, 0, 1274,
	0, 0, 0, 0, 396, 1829, 0, 0, 1634, 0,
	0, 396, 0, 0, 0, 692, 0, 396, 396, 0,
	0, 396, 1838, 0, 0, 0, 1399, 0, 0, 1399,
	0, 0, 0, 1275, 0, 0, 0, 1722, 0, 692,
	692, 0, 73, 396, 1728, 1729, 469, 0, 1240, 1412,
	0, 0, 1736, 0, 1108, 0, 0, 0, 1741, 1742,
	1744, 1746, 1747, 0, 1839, 0, 0, 396, 0, 1754,
	0, 0, 0, 1757, 0, 0, 1394, 1829, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 663, 1090, 1091, 671,
	0, 0, 0, 1036, 1036, 0, 1277, 1277, 0, 0,
	1041, 0, 0, 0, 729, 73, 693, 0, 0, 0,
	1093, 0, 0, 1275, 0, 0, 0, 1109, 0, 0,
	0, 0, 0, 0, 0, 0, 1839, 1840, 693, 0,
	0, 0, 0, 0, 1092, 469, 1128, 1129, 1130, 1131,
	1132, 0, 0, 1276, 1276, 0, 1141, 0, 0, 0,
	1508, 0, 0, 0, 1142, 0, 1149, 0, 1512, 0,
	0, 0, 1520, 0, 0, 469, 0, 0, 0, 0,
	0, 0, 0, 469, 1550, 1550, 1563, 0, 1575, 0,
	0, 1274, 0, 0, 1587, 1588, 1590, 0, 0, 0,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 1840,
	0, 0, 0, 0, 0, 1240, 1240, 0, 0, 0,
	1101, 1102, 1094, 1095, 1096, 1097, 1099, 1100, 0, 1834,
	1832, 1833, 1825, 1826, 1827, 1828, 1830, 1831, 0, 396,
	1274, 0, 0, 0, 0, 0, 0, 0, 0, 1206,
	0, 1206, 0, 611, 693, 0, 396, 0, 0, 0,
	1895, 470, 0, 0, 1108, 396, 0, 1904, 0, 0,
	0, 1090, 1091, 0, 396, 1243, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1673, 0, 0,
	0, 0, 0, 0, 1093, 0, 1835, 1836, 1837, 0,
	1673, 1834, 1832, 1833, 1825, 1826, 1827, 1828, 1830, 1831,
	0, 1823, 1824, 0, 1841, 1842, 1843, 0, 1092, 0,
	0, 0, 692, 0, 0, 0, 0, 2188, 0, 0,
	396, 0, 0, 0, 0, 0, 0, 1109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 396, 0, 0,
	0, 0, 0, 1399, 0, 0, 0, 0, 0, 0,
	0, 0, 752, 1399, 1838, 1274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1971, 0, 1098,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1351, 0, 1356,
	0, 1274, 1274, 0, 0, 1363, 0, 0, 0, 469,
	1274, 1274, 0, 0, 0, 0, 0, 0, 0, 1829,
	671, 0, 0, 0, 0, 0, 0, 0, 1277, 0,
	693, 1102, 1094, 1095, 1096, 1097, 1099, 1100, 1108, 0,
	0, 0, 0, 1274, 0, 0, 0, 0, 0, 2033,
	0, 0, 0, 0, 693, 693, 0, 1844, 0, 0,
	0, 470, 0, 0, 469, 0, 0, 1243, 0, 0,
	0, 0, 0, 0, 0, 1276, 0, 0, 1839, 0,
	0, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
	1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
	1470, 1471, 1472, 0, 1478, 0, 1480, 1481, 1482, 1483,
	0, 1109, 0, 0, 0, 0, 1243, 0, 1781, 0,
	1412, 0, 1206, 1506, 0, 1784, 0, 0, 0, 2095,
	1141, 0, 0, 0, 0, 0, 0, 1240, 0, 0,
	0, 0, 0, 1800, 1801, 0, 396, 396, 1545, 1546,
	0, 1840, 1562, 0, 1574, 1576, 1581, 1584, 1585, 1586,
	470, 0, 0, 2120, 0, 0, 0, 0, 0, 0,
	0, 2122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 396, 0, 0, 752, 0, 0, 0, 1274,
	470, 1849, 0, 0, 0, 0, 1399, 752, 470, 0,
	2142, 2143, 1412, 1862, 0, 0, 1094, 1095, 1096, 1097,
	1099, 1100, 0, 0, 0, 0, 1971, 752, 0, 0,
	1277, 0, 2176, 0, 2177, 0, 396, 2179, 2180, 0,
	396, 0, 2184, 0, 0, 0, 0, 0, 1835, 1836,
	1837, 1243, 0, 1834, 1832, 1833, 1825, 1826, 1827, 1828,
	1830, 1831, 0, 663, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1357, 0, 1276, 0, 1277,
	0, 0, 0, 2205, 0, 0, 0, 1243, 1243, 0,
	0, 0, 0, 0, 0, 0, 1243, 1243, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 0, 0, 0,
	0, 1059, 0, 0, 0, 0, 1276, 0, 0, 1243,
	0, 0, 0, 0, 0, 0, 0, 0, 1971, 1240,
	752, 1604, 0, 1971, 0, 0, 0, 693, 0, 0,
	692, 0, 0, 0, 0, 0, 0, 1137, 0, 1140,
	0, 692, 0, 0, 0, 0, 1145, 0, 1036, 0,
	0, 692, 1274, 1041, 0, 0, 0, 0, 0, 0,
	0, 0, 1990, 0, 0, 0, 0, 1992, 1240, 0,
	0, 0, 0, 0, 1412, 0, 2259, 0, 0, 2261,
	0, 0, 0, 0, 1277, 0, 0, 396, 0, 0,
	1971, 1274, 0, 0, 2008, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1566,
	0, 0, 0, 0, 470, 2293, 0, 0, 0, 0,
	1277, 1277, 0, 0, 0, 0, 0, 0, 0, 1277,
	1277, 1276, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1763, 1764, 0, 1971, 0, 1243, 1769, 0, 396, 0,
	0, 2069, 1277, 0, 0, 752, 0, 1276, 1276, 470,
	0, 0, 2079, 2120, 2120, 0, 1276, 1276, 0, 2333,
	0, 1274, 0, 0, 1399, 0, 0, 0, 1788, 0,
	0, 1206, 0, 1240, 0, 1795, 0, 0, 1799, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1276,
	0, 0, 0, 1779, 1780, 1813, 2349, 2350, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1240,
	1240, 0, 0, 0, 0, 0, 0, 396, 1240, 1240,
	0, 0, 0, 0, 0, 0, 0, 1141, 0, 0,
	2372, 0, 0, 0, 1581, 1581, 1581, 73, 0, 0,
	0, 0, 0, 0, 1823, 1824, 0, 1841, 1842, 1843,
	2382, 1240, 752, 0, 692, 396, 0, 0, 0, 0,
	2187, 0, 0, 663, 0, 0, 663, 663, 1846, 1847,
	1848, 0, 0, 0, 0, 1971, 0, 0, 0, 0,
	1898, 0, 0, 0, 0, 2333, 0, 0, 1277, 0,
	0, 0, 0, 0, 0, 729, 0, 1838, 0, 469,
	0, 0, 1914, 0, 0, 0, 0, 752, 1243, 0,
	0, 1059, 0, 396, 0, 0, 0, 469, 0, 2439,
	0, 0, 0, 0, 73, 0, 0, 0, 0, 0,
	73, 0, 0, 0, 0, 1276, 0, 0, 0, 1935,
	0, 0, 0, 0, 1363, 0, 0, 1243, 0, 0,
	0, 0, 1829, 0, 0, 0, 692, 0, 0, 0,
	0, 0, 0, 0, 1947, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 671, 0,
	1844, 0, 0, 1140, 1968, 0, 0, 1240, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1839, 0, 0, 0, 1566, 1566, 0, 0, 1997,
	0, 2252, 1998, 0, 0, 693, 0, 0, 0, 0,
	0, 0, 0, 0, 2003, 0, 693, 1243, 0, 0,
	0, 0, 0, 2012, 0, 0, 693, 0, 0, 0,
	0, 2016, 0, 0, 1914, 0, 0, 0, 2278, 692,
	73, 1277, 73, 0, 0, 0, 0, 1999, 2000, 0,
	0, 0, 0, 0, 2040, 0, 0, 0, 2042, 0,
	73, 0, 0, 0, 1840, 0, 73, 0, 0, 0,
	1566, 1566, 1566, 0, 0, 0, 0, 0, 0, 0,
	1277, 0, 0, 0, 0, 0, 0, 0, 1276, 0,
	469, 2073, 2074, 0, 0, 0, 0, 0, 0, 0,
	2080, 2081, 2082, 0, 0, 469, 2045, 2046, 2047, 2048,
	2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058,
	2059, 2060, 2061, 2062, 2063, 0, 2067, 1276, 0, 0,
	0, 0, 1823, 1824, 1036, 1841, 1842, 1843, 0, 0,
	0, 0, 0, 0, 0, 0, 1041, 0, 2006, 0,
	1240, 1835, 1836, 1837, 0, 0, 1834, 1832, 1833, 1825,
	1826, 1827, 1828, 1830, 1831, 73, 0, 0, 0, 0,
	1277, 0, 0, 692, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1838, 0, 692, 692, 1240,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 729, 0, 0, 0, 0, 0, 729, 729,
	2166, 0, 729, 0, 0, 0, 0, 1276, 0, 0,
	0, 0, 2390, 2391, 2392, 0, 0, 2396, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2189, 0,
	1829, 0, 2192, 2193, 0, 0, 0, 2195, 0, 693,
	0, 0, 0, 0, 2197, 73, 2199, 692, 0, 0,
	0, 73, 0, 0, 0, 0, 692, 692, 0, 1566,
	1566, 0, 2206, 0, 0, 0, 0, 0, 1844, 1240,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 469,
	0, 0, 0, 0, 470, 0, 0, 0, 0, 1839,
	0, 0, 0, 0, 0, 2215, 0, 1496, 0, 0,
	0, 0, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1140, 1566, 1566,
	1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566,
	1566, 1566, 1566, 1566, 1566, 1566, 1566, 0, 1566, 0,
	0, 693, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2251, 0, 0, 0,
	0, 0, 1840, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1090, 1091, 0, 1110, 1111, 1112, 1120,
	1121, 1122, 0, 0, 0, 0, 0, 0, 0, 1113,
	1140, 0, 0, 0, 0, 0, 1093, 0, 0, 1124,
	2283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2294, 2295, 0, 0, 0, 0,
	1092, 0, 0, 0, 0, 0, 1107, 0, 2267, 0,
	0, 0, 0, 73, 0, 0, 73, 0, 0, 0,
	0, 0, 0, 0, 693, 2307, 671, 0, 0, 1835,
	1836, 1837, 0, 0, 1834, 1832, 1833, 1825, 1826, 1827,
	1828, 1830, 1831, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1098, 2302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2339, 0, 470, 0, 0, 0, 0,
	0, 1117, 1125, 0, 0, 0, 0, 0, 0, 0,
	470, 1823, 1824, 73, 1841, 1842, 1843, 0, 0, 1123,
	0, 0, 0, 0, 0, 0, 0, 2005, 729, 0,
	0, 0, 0, 0, 1115, 0, 0, 0, 0, 0,
	1108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1041, 0, 1090, 1091, 0, 1110, 1111, 1112, 1120,
	1121, 1122, 0, 0, 1838, 1114, 0, 0, 0, 1113,
	0, 0, 0, 0, 2357, 0, 1093, 0, 693, 1124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 693, 693, 0, 0, 0, 0, 0, 0,
	1092, 0, 0, 0, 0, 0, 1107, 0, 0, 0,
	0, 0, 0, 1109, 0, 2421, 0, 0, 0, 1829,
	0, 2431, 2431, 0, 0, 0, 0, 0, 0, 1118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1566, 0, 0, 0, 0, 2431, 0, 1844, 0, 0,
	0, 1098, 693, 0, 0, 0, 0, 0, 0, 0,
	0, 693, 693, 0, 0, 0, 0, 0, 1839, 0,
	0, 1117, 1125, 0, 0, 0, 0, 0, 0, 0,
	0, 2431, 0, 0, 470, 0, 0, 1116, 0, 1123,
	1104, 1105, 1106, 1119, 1566, 1103, 1101, 1102, 1094, 1095,
	1096, 1097, 1099, 1100, 1115, 0, 0, 0, 0, 0,
	1108, 0, 1865, 38, 0, 0, 0, 0, 729, 0,
	0, 0, 0, 0, 39, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1114, 0, 43, 0, 0,
	0, 1840, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 729, 0, 0, 0, 44, 0, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	52, 0, 0, 1109, 54, 0, 1566, 0, 60, 0,
	0, 124, 0, 0, 0, 61, 0, 62, 0, 1118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 63, 0, 0, 0, 0,
	0, 64, 0, 0, 65, 0, 0, 0, 1835, 1836,
	1837, 0, 0, 1834, 1832, 1833, 1825, 1826, 1827, 1828,
	1830, 1831, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1116, 0, 0,
	1104, 1105, 1106, 1119, 0, 1103, 1101, 1102, 1094, 1095,
	1096, 1097, 1099, 1100, 0, 0, 0, 0, 0, 0,
	0, 0, 1864, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 0, 0, 0, 0,
	67, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 75,
	68, 0, 69, 0, 70, 0, 125, 0, 0, 0,
	0, 71, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 120, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 467, 73, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 0,
	2323, 0, 176, 177, 486, 178, 487, 488, 489, 490,
	332, 491, 492, 493, 494, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 495, 183, 339, 340, 184,
	185, 496, 497, 341, 342, 343, 498, 186, 344, 499,
	472, 500, 187, 188, 189, 0, 190, 501, 191, 192,
	193, 502, 473, 194, 195, 196, 503, 504, 506, 505,
	507, 508, 509, 197, 198, 397, 199, 345, 200, 346,
	347, 510, 201, 511, 202, 512, 203, 513, 514, 204,
	205, 515, 206, 516, 1140, 517, 348, 207, 208, 209,
	349, 350, 518, 519, 520, 210, 211, 351, 352, 353,
	0, 212, 521, 213, 522, 523, 474, 524, 214, 354,
	525, 355, 526, 215, 216, 217, 218, 219, 356, 357,
	476, 527, 223, 528, 220, 529, 475, 221, 358, 222,
	359, 360, 361, 362, 363, 530, 364, 531, 477, 224,
	225, 226, 478, 227, 228, 229, 532, 231, 230, 533,
	365, 479, 232, 480, 534, 233, 535, 536, 234, 0,
	235, 236, 237, 239, 366, 238, 481, 240, 241, 243,
	242, 537, 538, 539, 367, 244, 368, 245, 246, 540,
	247, 541, 542, 248, 543, 544, 249, 369, 482, 250,
	483, 370, 251, 252, 253, 254, 255, 545, 256, 371,
	257, 372, 258, 546, 259, 260, 261, 262, 263, 373,
	264, 265, 547, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 548, 278, 484, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 549, 290, 375,
	289, 291, 292, 550, 293, 282, 283, 294, 485, 295,
	376, 377, 296, 551, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 552, 304, 553, 305, 306, 307,
	308, 309, 310, 311, 554, 380, 381, 382, 555, 556,
	312, 313, 383, 384, 557, 314, 315, 316, 317, 558,
	559, 318, 319, 320, 321, 560, 322, 561, 385, 323,
	324, 325, 386, 387, 562, 563, 326, 564, 565, 566,
	567, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 467, 0,
	0, 0, 0, 0, 1392, 0, 0, 0, 0, 0,
	0, 0, 0, 1393, 176, 177, 486, 178, 487, 488,
	489, 490, 332, 491, 492, 493, 494, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 495, 183, 339,
	340, 184, 185, 496, 497, 341, 342, 343, 498, 186,
	344, 499, 472, 500, 187, 188, 189, 0, 190, 501,
	191, 192, 193, 502, 473, 194, 195, 196, 503, 504,
	506, 505, 507, 508, 509, 197, 198, 397, 199, 345,
	200, 346, 347, 510, 201, 511, 202, 512, 203, 513,
	514, 204, 205, 515, 206, 516, 0, 517, 348, 207,
	208, 209, 349, 350, 518, 519, 520, 210, 211, 351,
	352, 353, 0, 212, 521, 213, 522, 523, 474, 524,
	214, 354, 525, 355, 526, 215, 216, 217, 218, 219,
	356, 357, 476, 527, 223, 528, 220, 529, 475, 221,
	358, 222, 359, 360, 361, 362, 363, 530, 364, 531,
	477, 224, 225, 226, 478, 227, 228, 229, 532, 231,
	230, 533, 365, 479, 232, 480, 534, 233, 535, 536,
	234, 0, 235, 236, 237, 239, 366, 238, 481, 240,
	241, 243, 242, 537, 538, 539, 367, 244, 368, 245,
	246, 540, 247, 541, 542, 248, 543, 544, 249, 369,
	482, 250, 483, 370, 251, 252, 253, 254, 255, 545,
	256, 371, 257, 372, 258, 546, 259, 260, 261, 262,
	263, 373, 264, 265, 547, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 548, 278, 484,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 549,
	290, 375, 289, 291, 292, 550, 293, 282, 283, 294,
	485, 295, 376, 377, 296, 551, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 552, 304, 553, 305,
	306, 307, 308, 309, 310, 311, 554, 380, 381, 382,
	555, 556, 312, 313, 383, 384, 557, 314, 315, 316,
	317, 558, 559, 318, 319, 320, 321, 560, 322, 561,
	385, 323, 324, 325, 386, 387, 562, 563, 326, 564,
	565, 566, 567, 327, 328, 329, 330, 331, 0, 0,
	0, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2138, 176, 177, 486,
	178, 487, 488, 489, 490, 332, 491, 492, 493, 494,
	179, 180, 181, 333, 334, 335, 336, 182, 337, 338,
	495, 183, 339, 340, 184, 185, 496, 497, 341, 342,
	343, 498, 186, 344, 499, 472, 500, 187, 188, 189,
	0, 190, 501, 191, 192, 193, 502, 473, 194, 195,
	196, 503, 504, 506, 505, 507, 508, 509, 197, 198,
	397, 199, 345, 200, 346, 347, 510, 201, 511, 202,
	512, 203, 513, 514, 204, 205, 515, 206, 516, 0,
	517, 348, 207, 208, 209, 349, 350, 518, 519, 520,
	210, 211, 351, 352, 353, 0, 212, 521, 213, 522,
	523, 474, 524, 214, 354, 525, 355, 526, 215, 216,
	217, 218, 219, 356, 357, 476, 527, 223, 528, 220,
	529, 475, 221, 358, 222, 359, 360, 361, 362, 363,
	530, 364, 531, 477, 224, 225, 226, 478, 227, 228,
	229, 532, 231, 230, 533, 365, 479, 232, 480, 534,
	233, 535, 536, 234, 0, 235, 236, 237, 239, 366,
	238, 481, 240, 241, 243, 242, 537, 538, 539, 367,
	244, 368, 245, 246, 540, 247, 541, 542, 248, 543,
	544, 249, 369, 482, 250, 483, 370, 251, 252, 253,
	254, 255, 545, 256, 371, 257, 372, 258, 546, 259,
	260, 261, 262, 263, 373, 264, 265, 547, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	548, 278, 484, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 549, 290, 375, 289, 291, 292, 550, 293,
	282, 283, 294, 485, 295, 376, 377, 296, 551, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 552,
	304, 553, 305, 306, 307, 308, 309, 310, 311, 554,
	380, 381, 382, 555, 556, 312, 313, 383, 384, 557,
	314, 315, 316, 317, 558, 559, 318, 319, 320, 321,
	560, 322, 561, 385, 323, 324, 325, 386, 387, 562,
	563, 326, 564, 565, 566, 567, 327, 328, 329, 330,
	331, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1089, 0, 0, 176, 177, 486,
	178, 487, 488, 489, 490, 332, 491, 492, 493, 494,
	179, 180, 181, 333, 334, 335, 336, 182, 337, 338,
	495, 183, 339, 340, 184, 185, 496, 497, 341, 342,
	343, 498, 186, 344, 499, 472, 500, 187, 188, 189,
	0, 190, 501, 191, 192, 193, 502, 473, 194, 195,
	196, 503, 504, 506, 505, 507, 508, 509, 197, 198,
	397, 199, 345, 200, 346, 347, 510, 201, 511, 202,
	512, 203, 513, 514, 204, 205, 515, 206, 516, 0,
	517, 348, 207, 208, 209, 349, 350, 518, 519, 520,
	210, 211, 351, 352, 353, 0, 212, 521, 213, 522,
	523, 474, 524, 214, 354, 525, 355, 526, 215, 216,
	217, 218, 219, 356, 357, 476, 527, 223, 528, 220,
	529, 475, 221, 358, 222, 359, 360, 361, 362, 363,
	530, 364, 531, 477, 224, 225, 226, 478, 227, 228,
	229, 532, 231, 230, 533, 365, 479, 232, 480, 534,
	233, 535, 536, 234, 0, 235, 236, 237, 239, 366,
	238, 481, 240, 241, 243, 242, 537, 538, 539, 367,
	244, 368, 245, 246, 540, 247, 541, 542, 248, 543,
	544, 249, 369, 482, 250, 483, 370, 251, 252, 253,
	254, 255, 545, 256, 371, 257, 372, 258, 546, 259,
	260, 261, 262, 263, 373, 264, 265, 547, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	548, 278, 484, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 549, 290, 375, 289, 291, 292, 550, 293,
	282, 283, 294, 485, 295, 376, 377, 296, 551, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 552,
	304, 553, 305, 306, 307, 308, 309, 310, 311, 554,
	380, 381, 382, 555, 556, 312, 313, 383, 384, 557,
	314, 315, 316, 317, 558, 559, 318, 319, 320, 321,
	560, 322, 561, 385, 323, 324, 325, 386, 387, 562,
	563, 326, 564, 565, 566, 567, 327, 328, 329, 330,
	331, 1525, 0, 794, 783, 784, 781, 782, 773, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 1522, 178, 0, 0, 0, 0, 811, 776, 0,
	0, 0, 179, 180, 181, 333, 826, 335, 827, 182,
	828, 829, 0, 183, 339, 340, 184, 185, 779, 810,
	830, 831, 343, 0, 186, 822, 0, 802, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 473,
	194, 195, 196, 0, 803, 804, 806, 0, 805, 807,
	197, 198, 397, 199, 832, 200, 833, 834, 0, 201,
	0, 202, 0, 203, 1523, 0, 825, 205, 0, 206,
	0, 0, 0, 767, 207, 208, 209, 812, 813, 790,
	0, 0, 210, 211, 835, 836, 837, 0, 212, 0,
	213, 0, 0, 474, 0, 214, 823, 0, 355, 0,
	215, 216, 217, 218, 219, 819, 821, 476, 0, 223,
	0, 220, 0, 475, 221, 838, 222, 839, 840, 841,
	842, 843, 0, 801, 0, 477, 224, 225, 226, 478,
	227, 228, 229, 0, 231, 230, 0, 824, 479, 232,
	480, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 481, 240, 241, 243, 242, 762, 0,
	791, 820, 244, 844, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 482, 250, 483, 814, 251,
	252, 253, 254, 255, 0, 256, 815, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 845, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 484, 279, 280, 768, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	808, 293, 282, 283, 294, 485, 295, 846, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 847, 300, 301,
	816, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 848, 849, 0, 0, 312, 313, 817,
	818, 789, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 809, 322, 0, 385, 323, 324, 325, 386,
	850, 1521, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 763, 0, 0, 0, 0, 0, 761,
	0, 0, 0, 0, 759, 760, 1524, 794, 783, 784,
	781, 782, 773, 769, 1519, 0, 0, 0, 0, 772,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 811, 776, 0, 0, 0, 179, 180, 181, 333,
	826, 335, 827, 182, 828, 829, 0, 183, 339, 340,
	184, 185, 779, 810, 830, 831, 343, 0, 186, 822,
	0, 802, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 473, 194, 195, 196, 0, 803, 804,
	806, 0, 805, 807, 197, 198, 397, 199, 832, 200,
	833, 834, 1042, 201, 0, 202, 0, 203, 0, 0,
	825, 205, 0, 206, 0, 0, 0, 767, 207, 208,
	209, 812, 813, 790, 0, 0, 210, 211, 835, 836,
	837, 0, 212, 0, 213, 0, 0, 474, 0, 214,
	823, 0, 355, 0, 215, 216, 217, 218, 219, 819,
	821, 476, 0, 223, 0, 220, 0, 475, 221, 838,
	222, 839, 840, 841, 842, 843, 0, 801, 0, 477,
	224, 225, 226, 478, 227, 228, 229, 0, 231, 230,
	0, 824, 479, 232, 480, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 481, 240, 241,
	243, 242, 762, 0, 791, 820, 244, 844, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 482,
	250, 483, 814, 251, 252, 253, 254, 255, 0, 256,
	815, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	845, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 484, 279,
	280, 768, 281, 0, 285, 286, 287, 288, 132, 290,
	375, 289, 291, 292, 808, 293, 282, 283, 294, 485,
	295, 846, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 847, 300, 301, 816, 0, 304, 134, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 848, 849, 0,
	0, 312, 313, 817, 818, 789, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 809, 322, 0, 385,
	323, 324, 325, 912, 850, 0, 0, 326, 0, 0,
	0, 126, 327, 328, 329, 330, 331, 763, 127, 0,
	0, 0, 0, 761, 0, 0, 0, 0, 759, 760,
	0, 0, 0, 0, 0, 0, 0, 1143, 0, 0,
	0, 0, 672, 772, 794, 783, 784, 781, 782, 773,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 811, 776,
	0, 0, 0, 179, 180, 181, 333, 826, 335, 827,
	182, 828, 829, 0, 183, 339, 340, 184, 185, 779,
	810, 830, 831, 343, 0, 186, 822, 0, 802, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	473, 194, 195, 196, 0, 803, 804, 806, 0, 805,
	807, 197, 198, 397, 199, 832, 200, 833, 834, 0,
	201, 0, 202, 0, 203, 0, 0, 825, 205, 0,
	206, 0, 0, 0, 767, 207, 208, 209, 812, 813,
	790, 0, 0, 210, 211, 835, 836, 837, 0, 212,
	0, 213, 0, 0, 474, 0, 214, 823, 0, 355,
	0, 215, 216, 217, 218, 219, 819, 821, 476, 0,
	223, 0, 220, 0, 475, 221, 838, 222, 839, 840,
	841, 842, 843, 0, 801, 0, 477, 224, 225, 226,
	478, 227, 228, 229, 0, 231, 230, 0, 824, 479,
	232, 480, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 481, 240, 241, 243, 242, 762,
	0, 791, 820, 244, 844, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 482, 250, 483, 814,
	251, 252, 253, 254, 255, 0, 256, 815, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 845, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 484, 279, 280, 768, 281,
	0, 285, 286, 287, 288, 132, 290, 375, 289, 291,
	292, 808, 293, 282, 283, 294, 485, 295, 846, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 847, 300,
	301, 816, 0, 304, 134, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 848, 849, 0, 0, 312, 313,
	817, 818, 789, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 809, 322, 0, 385, 323, 324, 325,
	912, 850, 0, 0, 326, 0, 0, 0, 126, 327,
	328, 329, 330, 331, 763, 127, 0, 0, 0, 0,
	761, 0, 0, 0, 0, 759, 760, 794, 783, 784,
	781, 782, 773, 0, 1143, 0, 0, 0, 0, 0,
	772, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 811, 776, 0, 0, 0, 179, 180, 181, 333,
	826, 335, 827, 182, 828, 829, 0, 183, 339, 340,
	184, 185, 779, 810, 830, 831, 343, 0, 186, 822,
	0, 802, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 473, 194, 195, 196, 0, 803, 804,
	806, 0, 805, 807, 197, 198, 397, 199, 832, 200,
	833, 834, 0, 201, 0, 202, 0, 203, 0, 0,
	825, 205, 0, 206, 0, 0, 0, 767, 207, 208,
	209, 812, 813, 790, 0, 0, 210, 211, 835, 836,
	837, 0, 212, 0, 213, 0, 0, 474, 0, 214,
	823, 0, 355, 0, 215, 216, 217, 218, 219, 819,
	821, 476, 0, 223, 0, 220, 0, 475, 221, 838,
	222, 839, 840, 841, 842, 843, 0, 801, 0, 477,
	224, 225, 226, 478, 227, 228, 229, 0, 231, 230,
	0, 824, 479, 232, 480, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 481, 240, 241,
	243, 242, 762, 0, 791, 820, 244, 844, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 482,
	250, 483, 814, 251, 252, 253, 254, 255, 0, 256,
	815, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	845, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 484, 279,
	280, 768, 281, 0, 285, 286, 287, 288, 132, 290,
	375, 289, 291, 292, 808, 293, 282, 283, 294, 485,
	295, 846, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 847, 300, 301, 816, 0, 304, 134, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 848, 849, 0,
	0, 312, 313, 817, 818, 789, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 809, 322, 0, 385,
	323, 324, 325, 912, 850, 0, 0, 326, 0, 0,
	0, 126, 327, 328, 329, 330, 331, 763, 127, 0,
	0, 0, 0, 761, 0, 0, 0, 0, 759, 760,
	794, 783, 784, 781, 782, 773, 0, 1143, 0, 0,
	0, 0, 0, 772, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 811, 776, 0, 0, 0, 179,
	180, 181, 333, 826, 335, 827, 182, 828, 829, 1577,
	183, 339, 340, 184, 185, 779, 810, 830, 831, 343,
	0, 186, 822, 0, 802, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 473, 194, 195, 196,
	0, 803, 804, 806, 0, 805, 807, 197, 198, 397,
	199, 832, 200, 833, 834, 0, 201, 0, 202, 0,
	203, 0, 0, 825, 205, 0, 206, 0, 0, 0,
	767, 207, 208, 209, 812, 813, 790, 0, 0, 210,
	211, 835, 836, 837, 0, 212, 0, 213, 0, 1582,
	474, 0, 214, 823, 0, 355, 0, 215, 216, 217,
	218, 219, 819, 821, 476, 0, 223, 0, 220, 0,
	475, 221, 838, 222, 839, 840, 841, 842, 843, 0,
	801, 0, 477, 224, 225, 226, 478, 227, 228, 229,
	0, 231, 230, 1578, 824, 479, 232, 480, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	481, 240, 241, 243, 242, 762, 0, 791, 820, 244,
	844, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 482, 250, 483, 814, 251, 252, 253, 254,
	255, 0, 256, 815, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 845, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 484, 279, 280, 768, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 808, 293, 282,
	283, 294, 485, 295, 846, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 847, 300, 301, 816, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	848, 849, 0, 1579, 312, 313, 817, 818, 789, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 809,
	322, 0, 385, 323, 324, 325, 386, 850, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	763, 0, 0, 0, 0, 0, 761, 0, 0, 0,
	0, 759, 760, 794, 783, 784, 781, 782, 773, 0,
	769, 0, 0, 0, 0, 0, 772, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 811, 776, 0,
	0, 0, 179, 180, 181, 333, 826, 335, 827, 182,
	828, 829, 0, 183, 339, 340, 184, 185, 779, 810,
	830, 831, 343, 0, 186, 822, 0, 802, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 473,
	194, 195, 196, 0, 803, 804, 806, 0, 805, 807,
	197, 198, 397, 199, 832, 200, 833, 834, 0, 201,
	0, 202, 0, 203, 0, 0, 825, 205, 0, 206,
	0, 0, 0, 767, 207, 208, 209, 812, 813, 790,
	0, 0, 210, 211, 835, 836, 837, 0, 212, 0,
	213, 0, 0, 474, 0, 214, 823, 0, 355, 0,
	215, 216, 217, 218, 219, 819, 821, 476, 0, 223,
	0, 220, 0, 475, 221, 838, 222, 839, 840, 841,
	842, 843, 0, 801, 0, 477, 224, 225, 226, 478,
	227, 228, 229, 0, 231, 230, 0, 824, 479, 232,
	480, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 481, 240, 241, 243, 242, 762, 2102,
	791, 820, 244, 844, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 482, 250, 483, 814, 251,
	252, 253, 254, 255, 0, 256, 815, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 845, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 484, 279, 280, 768, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	808, 293, 282, 283, 294, 485, 295, 846, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 847, 300, 301,
	816, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 848, 849, 0, 0, 312, 313, 817,
	818, 789, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 809, 322, 0, 385, 323, 324, 325, 386,
	850, 0, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 763, 0, 0, 0, 0, 0, 761,
	0, 0, 0, 0, 759, 760, 1037, 794, 783, 784,
	781, 782, 773, 769, 0, 0, 0, 0, 0, 772,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 811, 776, 0, 0, 0, 179, 180, 181, 333,
	826, 335, 827, 182, 828, 829, 0, 183, 339, 340,
	184, 185, 779, 810, 830, 831, 343, 0, 186, 822,
	0, 802, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 473, 194, 195, 196, 0, 803, 804,
	806, 0, 805, 807, 197, 198, 397, 199, 832, 200,
	833, 834, 0, 201, 0, 202, 0, 203, 0, 0,
	825, 205, 0, 206, 0, 0, 0, 767, 207, 208,
	209, 812, 813, 790, 0, 0, 210, 211, 835, 836,
	837, 0, 212, 0, 213, 0, 0, 474, 0, 214,
	823, 0, 355, 0, 215, 216, 217, 218, 219, 819,
	821, 476, 0, 223, 1365, 220, 0, 475, 221, 838,
	222, 839, 840, 841, 842, 843, 0, 801, 0, 477,
	224, 225, 226, 478, 227, 228, 229, 0, 231, 230,
	0, 824, 479, 232, 480, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 481, 240, 241,
	243, 242, 762, 0, 791, 820, 244, 844, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 482,
	250, 483, 814, 251, 252, 253, 254, 255, 0, 256,
	815, 257, 372, 258, 1364, 259, 260, 261, 262, 263,
	845, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 484, 279,
	280, 768, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 808, 293, 282, 283, 294, 485,
	295, 846, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 847, 300, 301, 816, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 848, 849, 0,
	0, 312, 313, 817, 818, 789, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 809, 322, 0, 385,
	323, 324, 325, 386, 850, 0, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 763, 0, 0,
	0, 0, 0, 761, 0, 0, 0, 0, 759, 760,
	794, 783, 784, 781, 782, 773, 0, 769, 0, 0,
	0, 0, 0, 772, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 811, 776, 0, 0, 0, 179,
	180, 181, 333, 826, 335, 827, 182, 828, 829, 0,
	183, 339, 340, 184, 185, 779, 810, 830, 831, 343,
	0, 186, 822, 0, 802, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 473, 194, 195, 196,
	0, 803, 804, 806, 0, 805, 807, 197, 198, 397,
	199, 832, 200, 833, 834, 0, 201, 0, 202, 0,
	203, 0, 0, 825, 205, 0, 206, 0, 0, 0,
	767, 207, 208, 209, 812, 813, 790, 0, 0, 210,
	211, 835, 836, 837, 0, 212, 0, 213, 0, 0,
	474, 0, 214, 823, 0, 355, 0, 215, 216, 217,
	218, 219, 819, 821, 476, 0, 223, 0, 220, 0,
	475, 221, 838, 222, 839, 840, 841, 842, 843, 0,
	801, 0, 477, 224, 225, 226, 478, 227, 228, 229,
	0, 231, 230, 0, 824, 479, 232, 480, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	481, 240, 241, 243, 242, 762, 0, 791, 820, 244,
	844, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 482, 250, 483, 814, 251, 252, 253, 254,
	255, 0, 256, 815, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 845, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 484, 279, 280, 768, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 808, 293, 282,
	283, 294, 485, 295, 846, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 847, 300, 301, 816, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	848, 849, 0, 0, 312, 313, 817, 818, 789, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 809,
	322, 0, 385, 323, 324, 325, 386, 850, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	763, 0, 0, 0, 0, 0, 761, 0, 0, 0,
	0, 759, 760, 0, 0, 0, 0, 0, 1147, 1514,
	769, 0, 0, 0, 0, 0, 772, 794, 783, 784,
	781, 782, 773, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 811, 776, 0, 0, 0, 179, 180, 181, 333,
	826, 335, 827, 182, 828, 829, 0, 183, 339, 340,
	184, 185, 779, 810, 830, 831, 343, 0, 186, 822,
	0, 802, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 473, 194, 195, 196, 0, 803, 804,
	806, 0, 805, 807, 197, 198, 397, 199, 832, 200,
	833, 834, 1042, 201, 0, 202, 0, 203, 0, 0,
	825, 205, 0, 206, 0, 0, 0, 767, 207, 208,
	209, 812, 813, 790, 0, 0, 210, 211, 835, 836,
	837, 0, 212, 0, 213, 0, 0, 474, 0, 214,
	823, 0, 355, 0, 215, 216, 217, 218, 219, 819,
	821, 476, 0, 223, 0, 220, 0, 475, 221, 838,
	222, 839, 840, 841, 842, 843, 0, 801, 0, 477,
	224, 225, 226, 478, 227, 228, 229, 0, 231, 230,
	0, 824, 479, 232, 480, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 481, 240, 241,
	243, 242, 762, 0, 791, 820, 244, 844, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 482,
	250, 483, 814, 251, 252, 253, 254, 255, 0, 256,
	815, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	845, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 484, 279,
	280, 768, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 808, 293, 282, 283, 294, 485,
	295, 846, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 847, 300, 301, 816, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 848, 849, 0,
	0, 312, 313, 817, 818, 789, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 809, 322, 0, 385,
	323, 324, 325, 386, 850, 0, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 763, 0, 0,
	0, 0, 0, 761, 0, 0, 0, 0, 759, 760,
	794, 783, 784, 781, 782, 773, 0, 769, 0, 0,
	0, 0, 0, 772, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 811, 776, 0, 0, 0, 179,
	180, 181, 333, 826, 335, 827, 182, 828, 829, 0,
	183, 339, 340, 184, 185, 779, 810, 830, 831, 343,
	0, 186, 822, 0, 802, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 473, 194, 195, 196,
	0, 803, 804, 806, 0, 805, 807, 197, 198, 397,
	199, 832, 200, 833, 834, 0, 201, 0, 202, 0,
	203, 0, 0, 825, 205, 0, 206, 0, 0, 0,
	767, 207, 208, 209, 812, 813, 790, 0, 0, 210,
	211, 835, 836, 837, 0, 212, 0, 213, 0, 0,
	474, 0, 214, 823, 0, 355, 0, 215, 216, 217,
	218, 219, 819, 821, 476, 0, 223, 0, 220, 0,
	475, 221, 838, 222, 839, 840, 841, 842, 843, 0,
	801, 0, 477, 224, 225, 226, 478, 227, 228, 229,
	0, 231, 230, 0, 824, 479, 232, 480, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	481, 240, 241, 243, 242, 762, 0, 791, 820, 244,
	844, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 482, 250, 483, 814, 251, 252, 253, 254,
	255, 0, 256, 815, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 845, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 484, 279, 280, 768, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 808, 293, 282,
	283, 294, 485, 295, 846, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 847, 300, 301, 816, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	848, 849, 0, 0, 312, 313, 817, 818, 789, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 809,
	322, 0, 385, 323, 324, 325, 386, 850, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	763, 0, 0, 0, 0, 0, 761, 0, 0, 0,
	0, 759, 760, 794, 783, 784, 781, 782, 773, 0,
	769, 2070, 0, 0, 0, 0, 772, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 811, 776, 0,
	0, 0, 179, 180, 181, 333, 826, 335, 827, 182,
	828, 829, 0, 183, 339, 340, 184, 185, 779, 810,
	830, 831, 343, 0, 186, 822, 0, 802, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 473,
	194, 195, 196, 0, 803, 804, 806, 0, 805, 807,
	197, 198, 397, 199, 832, 200, 833, 834, 0, 201,
	0, 202, 0, 203, 0, 0, 825, 205, 0, 206,
	0, 0, 0, 767, 207, 208, 209, 812, 813, 790,
	0, 0, 210, 211, 835, 836, 837, 0, 212, 0,
	213, 0, 0, 474, 0, 214, 823, 0, 355, 0,
	215, 216, 217, 218, 219, 819, 821, 476, 0, 223,
	0, 220, 0, 475, 221, 838, 222, 839, 840, 841,
	842, 843, 0, 801, 0, 477, 224, 225, 226, 478,
	227, 228, 229, 0, 231, 230, 0, 824, 479, 232,
	480, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 481, 240, 241, 243, 242, 762, 0,
	791, 820, 244, 844, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 482, 250, 483, 814, 251,
	252, 253, 254, 255, 0, 256, 815, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 845, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 484, 279, 280, 768, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	808, 293, 282, 283, 294, 485, 295, 846, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 847, 300, 301,
	816, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 848, 849, 0, 0, 312, 313, 817,
	818, 789, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 809, 322, 0, 385, 323, 324, 325, 386,
	850, 2019, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 763, 0, 0, 0, 0, 0, 761,
	0, 0, 0, 0, 759, 760, 794, 783, 784, 781,
	782, 773, 0, 769, 0, 0, 0, 0, 0, 772,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	811, 776, 0, 0, 0, 179, 180, 181, 333, 826,
	335, 827, 182, 828, 829, 0, 183, 339, 340, 184,
	185, 779, 810, 830, 831, 343, 0, 186, 822, 0,
	802, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 473, 194, 195, 196, 0, 803, 804, 806,
	0, 805, 807, 197, 198, 397, 199, 832, 200, 833,
	834, 0, 201, 0, 202, 0, 203, 0, 0, 825,
	205, 0, 206, 0, 0, 0, 767, 207, 208, 209,
	812, 813, 790, 0, 0, 210, 211, 835, 836, 837,
	0, 212, 0, 213, 0, 0, 474, 0, 214, 823,
	0, 355, 0, 215, 216, 217, 218, 219, 819, 821,
	476, 0, 223, 0, 220, 0, 475, 221, 838, 222,
	839, 840, 841, 842, 843, 0, 801, 0, 477, 224,
	225, 226, 478, 227, 228, 229, 0, 231, 230, 0,
	824, 479, 232, 480, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 481, 240, 241, 243,
	242, 762, 0, 791, 820, 244, 844, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 482, 250,
	483, 814, 251, 252, 253, 254, 255, 0, 256, 815,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 845,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 484, 279, 280,
	768, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 808, 293, 282, 283, 294, 485, 295,
	846, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	847, 300, 301, 816, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 848, 849, 0, 0,
	312, 313, 817, 818, 789, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 809, 322, 0, 385, 323,
	324, 325, 386, 850, 0, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 763, 0, 0, 0,
	0, 0, 761, 0, 0, 0, 0, 759, 760, 794,
	783, 784, 781, 782, 773, 0, 769, 2009, 0, 0,
	0, 0, 772, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 811, 776, 0, 0, 0, 179, 180,
	181, 333, 826, 335, 827, 182, 828, 829, 0, 183,
	339, 340, 184, 185, 779, 810, 830, 831, 343, 0,
	186, 822, 0, 802, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 473, 194, 195, 196, 0,
	803, 804, 806, 0, 805, 807, 197, 198, 397, 199,
	832, 200, 833, 834, 0, 201, 0, 202, 0, 203,
	0, 0, 825, 205, 0, 206, 0, 0, 0, 767,
	207, 208, 209, 812, 813, 790, 0, 0, 210, 211,
	835, 836, 837, 0, 212, 0, 213, 0, 1582, 474,
	0, 214, 823, 0, 355, 0, 215, 216, 217, 218,
	219, 819, 821, 476, 0, 223, 0, 220, 0, 475,
	221, 838, 222, 839, 840, 841, 842, 843, 0, 801,
	0, 477, 224, 225, 226, 478, 227, 228, 229, 0,
	231, 230, 0, 824, 479, 232, 480, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 481,
	240, 241, 243, 242, 762, 0, 791, 820, 244, 844,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 482, 250, 483, 814, 251, 252, 253, 254, 255,
	0, 256, 815, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 845, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	484, 279, 280, 768, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 808, 293, 282, 283,
	294, 485, 295, 846, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 847, 300, 301, 816, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 848,
	849, 0, 0, 312, 313, 817, 818, 789, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 809, 322,
	0, 385, 323, 324, 325, 386, 850, 0, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 763,
	0, 0, 0, 0, 0, 761, 0, 0, 0, 0,
	759, 760, 794, 783, 784, 781, 782, 773, 0, 769,
	0, 0, 0, 0, 0, 772, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 811, 776, 0, 0,
	0, 179, 180, 181, 333, 826, 335, 827, 182, 828,
	829, 0, 183, 339, 340, 184, 185, 779, 810, 830,
	831, 343, 0, 186, 822, 0, 802, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 473, 194,
	195, 196, 0, 803, 804, 806, 0, 805, 807, 197,
	198, 397, 199, 832, 200, 833, 834, 0, 201, 0,
	202, 0, 203, 0, 0, 825, 205, 0, 206, 0,
	0, 0, 767, 207, 208, 209, 812, 813, 790, 0,
	0, 210, 211, 835, 836, 837, 0, 212, 0, 213,
	0, 0, 474, 0, 214, 823, 0, 355, 0, 215,
	216, 217, 218, 219, 819, 821, 476, 0, 223, 0,
	220, 0, 475, 221, 838, 222, 839, 840, 841, 842,
	843, 0, 801, 0, 477, 224, 225, 226, 478, 227,
	228, 229, 0, 231, 230, 0, 824, 479, 232, 480,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 481, 240, 241, 243, 242, 762, 0, 791,
	820, 244, 844, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 482, 250, 483, 814, 251, 252,
	253, 254, 255, 0, 256, 815, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 845, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 484, 279, 280, 768, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 808,
	293, 282, 283, 294, 485, 295, 846, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 847, 300, 301, 816,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 848, 849, 0, 0, 312, 313, 817, 818,
	789, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 809, 322, 0, 385, 323, 324, 325, 386, 850,
	0, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 763, 0, 0, 0, 0, 0, 761, 0,
	0, 0, 0, 759, 760, 1037, 0, 0, 0, 0,
	0, 0, 769, 0, 0, 0, 0, 1591, 772, 794,
	783, 784, 781, 782, 773, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 811, 776, 0, 0, 0, 179, 180,
	181, 333, 826, 335, 827, 182, 828, 829, 0, 183,
	339, 340, 184, 185, 779, 810, 830, 831, 343, 0,
	186, 822, 0, 802, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 473, 194, 195, 196, 0,
	803, 804, 806, 0, 805, 807, 197, 198, 397, 199,
	832, 200, 833, 834, 0, 201, 0, 202, 0, 203,
	0, 0, 825, 205, 0, 206, 0, 0, 0, 767,
	207, 208, 209, 812, 813, 790, 0, 0, 210, 211,
	835, 836, 837, 0, 212, 0, 213, 0, 0, 474,
	0, 214, 823, 0, 355, 0, 215, 216, 217, 218,
	219, 819, 821, 476, 0, 223, 0, 220, 0, 475,
	221, 838, 222, 839, 840, 841, 842, 843, 0, 801,
	0, 477, 224, 225, 226, 478, 227, 228, 229, 0,
	231, 230, 0, 824, 479, 232, 480, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 481,
	240, 241, 243, 242, 762, 0, 791, 820, 244, 844,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 482, 250, 483, 814, 251, 252, 253, 254, 255,
	0, 256, 815, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 845, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	484, 279, 280, 768, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 808, 293, 282, 283,
	294, 485, 295, 846, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 847, 300, 301, 816, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 848,
	849, 0, 0, 312, 313, 817, 818, 789, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 809, 322,
	0, 385, 323, 324, 325, 386, 850, 0, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 763,
	0, 0, 0, 0, 0, 761, 0, 0, 0, 0,
	759, 760, 0, 0, 0, 0, 0, 0, 0, 769,
	0, 0, 0, 0, 1589, 772, 794, 783, 784, 781,
	782, 773, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	811, 776, 0, 0, 0, 179, 180, 181, 333, 826,
	335, 827, 182, 828, 829, 0, 183, 339, 340, 184,
	185, 779, 810, 830, 831, 343, 0, 186, 822, 0,
	802, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 473, 194, 195, 196, 0, 803, 804, 806,
	0, 805, 807, 197, 198, 397, 199, 832, 200, 833,
	834, 0, 201, 0, 202, 0, 203, 0, 0, 825,
	205, 0, 206, 0, 0, 0, 767, 207, 208, 209,
	812, 813, 790, 0, 0, 210, 211, 835, 836, 837,
	0, 212, 0, 213, 0, 0, 474, 0, 214, 823,
	0, 355, 0, 215, 216, 217, 218, 219, 819, 821,
	476, 0, 223, 0, 220, 0, 475, 221, 838, 222,
	839, 840, 841, 842, 843, 0, 801, 0, 477, 224,
	225, 226, 478, 227, 228, 229, 0, 231, 230, 0,
	824, 479, 232, 480, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 481, 240, 241, 243,
	242, 762, 0, 791, 820, 244, 844, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 482, 250,
	483, 814, 251, 252, 253, 254, 255, 0, 256, 815,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 845,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 484, 279, 280,
	768, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 808, 293, 282, 283, 294, 485, 295,
	846, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	847, 300, 301, 816, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 848, 849, 0, 0,
	312, 313, 817, 818, 789, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 809, 322, 0, 385, 323,
	324, 325, 386, 850, 0, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 763, 0, 0, 0,
	0, 0, 761, 0, 0, 0, 0, 759, 760, 0,
	0, 0, 0, 0, 0, 0, 769, 0, 0, 0,
	0, 1573, 772, 794, 783, 784, 781, 782, 773, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 811, 776, 0,
	0, 0, 179, 180, 181, 333, 826, 335, 827, 182,
	828, 829, 0, 183, 339, 340, 184, 185, 779, 810,
	830, 831, 343, 0, 186, 822, 0, 802, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 473,
	194, 195, 196, 0, 803, 804, 806, 0, 805, 807,
	197, 198, 397, 199, 832, 200, 833, 834, 0, 201,
	0, 202, 0, 203, 0, 0, 825, 205, 0, 206,
	0, 0, 0, 767, 207, 208, 209, 812, 813, 790,
	0, 0, 210, 211, 835, 836, 837, 0, 212, 0,
	213, 0, 0, 474, 0, 214, 823, 0, 355, 0,
	215, 216, 217, 218, 219, 819, 821, 476, 0, 223,
	0, 220, 0, 475, 221, 838, 222, 839, 840, 841,
	842, 843, 0, 801, 0, 477, 224, 225, 226, 478,
	227, 228, 229, 0, 231, 230, 0, 824, 479, 232,
	480, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 481, 240, 241, 243, 242, 762, 0,
	791, 820, 244, 844, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 482, 250, 483, 814, 251,
	252, 253, 254, 255, 0, 256, 815, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 845, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 484, 279, 280, 768, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	808, 293, 282, 283, 294, 485, 295, 846, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 847, 300, 301,
	816, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 848, 849, 0, 0, 312, 313, 817,
	818, 789, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 809, 322, 0, 385, 323, 324, 325, 386,
	850, 0, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 763, 0, 0, 0, 0, 0, 761,
	0, 0, 0, 0, 759, 760, 0, 0, 0, 0,
	0, 0, 0, 769, 0, 0, 0, 0, 1561, 772,
	794, 783, 784, 781, 782, 773, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 811, 776, 0, 0, 0, 179,
	180, 181, 333, 826, 335, 827, 182, 828, 829, 0,
	183, 339, 340, 184, 185, 779, 810, 830, 831, 343,
	0, 186, 822, 0, 802, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 473, 194, 195, 196,
	0, 803, 804, 806, 0, 805, 807, 197, 198, 397,
	199, 832, 200, 833, 834, 0, 201, 0, 202, 0,
	203, 0, 0, 825, 205, 0, 206, 0, 0, 0,
	767, 207, 208, 209, 812, 813, 790, 0, 0, 210,
	211, 835, 836, 837, 0, 212, 0, 213, 0, 0,
	474, 0, 214, 823, 0, 355, 0, 215, 216, 217,
	218, 219, 819, 821, 476, 0, 223, 0, 220, 0,
	475, 221, 838, 222, 839, 840, 841, 842, 843, 0,
	801, 0, 477, 224, 225, 226, 478, 227, 228, 229,
	0, 231, 230, 0, 824, 479, 232, 480, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	481, 240, 241, 243, 242, 762, 0, 791, 820, 244,
	844, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 482, 250, 483, 814, 251, 252, 253, 254,
	255, 0, 256, 815, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 845, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 484, 279, 280, 768, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 808, 293, 282,
	283, 294, 485, 295, 846, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 847, 300, 301, 816, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	848, 849, 0, 0, 312, 313, 817, 818, 789, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 809,
	322, 0, 385, 323, 324, 325, 386, 850, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	763, 0, 0, 0, 0, 0, 761, 0, 0, 0,
	0, 759, 760, 0, 0, 0, 0, 0, 0, 0,
	769, 0, 0, 0, 0, 1559, 772, 1551, 783, 784,
	781, 782, 773, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 811, 776, 0, 0, 0, 179, 180, 181, 333,
	826, 335, 827, 182, 828, 829, 0, 183, 339, 340,
	184, 185, 779, 810, 830, 831, 343, 0, 186, 822,
	0, 802, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 473, 194, 195, 196, 0, 803, 804,
	806, 0, 805, 807, 197, 198, 397, 199, 832, 1554,
	833, 834, 0, 201, 0, 202, 0, 203, 0, 0,
	825, 205, 0, 206, 0, 0, 0, 767, 207, 208,
	209, 812, 813, 790, 0, 0, 210, 211, 835, 836,
	837, 0, 212, 0, 213, 0, 0, 474, 0, 214,
	823, 0, 355, 0, 215, 216, 1555, 218, 219, 819,
	821, 476, 0, 223, 0, 220, 0, 475, 221, 838,
	222, 839, 840, 841, 842, 843, 0, 801, 0, 477,
	224, 225, 226, 478, 227, 228, 229, 0, 231, 230,
	0, 824, 479, 232, 480, 0, 233, 0, 0, 234,
	0, 235, 1556, 1553, 239, 366, 238, 481, 240, 241,
	243, 242, 762, 0, 791, 820, 244, 844, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 482,
	250, 483, 814, 251, 252, 253, 254, 255, 0, 256,
	815, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	845, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 484, 279,
	280, 768, 281, 0, 285, 286, 287, 1557, 0, 290,
	375, 289, 291, 292, 808, 293, 282, 283, 294, 485,
	295, 846, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 847, 300, 301, 816, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 848, 849, 0,
	0, 312, 313, 817, 818, 789, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 809, 322, 0, 385,
	323, 324, 325, 386, 850, 0, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 1552, 331, 763, 0, 0,
	0, 0, 0, 761, 0, 0, 0, 0, 759, 760,
	0, 0, 0, 0, 0, 0, 0, 769, 0, 0,
	0, 0, 1548, 772, 1551, 783, 784, 781, 782, 773,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 811, 776,
	0, 0, 0, 179, 180, 181, 333, 826, 335, 827,
	182, 828, 829, 0, 183, 339, 340, 184, 185, 779,
	810, 830, 831, 343, 0, 186, 822, 0, 802, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	473, 194, 195, 196, 0, 803, 804, 806, 0, 805,
	807, 197, 198, 397, 199, 832, 1554, 833, 834, 0,
	201, 0, 202, 0, 203, 0, 0, 825, 205, 0,
	206, 0, 0, 0, 767, 207, 208, 209, 812, 813,
	790, 0, 0, 210, 211, 835, 836, 837, 0, 212,
	0, 213, 0, 0, 474, 0, 214, 823, 0, 355,
	0, 215, 216, 1555, 218, 219, 819, 821, 476, 0,
	223, 0, 220, 0, 475, 221, 838, 222, 839, 840,
	841, 842, 843, 0, 801, 0, 477, 224, 225, 226,
	478, 227, 228, 229, 0, 231, 230, 0, 824, 479,
	232, 480, 0, 233, 0, 0, 234, 0, 235, 1556,
	1553, 239, 366, 238, 481, 240, 241, 243, 242, 762,
	0, 791, 820, 244, 844, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 482, 250, 483, 814,
	251, 252, 253, 254, 255, 0, 256, 815, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 845, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 484, 279, 280, 768, 281,
	0, 285, 286, 287, 1557, 0, 290, 375, 289, 291,
	292, 808, 293, 282, 283, 294, 485, 295, 846, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 847, 300,
	301, 816, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 848, 849, 0, 0, 312, 313,
	817, 818, 789, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 809, 322, 0, 385, 323, 324, 325,
	386, 850, 0, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 1552, 331, 763, 0, 0, 0, 0, 0,
	761, 0, 0, 0, 0, 759, 760, 794, 783, 784,
	781, 782, 773, 0, 769, 0, 0, 0, 0, 0,
	772, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 811, 776, 0, 0, 0, 179, 180, 181, 333,
	826, 335, 827, 182, 828, 829, 0, 183, 339, 340,
	184, 185, 779, 810, 830, 831, 343, 0, 186, 822,
	0, 802, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 473, 194, 195, 196, 0, 803, 804,
	806, 0, 805, 807, 197, 198, 397, 199, 832, 200,
	833, 834, 0, 201, 0, 202, 0, 203, 0, 0,
	825, 205, 0, 206, 0, 0, 0, 767, 207, 208,
	209, 812, 813, 790, 0, 0, 210, 211, 835, 836,
	837, 0, 212, 0, 213, 0, 0, 474, 0, 214,
	823, 0, 355, 0, 215, 216, 217, 218, 219, 819,
	821, 476, 0, 223, 0, 220, 0, 475, 221, 838,
	222, 839, 840, 841, 842, 843, 0, 801, 0, 477,
	224, 225, 226, 478, 227, 228, 229, 0, 231, 230,
	0, 824, 479, 232, 480, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 481, 240, 241,
	243, 242, 762, 0, 791, 820, 244, 844, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 482,
	250, 483, 814, 251, 252, 253, 254, 255, 0, 256,
	815, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	845, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 484, 279,
	280, 768, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 808, 293, 282, 283, 294, 485,
	295, 846, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 847, 300, 301, 816, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 848, 849, 0,
	0, 312, 313, 817, 818, 789, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 809, 322, 0, 385,
	323, 324, 325, 386, 850, 0, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 763, 0, 0,
	0, 0, 0, 761, 0, 0, 0, 0, 759, 760,
	0, 0, 0, 0, 0, 0, 0, 769, 1509, 0,
	0, 0, 1395, 772, 794, 783, 784, 781, 782, 773,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 811, 776,
	0, 0, 0, 179, 180, 181, 333, 826, 335, 827,
	182, 828, 829, 0, 183, 339, 340, 184, 185, 779,
	810, 830, 831, 343, 0, 186, 822, 0, 802, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	473, 194, 195, 196, 0, 803, 804, 806, 0, 805,
	807, 197, 198, 397, 199, 832, 200, 833, 834, 0,
	201, 0, 202, 0, 203, 0, 0, 825, 205, 0,
	206, 0, 0, 0, 767, 207, 208, 209, 812, 813,
	790, 0, 0, 210, 211, 835, 836, 837, 0, 212,
	0, 213, 0, 0, 474, 0, 214, 823, 0, 355,
	0, 215, 216, 217, 218, 219, 819, 821, 476, 0,
	223, 0, 220, 0, 475, 221, 838, 222, 839, 840,
	841, 842, 843, 0, 801, 0, 477, 224, 225, 226,
	478, 227, 228, 229, 0, 231, 230, 0, 824, 479,
	232, 480, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 481, 240, 241, 243, 242, 762,
	0, 791, 820, 244, 844, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 482, 250, 483, 814,
	251, 252, 253, 254, 255, 0, 256, 815, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 845, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 484, 279, 280, 768, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 808, 293, 282, 283, 294, 485, 295, 846, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 847, 300,
	301, 816, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 848, 849, 0, 0, 312, 313,
	817, 818, 789, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 809, 322, 0, 385, 323, 324, 325,
	386, 850, 0, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 763, 0, 0, 0, 0, 0,
	761, 0, 0, 0, 0, 759, 760, 794, 783, 784,
	781, 782, 773, 0, 769, 0, 0, 0, 0, 0,
	772, 0, 0, 176, 177, 1352, 178, 0, 0, 0,
	0, 811, 776, 0, 0, 0, 179, 180, 181, 333,
	826, 335, 827, 182, 828, 829, 0, 183, 339, 340,
	184, 185, 779, 810, 830, 831, 343, 0, 186, 822,
	0, 802, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 473, 194, 195, 196, 0, 803, 804,
	806, 0, 805, 807, 197, 198, 397, 199, 832, 200,
	833, 834, 0, 201, 0, 202, 0, 203, 0, 0,
	825, 205, 0, 206, 0, 0, 0, 767, 207, 208,
	209, 812, 813, 790, 0, 0, 210, 211, 835, 836,
	837, 0, 212, 0, 213, 0, 0, 474, 0, 214,
	823, 0, 355, 0, 215, 216, 217, 218, 219, 819,
	821, 476, 0, 223, 0, 220, 0, 475, 221, 838,
	222, 839, 840, 841, 842, 843, 0, 801, 0, 477,
	224, 225, 226, 478, 227, 228, 229, 0, 231, 230,
	0, 824, 479, 232, 480, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 481, 240, 241,
	243, 242, 762, 0, 791, 820, 244, 844, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 482,
	250, 483, 814, 251, 252, 253, 254, 255, 0, 256,
	815, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	845, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 484, 279,
	280, 768, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 808, 293, 282, 283, 294, 485,
	295, 846, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 847, 300, 301, 816, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 848, 849, 0,
	0, 312, 313, 817, 818, 789, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 809, 322, 0, 385,
	323, 324, 325, 386, 850, 0, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 763, 0, 0,
	0, 0, 0, 761, 0, 0, 0, 0, 759, 760,
	0, 0, 0, 0, 0, 0, 0, 769, 0, 0,
	0, 0, 860, 772, 794, 783, 784, 781, 782, 773,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 811, 776,
	0, 0, 0, 179, 180, 181, 333, 826, 335, 827,
	182, 828, 829, 0, 183, 339, 340, 184, 185, 779,
	810, 830, 831, 343, 0, 186, 822, 0, 802, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	473, 194, 195, 196, 0, 803, 804, 806, 0, 805,
	807, 197, 198, 397, 199, 832, 200, 833, 834, 0,
	201, 0, 202, 0, 203, 0, 0, 825, 205, 0,
	206, 0, 0, 0, 767, 207, 208, 209, 812, 813,
	790, 0, 0, 210, 211, 835, 836, 837, 0, 212,
	0, 213, 0, 0, 474, 0, 214, 823, 0, 355,
	0, 215, 216, 217, 218, 219, 819, 821, 476, 0,
	223, 0, 220, 0, 475, 221, 838, 222, 839, 840,
	841, 842, 843, 0, 801, 0, 477, 224, 225, 226,
	478, 227, 228, 229, 0, 231, 230, 0, 824, 479,
	232, 480, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 481, 240, 241, 243, 242, 762,
	0, 791, 820, 244, 844, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 482, 250, 483, 814,
	251, 252, 253, 254, 255, 0, 256, 815, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 845, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 484, 279, 280, 768, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 808, 293, 282, 283, 294, 485, 295, 846, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 847, 300,
	301, 816, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 848, 849, 0, 0, 312, 313,
	817, 818, 789, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 809, 322, 0, 385, 323, 324, 325,
	386, 850, 0, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 763, 0, 0, 0, 0, 0,
	761, 0, 0, 0, 0, 759, 760, 0, 0, 0,
	0, 0, 0, 0, 769, 0, 0, 0, 0, 858,
	772, 794, 783, 784, 781, 782, 773, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 811, 776, 0, 0, 0,
	179, 180, 181, 333, 826, 335, 827, 182, 828, 829,
	0, 183, 339, 340, 184, 185, 779, 810, 830, 831,
	343, 0, 186, 822, 0, 802, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 473, 194, 195,
	196, 0, 803, 804, 806, 0, 805, 807, 197, 198,
	397, 199, 832, 200, 833, 834, 0, 201, 0, 202,
	0, 203, 0, 0, 825, 205, 0, 206, 0, 0,
	0, 767, 207, 208, 209, 812, 813, 790, 0, 0,
	210, 211, 835, 836, 837, 0, 212, 0, 213, 0,
	0, 474, 0, 214, 823, 0, 355, 0, 215, 216,
	217, 218, 219, 819, 821, 476, 0, 223, 0, 220,
	0, 475, 221, 838, 222, 839, 840, 841, 842, 843,
	0, 801, 0, 477, 224, 225, 226, 478, 227, 228,
	229, 0, 231, 230, 0, 824, 479, 232, 480, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 481, 240, 241, 243, 242, 762, 0, 791, 820,
	244, 844, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 482, 250, 483, 814, 251, 252, 253,
	254, 255, 0, 256, 815, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 845, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 484, 279, 280, 768, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 808, 293,
	282, 283, 294, 485, 295, 846, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 847, 300, 301, 816, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 848, 849, 0, 0, 312, 313, 817, 818, 789,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	809, 322, 0, 385, 323, 324, 325, 386, 850, 0,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 763, 0, 0, 0, 0, 0, 761, 0, 0,
	0, 0, 759, 760, 0, 0, 0, 0, 0, 0,
	0, 769, 0, 0, 0, 0, 757, 772, 794, 783,
	784, 781, 782, 773, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 811, 776, 0, 0, 0, 179, 180, 181,
	333, 826, 335, 827, 182, 828, 829, 0, 183, 339,
	340, 184, 185, 779, 810, 830, 831, 343, 0, 186,
	822, 0, 802, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 473, 194, 195, 196, 0, 803,
	804, 806, 0, 805, 807, 197, 198, 397, 199, 832,
	200, 833, 834, 0, 201, 0, 202, 0, 203, 0,
	0, 825, 205, 0, 206, 0, 0, 0, 767, 207,
	208, 209, 812, 813, 790, 0, 0, 210, 211, 835,
	836, 837, 0, 212, 0, 213, 0, 0, 474, 0,
	214, 823, 0, 355, 0, 215, 216, 217, 218, 219,
	819, 821, 476, 0, 223, 0, 220, 0, 475, 221,
	838, 222, 839, 840, 841, 842, 843, 0, 801, 0,
	477, 224, 225, 226, 478, 227, 228, 229, 0, 231,
	230, 0, 824, 479, 232, 480, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 481, 240,
	241, 243, 242, 762, 0, 791, 820, 244, 844, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	482, 250, 483, 814, 251, 252, 253, 254, 255, 0,
	256, 815, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 845, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 484,
	279, 280, 768, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 808, 293, 282, 283, 294,
	485, 295, 846, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 847, 300, 301, 816, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 848, 849,
	0, 0, 312, 313, 817, 818, 789, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 809, 322, 0,
	385, 323, 324, 325, 386, 850, 0, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 763, 0,
	0, 0, 0, 0, 761, 0, 0, 0, 0, 759,
	760, 794, 783, 784, 781, 782, 773, 0, 769, 0,
	0, 0, 0, 0, 772, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 811, 776, 0, 0, 0,
	179, 180, 181, 333, 826, 335, 827, 182, 828, 829,
	0, 183, 339, 340, 184, 185, 779, 810, 830, 831,
	343, 0, 186, 822, 0, 802, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 473, 194, 195,
	2430, 0, 803, 804, 806, 0, 805, 807, 197, 198,
	397, 199, 832, 200, 833, 834, 0, 201, 0, 202,
	0, 203, 0, 0, 825, 205, 0, 206, 0, 0,
	0, 767, 207, 208, 209, 812, 813, 790, 0, 0,
	210, 211, 835, 836, 837, 0, 212, 0, 213, 0,
	0, 474, 0, 214, 823, 0, 355, 0, 215, 216,
	217, 218, 219, 819, 821, 476, 0, 223, 0, 220,
	0, 475, 221, 838, 222, 839, 840, 841, 842, 843,
	0, 801, 0, 477, 224, 225, 226, 478, 227, 228,
	229, 0, 231, 230, 0, 824, 479, 232, 480, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 481, 240, 241, 243, 242, 762, 0, 791, 820,
	244, 844, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 482, 250, 483, 814, 251, 252, 253,
	254, 255, 0, 256, 815, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 845, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 484, 279, 280, 768, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 808, 293,
	282, 283, 294, 485, 295, 846, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 847, 300, 301, 816, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 848, 849, 0, 0, 312, 313, 817, 818, 789,
	314, 315, 2429, 317, 0, 0, 318, 319, 320, 321,
	809, 322, 0, 385, 323, 324, 325, 386, 850, 0,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 763, 0, 0, 0, 0, 0, 761, 0, 0,
	0, 0, 759, 760, 794, 783, 784, 781, 782, 773,
	0, 769, 0, 0, 0, 0, 0, 772, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 811, 776,
	0, 0, 0, 179, 180, 181, 2428, 826, 335, 827,
	182, 828, 829, 0, 183, 339, 340, 184, 185, 779,
	810, 830, 831, 343, 0, 186, 822, 0, 802, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	473, 194, 195, 2430, 0, 803, 804, 806, 0, 805,
	807, 197, 198, 397, 199, 832, 200, 833, 834, 0,
	201, 0, 202, 0, 203, 0, 0, 825, 205, 0,
	206, 0, 0, 0, 767, 207, 208, 209, 812, 813,
	790, 0, 0, 210, 211, 835, 836, 837, 0, 212,
	0, 213, 0, 0, 474, 0, 214, 823, 0, 355,
	0, 215, 216, 217, 218, 219, 819, 821, 476, 0,
	223, 0, 220, 0, 475, 221, 838, 222, 839, 840,
	841, 842, 843, 0, 801, 0, 477, 224, 225, 226,
	478, 227, 228, 229, 0, 231, 230, 0, 824, 479,
	232, 480, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 481, 240, 241, 243, 242, 762,
	0, 791, 820, 244, 844, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 482, 250, 483, 814,
	251, 252, 253, 254, 255, 0, 256, 815, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 845, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 484, 279, 280, 768, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 808, 293, 282, 283, 294, 485, 295, 846, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 847, 300,
	301, 816, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 848, 849, 0, 0, 312, 313,
	817, 818, 789, 314, 315, 2429, 317, 0, 0, 318,
	319, 320, 321, 809, 322, 0, 385, 323, 324, 325,
	386, 850, 0, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 763, 0, 0, 0, 0, 0,
	761, 0, 0, 0, 0, 759, 760, 794, 783, 784,
	781, 782, 773, 0, 769, 0, 0, 0, 0, 0,
	772, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 811, 776, 0, 0, 0, 179, 180, 181, 333,
	826, 335, 827, 182, 828, 829, 0, 183, 339, 340,
	184, 185, 779, 810, 830, 831, 343, 0, 186, 822,
	0, 802, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 473, 194, 195, 196, 0, 803, 804,
	806, 0, 805, 807, 197, 198, 397, 199, 832, 200,
	833, 834, 0, 201, 0, 202, 0, 203, 0, 0,
	825, 205, 0, 206, 0, 0, 0, 767, 207, 208,
	209, 812, 813, 790, 0, 0, 210, 211, 835, 836,
	837, 0, 212, 0, 213, 0, 0, 474, 0, 214,
	823, 0, 355, 0, 215, 216, 217, 218, 219, 819,
	821, 476, 0, 223, 0, 220, 0, 475, 221, 838,
	222, 839, 840, 841, 842, 843, 0, 801, 0, 477,
	224, 225, 226, 478, 227, 228, 229, 0, 231, 230,
	0, 824, 479, 232, 480, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 481, 240, 241,
	243, 242, 762, 0, 791, 820, 244, 844, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 482,
	250, 483, 814, 251, 252, 253, 254, 255, 0, 256,
	815, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	845, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 484, 279,
	280, 768, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 808, 293, 282, 283, 294, 485,
	295, 846, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 847, 300, 301, 816, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 848, 849, 0,
	0, 312, 313, 817, 818, 789, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 809, 322, 0, 385,
	323, 324, 325, 386, 850, 0, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 763, 0, 0,
	0, 0, 0, 761, 0, 0, 0, 0, 759, 760,
	794, 783, 784, 781, 782, 773, 0, 769, 0, 0,
	0, 0, 0, 772, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 811, 776, 0, 0, 0, 179,
	180, 181, 333, 826, 335, 827, 182, 828, 829, 0,
	183, 339, 340, 184, 185, 779, 810, 830, 831, 343,
	0, 186, 822, 0, 802, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 473, 194, 195, 196,
	0, 803, 804, 806, 0, 805, 807, 197, 198, 397,
	199, 832, 200, 833, 834, 0, 201, 0, 202, 0,
	203, 0, 0, 825, 205, 0, 206, 0, 0, 0,
	767, 207, 208, 209, 812, 813, 790, 0, 0, 210,
	211, 835, 836, 837, 0, 212, 0, 213, 0, 0,
	474, 0, 214, 823, 0, 355, 0, 215, 216, 217,
	218, 219, 819, 821, 476, 0, 223, 0, 220, 0,
	475, 221, 838, 222, 839, 840, 841, 842, 843, 0,
	801, 0, 477, 224, 225, 226, 478, 227, 228, 229,
	0, 231, 230, 0, 824, 479, 232, 480, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	481, 240, 241, 243, 242, 0, 0, 791, 820, 244,
	844, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 482, 250, 483, 814, 251, 252, 253, 254,
	255, 0, 256, 815, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 845, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 484, 279, 280, 1571, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 808, 293, 282,
	283, 294, 485, 295, 846, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 847, 300, 301, 816, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	848, 849, 0, 0, 312, 313, 817, 818, 789, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 809,
	322, 0, 385, 323, 324, 325, 386, 850, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	794, 783, 784, 781, 782, 773, 1569, 0, 0, 0,
	0, 1567, 1568, 0, 0, 0, 176, 177, 0, 178,
	1570, 0, 0, 0, 811, 776, 772, 0, 0, 179,
	180, 181, 333, 826, 335, 827, 182, 828, 829, 0,
	183, 339, 340, 184, 185, 0, 810, 830, 831, 343,
	0, 186, 822, 0, 802, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 473, 194, 195, 196,
	0, 803, 804, 806, 0, 805, 807, 197, 198, 397,
	199, 832, 200, 833, 834, 0, 201, 0, 202, 0,
	203, 0, 0, 825, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 812, 813, 790, 0, 0, 210,
	211, 835, 836, 837, 0, 212, 0, 213, 0, 0,
	474, 0, 214, 823, 0, 355, 0, 215, 216, 217,
	218, 219, 819, 821, 476, 0, 223, 0, 220, 0,
	475, 221, 838, 222, 839, 840, 841, 842, 843, 0,
	801, 0, 477, 224, 225, 226, 478, 227, 228, 229,
	0, 231, 230, 0, 824, 479, 232, 480, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	481, 240, 241, 243, 242, 0, 0, 791, 820, 244,
	844, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 482, 250, 483, 814, 251, 252, 253, 254,
	255, 0, 256, 815, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 845, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 484, 279, 280, 1571, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 808, 293, 282,
	283, 294, 485, 295, 846, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 847, 300, 301, 816, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	848, 849, 0, 0, 312, 313, 817, 818, 789, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 809,
	322, 0, 385, 323, 324, 325, 386, 850, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	794, 783, 784, 781, 782, 773, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	1570, 0, 0, 0, 811, 776, 772, 0, 0, 179,
	180, 181, 0, 826, 335, 827, 182, 828, 829, 0,
	183, 339, 340, 184, 185, 779, 810, 830, 831, 343,
	0, 186, 822, 0, 802, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 473, 194, 195, 2430,
	0, 803, 804, 806, 0, 805, 807, 197, 198, 397,
	199, 832, 200, 833, 834, 0, 201, 0, 202, 0,
	203, 0, 0, 825, 205, 0, 206, 0, 0, 0,
	767, 207, 208, 209, 812, 813, 790, 0, 0, 210,
	211, 835, 836, 837, 0, 212, 0, 213, 0, 0,
	474, 0, 214, 823, 0, 355, 0, 215, 216, 217,
	218, 219, 819, 821, 0, 0, 223, 0, 220, 0,
	475, 221, 838, 222, 839, 840, 841, 842, 843, 0,
	801, 0, 0, 224, 225, 226, 478, 227, 228, 229,
	0, 231, 230, 0, 824, 479, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	481, 240, 241, 243, 242, 762, 0, 791, 820, 244,
	844, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 482, 250, 483, 814, 251, 252, 253, 254,
	255, 0, 256, 815, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 845, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 484, 279, 280, 768, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 808, 293, 282,
	283, 294, 0, 295, 846, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 847, 300, 301, 816, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	848, 849, 0, 0, 312, 313, 817, 818, 789, 314,
	315, 2429, 317, 0, 0, 318, 319, 320, 321, 809,
	322, 0, 385, 323, 324, 325, 386, 850, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	794, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 759, 760, 0, 0, 0, 176, 177, 0, 178,
	769, 0, 0, 0, 811, 0, 772, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 810, 341, 342, 343,
	0, 186, 822, 0, 802, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 473, 194, 195, 196,
	0, 803, 804, 806, 0, 805, 807, 197, 198, 397,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 812, 813, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	474, 0, 214, 823, 0, 355, 0, 215, 216, 217,
	218, 219, 819, 821, 476, 0, 223, 0, 220, 0,
	475, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 477, 224, 225, 226, 478, 227, 228, 229,
	0, 231, 230, 0, 824, 479, 232, 480, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	481, 240, 241, 243, 242, 0, 0, 0, 820, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 482, 250, 483, 814, 251, 252, 253, 254,
	255, 0, 256, 815, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 484, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 808, 293, 282,
	283, 294, 485, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 816, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 817, 818, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 809,
	322, 0, 385, 323, 324, 325, 386, 387, 0, 0,
	326, 909, 0, 690, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 332, 0, 0,
	1973, 0, 179, 180, 181, 333, 334, 335, 336, 182,
	337, 338, 0, 183, 339, 340, 184, 185, 0, 0,
	341, 342, 343, 0, 186, 344, 0, 472, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 473,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 397, 199, 345, 200, 346, 347, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 348, 207, 208, 209, 349, 350, 0,
	0, 0, 210, 211, 351, 352, 353, 0, 212, 0,
	213, 0, 0, 474, 0, 214, 354, 0, 355, 0,
	215, 216, 217, 218, 219, 356, 357, 476, 0, 223,
	0, 220, 0, 475, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 477, 224, 225, 226, 478,
	227, 228, 229, 0, 231, 230, 0, 365, 479, 232,
	480, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 481, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 482, 250, 483, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 484, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 132, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 485, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 134, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 912,
	387, 0, 0, 326, 0, 0, 0, 126, 327, 328,
	329, 330, 331, 0, 127, 690, 687, 0, 688, 683,
	678, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 119, 178, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 179, 180, 181, 333, 334, 335,
	336, 182, 337, 338, 0, 183, 339, 340, 184, 185,
	0, 0, 341, 342, 343, 0, 186, 344, 0, 472,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 473, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 397, 199, 345, 200, 346, 347,
	1316, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 348, 207, 208, 209, 349,
	350, 680, 0, 0, 210, 211, 351, 352, 353, 0,
	212, 0, 213, 0, 0, 474, 0, 214, 354, 0,
	355, 0, 215, 216, 217, 218, 219, 356, 357, 476,
	0, 223, 0, 220, 0, 475, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 477, 224, 225,
	226, 478, 227, 228, 229, 0, 231, 230, 0, 365,
	479, 232, 480, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 481, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	681, 0, 248, 0, 0, 249, 369, 482, 250, 483,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 484, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 485, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 679, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 0, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 690, 687, 0, 688, 683,
	678, 0, 0, 0, 0, 0, 689, 684, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 179, 180, 181, 333, 334, 335,
	336, 182, 337, 338, 0, 183, 339, 340, 184, 185,
	0, 0, 341, 342, 343, 0, 186, 344, 0, 472,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 473, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 397, 199, 345, 200, 346, 347,
	1313, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 348, 207, 208, 209, 349,
	350, 680, 0, 0, 210, 211, 351, 352, 353, 0,
	212, 0, 213, 0, 0, 474, 0, 214, 354, 0,
	355, 0, 215, 216, 217, 218, 219, 356, 357, 476,
	0, 223, 0, 220, 0, 475, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 477, 224, 225,
	226, 478, 227, 228, 229, 0, 231, 230, 0, 365,
	479, 232, 480, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 481, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	681, 0, 248, 0, 0, 249, 369, 482, 250, 483,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 484, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 485, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 679, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 0, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 690, 687, 0, 688, 683,
	678, 0, 0, 0, 0, 0, 689, 684, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 179, 180, 181, 333, 334, 335,
	336, 182, 337, 338, 0, 183, 339, 340, 184, 185,
	0, 0, 341, 342, 343, 0, 186, 344, 0, 472,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 473, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 397, 199, 345, 200, 346, 347,
	953, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 348, 207, 208, 209, 349,
	350, 680, 0, 0, 210, 211, 351, 352, 353, 0,
	212, 0, 213, 0, 0, 474, 0, 214, 354, 0,
	355, 0, 215, 216, 217, 218, 219, 356, 357, 476,
	0, 223, 0, 220, 0, 475, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 477, 224, 225,
	226, 478, 227, 228, 229, 0, 231, 230, 0, 365,
	479, 232, 480, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 481, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	681, 0, 248, 0, 0, 249, 369, 482, 250, 483,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 484, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 485, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 679, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 0, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 675, 0, 690, 687, 0,
	688, 683, 678, 0, 0, 0, 689, 684, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 0, 183, 339, 340,
	184, 185, 0, 0, 341, 342, 343, 0, 186, 344,
	0, 472, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 473, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 397, 199, 345, 200,
	346, 347, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 680, 0, 0, 210, 211, 351, 352,
	353, 0, 212, 0, 213, 0, 0, 474, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 356,
	357, 476, 0, 223, 0, 220, 0, 475, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 477,
	224, 225, 226, 478, 227, 228, 229, 0, 231, 230,
	0, 365, 479, 232, 480, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 481, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 681, 0, 248, 0, 0, 249, 369, 482,
	250, 483, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 484, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 485,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 679, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 0, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 690, 687, 0,
	688, 683, 678, 0, 0, 0, 0, 0, 689, 684,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 0, 183, 339, 340,
	184, 185, 0, 0, 341, 342, 343, 0, 186, 344,
	0, 472, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 473, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 397, 199, 345, 200,
	346, 347, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 680, 0, 0, 210, 211, 351, 352,
	353, 0, 212, 0, 213, 0, 0, 474, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 356,
	357, 476, 0, 223, 0, 220, 0, 475, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 477,
	224, 225, 226, 478, 227, 228, 229, 0, 231, 230,
	0, 365, 479, 232, 480, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 481, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 681, 0, 248, 0, 0, 249, 369, 482,
	250, 483, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 484, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 485,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 679, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 0, 672, 326, 173, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 689, 684,
	0, 0, 332, 0, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 397, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	356, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 732, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 132,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 134, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 912, 387, 0, 0, 326, 0,
	173, 0, 126, 327, 328, 329, 330, 331, 0, 127,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 726, 0, 1061, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 397,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 732, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 132, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	134, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 912, 387, 0, 0,
	326, 672, 0, 173, 126, 327, 328, 329, 330, 331,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 332, 726, 0,
	1061, 0, 179, 180, 181, 333, 334, 335, 336, 182,
	337, 338, 0, 183, 339, 340, 184, 185, 0, 0,
	341, 342, 343, 0, 186, 344, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 397, 199, 345, 200, 346, 347, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 348, 207, 208, 209, 349, 350, 0,
	0, 0, 210, 211, 351, 352, 353, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 354, 0, 355, 0,
	215, 216, 217, 218, 219, 356, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 132, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 134, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 912,
	387, 0, 0, 326, 1698, 0, 173, 126, 327, 328,
	329, 330, 331, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 0, 0, 119, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 397, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 356, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 732, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 0, 0, 326, 725, 0, 173,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 332, 726, 0, 731, 0, 179, 180,
	181, 333, 334, 335, 336, 182, 337, 338, 0, 183,
	339, 340, 184, 185, 0, 0, 341, 342, 343, 0,
	186, 344, 0, 0, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 0, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 197, 198, 397, 199,
	345, 200, 346, 347, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 348,
	207, 208, 209, 349, 350, 0, 0, 0, 210, 211,
	351, 352, 353, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 354, 0, 355, 0, 215, 216, 217, 218,
	219, 356, 357, 0, 0, 223, 0, 220, 0, 0,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 365, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 732, 248, 0, 0, 249,
	369, 0, 250, 0, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 0, 0, 326,
	0, 173, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 332, 0, 726, 0, 731,
	179, 180, 181, 333, 334, 335, 336, 182, 337, 338,
	0, 183, 339, 340, 184, 185, 0, 0, 341, 342,
	343, 0, 186, 344, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	397, 199, 345, 200, 346, 347, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 348, 207, 208, 209, 349, 350, 0, 0, 0,
	210, 211, 351, 352, 353, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 354, 0, 355, 0, 215, 216,
	217, 218, 219, 356, 357, 0, 0, 223, 0, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 732, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 0,
	0, 326, 0, 173, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 332, 0, 726,
	0, 731, 179, 180, 181, 333, 334, 335, 336, 182,
	337, 338, 0, 183, 339, 340, 184, 185, 0, 0,
	341, 342, 343, 0, 186, 344, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 397, 199, 345, 200, 346, 347, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 348, 207, 208, 209, 349, 350, 0,
	0, 0, 210, 211, 351, 352, 353, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 354, 0, 355, 0,
	215, 216, 217, 218, 219, 356, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 0, 0, 326, 0, 0, 173, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 0, 0, 0, 1191, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 397, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 356, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 0, 0, 326, 0, 173, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 0, 0, 0, 1635, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 397, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	356, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 0, 0, 326, 0,
	173, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 2034, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 397,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	794, 783, 784, 781, 782, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	1064, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 826, 335, 827, 182, 828, 829, 0,
	183, 339, 340, 184, 185, 0, 0, 830, 831, 343,
	0, 186, 344, 0, 472, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 473, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 397,
	199, 832, 200, 833, 834, 0, 201, 0, 202, 0,
	203, 0, 0, 825, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 790, 0, 0, 210,
	211, 835, 836, 837, 0, 212, 0, 213, 0, 0,
	474, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 476, 0, 223, 0, 220, 0,
	475, 221, 838, 222, 839, 840, 841, 842, 843, 0,
	801, 0, 477, 224, 225, 226, 478, 227, 228, 229,
	0, 231, 230, 0, 365, 479, 232, 480, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	481, 240, 241, 243, 242, 0, 0, 791, 367, 244,
	844, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 482, 250, 483, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 845, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 484, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 485, 295, 846, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 847, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	848, 849, 0, 0, 312, 313, 383, 384, 789, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 850, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	959, 0, 690, 687, 0, 0, 0, 961, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 472, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 473, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 397, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 474, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 356, 357, 476, 0, 223, 0,
	220, 0, 475, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 477, 224, 225, 226, 478, 227,
	228, 229, 0, 231, 230, 0, 365, 479, 232, 480,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 481, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 482, 250, 483, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 484, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 485, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	0, 575, 326, 173, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 179, 180, 181, 333, 334, 335, 336, 182,
	337, 338, 0, 183, 339, 340, 184, 185, 0, 0,
	341, 342, 343, 0, 186, 344, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 169, 199, 345, 200, 346, 347, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 348, 207, 208, 209, 349, 350, 0,
	0, 0, 210, 211, 351, 352, 353, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 354, 0, 355, 0,
	215, 216, 217, 218, 219, 356, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 168, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 0, 166, 326, 173, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 172, 0, 332, 0,
	0, 0, 0, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 0, 183, 339, 340, 184, 185, 0,
	0, 341, 342, 343, 0, 186, 344, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 169, 199, 345, 200, 346, 347, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	0, 0, 0, 210, 211, 351, 352, 353, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 356, 357, 0, 0,
	223, 0, 220, 0, 0, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 365, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 0, 250, 0, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 168, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 690, 687, 326, 0, 0, 961, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 172, 0, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 472, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 473, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 397, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 474, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 356, 357, 476, 0, 223, 0,
	220, 0, 475, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 477, 224, 225, 226, 478, 227,
	228, 229, 0, 231, 230, 0, 365, 479, 232, 480,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 481, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 482, 250, 483, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 484, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 485, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	173, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 169,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	168, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 690, 687,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 172, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 472, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 473, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 397, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 474, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	356, 357, 476, 0, 223, 0, 220, 0, 475, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	477, 224, 225, 226, 478, 227, 228, 229, 0, 231,
	230, 0, 365, 479, 232, 480, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 481, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	482, 250, 483, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 484,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	485, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 173, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 397, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 356, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 690, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 332, 172,
	0, 0, 0, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 0, 183, 339, 340, 184, 185, 0,
	0, 341, 342, 343, 0, 186, 344, 0, 472, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	473, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 397, 199, 345, 200, 346, 347, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	0, 0, 0, 210, 211, 351, 352, 353, 0, 212,
	0, 213, 0, 0, 474, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 356, 357, 476, 0,
	223, 0, 220, 0, 475, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 477, 224, 225, 226,
	478, 227, 228, 229, 0, 231, 230, 0, 365, 479,
	232, 480, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 481, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 482, 250, 483, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 484, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 485, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 173, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 1415, 186, 344, 0, 0, 0, 187, 188,
	189, 0, 190, 1413, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 397, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 1612,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	1418, 0, 0, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 356, 357, 0, 0, 223, 1610,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 1417,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 1611, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	173, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	1415, 186, 344, 0, 0, 1410, 187, 188, 189, 0,
	190, 1413, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 397,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 1418, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 1409, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 1417, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 1416, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 0, 887,
	326, 173, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	179, 180, 181, 333, 334, 335, 336, 182, 337, 338,
	0, 183, 339, 340, 184, 185, 0, 0, 341, 342,
	343, 0, 186, 344, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	397, 199, 345, 200, 346, 347, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 348, 207, 208, 209, 349, 350, 0, 0, 0,
	210, 211, 351, 352, 353, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 354, 0, 355, 0, 215, 216,
	217, 218, 219, 356, 357, 0, 0, 223, 0, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 732, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 0,
	738, 326, 173, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 397, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 740, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 732, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	0, 734, 326, 173, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 179, 180, 181, 333, 334, 335, 336, 182,
	337, 338, 0, 183, 339, 340, 184, 185, 0, 0,
	341, 342, 343, 0, 186, 344, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 397, 199, 345, 200, 346, 347, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 348, 207, 208, 209, 349, 350, 0,
	0, 0, 210, 211, 351, 352, 353, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 354, 0, 355, 0,
	215, 216, 217, 218, 219, 736, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 732,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 0, 414, 326, 173, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 413, 178, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 0, 183, 339, 340, 184, 185, 0,
	0, 341, 342, 343, 0, 186, 344, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 397, 199, 345, 200, 346, 347, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	0, 0, 0, 210, 211, 351, 352, 353, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 356, 357, 0, 0,
	223, 0, 220, 0, 0, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 365, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 0, 250, 0, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	412, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 173, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 1398, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 397, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 356, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	173, 2121, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 397,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 173, 2121,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 397, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	356, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 2118, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 173, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 397, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 356, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 732, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 0, 1341, 326, 173, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 0, 183, 339, 340,
	184, 185, 0, 0, 341, 342, 343, 0, 186, 344,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 397, 199, 345, 200,
	346, 347, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 0, 0, 0, 210, 211, 351, 352,
	353, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 356,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 0, 1339, 326, 173, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 397, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	356, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 173, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 176, 177, 1321, 178, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 397, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 356, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 0, 1205, 326, 173, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 0, 183, 339, 340,
	184, 185, 0, 0, 341, 342, 343, 0, 186, 344,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 397, 199, 345, 200,
	346, 347, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 0, 0, 0, 210, 211, 351, 352,
	353, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 1204,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 0, 608, 326, 173, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 936, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 397, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	356, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 610, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 605, 381, 382,
	0, 0, 312, 937, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 0, 905, 326, 173,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 179, 180,
	181, 333, 334, 335, 336, 182, 337, 338, 0, 183,
	339, 340, 184, 185, 0, 0, 341, 342, 343, 0,
	186, 344, 0, 0, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 0, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 197, 198, 397, 199,
	345, 200, 346, 347, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 348,
	207, 208, 209, 349, 350, 0, 0, 0, 210, 211,
	351, 352, 353, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 354, 0, 355, 0, 215, 216, 217, 218,
	219, 904, 357, 0, 0, 223, 0, 220, 0, 0,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 365, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 0, 250, 0, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 0, 902, 326,
	173, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 397,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 901, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 0, 898,
	326, 173, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	179, 180, 181, 333, 334, 335, 336, 182, 337, 338,
	0, 183, 339, 340, 184, 185, 0, 0, 341, 342,
	343, 0, 186, 344, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	397, 199, 345, 200, 346, 347, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 348, 207, 208, 209, 349, 350, 0, 0, 0,
	210, 211, 351, 352, 353, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 354, 0, 355, 0, 215, 216,
	217, 218, 219, 897, 357, 0, 0, 223, 0, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 0,
	895, 326, 173, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 397, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 894, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	0, 891, 326, 173, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 179, 180, 181, 333, 334, 335, 336, 182,
	337, 338, 0, 183, 339, 340, 184, 185, 0, 0,
	341, 342, 343, 0, 186, 344, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 397, 199, 345, 200, 346, 347, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 348, 207, 208, 209, 349, 350, 0,
	0, 0, 210, 211, 351, 352, 353, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 354, 0, 355, 0,
	215, 216, 217, 218, 219, 890, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 173, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 176, 177, 879,
	178, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	179, 180, 181, 333, 334, 335, 336, 182, 337, 338,
	0, 183, 339, 340, 184, 185, 0, 0, 341, 342,
	343, 0, 186, 344, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	397, 199, 345, 200, 346, 347, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 348, 207, 208, 209, 349, 350, 0, 0, 0,
	210, 211, 351, 352, 353, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 354, 0, 355, 0, 215, 216,
	217, 218, 219, 356, 357, 0, 0, 223, 0, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 0,
	877, 326, 173, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 397, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 876, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	0, 873, 326, 173, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 179, 180, 181, 333, 334, 335, 336, 182,
	337, 338, 0, 183, 339, 340, 184, 185, 0, 0,
	341, 342, 343, 0, 186, 344, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 397, 199, 345, 200, 346, 347, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 348, 207, 208, 209, 349, 350, 0,
	0, 0, 210, 211, 351, 352, 353, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 354, 0, 355, 0,
	215, 216, 217, 218, 219, 356, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 0, 871, 326, 173, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 0, 183, 339, 340, 184, 185, 0,
	0, 341, 342, 343, 0, 186, 344, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 397, 199, 345, 200, 346, 347, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	0, 0, 0, 210, 211, 351, 352, 353, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 356, 357, 0, 0,
	223, 0, 220, 0, 0, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 365, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 0, 250, 0, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 0, 867, 326, 173, 0, 0, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 179, 180, 181, 333, 334, 335,
	336, 182, 337, 338, 0, 183, 339, 340, 184, 185,
	0, 0, 341, 342, 343, 0, 186, 344, 0, 0,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 397, 199, 345, 200, 346, 347,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 348, 207, 208, 209, 349,
	350, 0, 0, 0, 210, 211, 351, 352, 353, 0,
	212, 0, 213, 0, 0, 0, 0, 214, 354, 0,
	355, 0, 215, 216, 217, 218, 219, 869, 357, 0,
	0, 223, 0, 220, 0, 0, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 365,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 0, 250, 0,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 0, 744, 326, 173, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 397, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 746, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 0, 742, 326, 173, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 0, 183, 339, 340,
	184, 185, 0, 0, 341, 342, 343, 0, 186, 344,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 397, 199, 345, 200,
	346, 347, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 0, 0, 0, 210, 211, 351, 352,
	353, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 356,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 0, 608, 326, 173, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 599,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 397, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	356, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 598, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 610, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 600, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 601, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 605, 381, 382,
	0, 0, 312, 603, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 0, 583, 326, 173,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 179, 180,
	181, 333, 334, 335, 336, 182, 337, 338, 0, 183,
	339, 340, 184, 185, 0, 0, 341, 342, 343, 0,
	186, 344, 0, 0, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 0, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 197, 198, 397, 199,
	345, 200, 346, 347, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 348,
	207, 208, 209, 349, 350, 0, 0, 0, 210, 211,
	351, 352, 353, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 354, 0, 355, 0, 215, 216, 217, 218,
	219, 356, 357, 0, 0, 223, 0, 220, 0, 0,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 365, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 0, 250, 0, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 374, 281, 0, 584, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 0, 581, 326,
	173, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 397,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 0, 573,
	326, 173, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	179, 180, 181, 333, 334, 335, 336, 182, 337, 338,
	0, 183, 339, 340, 184, 185, 0, 0, 341, 342,
	343, 0, 186, 344, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	397, 199, 345, 200, 346, 347, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 348, 207, 208, 209, 349, 350, 0, 0, 0,
	210, 211, 351, 352, 353, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 354, 0, 355, 0, 215, 216,
	217, 218, 219, 356, 357, 0, 0, 223, 0, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 0,
	437, 326, 173, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 397, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 356, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	173, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 397,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 173, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 397, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	1745, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 173, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 397, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 1743, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 173, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 0, 183, 339, 340, 184, 185, 0,
	0, 341, 342, 343, 0, 186, 344, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 397, 199, 345, 200, 346, 347, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	0, 0, 0, 210, 211, 351, 352, 353, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 1732, 357, 0, 0,
	223, 0, 220, 0, 0, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 365, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 0, 250, 0, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 173, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 397, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 356, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 584,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	173, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 1215, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 397,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 0, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 173, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 397, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	356, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 708, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 173, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 397, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 356, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 0, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 0, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 0, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 0, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 1090, 1091, 0, 1110,
	1111, 1112, 1120, 1121, 1122, 0, 0, 0, 0, 0,
	0, 0, 1113, 0, 0, 0, 0, 0, 0, 1093,
	0, 0, 1124, 0, 1090, 1091, 0, 1110, 1111, 1112,
	1120, 1121, 1122, 0, 0, 0, 0, 0, 0, 0,
	1113, 0, 0, 1092, 0, 0, 0, 1093, 0, 1107,
	1124, 0, 1090, 1091, 0, 1110, 1111, 1112, 1120, 1121,
	1122, 0, 0, 0, 0, 0, 0, 0, 1113, 0,
	0, 1092, 0, 0, 0, 1093, 0, 1107, 1124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1092,
	0, 0, 0, 0, 1098, 1107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1117, 1125, 0, 0, 0, 0,
	0, 0, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1117, 1125, 0, 0, 0, 1115, 0, 0,
	1098, 0, 0, 1108, 0, 0, 0, 0, 0, 0,
	1123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1117, 1125, 0, 0, 0, 1115, 0, 0, 1114, 0,
	0, 1108, 0, 0, 0, 0, 0, 0, 1123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1115, 0, 0, 1114, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1109, 0, 0, 0,
	0, 0, 0, 0, 1114, 0, 0, 0, 0, 0,
	0, 0, 1118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1109, 0, 1823, 1824, 0, 1841,
	1842, 1843, 0, 0, 0, 0, 0, 0, 0, 0,
	1118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1090, 1091, 1109, 1110, 1111, 1112, 1120, 1121, 1122, 0,
	0, 0, 0, 0, 0, 0, 1113, 0, 1118, 0,
	0, 0, 0, 1093, 0, 0, 1124, 0, 0, 1838,
	1116, 0, 0, 1104, 1105, 1106, 1119, 0, 1103, 1101,
	1102, 1094, 1095, 1096, 1097, 1099, 1100, 1092, 0, 0,
	0, 0, 0, 1107, 0, 1863, 0, 0, 1116, 0,
	0, 1104, 1105, 1106, 1119, 0, 1103, 1101, 1102, 1094,
	1095, 1096, 1097, 1099, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 1815, 1829, 0, 1116, 0, 0, 1104,
	1105, 1106, 1119, 0, 1103, 1101, 1102, 1094, 1095, 1096,
	1097, 1099, 1100, 0, 0, 1845, 0, 2379, 1098, 1090,
	1091, 0, 1110, 1111, 1112, 1120, 1121, 1122, 0, 0,
	0, 0, 1844, 0, 0, 1113, 0, 0, 1117, 1125,
	0, 0, 1093, 0, 0, 1124, 0, 0, 0, 0,
	0, 0, 0, 1839, 0, 0, 1123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1092, 0, 0, 0,
	0, 1115, 1107, 0, 0, 0, 0, 1108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1114, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1840, 1098, 1090, 1091,
	0, 1110, 1111, 1112, 1120, 1121, 1122, 0, 0, 0,
	0, 0, 0, 0, 1113, 0, 0, 1117, 1125, 0,
	1109, 1093, 0, 0, 1124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1123, 1118, 0, 0, 0,
	0, 0, 0, 0, 0, 1092, 0, 0, 0, 0,
	1115, 1107, 0, 0, 0, 0, 1108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1114, 0, 1835, 1836, 1837, 0, 0, 1834, 1832,
	1833, 1825, 1826, 1827, 1828, 1830, 1831, 0, 0, 0,
	0, 0, 0, 0, 1116, 0, 1098, 1104, 1105, 1106,
	1119, 0, 1103, 1101, 1102, 1094, 1095, 1096, 1097, 1099,
	1100, 0, 0, 0, 0, 2360, 1117, 1125, 0, 1109,
	0, 1090, 1091, 0, 1110, 1111, 1112, 1120, 1121, 1122,
	0, 0, 0, 0, 1123, 1118, 0, 1113, 0, 0,
	0, 0, 0, 0, 1093, 0, 0, 1124, 0, 1115,
	0, 0, 0, 0, 0, 1108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1092, 0,
	0, 0, 0, 0, 1107, 0, 0, 0, 0, 0,
	1114, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1116, 0, 0, 1104, 1105, 1106, 1119,
	0, 1103, 1101, 1102, 1094, 1095, 1096, 1097, 1099, 1100,
	0, 0, 0, 0, 2306, 0, 0, 0, 1109, 1098,
	1090, 1091, 0, 1110, 1111, 1112, 1120, 1121, 1122, 0,
	0, 0, 0, 0, 1118, 0, 1113, 0, 0, 1117,
	1125, 0, 0, 1093, 0, 0, 1124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1092, 0, 0,
	0, 0, 1115, 1107, 0, 0, 0, 0, 1108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1116, 1114, 0, 1104, 1105, 1106, 1119, 0,
	1103, 1101, 1102, 1094, 1095, 1096, 1097, 1099, 1100, 0,
	0, 0, 0, 2301, 0, 0, 0, 0, 1098, 1090,
	1091, 0, 1110, 1111, 1112, 1120, 1121, 1122, 0, 0,
	0, 0, 0, 0, 0, 1113, 0, 0, 1117, 1125,
	0, 1109, 1093, 0, 0, 1124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1123, 1118, 0, 0,
	0, 0, 0, 0, 0, 0, 1092, 0, 0, 0,
	0, 1115, 1107, 0, 0, 0, 0, 1108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1114, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1116, 0, 1098, 1104, 1105,
	1106, 1119, 0, 1103, 1101, 1102, 1094, 1095, 1096, 1097,
	1099, 1100, 0, 0, 0, 0, 2297, 1117, 1125, 0,
	1109, 0, 1090, 1091, 0, 1110, 1111, 1112, 1120, 1121,
	1122, 0, 0, 0, 0, 1123, 1118, 0, 1113, 0,
	0, 0, 0, 0, 0, 1093, 0, 0, 1124, 0,
	1115, 0, 0, 0, 0, 0, 1108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1092,
	0, 0, 0, 0, 0, 1107, 0, 0, 0, 0,
	0, 1114, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1116, 0, 0, 1104, 1105, 1106,
	1119, 0, 1103, 1101, 1102, 1094, 1095, 1096, 1097, 1099,
	1100, 0, 0, 0, 0, 2277, 0, 0, 0, 1109,
	1098, 1090, 1091, 0, 1110, 1111, 1112, 1120, 1121, 1122,
	0, 0, 0, 0, 0, 1118, 0, 1113, 0, 0,
	1117, 1125, 0, 0, 1093, 0, 0, 1124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1092, 0,
	0, 0, 0, 1115, 1107, 0, 0, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1116, 1114, 0, 1104, 1105, 1106, 1119,
	0, 1103, 1101, 1102, 1094, 1095, 1096, 1097, 1099, 1100,
	0, 0, 0, 0, 2220, 0, 0, 0, 0, 1098,
	1090, 1091, 0, 1110, 1111, 1112, 1120, 1121, 1122, 0,
	0, 0, 0, 0, 0, 0, 1113, 0, 0, 1117,
	1125, 0, 1109, 1093, 0, 0, 1124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1123, 1118, 0,
	0, 0, 0, 0, 0, 0, 0, 1092, 0, 0,
	0, 0, 1115, 1107, 0, 0, 0, 0, 1108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1114, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1116, 0, 1098, 1104,
	1105, 1106, 1119, 0, 1103, 1101, 1102, 1094, 1095, 1096,
	1097, 1099, 1100, 0, 0, 0, 0, 2219, 1117, 1125,
	0, 1109, 0, 1090, 1091, 0, 1110, 1111, 1112, 1120,
	1121, 1122, 0, 0, 0, 0, 1123, 1118, 0, 1113,
	0, 0, 0, 0, 0, 0, 1093, 0, 0, 1124,
	0, 1115, 0, 0, 0, 0, 0, 1108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1092, 0, 0, 0, 0, 0, 1107, 0, 0, 0,
	0, 0, 1114, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1116, 0, 0, 1104, 1105,
	1106, 1119, 0, 1103, 1101, 1102, 1094, 1095, 1096, 1097,
	1099, 1100, 0, 0, 0, 0, 2159, 0, 0, 0,
	1109, 1098, 1090, 1091, 0, 1110, 1111, 1112, 1120, 1121,
	1122, 0, 0, 0, 0, 0, 1118, 0, 1113, 0,
	0, 1117, 1125, 0, 0, 1093, 0, 0, 1124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1092,
	0, 0, 0, 0, 1115, 1107, 0, 0, 0, 0,
	1108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1116, 1114, 0, 1104, 1105, 1106,
	1119, 0, 1103, 1101, 1102, 1094, 1095, 1096, 1097, 1099,
	1100, 0, 0, 0, 0, 2124, 0, 0, 0, 0,
	1098, 1090, 1091, 0, 1110, 1111, 1112, 1120, 1121, 1122,
	0, 0, 0, 0, 0, 0, 0, 1113, 0, 0,
	1117, 1125, 0, 1109, 1093, 0, 0, 1124, 1823, 1824,
	0, 1841, 1842, 1843, 0, 0, 0, 0, 1123, 1118,
	0, 0, 0, 0, 0, 0, 0, 0, 1092, 0,
	0, 0, 0, 1115, 1107, 0, 0, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1838, 0, 0, 1114, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1116, 0, 1098,
	1104, 1105, 1106, 1119, 0, 1103, 1101, 1102, 1094, 1095,
	1096, 1097, 1099, 1100, 0, 0, 0, 0, 2037, 1117,
	1125, 0, 1109, 0, 1090, 1091, 1829, 1110, 1111, 1112,
	1120, 1121, 1122, 0, 0, 0, 0, 1123, 1118, 0,
	1113, 0, 0, 0, 0, 0, 0, 1093, 0, 0,
	1124, 0, 1115, 0, 0, 0, 0, 0, 1108, 0,
	0, 0, 0, 0, 1844, 0, 0, 0, 0, 0,
	0, 1092, 0, 0, 0, 0, 0, 1107, 0, 0,
	0, 0, 0, 1114, 0, 1839, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1116, 0, 0, 1104,
	1105, 1106, 1119, 0, 1103, 1101, 1102, 1094, 1095, 1096,
	1097, 1099, 1100, 0, 0, 0, 0, 2013, 0, 0,
	0, 1109, 1098, 1090, 1091, 0, 1110, 1111, 1112, 1120,
	1121, 1122, 0, 0, 0, 0, 0, 1118, 0, 1113,
	0, 0, 1117, 1125, 0, 0, 1093, 0, 1840, 1124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1092, 0, 0, 0, 0, 1115, 1107, 0, 0, 0,
	0, 1108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1116, 1114, 0, 1104, 1105,
	1106, 1119, 0, 1103, 1101, 1102, 1094, 1095, 1096, 1097,
	1099, 1100, 0, 0, 0, 0, 1510, 0, 0, 0,
	0, 1098, 2453, 0, 0, 1835, 1836, 1837, 0, 0,
	1834, 1832, 1833, 1825, 1826, 1827, 1828, 1830, 1831, 0,
	0, 1117, 1125, 0, 1109, 0, 1090, 1091, 0, 1110,
	1111, 1112, 1120, 1121, 1122, 0, 0, 0, 0, 1123,
	1118, 0, 1113, 0, 0, 0, 0, 0, 0, 1093,
	0, 0, 1124, 0, 1115, 0, 0, 0, 0, 0,
	1108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1092, 0, 0, 0, 0, 0, 1107,
	0, 0, 0, 0, 0, 1114, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2452, 0, 0, 0, 0, 0, 0, 1116, 0,
	0, 1104, 1105, 1106, 1119, 0, 1103, 1101, 1102, 1094,
	1095, 1096, 1097, 1099, 1100, 0, 0, 1785, 0, 0,
	0, 0, 0, 1109, 1098, 0, 1855, 0, 0, 1854,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1118,
	0, 0, 0, 0, 1117, 1125, 0, 1090, 1091, 0,
	1110, 1111, 1112, 1120, 1121, 1122, 0, 0, 0, 0,
	0, 0, 1123, 1113, 0, 0, 0, 0, 1689, 0,
	1093, 0, 0, 1124, 0, 0, 0, 1115, 0, 0,
	0, 0, 0, 1108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1092, 0, 0, 0, 0, 0,
	1107, 0, 0, 0, 0, 0, 0, 1116, 1114, 0,
	1104, 1105, 1106, 1119, 0, 1103, 1101, 1102, 1094, 1095,
	1096, 1097, 1099, 1100, 0, 0, 0, 0, 0, 0,
	1690, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1098, 1109, 1374, 0, 0,
	0, 0, 0, 1090, 1091, 0, 1110, 1111, 1112, 1120,
	1121, 1122, 1118, 0, 0, 1117, 1125, 0, 0, 1113,
	0, 0, 0, 1373, 0, 0, 1093, 0, 0, 1124,
	0, 0, 0, 1123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1115, 0,
	1092, 0, 0, 0, 1108, 0, 1107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1114,
	1116, 0, 0, 1104, 1105, 1106, 1119, 0, 1103, 1101,
	1102, 1094, 1095, 1096, 1097, 1099, 1100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1098, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1109, 0, 0,
	0, 1117, 1125, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1118, 0, 0, 0, 0, 0, 1123,
	0, 0, 1090, 1091, 0, 1110, 1111, 1112, 1120, 1121,
	1122, 0, 0, 0, 1115, 0, 0, 0, 1113, 0,
	1108, 0, 0, 0, 0, 1093, 0, 0, 1124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1114, 0, 0, 0, 1092,
	0, 0, 0, 0, 0, 1107, 0, 0, 0, 0,
	0, 1116, 0, 0, 1104, 1105, 1106, 1119, 0, 1103,
	1101, 1102, 1094, 1095, 1096, 1097, 1099, 1100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1118,
	1098, 1090, 1091, 0, 1110, 1111, 1112, 1120, 1121, 1122,
	0, 0, 0, 0, 0, 0, 0, 1113, 0, 0,
	1117, 1125, 0, 0, 1093, 0, 0, 1124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1092, 0,
	0, 0, 0, 1115, 1107, 0, 0, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 1116, 0, 0,
	1104, 1105, 1106, 1119, 0, 1103, 1101, 1102, 1094, 1095,
	1096, 1097, 1099, 1100, 1114, 669, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1098,
	1090, 1091, 0, 1110, 1111, 1112, 1120, 1121, 1122, 0,
	0, 0, 0, 0, 0, 0, 1113, 0, 0, 1117,
	1125, 0, 1109, 1093, 0, 0, 1124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1123, 1118, 0,
	0, 0, 0, 0, 0, 0, 0, 1092, 0, 0,
	0, 0, 1115, 1107, 0, 0, 0, 0, 1108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1114, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1116, 0, 1098, 1104,
	1105, 1106, 1119, 1861, 1103, 1101, 1102, 1094, 1095, 1096,
	1097, 1099, 1100, 0, 0, 0, 0, 0, 1117, 1125,
	0, 1109, 0, 1090, 1091, 0, 1110, 1111, 1112, 1120,
	1121, 1122, 0, 0, 0, 0, 1123, 1118, 0, 1113,
	0, 0, 0, 1856, 0, 0, 1093, 0, 0, 1124,
	0, 1115, 0, 0, 0, 0, 0, 1108, 0, 0,
	0, 0, 0, 2017, 0, 0, 0, 0, 0, 0,
	1092, 0, 0, 0, 0, 0, 1107, 0, 0, 0,
	0, 0, 1114, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1116, 0, 0, 1104, 1105,
	1106, 1119, 0, 1103, 1101, 1102, 1094, 1095, 1096, 1097,
	1099, 1100, 0, 0, 0, 0, 0, 0, 0, 0,
	1109, 1098, 1090, 1091, 0, 1110, 1111, 1112, 1120, 1121,
	1122, 0, 0, 0, 0, 0, 1118, 0, 1113, 0,
	0, 1117, 1125, 0, 0, 1093, 0, 0, 1124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1092,
	0, 0, 0, 0, 1115, 1107, 0, 0, 0, 0,
	1108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1116, 1114, 0, 1104, 1105, 1106,
	1119, 0, 1103, 1101, 1102, 1094, 1095, 1096, 1097, 1099,
	1100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1117, 1125, 0, 1109, 0, 1090, 1091, 0, 1110, 1111,
	1112, 1120, 1121, 1122, 0, 0, 0, 0, 1123, 1118,
	0, 1113, 0, 0, 0, 1814, 0, 0, 1093, 0,
	0, 1124, 0, 1115, 0, 0, 0, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1092, 0, 0, 0, 0, 0, 1107, 0,
	0, 0, 0, 0, 1114, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1821, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1116, 0, 0,
	1104, 1105, 1106, 1119, 0, 1103, 1101, 1102, 1094, 1095,
	1096, 1097, 1099, 1100, 0, 0, 0, 0, 0, 0,
	0, 0, 1109, 1098, 1090, 1091, 0, 1110, 1111, 1112,
	1120, 1121, 1122, 0, 0, 0, 0, 0, 1118, 0,
	1113, 0, 0, 1117, 1125, 0, 0, 1093, 0, 0,
	1124, 0, 1090, 1091, 0, 1110, 1111, 1112, 1120, 1121,
	1122, 1123, 0, 0, 0, 0, 0, 0, 1113, 0,
	0, 1092, 0, 0, 0, 1093, 1115, 1107, 1124, 0,
	0, 0, 1108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1092,
	0, 0, 0, 0, 0, 1107, 1116, 1114, 0, 1104,
	1105, 1106, 1119, 0, 1103, 1101, 1102, 1094, 1095, 1096,
	1097, 1099, 1100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1117, 1125, 0, 1109, 0, 0, 0, 0,
	1098, 1090, 1091, 0, 1110, 1111, 1112, 1120, 1121, 1122,
	1123, 1118, 0, 0, 0, 0, 0, 0, 0, 0,
	1117, 1125, 0, 0, 1093, 1115, 0, 1124, 0, 0,
	0, 1108, 0, 0, 0, 0, 0, 0, 1123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1092, 0,
	0, 0, 0, 1115, 1107, 0, 1114, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1116,
	0, 0, 1104, 1105, 1106, 1119, 0, 1103, 1101, 1102,
	1094, 1095, 1096, 1097, 1099, 1100, 0, 0, 0, 0,
	0, 0, 0, 0, 1109, 0, 0, 0, 0, 1098,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1118, 0, 0, 0, 0, 0, 0, 0, 0, 1117,
	1125, 0, 1109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1123, 1118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1115, 0, 0, 0, 0, 0, 1108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1116, 0,
	0, 1104, 1105, 1106, 1119, 0, 1103, 1101, 1102, 1094,
	1095, 1096, 1097, 1099, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1116, 0, 0, 1104,
	1105, 1106, 1119, 0, 1103, 1101, 1102, 1094, 1095, 1096,
	1097, 1099, 1100, 0, 1263, 1253, 1282, 1245, 1273, 1272,
	0, 1109, 1247, 1246, 0, 0, 0, 0, 1284, 1283,
	0, 0, 0, 0, 0, 0, 0, 1118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1278, 0, 1270, 1269, 0, 0, 0, 0,
	0, 0, 0, 0, 1268, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1267, 1265, 1266, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1116, 0, 0, 1104, 1105,
	1106, 1119, 0, 1103, 1101, 1102, 1094, 1095, 1096, 1097,
	1099, 1100, 0, 1256, 1255, 1257, 1258, 1259, 1260, 1261,
	0, 1281, 0, 0, 0, 0, 0, 0, 0, 1263,
	1253, 1282, 1245, 1273, 1272, 0, 0, 1247, 1246, 0,
	0, 0, 0, 1284, 1283, 0, 0, 0, 0, 1249,
	0, 0, 629, 0, 589, 0, 0, 0, 0, 0,
	0, 1271, 0, 0, 0, 1254, 0, 0, 0, 0,
	0, 0, 634, 0, 0, 0, 0, 1278, 0, 1270,
	1269, 0, 0, 0, 632, 0, 0, 0, 0, 1268,
	0, 0, 0, 0, 1264, 0, 0, 0, 1445, 1443,
	1444, 1447, 1446, 0, 0, 633, 0, 1267, 1265, 1266,
	635, 0, 0, 0, 0, 641, 642, 0, 0, 651,
	0, 0, 0, 0, 1250, 0, 0, 0, 0, 0,
	0, 0, 0, 591, 636, 1262, 1251, 0, 1256, 1255,
	1257, 1258, 1259, 1260, 1261, 1286, 1281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 654, 0, 1248, 0,
	0, 1279, 1280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1249, 0, 637, 0, 0, 0,
	0, 0, 0, 1252, 0, 0, 1271, 0, 1285, 0,
	1254, 638, 639, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 645,
	0, 0, 640, 647, 0, 0, 0, 0, 0, 1264,
	0, 0, 0, 644, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1250,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1262, 1251, 0, 0, 0, 0, 0, 0, 0, 0,
	1286, 0, 0, 643, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1248, 0, 0, 1279, 1280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1252, 631,
	648, 593, 0, 1285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 649, 0, 0, 0, 653,
	0, 0, 0, 594, 0, 0, 0, 0, 646, 650,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 652,
}
var sqlPact = [...]int{

	4360, -1000, 27, -1000, -1000, 227, -1000, -1000, -1000, 226,
	225, 221, -1000, 220, 219, 216, -1000, 214, 207, 204,
	201, 198, 196, 195, 194, -1000, 192, 191, -1000, -1000,
	-1000, 189, 184, 183, 182, 178, 175, 172, 955, 23650,
	170, 164, 162, 1146, 35806, 160, 159, 157, 156, 927,
	155, 139, 27160, 964, 1478, 131, 128, 125, 123, 122,
	970, 35488, 461, 1292, 5707, 1098, 1604, 35167, 23329, 1594,
	1160, 34846, -1000, -1000, 34525, 1563, 120, 117, 116, -1000,
	-1000, 34204, 115, 113, 112, 109, 94, 92, 91, 87,
	83, 82, 81, 73, 68, 67, -1000, 66, 61, 60,
	41920, 55, 52, 50, 1093, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 171, -1000, 1016, 400,
	18793, 1052, 1035, 1007, 977, 990, 37714, 35806, 43, -96,
	41, -1000, 1858, 696, 20735, 4360, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 26839, 26518, 33883, 33562, 776, -1000, 23, 24922, 35806,
	-1000, 133, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 14784, 14427, 14070, 591, 133, -1000, -1000, -1000,
	-1000, -1000, 33241, -1000, 32920, 32599, 1459, 32278, -1000, -1000,
	-1000, -1000, 31957, -1000, -1000, 1792, 1615, 1610, 26197, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 31639, 31318, 30997, 30676, 30355, 506, -1000, -1000, -1000,
	17469, -1000, -1000, -1000, -1000, 36, -1000, -1000, -1000, -1000,
	35, 33, 31, 29, 1165, -1000, -1000, 24, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 35806, -1000,
	15813, -1000, 505, -1000, 1556, -1000, 15813, -1000, 1164, -1000,
	-1000, -1000, -1000, -1000, 35806, -1000, -1000, 1757, -1000, -1000,
	-1000, -1000, -1000, -1000, 915, -1000, -1000, -1000, 2047, 1140,
	504, 30034, -1000, 1488, -1000, 595, 771, -1000, -1000, -1000,
	18461, 237, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1396, 23008, 1262, 1856, 1741, 2046, 1346, 1739, 1731,
	1726, 1698, 1678, 2044, 1001, 2043, 1724, 1020, 2041, 1651,
	1277, 664, 2040, 1553, 1549, -1000, -1000, -1000, 28432, -1000,
	-1000, 1016, -1000, -1000, -1000, 1324, 1806, 1806, 1806, 1880,
	344, 324, -1000, 171, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2009, -1000, -1000, -1000, -1000, 2026,
	-1000, -1000, -1000, -1000, 1372, -1000, -1000, 1372, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 774, 37078, 22, 35806, -1000,
	503, 22, -1000, -1000, 499, -1000, 10528, 10528, -1000, -1000,
	-1000, -1000, -1000, 8813, 1683, -1000, 352, -176, 365, 569,
	-1000, 19766, 22346, -1000, -1000, 973, 1754, 644, -1000, 1021,
	1751, 545, -1000, 995, -1000, 1123, 1747, -154, 23968, 24922,
	23, -31, -1000, -1000, -1000, 5377, 41394, -1000, -1000, 15813,
	15813, 15813, 15813, 15813, 1076, 536, -1000, 497, 496, 7083,
	-1000, -1000, 2025, -1000, -1000, -1000, 359, -1000, -1000, 15813,
	133, -1000, -1000, -1000, -1000, 495, 2036, -1000, 703, -1000,
	-1000, -1000, 592, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1575, 494, 493, 492, -1000, -1000, -1000, -1000,
	491, 489, 487, 485, 484, 483, 480, 479, 476, 475,
	473, 472, 471, 468, 467, 1058, -1000, 622, -1000, -1000,
	622, 622, -1000, 453, 453, 457, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 453, -1000, -1000, -1000, 585, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 466, 41394, -1000, 41394,
	-1000, 844, 21379, 133, -1000, -1000, -1000, -1000, 465, 1322,
	598, -1000, 361, -1000, 29713, 598, 1316, -1000, -1000, -1000,
	28432, -1000, 35806, -1000, 35806, -1000, 867, -1000, 37396, 135,
	1746, -1000, -1000, 135, 1744, -1000, 119, 1742, -1000, -1000,
	-1000, 1738, -1000, -31, 1737, -1000, -1000, 15813, 18, -1000,
	-1000, -1000, 696, -1000, -1000, -1000, -1000, -1000, 24286, 1403,
	593, 41394, 1937, 41862, 23968, 41394, 24286, -1000, -1000, -1000,
	-1000, -1000, 35806, -1000, 15813, -1000, 1930, 1309, 19, -1000,
	-1000, -1000, -1000, -1000, 1364, 1380, 718, 1012, 18131, 17801,
	1799, -1000, -1000, -1000, 231, 5707, -1000, -1000, -1000, -1000,
	-1000, -1000, 29392, -1000, -1000, -1000, 1130, 35806, -1000, -1000,
	1571, -1000, 24286, 35806, -1000, 35806, -1000, 35806, -1000, 35806,
	-1000, 35806, -1000, -1000, -1000, -1000, -1000, 203, -1000, 1570,
	-1000, -1000, 35806, -1000, 1357, -1000, -1000, -1000, 29074, 28753,
	-1000, 957, 813, 143, -1000, -1000, 1324, -1000, 1171, 1425,
	13713, 1402, 15813, 171, -1000, -1000, 171, 171, 8113, -1000,
	-1000, -1000, -1000, -1000, -1000, 19, -1000, 37078, -1000, 35806,
	22, 1921, 35806, -1000, 86, -1000, 40543, -1000, 86, 15,
	-1000, 41394, -1000, 1424, 1422, 21057, 1344, 1084, 1084, 1084,
	-1000, 464, 531, 569, 4702, 13370, -1000, 27478, 1105, 251,
	328, 19444, 1683, -1000, 35806, -34, 1053, -1000, 25876, 1830,
	1822, 1833, 28432, 1899, 382, 1547, 768, 28432, 765, 1896,
	382, 1544, 763, 35806, 5707, 567, -1000, 35806, -1000, -1000,
	41737, 41862, 5707, 790, 15813, 15813, 15813, 15813, 15813, 15813,
	15813, 15813, 15813, 15813, 15813, 15813, 15813, 15813, 15813, 15813,
	15813, 15813, 15813, 15813, 15813, 15813, 1530, 15813, 752, 15813,
	15813, 15813, 15813, 1397, 1096, 444, 1114, -1000, 2004, 2004,
	2004, 41531, 41531, 438, 536, -1000, 15813, -1000, 382, 13013,
	324, 39921, 20, 6740, -1000, -1000, -1000, 8456, 619, 41394,
	133, 6039, -1000, 2023, 852, 1584, 1498, 463, 588, 587,
	586, 15813, 15813, 12670, 12313, 11956, 16156, 11599, 15813, 7426,
	15813, 15813, 15813, 15813, 11242, 10885, -1000, 459, -1000, -1000,
	-1000, -1000, 2022, -1000, -1000, 2021, -1000, 786, 781, 2018,
	-1000, 1542, 10, -1000, -1000, 25558, 1919, 1735, -1000, 1067,
	-1000, 1918, 35806, 1157, 1313, -1000, -1000, 805, 1734, 609,
	307, 1913, 307, 21702, -1000, 35806, -1000, 35806, -1000, -1000,
	35806, -1000, 35806, -1000, 35806, 35806, 35806, 35806, 9, 41394,
	474, 25240, 751, -1000, 645, 25558, 132, 7, -1000, 853,
	-1000, -1000, -1000, -1000, 313, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 457, 1058, 453,
	453, 453, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 585,
	-1000, -1000, 622, 622, 622, -1000, -1000, -23, -1000, 1536,
	-1000, 597, -3, 666, 19, -1000, 1372, 1182, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2035, 13, -1000, -1000, 13, -1000, -1000, 5707, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 35806, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 136, -1000, -1000, -1000, -1000,
	-1000, -1000, 35806, 35806, 35806, -1000, 28432, -1000, -1000, -1000,
	-1000, 41394, -1000, 424, -1000, -1000, 41394, 903, 1440, -1000,
	1440, 12, -1000, 40427, 1414, 35806, -1000, -1000, 452, -4,
	609, 10528, 20412, 5707, -1000, 609, 8813, -1000, 21057, 21057,
	1439, 1421, 21057, -1000, -1000, -1000, -1000, 27478, 521, 569,
	27478, -1000, 2015, 1393, -5, -1000, -1000, -1000, 35806, 451,
	-1000, 569, 323, 1006, 35806, 35806, 35806, -1000, -1000, 1304,
	36760, 1298, 41862, 35806, -1000, 450, 447, 1408, 1398, 35806,
	35806, 36442, 36124, 35806, 954, 382, -1000, 446, 35806, 976,
	35806, 382, -1000, 445, 35806, 924, -1000, 1475, 1174, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	590, 948, 948, 821, 821, 821, 821, 1893, 2587, 2761,
	2377, 304, 304, 304, 523, 694, 694, 304, 304, 304,
	41531, 41422, 347, 15813, 15813, 740, 1085, 444, 347, 15813,
	347, 347, 347, 347, -1000, 1013, -1000, -1000, -1000, -1000,
	1533, 443, 16156, 16156, -1000, -1000, -1000, 7083, 16486, -1000,
	-1000, -1000, -1000, 441, 15813, -1000, 40054, -203, -6, -1000,
	-1000, 15813, -56, -57, -1000, -1000, 854, -1000, 15813, -1000,
	-30, 15813, 15813, 15813, 321, -1000, 320, -1000, 739, -1000,
	722, 715, 711, -1000, 439, 1080, 437, 433, 15813, -1000,
	-1000, -1000, -1000, -1000, -1000, 41285, 38384, 319, -1000, 1531,
	-145, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 318, -1000,
	316, -1000, 41152, -145, 315, 38626, -1000, 16156, 16156, 16156,
	7083, 432, 314, -1000, 40296, -145, 41043, 10185, 10185, 10185,
	308, 40910, 15813, -145, 38356, 4203, 4023, -11, -12, -1000,
	-13, -1000, 1999, -14, 305, 589, 572, 303, 840, 1525,
	35806, 302, -28, -24, 41862, -1000, -1000, -1000, -1000, -1000,
	35806, 490, 35806, 382, 35806, 2034, 382, 35806, 1721, 1619,
	556, 35806, 914, 15813, 1045, -1000, 20089, 631, 35806, 914,
	78, -1000, -1000, -1000, 563, 35806, -1000, -1000, 135, 135,
	-1000, 119, -1000, -31, -1000, 15813, -1000, -1000, 35806, 23968,
	-29, -1000, -1000, 41862, -1000, 535, 778, -1000, 1995, 596,
	23968, 35806, -1000, 1401, -1000, -1000, 928, -1000, 1044, -1000,
	19123, -1000, -55, -1000, -1000, -1000, -1000, -1000, 567, -1000,
	903, -1000, 15813, 1993, -1000, -1000, -1000, 8113, -1000, -1000,
	-1000, 35806, -170, 132, -1000, 1497, -1000, -54, -1000, 1683,
	-1000, 1497, -1000, -1000, 1439, -1000, 429, 15813, 21057, -1000,
	527, -1000, -36, -1000, 27478, -1000, 526, -201, -1000, 561,
	-1000, 569, 428, 35806, 27478, -1000, -1000, -1000, 710, 702,
	1702, -1000, 1255, -1000, 637, -1000, 959, 15813, 17146, 426,
	425, 1037, -1000, 1700, 1215, 1640, 1215, -1000, -34, 1040,
	-1000, 15813, -1000, 701, -1000, -1000, 15813, -1000, 699, 596,
	1521, 819, 15813, 347, 347, 15813, 16156, 16156, -1000, 347,
	-1000, -1000, -1000, -1000, -1000, 1519, 423, 15813, 41862, 4161,
	3772, -71, -1000, 9842, -43, -1000, 15813, -1000, 39812, -1000,
	-1000, 522, 1654, -1000, 15813, 40801, 301, 9499, -1000, 40692,
	-35, -35, -1000, 2031, 1337, 1310, 984, 879, 1980, -1000,
	22024, 611, 1107, 39703, 41737, 41862, -1000, 15813, -1000, -1000,
	1514, 15813, -1000, 41737, 41862, 16156, 16156, 16156, 16156, 16156,
	16156, 16156, 16156, 16156, 16156, 16156, 16156, 16156, 16156, 16156,
	16156, 16156, 16156, 16156, 1335, 16156, 1970, 1970, 1970, -48,
	9156, -1000, 1561, 1514, 15813, 15813, 41862, 288, 285, 284,
	-1000, 15813, -145, 15813, 15813, 15813, -1000, -1000, -1000, 279,
	-1000, 1978, -1000, -1000, -1000, -1000, -1000, 839, -1000, 1463,
	-1000, 25558, 421, 35806, 420, -1000, 417, -1000, -1000, 407,
	35806, 1376, 556, 24604, -1000, 598, -1000, 7769, 41394, -1000,
	914, 1835, -79, -1000, -1000, -1000, 609, 21702, 21057, 8813,
	-82, -1000, -1000, -1000, 41394, -55, 1802, 1802, -1000, 1975,
	-1000, 524, 277, -1000, 28114, -1000, -55, -1000, -1000, -1000,
	-1000, -1000, 35806, -1000, 1112, 39570, -1000, 1838, 5707, 275,
	1484, 1876, -1000, 21057, 1484, -1000, 35806, 41394, -1000, -176,
	-1000, 1971, -1000, -1000, 1393, -1000, 5044, 27478, 35806, -84,
	-1000, 35806, 35806, 35806, 1618, -1000, 1997, -1000, 39461, -85,
	-1000, 332, 1853, 15813, -1000, -1000, 406, 17146, 35806, -1000,
	1349, 1360, 660, 35806, -1000, 35806, -1000, 35806, 35806, 35806,
	-95, 35806, -97, 35806, -1000, 23968, 721, 1926, 347, 3464,
	2801, 15813, 41862, 276, -100, 15813, 15813, -1000, -103, -1000,
	15813, 511, 41394, -1000, -1000, -1000, 41394, 15813, 2029, 15813,
	274, 273, 257, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 254, -1000, -1000, 38032, 15813, 253, -1000, 249, 248,
	41394, 1561, 41394, -1000, -1000, 654, 654, 880, 880, 880,
	880, 1970, 1115, 1443, 564, 1487, 1487, 1487, 2387, 418,
	418, 1487, 1487, 1487, 1508, 1338, 403, 39948, 15813, -105,
	-1000, -1000, -1000, 41394, 41394, 246, -1000, -1000, -1000, -145,
	161, 39352, 39219, -1000, 244, -1000, -1000, 1465, -1000, 17146,
	399, 35806, 25558, 1911, 17146, 1155, 1388, 556, 24604, -1000,
	805, -64, -1000, -1000, 401, 382, 914, -1000, -74, -1000,
	560, 1786, -1000, 1784, 508, -1000, -1000, -76, 394, -1000,
	559, 558, -1000, -1000, -1000, -1000, 1838, -1000, 603, 15813,
	15813, 1683, 603, -108, 569, -1000, -1000, -1000, 1969, -1000,
	-110, -1000, -1000, -1000, -1000, 35806, -1000, 35806, -1000, 5707,
	35806, 1496, 1213, -1000, -1000, 1394, 393, 16156, 35806, -1000,
	1059, 17146, 1838, 133, 5707, 1838, 39110, 6039, -111, -113,
	1206, -1000, 1181, 15813, -1000, 41862, 1215, 1215, -1000, 693,
	675, 674, -1000, 673, -1000, -129, 22676, 15813, 15813, 276,
	-119, -1000, 347, 347, -1000, 39001, -1000, 41394, -1000, 40692,
	-1000, -1000, -1000, -1000, 1070, -1000, 38868, -1000, -1000, -1000,
	-1000, 16156, 1505, 392, 41862, 38759, -1000, -1000, 15813, -1000,
	-1000, -1000, 1061, -120, 17146, -122, 243, 382, -127, 35806,
	-1000, 556, 24604, -1000, 1619, 1691, 35806, 1825, -1000, -1000,
	386, 384, 383, -1000, 27796, 27796, 23968, 23968, -1000, -1000,
	35806, 41394, -145, -1000, -1000, 27478, 348, -1000, -1000, 1430,
	-1000, -1000, 35806, 1252, -1000, -1000, 15813, 39948, 380, 1463,
	377, -1000, -1000, -1000, -1000, -1000, -1000, 1853, -30, -1000,
	1029, -1000, -1000, 41394, 1850, -1000, -1000, 35806, 35806, 376,
	371, -1000, 370, 133, 347, 347, -1000, -1000, 241, 1107,
	1875, -1000, 2459, 16156, 41862, -128, -1000, 38650, 35806, 1059,
	-136, -1000, 1463, -1000, 1059, 368, 24604, -1000, 1376, 777,
	-138, 35806, -1000, -1000, 6383, 23968, 23968, -1000, -139, -1000,
	-1000, -137, -1000, 1904, -1000, -1000, -1000, -1000, 1601, 38412,
	1345, 35806, -1000, 35806, 1838, 240, 35806, 640, 5707, -1000,
	-1000, 15813, 15813, 15813, -1000, 909, 15813, 2459, -144, -1000,
	-1000, 367, 1463, 1059, -1000, 1463, 17146, -1000, 1388, 859,
	-1000, 609, -1000, -147, -152, -1000, 35806, 364, 1605, -1000,
	1117, 1129, 239, -155, -1000, -1000, 361, -1000, 15813, -1000,
	-157, -163, -35, 205, 15470, 15470, -145, -1000, 35806, -1000,
	1463, -1000, -166, -1000, 21702, -1000, 596, 596, -1000, -1000,
	35806, -1000, 1132, 1126, 891, -1000, -1000, -1000, -1000, -1000,
	1345, 41394, -1000, -1000, 121, -1000, -1000, -1000, 16816, 1194,
	907, 40163, -1000, -173, -1000, 1059, -160, -1000, -1000, -1000,
	-1000, 1769, -1000, 651, 1368, 1368, 1117, 2029, 1944, -1000,
	-1000, -1000, -1000, -1000, 1119, 1463, -1000, -1000, 1955, -1000,
	-1000, 1312, -1000, -1000, 15127, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2422, 2421, 1635, 1819, 2414, 2409, 2404, 2403, 2395,
	2394, 2392, 2389, 2385, 2384, 2383, 2381, 2380, 2379, 2378,
	2375, 2372, 2370, 2369, 2367, 2360, 2358, 2357, 1809, 2355,
	2353, 2348, 2343, 2340, 2337, 1799, 2336, 1780, 2335, 2332,
	2331, 2330, 2329, 1747, 1717, 2325, 84, 115, 1687, 2323,
	2320, 1682, 2316, 2314, 2313, 2311, 2310, 2308, 2306, 49,
	2304, 2303, 2302, 2301, 2299, 2298, 2292, 147, 157, 2287,
	1677, 2278, 2276, 2274, 2270, 2268, 2265, 2264, 2260, 2259,
	2258, 2252, 2250, 2249, 2244, 2243, 2242, 2241, 2240, 156,
	2239, 2236, 1639, 1633, 2235, 2234, 27, 21, 8, 55,
	20, 181, 2479, 136, 2232, 2231, 2229, 2225, 2224, 2220,
	31, 102, 101, 2214, 118, 2213, 2212, 38, 26, 19,
	17, 2210, 86, 2209, 2205, 1138, 30, 2204, 2199, 133,
	2198, 66, 22, 103, 151, 149, 113, 111, 2193, 2192,
	2191, 2189, 47, 114, 5, 2187, 2185, 13, 61, 15,
	2183, 29, 18, 2182, 2181, 131, 2179, 57, 93, 1539,
	112, 132, 1520, 2176, 58, 14, 63, 2174, 2170, 150,
	42, 2167, 28, 80, 137, 2164, 73, 155, 125, 79,
	130, 116, 2163, 2162, 2160, 95, 2157, 107, 71, 2153,
	2147, 76, 2145, 129, 134, 2144, 2135, 91, 2130, 119,
	2129, 2128, 154, 138, 105, 9, 44, 60, 10, 1560,
	1540, 120, 70, 54, 43, 2127, 1886, 1930, 2152, 32,
	96, 64, 39, 98, 48, 67, 146, 23, 2125, 2123,
	122, 2122, 2121, 2117, 2115, 2113, 99, 2109, 2107, 51,
	142, 83, 41, 37, 85, 33, 94, 124, 144, 145,
	106, 2105, 88, 110, 2104, 81, 2103, 2102, 1624, 117,
	2098, 2096, 2094, 1562, 1515, 1362, 97, 2090, 2089, 1086,
	318, 2088, 2087, 78, 2085, 108, 104, 2084, 139, 269,
	52, 2083, 109, 74, 92, 2082, 35, 24, 0, 2005,
	1590, 2080, 123, 77, 2079, 2078, 2077, 2076, 25, 2,
	7, 3, 4, 6, 59, 46, 2075, 2074, 126, 89,
	56, 2073, 153, 2072, 2069, 2068, 36, 2067, 16, 2064,
	12, 2063, 2061, 11, 1, 2060, 2059, 141, 2058, 87,
	2056, 1875, 2055, 143, 2053, 2052, 1652, 34, 100,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 5, 5, 5, 5, 5, 5,
	7, 7, 8, 8, 6, 6, 6, 6, 6, 9,
	9, 10, 16, 13, 18, 12, 12, 15, 15, 112,
	112, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 109, 109, 114, 114,
	114, 116, 116, 113, 113, 108, 108, 20, 20, 57,
	57, 99, 52, 52, 52, 286, 286, 287, 287, 95,
	95, 96, 96, 96, 96, 97, 97, 98, 98, 98,
	27, 27, 27, 22, 22, 22, 22, 22, 22, 22,
	23, 23, 24, 24, 25, 25, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	35, 35, 36, 36, 36, 36, 36, 36, 37, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 42,
	42, 42, 40, 40, 40, 39, 39, 39, 38, 38,
	38, 41, 41, 41, 161, 161, 160, 160, 163, 163,
	43, 43, 43, 43, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 47, 47, 47, 47, 47, 47,
	47, 47, 254, 254, 253, 45, 45, 228, 228, 48,
	48, 186, 186, 49, 49, 49, 49, 49, 50, 50,
	58, 58, 327, 327, 327, 331, 331, 332, 332, 333,
	333, 333, 333, 333, 333, 333, 329, 329, 55, 55,
	55, 94, 94, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 64, 64, 66, 63, 63, 63, 65, 65,
	65, 65, 67, 67, 67, 67, 68, 68, 68, 68,
	68, 69, 69, 141, 141, 279, 278, 278, 284, 284,
	284, 139, 139, 139, 139, 139, 140, 140, 140, 277,
	277, 277, 277, 285, 285, 285, 285, 285, 285, 283,
	283, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 82, 82, 82,
	89, 89, 89, 89, 89, 89, 89, 71, 71, 76,
	76, 76, 76, 76, 72, 72, 77, 77, 78, 78,
	79, 79, 79, 79, 79, 79, 73, 73, 73, 73,
	81, 81, 81, 81, 80, 80, 86, 86, 86, 86,
	86, 86, 83, 83, 83, 83, 84, 84, 84, 87,
	87, 87, 87, 74, 74, 75, 75, 88, 88, 85,
	85, 85, 44, 328, 328, 330, 330, 53, 53, 31,
	31, 32, 32, 142, 142, 143, 143, 207, 207, 207,
	207, 144, 144, 115, 115, 115, 206, 296, 296, 297,
	297, 297, 297, 297, 297, 298, 298, 298, 298, 298,
	298, 298, 294, 294, 295, 292, 292, 293, 293, 293,
	293, 334, 334, 205, 205, 147, 147, 301, 301, 301,
	301, 299, 299, 299, 299, 299, 302, 300, 303, 303,
	303, 303, 303, 240, 240, 240, 91, 91, 33, 33,
	121, 121, 34, 34, 30, 30, 30, 190, 190, 151,
	151, 245, 245, 245, 132, 132, 110, 110, 110, 14,
	11, 11, 11, 11, 11, 11, 19, 19, 17, 17,
	191, 191, 192, 192, 54, 54, 56, 56, 61, 61,
	90, 90, 90, 90, 90, 90, 21, 21, 21, 21,
	26, 26, 26, 26, 60, 60, 336, 336, 128, 128,
	128, 128, 129, 129, 202, 202, 203, 203, 204, 204,
	204, 123, 122, 124, 124, 29, 29, 29, 117, 117,
	118, 118, 119, 119, 120, 120, 337, 337, 51, 51,
	51, 93, 93, 135, 135, 199, 199, 199, 201, 201,
	200, 200, 200, 176, 176, 176, 92, 92, 156, 156,
	165, 165, 166, 166, 251, 167, 167, 59, 59, 102,
	102, 100, 100, 100, 100, 100, 100, 101, 101, 101,
	103, 103, 103, 103, 103, 103, 103, 106, 106, 106,
	107, 107, 107, 105, 105, 309, 309, 309, 312, 312,
	308, 310, 310, 311, 311, 335, 335, 177, 177, 177,
	146, 145, 145, 149, 149, 148, 150, 150, 244, 244,
	244, 174, 174, 174, 174, 193, 193, 194, 194, 195,
	195, 196, 196, 196, 197, 197, 198, 198, 173, 173,
	224, 224, 104, 104, 104, 155, 155, 155, 157, 157,
	214, 214, 214, 215, 215, 213, 213, 213, 213, 246,
	246, 246, 246, 246, 246, 246, 246, 325, 325, 325,
	326, 326, 243, 243, 247, 247, 247, 247, 247, 247,
	241, 241, 241, 241, 242, 242, 252, 252, 180, 180,
	180, 180, 178, 178, 179, 179, 248, 248, 248, 248,
	175, 175, 249, 249, 249, 208, 208, 255, 255, 255,
	273, 273, 154, 154, 154, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 257, 257, 257, 257, 259, 259, 259, 258,
	258, 258, 258, 258, 258, 258, 258, 258, 258, 258,
	258, 258, 258, 258, 258, 258, 258, 272, 272, 272,
	272, 272, 260, 260, 267, 267, 268, 268, 269, 270,
	261, 261, 262, 262, 263, 264, 271, 271, 271, 271,
	275, 275, 265, 265, 265, 265, 265, 266, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 188, 188, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 218, 218, 218, 218,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 304, 304, 304, 304, 304, 304, 304, 304, 306,
	306, 307, 307, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 313, 313, 314, 314, 316, 316, 317, 317, 318,
	319, 319, 319, 320, 321, 321, 315, 315, 322, 322,
	322, 323, 323, 324, 324, 324, 324, 324, 230, 230,
	230, 231, 231, 232, 238, 238, 238, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 130, 130, 130, 130, 130, 162, 162,
	227, 227, 225, 225, 225, 229, 229, 181, 181, 274,
	274, 274, 274, 274, 274, 274, 182, 182, 182, 189,
	183, 183, 184, 184, 184, 184, 184, 184, 221, 222,
	185, 185, 185, 223, 223, 233, 237, 237, 236, 235,
	235, 234, 234, 211, 211, 212, 212, 210, 209, 170,
	170, 169, 169, 168, 168, 338, 338, 239, 239, 171,
	171, 172, 164, 164, 250, 250, 250, 250, 158, 158,
	137, 137, 159, 159, 133, 133, 136, 136, 134, 134,
	134, 134, 152, 152, 153, 153, 131, 131, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 276,
	276, 276, 226, 125, 125, 125, 126, 126, 127, 127,
	281, 281, 281, 282, 282, 282, 282, 280, 280, 280,
	280, 280, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 1, 1, 1, 3, 4,
	6, 6, 6, 5, 5, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 7, 2, 6,
	2, 1, 12, 12, 2, 1, 1, 1, 3, 3,
	0, 3, 1, 3, 1, 1, 3, 2, 5, 0,
	4, 6, 7, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 3, 3, 3, 3, 1, 2, 1, 2,
	1, 2, 1, 2, 3, 1, 2, 1, 2, 2,
	6, 3, 2, 2, 2, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 2, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 3, 5,
	3, 3, 5, 3, 1, 3, 1, 2, 2, 3,
	2, 2, 5, 3, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 3, 1, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 2,
	6, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 3,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 3, 4, 3, 5, 3, 2, 6, 3, 3,
	4, 4, 3, 3, 3, 3, 1, 3, 3, 1,
	1, 2, 2, 1, 0, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 2, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 3, 3, 4,
	4, 3, 4, 4, 4, 3, 2, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	2, 3, 3, 3, 2, 3, 4, 3, 5, 3,
	4, 5, 2, 3, 3, 3, 4, 2, 3, 4,
	3, 3, 3, 4, 4, 4, 4, 2, 3, 5,
	5, 6, 2, 2, 0, 2, 0, 3, 2, 7,
	10, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 3, 2, 0, 3,
	1, 2, 2, 3, 6, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 2, 4, 3,
	3, 0, 6, 3, 11, 14, 4, 1, 0, 1,
	3, 3, 3, 5, 2, 0, 1, 1, 0, 6,
	6, 8, 8, 10, 8, 10, 6, 8, 6, 8,
	1, 0, 2, 0, 2, 2, 3, 2, 2, 2,
	1, 2, 1, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	3, 6, 3, 1, 3, 1, 4, 2, 8, 5,
	4, 3, 0, 2, 2, 0, 8, 3, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 2, 2, 1, 1, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 2, 2, 3, 3, 2, 0, 1, 3,
	3, 5, 1, 1, 3, 2, 4, 4, 0, 8,
	4, 6, 3, 3, 1, 5, 5, 0, 2, 3,
	1, 3, 2, 0, 3, 4, 5, 4, 5, 4,
	5, 2, 4, 1, 1, 0, 5, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	1, 1, 2, 3, 0, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 3, 4, 4,
	5, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 2, 1, 3, 1, 1, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 3, 4,
	1, 1, 1, 5, 1, 3, 3, 1, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 6, 6, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 3, 4,
	3, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 3,
	5, 4, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 3,
	1, 3, 3, 3, 2, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 0, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 1, 1,
	3, 3, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 2, 3, 1, 1, 1,
	2, 2, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -27, -28, -49,
	-35, -36, -37, -48, -43, -50, -44, -51, -52, -53,
	-45, -57, -56, -58, -61, -59, -54, -55, -62, -70,
	-90, -91, -92, -93, -5, -6, -7, -8, 23, 34,
	-23, -24, -25, 47, 67, -29, -30, -31, -32, 69,
	-33, -34, 90, -311, 94, -38, -39, -40, -42, -41,
	98, 105, 107, 125, 131, 134, 214, 220, 240, 242,
	244, 251, -100, -102, 238, 239, -63, -64, -65, -66,
	-94, 262, -71, -72, -73, -74, -75, -76, -77, -78,
	-79, -80, -81, -82, -83, -84, -85, -86, -87, -88,
	265, -21, -26, -60, 303, -9, -10, -13, -12, -11,
	-16, -18, -15, -17, -19, -14, -309, -103, -101, 354,
	312, 35, 274, 61, 101, 246, 328, 335, -106, -104,
	-105, -107, 255, 320, 284, 358, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	2, 284, 323, 83, 141, -327, 2, -159, 284, 83,
	-134, -125, 347, 4, -288, -290, 20, 21, 23, 33,
	34, 35, 40, 44, 47, 48, 55, 60, 61, 62,
	64, 66, 67, 68, 71, 72, 73, 81, 82, 84,
	86, 90, 92, 94, 97, 98, 100, 105, 106, 107,
	113, 114, 119, 121, 126, 131, 132, 133, 134, 135,
	142, 145, 147, 140, 157, 158, 159, 161, 162, 163,
	166, 165, 170, 173, 176, 178, 179, 180, 183, 181,
	185, 186, 188, 187, 193, 195, 196, 198, 201, 204,
	207, 210, 211, 212, 213, 214, 216, 218, 220, 222,
	223, 224, 225, 226, 228, 229, 231, 232, 233, 234,
	235, 238, 236, 237, 239, 240, 241, 242, 244, 246,
	247, 249, 263, 264, 275, 251, 252, 253, 254, 258,
	256, 259, 260, 262, 265, 267, 270, 273, 274, 276,
	279, 280, 277, 272, 283, 285, 286, 287, 288, 289,
	290, 291, 298, 299, 303, 304, 305, 306, 309, 310,
	311, 312, 314, 317, 318, 319, 324, 329, 330, 331,
	332, 333, 28, 36, 37, 38, 39, 41, 42, 45,
	46, 51, 52, 53, 56, 85, 87, 88, 104, 108,
	109, 115, 116, 117, 127, 129, 136, 137, 146, 148,
	149, 150, 151, 152, 154, 168, 182, 192, 194, 205,
	209, 217, 219, 227, 248, 257, 268, 269, 278, 281,
	293, 294, 295, 300, 301, 316, 320, 321, 357, 357,
	357, 2, 158, 224, 299, -133, -125, 83, 357, 357,
	357, 357, 284, 2, 313, 323, -190, 83, 308, 357,
	357, -125, 220, 22, 2, 92, 145, 311, 310, 22,
	216, 256, 286, 288, 2, 357, 357, 357, 357, 357,
	2, 323, 284, 141, 83, 313, -125, 2, -47, 2,
	354, -46, -4, -28, -37, -48, -43, -44, -59, -70,
	-35, -51, -92, -93, -331, 2, 22, -332, -333, 69,
	98, 125, 255, 145, 92, 310, -280, 4, -288, -290,
	-289, -291, 58, 70, 124, 144, 138, 156, 160, 169,
	171, 184, 206, 208, 245, 266, 22, 24, 25, 26,
	27, 29, 30, 31, 32, 43, 49, 50, 54, 57,
	59, 65, 69, 74, 75, 77, 76, 78, 79, 80,
	89, 91, 93, 95, 96, 99, 101, 103, 110, 111,
	112, 120, 122, 123, 125, 128, 130, 139, 141, 143,
	153, 155, 164, 167, 172, 174, 175, 189, 190, 191,
	197, 199, 200, 202, 203, 215, 221, 230, 243, 255,
	261, 271, 282, 284, 292, 296, 297, 302, 307, 308,
	313, 315, 322, 323, 325, 326, 327, 328, 284, 2,
	158, 2, -125, 2, -327, 2, 158, 2, -331, 2,
	-125, 2, -129, 2, 251, -125, -89, 259, 2, 4,
	22, 83, 183, 261, 293, 357, 357, 357, 173, 55,
	248, 259, -68, 299, -67, 293, -279, -69, 2, -160,
	183, -125, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 2,
	-89, 259, 34, 55, 22, 60, 84, 126, 141, 142,
	162, 65, 66, 223, 173, 159, 298, 163, 260, 285,
	299, 69, 314, 289, 106, 357, 357, 357, -335, 2,
	284, -101, -103, -102, -148, -149, 307, 153, 103, 203,
	-100, -102, 2, -309, -284, 2, -277, -240, 9, 302,
	110, 199, -283, 8, 346, -276, -282, 5, 7, 345,
	4, -288, -290, -289, -336, 2, 299, 299, 2, -336,
	2, -336, 2, -128, 2, 299, 296, -312, 228, -308,
	-125, -312, 357, 357, 359, 357, -145, -146, 2, 22,
	95, -172, 2, 354, -246, 2, 352, -248, -133, -102,
	-247, 354, 200, -3, 2, -248, 136, -133, 2, -248,
	136, -133, 2, -125, 2, -136, 136, -133, 296, 359,
	-159, -152, -125, -210, -209, 356, -216, 2, -218, 345,
	346, 340, 189, 334, -230, -220, -233, 104, 248, 354,
	-133, -219, 360, 9, -306, -102, 29, -231, -232, 49,
	-125, 7, 8, 5, 6, -131, -257, -226, -266, 302,
	110, 191, -304, -305, 4, -288, -281, -258, -268, -262,
	-265, 154, 58, 75, 76, 79, 77, 80, 261, 313,
	50, 28, 108, 109, 209, 217, 281, 300, 301, 136,
	192, 137, 56, 127, 168, 97, 37, 39, 41, 42,
	51, 52, 85, 87, 88, 115, 116, 117, 146, 148,
	149, 150, 151, 152, 194, 227, 268, 278, 294, 295,
	321, -289, -269, -270, -263, -264, -271, -216, 2, -216,
	2, 123, 354, -169, -170, -209, -210, 2, -160, 136,
	-125, 2, -160, 2, 141, -125, 136, 2, -125, 22,
	123, 2, 155, 2, 155, 2, -249, 2, -248, -161,
	136, 2, -160, -161, 136, 2, -137, 136, 2, -136,
	-125, 136, 2, -152, 136, 2, -186, 354, -254, 2,
	-253, -282, 320, 357, 357, 357, 357, 357, 199, 359,
	-160, -216, -228, 354, 123, -216, 199, -125, -89, 333,
	2, 2, 263, 2, 354, -68, 53, 299, -203, 2,
	-204, -122, -123, -124, 157, 222, 226, 333, 296, 339,
	123, -284, -141, 89, -163, 356, -89, 2, -286, 2,
	-283, 9, 263, 2, 223, 260, 55, 123, 2, 2,
	-328, 2, 199, 123, 2, 123, 2, 123, 2, 123,
	2, 123, 2, 2, 223, 260, 2, 120, 2, 298,
	2, 2, 123, 2, 157, 222, 275, 2, 284, 323,
	2, 123, 123, -175, -248, -148, -149, -174, -193, -194,
	172, 112, 197, -177, 22, 95, -177, -177, 44, 355,
	355, 8, 7, 7, -202, -203, -202, 296, -129, 359,
	-312, -153, 354, -172, -164, -250, -216, 347, -164, -171,
	-239, -216, 89, 70, -180, 160, 184, 124, 169, 245,
	144, 7, -47, -213, 360, 354, 347, -243, 335, -102,
	-247, 354, -246, -133, 354, -112, 236, -111, 21, 23,
	98, 318, 104, 272, 290, 252, 236, 104, 236, 272,
	290, 252, 236, 104, 360, -286, -134, 359, -280, 347,
	10, 11, 57, 33, 345, 346, 347, 348, 118, 349,
	350, 343, 344, 342, 337, 338, 339, 63, 177, 250,
	13, 14, 15, 26, 202, 171, 334, 138, 266, 340,
	16, 17, 18, 156, 36, 139, -130, -138, -216, -216,
	-216, -216, -216, 208, -168, -211, 352, -102, 354, 354,
	-102, -216, -162, 354, 7, -102, -225, 352, -234, -216,
	-169, 354, 5, 354, 5, -313, 329, 120, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 219, -275, 324, -275,
	-275, -259, 354, -259, -260, 354, -259, 330, 335, 354,
	276, 355, -158, -133, -170, 354, -147, 189, -121, -310,
	328, -147, 354, -126, 136, 2, -125, -310, 189, -249,
	-135, -133, -135, 262, -125, 30, -114, 359, 48, 241,
	104, -114, 104, -114, 359, 104, 104, 104, -162, -216,
	355, 359, -327, -333, 69, 354, 30, -227, -255, -256,
	-258, -267, -261, -265, -266, 40, 46, 45, 291, 182,
	257, 269, 316, 38, 198, 147, 146, 148, 149, 150,
	151, 152, 268, 37, 227, 116, 117, 115, 97, 88,
	87, 194, 42, 41, -269, -270, -263, -264, 85, 294,
	295, 154, 39, 52, 51, 321, 278, -287, -286, -327,
	-67, -279, -162, 30, -203, 2, 359, 170, -140, 176,
	188, 132, 200, 331, -285, 5, 4, -226, -240, 89,
	173, -266, -278, 89, -284, -278, 89, 73, 356, -280,
	-160, 22, 264, 2, -279, -330, 120, -327, -279, -279,
	-279, -279, -279, 259, -47, 120, -125, 170, -279, 2,
	-279, 2, 284, 141, 284, -114, 359, -174, -194, -193,
	-195, -216, 22, -198, 114, 185, -216, -218, -101, -101,
	-101, -150, -244, -216, 221, 141, -129, -308, 30, -152,
	-155, 359, 123, 30, 4, -155, 359, 355, 160, 160,
	-246, -180, 160, -178, 206, -178, -178, -325, 354, 353,
	-243, -280, 352, 361, -162, 2, -242, -241, 30, -125,
	204, 355, -133, 359, 296, -191, 65, 59, -206, 136,
	59, -292, -125, 65, -293, 54, 308, 221, 122, -191,
	65, -191, 65, 65, -248, 33, -59, 123, 296, -248,
	296, 33, -59, 123, 296, -136, -280, -252, 336, -125,
	-273, -255, -272, 232, 233, 231, 235, 234, -255, -280,
	293, -216, -216, -216, -216, -216, -216, -216, -216, -216,
	-216, -216, -216, -216, -216, -216, -216, -216, -216, -216,
	-216, -216, -216, 171, 138, 266, 36, 139, -216, 296,
	-216, -216, -216, -216, 181, 189, 191, 302, 110, 309,
	95, 195, -338, 282, 32, -223, -102, 354, -238, 27,
	271, 22, -230, 248, 354, -211, -216, -212, -162, 355,
	355, 359, -162, -229, 353, -225, -237, -236, 325, 355,
	-162, 322, 22, 95, 347, 2, 7, -187, 332, 180,
	86, 133, 179, -188, 254, -314, 113, 128, 354, 355,
	2, 355, 2, 355, 2, -216, -216, -181, 2, -274,
	-162, 4, 332, 180, 86, 133, 179, 254, -181, 2,
	-182, 2, -216, -162, -183, -217, -218, 345, 346, 340,
	354, 248, -184, 2, -216, -162, -216, 43, 167, 297,
	-185, -216, 123, -162, -216, -216, -216, -162, -162, 2,
	-162, 2, 354, 7, 7, 293, 293, 7, 123, 355,
	359, -142, -152, -143, -125, -207, -206, -294, -295, -292,
	141, 308, 111, 30, 104, 213, 30, 199, 189, -117,
	287, 104, -208, 326, -199, -59, 354, 89, 30, -199,
	-165, -166, -251, -167, -133, 354, -125, -160, -161, -161,
	-136, -137, -125, -152, 355, 359, -47, -253, 296, 315,
	-143, -46, 355, 359, -154, 29, 352, -187, 354, -252,
	359, 123, 355, 299, -204, -139, 226, 270, 237, 258,
	359, -280, -329, -125, 259, -47, -133, -136, -133, -248,
	-196, -276, 354, 346, -197, 248, 249, 359, -110, 31,
	93, 161, -133, 354, 355, -208, -250, -157, 2, -246,
	-280, -208, -239, -246, -246, -179, 315, 199, 160, -246,
	-241, 355, -326, 7, -243, -242, 7, -215, -214, 121,
	187, 355, -125, 354, -243, 355, -111, -133, -125, -125,
	189, -206, 136, -116, 189, -255, -125, 354, 354, 161,
	161, -125, -125, 136, -125, 136, -125, -125, -112, 236,
	-59, 354, -133, 236, -125, -59, 354, -125, 236, -95,
	135, 195, 333, -216, -216, 296, -338, 282, -223, -216,
	181, 191, 302, 110, 309, 95, 195, 123, 354, -217,
	-217, -162, -220, 354, -162, 353, 363, 355, -216, 353,
	353, 359, -235, -236, 99, -216, -149, 359, -148, -216,
	-162, -162, 355, 355, 296, 296, 296, 296, 354, -319,
	207, 354, 354, -216, 30, 359, 355, 123, 355, 355,
	-189, 215, 355, 10, 11, 345, 346, 347, 348, 118,
	349, 350, 343, 344, 342, 337, 338, 339, 63, 177,
	250, 13, 14, 15, 156, 139, -217, -217, -217, -162,
	354, 355, -221, -222, 123, 120, 30, -185, -185, -185,
	355, 123, -162, 359, 359, 359, 355, 355, 355, 7,
	355, 359, 355, 333, 333, 355, 276, 123, -133, 355,
	355, 359, -126, 141, -126, -59, -160, 5, -59, -133,
	104, -118, 100, -337, 339, -125, -176, 243, -216, -176,
	-201, 199, -158, 320, -125, -176, -156, 359, 123, 339,
	-158, -114, -114, -114, -216, -329, -286, 355, -255, 352,
	353, 7, 7, -98, 328, -286, -329, -122, 306, 62,
	226, -284, 359, -252, -197, -216, -244, -133, 360, -46,
	-173, 128, -252, 359, -173, -179, 354, -216, -246, 353,
	355, 359, -242, 353, 359, 362, 339, -243, 354, -152,
	-241, 296, 296, 104, 189, 317, -296, -293, -216, -151,
	-245, -125, -307, 354, -304, -305, -131, 354, 354, -109,
	98, 262, -192, 104, -114, 104, -114, 296, -191, 65,
	-162, 296, -162, 296, -98, 123, 283, -216, -216, -217,
	-217, 123, 354, -216, -227, 26, 26, 355, -162, 355,
	359, -212, -216, 355, -225, 101, -216, 292, 355, 322,
	-149, -149, -149, 5, 180, 133, 179, -188, 179, -188,
	-188, 7, -320, -125, 354, 326, -148, 355, -273, -255,
	-216, -221, -216, -273, -255, -217, -217, -217, -217, -217,
	-217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
	-217, -217, -217, -217, 95, 189, 195, -217, 359, -162,
	355, -222, -221, -216, -216, -255, 355, 355, 355, -162,
	-216, -216, -216, 355, 7, 276, -144, 140, -207, 354,
	-126, 354, 354, -147, 354, -125, -119, 166, -337, -283,
	-310, -164, 190, -176, 64, 355, -208, -166, -157, -239,
	355, -99, 71, -99, 7, 353, 355, -97, 201, -96,
	-125, 5, -125, 200, 355, -110, -280, 355, -224, 130,
	44, -246, -224, -152, -213, 7, -214, -280, 352, -242,
	-152, 355, -125, -125, -206, 104, -297, 65, -298, 57,
	111, 69, 189, 191, 308, 221, 54, 89, 230, 355,
	355, 359, -132, -169, 57, -132, -216, 354, -151, -152,
	189, 89, 189, 89, 82, 304, -125, -125, -133, -125,
	-125, 355, -133, 355, -125, -287, 293, 26, 26, -216,
	-227, 355, -216, -216, 355, -216, 353, -216, 5, -216,
	355, 355, 355, 355, -321, -125, -216, 355, 355, 355,
	-222, 123, 95, 195, 354, -216, 355, 355, 359, 355,
	355, 355, 139, -151, 354, -152, -142, 30, -151, 199,
	-120, 165, -337, -283, -117, -200, 354, 199, -59, -176,
	339, 82, 82, 353, 359, 354, 339, 339, -110, -316,
	327, -216, -162, -316, 355, -243, 7, 355, -206, -125,
	-280, -125, 111, 136, 191, 161, 354, -217, -133, -205,
	-334, 68, 280, -245, -110, -280, -110, 355, -162, 355,
	355, 191, 191, -216, -255, -114, -114, 296, 296, 296,
	296, -219, -131, -125, -216, -216, 355, 355, -149, -315,
	212, 355, -217, 123, 354, -227, 355, -216, 210, 355,
	-151, 355, 355, -59, 355, -133, -337, -283, -118, 96,
	-152, 65, -172, -102, 354, 354, 354, -96, -97, -286,
	-286, -317, -318, -125, -242, 353, -298, -126, 189, -216,
	-127, 354, -144, 354, -132, -149, 230, -113, 57, -125,
	-125, 354, 354, 354, 355, -149, 44, -217, -227, 355,
	355, -133, -205, 355, -144, -205, 354, -283, -119, 310,
	190, 355, -125, -287, -287, 355, 359, 30, 104, 355,
	-301, 178, -125, -152, -110, 355, -133, -108, 315, -280,
	-162, -162, -162, -322, 225, 249, -162, 355, 354, -144,
	-205, -144, -151, -120, 262, -208, 355, 355, -318, -320,
	111, -299, -302, -300, 199, 124, 211, 267, 355, 355,
	-147, -216, 355, 355, -149, 355, -323, -324, 36, 305,
	73, -216, -323, -152, -144, 355, -165, -98, -98, -125,
	-300, 199, -302, 199, 310, 92, -301, 355, -324, 218,
	119, 248, 218, 119, 355, -205, -208, -303, 186, 241,
	48, 262, -303, -299, 26, -115, 48, 241, -144, 20,
	191, 89, -324,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 7, 8, 9, 10,
	12, 14, 16, 17, 19, 21, 23, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 45, 46,
	47, 48, 50, 52, 55, 57, 59, 61, 0, 0,
	143, 145, 147, 0, 0, 156, 158, 160, 162, -2,
	165, 167, 0, 0, 0, 178, 180, 182, 184, 186,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, -2, 0, 0, 273, 275, 277, 279,
	280, 0, 331, 333, 335, 337, 339, 341, 343, 345,
	347, 349, 351, 353, 355, 357, 359, 360, 362, 364,
	0, 550, 552, 554, -2, 64, 65, 66, 67, 68,
	74, 75, 76, 77, 70, 72, 663, -2, 674, 0,
	0, -2, 0, -2, -2, -2, 0, 0, 640, 642,
	644, 646, -2, 0, 0, -2, 6, 11, 13, 15,
	18, 20, 22, 25, 27, 29, 31, 33, 35, 37,
	39, 42, 44, 49, 51, 53, 56, 58, 60, 62,
	63, 0, 0, 0, 0, 0, 118, 252, 0, 1225,
	1152, 1158, 1159, 1183, 1184, 1185, 1202, 1203, 1204, 1205,
	1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
	1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1226,
	1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236,
	1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246,
	1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256,
	1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266,
	1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276,
	1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286,
	1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296,
	1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306,
	1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316,
	1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326,
	1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336,
	1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346,
	1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356,
	1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366,
	1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376,
	1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386,
	1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396,
	1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406,
	1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 144, 146,
	148, 149, 0, 0, 0, 0, 1154, 1225, 157, 159,
	161, 163, 0, 169, 0, 0, 0, 0, 517, 166,
	168, 243, 1285, 245, 247, 0, 0, 0, 0, 172,
	173, 174, 175, 176, 177, 179, 181, 183, 185, 187,
	188, 0, 0, 0, 0, 0, 242, 240, 210, 211,
	0, 224, 225, 226, 227, 228, 230, 231, 214, 215,
	216, 218, 220, 222, 0, 249, 255, 256, 257, 259,
	260, 261, 262, 263, 264, 265, 432, 1197, 1198, 1199,
	1200, 1201, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422,
	1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432,
	1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442,
	1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452,
	1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462,
	1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472,
	1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482,
	1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492,
	1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502,
	1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 0, 124,
	0, 438, 238, 236, 0, 120, 0, 547, 0, 251,
	548, 549, 544, 545, 1312, 573, 268, 0, 270, 370,
	371, 372, 373, 374, 0, 274, 276, 278, -2, -2,
	1401, -2, 286, -2, 296, 1407, 0, 299, 300, 305,
	-2, 206, 332, 334, 336, 338, 340, 342, 344, 346,
	348, 350, 352, 354, 356, 358, 361, 363, 365, 366,
	367, 0, 0, 0, 371, 0, -2, -2, 0, 0,
	0, 0, 0, -2, 0, -2, 0, 0, -2, -2,
	0, 0, -2, 0, 0, 551, 553, 555, 0, 507,
	665, -2, 638, 639, -2, 0, 669, 669, 669, 0,
	0, 639, 637, 0, 271, 272, 308, 309, 310, 319,
	320, 321, 322, 503, 0, 505, 329, 330, 1179, 0,
	1193, 1194, 1195, 1196, 575, 557, 566, 575, 559, 560,
	561, 562, 563, 564, 565, 568, 0, 655, 1291, 658,
	1165, 656, 641, 643, 0, 645, 0, 0, 649, 671,
	670, 702, 703, 0, 653, 654, 664, 718, 756, 733,
	724, 0, 0, 2, 69, 0, 1383, 756, 71, 0,
	1383, 756, 73, 0, 78, 0, 1383, 1157, 0, 0,
	253, 254, 1162, 1160, 1161, 0, 150, 151, 864, 0,
	0, 0, 0, 0, 0, 956, 958, 1375, 1401, 0,
	960, 961, 0, 963, 965, 966, 0, 969, 970, 1122,
	1154, 1168, 1169, 1170, 1171, 0, 0, 1174, 0, 1176,
	1177, 1178, 1022, 980, -2, -2, 1166, 792, 793, 794,
	795, -2, 1415, 984, 987, 990, 993, 994, 995, 996,
	0, 1359, 1376, 1377, 1397, 1398, 1406, 1410, 1411, 1383,
	1394, 1384, 1371, 1381, 1392, 1231, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1192, 826, 827, 832, 833, 835, 152, 153, 154,
	155, 0, 0, 1155, 1131, 1129, 1130, 164, 486, 1383,
	-2, 509, 486, 513, -2, 662, 1383, 587, 244, 246,
	0, 171, 0, 600, 0, 602, 0, 617, 762, 110,
	1383, 191, 204, 110, 1383, 194, 110, 1383, 197, 1150,
	198, 1383, 200, 201, 1383, 203, 239, 0, 0, -2,
	232, 234, -2, 229, 217, 219, 221, 223, 0, 0,
	0, 437, 0, 0, 0, 546, 0, 572, 269, 375,
	376, 281, 0, 283, 0, 285, 1370, -2, 288, 289,
	576, 578, 579, 580, 0, 0, 0, 0, 0, 0,
	0, 301, 302, 303, 207, 0, 368, 369, 377, 378,
	125, 126, 0, 381, 402, 414, 0, 0, 385, 387,
	436, 389, 0, 0, 391, 0, 393, 0, 395, 0,
	397, 0, 399, 401, 403, 415, 405, 664, 407, 0,
	409, 413, 0, 418, 0, 420, 421, 422, 0, 0,
	428, 0, 0, 110, 760, -2, 0, 633, 683, 684,
	0, 0, 0, 0, 667, 668, 0, 0, 0, 629,
	630, 504, 1181, 1180, 556, 574, 558, 0, 570, 0,
	657, 0, 0, 704, 707, 1142, 1146, 1147, 707, 0,
	1139, 1137, 1138, 0, 0, 0, 0, 753, 753, 753,
	751, 727, 0, 733, 0, 0, 757, 745, 0, -2,
	724, 0, 0, 758, 0, 79, 541, 89, 0, 541,
	541, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 747, 1153, 0, 1127, 1128,
	0, 0, 0, 0, 1057, 1058, 1059, 1060, 1061, 1062,
	1065, 1066, 1063, 1064, 1067, 1068, 1069, 0, 0, 0,
	1070, 1071, 1072, 0, 0, 1074, 0, 1076, 0, 0,
	0, 0, 0, 0, 1136, 0, 0, 1073, 869, 870,
	871, 893, 894, 0, 957, 1133, 1126, 959, 0, 0,
	-2, 1078, 0, 0, 962, 967, 968, 0, 0, 1121,
	-2, 0, 1173, 0, 861, 1024, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 811, 829, 840, 837,
	836, 813, 0, 812, 810, 0, 814, 0, 0, 0,
	140, 0, 0, 1148, 1132, 444, 0, 0, 508, 0,
	661, 0, 0, 0, 1383, 516, 1186, 589, 0, 766,
	0, 603, 0, 0, 763, 0, 189, 0, 108, 109,
	0, 192, 0, 195, 0, 0, 0, 0, 0, 1078,
	664, 0, 0, 258, 0, 0, 664, 0, 1080, 774,
	775, 776, 777, 778, 861, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 799, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 809, 823, 0, 798,
	798, 798, 815, 816, 824, 825, 830, 831, 842, 843,
	845, 847, 841, 841, 841, 838, 839, 747, 127, 0,
	282, 0, 0, 0, 290, 291, 0, 0, 581, 316,
	317, 318, 583, 584, 297, 323, 324, 325, 326, 327,
	328, 0, 292, 294, 306, 293, 295, 298, 0, 208,
	379, 380, 382, 383, 384, 388, 0, 433, 390, 392,
	394, 396, 398, 406, 410, 664, 416, 419, 423, 424,
	425, 426, 0, 0, 0, 506, 0, 636, 681, 682,
	685, 689, 690, 693, 696, 697, 687, 864, 650, 651,
	652, 675, 676, 528, 0, 0, 569, 659, 0, 0,
	766, 0, 0, 0, 1145, 766, 0, 1141, 0, 0,
	0, 0, 0, 748, 752, 749, 750, 0, 0, 733,
	745, 715, 0, 0, 0, 722, 723, 744, 0, 743,
	732, -2, 0, 0, 0, 0, 0, 540, 91, 1383,
	0, 112, 0, 0, 476, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 1156, 130, 0, 1163,
	865, 770, 771, 817, 818, 819, 820, 821, 866, 867,
	0, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, -2, -2, -2, 885, 886, 887, -2, -2, -2,
	891, 892, -2, 1075, 1077, 0, 1136, 0, -2, 0,
	-2, -2, -2, -2, 905, 0, 907, 910, 912, 914,
	0, 0, 0, 0, 1135, 924, 1113, 0, 0, 1054,
	1055, 1056, 909, 0, 0, 1134, 1125, 0, 0, -2,
	964, 0, 0, 0, 1084, 1085, 1120, 1116, 0, 971,
	674, 0, 0, 0, 0, 978, 0, 1182, 848, 849,
	850, 851, 852, 853, 862, 1032, 0, 0, 0, 985,
	986, 988, 989, 991, 992, 0, 0, 0, 1000, 0,
	1088, -2, -2, -2, -2, -2, -2, -2, 0, 1002,
	0, 1004, 1078, 1098, 0, 0, 927, 0, 0, 0,
	0, 1401, 0, 1007, 1078, 1106, 0, 0, 0, 0,
	0, 1078, 0, 1112, 0, 0, 0, 0, 0, 1018,
	0, 1020, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 1162, 445, 447, 448, 449, 450,
	1187, 0, 1187, 0, 0, 0, 0, 0, 0, 591,
	597, 0, 615, 0, 615, 605, 0, 0, 0, 615,
	619, 620, 622, 623, 0, 0, 764, 205, 110, 110,
	1151, 110, 199, 202, 241, 0, 212, 233, 0, 0,
	0, 235, 237, 0, 767, 769, 0, 779, 0, 139,
	0, 0, 284, 0, 577, 582, 0, 313, 0, 315,
	0, 209, 435, 266, 408, 411, 429, 430, 747, 761,
	0, 691, 0, 0, 688, 694, 695, 0, 678, 526,
	527, 0, 0, 664, 1164, 699, 1143, 747, 706, 708,
	1144, 699, 1140, 735, 0, 737, 0, 0, 0, 739,
	0, 728, 0, 730, 745, 720, 0, 0, 713, 0,
	712, 733, 741, 0, 0, 759, 90, 530, 0, 0,
	0, 93, 1383, 101, 0, 458, 0, 0, 0, 0,
	0, 543, 102, 1383, 110, 1383, 110, 103, 80, 541,
	81, 0, 536, 0, 529, 82, 0, 538, 0, 139,
	0, 0, 0, -2, -2, 0, 0, 0, 925, -2,
	906, 908, 911, 913, 915, 0, 0, 0, 0, 0,
	0, 0, 926, 0, 0, 1123, 1126, -2, 1079, 1082,
	1083, 0, 0, 1117, 0, 0, 0, 0, 673, 674,
	674, 674, 977, 0, 0, 0, 0, 0, 0, 979,
	0, 0, 0, 0, 0, 0, 999, 0, 1001, 1003,
	0, 0, 1005, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 930, 931, 932, 0,
	0, 1006, 1104, 1105, 0, 0, 0, 0, 0, 0,
	1012, 0, 1111, 0, 0, 0, 1016, 1017, 1019, 0,
	796, 0, 822, 844, 846, 834, 141, 0, 1149, 452,
	485, 0, 0, 1187, 0, 441, 486, 510, 512, 0,
	0, 593, 597, 0, 596, 662, 170, 0, 765, 598,
	615, 0, 0, 607, 604, 601, 766, 0, 0, 0,
	0, 190, 193, 196, 1079, 248, 0, 0, 1081, 0,
	772, 0, 0, 119, 0, 128, 250, 287, 311, 312,
	314, 307, 0, 431, 0, 0, 677, 528, 0, 0,
	701, 0, 705, 0, 701, 736, 0, 755, 738, 718,
	729, 0, 726, 716, 0, 717, 0, 745, 0, 0,
	725, 0, 0, 0, 0, 111, 456, 475, 0, 0,
	519, 525, 525, 0, 981, 982, 0, 0, 0, 95,
	0, 0, 0, 0, 99, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 868, -2, 0,
	0, 0, 0, -2, 0, 0, 0, 1114, 0, 1049,
	0, 0, 1125, -2, 1086, 1115, 1119, 0, 972, 0,
	0, 0, 0, 1175, 854, 855, 856, 857, 858, 859,
	860, 0, 1030, 1031, 1035, 0, 0, 983, 0, 0,
	1087, 1097, 1099, 928, 929, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, -2, -2, -2, 946, 947,
	948, -2, -2, -2, 0, 0, 0, 1100, 0, 0,
	1052, 1102, 1103, 1108, 1109, 0, 1009, 1010, 1011, 1110,
	0, 0, 0, 828, 0, 142, 439, 0, 446, 0,
	0, 0, 444, 0, 0, 0, 595, 597, 0, 588,
	589, 613, 614, 599, 612, 0, 615, 621, 618, 624,
	0, 0, 121, 0, 0, 773, 780, 137, 1275, 135,
	132, 134, 267, 686, 692, 679, 528, 660, 1026, 0,
	0, 709, 1026, 0, 733, 731, 714, 710, 0, 721,
	0, 742, 532, 534, 92, 0, 457, 0, 460, 0,
	0, 0, 0, 466, 467, 0, 0, 0, 0, 477,
	484, 0, 528, 1167, 0, 528, 0, 0, 0, 0,
	0, 107, 0, 0, 542, 0, 110, 110, 531, 0,
	0, 0, 537, 0, 539, 129, 0, 0, 0, -2,
	0, 918, -2, -2, 1048, 1079, 1124, 1118, 1172, 674,
	973, 975, 976, 863, 1037, 1034, 0, 1021, 997, 998,
	1096, 0, 0, 0, 0, 1079, 1051, 1008, 0, 1014,
	1015, 797, 0, 0, 0, 0, 0, 0, 0, 0,
	585, 597, 0, 590, 591, 0, 0, 0, 606, 616,
	0, 0, 0, 768, 0, 0, 0, 0, 680, 647,
	0, 700, 698, 648, 754, 745, 0, 740, 94, 0,
	461, 462, 1187, 0, 465, 468, 0, 470, 1189, 452,
	0, 481, 482, 520, 521, 524, 522, 525, 674, 479,
	0, 96, 97, 106, 114, 98, 104, 0, 0, 0,
	0, 746, 0, 0, -2, -2, 919, 1050, 0, 674,
	0, 1023, -2, 0, 0, 0, 1053, 0, 0, 484,
	0, 474, 452, 442, 484, 0, 0, 592, 593, 0,
	0, 0, 625, 626, 0, 0, 0, 136, 0, 131,
	133, 1025, 1027, 0, 719, 711, 459, 463, 0, 0,
	490, 0, 478, 0, 528, 0, 0, 116, 0, 533,
	535, 0, 0, 0, 974, 1040, 0, -2, 0, 954,
	1013, 0, 452, 484, 440, 452, 0, 594, 595, 0,
	609, 766, 611, 0, 0, 138, 0, 0, 0, 469,
	495, 0, 0, 0, 523, 972, 486, 100, 0, 113,
	0, 0, 674, 0, 0, 0, 1036, 955, 0, 472,
	452, 514, 0, 586, 0, 610, 139, 139, 1028, 1029,
	0, 471, 491, 492, 0, 487, 488, 489, 1188, 483,
	490, 115, 86, 88, 0, 1033, 1038, 1041, -2, 1343,
	1222, 0, 1039, 0, 473, 484, 766, 122, 123, 464,
	493, 0, 494, 0, 0, 0, 495, 0, 0, 1043,
	1044, 1045, 1046, 1047, 455, 452, 608, 496, 0, 499,
	500, 0, 497, 480, 0, 451, 453, 454, 515, 498,
	501, 502, 1042,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 343, 3, 349, 344, 3,
	354, 355, 347, 345, 359, 346, 356, 348, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 363, 358,
	337, 339, 338, 3, 360, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 352, 3, 353, 350, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 361, 342, 362, 340,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 341,
	57680, 351, 57681, 357, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:863
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:869
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:875
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 6:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:885
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:889
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "DELETE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:891
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 18:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:903
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:904
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:909
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:910
		{
			return helpWith(sqllex, "RESET")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:915
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:916
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:930
		{
			return helpWith(sqllex, "ALTER")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:965
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:976
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:987
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1007
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1021
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1027
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1033
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1039
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1045
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1049
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1055
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1059
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1105
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1108
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1128
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1171
		{
			sqlVAL.union.val = nil
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = DropCascade
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = DropRestrict
		}
	case 110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = DropDefault
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1200
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1201
		{
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1204
		{
			return unimplemented(sqllex, "alter using")
		}
	case 116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1205
		{
		}
	case 117:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1232
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1258
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.str = "CSV"
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1289
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1293
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1296
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1365
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1385
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1386
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1387
		{
			return helpWith(sqllex, "CANCEL TRANSACTION")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1388
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1396
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1399
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1407
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1410
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = &CancelTransaction{ID: sqlDollar[3].union.expr()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "CANCEL TRANSACTION")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1429
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1430
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1431
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1432
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1434
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1435
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1436
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1437
		{
			return helpWith(sqllex, "CREATE")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1448
		{
			return helpWith(sqllex, "DELETE")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1468
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1470
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1471
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1472
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1473
		{
			return helpWith(sqllex, "DROP")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1488
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1503
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1526
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1541
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1556
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1580
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1607
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1616
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1624
		{
			return helpWith(sqllex, "DELETE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1625
		{
			return helpWith(sqllex, "INSERT")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1626
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1627
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1634
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1635
		{ /* SKIP DOC */
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1664
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1688
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1743
		{
			return helpWith(sqllex, "GRANT")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1763
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1775
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1785
		{
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1853
		{
			return helpWith(sqllex, "RESET")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1858
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1861
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1865
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1866
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1867
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1868
		{ /* SKIP DOC */
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1869
		{ /* SKIP DOC */
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1870
		{
			return unimplemented(sqllex, "set local")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1883
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 287:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1933
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1938
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1963
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1966
		{
			return unimplemented(sqllex, "set from current")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1968
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1974
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1978
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1984
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1986
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2023
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = Low
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = Normal
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = High
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2108
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2113
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2114
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2116
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2117
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2118
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2120
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2121
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2122
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			return helpWith(sqllex, "SHOW")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2132
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.str = "client_encoding"
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2147
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2158
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2175
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2191
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2202
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2213
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2224
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2229
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2245
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2250
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2261
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2280
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2293
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2298
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2316
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2347
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2351
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2355
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2358
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2369
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2380
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2391
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2395
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2399
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2403
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2415
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2440
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2443
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2542
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2546
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = DropDefault
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2556
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2589
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2761
		{
			return unimplemented(sqllex, "match full")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2762
		{
			return unimplemented(sqllex, "match partial")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2763
		{
			return unimplemented(sqllex, "match simple")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2764
		{
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2770
		{
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2771
		{
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2772
		{
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2773
		{
		}
	case 495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2774
		{
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2777
		{
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2780
		{
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2783
		{
			return unimplemented(sqllex, "no action")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2786
		{
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2787
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2788
		{
			return unimplemented(sqllex, "action set null")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2789
		{
			return unimplemented(sqllex, "action set default")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2814
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2825
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2829
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 512:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2850
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2890
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = true
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = false
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2920
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2921
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2924
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2925
		{
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = Ascending
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = Descending
		}
	case 528:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 529:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2961
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2965
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2967
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2981
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2985
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = true
		}
	case 541:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = false
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3000
		{
		}
	case 543:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3001
		{
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3012
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3020
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3034
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3038
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3039
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3040
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3058
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3063
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3076
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3081
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3089
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3096
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3099
		{
		}
	case 567:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3100
		{
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.str = ""
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 571:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.str = ""
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3146
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = ReadOnly
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = ReadWrite
		}
	case 585:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3196
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3216
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.str = ""
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.str = ""
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.str = ""
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.str = ""
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3259
		{
		}
	case 597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3260
		{
		}
	case 598:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3284
		{
			return helpWith(sqllex, "INSERT")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3301
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3343
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3347
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3355
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 616:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3378
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3382
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3383
		{
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3387
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3391
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3512
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3547
		{
			return helpWith(sqllex, "SELECT")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3548
		{
			return helpWith(sqllex, "VALUES")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3549
		{
			return helpWith(sqllex, "TABLE")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3595
		{
			return helpWith(sqllex, "SELECT")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3632
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3639
		{
			return helpWith(sqllex, "TABLE")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3650
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3651
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3652
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3655
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3656
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3659
		{
			return unimplemented(sqllex, "cte")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3662
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3663
		{
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3666
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3667
		{
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3670
		{
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3671
		{
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = true
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = false
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = false
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3689
		{
			sqlVAL.union.val = true
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3694
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3695
		{
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3742
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3762
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3814
		{
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3815
		{
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3818
		{
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3819
		{
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3877
		{
			return helpWith(sqllex, "VALUES")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3879
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3894
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = &From{}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3916
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3934
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3957
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3961
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3998
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4023
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = nil
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4064
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4070
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = true
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = false
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.str = astFullJoin
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.str = astLeftJoin
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.str = astRightJoin
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.str = astInnerJoin
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4181
		{
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4182
		{
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4268
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4282
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4290
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4314
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4325
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4388
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4397
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = nil
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4462
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4558
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4590
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4606
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4616
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4620
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4629
		{
		}
	case 841:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4630
		{
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 844:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 846:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = year
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = month
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = day
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = hour
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = minute
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = month
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = hour
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = minute
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = minute
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = nil
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = second
		}
	case 863:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4725
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4749
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4753
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4757
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4760
		{
			return unimplemented(sqllex, "at tz")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4769
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4781
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4785
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4849
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4853
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4861
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4865
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4925
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4928
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4986
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4994
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5058
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5078
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5082
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5143
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5162
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5167
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5180
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5184
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5197
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5220
		{
			return unimplemented(sqllex, "variadic")
		}
	case 974:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5221
		{
			return unimplemented(sqllex, "variadic")
		}
	case 975:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5234
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 979:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5245
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5252
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5261
		{
			return unimplemented(sqllex, "func_application")
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5262
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 983:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5266
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5268
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5272
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5275
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5284
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5286
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5290
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5293
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5294
		{
			return unimplemented(sqllex, "current role")
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5295
		{
			return unimplemented(sqllex, "current user")
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5296
		{
			return unimplemented(sqllex, "session user")
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5297
		{
			return unimplemented(sqllex, "user")
		}
	case 997:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5299
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5303
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5307
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5310
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5312
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5315
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5317
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5320
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5322
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5326
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5329
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5330
		{
			return unimplemented(sqllex, "treat")
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5332
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5336
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5344
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5348
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5352
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5356
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5360
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5364
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5367
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5369
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5372
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5376
		{
			return unimplemented(sqllex, "within group")
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5377
		{
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5392
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5402
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5406
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5412
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5420
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5435
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.str = ""
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5460
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5474
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5475
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5476
		{
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5479
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5480
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5486
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5487
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5488
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5489
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5490
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5501
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5505
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5509
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5515
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5519
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5525
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5531
		{
			sqlVAL.union.val = Any
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5535
		{
			sqlVAL.union.val = Some
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5539
		{
			sqlVAL.union.val = All
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5544
		{
			sqlVAL.union.val = Plus
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5545
		{
			sqlVAL.union.val = Minus
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5546
		{
			sqlVAL.union.val = Mult
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = Div
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5548
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5549
		{
			sqlVAL.union.val = Mod
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5550
		{
			sqlVAL.union.val = Bitand
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5551
		{
			sqlVAL.union.val = Bitor
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5552
		{
			sqlVAL.union.val = Pow
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5553
		{
			sqlVAL.union.val = Bitxor
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5554
		{
			sqlVAL.union.val = LT
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5555
		{
			sqlVAL.union.val = GT
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5556
		{
			sqlVAL.union.val = EQ
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5557
		{
			sqlVAL.union.val = LE
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5558
		{
			sqlVAL.union.val = GE
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5559
		{
			sqlVAL.union.val = NE
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5563
		{
			sqlVAL.union.val = Like
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5564
		{
			sqlVAL.union.val = NotLike
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5565
		{
			sqlVAL.union.val = ILike
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5566
		{
			sqlVAL.union.val = NotILike
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5577
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5581
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5587
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5591
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5597
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5601
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5605
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5611
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5615
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5621
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5625
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5647
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5651
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5655
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5661
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5668
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5672
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5689
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5693
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5697
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5701
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5705
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5709
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5715
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5721
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5727
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5731
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5735
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5741
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5745
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5756
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5763
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5767
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5773
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5779
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5783
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5790
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5800
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5807
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5813
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5819
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5825
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5829
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5835
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5839
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5845
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5849
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5854
		{
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5855
		{
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5864
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5870
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5874
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5883
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5889
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5893
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5899
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5908
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5924
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5928
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5934
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5944
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5959
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5963
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5969
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5973
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5990
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5994
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6004
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6008
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6014
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6017
		{
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6031
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6046
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6050
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6053
		{
			return unimplemented(sqllex, "func const")
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6055
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6059
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6062
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6064
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6068
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6072
		{
			sqlVAL.union.val = DNull
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6079
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6083
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6089
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6124
		{
			sqlVAL.str = ""
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6130
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6134
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
