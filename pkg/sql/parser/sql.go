// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const GRANT = 57467
const GRANTS = 57468
const GREATEST = 57469
const GROUP = 57470
const GROUPING = 57471
const HAVING = 57472
const HELP = 57473
const HIGH = 57474
const HOUR = 57475
const INCREMENTAL = 57476
const IF = 57477
const IFNULL = 57478
const ILIKE = 57479
const IN = 57480
const INTERLEAVE = 57481
const INDEX = 57482
const INDEXES = 57483
const INITIALLY = 57484
const INNER = 57485
const INSERT = 57486
const INT = 57487
const INT2VECTOR = 57488
const INT2 = 57489
const INT4 = 57490
const INT8 = 57491
const INT64 = 57492
const INTEGER = 57493
const INTERSECT = 57494
const INTERVAL = 57495
const INTO = 57496
const IS = 57497
const ISOLATION = 57498
const JOB = 57499
const JOBS = 57500
const JOIN = 57501
const KEY = 57502
const KEYS = 57503
const KV = 57504
const LATERAL = 57505
const LC_CTYPE = 57506
const LC_COLLATE = 57507
const LEADING = 57508
const LEAST = 57509
const LEFT = 57510
const LEVEL = 57511
const LIKE = 57512
const LIMIT = 57513
const LOAD = 57514
const LOCAL = 57515
const LOCALTIME = 57516
const LOCALTIMESTAMP = 57517
const LOW = 57518
const LSHIFT = 57519
const MATCH = 57520
const MINUTE = 57521
const MONTH = 57522
const NAN = 57523
const NAME = 57524
const NAMES = 57525
const NATURAL = 57526
const NEXT = 57527
const NO = 57528
const NO_INDEX_JOIN = 57529
const NORMAL = 57530
const NOT = 57531
const NOTHING = 57532
const NULL = 57533
const NULLIF = 57534
const NULLS = 57535
const NUMERIC = 57536
const OF = 57537
const OFF = 57538
const OFFSET = 57539
const OID = 57540
const ON = 57541
const ONLY = 57542
const OPTIONS = 57543
const OR = 57544
const ORDER = 57545
const ORDINALITY = 57546
const OUT = 57547
const OUTER = 57548
const OVER = 57549
const OVERLAPS = 57550
const OVERLAY = 57551
const PARENT = 57552
const PARTIAL = 57553
const PARTITION = 57554
const PASSWORD = 57555
const PAUSE = 57556
const PLACING = 57557
const PLANS = 57558
const POSITION = 57559
const PRECEDING = 57560
const PRECISION = 57561
const PREPARE = 57562
const PRIMARY = 57563
const PRIORITY = 57564
const QUERIES = 57565
const QUERY = 57566
const RANGE = 57567
const READ = 57568
const REAL = 57569
const RECURSIVE = 57570
const REF = 57571
const REFERENCES = 57572
const REGCLASS = 57573
const REGPROC = 57574
const REGPROCEDURE = 57575
const REGNAMESPACE = 57576
const REGTYPE = 57577
const RENAME = 57578
const REPEATABLE = 57579
const RELEASE = 57580
const RESET = 57581
const RESTORE = 57582
const RESTRICT = 57583
const RESUME = 57584
const RETURNING = 57585
const REVOKE = 57586
const RIGHT = 57587
const ROLLBACK = 57588
const ROLLUP = 57589
const ROW = 57590
const ROWS = 57591
const RSHIFT = 57592
const SAVEPOINT = 57593
const SCATTER = 57594
const SEARCH = 57595
const SECOND = 57596
const SELECT = 57597
const SEQUENCES = 57598
const SERIAL = 57599
const SERIALIZABLE = 57600
const SESSION = 57601
const SESSIONS = 57602
const SESSION_USER = 57603
const SET = 57604
const SETTING = 57605
const SETTINGS = 57606
const SHOW = 57607
const SIMILAR = 57608
const SIMPLE = 57609
const SMALLINT = 57610
const SMALLSERIAL = 57611
const SNAPSHOT = 57612
const SOME = 57613
const SPLIT = 57614
const SQL = 57615
const START = 57616
const STATUS = 57617
const STDIN = 57618
const STRICT = 57619
const STRING = 57620
const STORING = 57621
const SUBSTRING = 57622
const SYMMETRIC = 57623
const SYSTEM = 57624
const TABLE = 57625
const TABLES = 57626
const TEMP = 57627
const TEMPLATE = 57628
const TEMPORARY = 57629
const TESTING_RANGES = 57630
const TESTING_RELOCATE = 57631
const TEXT = 57632
const THEN = 57633
const TIME = 57634
const TIMESTAMP = 57635
const TIMESTAMPTZ = 57636
const TO = 57637
const TRAILING = 57638
const TRACE = 57639
const TRANSACTION = 57640
const TREAT = 57641
const TRIM = 57642
const TRUE = 57643
const TRUNCATE = 57644
const TYPE = 57645
const UNBOUNDED = 57646
const UNCOMMITTED = 57647
const UNION = 57648
const UNIQUE = 57649
const UNKNOWN = 57650
const UPDATE = 57651
const UPSERT = 57652
const USE = 57653
const USER = 57654
const USERS = 57655
const USING = 57656
const UUID = 57657
const VALID = 57658
const VALIDATE = 57659
const VALUE = 57660
const VALUES = 57661
const VARCHAR = 57662
const VARIADIC = 57663
const VIEW = 57664
const VARYING = 57665
const WHEN = 57666
const WHERE = 57667
const WINDOW = 57668
const WITH = 57669
const WITHIN = 57670
const WITHOUT = 57671
const WRITE = 57672
const YEAR = 57673
const ZONE = 57674
const NOT_LA = 57675
const WITH_LA = 57676
const AS_LA = 57677
const POSTFIXOP = 57678
const UMINUS = 57679
const HELPTOKEN = 57680

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOAD",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6439

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	357, 53,
	-2, 654,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	140, 508,
	-2, 0,
	-1, 61,
	92, 654,
	144, 654,
	309, 654,
	310, 654,
	-2, 0,
	-1, 72,
	103, 629,
	112, 629,
	152, 629,
	171, 629,
	197, 629,
	203, 629,
	306, 629,
	-2, 618,
	-1, 103,
	4, 656,
	20, 656,
	21, 656,
	23, 656,
	28, 656,
	33, 656,
	34, 656,
	35, 656,
	36, 656,
	37, 656,
	38, 656,
	39, 656,
	40, 656,
	41, 656,
	42, 656,
	44, 656,
	45, 656,
	46, 656,
	47, 656,
	48, 656,
	51, 656,
	52, 656,
	53, 656,
	55, 656,
	56, 656,
	60, 656,
	61, 656,
	62, 656,
	64, 656,
	66, 656,
	67, 656,
	68, 656,
	71, 656,
	72, 656,
	73, 656,
	81, 656,
	82, 656,
	83, 656,
	84, 656,
	85, 656,
	86, 656,
	87, 656,
	88, 656,
	90, 656,
	92, 656,
	94, 656,
	97, 656,
	98, 656,
	100, 656,
	104, 656,
	105, 656,
	106, 656,
	107, 656,
	108, 656,
	109, 656,
	113, 656,
	114, 656,
	115, 656,
	116, 656,
	117, 656,
	119, 656,
	121, 656,
	126, 656,
	127, 656,
	129, 656,
	131, 656,
	132, 656,
	133, 656,
	134, 656,
	135, 656,
	136, 656,
	139, 656,
	141, 656,
	144, 656,
	145, 656,
	146, 656,
	147, 656,
	148, 656,
	149, 656,
	150, 656,
	151, 656,
	153, 656,
	156, 656,
	157, 656,
	158, 656,
	160, 656,
	161, 656,
	162, 656,
	164, 656,
	165, 656,
	167, 656,
	169, 656,
	172, 656,
	173, 656,
	176, 656,
	178, 656,
	179, 656,
	180, 656,
	181, 656,
	182, 656,
	183, 656,
	185, 656,
	186, 656,
	187, 656,
	188, 656,
	192, 656,
	193, 656,
	194, 656,
	195, 656,
	196, 656,
	198, 656,
	200, 656,
	201, 656,
	204, 656,
	205, 656,
	207, 656,
	209, 656,
	210, 656,
	211, 656,
	212, 656,
	213, 656,
	214, 656,
	216, 656,
	217, 656,
	218, 656,
	219, 656,
	220, 656,
	222, 656,
	223, 656,
	224, 656,
	225, 656,
	226, 656,
	227, 656,
	228, 656,
	229, 656,
	231, 656,
	232, 656,
	233, 656,
	234, 656,
	235, 656,
	236, 656,
	237, 656,
	238, 656,
	239, 656,
	240, 656,
	241, 656,
	242, 656,
	244, 656,
	246, 656,
	247, 656,
	248, 656,
	249, 656,
	251, 656,
	252, 656,
	253, 656,
	254, 656,
	256, 656,
	257, 656,
	258, 656,
	259, 656,
	260, 656,
	262, 656,
	263, 656,
	264, 656,
	265, 656,
	267, 656,
	268, 656,
	269, 656,
	270, 656,
	272, 656,
	273, 656,
	274, 656,
	275, 656,
	276, 656,
	277, 656,
	278, 656,
	279, 656,
	280, 656,
	282, 656,
	284, 656,
	285, 656,
	286, 656,
	287, 656,
	288, 656,
	289, 656,
	290, 656,
	292, 656,
	293, 656,
	294, 656,
	297, 656,
	298, 656,
	299, 656,
	300, 656,
	302, 656,
	303, 656,
	304, 656,
	305, 656,
	308, 656,
	309, 656,
	310, 656,
	311, 656,
	313, 656,
	315, 656,
	316, 656,
	317, 656,
	318, 656,
	319, 656,
	320, 656,
	323, 656,
	328, 656,
	329, 656,
	330, 656,
	331, 656,
	332, 656,
	-2, 0,
	-1, 116,
	103, 628,
	112, 628,
	152, 628,
	171, 628,
	197, 628,
	203, 628,
	306, 628,
	-2, 621,
	-1, 120,
	1, 557,
	156, 557,
	222, 557,
	226, 557,
	356, 557,
	357, 557,
	-2, 0,
	-1, 122,
	1, 557,
	356, 557,
	357, 557,
	-2, 0,
	-1, 123,
	1, 557,
	356, 557,
	357, 557,
	-2, 0,
	-1, 124,
	1, 561,
	356, 561,
	357, 561,
	-2, 0,
	-1, 131,
	4, 662,
	5, 662,
	6, 662,
	7, 662,
	8, 662,
	9, 662,
	20, 662,
	21, 662,
	23, 662,
	28, 662,
	29, 662,
	33, 662,
	34, 662,
	35, 662,
	36, 662,
	37, 662,
	38, 662,
	39, 662,
	40, 662,
	41, 662,
	42, 662,
	44, 662,
	45, 662,
	46, 662,
	47, 662,
	48, 662,
	49, 662,
	50, 662,
	51, 662,
	52, 662,
	53, 662,
	55, 662,
	56, 662,
	58, 662,
	60, 662,
	61, 662,
	62, 662,
	64, 662,
	66, 662,
	67, 662,
	68, 662,
	70, 662,
	71, 662,
	72, 662,
	73, 662,
	75, 662,
	76, 662,
	77, 662,
	79, 662,
	80, 662,
	81, 662,
	82, 662,
	83, 662,
	84, 662,
	85, 662,
	86, 662,
	87, 662,
	88, 662,
	90, 662,
	92, 662,
	94, 662,
	97, 662,
	98, 662,
	100, 662,
	104, 662,
	105, 662,
	106, 662,
	107, 662,
	108, 662,
	109, 662,
	110, 662,
	113, 662,
	114, 662,
	115, 662,
	116, 662,
	117, 662,
	119, 662,
	121, 662,
	124, 662,
	126, 662,
	127, 662,
	129, 662,
	131, 662,
	132, 662,
	133, 662,
	134, 662,
	135, 662,
	136, 662,
	137, 662,
	139, 662,
	141, 662,
	143, 662,
	144, 662,
	145, 662,
	146, 662,
	147, 662,
	148, 662,
	149, 662,
	150, 662,
	151, 662,
	153, 662,
	155, 662,
	156, 662,
	157, 662,
	158, 662,
	159, 662,
	160, 662,
	161, 662,
	162, 662,
	164, 662,
	165, 662,
	167, 662,
	168, 662,
	169, 662,
	170, 662,
	172, 662,
	173, 662,
	176, 662,
	178, 662,
	179, 662,
	180, 662,
	181, 662,
	182, 662,
	183, 662,
	184, 662,
	185, 662,
	186, 662,
	187, 662,
	188, 662,
	189, 662,
	191, 662,
	192, 662,
	193, 662,
	194, 662,
	195, 662,
	196, 662,
	198, 662,
	201, 662,
	204, 662,
	205, 662,
	206, 662,
	207, 662,
	208, 662,
	209, 662,
	210, 662,
	211, 662,
	212, 662,
	213, 662,
	214, 662,
	216, 662,
	217, 662,
	218, 662,
	219, 662,
	220, 662,
	222, 662,
	223, 662,
	224, 662,
	225, 662,
	226, 662,
	227, 662,
	228, 662,
	229, 662,
	231, 662,
	232, 662,
	233, 662,
	234, 662,
	235, 662,
	236, 662,
	237, 662,
	238, 662,
	239, 662,
	240, 662,
	241, 662,
	242, 662,
	244, 662,
	245, 662,
	246, 662,
	247, 662,
	248, 662,
	249, 662,
	251, 662,
	252, 662,
	253, 662,
	254, 662,
	256, 662,
	257, 662,
	258, 662,
	259, 662,
	260, 662,
	261, 662,
	262, 662,
	263, 662,
	264, 662,
	265, 662,
	266, 662,
	267, 662,
	268, 662,
	269, 662,
	270, 662,
	272, 662,
	273, 662,
	274, 662,
	275, 662,
	276, 662,
	277, 662,
	278, 662,
	279, 662,
	280, 662,
	282, 662,
	284, 662,
	285, 662,
	286, 662,
	287, 662,
	288, 662,
	289, 662,
	290, 662,
	292, 662,
	293, 662,
	294, 662,
	297, 662,
	298, 662,
	299, 662,
	300, 662,
	301, 662,
	302, 662,
	303, 662,
	304, 662,
	305, 662,
	308, 662,
	309, 662,
	310, 662,
	311, 662,
	312, 662,
	313, 662,
	315, 662,
	316, 662,
	317, 662,
	318, 662,
	319, 662,
	320, 662,
	323, 662,
	328, 662,
	329, 662,
	330, 662,
	331, 662,
	332, 662,
	333, 662,
	339, 662,
	344, 662,
	345, 662,
	346, 662,
	353, 662,
	359, 662,
	-2, 0,
	-1, 134,
	1, 53,
	357, 53,
	-2, 654,
	-1, 592,
	123, 1250,
	295, 1250,
	338, 1250,
	355, 1250,
	-2, 0,
	-1, 593,
	123, 1202,
	295, 1202,
	338, 1202,
	355, 1202,
	-2, 0,
	-1, 595,
	123, 1308,
	295, 1308,
	338, 1308,
	355, 1308,
	-2, 0,
	-1, 597,
	123, 1329,
	295, 1329,
	338, 1329,
	355, 1329,
	-2, 0,
	-1, 604,
	1, 294,
	356, 294,
	357, 294,
	-2, 1255,
	-1, 630,
	1, 376,
	352, 376,
	354, 376,
	356, 376,
	357, 376,
	-2, 0,
	-1, 631,
	1, 424,
	120, 424,
	352, 424,
	354, 424,
	356, 424,
	357, 424,
	-2, 0,
	-1, 637,
	1, 390,
	352, 390,
	354, 390,
	356, 390,
	357, 390,
	-2, 0,
	-1, 639,
	1, 394,
	352, 394,
	354, 394,
	356, 394,
	357, 394,
	-2, 0,
	-1, 642,
	1, 402,
	352, 402,
	354, 402,
	356, 402,
	357, 402,
	-2, 0,
	-1, 643,
	1, 407,
	352, 407,
	354, 407,
	356, 407,
	357, 407,
	-2, 0,
	-1, 646,
	1, 417,
	352, 417,
	354, 417,
	356, 417,
	357, 417,
	-2, 0,
	-1, 655,
	112, 664,
	171, 664,
	197, 664,
	-2, 624,
	-1, 658,
	112, 663,
	171, 663,
	197, 663,
	-2, 622,
	-1, 788,
	353, 1180,
	-2, 1173,
	-1, 789,
	353, 1181,
	-2, 1174,
	-1, 795,
	5, 837,
	353, 837,
	-2, 1380,
	-1, 820,
	5, 796,
	-2, 1350,
	-1, 821,
	5, 831,
	353, 831,
	-2, 1352,
	-1, 822,
	5, 806,
	-2, 1353,
	-1, 823,
	5, 805,
	-2, 1354,
	-1, 824,
	5, 831,
	353, 831,
	-2, 1357,
	-1, 825,
	5, 831,
	353, 831,
	-2, 1358,
	-1, 826,
	5, 832,
	-2, 1361,
	-1, 827,
	5, 788,
	-2, 1362,
	-1, 828,
	5, 788,
	-2, 1363,
	-1, 829,
	5, 813,
	-2, 1367,
	-1, 830,
	5, 798,
	-2, 1368,
	-1, 831,
	5, 799,
	-2, 1369,
	-1, 832,
	5, 789,
	-2, 1374,
	-1, 833,
	5, 790,
	-2, 1375,
	-1, 834,
	5, 791,
	-2, 1376,
	-1, 835,
	5, 792,
	-2, 1377,
	-1, 836,
	5, 793,
	-2, 1378,
	-1, 837,
	5, 794,
	-2, 1379,
	-1, 838,
	5, 788,
	-2, 1384,
	-1, 839,
	5, 797,
	-2, 1389,
	-1, 840,
	5, 795,
	-2, 1392,
	-1, 841,
	5, 829,
	353, 829,
	-2, 1394,
	-1, 842,
	5, 833,
	-2, 1397,
	-1, 843,
	5, 835,
	-2, 1398,
	-1, 844,
	5, 828,
	353, 828,
	-2, 1403,
	-1, 862,
	213, 652,
	-2, 501,
	-1, 866,
	199, 1177,
	-2, 0,
	-1, 901,
	1, 203,
	352, 203,
	354, 203,
	356, 203,
	357, 203,
	-2, 627,
	-1, 904,
	4, 1402,
	10, 1402,
	11, 1402,
	13, 1402,
	14, 1402,
	15, 1402,
	16, 1402,
	17, 1402,
	18, 1402,
	20, 1402,
	21, 1402,
	23, 1402,
	26, 1402,
	28, 1402,
	30, 1402,
	33, 1402,
	34, 1402,
	35, 1402,
	36, 1402,
	37, 1402,
	38, 1402,
	39, 1402,
	40, 1402,
	41, 1402,
	42, 1402,
	44, 1402,
	45, 1402,
	46, 1402,
	47, 1402,
	48, 1402,
	51, 1402,
	52, 1402,
	53, 1402,
	55, 1402,
	56, 1402,
	57, 1402,
	60, 1402,
	61, 1402,
	62, 1402,
	63, 1402,
	64, 1402,
	66, 1402,
	67, 1402,
	68, 1402,
	70, 1402,
	71, 1402,
	72, 1402,
	73, 1402,
	81, 1402,
	82, 1402,
	83, 1402,
	84, 1402,
	85, 1402,
	86, 1402,
	87, 1402,
	88, 1402,
	90, 1402,
	92, 1402,
	94, 1402,
	97, 1402,
	98, 1402,
	100, 1402,
	104, 1402,
	105, 1402,
	106, 1402,
	107, 1402,
	108, 1402,
	109, 1402,
	113, 1402,
	114, 1402,
	115, 1402,
	116, 1402,
	117, 1402,
	118, 1402,
	119, 1402,
	121, 1402,
	124, 1402,
	126, 1402,
	127, 1402,
	129, 1402,
	131, 1402,
	132, 1402,
	133, 1402,
	134, 1402,
	135, 1402,
	136, 1402,
	137, 1402,
	138, 1402,
	139, 1402,
	141, 1402,
	143, 1402,
	144, 1402,
	145, 1402,
	146, 1402,
	147, 1402,
	148, 1402,
	149, 1402,
	150, 1402,
	151, 1402,
	153, 1402,
	155, 1402,
	156, 1402,
	157, 1402,
	158, 1402,
	159, 1402,
	160, 1402,
	161, 1402,
	162, 1402,
	164, 1402,
	165, 1402,
	167, 1402,
	168, 1402,
	169, 1402,
	170, 1402,
	172, 1402,
	173, 1402,
	176, 1402,
	177, 1402,
	178, 1402,
	179, 1402,
	180, 1402,
	181, 1402,
	182, 1402,
	183, 1402,
	184, 1402,
	185, 1402,
	186, 1402,
	187, 1402,
	188, 1402,
	192, 1402,
	193, 1402,
	194, 1402,
	195, 1402,
	196, 1402,
	198, 1402,
	201, 1402,
	202, 1402,
	204, 1402,
	205, 1402,
	207, 1402,
	209, 1402,
	210, 1402,
	211, 1402,
	212, 1402,
	213, 1402,
	214, 1402,
	216, 1402,
	217, 1402,
	218, 1402,
	219, 1402,
	220, 1402,
	222, 1402,
	223, 1402,
	224, 1402,
	225, 1402,
	226, 1402,
	227, 1402,
	228, 1402,
	229, 1402,
	231, 1402,
	232, 1402,
	233, 1402,
	234, 1402,
	235, 1402,
	236, 1402,
	237, 1402,
	238, 1402,
	239, 1402,
	240, 1402,
	241, 1402,
	242, 1402,
	244, 1402,
	245, 1402,
	246, 1402,
	247, 1402,
	248, 1402,
	249, 1402,
	250, 1402,
	251, 1402,
	252, 1402,
	253, 1402,
	254, 1402,
	256, 1402,
	257, 1402,
	258, 1402,
	259, 1402,
	260, 1402,
	262, 1402,
	263, 1402,
	264, 1402,
	265, 1402,
	266, 1402,
	267, 1402,
	268, 1402,
	269, 1402,
	270, 1402,
	272, 1402,
	273, 1402,
	274, 1402,
	275, 1402,
	276, 1402,
	277, 1402,
	278, 1402,
	279, 1402,
	280, 1402,
	282, 1402,
	284, 1402,
	285, 1402,
	286, 1402,
	287, 1402,
	288, 1402,
	289, 1402,
	290, 1402,
	292, 1402,
	293, 1402,
	294, 1402,
	297, 1402,
	298, 1402,
	299, 1402,
	300, 1402,
	302, 1402,
	303, 1402,
	304, 1402,
	305, 1402,
	308, 1402,
	309, 1402,
	310, 1402,
	311, 1402,
	313, 1402,
	315, 1402,
	316, 1402,
	317, 1402,
	318, 1402,
	319, 1402,
	320, 1402,
	323, 1402,
	328, 1402,
	329, 1402,
	330, 1402,
	331, 1402,
	332, 1402,
	333, 1402,
	334, 1402,
	336, 1402,
	337, 1402,
	338, 1402,
	339, 1402,
	341, 1402,
	342, 1402,
	343, 1402,
	344, 1402,
	345, 1402,
	346, 1402,
	347, 1402,
	348, 1402,
	349, 1402,
	351, 1402,
	354, 1402,
	355, 1402,
	358, 1402,
	359, 1402,
	-2, 0,
	-1, 929,
	123, 1329,
	295, 1329,
	338, 1329,
	355, 1329,
	-2, 0,
	-1, 997,
	112, 663,
	171, 663,
	197, 663,
	-2, 625,
	-1, 1051,
	103, 629,
	112, 629,
	152, 629,
	171, 629,
	197, 629,
	203, 629,
	306, 629,
	-2, 723,
	-1, 1132,
	103, 629,
	112, 629,
	152, 629,
	171, 629,
	197, 629,
	203, 629,
	306, 629,
	-2, 956,
	-1, 1142,
	353, 1157,
	-2, 1145,
	-1, 1159,
	354, 1097,
	-2, 0,
	-1, 1392,
	1, 724,
	70, 724,
	103, 724,
	112, 724,
	124, 724,
	128, 724,
	130, 724,
	143, 724,
	152, 724,
	159, 724,
	168, 724,
	171, 724,
	184, 724,
	197, 724,
	199, 724,
	203, 724,
	243, 724,
	245, 724,
	306, 724,
	314, 724,
	325, 724,
	326, 724,
	335, 724,
	352, 724,
	354, 724,
	356, 724,
	357, 724,
	358, 724,
	-2, 723,
	-1, 1452,
	13, 0,
	14, 0,
	15, 0,
	336, 0,
	337, 0,
	338, 0,
	-2, 872,
	-1, 1453,
	13, 0,
	14, 0,
	15, 0,
	336, 0,
	337, 0,
	338, 0,
	-2, 873,
	-1, 1454,
	13, 0,
	14, 0,
	15, 0,
	336, 0,
	337, 0,
	338, 0,
	-2, 874,
	-1, 1458,
	13, 0,
	14, 0,
	15, 0,
	336, 0,
	337, 0,
	338, 0,
	-2, 878,
	-1, 1459,
	13, 0,
	14, 0,
	15, 0,
	336, 0,
	337, 0,
	338, 0,
	-2, 879,
	-1, 1460,
	13, 0,
	14, 0,
	15, 0,
	336, 0,
	337, 0,
	338, 0,
	-2, 880,
	-1, 1463,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 885,
	-1, 1469,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 887,
	-1, 1471,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 891,
	-1, 1472,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 892,
	-1, 1473,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 893,
	-1, 1474,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 894,
	-1, 1500,
	208, 1039,
	-2, 1042,
	-1, 1542,
	123, 1079,
	353, 1180,
	-2, 1173,
	-1, 1543,
	123, 1080,
	-2, 1346,
	-1, 1544,
	123, 1081,
	-2, 1254,
	-1, 1545,
	123, 1082,
	-2, 1217,
	-1, 1546,
	123, 1083,
	-2, 1234,
	-1, 1547,
	123, 1084,
	-2, 1253,
	-1, 1548,
	123, 1085,
	-2, 1305,
	-1, 1753,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 886,
	-1, 1754,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 888,
	-1, 1759,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 889,
	-1, 1777,
	208, 1038,
	-2, 1041,
	-1, 1987,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 890,
	-1, 1992,
	155, 0,
	-2, 906,
	-1, 2002,
	208, 1040,
	-2, 1043,
	-1, 2044,
	13, 0,
	14, 0,
	15, 0,
	336, 0,
	337, 0,
	338, 0,
	-2, 933,
	-1, 2045,
	13, 0,
	14, 0,
	15, 0,
	336, 0,
	337, 0,
	338, 0,
	-2, 934,
	-1, 2046,
	13, 0,
	14, 0,
	15, 0,
	336, 0,
	337, 0,
	338, 0,
	-2, 935,
	-1, 2050,
	13, 0,
	14, 0,
	15, 0,
	336, 0,
	337, 0,
	338, 0,
	-2, 939,
	-1, 2051,
	13, 0,
	14, 0,
	15, 0,
	336, 0,
	337, 0,
	338, 0,
	-2, 940,
	-1, 2052,
	13, 0,
	14, 0,
	15, 0,
	336, 0,
	337, 0,
	338, 0,
	-2, 941,
	-1, 2172,
	155, 0,
	-2, 907,
	-1, 2175,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 910,
	-1, 2176,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 912,
	-1, 2273,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 911,
	-1, 2274,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 913,
	-1, 2281,
	155, 0,
	-2, 942,
	-1, 2333,
	155, 0,
	-2, 943,
	-1, 2405,
	36, 0,
	137, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 1349,
}

const sqlPrivate = 57344

const sqlLast = 40881

var sqlAct = [...]int{

	789, 2404, 2388, 2357, 2432, 2075, 2248, 2390, 2389, 1621,
	2021, 2403, 2308, 779, 1613, 659, 2085, 1188, 2305, 1593,
	1228, 2131, 2145, 715, 1958, 2213, 787, 1678, 1881, 71,
	1959, 765, 786, 1195, 1883, 782, 1049, 856, 1610, 952,
	172, 1387, 1592, 1208, 172, 1597, 1278, 2228, 443, 25,
	1886, 1708, 172, 1843, 1026, 1045, 1279, 1054, 2111, 1687,
	1596, 172, 1622, 1191, 463, 1032, 1498, 172, 172, 1842,
	1524, 172, 1229, 1912, 172, 1405, 1138, 1388, 1695, 1396,
	1929, 172, 1788, 667, 115, 436, 1353, 1674, 1428, 1305,
	1431, 933, 1662, 461, 1184, 1508, 759, 1486, 1057, 1483,
	1059, 1027, 680, 679, 603, 891, 721, 433, 1518, 902,
	1169, 932, 881, 888, 1571, 1615, 1127, 1538, 758, 724,
	685, 1600, 1374, 1036, 703, 576, 172, 172, 1361, 116,
	1001, 1000, 1173, 1303, 172, 999, 1017, 163, 117, 671,
	453, 781, 598, 878, 1202, 115, 168, 2146, 664, 701,
	1016, 1005, 596, 580, 1943, 1776, 1614, 1944, 663, 676,
	172, 172, 172, 172, 663, 1210, 1210, 172, 172, 1210,
	2429, 2412, 2400, 1046, 1079, 2144, 1636, 38, 2399, 1927,
	2100, 2396, 1636, 25, 173, 1079, 2374, 745, 2350, 1897,
	1643, 718, 2349, 2347, 2339, 2335, 1076, 1079, 2144, 1643,
	658, 1636, 2293, 2290, 2288, 568, 2144, 1079, 2144, 668,
	2275, 2259, 2258, 2236, 1643, 1079, 2144, 1079, 115, 764,
	1898, 1429, 2233, 48, 1082, 1083, 1079, 1102, 1103, 1104,
	1112, 1113, 1114, 2199, 2177, 2174, 1363, 1636, 1636, 1643,
	1105, 2353, 2166, 1650, 1932, 656, 1636, 1085, 464, 1429,
	1116, 1780, 59, 624, 655, 1082, 1083, 1781, 2164, 60,
	2143, 61, 1636, 390, 2144, 2124, 729, 733, 739, 1079,
	2099, 1084, 1650, 1650, 1591, 2094, 705, 1099, 1085, 1591,
	600, 707, 1996, 708, 1932, 63, 1636, 1082, 1083, 1939,
	1870, 1860, 1858, 1940, 1079, 1861, 1636, 1857, 1362, 1856,
	1779, 1636, 1084, 1636, 686, 1777, 1636, 1711, 1099, 1636,
	1085, 1636, 1684, 1636, 1652, 1921, 1079, 1642, 1636, 1787,
	2057, 1643, 1635, 1999, 1813, 1814, 1636, 1831, 1832, 1833,
	1394, 1590, 1090, 1368, 1084, 1591, 1222, 1367, 1079, 1871,
	1223, 1082, 1083, 1677, 1102, 1103, 1104, 1112, 1113, 1114,
	1660, 1109, 1117, 722, 1287, 1502, 1021, 1105, 1211, 1211,
	743, 131, 1211, 1090, 1085, 911, 134, 1116, 2147, 1115,
	909, 99, 908, 907, 1082, 1083, 906, 1828, 905, 731,
	735, 709, 741, 706, 1107, 651, 650, 682, 1084, 133,
	649, 1100, 622, 621, 1099, 1090, 620, 1085, 172, 619,
	172, 172, 618, 172, 617, 616, 615, 614, 172, 131,
	613, 612, 611, 1664, 172, 610, 1106, 609, 608, 99,
	131, 1084, 1100, 131, 607, 132, 606, 172, 172, 172,
	172, 172, 1819, 125, 591, 590, 685, 133, 1082, 1083,
	126, 589, 424, 423, 422, 421, 1813, 1814, 133, 1090,
	895, 133, 1618, 749, 1100, 1897, 420, 405, 404, 118,
	38, 1085, 1703, 396, 1101, 664, 395, 394, 1109, 1117,
	666, 1362, 1521, 132, 1309, 1216, 1209, 1535, 393, 1337,
	1110, 125, 1090, 386, 132, 1084, 1115, 132, 126, 385,
	157, 1829, 125, 156, 155, 1101, 154, 153, 152, 126,
	151, 1107, 860, 150, 149, 864, 48, 118, 1100, 148,
	1533, 147, 1043, 146, 145, 144, 143, 142, 118, 1522,
	880, 118, 141, 140, 1531, 139, 138, 1101, 38, 137,
	136, 884, 884, 1106, 135, 59, 947, 2422, 903, 855,
	885, 1100, 60, 2402, 61, 2395, 1090, 1108, 2362, 1050,
	1096, 1097, 1098, 1111, 1819, 1095, 1093, 1094, 1086, 1087,
	1088, 1089, 1091, 1092, 1830, 1523, 1520, 2330, 63, 1012,
	2291, 2204, 2201, 2200, 48, 2220, 2192, 2191, 2190, 172,
	2186, 1101, 2185, 2184, 2183, 2110, 1095, 1093, 1094, 1086,
	1087, 1088, 1089, 1091, 1092, 2103, 172, 1110, 2072, 1873,
	2067, 2066, 2065, 59, 2007, 685, 1869, 1865, 1862, 1850,
	60, 1841, 61, 1829, 1101, 1812, 1809, 1808, 131, 1806,
	686, 1086, 1087, 1088, 1089, 1091, 1092, 685, 1793, 1792,
	1715, 1494, 1012, 735, 1392, 1146, 63, 716, 1048, 1139,
	1525, 1130, 2311, 1011, 676, 1047, 133, 1194, 741, 2023,
	1825, 1826, 1827, 172, 853, 1824, 1822, 1823, 1815, 1816,
	1817, 1818, 1820, 1821, 1108, 2375, 749, 1096, 1097, 1098,
	1111, 998, 1095, 1093, 1094, 1086, 1087, 1088, 1089, 1091,
	1092, 2342, 132, 950, 1910, 2329, 1830, 2328, 2327, 1855,
	125, 2319, 131, 2317, 943, 2303, 1324, 126, 2283, 2245,
	2226, 172, 99, 172, 2207, 1095, 1093, 1094, 1086, 1087,
	1088, 1089, 1091, 1092, 2197, 2150, 1617, 1519, 2083, 2081,
	133, 2080, 2078, 131, 683, 1673, 172, 172, 1991, 2219,
	1967, 1966, 1025, 1672, 930, 920, 1495, 1947, 997, 1648,
	1935, 1840, 1802, 685, 172, 1801, 1798, 1773, 927, 1768,
	463, 133, 1488, 1746, 1741, 664, 132, 1728, 1727, 996,
	131, 1713, 1683, 1174, 125, 1177, 1030, 1583, 1082, 1083,
	99, 126, 1086, 1087, 1088, 1089, 1091, 1092, 1529, 948,
	1815, 1816, 1817, 1818, 1820, 1821, 1379, 132, 133, 686,
	118, 1085, 1187, 664, 1181, 125, 1167, 656, 1166, 1077,
	1165, 1164, 126, 1163, 115, 1162, 655, 1161, 2225, 1701,
	1160, 686, 1728, 1008, 1009, 1084, 1159, 1158, 1157, 1156,
	1155, 118, 1154, 1153, 132, 1152, 1020, 1151, 1044, 1534,
	1813, 1814, 125, 1150, 1143, 1131, 1130, 717, 1024, 126,
	926, 915, 1018, 1080, 899, 1052, 2179, 2102, 1082, 1083,
	1942, 1938, 1022, 1645, 1380, 172, 942, 1139, 118, 1048,
	1908, 1128, 1532, 1067, 940, 1813, 1814, 172, 1831, 1832,
	1833, 1085, 735, 172, 2352, 172, 1530, 172, 1884, 847,
	2223, 172, 1193, 1065, 854, 1945, 1899, 1429, 1050, 1556,
	1078, 1813, 1814, 1186, 1179, 1084, 1813, 1814, 1864, 1180,
	1066, 1293, 922, 1863, 1752, 939, 1148, 941, 1192, 1913,
	2229, 172, 1614, 685, 2024, 1509, 1170, 685, 1828, 172,
	990, 1893, 1142, 1954, 1784, 172, 1060, 686, 1061, 1213,
	2365, 1199, 1215, 2419, 464, 1171, 1172, 1060, 1819, 1061,
	662, 685, 685, 2346, 2420, 722, 1055, 1918, 463, 1521,
	2158, 1235, 1653, 696, 2269, 172, 1090, 1048, 2268, 991,
	172, 1175, 698, 694, 692, 172, 172, 846, 172, 1226,
	172, 1178, 172, 1819, 172, 1302, 2267, 2266, 1982, 880,
	676, 676, 689, 1145, 982, 172, 794, 398, 717, 661,
	1980, 172, 172, 1835, 410, 1951, 1522, 1950, 1797, 1819,
	1796, 1398, 1795, 1062, 1794, 1297, 1296, 1978, 682, 677,
	1834, 1398, 158, 1755, 1062, 1639, 1201, 1397, 1470, 425,
	172, 1204, 172, 1425, 434, 172, 1421, 1419, 940, 1909,
	1019, 1294, 1829, 742, 2169, 1587, 1586, 1441, 172, 1336,
	663, 1310, 1523, 1520, 1360, 38, 411, 463, 1224, 1611,
	172, 1060, 1225, 1061, 172, 1335, 1280, 172, 912, 1311,
	1985, 172, 2345, 115, 1334, 172, 1285, 1281, 402, 653,
	172, 941, 1485, 2074, 1185, 1306, 172, 463, 1866, 1299,
	172, 1298, 1381, 664, 1182, 463, 1314, 1325, 1485, 2381,
	1300, 48, 735, 161, 1203, 1371, 1203, 686, 2435, 976,
	429, 686, 1318, 1205, 2250, 1830, 1399, 1092, 925, 1492,
	1525, 1969, 2426, 2371, 1490, 1417, 1887, 1525, 1235, 1235,
	59, 1423, 2392, 1675, 1676, 686, 686, 60, 1062, 61,
	955, 1339, 464, 1340, 1338, 656, 977, 2372, 656, 656,
	1382, 1410, 1412, 660, 1349, 1357, 1358, 1350, 1351, 1509,
	162, 1748, 1739, 63, 1272, 1432, 1439, 428, 1743, 1366,
	664, 2419, 1372, 1376, 1377, 664, 1817, 1818, 1820, 1821,
	1427, 1415, 1070, 1052, 1301, 1646, 1420, 1891, 1440, 2441,
	1186, 1426, 1402, 1068, 1088, 1089, 1091, 1092, 172, 2322,
	1917, 1825, 1826, 1827, 1519, 172, 1824, 1822, 1823, 1815,
	1816, 1817, 1818, 1820, 1821, 1282, 172, 1333, 172, 2393,
	172, 413, 412, 172, 1919, 172, 1506, 172, 172, 172,
	172, 1887, 1063, 1210, 685, 1815, 1816, 1817, 1818, 1820,
	1821, 464, 921, 1063, 1406, 1821, 2433, 1976, 936, 1634,
	1315, 2017, 2014, 1496, 1493, 1168, 1319, 1395, 1320, 690,
	1321, 1616, 1322, 1616, 1323, 700, 2425, 722, 699, 690,
	691, 464, 582, 419, 583, 2394, 1058, 454, 397, 464,
	1606, 1329, 1331, 722, 1549, 1970, 1393, 131, 690, 981,
	583, 2279, 584, 414, 735, 2287, 1125, 99, 2015, 735,
	459, 2434, 403, 159, 1391, 741, 455, 399, 584, 1800,
	427, 1375, 1409, 663, 937, 133, 115, 400, 938, 2104,
	463, 115, 2436, 1641, 1628, 2251, 1525, 884, 172, 884,
	1620, 1757, 1631, 456, 1074, 1629, 903, 1630, 387, 430,
	1637, 1632, 160, 1638, 172, 172, 172, 1484, 172, 426,
	1073, 132, 458, 585, 1647, 683, 678, 1063, 1313, 125,
	654, 956, 989, 2106, 963, 2424, 126, 172, 1491, 585,
	1071, 2391, 2418, 1525, 172, 463, 2416, 1649, 2212, 924,
	172, 172, 2442, 1608, 172, 435, 1685, 1072, 918, 172,
	910, 1691, 172, 1004, 1751, 1172, 1171, 1286, 957, 849,
	172, 954, 1481, 1175, 2261, 1178, 172, 172, 172, 1654,
	38, 1408, 172, 1661, 949, 172, 583, 1479, 686, 2053,
	115, 172, 172, 172, 172, 172, 1211, 1704, 2446, 2260,
	172, 1689, 172, 1705, 584, 1625, 172, 1693, 1694, 1714,
	1765, 1699, 2243, 1692, 1665, 2314, 741, 741, 2195, 1235,
	1667, 848, 1035, 586, 1669, 1763, 48, 1721, 1671, 2013,
	2358, 1003, 1953, 457, 1039, 1292, 1700, 1724, 1690, 586,
	1574, 774, 1467, 2157, 1686, 1740, 1720, 1609, 1656, 2154,
	2156, 1745, 1200, 1042, 1189, 59, 1725, 415, 1475, 1658,
	1003, 1709, 60, 388, 61, 585, 1476, 1407, 1477, 1373,
	1345, 1328, 1482, 1288, 464, 1716, 1039, 858, 1040, 1290,
	1659, 169, 857, 2054, 931, 391, 986, 460, 63, 2055,
	1002, 1291, 1657, 406, 1738, 1042, 1760, 416, 664, 581,
	2445, 587, 431, 165, 2086, 2214, 1761, 1786, 566, 169,
	1766, 1037, 574, 2244, 1730, 579, 1004, 587, 2196, 1002,
	1040, 936, 605, 1729, 1681, 1698, 417, 1710, 418, 464,
	389, 964, 588, 1666, 741, 1668, 1038, 735, 1370, 1369,
	936, 1346, 571, 1465, 1468, 565, 1758, 1756, 588, 2153,
	2155, 1697, 987, 877, 875, 1041, 1682, 661, 866, 2076,
	2205, 1750, 2112, 722, 2241, 586, 1772, 704, 704, 722,
	722, 664, 172, 722, 3, 391, 1464, 1930, 1478, 448,
	33, 2282, 172, 1783, 172, 1480, 172, 937, 2242, 172,
	1528, 938, 2194, 172, 688, 1717, 1844, 1041, 172, 985,
	172, 391, 391, 737, 391, 988, 1990, 172, 169, 746,
	1984, 1235, 131, 447, 32, 1872, 1762, 1874, 974, 1742,
	172, 685, 99, 1764, 444, 29, 791, 664, 446, 17,
	1867, 685, 172, 1875, 972, 1807, 1878, 1767, 936, 1651,
	133, 685, 2139, 587, 970, 1640, 1889, 747, 1725, 1813,
	1814, 1895, 748, 1901, 1902, 968, 1903, 440, 13, 1235,
	1082, 1083, 172, 1847, 1848, 1849, 1696, 1906, 966, 960,
	744, 1589, 1466, 873, 588, 980, 132, 2140, 1424, 172,
	676, 1418, 994, 1085, 125, 172, 993, 1914, 916, 1845,
	1876, 126, 1892, 1326, 172, 172, 1907, 570, 442, 16,
	564, 1900, 1828, 1317, 937, 876, 874, 1084, 938, 727,
	118, 1149, 1905, 1948, 33, 1527, 2139, 693, 695, 2132,
	984, 2387, 1965, 2355, 1915, 1916, 1941, 2130, 1946, 2128,
	1920, 2134, 1974, 1972, 1952, 1964, 1937, 1922, 1923, 973,
	1880, 1963, 441, 14, 1925, 439, 12, 115, 32, 1928,
	1612, 2140, 1933, 1934, 1882, 971, 1931, 1819, 1973, 29,
	1975, 445, 10, 17, 1605, 969, 438, 8, 1090, 1993,
	437, 4, 1949, 2133, 1219, 1266, 967, 2135, 1218, 2136,
	1217, 172, 1956, 1214, 1235, 2009, 2010, 2011, 1212, 965,
	959, 1868, 13, 979, 872, 845, 1075, 1069, 1064, 1977,
	2004, 2298, 2420, 1983, 1308, 686, 563, 2300, 1879, 2138,
	1414, 712, 1006, 1221, 2093, 686, 1829, 1185, 2141, 2324,
	1235, 1235, 1398, 2000, 1679, 686, 1185, 1100, 1413, 1235,
	1235, 713, 958, 16, 1398, 2147, 449, 1422, 2003, 605,
	1411, 862, 605, 2332, 867, 2113, 2016, 2018, 2019, 870,
	1010, 2135, 172, 2136, 172, 391, 1416, 1432, 2028, 465,
	2030, 172, 1235, 1265, 685, 2025, 1432, 2033, 605, 605,
	391, 892, 746, 2354, 2082, 2027, 2060, 14, 172, 172,
	12, 1926, 1234, 2138, 2032, 1007, 1680, 2079, 2210, 1830,
	1619, 2095, 2141, 2061, 1607, 2137, 10, 2087, 722, 2064,
	1101, 8, 172, 2088, 714, 4, 572, 1604, 463, 1082,
	1083, 1359, 2077, 172, 1284, 687, 172, 1227, 2439, 2235,
	2444, 2092, 2090, 1813, 1814, 2118, 463, 172, 172, 2089,
	2101, 172, 172, 172, 2108, 2116, 1689, 1035, 2097, 2073,
	2096, 2020, 1266, 1266, 1014, 2098, 2181, 2123, 172, 1082,
	1083, 1014, 1013, 172, 1911, 172, 1084, 172, 172, 172,
	1965, 172, 1859, 172, 2148, 685, 1706, 2152, 2122, 2137,
	2114, 2151, 2115, 1964, 2117, 2119, 1588, 1585, 2127, 1963,
	1824, 1822, 1823, 1815, 1816, 1817, 1818, 1820, 1821, 1082,
	1083, 1039, 2173, 1094, 1086, 1087, 1088, 1089, 1091, 1092,
	1584, 2109, 1517, 1136, 172, 1015, 2384, 1235, 2306, 2012,
	1042, 2168, 1085, 1877, 1146, 1144, 992, 983, 978, 2120,
	919, 975, 961, 923, 652, 2249, 1037, 452, 1316, 962,
	1265, 1265, 1702, 1378, 2370, 1040, 1084, 605, 2187, 1799,
	2307, 2278, 1526, 1147, 52, 1961, 768, 2129, 686, 1234,
	1234, 1038, 1955, 1599, 1598, 466, 1295, 790, 670, 1540,
	1433, 172, 172, 850, 2193, 792, 1232, 793, 685, 1233,
	1176, 780, 1965, 1230, 900, 1623, 1489, 1965, 1507, 1782,
	2208, 685, 1140, 2206, 760, 1964, 772, 771, 2211, 1504,
	1964, 1963, 464, 914, 391, 1707, 1963, 1625, 722, 1890,
	2218, 2215, 1344, 1670, 2209, 1341, 1971, 2216, 2217, 172,
	464, 172, 1041, 463, 172, 401, 1810, 2227, 898, 1563,
	1555, 1551, 172, 2221, 995, 1031, 2222, 1126, 463, 1624,
	946, 1896, 722, 1644, 2234, 1023, 1352, 2224, 1965, 711,
	710, 1594, 579, 2232, 704, 944, 1289, 1655, 1119, 686,
	1118, 1964, 697, 2253, 2237, 2252, 2255, 1963, 2316, 935,
	934, 1190, 1723, 2271, 1186, 2440, 2323, 391, 391, 1968,
	2364, 130, 127, 129, 1235, 128, 2161, 2351, 2277, 2304,
	2165, 2270, 1749, 2264, 2265, 169, 79, 31, 30, 98,
	97, 96, 95, 172, 94, 93, 685, 92, 2284, 91,
	172, 1965, 750, 851, 1134, 90, 2239, 89, 88, 87,
	172, 2263, 2289, 1235, 1964, 172, 86, 85, 84, 2299,
	1963, 2254, 172, 83, 82, 81, 2297, 2301, 601, 2295,
	78, 687, 77, 76, 2318, 2296, 75, 28, 24, 2292,
	2312, 102, 23, 21, 22, 27, 752, 172, 172, 26,
	19, 18, 686, 2321, 15, 2313, 2310, 9, 20, 2320,
	57, 58, 56, 1266, 55, 686, 54, 11, 172, 50,
	49, 47, 46, 45, 2331, 2338, 685, 2340, 1813, 1814,
	2341, 172, 44, 7, 2334, 1268, 101, 41, 40, 6,
	100, 5, 113, 110, 2344, 112, 391, 464, 172, 1235,
	172, 109, 111, 172, 114, 463, 1813, 1814, 1198, 1831,
	1832, 1833, 464, 664, 391, 2343, 391, 106, 391, 2360,
	107, 108, 1206, 105, 2376, 104, 2377, 2378, 2361, 37,
	36, 35, 34, 2, 172, 1, 1965, 1267, 0, 0,
	1220, 2247, 2382, 0, 0, 2386, 2385, 2379, 2383, 1964,
	2380, 1265, 169, 1769, 1770, 1963, 172, 0, 0, 1828,
	169, 2397, 172, 2411, 2409, 2401, 605, 1283, 172, 0,
	1234, 2413, 0, 0, 0, 2410, 0, 2415, 913, 2417,
	686, 2421, 0, 0, 917, 0, 1819, 2423, 0, 0,
	0, 1813, 1814, 0, 0, 0, 605, 0, 2366, 2430,
	687, 605, 0, 0, 2438, 2437, 169, 605, 2431, 605,
	0, 605, 2294, 605, 1819, 605, 2443, 0, 0, 0,
	0, 2447, 687, 0, 0, 0, 1327, 0, 1836, 1837,
	1838, 0, 605, 605, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1829, 0, 0, 0, 0,
	0, 1834, 1268, 1268, 0, 1266, 0, 0, 0, 0,
	686, 579, 0, 704, 0, 0, 746, 0, 0, 0,
	0, 0, 0, 1829, 0, 0, 0, 0, 0, 391,
	0, 0, 0, 0, 0, 0, 0, 2337, 1385, 464,
	0, 1390, 0, 0, 0, 391, 0, 0, 391, 1819,
	0, 0, 1403, 1266, 1267, 1267, 391, 0, 0, 0,
	0, 391, 0, 0, 0, 0, 0, 391, 1830, 0,
	0, 1430, 2363, 0, 1028, 1028, 0, 0, 0, 0,
	0, 1033, 0, 0, 573, 0, 0, 0, 687, 0,
	0, 0, 1231, 1265, 0, 465, 1830, 0, 0, 0,
	0, 0, 0, 0, 451, 1082, 1083, 0, 1829, 0,
	0, 0, 1234, 0, 0, 0, 0, 1120, 1121, 1122,
	1123, 1124, 1499, 0, 0, 0, 1134, 1133, 1085, 0,
	1503, 1625, 0, 0, 1511, 0, 0, 1141, 0, 0,
	0, 1265, 0, 0, 0, 0, 1541, 1541, 1554, 0,
	1566, 454, 1084, 0, 0, 0, 1578, 1579, 1581, 0,
	1234, 1823, 1815, 1816, 1817, 1818, 1820, 1821, 0, 0,
	0, 0, 0, 0, 459, 0, 1988, 1989, 1266, 1595,
	455, 1830, 1825, 1826, 1827, 0, 746, 1824, 1822, 1823,
	1815, 1816, 1817, 1818, 1820, 1821, 0, 391, 0, 1627,
	0, 605, 0, 0, 605, 0, 605, 456, 391, 391,
	1633, 746, 0, 1090, 1266, 1266, 0, 0, 0, 0,
	0, 0, 0, 1266, 1266, 0, 458, 0, 0, 0,
	0, 0, 0, 0, 0, 2034, 2035, 2036, 2037, 2038,
	2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048,
	2049, 2050, 2051, 2052, 0, 2056, 1266, 0, 687, 1231,
	1231, 0, 687, 0, 0, 0, 1265, 0, 0, 0,
	0, 0, 1100, 1822, 1823, 1815, 1816, 1817, 1818, 1820,
	1821, 0, 0, 0, 0, 1234, 687, 687, 0, 0,
	0, 0, 0, 465, 0, 0, 0, 0, 0, 0,
	0, 0, 1265, 1265, 0, 0, 0, 0, 0, 1663,
	0, 1265, 1265, 1813, 1814, 0, 0, 0, 0, 0,
	0, 1234, 1234, 1268, 0, 391, 391, 391, 0, 391,
	1234, 1234, 0, 0, 0, 0, 0, 457, 0, 0,
	0, 0, 0, 0, 1265, 1101, 0, 0, 391, 0,
	0, 0, 0, 0, 0, 391, 0, 0, 0, 0,
	0, 391, 391, 1234, 0, 391, 1342, 0, 1347, 0,
	1390, 0, 0, 1390, 1354, 1267, 0, 0, 0, 0,
	0, 1712, 0, 0, 0, 0, 0, 391, 1718, 1719,
	0, 460, 465, 1403, 0, 0, 1726, 0, 0, 0,
	0, 1266, 1731, 1732, 1734, 1736, 1737, 0, 0, 0,
	0, 391, 0, 1744, 0, 0, 450, 1747, 0, 0,
	0, 1819, 465, 0, 0, 0, 0, 0, 0, 0,
	465, 769, 72, 0, 0, 0, 451, 1093, 1094, 1086,
	1087, 1088, 1089, 1091, 1092, 0, 0, 0, 0, 0,
	1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451,
	1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461,
	1462, 1463, 0, 1469, 0, 1471, 1472, 1473, 1474, 1771,
	1829, 0, 0, 454, 0, 0, 1774, 0, 0, 1265,
	0, 0, 1497, 72, 0, 0, 0, 0, 0, 1133,
	0, 0, 0, 0, 1790, 1791, 459, 0, 1234, 0,
	0, 0, 455, 0, 0, 1268, 0, 1536, 1537, 0,
	0, 1553, 0, 1565, 1567, 1572, 1575, 1576, 1577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 456,
	0, 0, 0, 0, 0, 0, 0, 657, 0, 0,
	665, 0, 1839, 1830, 0, 0, 0, 0, 458, 0,
	2246, 0, 0, 1268, 1852, 723, 72, 1267, 1266, 687,
	0, 1813, 1814, 0, 1831, 1832, 1833, 0, 0, 0,
	1231, 0, 0, 391, 0, 0, 0, 2171, 0, 0,
	0, 0, 0, 1198, 0, 1198, 0, 605, 0, 0,
	391, 0, 0, 0, 1885, 0, 0, 1266, 0, 391,
	0, 1894, 0, 0, 2281, 1267, 0, 0, 391, 0,
	0, 0, 0, 0, 1828, 0, 0, 0, 0, 0,
	0, 1663, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1663, 1824, 1822, 1823, 1815, 1816, 1817,
	1818, 1820, 1821, 0, 0, 465, 1265, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 457,
	0, 0, 0, 391, 0, 1234, 0, 0, 0, 1819,
	0, 0, 0, 0, 0, 0, 0, 0, 1268, 0,
	391, 0, 0, 1266, 0, 1265, 1390, 0, 0, 0,
	0, 0, 2333, 0, 0, 746, 1390, 0, 0, 0,
	465, 0, 0, 0, 1234, 0, 1834, 0, 0, 0,
	1960, 0, 0, 460, 1268, 1268, 1028, 0, 0, 0,
	0, 1033, 1979, 1268, 1268, 0, 0, 1981, 1829, 0,
	1267, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1997, 0, 1268, 0, 0, 0,
	0, 0, 1231, 0, 0, 0, 1267, 1267, 0, 0,
	0, 1265, 0, 0, 0, 1267, 1267, 0, 0, 0,
	0, 0, 2022, 0, 0, 0, 0, 0, 0, 0,
	1234, 1348, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1830, 0, 0, 0, 0, 0, 0, 1267, 0,
	1231, 0, 0, 0, 0, 0, 0, 0, 1753, 1754,
	0, 2058, 0, 0, 1759, 0, 0, 0, 0, 0,
	0, 0, 2068, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1403, 0, 1198, 1778, 665, 0, 0,
	0, 0, 2084, 1785, 0, 0, 1789, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 391,
	391, 0, 0, 1803, 0, 0, 0, 1825, 1826, 1827,
	0, 0, 1824, 1822, 1823, 1815, 1816, 1817, 1818, 1820,
	1821, 1268, 0, 2105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 391, 1133, 0, 746, 0, 0,
	0, 0, 1572, 1572, 1572, 0, 0, 0, 1390, 746,
	0, 0, 2125, 2126, 1403, 1231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1557, 0, 0, 1960, 746,
	0, 0, 0, 1267, 2159, 0, 2160, 0, 391, 2162,
	2163, 0, 391, 0, 2167, 0, 0, 0, 1888, 0,
	0, 1231, 1231, 0, 0, 0, 687, 0, 0, 0,
	1231, 1231, 0, 0, 0, 0, 687, 0, 0, 0,
	1904, 0, 0, 0, 0, 0, 687, 0, 0, 0,
	0, 0, 0, 0, 0, 2188, 0, 0, 0, 0,
	0, 0, 0, 1231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1924, 0, 0, 0,
	0, 1354, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1936, 0, 0, 0, 0, 0, 0, 0, 0,
	1960, 0, 746, 1595, 0, 1960, 0, 0, 1268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1957, 0, 0, 0, 0, 0, 0, 0, 657,
	0, 0, 0, 0, 2231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1986, 1268, 0, 1987,
	1403, 0, 2238, 0, 0, 2240, 0, 0, 0, 0,
	1267, 1992, 0, 391, 0, 0, 1960, 0, 0, 0,
	2001, 2257, 0, 0, 0, 0, 0, 0, 2005, 0,
	0, 1904, 72, 0, 0, 0, 0, 1051, 0, 0,
	0, 2272, 0, 0, 0, 0, 0, 0, 1231, 1267,
	0, 2029, 0, 0, 0, 2031, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1129, 0, 1132, 0, 0, 0, 1960,
	0, 0, 1137, 1268, 391, 0, 0, 0, 2062, 2063,
	0, 746, 0, 0, 0, 0, 0, 2069, 2070, 2071,
	0, 2309, 0, 0, 0, 0, 1390, 0, 0, 687,
	0, 0, 0, 1198, 0, 0, 0, 0, 0, 0,
	0, 1082, 1083, 0, 0, 0, 0, 1112, 1113, 1114,
	0, 1028, 0, 0, 0, 1267, 0, 0, 2325, 2326,
	0, 0, 0, 1033, 1085, 0, 0, 1116, 0, 0,
	0, 0, 0, 465, 0, 0, 0, 0, 0, 391,
	1557, 1557, 0, 0, 0, 0, 0, 0, 1084, 0,
	0, 465, 2348, 0, 1099, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2359,
	0, 746, 0, 0, 391, 0, 0, 0, 2367, 2368,
	2369, 0, 0, 2373, 0, 0, 2149, 0, 0, 0,
	687, 0, 0, 0, 1960, 1231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2309, 0, 0, 0, 1090,
	0, 0, 0, 0, 2172, 1557, 1557, 1557, 2175, 2176,
	0, 0, 0, 2178, 0, 0, 0, 746, 1109, 1117,
	2180, 0, 2182, 391, 1231, 0, 0, 0, 0, 2414,
	0, 0, 0, 0, 0, 0, 0, 0, 2189, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1107, 0, 0, 0, 0, 0, 0, 1100, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2198, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 687, 0, 0, 0, 657, 0, 0,
	657, 657, 0, 0, 0, 0, 687, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1231, 0, 0, 0, 0, 0, 0, 0, 0, 723,
	0, 0, 0, 0, 0, 0, 2230, 0, 465, 0,
	0, 1101, 0, 0, 0, 1051, 0, 0, 0, 0,
	0, 0, 0, 465, 0, 0, 0, 1110, 72, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2262, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2273, 2274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1487,
	0, 0, 0, 1557, 1557, 0, 0, 0, 0, 0,
	0, 687, 665, 0, 1108, 2286, 0, 1132, 0, 0,
	1111, 0, 1095, 1093, 1094, 1086, 1087, 1088, 1089, 1091,
	1092, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2315,
	0, 0, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557,
	1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557,
	1557, 0, 1557, 0, 72, 0, 72, 0, 0, 1082,
	1083, 687, 1102, 1103, 1104, 1112, 1113, 1114, 0, 0,
	0, 0, 0, 0, 72, 1105, 0, 0, 0, 72,
	0, 0, 1085, 0, 0, 1116, 0, 1033, 0, 0,
	465, 1813, 1814, 0, 1831, 1832, 1833, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1084, 2170, 0, 0,
	1082, 1083, 1099, 1102, 1103, 1104, 1112, 1113, 1114, 0,
	0, 0, 0, 0, 0, 0, 1105, 0, 0, 0,
	0, 0, 0, 1085, 0, 0, 1116, 0, 0, 0,
	0, 0, 0, 0, 1828, 0, 0, 0, 0, 2398,
	0, 0, 0, 0, 0, 2408, 2408, 1084, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 1090, 0, 0,
	0, 0, 0, 0, 0, 0, 1813, 1814, 72, 1831,
	1832, 1833, 0, 0, 0, 0, 1109, 1117, 0, 2408,
	0, 0, 1995, 0, 0, 0, 0, 0, 0, 1819,
	0, 0, 0, 0, 1115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 723, 0, 0, 1090, 1107,
	0, 723, 723, 2408, 0, 723, 1100, 0, 0, 1828,
	0, 0, 0, 0, 0, 0, 1834, 1109, 1117, 0,
	0, 1082, 1083, 0, 1102, 1103, 1104, 1112, 1113, 1114,
	0, 1106, 0, 0, 0, 1115, 0, 0, 1829, 0,
	0, 0, 0, 0, 1085, 0, 0, 1116, 72, 0,
	1107, 0, 0, 0, 72, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 1819, 0, 0, 0, 1084, 0,
	0, 0, 0, 0, 1099, 0, 0, 0, 0, 1101,
	0, 0, 1106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1110, 0, 0, 0, 0,
	1487, 1834, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1830, 0, 0, 0, 0, 0, 0, 0, 0,
	1132, 0, 0, 1829, 0, 0, 0, 0, 0, 1090,
	1101, 0, 0, 0, 0, 0, 0, 1557, 0, 0,
	0, 0, 0, 0, 0, 0, 1110, 0, 1109, 1117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1108, 0, 0, 1096, 1097, 1098, 1111, 0,
	1095, 1093, 1094, 1086, 1087, 1088, 1089, 1091, 1092, 0,
	0, 1107, 0, 0, 0, 0, 0, 1854, 1100, 0,
	0, 1557, 0, 1132, 0, 0, 1830, 1825, 1826, 1827,
	0, 0, 1824, 1822, 1823, 1815, 1816, 1817, 1818, 1820,
	1821, 0, 0, 1108, 0, 0, 1096, 1097, 1098, 1111,
	0, 1095, 1093, 1094, 1086, 1087, 1088, 1089, 1091, 1092,
	0, 0, 0, 0, 0, 0, 72, 0, 1853, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 665,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1110, 0, 1557,
	0, 0, 1825, 1826, 1827, 0, 0, 1824, 1822, 1823,
	1815, 1816, 1817, 1818, 1820, 1821, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	723, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1108, 0, 0, 1096, 1097, 1098,
	1111, 0, 1095, 1093, 1094, 1086, 1087, 1088, 1089, 1091,
	1092, 0, 0, 0, 0, 0, 1516, 0, 788, 777,
	778, 775, 776, 767, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 1513, 176, 0, 0,
	0, 0, 805, 770, 0, 0, 0, 177, 178, 179,
	330, 820, 332, 821, 180, 822, 823, 0, 181, 336,
	337, 182, 183, 773, 804, 824, 825, 340, 0, 184,
	816, 0, 796, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 468, 194, 192, 193, 0, 797,
	798, 800, 0, 799, 801, 195, 196, 392, 197, 826,
	198, 827, 828, 0, 199, 0, 200, 0, 201, 1514,
	0, 819, 203, 0, 204, 0, 0, 0, 761, 205,
	206, 207, 806, 807, 784, 0, 0, 208, 209, 829,
	830, 831, 0, 210, 0, 211, 0, 0, 469, 0,
	212, 817, 0, 352, 0, 213, 214, 215, 216, 813,
	815, 471, 0, 220, 0, 217, 0, 470, 218, 832,
	219, 833, 834, 835, 836, 837, 0, 795, 0, 472,
	221, 222, 223, 473, 224, 225, 226, 0, 228, 227,
	723, 818, 474, 229, 475, 0, 230, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 363, 236, 476, 238,
	239, 241, 240, 756, 0, 785, 814, 242, 838, 243,
	244, 0, 245, 0, 723, 246, 0, 0, 247, 366,
	477, 248, 478, 808, 249, 250, 251, 252, 253, 0,
	254, 809, 255, 369, 256, 0, 257, 258, 259, 260,
	261, 839, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 479,
	277, 278, 762, 279, 0, 283, 284, 285, 286, 0,
	288, 372, 287, 289, 290, 802, 291, 280, 281, 292,
	480, 293, 840, 374, 294, 0, 300, 295, 296, 282,
	297, 299, 841, 298, 810, 0, 301, 0, 302, 303,
	304, 305, 306, 307, 308, 0, 377, 842, 843, 0,
	0, 309, 310, 811, 812, 783, 311, 312, 313, 314,
	0, 0, 315, 316, 317, 318, 803, 319, 0, 382,
	320, 321, 322, 383, 844, 1512, 0, 323, 0, 0,
	0, 0, 324, 325, 326, 327, 328, 757, 0, 0,
	0, 0, 0, 755, 0, 0, 0, 0, 753, 754,
	1515, 0, 0, 0, 0, 0, 0, 763, 1510, 0,
	0, 0, 0, 766, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 481, 176, 482, 483, 484, 485,
	329, 486, 487, 488, 489, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 490, 181, 336, 337, 182,
	183, 491, 492, 338, 339, 340, 493, 184, 341, 494,
	467, 495, 185, 186, 187, 1132, 188, 496, 189, 190,
	191, 497, 468, 194, 192, 193, 498, 499, 501, 500,
	502, 503, 504, 195, 196, 392, 197, 342, 198, 343,
	344, 505, 199, 506, 200, 507, 201, 508, 509, 202,
	203, 510, 204, 511, 0, 512, 345, 205, 206, 207,
	346, 347, 513, 514, 515, 208, 209, 348, 349, 350,
	0, 210, 516, 211, 517, 518, 469, 519, 212, 351,
	520, 352, 521, 213, 214, 215, 216, 353, 354, 471,
	522, 220, 523, 217, 524, 470, 218, 355, 219, 356,
	357, 358, 359, 360, 525, 361, 526, 472, 221, 222,
	223, 473, 224, 225, 226, 527, 228, 227, 528, 362,
	474, 229, 475, 529, 230, 231, 530, 531, 232, 0,
	233, 234, 235, 237, 363, 236, 476, 238, 239, 241,
	240, 532, 533, 534, 364, 242, 365, 243, 244, 535,
	245, 536, 537, 246, 538, 539, 247, 366, 477, 248,
	478, 367, 249, 250, 251, 252, 253, 540, 254, 368,
	255, 369, 256, 541, 257, 258, 259, 260, 261, 370,
	262, 263, 542, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 543, 276, 479, 277, 278,
	371, 279, 0, 283, 284, 285, 286, 544, 288, 372,
	287, 289, 290, 545, 291, 280, 281, 292, 480, 293,
	373, 374, 294, 546, 300, 295, 296, 282, 297, 299,
	375, 298, 376, 547, 301, 548, 302, 303, 304, 305,
	306, 307, 308, 549, 377, 378, 379, 550, 551, 309,
	310, 380, 381, 552, 311, 312, 313, 314, 553, 554,
	315, 316, 317, 318, 555, 319, 556, 382, 320, 321,
	322, 383, 384, 557, 558, 323, 559, 560, 561, 562,
	324, 325, 326, 327, 328, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 462, 0, 0,
	0, 0, 0, 1383, 0, 0, 0, 0, 0, 0,
	0, 0, 1384, 174, 175, 481, 176, 482, 483, 484,
	485, 329, 486, 487, 488, 489, 177, 178, 179, 330,
	331, 332, 333, 180, 334, 335, 490, 181, 336, 337,
	182, 183, 491, 492, 338, 339, 340, 493, 184, 341,
	494, 467, 495, 185, 186, 187, 0, 188, 496, 189,
	190, 191, 497, 468, 194, 192, 193, 498, 499, 501,
	500, 502, 503, 504, 195, 196, 392, 197, 342, 198,
	343, 344, 505, 199, 506, 200, 507, 201, 508, 509,
	202, 203, 510, 204, 511, 0, 512, 345, 205, 206,
	207, 346, 347, 513, 514, 515, 208, 209, 348, 349,
	350, 0, 210, 516, 211, 517, 518, 469, 519, 212,
	351, 520, 352, 521, 213, 214, 215, 216, 353, 354,
	471, 522, 220, 523, 217, 524, 470, 218, 355, 219,
	356, 357, 358, 359, 360, 525, 361, 526, 472, 221,
	222, 223, 473, 224, 225, 226, 527, 228, 227, 528,
	362, 474, 229, 475, 529, 230, 231, 530, 531, 232,
	0, 233, 234, 235, 237, 363, 236, 476, 238, 239,
	241, 240, 532, 533, 534, 364, 242, 365, 243, 244,
	535, 245, 536, 537, 246, 538, 539, 247, 366, 477,
	248, 478, 367, 249, 250, 251, 252, 253, 540, 254,
	368, 255, 369, 256, 541, 257, 258, 259, 260, 261,
	370, 262, 263, 542, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 543, 276, 479, 277,
	278, 371, 279, 0, 283, 284, 285, 286, 544, 288,
	372, 287, 289, 290, 545, 291, 280, 281, 292, 480,
	293, 373, 374, 294, 546, 300, 295, 296, 282, 297,
	299, 375, 298, 376, 547, 301, 548, 302, 303, 304,
	305, 306, 307, 308, 549, 377, 378, 379, 550, 551,
	309, 310, 380, 381, 552, 311, 312, 313, 314, 553,
	554, 315, 316, 317, 318, 555, 319, 556, 382, 320,
	321, 322, 383, 384, 557, 558, 323, 559, 560, 561,
	562, 324, 325, 326, 327, 328, 0, 0, 0, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2121, 174, 175, 481, 176, 482,
	483, 484, 485, 329, 486, 487, 488, 489, 177, 178,
	179, 330, 331, 332, 333, 180, 334, 335, 490, 181,
	336, 337, 182, 183, 491, 492, 338, 339, 340, 493,
	184, 341, 494, 467, 495, 185, 186, 187, 0, 188,
	496, 189, 190, 191, 497, 468, 194, 192, 193, 498,
	499, 501, 500, 502, 503, 504, 195, 196, 392, 197,
	342, 198, 343, 344, 505, 199, 506, 200, 507, 201,
	508, 509, 202, 203, 510, 204, 511, 0, 512, 345,
	205, 206, 207, 346, 347, 513, 514, 515, 208, 209,
	348, 349, 350, 0, 210, 516, 211, 517, 518, 469,
	519, 212, 351, 520, 352, 521, 213, 214, 215, 216,
	353, 354, 471, 522, 220, 523, 217, 524, 470, 218,
	355, 219, 356, 357, 358, 359, 360, 525, 361, 526,
	472, 221, 222, 223, 473, 224, 225, 226, 527, 228,
	227, 528, 362, 474, 229, 475, 529, 230, 231, 530,
	531, 232, 0, 233, 234, 235, 237, 363, 236, 476,
	238, 239, 241, 240, 532, 533, 534, 364, 242, 365,
	243, 244, 535, 245, 536, 537, 246, 538, 539, 247,
	366, 477, 248, 478, 367, 249, 250, 251, 252, 253,
	540, 254, 368, 255, 369, 256, 541, 257, 258, 259,
	260, 261, 370, 262, 263, 542, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 543, 276,
	479, 277, 278, 371, 279, 0, 283, 284, 285, 286,
	544, 288, 372, 287, 289, 290, 545, 291, 280, 281,
	292, 480, 293, 373, 374, 294, 546, 300, 295, 296,
	282, 297, 299, 375, 298, 376, 547, 301, 548, 302,
	303, 304, 305, 306, 307, 308, 549, 377, 378, 379,
	550, 551, 309, 310, 380, 381, 552, 311, 312, 313,
	314, 553, 554, 315, 316, 317, 318, 555, 319, 556,
	382, 320, 321, 322, 383, 384, 557, 558, 323, 559,
	560, 561, 562, 324, 325, 326, 327, 328, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 0, 0, 174, 175, 481, 176, 482, 483,
	484, 485, 329, 486, 487, 488, 489, 177, 178, 179,
	330, 331, 332, 333, 180, 334, 335, 490, 181, 336,
	337, 182, 183, 491, 492, 338, 339, 340, 493, 184,
	341, 494, 467, 495, 185, 186, 187, 0, 188, 496,
	189, 190, 191, 497, 468, 194, 192, 193, 498, 499,
	501, 500, 502, 503, 504, 195, 196, 392, 197, 342,
	198, 343, 344, 505, 199, 506, 200, 507, 201, 508,
	509, 202, 203, 510, 204, 511, 0, 512, 345, 205,
	206, 207, 346, 347, 513, 514, 515, 208, 209, 348,
	349, 350, 0, 210, 516, 211, 517, 518, 469, 519,
	212, 351, 520, 352, 521, 213, 214, 215, 216, 353,
	354, 471, 522, 220, 523, 217, 524, 470, 218, 355,
	219, 356, 357, 358, 359, 360, 525, 361, 526, 472,
	221, 222, 223, 473, 224, 225, 226, 527, 228, 227,
	528, 362, 474, 229, 475, 529, 230, 231, 530, 531,
	232, 0, 233, 234, 235, 237, 363, 236, 476, 238,
	239, 241, 240, 532, 533, 534, 364, 242, 365, 243,
	244, 535, 245, 536, 537, 246, 538, 539, 247, 366,
	477, 248, 478, 367, 249, 250, 251, 252, 253, 540,
	254, 368, 255, 369, 256, 541, 257, 258, 259, 260,
	261, 370, 262, 263, 542, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 543, 276, 479,
	277, 278, 371, 279, 0, 283, 284, 285, 286, 544,
	288, 372, 287, 289, 290, 545, 291, 280, 281, 292,
	480, 293, 373, 374, 294, 546, 300, 295, 296, 282,
	297, 299, 375, 298, 376, 547, 301, 548, 302, 303,
	304, 305, 306, 307, 308, 549, 377, 378, 379, 550,
	551, 309, 310, 380, 381, 552, 311, 312, 313, 314,
	553, 554, 315, 316, 317, 318, 555, 319, 556, 382,
	320, 321, 322, 383, 384, 557, 558, 323, 559, 560,
	561, 562, 324, 325, 326, 327, 328, 788, 777, 778,
	775, 776, 767, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 805, 770, 0, 0, 0, 177, 178, 179, 330,
	820, 332, 821, 180, 822, 823, 0, 181, 336, 337,
	182, 183, 773, 804, 824, 825, 340, 0, 184, 816,
	0, 796, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 468, 194, 192, 193, 0, 797, 798,
	800, 0, 799, 801, 195, 196, 392, 197, 826, 198,
	827, 828, 1034, 199, 0, 200, 0, 201, 0, 0,
	819, 203, 0, 204, 0, 0, 0, 761, 205, 206,
	207, 806, 807, 784, 0, 0, 208, 209, 829, 830,
	831, 0, 210, 0, 211, 0, 0, 469, 0, 212,
	817, 0, 352, 0, 213, 214, 215, 216, 813, 815,
	471, 0, 220, 0, 217, 0, 470, 218, 832, 219,
	833, 834, 835, 836, 837, 0, 795, 0, 472, 221,
	222, 223, 473, 224, 225, 226, 0, 228, 227, 0,
	818, 474, 229, 475, 0, 230, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 363, 236, 476, 238, 239,
	241, 240, 756, 0, 785, 814, 242, 838, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 366, 477,
	248, 478, 808, 249, 250, 251, 252, 253, 0, 254,
	809, 255, 369, 256, 0, 257, 258, 259, 260, 261,
	839, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 479, 277,
	278, 762, 279, 0, 283, 284, 285, 286, 131, 288,
	372, 287, 289, 290, 802, 291, 280, 281, 292, 480,
	293, 840, 374, 294, 0, 300, 295, 296, 282, 297,
	299, 841, 298, 810, 0, 301, 133, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 842, 843, 0, 0,
	309, 310, 811, 812, 783, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 803, 319, 0, 382, 320,
	321, 322, 904, 844, 0, 0, 323, 0, 0, 0,
	125, 324, 325, 326, 327, 328, 757, 126, 0, 0,
	0, 0, 755, 0, 0, 0, 0, 753, 754, 0,
	0, 0, 0, 0, 0, 0, 1135, 0, 0, 0,
	0, 666, 766, 788, 777, 778, 775, 776, 767, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	175, 0, 176, 0, 0, 0, 0, 805, 770, 0,
	0, 0, 177, 178, 179, 330, 820, 332, 821, 180,
	822, 823, 0, 181, 336, 337, 182, 183, 773, 804,
	824, 825, 340, 0, 184, 816, 0, 796, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 0, 468,
	194, 192, 193, 0, 797, 798, 800, 0, 799, 801,
	195, 196, 392, 197, 826, 198, 827, 828, 0, 199,
	0, 200, 0, 201, 0, 0, 819, 203, 0, 204,
	0, 0, 0, 761, 205, 206, 207, 806, 807, 784,
	0, 0, 208, 209, 829, 830, 831, 0, 210, 0,
	211, 0, 0, 469, 0, 212, 817, 0, 352, 0,
	213, 214, 215, 216, 813, 815, 471, 0, 220, 0,
	217, 0, 470, 218, 832, 219, 833, 834, 835, 836,
	837, 0, 795, 0, 472, 221, 222, 223, 473, 224,
	225, 226, 0, 228, 227, 0, 818, 474, 229, 475,
	0, 230, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 363, 236, 476, 238, 239, 241, 240, 756, 0,
	785, 814, 242, 838, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 366, 477, 248, 478, 808, 249,
	250, 251, 252, 253, 0, 254, 809, 255, 369, 256,
	0, 257, 258, 259, 260, 261, 839, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 479, 277, 278, 762, 279, 0,
	283, 284, 285, 286, 131, 288, 372, 287, 289, 290,
	802, 291, 280, 281, 292, 480, 293, 840, 374, 294,
	0, 300, 295, 296, 282, 297, 299, 841, 298, 810,
	0, 301, 133, 302, 303, 304, 305, 306, 307, 308,
	0, 377, 842, 843, 0, 0, 309, 310, 811, 812,
	783, 311, 312, 313, 314, 0, 0, 315, 316, 317,
	318, 803, 319, 0, 382, 320, 321, 322, 904, 844,
	0, 0, 323, 0, 0, 0, 125, 324, 325, 326,
	327, 328, 757, 126, 0, 0, 0, 0, 755, 0,
	0, 0, 0, 753, 754, 788, 777, 778, 775, 776,
	767, 0, 1135, 0, 0, 0, 0, 0, 766, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 805,
	770, 0, 0, 0, 177, 178, 179, 330, 820, 332,
	821, 180, 822, 823, 0, 181, 336, 337, 182, 183,
	773, 804, 824, 825, 340, 0, 184, 816, 0, 796,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 468, 194, 192, 193, 0, 797, 798, 800, 0,
	799, 801, 195, 196, 392, 197, 826, 198, 827, 828,
	0, 199, 0, 200, 0, 201, 0, 0, 819, 203,
	0, 204, 0, 0, 0, 761, 205, 206, 207, 806,
	807, 784, 0, 0, 208, 209, 829, 830, 831, 0,
	210, 0, 211, 0, 0, 469, 0, 212, 817, 0,
	352, 0, 213, 214, 215, 216, 813, 815, 471, 0,
	220, 0, 217, 0, 470, 218, 832, 219, 833, 834,
	835, 836, 837, 0, 795, 0, 472, 221, 222, 223,
	473, 224, 225, 226, 0, 228, 227, 0, 818, 474,
	229, 475, 0, 230, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 363, 236, 476, 238, 239, 241, 240,
	756, 0, 785, 814, 242, 838, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 366, 477, 248, 478,
	808, 249, 250, 251, 252, 253, 0, 254, 809, 255,
	369, 256, 0, 257, 258, 259, 260, 261, 839, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 479, 277, 278, 762,
	279, 0, 283, 284, 285, 286, 131, 288, 372, 287,
	289, 290, 802, 291, 280, 281, 292, 480, 293, 840,
	374, 294, 0, 300, 295, 296, 282, 297, 299, 841,
	298, 810, 0, 301, 133, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 842, 843, 0, 0, 309, 310,
	811, 812, 783, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 803, 319, 0, 382, 320, 321, 322,
	904, 844, 0, 0, 323, 0, 0, 0, 125, 324,
	325, 326, 327, 328, 757, 126, 0, 0, 0, 0,
	755, 0, 0, 0, 0, 753, 754, 788, 777, 778,
	775, 776, 767, 0, 1135, 0, 0, 0, 0, 0,
	766, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 805, 770, 0, 0, 0, 177, 178, 179, 330,
	820, 332, 821, 180, 822, 823, 1568, 181, 336, 337,
	182, 183, 773, 804, 824, 825, 340, 0, 184, 816,
	0, 796, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 468, 194, 192, 193, 0, 797, 798,
	800, 0, 799, 801, 195, 196, 392, 197, 826, 198,
	827, 828, 0, 199, 0, 200, 0, 201, 0, 0,
	819, 203, 0, 204, 0, 0, 0, 761, 205, 206,
	207, 806, 807, 784, 0, 0, 208, 209, 829, 830,
	831, 0, 210, 0, 211, 0, 1573, 469, 0, 212,
	817, 0, 352, 0, 213, 214, 215, 216, 813, 815,
	471, 0, 220, 0, 217, 0, 470, 218, 832, 219,
	833, 834, 835, 836, 837, 0, 795, 0, 472, 221,
	222, 223, 473, 224, 225, 226, 0, 228, 227, 1569,
	818, 474, 229, 475, 0, 230, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 363, 236, 476, 238, 239,
	241, 240, 756, 0, 785, 814, 242, 838, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 366, 477,
	248, 478, 808, 249, 250, 251, 252, 253, 0, 254,
	809, 255, 369, 256, 0, 257, 258, 259, 260, 261,
	839, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 479, 277,
	278, 762, 279, 0, 283, 284, 285, 286, 0, 288,
	372, 287, 289, 290, 802, 291, 280, 281, 292, 480,
	293, 840, 374, 294, 0, 300, 295, 296, 282, 297,
	299, 841, 298, 810, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 842, 843, 0, 1570,
	309, 310, 811, 812, 783, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 803, 319, 0, 382, 320,
	321, 322, 383, 844, 0, 0, 323, 0, 0, 0,
	0, 324, 325, 326, 327, 328, 757, 0, 0, 0,
	0, 0, 755, 0, 0, 0, 0, 753, 754, 788,
	777, 778, 775, 776, 767, 0, 763, 0, 0, 0,
	0, 0, 766, 0, 0, 174, 175, 0, 176, 0,
	0, 0, 0, 805, 770, 0, 0, 0, 177, 178,
	179, 330, 820, 332, 821, 180, 822, 823, 0, 181,
	336, 337, 182, 183, 773, 804, 824, 825, 340, 0,
	184, 816, 0, 796, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 468, 194, 192, 193, 0,
	797, 798, 800, 0, 799, 801, 195, 196, 392, 197,
	826, 198, 827, 828, 0, 199, 0, 200, 0, 201,
	0, 0, 819, 203, 0, 204, 0, 0, 0, 761,
	205, 206, 207, 806, 807, 784, 0, 0, 208, 209,
	829, 830, 831, 0, 210, 0, 211, 0, 0, 469,
	0, 212, 817, 0, 352, 0, 213, 214, 215, 216,
	813, 815, 471, 0, 220, 0, 217, 0, 470, 218,
	832, 219, 833, 834, 835, 836, 837, 0, 795, 0,
	472, 221, 222, 223, 473, 224, 225, 226, 0, 228,
	227, 0, 818, 474, 229, 475, 0, 230, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 363, 236, 476,
	238, 239, 241, 240, 756, 2091, 785, 814, 242, 838,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	366, 477, 248, 478, 808, 249, 250, 251, 252, 253,
	0, 254, 809, 255, 369, 256, 0, 257, 258, 259,
	260, 261, 839, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	479, 277, 278, 762, 279, 0, 283, 284, 285, 286,
	0, 288, 372, 287, 289, 290, 802, 291, 280, 281,
	292, 480, 293, 840, 374, 294, 0, 300, 295, 296,
	282, 297, 299, 841, 298, 810, 0, 301, 0, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 842, 843,
	0, 0, 309, 310, 811, 812, 783, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 803, 319, 0,
	382, 320, 321, 322, 383, 844, 0, 0, 323, 0,
	0, 0, 0, 324, 325, 326, 327, 328, 757, 0,
	0, 0, 0, 0, 755, 0, 0, 0, 0, 753,
	754, 1029, 788, 777, 778, 775, 776, 767, 763, 0,
	0, 0, 0, 0, 766, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 805, 770, 0, 0,
	0, 177, 178, 179, 330, 820, 332, 821, 180, 822,
	823, 0, 181, 336, 337, 182, 183, 773, 804, 824,
	825, 340, 0, 184, 816, 0, 796, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 468, 194,
	192, 193, 0, 797, 798, 800, 0, 799, 801, 195,
	196, 392, 197, 826, 198, 827, 828, 0, 199, 0,
	200, 0, 201, 0, 0, 819, 203, 0, 204, 0,
	0, 0, 761, 205, 206, 207, 806, 807, 784, 0,
	0, 208, 209, 829, 830, 831, 0, 210, 0, 211,
	0, 0, 469, 0, 212, 817, 0, 352, 0, 213,
	214, 215, 216, 813, 815, 471, 0, 220, 1356, 217,
	0, 470, 218, 832, 219, 833, 834, 835, 836, 837,
	0, 795, 0, 472, 221, 222, 223, 473, 224, 225,
	226, 0, 228, 227, 0, 818, 474, 229, 475, 0,
	230, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	363, 236, 476, 238, 239, 241, 240, 756, 0, 785,
	814, 242, 838, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 366, 477, 248, 478, 808, 249, 250,
	251, 252, 253, 0, 254, 809, 255, 369, 256, 1355,
	257, 258, 259, 260, 261, 839, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 479, 277, 278, 762, 279, 0, 283,
	284, 285, 286, 0, 288, 372, 287, 289, 290, 802,
	291, 280, 281, 292, 480, 293, 840, 374, 294, 0,
	300, 295, 296, 282, 297, 299, 841, 298, 810, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 842, 843, 0, 0, 309, 310, 811, 812, 783,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	803, 319, 0, 382, 320, 321, 322, 383, 844, 0,
	0, 323, 0, 0, 0, 0, 324, 325, 326, 327,
	328, 757, 0, 0, 0, 0, 0, 755, 0, 0,
	0, 0, 753, 754, 788, 777, 778, 775, 776, 767,
	0, 763, 0, 0, 0, 0, 0, 766, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 805, 770,
	0, 0, 0, 177, 178, 179, 330, 820, 332, 821,
	180, 822, 823, 0, 181, 336, 337, 182, 183, 773,
	804, 824, 825, 340, 0, 184, 816, 0, 796, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	468, 194, 192, 193, 0, 797, 798, 800, 0, 799,
	801, 195, 196, 392, 197, 826, 198, 827, 828, 0,
	199, 0, 200, 0, 201, 0, 0, 819, 203, 0,
	204, 0, 0, 0, 761, 205, 206, 207, 806, 807,
	784, 0, 0, 208, 209, 829, 830, 831, 0, 210,
	0, 211, 0, 0, 469, 0, 212, 817, 0, 352,
	0, 213, 214, 215, 216, 813, 815, 471, 0, 220,
	0, 217, 0, 470, 218, 832, 219, 833, 834, 835,
	836, 837, 0, 795, 0, 472, 221, 222, 223, 473,
	224, 225, 226, 0, 228, 227, 0, 818, 474, 229,
	475, 0, 230, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 363, 236, 476, 238, 239, 241, 240, 756,
	0, 785, 814, 242, 838, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 366, 477, 248, 478, 808,
	249, 250, 251, 252, 253, 0, 254, 809, 255, 369,
	256, 0, 257, 258, 259, 260, 261, 839, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 479, 277, 278, 762, 279,
	0, 283, 284, 285, 286, 0, 288, 372, 287, 289,
	290, 802, 291, 280, 281, 292, 480, 293, 840, 374,
	294, 0, 300, 295, 296, 282, 297, 299, 841, 298,
	810, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 842, 843, 0, 0, 309, 310, 811,
	812, 783, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 803, 319, 0, 382, 320, 321, 322, 383,
	844, 0, 0, 323, 0, 0, 0, 0, 324, 325,
	326, 327, 328, 757, 0, 0, 0, 0, 0, 755,
	0, 0, 0, 0, 753, 754, 0, 0, 0, 0,
	0, 1139, 1505, 763, 0, 0, 0, 0, 0, 766,
	788, 777, 778, 775, 776, 767, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 805, 770, 0, 0, 0, 177,
	178, 179, 330, 820, 332, 821, 180, 822, 823, 0,
	181, 336, 337, 182, 183, 773, 804, 824, 825, 340,
	0, 184, 816, 0, 796, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 468, 194, 192, 193,
	0, 797, 798, 800, 0, 799, 801, 195, 196, 392,
	197, 826, 198, 827, 828, 1034, 199, 0, 200, 0,
	201, 0, 0, 819, 203, 0, 204, 0, 0, 0,
	761, 205, 206, 207, 806, 807, 784, 0, 0, 208,
	209, 829, 830, 831, 0, 210, 0, 211, 0, 0,
	469, 0, 212, 817, 0, 352, 0, 213, 214, 215,
	216, 813, 815, 471, 0, 220, 0, 217, 0, 470,
	218, 832, 219, 833, 834, 835, 836, 837, 0, 795,
	0, 472, 221, 222, 223, 473, 224, 225, 226, 0,
	228, 227, 0, 818, 474, 229, 475, 0, 230, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 363, 236,
	476, 238, 239, 241, 240, 756, 0, 785, 814, 242,
	838, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 366, 477, 248, 478, 808, 249, 250, 251, 252,
	253, 0, 254, 809, 255, 369, 256, 0, 257, 258,
	259, 260, 261, 839, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 479, 277, 278, 762, 279, 0, 283, 284, 285,
	286, 0, 288, 372, 287, 289, 290, 802, 291, 280,
	281, 292, 480, 293, 840, 374, 294, 0, 300, 295,
	296, 282, 297, 299, 841, 298, 810, 0, 301, 0,
	302, 303, 304, 305, 306, 307, 308, 0, 377, 842,
	843, 0, 0, 309, 310, 811, 812, 783, 311, 312,
	313, 314, 0, 0, 315, 316, 317, 318, 803, 319,
	0, 382, 320, 321, 322, 383, 844, 0, 0, 323,
	0, 0, 0, 0, 324, 325, 326, 327, 328, 757,
	0, 0, 0, 0, 0, 755, 0, 0, 0, 0,
	753, 754, 788, 777, 778, 775, 776, 767, 0, 763,
	0, 0, 0, 0, 0, 766, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 805, 770, 0, 0,
	0, 177, 178, 179, 330, 820, 332, 821, 180, 822,
	823, 0, 181, 336, 337, 182, 183, 773, 804, 824,
	825, 340, 0, 184, 816, 0, 796, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 468, 194,
	192, 193, 0, 797, 798, 800, 0, 799, 801, 195,
	196, 392, 197, 826, 198, 827, 828, 0, 199, 0,
	200, 0, 201, 0, 0, 819, 203, 0, 204, 0,
	0, 0, 761, 205, 206, 207, 806, 807, 784, 0,
	0, 208, 209, 829, 830, 831, 0, 210, 0, 211,
	0, 0, 469, 0, 212, 817, 0, 352, 0, 213,
	214, 215, 216, 813, 815, 471, 0, 220, 0, 217,
	0, 470, 218, 832, 219, 833, 834, 835, 836, 837,
	0, 795, 0, 472, 221, 222, 223, 473, 224, 225,
	226, 0, 228, 227, 0, 818, 474, 229, 475, 0,
	230, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	363, 236, 476, 238, 239, 241, 240, 756, 0, 785,
	814, 242, 838, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 366, 477, 248, 478, 808, 249, 250,
	251, 252, 253, 0, 254, 809, 255, 369, 256, 0,
	257, 258, 259, 260, 261, 839, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 479, 277, 278, 762, 279, 0, 283,
	284, 285, 286, 0, 288, 372, 287, 289, 290, 802,
	291, 280, 281, 292, 480, 293, 840, 374, 294, 0,
	300, 295, 296, 282, 297, 299, 841, 298, 810, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 842, 843, 0, 0, 309, 310, 811, 812, 783,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	803, 319, 0, 382, 320, 321, 322, 383, 844, 0,
	0, 323, 0, 0, 0, 0, 324, 325, 326, 327,
	328, 757, 0, 0, 0, 0, 0, 755, 0, 0,
	0, 0, 753, 754, 788, 777, 778, 775, 776, 767,
	0, 763, 2059, 0, 0, 0, 0, 766, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 805, 770,
	0, 0, 0, 177, 178, 179, 330, 820, 332, 821,
	180, 822, 823, 0, 181, 336, 337, 182, 183, 773,
	804, 824, 825, 340, 0, 184, 816, 0, 796, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	468, 194, 192, 193, 0, 797, 798, 800, 0, 799,
	801, 195, 196, 392, 197, 826, 198, 827, 828, 0,
	199, 0, 200, 0, 201, 0, 0, 819, 203, 0,
	204, 0, 0, 0, 761, 205, 206, 207, 806, 807,
	784, 0, 0, 208, 209, 829, 830, 831, 0, 210,
	0, 211, 0, 0, 469, 0, 212, 817, 0, 352,
	0, 213, 214, 215, 216, 813, 815, 471, 0, 220,
	0, 217, 0, 470, 218, 832, 219, 833, 834, 835,
	836, 837, 0, 795, 0, 472, 221, 222, 223, 473,
	224, 225, 226, 0, 228, 227, 0, 818, 474, 229,
	475, 0, 230, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 363, 236, 476, 238, 239, 241, 240, 756,
	0, 785, 814, 242, 838, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 366, 477, 248, 478, 808,
	249, 250, 251, 252, 253, 0, 254, 809, 255, 369,
	256, 0, 257, 258, 259, 260, 261, 839, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 479, 277, 278, 762, 279,
	0, 283, 284, 285, 286, 0, 288, 372, 287, 289,
	290, 802, 291, 280, 281, 292, 480, 293, 840, 374,
	294, 0, 300, 295, 296, 282, 297, 299, 841, 298,
	810, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 842, 843, 0, 0, 309, 310, 811,
	812, 783, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 803, 319, 0, 382, 320, 321, 322, 383,
	844, 2008, 0, 323, 0, 0, 0, 0, 324, 325,
	326, 327, 328, 757, 0, 0, 0, 0, 0, 755,
	0, 0, 0, 0, 753, 754, 788, 777, 778, 775,
	776, 767, 0, 763, 0, 0, 0, 0, 0, 766,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	805, 770, 0, 0, 0, 177, 178, 179, 330, 820,
	332, 821, 180, 822, 823, 0, 181, 336, 337, 182,
	183, 773, 804, 824, 825, 340, 0, 184, 816, 0,
	796, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 468, 194, 192, 193, 0, 797, 798, 800,
	0, 799, 801, 195, 196, 392, 197, 826, 198, 827,
	828, 0, 199, 0, 200, 0, 201, 0, 0, 819,
	203, 0, 204, 0, 0, 0, 761, 205, 206, 207,
	806, 807, 784, 0, 0, 208, 209, 829, 830, 831,
	0, 210, 0, 211, 0, 0, 469, 0, 212, 817,
	0, 352, 0, 213, 214, 215, 216, 813, 815, 471,
	0, 220, 0, 217, 0, 470, 218, 832, 219, 833,
	834, 835, 836, 837, 0, 795, 0, 472, 221, 222,
	223, 473, 224, 225, 226, 0, 228, 227, 0, 818,
	474, 229, 475, 0, 230, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 363, 236, 476, 238, 239, 241,
	240, 756, 0, 785, 814, 242, 838, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 366, 477, 248,
	478, 808, 249, 250, 251, 252, 253, 0, 254, 809,
	255, 369, 256, 0, 257, 258, 259, 260, 261, 839,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 479, 277, 278,
	762, 279, 0, 283, 284, 285, 286, 0, 288, 372,
	287, 289, 290, 802, 291, 280, 281, 292, 480, 293,
	840, 374, 294, 0, 300, 295, 296, 282, 297, 299,
	841, 298, 810, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 842, 843, 0, 0, 309,
	310, 811, 812, 783, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 803, 319, 0, 382, 320, 321,
	322, 383, 844, 0, 0, 323, 0, 0, 0, 0,
	324, 325, 326, 327, 328, 757, 0, 0, 0, 0,
	0, 755, 0, 0, 0, 0, 753, 754, 788, 777,
	778, 775, 776, 767, 0, 763, 1998, 0, 0, 0,
	0, 766, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 805, 770, 0, 0, 0, 177, 178, 179,
	330, 820, 332, 821, 180, 822, 823, 0, 181, 336,
	337, 182, 183, 773, 804, 824, 825, 340, 0, 184,
	816, 0, 796, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 468, 194, 192, 193, 0, 797,
	798, 800, 0, 799, 801, 195, 196, 392, 197, 826,
	198, 827, 828, 0, 199, 0, 200, 0, 201, 0,
	0, 819, 203, 0, 204, 0, 0, 0, 761, 205,
	206, 207, 806, 807, 784, 0, 0, 208, 209, 829,
	830, 831, 0, 210, 0, 211, 0, 1573, 469, 0,
	212, 817, 0, 352, 0, 213, 214, 215, 216, 813,
	815, 471, 0, 220, 0, 217, 0, 470, 218, 832,
	219, 833, 834, 835, 836, 837, 0, 795, 0, 472,
	221, 222, 223, 473, 224, 225, 226, 0, 228, 227,
	0, 818, 474, 229, 475, 0, 230, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 363, 236, 476, 238,
	239, 241, 240, 756, 0, 785, 814, 242, 838, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 366,
	477, 248, 478, 808, 249, 250, 251, 252, 253, 0,
	254, 809, 255, 369, 256, 0, 257, 258, 259, 260,
	261, 839, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 479,
	277, 278, 762, 279, 0, 283, 284, 285, 286, 0,
	288, 372, 287, 289, 290, 802, 291, 280, 281, 292,
	480, 293, 840, 374, 294, 0, 300, 295, 296, 282,
	297, 299, 841, 298, 810, 0, 301, 0, 302, 303,
	304, 305, 306, 307, 308, 0, 377, 842, 843, 0,
	0, 309, 310, 811, 812, 783, 311, 312, 313, 314,
	0, 0, 315, 316, 317, 318, 803, 319, 0, 382,
	320, 321, 322, 383, 844, 0, 0, 323, 0, 0,
	0, 0, 324, 325, 326, 327, 328, 757, 0, 0,
	0, 0, 0, 755, 0, 0, 0, 0, 753, 754,
	788, 777, 778, 775, 776, 767, 0, 763, 0, 0,
	0, 0, 0, 766, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 805, 770, 0, 0, 0, 177,
	178, 179, 330, 820, 332, 821, 180, 822, 823, 0,
	181, 336, 337, 182, 183, 773, 804, 824, 825, 340,
	0, 184, 816, 0, 796, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 468, 194, 192, 193,
	0, 797, 798, 800, 0, 799, 801, 195, 196, 392,
	197, 826, 198, 827, 828, 0, 199, 0, 200, 0,
	201, 0, 0, 819, 203, 0, 204, 0, 0, 0,
	761, 205, 206, 207, 806, 807, 784, 0, 0, 208,
	209, 829, 830, 831, 0, 210, 0, 211, 0, 0,
	469, 0, 212, 817, 0, 352, 0, 213, 214, 215,
	216, 813, 815, 471, 0, 220, 0, 217, 0, 470,
	218, 832, 219, 833, 834, 835, 836, 837, 0, 795,
	0, 472, 221, 222, 223, 473, 224, 225, 226, 0,
	228, 227, 0, 818, 474, 229, 475, 0, 230, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 363, 236,
	476, 238, 239, 241, 240, 756, 0, 785, 814, 242,
	838, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 366, 477, 248, 478, 808, 249, 250, 251, 252,
	253, 0, 254, 809, 255, 369, 256, 0, 257, 258,
	259, 260, 261, 839, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 479, 277, 278, 762, 279, 0, 283, 284, 285,
	286, 0, 288, 372, 287, 289, 290, 802, 291, 280,
	281, 292, 480, 293, 840, 374, 294, 0, 300, 295,
	296, 282, 297, 299, 841, 298, 810, 0, 301, 0,
	302, 303, 304, 305, 306, 307, 308, 0, 377, 842,
	843, 0, 0, 309, 310, 811, 812, 783, 311, 312,
	313, 314, 0, 0, 315, 316, 317, 318, 803, 319,
	0, 382, 320, 321, 322, 383, 844, 0, 0, 323,
	0, 0, 0, 0, 324, 325, 326, 327, 328, 757,
	0, 0, 0, 0, 0, 755, 0, 0, 0, 0,
	753, 754, 1029, 0, 0, 0, 0, 0, 0, 763,
	0, 0, 0, 0, 1582, 766, 788, 777, 778, 775,
	776, 767, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	805, 770, 0, 0, 0, 177, 178, 179, 330, 820,
	332, 821, 180, 822, 823, 0, 181, 336, 337, 182,
	183, 773, 804, 824, 825, 340, 0, 184, 816, 0,
	796, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 468, 194, 192, 193, 0, 797, 798, 800,
	0, 799, 801, 195, 196, 392, 197, 826, 198, 827,
	828, 0, 199, 0, 200, 0, 201, 0, 0, 819,
	203, 0, 204, 0, 0, 0, 761, 205, 206, 207,
	806, 807, 784, 0, 0, 208, 209, 829, 830, 831,
	0, 210, 0, 211, 0, 0, 469, 0, 212, 817,
	0, 352, 0, 213, 214, 215, 216, 813, 815, 471,
	0, 220, 0, 217, 0, 470, 218, 832, 219, 833,
	834, 835, 836, 837, 0, 795, 0, 472, 221, 222,
	223, 473, 224, 225, 226, 0, 228, 227, 0, 818,
	474, 229, 475, 0, 230, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 363, 236, 476, 238, 239, 241,
	240, 756, 0, 785, 814, 242, 838, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 366, 477, 248,
	478, 808, 249, 250, 251, 252, 253, 0, 254, 809,
	255, 369, 256, 0, 257, 258, 259, 260, 261, 839,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 479, 277, 278,
	762, 279, 0, 283, 284, 285, 286, 0, 288, 372,
	287, 289, 290, 802, 291, 280, 281, 292, 480, 293,
	840, 374, 294, 0, 300, 295, 296, 282, 297, 299,
	841, 298, 810, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 842, 843, 0, 0, 309,
	310, 811, 812, 783, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 803, 319, 0, 382, 320, 321,
	322, 383, 844, 0, 0, 323, 0, 0, 0, 0,
	324, 325, 326, 327, 328, 757, 0, 0, 0, 0,
	0, 755, 0, 0, 0, 0, 753, 754, 0, 0,
	0, 0, 0, 0, 0, 763, 0, 0, 0, 0,
	1580, 766, 788, 777, 778, 775, 776, 767, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 805, 770, 0, 0,
	0, 177, 178, 179, 330, 820, 332, 821, 180, 822,
	823, 0, 181, 336, 337, 182, 183, 773, 804, 824,
	825, 340, 0, 184, 816, 0, 796, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 468, 194,
	192, 193, 0, 797, 798, 800, 0, 799, 801, 195,
	196, 392, 197, 826, 198, 827, 828, 0, 199, 0,
	200, 0, 201, 0, 0, 819, 203, 0, 204, 0,
	0, 0, 761, 205, 206, 207, 806, 807, 784, 0,
	0, 208, 209, 829, 830, 831, 0, 210, 0, 211,
	0, 0, 469, 0, 212, 817, 0, 352, 0, 213,
	214, 215, 216, 813, 815, 471, 0, 220, 0, 217,
	0, 470, 218, 832, 219, 833, 834, 835, 836, 837,
	0, 795, 0, 472, 221, 222, 223, 473, 224, 225,
	226, 0, 228, 227, 0, 818, 474, 229, 475, 0,
	230, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	363, 236, 476, 238, 239, 241, 240, 756, 0, 785,
	814, 242, 838, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 366, 477, 248, 478, 808, 249, 250,
	251, 252, 253, 0, 254, 809, 255, 369, 256, 0,
	257, 258, 259, 260, 261, 839, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 479, 277, 278, 762, 279, 0, 283,
	284, 285, 286, 0, 288, 372, 287, 289, 290, 802,
	291, 280, 281, 292, 480, 293, 840, 374, 294, 0,
	300, 295, 296, 282, 297, 299, 841, 298, 810, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 842, 843, 0, 0, 309, 310, 811, 812, 783,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	803, 319, 0, 382, 320, 321, 322, 383, 844, 0,
	0, 323, 0, 0, 0, 0, 324, 325, 326, 327,
	328, 757, 0, 0, 0, 0, 0, 755, 0, 0,
	0, 0, 753, 754, 0, 0, 0, 0, 0, 0,
	0, 763, 0, 0, 0, 0, 1564, 766, 788, 777,
	778, 775, 776, 767, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 805, 770, 0, 0, 0, 177, 178, 179,
	330, 820, 332, 821, 180, 822, 823, 0, 181, 336,
	337, 182, 183, 773, 804, 824, 825, 340, 0, 184,
	816, 0, 796, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 468, 194, 192, 193, 0, 797,
	798, 800, 0, 799, 801, 195, 196, 392, 197, 826,
	198, 827, 828, 0, 199, 0, 200, 0, 201, 0,
	0, 819, 203, 0, 204, 0, 0, 0, 761, 205,
	206, 207, 806, 807, 784, 0, 0, 208, 209, 829,
	830, 831, 0, 210, 0, 211, 0, 0, 469, 0,
	212, 817, 0, 352, 0, 213, 214, 215, 216, 813,
	815, 471, 0, 220, 0, 217, 0, 470, 218, 832,
	219, 833, 834, 835, 836, 837, 0, 795, 0, 472,
	221, 222, 223, 473, 224, 225, 226, 0, 228, 227,
	0, 818, 474, 229, 475, 0, 230, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 363, 236, 476, 238,
	239, 241, 240, 756, 0, 785, 814, 242, 838, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 366,
	477, 248, 478, 808, 249, 250, 251, 252, 253, 0,
	254, 809, 255, 369, 256, 0, 257, 258, 259, 260,
	261, 839, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 479,
	277, 278, 762, 279, 0, 283, 284, 285, 286, 0,
	288, 372, 287, 289, 290, 802, 291, 280, 281, 292,
	480, 293, 840, 374, 294, 0, 300, 295, 296, 282,
	297, 299, 841, 298, 810, 0, 301, 0, 302, 303,
	304, 305, 306, 307, 308, 0, 377, 842, 843, 0,
	0, 309, 310, 811, 812, 783, 311, 312, 313, 314,
	0, 0, 315, 316, 317, 318, 803, 319, 0, 382,
	320, 321, 322, 383, 844, 0, 0, 323, 0, 0,
	0, 0, 324, 325, 326, 327, 328, 757, 0, 0,
	0, 0, 0, 755, 0, 0, 0, 0, 753, 754,
	0, 0, 0, 0, 0, 0, 0, 763, 0, 0,
	0, 0, 1552, 766, 788, 777, 778, 775, 776, 767,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 805, 770,
	0, 0, 0, 177, 178, 179, 330, 820, 332, 821,
	180, 822, 823, 0, 181, 336, 337, 182, 183, 773,
	804, 824, 825, 340, 0, 184, 816, 0, 796, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	468, 194, 192, 193, 0, 797, 798, 800, 0, 799,
	801, 195, 196, 392, 197, 826, 198, 827, 828, 0,
	199, 0, 200, 0, 201, 0, 0, 819, 203, 0,
	204, 0, 0, 0, 761, 205, 206, 207, 806, 807,
	784, 0, 0, 208, 209, 829, 830, 831, 0, 210,
	0, 211, 0, 0, 469, 0, 212, 817, 0, 352,
	0, 213, 214, 215, 216, 813, 815, 471, 0, 220,
	0, 217, 0, 470, 218, 832, 219, 833, 834, 835,
	836, 837, 0, 795, 0, 472, 221, 222, 223, 473,
	224, 225, 226, 0, 228, 227, 0, 818, 474, 229,
	475, 0, 230, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 363, 236, 476, 238, 239, 241, 240, 756,
	0, 785, 814, 242, 838, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 366, 477, 248, 478, 808,
	249, 250, 251, 252, 253, 0, 254, 809, 255, 369,
	256, 0, 257, 258, 259, 260, 261, 839, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 479, 277, 278, 762, 279,
	0, 283, 284, 285, 286, 0, 288, 372, 287, 289,
	290, 802, 291, 280, 281, 292, 480, 293, 840, 374,
	294, 0, 300, 295, 296, 282, 297, 299, 841, 298,
	810, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 842, 843, 0, 0, 309, 310, 811,
	812, 783, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 803, 319, 0, 382, 320, 321, 322, 383,
	844, 0, 0, 323, 0, 0, 0, 0, 324, 325,
	326, 327, 328, 757, 0, 0, 0, 0, 0, 755,
	0, 0, 0, 0, 753, 754, 0, 0, 0, 0,
	0, 0, 0, 763, 0, 0, 0, 0, 1550, 766,
	1542, 777, 778, 775, 776, 767, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 805, 770, 0, 0, 0, 177,
	178, 179, 330, 820, 332, 821, 180, 822, 823, 0,
	181, 336, 337, 182, 183, 773, 804, 824, 825, 340,
	0, 184, 816, 0, 796, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 468, 194, 192, 193,
	0, 797, 798, 800, 0, 799, 801, 195, 196, 392,
	197, 826, 1545, 827, 828, 0, 199, 0, 200, 0,
	201, 0, 0, 819, 203, 0, 204, 0, 0, 0,
	761, 205, 206, 207, 806, 807, 784, 0, 0, 208,
	209, 829, 830, 831, 0, 210, 0, 211, 0, 0,
	469, 0, 212, 817, 0, 352, 0, 213, 214, 1546,
	216, 813, 815, 471, 0, 220, 0, 217, 0, 470,
	218, 832, 219, 833, 834, 835, 836, 837, 0, 795,
	0, 472, 221, 222, 223, 473, 224, 225, 226, 0,
	228, 227, 0, 818, 474, 229, 475, 0, 230, 231,
	0, 0, 232, 0, 233, 1547, 1544, 237, 363, 236,
	476, 238, 239, 241, 240, 756, 0, 785, 814, 242,
	838, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 366, 477, 248, 478, 808, 249, 250, 251, 252,
	253, 0, 254, 809, 255, 369, 256, 0, 257, 258,
	259, 260, 261, 839, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 479, 277, 278, 762, 279, 0, 283, 284, 285,
	1548, 0, 288, 372, 287, 289, 290, 802, 291, 280,
	281, 292, 480, 293, 840, 374, 294, 0, 300, 295,
	296, 282, 297, 299, 841, 298, 810, 0, 301, 0,
	302, 303, 304, 305, 306, 307, 308, 0, 377, 842,
	843, 0, 0, 309, 310, 811, 812, 783, 311, 312,
	313, 314, 0, 0, 315, 316, 317, 318, 803, 319,
	0, 382, 320, 321, 322, 383, 844, 0, 0, 323,
	0, 0, 0, 0, 324, 325, 326, 1543, 328, 757,
	0, 0, 0, 0, 0, 755, 0, 0, 0, 0,
	753, 754, 0, 0, 0, 0, 0, 0, 0, 763,
	0, 0, 0, 0, 1539, 766, 1542, 777, 778, 775,
	776, 767, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	805, 770, 0, 0, 0, 177, 178, 179, 330, 820,
	332, 821, 180, 822, 823, 0, 181, 336, 337, 182,
	183, 773, 804, 824, 825, 340, 0, 184, 816, 0,
	796, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 468, 194, 192, 193, 0, 797, 798, 800,
	0, 799, 801, 195, 196, 392, 197, 826, 1545, 827,
	828, 0, 199, 0, 200, 0, 201, 0, 0, 819,
	203, 0, 204, 0, 0, 0, 761, 205, 206, 207,
	806, 807, 784, 0, 0, 208, 209, 829, 830, 831,
	0, 210, 0, 211, 0, 0, 469, 0, 212, 817,
	0, 352, 0, 213, 214, 1546, 216, 813, 815, 471,
	0, 220, 0, 217, 0, 470, 218, 832, 219, 833,
	834, 835, 836, 837, 0, 795, 0, 472, 221, 222,
	223, 473, 224, 225, 226, 0, 228, 227, 0, 818,
	474, 229, 475, 0, 230, 231, 0, 0, 232, 0,
	233, 1547, 1544, 237, 363, 236, 476, 238, 239, 241,
	240, 756, 0, 785, 814, 242, 838, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 366, 477, 248,
	478, 808, 249, 250, 251, 252, 253, 0, 254, 809,
	255, 369, 256, 0, 257, 258, 259, 260, 261, 839,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 479, 277, 278,
	762, 279, 0, 283, 284, 285, 1548, 0, 288, 372,
	287, 289, 290, 802, 291, 280, 281, 292, 480, 293,
	840, 374, 294, 0, 300, 295, 296, 282, 297, 299,
	841, 298, 810, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 842, 843, 0, 0, 309,
	310, 811, 812, 783, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 803, 319, 0, 382, 320, 321,
	322, 383, 844, 0, 0, 323, 0, 0, 0, 0,
	324, 325, 326, 1543, 328, 757, 0, 0, 0, 0,
	0, 755, 0, 0, 0, 0, 753, 754, 788, 777,
	778, 775, 776, 767, 0, 763, 0, 0, 0, 0,
	0, 766, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 805, 770, 0, 0, 0, 177, 178, 179,
	330, 820, 332, 821, 180, 822, 823, 0, 181, 336,
	337, 182, 183, 773, 804, 824, 825, 340, 0, 184,
	816, 0, 796, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 468, 194, 192, 193, 0, 797,
	798, 800, 0, 799, 801, 195, 196, 392, 197, 826,
	198, 827, 828, 0, 199, 0, 200, 0, 201, 0,
	0, 819, 203, 0, 204, 0, 0, 0, 761, 205,
	206, 207, 806, 807, 784, 0, 0, 208, 209, 829,
	830, 831, 0, 210, 0, 211, 0, 0, 469, 0,
	212, 817, 0, 352, 0, 213, 214, 215, 216, 813,
	815, 471, 0, 220, 0, 217, 0, 470, 218, 832,
	219, 833, 834, 835, 836, 837, 0, 795, 0, 472,
	221, 222, 223, 473, 224, 225, 226, 0, 228, 227,
	0, 818, 474, 229, 475, 0, 230, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 363, 236, 476, 238,
	239, 241, 240, 756, 0, 785, 814, 242, 838, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 366,
	477, 248, 478, 808, 249, 250, 251, 252, 253, 0,
	254, 809, 255, 369, 256, 0, 257, 258, 259, 260,
	261, 839, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 479,
	277, 278, 762, 279, 0, 283, 284, 285, 286, 0,
	288, 372, 287, 289, 290, 802, 291, 280, 281, 292,
	480, 293, 840, 374, 294, 0, 300, 295, 296, 282,
	297, 299, 841, 298, 810, 0, 301, 0, 302, 303,
	304, 305, 306, 307, 308, 0, 377, 842, 843, 0,
	0, 309, 310, 811, 812, 783, 311, 312, 313, 314,
	0, 0, 315, 316, 317, 318, 803, 319, 0, 382,
	320, 321, 322, 383, 844, 0, 0, 323, 0, 0,
	0, 0, 324, 325, 326, 327, 328, 757, 0, 0,
	0, 0, 0, 755, 0, 0, 0, 0, 753, 754,
	0, 0, 0, 0, 0, 0, 0, 763, 1500, 0,
	0, 0, 1386, 766, 788, 777, 778, 775, 776, 767,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 805, 770,
	0, 0, 0, 177, 178, 179, 330, 820, 332, 821,
	180, 822, 823, 0, 181, 336, 337, 182, 183, 773,
	804, 824, 825, 340, 0, 184, 816, 0, 796, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	468, 194, 192, 193, 0, 797, 798, 800, 0, 799,
	801, 195, 196, 392, 197, 826, 198, 827, 828, 0,
	199, 0, 200, 0, 201, 0, 0, 819, 203, 0,
	204, 0, 0, 0, 761, 205, 206, 207, 806, 807,
	784, 0, 0, 208, 209, 829, 830, 831, 0, 210,
	0, 211, 0, 0, 469, 0, 212, 817, 0, 352,
	0, 213, 214, 215, 216, 813, 815, 471, 0, 220,
	0, 217, 0, 470, 218, 832, 219, 833, 834, 835,
	836, 837, 0, 795, 0, 472, 221, 222, 223, 473,
	224, 225, 226, 0, 228, 227, 0, 818, 474, 229,
	475, 0, 230, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 363, 236, 476, 238, 239, 241, 240, 756,
	0, 785, 814, 242, 838, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 366, 477, 248, 478, 808,
	249, 250, 251, 252, 253, 0, 254, 809, 255, 369,
	256, 0, 257, 258, 259, 260, 261, 839, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 479, 277, 278, 762, 279,
	0, 283, 284, 285, 286, 0, 288, 372, 287, 289,
	290, 802, 291, 280, 281, 292, 480, 293, 840, 374,
	294, 0, 300, 295, 296, 282, 297, 299, 841, 298,
	810, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 842, 843, 0, 0, 309, 310, 811,
	812, 783, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 803, 319, 0, 382, 320, 321, 322, 383,
	844, 0, 0, 323, 0, 0, 0, 0, 324, 325,
	326, 327, 328, 757, 0, 0, 0, 0, 0, 755,
	0, 0, 0, 0, 753, 754, 788, 777, 778, 775,
	776, 767, 0, 763, 0, 0, 0, 0, 0, 766,
	0, 0, 174, 175, 1343, 176, 0, 0, 0, 0,
	805, 770, 0, 0, 0, 177, 178, 179, 330, 820,
	332, 821, 180, 822, 823, 0, 181, 336, 337, 182,
	183, 773, 804, 824, 825, 340, 0, 184, 816, 0,
	796, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 468, 194, 192, 193, 0, 797, 798, 800,
	0, 799, 801, 195, 196, 392, 197, 826, 198, 827,
	828, 0, 199, 0, 200, 0, 201, 0, 0, 819,
	203, 0, 204, 0, 0, 0, 761, 205, 206, 207,
	806, 807, 784, 0, 0, 208, 209, 829, 830, 831,
	0, 210, 0, 211, 0, 0, 469, 0, 212, 817,
	0, 352, 0, 213, 214, 215, 216, 813, 815, 471,
	0, 220, 0, 217, 0, 470, 218, 832, 219, 833,
	834, 835, 836, 837, 0, 795, 0, 472, 221, 222,
	223, 473, 224, 225, 226, 0, 228, 227, 0, 818,
	474, 229, 475, 0, 230, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 363, 236, 476, 238, 239, 241,
	240, 756, 0, 785, 814, 242, 838, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 366, 477, 248,
	478, 808, 249, 250, 251, 252, 253, 0, 254, 809,
	255, 369, 256, 0, 257, 258, 259, 260, 261, 839,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 479, 277, 278,
	762, 279, 0, 283, 284, 285, 286, 0, 288, 372,
	287, 289, 290, 802, 291, 280, 281, 292, 480, 293,
	840, 374, 294, 0, 300, 295, 296, 282, 297, 299,
	841, 298, 810, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 842, 843, 0, 0, 309,
	310, 811, 812, 783, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 803, 319, 0, 382, 320, 321,
	322, 383, 844, 0, 0, 323, 0, 0, 0, 0,
	324, 325, 326, 327, 328, 757, 0, 0, 0, 0,
	0, 755, 0, 0, 0, 0, 753, 754, 0, 0,
	0, 0, 0, 0, 0, 763, 0, 0, 0, 0,
	852, 766, 788, 777, 778, 775, 776, 767, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 805, 770, 0, 0,
	0, 177, 178, 179, 330, 820, 332, 821, 180, 822,
	823, 0, 181, 336, 337, 182, 183, 773, 804, 824,
	825, 340, 0, 184, 816, 0, 796, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 468, 194,
	192, 193, 0, 797, 798, 800, 0, 799, 801, 195,
	196, 392, 197, 826, 198, 827, 828, 0, 199, 0,
	200, 0, 201, 0, 0, 819, 203, 0, 204, 0,
	0, 0, 761, 205, 206, 207, 806, 807, 784, 0,
	0, 208, 209, 829, 830, 831, 0, 210, 0, 211,
	0, 0, 469, 0, 212, 817, 0, 352, 0, 213,
	214, 215, 216, 813, 815, 471, 0, 220, 0, 217,
	0, 470, 218, 832, 219, 833, 834, 835, 836, 837,
	0, 795, 0, 472, 221, 222, 223, 473, 224, 225,
	226, 0, 228, 227, 0, 818, 474, 229, 475, 0,
	230, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	363, 236, 476, 238, 239, 241, 240, 756, 0, 785,
	814, 242, 838, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 366, 477, 248, 478, 808, 249, 250,
	251, 252, 253, 0, 254, 809, 255, 369, 256, 0,
	257, 258, 259, 260, 261, 839, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 479, 277, 278, 762, 279, 0, 283,
	284, 285, 286, 0, 288, 372, 287, 289, 290, 802,
	291, 280, 281, 292, 480, 293, 840, 374, 294, 0,
	300, 295, 296, 282, 297, 299, 841, 298, 810, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 842, 843, 0, 0, 309, 310, 811, 812, 783,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	803, 319, 0, 382, 320, 321, 322, 383, 844, 0,
	0, 323, 0, 0, 0, 0, 324, 325, 326, 327,
	328, 757, 0, 0, 0, 0, 0, 755, 0, 0,
	0, 0, 753, 754, 0, 0, 0, 0, 0, 0,
	0, 763, 0, 0, 0, 0, 751, 766, 788, 777,
	778, 775, 776, 767, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 805, 770, 0, 0, 0, 177, 178, 179,
	330, 820, 332, 821, 180, 822, 823, 0, 181, 336,
	337, 182, 183, 773, 804, 824, 825, 340, 0, 184,
	816, 0, 796, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 468, 194, 192, 193, 0, 797,
	798, 800, 0, 799, 801, 195, 196, 392, 197, 826,
	198, 827, 828, 0, 199, 0, 200, 0, 201, 0,
	0, 819, 203, 0, 204, 0, 0, 0, 761, 205,
	206, 207, 806, 807, 784, 0, 0, 208, 209, 829,
	830, 831, 0, 210, 0, 211, 0, 0, 469, 0,
	212, 817, 0, 352, 0, 213, 214, 215, 216, 813,
	815, 471, 0, 220, 0, 217, 0, 470, 218, 832,
	219, 833, 834, 835, 836, 837, 0, 795, 0, 472,
	221, 222, 223, 473, 224, 225, 226, 0, 228, 227,
	0, 818, 474, 229, 475, 0, 230, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 363, 236, 476, 238,
	239, 241, 240, 756, 0, 785, 814, 242, 838, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 366,
	477, 248, 478, 808, 249, 250, 251, 252, 253, 0,
	254, 809, 255, 369, 256, 0, 257, 258, 259, 260,
	261, 839, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 479,
	277, 278, 762, 279, 0, 283, 284, 285, 286, 0,
	288, 372, 287, 289, 290, 802, 291, 280, 281, 292,
	480, 293, 840, 374, 294, 0, 300, 295, 296, 282,
	297, 299, 841, 298, 810, 0, 301, 0, 302, 303,
	304, 305, 306, 307, 308, 0, 377, 842, 843, 0,
	0, 309, 310, 811, 812, 783, 311, 312, 313, 314,
	0, 0, 315, 316, 317, 318, 803, 319, 0, 382,
	320, 321, 322, 383, 844, 0, 0, 323, 0, 0,
	0, 0, 324, 325, 326, 327, 328, 757, 0, 0,
	0, 0, 0, 755, 0, 0, 0, 0, 753, 754,
	788, 777, 778, 775, 776, 767, 0, 763, 0, 0,
	0, 0, 0, 766, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 805, 770, 0, 0, 0, 177,
	178, 179, 330, 820, 332, 821, 180, 822, 823, 0,
	181, 336, 337, 182, 183, 773, 804, 824, 825, 340,
	0, 184, 816, 0, 796, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 468, 194, 192, 2407,
	0, 797, 798, 800, 0, 799, 801, 195, 196, 392,
	197, 826, 198, 827, 828, 0, 199, 0, 200, 0,
	201, 0, 0, 819, 203, 0, 204, 0, 0, 0,
	761, 205, 206, 207, 806, 807, 784, 0, 0, 208,
	209, 829, 830, 831, 0, 210, 0, 211, 0, 0,
	469, 0, 212, 817, 0, 352, 0, 213, 214, 215,
	216, 813, 815, 471, 0, 220, 0, 217, 0, 470,
	218, 832, 219, 833, 834, 835, 836, 837, 0, 795,
	0, 472, 221, 222, 223, 473, 224, 225, 226, 0,
	228, 227, 0, 818, 474, 229, 475, 0, 230, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 363, 236,
	476, 238, 239, 241, 240, 756, 0, 785, 814, 242,
	838, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 366, 477, 248, 478, 808, 249, 250, 251, 252,
	253, 0, 254, 809, 255, 369, 256, 0, 257, 258,
	259, 260, 261, 839, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 479, 277, 278, 762, 279, 0, 283, 284, 285,
	286, 0, 288, 372, 287, 289, 290, 802, 291, 280,
	281, 292, 480, 293, 840, 374, 294, 0, 300, 295,
	296, 282, 297, 299, 841, 298, 810, 0, 301, 0,
	302, 303, 304, 305, 306, 307, 308, 0, 377, 842,
	843, 0, 0, 309, 310, 811, 812, 783, 311, 312,
	2406, 314, 0, 0, 315, 316, 317, 318, 803, 319,
	0, 382, 320, 321, 322, 383, 844, 0, 0, 323,
	0, 0, 0, 0, 324, 325, 326, 327, 328, 757,
	0, 0, 0, 0, 0, 755, 0, 0, 0, 0,
	753, 754, 788, 777, 778, 775, 776, 767, 0, 763,
	0, 0, 0, 0, 0, 766, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 805, 770, 0, 0,
	0, 177, 178, 179, 2405, 820, 332, 821, 180, 822,
	823, 0, 181, 336, 337, 182, 183, 773, 804, 824,
	825, 340, 0, 184, 816, 0, 796, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 468, 194,
	192, 2407, 0, 797, 798, 800, 0, 799, 801, 195,
	196, 392, 197, 826, 198, 827, 828, 0, 199, 0,
	200, 0, 201, 0, 0, 819, 203, 0, 204, 0,
	0, 0, 761, 205, 206, 207, 806, 807, 784, 0,
	0, 208, 209, 829, 830, 831, 0, 210, 0, 211,
	0, 0, 469, 0, 212, 817, 0, 352, 0, 213,
	214, 215, 216, 813, 815, 471, 0, 220, 0, 217,
	0, 470, 218, 832, 219, 833, 834, 835, 836, 837,
	0, 795, 0, 472, 221, 222, 223, 473, 224, 225,
	226, 0, 228, 227, 0, 818, 474, 229, 475, 0,
	230, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	363, 236, 476, 238, 239, 241, 240, 756, 0, 785,
	814, 242, 838, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 366, 477, 248, 478, 808, 249, 250,
	251, 252, 253, 0, 254, 809, 255, 369, 256, 0,
	257, 258, 259, 260, 261, 839, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 479, 277, 278, 762, 279, 0, 283,
	284, 285, 286, 0, 288, 372, 287, 289, 290, 802,
	291, 280, 281, 292, 480, 293, 840, 374, 294, 0,
	300, 295, 296, 282, 297, 299, 841, 298, 810, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 842, 843, 0, 0, 309, 310, 811, 812, 783,
	311, 312, 2406, 314, 0, 0, 315, 316, 317, 318,
	803, 319, 0, 382, 320, 321, 322, 383, 844, 0,
	0, 323, 0, 0, 0, 0, 324, 325, 326, 327,
	328, 757, 0, 0, 0, 0, 0, 755, 0, 0,
	0, 0, 753, 754, 788, 777, 778, 775, 776, 767,
	0, 763, 0, 0, 0, 0, 0, 766, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 805, 770,
	0, 0, 0, 177, 178, 179, 330, 820, 332, 821,
	180, 822, 823, 0, 181, 336, 337, 182, 183, 773,
	804, 824, 825, 340, 0, 184, 816, 0, 796, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	468, 194, 192, 193, 0, 797, 798, 800, 0, 799,
	801, 195, 196, 392, 197, 826, 198, 827, 828, 0,
	199, 0, 200, 0, 201, 0, 0, 819, 203, 0,
	204, 0, 0, 0, 761, 205, 206, 207, 806, 807,
	784, 0, 0, 208, 209, 829, 830, 831, 0, 210,
	0, 211, 0, 0, 469, 0, 212, 817, 0, 352,
	0, 213, 214, 215, 216, 813, 815, 471, 0, 220,
	0, 217, 0, 470, 218, 832, 219, 833, 834, 835,
	836, 837, 0, 795, 0, 472, 221, 222, 223, 473,
	224, 225, 226, 0, 228, 227, 0, 818, 474, 229,
	475, 0, 230, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 363, 236, 476, 238, 239, 241, 240, 756,
	0, 785, 814, 242, 838, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 366, 477, 248, 478, 808,
	249, 250, 251, 252, 253, 0, 254, 809, 255, 369,
	256, 0, 257, 258, 259, 260, 261, 839, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 479, 277, 278, 762, 279,
	0, 283, 284, 285, 286, 0, 288, 372, 287, 289,
	290, 802, 291, 280, 281, 292, 480, 293, 840, 374,
	294, 0, 300, 295, 296, 282, 297, 299, 841, 298,
	810, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 842, 843, 0, 0, 309, 310, 811,
	812, 783, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 803, 319, 0, 382, 320, 321, 322, 383,
	844, 0, 0, 323, 0, 0, 0, 0, 324, 325,
	326, 327, 328, 757, 0, 0, 0, 0, 0, 755,
	0, 0, 0, 0, 753, 754, 788, 777, 778, 775,
	776, 767, 0, 763, 0, 0, 0, 0, 0, 766,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	805, 770, 0, 0, 0, 177, 178, 179, 330, 820,
	332, 821, 180, 822, 823, 0, 181, 336, 337, 182,
	183, 773, 804, 824, 825, 340, 0, 184, 816, 0,
	796, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 468, 194, 192, 193, 0, 797, 798, 800,
	0, 799, 801, 195, 196, 392, 197, 826, 198, 827,
	828, 0, 199, 0, 200, 0, 201, 0, 0, 819,
	203, 0, 204, 0, 0, 0, 761, 205, 206, 207,
	806, 807, 784, 0, 0, 208, 209, 829, 830, 831,
	0, 210, 0, 211, 0, 0, 469, 0, 212, 817,
	0, 352, 0, 213, 214, 215, 216, 813, 815, 471,
	0, 220, 0, 217, 0, 470, 218, 832, 219, 833,
	834, 835, 836, 837, 0, 795, 0, 472, 221, 222,
	223, 473, 224, 225, 226, 0, 228, 227, 0, 818,
	474, 229, 475, 0, 230, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 363, 236, 476, 238, 239, 241,
	240, 0, 0, 785, 814, 242, 838, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 366, 477, 248,
	478, 808, 249, 250, 251, 252, 253, 0, 254, 809,
	255, 369, 256, 0, 257, 258, 259, 260, 261, 839,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 479, 277, 278,
	1562, 279, 0, 283, 284, 285, 286, 0, 288, 372,
	287, 289, 290, 802, 291, 280, 281, 292, 480, 293,
	840, 374, 294, 0, 300, 295, 296, 282, 297, 299,
	841, 298, 810, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 842, 843, 0, 0, 309,
	310, 811, 812, 783, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 803, 319, 0, 382, 320, 321,
	322, 383, 844, 0, 0, 323, 0, 0, 0, 0,
	324, 325, 326, 327, 328, 788, 777, 778, 775, 776,
	767, 1560, 0, 0, 0, 0, 1558, 1559, 0, 0,
	0, 174, 175, 0, 176, 1561, 0, 0, 0, 805,
	770, 766, 0, 0, 177, 178, 179, 330, 820, 332,
	821, 180, 822, 823, 0, 181, 336, 337, 182, 183,
	0, 804, 824, 825, 340, 0, 184, 816, 0, 796,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 468, 194, 192, 193, 0, 797, 798, 800, 0,
	799, 801, 195, 196, 392, 197, 826, 198, 827, 828,
	0, 199, 0, 200, 0, 201, 0, 0, 819, 203,
	0, 204, 0, 0, 0, 345, 205, 206, 207, 806,
	807, 784, 0, 0, 208, 209, 829, 830, 831, 0,
	210, 0, 211, 0, 0, 469, 0, 212, 817, 0,
	352, 0, 213, 214, 215, 216, 813, 815, 471, 0,
	220, 0, 217, 0, 470, 218, 832, 219, 833, 834,
	835, 836, 837, 0, 795, 0, 472, 221, 222, 223,
	473, 224, 225, 226, 0, 228, 227, 0, 818, 474,
	229, 475, 0, 230, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 363, 236, 476, 238, 239, 241, 240,
	0, 0, 785, 814, 242, 838, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 366, 477, 248, 478,
	808, 249, 250, 251, 252, 253, 0, 254, 809, 255,
	369, 256, 0, 257, 258, 259, 260, 261, 839, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 479, 277, 278, 1562,
	279, 0, 283, 284, 285, 286, 0, 288, 372, 287,
	289, 290, 802, 291, 280, 281, 292, 480, 293, 840,
	374, 294, 0, 300, 295, 296, 282, 297, 299, 841,
	298, 810, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 842, 843, 0, 0, 309, 310,
	811, 812, 783, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 803, 319, 0, 382, 320, 321, 322,
	383, 844, 0, 0, 323, 0, 0, 0, 0, 324,
	325, 326, 327, 328, 788, 777, 778, 775, 776, 767,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 1561, 0, 0, 0, 805, 770,
	766, 0, 0, 177, 178, 179, 0, 820, 332, 821,
	180, 822, 823, 0, 181, 336, 337, 182, 183, 773,
	804, 824, 825, 340, 0, 184, 816, 0, 796, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	468, 194, 192, 2407, 0, 797, 798, 800, 0, 799,
	801, 195, 196, 392, 197, 826, 198, 827, 828, 0,
	199, 0, 200, 0, 201, 0, 0, 819, 203, 0,
	204, 0, 0, 0, 761, 205, 206, 207, 806, 807,
	784, 0, 0, 208, 209, 829, 830, 831, 0, 210,
	0, 211, 0, 0, 469, 0, 212, 817, 0, 352,
	0, 213, 214, 215, 216, 813, 815, 0, 0, 220,
	0, 217, 0, 470, 218, 832, 219, 833, 834, 835,
	836, 837, 0, 795, 0, 0, 221, 222, 223, 473,
	224, 225, 226, 0, 228, 227, 0, 818, 474, 229,
	0, 0, 230, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 363, 236, 476, 238, 239, 241, 240, 756,
	0, 785, 814, 242, 838, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 366, 477, 248, 478, 808,
	249, 250, 251, 252, 253, 0, 254, 809, 255, 369,
	256, 0, 257, 258, 259, 260, 261, 839, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 479, 277, 278, 762, 279,
	0, 283, 284, 285, 286, 0, 288, 372, 287, 289,
	290, 802, 291, 280, 281, 292, 0, 293, 840, 374,
	294, 0, 300, 295, 296, 282, 297, 299, 841, 298,
	810, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 842, 843, 0, 0, 309, 310, 811,
	812, 783, 311, 312, 2406, 314, 0, 0, 315, 316,
	317, 318, 803, 319, 0, 382, 320, 321, 322, 383,
	844, 0, 0, 323, 0, 0, 0, 0, 324, 325,
	326, 327, 328, 788, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 753, 754, 0, 0, 0, 174,
	175, 0, 176, 763, 0, 0, 0, 805, 0, 766,
	0, 0, 177, 178, 179, 330, 331, 332, 333, 180,
	334, 335, 0, 181, 336, 337, 182, 183, 0, 804,
	338, 339, 340, 0, 184, 816, 0, 796, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 0, 468,
	194, 192, 193, 0, 797, 798, 800, 0, 799, 801,
	195, 196, 392, 197, 342, 198, 343, 344, 0, 199,
	0, 200, 0, 201, 0, 0, 202, 203, 0, 204,
	0, 0, 0, 345, 205, 206, 207, 806, 807, 0,
	0, 0, 208, 209, 348, 349, 350, 0, 210, 0,
	211, 0, 0, 469, 0, 212, 817, 0, 352, 0,
	213, 214, 215, 216, 813, 815, 471, 0, 220, 0,
	217, 0, 470, 218, 355, 219, 356, 357, 358, 359,
	360, 0, 361, 0, 472, 221, 222, 223, 473, 224,
	225, 226, 0, 228, 227, 0, 818, 474, 229, 475,
	0, 230, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 363, 236, 476, 238, 239, 241, 240, 0, 0,
	0, 814, 242, 365, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 366, 477, 248, 478, 808, 249,
	250, 251, 252, 253, 0, 254, 809, 255, 369, 256,
	0, 257, 258, 259, 260, 261, 370, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 479, 277, 278, 371, 279, 0,
	283, 284, 285, 286, 0, 288, 372, 287, 289, 290,
	802, 291, 280, 281, 292, 480, 293, 373, 374, 294,
	0, 300, 295, 296, 282, 297, 299, 375, 298, 810,
	0, 301, 0, 302, 303, 304, 305, 306, 307, 308,
	0, 377, 378, 379, 0, 0, 309, 310, 811, 812,
	0, 311, 312, 313, 314, 0, 0, 315, 316, 317,
	318, 803, 319, 0, 382, 320, 321, 322, 383, 384,
	0, 0, 323, 901, 0, 684, 0, 324, 325, 326,
	327, 328, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 329,
	0, 0, 1962, 0, 177, 178, 179, 330, 331, 332,
	333, 180, 334, 335, 0, 181, 336, 337, 182, 183,
	0, 0, 338, 339, 340, 0, 184, 341, 0, 467,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 468, 194, 192, 193, 0, 0, 0, 0, 0,
	0, 0, 195, 196, 392, 197, 342, 198, 343, 344,
	0, 199, 0, 200, 0, 201, 0, 0, 202, 203,
	0, 204, 0, 0, 0, 345, 205, 206, 207, 346,
	347, 0, 0, 0, 208, 209, 348, 349, 350, 0,
	210, 0, 211, 0, 0, 469, 0, 212, 351, 0,
	352, 0, 213, 214, 215, 216, 353, 354, 471, 0,
	220, 0, 217, 0, 470, 218, 355, 219, 356, 357,
	358, 359, 360, 0, 361, 0, 472, 221, 222, 223,
	473, 224, 225, 226, 0, 228, 227, 0, 362, 474,
	229, 475, 0, 230, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 363, 236, 476, 238, 239, 241, 240,
	0, 0, 0, 364, 242, 365, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 366, 477, 248, 478,
	367, 249, 250, 251, 252, 253, 0, 254, 368, 255,
	369, 256, 0, 257, 258, 259, 260, 261, 370, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 479, 277, 278, 371,
	279, 0, 283, 284, 285, 286, 131, 288, 372, 287,
	289, 290, 0, 291, 280, 281, 292, 480, 293, 373,
	374, 294, 0, 300, 295, 296, 282, 297, 299, 375,
	298, 376, 0, 301, 133, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 378, 379, 0, 0, 309, 310,
	380, 381, 0, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 319, 0, 382, 320, 321, 322,
	904, 384, 0, 0, 323, 0, 0, 0, 125, 324,
	325, 326, 327, 328, 0, 126, 684, 681, 0, 682,
	677, 672, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 118, 176, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 0, 184, 341, 0,
	467, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 468, 194, 192, 193, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 1307, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 674, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 0, 0, 469, 0, 212, 351,
	0, 352, 0, 213, 214, 215, 216, 353, 354, 471,
	0, 220, 0, 217, 0, 470, 218, 355, 219, 356,
	357, 358, 359, 360, 0, 361, 0, 472, 221, 222,
	223, 473, 224, 225, 226, 0, 228, 227, 0, 362,
	474, 229, 475, 0, 230, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 363, 236, 476, 238, 239, 241,
	240, 0, 0, 0, 364, 242, 365, 243, 244, 0,
	245, 675, 0, 246, 0, 0, 247, 366, 477, 248,
	478, 367, 249, 250, 251, 252, 253, 0, 254, 368,
	255, 369, 256, 0, 257, 258, 259, 260, 261, 370,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 479, 277, 278,
	371, 279, 0, 283, 284, 285, 286, 0, 288, 372,
	287, 289, 290, 0, 291, 280, 281, 292, 480, 293,
	373, 374, 294, 0, 300, 295, 296, 282, 297, 299,
	375, 298, 376, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 378, 379, 0, 0, 309,
	310, 380, 381, 673, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 0, 319, 0, 382, 320, 321,
	322, 383, 384, 0, 0, 323, 0, 0, 0, 0,
	324, 325, 326, 327, 328, 684, 681, 0, 682, 677,
	672, 0, 0, 0, 0, 0, 683, 678, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 329,
	0, 0, 0, 0, 177, 178, 179, 330, 331, 332,
	333, 180, 334, 335, 0, 181, 336, 337, 182, 183,
	0, 0, 338, 339, 340, 0, 184, 341, 0, 467,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 468, 194, 192, 193, 0, 0, 0, 0, 0,
	0, 0, 195, 196, 392, 197, 342, 198, 343, 344,
	1304, 199, 0, 200, 0, 201, 0, 0, 202, 203,
	0, 204, 0, 0, 0, 345, 205, 206, 207, 346,
	347, 674, 0, 0, 208, 209, 348, 349, 350, 0,
	210, 0, 211, 0, 0, 469, 0, 212, 351, 0,
	352, 0, 213, 214, 215, 216, 353, 354, 471, 0,
	220, 0, 217, 0, 470, 218, 355, 219, 356, 357,
	358, 359, 360, 0, 361, 0, 472, 221, 222, 223,
	473, 224, 225, 226, 0, 228, 227, 0, 362, 474,
	229, 475, 0, 230, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 363, 236, 476, 238, 239, 241, 240,
	0, 0, 0, 364, 242, 365, 243, 244, 0, 245,
	675, 0, 246, 0, 0, 247, 366, 477, 248, 478,
	367, 249, 250, 251, 252, 253, 0, 254, 368, 255,
	369, 256, 0, 257, 258, 259, 260, 261, 370, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 479, 277, 278, 371,
	279, 0, 283, 284, 285, 286, 0, 288, 372, 287,
	289, 290, 0, 291, 280, 281, 292, 480, 293, 373,
	374, 294, 0, 300, 295, 296, 282, 297, 299, 375,
	298, 376, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 378, 379, 0, 0, 309, 310,
	380, 381, 673, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 319, 0, 382, 320, 321, 322,
	383, 384, 0, 0, 323, 0, 0, 0, 0, 324,
	325, 326, 327, 328, 684, 681, 0, 682, 677, 672,
	0, 0, 0, 0, 0, 683, 678, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 467, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	468, 194, 192, 193, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 945,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	674, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 469, 0, 212, 351, 0, 352,
	0, 213, 214, 215, 216, 353, 354, 471, 0, 220,
	0, 217, 0, 470, 218, 355, 219, 356, 357, 358,
	359, 360, 0, 361, 0, 472, 221, 222, 223, 473,
	224, 225, 226, 0, 228, 227, 0, 362, 474, 229,
	475, 0, 230, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 363, 236, 476, 238, 239, 241, 240, 0,
	0, 0, 364, 242, 365, 243, 244, 0, 245, 675,
	0, 246, 0, 0, 247, 366, 477, 248, 478, 367,
	249, 250, 251, 252, 253, 0, 254, 368, 255, 369,
	256, 0, 257, 258, 259, 260, 261, 370, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 479, 277, 278, 371, 279,
	0, 283, 284, 285, 286, 0, 288, 372, 287, 289,
	290, 0, 291, 280, 281, 292, 480, 293, 373, 374,
	294, 0, 300, 295, 296, 282, 297, 299, 375, 298,
	376, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 378, 379, 0, 0, 309, 310, 380,
	381, 673, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 319, 0, 382, 320, 321, 322, 383,
	384, 0, 0, 323, 0, 0, 0, 0, 324, 325,
	326, 327, 328, 669, 0, 684, 681, 0, 682, 677,
	672, 0, 0, 0, 683, 678, 0, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 329,
	0, 0, 0, 0, 177, 178, 179, 330, 331, 332,
	333, 180, 334, 335, 0, 181, 336, 337, 182, 183,
	0, 0, 338, 339, 340, 0, 184, 341, 0, 467,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 468, 194, 192, 193, 0, 0, 0, 0, 0,
	0, 0, 195, 196, 392, 197, 342, 198, 343, 344,
	0, 199, 0, 200, 0, 201, 0, 0, 202, 203,
	0, 204, 0, 0, 0, 345, 205, 206, 207, 346,
	347, 674, 0, 0, 208, 209, 348, 349, 350, 0,
	210, 0, 211, 0, 0, 469, 0, 212, 351, 0,
	352, 0, 213, 214, 215, 216, 353, 354, 471, 0,
	220, 0, 217, 0, 470, 218, 355, 219, 356, 357,
	358, 359, 360, 0, 361, 0, 472, 221, 222, 223,
	473, 224, 225, 226, 0, 228, 227, 0, 362, 474,
	229, 475, 0, 230, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 363, 236, 476, 238, 239, 241, 240,
	0, 0, 0, 364, 242, 365, 243, 244, 0, 245,
	675, 0, 246, 0, 0, 247, 366, 477, 248, 478,
	367, 249, 250, 251, 252, 253, 0, 254, 368, 255,
	369, 256, 0, 257, 258, 259, 260, 261, 370, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 479, 277, 278, 371,
	279, 0, 283, 284, 285, 286, 0, 288, 372, 287,
	289, 290, 0, 291, 280, 281, 292, 480, 293, 373,
	374, 294, 0, 300, 295, 296, 282, 297, 299, 375,
	298, 376, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 378, 379, 0, 0, 309, 310,
	380, 381, 673, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 319, 0, 382, 320, 321, 322,
	383, 384, 0, 0, 323, 0, 0, 0, 0, 324,
	325, 326, 327, 328, 684, 681, 0, 682, 677, 672,
	0, 0, 0, 0, 0, 683, 678, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 467, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	468, 194, 192, 193, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	674, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 469, 0, 212, 351, 0, 352,
	0, 213, 214, 215, 216, 353, 354, 471, 0, 220,
	0, 217, 0, 470, 218, 355, 219, 356, 357, 358,
	359, 360, 0, 361, 0, 472, 221, 222, 223, 473,
	224, 225, 226, 0, 228, 227, 0, 362, 474, 229,
	475, 0, 230, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 363, 236, 476, 238, 239, 241, 240, 0,
	0, 0, 364, 242, 365, 243, 244, 0, 245, 675,
	0, 246, 0, 0, 247, 366, 477, 248, 478, 367,
	249, 250, 251, 252, 253, 0, 254, 368, 255, 369,
	256, 0, 257, 258, 259, 260, 261, 370, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 479, 277, 278, 371, 279,
	0, 283, 284, 285, 286, 0, 288, 372, 287, 289,
	290, 0, 291, 280, 281, 292, 480, 293, 373, 374,
	294, 0, 300, 295, 296, 282, 297, 299, 375, 298,
	376, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 378, 379, 0, 0, 309, 310, 380,
	381, 673, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 319, 0, 382, 320, 321, 322, 383,
	384, 0, 666, 323, 171, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 683, 678, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 194, 192, 193, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 213, 214, 215, 216, 353, 354, 0, 0, 220,
	0, 217, 0, 0, 218, 355, 219, 356, 357, 358,
	359, 360, 0, 361, 0, 0, 221, 222, 223, 0,
	224, 225, 226, 0, 228, 227, 0, 362, 0, 229,
	0, 0, 230, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 363, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 364, 242, 365, 243, 244, 0, 245, 0,
	726, 246, 0, 0, 247, 366, 0, 248, 0, 367,
	249, 250, 251, 252, 253, 0, 254, 368, 255, 369,
	256, 0, 257, 258, 259, 260, 261, 370, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 371, 279,
	0, 283, 284, 285, 286, 131, 288, 372, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 373, 374,
	294, 0, 300, 295, 296, 282, 297, 299, 375, 298,
	376, 0, 301, 133, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 378, 379, 0, 0, 309, 310, 380,
	381, 0, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 319, 0, 382, 320, 321, 322, 904,
	384, 0, 0, 323, 0, 171, 0, 125, 324, 325,
	326, 327, 328, 0, 126, 0, 0, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 329,
	0, 720, 0, 1053, 177, 178, 179, 330, 331, 332,
	333, 180, 334, 335, 0, 181, 336, 337, 182, 183,
	0, 0, 338, 339, 340, 0, 184, 341, 0, 0,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 0, 194, 192, 193, 0, 0, 0, 0, 0,
	0, 0, 195, 196, 392, 197, 342, 198, 343, 344,
	0, 199, 0, 200, 0, 201, 0, 0, 202, 203,
	0, 204, 0, 0, 0, 345, 205, 206, 207, 346,
	347, 0, 0, 0, 208, 209, 348, 349, 350, 0,
	210, 0, 211, 0, 0, 0, 0, 212, 351, 0,
	352, 0, 213, 214, 215, 216, 353, 354, 0, 0,
	220, 0, 217, 0, 0, 218, 355, 219, 356, 357,
	358, 359, 360, 0, 361, 0, 0, 221, 222, 223,
	0, 224, 225, 226, 0, 228, 227, 0, 362, 0,
	229, 0, 0, 230, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 363, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 364, 242, 365, 243, 244, 0, 245,
	0, 726, 246, 0, 0, 247, 366, 0, 248, 0,
	367, 249, 250, 251, 252, 253, 0, 254, 368, 255,
	369, 256, 0, 257, 258, 259, 260, 261, 370, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 371,
	279, 0, 283, 284, 285, 286, 131, 288, 372, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 373,
	374, 294, 0, 300, 295, 296, 282, 297, 299, 375,
	298, 376, 0, 301, 133, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 378, 379, 0, 0, 309, 310,
	380, 381, 0, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 319, 0, 382, 320, 321, 322,
	904, 384, 0, 0, 323, 666, 0, 171, 125, 324,
	325, 326, 327, 328, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 329, 720, 0, 1053, 0, 177, 178, 179, 330,
	331, 332, 333, 180, 334, 335, 0, 181, 336, 337,
	182, 183, 0, 0, 338, 339, 340, 0, 184, 341,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 194, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 195, 196, 392, 197, 342, 198,
	343, 344, 0, 199, 0, 200, 0, 201, 0, 0,
	202, 203, 0, 204, 0, 0, 0, 345, 205, 206,
	207, 346, 347, 0, 0, 0, 208, 209, 348, 349,
	350, 0, 210, 0, 211, 0, 0, 0, 0, 212,
	351, 0, 352, 0, 213, 214, 215, 216, 353, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 363, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 364, 242, 365, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 366, 0,
	248, 0, 367, 249, 250, 251, 252, 253, 0, 254,
	368, 255, 369, 256, 0, 257, 258, 259, 260, 261,
	370, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 371, 279, 0, 283, 284, 285, 286, 131, 288,
	372, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 373, 374, 294, 0, 300, 295, 296, 282, 297,
	299, 375, 298, 376, 0, 301, 133, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 904, 384, 0, 0, 323, 1688, 0, 171,
	125, 324, 325, 326, 327, 328, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 174, 175, 0, 176, 0,
	0, 0, 0, 329, 0, 0, 118, 0, 177, 178,
	179, 330, 331, 332, 333, 180, 334, 335, 0, 181,
	336, 337, 182, 183, 0, 0, 338, 339, 340, 0,
	184, 341, 0, 0, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 0, 194, 192, 193, 0,
	0, 0, 0, 0, 0, 0, 195, 196, 392, 197,
	342, 198, 343, 344, 0, 199, 0, 200, 0, 201,
	0, 0, 202, 203, 0, 204, 0, 0, 0, 345,
	205, 206, 207, 346, 347, 0, 0, 0, 208, 209,
	348, 349, 350, 0, 210, 0, 211, 0, 0, 0,
	0, 212, 351, 0, 352, 0, 213, 214, 215, 216,
	353, 354, 0, 0, 220, 0, 217, 0, 0, 218,
	355, 219, 356, 357, 358, 359, 360, 0, 361, 0,
	0, 221, 222, 223, 0, 224, 225, 226, 0, 228,
	227, 0, 362, 0, 229, 0, 0, 230, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 363, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 364, 242, 365,
	243, 244, 0, 245, 0, 726, 246, 0, 0, 247,
	366, 0, 248, 0, 367, 249, 250, 251, 252, 253,
	0, 254, 368, 255, 369, 256, 0, 257, 258, 259,
	260, 261, 370, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 371, 279, 0, 283, 284, 285, 286,
	0, 288, 372, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 373, 374, 294, 0, 300, 295, 296,
	282, 297, 299, 375, 298, 376, 0, 301, 0, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 378, 379,
	0, 0, 309, 310, 380, 381, 0, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 319, 0,
	382, 320, 321, 322, 383, 384, 0, 0, 323, 719,
	0, 171, 0, 324, 325, 326, 327, 328, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 329, 720, 0, 725, 0,
	177, 178, 179, 330, 331, 332, 333, 180, 334, 335,
	0, 181, 336, 337, 182, 183, 0, 0, 338, 339,
	340, 0, 184, 341, 0, 0, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 0, 194, 192,
	193, 0, 0, 0, 0, 0, 0, 0, 195, 196,
	392, 197, 342, 198, 343, 344, 0, 199, 0, 200,
	0, 201, 0, 0, 202, 203, 0, 204, 0, 0,
	0, 345, 205, 206, 207, 346, 347, 0, 0, 0,
	208, 209, 348, 349, 350, 0, 210, 0, 211, 0,
	0, 0, 0, 212, 351, 0, 352, 0, 213, 214,
	215, 216, 353, 354, 0, 0, 220, 0, 217, 0,
	0, 218, 355, 219, 356, 357, 358, 359, 360, 0,
	361, 0, 0, 221, 222, 223, 0, 224, 225, 226,
	0, 228, 227, 0, 362, 0, 229, 0, 0, 230,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 363,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 364,
	242, 365, 243, 244, 0, 245, 0, 726, 246, 0,
	0, 247, 366, 0, 248, 0, 367, 249, 250, 251,
	252, 253, 0, 254, 368, 255, 369, 256, 0, 257,
	258, 259, 260, 261, 370, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 371, 279, 0, 283, 284,
	285, 286, 0, 288, 372, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 373, 374, 294, 0, 300,
	295, 296, 282, 297, 299, 375, 298, 376, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	378, 379, 0, 0, 309, 310, 380, 381, 0, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	319, 0, 382, 320, 321, 322, 383, 384, 0, 0,
	323, 0, 171, 0, 0, 324, 325, 326, 327, 328,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 329, 0, 720, 0,
	725, 177, 178, 179, 330, 331, 332, 333, 180, 334,
	335, 0, 181, 336, 337, 182, 183, 0, 0, 338,
	339, 340, 0, 184, 341, 0, 0, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 0, 194,
	192, 193, 0, 0, 0, 0, 0, 0, 0, 195,
	196, 392, 197, 342, 198, 343, 344, 0, 199, 0,
	200, 0, 201, 0, 0, 202, 203, 0, 204, 0,
	0, 0, 345, 205, 206, 207, 346, 347, 0, 0,
	0, 208, 209, 348, 349, 350, 0, 210, 0, 211,
	0, 0, 0, 0, 212, 351, 0, 352, 0, 213,
	214, 215, 216, 353, 354, 0, 0, 220, 0, 217,
	0, 0, 218, 355, 219, 356, 357, 358, 359, 360,
	0, 361, 0, 0, 221, 222, 223, 0, 224, 225,
	226, 0, 228, 227, 0, 362, 0, 229, 0, 0,
	230, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	363, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	364, 242, 365, 243, 244, 0, 245, 0, 726, 246,
	0, 0, 247, 366, 0, 248, 0, 367, 249, 250,
	251, 252, 253, 0, 254, 368, 255, 369, 256, 0,
	257, 258, 259, 260, 261, 370, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 371, 279, 0, 283,
	284, 285, 286, 0, 288, 372, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 373, 374, 294, 0,
	300, 295, 296, 282, 297, 299, 375, 298, 376, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 378, 379, 0, 0, 309, 310, 380, 381, 0,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	0, 319, 0, 382, 320, 321, 322, 383, 384, 0,
	0, 323, 0, 171, 0, 0, 324, 325, 326, 327,
	328, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	175, 0, 176, 0, 0, 0, 0, 329, 0, 720,
	0, 725, 177, 178, 179, 330, 331, 332, 333, 180,
	334, 335, 0, 181, 336, 337, 182, 183, 0, 0,
	338, 339, 340, 0, 184, 341, 0, 0, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 0, 0,
	194, 192, 193, 0, 0, 0, 0, 0, 0, 0,
	195, 196, 392, 197, 342, 198, 343, 344, 0, 199,
	0, 200, 0, 201, 0, 0, 202, 203, 0, 204,
	0, 0, 0, 345, 205, 206, 207, 346, 347, 0,
	0, 0, 208, 209, 348, 349, 350, 0, 210, 0,
	211, 0, 0, 0, 0, 212, 351, 0, 352, 0,
	213, 214, 215, 216, 353, 354, 0, 0, 220, 0,
	217, 0, 0, 218, 355, 219, 356, 357, 358, 359,
	360, 0, 361, 0, 0, 221, 222, 223, 0, 224,
	225, 226, 0, 228, 227, 0, 362, 0, 229, 0,
	0, 230, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 363, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 364, 242, 365, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 366, 0, 248, 0, 367, 249,
	250, 251, 252, 253, 0, 254, 368, 255, 369, 256,
	0, 257, 258, 259, 260, 261, 370, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 371, 279, 0,
	283, 284, 285, 286, 0, 288, 372, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 373, 374, 294,
	0, 300, 295, 296, 282, 297, 299, 375, 298, 376,
	0, 301, 0, 302, 303, 304, 305, 306, 307, 308,
	0, 377, 378, 379, 0, 0, 309, 310, 380, 381,
	0, 311, 312, 313, 314, 0, 0, 315, 316, 317,
	318, 0, 319, 0, 382, 320, 321, 322, 383, 384,
	0, 0, 323, 0, 0, 171, 0, 324, 325, 326,
	327, 328, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 329,
	0, 0, 0, 1183, 177, 178, 179, 330, 331, 332,
	333, 180, 334, 335, 0, 181, 336, 337, 182, 183,
	0, 0, 338, 339, 340, 0, 184, 341, 0, 0,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 0, 194, 192, 193, 0, 0, 0, 0, 0,
	0, 0, 195, 196, 392, 197, 342, 198, 343, 344,
	0, 199, 0, 200, 0, 201, 0, 0, 202, 203,
	0, 204, 0, 0, 0, 345, 205, 206, 207, 346,
	347, 0, 0, 0, 208, 209, 348, 349, 350, 0,
	210, 0, 211, 0, 0, 0, 0, 212, 351, 0,
	352, 0, 213, 214, 215, 216, 353, 354, 0, 0,
	220, 0, 217, 0, 0, 218, 355, 219, 356, 357,
	358, 359, 360, 0, 361, 0, 0, 221, 222, 223,
	0, 224, 225, 226, 0, 228, 227, 0, 362, 0,
	229, 0, 0, 230, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 363, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 364, 242, 365, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 366, 0, 248, 0,
	367, 249, 250, 251, 252, 253, 0, 254, 368, 255,
	369, 256, 0, 257, 258, 259, 260, 261, 370, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 371,
	279, 0, 283, 284, 285, 286, 0, 288, 372, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 373,
	374, 294, 0, 300, 295, 296, 282, 297, 299, 375,
	298, 376, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 378, 379, 0, 0, 309, 310,
	380, 381, 0, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 319, 0, 382, 320, 321, 322,
	383, 384, 0, 0, 323, 0, 171, 0, 0, 324,
	325, 326, 327, 328, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	329, 0, 0, 0, 1626, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 0, 184, 341, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 194, 192, 193, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 0, 0, 0, 0, 212, 351,
	0, 352, 0, 213, 214, 215, 216, 353, 354, 0,
	0, 220, 0, 217, 0, 0, 218, 355, 219, 356,
	357, 358, 359, 360, 0, 361, 0, 0, 221, 222,
	223, 0, 224, 225, 226, 0, 228, 227, 0, 362,
	0, 229, 0, 0, 230, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 363, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 364, 242, 365, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 366, 0, 248,
	0, 367, 249, 250, 251, 252, 253, 0, 254, 368,
	255, 369, 256, 0, 257, 258, 259, 260, 261, 370,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	371, 279, 0, 283, 284, 285, 286, 0, 288, 372,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	373, 374, 294, 0, 300, 295, 296, 282, 297, 299,
	375, 298, 376, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 378, 379, 0, 0, 309,
	310, 380, 381, 0, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 0, 319, 0, 382, 320, 321,
	322, 383, 384, 0, 0, 323, 0, 171, 0, 0,
	324, 325, 326, 327, 328, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 329, 0, 0, 0, 2023, 177, 178, 179, 330,
	331, 332, 333, 180, 334, 335, 0, 181, 336, 337,
	182, 183, 0, 0, 338, 339, 340, 0, 184, 341,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 194, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 195, 196, 392, 197, 342, 198,
	343, 344, 0, 199, 0, 200, 0, 201, 0, 0,
	202, 203, 0, 204, 0, 0, 0, 345, 205, 206,
	207, 346, 347, 0, 0, 0, 208, 209, 348, 349,
	350, 0, 210, 0, 211, 0, 0, 0, 0, 212,
	351, 0, 352, 0, 213, 214, 215, 216, 353, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 363, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 364, 242, 365, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 366, 0,
	248, 0, 367, 249, 250, 251, 252, 253, 0, 254,
	368, 255, 369, 256, 0, 257, 258, 259, 260, 261,
	370, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 371, 279, 0, 283, 284, 285, 286, 0, 288,
	372, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 373, 374, 294, 0, 300, 295, 296, 282, 297,
	299, 375, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 0, 0, 323, 0, 0, 0,
	0, 324, 325, 326, 327, 328, 788, 777, 778, 775,
	776, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 1056, 0, 0, 0,
	329, 0, 0, 0, 0, 177, 178, 179, 330, 820,
	332, 821, 180, 822, 823, 0, 181, 336, 337, 182,
	183, 0, 0, 824, 825, 340, 0, 184, 341, 0,
	467, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 468, 194, 192, 193, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 826, 198, 827,
	828, 0, 199, 0, 200, 0, 201, 0, 0, 819,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 784, 0, 0, 208, 209, 829, 830, 831,
	0, 210, 0, 211, 0, 0, 469, 0, 212, 351,
	0, 352, 0, 213, 214, 215, 216, 353, 354, 471,
	0, 220, 0, 217, 0, 470, 218, 832, 219, 833,
	834, 835, 836, 837, 0, 795, 0, 472, 221, 222,
	223, 473, 224, 225, 226, 0, 228, 227, 0, 362,
	474, 229, 475, 0, 230, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 363, 236, 476, 238, 239, 241,
	240, 0, 0, 785, 364, 242, 838, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 366, 477, 248,
	478, 367, 249, 250, 251, 252, 253, 0, 254, 368,
	255, 369, 256, 0, 257, 258, 259, 260, 261, 839,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 479, 277, 278,
	371, 279, 0, 283, 284, 285, 286, 0, 288, 372,
	287, 289, 290, 0, 291, 280, 281, 292, 480, 293,
	840, 374, 294, 0, 300, 295, 296, 282, 297, 299,
	841, 298, 376, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 842, 843, 0, 0, 309,
	310, 380, 381, 783, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 0, 319, 0, 382, 320, 321,
	322, 383, 844, 0, 0, 323, 0, 0, 0, 0,
	324, 325, 326, 327, 328, 951, 0, 684, 681, 0,
	0, 0, 953, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 329, 0, 0, 0, 0, 177, 178, 179, 330,
	331, 332, 333, 180, 334, 335, 0, 181, 336, 337,
	182, 183, 0, 0, 338, 339, 340, 0, 184, 341,
	0, 467, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 468, 194, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 195, 196, 392, 197, 342, 198,
	343, 344, 0, 199, 0, 200, 0, 201, 0, 0,
	202, 203, 0, 204, 0, 0, 0, 345, 205, 206,
	207, 346, 347, 0, 0, 0, 208, 209, 348, 349,
	350, 0, 210, 0, 211, 0, 0, 469, 0, 212,
	351, 0, 352, 0, 213, 214, 215, 216, 353, 354,
	471, 0, 220, 0, 217, 0, 470, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 472, 221,
	222, 223, 473, 224, 225, 226, 0, 228, 227, 0,
	362, 474, 229, 475, 0, 230, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 363, 236, 476, 238, 239,
	241, 240, 0, 0, 0, 364, 242, 365, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 366, 477,
	248, 478, 367, 249, 250, 251, 252, 253, 0, 254,
	368, 255, 369, 256, 0, 257, 258, 259, 260, 261,
	370, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 479, 277,
	278, 371, 279, 0, 283, 284, 285, 286, 0, 288,
	372, 287, 289, 290, 0, 291, 280, 281, 292, 480,
	293, 373, 374, 294, 0, 300, 295, 296, 282, 297,
	299, 375, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 0, 569, 323, 171, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 329, 0, 0, 0, 0, 177, 178, 179, 330,
	331, 332, 333, 180, 334, 335, 0, 181, 336, 337,
	182, 183, 0, 0, 338, 339, 340, 0, 184, 341,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 194, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 195, 196, 167, 197, 342, 198,
	343, 344, 0, 199, 0, 200, 0, 201, 0, 0,
	202, 203, 0, 204, 0, 0, 0, 345, 205, 206,
	207, 346, 347, 0, 0, 0, 208, 209, 348, 349,
	350, 0, 210, 0, 211, 0, 0, 0, 0, 212,
	351, 0, 352, 0, 213, 214, 215, 216, 353, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 363, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 364, 242, 365, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 366, 0,
	248, 0, 367, 249, 250, 251, 252, 253, 0, 254,
	368, 255, 369, 256, 0, 257, 258, 259, 260, 261,
	370, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 371, 279, 0, 283, 284, 285, 286, 0, 288,
	372, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 373, 374, 294, 0, 300, 295, 296, 282, 297,
	299, 375, 298, 376, 0, 301, 166, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 0, 164, 323, 171, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 170,
	0, 329, 0, 0, 0, 0, 177, 178, 179, 330,
	331, 332, 333, 180, 334, 335, 0, 181, 336, 337,
	182, 183, 0, 0, 338, 339, 340, 0, 184, 341,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 194, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 195, 196, 167, 197, 342, 198,
	343, 344, 0, 199, 0, 200, 0, 201, 0, 0,
	202, 203, 0, 204, 0, 0, 0, 345, 205, 206,
	207, 346, 347, 0, 0, 0, 208, 209, 348, 349,
	350, 0, 210, 0, 211, 0, 0, 0, 0, 212,
	351, 0, 352, 0, 213, 214, 215, 216, 353, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 363, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 364, 242, 365, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 366, 0,
	248, 0, 367, 249, 250, 251, 252, 253, 0, 254,
	368, 255, 369, 256, 0, 257, 258, 259, 260, 261,
	370, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 371, 279, 0, 283, 284, 285, 286, 0, 288,
	372, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 373, 374, 294, 0, 300, 295, 296, 282, 297,
	299, 375, 298, 376, 0, 301, 166, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 684, 681, 323, 0, 0, 953,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 170,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 467, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	468, 194, 192, 193, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 469, 0, 212, 351, 0, 352,
	0, 213, 214, 215, 216, 353, 354, 471, 0, 220,
	0, 217, 0, 470, 218, 355, 219, 356, 357, 358,
	359, 360, 0, 361, 0, 472, 221, 222, 223, 473,
	224, 225, 226, 0, 228, 227, 0, 362, 474, 229,
	475, 0, 230, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 363, 236, 476, 238, 239, 241, 240, 0,
	0, 0, 364, 242, 365, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 366, 477, 248, 478, 367,
	249, 250, 251, 252, 253, 0, 254, 368, 255, 369,
	256, 0, 257, 258, 259, 260, 261, 370, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 479, 277, 278, 371, 279,
	0, 283, 284, 285, 286, 0, 288, 372, 287, 289,
	290, 0, 291, 280, 281, 292, 480, 293, 373, 374,
	294, 0, 300, 295, 296, 282, 297, 299, 375, 298,
	376, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 378, 379, 0, 0, 309, 310, 380,
	381, 0, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 319, 0, 382, 320, 321, 322, 383,
	384, 171, 0, 323, 0, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 0, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 329, 0, 0, 0, 0,
	177, 178, 179, 330, 331, 332, 333, 180, 334, 335,
	0, 181, 336, 337, 182, 183, 0, 0, 338, 339,
	340, 0, 184, 341, 0, 0, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 0, 194, 192,
	193, 0, 0, 0, 0, 0, 0, 0, 195, 196,
	167, 197, 342, 198, 343, 344, 0, 199, 0, 200,
	0, 201, 0, 0, 202, 203, 0, 204, 0, 0,
	0, 345, 205, 206, 207, 346, 347, 0, 0, 0,
	208, 209, 348, 349, 350, 0, 210, 0, 211, 0,
	0, 0, 0, 212, 351, 0, 352, 0, 213, 214,
	215, 216, 353, 354, 0, 0, 220, 0, 217, 0,
	0, 218, 355, 219, 356, 357, 358, 359, 360, 0,
	361, 0, 0, 221, 222, 223, 0, 224, 225, 226,
	0, 228, 227, 0, 362, 0, 229, 0, 0, 230,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 363,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 364,
	242, 365, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 366, 0, 248, 0, 367, 249, 250, 251,
	252, 253, 0, 254, 368, 255, 369, 256, 0, 257,
	258, 259, 260, 261, 370, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 371, 279, 0, 283, 284,
	285, 286, 0, 288, 372, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 373, 374, 294, 0, 300,
	295, 296, 282, 297, 299, 375, 298, 376, 0, 301,
	166, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	378, 379, 0, 0, 309, 310, 380, 381, 0, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	319, 0, 382, 320, 321, 322, 383, 384, 684, 681,
	323, 0, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 329, 170, 0, 0, 0, 177, 178, 179,
	330, 331, 332, 333, 180, 334, 335, 0, 181, 336,
	337, 182, 183, 0, 0, 338, 339, 340, 0, 184,
	341, 0, 467, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 468, 194, 192, 193, 0, 0,
	0, 0, 0, 0, 0, 195, 196, 392, 197, 342,
	198, 343, 344, 0, 199, 0, 200, 0, 201, 0,
	0, 202, 203, 0, 204, 0, 0, 0, 345, 205,
	206, 207, 346, 347, 0, 0, 0, 208, 209, 348,
	349, 350, 0, 210, 0, 211, 0, 0, 469, 0,
	212, 351, 0, 352, 0, 213, 214, 215, 216, 353,
	354, 471, 0, 220, 0, 217, 0, 470, 218, 355,
	219, 356, 357, 358, 359, 360, 0, 361, 0, 472,
	221, 222, 223, 473, 224, 225, 226, 0, 228, 227,
	0, 362, 474, 229, 475, 0, 230, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 363, 236, 476, 238,
	239, 241, 240, 0, 0, 0, 364, 242, 365, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 366,
	477, 248, 478, 367, 249, 250, 251, 252, 253, 0,
	254, 368, 255, 369, 256, 0, 257, 258, 259, 260,
	261, 370, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 479,
	277, 278, 371, 279, 0, 283, 284, 285, 286, 0,
	288, 372, 287, 289, 290, 0, 291, 280, 281, 292,
	480, 293, 373, 374, 294, 0, 300, 295, 296, 282,
	297, 299, 375, 298, 376, 0, 301, 0, 302, 303,
	304, 305, 306, 307, 308, 0, 377, 378, 379, 0,
	0, 309, 310, 380, 381, 0, 311, 312, 313, 314,
	0, 0, 315, 316, 317, 318, 0, 319, 0, 382,
	320, 321, 322, 383, 384, 171, 0, 323, 0, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 329,
	0, 0, 0, 0, 177, 178, 179, 330, 331, 332,
	333, 180, 334, 335, 0, 181, 336, 337, 182, 183,
	0, 0, 338, 339, 340, 0, 184, 341, 0, 0,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 0, 194, 192, 193, 0, 0, 0, 0, 0,
	0, 0, 195, 196, 392, 197, 342, 198, 343, 344,
	0, 199, 0, 200, 0, 201, 0, 0, 202, 203,
	0, 204, 0, 0, 0, 345, 205, 206, 207, 346,
	347, 0, 0, 0, 208, 209, 348, 349, 350, 0,
	210, 0, 211, 0, 0, 0, 0, 212, 351, 0,
	352, 0, 213, 214, 215, 216, 353, 354, 0, 0,
	220, 0, 217, 0, 0, 218, 355, 219, 356, 357,
	358, 359, 360, 0, 361, 0, 0, 221, 222, 223,
	0, 224, 225, 226, 0, 228, 227, 0, 362, 0,
	229, 0, 0, 230, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 363, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 364, 242, 365, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 366, 0, 248, 0,
	367, 249, 250, 251, 252, 253, 0, 254, 368, 255,
	369, 256, 0, 257, 258, 259, 260, 261, 370, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 371,
	279, 0, 283, 284, 285, 286, 0, 288, 372, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 373,
	374, 294, 0, 300, 295, 296, 282, 297, 299, 375,
	298, 376, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 378, 379, 0, 0, 309, 310,
	380, 381, 0, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 319, 0, 382, 320, 321, 322,
	383, 384, 684, 0, 323, 0, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 329, 170, 0, 0,
	0, 177, 178, 179, 330, 331, 332, 333, 180, 334,
	335, 0, 181, 336, 337, 182, 183, 0, 0, 338,
	339, 340, 0, 184, 341, 0, 467, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 468, 194,
	192, 193, 0, 0, 0, 0, 0, 0, 0, 195,
	196, 392, 197, 342, 198, 343, 344, 0, 199, 0,
	200, 0, 201, 0, 0, 202, 203, 0, 204, 0,
	0, 0, 345, 205, 206, 207, 346, 347, 0, 0,
	0, 208, 209, 348, 349, 350, 0, 210, 0, 211,
	0, 0, 469, 0, 212, 351, 0, 352, 0, 213,
	214, 215, 216, 353, 354, 471, 0, 220, 0, 217,
	0, 470, 218, 355, 219, 356, 357, 358, 359, 360,
	0, 361, 0, 472, 221, 222, 223, 473, 224, 225,
	226, 0, 228, 227, 0, 362, 474, 229, 475, 0,
	230, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	363, 236, 476, 238, 239, 241, 240, 0, 0, 0,
	364, 242, 365, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 366, 477, 248, 478, 367, 249, 250,
	251, 252, 253, 0, 254, 368, 255, 369, 256, 0,
	257, 258, 259, 260, 261, 370, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 479, 277, 278, 371, 279, 0, 283,
	284, 285, 286, 0, 288, 372, 287, 289, 290, 0,
	291, 280, 281, 292, 480, 293, 373, 374, 294, 0,
	300, 295, 296, 282, 297, 299, 375, 298, 376, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 378, 379, 0, 0, 309, 310, 380, 381, 0,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	0, 319, 0, 382, 320, 321, 322, 383, 384, 171,
	0, 323, 0, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 0, 0, 0, 174, 175, 0, 176, 0,
	0, 0, 0, 329, 0, 0, 0, 0, 177, 178,
	179, 330, 331, 332, 333, 180, 334, 335, 0, 181,
	336, 337, 182, 183, 0, 0, 338, 339, 340, 1406,
	184, 341, 0, 0, 0, 185, 186, 187, 0, 188,
	1404, 189, 190, 191, 0, 0, 194, 192, 193, 0,
	0, 0, 0, 0, 0, 0, 195, 196, 392, 197,
	342, 198, 343, 344, 0, 199, 0, 200, 0, 201,
	0, 0, 202, 203, 0, 204, 0, 0, 0, 345,
	205, 206, 207, 346, 347, 0, 1603, 0, 208, 209,
	348, 349, 350, 0, 210, 0, 211, 1409, 0, 0,
	0, 212, 351, 0, 352, 0, 213, 214, 215, 216,
	353, 354, 0, 0, 220, 1601, 217, 0, 0, 218,
	355, 219, 356, 357, 358, 359, 360, 0, 361, 0,
	0, 221, 222, 223, 0, 224, 225, 226, 0, 228,
	227, 0, 362, 0, 229, 0, 0, 230, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 363, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 364, 242, 365,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	366, 0, 248, 0, 367, 249, 250, 251, 252, 253,
	0, 254, 368, 255, 369, 256, 1408, 257, 258, 259,
	260, 261, 370, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 371, 279, 0, 283, 284, 285, 286,
	0, 288, 372, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 373, 374, 294, 0, 300, 295, 296,
	282, 297, 299, 375, 298, 376, 0, 301, 0, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 378, 379,
	0, 0, 309, 310, 380, 381, 0, 311, 312, 313,
	314, 0, 1602, 315, 316, 317, 318, 0, 319, 0,
	382, 320, 321, 322, 383, 384, 171, 0, 323, 0,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 1406, 184, 341, 0,
	0, 1401, 185, 186, 187, 0, 188, 1404, 189, 190,
	191, 0, 0, 194, 192, 193, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 1409, 0, 0, 0, 212, 351,
	0, 352, 0, 213, 214, 215, 216, 1400, 354, 0,
	0, 220, 0, 217, 0, 0, 218, 355, 219, 356,
	357, 358, 359, 360, 0, 361, 0, 0, 221, 222,
	223, 0, 224, 225, 226, 0, 228, 227, 0, 362,
	0, 229, 0, 0, 230, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 363, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 364, 242, 365, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 366, 0, 248,
	0, 367, 249, 250, 251, 252, 253, 0, 254, 368,
	255, 369, 256, 1408, 257, 258, 259, 260, 261, 370,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	371, 279, 0, 283, 284, 285, 286, 0, 288, 372,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	373, 374, 294, 0, 300, 295, 296, 282, 297, 299,
	375, 298, 376, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 378, 379, 0, 0, 309,
	310, 380, 381, 0, 311, 312, 313, 314, 0, 1407,
	315, 316, 317, 318, 0, 319, 0, 382, 320, 321,
	322, 383, 384, 0, 879, 323, 171, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 0, 184, 341, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 194, 192, 193, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 0, 0, 0, 0, 212, 351,
	0, 352, 0, 213, 214, 215, 216, 353, 354, 0,
	0, 220, 0, 217, 0, 0, 218, 355, 219, 356,
	357, 358, 359, 360, 0, 361, 0, 0, 221, 222,
	223, 0, 224, 225, 226, 0, 228, 227, 0, 362,
	0, 229, 0, 0, 230, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 363, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 364, 242, 365, 243, 244, 0,
	245, 0, 726, 246, 0, 0, 247, 366, 0, 248,
	0, 367, 249, 250, 251, 252, 253, 0, 254, 368,
	255, 369, 256, 0, 257, 258, 259, 260, 261, 370,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	371, 279, 0, 283, 284, 285, 286, 0, 288, 372,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	373, 374, 294, 0, 300, 295, 296, 282, 297, 299,
	375, 298, 376, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 378, 379, 0, 0, 309,
	310, 380, 381, 0, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 0, 319, 0, 382, 320, 321,
	322, 383, 384, 0, 732, 323, 171, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 0, 184, 341, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 194, 192, 193, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 0, 0, 0, 0, 212, 351,
	0, 352, 0, 213, 214, 215, 216, 734, 354, 0,
	0, 220, 0, 217, 0, 0, 218, 355, 219, 356,
	357, 358, 359, 360, 0, 361, 0, 0, 221, 222,
	223, 0, 224, 225, 226, 0, 228, 227, 0, 362,
	0, 229, 0, 0, 230, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 363, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 364, 242, 365, 243, 244, 0,
	245, 0, 726, 246, 0, 0, 247, 366, 0, 248,
	0, 367, 249, 250, 251, 252, 253, 0, 254, 368,
	255, 369, 256, 0, 257, 258, 259, 260, 261, 370,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	371, 279, 0, 283, 284, 285, 286, 0, 288, 372,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	373, 374, 294, 0, 300, 295, 296, 282, 297, 299,
	375, 298, 376, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 378, 379, 0, 0, 309,
	310, 380, 381, 0, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 0, 319, 0, 382, 320, 321,
	322, 383, 384, 0, 728, 323, 171, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 0, 184, 341, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 194, 192, 193, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 0, 0, 0, 0, 212, 351,
	0, 352, 0, 213, 214, 215, 216, 730, 354, 0,
	0, 220, 0, 217, 0, 0, 218, 355, 219, 356,
	357, 358, 359, 360, 0, 361, 0, 0, 221, 222,
	223, 0, 224, 225, 226, 0, 228, 227, 0, 362,
	0, 229, 0, 0, 230, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 363, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 364, 242, 365, 243, 244, 0,
	245, 0, 726, 246, 0, 0, 247, 366, 0, 248,
	0, 367, 249, 250, 251, 252, 253, 0, 254, 368,
	255, 369, 256, 0, 257, 258, 259, 260, 261, 370,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	371, 279, 0, 283, 284, 285, 286, 0, 288, 372,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	373, 374, 294, 0, 300, 295, 296, 282, 297, 299,
	375, 298, 376, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 378, 379, 0, 0, 309,
	310, 380, 381, 0, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 0, 319, 0, 382, 320, 321,
	322, 383, 384, 0, 409, 323, 171, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 408, 176, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 0, 184, 341, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 194, 192, 193, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 0, 0, 0, 0, 212, 351,
	0, 352, 0, 213, 214, 215, 216, 353, 354, 0,
	0, 220, 0, 217, 0, 0, 218, 355, 219, 356,
	357, 358, 359, 360, 0, 361, 0, 0, 221, 222,
	223, 0, 224, 225, 226, 0, 228, 227, 0, 362,
	0, 229, 0, 0, 230, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 363, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 364, 242, 365, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 366, 0, 248,
	0, 367, 249, 250, 251, 252, 253, 0, 254, 368,
	255, 369, 407, 0, 257, 258, 259, 260, 261, 370,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	371, 279, 0, 283, 284, 285, 286, 0, 288, 372,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	373, 374, 294, 0, 300, 295, 296, 282, 297, 299,
	375, 298, 376, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 378, 379, 0, 0, 309,
	310, 380, 381, 0, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 0, 319, 0, 382, 320, 321,
	322, 383, 384, 171, 0, 323, 0, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 0, 0, 0, 174,
	175, 0, 176, 0, 0, 0, 0, 329, 0, 1389,
	0, 0, 177, 178, 179, 330, 331, 332, 333, 180,
	334, 335, 0, 181, 336, 337, 182, 183, 0, 0,
	338, 339, 340, 0, 184, 341, 0, 0, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 0, 0,
	194, 192, 193, 0, 0, 0, 0, 0, 0, 0,
	195, 196, 392, 197, 342, 198, 343, 344, 0, 199,
	0, 200, 0, 201, 0, 0, 202, 203, 0, 204,
	0, 0, 0, 345, 205, 206, 207, 346, 347, 0,
	0, 0, 208, 209, 348, 349, 350, 0, 210, 0,
	211, 0, 0, 0, 0, 212, 351, 0, 352, 0,
	213, 214, 215, 216, 353, 354, 0, 0, 220, 0,
	217, 0, 0, 218, 355, 219, 356, 357, 358, 359,
	360, 0, 361, 0, 0, 221, 222, 223, 0, 224,
	225, 226, 0, 228, 227, 0, 362, 0, 229, 0,
	0, 230, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 363, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 364, 242, 365, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 366, 0, 248, 0, 367, 249,
	250, 251, 252, 253, 0, 254, 368, 255, 369, 256,
	0, 257, 258, 259, 260, 261, 370, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 371, 279, 0,
	283, 284, 285, 286, 0, 288, 372, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 373, 374, 294,
	0, 300, 295, 296, 282, 297, 299, 375, 298, 376,
	0, 301, 0, 302, 303, 304, 305, 306, 307, 308,
	0, 377, 378, 379, 0, 0, 309, 310, 380, 381,
	0, 311, 312, 313, 314, 0, 0, 315, 316, 317,
	318, 0, 319, 0, 382, 320, 321, 322, 383, 384,
	171, 0, 323, 0, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 329, 0, 0, 0, 0, 177,
	178, 179, 330, 331, 332, 333, 180, 334, 335, 0,
	181, 336, 337, 182, 183, 0, 0, 338, 339, 340,
	0, 184, 341, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 194, 192, 193,
	0, 0, 0, 0, 0, 0, 0, 195, 196, 392,
	197, 342, 198, 343, 344, 0, 199, 0, 200, 0,
	201, 0, 0, 202, 203, 0, 204, 0, 0, 0,
	345, 205, 206, 207, 346, 347, 0, 0, 0, 208,
	209, 348, 349, 350, 0, 210, 0, 211, 0, 0,
	0, 0, 212, 351, 0, 352, 0, 213, 214, 215,
	216, 353, 354, 0, 0, 220, 0, 217, 0, 0,
	218, 355, 219, 356, 357, 358, 359, 360, 0, 361,
	0, 0, 221, 222, 223, 0, 224, 225, 226, 0,
	228, 227, 0, 362, 0, 229, 0, 0, 230, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 363, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 364, 242,
	365, 243, 244, 0, 245, 0, 726, 246, 0, 0,
	247, 366, 0, 248, 0, 367, 249, 250, 251, 252,
	253, 0, 254, 368, 255, 369, 256, 0, 257, 258,
	259, 260, 261, 370, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 371, 279, 0, 283, 284, 285,
	286, 0, 288, 372, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 373, 374, 294, 0, 300, 295,
	296, 282, 297, 299, 375, 298, 376, 0, 301, 0,
	302, 303, 304, 305, 306, 307, 308, 0, 377, 378,
	379, 0, 0, 309, 310, 380, 381, 0, 311, 312,
	313, 314, 0, 0, 315, 316, 317, 318, 0, 319,
	0, 382, 320, 321, 322, 383, 384, 0, 1332, 323,
	171, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 329, 0, 0, 0, 0, 177,
	178, 179, 330, 331, 332, 333, 180, 334, 335, 0,
	181, 336, 337, 182, 183, 0, 0, 338, 339, 340,
	0, 184, 341, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 194, 192, 193,
	0, 0, 0, 0, 0, 0, 0, 195, 196, 392,
	197, 342, 198, 343, 344, 0, 199, 0, 200, 0,
	201, 0, 0, 202, 203, 0, 204, 0, 0, 0,
	345, 205, 206, 207, 346, 347, 0, 0, 0, 208,
	209, 348, 349, 350, 0, 210, 0, 211, 0, 0,
	0, 0, 212, 351, 0, 352, 0, 213, 214, 215,
	216, 353, 354, 0, 0, 220, 0, 217, 0, 0,
	218, 355, 219, 356, 357, 358, 359, 360, 0, 361,
	0, 0, 221, 222, 223, 0, 224, 225, 226, 0,
	228, 227, 0, 362, 0, 229, 0, 0, 230, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 363, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 364, 242,
	365, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 366, 0, 248, 0, 367, 249, 250, 251, 252,
	253, 0, 254, 368, 255, 369, 256, 0, 257, 258,
	259, 260, 261, 370, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 371, 279, 0, 283, 284, 285,
	286, 0, 288, 372, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 373, 374, 294, 0, 300, 295,
	296, 282, 297, 299, 375, 298, 376, 0, 301, 0,
	302, 303, 304, 305, 306, 307, 308, 0, 377, 378,
	379, 0, 0, 309, 310, 380, 381, 0, 311, 312,
	313, 314, 0, 0, 315, 316, 317, 318, 0, 319,
	0, 382, 320, 321, 322, 383, 384, 0, 1330, 323,
	171, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 329, 0, 0, 0, 0, 177,
	178, 179, 330, 331, 332, 333, 180, 334, 335, 0,
	181, 336, 337, 182, 183, 0, 0, 338, 339, 340,
	0, 184, 341, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 194, 192, 193,
	0, 0, 0, 0, 0, 0, 0, 195, 196, 392,
	197, 342, 198, 343, 344, 0, 199, 0, 200, 0,
	201, 0, 0, 202, 203, 0, 204, 0, 0, 0,
	345, 205, 206, 207, 346, 347, 0, 0, 0, 208,
	209, 348, 349, 350, 0, 210, 0, 211, 0, 0,
	0, 0, 212, 351, 0, 352, 0, 213, 214, 215,
	216, 353, 354, 0, 0, 220, 0, 217, 0, 0,
	218, 355, 219, 356, 357, 358, 359, 360, 0, 361,
	0, 0, 221, 222, 223, 0, 224, 225, 226, 0,
	228, 227, 0, 362, 0, 229, 0, 0, 230, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 363, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 364, 242,
	365, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 366, 0, 248, 0, 367, 249, 250, 251, 252,
	253, 0, 254, 368, 255, 369, 256, 0, 257, 258,
	259, 260, 261, 370, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 371, 279, 0, 283, 284, 285,
	286, 0, 288, 372, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 373, 374, 294, 0, 300, 295,
	296, 282, 297, 299, 375, 298, 376, 0, 301, 0,
	302, 303, 304, 305, 306, 307, 308, 0, 377, 378,
	379, 0, 0, 309, 310, 380, 381, 0, 311, 312,
	313, 314, 0, 0, 315, 316, 317, 318, 0, 319,
	0, 382, 320, 321, 322, 383, 384, 171, 0, 323,
	0, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	0, 0, 0, 174, 175, 1312, 176, 0, 0, 0,
	0, 329, 0, 0, 0, 0, 177, 178, 179, 330,
	331, 332, 333, 180, 334, 335, 0, 181, 336, 337,
	182, 183, 0, 0, 338, 339, 340, 0, 184, 341,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 194, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 195, 196, 392, 197, 342, 198,
	343, 344, 0, 199, 0, 200, 0, 201, 0, 0,
	202, 203, 0, 204, 0, 0, 0, 345, 205, 206,
	207, 346, 347, 0, 0, 0, 208, 209, 348, 349,
	350, 0, 210, 0, 211, 0, 0, 0, 0, 212,
	351, 0, 352, 0, 213, 214, 215, 216, 353, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 363, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 364, 242, 365, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 366, 0,
	248, 0, 367, 249, 250, 251, 252, 253, 0, 254,
	368, 255, 369, 256, 0, 257, 258, 259, 260, 261,
	370, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 371, 279, 0, 283, 284, 285, 286, 0, 288,
	372, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 373, 374, 294, 0, 300, 295, 296, 282, 297,
	299, 375, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 0, 1197, 323, 171, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 329, 0, 0, 0, 0, 177, 178, 179, 330,
	331, 332, 333, 180, 334, 335, 0, 181, 336, 337,
	182, 183, 0, 0, 338, 339, 340, 0, 184, 341,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 194, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 195, 196, 392, 197, 342, 198,
	343, 344, 0, 199, 0, 200, 0, 201, 0, 0,
	202, 203, 0, 204, 0, 0, 0, 345, 205, 206,
	207, 346, 347, 0, 0, 0, 208, 209, 348, 349,
	350, 0, 210, 0, 211, 0, 0, 0, 0, 212,
	351, 0, 352, 0, 213, 214, 215, 216, 1196, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 363, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 364, 242, 365, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 366, 0,
	248, 0, 367, 249, 250, 251, 252, 253, 0, 254,
	368, 255, 369, 256, 0, 257, 258, 259, 260, 261,
	370, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 371, 279, 0, 283, 284, 285, 286, 0, 288,
	372, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 373, 374, 294, 0, 300, 295, 296, 282, 297,
	299, 375, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 0, 602, 323, 171, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 329, 0, 0, 0, 0, 177, 178, 179, 330,
	331, 332, 333, 180, 334, 335, 0, 181, 336, 337,
	182, 183, 0, 0, 338, 339, 928, 0, 184, 341,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 194, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 195, 196, 392, 197, 342, 198,
	343, 344, 0, 199, 0, 200, 0, 201, 0, 0,
	202, 203, 0, 204, 0, 0, 0, 345, 205, 206,
	207, 346, 347, 0, 0, 0, 208, 209, 348, 349,
	350, 0, 210, 0, 211, 0, 0, 0, 0, 212,
	351, 0, 352, 0, 213, 214, 215, 216, 353, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 363, 604, 0, 238, 239,
	241, 240, 0, 0, 0, 364, 242, 365, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 366, 0,
	248, 0, 367, 249, 250, 251, 252, 253, 0, 254,
	368, 255, 369, 256, 0, 257, 258, 259, 260, 261,
	370, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 371, 279, 0, 283, 284, 285, 286, 0, 288,
	372, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 373, 374, 294, 0, 300, 295, 296, 282, 297,
	299, 375, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 599, 378, 379, 0, 0,
	309, 929, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 0, 897, 323, 171, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 329, 0, 0, 0, 0, 177, 178, 179, 330,
	331, 332, 333, 180, 334, 335, 0, 181, 336, 337,
	182, 183, 0, 0, 338, 339, 340, 0, 184, 341,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 194, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 195, 196, 392, 197, 342, 198,
	343, 344, 0, 199, 0, 200, 0, 201, 0, 0,
	202, 203, 0, 204, 0, 0, 0, 345, 205, 206,
	207, 346, 347, 0, 0, 0, 208, 209, 348, 349,
	350, 0, 210, 0, 211, 0, 0, 0, 0, 212,
	351, 0, 352, 0, 213, 214, 215, 216, 896, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 363, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 364, 242, 365, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 366, 0,
	248, 0, 367, 249, 250, 251, 252, 253, 0, 254,
	368, 255, 369, 256, 0, 257, 258, 259, 260, 261,
	370, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 371, 279, 0, 283, 284, 285, 286, 0, 288,
	372, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 373, 374, 294, 0, 300, 295, 296, 282, 297,
	299, 375, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 0, 894, 323, 171, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 329, 0, 0, 0, 0, 177, 178, 179, 330,
	331, 332, 333, 180, 334, 335, 0, 181, 336, 337,
	182, 183, 0, 0, 338, 339, 340, 0, 184, 341,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 194, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 195, 196, 392, 197, 342, 198,
	343, 344, 0, 199, 0, 200, 0, 201, 0, 0,
	202, 203, 0, 204, 0, 0, 0, 345, 205, 206,
	207, 346, 347, 0, 0, 0, 208, 209, 348, 349,
	350, 0, 210, 0, 211, 0, 0, 0, 0, 212,
	351, 0, 352, 0, 213, 214, 215, 216, 893, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 363, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 364, 242, 365, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 366, 0,
	248, 0, 367, 249, 250, 251, 252, 253, 0, 254,
	368, 255, 369, 256, 0, 257, 258, 259, 260, 261,
	370, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 371, 279, 0, 283, 284, 285, 286, 0, 288,
	372, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 373, 374, 294, 0, 300, 295, 296, 282, 297,
	299, 375, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 0, 890, 323, 171, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 329, 0, 0, 0, 0, 177, 178, 179, 330,
	331, 332, 333, 180, 334, 335, 0, 181, 336, 337,
	182, 183, 0, 0, 338, 339, 340, 0, 184, 341,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 194, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 195, 196, 392, 197, 342, 198,
	343, 344, 0, 199, 0, 200, 0, 201, 0, 0,
	202, 203, 0, 204, 0, 0, 0, 345, 205, 206,
	207, 346, 347, 0, 0, 0, 208, 209, 348, 349,
	350, 0, 210, 0, 211, 0, 0, 0, 0, 212,
	351, 0, 352, 0, 213, 214, 215, 216, 889, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 363, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 364, 242, 365, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 366, 0,
	248, 0, 367, 249, 250, 251, 252, 253, 0, 254,
	368, 255, 369, 256, 0, 257, 258, 259, 260, 261,
	370, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 371, 279, 0, 283, 284, 285, 286, 0, 288,
	372, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 373, 374, 294, 0, 300, 295, 296, 282, 297,
	299, 375, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 0, 887, 323, 171, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 329, 0, 0, 0, 0, 177, 178, 179, 330,
	331, 332, 333, 180, 334, 335, 0, 181, 336, 337,
	182, 183, 0, 0, 338, 339, 340, 0, 184, 341,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 194, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 195, 196, 392, 197, 342, 198,
	343, 344, 0, 199, 0, 200, 0, 201, 0, 0,
	202, 203, 0, 204, 0, 0, 0, 345, 205, 206,
	207, 346, 347, 0, 0, 0, 208, 209, 348, 349,
	350, 0, 210, 0, 211, 0, 0, 0, 0, 212,
	351, 0, 352, 0, 213, 214, 215, 216, 886, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 363, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 364, 242, 365, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 366, 0,
	248, 0, 367, 249, 250, 251, 252, 253, 0, 254,
	368, 255, 369, 256, 0, 257, 258, 259, 260, 261,
	370, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 371, 279, 0, 283, 284, 285, 286, 0, 288,
	372, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 373, 374, 294, 0, 300, 295, 296, 282, 297,
	299, 375, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 0, 883, 323, 171, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 329, 0, 0, 0, 0, 177, 178, 179, 330,
	331, 332, 333, 180, 334, 335, 0, 181, 336, 337,
	182, 183, 0, 0, 338, 339, 340, 0, 184, 341,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 194, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 195, 196, 392, 197, 342, 198,
	343, 344, 0, 199, 0, 200, 0, 201, 0, 0,
	202, 203, 0, 204, 0, 0, 0, 345, 205, 206,
	207, 346, 347, 0, 0, 0, 208, 209, 348, 349,
	350, 0, 210, 0, 211, 0, 0, 0, 0, 212,
	351, 0, 352, 0, 213, 214, 215, 216, 882, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 363, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 364, 242, 365, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 366, 0,
	248, 0, 367, 249, 250, 251, 252, 253, 0, 254,
	368, 255, 369, 256, 0, 257, 258, 259, 260, 261,
	370, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 371, 279, 0, 283, 284, 285, 286, 0, 288,
	372, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 373, 374, 294, 0, 300, 295, 296, 282, 297,
	299, 375, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 171, 0, 323, 0, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	174, 175, 871, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 194, 192, 193, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 213, 214, 215, 216, 353, 354, 0, 0, 220,
	0, 217, 0, 0, 218, 355, 219, 356, 357, 358,
	359, 360, 0, 361, 0, 0, 221, 222, 223, 0,
	224, 225, 226, 0, 228, 227, 0, 362, 0, 229,
	0, 0, 230, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 363, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 364, 242, 365, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 366, 0, 248, 0, 367,
	249, 250, 251, 252, 253, 0, 254, 368, 255, 369,
	256, 0, 257, 258, 259, 260, 261, 370, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 371, 279,
	0, 283, 284, 285, 286, 0, 288, 372, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 373, 374,
	294, 0, 300, 295, 296, 282, 297, 299, 375, 298,
	376, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 378, 379, 0, 0, 309, 310, 380,
	381, 0, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 319, 0, 382, 320, 321, 322, 383,
	384, 0, 869, 323, 171, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 194, 192, 193, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 213, 214, 215, 216, 868, 354, 0, 0, 220,
	0, 217, 0, 0, 218, 355, 219, 356, 357, 358,
	359, 360, 0, 361, 0, 0, 221, 222, 223, 0,
	224, 225, 226, 0, 228, 227, 0, 362, 0, 229,
	0, 0, 230, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 363, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 364, 242, 365, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 366, 0, 248, 0, 367,
	249, 250, 251, 252, 253, 0, 254, 368, 255, 369,
	256, 0, 257, 258, 259, 260, 261, 370, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 371, 279,
	0, 283, 284, 285, 286, 0, 288, 372, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 373, 374,
	294, 0, 300, 295, 296, 282, 297, 299, 375, 298,
	376, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 378, 379, 0, 0, 309, 310, 380,
	381, 0, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 319, 0, 382, 320, 321, 322, 383,
	384, 0, 865, 323, 171, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 194, 192, 193, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 213, 214, 215, 216, 353, 354, 0, 0, 220,
	0, 217, 0, 0, 218, 355, 219, 356, 357, 358,
	359, 360, 0, 361, 0, 0, 221, 222, 223, 0,
	224, 225, 226, 0, 228, 227, 0, 362, 0, 229,
	0, 0, 230, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 363, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 364, 242, 365, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 366, 0, 248, 0, 367,
	249, 250, 251, 252, 253, 0, 254, 368, 255, 369,
	256, 0, 257, 258, 259, 260, 261, 370, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 371, 279,
	0, 283, 284, 285, 286, 0, 288, 372, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 373, 374,
	294, 0, 300, 295, 296, 282, 297, 299, 375, 298,
	376, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 378, 379, 0, 0, 309, 310, 380,
	381, 0, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 319, 0, 382, 320, 321, 322, 383,
	384, 0, 863, 323, 171, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 194, 192, 193, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 213, 214, 215, 216, 353, 354, 0, 0, 220,
	0, 217, 0, 0, 218, 355, 219, 356, 357, 358,
	359, 360, 0, 361, 0, 0, 221, 222, 223, 0,
	224, 225, 226, 0, 228, 227, 0, 362, 0, 229,
	0, 0, 230, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 363, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 364, 242, 365, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 366, 0, 248, 0, 367,
	249, 250, 251, 252, 253, 0, 254, 368, 255, 369,
	256, 0, 257, 258, 259, 260, 261, 370, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 371, 279,
	0, 283, 284, 285, 286, 0, 288, 372, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 373, 374,
	294, 0, 300, 295, 296, 282, 297, 299, 375, 298,
	376, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 378, 379, 0, 0, 309, 310, 380,
	381, 0, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 319, 0, 382, 320, 321, 322, 383,
	384, 0, 859, 323, 171, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 194, 192, 193, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 213, 214, 215, 216, 861, 354, 0, 0, 220,
	0, 217, 0, 0, 218, 355, 219, 356, 357, 358,
	359, 360, 0, 361, 0, 0, 221, 222, 223, 0,
	224, 225, 226, 0, 228, 227, 0, 362, 0, 229,
	0, 0, 230, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 363, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 364, 242, 365, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 366, 0, 248, 0, 367,
	249, 250, 251, 252, 253, 0, 254, 368, 255, 369,
	256, 0, 257, 258, 259, 260, 261, 370, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 371, 279,
	0, 283, 284, 285, 286, 0, 288, 372, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 373, 374,
	294, 0, 300, 295, 296, 282, 297, 299, 375, 298,
	376, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 378, 379, 0, 0, 309, 310, 380,
	381, 0, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 319, 0, 382, 320, 321, 322, 383,
	384, 0, 738, 323, 171, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 194, 192, 193, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 213, 214, 215, 216, 740, 354, 0, 0, 220,
	0, 217, 0, 0, 218, 355, 219, 356, 357, 358,
	359, 360, 0, 361, 0, 0, 221, 222, 223, 0,
	224, 225, 226, 0, 228, 227, 0, 362, 0, 229,
	0, 0, 230, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 363, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 364, 242, 365, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 366, 0, 248, 0, 367,
	249, 250, 251, 252, 253, 0, 254, 368, 255, 369,
	256, 0, 257, 258, 259, 260, 261, 370, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 371, 279,
	0, 283, 284, 285, 286, 0, 288, 372, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 373, 374,
	294, 0, 300, 295, 296, 282, 297, 299, 375, 298,
	376, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 378, 379, 0, 0, 309, 310, 380,
	381, 0, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 319, 0, 382, 320, 321, 322, 383,
	384, 0, 736, 323, 171, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 194, 192, 193, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 213, 214, 215, 216, 353, 354, 0, 0, 220,
	0, 217, 0, 0, 218, 355, 219, 356, 357, 358,
	359, 360, 0, 361, 0, 0, 221, 222, 223, 0,
	224, 225, 226, 0, 228, 227, 0, 362, 0, 229,
	0, 0, 230, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 363, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 364, 242, 365, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 366, 0, 248, 0, 367,
	249, 250, 251, 252, 253, 0, 254, 368, 255, 369,
	256, 0, 257, 258, 259, 260, 261, 370, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 371, 279,
	0, 283, 284, 285, 286, 0, 288, 372, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 373, 374,
	294, 0, 300, 295, 296, 282, 297, 299, 375, 298,
	376, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 378, 379, 0, 0, 309, 310, 380,
	381, 0, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 319, 0, 382, 320, 321, 322, 383,
	384, 0, 602, 323, 171, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 593, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 194, 192, 193, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 213, 214, 215, 216, 353, 354, 0, 0, 220,
	0, 217, 0, 0, 218, 355, 219, 356, 357, 358,
	359, 360, 0, 361, 0, 0, 221, 222, 223, 0,
	224, 225, 226, 0, 228, 227, 0, 362, 0, 229,
	0, 0, 230, 592, 0, 0, 232, 0, 233, 234,
	235, 237, 363, 604, 0, 238, 239, 241, 240, 0,
	0, 0, 364, 242, 365, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 366, 0, 248, 0, 367,
	249, 250, 251, 252, 253, 0, 254, 368, 255, 369,
	256, 0, 257, 258, 259, 260, 261, 370, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 594, 279,
	0, 283, 284, 285, 286, 0, 288, 372, 287, 595,
	290, 0, 291, 280, 281, 292, 0, 293, 373, 374,
	294, 0, 300, 295, 296, 282, 297, 299, 375, 298,
	376, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 599, 378, 379, 0, 0, 309, 597, 380,
	381, 0, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 319, 0, 382, 320, 321, 322, 383,
	384, 0, 577, 323, 171, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 194, 192, 193, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 213, 214, 215, 216, 353, 354, 0, 0, 220,
	0, 217, 0, 0, 218, 355, 219, 356, 357, 358,
	359, 360, 0, 361, 0, 0, 221, 222, 223, 0,
	224, 225, 226, 0, 228, 227, 0, 362, 0, 229,
	0, 0, 230, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 363, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 364, 242, 365, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 366, 0, 248, 0, 367,
	249, 250, 251, 252, 253, 0, 254, 368, 255, 369,
	256, 0, 257, 258, 259, 260, 261, 370, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 371, 279,
	0, 578, 284, 285, 286, 0, 288, 372, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 373, 374,
	294, 0, 300, 295, 296, 282, 297, 299, 375, 298,
	376, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 378, 379, 0, 0, 309, 310, 380,
	381, 0, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 319, 0, 382, 320, 321, 322, 383,
	384, 0, 575, 323, 171, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 194, 192, 193, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 213, 214, 215, 216, 353, 354, 0, 0, 220,
	0, 217, 0, 0, 218, 355, 219, 356, 357, 358,
	359, 360, 0, 361, 0, 0, 221, 222, 223, 0,
	224, 225, 226, 0, 228, 227, 0, 362, 0, 229,
	0, 0, 230, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 363, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 364, 242, 365, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 366, 0, 248, 0, 367,
	249, 250, 251, 252, 253, 0, 254, 368, 255, 369,
	256, 0, 257, 258, 259, 260, 261, 370, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 371, 279,
	0, 283, 284, 285, 286, 0, 288, 372, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 373, 374,
	294, 0, 300, 295, 296, 282, 297, 299, 375, 298,
	376, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 378, 379, 0, 0, 309, 310, 380,
	381, 0, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 319, 0, 382, 320, 321, 322, 383,
	384, 0, 567, 323, 171, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 194, 192, 193, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 213, 214, 215, 216, 353, 354, 0, 0, 220,
	0, 217, 0, 0, 218, 355, 219, 356, 357, 358,
	359, 360, 0, 361, 0, 0, 221, 222, 223, 0,
	224, 225, 226, 0, 228, 227, 0, 362, 0, 229,
	0, 0, 230, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 363, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 364, 242, 365, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 366, 0, 248, 0, 367,
	249, 250, 251, 252, 253, 0, 254, 368, 255, 369,
	256, 0, 257, 258, 259, 260, 261, 370, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 371, 279,
	0, 283, 284, 285, 286, 0, 288, 372, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 373, 374,
	294, 0, 300, 295, 296, 282, 297, 299, 375, 298,
	376, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 378, 379, 0, 0, 309, 310, 380,
	381, 0, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 319, 0, 382, 320, 321, 322, 383,
	384, 0, 432, 323, 171, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 194, 192, 193, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 213, 214, 215, 216, 353, 354, 0, 0, 220,
	0, 217, 0, 0, 218, 355, 219, 356, 357, 358,
	359, 360, 0, 361, 0, 0, 221, 222, 223, 0,
	224, 225, 226, 0, 228, 227, 0, 362, 0, 229,
	0, 0, 230, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 363, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 364, 242, 365, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 366, 0, 248, 0, 367,
	249, 250, 251, 252, 253, 0, 254, 368, 255, 369,
	256, 0, 257, 258, 259, 260, 261, 370, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 371, 279,
	0, 283, 284, 285, 286, 0, 288, 372, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 373, 374,
	294, 0, 300, 295, 296, 282, 297, 299, 375, 298,
	376, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 378, 379, 0, 0, 309, 310, 380,
	381, 0, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 319, 0, 382, 320, 321, 322, 383,
	384, 171, 0, 323, 0, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 0, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 329, 0, 0, 0, 0,
	177, 178, 179, 330, 331, 332, 333, 180, 334, 335,
	0, 181, 336, 337, 182, 183, 0, 0, 338, 339,
	340, 0, 184, 341, 0, 0, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 0, 194, 192,
	193, 0, 0, 0, 0, 0, 0, 0, 195, 196,
	392, 197, 342, 198, 343, 344, 0, 199, 0, 200,
	0, 201, 0, 0, 202, 203, 0, 204, 0, 0,
	0, 345, 205, 206, 207, 346, 347, 0, 0, 0,
	208, 209, 348, 349, 350, 0, 210, 0, 211, 0,
	0, 0, 0, 212, 351, 0, 352, 0, 213, 214,
	215, 216, 353, 354, 0, 0, 220, 0, 217, 0,
	0, 218, 355, 219, 356, 357, 358, 359, 360, 0,
	361, 0, 0, 221, 222, 223, 0, 224, 225, 226,
	0, 228, 227, 0, 362, 0, 229, 0, 0, 230,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 363,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 364,
	242, 365, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 366, 0, 248, 0, 367, 249, 250, 251,
	252, 253, 0, 254, 368, 255, 369, 256, 0, 257,
	258, 259, 260, 261, 370, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 371, 279, 0, 283, 284,
	285, 286, 0, 288, 372, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 373, 374, 294, 0, 300,
	295, 296, 282, 297, 299, 375, 298, 376, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	378, 379, 0, 0, 309, 310, 380, 381, 0, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	319, 0, 382, 320, 321, 322, 383, 384, 171, 0,
	323, 0, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 329, 0, 0, 0, 0, 177, 178, 179,
	330, 331, 332, 333, 180, 334, 335, 0, 181, 336,
	337, 182, 183, 0, 0, 338, 339, 340, 0, 184,
	341, 0, 0, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 0, 194, 192, 193, 0, 0,
	0, 0, 0, 0, 0, 195, 196, 392, 197, 342,
	198, 343, 344, 0, 199, 0, 200, 0, 201, 0,
	0, 202, 203, 0, 204, 0, 0, 0, 345, 205,
	206, 207, 346, 347, 0, 0, 0, 208, 209, 348,
	349, 350, 0, 210, 0, 211, 0, 0, 0, 0,
	212, 351, 0, 352, 0, 213, 214, 215, 216, 1735,
	354, 0, 0, 220, 0, 217, 0, 0, 218, 355,
	219, 356, 357, 358, 359, 360, 0, 361, 0, 0,
	221, 222, 223, 0, 224, 225, 226, 0, 228, 227,
	0, 362, 0, 229, 0, 0, 230, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 363, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 364, 242, 365, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 366,
	0, 248, 0, 367, 249, 250, 251, 252, 253, 0,
	254, 368, 255, 369, 256, 0, 257, 258, 259, 260,
	261, 370, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 371, 279, 0, 283, 284, 285, 286, 0,
	288, 372, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 373, 374, 294, 0, 300, 295, 296, 282,
	297, 299, 375, 298, 376, 0, 301, 0, 302, 303,
	304, 305, 306, 307, 308, 0, 377, 378, 379, 0,
	0, 309, 310, 380, 381, 0, 311, 312, 313, 314,
	0, 0, 315, 316, 317, 318, 0, 319, 0, 382,
	320, 321, 322, 383, 384, 171, 0, 323, 0, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 329,
	0, 0, 0, 0, 177, 178, 179, 330, 331, 332,
	333, 180, 334, 335, 0, 181, 336, 337, 182, 183,
	0, 0, 338, 339, 340, 0, 184, 341, 0, 0,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 0, 194, 192, 193, 0, 0, 0, 0, 0,
	0, 0, 195, 196, 392, 197, 342, 198, 343, 344,
	0, 199, 0, 200, 0, 201, 0, 0, 202, 203,
	0, 204, 0, 0, 0, 345, 205, 206, 207, 346,
	347, 0, 0, 0, 208, 209, 348, 349, 350, 0,
	210, 0, 211, 0, 0, 0, 0, 212, 351, 0,
	352, 0, 213, 214, 215, 216, 1733, 354, 0, 0,
	220, 0, 217, 0, 0, 218, 355, 219, 356, 357,
	358, 359, 360, 0, 361, 0, 0, 221, 222, 223,
	0, 224, 225, 226, 0, 228, 227, 0, 362, 0,
	229, 0, 0, 230, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 363, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 364, 242, 365, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 366, 0, 248, 0,
	367, 249, 250, 251, 252, 253, 0, 254, 368, 255,
	369, 256, 0, 257, 258, 259, 260, 261, 370, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 371,
	279, 0, 283, 284, 285, 286, 0, 288, 372, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 373,
	374, 294, 0, 300, 295, 296, 282, 297, 299, 375,
	298, 376, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 378, 379, 0, 0, 309, 310,
	380, 381, 0, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 319, 0, 382, 320, 321, 322,
	383, 384, 171, 0, 323, 0, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 177, 178, 179, 330, 331, 332, 333, 180, 334,
	335, 0, 181, 336, 337, 182, 183, 0, 0, 338,
	339, 340, 0, 184, 341, 0, 0, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 0, 194,
	192, 193, 0, 0, 0, 0, 0, 0, 0, 195,
	196, 392, 197, 342, 198, 343, 344, 0, 199, 0,
	200, 0, 201, 0, 0, 202, 203, 0, 204, 0,
	0, 0, 345, 205, 206, 207, 346, 347, 0, 0,
	0, 208, 209, 348, 349, 350, 0, 210, 0, 211,
	0, 0, 0, 0, 212, 351, 0, 352, 0, 213,
	214, 215, 216, 1722, 354, 0, 0, 220, 0, 217,
	0, 0, 218, 355, 219, 356, 357, 358, 359, 360,
	0, 361, 0, 0, 221, 222, 223, 0, 224, 225,
	226, 0, 228, 227, 0, 362, 0, 229, 0, 0,
	230, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	363, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	364, 242, 365, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 366, 0, 248, 0, 367, 249, 250,
	251, 252, 253, 0, 254, 368, 255, 369, 256, 0,
	257, 258, 259, 260, 261, 370, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 371, 279, 0, 283,
	284, 285, 286, 0, 288, 372, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 373, 374, 294, 0,
	300, 295, 296, 282, 297, 299, 375, 298, 376, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 378, 379, 0, 0, 309, 310, 380, 381, 0,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	0, 319, 0, 382, 320, 321, 322, 383, 384, 171,
	0, 323, 0, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 0, 0, 0, 174, 175, 0, 176, 0,
	0, 0, 0, 329, 0, 0, 0, 0, 177, 178,
	179, 330, 331, 332, 333, 180, 334, 335, 0, 181,
	336, 337, 182, 183, 0, 0, 338, 339, 340, 0,
	184, 341, 0, 0, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 0, 194, 192, 193, 0,
	0, 0, 0, 0, 0, 0, 195, 196, 392, 197,
	342, 198, 343, 344, 0, 199, 0, 200, 0, 201,
	0, 0, 202, 203, 0, 204, 0, 0, 0, 345,
	205, 206, 207, 346, 347, 0, 0, 0, 208, 209,
	348, 349, 350, 0, 210, 0, 211, 0, 0, 0,
	0, 212, 351, 0, 352, 0, 213, 214, 215, 216,
	353, 354, 0, 0, 220, 0, 217, 0, 0, 218,
	355, 219, 356, 357, 358, 359, 360, 0, 361, 0,
	0, 221, 222, 223, 0, 224, 225, 226, 0, 228,
	227, 0, 362, 0, 229, 0, 0, 230, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 363, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 364, 242, 365,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	366, 0, 248, 0, 367, 249, 250, 251, 252, 253,
	0, 254, 368, 255, 369, 256, 0, 257, 258, 259,
	260, 261, 370, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 371, 279, 0, 578, 284, 285, 286,
	0, 288, 372, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 373, 374, 294, 0, 300, 295, 296,
	282, 297, 299, 375, 298, 376, 0, 301, 0, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 378, 379,
	0, 0, 309, 310, 380, 381, 0, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 319, 0,
	382, 320, 321, 322, 383, 384, 171, 0, 323, 0,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	329, 0, 1207, 0, 0, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 0, 184, 341, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 194, 192, 193, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 0, 0, 0, 0, 212, 351,
	0, 352, 0, 213, 214, 215, 216, 353, 354, 0,
	0, 220, 0, 217, 0, 0, 218, 355, 219, 356,
	357, 358, 359, 360, 0, 361, 0, 0, 221, 222,
	223, 0, 224, 225, 226, 0, 228, 227, 0, 362,
	0, 229, 0, 0, 230, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 363, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 364, 242, 365, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 366, 0, 248,
	0, 367, 249, 250, 251, 252, 253, 0, 254, 368,
	255, 369, 256, 0, 257, 258, 259, 260, 261, 370,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	371, 279, 0, 283, 284, 285, 286, 0, 288, 372,
	287, 289, 290, 0, 0, 280, 281, 292, 0, 293,
	373, 374, 294, 0, 300, 295, 296, 282, 297, 299,
	375, 298, 376, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 378, 379, 0, 0, 309,
	310, 380, 381, 0, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 0, 319, 0, 382, 320, 321,
	322, 383, 384, 171, 0, 323, 0, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 0, 0, 0, 174,
	175, 0, 176, 0, 0, 0, 0, 329, 0, 0,
	0, 0, 177, 178, 179, 330, 331, 332, 333, 180,
	334, 335, 0, 181, 336, 337, 182, 183, 0, 0,
	338, 339, 340, 0, 184, 341, 0, 0, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 0, 0,
	194, 192, 193, 0, 0, 0, 0, 0, 0, 0,
	195, 196, 392, 197, 342, 198, 343, 344, 0, 199,
	0, 200, 0, 201, 0, 0, 202, 203, 0, 204,
	0, 0, 0, 345, 205, 206, 207, 346, 347, 0,
	0, 0, 208, 209, 348, 349, 350, 0, 210, 0,
	211, 0, 0, 0, 0, 212, 351, 0, 352, 0,
	213, 214, 215, 216, 353, 354, 0, 0, 220, 0,
	217, 0, 0, 218, 355, 219, 356, 357, 358, 359,
	360, 0, 361, 0, 0, 221, 222, 223, 0, 224,
	225, 226, 0, 228, 227, 0, 362, 0, 229, 0,
	0, 230, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 363, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 364, 242, 365, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 366, 0, 248, 0, 367, 249,
	250, 251, 252, 253, 0, 254, 368, 255, 369, 256,
	0, 257, 258, 259, 260, 261, 370, 702, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 371, 279, 0,
	283, 284, 285, 286, 0, 288, 372, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 373, 374, 294,
	0, 300, 295, 296, 282, 297, 299, 375, 298, 376,
	0, 301, 0, 302, 303, 304, 305, 306, 307, 308,
	0, 377, 378, 379, 0, 0, 309, 310, 380, 381,
	0, 311, 312, 313, 314, 0, 0, 315, 316, 317,
	318, 0, 319, 0, 382, 320, 321, 322, 383, 384,
	171, 0, 323, 0, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 329, 0, 0, 0, 0, 177,
	178, 179, 330, 331, 332, 333, 180, 334, 335, 0,
	181, 336, 337, 182, 183, 0, 0, 338, 339, 340,
	0, 184, 341, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 194, 192, 193,
	0, 0, 0, 0, 0, 0, 0, 195, 196, 392,
	197, 342, 198, 343, 344, 0, 199, 0, 200, 0,
	201, 0, 0, 202, 203, 0, 204, 0, 0, 0,
	345, 205, 206, 207, 346, 347, 0, 0, 0, 208,
	209, 348, 349, 350, 0, 210, 0, 211, 0, 0,
	0, 0, 212, 351, 0, 352, 0, 213, 214, 215,
	216, 353, 354, 0, 0, 220, 0, 217, 0, 0,
	218, 355, 219, 356, 357, 358, 359, 360, 0, 361,
	0, 0, 221, 222, 223, 0, 224, 225, 226, 0,
	228, 227, 0, 362, 0, 229, 0, 0, 230, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 363, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 364, 242,
	365, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 366, 0, 248, 0, 367, 249, 250, 0, 252,
	253, 0, 254, 368, 255, 369, 256, 0, 257, 258,
	259, 0, 261, 370, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 371, 0, 0, 283, 284, 285,
	286, 0, 288, 372, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 373, 374, 294, 0, 300, 295,
	296, 282, 297, 299, 375, 298, 376, 0, 301, 0,
	302, 303, 304, 305, 306, 307, 308, 0, 377, 378,
	379, 0, 0, 309, 310, 380, 381, 0, 311, 312,
	313, 314, 0, 0, 315, 316, 317, 318, 0, 319,
	0, 382, 320, 321, 322, 383, 384, 0, 0, 323,
	0, 0, 0, 0, 324, 325, 326, 327, 328, 1082,
	1083, 0, 1102, 1103, 1104, 1112, 1113, 1114, 0, 0,
	0, 0, 0, 0, 0, 1105, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 1116, 0, 1082, 1083, 0,
	1102, 1103, 1104, 1112, 1113, 1114, 0, 0, 0, 0,
	0, 0, 0, 1105, 0, 0, 1084, 0, 0, 0,
	1085, 0, 1099, 1116, 0, 1082, 1083, 0, 1102, 1103,
	1104, 1112, 1113, 1114, 0, 0, 0, 0, 0, 0,
	0, 1105, 0, 0, 1084, 0, 0, 0, 1085, 0,
	1099, 1116, 0, 0, 0, 0, 0, 0, 0, 1082,
	1083, 0, 1102, 1103, 1104, 1112, 1113, 1114, 0, 0,
	0, 0, 1084, 0, 0, 1105, 0, 1090, 1099, 0,
	0, 0, 1085, 0, 0, 1116, 0, 1082, 1083, 0,
	1102, 1103, 1104, 1112, 1113, 1114, 1109, 1117, 0, 0,
	0, 0, 0, 1105, 0, 1090, 1084, 0, 0, 0,
	1085, 0, 1099, 1116, 1115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1109, 1117, 0, 0, 0, 1107,
	0, 0, 0, 1090, 1084, 0, 1100, 0, 0, 0,
	1099, 0, 1115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1109, 1117, 0, 0, 0, 1107, 0, 0,
	0, 1106, 0, 0, 1100, 0, 0, 1090, 0, 0,
	1115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1107, 1109, 1117, 0, 1106,
	0, 0, 1100, 0, 0, 1090, 0, 0, 0, 0,
	0, 0, 0, 0, 1115, 0, 0, 0, 0, 1101,
	0, 0, 0, 0, 1109, 1117, 0, 1106, 0, 1107,
	0, 0, 0, 0, 0, 1110, 1100, 0, 0, 0,
	0, 0, 1115, 0, 0, 0, 0, 1101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1107, 0, 0,
	0, 1106, 0, 1110, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1106,
	0, 1110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1108, 0, 0, 1096, 1097, 1098, 1111, 1101,
	1095, 1093, 1094, 1086, 1087, 1088, 1089, 1091, 1092, 0,
	0, 0, 0, 0, 0, 1110, 0, 1805, 0, 0,
	1108, 0, 0, 1096, 1097, 1098, 1111, 1101, 1095, 1093,
	1094, 1086, 1087, 1088, 1089, 1091, 1092, 0, 0, 0,
	0, 2356, 0, 1110, 0, 0, 0, 0, 1108, 0,
	0, 1096, 1097, 1098, 1111, 0, 1095, 1093, 1094, 1086,
	1087, 1088, 1089, 1091, 1092, 0, 0, 0, 0, 2336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1108, 0, 0, 1096, 1097, 1098, 1111, 0,
	1095, 1093, 1094, 1086, 1087, 1088, 1089, 1091, 1092, 0,
	0, 0, 0, 2285, 0, 0, 0, 0, 0, 0,
	1108, 0, 0, 1096, 1097, 1098, 1111, 0, 1095, 1093,
	1094, 1086, 1087, 1088, 1089, 1091, 1092, 0, 0, 1082,
	1083, 2280, 1102, 1103, 1104, 1112, 1113, 1114, 0, 0,
	0, 0, 0, 0, 0, 1105, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 1116, 0, 1082, 1083, 0,
	1102, 1103, 1104, 1112, 1113, 1114, 0, 0, 0, 0,
	0, 0, 0, 1105, 0, 0, 1084, 0, 0, 0,
	1085, 0, 1099, 1116, 0, 1082, 1083, 0, 1102, 1103,
	1104, 1112, 1113, 1114, 0, 0, 0, 0, 0, 0,
	0, 1105, 0, 0, 1084, 0, 0, 0, 1085, 0,
	1099, 1116, 0, 0, 0, 0, 0, 0, 0, 1082,
	1083, 0, 1102, 1103, 1104, 1112, 1113, 1114, 0, 0,
	0, 0, 1084, 0, 0, 1105, 0, 1090, 1099, 0,
	0, 0, 1085, 0, 0, 1116, 0, 1082, 1083, 0,
	1102, 1103, 1104, 1112, 1113, 1114, 1109, 1117, 0, 0,
	0, 0, 0, 1105, 0, 1090, 1084, 0, 0, 0,
	1085, 0, 1099, 1116, 1115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1109, 1117, 0, 0, 0, 1107,
	0, 0, 0, 1090, 1084, 0, 1100, 0, 0, 0,
	1099, 0, 1115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1109, 1117, 0, 0, 0, 1107, 0, 0,
	0, 1106, 0, 0, 1100, 0, 0, 1090, 0, 0,
	1115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1107, 1109, 1117, 0, 1106,
	0, 0, 1100, 0, 0, 1090, 0, 0, 0, 0,
	0, 0, 0, 0, 1115, 0, 0, 0, 0, 1101,
	0, 0, 0, 0, 1109, 1117, 0, 1106, 0, 1107,
	0, 0, 0, 0, 0, 1110, 1100, 0, 0, 0,
	0, 0, 1115, 0, 0, 0, 0, 1101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1107, 0, 0,
	0, 1106, 0, 1110, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1106,
	0, 1110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1108, 0, 0, 1096, 1097, 1098, 1111, 1101,
	1095, 1093, 1094, 1086, 1087, 1088, 1089, 1091, 1092, 0,
	0, 0, 0, 2276, 0, 1110, 0, 0, 0, 0,
	1108, 0, 0, 1096, 1097, 1098, 1111, 1101, 1095, 1093,
	1094, 1086, 1087, 1088, 1089, 1091, 1092, 0, 0, 0,
	0, 2256, 0, 1110, 0, 0, 0, 0, 1108, 0,
	0, 1096, 1097, 1098, 1111, 0, 1095, 1093, 1094, 1086,
	1087, 1088, 1089, 1091, 1092, 0, 0, 0, 0, 2203,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1108, 0, 0, 1096, 1097, 1098, 1111, 0,
	1095, 1093, 1094, 1086, 1087, 1088, 1089, 1091, 1092, 0,
	0, 0, 0, 2202, 0, 0, 0, 0, 0, 0,
	1108, 0, 0, 1096, 1097, 1098, 1111, 0, 1095, 1093,
	1094, 1086, 1087, 1088, 1089, 1091, 1092, 0, 0, 1082,
	1083, 2142, 1102, 1103, 1104, 1112, 1113, 1114, 0, 0,
	0, 0, 0, 0, 0, 1105, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 1116, 0, 1082, 1083, 0,
	1102, 1103, 1104, 1112, 1113, 1114, 0, 0, 0, 0,
	0, 0, 0, 1105, 0, 0, 1084, 0, 0, 0,
	1085, 0, 1099, 1116, 0, 1082, 1083, 0, 1102, 1103,
	1104, 1112, 1113, 1114, 0, 0, 0, 0, 0, 0,
	0, 1105, 0, 0, 1084, 0, 0, 0, 1085, 0,
	1099, 1116, 0, 0, 0, 0, 0, 0, 0, 1082,
	1083, 0, 1102, 1103, 1104, 1112, 1113, 1114, 0, 0,
	0, 0, 1084, 0, 0, 1105, 0, 1090, 1099, 0,
	0, 0, 1085, 0, 0, 1116, 0, 1082, 1083, 0,
	1102, 1103, 1104, 1112, 1113, 1114, 1109, 1117, 0, 0,
	0, 0, 0, 1105, 0, 1090, 1084, 0, 0, 0,
	1085, 0, 1099, 1116, 1115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1109, 1117, 0, 0, 0, 1107,
	0, 0, 0, 1090, 1084, 0, 1100, 0, 0, 0,
	1099, 0, 1115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1109, 1117, 0, 0, 0, 1107, 0, 0,
	0, 1106, 0, 0, 1100, 0, 0, 1090, 0, 0,
	1115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1107, 1109, 1117, 0, 1106,
	0, 0, 1100, 0, 0, 1090, 0, 0, 0, 0,
	0, 0, 0, 0, 1115, 0, 0, 0, 0, 1101,
	0, 0, 0, 0, 1109, 1117, 0, 1106, 0, 1107,
	0, 0, 0, 0, 0, 1110, 1100, 0, 0, 0,
	0, 0, 1115, 0, 0, 0, 0, 1101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1107, 0, 0,
	0, 1106, 0, 1110, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1106,
	0, 1110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1108, 0, 0, 1096, 1097, 1098, 1111, 1101,
	1095, 1093, 1094, 1086, 1087, 1088, 1089, 1091, 1092, 0,
	0, 0, 0, 2107, 0, 1110, 0, 0, 0, 0,
	1108, 0, 0, 1096, 1097, 1098, 1111, 1101, 1095, 1093,
	1094, 1086, 1087, 1088, 1089, 1091, 1092, 0, 0, 0,
	0, 2026, 0, 1110, 0, 0, 0, 0, 1108, 0,
	0, 1096, 1097, 1098, 1111, 0, 1095, 1093, 1094, 1086,
	1087, 1088, 1089, 1091, 1092, 0, 0, 0, 0, 2002,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1108, 0, 0, 1096, 1097, 1098, 1111, 0,
	1095, 1093, 1094, 1086, 1087, 1088, 1089, 1091, 1092, 0,
	0, 0, 0, 1501, 0, 0, 0, 0, 0, 0,
	1108, 0, 0, 1096, 1097, 1098, 1111, 0, 1095, 1093,
	1094, 1086, 1087, 1088, 1089, 1091, 1092, 38, 0, 1775,
	0, 0, 1813, 1814, 0, 1831, 1832, 1833, 39, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 1994, 0,
	0, 42, 0, 1082, 1083, 0, 1102, 1103, 1104, 1112,
	1113, 1114, 0, 0, 0, 122, 0, 0, 0, 1105,
	0, 43, 0, 48, 0, 0, 1085, 0, 0, 1116,
	0, 0, 0, 0, 0, 1828, 0, 0, 0, 0,
	0, 0, 0, 0, 51, 0, 0, 0, 53, 0,
	1084, 0, 59, 0, 0, 123, 1099, 0, 0, 60,
	0, 61, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 0, 0, 0, 63, 0, 0, 0, 0,
	1819, 0, 0, 1082, 1083, 0, 1102, 1103, 1104, 1112,
	1113, 1114, 0, 0, 0, 0, 0, 0, 0, 1105,
	0, 1090, 2428, 0, 0, 0, 1085, 0, 0, 1116,
	0, 0, 0, 0, 0, 0, 64, 1834, 0, 0,
	1109, 1117, 0, 0, 0, 0, 0, 0, 0, 0,
	1084, 0, 0, 0, 0, 0, 1099, 0, 1115, 1829,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1107, 0, 0, 0, 0, 65, 0,
	1100, 0, 0, 0, 66, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 73, 74, 67, 1106, 68, 0, 69, 0,
	124, 1090, 0, 1845, 0, 70, 1844, 0, 0, 131,
	0, 2427, 0, 0, 0, 0, 80, 0, 0, 99,
	1109, 1117, 1830, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 1115, 0,
	0, 0, 0, 1101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1107, 0, 0, 103, 0, 0, 1110,
	1100, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 0, 0, 1106, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 1825, 1826,
	1827, 0, 0, 1824, 1822, 1823, 1815, 1816, 1817, 1818,
	1820, 1821, 0, 0, 0, 0, 1108, 0, 0, 1096,
	1097, 1098, 1111, 1101, 1095, 1093, 1094, 1086, 1087, 1088,
	1089, 1091, 1092, 0, 0, 0, 0, 0, 0, 1110,
	1082, 1083, 0, 1102, 1103, 1104, 1112, 1113, 1114, 0,
	0, 0, 0, 0, 0, 0, 1105, 0, 0, 0,
	0, 1679, 0, 1085, 0, 0, 1116, 0, 0, 0,
	0, 0, 1365, 0, 0, 0, 0, 0, 1082, 1083,
	0, 1102, 1103, 1104, 1112, 1113, 1114, 1084, 0, 0,
	0, 0, 0, 1099, 1105, 0, 0, 0, 1364, 0,
	0, 1085, 0, 0, 1116, 0, 1108, 0, 0, 1096,
	1097, 1098, 1111, 0, 1095, 1093, 1094, 1086, 1087, 1088,
	1089, 1091, 1092, 1680, 0, 1084, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 1083, 1090, 1102,
	1103, 1104, 1112, 1113, 1114, 0, 0, 0, 0, 0,
	0, 0, 1105, 0, 0, 0, 0, 1109, 1117, 1085,
	0, 0, 1116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1115, 1090, 0, 0, 0,
	0, 0, 0, 1084, 0, 0, 0, 0, 0, 1099,
	1107, 0, 0, 0, 0, 1109, 1117, 1100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1115, 0, 0, 0, 0, 0, 0,
	0, 0, 1106, 0, 0, 0, 0, 0, 1107, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1106, 0, 0, 1109, 1117, 0, 0, 0, 0, 0,
	1101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1115, 0, 0, 0, 0, 1110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1107, 0, 0, 0,
	0, 0, 0, 1100, 0, 0, 0, 0, 1101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1110, 0, 0, 0, 1106, 663,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1108, 0, 0, 1096, 1097, 1098, 1111,
	0, 1095, 1093, 1094, 1086, 1087, 1088, 1089, 1091, 1092,
	0, 0, 0, 0, 0, 0, 1101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1108, 1110, 0, 1096, 1097, 1098, 1111, 0, 1095,
	1093, 1094, 1086, 1087, 1088, 1089, 1091, 1092, 1082, 1083,
	0, 1102, 1103, 1104, 1112, 1113, 1114, 0, 0, 0,
	0, 0, 0, 0, 1105, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 1116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1084, 0, 0, 0, 1108,
	0, 1099, 1096, 1097, 1098, 1111, 0, 1095, 1093, 1094,
	1086, 1087, 1088, 1089, 1091, 1092, 1082, 1083, 0, 1102,
	1103, 1104, 1112, 1113, 1114, 0, 0, 0, 0, 0,
	0, 0, 1105, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 1116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 1083, 1090, 1102, 1103, 1104,
	1112, 1113, 1114, 1084, 0, 0, 0, 0, 0, 1099,
	1105, 0, 0, 0, 1846, 1109, 1117, 1085, 0, 0,
	1116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1115, 0, 0, 0, 0, 0, 0,
	0, 1084, 0, 0, 0, 0, 0, 1099, 1107, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 0, 0, 1851,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1106, 0, 0, 1109, 1117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1115, 1090, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1107, 0, 0, 0,
	0, 1109, 1117, 1100, 0, 0, 0, 0, 1101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1115,
	0, 0, 0, 0, 1110, 0, 0, 0, 1106, 0,
	0, 0, 0, 0, 1107, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 0, 0, 0, 0, 0, 2006,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1108, 1110, 0, 1096, 1097, 1098, 1111, 0, 1095,
	1093, 1094, 1086, 1087, 1088, 1089, 1091, 1092, 0, 0,
	0, 0, 0, 0, 1101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1110, 1082, 1083, 0, 1102, 1103, 1104, 1112, 1113, 1114,
	0, 0, 0, 0, 0, 0, 0, 1105, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 1116, 0, 1108,
	0, 0, 1096, 1097, 1098, 1111, 0, 1095, 1093, 1094,
	1086, 1087, 1088, 1089, 1091, 1092, 0, 0, 1084, 0,
	0, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1108, 0, 0,
	1096, 1097, 1098, 1111, 0, 1095, 1093, 1094, 1086, 1087,
	1088, 1089, 1091, 1092, 0, 0, 0, 0, 0, 0,
	0, 1082, 1083, 0, 1102, 1103, 1104, 1112, 1113, 1114,
	0, 0, 0, 0, 0, 0, 0, 1105, 0, 1090,
	0, 1804, 0, 0, 1085, 0, 0, 1116, 0, 1082,
	1083, 0, 1102, 1103, 1104, 1112, 1113, 1114, 1109, 1117,
	0, 0, 0, 0, 0, 1105, 0, 0, 1084, 0,
	0, 0, 1085, 0, 1099, 1116, 1115, 1082, 1083, 0,
	1102, 1103, 1104, 1112, 1113, 1114, 0, 0, 0, 0,
	0, 1107, 0, 1105, 0, 0, 1084, 0, 1100, 0,
	1085, 0, 1099, 1116, 0, 0, 0, 0, 0, 0,
	0, 1082, 1083, 0, 1102, 1103, 1104, 1112, 1113, 1114,
	0, 0, 0, 1106, 1084, 0, 0, 0, 0, 1090,
	1099, 0, 0, 0, 1085, 0, 1811, 1116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1109, 1117,
	0, 0, 0, 0, 0, 0, 0, 1090, 1084, 0,
	0, 0, 0, 0, 1099, 0, 1115, 0, 0, 0,
	0, 1101, 0, 0, 0, 0, 1109, 1117, 0, 0,
	0, 1107, 0, 0, 0, 1090, 0, 1110, 1100, 0,
	0, 0, 0, 0, 1115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1109, 1117, 0, 0, 0, 1107,
	0, 0, 0, 1106, 0, 0, 1100, 0, 0, 1090,
	0, 0, 1115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1107, 1109, 1117,
	0, 1106, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1108, 0, 1115, 1096, 1097, 1098,
	1111, 1101, 1095, 1093, 1094, 1086, 1087, 1088, 1089, 1091,
	1092, 1107, 0, 0, 0, 0, 0, 1110, 1100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1108, 0, 0, 1096, 1097, 1098,
	1111, 1101, 1095, 1093, 1094, 1086, 1087, 1088, 1089, 1091,
	1092, 0, 0, 0, 0, 0, 0, 1110, 0, 0,
	0, 0, 1108, 0, 0, 1096, 1097, 1098, 1111, 0,
	1095, 1093, 1094, 1086, 1087, 1088, 1089, 1091, 1092, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1108, 0, 0, 1096, 1097, 1098, 1111, 0, 1095, 1093,
	1094, 1086, 1087, 1088, 1089, 1091, 1092, 1254, 1244, 1273,
	1236, 1264, 1263, 0, 0, 1238, 1237, 0, 0, 0,
	0, 1275, 1274, 0, 1108, 0, 0, 1096, 1097, 1098,
	1111, 0, 1095, 1093, 1094, 1086, 1087, 1088, 1089, 1091,
	1092, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1269, 0, 1261, 1260, 0,
	0, 0, 0, 0, 0, 0, 0, 1259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1258, 1256, 1257, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1254, 1244,
	1273, 1236, 1264, 1263, 0, 0, 1238, 1237, 0, 0,
	0, 0, 1275, 1274, 0, 1247, 1246, 1248, 1249, 1250,
	1251, 1252, 0, 1272, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1269, 0, 1261, 1260,
	0, 0, 1240, 0, 0, 0, 0, 0, 1259, 0,
	0, 0, 0, 0, 1262, 0, 0, 0, 1245, 0,
	0, 0, 0, 0, 0, 0, 1258, 1256, 1257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1255, 0, 0,
	0, 1436, 1434, 1435, 1438, 1437, 1247, 1246, 1248, 1249,
	1250, 1251, 1252, 0, 1272, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1241, 0, 623,
	0, 583, 0, 0, 0, 0, 0, 0, 1253, 1242,
	0, 0, 0, 1240, 0, 0, 0, 0, 1277, 628,
	0, 0, 0, 0, 0, 1262, 0, 0, 0, 1245,
	1239, 626, 0, 1270, 1271, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 1243, 0, 629, 1255, 0,
	1276, 0, 635, 636, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	585, 630, 0, 0, 0, 0, 0, 0, 1241, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1253,
	1242, 0, 0, 648, 0, 0, 0, 0, 0, 1277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1239, 0, 631, 1270, 1271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 632, 633, 0,
	0, 0, 0, 0, 0, 0, 1243, 0, 0, 0,
	0, 1276, 0, 0, 0, 639, 0, 0, 634, 641,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	638, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	637, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 625, 642, 587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 643, 0, 0, 0, 647, 0, 0, 0, 588,
	0, 0, 0, 0, 640, 644, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	646,
}
var sqlPact = [...]int{

	38724, -1000, 9, -1000, -1000, 178, -1000, -1000, -1000, 174,
	173, 170, -1000, 169, 167, 166, -1000, 161, -1000, 160,
	159, 158, 157, 155, 153, -1000, 148, 147, -1000, -1000,
	-1000, 144, 142, 141, 140, 138, 137, 134, 1010, 23333,
	133, 127, 1326, 34817, 122, 111, 110, 107, 985, 102,
	101, 26832, 902, 1261, 100, 89, 88, 87, 86, 1017,
	34500, 1022, 2884, 6144, 1755, 1563, 34180, 23013, 1560, 2552,
	33860, -1000, -1000, 33540, 1260, 85, 79, 78, -1000, -1000,
	33220, 70, 68, 62, 61, 59, 56, 55, 54, 51,
	50, 49, 48, 46, 43, -1000, 40, 37, 36, 40567,
	34, 30, 29, 1067, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 168, -1000, 837, 468, 18491,
	980, 962, 961, 951, 960, 36719, 34817, 27, -75, 25,
	-1000, 1829, 635, 20427, 38724, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26512,
	26192, 32900, 32580, 738, -1000, 2, 24601, 34817, -1000, 98,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14494, 14138,
	531, 98, -1000, -1000, -1000, -1000, -1000, 32260, -1000, 31940,
	31620, 1438, 31300, -1000, -1000, -1000, -1000, 30980, -1000, -1000,
	1691, 1572, 1571, 25872, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 30663, 30343, 30023, 29703,
	29383, 491, -1000, -1000, -1000, 17171, -1000, -1000, -1000, -1000,
	22, -1000, -1000, -1000, -1000, 20, 17, 16, 14, 1181,
	-1000, -1000, 7, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 775, 15520, -1000, 488, -1000, 1585, -1000,
	15520, -1000, 1179, -1000, -1000, -1000, -1000, -1000, 34817, -1000,
	-1000, 1276, -1000, -1000, -1000, -1000, -1000, -1000, 900, -1000,
	-1000, -1000, 2041, 1106, 487, 29063, -1000, 1502, -1000, 573,
	733, -1000, -1000, -1000, 18160, 181, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1402, 22693, 1128, 1797, 1687,
	2040, 1352, 1686, 1673, 1662, 1652, 1636, 2039, 876, 2036,
	1693, 982, 2035, 1617, 1350, 637, 2034, 1583, 1579, -1000,
	-1000, -1000, 27466, -1000, -1000, 837, -1000, -1000, -1000, 1339,
	1810, 1810, 1810, 1826, 289, 278, -1000, 168, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1964, -1000,
	-1000, -1000, -1000, 2018, -1000, -1000, -1000, -1000, 1082, -1000,
	-1000, 1082, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 735,
	36085, -2, 34817, -1000, 485, -2, -1000, -1000, 484, -1000,
	10606, 10606, -1000, -1000, -1000, -1000, -1000, 8896, 1887, -1000,
	505, -186, 292, 554, -1000, 19461, 22033, -1000, -1000, 1030,
	1714, 611, -1000, 947, 1713, 513, -1000, 936, -1000, 1088,
	1712, -163, 23650, 24601, 2, -20, -1000, -1000, -1000, 5815,
	39969, -1000, -1000, 15520, 15520, 15520, 15520, 15520, 1078, 510,
	-1000, 483, 482, 7171, -1000, -1000, 2016, -1000, -1000, -1000,
	288, -1000, -1000, 15520, 98, -1000, -1000, -1000, -1000, 481,
	2030, -1000, 630, -1000, -1000, -1000, 578, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1611, 480, 474, 472,
	-1000, -1000, -1000, -1000, 470, 469, 467, 466, 465, 464,
	463, 457, 454, 452, 450, 448, 447, 445, 443, 1026,
	-1000, 593, -1000, -1000, 593, 593, -1000, 410, 410, 412,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 410, -1000,
	-1000, -1000, 565, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	441, 39969, -1000, 808, 21069, 98, -1000, -1000, -1000, -1000,
	439, 1285, 581, -1000, 294, -1000, 28743, 581, 1283, -1000,
	-1000, -1000, 27466, -1000, 34817, -1000, 34817, -1000, 841, -1000,
	36402, 118, 1704, -1000, -1000, 118, 1699, -1000, 117, 1696,
	-1000, -1000, -1000, 1694, -1000, -20, 1690, -1000, -1000, 15520,
	-18, -1000, -1000, -1000, 635, -1000, -1000, -1000, -1000, -1000,
	23967, 1198, 23650, 39969, 1907, 40401, 23650, 39969, 23967, -1000,
	-1000, -1000, -1000, -1000, 34817, -1000, 15520, -1000, 1904, 1385,
	-4, -1000, -1000, -1000, -1000, -1000, 1324, 1323, 701, 1001,
	17831, 17502, 1751, -1000, -1000, -1000, 119, 6144, -1000, -1000,
	-1000, -1000, -1000, -1000, 28423, -1000, -1000, -1000, 1084, 34817,
	-1000, -1000, 1603, -1000, 23967, 34817, -1000, 34817, -1000, 34817,
	-1000, 34817, -1000, 34817, -1000, -1000, -1000, -1000, -1000, 437,
	-1000, 1593, -1000, -1000, 34817, -1000, 1322, -1000, -1000, -1000,
	28106, 27786, -1000, 924, 772, 121, -1000, -1000, 1339, -1000,
	1186, 1368, 13782, 1376, 15520, 168, -1000, -1000, 168, 168,
	8198, -1000, -1000, -1000, -1000, -1000, -1000, -4, -1000, 36085,
	-1000, 34817, -2, 1901, 34817, -1000, 113, -1000, 39148, -1000,
	113, -21, -1000, 39969, -1000, 1400, 1399, 20748, 1330, 1095,
	1095, 1095, -1000, 433, 502, 554, 5142, 13440, -1000, 27149,
	1090, 215, 280, 19140, 1887, -1000, 34817, -28, 952, -1000,
	25552, 1795, 1783, 1765, 27466, 1843, 165, 1578, 732, 27466,
	731, 1824, 165, 1575, 728, 34817, 6144, 552, -1000, 34817,
	-1000, -1000, 40310, 40401, 6144, 745, 15520, 15520, 15520, 15520,
	15520, 15520, 15520, 15520, 15520, 15520, 15520, 15520, 15520, 15520,
	15520, 15520, 15520, 15520, 15520, 15520, 15520, 15520, 1426, 15520,
	723, 15520, 15520, 15520, 15520, 1297, 1056, 399, 1087, -1000,
	1959, 1959, 1959, 40031, 40031, 383, 510, -1000, 15520, -1000,
	165, 13084, 278, 38369, -3, 6829, -1000, -1000, -1000, 8540,
	591, 39969, 98, 4634, -1000, 2015, 863, 1622, 1482, 425,
	522, 508, 475, 15520, 15520, 12742, 12386, 12030, 15862, 11674,
	15520, 7513, 15520, 15520, 15520, 15520, 11318, 10962, -1000, 414,
	-1000, -1000, -1000, -1000, 2013, -1000, -1000, 1990, -1000, 744,
	743, 1989, -1000, 1568, -23, -1000, -1000, 25235, 1897, 1680,
	-1000, 1057, -1000, 1884, 34817, 1174, 1278, -1000, -1000, 763,
	1666, 587, 363, 1880, 363, 21391, -1000, 34817, -1000, 34817,
	-1000, -1000, 34817, -1000, 34817, -1000, 34817, 34817, 34817, 34817,
	-32, 39969, 1377, 24918, 720, -1000, 1542, 106, -37, -1000,
	824, -1000, -1000, -1000, -1000, 386, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 412, 1026,
	410, 410, 410, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	565, -1000, -1000, 593, 593, 593, -1000, -1000, -86, -1000,
	1536, -1000, 569, -40, 654, -4, -1000, 1082, 1242, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2029, -8, -1000, -1000, -8, -1000, -1000, 6144,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 34817, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 154, -1000, -1000, -1000,
	-1000, -1000, -1000, 34817, 34817, 34817, -1000, 27466, -1000, -1000,
	-1000, -1000, 39969, -1000, 380, -1000, -1000, 39969, 875, 1425,
	-1000, 1425, -15, -1000, 39110, 1384, 34817, -1000, -1000, 409,
	-42, 587, 10606, 20105, 6144, -1000, 587, 8896, -1000, 20748,
	20748, 1372, 1386, 20748, -1000, -1000, -1000, -1000, 27149, 455,
	554, 27149, -1000, 1979, 1360, -47, -1000, -1000, -1000, 34817,
	408, -1000, 554, 276, 905, 34817, 34817, 34817, -1000, -1000,
	1277, 35768, 1268, 40401, 34817, -1000, 405, 404, 1383, 1374,
	34817, 34817, 35451, 35134, 34817, 916, 165, -1000, 401, 34817,
	922, 34817, 165, -1000, 400, 34817, 915, -1000, 1447, 1189,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 572, 838, 838, 758, 758, 758, 758, 1999, 1670,
	277, 2565, 3701, 3701, 3701, 364, 428, 428, 3701, 3701,
	3701, 40031, 39997, 245, 15520, 15520, 718, 1040, 399, 245,
	15520, 245, 245, 245, 245, -1000, 1335, -1000, -1000, -1000,
	-1000, 1534, 396, 15862, 15862, -1000, -1000, -1000, 7171, 16191,
	-1000, -1000, -1000, -1000, 394, 15520, -1000, 38397, -207, -49,
	-1000, -1000, 15520, -52, -101, -1000, -1000, 825, -1000, 15520,
	-1000, -39, 15520, 15520, 15520, 275, -1000, 274, -1000, 709,
	-1000, 707, 705, 703, -1000, 393, 1092, 392, 389, 15520,
	-1000, -1000, -1000, -1000, -1000, -1000, 39941, 37359, 265, -1000,
	1532, -157, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 263,
	-1000, 262, -1000, 39851, -157, 261, 855, -1000, 15862, 15862,
	15862, 7171, 388, 257, -1000, 38853, -157, 39594, 10264, 10264,
	10264, 255, 39556, 15520, -157, 4150, 4099, 331, -55, -57,
	-1000, -62, -1000, 1975, -63, 254, 571, 566, 253, 802,
	1527, 34817, 252, -64, -19, 40401, -1000, -1000, -1000, -1000,
	-1000, 34817, 459, 34817, 165, 34817, 2028, 165, 34817, 1656,
	1674, 540, 34817, 873, 15520, 978, -1000, 19783, 602, 34817,
	873, 97, -1000, -1000, -1000, 548, 34817, -1000, -1000, 118,
	118, -1000, 117, -1000, -20, -1000, 15520, -1000, -1000, 34817,
	23650, -1000, -1000, 40401, -1000, 509, 677, -1000, 1967, 582,
	23650, 34817, -1000, 1404, -1000, -1000, 885, -1000, 988, -1000,
	18820, -1000, -43, -1000, -1000, -1000, -1000, -1000, 552, -1000,
	875, -1000, 15520, 1957, -1000, -1000, -1000, 8198, -1000, -1000,
	-1000, 34817, -180, 106, -1000, 1469, -1000, -114, -1000, 1887,
	-1000, 1469, -1000, -1000, 1372, -1000, 387, 15520, 20748, -1000,
	499, -1000, -65, -1000, 27149, -1000, 498, -204, -1000, 547,
	-1000, 554, 384, 34817, 27149, -1000, -1000, -1000, 702, 700,
	1650, -1000, 1263, -1000, 607, -1000, 1180, 15520, 16849, 378,
	377, 1013, -1000, 1649, 1175, 1648, 1175, -1000, -28, 942,
	-1000, 15520, -1000, 695, -1000, -1000, 15520, -1000, 683, 582,
	1507, 778, 15520, 245, 245, 15520, 15862, 15862, -1000, 245,
	-1000, -1000, -1000, -1000, -1000, 1503, 375, 15520, 40401, 38742,
	4216, -72, -1000, 9922, -35, -1000, 15520, -1000, 38335, -1000,
	-1000, 506, 1719, -1000, 15520, 39488, 250, 9580, -1000, 39216,
	-45, -45, -1000, 2024, 1269, 1109, 1062, 856, 1954, -1000,
	21712, 589, 1100, 38307, 40310, 40401, -1000, 15520, -1000, -1000,
	1493, 15520, -1000, 40310, 40401, 15862, 15862, 15862, 15862, 15862,
	15862, 15862, 15862, 15862, 15862, 15862, 15862, 15862, 15862, 15862,
	15862, 15862, 15862, 15862, 1314, 15862, 1933, 1933, 1933, -38,
	9238, -1000, 1589, 1493, 15520, 15520, 40401, 248, 247, 246,
	-1000, 15520, -157, 15520, 15520, 15520, -1000, -1000, -1000, 244,
	-1000, 1952, -1000, -1000, -1000, -1000, -1000, 797, -1000, 1440,
	-1000, 25235, 369, 34817, 368, -1000, 366, -1000, -1000, 365,
	34817, 1359, 540, 24284, -1000, 581, -1000, 7855, 39969, -1000,
	873, 1770, -79, -1000, -1000, -1000, 587, 21391, 20748, 8896,
	-84, -1000, -1000, -1000, 39969, -43, -115, -1000, 1943, -1000,
	495, 241, -1000, 1108, -1000, -43, -1000, -1000, -1000, -1000,
	-1000, 34817, -1000, 1153, 38279, -1000, 1813, 6144, 231, 1452,
	1821, -1000, 20748, 1452, -1000, 34817, 39969, -1000, -186, -1000,
	1938, -1000, -1000, 1360, -1000, 5483, 27149, 34817, -89, -1000,
	34817, 34817, 34817, 1645, -1000, 1682, -1000, 37937, -94, -1000,
	311, 1798, 15520, -1000, -1000, 362, 16849, 34817, -1000, 1380,
	1381, 647, 34817, -1000, 34817, -1000, 34817, 34817, 34817, -96,
	34817, -112, 34817, -1000, 23650, 742, 1919, 245, 4131, 3031,
	15520, 40401, 4281, -119, 15520, 15520, -1000, -120, -1000, 15520,
	494, 39969, -1000, -1000, -1000, 39969, 15520, 1961, 15520, 230,
	229, 228, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	226, -1000, -1000, 37036, 15520, 224, -1000, 223, 222, 39969,
	1589, 39969, -1000, -1000, 820, 820, 886, 886, 886, 886,
	1933, 2288, 436, 2401, 1659, 1659, 1659, 2773, 881, 881,
	1659, 1659, 1659, 1489, 1343, 361, 2316, 15520, -121, -1000,
	-1000, -1000, 39969, 39969, 219, -1000, -1000, -1000, -157, 214,
	37909, 37875, -1000, 217, -1000, -1000, 1442, -1000, 16849, 351,
	34817, 25235, 1878, 16849, 1169, 1361, 540, 24284, -1000, 763,
	-60, -1000, -1000, 376, 165, 873, -1000, -74, -1000, 542,
	23650, 456, -1000, -1000, 347, -1000, -1000, -1000, -1000, 1813,
	-1000, 584, 15520, 15520, 1887, 584, -132, 554, -1000, -1000,
	-1000, 1932, -1000, -141, -1000, -1000, -1000, -1000, 34817, -1000,
	34817, -1000, 6144, 34817, 1473, 1241, -1000, -1000, 1373, 346,
	15862, 34817, -1000, 1036, 16849, 1813, 98, 6144, 1813, 37847,
	4634, -142, -143, 1228, -1000, 1203, 15520, -1000, 40401, 1175,
	1175, -1000, 682, 681, 663, -1000, 659, -1000, -85, 22362,
	15520, 15520, 4281, -144, -1000, 245, 245, -1000, 37819, -1000,
	39969, -1000, 39216, -1000, -1000, -1000, -1000, 1069, -1000, 37477,
	-1000, -1000, -1000, -1000, 15862, 1478, 345, 40401, 37449, -1000,
	-1000, 15520, -1000, -1000, -1000, 1075, -150, 16849, -151, 216,
	165, -152, 34817, -1000, 540, 24284, -1000, 1674, 1725, 34817,
	1762, -1000, -1000, 342, -1000, -1000, 2023, -1000, -1000, 34817,
	39969, -157, -1000, -1000, 27149, 290, -1000, -1000, 1608, -1000,
	-1000, 34817, 1246, -1000, -1000, 15520, 2316, 340, 1440, 338,
	-1000, -1000, -1000, -1000, -1000, -1000, 1798, -39, -1000, 959,
	-1000, -1000, 39969, 1782, -1000, -1000, 34817, 34817, 335, 334,
	-1000, 332, 98, 245, 245, -1000, -1000, 213, 1100, 1819,
	-1000, 314, 15862, 40401, -159, -1000, 37415, 34817, 1036, -160,
	-1000, 1440, -1000, 1036, 328, 24284, -1000, 1359, 753, -161,
	34817, -1000, -1000, 6473, -166, -1000, 536, -117, -1000, 1863,
	-1000, -1000, -1000, -1000, 1639, 37387, 1272, 34817, -1000, 34817,
	1813, 194, 34817, 616, 6144, -1000, -1000, 15520, 15520, 15520,
	-1000, 888, 15520, 314, -168, -1000, -1000, 312, 1440, 1036,
	-1000, 1440, 16849, -1000, 1361, 827, -1000, 587, -1000, 2023,
	-1000, -1000, 2021, 34817, 296, 1630, -1000, 1162, 998, 191,
	-173, -1000, -1000, 294, -1000, 15520, -1000, -176, -182, -45,
	189, 15178, 15178, -157, -1000, 34817, -1000, 1440, -1000, -183,
	-1000, 21391, -1000, -1000, -1000, -1000, -1000, 34817, -1000, 1167,
	1163, 852, -1000, -1000, -1000, -1000, -1000, 1272, 39969, -1000,
	-1000, 183, -1000, -1000, -1000, 16520, 1137, 864, 38763, -1000,
	-184, -1000, 1036, -169, -1000, -1000, 1730, -1000, 624, 1050,
	1050, 1162, 1961, 1912, -1000, -1000, -1000, -1000, -1000, 1131,
	1440, -1000, -1000, 1920, -1000, -1000, 1329, -1000, -1000, 14836,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2355, 2353, 1594, 1790, 2352, 2351, 2350, 2349, 2345,
	2343, 2341, 2340, 2337, 2324, 2322, 2321, 2315, 2313, 2312,
	2311, 2310, 2309, 2308, 2307, 2306, 2303, 1786, 2302, 2293,
	2292, 2291, 2290, 2289, 1781, 2287, 1765, 2286, 2284, 2282,
	2281, 2280, 1762, 1718, 2278, 85, 107, 1677, 2277, 2274,
	1648, 2271, 2270, 2269, 2265, 2264, 2263, 2262, 48, 2261,
	2258, 2257, 2256, 2253, 2252, 2250, 142, 152, 2248, 1644,
	2245, 2244, 2243, 2238, 2237, 2236, 2229, 2228, 2227, 2225,
	2219, 2217, 2215, 2214, 2212, 2211, 2210, 2209, 153, 2208,
	2207, 1633, 1599, 2206, 2202, 18, 2199, 73, 2197, 29,
	138, 2901, 129, 2195, 2193, 2192, 2191, 2190, 2189, 27,
	100, 98, 2186, 43, 2185, 2182, 38, 28, 16, 25,
	2181, 91, 2180, 2179, 1461, 33, 2178, 2172, 125, 2170,
	13, 22, 219, 146, 144, 105, 113, 2168, 2167, 2166,
	2165, 42, 2161, 5, 2160, 2159, 17, 82, 15, 2156,
	24, 19, 2155, 2153, 128, 2151, 59, 94, 1523, 104,
	112, 1460, 2150, 54, 9, 62, 2149, 2147, 147, 37,
	2145, 23, 80, 135, 2144, 50, 151, 122, 78, 123,
	117, 2141, 2140, 2139, 114, 2138, 108, 70, 2136, 2135,
	79, 2126, 131, 130, 2125, 2123, 87, 2122, 115, 2120,
	2119, 150, 136, 111, 6, 45, 60, 14, 1502, 1497,
	116, 66, 55, 51, 2115, 1833, 889, 2266, 31, 96,
	69, 53, 97, 58, 76, 141, 20, 2113, 2109, 118,
	2107, 2106, 2104, 2102, 2099, 95, 2098, 2096, 65, 139,
	77, 41, 36, 86, 30, 57, 119, 106, 143, 101,
	2095, 88, 109, 2094, 72, 2093, 2091, 1646, 132, 2090,
	2089, 2087, 1441, 1389, 986, 35, 2086, 2085, 967, 879,
	2083, 2080, 90, 2079, 110, 103, 2078, 133, 280, 93,
	2077, 102, 39, 89, 2076, 56, 46, 0, 1815, 184,
	2075, 121, 75, 2074, 2073, 2072, 2067, 21, 2, 7,
	3, 8, 4, 32, 26, 2066, 2065, 124, 83, 63,
	2064, 149, 2063, 2062, 2061, 47, 2060, 12, 2059, 10,
	2058, 2054, 11, 1, 2053, 2052, 137, 2049, 92, 2048,
	1856, 2047, 140, 2045, 2044, 1614, 34, 99,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 7,
	7, 8, 8, 6, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 111, 111,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 108, 108, 113, 113, 113,
	115, 115, 112, 112, 107, 107, 20, 20, 56, 56,
	51, 285, 285, 286, 286, 94, 94, 98, 98, 95,
	96, 96, 97, 97, 26, 26, 26, 22, 22, 22,
	22, 22, 23, 23, 24, 24, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	34, 34, 35, 35, 35, 35, 35, 35, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 41,
	41, 41, 39, 39, 39, 38, 38, 38, 37, 37,
	37, 40, 40, 40, 160, 160, 159, 159, 162, 162,
	42, 42, 42, 42, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 46, 46, 46, 46, 46, 46,
	46, 46, 253, 253, 252, 44, 44, 227, 227, 47,
	47, 185, 185, 48, 48, 48, 48, 48, 49, 49,
	57, 57, 326, 326, 326, 330, 330, 331, 331, 332,
	332, 332, 332, 332, 332, 332, 328, 328, 54, 54,
	54, 93, 93, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 63, 63, 65, 62, 62, 62, 64, 64,
	64, 64, 66, 66, 66, 66, 67, 67, 67, 67,
	67, 68, 68, 140, 140, 278, 277, 277, 283, 283,
	283, 138, 138, 138, 138, 138, 139, 139, 139, 276,
	276, 276, 276, 284, 284, 284, 284, 284, 284, 282,
	282, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 81, 81, 81,
	88, 88, 88, 88, 88, 88, 88, 70, 70, 75,
	75, 75, 75, 75, 71, 71, 76, 76, 77, 77,
	78, 78, 78, 78, 78, 78, 72, 72, 72, 72,
	80, 80, 80, 80, 79, 79, 85, 85, 85, 85,
	85, 85, 82, 82, 82, 82, 83, 83, 83, 86,
	86, 86, 86, 73, 73, 74, 74, 87, 87, 84,
	84, 84, 43, 327, 327, 329, 329, 52, 52, 30,
	30, 31, 31, 141, 141, 142, 142, 206, 206, 206,
	206, 143, 143, 114, 114, 114, 205, 295, 295, 296,
	296, 296, 296, 296, 296, 297, 297, 297, 297, 297,
	297, 297, 293, 293, 294, 291, 291, 292, 292, 292,
	292, 333, 333, 204, 204, 146, 146, 300, 300, 300,
	300, 298, 298, 298, 298, 298, 301, 299, 302, 302,
	302, 302, 302, 239, 239, 239, 90, 90, 32, 32,
	120, 120, 33, 33, 29, 29, 29, 189, 189, 150,
	150, 244, 244, 244, 131, 131, 109, 109, 109, 14,
	11, 11, 11, 11, 11, 11, 19, 19, 17, 17,
	190, 190, 191, 191, 53, 53, 55, 55, 60, 60,
	89, 89, 89, 89, 89, 89, 21, 21, 21, 21,
	25, 25, 25, 25, 59, 59, 335, 335, 127, 127,
	127, 127, 128, 128, 201, 201, 202, 202, 203, 203,
	203, 122, 121, 123, 123, 28, 28, 28, 116, 116,
	117, 117, 118, 118, 119, 119, 336, 336, 50, 50,
	50, 92, 92, 134, 134, 198, 198, 198, 200, 200,
	199, 199, 199, 175, 175, 175, 91, 91, 155, 155,
	164, 164, 165, 165, 250, 166, 166, 58, 58, 101,
	101, 99, 99, 99, 99, 99, 99, 100, 100, 100,
	102, 102, 102, 102, 102, 102, 102, 105, 105, 105,
	106, 106, 106, 104, 104, 308, 308, 308, 311, 311,
	307, 309, 309, 310, 310, 334, 334, 176, 176, 176,
	145, 144, 144, 148, 148, 147, 149, 149, 243, 243,
	243, 173, 173, 173, 173, 192, 192, 193, 193, 194,
	194, 195, 195, 195, 196, 196, 197, 197, 172, 172,
	223, 223, 103, 103, 103, 154, 154, 154, 156, 156,
	213, 213, 213, 214, 214, 212, 212, 212, 212, 245,
	245, 245, 245, 245, 245, 245, 245, 324, 324, 324,
	325, 325, 242, 242, 246, 246, 246, 246, 246, 246,
	240, 240, 240, 240, 241, 241, 251, 251, 179, 179,
	179, 179, 177, 177, 178, 178, 247, 247, 247, 247,
	174, 174, 248, 248, 248, 207, 207, 254, 254, 254,
	272, 272, 153, 153, 153, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 256, 256, 256, 256, 258, 258, 258, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 271, 271, 271,
	271, 271, 259, 259, 266, 266, 267, 267, 268, 269,
	260, 260, 261, 261, 262, 263, 270, 270, 270, 270,
	274, 274, 264, 264, 264, 264, 264, 265, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 187, 187, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 217, 217, 217, 217,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 303, 303, 303, 303, 303, 303, 303, 303, 305,
	305, 306, 306, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 312, 312, 313, 313, 315, 315, 316, 316, 317,
	318, 318, 318, 319, 320, 320, 314, 314, 321, 321,
	321, 322, 322, 323, 323, 323, 323, 323, 229, 229,
	229, 230, 230, 231, 237, 237, 237, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 129, 129, 129, 129, 129, 161, 161,
	226, 226, 224, 224, 224, 228, 228, 180, 180, 273,
	273, 273, 273, 273, 273, 273, 181, 181, 181, 188,
	182, 182, 183, 183, 183, 183, 183, 183, 220, 221,
	184, 184, 184, 222, 222, 232, 236, 236, 235, 234,
	234, 233, 233, 210, 210, 211, 211, 209, 208, 169,
	169, 168, 168, 167, 167, 337, 337, 238, 238, 170,
	170, 171, 163, 163, 249, 249, 249, 249, 157, 157,
	136, 136, 158, 158, 132, 132, 135, 135, 133, 133,
	133, 133, 151, 151, 152, 152, 130, 130, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 275,
	275, 275, 225, 124, 124, 124, 125, 125, 126, 126,
	280, 280, 280, 281, 281, 281, 281, 279, 279, 279,
	279, 279, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 2, 6, 2,
	8, 1, 1, 1, 3, 3, 0, 2, 0, 2,
	1, 3, 5, 0, 4, 6, 7, 1, 2, 1,
	2, 2, 3, 3, 3, 3, 1, 2, 1, 2,
	1, 2, 1, 2, 3, 1, 2, 1, 2, 2,
	6, 3, 2, 2, 2, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 2, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 3, 5,
	3, 3, 5, 3, 1, 3, 1, 2, 2, 3,
	2, 2, 5, 3, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 3, 1, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 2,
	6, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 3,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 3, 4, 3, 5, 3, 2, 6, 3, 3,
	4, 4, 3, 3, 3, 3, 1, 3, 3, 1,
	1, 2, 2, 1, 0, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 2, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 3, 3, 4,
	4, 3, 4, 4, 4, 3, 2, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	2, 3, 3, 3, 2, 3, 4, 3, 5, 3,
	4, 5, 2, 3, 3, 3, 4, 2, 3, 4,
	3, 3, 3, 4, 4, 4, 4, 2, 3, 5,
	5, 6, 2, 2, 0, 2, 0, 3, 2, 7,
	10, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 3, 2, 0, 3,
	1, 2, 2, 3, 6, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 2, 4, 3,
	3, 0, 6, 3, 11, 14, 4, 1, 0, 1,
	3, 3, 3, 5, 2, 0, 1, 1, 0, 6,
	6, 8, 8, 10, 8, 10, 6, 8, 6, 8,
	1, 0, 2, 0, 2, 2, 3, 2, 2, 2,
	1, 2, 1, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	3, 6, 3, 1, 3, 1, 4, 2, 8, 5,
	4, 3, 0, 2, 2, 0, 8, 3, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 2, 2, 1, 1, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 2, 2, 3, 3, 2, 0, 1, 3,
	3, 5, 1, 1, 3, 2, 4, 4, 0, 8,
	4, 6, 3, 3, 1, 5, 5, 0, 2, 3,
	1, 3, 2, 0, 3, 4, 5, 4, 5, 4,
	5, 2, 4, 1, 1, 0, 5, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	1, 1, 2, 3, 0, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 3, 4, 4,
	5, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 2, 1, 3, 1, 1, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 3, 4,
	1, 1, 1, 5, 1, 3, 3, 1, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 6, 6, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 3, 4,
	3, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 3,
	5, 4, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 3,
	1, 3, 3, 3, 2, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 0, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 1, 1,
	3, 3, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 2, 3, 1, 1, 1,
	2, 2, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -26, -27, -48,
	-34, -35, -36, -47, -42, -49, -43, -50, -51, -52,
	-44, -56, -55, -57, -60, -58, -53, -54, -61, -69,
	-89, -90, -91, -92, -5, -6, -7, -8, 23, 34,
	-23, -24, 47, 67, -28, -29, -30, -31, 69, -32,
	-33, 90, -310, 94, -37, -38, -39, -41, -40, 98,
	105, 107, 125, 131, 172, 214, 220, 240, 242, 244,
	251, -99, -101, 238, 239, -62, -63, -64, -65, -93,
	262, -70, -71, -72, -73, -74, -75, -76, -77, -78,
	-79, -80, -81, -82, -83, -84, -85, -86, -87, 265,
	-21, -25, -59, 302, -9, -10, -13, -12, -11, -16,
	-18, -15, -17, -19, -14, -308, -102, -100, 353, 311,
	35, 274, 61, 101, 246, 327, 334, -105, -103, -104,
	-106, 255, 319, 283, 357, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 2, 283,
	322, 83, 140, -326, 2, -158, 283, 83, -133, -124,
	346, 4, -287, -289, 20, 21, 23, 33, 34, 35,
	40, 44, 47, 48, 55, 60, 61, 62, 64, 66,
	67, 68, 72, 73, 71, 81, 82, 84, 86, 90,
	92, 94, 97, 98, 100, 105, 106, 107, 113, 114,
	119, 121, 126, 131, 132, 133, 134, 141, 144, 146,
	139, 156, 157, 158, 160, 161, 162, 165, 164, 169,
	172, 173, 176, 178, 179, 180, 183, 181, 185, 186,
	188, 187, 193, 195, 196, 198, 201, 204, 207, 210,
	211, 212, 213, 214, 216, 218, 220, 222, 223, 224,
	225, 226, 228, 229, 231, 232, 233, 234, 235, 238,
	236, 237, 239, 240, 241, 242, 244, 246, 247, 249,
	263, 264, 275, 251, 252, 253, 254, 258, 256, 259,
	260, 262, 265, 267, 270, 273, 274, 276, 279, 277,
	272, 282, 284, 285, 286, 287, 288, 289, 290, 297,
	298, 302, 303, 304, 305, 308, 309, 310, 311, 313,
	316, 317, 318, 323, 328, 329, 330, 331, 332, 28,
	36, 37, 38, 39, 41, 42, 45, 46, 51, 52,
	53, 56, 85, 87, 88, 104, 108, 109, 115, 116,
	117, 127, 129, 135, 136, 145, 147, 148, 149, 150,
	151, 153, 167, 182, 192, 194, 205, 209, 217, 219,
	227, 248, 257, 268, 269, 278, 280, 292, 293, 294,
	299, 300, 315, 319, 320, 356, 356, 2, 157, 224,
	-132, -124, 83, 356, 356, 356, 356, 283, 2, 312,
	322, -189, 83, 307, 356, 356, -124, 220, 22, 2,
	92, 144, 310, 309, 22, 216, 256, 285, 287, 2,
	356, 356, 356, 356, 356, 2, 322, 283, 140, 83,
	312, -124, 2, -46, 2, 353, -45, -4, -27, -36,
	-47, -42, -43, -58, -69, -34, -50, -91, -92, -330,
	2, 22, -331, -332, 69, 98, 125, 255, 144, 92,
	309, -279, 4, -287, -289, -288, -290, 58, 70, 124,
	143, 137, 155, 159, 168, 170, 184, 206, 208, 245,
	266, 22, 24, 25, 26, 27, 29, 30, 31, 32,
	43, 49, 50, 54, 57, 59, 65, 69, 74, 75,
	77, 76, 78, 79, 80, 89, 91, 93, 95, 96,
	99, 101, 103, 110, 111, 112, 120, 122, 123, 125,
	128, 130, 138, 140, 142, 152, 154, 163, 166, 171,
	174, 175, 189, 190, 191, 197, 199, 200, 202, 203,
	215, 221, 230, 243, 255, 261, 271, 281, 283, 291,
	295, 296, 301, 306, 307, 312, 314, 321, 322, 324,
	325, 326, 327, 71, 157, 2, -124, 2, -326, 2,
	157, 2, -330, 2, -124, 2, -128, 2, 251, -124,
	-88, 259, 2, 4, 22, 83, 183, 261, 292, 356,
	356, 356, 173, 55, 248, 259, -67, 298, -66, 292,
	-278, -68, 2, -159, 183, -124, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 2, -88, 259, 34, 55, 22, 60,
	84, 126, 140, 141, 161, 65, 66, 223, 173, 158,
	297, 162, 260, 284, 298, 69, 313, 288, 106, 356,
	356, 356, -334, 2, 283, -100, -102, -101, -147, -148,
	306, 152, 103, 203, -99, -101, 2, -308, -283, 2,
	-276, -239, 9, 301, 110, 199, -282, 8, 345, -275,
	-281, 5, 7, 344, 4, -287, -289, -288, -335, 2,
	298, 298, 2, -335, 2, -335, 2, -127, 2, 298,
	295, -311, 228, -307, -124, -311, 356, 356, 358, 356,
	-144, -145, 2, 22, 95, -171, 2, 353, -245, 2,
	351, -247, -132, -101, -246, 353, 200, -3, 2, -247,
	135, -132, 2, -247, 135, -132, 2, -124, 2, -135,
	135, -132, 295, 358, -158, -151, -124, -209, -208, 355,
	-215, 2, -217, 344, 345, 339, 189, 333, -229, -219,
	-232, 104, 248, 353, -132, -218, 359, 9, -305, -101,
	29, -230, -231, 49, -124, 7, 8, 5, 6, -130,
	-256, -225, -265, 301, 110, 191, -303, -304, 4, -287,
	-280, -257, -267, -261, -264, 153, 58, 75, 76, 79,
	77, 80, 261, 312, 50, 28, 108, 109, 209, 217,
	280, 299, 300, 135, 192, 136, 56, 127, 167, 97,
	37, 39, 41, 42, 51, 52, 85, 87, 88, 115,
	116, 117, 145, 147, 148, 149, 150, 151, 194, 227,
	268, 278, 293, 294, 320, -288, -268, -269, -262, -263,
	-270, -215, 2, 123, 353, -168, -169, -208, -209, 2,
	-159, 135, -124, 2, -159, 2, 140, -124, 135, 2,
	-124, 22, 123, 2, 154, 2, 154, 2, -248, 2,
	-247, -160, 135, 2, -159, -160, 135, 2, -136, 135,
	2, -135, -124, 135, 2, -151, 135, 2, -185, 353,
	-253, 2, -252, -281, 319, 356, 356, 356, 356, 356,
	199, 358, 283, -215, -227, 353, 123, -215, 199, -124,
	-88, 332, 2, 2, 263, 2, 353, -67, 53, 298,
	-202, 2, -203, -121, -122, -123, 156, 222, 226, 332,
	295, 338, 123, -283, -140, 89, -162, 355, -88, 2,
	-285, 2, -282, 9, 263, 2, 223, 260, 55, 123,
	2, 2, -327, 2, 199, 123, 2, 123, 2, 123,
	2, 123, 2, 123, 2, 2, 223, 260, 2, 120,
	2, 297, 2, 2, 123, 2, 156, 222, 275, 2,
	283, 322, 2, 123, 123, -174, -247, -147, -148, -173,
	-192, -193, 171, 112, 197, -176, 22, 95, -176, -176,
	44, 354, 354, 8, 7, 7, -201, -202, -201, 295,
	-128, 358, -311, -152, 353, -171, -163, -249, -215, 346,
	-163, -170, -238, -215, 89, 70, -179, 159, 184, 124,
	168, 245, 143, 7, -46, -212, 359, 353, 346, -242,
	334, -101, -246, 353, -245, -132, 353, -111, 236, -110,
	21, 23, 98, 317, 104, 272, 289, 252, 236, 104,
	236, 272, 289, 252, 236, 104, 359, -285, -133, 358,
	-279, 346, 10, 11, 57, 33, 344, 345, 346, 347,
	118, 348, 349, 342, 343, 341, 336, 337, 338, 63,
	177, 250, 13, 14, 15, 26, 202, 170, 333, 137,
	266, 339, 16, 17, 18, 155, 36, 138, -129, -137,
	-215, -215, -215, -215, -215, 208, -167, -210, 351, -101,
	353, 353, -101, -215, -161, 353, 7, -101, -224, 351,
	-233, -215, -168, 353, 5, 353, 5, -312, 328, 120,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 219, -274,
	323, -274, -274, -258, 353, -258, -259, 353, -258, 329,
	334, 353, 276, 354, -157, -132, -169, 353, -146, 189,
	-120, -309, 327, -146, 353, -125, 135, 2, -124, -309,
	189, -248, -134, -132, -134, 262, -124, 30, -113, 358,
	48, 241, 104, -113, 104, -113, 358, 104, 104, 104,
	-161, -215, 354, 358, -326, -332, -285, 30, -226, -254,
	-255, -257, -266, -260, -264, -265, 40, 46, 45, 290,
	182, 257, 269, 315, 38, 198, 146, 145, 147, 148,
	149, 150, 151, 268, 37, 227, 116, 117, 115, 97,
	88, 87, 194, 42, 41, -268, -269, -262, -263, 85,
	293, 294, 153, 39, 52, 51, 320, 278, -286, -285,
	-326, -66, -278, -161, 30, -202, 2, 358, 169, -139,
	176, 188, 132, 200, 330, -284, 5, 4, -225, -239,
	89, 173, -265, -277, 89, -283, -277, 89, 73, 355,
	-279, -159, 22, 264, 2, -278, -329, 120, -326, -278,
	-278, -278, -278, -278, 259, -46, 120, -124, 169, -278,
	2, -278, 2, 283, 140, 283, -113, 358, -173, -193,
	-192, -194, -215, 22, -197, 114, 185, -215, -217, -100,
	-100, -100, -149, -243, -215, 221, 140, -128, -307, 30,
	-151, -154, 358, 123, 30, 4, -154, 358, 354, 159,
	159, -245, -179, 159, -177, 206, -177, -177, -324, 353,
	352, -242, -279, 351, 360, -161, 2, -241, -240, 30,
	-124, 204, 354, -132, 358, 295, -190, 65, 59, -205,
	135, 59, -291, -124, 65, -292, 54, 307, 221, 122,
	-190, 65, -190, 65, 65, -247, 33, -58, 123, 295,
	-247, 295, 33, -58, 123, 295, -135, -279, -251, 335,
	-124, -272, -254, -271, 232, 233, 231, 235, 234, -254,
	-279, 292, -215, -215, -215, -215, -215, -215, -215, -215,
	-215, -215, -215, -215, -215, -215, -215, -215, -215, -215,
	-215, -215, -215, -215, 170, 137, 266, 36, 138, -215,
	295, -215, -215, -215, -215, 181, 189, 191, 301, 110,
	308, 95, 195, -337, 281, 32, -222, -101, 353, -237,
	27, 271, 22, -229, 248, 353, -210, -215, -211, -161,
	354, 354, 358, -161, -228, 352, -224, -236, -235, 324,
	354, -161, 321, 22, 95, 346, 2, 7, -186, 331,
	180, 86, 133, 179, -187, 254, -313, 113, 128, 353,
	354, 2, 354, 2, 354, 2, -215, -215, -180, 2,
	-273, -161, 4, 331, 180, 86, 133, 179, 254, -180,
	2, -181, 2, -215, -161, -182, -216, -217, 344, 345,
	339, 353, 248, -183, 2, -215, -161, -215, 43, 166,
	296, -184, -215, 123, -161, -215, -215, -215, -161, -161,
	2, -161, 2, 353, 7, 7, 292, 292, 7, 123,
	354, 358, -141, -151, -142, -124, -206, -205, -293, -294,
	-291, 140, 307, 111, 30, 104, 213, 30, 199, 189,
	-116, 286, 104, -207, 325, -198, -58, 353, 89, 30,
	-198, -164, -165, -250, -166, -132, 353, -124, -159, -160,
	-160, -135, -136, -124, -151, 354, 358, -46, -252, 295,
	123, -45, 354, 358, -153, 29, 351, -186, 353, -251,
	358, 123, 354, 298, -203, -138, 226, 270, 237, 258,
	358, -279, -328, -124, 259, -46, -132, -135, -132, -247,
	-195, -275, 353, 345, -196, 248, 249, 358, -109, 31,
	93, 160, -132, 353, 354, -207, -249, -156, 2, -245,
	-279, -207, -238, -245, -245, -178, 314, 199, 159, -245,
	-240, 354, -325, 7, -242, -241, 7, -214, -213, 121,
	187, 354, -124, 353, -242, 354, -110, -132, -124, -124,
	189, -205, 135, -115, 189, -254, -124, 353, 353, 160,
	160, -124, -124, 135, -124, 135, -124, -124, -111, 236,
	-58, 353, -132, 236, -124, -58, 353, -124, 236, -94,
	134, 195, 332, -215, -215, 295, -337, 281, -222, -215,
	181, 191, 301, 110, 308, 95, 195, 123, 353, -216,
	-216, -161, -219, 353, -161, 352, 362, 354, -215, 352,
	352, 358, -234, -235, 99, -215, -148, 358, -147, -215,
	-161, -161, 354, 354, 295, 295, 295, 295, 353, -318,
	207, 353, 353, -215, 30, 358, 354, 123, 354, 354,
	-188, 215, 354, 10, 11, 344, 345, 346, 347, 118,
	348, 349, 342, 343, 341, 336, 337, 338, 63, 177,
	250, 13, 14, 15, 155, 138, -216, -216, -216, -161,
	353, 354, -220, -221, 123, 120, 30, -184, -184, -184,
	354, 123, -161, 358, 358, 358, 354, 354, 354, 7,
	354, 358, 354, 332, 332, 354, 276, 123, -132, 354,
	354, 358, -125, 140, -125, -58, -159, 5, -58, -132,
	104, -117, 100, -336, 338, -124, -175, 243, -215, -175,
	-200, 199, -157, 319, -124, -175, -155, 358, 123, 338,
	-157, -113, -113, -113, -215, -328, -286, -254, 351, 352,
	7, 7, -97, 327, -285, -328, -121, 305, 62, 226,
	-283, 358, -251, -196, -215, -243, -132, 359, -45, -172,
	128, -251, 358, -172, -178, 353, -215, -245, 352, 354,
	358, -241, 352, 358, 361, 338, -242, 353, -151, -240,
	295, 295, 104, 189, 316, -295, -292, -215, -150, -244,
	-124, -306, 353, -303, -304, -130, 353, 353, -108, 98,
	262, -191, 104, -113, 104, -113, 295, -190, 65, -161,
	295, -161, 295, -97, 123, 282, -215, -215, -216, -216,
	123, 353, -215, -226, 26, 26, 354, -161, 354, 358,
	-211, -215, 354, -224, 101, -215, 291, 354, 321, -148,
	-148, -148, 5, 180, 133, 179, -187, 179, -187, -187,
	7, -319, -124, 353, 325, -147, 354, -272, -254, -215,
	-220, -215, -272, -254, -216, -216, -216, -216, -216, -216,
	-216, -216, -216, -216, -216, -216, -216, -216, -216, -216,
	-216, -216, -216, 95, 189, 195, -216, 358, -161, 354,
	-221, -220, -215, -215, -254, 354, 354, 354, -161, -215,
	-215, -215, 354, 7, 276, -143, 139, -206, 353, -125,
	353, 353, -146, 353, -124, -118, 165, -336, -282, -309,
	-163, 190, -175, 64, 354, -207, -165, -156, -238, 354,
	295, 7, 352, 354, 201, -124, 200, 354, -109, -279,
	354, -223, 130, 44, -245, -223, -151, -212, 7, -213,
	-279, 351, -241, -151, 354, -124, -124, -205, 104, -296,
	65, -297, 57, 111, 69, 189, 191, 307, 221, 54,
	89, 230, 354, 354, 358, -131, -168, 57, -131, -215,
	353, -150, -151, 189, 89, 189, 89, 82, 303, -124,
	-124, -132, -124, -124, 354, -132, 354, -124, -286, 292,
	26, 26, -215, -226, 354, -215, -215, 354, -215, 352,
	-215, 5, -215, 354, 354, 354, 354, -320, -124, -215,
	354, 354, 354, -221, 123, 95, 195, 353, -215, 354,
	354, 358, 354, 354, 354, 138, -150, 353, -151, -141,
	30, -150, 199, -119, 164, -336, -282, -116, -199, 353,
	199, -58, -175, 338, -285, 352, 353, -109, -315, 326,
	-215, -161, -315, 354, -242, 7, 354, -205, -124, -279,
	-124, 111, 135, 191, 160, 353, -216, -132, -204, -333,
	68, 279, -244, -109, -279, -109, 354, -161, 354, 354,
	191, 191, -215, -254, -113, -113, 295, 295, 295, 295,
	-218, -130, -124, -215, -215, 354, 354, -148, -314, 212,
	354, -216, 123, 353, -226, 354, -215, 210, 354, -150,
	354, 354, -58, 354, -132, -336, -282, -117, 96, -151,
	65, -171, -101, 353, -96, -95, 5, -316, -317, -124,
	-241, 352, -297, -125, 189, -215, -126, 353, -143, 353,
	-131, -148, 230, -112, 57, -124, -124, 353, 353, 353,
	354, -148, 44, -216, -226, 354, 354, -132, -204, 354,
	-143, -204, 353, -282, -118, 309, 190, 354, -124, 358,
	354, -98, 338, 358, 30, 104, 354, -300, 178, -124,
	-151, -109, 354, -132, -107, 314, -279, -161, -161, -161,
	-321, 225, 249, -161, 354, 353, -143, -204, -143, -150,
	-119, 262, -207, -95, 5, -317, -319, 111, -298, -301,
	-299, 199, 124, 211, 267, 354, 354, -146, -215, 354,
	354, -148, 354, -322, -323, 36, 304, 73, -215, -322,
	-151, -143, 354, -164, -124, -299, 199, -301, 199, 309,
	92, -300, 354, -323, 218, 119, 248, 218, 119, 354,
	-204, -207, -302, 186, 241, 48, 262, -302, -298, 26,
	-114, 48, 241, -143, 20, 191, 89, -323,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 7, 8, 9, 10,
	12, 14, 16, 17, 19, 21, 23, 24, 26, 27,
	29, 31, 33, 35, 37, 39, 40, 42, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 0, 0,
	137, 139, 0, 0, 146, 148, 150, 152, -2, 155,
	157, 0, 0, 0, 168, 170, 172, 174, 176, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 617, -2, 0, 0, 263, 265, 267, 269, 270,
	0, 321, 323, 325, 327, 329, 331, 333, 335, 337,
	339, 341, 343, 345, 347, 349, 350, 352, 354, 0,
	540, 542, 544, -2, 63, 64, 65, 66, 67, 73,
	74, 75, 76, 69, 71, 653, -2, 664, 0, 0,
	-2, 0, -2, -2, -2, 0, 0, 630, 632, 634,
	636, -2, 0, 0, -2, 6, 11, 13, 15, 18,
	20, 22, 25, 28, 30, 32, 34, 36, 38, 41,
	43, 48, 50, 52, 55, 57, 59, 61, 62, 0,
	0, 0, 0, 0, 117, 242, 0, 1215, 1142, 1148,
	1149, 1173, 1174, 1175, 1192, 1193, 1194, 1195, 1196, 1197,
	1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207,
	1208, 1209, 1210, 1211, 1212, 1213, 1214, 1216, 1217, 1218,
	1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228,
	1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238,
	1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248,
	1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
	1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268,
	1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278,
	1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288,
	1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298,
	1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
	1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
	1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
	1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,
	1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
	1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358,
	1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368,
	1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378,
	1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
	1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
	1399, 1400, 1401, 1402, 1403, 138, 140, 141, 0, 0,
	0, 1144, 1215, 147, 149, 151, 153, 0, 159, 0,
	0, 0, 0, 507, 156, 158, 233, 1275, 235, 237,
	0, 0, 0, 0, 162, 163, 164, 165, 166, 167,
	169, 171, 173, 175, 177, 178, 0, 0, 0, 0,
	0, 232, 230, 200, 201, 0, 214, 215, 216, 217,
	218, 220, 221, 204, 205, 206, 208, 210, 212, 0,
	239, 245, 246, 247, 249, 250, 251, 252, 253, 254,
	255, 422, 1187, 1188, 1189, 1190, 1191, 1404, 1405, 1406,
	1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416,
	1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426,
	1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436,
	1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446,
	1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456,
	1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466,
	1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
	1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486,
	1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496,
	1497, 1498, 1499, 0, 0, 428, 228, 226, 0, 119,
	0, 537, 0, 241, 538, 539, 534, 535, 1302, 563,
	258, 0, 260, 360, 361, 362, 363, 364, 0, 264,
	266, 268, -2, -2, 1390, -2, 276, -2, 286, 1396,
	0, 289, 290, 295, -2, 196, 322, 324, 326, 328,
	330, 332, 334, 336, 338, 340, 342, 344, 346, 348,
	351, 353, 355, 356, 357, 0, 0, 0, 361, 0,
	-2, -2, 0, 0, 0, 0, 0, -2, 0, -2,
	0, 0, -2, -2, 0, 0, -2, 0, 0, 541,
	543, 545, 0, 497, 655, -2, 628, 629, -2, 0,
	659, 659, 659, 0, 0, 629, 627, 0, 261, 262,
	298, 299, 300, 309, 310, 311, 312, 493, 0, 495,
	319, 320, 1169, 0, 1183, 1184, 1185, 1186, 565, 547,
	556, 565, 549, 550, 551, 552, 553, 554, 555, 558,
	0, 645, 1281, 648, 1155, 646, 631, 633, 0, 635,
	0, 0, 639, 661, 660, 692, 693, 0, 643, 644,
	654, 708, 746, 723, 714, 0, 0, 2, 68, 0,
	1372, 746, 70, 0, 1372, 746, 72, 0, 77, 0,
	1372, 1147, 0, 0, 243, 244, 1152, 1150, 1151, 0,
	142, 143, 854, 0, 0, 0, 0, 0, 0, 946,
	948, 1364, 1390, 0, 950, 951, 0, 953, 955, 956,
	0, 959, 960, 1112, 1144, 1158, 1159, 1160, 1161, 0,
	0, 1164, 0, 1166, 1167, 1168, 1012, 970, -2, -2,
	1156, 782, 783, 784, 785, -2, 1404, 974, 977, 980,
	983, 984, 985, 986, 0, 1348, 1365, 1366, 1386, 1387,
	1395, 1399, 1400, 1372, 1383, 1373, 1360, 1370, 1381, 1221,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1182, 816, 817, 822, 823,
	825, 144, 145, 0, 0, 1145, 1121, 1119, 1120, 154,
	476, 1372, -2, 499, 476, 503, -2, 652, 1372, 577,
	234, 236, 0, 161, 0, 590, 0, 592, 0, 607,
	752, 109, 1372, 181, 194, 109, 1372, 184, 109, 1372,
	187, 1140, 188, 1372, 190, 191, 1372, 193, 229, 0,
	0, -2, 222, 224, -2, 219, 207, 209, 211, 213,
	0, 0, 0, 427, 0, 0, 0, 536, 0, 562,
	259, 365, 366, 271, 0, 273, 0, 275, 1359, -2,
	278, 279, 566, 568, 569, 570, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 293, 197, 0, 358, 359,
	367, 368, 121, 122, 0, 371, 392, 404, 0, 0,
	375, 377, 426, 379, 0, 0, 381, 0, 383, 0,
	385, 0, 387, 0, 389, 391, 393, 405, 395, 654,
	397, 0, 399, 403, 0, 408, 0, 410, 411, 412,
	0, 0, 418, 0, 0, 109, 750, -2, 0, 623,
	673, 674, 0, 0, 0, 0, 657, 658, 0, 0,
	0, 619, 620, 494, 1171, 1170, 546, 564, 548, 0,
	560, 0, 647, 0, 0, 694, 697, 1132, 1136, 1137,
	697, 0, 1129, 1127, 1128, 0, 0, 0, 0, 743,
	743, 743, 741, 717, 0, 723, 0, 0, 747, 735,
	0, -2, 714, 0, 0, 748, 0, 78, 531, 88,
	0, 531, 531, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 737, 1143, 0,
	1117, 1118, 0, 0, 0, 0, 1047, 1048, 1049, 1050,
	1051, 1052, 1055, 1056, 1053, 1054, 1057, 1058, 1059, 0,
	0, 0, 1060, 1061, 1062, 0, 0, 1064, 0, 1066,
	0, 0, 0, 0, 0, 0, 1126, 0, 0, 1063,
	859, 860, 861, 883, 884, 0, 947, 1123, 1116, 949,
	0, 0, -2, 1068, 0, 0, 952, 957, 958, 0,
	0, 1111, -2, 0, 1163, 0, 851, 1014, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1091, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 801, 819,
	830, 827, 826, 803, 0, 802, 800, 0, 804, 0,
	0, 0, 134, 0, 0, 1138, 1122, 434, 0, 0,
	498, 0, 651, 0, 0, 0, 1372, 506, 1176, 579,
	0, 756, 0, 593, 0, 0, 753, 0, 179, 0,
	107, 108, 0, 182, 0, 185, 0, 0, 0, 0,
	0, 1068, 654, 0, 0, 248, 0, 654, 0, 1070,
	764, 765, 766, 767, 768, 851, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 813, 0,
	788, 788, 788, 805, 806, 814, 815, 820, 821, 832,
	833, 835, 837, 831, 831, 831, 828, 829, 737, 123,
	0, 272, 0, 0, 0, 280, 281, 0, 0, 571,
	306, 307, 308, 573, 574, 287, 313, 314, 315, 316,
	317, 318, 0, 282, 284, 296, 283, 285, 288, 0,
	198, 369, 370, 372, 373, 374, 378, 0, 423, 380,
	382, 384, 386, 388, 396, 400, 654, 406, 409, 413,
	414, 415, 416, 0, 0, 0, 496, 0, 626, 671,
	672, 675, 679, 680, 683, 686, 687, 677, 854, 640,
	641, 642, 665, 666, 518, 0, 0, 559, 649, 0,
	0, 756, 0, 0, 0, 1135, 756, 0, 1131, 0,
	0, 0, 0, 0, 738, 742, 739, 740, 0, 0,
	723, 735, 705, 0, 0, 0, 712, 713, 734, 0,
	733, 722, -2, 0, 0, 0, 0, 0, 530, 90,
	1372, 0, 111, 0, 0, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 83, 0, 0, 0, 1146, 126, 0,
	1153, 855, 760, 761, 807, 808, 809, 810, 811, 856,
	857, 0, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, -2, -2, -2, 875, 876, 877, -2, -2,
	-2, 881, 882, -2, 1065, 1067, 0, 1126, 0, -2,
	0, -2, -2, -2, -2, 895, 0, 897, 900, 902,
	904, 0, 0, 0, 0, 1125, 914, 1103, 0, 0,
	1044, 1045, 1046, 899, 0, 0, 1124, 1115, 0, 0,
	-2, 954, 0, 0, 0, 1074, 1075, 1110, 1106, 0,
	961, 664, 0, 0, 0, 0, 968, 0, 1172, 838,
	839, 840, 841, 842, 843, 852, 1022, 0, 0, 0,
	975, 976, 978, 979, 981, 982, 0, 0, 0, 990,
	0, 1078, -2, -2, -2, -2, -2, -2, -2, 0,
	992, 0, 994, 1068, 1088, 0, 0, 917, 0, 0,
	0, 0, 1390, 0, 997, 1068, 1096, 0, 0, 0,
	0, 0, 1068, 0, 1102, 0, 0, 0, 0, 0,
	1008, 0, 1010, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 433, 1152, 435, 437, 438, 439,
	440, 1177, 0, 1177, 0, 0, 0, 0, 0, 0,
	581, 587, 0, 605, 0, 605, 595, 0, 0, 0,
	605, 609, 610, 612, 613, 0, 0, 754, 195, 109,
	109, 1141, 109, 189, 192, 231, 0, 202, 223, 0,
	0, 225, 227, 0, 757, 759, 0, 769, 0, 133,
	0, 0, 274, 0, 567, 572, 0, 303, 0, 305,
	0, 199, 425, 256, 398, 401, 419, 420, 737, 751,
	0, 681, 0, 0, 678, 684, 685, 0, 668, 516,
	517, 0, 0, 654, 1154, 689, 1133, 737, 696, 698,
	1134, 689, 1130, 725, 0, 727, 0, 0, 0, 729,
	0, 718, 0, 720, 735, 710, 0, 0, 703, 0,
	702, 723, 731, 0, 0, 749, 89, 520, 0, 0,
	0, 92, 1372, 100, 0, 448, 0, 0, 0, 0,
	0, 533, 101, 1372, 109, 1372, 109, 102, 79, 531,
	80, 0, 526, 0, 519, 81, 0, 528, 0, 133,
	0, 0, 0, -2, -2, 0, 0, 0, 915, -2,
	896, 898, 901, 903, 905, 0, 0, 0, 0, 0,
	0, 0, 916, 0, 0, 1113, 1116, -2, 1069, 1072,
	1073, 0, 0, 1107, 0, 0, 0, 0, 663, 664,
	664, 664, 967, 0, 0, 0, 0, 0, 0, 969,
	0, 0, 0, 0, 0, 0, 989, 0, 991, 993,
	0, 0, 995, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 920, 921, 922, 0,
	0, 996, 1094, 1095, 0, 0, 0, 0, 0, 0,
	1002, 0, 1101, 0, 0, 0, 1006, 1007, 1009, 0,
	786, 0, 812, 834, 836, 824, 135, 0, 1139, 442,
	475, 0, 0, 1177, 0, 431, 476, 500, 502, 0,
	0, 583, 587, 0, 586, 652, 160, 0, 755, 588,
	605, 0, 0, 597, 594, 591, 756, 0, 0, 0,
	0, 180, 183, 186, 1069, 238, 0, 1071, 0, 762,
	0, 0, 118, 0, 124, 240, 277, 301, 302, 304,
	297, 0, 421, 0, 0, 667, 518, 0, 0, 691,
	0, 695, 0, 691, 726, 0, 745, 728, 708, 719,
	0, 716, 706, 0, 707, 0, 735, 0, 0, 715,
	0, 0, 0, 0, 110, 446, 465, 0, 0, 509,
	515, 515, 0, 971, 972, 0, 0, 0, 94, 0,
	0, 0, 0, 98, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 858, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 1104, 0, 1039, 0,
	0, 1115, -2, 1076, 1105, 1109, 0, 962, 0, 0,
	0, 0, 1165, 844, 845, 846, 847, 848, 849, 850,
	0, 1020, 1021, 1025, 0, 0, 973, 0, 0, 1077,
	1087, 1089, 918, 919, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, -2, -2, -2, 936, 937, 938,
	-2, -2, -2, 0, 0, 0, 1090, 0, 0, 1042,
	1092, 1093, 1098, 1099, 0, 999, 1000, 1001, 1100, 0,
	0, 0, 818, 0, 136, 429, 0, 436, 0, 0,
	0, 434, 0, 0, 0, 585, 587, 0, 578, 579,
	603, 604, 589, 602, 0, 605, 611, 608, 614, 0,
	0, 0, 763, 770, 0, 257, 676, 682, 669, 518,
	650, 1016, 0, 0, 699, 1016, 0, 723, 721, 704,
	700, 0, 711, 0, 732, 522, 524, 91, 0, 447,
	0, 450, 0, 0, 0, 0, 456, 457, 0, 0,
	0, 0, 467, 474, 0, 518, 1157, 0, 518, 0,
	0, 0, 0, 0, 106, 0, 0, 532, 0, 109,
	109, 521, 0, 0, 0, 527, 0, 529, 125, 0,
	0, 0, -2, 0, 908, -2, -2, 1038, 1069, 1114,
	1108, 1162, 664, 963, 965, 966, 853, 1027, 1024, 0,
	1011, 987, 988, 1086, 0, 0, 0, 0, 1069, 1041,
	998, 0, 1004, 1005, 787, 0, 0, 0, 0, 0,
	0, 0, 0, 575, 587, 0, 580, 581, 0, 0,
	0, 596, 606, 0, 120, 758, 0, 670, 637, 0,
	690, 688, 638, 744, 735, 0, 730, 93, 0, 451,
	452, 1177, 0, 455, 458, 0, 460, 1179, 442, 0,
	471, 472, 510, 511, 514, 512, 515, 664, 469, 0,
	95, 96, 105, 113, 97, 103, 0, 0, 0, 0,
	736, 0, 0, -2, -2, 909, 1040, 0, 664, 0,
	1013, -2, 0, 0, 0, 1043, 0, 0, 474, 0,
	464, 442, 432, 474, 0, 0, 582, 583, 0, 0,
	0, 615, 616, 0, 0, 130, 128, 1015, 1017, 0,
	709, 701, 449, 453, 0, 0, 480, 0, 468, 0,
	518, 0, 0, 115, 0, 523, 525, 0, 0, 0,
	964, 1030, 0, -2, 0, 944, 1003, 0, 442, 474,
	430, 442, 0, 584, 585, 0, 599, 756, 601, 0,
	132, 129, 0, 0, 0, 0, 459, 485, 0, 0,
	0, 513, 962, 476, 99, 0, 112, 0, 0, 664,
	0, 0, 0, 1026, 945, 0, 462, 442, 504, 0,
	576, 0, 600, 131, 127, 1018, 1019, 0, 461, 481,
	482, 0, 477, 478, 479, 1178, 473, 480, 114, 85,
	87, 0, 1023, 1028, 1031, -2, 1332, 1211, 0, 1029,
	0, 463, 474, 756, 454, 483, 0, 484, 0, 0,
	0, 485, 0, 0, 1033, 1034, 1035, 1036, 1037, 445,
	442, 598, 486, 0, 489, 490, 0, 487, 470, 0,
	441, 443, 444, 505, 488, 491, 492, 1032,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 342, 3, 348, 343, 3,
	353, 354, 346, 344, 358, 345, 355, 347, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 362, 357,
	336, 338, 337, 3, 359, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 351, 3, 352, 349, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 360, 341, 361, 339,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 340, 57679, 350,
	57680, 356, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:862
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:868
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:874
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 6:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:884
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:889
		{
			return helpWith(sqllex, "DELETE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 18:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:903
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:905
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:908
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:909
		{
			return helpWith(sqllex, "RESET")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:913
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:915
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "ALTER")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:965
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:976
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:987
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1007
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1021
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1027
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1033
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1039
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1045
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1049
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1055
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1059
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 90:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1105
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1108
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1128
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1171
		{
			sqlVAL.union.val = nil
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = DropCascade
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = DropRestrict
		}
	case 109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = DropDefault
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1200
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1201
		{
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1204
		{
			return unimplemented(sqllex, "alter using")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1205
		{
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1232
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1258
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1263
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Load{Table: sqlDollar[4].union.expr(), From: sqlDollar[6].union.exprs(), To: sqlDollar[8].union.expr()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.str = ""
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 132:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1328
		{
		}
	case 134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1348
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1349
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1350
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1358
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1361
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1369
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1372
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1380
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1381
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1382
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1385
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1386
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1387
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1388
		{
			return helpWith(sqllex, "CREATE")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1399
		{
			return helpWith(sqllex, "DELETE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1409
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1410
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1411
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1412
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1413
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1419
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1422
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1423
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			return helpWith(sqllex, "DROP")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1454
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1477
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1492
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1507
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1558
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1567
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1575
		{
			return helpWith(sqllex, "DELETE")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1576
		{
			return helpWith(sqllex, "INSERT")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1577
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1585
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1586
		{ /* SKIP DOC */
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1615
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1639
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1674
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1694
		{
			return helpWith(sqllex, "GRANT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1736
		{
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1755
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1763
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1775
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1804
		{
			return helpWith(sqllex, "RESET")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1809
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1812
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1816
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1817
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1818
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{ /* SKIP DOC */
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1820
		{ /* SKIP DOC */
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1821
		{
			return unimplemented(sqllex, "set local")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1834
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1884
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1889
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1914
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1917
		{
			return unimplemented(sqllex, "set from current")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1919
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1925
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1929
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1935
		{
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1937
		{
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1948
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1978
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = Low
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.union.val = Normal
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = High
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2056
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2057
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2058
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2059
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2060
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2061
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2062
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2063
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2064
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2065
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2066
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2067
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2068
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2069
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2071
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2072
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2073
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2074
		{
			return helpWith(sqllex, "SHOW")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2083
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.str = "client_encoding"
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2098
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2126
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2131
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2142
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2153
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2164
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2175
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2185
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2196
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2201
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2212
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2228
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2231
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2244
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2249
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2267
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2290
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2298
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2302
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2306
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2309
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2320
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2328
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2331
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2342
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2346
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2350
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2354
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2366
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 424:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2391
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2394
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2486
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2493
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2497
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = DropDefault
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2507
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2522
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2532
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2712
		{
			return unimplemented(sqllex, "match full")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2713
		{
			return unimplemented(sqllex, "match partial")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2714
		{
			return unimplemented(sqllex, "match simple")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2715
		{
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2721
		{
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2722
		{
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2723
		{
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2724
		{
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2725
		{
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2728
		{
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2731
		{
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2734
		{
			return unimplemented(sqllex, "no action")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2737
		{
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2738
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2739
		{
			return unimplemented(sqllex, "action set null")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2740
		{
			return unimplemented(sqllex, "action set default")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2765
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2776
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2780
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 501:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 502:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2801
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2841
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = true
		}
	case 508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = false
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2871
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2872
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2875
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2876
		{
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = Ascending
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = Descending
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 519:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2916
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2918
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = true
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = false
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2951
		{
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2952
		{
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2963
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2971
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2974
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2985
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2989
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2990
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2991
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3009
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3014
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3027
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3029
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3032
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3040
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3047
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3050
		{
		}
	case 557:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3051
		{
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.str = ""
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 561:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.str = ""
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3097
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = ReadOnly
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = ReadWrite
		}
	case 575:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3167
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.str = ""
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 581:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.str = ""
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.str = ""
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.str = ""
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3210
		{
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3211
		{
		}
	case 588:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			return helpWith(sqllex, "INSERT")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3252
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3294
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3298
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3306
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 606:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3329
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3333
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3334
		{
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3411
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3463
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3498
		{
			return helpWith(sqllex, "SELECT")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3499
		{
			return helpWith(sqllex, "VALUES")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3500
		{
			return helpWith(sqllex, "TABLE")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3546
		{
			return helpWith(sqllex, "SELECT")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3590
		{
			return helpWith(sqllex, "TABLE")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3601
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3602
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3603
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3606
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3607
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3610
		{
			return unimplemented(sqllex, "cte")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3613
		{
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3614
		{
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3617
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3618
		{
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3621
		{
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3622
		{
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = true
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = false
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = false
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = true
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3645
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3646
		{
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3693
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3713
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3765
		{
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3766
		{
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3769
		{
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3770
		{
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3828
		{
			return helpWith(sqllex, "VALUES")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3830
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3845
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = &From{}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3867
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3885
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3912
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3949
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3974
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = nil
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4015
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4021
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = true
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = false
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.str = astFullJoin
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.str = astLeftJoin
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.str = astRightJoin
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.str = astInnerJoin
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4132
		{
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4133
		{
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4219
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4232
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4233
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4249
		{
			return unimplementedWithIssue(sqllex, 17156)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4258
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4321
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4330
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = nil
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4379
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4383
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4395
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4491
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 824:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4523
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4549
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4553
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4562
		{
		}
	case 831:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4563
		{
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4572
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4580
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4584
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = year
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4599
		{
			sqlVAL.union.val = month
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = day
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = hour
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = minute
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = month
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4625
		{
			sqlVAL.union.val = hour
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = minute
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4633
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.union.val = minute
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = nil
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4655
		{
			sqlVAL.union.val = second
		}
	case 853:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4658
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4693
		{
			return unimplemented(sqllex, "at tz")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4706
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4758
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4822
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4826
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4830
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4834
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4861
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4927
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4963
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4991
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4995
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4999
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5003
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5007
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5100
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5113
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5117
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5153
		{
			return unimplemented(sqllex, "variadic")
		}
	case 964:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5154
		{
			return unimplemented(sqllex, "variadic")
		}
	case 965:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5156
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5160
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5167
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 969:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5178
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5194
		{
			return unimplemented(sqllex, "func_application")
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5195
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 973:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5199
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5208
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5210
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5214
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5217
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5226
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5227
		{
			return unimplemented(sqllex, "current role")
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5228
		{
			return unimplemented(sqllex, "current user")
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5229
		{
			return unimplemented(sqllex, "session user")
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5230
		{
			return unimplemented(sqllex, "user")
		}
	case 987:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5232
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5236
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5240
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5243
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 991:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5245
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5248
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 993:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5253
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 995:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5255
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5262
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 998:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5263
		{
			return unimplemented(sqllex, "treat")
		}
	case 999:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5265
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5273
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5289
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5293
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5300
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5302
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5305
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5309
		{
			return unimplemented(sqllex, "within group")
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5310
		{
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5318
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5335
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5339
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5345
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5353
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5357
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5361
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5368
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5387
		{
			sqlVAL.str = ""
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5393
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5397
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5407
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5408
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5409
		{
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5412
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5413
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5419
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5420
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5421
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5422
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5423
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5434
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5438
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5442
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5458
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = Any
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = Some
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5472
		{
			sqlVAL.union.val = All
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5477
		{
			sqlVAL.union.val = Plus
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = Minus
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5479
		{
			sqlVAL.union.val = Mult
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5480
		{
			sqlVAL.union.val = Div
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5481
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5482
		{
			sqlVAL.union.val = Mod
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5483
		{
			sqlVAL.union.val = Bitand
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5484
		{
			sqlVAL.union.val = Bitor
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5485
		{
			sqlVAL.union.val = Pow
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5486
		{
			sqlVAL.union.val = Bitxor
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5487
		{
			sqlVAL.union.val = LT
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5488
		{
			sqlVAL.union.val = GT
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5489
		{
			sqlVAL.union.val = EQ
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5490
		{
			sqlVAL.union.val = LE
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5491
		{
			sqlVAL.union.val = GE
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5492
		{
			sqlVAL.union.val = NE
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5496
		{
			sqlVAL.union.val = Like
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5497
		{
			sqlVAL.union.val = NotLike
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5498
		{
			sqlVAL.union.val = ILike
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5499
		{
			sqlVAL.union.val = NotILike
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5510
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5514
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5520
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5524
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5530
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5544
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5548
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5554
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5558
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5580
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5584
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5588
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5594
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5601
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5605
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5622
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5626
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5630
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5634
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5638
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5642
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5648
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5654
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5660
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5664
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5668
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5689
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5696
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5700
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5706
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5712
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5716
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5729
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5733
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5740
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5746
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5752
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5758
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5762
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5768
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5772
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5782
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5787
		{
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5788
		{
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5797
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5803
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5807
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5816
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5822
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5826
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5832
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5841
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5845
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5849
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5857
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5861
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5867
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5871
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5877
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5881
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5892
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5896
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5902
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5906
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5919
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5923
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5927
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5931
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5937
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5941
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5947
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5950
		{
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5960
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5964
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5971
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5975
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5979
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5983
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5986
		{
			return unimplemented(sqllex, "func const")
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5988
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5995
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6001
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6005
		{
			sqlVAL.union.val = DNull
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6012
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6016
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6022
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6057
		{
			sqlVAL.str = ""
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6063
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6067
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
