// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:45

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:303
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const EXTRACT_DURATION = 57444
const FALSE = 57445
const FAMILY = 57446
const FETCH = 57447
const FILTER = 57448
const FIRST = 57449
const FLOAT = 57450
const FLOORDIV = 57451
const FOLLOWING = 57452
const FOR = 57453
const FORCE_INDEX = 57454
const FOREIGN = 57455
const FROM = 57456
const FULL = 57457
const GRANT = 57458
const GRANTS = 57459
const GREATEST = 57460
const GROUP = 57461
const GROUPING = 57462
const HAVING = 57463
const HELP = 57464
const HIGH = 57465
const HOUR = 57466
const IF = 57467
const IFNULL = 57468
const ILIKE = 57469
const IN = 57470
const INTERLEAVE = 57471
const INDEX = 57472
const INDEXES = 57473
const INITIALLY = 57474
const INNER = 57475
const INSERT = 57476
const INT = 57477
const INT8 = 57478
const INT64 = 57479
const INTEGER = 57480
const INTERSECT = 57481
const INTERVAL = 57482
const INTO = 57483
const IS = 57484
const ISOLATION = 57485
const JOIN = 57486
const KEY = 57487
const KEYS = 57488
const LATERAL = 57489
const LEADING = 57490
const LEAST = 57491
const LEFT = 57492
const LEVEL = 57493
const LIKE = 57494
const LIMIT = 57495
const LOCAL = 57496
const LOCALTIME = 57497
const LOCALTIMESTAMP = 57498
const LOW = 57499
const LSHIFT = 57500
const MATCH = 57501
const MINUTE = 57502
const MONTH = 57503
const NAME = 57504
const NAMES = 57505
const NATURAL = 57506
const NEXT = 57507
const NO = 57508
const NO_INDEX_JOIN = 57509
const NORMAL = 57510
const NOT = 57511
const NOTHING = 57512
const NULL = 57513
const NULLIF = 57514
const NULLS = 57515
const NUMERIC = 57516
const OF = 57517
const OFF = 57518
const OFFSET = 57519
const ON = 57520
const ONLY = 57521
const OR = 57522
const ORDER = 57523
const ORDINALITY = 57524
const OUT = 57525
const OUTER = 57526
const OVER = 57527
const OVERLAPS = 57528
const OVERLAY = 57529
const PARENT = 57530
const PARTIAL = 57531
const PARTITION = 57532
const PLACING = 57533
const POSITION = 57534
const PRECEDING = 57535
const PRECISION = 57536
const PREPARE = 57537
const PRIMARY = 57538
const PRIORITY = 57539
const RANGE = 57540
const READ = 57541
const REAL = 57542
const RECURSIVE = 57543
const REF = 57544
const REFERENCES = 57545
const RENAME = 57546
const REPEATABLE = 57547
const RELEASE = 57548
const RESTRICT = 57549
const RETURNING = 57550
const REVOKE = 57551
const RIGHT = 57552
const ROLLBACK = 57553
const ROLLUP = 57554
const ROW = 57555
const ROWS = 57556
const RSHIFT = 57557
const SAVEPOINT = 57558
const SEARCH = 57559
const SECOND = 57560
const SELECT = 57561
const SERIAL = 57562
const SERIALIZABLE = 57563
const SESSION = 57564
const SESSION_USER = 57565
const SET = 57566
const SHOW = 57567
const SIMILAR = 57568
const SIMPLE = 57569
const SMALLINT = 57570
const SMALLSERIAL = 57571
const SNAPSHOT = 57572
const SOME = 57573
const SPLIT = 57574
const SQL = 57575
const START = 57576
const STDIN = 57577
const STRICT = 57578
const STRING = 57579
const STORING = 57580
const SUBSTRING = 57581
const SYMMETRIC = 57582
const SYSTEM = 57583
const TABLE = 57584
const TABLES = 57585
const TEXT = 57586
const THEN = 57587
const TIME = 57588
const TIMESTAMP = 57589
const TIMESTAMPTZ = 57590
const TO = 57591
const TRAILING = 57592
const TRANSACTION = 57593
const TREAT = 57594
const TRIM = 57595
const TRUE = 57596
const TRUNCATE = 57597
const TYPE = 57598
const UNBOUNDED = 57599
const UNCOMMITTED = 57600
const UNION = 57601
const UNIQUE = 57602
const UNKNOWN = 57603
const UPDATE = 57604
const UPSERT = 57605
const USER = 57606
const USING = 57607
const VALID = 57608
const VALIDATE = 57609
const VALUE = 57610
const VALUES = 57611
const VARCHAR = 57612
const VARIADIC = 57613
const VIEW = 57614
const VARYING = 57615
const WHEN = 57616
const WHERE = 57617
const WINDOW = 57618
const WITH = 57619
const WITHIN = 57620
const WITHOUT = 57621
const YEAR = 57622
const ZONE = 57623
const NOT_LA = 57624
const WITH_LA = 57625
const AS_LA = 57626
const POSTFIXOP = 57627
const UMINUS = 57628

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4862

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	305, 27,
	-2, 380,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	1, 355,
	178, 355,
	208, 355,
	303, 355,
	305, 355,
	-2, 365,
	-1, 58,
	1, 358,
	178, 358,
	208, 358,
	303, 358,
	305, 358,
	-2, 364,
	-1, 67,
	1, 27,
	305, 27,
	-2, 380,
	-1, 391,
	1, 176,
	305, 176,
	-2, 882,
	-1, 425,
	153, 390,
	177, 390,
	-2, 361,
	-1, 428,
	153, 389,
	177, 389,
	-2, 359,
	-1, 551,
	153, 389,
	177, 389,
	-2, 362,
	-1, 607,
	302, 820,
	-2, 813,
	-1, 608,
	302, 821,
	-2, 814,
	-1, 614,
	5, 525,
	302, 525,
	-2, 973,
	-1, 638,
	5, 491,
	-2, 947,
	-1, 639,
	5, 519,
	302, 519,
	-2, 949,
	-1, 640,
	5, 499,
	-2, 950,
	-1, 641,
	5, 498,
	-2, 951,
	-1, 642,
	5, 519,
	302, 519,
	-2, 954,
	-1, 643,
	5, 519,
	302, 519,
	-2, 955,
	-1, 644,
	5, 520,
	-2, 958,
	-1, 645,
	5, 485,
	-2, 959,
	-1, 646,
	5, 485,
	-2, 960,
	-1, 647,
	5, 501,
	-2, 964,
	-1, 648,
	5, 486,
	-2, 969,
	-1, 649,
	5, 487,
	-2, 970,
	-1, 650,
	5, 488,
	-2, 971,
	-1, 651,
	5, 489,
	-2, 972,
	-1, 652,
	5, 485,
	-2, 976,
	-1, 653,
	5, 492,
	-2, 981,
	-1, 654,
	5, 490,
	-2, 984,
	-1, 655,
	5, 517,
	302, 517,
	-2, 986,
	-1, 656,
	5, 521,
	-2, 989,
	-1, 657,
	5, 523,
	-2, 990,
	-1, 658,
	5, 516,
	302, 516,
	-2, 994,
	-1, 907,
	97, 365,
	139, 365,
	153, 365,
	177, 365,
	181, 365,
	259, 365,
	-2, 637,
	-1, 915,
	302, 798,
	-2, 787,
	-1, 1117,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 560,
	-1, 1118,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 561,
	-1, 1119,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 562,
	-1, 1123,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 566,
	-1, 1124,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 567,
	-1, 1125,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 568,
	-1, 1128,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 573,
	-1, 1134,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 575,
	-1, 1137,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 580,
	-1, 1138,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 581,
	-1, 1139,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 582,
	-1, 1164,
	186, 709,
	-2, 712,
	-1, 1187,
	114, 725,
	302, 820,
	-2, 813,
	-1, 1188,
	114, 726,
	-2, 943,
	-1, 1189,
	114, 727,
	-2, 880,
	-1, 1190,
	114, 728,
	-2, 853,
	-1, 1191,
	114, 729,
	-2, 868,
	-1, 1192,
	114, 730,
	-2, 879,
	-1, 1193,
	114, 731,
	-2, 913,
	-1, 1341,
	97, 365,
	139, 365,
	153, 365,
	177, 365,
	181, 365,
	259, 365,
	-2, 438,
	-1, 1345,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 574,
	-1, 1346,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 576,
	-1, 1351,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 577,
	-1, 1369,
	186, 708,
	-2, 711,
	-1, 1534,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 578,
	-1, 1539,
	142, 0,
	-2, 592,
	-1, 1547,
	186, 710,
	-2, 713,
	-1, 1581,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 618,
	-1, 1582,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 619,
	-1, 1583,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 620,
	-1, 1587,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 624,
	-1, 1588,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 625,
	-1, 1589,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 626,
	-1, 1694,
	142, 0,
	-2, 593,
	-1, 1697,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 596,
	-1, 1698,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 598,
	-1, 1785,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 597,
	-1, 1786,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 599,
	-1, 1793,
	142, 0,
	-2, 627,
	-1, 1840,
	142, 0,
	-2, 628,
	-1, 1894,
	35, 0,
	127, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 946,
}

const sqlNprod = 1089
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 25664

var sqlAct = [...]int{

	608, 1893, 1873, 1501, 1917, 1874, 1846, 429, 1003, 1737,
	995, 598, 1875, 1089, 1892, 832, 910, 1659, 1558, 606,
	1760, 262, 1773, 582, 465, 1686, 392, 1618, 1660, 75,
	76, 722, 1680, 1426, 44, 836, 19, 1067, 264, 75,
	75, 75, 1071, 659, 75, 1673, 570, 75, 1372, 1513,
	450, 1338, 1066, 1267, 605, 75, 1425, 1337, 912, 1098,
	839, 1328, 75, 75, 1523, 1070, 75, 674, 265, 75,
	75, 75, 75, 250, 671, 1004, 1035, 1097, 971, 1213,
	1322, 266, 1174, 962, 1150, 1101, 26, 1147, 436, 57,
	464, 1019, 15, 854, 1028, 434, 7, 538, 770, 786,
	1061, 676, 466, 467, 1184, 580, 539, 571, 428, 692,
	767, 943, 947, 480, 477, 997, 486, 797, 479, 1074,
	706, 22, 248, 255, 860, 57, 21, 10, 9, 254,
	8, 6, 554, 256, 4, 439, 555, 379, 389, 553,
	788, 784, 370, 699, 473, 766, 437, 558, 1780, 537,
	382, 1781, 708, 708, 433, 708, 57, 1032, 259, 1099,
	58, 433, 59, 257, 258, 260, 1908, 252, 251, 1093,
	996, 253, 261, 1889, 1881, 1871, 1759, 1093, 1025, 600,
	1000, 1866, 1842, 723, 1093, 1025, 1836, 1336, 456, 1093,
	1216, 1824, 417, 63, 1759, 1814, 863, 864, 1093, 1787,
	1033, 1278, 1025, 1784, 1770, 1767, 1093, 1759, 1093, 441,
	1758, 1742, 1367, 1759, 1093, 56, 65, 1368, 426, 866,
	425, 1741, 1279, 1719, 1093, 447, 1038, 1699, 453, 1696,
	1038, 460, 1025, 862, 686, 1645, 1034, 1031, 1038, 1644,
	865, 35, 1038, 66, 75, 75, 75, 75, 75, 36,
	489, 61, 1630, 1543, 1366, 1093, 1038, 62, 1487, 1038,
	1481, 992, 581, 992, 1443, 1441, 1440, 1444, 1038, 1038,
	1326, 37, 1439, 482, 482, 1038, 60, 1038, 1369, 1038,
	490, 1038, 1307, 1828, 434, 1093, 1371, 1094, 861, 1325,
	1093, 72, 1325, 491, 1036, 871, 1047, 1037, 1024, 1038,
	1038, 1025, 991, 959, 1594, 992, 958, 1396, 1397, 1546,
	1414, 1415, 1416, 709, 709, 63, 709, 716, 1305, 1762,
	717, 960, 1308, 1093, 1040, 1158, 468, 1088, 448, 565,
	469, 455, 458, 1055, 448, 566, 827, 826, 65, 863,
	864, 778, 777, 502, 881, 446, 468, 67, 469, 811,
	469, 522, 63, 1928, 261, 1891, 1030, 1411, 1887, 1880,
	1837, 483, 866, 1768, 1724, 66, 75, 487, 63, 1720,
	1712, 1711, 1710, 61, 48, 65, 1705, 1704, 1029, 62,
	1703, 75, 1657, 865, 75, 75, 1651, 1609, 1604, 1603,
	1602, 65, 1549, 1532, 1512, 1491, 1448, 56, 999, 1310,
	1445, 882, 66, 474, 1433, 1424, 1402, 1395, 1392, 1155,
	918, 1656, 712, 707, 1278, 830, 1391, 75, 66, 75,
	1389, 75, 75, 35, 75, 861, 61, 1377, 1376, 1306,
	1230, 36, 62, 552, 1181, 60, 1489, 1180, 871, 75,
	565, 564, 863, 864, 462, 835, 1865, 545, 547, 1560,
	75, 60, 1856, 37, 1827, 1412, 1806, 1804, 1795, 1777,
	1765, 1756, 1734, 1717, 75, 866, 1689, 1667, 1538, 1531,
	264, 75, 75, 75, 551, 75, 873, 874, 875, 867,
	868, 869, 870, 872, 510, 892, 865, 1509, 1655, 694,
	665, 696, 1507, 511, 75, 75, 1506, 666, 1156, 1504,
	265, 1460, 75, 1459, 75, 1423, 448, 1385, 458, 1384,
	1650, 1363, 1413, 266, 1359, 489, 489, 1152, 1294, 1257,
	1256, 1244, 1243, 264, 75, 1223, 75, 75, 75, 75,
	75, 75, 75, 1179, 505, 507, 75, 75, 1092, 948,
	661, 871, 75, 951, 812, 490, 490, 955, 941, 75,
	63, 863, 864, 265, 542, 940, 48, 939, 491, 491,
	660, 540, 938, 834, 613, 468, 266, 75, 937, 469,
	75, 1244, 936, 65, 866, 935, 863, 864, 544, 561,
	562, 934, 1408, 1409, 1410, 567, 1407, 1404, 1405, 1406,
	1398, 1399, 1400, 1401, 1403, 865, 933, 426, 932, 425,
	66, 711, 1396, 1397, 714, 931, 930, 858, 61, 929,
	915, 1396, 1397, 720, 62, 698, 701, 928, 927, 434,
	865, 926, 867, 868, 869, 870, 872, 925, 892, 916,
	474, 682, 463, 249, 914, 60, 831, 451, 569, 508,
	498, 496, 863, 864, 913, 773, 1288, 1287, 667, 774,
	516, 1782, 1654, 718, 1280, 1083, 953, 801, 808, 1447,
	954, 1446, 813, 1344, 829, 817, 818, 819, 820, 821,
	75, 816, 532, 517, 824, 825, 729, 1674, 75, 828,
	923, 448, 75, 996, 1561, 1175, 75, 75, 844, 764,
	75, 843, 842, 944, 667, 1274, 1380, 807, 1852, 776,
	1032, 1402, 856, 75, 1454, 75, 75, 919, 75, 1813,
	1402, 75, 668, 75, 75, 1905, 75, 1904, 489, 426,
	965, 850, 426, 426, 851, 852, 693, 869, 870, 872,
	1488, 892, 1638, 448, 700, 700, 998, 535, 998, 1013,
	482, 1046, 482, 1033, 240, 423, 1301, 244, 490, 416,
	677, 415, 678, 250, 945, 946, 455, 458, 1020, 949,
	964, 491, 976, 978, 410, 952, 1471, 536, 411, 75,
	75, 1750, 70, 1749, 1475, 909, 1474, 1451, 1450, 1034,
	1031, 1347, 964, 1293, 1292, 514, 1396, 1397, 963, 1291,
	956, 241, 1290, 677, 1135, 678, 1039, 968, 988, 245,
	987, 1812, 984, 255, 985, 57, 972, 1042, 1022, 254,
	57, 541, 264, 256, 1021, 1775, 75, 1002, 1023, 1227,
	574, 679, 1226, 515, 69, 1012, 1011, 1014, 1106, 1015,
	419, 75, 75, 1060, 1017, 487, 75, 1036, 259, 1016,
	892, 981, 265, 257, 258, 260, 494, 252, 251, 989,
	1677, 253, 1149, 1739, 1462, 266, 1356, 1476, 1263, 949,
	690, 952, 432, 75, 679, 892, 75, 975, 683, 1854,
	1354, 1095, 946, 945, 1043, 1044, 1049, 1175, 684, 1041,
	677, 1149, 678, 1877, 1048, 1402, 702, 1400, 1401, 1403,
	1904, 1199, 1105, 1036, 1398, 1399, 1400, 1401, 1403, 1030,
	264, 1914, 1496, 1925, 431, 1268, 683, 1396, 1397, 420,
	1479, 246, 1145, 1868, 1086, 1087, 1276, 368, 1920, 243,
	242, 1153, 708, 1493, 1272, 1064, 1143, 424, 1262, 1869,
	265, 892, 957, 1063, 1412, 694, 68, 1259, 1352, 421,
	694, 247, 1357, 266, 448, 1300, 433, 688, 458, 687,
	974, 679, 448, 1469, 1268, 1807, 1302, 1878, 493, 1494,
	1036, 371, 75, 75, 75, 1007, 71, 1229, 75, 1096,
	458, 75, 1162, 458, 513, 961, 1255, 75, 75, 75,
	75, 75, 376, 942, 1791, 75, 1463, 372, 75, 75,
	1065, 1413, 1141, 75, 1140, 1879, 680, 1757, 1146, 512,
	75, 1051, 75, 906, 533, 1524, 1402, 1053, 433, 75,
	1237, 373, 1154, 1171, 973, 1913, 1383, 1036, 1876, 75,
	1903, 1353, 1901, 1054, 430, 1672, 1740, 557, 1355, 375,
	1081, 525, 1052, 1231, 434, 1194, 503, 752, 1918, 680,
	75, 75, 501, 729, 729, 1517, 75, 1103, 1104, 1254,
	1744, 1270, 1715, 513, 1932, 1412, 489, 751, 534, 1132,
	1349, 728, 1232, 675, 1926, 1407, 1404, 1405, 1406, 1398,
	1399, 1400, 1401, 1403, 1743, 1732, 75, 1142, 75, 1919,
	75, 1634, 75, 709, 1144, 75, 490, 806, 805, 1148,
	799, 794, 556, 448, 75, 1801, 1921, 1590, 1912, 491,
	1453, 75, 1240, 75, 1159, 1163, 1313, 1166, 1687, 1273,
	1236, 1309, 1413, 1311, 374, 1312, 557, 1314, 1281, 1082,
	1186, 1186, 1197, 841, 1208, 448, 680, 1396, 1397, 1020,
	1220, 1221, 1222, 1282, 833, 1283, 1284, 434, 1716, 1297,
	1296, 1931, 1492, 1847, 1299, 663, 1298, 556, 1733, 729,
	823, 1130, 1133, 1241, 1304, 1303, 779, 377, 1246, 1396,
	1397, 783, 1343, 1688, 1245, 1683, 1633, 809, 1637, 1519,
	1518, 512, 593, 472, 1370, 1636, 1129, 1591, 1285, 1022,
	471, 57, 1319, 1592, 1320, 1021, 431, 434, 1342, 1023,
	1398, 1399, 1400, 1401, 1403, 781, 548, 1502, 1658, 1514,
	1730, 73, 863, 864, 1323, 729, 782, 1178, 1794, 1286,
	1428, 362, 363, 364, 1714, 1427, 381, 1537, 1350, 393,
	1348, 1731, 1390, 758, 1233, 866, 1402, 381, 1358, 1177,
	1331, 924, 1264, 1045, 440, 440, 990, 810, 73, 434,
	531, 73, 73, 459, 73, 75, 865, 530, 1334, 729,
	1131, 1261, 529, 1241, 528, 1265, 1379, 527, 1402, 1522,
	1635, 526, 693, 1872, 523, 1332, 470, 815, 1844, 1615,
	1467, 693, 1465, 1452, 1316, 1412, 1084, 371, 1079, 75,
	75, 448, 1458, 1018, 715, 713, 710, 705, 1483, 689,
	1430, 1431, 1432, 685, 681, 1555, 840, 1751, 376, 559,
	1905, 871, 803, 372, 1090, 444, 75, 1412, 519, 75,
	1449, 75, 1753, 964, 964, 1478, 980, 75, 3, 979,
	977, 1456, 1480, 1482, 1762, 1333, 75, 373, 1809, 1508,
	75, 1839, 1413, 1515, 563, 983, 75, 264, 982, 1470,
	75, 1829, 75, 1362, 1315, 375, 1505, 1364, 409, 1670,
	881, 367, 1080, 1254, 1484, 1486, 1078, 1485, 1528, 1374,
	1375, 1091, 1001, 857, 1413, 448, 560, 265, 1495, 1497,
	1498, 1466, 445, 1468, 1503, 775, 800, 795, 849, 1511,
	266, 1551, 1552, 1553, 75, 1516, 452, 520, 721, 1520,
	1027, 1540, 1521, 1527, 378, 1422, 1929, 1525, 1526, 1930,
	412, 413, 1396, 1397, 752, 752, 1435, 882, 1610, 1406,
	1398, 1399, 1400, 1401, 1403, 1499, 73, 475, 73, 393,
	393, 863, 864, 1490, 751, 751, 1442, 1548, 728, 728,
	374, 1057, 1056, 1289, 1562, 1228, 1225, 1224, 1172, 1404,
	1405, 1406, 1398, 1399, 1400, 1401, 1403, 1472, 1473, 1058,
	1567, 75, 75, 75, 1701, 1554, 1317, 1059, 917, 1597,
	75, 75, 418, 1738, 369, 814, 75, 524, 75, 662,
	75, 75, 75, 377, 1867, 75, 75, 1707, 1382, 1772,
	1790, 1176, 922, 1598, 875, 867, 868, 869, 870, 872,
	34, 892, 1662, 586, 1616, 1614, 1455, 1631, 1632, 1611,
	1073, 1072, 267, 804, 610, 793, 609, 75, 75, 787,
	752, 796, 1185, 664, 611, 726, 1666, 612, 1652, 75,
	75, 1666, 727, 75, 1665, 950, 1648, 1671, 599, 1665,
	751, 724, 75, 75, 728, 485, 1324, 1653, 499, 729,
	1005, 1007, 448, 1173, 1668, 1378, 920, 585, 591, 590,
	1160, 495, 1685, 504, 1544, 1335, 393, 393, 47, 1664,
	1669, 75, 509, 387, 1664, 388, 752, 729, 729, 1690,
	1695, 1564, 1565, 1271, 1649, 1085, 729, 729, 1678, 1679,
	1569, 1570, 1684, 845, 1691, 1464, 751, 422, 448, 381,
	728, 73, 448, 393, 393, 1393, 549, 497, 1206, 1198,
	1195, 1713, 543, 670, 1006, 521, 1277, 1026, 568, 729,
	752, 440, 853, 1601, 1595, 443, 75, 442, 75, 1068,
	75, 75, 73, 518, 780, 1605, 1050, 414, 1803, 75,
	751, 1239, 1924, 1808, 728, 1461, 73, 1851, 64, 25,
	23, 20, 754, 73, 73, 73, 1728, 703, 18, 17,
	16, 75, 24, 14, 13, 12, 11, 1725, 1726, 33,
	32, 31, 30, 29, 5, 2, 73, 73, 1, 0,
	0, 0, 0, 75, 771, 75, 771, 0, 1761, 1666,
	0, 0, 0, 1763, 75, 1766, 0, 1665, 1752, 0,
	75, 0, 0, 0, 0, 0, 393, 0, 771, 393,
	393, 393, 393, 393, 822, 1754, 1676, 1769, 393, 393,
	1789, 0, 1776, 0, 381, 0, 0, 0, 729, 0,
	0, 838, 1664, 0, 0, 0, 0, 1783, 0, 0,
	0, 75, 1641, 0, 0, 0, 0, 0, 1647, 440,
	0, 1805, 859, 1779, 0, 0, 0, 0, 0, 1796,
	75, 75, 0, 1200, 75, 1799, 0, 0, 75, 0,
	1747, 1748, 0, 75, 0, 0, 1800, 0, 1817, 0,
	0, 1666, 1825, 0, 1819, 0, 0, 1821, 75, 1665,
	1826, 448, 448, 264, 0, 448, 694, 1831, 1818, 1820,
	0, 434, 0, 0, 0, 0, 0, 0, 1838, 1830,
	0, 0, 0, 0, 1835, 75, 1834, 75, 75, 0,
	75, 0, 0, 265, 1664, 1833, 0, 0, 729, 0,
	0, 1857, 1746, 0, 0, 1855, 266, 1841, 0, 75,
	1861, 1859, 0, 0, 1860, 0, 1853, 0, 0, 1666,
	0, 0, 73, 1858, 1849, 1862, 0, 1665, 1864, 1761,
	969, 1863, 0, 1327, 73, 75, 0, 75, 73, 986,
	0, 0, 73, 1884, 1888, 0, 1882, 0, 0, 0,
	1626, 0, 1886, 75, 0, 73, 0, 1009, 1010, 765,
	73, 1902, 1664, 73, 1898, 393, 393, 1900, 393, 1906,
	0, 1736, 0, 0, 1885, 1907, 1911, 729, 1910, 1909,
	752, 1331, 1627, 863, 864, 0, 0, 0, 0, 1923,
	1922, 0, 0, 1927, 0, 1327, 0, 0, 0, 1334,
	751, 0, 0, 0, 728, 0, 866, 0, 752, 752,
	1329, 1933, 0, 0, 0, 1771, 1332, 752, 752, 0,
	0, 771, 859, 0, 0, 0, 448, 865, 751, 751,
	1330, 0, 728, 728, 0, 0, 1823, 751, 751, 0,
	0, 728, 728, 1331, 0, 0, 753, 0, 1200, 1200,
	752, 0, 0, 0, 0, 729, 0, 0, 0, 0,
	0, 1334, 0, 0, 0, 0, 0, 1622, 1062, 1623,
	751, 0, 1329, 0, 728, 0, 1333, 1626, 1332, 1619,
	0, 725, 871, 73, 1069, 0, 0, 1617, 859, 754,
	754, 1621, 1330, 0, 1625, 0, 0, 0, 0, 0,
	0, 1628, 1200, 1200, 1200, 0, 1682, 0, 0, 1627,
	1870, 0, 0, 0, 0, 73, 0, 0, 393, 1360,
	1361, 0, 0, 0, 0, 0, 0, 0, 0, 1620,
	0, 881, 0, 0, 0, 0, 1890, 0, 1333, 0,
	863, 864, 0, 0, 0, 0, 893, 894, 895, 0,
	1850, 0, 0, 0, 0, 0, 0, 0, 1624, 752,
	0, 0, 0, 866, 0, 897, 0, 0, 0, 0,
	0, 0, 0, 1419, 1420, 1421, 0, 0, 0, 751,
	0, 0, 0, 728, 865, 0, 0, 0, 882, 0,
	880, 0, 0, 1681, 1622, 754, 1623, 1007, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 73, 1234, 1235, 0, 0, 0,
	969, 1625, 0, 1242, 0, 0, 0, 0, 1628, 1247,
	1248, 1250, 1252, 1253, 0, 0, 0, 1258, 0, 871,
	1260, 73, 0, 0, 0, 73, 0, 0, 0, 1200,
	1200, 754, 73, 0, 1275, 0, 0, 890, 898, 752,
	0, 73, 876, 873, 874, 875, 867, 868, 869, 870,
	872, 73, 892, 0, 0, 0, 0, 0, 0, 751,
	0, 0, 888, 728, 0, 1624, 0, 0, 881, 0,
	0, 0, 1062, 771, 0, 754, 0, 0, 1062, 1200,
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 0, 1200,
	1535, 1536, 0, 0, 0, 0, 0, 0, 838, 0,
	838, 0, 393, 0, 73, 0, 0, 1318, 752, 0,
	0, 0, 0, 0, 0, 882, 1321, 0, 0, 0,
	0, 0, 0, 1340, 0, 73, 891, 0, 751, 0,
	0, 0, 728, 0, 0, 1396, 1397, 0, 0, 0,
	1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580,
	1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 0,
	1593, 0, 1396, 1397, 0, 1414, 1415, 1416, 0, 0,
	0, 0, 572, 572, 0, 0, 0, 0, 1693, 0,
	0, 672, 889, 753, 753, 1411, 752, 0, 0, 876,
	873, 874, 875, 867, 868, 869, 870, 872, 695, 892,
	0, 0, 0, 0, 587, 45, 751, 0, 0, 0,
	728, 0, 1411, 0, 0, 0, 0, 0, 725, 725,
	0, 0, 0, 0, 863, 864, 0, 883, 884, 885,
	893, 894, 895, 0, 1402, 0, 0, 0, 0, 0,
	886, 45, 0, 0, 0, 0, 0, 866, 0, 897,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1402, 427, 0, 0, 435, 0, 859, 865, 0,
	0, 0, 45, 0, 880, 0, 0, 0, 0, 0,
	0, 0, 0, 1412, 0, 0, 846, 848, 0, 753,
	0, 0, 0, 855, 1417, 0, 0, 0, 1200, 0,
	0, 73, 73, 0, 0, 901, 902, 903, 904, 905,
	1412, 0, 0, 0, 908, 0, 0, 0, 0, 0,
	0, 0, 0, 871, 725, 0, 0, 0, 1500, 0,
	0, 969, 0, 838, 921, 0, 0, 0, 0, 1510,
	1413, 890, 898, 0, 0, 753, 0, 0, 73, 0,
	0, 0, 73, 0, 0, 754, 896, 0, 1340, 0,
	0, 0, 1530, 0, 1340, 0, 888, 1413, 0, 1735,
	0, 0, 881, 0, 0, 0, 0, 0, 0, 0,
	725, 0, 0, 754, 754, 1200, 0, 0, 0, 753,
	0, 0, 754, 754, 887, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1559, 0, 0, 0,
	0, 0, 0, 0, 1407, 1404, 1405, 1406, 1398, 1399,
	1400, 1401, 1403, 0, 725, 754, 0, 0, 0, 882,
	0, 0, 0, 0, 0, 0, 0, 1408, 1409, 1410,
	891, 1407, 1404, 1405, 1406, 1398, 1399, 1400, 1401, 1403,
	0, 0, 0, 0, 435, 0, 1793, 0, 0, 0,
	0, 0, 0, 0, 0, 1200, 0, 0, 0, 0,
	0, 0, 0, 1612, 1613, 969, 0, 0, 0, 0,
	0, 0, 859, 859, 0, 0, 0, 0, 1639, 0,
	1640, 0, 73, 1642, 1643, 0, 889, 1646, 73, 877,
	878, 879, 0, 876, 873, 874, 875, 867, 868, 869,
	870, 872, 0, 892, 0, 993, 0, 0, 0, 0,
	0, 0, 0, 0, 994, 0, 0, 1661, 0, 859,
	1069, 0, 1661, 0, 754, 0, 1840, 0, 0, 0,
	0, 73, 73, 0, 0, 73, 0, 0, 0, 0,
	863, 864, 0, 0, 859, 1340, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 866, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1708, 0, 0, 0, 0, 0, 0,
	0, 572, 0, 0, 865, 0, 0, 1107, 1108, 1109,
	1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
	1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 0,
	1134, 0, 1136, 1137, 1138, 1139, 0, 0, 0, 0,
	0, 0, 0, 0, 754, 0, 0, 0, 969, 0,
	1727, 427, 393, 1729, 0, 0, 0, 0, 0, 871,
	0, 73, 0, 0, 0, 0, 0, 1182, 1183, 0,
	0, 1196, 0, 1207, 1209, 1214, 1217, 1218, 1219, 0,
	0, 0, 0, 859, 0, 0, 0, 0, 0, 753,
	0, 0, 0, 0, 0, 0, 0, 0, 672, 0,
	1661, 0, 0, 0, 0, 73, 0, 1774, 881, 0,
	0, 0, 0, 0, 0, 0, 73, 753, 753, 0,
	0, 0, 859, 754, 725, 0, 753, 753, 0, 0,
	0, 0, 0, 0, 1266, 0, 1269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 725, 725, 0, 0, 0, 0, 0, 753,
	0, 725, 725, 838, 0, 882, 0, 0, 0, 0,
	0, 0, 0, 427, 0, 0, 427, 427, 1295, 0,
	0, 0, 1810, 1811, 0, 0, 1815, 0, 0, 0,
	1816, 0, 1661, 0, 725, 393, 0, 0, 0, 907,
	0, 754, 0, 911, 0, 0, 0, 0, 1832, 0,
	859, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 855, 0,
	0, 0, 0, 0, 0, 0, 0, 1848, 0, 859,
	73, 0, 393, 867, 868, 869, 870, 872, 0, 892,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1661, 1774, 0, 0, 0, 0, 0, 0, 753, 1345,
	1346, 0, 0, 0, 0, 1351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 73, 0, 859,
	0, 0, 0, 0, 0, 0, 0, 0, 1365, 0,
	0, 0, 0, 725, 0, 1899, 0, 1373, 0, 0,
	0, 0, 0, 0, 45, 1381, 45, 0, 0, 1386,
	0, 0, 863, 864, 0, 883, 884, 885, 893, 894,
	895, 45, 0, 0, 0, 0, 45, 0, 886, 0,
	0, 0, 0, 0, 908, 866, 0, 897, 0, 0,
	1214, 1214, 1214, 0, 863, 864, 0, 883, 884, 885,
	893, 894, 895, 0, 0, 0, 865, 0, 753, 0,
	886, 0, 880, 0, 0, 0, 0, 866, 0, 897,
	0, 0, 0, 1457, 1396, 1397, 0, 1414, 1415, 1416,
	0, 0, 0, 0, 0, 0, 0, 0, 865, 0,
	1692, 0, 0, 725, 880, 0, 0, 0, 572, 0,
	0, 0, 0, 0, 0, 0, 572, 0, 0, 0,
	672, 871, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1411, 0, 0, 0, 0, 890,
	898, 0, 0, 0, 863, 864, 0, 753, 0, 0,
	0, 0, 0, 871, 896, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 888, 0, 0, 866, 0, 0,
	881, 890, 898, 0, 0, 0, 0, 1100, 0, 0,
	0, 0, 725, 1402, 1533, 0, 896, 1534, 865, 0,
	0, 0, 887, 0, 880, 0, 888, 0, 1539, 0,
	0, 0, 881, 0, 0, 0, 0, 0, 0, 0,
	0, 1295, 0, 1151, 0, 0, 1417, 0, 0, 0,
	1556, 0, 0, 0, 887, 753, 0, 882, 0, 0,
	1566, 0, 1412, 0, 1568, 0, 0, 0, 891, 0,
	0, 0, 0, 871, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 882,
	725, 0, 0, 0, 0, 0, 0, 1599, 1600, 0,
	891, 0, 0, 0, 0, 0, 1606, 1607, 1608, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1413,
	0, 0, 881, 0, 889, 0, 0, 877, 878, 879,
	0, 876, 873, 874, 875, 867, 868, 869, 870, 872,
	0, 892, 0, 0, 435, 0, 0, 0, 1721, 572,
	0, 0, 0, 0, 0, 0, 889, 0, 0, 877,
	878, 879, 0, 876, 873, 874, 875, 867, 868, 869,
	870, 872, 0, 892, 0, 0, 0, 0, 0, 882,
	1438, 0, 0, 0, 1675, 0, 0, 0, 0, 1408,
	1409, 1410, 0, 1407, 1404, 1405, 1406, 1398, 1399, 1400,
	1401, 1403, 0, 0, 0, 0, 0, 1694, 0, 0,
	0, 1697, 1698, 0, 0, 0, 1700, 0, 0, 0,
	1702, 0, 0, 45, 0, 45, 0, 1706, 0, 0,
	0, 1709, 0, 0, 0, 0, 0, 45, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1341, 0, 0,
	0, 0, 0, 876, 873, 874, 875, 867, 868, 869,
	870, 872, 0, 892, 1718, 0, 0, 1396, 1397, 0,
	1414, 1415, 1416, 0, 0, 0, 0, 0, 1151, 0,
	0, 0, 0, 1542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 863, 864, 907, 883, 884,
	885, 893, 894, 895, 0, 0, 1745, 0, 0, 0,
	0, 886, 0, 0, 0, 0, 0, 1411, 866, 0,
	897, 863, 864, 0, 883, 884, 885, 893, 894, 895,
	0, 0, 0, 1764, 0, 0, 0, 886, 0, 865,
	0, 0, 0, 0, 866, 880, 897, 0, 0, 907,
	0, 0, 1778, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1785, 1786, 0, 865, 1402, 0, 0, 0,
	0, 880, 394, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	395, 1798, 0, 0, 871, 0, 0, 0, 0, 1417,
	0, 0, 0, 0, 1802, 0, 0, 0, 0, 0,
	0, 0, 890, 898, 0, 1412, 0, 0, 0, 0,
	871, 0, 0, 0, 1100, 397, 672, 896, 0, 0,
	402, 403, 0, 0, 408, 0, 0, 888, 890, 898,
	0, 27, 0, 881, 0, 0, 396, 398, 0, 0,
	0, 0, 49, 896, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 888, 0, 887, 0, 0, 0, 881,
	1100, 0, 1413, 0, 1100, 0, 51, 0, 0, 0,
	0, 0, 28, 0, 56, 399, 0, 0, 0, 0,
	0, 887, 0, 0, 0, 0, 0, 0, 400, 401,
	882, 0, 0, 40, 0, 0, 0, 0, 0, 0,
	35, 891, 0, 52, 404, 0, 0, 39, 36, 0,
	0, 0, 1883, 0, 0, 0, 882, 0, 0, 0,
	0, 0, 0, 0, 41, 0, 0, 891, 1897, 1897,
	37, 0, 1408, 1409, 1410, 0, 1407, 1404, 1405, 1406,
	1398, 1399, 1400, 1401, 1403, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1897, 0, 0, 889, 0, 0,
	877, 878, 879, 0, 876, 873, 874, 875, 867, 868,
	869, 870, 872, 0, 892, 0, 0, 0, 0, 0,
	0, 1437, 0, 889, 0, 0, 877, 878, 879, 1897,
	876, 873, 874, 875, 867, 868, 869, 870, 872, 0,
	892, 405, 0, 38, 406, 0, 0, 1436, 0, 407,
	0, 0, 0, 0, 54, 0, 45, 42, 0, 53,
	0, 0, 0, 0, 43, 0, 0, 63, 0, 0,
	0, 0, 46, 48, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 0, 0, 0, 0, 0,
	65, 0, 0, 1100, 1100, 0, 0, 1100, 0, 0,
	0, 0, 0, 55, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 66, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 0, 0,
	0, 62, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1755,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 45, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 77, 78, 282, 79, 283, 284, 285, 286, 190,
	287, 288, 289, 290, 80, 81, 191, 192, 193, 194,
	82, 195, 196, 291, 83, 197, 198, 84, 292, 293,
	199, 200, 201, 294, 202, 295, 268, 296, 85, 86,
	87, 907, 88, 297, 89, 90, 91, 298, 269, 92,
	93, 299, 300, 301, 302, 303, 304, 94, 95, 96,
	97, 203, 98, 204, 205, 305, 99, 306, 100, 307,
	308, 309, 101, 102, 310, 103, 311, 0, 312, 206,
	104, 105, 207, 208, 313, 314, 315, 106, 107, 209,
	0, 108, 316, 109, 317, 318, 270, 319, 110, 210,
	320, 211, 321, 111, 112, 113, 212, 213, 272, 322,
	116, 323, 114, 324, 271, 115, 214, 215, 216, 217,
	325, 218, 326, 273, 117, 274, 118, 119, 327, 328,
	219, 275, 120, 276, 329, 121, 330, 331, 122, 0,
	123, 124, 125, 126, 127, 277, 128, 129, 132, 130,
	332, 131, 333, 220, 133, 221, 134, 135, 334, 335,
	336, 337, 338, 136, 222, 278, 137, 279, 223, 138,
	139, 140, 339, 224, 141, 225, 142, 340, 143, 144,
	145, 226, 146, 147, 341, 149, 150, 148, 151, 342,
	152, 280, 153, 154, 227, 155, 0, 156, 157, 158,
	343, 228, 159, 160, 344, 161, 162, 281, 163, 229,
	230, 164, 345, 170, 165, 166, 167, 169, 231, 168,
	232, 346, 171, 347, 172, 173, 348, 233, 234, 235,
	349, 350, 174, 236, 237, 351, 175, 176, 177, 178,
	352, 353, 179, 180, 181, 354, 355, 182, 183, 184,
	238, 239, 356, 357, 185, 358, 359, 360, 361, 186,
	187, 188, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 263, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1529,
	77, 78, 282, 79, 283, 284, 285, 286, 190, 287,
	288, 289, 290, 80, 81, 191, 192, 193, 194, 82,
	195, 196, 291, 83, 197, 198, 84, 292, 293, 199,
	200, 201, 294, 202, 295, 268, 296, 85, 86, 87,
	0, 88, 297, 89, 90, 91, 298, 269, 92, 93,
	299, 300, 301, 302, 303, 304, 94, 95, 96, 97,
	203, 98, 204, 205, 305, 99, 306, 100, 307, 308,
	309, 101, 102, 310, 103, 311, 0, 312, 206, 104,
	105, 207, 208, 313, 314, 315, 106, 107, 209, 0,
	108, 316, 109, 317, 318, 270, 319, 110, 210, 320,
	211, 321, 111, 112, 113, 212, 213, 272, 322, 116,
	323, 114, 324, 271, 115, 214, 215, 216, 217, 325,
	218, 326, 273, 117, 274, 118, 119, 327, 328, 219,
	275, 120, 276, 329, 121, 330, 331, 122, 0, 123,
	124, 125, 126, 127, 277, 128, 129, 132, 130, 332,
	131, 333, 220, 133, 221, 134, 135, 334, 335, 336,
	337, 338, 136, 222, 278, 137, 279, 223, 138, 139,
	140, 339, 224, 141, 225, 142, 340, 143, 144, 145,
	226, 146, 147, 341, 149, 150, 148, 151, 342, 152,
	280, 153, 154, 227, 155, 0, 156, 157, 158, 343,
	228, 159, 160, 344, 161, 162, 281, 163, 229, 230,
	164, 345, 170, 165, 166, 167, 169, 231, 168, 232,
	346, 171, 347, 172, 173, 348, 233, 234, 235, 349,
	350, 174, 236, 237, 351, 175, 176, 177, 178, 352,
	353, 179, 180, 181, 354, 355, 182, 183, 184, 238,
	239, 356, 357, 185, 358, 359, 360, 361, 186, 187,
	188, 189, 263, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 697, 0, 0, 77, 78,
	282, 79, 283, 284, 285, 286, 190, 287, 288, 289,
	290, 80, 81, 191, 192, 193, 194, 82, 195, 196,
	291, 83, 197, 198, 84, 292, 293, 199, 200, 201,
	294, 202, 295, 268, 296, 85, 86, 87, 0, 88,
	297, 89, 90, 91, 298, 269, 92, 93, 299, 300,
	301, 302, 303, 304, 94, 95, 96, 97, 203, 98,
	204, 205, 305, 99, 306, 100, 307, 308, 309, 101,
	102, 310, 103, 311, 0, 312, 206, 104, 105, 207,
	208, 313, 314, 315, 106, 107, 209, 0, 108, 316,
	109, 317, 318, 270, 319, 110, 210, 320, 211, 321,
	111, 112, 113, 212, 213, 272, 322, 116, 323, 114,
	324, 271, 115, 214, 215, 216, 217, 325, 218, 326,
	273, 117, 274, 118, 119, 327, 328, 219, 275, 120,
	276, 329, 121, 330, 331, 122, 0, 123, 124, 125,
	126, 127, 277, 128, 129, 132, 130, 332, 131, 333,
	220, 133, 221, 134, 135, 334, 335, 336, 337, 338,
	136, 222, 278, 137, 279, 223, 138, 139, 140, 339,
	224, 141, 225, 142, 340, 143, 144, 145, 226, 146,
	147, 341, 149, 150, 148, 151, 342, 152, 280, 153,
	154, 227, 155, 0, 156, 157, 158, 343, 228, 159,
	160, 344, 161, 162, 281, 163, 229, 230, 164, 345,
	170, 165, 166, 167, 169, 231, 168, 232, 346, 171,
	347, 172, 173, 348, 233, 234, 235, 349, 350, 174,
	236, 237, 351, 175, 176, 177, 178, 352, 353, 179,
	180, 181, 354, 355, 182, 183, 184, 238, 239, 356,
	357, 185, 358, 359, 360, 361, 186, 187, 188, 189,
	607, 596, 597, 594, 595, 583, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 78, 1168, 79,
	0, 0, 0, 0, 623, 589, 0, 0, 0, 80,
	81, 191, 638, 193, 639, 82, 640, 641, 0, 83,
	197, 198, 84, 604, 622, 642, 643, 201, 0, 634,
	0, 615, 0, 85, 86, 87, 0, 88, 0, 89,
	90, 91, 0, 269, 92, 93, 0, 616, 618, 0,
	617, 619, 94, 95, 96, 97, 644, 98, 645, 646,
	0, 99, 0, 100, 0, 1169, 0, 637, 102, 0,
	103, 0, 0, 0, 588, 104, 105, 624, 625, 602,
	0, 0, 106, 107, 647, 0, 108, 0, 109, 0,
	0, 270, 0, 110, 635, 0, 211, 0, 111, 112,
	113, 631, 633, 272, 0, 116, 0, 114, 0, 271,
	115, 648, 649, 650, 651, 0, 614, 0, 273, 117,
	274, 118, 119, 0, 0, 636, 275, 120, 276, 0,
	121, 0, 0, 122, 0, 123, 124, 125, 126, 127,
	277, 128, 129, 132, 130, 578, 131, 603, 632, 133,
	652, 134, 135, 0, 0, 0, 0, 0, 136, 222,
	278, 137, 279, 626, 138, 139, 140, 0, 627, 141,
	225, 142, 0, 143, 144, 145, 653, 146, 147, 0,
	149, 150, 148, 151, 0, 152, 280, 153, 154, 592,
	155, 0, 156, 157, 158, 0, 228, 159, 160, 620,
	161, 162, 281, 163, 654, 230, 164, 0, 170, 165,
	166, 167, 169, 655, 168, 628, 0, 171, 0, 172,
	173, 0, 233, 656, 657, 0, 0, 174, 629, 630,
	601, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	621, 0, 182, 183, 184, 238, 658, 1167, 0, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 575,
	576, 1170, 0, 0, 0, 577, 0, 0, 584, 1165,
	607, 596, 597, 594, 595, 583, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 78, 0, 79,
	0, 0, 0, 0, 623, 589, 0, 0, 0, 80,
	81, 191, 638, 193, 639, 82, 640, 641, 0, 83,
	197, 198, 84, 604, 622, 642, 643, 201, 0, 634,
	0, 615, 0, 85, 86, 87, 0, 88, 0, 89,
	90, 91, 0, 269, 92, 93, 0, 616, 618, 0,
	617, 619, 94, 95, 96, 97, 644, 98, 645, 646,
	673, 99, 0, 100, 0, 0, 0, 637, 102, 0,
	103, 0, 0, 0, 588, 104, 105, 624, 625, 602,
	0, 0, 106, 107, 647, 0, 108, 0, 109, 0,
	0, 270, 0, 110, 635, 0, 211, 0, 111, 112,
	113, 631, 633, 272, 0, 116, 0, 114, 0, 271,
	115, 648, 649, 650, 651, 0, 614, 0, 273, 117,
	274, 118, 119, 0, 0, 636, 275, 120, 276, 0,
	121, 0, 0, 122, 0, 123, 124, 125, 126, 127,
	277, 128, 129, 132, 130, 578, 131, 603, 632, 133,
	652, 134, 135, 0, 0, 0, 0, 0, 136, 222,
	278, 137, 279, 626, 138, 139, 140, 0, 627, 141,
	225, 142, 0, 143, 144, 145, 653, 146, 147, 0,
	149, 150, 148, 151, 0, 152, 280, 153, 154, 592,
	155, 0, 156, 157, 158, 63, 228, 159, 160, 620,
	161, 162, 281, 163, 654, 230, 164, 0, 170, 165,
	166, 167, 169, 655, 168, 628, 0, 171, 65, 172,
	173, 0, 233, 656, 657, 0, 0, 174, 629, 630,
	601, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	621, 0, 182, 183, 184, 492, 658, 0, 0, 185,
	0, 0, 0, 61, 186, 187, 188, 189, 579, 62,
	607, 596, 597, 594, 595, 583, 0, 0, 0, 575,
	576, 0, 0, 0, 0, 577, 77, 78, 584, 79,
	0, 0, 0, 0, 623, 589, 0, 0, 0, 80,
	81, 191, 638, 193, 639, 82, 640, 641, 0, 83,
	197, 198, 84, 604, 622, 642, 643, 201, 0, 634,
	0, 615, 0, 85, 86, 87, 0, 88, 0, 89,
	90, 91, 0, 269, 92, 93, 0, 616, 618, 0,
	617, 619, 94, 95, 96, 97, 644, 98, 645, 646,
	0, 99, 0, 100, 0, 0, 0, 637, 102, 0,
	103, 0, 0, 0, 588, 104, 105, 624, 625, 602,
	0, 0, 106, 107, 647, 0, 108, 0, 109, 0,
	0, 270, 0, 110, 635, 0, 211, 0, 111, 112,
	113, 631, 633, 272, 0, 116, 0, 114, 0, 271,
	115, 648, 649, 650, 651, 0, 614, 0, 273, 117,
	274, 118, 119, 0, 0, 636, 275, 120, 276, 0,
	121, 0, 0, 122, 0, 123, 124, 125, 126, 127,
	277, 128, 129, 132, 130, 578, 131, 603, 632, 133,
	652, 134, 135, 0, 0, 0, 0, 0, 136, 222,
	278, 137, 279, 626, 138, 139, 140, 0, 627, 141,
	225, 142, 0, 143, 144, 145, 653, 146, 147, 0,
	149, 150, 148, 151, 0, 152, 280, 153, 154, 592,
	155, 0, 156, 157, 158, 63, 228, 159, 160, 620,
	161, 162, 281, 163, 654, 230, 164, 0, 170, 165,
	166, 167, 169, 655, 168, 628, 0, 171, 65, 172,
	173, 0, 233, 656, 657, 0, 0, 174, 629, 630,
	601, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	621, 0, 182, 183, 184, 492, 658, 0, 0, 185,
	0, 0, 0, 61, 186, 187, 188, 189, 579, 62,
	607, 596, 597, 594, 595, 583, 0, 0, 0, 575,
	576, 0, 0, 0, 0, 577, 77, 78, 584, 79,
	0, 0, 0, 0, 623, 589, 0, 0, 0, 80,
	81, 191, 638, 193, 639, 82, 640, 641, 1210, 83,
	197, 198, 84, 604, 622, 642, 643, 201, 0, 634,
	0, 615, 0, 85, 86, 87, 0, 88, 0, 89,
	90, 91, 0, 269, 92, 93, 0, 616, 618, 0,
	617, 619, 94, 95, 96, 97, 644, 98, 645, 646,
	0, 99, 0, 100, 0, 0, 0, 637, 102, 0,
	103, 0, 0, 0, 588, 104, 105, 624, 625, 602,
	0, 0, 106, 107, 647, 0, 108, 0, 109, 0,
	1215, 270, 0, 110, 635, 0, 211, 0, 111, 112,
	113, 631, 633, 272, 0, 116, 0, 114, 0, 271,
	115, 648, 649, 650, 651, 0, 614, 0, 273, 117,
	274, 118, 119, 0, 1211, 636, 275, 120, 276, 0,
	121, 0, 0, 122, 0, 123, 124, 125, 126, 127,
	277, 128, 129, 132, 130, 578, 131, 603, 632, 133,
	652, 134, 135, 0, 0, 0, 0, 0, 136, 222,
	278, 137, 279, 626, 138, 139, 140, 0, 627, 141,
	225, 142, 0, 143, 144, 145, 653, 146, 147, 0,
	149, 150, 148, 151, 0, 152, 280, 153, 154, 592,
	155, 0, 156, 157, 158, 0, 228, 159, 160, 620,
	161, 162, 281, 163, 654, 230, 164, 0, 170, 165,
	166, 167, 169, 655, 168, 628, 0, 171, 0, 172,
	173, 0, 233, 656, 657, 0, 1212, 174, 629, 630,
	601, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	621, 0, 182, 183, 184, 238, 658, 0, 0, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 579, 0,
	607, 596, 597, 594, 595, 583, 0, 0, 0, 575,
	576, 0, 0, 0, 0, 577, 77, 78, 584, 79,
	0, 0, 0, 0, 623, 589, 0, 0, 0, 80,
	81, 191, 638, 193, 639, 82, 640, 641, 0, 83,
	197, 198, 84, 604, 622, 642, 643, 201, 0, 634,
	0, 615, 0, 85, 86, 87, 0, 88, 0, 89,
	90, 91, 0, 269, 92, 93, 0, 616, 618, 0,
	617, 619, 94, 95, 96, 97, 644, 98, 645, 646,
	0, 99, 0, 100, 0, 0, 0, 637, 102, 0,
	103, 0, 0, 0, 588, 104, 105, 624, 625, 602,
	0, 0, 106, 107, 647, 0, 108, 0, 109, 0,
	0, 270, 0, 110, 635, 0, 211, 0, 111, 112,
	113, 631, 633, 272, 0, 116, 0, 114, 0, 271,
	115, 648, 649, 650, 651, 0, 614, 0, 273, 117,
	274, 118, 119, 0, 0, 636, 275, 120, 276, 0,
	121, 0, 0, 122, 0, 123, 124, 125, 126, 127,
	277, 128, 129, 132, 130, 578, 131, 603, 632, 133,
	652, 134, 135, 0, 0, 0, 0, 0, 136, 222,
	278, 137, 279, 626, 138, 139, 140, 0, 627, 141,
	225, 142, 0, 143, 144, 145, 653, 146, 147, 0,
	149, 150, 148, 151, 0, 152, 280, 153, 154, 592,
	155, 0, 156, 157, 158, 0, 228, 159, 160, 620,
	161, 162, 281, 163, 654, 230, 164, 0, 170, 165,
	166, 167, 169, 655, 168, 628, 0, 171, 0, 172,
	173, 0, 233, 656, 657, 0, 0, 174, 629, 630,
	601, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	621, 0, 182, 183, 184, 238, 658, 0, 0, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 575,
	576, 0, 0, 0, 0, 577, 0, 0, 584, 1596,
	607, 596, 597, 594, 595, 583, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 78, 0, 79,
	0, 0, 0, 0, 623, 589, 0, 0, 0, 80,
	81, 191, 638, 193, 639, 82, 640, 641, 0, 83,
	197, 198, 84, 604, 622, 642, 643, 201, 0, 634,
	0, 615, 0, 85, 86, 87, 0, 88, 0, 89,
	90, 91, 0, 269, 92, 93, 0, 616, 618, 0,
	617, 619, 94, 95, 96, 97, 644, 98, 645, 646,
	0, 99, 0, 100, 0, 0, 0, 637, 102, 0,
	103, 0, 0, 0, 588, 104, 105, 624, 625, 602,
	0, 0, 106, 107, 647, 0, 108, 0, 109, 0,
	0, 270, 0, 110, 635, 0, 211, 0, 111, 112,
	113, 631, 633, 272, 0, 116, 0, 114, 0, 271,
	115, 648, 649, 650, 651, 0, 614, 0, 273, 117,
	274, 118, 119, 0, 0, 636, 275, 120, 276, 0,
	121, 0, 0, 122, 0, 123, 124, 125, 126, 127,
	277, 128, 129, 132, 130, 578, 131, 603, 632, 133,
	652, 134, 135, 0, 0, 0, 0, 0, 136, 222,
	278, 137, 279, 626, 138, 139, 140, 0, 627, 141,
	225, 142, 0, 143, 144, 145, 653, 146, 147, 0,
	149, 150, 148, 151, 0, 152, 280, 153, 154, 592,
	155, 0, 156, 157, 158, 0, 228, 159, 160, 620,
	161, 162, 281, 163, 654, 230, 164, 0, 170, 165,
	166, 167, 169, 655, 168, 628, 0, 171, 0, 172,
	173, 0, 233, 656, 657, 0, 0, 174, 629, 630,
	601, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	621, 0, 182, 183, 184, 238, 658, 0, 0, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 575,
	576, 0, 0, 0, 0, 577, 0, 0, 584, 1545,
	607, 596, 597, 594, 595, 583, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 78, 0, 79,
	0, 0, 0, 0, 623, 589, 0, 0, 0, 80,
	81, 191, 638, 193, 639, 82, 640, 641, 0, 83,
	197, 198, 84, 604, 622, 642, 643, 201, 0, 634,
	0, 615, 0, 85, 86, 87, 0, 88, 0, 89,
	90, 91, 0, 269, 92, 93, 0, 616, 618, 0,
	617, 619, 94, 95, 96, 97, 644, 98, 645, 646,
	0, 99, 0, 100, 0, 0, 0, 637, 102, 0,
	103, 0, 0, 0, 588, 104, 105, 624, 625, 602,
	0, 0, 106, 107, 647, 0, 108, 0, 109, 0,
	0, 270, 0, 110, 635, 0, 211, 0, 111, 112,
	113, 631, 633, 272, 0, 116, 0, 114, 0, 271,
	115, 648, 649, 650, 651, 0, 614, 0, 273, 117,
	274, 118, 119, 0, 0, 636, 275, 120, 276, 0,
	121, 0, 0, 122, 0, 123, 124, 125, 126, 127,
	277, 128, 129, 132, 130, 578, 131, 603, 632, 133,
	652, 134, 135, 0, 0, 0, 0, 0, 136, 222,
	278, 137, 279, 626, 138, 139, 140, 0, 627, 141,
	225, 142, 0, 143, 144, 145, 653, 146, 147, 0,
	149, 150, 148, 151, 0, 152, 280, 153, 154, 592,
	155, 0, 156, 157, 158, 0, 228, 159, 160, 620,
	161, 162, 281, 163, 654, 230, 164, 0, 170, 165,
	166, 167, 169, 655, 168, 628, 0, 171, 0, 172,
	173, 0, 233, 656, 657, 0, 0, 174, 629, 630,
	601, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	621, 0, 182, 183, 184, 238, 658, 0, 0, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 575,
	576, 0, 0, 0, 0, 577, 0, 0, 584, 1164,
	607, 596, 597, 594, 595, 583, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 78, 0, 79,
	0, 0, 0, 0, 623, 589, 0, 0, 0, 80,
	81, 191, 638, 193, 639, 82, 640, 641, 0, 83,
	197, 198, 84, 604, 622, 642, 643, 201, 0, 634,
	0, 615, 0, 85, 86, 87, 0, 88, 0, 89,
	90, 91, 0, 269, 92, 93, 0, 616, 618, 0,
	617, 619, 94, 95, 96, 97, 644, 98, 645, 646,
	0, 99, 0, 100, 0, 0, 0, 637, 102, 0,
	103, 0, 0, 0, 588, 104, 105, 624, 625, 602,
	0, 0, 106, 107, 647, 0, 108, 0, 109, 0,
	0, 270, 0, 110, 635, 0, 211, 0, 111, 112,
	113, 631, 633, 272, 0, 116, 0, 114, 0, 271,
	115, 648, 649, 650, 651, 0, 614, 0, 273, 117,
	274, 118, 119, 0, 0, 636, 275, 120, 276, 0,
	121, 0, 0, 122, 0, 123, 124, 125, 126, 127,
	277, 128, 129, 132, 130, 578, 131, 603, 632, 133,
	652, 134, 135, 0, 0, 0, 0, 0, 136, 222,
	278, 137, 279, 626, 138, 139, 140, 0, 627, 141,
	225, 142, 0, 143, 144, 145, 653, 146, 147, 0,
	149, 150, 148, 151, 0, 152, 280, 153, 154, 592,
	155, 0, 156, 157, 158, 0, 228, 159, 160, 620,
	161, 162, 281, 163, 654, 230, 164, 0, 170, 165,
	166, 167, 169, 655, 168, 628, 0, 171, 0, 172,
	173, 0, 233, 656, 657, 0, 0, 174, 629, 630,
	601, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	621, 0, 182, 183, 184, 238, 658, 0, 0, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 579, 0,
	0, 0, 0, 607, 596, 597, 594, 595, 583, 575,
	576, 0, 0, 0, 0, 577, 913, 1161, 584, 77,
	78, 0, 79, 0, 0, 0, 0, 623, 589, 0,
	0, 0, 80, 81, 191, 638, 193, 639, 82, 640,
	641, 0, 83, 197, 198, 84, 604, 622, 642, 643,
	201, 0, 634, 0, 615, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 269, 92, 93, 0,
	616, 618, 0, 617, 619, 94, 95, 96, 97, 644,
	98, 645, 646, 0, 99, 0, 100, 0, 0, 0,
	637, 102, 0, 103, 0, 0, 0, 588, 104, 105,
	624, 625, 602, 0, 0, 106, 107, 647, 0, 108,
	0, 109, 0, 0, 270, 0, 110, 635, 0, 211,
	0, 111, 112, 113, 631, 633, 272, 0, 116, 0,
	114, 0, 271, 115, 648, 649, 650, 651, 0, 614,
	0, 273, 117, 274, 118, 119, 0, 0, 636, 275,
	120, 276, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 277, 128, 129, 132, 130, 578, 131,
	603, 632, 133, 652, 134, 135, 0, 0, 0, 0,
	0, 136, 222, 278, 137, 279, 626, 138, 139, 140,
	0, 627, 141, 225, 142, 0, 143, 144, 145, 653,
	146, 147, 0, 149, 150, 148, 151, 0, 152, 280,
	153, 154, 592, 155, 0, 156, 157, 158, 0, 228,
	159, 160, 620, 161, 162, 281, 163, 654, 230, 164,
	0, 170, 165, 166, 167, 169, 655, 168, 628, 0,
	171, 0, 172, 173, 0, 233, 656, 657, 0, 0,
	174, 629, 630, 601, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 621, 0, 182, 183, 184, 238, 658,
	0, 0, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 579, 0, 607, 596, 597, 594, 595, 583, 0,
	0, 0, 575, 576, 573, 0, 0, 0, 577, 77,
	78, 584, 79, 0, 0, 0, 0, 623, 589, 0,
	0, 0, 80, 81, 191, 638, 193, 639, 82, 640,
	641, 0, 83, 197, 198, 84, 604, 622, 642, 643,
	201, 0, 634, 0, 615, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 269, 92, 93, 0,
	616, 618, 0, 617, 619, 94, 95, 96, 97, 644,
	98, 645, 646, 0, 99, 0, 100, 0, 0, 0,
	637, 102, 0, 103, 0, 0, 0, 588, 104, 105,
	624, 625, 602, 0, 0, 106, 107, 647, 0, 108,
	0, 109, 0, 0, 270, 0, 110, 635, 0, 211,
	0, 111, 112, 113, 631, 633, 272, 0, 116, 0,
	114, 0, 271, 115, 648, 649, 650, 651, 0, 614,
	0, 273, 117, 274, 118, 119, 0, 0, 636, 275,
	120, 276, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 277, 128, 129, 132, 130, 578, 131,
	603, 632, 133, 652, 134, 135, 0, 0, 0, 0,
	0, 136, 222, 278, 137, 279, 626, 138, 139, 140,
	0, 627, 141, 225, 142, 0, 143, 144, 145, 653,
	146, 147, 0, 149, 150, 148, 151, 0, 152, 280,
	153, 154, 592, 155, 0, 156, 157, 158, 0, 228,
	159, 160, 620, 161, 162, 281, 163, 654, 230, 164,
	0, 170, 165, 166, 167, 169, 655, 168, 628, 0,
	171, 0, 172, 173, 0, 233, 656, 657, 0, 0,
	174, 629, 630, 601, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 621, 0, 182, 183, 184, 238, 658,
	1550, 0, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 579, 0, 607, 596, 597, 594, 595, 583, 0,
	0, 0, 575, 576, 0, 0, 0, 0, 577, 77,
	78, 584, 79, 0, 0, 0, 0, 623, 589, 0,
	0, 0, 80, 81, 191, 638, 193, 639, 82, 640,
	641, 0, 83, 197, 198, 84, 604, 622, 642, 643,
	201, 0, 634, 0, 615, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 269, 92, 93, 0,
	616, 618, 0, 617, 619, 94, 95, 96, 97, 644,
	98, 645, 646, 673, 99, 0, 100, 0, 0, 0,
	637, 102, 0, 103, 0, 0, 0, 588, 104, 105,
	624, 625, 602, 0, 0, 106, 107, 647, 0, 108,
	0, 109, 0, 0, 270, 0, 110, 635, 0, 211,
	0, 111, 112, 113, 631, 633, 272, 0, 116, 0,
	114, 0, 271, 115, 648, 649, 650, 651, 0, 614,
	0, 273, 117, 274, 118, 119, 0, 0, 636, 275,
	120, 276, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 277, 128, 129, 132, 130, 578, 131,
	603, 632, 133, 652, 134, 135, 0, 0, 0, 0,
	0, 136, 222, 278, 137, 279, 626, 138, 139, 140,
	0, 627, 141, 225, 142, 0, 143, 144, 145, 653,
	146, 147, 0, 149, 150, 148, 151, 0, 152, 280,
	153, 154, 592, 155, 0, 156, 157, 158, 0, 228,
	159, 160, 620, 161, 162, 281, 163, 654, 230, 164,
	0, 170, 165, 166, 167, 169, 655, 168, 628, 0,
	171, 0, 172, 173, 0, 233, 656, 657, 0, 0,
	174, 629, 630, 601, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 621, 0, 182, 183, 184, 238, 658,
	0, 0, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 579, 0, 607, 596, 597, 594, 595, 583, 0,
	0, 0, 575, 576, 0, 0, 0, 0, 577, 77,
	78, 584, 79, 0, 0, 0, 0, 623, 589, 0,
	0, 0, 80, 81, 191, 638, 193, 639, 82, 640,
	641, 0, 83, 197, 198, 84, 604, 622, 642, 643,
	201, 0, 634, 0, 615, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 269, 92, 93, 0,
	616, 618, 0, 617, 619, 94, 95, 96, 97, 644,
	98, 645, 646, 0, 99, 0, 100, 0, 0, 0,
	637, 102, 0, 103, 0, 0, 0, 588, 104, 105,
	624, 625, 602, 0, 0, 106, 107, 647, 0, 108,
	0, 109, 0, 1215, 270, 0, 110, 635, 0, 211,
	0, 111, 112, 113, 631, 633, 272, 0, 116, 0,
	114, 0, 271, 115, 648, 649, 650, 651, 0, 614,
	0, 273, 117, 274, 118, 119, 0, 0, 636, 275,
	120, 276, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 277, 128, 129, 132, 130, 578, 131,
	603, 632, 133, 652, 134, 135, 0, 0, 0, 0,
	0, 136, 222, 278, 137, 279, 626, 138, 139, 140,
	0, 627, 141, 225, 142, 0, 143, 144, 145, 653,
	146, 147, 0, 149, 150, 148, 151, 0, 152, 280,
	153, 154, 592, 155, 0, 156, 157, 158, 0, 228,
	159, 160, 620, 161, 162, 281, 163, 654, 230, 164,
	0, 170, 165, 166, 167, 169, 655, 168, 628, 0,
	171, 0, 172, 173, 0, 233, 656, 657, 0, 0,
	174, 629, 630, 601, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 621, 0, 182, 183, 184, 238, 658,
	0, 0, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 579, 0, 0, 0, 0, 607, 596, 597, 594,
	595, 583, 575, 576, 0, 0, 0, 0, 577, 0,
	0, 584, 77, 78, 847, 79, 0, 0, 0, 0,
	623, 589, 0, 0, 0, 80, 81, 191, 638, 193,
	639, 82, 640, 641, 0, 83, 197, 198, 84, 604,
	622, 642, 643, 201, 0, 634, 0, 615, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 269,
	92, 93, 0, 616, 618, 0, 617, 619, 94, 95,
	96, 97, 644, 98, 645, 646, 0, 99, 0, 100,
	0, 0, 0, 637, 102, 0, 103, 0, 0, 0,
	588, 104, 105, 624, 625, 602, 0, 0, 106, 107,
	647, 0, 108, 0, 109, 0, 0, 270, 0, 110,
	635, 0, 211, 0, 111, 112, 113, 631, 633, 272,
	0, 116, 0, 114, 0, 271, 115, 648, 649, 650,
	651, 0, 614, 0, 273, 117, 274, 118, 119, 0,
	0, 636, 275, 120, 276, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 277, 128, 129, 132,
	130, 578, 131, 603, 632, 133, 652, 134, 135, 0,
	0, 0, 0, 0, 136, 222, 278, 137, 279, 626,
	138, 139, 140, 0, 627, 141, 225, 142, 0, 143,
	144, 145, 653, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 280, 153, 154, 592, 155, 0, 156, 157,
	158, 0, 228, 159, 160, 620, 161, 162, 281, 163,
	654, 230, 164, 0, 170, 165, 166, 167, 169, 655,
	168, 628, 0, 171, 0, 172, 173, 0, 233, 656,
	657, 0, 0, 174, 629, 630, 601, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 621, 0, 182, 183,
	184, 238, 658, 0, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 579, 0, 607, 596, 597, 594,
	595, 583, 0, 0, 0, 575, 576, 0, 0, 0,
	0, 577, 77, 78, 584, 79, 0, 0, 0, 0,
	623, 589, 0, 0, 0, 80, 81, 191, 638, 193,
	639, 82, 640, 641, 0, 83, 197, 198, 84, 604,
	622, 642, 643, 201, 0, 634, 0, 615, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 269,
	92, 1896, 0, 616, 618, 0, 617, 619, 94, 95,
	96, 97, 644, 98, 645, 646, 0, 99, 0, 100,
	0, 0, 0, 637, 102, 0, 103, 0, 0, 0,
	588, 104, 105, 624, 625, 602, 0, 0, 106, 107,
	647, 0, 108, 0, 109, 0, 0, 270, 0, 110,
	635, 0, 211, 0, 111, 112, 113, 631, 633, 272,
	0, 116, 0, 114, 0, 271, 115, 648, 649, 650,
	651, 0, 614, 0, 273, 117, 274, 118, 119, 0,
	0, 636, 275, 120, 276, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 277, 128, 129, 132,
	130, 578, 131, 603, 632, 133, 652, 134, 135, 0,
	0, 0, 0, 0, 136, 222, 278, 137, 279, 626,
	138, 139, 140, 0, 627, 141, 225, 142, 0, 143,
	144, 145, 653, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 280, 153, 154, 592, 155, 0, 156, 157,
	158, 0, 228, 159, 160, 620, 161, 162, 281, 163,
	654, 230, 164, 0, 170, 165, 166, 167, 169, 655,
	168, 628, 0, 171, 0, 172, 173, 0, 233, 656,
	657, 0, 0, 174, 629, 630, 601, 175, 176, 1895,
	178, 0, 0, 179, 180, 181, 621, 0, 182, 183,
	184, 238, 658, 0, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 579, 0, 607, 596, 597, 594,
	595, 583, 0, 0, 0, 575, 576, 0, 0, 0,
	0, 577, 77, 78, 584, 79, 0, 0, 0, 0,
	623, 589, 0, 0, 0, 80, 81, 1894, 638, 193,
	639, 82, 640, 641, 0, 83, 197, 198, 84, 604,
	622, 642, 643, 201, 0, 634, 0, 615, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 269,
	92, 1896, 0, 616, 618, 0, 617, 619, 94, 95,
	96, 97, 644, 98, 645, 646, 0, 99, 0, 100,
	0, 0, 0, 637, 102, 0, 103, 0, 0, 0,
	588, 104, 105, 624, 625, 602, 0, 0, 106, 107,
	647, 0, 108, 0, 109, 0, 0, 270, 0, 110,
	635, 0, 211, 0, 111, 112, 113, 631, 633, 272,
	0, 116, 0, 114, 0, 271, 115, 648, 649, 650,
	651, 0, 614, 0, 273, 117, 274, 118, 119, 0,
	0, 636, 275, 120, 276, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 277, 128, 129, 132,
	130, 578, 131, 603, 632, 133, 652, 134, 135, 0,
	0, 0, 0, 0, 136, 222, 278, 137, 279, 626,
	138, 139, 140, 0, 627, 141, 225, 142, 0, 143,
	144, 145, 653, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 280, 153, 154, 592, 155, 0, 156, 157,
	158, 0, 228, 159, 160, 620, 161, 162, 281, 163,
	654, 230, 164, 0, 170, 165, 166, 167, 169, 655,
	168, 628, 0, 171, 0, 172, 173, 0, 233, 656,
	657, 0, 0, 174, 629, 630, 601, 175, 176, 1895,
	178, 0, 0, 179, 180, 181, 621, 0, 182, 183,
	184, 238, 658, 0, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 579, 0, 607, 596, 597, 594,
	595, 583, 0, 0, 0, 575, 576, 0, 0, 0,
	0, 577, 77, 78, 584, 79, 0, 0, 0, 0,
	623, 589, 0, 0, 0, 80, 81, 191, 638, 193,
	639, 82, 640, 641, 0, 83, 197, 198, 84, 604,
	622, 642, 643, 201, 0, 634, 0, 615, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 269,
	92, 93, 0, 616, 618, 0, 617, 619, 94, 95,
	96, 97, 644, 98, 645, 646, 0, 99, 0, 100,
	0, 0, 0, 637, 102, 0, 103, 0, 0, 0,
	588, 104, 105, 624, 625, 602, 0, 0, 106, 107,
	647, 0, 108, 0, 109, 0, 0, 270, 0, 110,
	635, 0, 211, 0, 111, 112, 113, 631, 633, 272,
	0, 116, 0, 114, 0, 271, 115, 648, 649, 650,
	651, 0, 614, 0, 273, 117, 274, 118, 119, 0,
	0, 636, 275, 120, 276, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 277, 128, 129, 132,
	130, 578, 131, 603, 632, 133, 652, 134, 135, 0,
	0, 0, 0, 0, 136, 222, 278, 137, 279, 626,
	138, 139, 140, 0, 627, 141, 225, 142, 0, 143,
	144, 145, 653, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 280, 153, 154, 592, 155, 0, 156, 157,
	158, 0, 228, 159, 160, 620, 161, 162, 281, 163,
	654, 230, 164, 0, 170, 165, 166, 167, 169, 655,
	168, 628, 0, 171, 0, 172, 173, 0, 233, 656,
	657, 0, 0, 174, 629, 630, 601, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 621, 0, 182, 183,
	184, 238, 658, 0, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 579, 0, 1187, 596, 597, 594,
	595, 583, 0, 0, 0, 575, 576, 0, 0, 0,
	0, 577, 77, 78, 584, 79, 0, 0, 0, 0,
	623, 589, 0, 0, 0, 80, 81, 191, 638, 193,
	639, 82, 640, 641, 0, 83, 197, 198, 84, 604,
	622, 642, 643, 201, 0, 634, 0, 615, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 269,
	92, 93, 0, 616, 618, 0, 617, 619, 94, 95,
	96, 97, 644, 1190, 645, 646, 0, 99, 0, 100,
	0, 0, 0, 637, 102, 0, 103, 0, 0, 0,
	588, 104, 105, 624, 625, 602, 0, 0, 106, 107,
	647, 0, 108, 0, 109, 0, 0, 270, 0, 110,
	635, 0, 211, 0, 111, 112, 1191, 631, 633, 272,
	0, 116, 0, 114, 0, 271, 115, 648, 649, 650,
	651, 0, 614, 0, 273, 117, 274, 118, 119, 0,
	0, 636, 275, 120, 276, 0, 121, 0, 0, 122,
	0, 123, 1192, 1189, 126, 127, 277, 128, 129, 132,
	130, 578, 131, 603, 632, 133, 652, 134, 135, 0,
	0, 0, 0, 0, 136, 222, 278, 137, 279, 626,
	138, 139, 140, 0, 627, 141, 225, 142, 0, 143,
	144, 145, 653, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 280, 153, 154, 592, 155, 0, 156, 157,
	1193, 0, 228, 159, 160, 620, 161, 162, 281, 163,
	654, 230, 164, 0, 170, 165, 166, 167, 169, 655,
	168, 628, 0, 171, 0, 172, 173, 0, 233, 656,
	657, 0, 0, 174, 629, 630, 601, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 621, 0, 182, 183,
	184, 238, 658, 0, 0, 185, 0, 0, 0, 0,
	186, 187, 1188, 189, 579, 0, 607, 596, 597, 594,
	595, 583, 0, 0, 0, 575, 576, 0, 0, 0,
	0, 577, 77, 78, 584, 79, 0, 0, 0, 0,
	623, 589, 0, 0, 0, 80, 81, 191, 638, 193,
	639, 82, 640, 641, 0, 83, 197, 198, 84, 604,
	622, 642, 643, 201, 0, 634, 0, 615, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 269,
	92, 93, 0, 616, 618, 0, 617, 619, 94, 95,
	96, 97, 644, 98, 645, 646, 0, 99, 0, 100,
	0, 0, 0, 637, 102, 0, 103, 0, 0, 0,
	588, 104, 105, 624, 625, 602, 0, 0, 106, 107,
	647, 0, 108, 0, 109, 0, 0, 270, 0, 110,
	635, 0, 211, 0, 111, 112, 113, 631, 633, 272,
	0, 116, 0, 114, 0, 271, 115, 648, 649, 650,
	651, 0, 614, 0, 273, 117, 274, 118, 119, 0,
	0, 636, 275, 120, 276, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 277, 128, 129, 132,
	130, 0, 131, 603, 632, 133, 652, 134, 135, 0,
	0, 0, 0, 0, 136, 222, 278, 137, 279, 626,
	138, 139, 140, 0, 627, 141, 225, 142, 0, 143,
	144, 145, 653, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 280, 153, 154, 1205, 155, 0, 156, 157,
	158, 0, 228, 159, 160, 620, 161, 162, 281, 163,
	654, 230, 164, 0, 170, 165, 166, 167, 169, 655,
	168, 628, 0, 171, 0, 172, 173, 0, 233, 656,
	657, 0, 0, 174, 629, 630, 601, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 621, 0, 182, 183,
	184, 238, 658, 0, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 0, 0, 607, 596, 597, 594,
	595, 583, 0, 0, 0, 1201, 1202, 0, 0, 0,
	0, 1203, 77, 78, 1204, 79, 0, 0, 0, 0,
	623, 589, 0, 0, 0, 80, 81, 0, 638, 193,
	639, 82, 640, 641, 0, 83, 197, 198, 84, 604,
	622, 642, 643, 201, 0, 634, 0, 615, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 269,
	92, 1896, 0, 616, 618, 0, 617, 619, 94, 95,
	96, 97, 644, 98, 645, 646, 0, 99, 0, 100,
	0, 0, 0, 637, 102, 0, 103, 0, 0, 0,
	588, 104, 105, 624, 625, 602, 0, 0, 106, 107,
	647, 0, 108, 0, 109, 0, 0, 270, 0, 110,
	635, 0, 211, 0, 111, 112, 113, 631, 633, 0,
	0, 116, 0, 114, 0, 271, 115, 648, 649, 650,
	651, 0, 614, 0, 0, 117, 274, 118, 119, 0,
	0, 636, 275, 120, 0, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 277, 128, 129, 132,
	130, 578, 131, 603, 632, 133, 652, 134, 135, 0,
	0, 0, 0, 0, 136, 222, 278, 137, 279, 626,
	138, 139, 140, 0, 627, 141, 225, 142, 0, 143,
	144, 145, 653, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 280, 153, 154, 592, 155, 0, 156, 157,
	158, 0, 228, 159, 160, 620, 161, 162, 0, 163,
	654, 230, 164, 0, 170, 165, 166, 167, 169, 655,
	168, 628, 0, 171, 0, 172, 173, 0, 233, 656,
	657, 0, 0, 174, 629, 630, 601, 175, 176, 1895,
	178, 0, 0, 179, 180, 181, 621, 0, 182, 183,
	184, 238, 658, 0, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 0, 0, 607, 0, 0, 0,
	0, 0, 0, 0, 0, 575, 576, 0, 0, 0,
	0, 577, 77, 78, 584, 79, 0, 0, 0, 0,
	623, 0, 0, 0, 0, 80, 81, 191, 192, 193,
	194, 82, 195, 196, 0, 83, 197, 198, 84, 0,
	622, 199, 200, 201, 0, 634, 0, 615, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 269,
	92, 93, 0, 616, 618, 0, 617, 619, 94, 95,
	96, 97, 203, 98, 204, 205, 0, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	206, 104, 105, 624, 625, 0, 0, 0, 106, 107,
	209, 0, 108, 0, 109, 0, 0, 270, 0, 110,
	635, 0, 211, 0, 111, 112, 113, 631, 633, 272,
	0, 116, 0, 114, 0, 271, 115, 214, 215, 216,
	217, 0, 218, 0, 273, 117, 274, 118, 119, 0,
	0, 636, 275, 120, 276, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 277, 128, 129, 132,
	130, 0, 131, 0, 632, 133, 221, 134, 135, 0,
	0, 0, 0, 0, 136, 222, 278, 137, 279, 626,
	138, 139, 140, 0, 627, 141, 225, 142, 0, 143,
	144, 145, 226, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 280, 153, 154, 227, 155, 0, 156, 157,
	158, 0, 228, 159, 160, 620, 161, 162, 281, 163,
	229, 230, 164, 0, 170, 165, 166, 167, 169, 231,
	168, 628, 0, 171, 0, 172, 173, 0, 233, 234,
	235, 0, 0, 174, 629, 630, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 621, 0, 182, 183,
	184, 238, 239, 0, 0, 185, 488, 0, 0, 0,
	186, 187, 188, 189, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 0, 79, 0, 0, 0, 0,
	190, 0, 0, 0, 1663, 80, 81, 191, 192, 193,
	194, 82, 195, 196, 0, 83, 197, 198, 84, 0,
	0, 199, 200, 201, 0, 202, 0, 268, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 269,
	92, 93, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 97, 203, 98, 204, 205, 0, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	206, 104, 105, 207, 208, 0, 0, 0, 106, 107,
	209, 0, 108, 0, 109, 0, 0, 270, 0, 110,
	210, 0, 211, 0, 111, 112, 113, 212, 213, 272,
	0, 116, 0, 114, 0, 271, 115, 214, 215, 216,
	217, 0, 218, 0, 273, 117, 274, 118, 119, 0,
	0, 219, 275, 120, 276, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 277, 128, 129, 132,
	130, 0, 131, 0, 220, 133, 221, 134, 135, 0,
	0, 0, 0, 0, 136, 222, 278, 137, 279, 223,
	138, 139, 140, 0, 224, 141, 225, 142, 0, 143,
	144, 145, 226, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 280, 153, 154, 227, 155, 0, 156, 157,
	158, 63, 228, 159, 160, 0, 161, 162, 281, 163,
	229, 230, 164, 0, 170, 165, 166, 167, 169, 231,
	168, 232, 0, 171, 65, 172, 173, 0, 233, 234,
	235, 0, 0, 174, 236, 237, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 492, 239, 0, 0, 185, 0, 0, 0, 61,
	186, 187, 188, 189, 0, 62, 488, 798, 0, 799,
	794, 789, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 60, 79, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 80, 81, 191, 192, 193,
	194, 82, 195, 196, 0, 83, 197, 198, 84, 0,
	0, 199, 200, 201, 0, 202, 0, 268, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 269,
	92, 93, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 97, 203, 98, 204, 205, 802, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	206, 104, 105, 207, 208, 791, 0, 0, 106, 107,
	209, 0, 108, 0, 109, 0, 0, 270, 0, 110,
	210, 0, 211, 0, 111, 112, 113, 212, 213, 272,
	0, 116, 0, 114, 0, 271, 115, 214, 215, 216,
	217, 0, 218, 0, 273, 117, 274, 118, 119, 0,
	0, 219, 275, 120, 276, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 277, 128, 129, 132,
	130, 0, 131, 0, 220, 133, 221, 134, 135, 0,
	792, 0, 0, 0, 136, 222, 278, 137, 279, 223,
	138, 139, 140, 0, 224, 141, 225, 142, 0, 143,
	144, 145, 226, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 280, 153, 154, 227, 155, 0, 156, 157,
	158, 0, 228, 159, 160, 0, 161, 162, 281, 163,
	229, 230, 164, 0, 170, 165, 166, 167, 169, 231,
	168, 232, 0, 171, 0, 172, 173, 0, 233, 234,
	235, 0, 0, 174, 236, 237, 790, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 238, 239, 488, 798, 185, 799, 794, 789, 0,
	186, 187, 188, 189, 0, 0, 0, 0, 0, 77,
	78, 0, 79, 0, 0, 800, 795, 190, 0, 0,
	0, 0, 80, 81, 191, 192, 193, 194, 82, 195,
	196, 0, 83, 197, 198, 84, 0, 0, 199, 200,
	201, 0, 202, 0, 268, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 269, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 203,
	98, 204, 205, 785, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 206, 104, 105,
	207, 208, 791, 0, 0, 106, 107, 209, 0, 108,
	0, 109, 0, 0, 270, 0, 110, 210, 0, 211,
	0, 111, 112, 113, 212, 213, 272, 0, 116, 0,
	114, 0, 271, 115, 214, 215, 216, 217, 0, 218,
	0, 273, 117, 274, 118, 119, 0, 0, 219, 275,
	120, 276, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 277, 128, 129, 132, 130, 0, 131,
	0, 220, 133, 221, 134, 135, 0, 792, 0, 0,
	0, 136, 222, 278, 137, 279, 223, 138, 139, 140,
	0, 224, 141, 225, 142, 0, 143, 144, 145, 226,
	146, 147, 0, 149, 150, 148, 151, 0, 152, 280,
	153, 154, 227, 155, 0, 156, 157, 158, 0, 228,
	159, 160, 0, 161, 162, 281, 163, 229, 230, 164,
	0, 170, 165, 166, 167, 169, 231, 168, 232, 0,
	171, 0, 172, 173, 0, 233, 234, 235, 0, 0,
	174, 236, 237, 790, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 0, 182, 183, 184, 238, 239,
	488, 798, 185, 799, 794, 789, 0, 186, 187, 188,
	189, 0, 0, 0, 0, 0, 77, 78, 0, 79,
	0, 0, 800, 795, 190, 0, 0, 0, 0, 80,
	81, 191, 192, 193, 194, 82, 195, 196, 0, 83,
	197, 198, 84, 0, 0, 199, 200, 201, 0, 202,
	0, 268, 0, 85, 86, 87, 0, 88, 0, 89,
	90, 91, 0, 269, 92, 93, 0, 0, 0, 0,
	0, 0, 94, 95, 96, 97, 203, 98, 204, 205,
	0, 99, 0, 100, 0, 0, 0, 101, 102, 0,
	103, 0, 0, 0, 206, 104, 105, 207, 208, 791,
	0, 0, 106, 107, 209, 0, 108, 0, 109, 0,
	0, 270, 0, 110, 210, 0, 211, 0, 111, 112,
	113, 212, 213, 272, 0, 116, 0, 114, 0, 271,
	115, 214, 215, 216, 217, 0, 218, 0, 273, 117,
	274, 118, 119, 0, 0, 219, 275, 120, 276, 0,
	121, 0, 0, 122, 0, 123, 124, 125, 126, 127,
	277, 128, 129, 132, 130, 0, 131, 0, 220, 133,
	221, 134, 135, 0, 792, 0, 0, 0, 136, 222,
	278, 137, 279, 223, 138, 139, 140, 0, 224, 141,
	225, 142, 0, 143, 144, 145, 226, 146, 147, 0,
	149, 150, 148, 151, 0, 152, 280, 153, 154, 227,
	155, 0, 156, 157, 158, 0, 228, 159, 160, 0,
	161, 162, 281, 163, 229, 230, 164, 0, 170, 165,
	166, 167, 169, 231, 168, 232, 0, 171, 0, 172,
	173, 0, 233, 234, 235, 0, 0, 174, 236, 237,
	790, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 238, 239, 74, 0, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 800,
	795, 190, 0, 0, 0, 0, 80, 81, 191, 192,
	193, 194, 82, 195, 196, 0, 83, 197, 198, 84,
	0, 0, 199, 200, 201, 0, 202, 0, 0, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	0, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 203, 98, 204, 205, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 206, 104, 105, 207, 208, 0, 0, 0, 106,
	107, 209, 0, 108, 0, 109, 0, 0, 0, 0,
	110, 210, 0, 211, 0, 111, 112, 113, 212, 213,
	0, 0, 116, 0, 114, 0, 0, 115, 214, 215,
	216, 217, 0, 218, 0, 0, 117, 0, 118, 119,
	0, 0, 219, 0, 120, 0, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 0, 128, 129,
	132, 130, 0, 131, 0, 220, 133, 221, 134, 135,
	0, 0, 449, 0, 0, 136, 222, 0, 137, 0,
	223, 138, 139, 140, 0, 224, 141, 225, 142, 0,
	143, 144, 145, 226, 146, 147, 0, 149, 150, 148,
	151, 0, 152, 0, 153, 154, 227, 155, 0, 156,
	157, 158, 63, 228, 159, 160, 0, 161, 162, 0,
	163, 229, 230, 164, 0, 170, 165, 166, 167, 169,
	231, 168, 232, 0, 171, 65, 172, 173, 0, 233,
	234, 235, 0, 0, 174, 236, 237, 0, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 0, 0, 182,
	183, 184, 492, 239, 0, 0, 185, 74, 0, 0,
	61, 186, 187, 188, 189, 0, 62, 0, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 0,
	0, 190, 0, 0, 0, 1102, 80, 81, 191, 192,
	193, 194, 82, 195, 196, 0, 83, 197, 198, 84,
	0, 0, 199, 200, 201, 0, 202, 0, 0, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	0, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 203, 98, 204, 205, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 206, 104, 105, 207, 208, 0, 0, 0, 106,
	107, 209, 0, 108, 0, 109, 0, 0, 0, 0,
	110, 210, 0, 211, 0, 111, 112, 113, 212, 213,
	0, 0, 116, 0, 114, 0, 0, 115, 214, 215,
	216, 217, 0, 218, 0, 0, 117, 0, 118, 119,
	0, 0, 219, 0, 120, 0, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 0, 128, 129,
	132, 130, 0, 131, 0, 220, 133, 221, 134, 135,
	0, 0, 0, 0, 0, 136, 222, 0, 137, 0,
	223, 138, 139, 140, 0, 224, 141, 225, 142, 0,
	143, 144, 145, 226, 146, 147, 0, 149, 150, 148,
	151, 0, 152, 0, 153, 154, 227, 155, 0, 156,
	157, 158, 63, 228, 159, 160, 0, 161, 162, 0,
	163, 229, 230, 164, 0, 170, 165, 166, 167, 169,
	231, 168, 232, 0, 171, 65, 172, 173, 0, 233,
	234, 235, 0, 0, 174, 236, 237, 0, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 0, 0, 182,
	183, 184, 492, 239, 0, 0, 185, 74, 0, 0,
	61, 186, 187, 188, 189, 0, 62, 0, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 0,
	0, 190, 0, 1339, 0, 60, 80, 81, 191, 192,
	193, 194, 82, 195, 196, 0, 83, 197, 198, 84,
	0, 0, 199, 200, 201, 0, 202, 0, 0, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	0, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 203, 98, 204, 205, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 206, 104, 105, 207, 208, 0, 0, 0, 106,
	107, 209, 0, 108, 0, 109, 0, 0, 0, 0,
	110, 210, 0, 211, 0, 111, 112, 113, 212, 213,
	0, 0, 116, 0, 114, 0, 0, 115, 214, 215,
	216, 217, 0, 218, 0, 0, 117, 0, 118, 119,
	0, 0, 219, 0, 120, 0, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 0, 128, 129,
	132, 130, 0, 131, 0, 220, 133, 221, 134, 135,
	0, 0, 0, 0, 0, 136, 222, 0, 137, 0,
	223, 138, 139, 140, 0, 224, 141, 225, 142, 0,
	143, 144, 145, 226, 146, 147, 0, 149, 150, 148,
	151, 0, 152, 0, 153, 154, 227, 155, 0, 156,
	157, 158, 0, 228, 159, 160, 0, 161, 162, 0,
	163, 229, 230, 164, 0, 170, 165, 166, 167, 169,
	231, 168, 232, 0, 171, 0, 172, 173, 0, 233,
	234, 235, 0, 0, 174, 236, 237, 0, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 0, 0, 182,
	183, 184, 238, 239, 0, 0, 185, 0, 74, 0,
	0, 186, 187, 188, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 79, 0, 0,
	0, 0, 190, 0, 0, 0, 565, 80, 81, 191,
	192, 193, 194, 82, 195, 196, 0, 83, 197, 198,
	84, 0, 0, 199, 200, 201, 0, 202, 0, 0,
	0, 85, 86, 87, 0, 88, 0, 89, 90, 91,
	0, 0, 92, 93, 0, 0, 0, 0, 0, 0,
	94, 95, 96, 97, 203, 98, 204, 205, 0, 99,
	0, 100, 0, 0, 0, 101, 102, 0, 103, 0,
	0, 0, 206, 104, 105, 207, 208, 0, 0, 0,
	106, 107, 209, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 210, 0, 211, 0, 111, 112, 113, 212,
	213, 0, 0, 116, 0, 114, 0, 0, 115, 214,
	215, 216, 217, 0, 218, 0, 0, 117, 0, 118,
	119, 0, 0, 219, 0, 120, 0, 0, 121, 0,
	0, 122, 0, 123, 124, 125, 126, 127, 0, 128,
	129, 132, 130, 0, 131, 0, 220, 133, 221, 134,
	135, 0, 0, 449, 0, 0, 136, 222, 0, 137,
	0, 223, 138, 139, 140, 0, 224, 141, 225, 142,
	0, 143, 144, 145, 226, 146, 147, 0, 149, 150,
	148, 151, 0, 152, 0, 153, 154, 227, 155, 0,
	156, 157, 158, 0, 228, 159, 160, 0, 161, 162,
	0, 163, 229, 230, 164, 0, 170, 165, 166, 167,
	169, 231, 168, 232, 0, 171, 0, 172, 173, 0,
	233, 234, 235, 0, 0, 174, 236, 237, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 238, 239, 0, 0, 185, 74, 0,
	0, 0, 186, 187, 188, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 79, 0, 0,
	0, 0, 190, 0, 0, 0, 1102, 80, 81, 191,
	192, 193, 194, 82, 195, 196, 0, 83, 197, 198,
	84, 0, 0, 199, 200, 201, 0, 202, 0, 0,
	0, 85, 86, 87, 0, 88, 0, 89, 90, 91,
	0, 0, 92, 93, 0, 0, 0, 0, 0, 0,
	94, 95, 96, 97, 203, 98, 204, 205, 0, 99,
	0, 100, 0, 0, 0, 101, 102, 0, 103, 0,
	0, 0, 206, 104, 105, 207, 208, 0, 0, 0,
	106, 107, 209, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 210, 0, 211, 0, 111, 112, 113, 212,
	213, 0, 0, 116, 0, 114, 0, 0, 115, 214,
	215, 216, 217, 0, 218, 0, 0, 117, 0, 118,
	119, 0, 0, 219, 0, 120, 0, 0, 121, 0,
	0, 122, 0, 123, 124, 125, 126, 127, 0, 128,
	129, 132, 130, 0, 131, 0, 220, 133, 221, 134,
	135, 0, 0, 0, 0, 0, 136, 222, 0, 137,
	0, 223, 138, 139, 140, 0, 224, 141, 225, 142,
	0, 143, 144, 145, 226, 146, 147, 0, 149, 150,
	148, 151, 0, 152, 0, 153, 154, 227, 155, 0,
	156, 157, 158, 0, 228, 159, 160, 0, 161, 162,
	0, 163, 229, 230, 164, 0, 170, 165, 166, 167,
	169, 231, 168, 232, 0, 171, 0, 172, 173, 0,
	233, 234, 235, 0, 0, 174, 236, 237, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 238, 239, 0, 0, 185, 0, 74,
	0, 0, 186, 187, 188, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 190, 0, 0, 0, 691, 80, 81,
	191, 192, 193, 194, 82, 195, 196, 0, 83, 197,
	198, 84, 0, 0, 199, 200, 201, 0, 202, 0,
	0, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 0, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 203, 98, 204, 205, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 206, 104, 105, 207, 208, 0, 0,
	0, 106, 107, 209, 0, 108, 0, 109, 0, 0,
	0, 0, 110, 210, 0, 211, 0, 111, 112, 113,
	212, 213, 0, 0, 116, 0, 114, 0, 0, 115,
	214, 215, 216, 217, 0, 218, 0, 0, 117, 0,
	118, 119, 0, 0, 219, 0, 120, 0, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 0,
	128, 129, 132, 130, 0, 131, 0, 220, 133, 221,
	134, 135, 0, 0, 0, 0, 0, 136, 222, 0,
	137, 0, 223, 138, 139, 140, 0, 224, 141, 225,
	142, 0, 143, 144, 145, 226, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 0, 153, 154, 227, 155,
	0, 156, 157, 158, 0, 228, 159, 160, 0, 161,
	162, 0, 163, 229, 230, 164, 0, 170, 165, 166,
	167, 169, 231, 168, 232, 0, 171, 0, 172, 173,
	0, 233, 234, 235, 0, 0, 174, 236, 237, 0,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 0,
	0, 182, 183, 184, 238, 239, 0, 0, 185, 74,
	0, 0, 0, 186, 187, 188, 189, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 190, 0, 0, 0, 1008, 80, 81,
	191, 192, 193, 194, 82, 195, 196, 0, 83, 197,
	198, 84, 0, 0, 199, 200, 201, 0, 202, 0,
	0, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 0, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 203, 98, 204, 205, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 206, 104, 105, 207, 208, 0, 0,
	0, 106, 107, 209, 0, 108, 0, 109, 0, 0,
	0, 0, 110, 210, 0, 211, 0, 111, 112, 113,
	212, 213, 0, 0, 116, 0, 114, 0, 0, 115,
	214, 215, 216, 217, 0, 218, 0, 0, 117, 0,
	118, 119, 0, 0, 219, 0, 120, 0, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 0,
	128, 129, 132, 130, 0, 131, 0, 220, 133, 221,
	134, 135, 0, 0, 0, 0, 0, 136, 222, 0,
	137, 0, 223, 138, 139, 140, 0, 224, 141, 225,
	142, 0, 143, 144, 145, 226, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 0, 153, 154, 227, 155,
	0, 156, 157, 158, 0, 228, 159, 160, 0, 161,
	162, 0, 163, 229, 230, 164, 0, 170, 165, 166,
	167, 169, 231, 168, 232, 0, 171, 0, 172, 173,
	0, 233, 234, 235, 0, 0, 174, 236, 237, 0,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 0,
	0, 182, 183, 184, 238, 239, 0, 0, 185, 74,
	0, 0, 0, 186, 187, 188, 189, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 190, 0, 0, 0, 1560, 80, 81,
	191, 192, 193, 194, 82, 195, 196, 0, 83, 197,
	198, 84, 0, 0, 199, 200, 201, 0, 202, 0,
	0, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 0, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 203, 98, 204, 205, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 206, 104, 105, 207, 208, 0, 0,
	0, 106, 107, 209, 0, 108, 0, 109, 0, 0,
	0, 0, 110, 210, 0, 211, 0, 111, 112, 113,
	212, 213, 0, 0, 116, 0, 114, 0, 0, 115,
	214, 215, 216, 217, 0, 218, 0, 0, 117, 0,
	118, 119, 0, 0, 219, 0, 120, 0, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 0,
	128, 129, 132, 130, 0, 131, 0, 220, 133, 221,
	134, 135, 0, 0, 0, 0, 0, 136, 222, 0,
	137, 0, 223, 138, 139, 140, 0, 224, 141, 225,
	142, 0, 143, 144, 145, 226, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 0, 153, 154, 227, 155,
	0, 156, 157, 158, 0, 228, 159, 160, 0, 161,
	162, 0, 163, 229, 230, 164, 0, 170, 165, 166,
	167, 169, 231, 168, 232, 0, 171, 0, 172, 173,
	0, 233, 234, 235, 0, 0, 174, 236, 237, 0,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 0,
	0, 182, 183, 184, 238, 239, 0, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 607, 596, 597,
	594, 595, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 669, 0, 0,
	0, 190, 0, 0, 0, 0, 80, 81, 191, 638,
	193, 639, 82, 640, 641, 0, 83, 197, 198, 84,
	0, 0, 642, 643, 201, 0, 202, 0, 268, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	269, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 644, 98, 645, 646, 0, 99, 0,
	100, 0, 0, 0, 637, 102, 0, 103, 0, 0,
	0, 206, 104, 105, 207, 208, 602, 0, 0, 106,
	107, 647, 0, 108, 0, 109, 0, 0, 270, 0,
	110, 210, 0, 211, 0, 111, 112, 113, 212, 213,
	272, 0, 116, 0, 114, 0, 271, 115, 648, 649,
	650, 651, 0, 614, 0, 273, 117, 274, 118, 119,
	0, 0, 219, 275, 120, 276, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 277, 128, 129,
	132, 130, 0, 131, 603, 220, 133, 652, 134, 135,
	0, 0, 0, 0, 0, 136, 222, 278, 137, 279,
	223, 138, 139, 140, 0, 224, 141, 225, 142, 0,
	143, 144, 145, 653, 146, 147, 0, 149, 150, 148,
	151, 0, 152, 280, 153, 154, 227, 155, 0, 156,
	157, 158, 0, 228, 159, 160, 0, 161, 162, 281,
	163, 654, 230, 164, 0, 170, 165, 166, 167, 169,
	655, 168, 232, 0, 171, 0, 172, 173, 0, 233,
	656, 657, 0, 0, 174, 236, 237, 601, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 0, 0, 182,
	183, 184, 238, 658, 74, 0, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 0, 0, 0, 0, 0,
	77, 78, 0, 79, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 80, 81, 191, 192, 193, 194, 82,
	195, 196, 0, 83, 197, 198, 84, 0, 0, 199,
	200, 201, 0, 202, 0, 0, 0, 85, 86, 87,
	0, 88, 0, 89, 90, 91, 0, 0, 92, 93,
	0, 0, 0, 0, 0, 0, 94, 95, 769, 97,
	203, 98, 204, 205, 0, 99, 0, 100, 0, 0,
	0, 101, 102, 0, 103, 0, 0, 0, 206, 104,
	105, 207, 208, 0, 0, 0, 106, 107, 209, 0,
	108, 0, 109, 0, 0, 0, 0, 110, 210, 0,
	211, 0, 111, 112, 113, 212, 213, 0, 0, 116,
	0, 114, 0, 0, 115, 214, 215, 216, 217, 0,
	218, 0, 0, 117, 0, 118, 119, 0, 0, 219,
	0, 120, 0, 0, 121, 0, 0, 122, 0, 123,
	124, 125, 126, 127, 0, 128, 129, 132, 130, 0,
	131, 0, 220, 133, 221, 134, 135, 0, 0, 0,
	0, 0, 136, 222, 0, 137, 0, 223, 138, 139,
	140, 0, 224, 141, 225, 142, 0, 143, 144, 145,
	226, 146, 147, 0, 149, 150, 148, 151, 0, 152,
	0, 153, 154, 227, 155, 0, 156, 157, 158, 0,
	228, 159, 160, 0, 161, 162, 0, 163, 229, 230,
	164, 0, 170, 165, 166, 167, 169, 231, 168, 232,
	0, 171, 768, 172, 173, 0, 233, 234, 235, 0,
	0, 174, 236, 237, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 238,
	239, 0, 74, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 0, 0, 0, 0, 0, 0, 77, 78,
	0, 79, 0, 0, 0, 772, 190, 0, 0, 0,
	0, 80, 81, 191, 192, 193, 194, 82, 195, 196,
	0, 83, 197, 198, 84, 0, 0, 199, 200, 201,
	0, 202, 0, 0, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 0, 92, 93, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 97, 203, 98,
	204, 205, 0, 99, 0, 100, 0, 0, 0, 101,
	102, 0, 103, 0, 0, 0, 206, 104, 105, 207,
	208, 0, 0, 0, 106, 107, 209, 0, 108, 0,
	109, 0, 0, 0, 0, 110, 210, 0, 211, 0,
	111, 112, 113, 212, 213, 0, 0, 116, 0, 114,
	0, 0, 115, 214, 215, 216, 217, 0, 218, 0,
	0, 117, 0, 118, 119, 0, 0, 219, 0, 120,
	0, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 0, 128, 129, 132, 130, 0, 131, 0,
	220, 133, 221, 134, 135, 0, 0, 0, 0, 0,
	136, 222, 0, 137, 0, 223, 138, 139, 140, 0,
	224, 141, 225, 142, 0, 143, 144, 145, 226, 146,
	147, 0, 149, 150, 148, 151, 0, 152, 0, 153,
	154, 227, 155, 0, 156, 157, 158, 0, 228, 159,
	160, 0, 161, 162, 0, 163, 229, 230, 164, 0,
	170, 165, 166, 167, 169, 231, 168, 232, 0, 171,
	0, 172, 173, 0, 233, 234, 235, 0, 0, 174,
	236, 237, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 238, 239, 0,
	488, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	0, 0, 0, 0, 0, 0, 77, 78, 0, 79,
	0, 0, 0, 772, 190, 0, 0, 0, 0, 80,
	81, 191, 192, 193, 194, 82, 195, 196, 0, 83,
	197, 198, 84, 0, 0, 199, 200, 201, 0, 202,
	0, 268, 0, 85, 86, 87, 0, 88, 0, 89,
	90, 91, 0, 269, 92, 93, 0, 0, 0, 0,
	0, 0, 94, 95, 96, 97, 203, 98, 204, 205,
	0, 99, 0, 100, 0, 0, 0, 101, 102, 0,
	103, 0, 0, 0, 206, 104, 105, 207, 208, 0,
	0, 0, 106, 107, 209, 0, 108, 0, 109, 0,
	0, 270, 0, 110, 210, 0, 211, 0, 111, 112,
	113, 212, 213, 272, 0, 116, 0, 114, 0, 271,
	115, 214, 215, 216, 217, 0, 218, 0, 273, 117,
	274, 118, 119, 0, 0, 219, 275, 120, 276, 0,
	121, 0, 0, 122, 0, 123, 124, 125, 126, 127,
	277, 128, 129, 132, 130, 0, 131, 0, 220, 133,
	221, 134, 135, 0, 0, 0, 0, 0, 136, 222,
	278, 137, 279, 223, 138, 139, 140, 0, 224, 141,
	225, 142, 0, 143, 144, 145, 226, 146, 147, 0,
	149, 150, 148, 151, 0, 152, 280, 153, 154, 227,
	155, 0, 156, 157, 158, 0, 228, 159, 160, 0,
	161, 162, 281, 163, 229, 230, 164, 0, 170, 165,
	166, 167, 169, 231, 168, 232, 0, 171, 0, 172,
	173, 0, 233, 234, 235, 0, 0, 174, 236, 237,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 238, 239, 74, 0, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 80, 81, 191, 192,
	193, 194, 82, 195, 196, 0, 83, 197, 198, 84,
	0, 0, 199, 200, 201, 972, 202, 0, 0, 0,
	85, 86, 87, 0, 88, 970, 89, 90, 91, 0,
	0, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 203, 98, 204, 205, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 206, 104, 105, 207, 208, 0, 1077, 0, 106,
	107, 209, 0, 108, 0, 109, 975, 0, 0, 0,
	110, 210, 0, 211, 0, 111, 112, 113, 212, 213,
	0, 0, 116, 1075, 114, 0, 0, 115, 214, 215,
	216, 217, 0, 218, 0, 0, 117, 0, 118, 119,
	0, 0, 219, 0, 120, 0, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 0, 128, 129,
	132, 130, 0, 131, 0, 220, 133, 221, 134, 135,
	0, 0, 0, 0, 0, 136, 222, 0, 137, 0,
	223, 138, 139, 140, 0, 224, 141, 225, 142, 974,
	143, 144, 145, 226, 146, 147, 0, 149, 150, 148,
	151, 0, 152, 0, 153, 154, 227, 155, 0, 156,
	157, 158, 0, 228, 159, 160, 0, 161, 162, 0,
	163, 229, 230, 164, 0, 170, 165, 166, 167, 169,
	231, 168, 232, 0, 171, 0, 172, 173, 0, 233,
	234, 235, 0, 0, 174, 236, 237, 0, 175, 176,
	177, 178, 0, 1076, 179, 180, 181, 0, 0, 182,
	183, 184, 238, 239, 74, 0, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 0, 0, 0, 0, 0,
	77, 78, 0, 79, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 80, 81, 191, 192, 193, 194, 82,
	195, 196, 0, 83, 197, 198, 84, 0, 0, 199,
	200, 201, 972, 202, 0, 0, 967, 85, 86, 87,
	0, 88, 970, 89, 90, 91, 0, 0, 92, 93,
	0, 0, 0, 0, 0, 0, 94, 95, 96, 97,
	203, 98, 204, 205, 0, 99, 0, 100, 0, 0,
	0, 101, 102, 0, 103, 0, 0, 0, 206, 104,
	105, 207, 208, 0, 0, 0, 106, 107, 209, 0,
	108, 0, 109, 975, 0, 0, 0, 110, 210, 0,
	211, 0, 111, 112, 113, 966, 213, 0, 0, 116,
	0, 114, 0, 0, 115, 214, 215, 216, 217, 0,
	218, 0, 0, 117, 0, 118, 119, 0, 0, 219,
	0, 120, 0, 0, 121, 0, 0, 122, 0, 123,
	124, 125, 126, 127, 0, 128, 129, 132, 130, 0,
	131, 0, 220, 133, 221, 134, 135, 0, 0, 0,
	0, 0, 136, 222, 0, 137, 0, 223, 138, 139,
	140, 0, 224, 141, 225, 142, 974, 143, 144, 145,
	226, 146, 147, 0, 149, 150, 148, 151, 0, 152,
	0, 153, 154, 227, 155, 0, 156, 157, 158, 0,
	228, 159, 160, 0, 161, 162, 0, 163, 229, 230,
	164, 0, 170, 165, 166, 167, 169, 231, 168, 232,
	0, 171, 0, 172, 173, 0, 233, 234, 235, 0,
	0, 174, 236, 237, 0, 175, 176, 177, 178, 0,
	973, 179, 180, 181, 0, 0, 182, 183, 184, 238,
	239, 74, 0, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 0, 0, 0, 0, 0, 77, 78, 0,
	79, 0, 0, 0, 0, 190, 0, 1339, 0, 0,
	80, 81, 191, 192, 193, 194, 82, 195, 196, 0,
	83, 197, 198, 84, 0, 0, 199, 200, 201, 0,
	202, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 203, 98, 204,
	205, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 206, 104, 105, 207, 208,
	0, 0, 0, 106, 107, 209, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 210, 0, 211, 0, 111,
	112, 113, 212, 213, 0, 0, 116, 0, 114, 0,
	0, 115, 214, 215, 216, 217, 0, 218, 0, 0,
	117, 0, 118, 119, 0, 0, 219, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 220,
	133, 221, 134, 135, 0, 0, 0, 0, 0, 136,
	222, 0, 137, 0, 223, 138, 139, 140, 0, 224,
	141, 225, 142, 0, 143, 144, 145, 226, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 0, 153, 154,
	227, 155, 0, 156, 157, 158, 0, 228, 159, 160,
	0, 161, 162, 0, 163, 229, 230, 164, 0, 170,
	165, 166, 167, 169, 231, 168, 232, 0, 171, 0,
	172, 173, 0, 233, 234, 235, 0, 0, 174, 236,
	237, 0, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 0, 0, 182, 183, 184, 238, 239, 74, 0,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 0,
	0, 0, 0, 0, 77, 78, 0, 79, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 80, 81, 191,
	192, 193, 194, 82, 195, 196, 0, 83, 197, 198,
	84, 0, 0, 199, 200, 201, 0, 202, 0, 0,
	0, 85, 86, 87, 0, 88, 0, 89, 90, 91,
	0, 0, 92, 93, 0, 0, 0, 0, 0, 0,
	94, 95, 96, 97, 203, 98, 204, 205, 0, 99,
	0, 100, 0, 0, 0, 101, 102, 0, 103, 0,
	0, 0, 206, 104, 105, 207, 208, 0, 0, 0,
	106, 107, 209, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 210, 0, 211, 0, 111, 112, 113, 212,
	213, 0, 0, 116, 0, 114, 0, 0, 115, 214,
	215, 216, 217, 0, 218, 0, 0, 117, 0, 118,
	119, 0, 0, 219, 0, 120, 0, 0, 121, 0,
	0, 122, 0, 123, 124, 125, 126, 127, 0, 128,
	129, 132, 130, 0, 131, 0, 220, 133, 221, 134,
	135, 0, 0, 449, 0, 0, 136, 222, 0, 137,
	0, 223, 138, 139, 140, 0, 224, 141, 225, 142,
	0, 143, 144, 145, 226, 146, 147, 0, 149, 150,
	148, 151, 0, 152, 0, 153, 154, 227, 155, 0,
	156, 157, 158, 0, 228, 159, 160, 0, 161, 162,
	0, 163, 229, 230, 164, 0, 170, 165, 166, 167,
	169, 231, 168, 232, 0, 171, 0, 172, 173, 0,
	233, 234, 235, 0, 0, 174, 236, 237, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 238, 239, 74, 0, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 80, 81, 191, 192, 193, 194,
	82, 195, 196, 0, 83, 197, 198, 84, 0, 0,
	199, 200, 201, 0, 202, 0, 0, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 0, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 203, 98, 204, 205, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 206,
	104, 105, 207, 208, 0, 0, 0, 106, 107, 209,
	0, 108, 0, 109, 0, 0, 0, 0, 110, 210,
	0, 211, 0, 111, 112, 113, 719, 213, 0, 0,
	116, 0, 114, 0, 0, 115, 214, 215, 216, 217,
	0, 218, 0, 0, 117, 0, 118, 119, 0, 0,
	219, 0, 120, 0, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 0, 128, 129, 132, 130,
	0, 131, 0, 220, 133, 221, 134, 135, 0, 0,
	449, 0, 0, 136, 222, 0, 137, 0, 223, 138,
	139, 140, 0, 224, 141, 225, 142, 0, 143, 144,
	145, 226, 146, 147, 0, 149, 150, 148, 151, 0,
	152, 0, 153, 154, 227, 155, 0, 156, 157, 158,
	0, 228, 159, 160, 0, 161, 162, 0, 163, 229,
	230, 164, 0, 170, 165, 166, 167, 169, 231, 168,
	232, 0, 171, 0, 172, 173, 0, 233, 234, 235,
	0, 0, 174, 236, 237, 0, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 0, 0, 182, 183, 184,
	238, 239, 74, 0, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 0, 0, 0, 77, 78,
	500, 79, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 80, 81, 191, 192, 193, 194, 82, 195, 196,
	0, 83, 197, 198, 84, 0, 0, 199, 200, 201,
	0, 202, 0, 0, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 0, 92, 93, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 97, 203, 98,
	204, 205, 0, 99, 0, 100, 0, 0, 0, 101,
	102, 0, 103, 0, 0, 0, 206, 104, 105, 207,
	208, 0, 0, 0, 106, 107, 209, 0, 108, 0,
	109, 0, 0, 0, 0, 110, 210, 0, 211, 0,
	111, 112, 113, 212, 213, 0, 0, 116, 0, 114,
	0, 0, 115, 214, 215, 216, 217, 0, 218, 0,
	0, 117, 0, 118, 119, 0, 0, 219, 0, 120,
	0, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 0, 128, 129, 132, 130, 0, 131, 0,
	220, 133, 221, 134, 135, 0, 0, 0, 0, 0,
	136, 222, 0, 137, 0, 223, 138, 139, 140, 0,
	224, 141, 225, 142, 0, 143, 144, 145, 226, 146,
	147, 0, 149, 150, 148, 151, 0, 152, 0, 153,
	154, 227, 155, 0, 156, 157, 158, 0, 228, 159,
	160, 0, 161, 162, 0, 163, 229, 230, 164, 0,
	170, 165, 166, 167, 169, 231, 168, 232, 0, 171,
	0, 172, 173, 0, 233, 234, 235, 0, 0, 174,
	236, 237, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 238, 239, 74,
	0, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 80, 81,
	191, 192, 193, 194, 82, 195, 196, 0, 83, 197,
	198, 84, 0, 0, 199, 200, 201, 0, 202, 0,
	0, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 0, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 203, 98, 204, 205, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 206, 104, 105, 207, 208, 0, 0,
	0, 106, 107, 209, 0, 108, 0, 109, 0, 0,
	0, 0, 110, 210, 0, 211, 0, 111, 112, 113,
	461, 213, 0, 0, 116, 0, 114, 0, 0, 115,
	214, 215, 216, 217, 0, 218, 0, 0, 117, 0,
	118, 119, 0, 0, 219, 0, 120, 0, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 0,
	128, 129, 132, 130, 0, 131, 0, 220, 133, 221,
	134, 135, 0, 0, 449, 0, 0, 136, 222, 0,
	137, 0, 223, 138, 139, 140, 0, 224, 141, 225,
	142, 0, 143, 144, 145, 226, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 0, 153, 154, 227, 155,
	0, 156, 157, 158, 0, 228, 159, 160, 0, 161,
	162, 0, 163, 229, 230, 164, 0, 170, 165, 166,
	167, 169, 231, 168, 232, 0, 171, 0, 172, 173,
	0, 233, 234, 235, 0, 0, 174, 236, 237, 0,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 0,
	0, 182, 183, 184, 238, 239, 74, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 0, 0, 0,
	0, 0, 77, 78, 0, 79, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 80, 81, 191, 192, 193,
	194, 82, 195, 196, 0, 83, 197, 198, 84, 0,
	0, 199, 200, 201, 0, 202, 0, 0, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 0,
	92, 93, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 97, 203, 98, 204, 205, 0, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	206, 104, 105, 207, 208, 0, 0, 0, 106, 107,
	209, 0, 108, 0, 109, 0, 0, 0, 0, 110,
	210, 0, 211, 0, 111, 112, 113, 454, 213, 0,
	0, 116, 0, 114, 0, 0, 115, 214, 215, 216,
	217, 0, 218, 0, 0, 117, 0, 118, 119, 0,
	0, 219, 0, 120, 0, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 0, 128, 129, 132,
	130, 0, 131, 0, 220, 133, 221, 134, 135, 0,
	0, 449, 0, 0, 136, 222, 0, 137, 0, 223,
	138, 139, 140, 0, 224, 141, 225, 142, 0, 143,
	144, 145, 226, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 0, 153, 154, 227, 155, 0, 156, 157,
	158, 0, 228, 159, 160, 0, 161, 162, 0, 163,
	229, 230, 164, 0, 170, 165, 166, 167, 169, 231,
	168, 232, 0, 171, 0, 172, 173, 0, 233, 234,
	235, 0, 0, 174, 236, 237, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 238, 239, 74, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 0, 0, 0, 0, 0, 77,
	78, 366, 79, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 80, 81, 191, 192, 193, 194, 82, 195,
	196, 0, 83, 197, 198, 84, 0, 0, 199, 200,
	201, 0, 202, 0, 0, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 0, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 203,
	98, 204, 205, 0, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 206, 104, 105,
	207, 208, 0, 0, 0, 106, 107, 209, 0, 108,
	0, 109, 0, 0, 0, 0, 110, 210, 0, 211,
	0, 111, 112, 113, 212, 213, 0, 0, 116, 0,
	114, 0, 0, 115, 214, 215, 216, 217, 0, 218,
	0, 0, 117, 0, 118, 119, 0, 0, 219, 0,
	120, 0, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 0, 128, 129, 132, 130, 0, 131,
	0, 220, 133, 221, 134, 135, 0, 0, 0, 0,
	0, 136, 222, 0, 137, 0, 223, 138, 139, 140,
	0, 224, 141, 225, 365, 0, 143, 144, 145, 226,
	146, 147, 0, 149, 150, 148, 151, 0, 152, 0,
	153, 154, 227, 155, 0, 156, 157, 158, 0, 228,
	159, 160, 0, 161, 162, 0, 163, 229, 230, 164,
	0, 170, 165, 166, 167, 169, 231, 168, 232, 0,
	171, 0, 172, 173, 0, 233, 234, 235, 0, 0,
	174, 236, 237, 0, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 0, 182, 183, 184, 238, 239,
	74, 0, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 0, 0, 0, 0, 0, 77, 78, 0, 79,
	0, 0, 0, 0, 190, 0, 0, 0, 0, 80,
	81, 191, 192, 193, 194, 82, 195, 196, 0, 83,
	197, 198, 84, 0, 0, 199, 200, 201, 0, 202,
	0, 0, 0, 85, 86, 87, 0, 88, 0, 89,
	90, 91, 0, 0, 92, 93, 0, 0, 0, 0,
	0, 0, 94, 95, 96, 97, 203, 98, 204, 205,
	0, 99, 0, 100, 0, 0, 0, 101, 102, 0,
	103, 0, 0, 0, 206, 104, 105, 207, 208, 0,
	0, 0, 106, 107, 209, 0, 108, 0, 109, 0,
	0, 0, 0, 110, 210, 0, 211, 0, 111, 112,
	113, 212, 213, 0, 0, 116, 0, 114, 0, 0,
	115, 214, 215, 216, 217, 0, 218, 0, 0, 117,
	0, 118, 119, 0, 0, 219, 0, 120, 0, 0,
	121, 0, 0, 122, 0, 123, 124, 125, 126, 127,
	0, 128, 129, 132, 130, 0, 131, 0, 220, 133,
	221, 134, 135, 0, 0, 0, 0, 0, 136, 222,
	0, 137, 0, 223, 138, 139, 140, 0, 224, 141,
	225, 142, 0, 143, 144, 145, 226, 146, 147, 0,
	149, 150, 148, 151, 0, 152, 0, 153, 154, 227,
	155, 0, 156, 157, 158, 0, 228, 159, 160, 0,
	161, 162, 0, 163, 229, 230, 164, 0, 170, 165,
	166, 167, 169, 231, 168, 232, 0, 171, 0, 172,
	173, 0, 233, 234, 235, 0, 0, 174, 236, 237,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 238, 239, 74, 0, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 80, 81, 191, 192,
	193, 194, 82, 195, 196, 0, 83, 197, 198, 84,
	0, 0, 199, 200, 201, 0, 202, 0, 0, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	0, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 203, 98, 204, 205, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 206, 104, 105, 207, 208, 0, 0, 0, 106,
	107, 209, 0, 108, 0, 109, 0, 0, 0, 0,
	110, 210, 0, 211, 0, 111, 112, 113, 1251, 213,
	0, 0, 116, 0, 114, 0, 0, 115, 214, 215,
	216, 217, 0, 218, 0, 0, 117, 0, 118, 119,
	0, 0, 219, 0, 120, 0, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 0, 128, 129,
	132, 130, 0, 131, 0, 220, 133, 221, 134, 135,
	0, 0, 0, 0, 0, 136, 222, 0, 137, 0,
	223, 138, 139, 140, 0, 224, 141, 225, 142, 0,
	143, 144, 145, 226, 146, 147, 0, 149, 150, 148,
	151, 0, 152, 0, 153, 154, 227, 155, 0, 156,
	157, 158, 0, 228, 159, 160, 0, 161, 162, 0,
	163, 229, 230, 164, 0, 170, 165, 166, 167, 169,
	231, 168, 232, 0, 171, 0, 172, 173, 0, 233,
	234, 235, 0, 0, 174, 236, 237, 0, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 0, 0, 182,
	183, 184, 238, 239, 74, 0, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 0, 0, 0, 0, 0,
	77, 78, 0, 79, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 80, 81, 191, 192, 193, 194, 82,
	195, 196, 0, 83, 197, 198, 84, 0, 0, 199,
	200, 201, 0, 202, 0, 0, 0, 85, 86, 87,
	0, 88, 0, 89, 90, 91, 0, 0, 92, 93,
	0, 0, 0, 0, 0, 0, 94, 95, 96, 97,
	203, 98, 204, 205, 0, 99, 0, 100, 0, 0,
	0, 101, 102, 0, 103, 0, 0, 0, 206, 104,
	105, 207, 208, 0, 0, 0, 106, 107, 209, 0,
	108, 0, 109, 0, 0, 0, 0, 110, 210, 0,
	211, 0, 111, 112, 113, 1249, 213, 0, 0, 116,
	0, 114, 0, 0, 115, 214, 215, 216, 217, 0,
	218, 0, 0, 117, 0, 118, 119, 0, 0, 219,
	0, 120, 0, 0, 121, 0, 0, 122, 0, 123,
	124, 125, 126, 127, 0, 128, 129, 132, 130, 0,
	131, 0, 220, 133, 221, 134, 135, 0, 0, 0,
	0, 0, 136, 222, 0, 137, 0, 223, 138, 139,
	140, 0, 224, 141, 225, 142, 0, 143, 144, 145,
	226, 146, 147, 0, 149, 150, 148, 151, 0, 152,
	0, 153, 154, 227, 155, 0, 156, 157, 158, 0,
	228, 159, 160, 0, 161, 162, 0, 163, 229, 230,
	164, 0, 170, 165, 166, 167, 169, 231, 168, 232,
	0, 171, 0, 172, 173, 0, 233, 234, 235, 0,
	0, 174, 236, 237, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 238,
	239, 74, 0, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 0, 0, 0, 0, 0, 77, 78, 0,
	79, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	80, 81, 191, 192, 193, 194, 82, 195, 196, 0,
	83, 197, 198, 84, 0, 0, 199, 200, 201, 0,
	202, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 203, 98, 204,
	205, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 206, 104, 105, 207, 208,
	0, 0, 0, 106, 107, 209, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 210, 0, 211, 0, 111,
	112, 113, 1238, 213, 0, 0, 116, 0, 114, 0,
	0, 115, 214, 215, 216, 217, 0, 218, 0, 0,
	117, 0, 118, 119, 0, 0, 219, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 220,
	133, 221, 134, 135, 0, 0, 0, 0, 0, 136,
	222, 0, 137, 0, 223, 138, 139, 140, 0, 224,
	141, 225, 142, 0, 143, 144, 145, 226, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 0, 153, 154,
	227, 155, 0, 156, 157, 158, 0, 228, 159, 160,
	0, 161, 162, 0, 163, 229, 230, 164, 0, 170,
	165, 166, 167, 169, 231, 168, 232, 0, 171, 0,
	172, 173, 0, 233, 234, 235, 0, 0, 174, 236,
	237, 0, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 0, 0, 182, 183, 184, 238, 239, 74, 0,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 0,
	0, 0, 0, 0, 77, 78, 0, 79, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 80, 81, 191,
	192, 193, 194, 82, 195, 196, 0, 83, 197, 198,
	84, 0, 0, 199, 200, 201, 0, 202, 0, 0,
	0, 85, 86, 87, 0, 88, 0, 89, 90, 91,
	0, 0, 92, 93, 0, 0, 0, 0, 0, 0,
	94, 95, 96, 97, 203, 98, 204, 205, 0, 99,
	0, 100, 0, 0, 0, 101, 102, 0, 103, 0,
	0, 0, 206, 104, 105, 207, 208, 0, 0, 0,
	106, 107, 209, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 210, 0, 211, 0, 111, 112, 113, 837,
	213, 0, 0, 116, 0, 114, 0, 0, 115, 214,
	215, 216, 217, 0, 218, 0, 0, 117, 0, 118,
	119, 0, 0, 219, 0, 120, 0, 0, 121, 0,
	0, 122, 0, 123, 124, 125, 126, 127, 0, 128,
	129, 132, 130, 0, 131, 0, 220, 133, 221, 134,
	135, 0, 0, 0, 0, 0, 136, 222, 0, 137,
	0, 223, 138, 139, 140, 0, 224, 141, 225, 142,
	0, 143, 144, 145, 226, 146, 147, 0, 149, 150,
	148, 151, 0, 152, 0, 153, 154, 227, 155, 0,
	156, 157, 158, 0, 228, 159, 160, 0, 161, 162,
	0, 163, 229, 230, 164, 0, 170, 165, 166, 167,
	169, 231, 168, 232, 0, 171, 0, 172, 173, 0,
	233, 234, 235, 0, 0, 174, 236, 237, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 238, 239, 74, 0, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 80, 81, 191, 192, 193, 194,
	82, 195, 196, 0, 83, 197, 198, 84, 0, 0,
	199, 200, 201, 0, 202, 0, 0, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 0, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 203, 98, 204, 205, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 206,
	104, 105, 207, 208, 0, 0, 0, 106, 107, 209,
	0, 108, 0, 109, 0, 0, 0, 0, 110, 210,
	0, 211, 0, 111, 112, 113, 212, 213, 0, 0,
	116, 0, 114, 0, 0, 115, 214, 215, 216, 217,
	0, 218, 0, 0, 117, 0, 118, 119, 0, 0,
	219, 0, 120, 0, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 0, 128, 129, 132, 130,
	0, 131, 0, 220, 133, 221, 134, 135, 0, 0,
	0, 0, 0, 136, 222, 0, 137, 0, 223, 138,
	139, 140, 0, 224, 141, 225, 142, 0, 143, 144,
	145, 226, 146, 147, 0, 149, 150, 148, 151, 0,
	152, 0, 153, 154, 227, 155, 0, 380, 157, 158,
	0, 228, 159, 160, 0, 161, 162, 0, 163, 229,
	230, 164, 0, 170, 165, 166, 167, 169, 231, 168,
	232, 0, 171, 0, 172, 173, 0, 233, 234, 235,
	0, 0, 174, 236, 237, 0, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 0, 0, 182, 183, 184,
	238, 239, 74, 0, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 0, 0, 0, 77, 78,
	0, 79, 0, 0, 0, 0, 190, 0, 704, 0,
	0, 80, 81, 191, 192, 193, 194, 82, 195, 196,
	0, 83, 197, 198, 84, 0, 0, 199, 200, 201,
	0, 202, 0, 0, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 0, 92, 93, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 97, 203, 98,
	204, 205, 0, 99, 0, 100, 0, 0, 0, 101,
	102, 0, 103, 0, 0, 0, 206, 104, 105, 207,
	208, 0, 0, 0, 106, 107, 209, 0, 108, 0,
	109, 0, 0, 0, 0, 110, 210, 0, 211, 0,
	111, 112, 113, 212, 213, 0, 0, 116, 0, 114,
	0, 0, 115, 214, 215, 216, 217, 0, 218, 0,
	0, 117, 0, 118, 119, 0, 0, 219, 0, 120,
	0, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 0, 128, 129, 132, 130, 0, 131, 0,
	220, 133, 221, 134, 135, 0, 0, 0, 0, 0,
	136, 222, 0, 137, 0, 223, 138, 139, 140, 0,
	224, 141, 225, 142, 0, 143, 144, 145, 226, 146,
	147, 0, 149, 150, 148, 151, 0, 152, 0, 153,
	154, 227, 155, 0, 156, 157, 158, 0, 228, 159,
	160, 0, 0, 162, 0, 163, 229, 230, 164, 0,
	170, 165, 166, 167, 169, 231, 168, 232, 0, 171,
	0, 172, 173, 0, 233, 234, 235, 0, 0, 174,
	236, 237, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 238, 239, 74,
	0, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 80, 81,
	191, 192, 193, 194, 82, 195, 196, 0, 83, 197,
	198, 84, 0, 0, 199, 200, 201, 0, 202, 0,
	0, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 0, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 203, 98, 204, 205, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 206, 104, 105, 207, 208, 0, 0,
	0, 106, 107, 209, 0, 108, 0, 109, 0, 0,
	0, 0, 110, 210, 0, 211, 0, 111, 112, 113,
	550, 213, 0, 0, 116, 0, 114, 0, 0, 115,
	214, 215, 216, 217, 0, 218, 0, 0, 117, 0,
	118, 119, 0, 0, 219, 0, 120, 0, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 0,
	128, 129, 132, 130, 0, 131, 0, 220, 133, 221,
	134, 135, 0, 0, 0, 0, 0, 136, 222, 0,
	137, 0, 223, 138, 139, 140, 0, 224, 141, 225,
	142, 0, 143, 144, 145, 226, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 0, 153, 154, 227, 155,
	0, 156, 157, 158, 0, 228, 159, 160, 0, 161,
	162, 0, 163, 229, 230, 164, 0, 170, 165, 166,
	167, 169, 231, 168, 232, 0, 171, 0, 172, 173,
	0, 233, 234, 235, 0, 0, 174, 236, 237, 0,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 0,
	0, 182, 183, 184, 238, 239, 74, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 0, 0, 0,
	0, 0, 77, 78, 0, 79, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 80, 81, 191, 192, 193,
	194, 82, 195, 196, 0, 83, 197, 198, 84, 0,
	0, 199, 200, 201, 0, 202, 0, 0, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 0,
	92, 93, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 97, 203, 98, 204, 205, 0, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	206, 104, 105, 207, 208, 0, 0, 0, 106, 107,
	209, 0, 108, 0, 109, 0, 0, 0, 0, 110,
	210, 0, 211, 0, 111, 112, 113, 546, 213, 0,
	0, 116, 0, 114, 0, 0, 115, 214, 215, 216,
	217, 0, 218, 0, 0, 117, 0, 118, 119, 0,
	0, 219, 0, 120, 0, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 0, 128, 129, 132,
	130, 0, 131, 0, 220, 133, 221, 134, 135, 0,
	0, 0, 0, 0, 136, 222, 0, 137, 0, 223,
	138, 139, 140, 0, 224, 141, 225, 142, 0, 143,
	144, 145, 226, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 0, 153, 154, 227, 155, 0, 156, 157,
	158, 0, 228, 159, 160, 0, 161, 162, 0, 163,
	229, 230, 164, 0, 170, 165, 166, 167, 169, 231,
	168, 232, 0, 171, 0, 172, 173, 0, 233, 234,
	235, 0, 0, 174, 236, 237, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 238, 239, 74, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 0, 0, 0, 0, 0, 77,
	78, 0, 79, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 80, 81, 191, 192, 193, 194, 82, 195,
	196, 0, 83, 197, 198, 84, 0, 0, 199, 200,
	506, 0, 202, 0, 0, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 0, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 203,
	98, 204, 205, 0, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 206, 104, 105,
	207, 208, 0, 0, 0, 106, 107, 209, 0, 108,
	0, 109, 0, 0, 0, 0, 110, 210, 0, 211,
	0, 111, 112, 113, 212, 213, 0, 0, 116, 0,
	114, 0, 0, 115, 214, 215, 216, 217, 0, 218,
	0, 0, 117, 0, 118, 119, 0, 0, 219, 0,
	120, 0, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 391, 0, 128, 129, 132, 130, 0, 131,
	0, 220, 133, 221, 134, 135, 0, 0, 0, 0,
	0, 136, 222, 0, 137, 0, 223, 138, 139, 140,
	0, 224, 141, 225, 142, 0, 143, 144, 145, 226,
	146, 147, 0, 149, 150, 148, 151, 0, 152, 0,
	153, 154, 227, 155, 0, 156, 157, 158, 0, 228,
	159, 160, 0, 161, 162, 0, 163, 229, 230, 164,
	0, 170, 165, 166, 167, 169, 231, 168, 232, 0,
	171, 0, 172, 173, 0, 390, 234, 235, 0, 0,
	386, 236, 237, 0, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 0, 182, 183, 184, 238, 239,
	74, 0, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 0, 0, 0, 0, 0, 77, 78, 0, 79,
	0, 0, 0, 0, 190, 0, 0, 0, 0, 80,
	81, 191, 192, 193, 194, 82, 195, 196, 0, 83,
	197, 198, 84, 0, 0, 199, 200, 201, 0, 202,
	0, 0, 0, 85, 86, 87, 0, 88, 0, 89,
	90, 91, 0, 0, 92, 93, 0, 0, 0, 0,
	0, 0, 94, 95, 96, 97, 203, 98, 204, 205,
	0, 99, 0, 100, 0, 0, 0, 101, 102, 0,
	103, 0, 0, 0, 206, 104, 105, 207, 208, 0,
	0, 0, 106, 107, 209, 0, 108, 0, 109, 0,
	0, 0, 0, 110, 210, 0, 211, 0, 111, 112,
	113, 212, 213, 0, 0, 116, 0, 114, 0, 0,
	115, 214, 215, 216, 217, 0, 218, 0, 0, 117,
	0, 118, 119, 0, 0, 219, 0, 120, 0, 0,
	121, 0, 0, 122, 0, 123, 124, 125, 126, 391,
	0, 128, 129, 132, 130, 0, 131, 0, 220, 133,
	221, 134, 135, 0, 0, 0, 0, 0, 136, 222,
	0, 137, 0, 223, 138, 139, 140, 0, 224, 141,
	225, 142, 0, 143, 144, 145, 226, 146, 147, 0,
	149, 150, 148, 151, 0, 152, 0, 153, 154, 227,
	155, 0, 156, 157, 158, 0, 228, 159, 160, 0,
	161, 162, 0, 163, 229, 230, 164, 0, 170, 165,
	166, 167, 169, 231, 168, 232, 0, 171, 0, 172,
	173, 0, 390, 234, 235, 0, 0, 386, 236, 237,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 238, 239, 74, 0, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 80, 81, 191, 192,
	193, 194, 82, 195, 196, 0, 83, 197, 198, 84,
	0, 0, 199, 200, 201, 0, 202, 0, 0, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	0, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 203, 98, 204, 205, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 206, 104, 105, 207, 208, 0, 0, 0, 106,
	107, 209, 0, 108, 0, 109, 0, 0, 0, 0,
	110, 210, 0, 211, 0, 111, 112, 113, 484, 213,
	0, 0, 116, 0, 114, 0, 0, 115, 214, 215,
	216, 217, 0, 218, 0, 0, 117, 0, 118, 119,
	0, 0, 219, 0, 120, 0, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 0, 128, 129,
	132, 130, 0, 131, 0, 220, 133, 221, 134, 135,
	0, 0, 0, 0, 0, 136, 222, 0, 137, 0,
	223, 138, 139, 140, 0, 224, 141, 225, 142, 0,
	143, 144, 145, 226, 146, 147, 0, 149, 150, 148,
	151, 0, 152, 0, 153, 154, 227, 155, 0, 156,
	157, 158, 0, 228, 159, 160, 0, 161, 162, 0,
	163, 229, 230, 164, 0, 170, 165, 166, 167, 169,
	231, 168, 232, 0, 171, 0, 172, 173, 0, 233,
	234, 235, 0, 0, 174, 236, 237, 0, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 0, 0, 182,
	183, 184, 238, 239, 74, 0, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 0, 0, 0, 0, 0,
	77, 78, 0, 79, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 80, 81, 191, 192, 193, 194, 82,
	195, 196, 0, 83, 197, 198, 84, 0, 0, 199,
	200, 201, 0, 202, 0, 0, 0, 85, 86, 87,
	0, 88, 0, 89, 90, 91, 0, 0, 92, 93,
	0, 0, 0, 0, 0, 0, 94, 95, 96, 97,
	203, 98, 204, 205, 0, 99, 0, 100, 0, 0,
	0, 101, 102, 0, 103, 0, 0, 0, 206, 104,
	105, 207, 208, 0, 0, 0, 106, 107, 209, 0,
	108, 0, 109, 0, 0, 0, 0, 110, 210, 0,
	211, 0, 111, 112, 113, 481, 213, 0, 0, 116,
	0, 114, 0, 0, 115, 214, 215, 216, 217, 0,
	218, 0, 0, 117, 0, 118, 119, 0, 0, 219,
	0, 120, 0, 0, 121, 0, 0, 122, 0, 123,
	124, 125, 126, 127, 0, 128, 129, 132, 130, 0,
	131, 0, 220, 133, 221, 134, 135, 0, 0, 0,
	0, 0, 136, 222, 0, 137, 0, 223, 138, 139,
	140, 0, 224, 141, 225, 142, 0, 143, 144, 145,
	226, 146, 147, 0, 149, 150, 148, 151, 0, 152,
	0, 153, 154, 227, 155, 0, 156, 157, 158, 0,
	228, 159, 160, 0, 161, 162, 0, 163, 229, 230,
	164, 0, 170, 165, 166, 167, 169, 231, 168, 232,
	0, 171, 0, 172, 173, 0, 233, 234, 235, 0,
	0, 174, 236, 237, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 238,
	239, 74, 0, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 0, 0, 0, 0, 0, 77, 78, 0,
	79, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	80, 81, 191, 192, 193, 194, 82, 195, 196, 0,
	83, 197, 198, 84, 0, 0, 199, 200, 201, 0,
	202, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 203, 98, 204,
	205, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 206, 104, 105, 207, 208,
	0, 0, 0, 106, 107, 209, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 210, 0, 211, 0, 111,
	112, 113, 478, 213, 0, 0, 116, 0, 114, 0,
	0, 115, 214, 215, 216, 217, 0, 218, 0, 0,
	117, 0, 118, 119, 0, 0, 219, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 220,
	133, 221, 134, 135, 0, 0, 0, 0, 0, 136,
	222, 0, 137, 0, 223, 138, 139, 140, 0, 224,
	141, 225, 142, 0, 143, 144, 145, 226, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 0, 153, 154,
	227, 155, 0, 156, 157, 158, 0, 228, 159, 160,
	0, 161, 162, 0, 163, 229, 230, 164, 0, 170,
	165, 166, 167, 169, 231, 168, 232, 0, 171, 0,
	172, 173, 0, 233, 234, 235, 0, 0, 174, 236,
	237, 0, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 0, 0, 182, 183, 184, 238, 239, 74, 0,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 0,
	0, 0, 0, 0, 77, 78, 0, 79, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 80, 81, 191,
	192, 193, 194, 82, 195, 196, 0, 83, 197, 198,
	84, 0, 0, 199, 200, 201, 0, 202, 0, 0,
	0, 85, 86, 87, 0, 88, 0, 89, 90, 91,
	0, 0, 92, 93, 0, 0, 0, 0, 0, 0,
	94, 95, 96, 97, 203, 98, 204, 205, 0, 99,
	0, 100, 0, 0, 0, 101, 102, 0, 103, 0,
	0, 0, 206, 104, 105, 207, 208, 0, 0, 0,
	106, 107, 209, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 210, 0, 211, 0, 111, 112, 113, 476,
	213, 0, 0, 116, 0, 114, 0, 0, 115, 214,
	215, 216, 217, 0, 218, 0, 0, 117, 0, 118,
	119, 0, 0, 219, 0, 120, 0, 0, 121, 0,
	0, 122, 0, 123, 124, 125, 126, 127, 0, 128,
	129, 132, 130, 0, 131, 0, 220, 133, 221, 134,
	135, 0, 0, 0, 0, 0, 136, 222, 0, 137,
	0, 223, 138, 139, 140, 0, 224, 141, 225, 142,
	0, 143, 144, 145, 226, 146, 147, 0, 149, 150,
	148, 151, 0, 152, 0, 153, 154, 227, 155, 0,
	156, 157, 158, 0, 228, 159, 160, 0, 161, 162,
	0, 163, 229, 230, 164, 0, 170, 165, 166, 167,
	169, 231, 168, 232, 0, 171, 0, 172, 173, 0,
	233, 234, 235, 0, 0, 174, 236, 237, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 238, 239, 74, 0, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 80, 81, 191, 192, 193, 194,
	82, 195, 196, 0, 83, 197, 198, 84, 0, 0,
	199, 200, 201, 0, 202, 0, 0, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 0, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 203, 98, 204, 205, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 206,
	104, 105, 207, 208, 0, 0, 0, 106, 107, 209,
	0, 108, 0, 109, 0, 0, 0, 0, 110, 210,
	0, 211, 0, 111, 112, 113, 457, 213, 0, 0,
	116, 0, 114, 0, 0, 115, 214, 215, 216, 217,
	0, 218, 0, 0, 117, 0, 118, 119, 0, 0,
	219, 0, 120, 0, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 0, 128, 129, 132, 130,
	0, 131, 0, 220, 133, 221, 134, 135, 0, 0,
	0, 0, 0, 136, 222, 0, 137, 0, 223, 138,
	139, 140, 0, 224, 141, 225, 142, 0, 143, 144,
	145, 226, 146, 147, 0, 149, 150, 148, 151, 0,
	152, 0, 153, 154, 227, 155, 0, 156, 157, 158,
	0, 228, 159, 160, 0, 161, 162, 0, 163, 229,
	230, 164, 0, 170, 165, 166, 167, 169, 231, 168,
	232, 0, 171, 0, 172, 173, 0, 233, 234, 235,
	0, 0, 174, 236, 237, 0, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 0, 0, 182, 183, 184,
	238, 239, 74, 0, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 0, 0, 0, 77, 78,
	0, 79, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 80, 81, 191, 192, 193, 194, 82, 195, 196,
	0, 83, 197, 198, 84, 0, 0, 199, 200, 201,
	0, 202, 0, 0, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 0, 92, 93, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 97, 203, 98,
	204, 205, 0, 99, 0, 100, 0, 0, 0, 101,
	102, 0, 103, 0, 0, 0, 206, 104, 105, 207,
	208, 0, 0, 0, 106, 107, 209, 0, 108, 0,
	109, 0, 0, 0, 0, 110, 210, 0, 211, 0,
	111, 112, 113, 212, 213, 0, 0, 116, 0, 114,
	0, 0, 115, 214, 215, 216, 217, 0, 218, 0,
	0, 117, 0, 118, 119, 0, 0, 219, 0, 120,
	0, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 0, 128, 129, 132, 130, 0, 131, 0,
	220, 133, 221, 134, 135, 0, 0, 0, 0, 0,
	136, 222, 0, 137, 0, 223, 138, 139, 140, 0,
	224, 141, 225, 142, 0, 143, 144, 145, 226, 438,
	147, 0, 149, 150, 148, 151, 0, 152, 0, 153,
	154, 227, 155, 0, 156, 157, 158, 0, 228, 159,
	160, 0, 161, 162, 0, 163, 229, 230, 164, 0,
	170, 165, 166, 167, 169, 231, 168, 232, 0, 171,
	0, 172, 173, 0, 233, 234, 235, 0, 0, 174,
	236, 237, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 238, 239, 74,
	0, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 80, 81,
	191, 192, 193, 194, 82, 195, 196, 0, 83, 197,
	198, 84, 0, 0, 199, 200, 201, 0, 202, 0,
	0, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 0, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 203, 98, 204, 205, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 206, 104, 105, 207, 208, 0, 0,
	0, 106, 107, 209, 0, 108, 0, 109, 0, 0,
	0, 0, 110, 210, 0, 211, 0, 111, 112, 113,
	212, 213, 0, 0, 116, 0, 114, 0, 0, 115,
	214, 215, 216, 217, 0, 218, 0, 0, 117, 0,
	118, 119, 0, 0, 219, 0, 120, 0, 0, 383,
	0, 0, 122, 0, 123, 124, 125, 126, 391, 0,
	128, 129, 132, 130, 0, 131, 0, 220, 133, 221,
	134, 135, 0, 0, 0, 0, 0, 136, 222, 0,
	137, 0, 223, 138, 139, 140, 0, 224, 141, 225,
	142, 0, 143, 144, 145, 226, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 0, 153, 154, 385, 155,
	0, 156, 157, 158, 0, 228, 159, 384, 0, 161,
	162, 0, 163, 229, 230, 164, 0, 170, 165, 166,
	167, 169, 231, 168, 232, 0, 171, 0, 172, 173,
	0, 390, 234, 235, 0, 0, 386, 236, 237, 0,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 0,
	0, 182, 183, 184, 238, 239, 74, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 0, 0, 0,
	0, 0, 77, 78, 0, 79, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 80, 81, 191, 192, 193,
	194, 82, 195, 196, 0, 83, 197, 198, 84, 0,
	0, 199, 200, 201, 0, 202, 0, 0, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 0,
	92, 93, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 97, 203, 98, 204, 205, 0, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	206, 104, 105, 207, 208, 0, 0, 0, 106, 107,
	209, 0, 108, 0, 109, 0, 0, 0, 0, 110,
	210, 0, 211, 0, 111, 112, 113, 212, 213, 0,
	0, 116, 0, 114, 0, 0, 115, 214, 215, 216,
	217, 0, 218, 0, 0, 117, 0, 118, 119, 0,
	0, 219, 0, 120, 0, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 0, 128, 129, 132,
	130, 0, 131, 0, 220, 133, 221, 134, 135, 0,
	0, 0, 0, 0, 136, 222, 0, 137, 0, 223,
	138, 139, 0, 0, 224, 141, 225, 142, 0, 143,
	0, 145, 226, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 0, 153, 154, 227, 0, 0, 156, 157,
	158, 0, 228, 159, 160, 0, 161, 162, 0, 163,
	229, 230, 164, 0, 170, 165, 166, 167, 169, 231,
	168, 232, 0, 171, 0, 172, 173, 0, 233, 234,
	235, 0, 0, 174, 236, 237, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 238, 239, 0, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 863, 864, 0, 883, 884, 885,
	893, 894, 895, 0, 0, 0, 0, 0, 0, 0,
	886, 0, 0, 0, 0, 0, 0, 866, 0, 897,
	863, 864, 0, 883, 884, 885, 893, 894, 895, 0,
	0, 0, 0, 0, 0, 0, 886, 0, 865, 0,
	0, 0, 0, 866, 880, 897, 0, 0, 0, 0,
	0, 0, 863, 864, 0, 883, 884, 885, 893, 894,
	895, 0, 0, 0, 865, 0, 0, 0, 886, 0,
	880, 0, 0, 0, 0, 866, 0, 897, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 871, 0, 0, 865, 0, 0, 0,
	0, 0, 880, 0, 0, 0, 0, 0, 0, 0,
	0, 890, 898, 0, 0, 0, 0, 0, 0, 871,
	0, 0, 0, 0, 0, 0, 896, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 888, 890, 898, 0,
	0, 0, 881, 0, 0, 0, 0, 0, 0, 0,
	0, 871, 896, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 888, 0, 887, 0, 0, 0, 881, 890,
	898, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 896, 0, 0, 0, 0, 0,
	887, 0, 0, 0, 888, 0, 0, 0, 0, 882,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	891, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 887, 0, 0, 882, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 891, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 889, 0, 891, 877,
	878, 879, 0, 876, 873, 874, 875, 867, 868, 869,
	870, 872, 0, 892, 0, 0, 0, 0, 0, 0,
	1388, 0, 889, 0, 0, 877, 878, 879, 0, 876,
	873, 874, 875, 867, 868, 869, 870, 872, 0, 892,
	0, 1396, 1397, 1845, 1414, 1415, 1416, 0, 0, 0,
	0, 0, 0, 0, 889, 0, 0, 877, 878, 879,
	0, 876, 873, 874, 875, 867, 868, 869, 870, 872,
	0, 892, 0, 863, 864, 1843, 883, 884, 885, 893,
	894, 895, 0, 0, 0, 0, 0, 0, 0, 886,
	0, 1411, 0, 0, 0, 0, 866, 0, 897, 863,
	864, 0, 883, 884, 885, 893, 894, 895, 0, 0,
	0, 0, 0, 0, 0, 886, 0, 865, 0, 0,
	0, 0, 866, 880, 897, 0, 0, 0, 0, 0,
	0, 863, 864, 0, 883, 884, 885, 893, 894, 895,
	1402, 0, 0, 865, 0, 0, 0, 886, 0, 880,
	0, 0, 0, 0, 866, 0, 897, 0, 0, 1418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 871, 1417, 0, 865, 0, 0, 0, 0,
	0, 880, 0, 0, 0, 0, 0, 0, 0, 1412,
	890, 898, 0, 0, 0, 0, 0, 0, 871, 0,
	0, 0, 0, 0, 0, 896, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 888, 890, 898, 0, 0,
	0, 881, 0, 0, 0, 0, 0, 0, 0, 0,
	871, 896, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 888, 0, 887, 0, 0, 1413, 881, 890, 898,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 896, 0, 0, 0, 0, 0, 887,
	0, 0, 0, 888, 0, 0, 0, 0, 882, 881,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 891,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 887, 0, 0, 882, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 891, 1408, 1409, 1410, 0,
	1407, 1404, 1405, 1406, 1398, 1399, 1400, 1401, 1403, 0,
	0, 0, 0, 0, 0, 0, 882, 0, 0, 0,
	0, 0, 0, 0, 0, 889, 0, 891, 877, 878,
	879, 0, 876, 873, 874, 875, 867, 868, 869, 870,
	872, 0, 892, 0, 0, 0, 1822, 0, 0, 0,
	0, 889, 0, 0, 877, 878, 879, 0, 876, 873,
	874, 875, 867, 868, 869, 870, 872, 0, 892, 0,
	1396, 1397, 1797, 1414, 1415, 1416, 0, 0, 0, 0,
	0, 0, 0, 889, 0, 0, 877, 878, 879, 0,
	876, 873, 874, 875, 867, 868, 869, 870, 872, 0,
	892, 0, 863, 864, 1792, 883, 884, 885, 893, 894,
	895, 0, 0, 0, 0, 0, 0, 0, 886, 0,
	1411, 0, 0, 0, 0, 866, 0, 897, 863, 864,
	0, 883, 884, 885, 893, 894, 895, 0, 0, 0,
	0, 0, 0, 0, 886, 0, 865, 0, 0, 0,
	0, 866, 880, 897, 0, 0, 0, 0, 0, 0,
	863, 864, 0, 883, 884, 885, 893, 894, 895, 1402,
	0, 0, 865, 0, 0, 0, 886, 0, 880, 0,
	0, 0, 0, 866, 0, 897, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 871, 1417, 0, 865, 0, 0, 0, 0, 0,
	880, 0, 0, 0, 0, 0, 0, 0, 1412, 890,
	898, 0, 0, 0, 0, 0, 0, 871, 0, 0,
	0, 0, 0, 0, 896, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 888, 890, 898, 0, 0, 0,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 871,
	896, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	888, 0, 887, 0, 0, 1413, 881, 890, 898, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 896, 0, 0, 0, 0, 0, 887, 0,
	0, 0, 888, 0, 0, 0, 0, 882, 881, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 891, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	887, 0, 0, 882, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 891, 1408, 1409, 1410, 0, 1407,
	1404, 1405, 1406, 1398, 1399, 1400, 1401, 1403, 0, 0,
	0, 0, 0, 0, 0, 882, 0, 0, 0, 0,
	0, 0, 0, 0, 889, 0, 891, 877, 878, 879,
	0, 876, 873, 874, 875, 867, 868, 869, 870, 872,
	0, 892, 0, 0, 0, 1788, 0, 0, 0, 0,
	889, 0, 0, 877, 878, 879, 0, 876, 873, 874,
	875, 867, 868, 869, 870, 872, 0, 892, 0, 0,
	0, 1723, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 889, 0, 0, 877, 878, 879, 0, 876,
	873, 874, 875, 867, 868, 869, 870, 872, 0, 892,
	0, 863, 864, 1722, 883, 884, 885, 893, 894, 895,
	0, 0, 0, 0, 0, 0, 0, 886, 0, 0,
	0, 0, 0, 0, 866, 0, 897, 863, 864, 0,
	883, 884, 885, 893, 894, 895, 0, 0, 0, 0,
	0, 0, 0, 886, 0, 865, 0, 0, 0, 0,
	866, 880, 897, 0, 0, 0, 0, 0, 0, 863,
	864, 0, 883, 884, 885, 893, 894, 895, 0, 0,
	0, 865, 0, 0, 0, 886, 0, 880, 0, 0,
	0, 0, 866, 0, 897, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	871, 0, 0, 865, 0, 0, 0, 0, 0, 880,
	0, 0, 0, 0, 0, 0, 0, 0, 890, 898,
	0, 0, 0, 0, 0, 0, 871, 0, 0, 0,
	0, 0, 0, 896, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 888, 890, 898, 0, 0, 0, 881,
	0, 0, 0, 0, 0, 0, 0, 0, 871, 896,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 888,
	0, 887, 0, 0, 0, 881, 890, 898, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 896, 0, 0, 0, 0, 0, 887, 0, 0,
	0, 888, 0, 0, 0, 0, 882, 881, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 887,
	0, 0, 882, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 891, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 882, 0, 0, 0, 0, 0,
	0, 0, 0, 889, 0, 891, 877, 878, 879, 0,
	876, 873, 874, 875, 867, 868, 869, 870, 872, 0,
	892, 0, 0, 0, 1629, 0, 0, 0, 0, 889,
	0, 0, 877, 878, 879, 0, 876, 873, 874, 875,
	867, 868, 869, 870, 872, 0, 892, 0, 0, 0,
	1563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 889, 0, 0, 877, 878, 879, 0, 876, 873,
	874, 875, 867, 868, 869, 870, 872, 0, 892, 0,
	863, 864, 1547, 883, 884, 885, 893, 894, 895, 0,
	0, 0, 0, 0, 0, 0, 886, 0, 0, 0,
	0, 0, 0, 866, 0, 897, 863, 864, 0, 883,
	884, 885, 893, 894, 895, 0, 0, 0, 0, 0,
	0, 0, 886, 0, 865, 0, 0, 0, 0, 866,
	880, 897, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	865, 0, 0, 0, 0, 0, 880, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1396, 1397, 0, 1414, 1415, 1416, 0, 0, 0, 871,
	0, 0, 0, 0, 0, 0, 1541, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 890, 898, 0,
	0, 0, 0, 0, 0, 871, 0, 0, 0, 0,
	0, 0, 896, 0, 0, 0, 0, 0, 0, 0,
	1411, 0, 888, 890, 898, 0, 0, 0, 881, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 896, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 888, 0,
	887, 0, 0, 0, 881, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1402,
	0, 0, 0, 0, 0, 0, 887, 0, 0, 0,
	0, 0, 0, 0, 0, 882, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 891, 0, 0, 0,
	863, 864, 1417, 883, 884, 885, 893, 894, 895, 0,
	0, 882, 0, 0, 0, 0, 886, 0, 1412, 0,
	0, 0, 891, 866, 0, 897, 863, 864, 0, 883,
	884, 885, 893, 894, 895, 0, 0, 0, 0, 0,
	0, 0, 886, 0, 865, 0, 0, 0, 0, 866,
	880, 897, 889, 0, 0, 877, 878, 879, 0, 876,
	873, 874, 875, 867, 868, 869, 870, 872, 0, 892,
	865, 0, 0, 1157, 0, 1413, 880, 0, 889, 0,
	0, 877, 878, 879, 0, 876, 873, 874, 875, 867,
	868, 869, 870, 872, 0, 892, 0, 1477, 0, 871,
	1916, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 890, 898, 0,
	0, 0, 0, 0, 0, 871, 0, 1428, 0, 0,
	1427, 0, 896, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 888, 890, 898, 1408, 1409, 1410, 881, 1407,
	1404, 1405, 1406, 1398, 1399, 1400, 1401, 1403, 896, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 888, 0,
	887, 0, 0, 0, 881, 0, 0, 0, 0, 0,
	0, 0, 0, 1915, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 887, 0, 0, 0,
	0, 0, 0, 0, 0, 882, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 891, 0, 863, 864,
	0, 883, 884, 885, 893, 894, 895, 0, 0, 0,
	0, 882, 0, 0, 886, 0, 0, 0, 900, 1090,
	0, 866, 891, 897, 863, 864, 0, 883, 884, 885,
	893, 894, 895, 0, 0, 0, 0, 0, 0, 0,
	886, 0, 865, 0, 899, 0, 0, 866, 880, 897,
	0, 0, 889, 0, 0, 877, 878, 879, 0, 876,
	873, 874, 875, 867, 868, 869, 870, 872, 865, 892,
	0, 0, 0, 0, 880, 0, 1091, 0, 889, 0,
	0, 877, 878, 879, 0, 876, 873, 874, 875, 867,
	868, 869, 870, 872, 0, 892, 0, 871, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 890, 898, 0, 0, 0,
	0, 0, 0, 871, 0, 0, 0, 0, 0, 0,
	896, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	888, 890, 898, 0, 0, 0, 881, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 896, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 888, 0, 887, 0,
	0, 0, 881, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 887, 0, 0, 0, 0, 0,
	0, 0, 0, 882, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 891, 0, 863, 864, 0, 883,
	884, 885, 893, 894, 895, 0, 0, 0, 0, 882,
	0, 0, 886, 0, 0, 0, 0, 0, 0, 866,
	891, 897, 863, 864, 0, 883, 884, 885, 893, 894,
	895, 0, 0, 0, 0, 0, 0, 0, 886, 0,
	865, 0, 0, 0, 0, 866, 880, 897, 0, 0,
	889, 0, 0, 877, 878, 879, 0, 876, 873, 874,
	875, 867, 868, 869, 870, 872, 865, 892, 0, 0,
	0, 0, 880, 0, 0, 0, 889, 0, 0, 877,
	878, 879, 0, 876, 873, 874, 875, 867, 868, 869,
	870, 872, 0, 892, 0, 871, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 890, 898, 0, 0, 0, 0, 0,
	0, 871, 0, 0, 0, 0, 0, 0, 896, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 888, 890,
	898, 0, 0, 0, 881, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 896, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 888, 0, 887, 433, 0, 0,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 887, 0, 0, 0, 0, 0, 0, 0,
	0, 882, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 891, 0, 863, 864, 0, 883, 884, 885,
	893, 894, 895, 0, 0, 0, 0, 882, 0, 0,
	886, 0, 0, 0, 0, 0, 0, 866, 891, 897,
	863, 864, 0, 883, 884, 885, 893, 894, 895, 0,
	0, 0, 0, 0, 0, 0, 886, 1557, 865, 0,
	1429, 0, 0, 866, 880, 897, 0, 0, 889, 0,
	0, 877, 878, 879, 0, 876, 873, 874, 875, 867,
	868, 869, 870, 872, 865, 892, 0, 0, 0, 0,
	880, 0, 0, 0, 889, 0, 0, 877, 878, 879,
	0, 876, 873, 874, 875, 867, 868, 869, 870, 872,
	0, 892, 0, 871, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 890, 898, 0, 0, 0, 0, 0, 0, 871,
	0, 0, 0, 0, 0, 0, 896, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 888, 890, 898, 0,
	0, 0, 881, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 896, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 888, 0, 887, 0, 0, 0, 881, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	887, 0, 0, 0, 0, 0, 0, 0, 0, 882,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	891, 0, 863, 864, 0, 883, 884, 885, 893, 894,
	895, 0, 0, 0, 0, 882, 0, 0, 886, 0,
	0, 0, 0, 0, 0, 866, 891, 897, 863, 864,
	0, 883, 884, 885, 893, 894, 895, 0, 0, 0,
	0, 0, 0, 0, 886, 0, 865, 0, 1387, 0,
	0, 866, 880, 897, 0, 0, 889, 0, 0, 877,
	878, 879, 0, 876, 873, 874, 875, 867, 868, 869,
	870, 872, 865, 892, 0, 0, 0, 0, 880, 0,
	0, 0, 889, 0, 0, 877, 878, 879, 0, 876,
	873, 874, 875, 867, 868, 869, 870, 872, 0, 892,
	0, 871, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 890,
	898, 0, 0, 0, 0, 0, 0, 871, 0, 0,
	0, 0, 0, 0, 896, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 888, 890, 898, 0, 0, 0,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	896, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	888, 0, 887, 0, 0, 0, 881, 0, 0, 0,
	0, 0, 0, 1394, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 887, 0,
	0, 0, 0, 0, 0, 0, 0, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 891, 0,
	863, 864, 0, 883, 884, 885, 893, 894, 895, 0,
	0, 0, 0, 882, 0, 0, 886, 0, 0, 0,
	0, 0, 0, 866, 891, 897, 863, 864, 0, 883,
	884, 885, 893, 894, 895, 0, 0, 0, 0, 0,
	0, 0, 886, 0, 865, 0, 0, 0, 0, 866,
	880, 897, 0, 0, 889, 0, 0, 877, 878, 879,
	0, 876, 873, 874, 875, 867, 868, 869, 870, 872,
	865, 892, 0, 0, 0, 0, 880, 0, 0, 0,
	889, 0, 0, 877, 878, 879, 0, 876, 873, 874,
	875, 867, 868, 869, 870, 872, 0, 892, 0, 871,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 890, 898, 0,
	0, 0, 0, 0, 0, 871, 0, 0, 0, 0,
	0, 0, 896, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 888, 890, 898, 0, 863, 864, 881, 883,
	884, 885, 893, 894, 895, 0, 0, 0, 896, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 888, 866,
	887, 897, 0, 0, 881, 863, 864, 0, 883, 884,
	885, 893, 894, 895, 0, 0, 0, 0, 0, 0,
	865, 0, 0, 0, 0, 0, 880, 0, 866, 0,
	897, 0, 0, 0, 0, 882, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 891, 0, 0, 865,
	0, 0, 0, 0, 0, 880, 0, 0, 0, 0,
	0, 882, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 891, 0, 0, 871, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 890, 898, 0, 0, 0, 0, 0,
	0, 0, 889, 0, 871, 877, 878, 879, 896, 876,
	873, 874, 875, 867, 868, 869, 870, 872, 888, 892,
	0, 0, 890, 898, 881, 0, 0, 0, 889, 0,
	0, 877, 878, 879, 0, 876, 873, 874, 875, 867,
	868, 869, 870, 872, 0, 892, 0, 888, 0, 0,
	0, 0, 0, 881, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 742,
	736, 759, 730, 750, 749, 0, 0, 732, 731, 0,
	0, 882, 761, 760, 0, 0, 0, 0, 0, 0,
	0, 0, 891, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	882, 0, 0, 755, 0, 747, 746, 0, 0, 0,
	0, 891, 0, 0, 745, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 744, 0, 0, 0, 0, 0, 0, 889, 0,
	0, 877, 878, 879, 0, 876, 873, 874, 875, 867,
	868, 869, 870, 872, 0, 892, 0, 0, 737, 738,
	739, 740, 0, 758, 0, 0, 0, 889, 0, 0,
	877, 878, 879, 0, 876, 873, 874, 875, 867, 868,
	869, 870, 872, 0, 892, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 748, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 734, 0, 0, 0, 0, 0, 0,
	0, 741, 735, 0, 0, 0, 0, 0, 0, 0,
	763, 0, 0, 0, 0, 0, 0, 733, 0, 0,
	756, 757, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 762,
}
var sqlPact = [...]int{

	3628, -1000, 42, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 694, 17296, -1000,
	-1000, -1000, -1000, -1000, 657, 669, 331, 4618, 17296, 17296,
	17029, 895, 895, 18631, -1000, -1000, 21835, -1000, 3578, 513,
	517, 513, 513, 500, 18631, 588, 667, 133, -1000, 765,
	-26, 21568, 17296, 1283, 39, 15694, 335, 3628, 16762, 21301,
	17296, 16495, 330, 46, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1152, 1039, 1032, 15694, 21034, 20767, 20500, 20233, -1000, 10572,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 716, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 339, 338, -1000, 16228, -1000, 864, -1000, 37,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 858, -1000,
	17296, -1000, -1000, 19966, 19699, 337, 856, -1000, -1000, 536,
	392, 1303, -1000, 47, -1000, -1000, -1000, 1150, -1000, 853,
	1147, 1143, 1140, 1138, 1133, 1126, 391, 861, 495, 856,
	-1000, 856, -1000, -1000, -1000, 562, 18631, -1000, 15694, -1000,
	19432, 17296, 1066, 19165, -1000, 765, -1000, -1000, -1000, 939,
	1277, 1277, 1277, 1291, 138, 137, 133, 29, 17296, -1000,
	336, 29, 7219, 7219, -1000, -1000, 335, -1000, 353, 13545,
	-1000, 7779, -1000, 859, 1196, 399, 674, 1195, -73, 745,
	743, 1191, 625, 12734, 46, -1000, -1000, -1000, 9182, 4340,
	15694, 17296, 17296, 662, 18898, -1000, 1189, 107, 1188, -1000,
	106, 1187, -1000, 106, 1186, 14, -1000, -1000, -1000, -1000,
	-1000, -1000, 335, 15961, 17296, 1358, 25393, -1000, 9182, -1000,
	-1000, 14090, 1211, 14090, -1000, -1000, 1345, -1000, 9182, -1000,
	36, 35, 1005, 1038, 11119, 10852, 1233, 1083, -1000, -1000,
	-1000, 45, 4618, 17296, 1156, 14090, 17296, 17296, 17296, 17296,
	17296, 17296, -1000, 999, -1000, 17296, 17296, -1000, 31, 30,
	-1000, 18631, -1000, 109, -1000, 334, 965, 143, 18364, 1202,
	954, -1000, 939, -1000, 850, 994, 8342, 9182, 133, -1000,
	-1000, 133, 133, 9182, -1000, -1000, 17296, 29, 1333, 17296,
	119, -1000, 24234, -1000, -1000, 9182, 9182, 9182, 9182, 9182,
	817, -1000, -1000, -1000, 5476, -1000, -1000, 46, 333, 344,
	-1000, -1000, 332, 46, -1000, -1000, -1000, -1000, 327, 1453,
	405, -1000, -1000, -1000, 9182, 402, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1120, 325, 319, -1000, -1000,
	-1000, -1000, 316, 315, 307, 304, 303, 296, 294, 279,
	273, 270, 266, 260, 255, 253, 246, 789, -1000, 420,
	-1000, -1000, 420, 420, -1000, 237, 237, 241, -1000, -1000,
	-1000, -1000, 237, -1000, -1000, -1000, 377, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 245, 119, -1000, -1000, -1000, 17296,
	0, -1000, 25080, -1000, 15, 726, -1000, 15160, 1258, 1257,
	1254, 15694, 1305, 1302, 553, 17296, 17296, 551, 549, 15694,
	-1000, 1122, -1, -1000, -1000, 2364, -1000, -1000, 408, 96,
	1332, 96, 13005, -1000, 17296, 17296, -1000, 17296, -1000, -1000,
	17296, -1000, 17296, 17296, -1000, 17296, 149, 14626, 729, 1185,
	636, -26, -5, -1000, 1361, -1000, -1000, -1000, -1000, 76,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 241, 789, 237, 237, 237, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 377, -1000, -1000, 420,
	420, 420, -1000, -1000, -6, 25080, 547, 18, 14358, 17296,
	-1000, 44, -1000, -1000, 1119, 490, -7, 777, 1028, 802,
	-1000, -1000, -1000, -1000, 27, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1424, -1000, -1000, -1000, -1000,
	1442, 27, -1000, -1000, -1000, -1000, -1000, 1452, -1000, -1000,
	-1000, 4618, -1000, -1000, -1000, 17296, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 777, 1028, -1000, -1000,
	15694, 14893, 1326, 1180, 1322, 17296, 852, 950, -1000, -1000,
	368, 1178, -1000, -1000, -1000, -1000, 25080, -1000, 25080, 701,
	1047, -1000, 1047, 21, -1000, 24208, -1000, 236, -16, -1000,
	408, 7219, 12464, 25393, 25393, 17296, 582, 9182, 9182, 9182,
	9182, 9182, 9182, 9182, 9182, 9182, 9182, 9182, 9182, 9182,
	9182, 9182, 9182, 9182, 9182, 9182, 9182, 9182, 9182, 1024,
	9182, 545, 9182, 9182, 9182, 9182, 823, 849, 215, 4618,
	-1000, 632, 632, 632, 25226, 25226, 196, 26, 23770, 19,
	46, -1000, -1000, 6936, 6636, 46, 4896, -1000, 619, 1431,
	411, 25080, 1123, 1088, 231, 134, 131, 9182, 9182, 9462,
	9462, 9182, 9742, 9182, 9182, 5756, 9182, 9182, 9182, 9182,
	9182, 9182, -1000, 223, -1000, -1000, -1000, -1000, 1430, -1000,
	-1000, 1429, -1000, 576, 573, 1428, 408, 127, 7779, -1000,
	729, 17296, 17296, 17296, -1000, -1000, 941, 18097, 933, 25393,
	17296, -1000, 220, 219, 1019, 1013, 17296, 17296, 17830, 17563,
	17296, 772, 218, 217, 17296, 733, -1000, 17296, 17296, 724,
	623, 1118, 17296, -1000, 9182, 697, 9182, 746, -1000, 11923,
	426, 17296, 708, 108, -1000, -1000, -1000, 367, 17296, -1000,
	-1000, -1000, 107, -1000, 106, 106, -1000, -1000, 15694, -1000,
	-1000, -1000, -1000, -1000, -1000, 25393, 347, 346, -1000, 1426,
	543, -1000, 540, 535, 534, -1000, 216, -1000, 9182, 17296,
	14358, 18, 17, -1000, -1000, 17296, 1028, -1000, -1000, -1000,
	-1000, 687, -1000, 757, -1000, 11386, -1000, -1000, -1000, 619,
	-1000, 12, -1000, -1000, -1000, -1000, 126, -21, 16, 25393,
	-1000, -1000, -1000, -1000, -1000, 17296, 269, 17296, -26, 17296,
	-26, 17296, 1176, 1451, 17296, -1000, -1000, -1000, 9182, -1000,
	-1000, -1000, -26, 17296, -1000, 1085, -1000, -14, 1786, -120,
	15427, -1000, 11653, -1000, -1000, -1000, 382, 432, 432, 541,
	541, 541, 541, 1192, 1192, 2690, 186, 2050, 2050, 2050,
	1893, 329, 329, 2050, 2050, 2050, 25226, 25106, 3174, 9182,
	9182, 532, 820, 215, 3174, 9182, 1411, 3174, 3174, 3174,
	-1000, 767, -1000, -1000, -1000, 1114, 212, 9742, 9742, -1000,
	-1000, -1000, 5476, -1000, -1000, 209, 9182, -1000, 9182, -47,
	-89, -1000, -1000, -25, -1000, -1000, -20, 9182, 9182, 9182,
	125, -1000, 124, 603, -1000, 9182, 831, 207, 205, 9182,
	-1000, -1000, 24888, 22374, 117, 1108, -29, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 113, 105, 24862, -29, 104, 22691,
	-1000, 9742, 9742, 9742, 5476, 203, 102, 24016, -29, 24670,
	8059, 8059, 8059, 101, 24644, 9182, -29, 3521, 3495, 3084,
	-31, -37, -38, 1419, -39, 97, 380, 378, 93, 1085,
	-1000, -1000, -1000, -1000, 529, 528, 1175, -1000, 931, -1000,
	438, -1000, 754, 9182, 17296, 201, 199, 762, -1000, 1174,
	876, 1172, 876, -1000, 15, 704, 9182, 9182, -1000, 527,
	-1000, -1000, 525, -1000, 622, -1000, 23796, -1000, 7219, 25080,
	-1000, 702, 1261, -43, -1000, -1000, 7219, 408, 13005, 12464,
	7779, -45, -1000, -1000, -1000, 729, -1000, 429, 1416, 92,
	981, 799, 742, 675, 1408, 25080, 12, -1000, 12, -1000,
	-1000, -1000, -1000, -1000, -1000, 17296, 1068, -1000, 14893, 197,
	17296, 194, -1000, 190, -1000, 185, 17296, -1000, 1202, -1000,
	91, -1000, 1078, 1290, -1000, 12464, 870, 1026, 1025, 12464,
	1115, 821, 821, 821, -1000, 15427, 4051, -1000, -1000, 17296,
	167, 12193, 90, 1786, 9182, 3174, 3174, 9182, 9742, 9742,
	-1000, 3174, -1000, -1000, -1000, -1000, 1103, 166, 9182, 25393,
	23860, 3467, -50, 6336, 3, 23479, -1000, -1000, 344, -1000,
	89, 7499, -1000, 24426, -27, -27, -1000, 1450, 1200, -1000,
	9182, 24452, -1000, 13275, 409, 827, 23447, 25393, 25393, -1000,
	9182, -1000, -1000, 1101, 9182, -1000, 25393, 25393, 9742, 9742,
	9742, 9742, 9742, 9742, 9742, 9742, 9742, 9742, 9742, 9742,
	9742, 9742, 9742, 9742, 9742, 9742, 9742, 1008, 9742, 1392,
	1392, 1392, -2, 6036, -1000, 1099, 1101, 9182, 9182, 25393,
	87, 86, 85, -1000, 9182, -29, 9182, 9182, 9182, -1000,
	-1000, -1000, 84, -1000, 1401, -1000, -1000, -1000, -1000, 1078,
	17296, 17296, 17296, 1171, -1000, 1945, -1000, 23421, -51, 17296,
	17296, -1000, 997, 1091, 476, 17296, -1000, 17296, -1000, 17296,
	17296, 17296, -64, -68, 17296, 17296, -1000, -1000, -18, 7219,
	208, -26, -18, 697, -1000, -17, -1000, 365, -1000, 187,
	110, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 79,
	-1000, -1000, 1070, -1000, 10302, 165, 17296, 14893, 1319, 10302,
	847, -1000, -1000, 401, 9182, 9182, 1786, 609, 12464, 12464,
	1848, 1021, 12464, -1000, -1000, -1000, -1000, -1000, -1000, 996,
	164, 17296, 15427, 566, 3174, 3114, 2302, 9182, 25393, 25255,
	-74, 9182, 9182, -1000, -76, -1000, 9182, -1000, -1000, 1449,
	9182, 77, 74, 73, -1000, -1000, 25080, 9182, -1000, -1000,
	22102, 9182, 69, -1000, 68, 67, 25080, 1099, 25080, -1000,
	-1000, 592, 592, 1392, 1392, 1392, 1392, 1117, 1117, 897,
	1149, 2275, 2275, 2275, 776, 601, 601, 2275, 2275, 2275,
	1100, 963, 161, 23040, 9182, -80, -1000, -1000, -1000, 25080,
	25080, 66, -1000, -1000, -1000, -29, 3052, 23130, 23098, -1000,
	61, 401, -1000, -1000, -1000, 17296, -1000, 17296, -1000, 17296,
	17296, 1096, 904, -1000, -1000, 1003, 160, 9742, 17296, -1000,
	788, -82, -92, 903, -1000, 879, 9182, -1000, 25393, 876,
	876, -1000, 524, 522, -1000, -1000, -1000, -1000, -18, 1207,
	17296, 1250, -1000, -1000, 159, -1000, -1000, -1000, 809, -93,
	-1000, 265, 1270, 9182, -1000, -1000, 158, 10302, -98, 60,
	-26, -99, 17296, -1000, 17296, 25080, -29, 569, -1000, 1848,
	-1000, 157, 9182, 12464, -1000, -158, -1000, 364, -1000, 17296,
	-100, -1000, 9182, 9182, 25255, -104, -1000, 3174, 3174, -1000,
	23072, -1000, 24426, -1000, -1000, -1000, 25080, 794, -1000, 22781,
	-1000, -1000, -1000, -1000, 9742, 1094, 156, 25393, 22749, -1000,
	-1000, 9182, -1000, -1000, -1000, -1000, -1000, 1818, -1000, -1000,
	17296, 926, -1000, -1000, 9182, 23040, 155, 1068, 154, -1000,
	-1000, -1000, 752, -1000, -1000, 25080, 1274, -1000, -1000, 17296,
	17296, 539, -108, 17296, -1000, -1000, 5196, 17296, 788, 10302,
	1273, 46, 17296, 1273, 22723, 4896, -112, -1000, 1068, -1000,
	788, 152, -23, -1000, 1311, 13823, -1000, 17296, 25080, -1000,
	996, -1000, 4618, -117, -1000, 3174, 3174, -1000, -1000, 57,
	827, 1288, -1000, 297, 9742, 25393, -121, -1000, 22432, -1000,
	-1000, 1170, 22400, 984, 17296, -1000, 17296, 17296, 433, 17296,
	-1000, -1000, 645, -1000, 408, -1000, 150, 1068, -1000, -1000,
	-1000, -1000, 1270, -20, 788, -1000, 1068, 10302, 17296, 147,
	-1000, 144, 46, -122, -1000, -1000, -1000, -1000, 715, 9182,
	297, -128, -1000, -1000, 1159, -1000, 840, 768, 56, -129,
	143, -1000, 9182, -1000, 13005, -1000, 17296, -1000, 1273, 55,
	1068, -1000, -130, -1000, -1000, 9182, -1000, 52, 8902, 8902,
	-29, -1000, 17296, -1000, 844, 842, 628, -1000, -1000, -1000,
	-1000, -1000, 984, 25080, -105, -137, -1000, -1000, -1000, 788,
	-27, -1000, -1000, -1000, 10022, 905, 688, 23990, -1000, -1000,
	-1000, 1213, -1000, 455, 872, 872, 840, -1000, 857, 1068,
	50, 1370, -1000, -1000, -1000, -1000, -1000, -1000, 1379, -1000,
	-1000, 970, -1000, -1000, -1000, -1000, -1000, -1000, 1449, 8622,
	-1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1668, 1665, 1318, 134, 1664, 131, 1663, 1662, 1661,
	1660, 1659, 96, 130, 128, 122, 127, 1656, 91, 1655,
	1654, 1653, 92, 1652, 1650, 1649, 36, 1648, 1641, 126,
	121, 1640, 1639, 86, 34, 162, 2354, 160, 1638, 1637,
	1635, 13, 101, 67, 1633, 120, 1632, 1631, 60, 97,
	106, 1172, 35, 1628, 1627, 137, 11, 20, 262, 98,
	143, 118, 114, 1626, 1624, 1623, 52, 1619, 3, 1617,
	1615, 15, 48, 7, 1612, 17, 37, 1608, 1607, 124,
	1606, 77, 109, 110, 26, 113, 190, 1605, 46, 8,
	75, 1604, 16, 1603, 50, 80, 139, 1602, 53, 147,
	64, 32, 61, 104, 1600, 1599, 1598, 79, 1597, 94,
	76, 1595, 1587, 83, 1585, 132, 136, 1583, 1575, 115,
	1574, 1573, 1565, 150, 1563, 1562, 149, 1558, 9, 42,
	65, 10, 103, 102, 24, 1555, 25, 1552, 1879, 891,
	820, 23, 56, 33, 84, 49, 58, 31, 1551, 1550,
	105, 1549, 1548, 1547, 1546, 1545, 82, 1543, 74, 140,
	51, 57, 93, 28, 59, 85, 159, 144, 107, 1540,
	1536, 116, 1535, 183, 1531, 1528, 1504, 112, 1525, 1522,
	1517, 1469, 1145, 564, 179, 1515, 1514, 560, 540, 1513,
	1512, 111, 1511, 1509, 141, 138, 21, 1506, 117, 1505,
	99, 1503, 0, 43, 30, 1502, 119, 78, 1501, 1500,
	1496, 1494, 27, 2, 12, 6, 5, 4, 54, 19,
	1493, 1492, 135, 88, 1490, 146, 1482, 1481, 1480, 45,
	1479, 22, 1478, 18, 1477, 1474, 14, 1, 145, 1467,
	100, 1465, 1351, 1464, 142, 1463, 1462, 1348, 87,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	43, 43, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 40, 40, 45,
	45, 45, 47, 47, 44, 44, 39, 39, 5, 5,
	5, 6, 6, 6, 6, 6, 12, 13, 13, 13,
	13, 13, 13, 13, 13, 85, 85, 84, 84, 87,
	87, 14, 14, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 172, 172, 171, 17, 148, 148,
	18, 18, 18, 18, 19, 108, 108, 20, 20, 20,
	20, 21, 25, 238, 238, 238, 242, 242, 243, 243,
	244, 244, 244, 244, 244, 244, 244, 240, 240, 28,
	28, 28, 28, 28, 127, 123, 123, 125, 125, 125,
	125, 50, 122, 122, 122, 122, 124, 124, 124, 124,
	195, 194, 194, 200, 200, 200, 63, 63, 63, 63,
	63, 64, 64, 64, 193, 193, 193, 193, 201, 201,
	201, 201, 201, 201, 65, 65, 65, 199, 199, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 16, 239, 239,
	241, 241, 30, 30, 9, 9, 10, 10, 66, 66,
	67, 67, 130, 130, 130, 130, 68, 68, 46, 46,
	46, 129, 210, 210, 211, 211, 211, 211, 211, 211,
	212, 212, 212, 212, 212, 212, 212, 208, 208, 209,
	206, 206, 207, 207, 207, 207, 245, 245, 128, 128,
	71, 71, 215, 215, 215, 215, 213, 213, 213, 213,
	213, 216, 214, 217, 217, 217, 217, 217, 159, 159,
	159, 32, 11, 8, 8, 112, 112, 75, 75, 163,
	163, 163, 57, 57, 41, 41, 41, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 113, 113,
	114, 114, 23, 27, 31, 31, 31, 31, 31, 247,
	247, 54, 54, 54, 54, 55, 55, 126, 126, 126,
	126, 126, 49, 7, 7, 48, 48, 22, 22, 22,
	22, 22, 60, 60, 119, 119, 119, 121, 121, 120,
	120, 120, 98, 98, 33, 80, 80, 89, 89, 90,
	90, 169, 91, 91, 26, 26, 36, 36, 34, 34,
	34, 34, 34, 34, 35, 35, 37, 37, 37, 37,
	37, 37, 37, 223, 223, 223, 225, 225, 222, 224,
	224, 246, 246, 99, 99, 99, 70, 69, 69, 73,
	73, 72, 74, 74, 162, 96, 96, 96, 96, 115,
	116, 116, 117, 117, 118, 118, 95, 95, 145, 145,
	38, 38, 79, 79, 81, 81, 136, 136, 137, 137,
	135, 135, 135, 164, 164, 164, 164, 165, 165, 165,
	165, 165, 165, 160, 160, 160, 160, 161, 161, 170,
	170, 102, 102, 102, 102, 100, 100, 101, 101, 166,
	166, 166, 166, 97, 97, 167, 167, 167, 131, 131,
	173, 173, 173, 78, 78, 78, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 175,
	175, 175, 175, 177, 177, 177, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	178, 178, 185, 185, 186, 186, 187, 188, 179, 179,
	180, 180, 181, 182, 189, 189, 189, 189, 191, 191,
	183, 183, 183, 183, 183, 184, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	110, 110, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 218, 218, 218, 218, 218, 218, 218,
	220, 220, 221, 221, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 226, 226, 227, 227, 229, 229, 230, 230, 231,
	232, 232, 232, 233, 234, 234, 228, 228, 235, 235,
	235, 236, 236, 237, 237, 237, 237, 237, 150, 150,
	150, 151, 151, 152, 86, 86, 147, 147, 146, 146,
	146, 149, 149, 103, 103, 190, 190, 190, 190, 190,
	190, 190, 104, 104, 104, 111, 105, 105, 106, 106,
	106, 106, 106, 106, 142, 143, 107, 107, 107, 144,
	144, 153, 157, 157, 156, 155, 155, 154, 154, 134,
	134, 134, 134, 133, 132, 92, 92, 248, 248, 158,
	158, 93, 93, 94, 88, 88, 168, 168, 168, 168,
	82, 82, 62, 62, 83, 83, 58, 58, 61, 59,
	59, 59, 59, 76, 76, 77, 77, 56, 56, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	192, 192, 192, 51, 51, 51, 52, 52, 53, 53,
	197, 197, 197, 198, 198, 198, 198, 196, 196, 196,
	196, 196, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 4, 6, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 5, 3, 0,
	1, 1, 1, 1, 3, 3, 0, 2, 3, 2,
	3, 6, 6, 1, 2, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	3, 6, 3, 1, 5, 2, 1, 1, 1, 3,
	3, 2, 3, 3, 3, 3, 1, 3, 3, 2,
	1, 1, 3, 1, 1, 1, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 0, 1, 1, 2,
	2, 2, 4, 2, 4, 4, 4, 4, 4, 4,
	4, 2, 3, 4, 3, 4, 4, 2, 2, 0,
	2, 0, 8, 8, 7, 10, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 1, 1,
	0, 3, 2, 0, 3, 1, 2, 2, 3, 6,
	2, 1, 1, 2, 4, 2, 5, 7, 8, 5,
	3, 1, 4, 6, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 6, 11, 14, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 6, 8, 8, 10, 8, 10, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 1, 3,
	3, 0, 3, 4, 7, 3, 0, 6, 6, 8,
	5, 7, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 0, 8, 2, 0, 1, 3, 1,
	1, 3, 5, 5, 1, 1, 3, 3, 1, 2,
	3, 2, 3, 4, 1, 1, 8, 8, 1, 2,
	4, 4, 4, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 3, 0, 1, 3, 3, 1, 1, 3,
	2, 4, 0, 3, 2, 1, 4, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 5,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 3, 4, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 3, 4, 4, 5, 3,
	3, 3, 3, 3, 4, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 1, 1, 3, 1, 1, 1, 2, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	4, 1, 1, 1, 5, 1, 3, 1, 3, 1,
	1, 1, 1, 6, 6, 4, 4, 4, 4, 4,
	6, 5, 5, 5, 4, 8, 6, 6, 4, 4,
	4, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 3,
	5, 4, 3, 5, 1, 3, 1, 3, 3, 3,
	2, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 1,
	1, 3, 5, 2, 2, 1, 2, 1, 0, 1,
	1, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 3, 5, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -12, -13, -14,
	-16, -17, -19, -20, -21, -22, -24, -25, -27, -26,
	-28, -29, -30, -31, -23, -32, -33, 23, 64, -7,
	-8, -9, -10, -11, -224, 92, 100, 122, 195, 99,
	85, 116, 209, 216, -34, -36, 224, -127, 225, 34,
	234, 58, 95, 211, 206, 255, 66, -223, -37, -35,
	302, 277, 283, 219, -38, 242, 269, 305, 242, 130,
	78, 272, -58, -51, 4, -202, -204, 20, 21, 23,
	33, 34, 39, 43, 46, 57, 58, 59, 61, 63,
	64, 65, 68, 69, 76, 77, 78, 79, 81, 85,
	87, 91, 92, 94, 99, 100, 106, 107, 110, 112,
	117, 122, 123, 124, 131, 134, 129, 143, 145, 146,
	151, 154, 157, 159, 160, 161, 162, 163, 165, 166,
	168, 170, 167, 173, 175, 176, 182, 185, 188, 189,
	190, 193, 195, 197, 198, 199, 201, 202, 206, 204,
	205, 207, 209, 211, 212, 214, 216, 217, 218, 221,
	222, 224, 225, 227, 230, 233, 234, 235, 238, 236,
	232, 241, 243, 244, 251, 255, 256, 257, 258, 261,
	262, 263, 266, 267, 268, 273, 278, 279, 280, 281,
	28, 35, 36, 37, 38, 40, 41, 44, 45, 49,
	50, 51, 53, 80, 82, 83, 98, 101, 102, 108,
	118, 120, 125, 126, 135, 136, 137, 138, 140, 149,
	172, 174, 183, 187, 192, 194, 200, 213, 220, 228,
	229, 237, 239, 246, 247, 248, 252, 253, 269, 270,
	87, 134, 263, 262, 78, 130, 242, 272, -15, 302,
	-26, -6, -13, -4, -22, -33, -12, -29, -16, -30,
	-14, 23, -196, 4, -202, -204, -203, -205, 55, 67,
	115, 133, 127, 142, 144, 150, 152, 164, 184, 186,
	210, 226, 22, 24, 25, 26, 27, 29, 30, 31,
	32, 42, 47, 48, 52, 54, 56, 62, 66, 70,
	71, 72, 73, 74, 75, 84, 86, 88, 89, 90,
	93, 95, 97, 103, 104, 105, 111, 113, 114, 116,
	119, 121, 128, 130, 132, 139, 141, 147, 148, 153,
	155, 156, 169, 171, 177, 178, 179, 180, 181, 191,
	196, 203, 208, 219, 223, 231, 240, 242, 245, 249,
	250, 254, 259, 260, 264, 265, 271, 272, 274, 275,
	276, 277, -51, -51, -51, 195, 22, -242, 22, -243,
	-244, 66, 92, 116, 219, 134, 87, 262, -242, -55,
	216, -51, -123, 154, 222, 213, 251, -124, -122, -195,
	246, 163, -84, -51, 4, 22, 78, 57, 79, 117,
	130, 131, 62, 63, 146, 243, 246, 251, 66, -247,
	251, 251, -247, -247, -54, 251, 249, -55, -246, 242,
	242, 272, -112, 78, 260, -35, -37, -36, -72, -73,
	259, 139, 97, 181, -34, -36, -223, -225, 201, -222,
	-51, -225, -69, -70, 22, 89, 306, -166, -58, 179,
	-94, 302, -3, -166, 125, -58, -61, 125, -58, -51,
	-166, 125, 114, 302, -92, -134, -133, -132, 300, 304,
	114, 141, 141, -167, -166, -51, 125, -62, 125, -61,
	-85, 125, -84, -85, 125, -172, -171, -198, 4, -202,
	-204, -203, 269, 242, 130, -148, 302, -108, 302, -51,
	22, 178, 306, 178, -51, -123, 51, -123, 302, -125,
	-49, -50, 143, 197, 249, 287, 114, 281, -65, 5,
	84, -87, 304, 114, -239, 178, 114, 114, 114, 114,
	114, 114, 281, 143, 197, 242, 272, -126, -49, -50,
	-126, 249, -55, -97, -166, -84, 125, -84, 130, -51,
	125, -72, -73, -96, -115, -116, 153, 177, -99, 22,
	89, -99, -99, 43, 303, 303, 306, -225, -77, 302,
	-88, -168, -138, 295, -140, 293, 294, 299, 169, 282,
	-150, -58, -141, 9, 302, -153, -220, -36, 98, 29,
	-151, -152, 213, -51, 7, 8, 5, 6, -56, -175,
	-184, 254, 103, 171, 47, -218, -219, 4, -202, -197,
	-176, -186, -180, -183, 140, 55, 71, 74, 72, 75,
	223, 264, 48, 28, 101, 102, 187, 192, 239, 252,
	253, 125, 172, 126, 53, 118, 149, 91, 36, 38,
	40, 41, 49, 50, 80, 82, 83, 108, 135, 136,
	137, 138, 174, 200, 228, 237, 247, 248, 270, -203,
	-187, -188, -181, -182, -189, -88, -94, 295, -58, 302,
	-93, -158, -138, 84, -43, 204, -42, 21, 23, 92,
	267, 98, 232, 232, 204, 98, 307, 204, 204, 98,
	235, 303, -82, -58, -134, -138, -196, 295, -167, -60,
	-58, -60, 224, -51, 30, 98, -45, 306, 46, 207,
	98, -45, 306, 98, -45, 98, 303, 306, -166, 125,
	-61, 30, -147, -173, -174, -176, -185, -179, -183, -184,
	39, 45, 44, 244, 220, 229, 37, 135, 136, 137,
	138, 228, 36, 200, 108, 91, 83, 82, 174, 41,
	40, -187, -188, -181, -182, 80, 247, 248, 140, 38,
	50, 49, 270, 237, -86, -138, -238, -83, 242, 78,
	-59, -51, 295, -244, -238, 30, -86, 306, 306, 151,
	-64, 157, 168, 123, -194, 84, -200, -193, -159, 9,
	254, 103, 178, -199, 8, 294, -192, -198, 5, 7,
	293, -194, 84, 69, -201, 5, 4, -184, -159, 84,
	154, 304, -196, -195, -241, 111, -238, -195, -195, -195,
	-195, -195, -51, 151, -195, -195, 306, 306, -55, -45,
	306, 302, -71, 169, -71, 302, -52, 125, -51, -48,
	94, 169, -96, -116, -115, -117, -138, 22, -138, -140,
	-35, -35, -35, -74, -162, -138, -222, 30, -76, -51,
	-79, 306, 114, 10, 11, 54, 33, 293, 294, 295,
	296, 109, 297, 290, 291, 292, 289, 285, 286, 287,
	60, 158, 215, 13, 14, 15, 26, 180, 152, 282,
	127, 226, 299, 16, 17, 18, 142, 35, 128, 30,
	4, -138, -138, -138, -138, -138, 186, -36, -138, -86,
	-92, -36, -146, 300, 302, -92, 302, 5, 5, 302,
	-154, -138, -226, 278, 111, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 194, -191, 273, -191, -191, -177, 302, -177,
	-178, 302, -177, 279, 283, 302, -79, -58, 306, 303,
	306, 249, -113, 62, 56, -129, 125, 56, -206, -51,
	62, -207, 52, 260, 196, 113, -113, 62, -113, 62,
	62, -166, 33, 33, 249, -61, -51, 249, 249, -166,
	114, 303, 306, 301, 310, -131, 275, -119, -26, 302,
	84, 30, -119, -89, -90, -169, -91, -58, 302, -51,
	-51, -61, -62, -84, -85, -85, -15, -171, 98, -18,
	-26, -22, -33, -12, 303, 306, -78, 29, -109, 302,
	280, 161, 81, 124, 160, -110, 218, 303, 306, 249,
	306, -83, -76, -133, -132, 114, 251, 303, -50, -49,
	-63, 199, 230, 205, 221, 306, 8, 7, 7, 5,
	-196, -240, -51, -50, -49, -166, -66, -76, -67, -51,
	-130, -129, -208, -209, -206, 130, 260, 104, 30, 98,
	30, 178, 169, 287, 98, -118, 213, 214, 306, -41,
	31, 88, 302, 306, 303, -131, -168, -81, -164, -166,
	-36, -165, 302, -173, -173, -84, 246, -138, -138, -138,
	-138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
	-138, -138, -138, -138, -138, -138, -138, -138, -138, 152,
	127, 226, 35, 128, -138, 249, -138, -138, -138, -138,
	171, 169, 254, 103, 261, 89, 175, -248, 240, 32,
	-144, -36, 302, -196, -150, 213, 302, 303, 306, -86,
	-149, 301, -146, -86, 303, 303, -86, 271, 22, 89,
	295, -109, 7, -157, -156, 274, -227, 106, 119, 302,
	303, 303, -138, -138, -103, -190, -86, 4, 280, 161,
	81, 124, 160, 218, -103, -104, -138, -86, -105, -139,
	-140, 293, 294, 299, 302, 213, -106, -138, -86, -138,
	42, 148, 250, -107, -138, 114, -86, -138, -138, -138,
	-86, -86, -86, 302, 7, 7, 246, 246, 7, -131,
	303, -158, -42, -58, -51, -51, 169, -129, 125, -47,
	169, -173, -51, 302, 302, 145, 145, -51, -51, 125,
	-51, 125, -51, -51, -43, 204, 302, 302, -51, 204,
	-51, -58, 204, 235, 114, -58, -138, -98, 208, -138,
	-98, -121, 178, -82, 269, -51, 208, -80, 306, 114,
	287, -82, -45, -45, -45, -166, -173, 300, 300, 7,
	249, 249, 249, 249, 302, -138, -240, -59, -240, -49,
	258, 59, 199, -200, -109, 306, 303, 303, 306, -52,
	130, -52, -26, -84, -26, -58, 98, 5, -51, -162,
	-18, -51, -95, 119, -170, 306, 284, 67, -102, 144,
	164, 115, 150, 210, 133, -135, 307, -161, -160, 30,
	-51, -36, -165, -164, 281, -138, -138, 249, -248, 240,
	-144, -138, 171, 254, 103, 261, 89, 175, 114, 302,
	-139, -139, -86, 302, -86, -138, 301, 301, 306, 303,
	-73, 306, -72, -138, -86, -86, 303, 303, -155, -156,
	93, -138, -232, 185, 302, 302, -138, 30, 306, 303,
	114, 303, 303, -111, 191, 303, 10, 11, 293, 294,
	295, 296, 109, 297, 290, 291, 292, 289, 285, 286,
	287, 60, 158, 215, 13, 14, 15, 142, 128, -139,
	-139, -139, -86, 302, 303, -142, -143, 114, 111, 30,
	-107, -107, -107, 303, 114, -86, 306, 306, 306, 303,
	303, 303, 7, 303, 306, 303, 281, 281, 303, -95,
	249, 249, 98, 169, 266, -210, -207, -138, -76, 302,
	302, -40, 92, 224, -114, 98, -45, 98, -45, 249,
	-113, 62, -86, -86, 249, 249, 235, 301, -88, 208,
	61, 303, -88, -131, -90, -81, -158, 303, 301, 7,
	7, 303, 161, 124, 160, -110, 160, -110, -110, 7,
	-51, -68, 129, -130, 302, -52, 302, 302, -71, 302,
	-51, -48, 303, -145, 121, 43, -164, 175, 144, 144,
	-164, -102, 144, -100, 184, -100, -100, -161, -196, 308,
	-51, 302, 303, -138, -138, -139, -139, 114, 302, -138,
	-147, 26, 26, 303, -86, 303, 306, 303, -146, 303,
	271, -73, -73, -73, 5, 95, -138, 245, -233, -51,
	302, 275, -72, 303, -173, -173, -138, -142, -138, -173,
	-173, -139, -139, -139, -139, -139, -139, -139, -139, -139,
	-139, -139, -139, -139, -139, -139, -139, -139, -139, -139,
	89, 169, 175, -139, 306, -86, 303, -143, -142, -138,
	-138, -173, 303, 303, 303, -86, -138, -138, -138, 303,
	7, -145, -51, -51, -129, 98, -211, 62, -212, 54,
	104, 66, 169, 171, 260, 196, 52, 84, 203, 303,
	303, -76, -76, 169, 84, 169, 84, 77, 256, -51,
	-51, -58, -51, -51, 303, 303, -51, -58, -88, -120,
	302, 178, -26, -98, 287, 301, 301, 303, 128, -75,
	-163, -51, -221, 302, -218, -219, -56, 302, -76, -66,
	30, -75, 178, -229, 276, -138, -86, 241, -164, -164,
	-101, 265, 178, 144, -164, -137, -136, 112, 167, 302,
	-76, -160, 26, 26, -138, -147, 303, -138, -138, 303,
	-138, 5, -138, 303, 303, 303, -138, -234, -51, -138,
	303, 303, 303, -143, 114, 89, 175, 302, -138, 303,
	303, 306, 303, 303, 303, -229, -129, -51, -84, -51,
	104, 125, 171, 145, 302, -139, -58, -128, -245, 65,
	238, 303, 303, 171, 171, -138, -173, -45, -45, 249,
	249, 90, -76, 62, -94, -36, 302, 188, 303, 306,
	-57, -92, 54, -57, -138, 302, -75, 303, 303, -26,
	303, -58, -230, -231, -51, 246, -101, 302, -138, -164,
	306, 309, 287, -76, 303, -138, -138, 303, 303, -73,
	-228, 190, 303, -139, 114, 302, -147, 303, -138, -212,
	-52, 169, -138, -53, 302, -68, 302, 203, -44, 54,
	-51, -51, 262, 170, 303, -51, -51, -128, -163, -41,
	-84, -41, 303, -86, 303, -68, -128, 302, 306, 30,
	-141, -56, -51, -76, -136, -196, 303, 303, -73, 43,
	-139, -147, 303, 303, 98, 303, -215, 159, -51, -76,
	-58, -39, 265, -84, 224, -131, 302, -68, -57, -73,
	-128, -68, -75, -231, -233, 302, 303, -235, 198, 214,
	-86, 303, 104, -213, -216, -214, 178, 115, 189, 227,
	303, 303, -71, -138, -89, -76, -41, 303, -68, 303,
	-86, 303, -236, -237, 35, 257, 69, -138, -236, -51,
	-214, 178, -216, 178, 262, 87, -215, -131, 303, -128,
	-73, -237, 193, 110, 213, 193, 110, -217, 166, 207,
	46, 224, -217, -213, -46, 46, 207, -68, 303, 26,
	20, 171, 84, -237,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 0, 0, 61,
	62, 63, 64, 65, 0, 0, 380, 0, 0, 0,
	0, 0, 0, 0, 354, -2, 0, 133, 0, 310,
	0, 310, 310, 314, 0, 382, 276, 379, -2, 390,
	0, 0, 0, 388, 368, 0, 0, -2, 0, 0,
	0, 0, 0, 786, 813, 814, 815, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 854,
	855, 856, 857, 858, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
	93, 0, 197, 827, 828, 829, 830, 831, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
	1087, 1088, 99, 106, 107, 897, 109, 0, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 0, 303,
	911, 316, 129, 876, 915, 982, 929, 136, 146, 0,
	988, -2, 150, 77, 179, 180, 181, 0, 183, 199,
	0, 0, 0, 0, 0, 191, 0, 0, 0, 321,
	309, 321, 306, 307, 308, 311, 0, 302, 0, 381,
	0, 0, 0, 0, 275, -2, 364, 365, -2, 0,
	385, 385, 385, 0, 0, 365, 0, 373, 901, 376,
	796, 374, 0, 0, 387, 386, 0, 369, 449, 0,
	410, 0, 2, 0, 967, 449, 0, 967, 0, 0,
	0, 967, 0, 0, 787, 765, 759, 760, 0, 0,
	0, 0, 0, 0, 455, 67, 967, 51, 967, 782,
	51, 967, 75, 51, 967, 0, 94, 96, 823, 824,
	825, 826, 993, 0, 0, 0, 0, 104, 0, 108,
	110, 0, 0, 0, 315, 130, 956, 132, 0, 135,
	137, 138, 0, 0, 0, 0, 0, 0, 149, 174,
	175, 78, 0, 0, 201, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 194, 0, 0, 304, 317, 318,
	305, 0, 313, 51, 453, 251, 967, 251, 817, 326,
	967, -2, 0, 360, 397, 398, 0, 0, 0, 383,
	384, 0, 0, 0, 356, 357, 0, 375, 0, 0,
	413, 774, 778, 779, 542, 0, 0, 0, 0, 0,
	0, 631, 632, 633, 0, 635, 636, 637, 961, 0,
	641, 642, 982, 786, 799, 800, 801, 802, 0, 0,
	0, 807, 808, 809, 758, 682, 651, -2, -2, 797,
	479, 480, 481, 482, -2, 995, 655, 657, 659, 660,
	661, 662, 0, 945, 962, 963, 978, 979, 987, 991,
	992, 967, 975, 968, 957, 965, 974, 856, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 822,
	504, 505, 510, 511, 513, 413, 411, 450, 451, 0,
	0, 771, 769, 770, 28, 299, 30, 0, 299, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	58, 0, 0, 780, 766, 0, 763, 764, 459, 0,
	332, 0, 0, 456, 0, 0, 69, 0, 49, 50,
	0, 71, 0, 0, 73, 0, 380, 0, 0, 967,
	0, 380, 0, 716, 465, 466, 467, 468, 469, 539,
	472, 473, 474, 475, 476, 477, 478, 486, 487, 488,
	489, 490, 491, 492, 501, 0, 485, 485, 485, 498,
	499, 502, 503, 508, 509, 520, 521, 523, 525, 519,
	519, 519, 516, 517, 0, 714, 0, 113, 0, 851,
	784, 789, 790, 119, 0, 0, 0, 0, 0, 0,
	141, 161, 162, 163, 142, 144, 151, 153, 154, 155,
	164, 165, 166, 167, 268, 0, 270, 177, 178, 810,
	0, 143, 145, 147, 148, 168, 169, 0, 171, 172,
	173, 0, 79, 182, 184, 0, 198, 185, 186, 187,
	188, 189, 190, 193, 195, 196, 0, 0, 312, 271,
	0, 209, 0, 0, 0, 0, 0, 967, 816, 323,
	0, 0, 363, 395, 396, 399, 402, 403, 400, 542,
	370, 371, 372, 391, 392, 286, 377, 0, 0, 793,
	459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 768, 0, 0,
	777, 547, 548, 549, 571, 572, 0, -2, 714, 0,
	638, 639, 640, 0, 0, -2, 0, 804, 539, 0,
	0, 757, 684, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 737, 743, 0, 0, 0, 0, 0, 0,
	0, 0, 494, 507, 518, 515, 514, 496, 0, 495,
	493, 0, 497, 0, 0, 0, 459, 0, 0, 773,
	0, 0, 0, 0, 298, 32, 967, 0, 53, 0,
	0, 241, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 788, 0, 0, 0,
	0, 0, 0, 761, 0, 343, 0, 343, 334, 0,
	0, 0, 330, 346, 347, 349, 350, 0, 0, 457,
	68, 783, 51, 76, 51, 51, 82, 95, 0, 97,
	100, 101, 102, 103, 98, 0, 460, 462, 470, 0,
	526, 527, 528, 529, 530, 531, 540, 105, 0, 0,
	0, 114, 115, 791, 792, 0, 0, 134, 139, 140,
	322, 0, 158, 0, 160, 0, 269, 812, 811, 539,
	80, 200, 127, 319, 320, 454, 0, 0, 208, 793,
	210, 212, 213, 214, 215, 817, 0, 817, 0, 0,
	0, 0, 0, 0, 0, 401, 404, 405, 0, 394,
	284, 285, 380, 0, 795, 407, 775, 440, 414, 422,
	438, 425, 0, 543, 544, 545, 0, 550, 551, 552,
	553, 554, 555, 556, 557, 558, 559, -2, -2, -2,
	563, 564, 565, -2, -2, -2, 569, 570, -2, 0,
	0, 0, 768, 0, -2, 0, 579, -2, -2, -2,
	583, 0, 586, 588, 590, 0, 0, 0, 0, 767,
	600, 749, 0, 776, 585, 0, 0, 634, 0, 0,
	0, 720, 721, 0, -2, 643, 390, 0, 0, 0,
	0, 805, 0, 756, 752, 0, 692, 0, 0, 0,
	656, 658, 0, 0, 0, 0, 724, -2, -2, -2,
	-2, -2, -2, -2, 0, 0, 714, 734, 0, 0,
	602, 0, 0, 0, 0, 982, 0, 714, 742, 0,
	0, 0, 0, 0, 714, 0, 748, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 407,
	452, 772, 31, 288, 0, 0, 0, 34, 967, 42,
	0, 223, 0, 0, 0, 0, 0, 301, 43, 967,
	51, 967, 51, 44, 29, 299, 0, 0, 292, 0,
	287, 290, 0, 59, 0, 781, 0, 66, 0, 458,
	327, 328, 0, 0, 336, 333, 0, 459, 0, 0,
	0, 0, 70, 72, 74, 0, 717, 0, 0, 0,
	0, 0, 0, 0, 0, 715, 111, 785, 112, 131,
	156, 157, 159, 152, 170, 0, 217, 250, 0, 0,
	817, 0, 206, 251, 272, 0, 0, 325, 326, 393,
	0, 794, 409, 0, 412, 0, 0, 0, 0, 0,
	0, 446, 446, 446, 444, 438, 0, 424, 437, 0,
	436, -2, 425, 0, 0, -2, -2, 0, 0, 0,
	601, -2, 584, 587, 589, 591, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 715, 718, 719, 0, -2,
	0, 0, 389, 390, 390, 390, 649, 0, 0, 753,
	0, 0, 650, 0, 0, 0, 0, 0, 0, 665,
	0, 666, 667, 0, 0, 668, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	606, 607, 0, 0, 669, 740, 741, 0, 0, 0,
	0, 0, 0, 674, 0, 747, 0, 0, 0, 678,
	679, 680, 0, 483, 0, 500, 522, 524, 512, 409,
	0, 0, 0, 0, 52, 221, 240, 0, 0, 0,
	0, 36, 0, 0, 0, 0, 40, 0, 46, 0,
	0, 0, 0, 0, 0, 0, 60, 762, 342, 0,
	341, 0, 331, 343, 348, 345, 351, 0, 463, 0,
	0, 471, 532, 533, 534, 535, 536, 537, 538, 0,
	128, 204, 0, 211, 0, 0, 0, 209, 0, 0,
	0, 324, 378, 686, 0, 0, 415, 0, 0, 0,
	0, 0, 0, 441, 445, 442, 443, 423, 420, 0,
	434, 0, 427, 546, -2, 0, 0, 0, 0, -2,
	0, 0, 0, 750, 0, 709, 0, -2, 722, 644,
	0, 0, 0, 0, 806, 751, 755, 0, 690, 691,
	695, 0, 0, 654, 0, 0, 723, 733, 735, 603,
	604, 608, 609, 610, 611, 612, 613, 614, 615, 616,
	617, -2, -2, -2, 621, 622, 623, -2, -2, -2,
	0, 0, 0, 736, 0, 0, 712, 738, 739, 744,
	745, 0, 671, 672, 673, 746, 0, 0, 0, 506,
	0, 686, 294, 296, 33, 0, 222, 0, 225, 0,
	0, 0, 0, 231, 232, 0, 0, 0, 0, 242,
	249, 0, 0, 0, 48, 0, 0, 300, 0, 51,
	51, 289, 0, 0, 202, 203, 293, 291, 329, 0,
	0, 0, 335, 344, 0, 464, 461, 541, 0, 0,
	277, 283, 283, 0, 652, 653, 0, 0, 0, 0,
	0, 0, 0, 366, 0, 408, 406, 0, 428, 0,
	430, 0, 0, 0, 432, 0, 418, 0, 417, 0,
	0, 426, 0, 0, -2, 0, 594, -2, -2, 708,
	715, 803, 390, 645, 647, 648, 754, 697, 694, 0,
	681, 663, 664, 732, 0, 0, 0, 0, 715, 711,
	670, 0, 676, 677, 484, 367, 35, 0, 226, 227,
	817, 0, 230, 233, 0, 235, 819, 217, 0, 246,
	247, 244, 0, 37, 38, 47, 55, 39, 45, 0,
	0, 0, 0, 0, 352, 353, 0, 0, 249, 0,
	286, 798, 0, 286, 0, 0, 0, 239, 217, 207,
	249, 0, 685, 687, 0, 0, 429, 0, 448, 431,
	0, 421, 0, 0, 435, -2, -2, 595, 710, 0,
	390, 0, 683, -2, 0, 0, 0, 713, 0, 224,
	228, 0, 0, 255, 0, 243, 0, 0, 57, 0,
	295, 297, 0, 338, 459, 340, 0, 217, 278, 279,
	282, 280, 283, 390, 249, 205, 217, 0, 0, 0,
	439, 0, 0, 0, 419, 416, 433, 646, 700, 0,
	-2, 0, 629, 675, 0, 234, 260, 0, 0, 0,
	251, 41, 0, 54, 0, 339, 0, 237, 286, 0,
	217, 273, 0, 688, 689, 0, 447, 0, 0, 0,
	696, 630, 0, 236, 256, 257, 0, 252, 253, 254,
	818, 248, 255, 56, 459, 0, 281, 644, 238, 249,
	390, 693, 698, 701, -2, 932, 848, 0, 699, 229,
	258, 0, 259, 0, 0, 0, 260, 337, 220, 217,
	0, 0, 703, 704, 705, 706, 707, 261, 0, 264,
	265, 0, 262, 245, 216, 218, 219, 274, 0, 0,
	263, 266, 267, 702,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 291, 3, 297, 292, 3,
	302, 303, 295, 293, 306, 294, 304, 296, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 310, 305,
	285, 287, 286, 3, 307, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 300, 3, 301, 290, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 308, 289, 309, 299,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 288, 57628, 298, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:714
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:720
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:726
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:751
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:762
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:768
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:772
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:778
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:782
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:789
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:799
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:804
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:809
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:814
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:818
		{
			return unimplemented(sqllex)
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:821
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:841
		{
			return unimplemented(sqllex)
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:844
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:851
		{
			return unimplemented(sqllex)
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:854
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:861
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:870
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = nil
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = DropCascade
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = DropRestrict
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = DropDefault
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:908
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:913
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:914
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:917
		{
			return unimplemented(sqllex)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:918
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:922
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:945
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:976
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:980
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:984
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:994
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 81:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 93:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1047
		{ /* SKIP DOC */
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1172
		{
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1231
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1235
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1246
		{ /* SKIP DOC */
		}
	case 134:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1309
		{
			return unimplemented(sqllex)
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1315
		{
			return unimplemented(sqllex)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = Low
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = Normal
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = High
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1407
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1426
		{
			return unimplemented(sqllex)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1427
		{
			return unimplemented(sqllex)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1428
		{
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1522
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 202:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1618
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1622
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = DropDefault
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1632
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1660
		{
			return unimplemented(sqllex)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1743
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1755
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1834
		{
			return unimplemented(sqllex)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1835
		{
			return unimplemented(sqllex)
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1836
		{
			return unimplemented(sqllex)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1837
		{
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1844
		{
			return unimplemented(sqllex)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1845
		{
			return unimplemented(sqllex)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1846
		{
			return unimplemented(sqllex)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1847
		{
			return unimplemented(sqllex)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1848
		{
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1851
		{
			return unimplemented(sqllex)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1854
		{
			return unimplemented(sqllex)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1857
		{
			return unimplemented(sqllex)
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1858
		{
			return unimplemented(sqllex)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1859
		{
			return unimplemented(sqllex)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1860
		{
			return unimplemented(sqllex)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1861
		{
			return unimplemented(sqllex)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = true
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = false
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1948
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1951
		{
			return unimplemented(sqllex)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1952
		{
			return unimplemented(sqllex)
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1955
		{
			return unimplemented(sqllex)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1956
		{
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = Ascending
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1964
		{
			sqlVAL.union.val = Descending
		}
	case 286:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 287:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2010
		{
			return unimplemented(sqllex)
		}
	case 297:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2011
		{
			return unimplemented(sqllex)
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = true
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = false
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2024
		{
		}
	case 301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2025
		{
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2035
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2058
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2067
		{
		}
	case 310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2068
		{
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.str = ""
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.str = ""
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2138
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2162
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 330:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2169
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2181
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2211
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2215
		{
			return unimplemented(sqllex)
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 344:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2240
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2241
		{
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2364
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2441
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2468
		{
			return unimplemented(sqllex)
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2469
		{
			return unimplemented(sqllex)
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2470
		{
			return unimplemented(sqllex)
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2473
		{
			return unimplemented(sqllex)
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2474
		{
			return unimplemented(sqllex)
		}
	case 378:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2477
		{
			return unimplemented(sqllex)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2480
		{
			return unimplemented(sqllex)
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2481
		{
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2484
		{
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2485
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = true
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = false
		}
	case 385:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = false
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = true
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2508
		{
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2509
		{
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2547
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2556
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2567
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2608
		{
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2609
		{
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2659
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.union.val = &From{}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2707
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2754
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.str = astFullJoin
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.str = astLeftJoin
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.str = astRightJoin
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.str = astInnerJoin
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2853
		{
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2854
		{
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2944
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2945
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2948
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2949
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2950
		{
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2958
		{
			return unimplemented(sqllex)
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3005
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3014
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = nil
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3063
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3135
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3167
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3206
		{
		}
	case 519:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3207
		{
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3238
		{
			return unimplemented(sqllex)
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3239
		{
			return unimplemented(sqllex)
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3240
		{
			return unimplemented(sqllex)
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3241
		{
			return unimplemented(sqllex)
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3242
		{
			return unimplemented(sqllex)
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3243
		{
			return unimplemented(sqllex)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3244
		{
			return unimplemented(sqllex)
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3245
		{
			return unimplemented(sqllex)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3246
		{
			return unimplemented(sqllex)
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3247
		{
			return unimplemented(sqllex)
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3248
		{
			return unimplemented(sqllex)
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3249
		{
			return unimplemented(sqllex)
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3250
		{
			return unimplemented(sqllex)
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3251
		{
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3254
		{
			return unimplemented(sqllex)
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3255
		{
			return unimplemented(sqllex)
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3286
		{
			return unimplemented(sqllex)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3287
		{
			return unimplemented(sqllex)
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3447
		{
			return unimplemented(sqllex)
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3698
		{
			return unimplemented(sqllex)
		}
	case 646:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3699
		{
			return unimplemented(sqllex)
		}
	case 647:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3722
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3737
		{
			return unimplemented(sqllex)
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3738
		{
			return unimplemented(sqllex)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3742
		{
			return unimplemented(sqllex)
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3759
		{
			return unimplemented(sqllex)
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3760
		{
			return unimplemented(sqllex)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3761
		{
			return unimplemented(sqllex)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3762
		{
			return unimplemented(sqllex)
		}
	case 663:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: castExplicit}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3791
		{
			return unimplemented(sqllex)
		}
	case 671:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3835
		{
			return unimplemented(sqllex)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3836
		{
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3839
		{
			return unimplemented(sqllex)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3840
		{
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = Window(nil)
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3865
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 693:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.str = ""
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3927
		{
			return unimplemented(sqllex)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3928
		{
			return unimplemented(sqllex)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3929
		{
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3932
		{
			return unimplemented(sqllex)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3933
		{
			return unimplemented(sqllex)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3939
		{
			return unimplemented(sqllex)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3940
		{
			return unimplemented(sqllex)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3941
		{
			return unimplemented(sqllex)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3942
		{
			return unimplemented(sqllex)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3943
		{
			return unimplemented(sqllex)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4279
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4280
		{
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4436
		{
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4472
		{
			return unimplemented(sqllex)
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = DNull
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.str = ""
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
