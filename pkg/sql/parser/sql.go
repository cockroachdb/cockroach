// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:466
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_ROLE = 57417
const CURRENT_TIME = 57418
const CURRENT_TIMESTAMP = 57419
const CURRENT_USER = 57420
const CYCLE = 57421
const DATA = 57422
const DATABASE = 57423
const DATABASES = 57424
const DATE = 57425
const DAY = 57426
const DEC = 57427
const DECIMAL = 57428
const DEFAULT = 57429
const DEALLOCATE = 57430
const DEFERRABLE = 57431
const DELETE = 57432
const DESC = 57433
const DISCARD = 57434
const DISTINCT = 57435
const DO = 57436
const DOUBLE = 57437
const DROP = 57438
const ELSE = 57439
const ENCODING = 57440
const END = 57441
const ESCAPE = 57442
const EXCEPT = 57443
const EXISTS = 57444
const EXECUTE = 57445
const EXPERIMENTAL_FINGERPRINTS = 57446
const EXPLAIN = 57447
const EXTRACT = 57448
const EXTRACT_DURATION = 57449
const FALSE = 57450
const FAMILY = 57451
const FETCH = 57452
const FILTER = 57453
const FIRST = 57454
const FLOAT = 57455
const FLOORDIV = 57456
const FOLLOWING = 57457
const FOR = 57458
const FORCE_INDEX = 57459
const FOREIGN = 57460
const FROM = 57461
const FULL = 57462
const GRANT = 57463
const GRANTS = 57464
const GREATEST = 57465
const GROUP = 57466
const GROUPING = 57467
const HAVING = 57468
const HELP = 57469
const HIGH = 57470
const HOUR = 57471
const INCREMENTAL = 57472
const IF = 57473
const IFNULL = 57474
const ILIKE = 57475
const IN = 57476
const INTERLEAVE = 57477
const INDEX = 57478
const INDEXES = 57479
const INITIALLY = 57480
const INNER = 57481
const INSERT = 57482
const INT = 57483
const INT2VECTOR = 57484
const INT8 = 57485
const INT64 = 57486
const INTEGER = 57487
const INTERSECT = 57488
const INTERVAL = 57489
const INTO = 57490
const IS = 57491
const ISOLATION = 57492
const JOB = 57493
const JOIN = 57494
const KEY = 57495
const KEYS = 57496
const KV = 57497
const LATERAL = 57498
const LC_CTYPE = 57499
const LC_COLLATE = 57500
const LEADING = 57501
const LEAST = 57502
const LEFT = 57503
const LEVEL = 57504
const LIKE = 57505
const LIMIT = 57506
const LOCAL = 57507
const LOCALTIME = 57508
const LOCALTIMESTAMP = 57509
const LOW = 57510
const LSHIFT = 57511
const MATCH = 57512
const MINUTE = 57513
const MONTH = 57514
const NAN = 57515
const NAME = 57516
const NAMES = 57517
const NATURAL = 57518
const NEXT = 57519
const NO = 57520
const NO_INDEX_JOIN = 57521
const NORMAL = 57522
const NOT = 57523
const NOTHING = 57524
const NULL = 57525
const NULLIF = 57526
const NULLS = 57527
const NUMERIC = 57528
const OF = 57529
const OFF = 57530
const OFFSET = 57531
const OID = 57532
const ON = 57533
const ONLY = 57534
const OPTIONS = 57535
const OR = 57536
const ORDER = 57537
const ORDINALITY = 57538
const OUT = 57539
const OUTER = 57540
const OVER = 57541
const OVERLAPS = 57542
const OVERLAY = 57543
const PARENT = 57544
const PARTIAL = 57545
const PARTITION = 57546
const PASSWORD = 57547
const PAUSE = 57548
const PLACING = 57549
const PLANS = 57550
const POSITION = 57551
const PRECEDING = 57552
const PRECISION = 57553
const PREPARE = 57554
const PRIMARY = 57555
const PRIORITY = 57556
const QUERIES = 57557
const QUERY = 57558
const RANGE = 57559
const READ = 57560
const REAL = 57561
const RECURSIVE = 57562
const REF = 57563
const REFERENCES = 57564
const REGCLASS = 57565
const REGPROC = 57566
const REGPROCEDURE = 57567
const REGNAMESPACE = 57568
const REGTYPE = 57569
const RENAME = 57570
const REPEATABLE = 57571
const RELEASE = 57572
const RESET = 57573
const RESTORE = 57574
const RESTRICT = 57575
const RESUME = 57576
const RETURNING = 57577
const REVOKE = 57578
const RIGHT = 57579
const ROLLBACK = 57580
const ROLLUP = 57581
const ROW = 57582
const ROWS = 57583
const RSHIFT = 57584
const SAVEPOINT = 57585
const SCATTER = 57586
const SEARCH = 57587
const SECOND = 57588
const SELECT = 57589
const SEQUENCES = 57590
const SERIAL = 57591
const SERIALIZABLE = 57592
const SESSION = 57593
const SESSIONS = 57594
const SESSION_USER = 57595
const SET = 57596
const SETTING = 57597
const SETTINGS = 57598
const SHOW = 57599
const SIMILAR = 57600
const SIMPLE = 57601
const SMALLINT = 57602
const SMALLSERIAL = 57603
const SNAPSHOT = 57604
const SOME = 57605
const SPLIT = 57606
const SQL = 57607
const START = 57608
const STATUS = 57609
const STDIN = 57610
const STRICT = 57611
const STRING = 57612
const STORING = 57613
const SUBSTRING = 57614
const SYMMETRIC = 57615
const SYSTEM = 57616
const TABLE = 57617
const TABLES = 57618
const TEMP = 57619
const TEMPLATE = 57620
const TEMPORARY = 57621
const TESTING_RANGES = 57622
const TESTING_RELOCATE = 57623
const TEXT = 57624
const THEN = 57625
const TIME = 57626
const TIMESTAMP = 57627
const TIMESTAMPTZ = 57628
const TO = 57629
const TRAILING = 57630
const TRACE = 57631
const TRANSACTION = 57632
const TREAT = 57633
const TRIM = 57634
const TRUE = 57635
const TRUNCATE = 57636
const TYPE = 57637
const UNBOUNDED = 57638
const UNCOMMITTED = 57639
const UNION = 57640
const UNIQUE = 57641
const UNKNOWN = 57642
const UPDATE = 57643
const UPSERT = 57644
const USE = 57645
const USER = 57646
const USERS = 57647
const USING = 57648
const UUID = 57649
const VALID = 57650
const VALIDATE = 57651
const VALUE = 57652
const VALUES = 57653
const VARCHAR = 57654
const VARIADIC = 57655
const VIEW = 57656
const VARYING = 57657
const WHEN = 57658
const WHERE = 57659
const WINDOW = 57660
const WITH = 57661
const WITHIN = 57662
const WITHOUT = 57663
const WRITE = 57664
const YEAR = 57665
const ZONE = 57666
const NOT_LA = 57667
const WITH_LA = 57668
const AS_LA = 57669
const POSTFIXOP = 57670
const UMINUS = 57671

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5650

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 36,
	348, 36,
	-2, 461,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 61,
	1, 434,
	191, 434,
	235, 434,
	344, 434,
	346, 434,
	348, 434,
	-2, 444,
	-1, 76,
	1, 437,
	191, 437,
	235, 437,
	344, 437,
	346, 437,
	348, 437,
	-2, 443,
	-1, 85,
	1, 36,
	348, 36,
	-2, 461,
	-1, 475,
	1, 186,
	348, 186,
	-2, 1038,
	-1, 545,
	110, 471,
	164, 471,
	189, 471,
	-2, 440,
	-1, 548,
	110, 470,
	164, 470,
	189, 470,
	-2, 438,
	-1, 628,
	345, 966,
	-2, 959,
	-1, 629,
	345, 967,
	-2, 960,
	-1, 635,
	5, 635,
	345, 635,
	-2, 1159,
	-1, 659,
	5, 596,
	-2, 1133,
	-1, 660,
	5, 629,
	345, 629,
	-2, 1135,
	-1, 661,
	5, 604,
	-2, 1136,
	-1, 662,
	5, 603,
	-2, 1137,
	-1, 663,
	5, 629,
	345, 629,
	-2, 1140,
	-1, 664,
	5, 629,
	345, 629,
	-2, 1141,
	-1, 665,
	5, 630,
	-2, 1144,
	-1, 666,
	5, 590,
	-2, 1145,
	-1, 667,
	5, 590,
	-2, 1146,
	-1, 668,
	5, 611,
	-2, 1150,
	-1, 669,
	5, 591,
	-2, 1155,
	-1, 670,
	5, 592,
	-2, 1156,
	-1, 671,
	5, 593,
	-2, 1157,
	-1, 672,
	5, 594,
	-2, 1158,
	-1, 673,
	5, 590,
	-2, 1163,
	-1, 674,
	5, 597,
	-2, 1168,
	-1, 675,
	5, 595,
	-2, 1171,
	-1, 676,
	5, 627,
	345, 627,
	-2, 1173,
	-1, 677,
	5, 631,
	-2, 1176,
	-1, 678,
	5, 633,
	-2, 1177,
	-1, 679,
	5, 626,
	345, 626,
	-2, 1182,
	-1, 797,
	110, 470,
	164, 470,
	189, 470,
	-2, 441,
	-1, 906,
	101, 444,
	110, 444,
	146, 444,
	164, 444,
	189, 444,
	195, 444,
	298, 444,
	-2, 754,
	-1, 915,
	345, 943,
	-2, 931,
	-1, 1189,
	13, 0,
	14, 0,
	15, 0,
	328, 0,
	329, 0,
	330, 0,
	-2, 670,
	-1, 1190,
	13, 0,
	14, 0,
	15, 0,
	328, 0,
	329, 0,
	330, 0,
	-2, 671,
	-1, 1191,
	13, 0,
	14, 0,
	15, 0,
	328, 0,
	329, 0,
	330, 0,
	-2, 672,
	-1, 1195,
	13, 0,
	14, 0,
	15, 0,
	328, 0,
	329, 0,
	330, 0,
	-2, 676,
	-1, 1196,
	13, 0,
	14, 0,
	15, 0,
	328, 0,
	329, 0,
	330, 0,
	-2, 677,
	-1, 1197,
	13, 0,
	14, 0,
	15, 0,
	328, 0,
	329, 0,
	330, 0,
	-2, 678,
	-1, 1200,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	163, 0,
	258, 0,
	325, 0,
	331, 0,
	-2, 683,
	-1, 1206,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	163, 0,
	258, 0,
	325, 0,
	331, 0,
	-2, 685,
	-1, 1208,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	163, 0,
	258, 0,
	325, 0,
	331, 0,
	-2, 689,
	-1, 1209,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	163, 0,
	258, 0,
	325, 0,
	331, 0,
	-2, 690,
	-1, 1210,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	163, 0,
	258, 0,
	325, 0,
	331, 0,
	-2, 691,
	-1, 1211,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	163, 0,
	258, 0,
	325, 0,
	331, 0,
	-2, 692,
	-1, 1237,
	200, 825,
	-2, 828,
	-1, 1273,
	119, 865,
	345, 966,
	-2, 959,
	-1, 1274,
	119, 866,
	-2, 1129,
	-1, 1275,
	119, 867,
	-2, 1037,
	-1, 1276,
	119, 868,
	-2, 1002,
	-1, 1277,
	119, 869,
	-2, 1019,
	-1, 1278,
	119, 870,
	-2, 1036,
	-1, 1279,
	119, 871,
	-2, 1088,
	-1, 1460,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	163, 0,
	258, 0,
	325, 0,
	331, 0,
	-2, 684,
	-1, 1461,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	163, 0,
	258, 0,
	325, 0,
	331, 0,
	-2, 686,
	-1, 1466,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	163, 0,
	258, 0,
	325, 0,
	331, 0,
	-2, 687,
	-1, 1484,
	200, 824,
	-2, 827,
	-1, 1649,
	101, 444,
	110, 444,
	146, 444,
	164, 444,
	189, 444,
	195, 444,
	298, 444,
	-2, 525,
	-1, 1691,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	163, 0,
	258, 0,
	325, 0,
	331, 0,
	-2, 688,
	-1, 1696,
	149, 0,
	-2, 704,
	-1, 1706,
	200, 826,
	-2, 829,
	-1, 1748,
	13, 0,
	14, 0,
	15, 0,
	328, 0,
	329, 0,
	330, 0,
	-2, 731,
	-1, 1749,
	13, 0,
	14, 0,
	15, 0,
	328, 0,
	329, 0,
	330, 0,
	-2, 732,
	-1, 1750,
	13, 0,
	14, 0,
	15, 0,
	328, 0,
	329, 0,
	330, 0,
	-2, 733,
	-1, 1754,
	13, 0,
	14, 0,
	15, 0,
	328, 0,
	329, 0,
	330, 0,
	-2, 737,
	-1, 1755,
	13, 0,
	14, 0,
	15, 0,
	328, 0,
	329, 0,
	330, 0,
	-2, 738,
	-1, 1756,
	13, 0,
	14, 0,
	15, 0,
	328, 0,
	329, 0,
	330, 0,
	-2, 739,
	-1, 1838,
	1, 526,
	70, 526,
	101, 526,
	110, 526,
	120, 526,
	124, 526,
	126, 526,
	139, 526,
	146, 526,
	152, 526,
	161, 526,
	164, 526,
	176, 526,
	189, 526,
	191, 526,
	195, 526,
	235, 526,
	237, 526,
	298, 526,
	306, 526,
	317, 526,
	318, 526,
	327, 526,
	344, 526,
	346, 526,
	348, 526,
	349, 526,
	-2, 525,
	-1, 1888,
	149, 0,
	-2, 705,
	-1, 1891,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	163, 0,
	258, 0,
	325, 0,
	331, 0,
	-2, 708,
	-1, 1892,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	163, 0,
	258, 0,
	325, 0,
	331, 0,
	-2, 710,
	-1, 2008,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	163, 0,
	258, 0,
	325, 0,
	331, 0,
	-2, 709,
	-1, 2009,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	163, 0,
	258, 0,
	325, 0,
	331, 0,
	-2, 711,
	-1, 2016,
	149, 0,
	-2, 740,
	-1, 2083,
	149, 0,
	-2, 741,
	-1, 2164,
	36, 0,
	133, 0,
	163, 0,
	258, 0,
	325, 0,
	331, 0,
	-2, 1132,
}

const sqlPrivate = 57344

const sqlLast = 31632

var sqlAct = [...]int{

	629, 1794, 2163, 2147, 2112, 2192, 1372, 2162, 1980, 1318,
	1326, 1089, 2148, 1834, 2149, 2040, 1961, 549, 1725, 2006,
	1621, 1937, 1860, 1846, 1804, 619, 1833, 682, 1401, 984,
	1647, 1644, 1948, 570, 627, 1662, 527, 626, 98, 98,
	605, 98, 1376, 1095, 1623, 1550, 690, 1942, 60, 1576,
	1821, 1371, 342, 98, 98, 98, 1390, 340, 855, 1812,
	98, 1635, 827, 98, 830, 1327, 1091, 1375, 1549, 817,
	1168, 98, 1408, 911, 536, 1495, 1235, 1131, 1661, 1456,
	98, 98, 1630, 1414, 98, 1115, 1140, 98, 98, 98,
	98, 1397, 1163, 98, 98, 735, 1049, 1409, 1260, 1364,
	585, 1299, 599, 1245, 956, 1220, 326, 24, 1223, 856,
	832, 530, 818, 556, 75, 734, 941, 324, 1254, 711,
	531, 1270, 700, 945, 702, 902, 1379, 554, 703, 598,
	1120, 559, 801, 76, 474, 1320, 460, 799, 470, 800,
	90, 960, 522, 621, 77, 449, 1047, 696, 780, 94,
	1411, 557, 985, 548, 1861, 781, 805, 463, 2051, 1483,
	969, 2052, 2190, 1319, 75, 852, 857, 858, 2172, 969,
	520, 1859, 1257, 1323, 969, 553, 1645, 2159, 2158, 304,
	1351, 1351, 2155, 2145, 99, 852, 852, 2142, 604, 860,
	852, 2131, 24, 2109, 1345, 1587, 852, 2093, 2089, 75,
	1859, 852, 2085, 2077, 553, 1345, 2076, 513, 2047, 546,
	1588, 2048, 576, 859, 846, 2034, 1487, 1258, 1859, 874,
	545, 1488, 1164, 2031, 857, 858, 852, 2029, 1486, 307,
	1859, 967, 561, 1351, 567, 339, 343, 573, 2010, 1991,
	580, 1345, 852, 1990, 1633, 1964, 1859, 860, 1351, 1915,
	1893, 1890, 1351, 1351, 1345, 1122, 1351, 2099, 537, 1259,
	1256, 1880, 1879, 1858, 1351, 1351, 1859, 1167, 1633, 1121,
	865, 859, 568, 1607, 81, 575, 578, 1788, 568, 1783,
	1317, 74, 1317, 471, 857, 858, 1761, 877, 878, 879,
	887, 888, 889, 1700, 1610, 1567, 1351, 852, 1568, 1703,
	880, 1565, 83, 1302, 1351, 1129, 1564, 860, 49, 1351,
	891, 1611, 1563, 1484, 98, 1351, 1351, 50, 852, 1400,
	98, 98, 98, 98, 98, 875, 536, 1642, 865, 1351,
	708, 859, 1405, 81, 1261, 852, 1362, 874, 84, 51,
	339, 1355, 1164, 339, 1351, 970, 79, 1350, 1344, 1316,
	1351, 1345, 1317, 80, 970, 1239, 857, 858, 1494, 970,
	1128, 83, 978, 1127, 1167, 979, 813, 1039, 583, 723,
	566, 1862, 78, 533, 554, 1648, 85, 589, 1956, 860,
	1061, 749, 2182, 2161, 2154, 2117, 74, 2080, 865, 74,
	81, 2032, 1923, 1920, 1916, 812, 1908, 84, 876, 1907,
	1906, 1902, 1901, 859, 1900, 79, 1899, 884, 892, 1838,
	1811, 1255, 80, 49, 1792, 1776, 49, 1771, 83, 1770,
	1769, 1711, 50, 890, 1609, 50, 1613, 823, 1572, 1569,
	1557, 1322, 1231, 1349, 1646, 823, 1548, 882, 1519, 1516,
	1587, 1515, 1513, 875, 51, 98, 712, 51, 1500, 1499,
	1418, 706, 1267, 1266, 84, 812, 705, 705, 1094, 81,
	865, 973, 98, 689, 697, 98, 98, 687, 881, 64,
	968, 811, 1520, 1521, 1727, 1087, 536, 912, 919, 78,
	2134, 2173, 857, 858, 536, 1121, 2096, 83, 78, 870,
	868, 869, 861, 862, 863, 864, 866, 867, 2075, 2074,
	2073, 2050, 568, 2065, 2063, 860, 2055, 2043, 2027, 578,
	537, 2018, 1977, 98, 1966, 875, 876, 1931, 1913, 98,
	753, 1885, 1865, 84, 1826, 1802, 1800, 1799, 1797, 859,
	1695, 79, 885, 1670, 1790, 1669, 1547, 1232, 80, 1509,
	98, 98, 98, 1508, 98, 1505, 1922, 1480, 1475, 1225,
	861, 862, 863, 864, 866, 867, 1447, 78, 1445, 98,
	1432, 1431, 1404, 798, 81, 946, 949, 81, 1309, 1265,
	98, 1088, 745, 571, 64, 953, 1526, 64, 857, 858,
	939, 938, 937, 536, 98, 936, 865, 935, 876, 934,
	342, 536, 83, 752, 933, 83, 932, 931, 930, 883,
	822, 860, 871, 872, 873, 886, 929, 870, 868, 869,
	861, 862, 863, 864, 866, 867, 928, 927, 926, 753,
	2111, 797, 728, 730, 733, 859, 925, 753, 84, 924,
	923, 84, 916, 821, 905, 1432, 79, 78, 816, 79,
	732, 875, 719, 80, 717, 1953, 80, 853, 1928, 784,
	1927, 1895, 554, 1827, 1520, 1521, 782, 1164, 912, 1597,
	537, 589, 325, 743, 1596, 78, 1520, 1521, 537, 786,
	903, 2079, 2053, 1624, 790, 741, 793, 1926, 1648, 870,
	868, 869, 861, 862, 863, 864, 866, 867, 1589, 98,
	546, 1571, 850, 688, 98, 98, 98, 1570, 98, 951,
	840, 545, 534, 1396, 952, 1459, 772, 568, 808, 809,
	814, 1395, 1045, 744, 876, 98, 98, 1954, 742, 1535,
	838, 921, 1092, 98, 1520, 1521, 1457, 98, 1943, 1319,
	680, 1728, 98, 851, 1246, 942, 958, 839, 319, 1491,
	776, 1583, 536, 536, 833, 1018, 834, 833, 1657, 834,
	342, 1520, 1521, 2120, 2180, 2179, 98, 1141, 824, 98,
	1354, 98, 98, 98, 98, 98, 98, 537, 1604, 915,
	1526, 592, 98, 2088, 343, 537, 1873, 98, 98, 777,
	943, 944, 344, 512, 98, 506, 511, 507, 88, 769,
	1133, 947, 1076, 320, 823, 98, 1681, 950, 1522, 1523,
	1524, 1525, 1527, 1528, 538, 1093, 770, 1062, 861, 862,
	863, 864, 866, 867, 98, 2001, 2000, 98, 918, 835,
	1999, 1144, 835, 1119, 1998, 1536, 98, 1685, 1526, 1684,
	833, 741, 834, 1654, 98, 1653, 1504, 962, 98, 1503,
	982, 959, 1046, 87, 697, 1133, 98, 98, 1502, 1501,
	98, 1132, 310, 98, 1462, 1526, 1352, 1207, 1161, 1160,
	342, 1157, 1098, 1032, 75, 980, 783, 1034, 1063, 1033,
	1036, 1789, 857, 858, 742, 582, 1134, 957, 1884, 681,
	1313, 622, 568, 961, 961, 1018, 1018, 1057, 1056, 1050,
	1065, 1312, 2087, 1178, 843, 860, 1055, 1054, 1537, 533,
	528, 1070, 311, 575, 578, 835, 1391, 908, 1084, 867,
	1536, 519, 1145, 1147, 841, 1688, 1143, 1177, 552, 859,
	1085, 857, 858, 768, 1982, 731, 537, 537, 1222, 1083,
	1222, 842, 321, 1101, 343, 972, 1100, 1778, 975, 546,
	634, 1102, 546, 546, 860, 1117, 1152, 543, 1166, 1155,
	1111, 1443, 1125, 1112, 1113, 1520, 1521, 1573, 1246, 954,
	1137, 323, 958, 551, 98, 2179, 98, 98, 859, 98,
	1158, 322, 98, 1285, 98, 98, 865, 98, 98, 1058,
	536, 715, 86, 1537, 1339, 1528, 1243, 1672, 1150, 1531,
	1529, 1530, 1522, 1523, 1524, 1525, 1527, 1528, 314, 1064,
	1162, 2132, 1142, 1603, 1229, 963, 766, 1261, 2186, 1227,
	1169, 1176, 553, 1577, 1126, 1037, 2128, 1086, 1679, 1398,
	1399, 89, 1581, 1030, 2151, 865, 568, 1233, 1452, 1449,
	1230, 875, 836, 848, 578, 836, 1038, 831, 568, 1024,
	2129, 1721, 1067, 767, 343, 1071, 1072, 1073, 1074, 1075,
	1280, 2201, 1524, 1525, 1527, 1528, 538, 1059, 847, 1526,
	1080, 1081, 342, 313, 312, 773, 1577, 1321, 1082, 1321,
	98, 969, 2068, 1130, 1531, 1529, 1530, 1522, 1523, 1524,
	1525, 1527, 1528, 98, 98, 98, 844, 1605, 98, 98,
	940, 305, 75, 1334, 1335, 98, 1340, 75, 1325, 1341,
	712, 1343, 843, 1337, 876, 1338, 1257, 2152, 1336, 705,
	1348, 705, 1386, 2014, 1536, 550, 1261, 900, 836, 1363,
	714, 738, 841, 98, 342, 2028, 2185, 1983, 1507, 774,
	1406, 98, 98, 98, 1822, 1417, 947, 98, 950, 842,
	98, 539, 1358, 944, 943, 1673, 98, 98, 98, 98,
	98, 1258, 1330, 1360, 553, 1356, 306, 578, 98, 2195,
	578, 98, 98, 2153, 537, 544, 1018, 1689, 536, 1464,
	540, 1221, 1809, 756, 1361, 1837, 2150, 2178, 2176, 1425,
	541, 1416, 775, 1936, 315, 739, 1359, 1537, 514, 740,
	1419, 75, 1388, 1259, 1256, 1366, 868, 869, 861, 862,
	863, 864, 866, 867, 753, 1718, 538, 1638, 1368, 1236,
	757, 760, 1218, 755, 538, 1442, 1240, 726, 1394, 722,
	1248, 2184, 804, 1455, 316, 1634, 1641, 1216, 534, 529,
	2206, 1272, 1272, 1283, 1407, 1294, 2202, 1993, 1370, 1820,
	1420, 1306, 1307, 1308, 1911, 1228, 343, 1719, 1639, 863,
	864, 866, 867, 317, 1992, 318, 970, 1975, 1444, 2060,
	1656, 1446, 1869, 803, 1428, 515, 1493, 1424, 1261, 1389,
	1204, 1367, 578, 1369, 554, 1638, 568, 1458, 450, 1529,
	1530, 1522, 1523, 1524, 1525, 1527, 1528, 447, 1757, 2193,
	1099, 1429, 1212, 1090, 1641, 1962, 1717, 1472, 2113, 455,
	1213, 1079, 1214, 1040, 1107, 451, 1219, 1636, 343, 1938,
	1463, 1412, 1470, 538, 1465, 1805, 1639, 802, 98, 1421,
	344, 538, 1261, 98, 1640, 98, 2205, 1976, 1872, 1479,
	452, 1637, 98, 1434, 450, 1871, 1433, 1951, 1912, 554,
	1634, 803, 804, 98, 2194, 1255, 1950, 684, 1490, 454,
	1451, 1817, 537, 98, 98, 455, 1868, 1963, 1816, 517,
	738, 451, 458, 536, 457, 2196, 1044, 1202, 1205, 1108,
	1579, 554, 695, 1018, 694, 1585, 1758, 1467, 551, 794,
	1795, 98, 1759, 98, 1929, 98, 452, 1468, 1973, 98,
	1638, 1473, 1640, 98, 614, 802, 1454, 1201, 1554, 1555,
	1556, 1813, 1018, 2017, 1631, 454, 1042, 1264, 1910, 1641,
	1974, 1551, 1215, 1694, 1687, 1574, 98, 1514, 1043, 1217,
	1474, 1353, 1636, 1315, 1612, 1156, 1614, 1582, 1153, 1870,
	779, 1639, 95, 95, 683, 308, 1590, 516, 778, 771,
	765, 764, 763, 762, 761, 758, 1637, 441, 442, 443,
	1602, 693, 1600, 1601, 462, 590, 453, 476, 1668, 1606,
	1552, 1949, 1608, 1077, 554, 462, 1069, 1667, 922, 750,
	1666, 1263, 538, 538, 560, 560, 2146, 2110, 308, 1843,
	344, 308, 308, 579, 308, 1626, 1628, 95, 586, 1677,
	1615, 631, 1203, 1594, 1618, 1675, 1655, 1469, 1595, 1650,
	1652, 1632, 1620, 1018, 1471, 1697, 1575, 1640, 98, 1392,
	456, 957, 453, 1651, 1713, 1714, 1715, 1659, 75, 1616,
	957, 1680, 1629, 1384, 75, 1342, 977, 1429, 1643, 1478,
	976, 568, 974, 1686, 971, 966, 1481, 849, 845, 1018,
	1018, 837, 1708, 1622, 692, 691, 2022, 537, 1018, 1018,
	91, 806, 564, 1402, 1497, 1498, 2180, 1052, 331, 34,
	1704, 2024, 1707, 337, 29, 1133, 456, 1591, 1133, 1592,
	1593, 1148, 1149, 446, 1146, 1782, 1110, 1619, 857, 858,
	3, 1018, 1731, 336, 28, 1729, 1734, 751, 98, 98,
	344, 1736, 2070, 1862, 1546, 1764, 1784, 1017, 2082, 991,
	1854, 1720, 1722, 1723, 1412, 1559, 1814, 810, 98, 1154,
	335, 27, 98, 1403, 98, 333, 26, 1151, 2100, 1765,
	1934, 98, 807, 565, 536, 859, 1060, 1387, 1801, 1383,
	1781, 1324, 459, 1855, 98, 330, 18, 98, 1118, 1035,
	587, 588, 983, 584, 34, 1347, 342, 1779, 98, 29,
	334, 13, 1787, 1785, 98, 98, 98, 1798, 990, 1442,
	1807, 1786, 2199, 2204, 1169, 1732, 572, 1806, 2144, 28,
	1676, 98, 1678, 1169, 1737, 1828, 98, 1867, 98, 1796,
	98, 98, 98, 338, 12, 98, 98, 1863, 536, 505,
	1823, 1824, 1808, 328, 11, 1668, 27, 2103, 1842, 1819,
	1959, 26, 1286, 1829, 1667, 1791, 1768, 1666, 308, 1777,
	538, 1724, 1839, 788, 698, 308, 476, 476, 586, 332,
	9, 18, 1598, 1018, 753, 1889, 1566, 1850, 98, 1851,
	1314, 1815, 1520, 1521, 1818, 1311, 13, 1017, 1017, 991,
	991, 327, 8, 857, 858, 1310, 1883, 1253, 1866, 1682,
	909, 1683, 329, 4, 857, 858, 789, 508, 509, 1853,
	788, 787, 1897, 2126, 2007, 1716, 860, 1617, 1856, 12,
	919, 917, 518, 1981, 448, 1068, 1330, 1412, 759, 11,
	1909, 1955, 1825, 2127, 1701, 1903, 1506, 2039, 2013, 1262,
	859, 920, 344, 47, 1664, 608, 1844, 1658, 990, 990,
	98, 98, 1378, 1377, 345, 9, 1932, 536, 537, 1053,
	630, 521, 1271, 1170, 685, 632, 988, 98, 98, 633,
	989, 98, 1412, 1668, 948, 1412, 620, 8, 1668, 98,
	343, 986, 1667, 710, 1925, 1666, 98, 1667, 4, 720,
	1666, 1328, 1226, 1940, 98, 1852, 98, 1244, 342, 98,
	1939, 1762, 1933, 1489, 344, 1958, 727, 98, 1957, 476,
	476, 913, 1772, 342, 600, 1941, 612, 611, 1876, 1967,
	1241, 716, 537, 1960, 1882, 473, 1930, 63, 469, 1580,
	1921, 1935, 1106, 1393, 1103, 1668, 1969, 1968, 1674, 1985,
	1924, 542, 1987, 1517, 1667, 1984, 718, 1666, 538, 1292,
	1284, 1018, 1281, 785, 826, 1971, 901, 462, 958, 1329,
	2003, 748, 1586, 308, 1946, 1947, 2012, 1346, 1952, 815,
	1986, 1114, 563, 98, 562, 2002, 1373, 746, 1041, 2023,
	1357, 894, 893, 510, 476, 792, 476, 98, 795, 2062,
	536, 1018, 737, 2019, 98, 736, 1385, 1427, 2200, 2069,
	1832, 1671, 98, 560, 2119, 82, 2078, 1668, 98, 2005,
	2025, 1453, 2038, 35, 308, 33, 1667, 98, 98, 1666,
	30, 25, 23, 2056, 98, 22, 2037, 21, 95, 32,
	2042, 2057, 2064, 2036, 2049, 2046, 20, 31, 19, 17,
	16, 537, 1286, 1286, 2058, 2054, 15, 14, 10, 98,
	98, 46, 45, 44, 43, 1412, 1412, 2067, 42, 1412,
	2030, 2066, 41, 7, 6, 5, 2, 2059, 1017, 1,
	991, 0, 0, 0, 0, 98, 1995, 0, 0, 98,
	0, 2081, 343, 0, 2094, 0, 0, 536, 2092, 0,
	0, 2033, 0, 2095, 98, 1979, 1018, 343, 2084, 2045,
	2101, 0, 0, 0, 342, 98, 98, 0, 0, 1286,
	1286, 1286, 2108, 2098, 98, 1020, 98, 0, 2104, 98,
	0, 342, 2115, 2097, 0, 0, 554, 2102, 0, 990,
	0, 2107, 0, 308, 1520, 1521, 0, 0, 308, 308,
	308, 0, 964, 538, 2135, 2116, 2125, 2137, 0, 2133,
	98, 0, 2136, 98, 0, 0, 1996, 1997, 0, 308,
	308, 2105, 0, 0, 0, 2140, 2143, 95, 1945, 2141,
	2139, 95, 1668, 0, 537, 2035, 476, 0, 2121, 0,
	2156, 1667, 0, 98, 1666, 98, 0, 2168, 2171, 0,
	1412, 2170, 2160, 2169, 0, 0, 0, 98, 0, 0,
	476, 0, 1019, 476, 0, 95, 476, 476, 476, 476,
	476, 2181, 2177, 2175, 0, 0, 1078, 2183, 0, 1989,
	0, 476, 476, 0, 0, 2138, 0, 0, 462, 2189,
	0, 2191, 0, 0, 0, 2198, 2197, 0, 1526, 1097,
	0, 0, 0, 2203, 1476, 1477, 0, 0, 0, 0,
	0, 0, 2207, 0, 0, 1020, 1020, 0, 560, 987,
	0, 586, 0, 0, 0, 1854, 0, 0, 1847, 0,
	308, 537, 1031, 0, 0, 1017, 1845, 991, 1138, 0,
	1849, 0, 308, 0, 0, 1286, 1286, 0, 343, 0,
	308, 1159, 0, 1536, 308, 0, 0, 1165, 1855, 0,
	0, 0, 0, 0, 1017, 343, 991, 2118, 1520, 1521,
	0, 1543, 1544, 1545, 0, 0, 0, 0, 0, 0,
	1848, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 990, 0, 0, 0,
	0, 0, 1019, 1019, 1286, 1286, 1286, 1286, 1286, 1286,
	1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
	1286, 1286, 1286, 0, 1286, 990, 1537, 0, 0, 0,
	0, 1330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1520, 1521, 0, 1538,
	1539, 1540, 1850, 0, 1851, 0, 0, 0, 0, 987,
	987, 0, 1887, 0, 538, 1017, 0, 991, 308, 0,
	1332, 1333, 1526, 308, 0, 0, 308, 0, 476, 476,
	0, 476, 586, 0, 1853, 0, 344, 2122, 2123, 2124,
	0, 0, 0, 1856, 0, 0, 2130, 0, 0, 1535,
	0, 1017, 1017, 991, 991, 0, 0, 0, 0, 0,
	1017, 1017, 991, 991, 0, 0, 0, 0, 0, 1530,
	1522, 1523, 1524, 1525, 1527, 1528, 990, 1536, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1017, 0, 991, 0, 1692, 1693, 0,
	1526, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 990, 990, 0, 0, 0, 0, 0, 0,
	1852, 990, 990, 0, 1365, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1541, 0, 308, 308, 308,
	0, 0, 308, 1374, 0, 0, 1020, 0, 0, 586,
	1537, 0, 0, 0, 990, 1536, 1738, 1739, 1740, 1741,
	1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751,
	1752, 1753, 1754, 1755, 1756, 0, 1760, 308, 0, 0,
	0, 0, 0, 0, 0, 308, 1422, 1423, 591, 686,
	0, 1138, 0, 0, 1430, 0, 0, 538, 0, 0,
	1435, 1436, 1438, 1440, 1441, 0, 0, 0, 0, 0,
	0, 0, 1448, 0, 0, 1450, 308, 0, 0, 0,
	0, 609, 61, 0, 0, 0, 0, 0, 1537, 0,
	0, 0, 0, 1019, 0, 1017, 0, 991, 344, 0,
	0, 0, 0, 0, 1522, 1523, 1524, 1525, 1527, 1528,
	0, 0, 0, 344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1286, 0, 0,
	987, 0, 0, 0, 0, 0, 990, 547, 0, 0,
	555, 0, 0, 0, 0, 857, 858, 61, 877, 878,
	879, 887, 888, 889, 1532, 1533, 1534, 0, 0, 1531,
	1529, 1530, 1522, 1523, 1524, 1525, 1527, 1528, 860, 0,
	538, 891, 0, 0, 0, 0, 0, 0, 0, 0,
	724, 725, 1286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 859, 1020, 0, 0, 0, 0, 874, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 308, 0, 0, 0, 0, 308, 0, 1584,
	0, 0, 1020, 0, 0, 0, 308, 0, 0, 857,
	858, 0, 0, 0, 0, 0, 0, 308, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1365, 1365, 865,
	0, 0, 860, 1017, 0, 991, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 538, 884, 892,
	0, 0, 0, 0, 0, 1097, 859, 1097, 0, 476,
	1019, 0, 0, 308, 344, 819, 819, 1625, 0, 1286,
	0, 0, 0, 1017, 828, 991, 0, 0, 882, 0,
	0, 344, 0, 0, 875, 0, 0, 0, 0, 1019,
	308, 0, 0, 0, 990, 0, 895, 896, 897, 898,
	899, 0, 0, 1020, 0, 0, 907, 1663, 0, 1978,
	0, 0, 0, 865, 0, 0, 914, 987, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 990, 0, 0, 0, 0, 1020,
	1020, 0, 0, 0, 0, 0, 987, 0, 1020, 1020,
	0, 0, 0, 0, 0, 0, 0, 876, 0, 0,
	0, 0, 0, 0, 2016, 0, 0, 555, 875, 0,
	0, 0, 0, 885, 0, 0, 0, 0, 1017, 0,
	991, 1020, 1726, 0, 0, 0, 0, 0, 0, 0,
	1019, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1019, 1019, 0, 0,
	0, 0, 0, 0, 0, 1019, 1019, 0, 0, 990,
	883, 876, 0, 871, 872, 873, 886, 987, 870, 868,
	869, 861, 862, 863, 864, 866, 867, 0, 0, 0,
	0, 0, 308, 308, 0, 0, 0, 0, 1019, 0,
	0, 2083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1793, 987, 987, 0, 1138, 0, 1097, 0,
	0, 0, 987, 987, 0, 1803, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1104, 0, 1109, 308, 0,
	0, 308, 0, 1116, 0, 0, 0, 0, 0, 0,
	0, 0, 1836, 1020, 0, 987, 0, 0, 1840, 1841,
	1138, 0, 0, 0, 869, 861, 862, 863, 864, 866,
	867, 0, 0, 0, 1663, 586, 0, 0, 0, 0,
	1874, 0, 1875, 0, 308, 1877, 1878, 0, 0, 1881,
	308, 0, 0, 0, 1179, 1180, 1181, 1182, 1183, 1184,
	1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194,
	1195, 1196, 1197, 1198, 1199, 1200, 0, 1206, 0, 1208,
	1209, 1210, 1211, 0, 0, 0, 0, 0, 547, 0,
	0, 0, 1904, 0, 0, 0, 1234, 0, 0, 0,
	1019, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1268, 1269,
	0, 0, 1282, 0, 1293, 1295, 1300, 1303, 1304, 1305,
	0, 0, 0, 904, 0, 906, 0, 0, 0, 0,
	0, 0, 910, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 987, 0, 0,
	0, 0, 1663, 0, 586, 1374, 0, 1663, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 308, 308, 0, 0, 308, 0, 0, 0, 0,
	0, 1020, 0, 1836, 0, 0, 0, 0, 0, 0,
	1965, 0, 0, 0, 0, 0, 0, 0, 1138, 0,
	1970, 0, 0, 1972, 0, 0, 0, 0, 0, 0,
	0, 308, 0, 0, 1663, 0, 0, 0, 0, 0,
	0, 1020, 0, 0, 0, 0, 0, 0, 857, 858,
	0, 877, 878, 879, 887, 888, 889, 0, 0, 2004,
	0, 0, 0, 0, 880, 0, 0, 0, 0, 0,
	0, 860, 0, 0, 891, 0, 0, 0, 0, 0,
	0, 0, 1520, 1521, 0, 1538, 1539, 1540, 1019, 0,
	0, 0, 61, 0, 0, 859, 0, 586, 1886, 0,
	0, 874, 0, 0, 0, 0, 1663, 0, 0, 0,
	0, 308, 0, 0, 0, 0, 0, 0, 2041, 0,
	0, 0, 0, 0, 819, 0, 308, 0, 1019, 0,
	828, 0, 1836, 0, 0, 1535, 0, 0, 0, 0,
	0, 586, 1836, 0, 0, 987, 1020, 547, 1097, 0,
	547, 547, 865, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 884, 892, 2071, 2072, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 61, 987, 1526, 890, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2090,
	0, 882, 0, 2091, 1460, 1461, 0, 875, 0, 0,
	1466, 0, 0, 0, 0, 0, 0, 0, 586, 0,
	0, 1541, 0, 0, 0, 0, 0, 0, 0, 1836,
	586, 0, 881, 1019, 1224, 0, 0, 0, 2114, 0,
	586, 1536, 1485, 308, 0, 0, 0, 0, 0, 1492,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	0, 1663, 0, 0, 2041, 0, 0, 1836, 0, 0,
	876, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	987, 0, 0, 907, 0, 0, 885, 0, 0, 1300,
	1300, 1300, 61, 0, 61, 0, 0, 308, 0, 586,
	0, 0, 0, 0, 1537, 0, 0, 0, 0, 0,
	61, 2174, 1578, 0, 0, 61, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1599, 0, 0, 0, 0, 0,
	0, 0, 0, 883, 0, 0, 871, 872, 873, 886,
	0, 870, 868, 869, 861, 862, 863, 864, 866, 867,
	0, 0, 0, 0, 0, 0, 0, 1917, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1627, 0,
	1532, 1533, 1534, 1116, 0, 1531, 1529, 1530, 1522, 1523,
	1524, 1525, 1527, 1528, 0, 0, 0, 0, 0, 61,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1660, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 857, 858, 0, 877, 878, 879, 887, 888,
	889, 0, 1690, 0, 1413, 1691, 0, 0, 880, 0,
	0, 0, 0, 0, 0, 860, 0, 1696, 891, 0,
	1520, 1521, 0, 1538, 1539, 1540, 1705, 0, 0, 0,
	0, 0, 0, 61, 1709, 0, 61, 1599, 0, 859,
	0, 0, 0, 0, 0, 874, 857, 858, 0, 877,
	878, 879, 887, 888, 889, 0, 0, 1733, 0, 0,
	0, 1735, 880, 0, 0, 0, 0, 0, 0, 860,
	0, 0, 891, 1535, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1224, 0, 0,
	0, 0, 0, 859, 1766, 1767, 865, 0, 0, 874,
	0, 0, 0, 1773, 1774, 1775, 0, 906, 0, 0,
	0, 0, 0, 0, 0, 884, 892, 0, 0, 0,
	819, 0, 0, 0, 1526, 0, 0, 0, 0, 0,
	0, 890, 828, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1542, 882, 0, 0, 0, 0,
	865, 875, 0, 0, 0, 0, 0, 0, 0, 1541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 884,
	892, 0, 906, 0, 0, 0, 881, 0, 0, 1536,
	0, 0, 0, 0, 0, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 882,
	0, 0, 0, 0, 555, 875, 0, 0, 1864, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 876, 0, 0, 0, 0, 0,
	881, 0, 0, 0, 0, 0, 0, 1888, 0, 0,
	885, 1891, 1892, 0, 0, 0, 1894, 0, 0, 0,
	0, 0, 1537, 1896, 0, 1898, 857, 858, 0, 877,
	878, 879, 887, 888, 889, 61, 0, 0, 0, 61,
	0, 1905, 880, 0, 0, 0, 0, 0, 876, 860,
	0, 0, 891, 0, 0, 0, 61, 0, 0, 0,
	0, 0, 61, 0, 885, 0, 0, 1649, 0, 0,
	0, 0, 0, 859, 1914, 0, 0, 883, 0, 874,
	871, 872, 873, 886, 0, 870, 868, 869, 861, 862,
	863, 864, 866, 867, 0, 0, 0, 0, 0, 0,
	0, 1562, 0, 0, 0, 0, 0, 0, 1532, 1533,
	1534, 0, 0, 1531, 1529, 1530, 1522, 1523, 1524, 1525,
	1527, 1528, 0, 0, 0, 0, 1944, 0, 0, 0,
	865, 883, 0, 0, 871, 872, 873, 886, 0, 870,
	868, 869, 861, 862, 863, 864, 866, 867, 0, 884,
	892, 0, 0, 0, 0, 1561, 0, 0, 0, 0,
	857, 858, 0, 0, 0, 890, 887, 888, 889, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 882,
	0, 0, 0, 860, 1994, 875, 891, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2008,
	2009, 0, 0, 0, 0, 0, 0, 859, 0, 0,
	881, 0, 0, 874, 0, 0, 0, 0, 0, 857,
	858, 0, 877, 878, 879, 887, 888, 889, 0, 0,
	2021, 0, 0, 0, 0, 880, 0, 0, 0, 0,
	1413, 0, 860, 0, 0, 891, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 876, 0,
	0, 0, 0, 2044, 865, 0, 859, 0, 0, 0,
	0, 0, 874, 0, 885, 0, 0, 0, 0, 0,
	0, 0, 0, 884, 892, 1413, 0, 0, 1413, 0,
	2061, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 882, 0, 0, 0, 0, 0, 875,
	0, 0, 0, 865, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	828, 883, 884, 892, 871, 872, 873, 886, 0, 870,
	868, 869, 861, 862, 863, 864, 866, 867, 890, 0,
	0, 0, 0, 0, 0, 1560, 0, 0, 0, 0,
	0, 0, 882, 0, 0, 0, 0, 0, 875, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 876, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 881, 0, 0, 0, 0, 885, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2157, 0, 61, 0, 0, 0, 0,
	0, 2167, 2167, 0, 0, 0, 0, 0, 0, 0,
	0, 876, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 885, 1413, 1413,
	0, 0, 1413, 0, 0, 883, 0, 2167, 0, 0,
	0, 886, 0, 870, 868, 869, 861, 862, 863, 864,
	866, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 883, 0, 0, 871, 872, 873,
	886, 0, 870, 868, 869, 861, 862, 863, 864, 866,
	867, 0, 0, 0, 0, 0, 0, 0, 1512, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2026, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1413, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	341, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 101, 360, 102,
	361, 362, 363, 364, 252, 365, 366, 367, 368, 103,
	104, 105, 253, 254, 255, 256, 106, 257, 258, 369,
	107, 259, 260, 108, 109, 370, 371, 261, 262, 263,
	372, 110, 264, 373, 346, 374, 111, 112, 113, 906,
	114, 375, 115, 116, 117, 376, 347, 118, 119, 377,
	378, 379, 380, 381, 382, 120, 121, 309, 122, 265,
	123, 266, 267, 383, 124, 384, 125, 385, 126, 386,
	387, 127, 128, 388, 129, 389, 0, 390, 268, 130,
	131, 132, 269, 270, 391, 392, 393, 133, 134, 271,
	0, 135, 394, 136, 395, 396, 348, 397, 137, 272,
	398, 273, 399, 138, 139, 140, 141, 274, 275, 350,
	400, 145, 401, 142, 402, 349, 143, 276, 144, 277,
	278, 279, 403, 280, 404, 351, 146, 147, 352, 148,
	149, 150, 405, 152, 151, 406, 281, 353, 153, 354,
	407, 154, 408, 409, 155, 0, 156, 157, 158, 160,
	282, 159, 355, 161, 162, 164, 163, 410, 411, 412,
	283, 165, 284, 166, 167, 413, 168, 414, 415, 169,
	416, 417, 170, 285, 356, 171, 357, 286, 172, 173,
	174, 175, 176, 418, 177, 287, 178, 288, 179, 419,
	180, 181, 182, 183, 184, 289, 185, 186, 420, 187,
	188, 189, 190, 191, 193, 194, 192, 195, 196, 197,
	198, 421, 199, 358, 200, 201, 290, 202, 0, 206,
	207, 208, 209, 422, 211, 291, 210, 212, 213, 423,
	214, 203, 204, 215, 359, 216, 292, 293, 217, 424,
	223, 218, 219, 205, 220, 222, 294, 221, 295, 425,
	224, 426, 225, 226, 227, 228, 229, 230, 231, 427,
	296, 297, 298, 428, 429, 232, 233, 299, 300, 430,
	234, 235, 236, 237, 431, 432, 238, 239, 240, 241,
	433, 242, 434, 301, 243, 244, 245, 302, 303, 435,
	436, 246, 437, 438, 439, 440, 247, 248, 249, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 0, 0, 1830,
	0, 0, 0, 0, 0, 0, 0, 1831, 100, 101,
	360, 102, 361, 362, 363, 364, 252, 365, 366, 367,
	368, 103, 104, 105, 253, 254, 255, 256, 106, 257,
	258, 369, 107, 259, 260, 108, 109, 370, 371, 261,
	262, 263, 372, 110, 264, 373, 346, 374, 111, 112,
	113, 0, 114, 375, 115, 116, 117, 376, 347, 118,
	119, 377, 378, 379, 380, 381, 382, 120, 121, 309,
	122, 265, 123, 266, 267, 383, 124, 384, 125, 385,
	126, 386, 387, 127, 128, 388, 129, 389, 0, 390,
	268, 130, 131, 132, 269, 270, 391, 392, 393, 133,
	134, 271, 0, 135, 394, 136, 395, 396, 348, 397,
	137, 272, 398, 273, 399, 138, 139, 140, 141, 274,
	275, 350, 400, 145, 401, 142, 402, 349, 143, 276,
	144, 277, 278, 279, 403, 280, 404, 351, 146, 147,
	352, 148, 149, 150, 405, 152, 151, 406, 281, 353,
	153, 354, 407, 154, 408, 409, 155, 0, 156, 157,
	158, 160, 282, 159, 355, 161, 162, 164, 163, 410,
	411, 412, 283, 165, 284, 166, 167, 413, 168, 414,
	415, 169, 416, 417, 170, 285, 356, 171, 357, 286,
	172, 173, 174, 175, 176, 418, 177, 287, 178, 288,
	179, 419, 180, 181, 182, 183, 184, 289, 185, 186,
	420, 187, 188, 189, 190, 191, 193, 194, 192, 195,
	196, 197, 198, 421, 199, 358, 200, 201, 290, 202,
	0, 206, 207, 208, 209, 422, 211, 291, 210, 212,
	213, 423, 214, 203, 204, 215, 359, 216, 292, 293,
	217, 424, 223, 218, 219, 205, 220, 222, 294, 221,
	295, 425, 224, 426, 225, 226, 227, 228, 229, 230,
	231, 427, 296, 297, 298, 428, 429, 232, 233, 299,
	300, 430, 234, 235, 236, 237, 431, 432, 238, 239,
	240, 241, 433, 242, 434, 301, 243, 244, 245, 302,
	303, 435, 436, 246, 437, 438, 439, 440, 247, 248,
	249, 250, 251, 0, 0, 0, 341, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2106, 100, 101, 360, 102, 361, 362, 363, 364,
	252, 365, 366, 367, 368, 103, 104, 105, 253, 254,
	255, 256, 106, 257, 258, 369, 107, 259, 260, 108,
	109, 370, 371, 261, 262, 263, 372, 110, 264, 373,
	346, 374, 111, 112, 113, 0, 114, 375, 115, 116,
	117, 376, 347, 118, 119, 377, 378, 379, 380, 381,
	382, 120, 121, 309, 122, 265, 123, 266, 267, 383,
	124, 384, 125, 385, 126, 386, 387, 127, 128, 388,
	129, 389, 0, 390, 268, 130, 131, 132, 269, 270,
	391, 392, 393, 133, 134, 271, 0, 135, 394, 136,
	395, 396, 348, 397, 137, 272, 398, 273, 399, 138,
	139, 140, 141, 274, 275, 350, 400, 145, 401, 142,
	402, 349, 143, 276, 144, 277, 278, 279, 403, 280,
	404, 351, 146, 147, 352, 148, 149, 150, 405, 152,
	151, 406, 281, 353, 153, 354, 407, 154, 408, 409,
	155, 0, 156, 157, 158, 160, 282, 159, 355, 161,
	162, 164, 163, 410, 411, 412, 283, 165, 284, 166,
	167, 413, 168, 414, 415, 169, 416, 417, 170, 285,
	356, 171, 357, 286, 172, 173, 174, 175, 176, 418,
	177, 287, 178, 288, 179, 419, 180, 181, 182, 183,
	184, 289, 185, 186, 420, 187, 188, 189, 190, 191,
	193, 194, 192, 195, 196, 197, 198, 421, 199, 358,
	200, 201, 290, 202, 0, 206, 207, 208, 209, 422,
	211, 291, 210, 212, 213, 423, 214, 203, 204, 215,
	359, 216, 292, 293, 217, 424, 223, 218, 219, 205,
	220, 222, 294, 221, 295, 425, 224, 426, 225, 226,
	227, 228, 229, 230, 231, 427, 296, 297, 298, 428,
	429, 232, 233, 299, 300, 430, 234, 235, 236, 237,
	431, 432, 238, 239, 240, 241, 433, 242, 434, 301,
	243, 244, 245, 302, 303, 435, 436, 246, 437, 438,
	439, 440, 247, 248, 249, 250, 251, 341, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	854, 0, 0, 100, 101, 360, 102, 361, 362, 363,
	364, 252, 365, 366, 367, 368, 103, 104, 105, 253,
	254, 255, 256, 106, 257, 258, 369, 107, 259, 260,
	108, 109, 370, 371, 261, 262, 263, 372, 110, 264,
	373, 346, 374, 111, 112, 113, 0, 114, 375, 115,
	116, 117, 376, 347, 118, 119, 377, 378, 379, 380,
	381, 382, 120, 121, 309, 122, 265, 123, 266, 267,
	383, 124, 384, 125, 385, 126, 386, 387, 127, 128,
	388, 129, 389, 0, 390, 268, 130, 131, 132, 269,
	270, 391, 392, 393, 133, 134, 271, 0, 135, 394,
	136, 395, 396, 348, 397, 137, 272, 398, 273, 399,
	138, 139, 140, 141, 274, 275, 350, 400, 145, 401,
	142, 402, 349, 143, 276, 144, 277, 278, 279, 403,
	280, 404, 351, 146, 147, 352, 148, 149, 150, 405,
	152, 151, 406, 281, 353, 153, 354, 407, 154, 408,
	409, 155, 0, 156, 157, 158, 160, 282, 159, 355,
	161, 162, 164, 163, 410, 411, 412, 283, 165, 284,
	166, 167, 413, 168, 414, 415, 169, 416, 417, 170,
	285, 356, 171, 357, 286, 172, 173, 174, 175, 176,
	418, 177, 287, 178, 288, 179, 419, 180, 181, 182,
	183, 184, 289, 185, 186, 420, 187, 188, 189, 190,
	191, 193, 194, 192, 195, 196, 197, 198, 421, 199,
	358, 200, 201, 290, 202, 0, 206, 207, 208, 209,
	422, 211, 291, 210, 212, 213, 423, 214, 203, 204,
	215, 359, 216, 292, 293, 217, 424, 223, 218, 219,
	205, 220, 222, 294, 221, 295, 425, 224, 426, 225,
	226, 227, 228, 229, 230, 231, 427, 296, 297, 298,
	428, 429, 232, 233, 299, 300, 430, 234, 235, 236,
	237, 431, 432, 238, 239, 240, 241, 433, 242, 434,
	301, 243, 244, 245, 302, 303, 435, 436, 246, 437,
	438, 439, 440, 247, 248, 249, 250, 251, 628, 617,
	618, 615, 616, 607, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 644, 610, 0, 0, 0, 103, 104, 105,
	253, 659, 255, 660, 106, 661, 662, 0, 107, 259,
	260, 108, 109, 613, 643, 663, 664, 263, 0, 110,
	655, 0, 636, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 347, 118, 119, 0, 637, 639,
	0, 638, 640, 120, 121, 309, 122, 665, 123, 666,
	667, 829, 124, 0, 125, 0, 126, 0, 0, 658,
	128, 0, 129, 0, 0, 0, 601, 130, 131, 132,
	645, 646, 624, 0, 0, 133, 134, 668, 0, 135,
	0, 136, 0, 0, 348, 0, 137, 656, 0, 273,
	0, 138, 139, 140, 141, 652, 654, 350, 0, 145,
	0, 142, 0, 349, 143, 669, 144, 670, 671, 672,
	0, 635, 0, 351, 146, 147, 352, 148, 149, 150,
	0, 152, 151, 0, 657, 353, 153, 354, 0, 154,
	0, 0, 155, 0, 156, 157, 158, 160, 282, 159,
	355, 161, 162, 164, 163, 596, 0, 625, 653, 165,
	673, 166, 167, 0, 168, 0, 0, 169, 0, 0,
	170, 285, 356, 171, 357, 647, 172, 173, 174, 175,
	176, 0, 177, 648, 178, 288, 179, 0, 180, 181,
	182, 183, 184, 674, 185, 186, 0, 187, 188, 189,
	190, 191, 193, 194, 192, 195, 196, 197, 198, 0,
	199, 358, 200, 201, 602, 202, 0, 206, 207, 208,
	209, 81, 211, 291, 210, 212, 213, 641, 214, 203,
	204, 215, 359, 216, 675, 293, 217, 0, 223, 218,
	219, 205, 220, 222, 676, 221, 649, 0, 224, 83,
	225, 226, 227, 228, 229, 230, 231, 0, 296, 677,
	678, 0, 0, 232, 233, 650, 651, 623, 234, 235,
	236, 237, 0, 0, 238, 239, 240, 241, 642, 242,
	0, 301, 243, 244, 245, 713, 679, 0, 0, 246,
	0, 0, 0, 79, 247, 248, 249, 250, 251, 597,
	80, 0, 0, 0, 0, 595, 0, 0, 0, 0,
	593, 594, 628, 617, 618, 615, 616, 607, 0, 603,
	0, 0, 0, 0, 606, 0, 0, 0, 100, 101,
	1250, 102, 0, 0, 0, 0, 644, 610, 0, 0,
	0, 103, 104, 105, 253, 659, 255, 660, 106, 661,
	662, 0, 107, 259, 260, 108, 109, 613, 643, 663,
	664, 263, 0, 110, 655, 0, 636, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 347, 118,
	119, 0, 637, 639, 0, 638, 640, 120, 121, 309,
	122, 665, 123, 666, 667, 0, 124, 0, 125, 0,
	126, 1251, 0, 658, 128, 0, 129, 0, 0, 0,
	601, 130, 131, 132, 645, 646, 624, 0, 0, 133,
	134, 668, 0, 135, 0, 136, 0, 0, 348, 0,
	137, 656, 0, 273, 0, 138, 139, 140, 141, 652,
	654, 350, 0, 145, 0, 142, 0, 349, 143, 669,
	144, 670, 671, 672, 0, 635, 0, 351, 146, 147,
	352, 148, 149, 150, 0, 152, 151, 0, 657, 353,
	153, 354, 0, 154, 0, 0, 155, 0, 156, 157,
	158, 160, 282, 159, 355, 161, 162, 164, 163, 596,
	0, 625, 653, 165, 673, 166, 167, 0, 168, 0,
	0, 169, 0, 0, 170, 285, 356, 171, 357, 647,
	172, 173, 174, 175, 176, 0, 177, 648, 178, 288,
	179, 0, 180, 181, 182, 183, 184, 674, 185, 186,
	0, 187, 188, 189, 190, 191, 193, 194, 192, 195,
	196, 197, 198, 0, 199, 358, 200, 201, 602, 202,
	0, 206, 207, 208, 209, 0, 211, 291, 210, 212,
	213, 641, 214, 203, 204, 215, 359, 216, 675, 293,
	217, 0, 223, 218, 219, 205, 220, 222, 676, 221,
	649, 0, 224, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 296, 677, 678, 0, 0, 232, 233, 650,
	651, 623, 234, 235, 236, 237, 0, 0, 238, 239,
	240, 241, 642, 242, 0, 301, 243, 244, 245, 302,
	679, 1249, 0, 246, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 597, 0, 0, 0, 0, 0, 595,
	0, 0, 0, 0, 593, 594, 1252, 628, 617, 618,
	615, 616, 607, 603, 1247, 0, 0, 0, 606, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 644, 610, 0, 0, 0, 103, 104, 105, 253,
	659, 255, 660, 106, 661, 662, 0, 107, 259, 260,
	108, 109, 613, 643, 663, 664, 263, 0, 110, 655,
	0, 636, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 347, 118, 119, 0, 637, 639, 0,
	638, 640, 120, 121, 309, 122, 665, 123, 666, 667,
	0, 124, 0, 125, 0, 126, 0, 0, 658, 128,
	0, 129, 0, 0, 0, 601, 130, 131, 132, 645,
	646, 624, 0, 0, 133, 134, 668, 0, 135, 0,
	136, 0, 0, 348, 0, 137, 656, 0, 273, 0,
	138, 139, 140, 141, 652, 654, 350, 0, 145, 0,
	142, 0, 349, 143, 669, 144, 670, 671, 672, 0,
	635, 0, 351, 146, 147, 352, 148, 149, 150, 0,
	152, 151, 0, 657, 353, 153, 354, 0, 154, 0,
	0, 155, 0, 156, 157, 158, 160, 282, 159, 355,
	161, 162, 164, 163, 596, 0, 625, 653, 165, 673,
	166, 167, 0, 168, 0, 0, 169, 0, 0, 170,
	285, 356, 171, 357, 647, 172, 173, 174, 175, 176,
	0, 177, 648, 178, 288, 179, 0, 180, 181, 182,
	183, 184, 674, 185, 186, 0, 187, 188, 189, 190,
	191, 193, 194, 192, 195, 196, 197, 198, 0, 199,
	358, 200, 201, 602, 202, 0, 206, 207, 208, 209,
	81, 211, 291, 210, 212, 213, 641, 214, 203, 204,
	215, 359, 216, 675, 293, 217, 0, 223, 218, 219,
	205, 220, 222, 676, 221, 649, 0, 224, 83, 225,
	226, 227, 228, 229, 230, 231, 0, 296, 677, 678,
	0, 0, 232, 233, 650, 651, 623, 234, 235, 236,
	237, 0, 0, 238, 239, 240, 241, 642, 242, 0,
	301, 243, 244, 245, 713, 679, 0, 0, 246, 0,
	0, 0, 79, 247, 248, 249, 250, 251, 597, 80,
	0, 0, 0, 0, 595, 0, 0, 0, 0, 593,
	594, 628, 617, 618, 615, 616, 607, 0, 603, 0,
	0, 0, 0, 606, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 644, 610, 0, 0, 0,
	103, 104, 105, 253, 659, 255, 660, 106, 661, 662,
	1296, 107, 259, 260, 108, 109, 613, 643, 663, 664,
	263, 0, 110, 655, 0, 636, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 347, 118, 119,
	0, 637, 639, 0, 638, 640, 120, 121, 309, 122,
	665, 123, 666, 667, 0, 124, 0, 125, 0, 126,
	0, 0, 658, 128, 0, 129, 0, 0, 0, 601,
	130, 131, 132, 645, 646, 624, 0, 0, 133, 134,
	668, 0, 135, 0, 136, 0, 1301, 348, 0, 137,
	656, 0, 273, 0, 138, 139, 140, 141, 652, 654,
	350, 0, 145, 0, 142, 0, 349, 143, 669, 144,
	670, 671, 672, 0, 635, 0, 351, 146, 147, 352,
	148, 149, 150, 0, 152, 151, 1297, 657, 353, 153,
	354, 0, 154, 0, 0, 155, 0, 156, 157, 158,
	160, 282, 159, 355, 161, 162, 164, 163, 596, 0,
	625, 653, 165, 673, 166, 167, 0, 168, 0, 0,
	169, 0, 0, 170, 285, 356, 171, 357, 647, 172,
	173, 174, 175, 176, 0, 177, 648, 178, 288, 179,
	0, 180, 181, 182, 183, 184, 674, 185, 186, 0,
	187, 188, 189, 190, 191, 193, 194, 192, 195, 196,
	197, 198, 0, 199, 358, 200, 201, 602, 202, 0,
	206, 207, 208, 209, 0, 211, 291, 210, 212, 213,
	641, 214, 203, 204, 215, 359, 216, 675, 293, 217,
	0, 223, 218, 219, 205, 220, 222, 676, 221, 649,
	0, 224, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 296, 677, 678, 0, 1298, 232, 233, 650, 651,
	623, 234, 235, 236, 237, 0, 0, 238, 239, 240,
	241, 642, 242, 0, 301, 243, 244, 245, 302, 679,
	0, 0, 246, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 597, 0, 0, 0, 0, 0, 595, 0,
	0, 0, 0, 593, 594, 628, 617, 618, 615, 616,
	607, 0, 603, 0, 0, 0, 0, 606, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 644,
	610, 0, 0, 0, 103, 104, 105, 253, 659, 255,
	660, 106, 661, 662, 0, 107, 259, 260, 108, 109,
	613, 643, 663, 664, 263, 0, 110, 655, 0, 636,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 347, 118, 119, 0, 637, 639, 0, 638, 640,
	120, 121, 309, 122, 665, 123, 666, 667, 0, 124,
	0, 125, 0, 126, 0, 0, 658, 128, 0, 129,
	0, 0, 0, 601, 130, 131, 132, 645, 646, 624,
	0, 0, 133, 134, 668, 0, 135, 0, 136, 0,
	0, 348, 0, 137, 656, 0, 273, 0, 138, 139,
	140, 141, 652, 654, 350, 0, 145, 0, 142, 0,
	349, 143, 669, 144, 670, 671, 672, 0, 635, 0,
	351, 146, 147, 352, 148, 149, 150, 0, 152, 151,
	0, 657, 353, 153, 354, 0, 154, 0, 0, 155,
	0, 156, 157, 158, 160, 282, 159, 355, 161, 162,
	164, 163, 596, 1780, 625, 653, 165, 673, 166, 167,
	0, 168, 0, 0, 169, 0, 0, 170, 285, 356,
	171, 357, 647, 172, 173, 174, 175, 176, 0, 177,
	648, 178, 288, 179, 0, 180, 181, 182, 183, 184,
	674, 185, 186, 0, 187, 188, 189, 190, 191, 193,
	194, 192, 195, 196, 197, 198, 0, 199, 358, 200,
	201, 602, 202, 0, 206, 207, 208, 209, 0, 211,
	291, 210, 212, 213, 641, 214, 203, 204, 215, 359,
	216, 675, 293, 217, 0, 223, 218, 219, 205, 220,
	222, 676, 221, 649, 0, 224, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 296, 677, 678, 0, 0,
	232, 233, 650, 651, 623, 234, 235, 236, 237, 0,
	0, 238, 239, 240, 241, 642, 242, 0, 301, 243,
	244, 245, 302, 679, 0, 0, 246, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 597, 0, 0, 0,
	0, 0, 595, 0, 0, 0, 0, 593, 594, 820,
	628, 617, 618, 615, 616, 607, 603, 0, 0, 0,
	0, 606, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 644, 610, 0, 0, 0, 103,
	104, 105, 253, 659, 255, 660, 106, 661, 662, 0,
	107, 259, 260, 108, 109, 613, 643, 663, 664, 263,
	0, 110, 655, 0, 636, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 347, 118, 119, 0,
	637, 639, 0, 638, 640, 120, 121, 309, 122, 665,
	123, 666, 667, 0, 124, 0, 125, 0, 126, 0,
	0, 658, 128, 0, 129, 0, 0, 0, 601, 130,
	131, 132, 645, 646, 624, 0, 0, 133, 134, 668,
	0, 135, 0, 136, 0, 0, 348, 0, 137, 656,
	0, 273, 0, 138, 139, 140, 141, 652, 654, 350,
	0, 145, 0, 142, 0, 349, 143, 669, 144, 670,
	671, 672, 0, 635, 0, 351, 146, 147, 352, 148,
	149, 150, 0, 152, 151, 0, 657, 353, 153, 354,
	0, 154, 0, 0, 155, 0, 156, 157, 158, 160,
	282, 159, 355, 161, 162, 164, 163, 596, 0, 625,
	653, 165, 673, 166, 167, 0, 168, 0, 0, 169,
	0, 0, 170, 285, 356, 171, 357, 647, 172, 173,
	174, 175, 176, 0, 177, 648, 178, 288, 179, 0,
	180, 181, 182, 183, 184, 674, 185, 186, 0, 187,
	188, 189, 190, 191, 193, 194, 192, 195, 196, 197,
	198, 0, 199, 358, 200, 201, 602, 202, 0, 206,
	207, 208, 209, 0, 211, 291, 210, 212, 213, 641,
	214, 203, 204, 215, 359, 216, 675, 293, 217, 0,
	223, 218, 219, 205, 220, 222, 676, 221, 649, 0,
	224, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	296, 677, 678, 0, 0, 232, 233, 650, 651, 623,
	234, 235, 236, 237, 0, 0, 238, 239, 240, 241,
	642, 242, 0, 301, 243, 244, 245, 302, 679, 0,
	0, 246, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 597, 0, 0, 0, 0, 0, 595, 0, 0,
	0, 0, 593, 594, 0, 0, 0, 0, 0, 912,
	1242, 603, 0, 0, 0, 0, 606, 628, 617, 618,
	615, 616, 607, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 644, 610, 0, 0, 0, 103, 104, 105, 253,
	659, 255, 660, 106, 661, 662, 0, 107, 259, 260,
	108, 109, 613, 643, 663, 664, 263, 0, 110, 655,
	0, 636, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 347, 118, 119, 0, 637, 639, 0,
	638, 640, 120, 121, 309, 122, 665, 123, 666, 667,
	829, 124, 0, 125, 0, 126, 0, 0, 658, 128,
	0, 129, 0, 0, 0, 601, 130, 131, 132, 645,
	646, 624, 0, 0, 133, 134, 668, 0, 135, 0,
	136, 0, 0, 348, 0, 137, 656, 0, 273, 0,
	138, 139, 140, 141, 652, 654, 350, 0, 145, 0,
	142, 0, 349, 143, 669, 144, 670, 671, 672, 0,
	635, 0, 351, 146, 147, 352, 148, 149, 150, 0,
	152, 151, 0, 657, 353, 153, 354, 0, 154, 0,
	0, 155, 0, 156, 157, 158, 160, 282, 159, 355,
	161, 162, 164, 163, 596, 0, 625, 653, 165, 673,
	166, 167, 0, 168, 0, 0, 169, 0, 0, 170,
	285, 356, 171, 357, 647, 172, 173, 174, 175, 176,
	0, 177, 648, 178, 288, 179, 0, 180, 181, 182,
	183, 184, 674, 185, 186, 0, 187, 188, 189, 190,
	191, 193, 194, 192, 195, 196, 197, 198, 0, 199,
	358, 200, 201, 602, 202, 0, 206, 207, 208, 209,
	0, 211, 291, 210, 212, 213, 641, 214, 203, 204,
	215, 359, 216, 675, 293, 217, 0, 223, 218, 219,
	205, 220, 222, 676, 221, 649, 0, 224, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 296, 677, 678,
	0, 0, 232, 233, 650, 651, 623, 234, 235, 236,
	237, 0, 0, 238, 239, 240, 241, 642, 242, 0,
	301, 243, 244, 245, 302, 679, 0, 0, 246, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 597, 0,
	0, 0, 0, 0, 595, 0, 0, 0, 0, 593,
	594, 628, 617, 618, 615, 616, 607, 0, 603, 0,
	0, 0, 0, 606, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 644, 610, 0, 0, 0,
	103, 104, 105, 253, 659, 255, 660, 106, 661, 662,
	0, 107, 259, 260, 108, 109, 613, 643, 663, 664,
	263, 0, 110, 655, 0, 636, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 347, 118, 119,
	0, 637, 639, 0, 638, 640, 120, 121, 309, 122,
	665, 123, 666, 667, 0, 124, 0, 125, 0, 126,
	0, 0, 658, 128, 0, 129, 0, 0, 0, 601,
	130, 131, 132, 645, 646, 624, 0, 0, 133, 134,
	668, 0, 135, 0, 136, 0, 0, 348, 0, 137,
	656, 0, 273, 0, 138, 139, 140, 141, 652, 654,
	350, 0, 145, 0, 142, 0, 349, 143, 669, 144,
	670, 671, 672, 0, 635, 0, 351, 146, 147, 352,
	148, 149, 150, 0, 152, 151, 0, 657, 353, 153,
	354, 0, 154, 0, 0, 155, 0, 156, 157, 158,
	160, 282, 159, 355, 161, 162, 164, 163, 596, 0,
	625, 653, 165, 673, 166, 167, 0, 168, 0, 0,
	169, 0, 0, 170, 285, 356, 171, 357, 647, 172,
	173, 174, 175, 176, 0, 177, 648, 178, 288, 179,
	0, 180, 181, 182, 183, 184, 674, 185, 186, 0,
	187, 188, 189, 190, 191, 193, 194, 192, 195, 196,
	197, 198, 0, 199, 358, 200, 201, 602, 202, 0,
	206, 207, 208, 209, 0, 211, 291, 210, 212, 213,
	641, 214, 203, 204, 215, 359, 216, 675, 293, 217,
	0, 223, 218, 219, 205, 220, 222, 676, 221, 649,
	0, 224, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 296, 677, 678, 0, 0, 232, 233, 650, 651,
	623, 234, 235, 236, 237, 0, 0, 238, 239, 240,
	241, 642, 242, 0, 301, 243, 244, 245, 302, 679,
	0, 0, 246, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 597, 0, 0, 0, 0, 0, 595, 0,
	0, 0, 0, 593, 594, 628, 617, 618, 615, 616,
	607, 0, 603, 1763, 0, 0, 0, 606, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 644,
	610, 0, 0, 0, 103, 104, 105, 253, 659, 255,
	660, 106, 661, 662, 0, 107, 259, 260, 108, 109,
	613, 643, 663, 664, 263, 0, 110, 655, 0, 636,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 347, 118, 119, 0, 637, 639, 0, 638, 640,
	120, 121, 309, 122, 665, 123, 666, 667, 0, 124,
	0, 125, 0, 126, 0, 0, 658, 128, 0, 129,
	0, 0, 0, 601, 130, 131, 132, 645, 646, 624,
	0, 0, 133, 134, 668, 0, 135, 0, 136, 0,
	0, 348, 0, 137, 656, 0, 273, 0, 138, 139,
	140, 141, 652, 654, 350, 0, 145, 0, 142, 0,
	349, 143, 669, 144, 670, 671, 672, 0, 635, 0,
	351, 146, 147, 352, 148, 149, 150, 0, 152, 151,
	0, 657, 353, 153, 354, 0, 154, 0, 0, 155,
	0, 156, 157, 158, 160, 282, 159, 355, 161, 162,
	164, 163, 596, 0, 625, 653, 165, 673, 166, 167,
	0, 168, 0, 0, 169, 0, 0, 170, 285, 356,
	171, 357, 647, 172, 173, 174, 175, 176, 0, 177,
	648, 178, 288, 179, 0, 180, 181, 182, 183, 184,
	674, 185, 186, 0, 187, 188, 189, 190, 191, 193,
	194, 192, 195, 196, 197, 198, 0, 199, 358, 200,
	201, 602, 202, 0, 206, 207, 208, 209, 0, 211,
	291, 210, 212, 213, 641, 214, 203, 204, 215, 359,
	216, 675, 293, 217, 0, 223, 218, 219, 205, 220,
	222, 676, 221, 649, 0, 224, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 296, 677, 678, 0, 0,
	232, 233, 650, 651, 623, 234, 235, 236, 237, 0,
	0, 238, 239, 240, 241, 642, 242, 0, 301, 243,
	244, 245, 302, 679, 1712, 0, 246, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 597, 0, 0, 0,
	0, 0, 595, 0, 0, 0, 0, 593, 594, 628,
	617, 618, 615, 616, 607, 0, 603, 0, 0, 0,
	0, 606, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 644, 610, 0, 0, 0, 103, 104,
	105, 253, 659, 255, 660, 106, 661, 662, 0, 107,
	259, 260, 108, 109, 613, 643, 663, 664, 263, 0,
	110, 655, 0, 636, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 347, 118, 119, 0, 637,
	639, 0, 638, 640, 120, 121, 309, 122, 665, 123,
	666, 667, 0, 124, 0, 125, 0, 126, 0, 0,
	658, 128, 0, 129, 0, 0, 0, 601, 130, 131,
	132, 645, 646, 624, 0, 0, 133, 134, 668, 0,
	135, 0, 136, 0, 0, 348, 0, 137, 656, 0,
	273, 0, 138, 139, 140, 141, 652, 654, 350, 0,
	145, 0, 142, 0, 349, 143, 669, 144, 670, 671,
	672, 0, 635, 0, 351, 146, 147, 352, 148, 149,
	150, 0, 152, 151, 0, 657, 353, 153, 354, 0,
	154, 0, 0, 155, 0, 156, 157, 158, 160, 282,
	159, 355, 161, 162, 164, 163, 596, 0, 625, 653,
	165, 673, 166, 167, 0, 168, 0, 0, 169, 0,
	0, 170, 285, 356, 171, 357, 647, 172, 173, 174,
	175, 176, 0, 177, 648, 178, 288, 179, 0, 180,
	181, 182, 183, 184, 674, 185, 186, 0, 187, 188,
	189, 190, 191, 193, 194, 192, 195, 196, 197, 198,
	0, 199, 358, 200, 201, 602, 202, 0, 206, 207,
	208, 209, 0, 211, 291, 210, 212, 213, 641, 214,
	203, 204, 215, 359, 216, 675, 293, 217, 0, 223,
	218, 219, 205, 220, 222, 676, 221, 649, 0, 224,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 296,
	677, 678, 0, 0, 232, 233, 650, 651, 623, 234,
	235, 236, 237, 0, 0, 238, 239, 240, 241, 642,
	242, 0, 301, 243, 244, 245, 302, 679, 0, 0,
	246, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	597, 0, 0, 0, 0, 0, 595, 0, 0, 0,
	0, 593, 594, 628, 617, 618, 615, 616, 607, 0,
	603, 1702, 0, 0, 0, 606, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 644, 610, 0,
	0, 0, 103, 104, 105, 253, 659, 255, 660, 106,
	661, 662, 0, 107, 259, 260, 108, 109, 613, 643,
	663, 664, 263, 0, 110, 655, 0, 636, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 347,
	118, 119, 0, 637, 639, 0, 638, 640, 120, 121,
	309, 122, 665, 123, 666, 667, 0, 124, 0, 125,
	0, 126, 0, 0, 658, 128, 0, 129, 0, 0,
	0, 601, 130, 131, 132, 645, 646, 624, 0, 0,
	133, 134, 668, 0, 135, 0, 136, 0, 1301, 348,
	0, 137, 656, 0, 273, 0, 138, 139, 140, 141,
	652, 654, 350, 0, 145, 0, 142, 0, 349, 143,
	669, 144, 670, 671, 672, 0, 635, 0, 351, 146,
	147, 352, 148, 149, 150, 0, 152, 151, 0, 657,
	353, 153, 354, 0, 154, 0, 0, 155, 0, 156,
	157, 158, 160, 282, 159, 355, 161, 162, 164, 163,
	596, 0, 625, 653, 165, 673, 166, 167, 0, 168,
	0, 0, 169, 0, 0, 170, 285, 356, 171, 357,
	647, 172, 173, 174, 175, 176, 0, 177, 648, 178,
	288, 179, 0, 180, 181, 182, 183, 184, 674, 185,
	186, 0, 187, 188, 189, 190, 191, 193, 194, 192,
	195, 196, 197, 198, 0, 199, 358, 200, 201, 602,
	202, 0, 206, 207, 208, 209, 0, 211, 291, 210,
	212, 213, 641, 214, 203, 204, 215, 359, 216, 675,
	293, 217, 0, 223, 218, 219, 205, 220, 222, 676,
	221, 649, 0, 224, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 296, 677, 678, 0, 0, 232, 233,
	650, 651, 623, 234, 235, 236, 237, 0, 0, 238,
	239, 240, 241, 642, 242, 0, 301, 243, 244, 245,
	302, 679, 0, 0, 246, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 597, 0, 0, 0, 0, 0,
	595, 0, 0, 0, 0, 593, 594, 628, 617, 618,
	615, 616, 607, 0, 603, 0, 0, 0, 0, 606,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 644, 610, 0, 0, 0, 103, 104, 105, 253,
	659, 255, 660, 106, 661, 662, 0, 107, 259, 260,
	108, 109, 613, 643, 663, 664, 263, 0, 110, 655,
	0, 636, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 347, 118, 119, 0, 637, 639, 0,
	638, 640, 120, 121, 309, 122, 665, 123, 666, 667,
	0, 124, 0, 125, 0, 126, 0, 0, 658, 128,
	0, 129, 0, 0, 0, 601, 130, 131, 132, 645,
	646, 624, 0, 0, 133, 134, 668, 0, 135, 0,
	136, 0, 0, 348, 0, 137, 656, 0, 273, 0,
	138, 139, 140, 141, 652, 654, 350, 0, 145, 0,
	142, 0, 349, 143, 669, 144, 670, 671, 672, 0,
	635, 0, 351, 146, 147, 352, 148, 149, 150, 0,
	152, 151, 0, 657, 353, 153, 354, 0, 154, 0,
	0, 155, 0, 156, 157, 158, 160, 282, 159, 355,
	161, 162, 164, 163, 596, 0, 625, 653, 165, 673,
	166, 167, 0, 168, 0, 0, 169, 0, 0, 170,
	285, 356, 171, 357, 647, 172, 173, 174, 175, 176,
	0, 177, 648, 178, 288, 179, 0, 180, 181, 182,
	183, 184, 674, 185, 186, 0, 187, 188, 189, 190,
	191, 193, 194, 192, 195, 196, 197, 198, 0, 199,
	358, 200, 201, 602, 202, 0, 206, 207, 208, 209,
	0, 211, 291, 210, 212, 213, 641, 214, 203, 204,
	215, 359, 216, 675, 293, 217, 0, 223, 218, 219,
	205, 220, 222, 676, 221, 649, 0, 224, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 296, 677, 678,
	0, 0, 232, 233, 650, 651, 623, 234, 235, 236,
	237, 0, 0, 238, 239, 240, 241, 642, 242, 0,
	301, 243, 244, 245, 302, 679, 0, 0, 246, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 597, 0,
	0, 0, 0, 0, 595, 0, 0, 0, 0, 593,
	594, 820, 628, 617, 618, 615, 616, 607, 603, 0,
	0, 0, 0, 606, 0, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 644, 610, 0, 0,
	0, 103, 104, 105, 253, 659, 255, 660, 106, 661,
	662, 0, 107, 259, 260, 108, 109, 613, 643, 663,
	664, 263, 0, 110, 655, 0, 636, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 347, 118,
	119, 0, 637, 639, 0, 638, 640, 120, 121, 309,
	122, 665, 123, 666, 667, 0, 124, 0, 125, 0,
	126, 0, 0, 658, 128, 0, 129, 0, 0, 0,
	601, 130, 131, 132, 645, 646, 624, 0, 0, 133,
	134, 668, 0, 135, 0, 136, 0, 0, 348, 0,
	137, 656, 0, 273, 0, 138, 139, 140, 141, 652,
	654, 350, 0, 145, 0, 142, 0, 349, 143, 669,
	144, 670, 671, 672, 0, 635, 0, 351, 146, 147,
	352, 148, 149, 150, 0, 152, 151, 0, 657, 353,
	153, 354, 0, 154, 0, 0, 155, 0, 156, 157,
	158, 160, 282, 159, 355, 161, 162, 164, 163, 596,
	0, 625, 653, 165, 673, 166, 167, 0, 168, 0,
	0, 169, 0, 0, 170, 285, 356, 171, 357, 647,
	172, 173, 174, 175, 176, 0, 177, 648, 178, 288,
	179, 0, 180, 181, 182, 183, 184, 674, 185, 186,
	0, 187, 188, 189, 190, 191, 193, 194, 192, 195,
	196, 197, 198, 0, 199, 358, 200, 201, 602, 202,
	0, 206, 207, 208, 209, 0, 211, 291, 210, 212,
	213, 641, 214, 203, 204, 215, 359, 216, 675, 293,
	217, 0, 223, 218, 219, 205, 220, 222, 676, 221,
	649, 0, 224, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 296, 677, 678, 0, 0, 232, 233, 650,
	651, 623, 234, 235, 236, 237, 0, 0, 238, 239,
	240, 241, 642, 242, 0, 301, 243, 244, 245, 302,
	679, 0, 0, 246, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 597, 0, 0, 0, 0, 0, 595,
	0, 0, 0, 0, 593, 594, 628, 617, 618, 615,
	616, 607, 0, 603, 1237, 0, 0, 0, 606, 0,
	0, 0, 100, 101, 1105, 102, 0, 0, 0, 0,
	644, 610, 0, 0, 0, 103, 104, 105, 253, 659,
	255, 660, 106, 661, 662, 0, 107, 259, 260, 108,
	109, 613, 643, 663, 664, 263, 0, 110, 655, 0,
	636, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 347, 118, 119, 0, 637, 639, 0, 638,
	640, 120, 121, 309, 122, 665, 123, 666, 667, 0,
	124, 0, 125, 0, 126, 0, 0, 658, 128, 0,
	129, 0, 0, 0, 601, 130, 131, 132, 645, 646,
	624, 0, 0, 133, 134, 668, 0, 135, 0, 136,
	0, 0, 348, 0, 137, 656, 0, 273, 0, 138,
	139, 140, 141, 652, 654, 350, 0, 145, 0, 142,
	0, 349, 143, 669, 144, 670, 671, 672, 0, 635,
	0, 351, 146, 147, 352, 148, 149, 150, 0, 152,
	151, 0, 657, 353, 153, 354, 0, 154, 0, 0,
	155, 0, 156, 157, 158, 160, 282, 159, 355, 161,
	162, 164, 163, 596, 0, 625, 653, 165, 673, 166,
	167, 0, 168, 0, 0, 169, 0, 0, 170, 285,
	356, 171, 357, 647, 172, 173, 174, 175, 176, 0,
	177, 648, 178, 288, 179, 0, 180, 181, 182, 183,
	184, 674, 185, 186, 0, 187, 188, 189, 190, 191,
	193, 194, 192, 195, 196, 197, 198, 0, 199, 358,
	200, 201, 602, 202, 0, 206, 207, 208, 209, 0,
	211, 291, 210, 212, 213, 641, 214, 203, 204, 215,
	359, 216, 675, 293, 217, 0, 223, 218, 219, 205,
	220, 222, 676, 221, 649, 0, 224, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 296, 677, 678, 0,
	0, 232, 233, 650, 651, 623, 234, 235, 236, 237,
	0, 0, 238, 239, 240, 241, 642, 242, 0, 301,
	243, 244, 245, 302, 679, 0, 0, 246, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 597, 0, 0,
	0, 0, 0, 595, 0, 0, 0, 0, 593, 594,
	628, 617, 618, 615, 616, 607, 0, 603, 0, 0,
	0, 0, 606, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 644, 610, 0, 0, 0, 103,
	104, 105, 253, 659, 255, 660, 106, 661, 662, 0,
	107, 259, 260, 108, 109, 613, 643, 663, 664, 263,
	0, 110, 655, 0, 636, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 347, 118, 2166, 0,
	637, 639, 0, 638, 640, 120, 121, 309, 122, 665,
	123, 666, 667, 0, 124, 0, 125, 0, 126, 0,
	0, 658, 128, 0, 129, 0, 0, 0, 601, 130,
	131, 132, 645, 646, 624, 0, 0, 133, 134, 668,
	0, 135, 0, 136, 0, 0, 348, 0, 137, 656,
	0, 273, 0, 138, 139, 140, 141, 652, 654, 350,
	0, 145, 0, 142, 0, 349, 143, 669, 144, 670,
	671, 672, 0, 635, 0, 351, 146, 147, 352, 148,
	149, 150, 0, 152, 151, 0, 657, 353, 153, 354,
	0, 154, 0, 0, 155, 0, 156, 157, 158, 160,
	282, 159, 355, 161, 162, 164, 163, 596, 0, 625,
	653, 165, 673, 166, 167, 0, 168, 0, 0, 169,
	0, 0, 170, 285, 356, 171, 357, 647, 172, 173,
	174, 175, 176, 0, 177, 648, 178, 288, 179, 0,
	180, 181, 182, 183, 184, 674, 185, 186, 0, 187,
	188, 189, 190, 191, 193, 194, 192, 195, 196, 197,
	198, 0, 199, 358, 200, 201, 602, 202, 0, 206,
	207, 208, 209, 0, 211, 291, 210, 212, 213, 641,
	214, 203, 204, 215, 359, 216, 675, 293, 217, 0,
	223, 218, 219, 205, 220, 222, 676, 221, 649, 0,
	224, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	296, 677, 678, 0, 0, 232, 233, 650, 651, 623,
	234, 235, 2165, 237, 0, 0, 238, 239, 240, 241,
	642, 242, 0, 301, 243, 244, 245, 302, 679, 0,
	0, 246, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 597, 0, 0, 0, 0, 0, 595, 0, 0,
	0, 0, 593, 594, 628, 617, 618, 615, 616, 607,
	0, 603, 0, 0, 0, 0, 606, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 0, 644, 610,
	0, 0, 0, 103, 104, 105, 2164, 659, 255, 660,
	106, 661, 662, 0, 107, 259, 260, 108, 109, 613,
	643, 663, 664, 263, 0, 110, 655, 0, 636, 0,
	111, 112, 113, 0, 114, 0, 115, 116, 117, 0,
	347, 118, 2166, 0, 637, 639, 0, 638, 640, 120,
	121, 309, 122, 665, 123, 666, 667, 0, 124, 0,
	125, 0, 126, 0, 0, 658, 128, 0, 129, 0,
	0, 0, 601, 130, 131, 132, 645, 646, 624, 0,
	0, 133, 134, 668, 0, 135, 0, 136, 0, 0,
	348, 0, 137, 656, 0, 273, 0, 138, 139, 140,
	141, 652, 654, 350, 0, 145, 0, 142, 0, 349,
	143, 669, 144, 670, 671, 672, 0, 635, 0, 351,
	146, 147, 352, 148, 149, 150, 0, 152, 151, 0,
	657, 353, 153, 354, 0, 154, 0, 0, 155, 0,
	156, 157, 158, 160, 282, 159, 355, 161, 162, 164,
	163, 596, 0, 625, 653, 165, 673, 166, 167, 0,
	168, 0, 0, 169, 0, 0, 170, 285, 356, 171,
	357, 647, 172, 173, 174, 175, 176, 0, 177, 648,
	178, 288, 179, 0, 180, 181, 182, 183, 184, 674,
	185, 186, 0, 187, 188, 189, 190, 191, 193, 194,
	192, 195, 196, 197, 198, 0, 199, 358, 200, 201,
	602, 202, 0, 206, 207, 208, 209, 0, 211, 291,
	210, 212, 213, 641, 214, 203, 204, 215, 359, 216,
	675, 293, 217, 0, 223, 218, 219, 205, 220, 222,
	676, 221, 649, 0, 224, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 296, 677, 678, 0, 0, 232,
	233, 650, 651, 623, 234, 235, 2165, 237, 0, 0,
	238, 239, 240, 241, 642, 242, 0, 301, 243, 244,
	245, 302, 679, 0, 0, 246, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 597, 0, 0, 0, 0,
	0, 595, 0, 0, 0, 0, 593, 594, 628, 617,
	618, 615, 616, 607, 0, 603, 0, 0, 0, 0,
	606, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 644, 610, 0, 0, 0, 103, 104, 105,
	253, 659, 255, 660, 106, 661, 662, 0, 107, 259,
	260, 108, 109, 613, 643, 663, 664, 263, 0, 110,
	655, 0, 636, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 347, 118, 119, 0, 637, 639,
	0, 638, 640, 120, 121, 309, 122, 665, 123, 666,
	667, 0, 124, 0, 125, 0, 126, 0, 0, 658,
	128, 0, 129, 0, 0, 0, 601, 130, 131, 132,
	645, 646, 624, 0, 0, 133, 134, 668, 0, 135,
	0, 136, 0, 0, 348, 0, 137, 656, 0, 273,
	0, 138, 139, 140, 141, 652, 654, 350, 0, 145,
	0, 142, 0, 349, 143, 669, 144, 670, 671, 672,
	0, 635, 0, 351, 146, 147, 352, 148, 149, 150,
	0, 152, 151, 0, 657, 353, 153, 354, 0, 154,
	0, 0, 155, 0, 156, 157, 158, 160, 282, 159,
	355, 161, 162, 164, 163, 596, 0, 625, 653, 165,
	673, 166, 167, 0, 168, 0, 0, 169, 0, 0,
	170, 285, 356, 171, 357, 647, 172, 173, 174, 175,
	176, 0, 177, 648, 178, 288, 179, 0, 180, 181,
	182, 183, 184, 674, 185, 186, 0, 187, 188, 189,
	190, 191, 193, 194, 192, 195, 196, 197, 198, 0,
	199, 358, 200, 201, 602, 202, 0, 206, 207, 208,
	209, 0, 211, 291, 210, 212, 213, 641, 214, 203,
	204, 215, 359, 216, 675, 293, 217, 0, 223, 218,
	219, 205, 220, 222, 676, 221, 649, 0, 224, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 296, 677,
	678, 0, 0, 232, 233, 650, 651, 623, 234, 235,
	236, 237, 0, 0, 238, 239, 240, 241, 642, 242,
	0, 301, 243, 244, 245, 302, 679, 0, 0, 246,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 597,
	0, 0, 0, 0, 0, 595, 0, 0, 0, 0,
	593, 594, 1273, 617, 618, 615, 616, 607, 0, 603,
	0, 0, 0, 0, 606, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 644, 610, 0, 0,
	0, 103, 104, 105, 253, 659, 255, 660, 106, 661,
	662, 0, 107, 259, 260, 108, 109, 613, 643, 663,
	664, 263, 0, 110, 655, 0, 636, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 347, 118,
	119, 0, 637, 639, 0, 638, 640, 120, 121, 309,
	122, 665, 1276, 666, 667, 0, 124, 0, 125, 0,
	126, 0, 0, 658, 128, 0, 129, 0, 0, 0,
	601, 130, 131, 132, 645, 646, 624, 0, 0, 133,
	134, 668, 0, 135, 0, 136, 0, 0, 348, 0,
	137, 656, 0, 273, 0, 138, 139, 1277, 141, 652,
	654, 350, 0, 145, 0, 142, 0, 349, 143, 669,
	144, 670, 671, 672, 0, 635, 0, 351, 146, 147,
	352, 148, 149, 150, 0, 152, 151, 0, 657, 353,
	153, 354, 0, 154, 0, 0, 155, 0, 156, 1278,
	1275, 160, 282, 159, 355, 161, 162, 164, 163, 596,
	0, 625, 653, 165, 673, 166, 167, 0, 168, 0,
	0, 169, 0, 0, 170, 285, 356, 171, 357, 647,
	172, 173, 174, 175, 176, 0, 177, 648, 178, 288,
	179, 0, 180, 181, 182, 183, 184, 674, 185, 186,
	0, 187, 188, 189, 190, 191, 193, 194, 192, 195,
	196, 197, 198, 0, 199, 358, 200, 201, 602, 202,
	0, 206, 207, 208, 1279, 0, 211, 291, 210, 212,
	213, 641, 214, 203, 204, 215, 359, 216, 675, 293,
	217, 0, 223, 218, 219, 205, 220, 222, 676, 221,
	649, 0, 224, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 296, 677, 678, 0, 0, 232, 233, 650,
	651, 623, 234, 235, 236, 237, 0, 0, 238, 239,
	240, 241, 642, 242, 0, 301, 243, 244, 245, 302,
	679, 0, 0, 246, 0, 0, 0, 0, 247, 248,
	249, 1274, 251, 597, 0, 0, 0, 0, 0, 595,
	0, 0, 0, 0, 593, 594, 628, 617, 618, 615,
	616, 607, 0, 603, 0, 0, 0, 0, 606, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	644, 610, 0, 0, 0, 103, 104, 105, 253, 659,
	255, 660, 106, 661, 662, 0, 107, 259, 260, 108,
	109, 613, 643, 663, 664, 263, 0, 110, 655, 0,
	636, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 347, 118, 119, 0, 637, 639, 0, 638,
	640, 120, 121, 309, 122, 665, 123, 666, 667, 0,
	124, 0, 125, 0, 126, 0, 0, 658, 128, 0,
	129, 0, 0, 0, 601, 130, 131, 132, 645, 646,
	624, 0, 0, 133, 134, 668, 0, 135, 0, 136,
	0, 0, 348, 0, 137, 656, 0, 273, 0, 138,
	139, 140, 141, 652, 654, 350, 0, 145, 0, 142,
	0, 349, 143, 669, 144, 670, 671, 672, 0, 635,
	0, 351, 146, 147, 352, 148, 149, 150, 0, 152,
	151, 0, 657, 353, 153, 354, 0, 154, 0, 0,
	155, 0, 156, 157, 158, 160, 282, 159, 355, 161,
	162, 164, 163, 0, 0, 625, 653, 165, 673, 166,
	167, 0, 168, 0, 0, 169, 0, 0, 170, 285,
	356, 171, 357, 647, 172, 173, 174, 175, 176, 0,
	177, 648, 178, 288, 179, 0, 180, 181, 182, 183,
	184, 674, 185, 186, 0, 187, 188, 189, 190, 191,
	193, 194, 192, 195, 196, 197, 198, 0, 199, 358,
	200, 201, 1291, 202, 0, 206, 207, 208, 209, 0,
	211, 291, 210, 212, 213, 641, 214, 203, 204, 215,
	359, 216, 675, 293, 217, 0, 223, 218, 219, 205,
	220, 222, 676, 221, 649, 0, 224, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 296, 677, 678, 0,
	0, 232, 233, 650, 651, 623, 234, 235, 236, 237,
	0, 0, 238, 239, 240, 241, 642, 242, 0, 301,
	243, 244, 245, 302, 679, 0, 0, 246, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 0, 0, 0,
	0, 0, 0, 1289, 0, 0, 0, 0, 1287, 1288,
	628, 617, 618, 615, 616, 607, 0, 1290, 0, 0,
	0, 0, 606, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 644, 610, 0, 0, 0, 103,
	104, 105, 253, 659, 255, 660, 106, 661, 662, 0,
	107, 259, 260, 108, 109, 0, 643, 663, 664, 263,
	0, 110, 655, 0, 636, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 347, 118, 119, 0,
	637, 639, 0, 638, 640, 120, 121, 309, 122, 665,
	123, 666, 667, 0, 124, 0, 125, 0, 126, 0,
	0, 658, 128, 0, 129, 0, 0, 0, 268, 130,
	131, 132, 645, 646, 624, 0, 0, 133, 134, 668,
	0, 135, 0, 136, 0, 0, 348, 0, 137, 656,
	0, 273, 0, 138, 139, 140, 141, 652, 654, 350,
	0, 145, 0, 142, 0, 349, 143, 669, 144, 670,
	671, 672, 0, 635, 0, 351, 146, 147, 352, 148,
	149, 150, 0, 152, 151, 0, 657, 353, 153, 354,
	0, 154, 0, 0, 155, 0, 156, 157, 158, 160,
	282, 159, 355, 161, 162, 164, 163, 0, 0, 625,
	653, 165, 673, 166, 167, 0, 168, 0, 0, 169,
	0, 0, 170, 285, 356, 171, 357, 647, 172, 173,
	174, 175, 176, 0, 177, 648, 178, 288, 179, 0,
	180, 181, 182, 183, 184, 674, 185, 186, 0, 187,
	188, 189, 190, 191, 193, 194, 192, 195, 196, 197,
	198, 0, 199, 358, 200, 201, 1291, 202, 0, 206,
	207, 208, 209, 0, 211, 291, 210, 212, 213, 641,
	214, 203, 204, 215, 359, 216, 675, 293, 217, 0,
	223, 218, 219, 205, 220, 222, 676, 221, 649, 0,
	224, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	296, 677, 678, 0, 0, 232, 233, 650, 651, 623,
	234, 235, 236, 237, 0, 0, 238, 239, 240, 241,
	642, 242, 0, 301, 243, 244, 245, 302, 679, 0,
	0, 246, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 0, 0, 628, 617, 618, 615, 616, 607, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	101, 1290, 102, 0, 0, 0, 606, 644, 610, 0,
	0, 0, 103, 104, 105, 0, 659, 255, 660, 106,
	661, 662, 0, 107, 259, 260, 108, 109, 613, 643,
	663, 664, 263, 0, 110, 655, 0, 636, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 347,
	118, 2166, 0, 637, 639, 0, 638, 640, 120, 121,
	309, 122, 665, 123, 666, 667, 0, 124, 0, 125,
	0, 126, 0, 0, 658, 128, 0, 129, 0, 0,
	0, 601, 130, 131, 132, 645, 646, 624, 0, 0,
	133, 134, 668, 0, 135, 0, 136, 0, 0, 348,
	0, 137, 656, 0, 273, 0, 138, 139, 140, 141,
	652, 654, 0, 0, 145, 0, 142, 0, 349, 143,
	669, 144, 670, 671, 672, 0, 635, 0, 0, 146,
	147, 352, 148, 149, 150, 0, 152, 151, 0, 657,
	353, 153, 0, 0, 154, 0, 0, 155, 0, 156,
	157, 158, 160, 282, 159, 355, 161, 162, 164, 163,
	596, 0, 625, 653, 165, 673, 166, 167, 0, 168,
	0, 0, 169, 0, 0, 170, 285, 356, 171, 357,
	647, 172, 173, 174, 175, 176, 0, 177, 648, 178,
	288, 179, 0, 180, 181, 182, 183, 184, 674, 185,
	186, 0, 187, 188, 189, 190, 191, 193, 194, 192,
	195, 196, 197, 198, 0, 199, 358, 200, 201, 602,
	202, 0, 206, 207, 208, 209, 0, 211, 291, 210,
	212, 213, 641, 214, 203, 204, 215, 0, 216, 675,
	293, 217, 0, 223, 218, 219, 205, 220, 222, 676,
	221, 649, 0, 224, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 296, 677, 678, 0, 0, 232, 233,
	650, 651, 623, 234, 235, 2165, 237, 0, 0, 238,
	239, 240, 241, 642, 242, 0, 301, 243, 244, 245,
	302, 679, 0, 0, 246, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 628, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 593, 594, 0, 0, 0,
	100, 101, 0, 102, 603, 0, 0, 0, 644, 606,
	0, 0, 0, 103, 104, 105, 253, 254, 255, 256,
	106, 257, 258, 0, 107, 259, 260, 108, 109, 0,
	643, 261, 262, 263, 0, 110, 655, 0, 636, 0,
	111, 112, 113, 0, 114, 0, 115, 116, 117, 0,
	347, 118, 119, 0, 637, 639, 0, 638, 640, 120,
	121, 309, 122, 265, 123, 266, 267, 0, 124, 0,
	125, 0, 126, 0, 0, 127, 128, 0, 129, 0,
	0, 0, 268, 130, 131, 132, 645, 646, 0, 0,
	0, 133, 134, 271, 0, 135, 0, 136, 0, 0,
	348, 0, 137, 656, 0, 273, 0, 138, 139, 140,
	141, 652, 654, 350, 0, 145, 0, 142, 0, 349,
	143, 276, 144, 277, 278, 279, 0, 280, 0, 351,
	146, 147, 352, 148, 149, 150, 0, 152, 151, 0,
	657, 353, 153, 354, 0, 154, 0, 0, 155, 0,
	156, 157, 158, 160, 282, 159, 355, 161, 162, 164,
	163, 0, 0, 0, 653, 165, 284, 166, 167, 0,
	168, 0, 0, 169, 0, 0, 170, 285, 356, 171,
	357, 647, 172, 173, 174, 175, 176, 0, 177, 648,
	178, 288, 179, 0, 180, 181, 182, 183, 184, 289,
	185, 186, 0, 187, 188, 189, 190, 191, 193, 194,
	192, 195, 196, 197, 198, 0, 199, 358, 200, 201,
	290, 202, 0, 206, 207, 208, 209, 0, 211, 291,
	210, 212, 213, 641, 214, 203, 204, 215, 359, 216,
	292, 293, 217, 0, 223, 218, 219, 205, 220, 222,
	294, 221, 649, 0, 224, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 296, 297, 298, 0, 0, 232,
	233, 650, 651, 0, 234, 235, 236, 237, 0, 0,
	238, 239, 240, 241, 642, 242, 0, 301, 243, 244,
	245, 302, 303, 0, 0, 246, 0, 535, 0, 0,
	247, 248, 249, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 252, 0, 0, 0, 1665, 103, 104, 105, 253,
	254, 255, 256, 106, 257, 258, 0, 107, 259, 260,
	108, 109, 0, 0, 261, 262, 263, 0, 110, 264,
	0, 346, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 347, 118, 119, 0, 0, 0, 0,
	0, 0, 120, 121, 309, 122, 265, 123, 266, 267,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 268, 130, 131, 132, 269,
	270, 0, 0, 0, 133, 134, 271, 0, 135, 0,
	136, 0, 0, 348, 0, 137, 272, 0, 273, 0,
	138, 139, 140, 141, 274, 275, 350, 0, 145, 0,
	142, 0, 349, 143, 276, 144, 277, 278, 279, 0,
	280, 0, 351, 146, 147, 352, 148, 149, 150, 0,
	152, 151, 0, 281, 353, 153, 354, 0, 154, 0,
	0, 155, 0, 156, 157, 158, 160, 282, 159, 355,
	161, 162, 164, 163, 0, 0, 0, 283, 165, 284,
	166, 167, 0, 168, 0, 0, 169, 0, 0, 170,
	285, 356, 171, 357, 286, 172, 173, 174, 175, 176,
	0, 177, 287, 178, 288, 179, 0, 180, 181, 182,
	183, 184, 289, 185, 186, 0, 187, 188, 189, 190,
	191, 193, 194, 192, 195, 196, 197, 198, 0, 199,
	358, 200, 201, 290, 202, 0, 206, 207, 208, 209,
	81, 211, 291, 210, 212, 213, 0, 214, 203, 204,
	215, 359, 216, 292, 293, 217, 0, 223, 218, 219,
	205, 220, 222, 294, 221, 295, 0, 224, 83, 225,
	226, 227, 228, 229, 230, 231, 0, 296, 297, 298,
	0, 0, 232, 233, 299, 300, 0, 234, 235, 236,
	237, 0, 0, 238, 239, 240, 241, 0, 242, 0,
	301, 243, 244, 245, 713, 303, 0, 0, 246, 0,
	0, 0, 79, 247, 248, 249, 250, 251, 0, 80,
	535, 532, 0, 533, 528, 523, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 101, 78, 102,
	0, 0, 0, 0, 252, 0, 0, 0, 0, 103,
	104, 105, 253, 254, 255, 256, 106, 257, 258, 0,
	107, 259, 260, 108, 109, 0, 0, 261, 262, 263,
	0, 110, 264, 0, 346, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 347, 118, 119, 0,
	0, 0, 0, 0, 0, 120, 121, 309, 122, 265,
	123, 266, 267, 1051, 124, 0, 125, 0, 126, 0,
	0, 127, 128, 0, 129, 0, 0, 0, 268, 130,
	131, 132, 269, 270, 525, 0, 0, 133, 134, 271,
	0, 135, 0, 136, 0, 0, 348, 0, 137, 272,
	0, 273, 0, 138, 139, 140, 141, 274, 275, 350,
	0, 145, 0, 142, 0, 349, 143, 276, 144, 277,
	278, 279, 0, 280, 0, 351, 146, 147, 352, 148,
	149, 150, 0, 152, 151, 0, 281, 353, 153, 354,
	0, 154, 0, 0, 155, 0, 156, 157, 158, 160,
	282, 159, 355, 161, 162, 164, 163, 0, 0, 0,
	283, 165, 284, 166, 167, 0, 168, 526, 0, 169,
	0, 0, 170, 285, 356, 171, 357, 286, 172, 173,
	174, 175, 176, 0, 177, 287, 178, 288, 179, 0,
	180, 181, 182, 183, 184, 289, 185, 186, 0, 187,
	188, 189, 190, 191, 193, 194, 192, 195, 196, 197,
	198, 0, 199, 358, 200, 201, 290, 202, 0, 206,
	207, 208, 209, 0, 211, 291, 210, 212, 213, 0,
	214, 203, 204, 215, 359, 216, 292, 293, 217, 0,
	223, 218, 219, 205, 220, 222, 294, 221, 295, 0,
	224, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	296, 297, 298, 0, 0, 232, 233, 299, 300, 524,
	234, 235, 236, 237, 0, 0, 238, 239, 240, 241,
	0, 242, 0, 301, 243, 244, 245, 302, 303, 0,
	0, 246, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 535, 532, 0, 533, 528, 523, 0, 0, 0,
	0, 0, 534, 529, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 252, 0, 0, 0, 0,
	103, 104, 105, 253, 254, 255, 256, 106, 257, 258,
	0, 107, 259, 260, 108, 109, 0, 0, 261, 262,
	263, 0, 110, 264, 0, 346, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 347, 118, 119,
	0, 0, 0, 0, 0, 0, 120, 121, 309, 122,
	265, 123, 266, 267, 1048, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 268,
	130, 131, 132, 269, 270, 525, 0, 0, 133, 134,
	271, 0, 135, 0, 136, 0, 0, 348, 0, 137,
	272, 0, 273, 0, 138, 139, 140, 141, 274, 275,
	350, 0, 145, 0, 142, 0, 349, 143, 276, 144,
	277, 278, 279, 0, 280, 0, 351, 146, 147, 352,
	148, 149, 150, 0, 152, 151, 0, 281, 353, 153,
	354, 0, 154, 0, 0, 155, 0, 156, 157, 158,
	160, 282, 159, 355, 161, 162, 164, 163, 0, 0,
	0, 283, 165, 284, 166, 167, 0, 168, 526, 0,
	169, 0, 0, 170, 285, 356, 171, 357, 286, 172,
	173, 174, 175, 176, 0, 177, 287, 178, 288, 179,
	0, 180, 181, 182, 183, 184, 289, 185, 186, 0,
	187, 188, 189, 190, 191, 193, 194, 192, 195, 196,
	197, 198, 0, 199, 358, 200, 201, 290, 202, 0,
	206, 207, 208, 209, 0, 211, 291, 210, 212, 213,
	0, 214, 203, 204, 215, 359, 216, 292, 293, 217,
	0, 223, 218, 219, 205, 220, 222, 294, 221, 295,
	0, 224, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 296, 297, 298, 0, 0, 232, 233, 299, 300,
	524, 234, 235, 236, 237, 0, 0, 238, 239, 240,
	241, 0, 242, 0, 301, 243, 244, 245, 302, 303,
	0, 0, 246, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 535, 532, 0, 533, 528, 523, 0, 0,
	0, 0, 0, 534, 529, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 252, 0, 0, 0,
	0, 103, 104, 105, 253, 254, 255, 256, 106, 257,
	258, 0, 107, 259, 260, 108, 109, 0, 0, 261,
	262, 263, 0, 110, 264, 0, 346, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 347, 118,
	119, 0, 0, 0, 0, 0, 0, 120, 121, 309,
	122, 265, 123, 266, 267, 747, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	268, 130, 131, 132, 269, 270, 525, 0, 0, 133,
	134, 271, 0, 135, 0, 136, 0, 0, 348, 0,
	137, 272, 0, 273, 0, 138, 139, 140, 141, 274,
	275, 350, 0, 145, 0, 142, 0, 349, 143, 276,
	144, 277, 278, 279, 0, 280, 0, 351, 146, 147,
	352, 148, 149, 150, 0, 152, 151, 0, 281, 353,
	153, 354, 0, 154, 0, 0, 155, 0, 156, 157,
	158, 160, 282, 159, 355, 161, 162, 164, 163, 0,
	0, 0, 283, 165, 284, 166, 167, 0, 168, 526,
	0, 169, 0, 0, 170, 285, 356, 171, 357, 286,
	172, 173, 174, 175, 176, 0, 177, 287, 178, 288,
	179, 0, 180, 181, 182, 183, 184, 289, 185, 186,
	0, 187, 188, 189, 190, 191, 193, 194, 192, 195,
	196, 197, 198, 0, 199, 358, 200, 201, 290, 202,
	0, 206, 207, 208, 209, 0, 211, 291, 210, 212,
	213, 0, 214, 203, 204, 215, 359, 216, 292, 293,
	217, 0, 223, 218, 219, 205, 220, 222, 294, 221,
	295, 0, 224, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 296, 297, 298, 0, 0, 232, 233, 299,
	300, 524, 234, 235, 236, 237, 0, 0, 238, 239,
	240, 241, 0, 242, 0, 301, 243, 244, 245, 302,
	303, 0, 0, 246, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 535, 532, 0, 533, 528, 523, 0,
	0, 0, 0, 0, 534, 529, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 252, 0, 0,
	0, 0, 103, 104, 105, 253, 254, 255, 256, 106,
	257, 258, 0, 107, 259, 260, 108, 109, 0, 0,
	261, 262, 263, 0, 110, 264, 0, 346, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 347,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	309, 122, 265, 123, 266, 267, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 268, 130, 131, 132, 269, 270, 525, 0, 0,
	133, 134, 271, 0, 135, 0, 136, 0, 0, 348,
	0, 137, 272, 0, 273, 0, 138, 139, 140, 141,
	274, 275, 350, 0, 145, 0, 142, 0, 349, 143,
	276, 144, 277, 278, 279, 0, 280, 0, 351, 146,
	147, 352, 148, 149, 150, 0, 152, 151, 0, 281,
	353, 153, 354, 0, 154, 0, 0, 155, 0, 156,
	157, 158, 160, 282, 159, 355, 161, 162, 164, 163,
	0, 0, 0, 283, 165, 284, 166, 167, 0, 168,
	526, 0, 169, 0, 0, 170, 285, 356, 171, 357,
	286, 172, 173, 174, 175, 176, 0, 177, 287, 178,
	288, 179, 0, 180, 181, 182, 183, 184, 289, 185,
	186, 0, 187, 188, 189, 190, 191, 193, 194, 192,
	195, 196, 197, 198, 0, 199, 358, 200, 201, 290,
	202, 0, 206, 207, 208, 209, 0, 211, 291, 210,
	212, 213, 0, 214, 203, 204, 215, 359, 216, 292,
	293, 217, 0, 223, 218, 219, 205, 220, 222, 294,
	221, 295, 0, 224, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 296, 297, 298, 0, 0, 232, 233,
	299, 300, 524, 234, 235, 236, 237, 0, 0, 238,
	239, 240, 241, 0, 242, 0, 301, 243, 244, 245,
	302, 303, 0, 97, 246, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 0, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 534, 529, 252, 0, 0,
	0, 0, 103, 104, 105, 253, 254, 255, 256, 106,
	257, 258, 0, 107, 259, 260, 108, 109, 0, 0,
	261, 262, 263, 0, 110, 264, 0, 0, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 0,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	309, 122, 265, 123, 266, 267, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 268, 130, 131, 132, 269, 270, 0, 0, 0,
	133, 134, 271, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 272, 0, 273, 0, 138, 139, 140, 141,
	274, 275, 0, 0, 145, 0, 142, 0, 0, 143,
	276, 144, 277, 278, 279, 0, 280, 0, 0, 146,
	147, 0, 148, 149, 150, 0, 152, 151, 0, 281,
	0, 153, 0, 0, 154, 0, 0, 155, 0, 156,
	157, 158, 160, 282, 159, 0, 161, 162, 164, 163,
	0, 0, 0, 283, 165, 284, 166, 167, 0, 168,
	0, 569, 169, 0, 0, 170, 285, 0, 171, 0,
	286, 172, 173, 174, 175, 176, 0, 177, 287, 178,
	288, 179, 0, 180, 181, 182, 183, 184, 289, 185,
	186, 0, 187, 188, 189, 190, 191, 193, 194, 192,
	195, 196, 197, 198, 0, 199, 0, 200, 201, 290,
	202, 0, 206, 207, 208, 209, 81, 211, 291, 210,
	212, 213, 0, 214, 203, 204, 215, 0, 216, 292,
	293, 217, 0, 223, 218, 219, 205, 220, 222, 294,
	221, 295, 0, 224, 83, 225, 226, 227, 228, 229,
	230, 231, 0, 296, 297, 298, 0, 0, 232, 233,
	299, 300, 0, 234, 235, 236, 237, 0, 0, 238,
	239, 240, 241, 0, 242, 0, 301, 243, 244, 245,
	713, 303, 0, 0, 246, 0, 97, 0, 79, 247,
	248, 249, 250, 251, 0, 80, 0, 0, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	252, 0, 1410, 0, 1415, 103, 104, 105, 253, 254,
	255, 256, 106, 257, 258, 0, 107, 259, 260, 108,
	109, 0, 0, 261, 262, 263, 0, 110, 264, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 309, 122, 265, 123, 266, 267, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 268, 130, 131, 132, 269, 270,
	0, 0, 0, 133, 134, 271, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 272, 0, 273, 0, 138,
	139, 140, 141, 274, 275, 0, 0, 145, 0, 142,
	0, 0, 143, 276, 144, 277, 278, 279, 0, 280,
	0, 0, 146, 147, 0, 148, 149, 150, 0, 152,
	151, 0, 281, 0, 153, 0, 0, 154, 0, 0,
	155, 0, 156, 157, 158, 160, 282, 159, 0, 161,
	162, 164, 163, 0, 0, 0, 283, 165, 284, 166,
	167, 0, 168, 0, 0, 169, 0, 0, 170, 285,
	0, 171, 0, 286, 172, 173, 174, 175, 176, 0,
	177, 287, 178, 288, 179, 0, 180, 181, 182, 183,
	184, 289, 185, 186, 0, 187, 188, 189, 190, 191,
	193, 194, 192, 195, 196, 197, 198, 0, 199, 0,
	200, 201, 290, 202, 0, 206, 207, 208, 209, 81,
	211, 291, 210, 212, 213, 0, 214, 203, 204, 215,
	0, 216, 292, 293, 217, 0, 223, 218, 219, 205,
	220, 222, 294, 221, 295, 0, 224, 83, 225, 226,
	227, 228, 229, 230, 231, 0, 296, 297, 298, 0,
	0, 232, 233, 299, 300, 0, 234, 235, 236, 237,
	0, 0, 238, 239, 240, 241, 0, 242, 0, 301,
	243, 244, 245, 713, 303, 0, 0, 246, 0, 97,
	0, 79, 247, 248, 249, 250, 251, 0, 80, 0,
	0, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 252, 0, 0, 0, 78, 103, 104,
	105, 253, 254, 255, 256, 106, 257, 258, 0, 107,
	259, 260, 108, 109, 0, 0, 261, 262, 263, 0,
	110, 264, 0, 0, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 0, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 309, 122, 265, 123,
	266, 267, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 268, 130, 131,
	132, 269, 270, 0, 0, 0, 133, 134, 271, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 272, 0,
	273, 0, 138, 139, 140, 141, 274, 275, 0, 0,
	145, 0, 142, 0, 0, 143, 276, 144, 277, 278,
	279, 0, 280, 0, 0, 146, 147, 0, 148, 149,
	150, 0, 152, 151, 0, 281, 0, 153, 0, 0,
	154, 0, 0, 155, 0, 156, 157, 158, 160, 282,
	159, 0, 161, 162, 164, 163, 0, 0, 0, 283,
	165, 284, 166, 167, 0, 168, 0, 569, 169, 0,
	0, 170, 285, 0, 171, 0, 286, 172, 173, 174,
	175, 176, 0, 177, 287, 178, 288, 179, 0, 180,
	181, 182, 183, 184, 289, 185, 186, 0, 187, 188,
	189, 190, 191, 193, 194, 192, 195, 196, 197, 198,
	0, 199, 0, 200, 201, 290, 202, 0, 206, 207,
	208, 209, 0, 211, 291, 210, 212, 213, 0, 214,
	203, 204, 215, 0, 216, 292, 293, 217, 0, 223,
	218, 219, 205, 220, 222, 294, 221, 295, 0, 224,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 296,
	297, 298, 0, 0, 232, 233, 299, 300, 0, 234,
	235, 236, 237, 0, 0, 238, 239, 240, 241, 0,
	242, 0, 301, 243, 244, 245, 302, 303, 0, 0,
	246, 0, 97, 0, 0, 247, 248, 249, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 252, 0, 1410, 0,
	1415, 103, 104, 105, 253, 254, 255, 256, 106, 257,
	258, 0, 107, 259, 260, 108, 109, 0, 0, 261,
	262, 263, 0, 110, 264, 0, 0, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 0, 118,
	119, 0, 0, 0, 0, 0, 0, 120, 121, 309,
	122, 265, 123, 266, 267, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	268, 130, 131, 132, 269, 270, 0, 0, 0, 133,
	134, 271, 0, 135, 0, 136, 0, 0, 0, 0,
	137, 272, 0, 273, 0, 138, 139, 140, 141, 274,
	275, 0, 0, 145, 0, 142, 0, 0, 143, 276,
	144, 277, 278, 279, 0, 280, 0, 0, 146, 147,
	0, 148, 149, 150, 0, 152, 151, 0, 281, 0,
	153, 0, 0, 154, 0, 0, 155, 0, 156, 157,
	158, 160, 282, 159, 0, 161, 162, 164, 163, 0,
	0, 0, 283, 165, 284, 166, 167, 0, 168, 0,
	0, 169, 0, 0, 170, 285, 0, 171, 0, 286,
	172, 173, 174, 175, 176, 0, 177, 287, 178, 288,
	179, 0, 180, 181, 182, 183, 184, 289, 185, 186,
	0, 187, 188, 189, 190, 191, 193, 194, 192, 195,
	196, 197, 198, 0, 199, 0, 200, 201, 290, 202,
	0, 206, 207, 208, 209, 0, 211, 291, 210, 212,
	213, 0, 214, 203, 204, 215, 0, 216, 292, 293,
	217, 0, 223, 218, 219, 205, 220, 222, 294, 221,
	295, 0, 224, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 296, 297, 298, 0, 0, 232, 233, 299,
	300, 0, 234, 235, 236, 237, 0, 0, 238, 239,
	240, 241, 0, 242, 0, 301, 243, 244, 245, 302,
	303, 0, 0, 246, 0, 0, 97, 0, 247, 248,
	249, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	252, 0, 0, 0, 955, 103, 104, 105, 253, 254,
	255, 256, 106, 257, 258, 0, 107, 259, 260, 108,
	109, 0, 0, 261, 262, 263, 0, 110, 264, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 309, 122, 265, 123, 266, 267, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 268, 130, 131, 132, 269, 270,
	0, 0, 0, 133, 134, 271, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 272, 0, 273, 0, 138,
	139, 140, 141, 274, 275, 0, 0, 145, 0, 142,
	0, 0, 143, 276, 144, 277, 278, 279, 0, 280,
	0, 0, 146, 147, 0, 148, 149, 150, 0, 152,
	151, 0, 281, 0, 153, 0, 0, 154, 0, 0,
	155, 0, 156, 157, 158, 160, 282, 159, 0, 161,
	162, 164, 163, 0, 0, 0, 283, 165, 284, 166,
	167, 0, 168, 0, 0, 169, 0, 0, 170, 285,
	0, 171, 0, 286, 172, 173, 174, 175, 176, 0,
	177, 287, 178, 288, 179, 0, 180, 181, 182, 183,
	184, 289, 185, 186, 0, 187, 188, 189, 190, 191,
	193, 194, 192, 195, 196, 197, 198, 0, 199, 0,
	200, 201, 290, 202, 0, 206, 207, 208, 209, 0,
	211, 291, 210, 212, 213, 0, 214, 203, 204, 215,
	0, 216, 292, 293, 217, 0, 223, 218, 219, 205,
	220, 222, 294, 221, 295, 0, 224, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 296, 297, 298, 0,
	0, 232, 233, 299, 300, 0, 234, 235, 236, 237,
	0, 0, 238, 239, 240, 241, 0, 242, 0, 301,
	243, 244, 245, 302, 303, 0, 0, 246, 0, 97,
	0, 0, 247, 248, 249, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 252, 0, 0, 0, 1331, 103, 104,
	105, 253, 254, 255, 256, 106, 257, 258, 0, 107,
	259, 260, 108, 109, 0, 0, 261, 262, 263, 0,
	110, 264, 0, 0, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 0, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 309, 122, 265, 123,
	266, 267, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 268, 130, 131,
	132, 269, 270, 0, 0, 0, 133, 134, 271, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 272, 0,
	273, 0, 138, 139, 140, 141, 274, 275, 0, 0,
	145, 0, 142, 0, 0, 143, 276, 144, 277, 278,
	279, 0, 280, 0, 0, 146, 147, 0, 148, 149,
	150, 0, 152, 151, 0, 281, 0, 153, 0, 0,
	154, 0, 0, 155, 0, 156, 157, 158, 160, 282,
	159, 0, 161, 162, 164, 163, 0, 0, 0, 283,
	165, 284, 166, 167, 0, 168, 0, 0, 169, 0,
	0, 170, 285, 0, 171, 0, 286, 172, 173, 174,
	175, 176, 0, 177, 287, 178, 288, 179, 0, 180,
	181, 182, 183, 184, 289, 185, 186, 0, 187, 188,
	189, 190, 191, 193, 194, 192, 195, 196, 197, 198,
	0, 199, 0, 200, 201, 290, 202, 0, 206, 207,
	208, 209, 0, 211, 291, 210, 212, 213, 0, 214,
	203, 204, 215, 0, 216, 292, 293, 217, 0, 223,
	218, 219, 205, 220, 222, 294, 221, 295, 0, 224,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 296,
	297, 298, 0, 0, 232, 233, 299, 300, 0, 234,
	235, 236, 237, 0, 0, 238, 239, 240, 241, 0,
	242, 0, 301, 243, 244, 245, 302, 303, 0, 0,
	246, 0, 97, 0, 0, 247, 248, 249, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 252, 0, 0, 0,
	1727, 103, 104, 105, 253, 254, 255, 256, 106, 257,
	258, 0, 107, 259, 260, 108, 109, 0, 0, 261,
	262, 263, 0, 110, 264, 0, 0, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 0, 118,
	119, 0, 0, 0, 0, 0, 0, 120, 121, 309,
	122, 265, 123, 266, 267, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	268, 130, 131, 132, 269, 270, 0, 0, 0, 133,
	134, 271, 0, 135, 0, 136, 0, 0, 0, 0,
	137, 272, 0, 273, 0, 138, 139, 140, 141, 274,
	275, 0, 0, 145, 0, 142, 0, 0, 143, 276,
	144, 277, 278, 279, 0, 280, 0, 0, 146, 147,
	0, 148, 149, 150, 0, 152, 151, 0, 281, 0,
	153, 0, 0, 154, 0, 0, 155, 0, 156, 157,
	158, 160, 282, 159, 0, 161, 162, 164, 163, 0,
	0, 0, 283, 165, 284, 166, 167, 0, 168, 0,
	0, 169, 0, 0, 170, 285, 0, 171, 0, 286,
	172, 173, 174, 175, 176, 0, 177, 287, 178, 288,
	179, 0, 180, 181, 182, 183, 184, 289, 185, 186,
	0, 187, 188, 189, 190, 191, 193, 194, 192, 195,
	196, 197, 198, 0, 199, 0, 200, 201, 290, 202,
	0, 206, 207, 208, 209, 0, 211, 291, 210, 212,
	213, 0, 214, 203, 204, 215, 0, 216, 292, 293,
	217, 0, 223, 218, 219, 205, 220, 222, 294, 221,
	295, 0, 224, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 296, 297, 298, 0, 0, 232, 233, 299,
	300, 0, 234, 235, 236, 237, 0, 0, 238, 239,
	240, 241, 0, 242, 0, 301, 243, 244, 245, 302,
	303, 0, 0, 246, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 628, 617, 618, 615, 616, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	101, 0, 102, 825, 0, 0, 0, 252, 0, 0,
	0, 0, 103, 104, 105, 253, 659, 255, 660, 106,
	661, 662, 0, 107, 259, 260, 108, 109, 0, 0,
	663, 664, 263, 0, 110, 264, 0, 346, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 347,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	309, 122, 665, 123, 666, 667, 0, 124, 0, 125,
	0, 126, 0, 0, 658, 128, 0, 129, 0, 0,
	0, 268, 130, 131, 132, 269, 270, 624, 0, 0,
	133, 134, 668, 0, 135, 0, 136, 0, 0, 348,
	0, 137, 272, 0, 273, 0, 138, 139, 140, 141,
	274, 275, 350, 0, 145, 0, 142, 0, 349, 143,
	669, 144, 670, 671, 672, 0, 635, 0, 351, 146,
	147, 352, 148, 149, 150, 0, 152, 151, 0, 281,
	353, 153, 354, 0, 154, 0, 0, 155, 0, 156,
	157, 158, 160, 282, 159, 355, 161, 162, 164, 163,
	0, 0, 625, 283, 165, 673, 166, 167, 0, 168,
	0, 0, 169, 0, 0, 170, 285, 356, 171, 357,
	286, 172, 173, 174, 175, 176, 0, 177, 287, 178,
	288, 179, 0, 180, 181, 182, 183, 184, 674, 185,
	186, 0, 187, 188, 189, 190, 191, 193, 194, 192,
	195, 196, 197, 198, 0, 199, 358, 200, 201, 290,
	202, 0, 206, 207, 208, 209, 0, 211, 291, 210,
	212, 213, 0, 214, 203, 204, 215, 359, 216, 675,
	293, 217, 0, 223, 218, 219, 205, 220, 222, 676,
	221, 295, 0, 224, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 296, 677, 678, 0, 0, 232, 233,
	299, 300, 623, 234, 235, 236, 237, 0, 0, 238,
	239, 240, 241, 0, 242, 0, 301, 243, 244, 245,
	302, 679, 535, 532, 246, 0, 0, 754, 0, 247,
	248, 249, 250, 251, 0, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 252, 0, 0, 0,
	0, 103, 104, 105, 253, 254, 255, 256, 106, 257,
	258, 0, 107, 259, 260, 108, 109, 0, 0, 261,
	262, 263, 0, 110, 264, 0, 346, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 347, 118,
	119, 0, 0, 0, 0, 0, 0, 120, 121, 309,
	122, 265, 123, 266, 267, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	268, 130, 131, 132, 269, 270, 0, 0, 0, 133,
	134, 271, 0, 135, 0, 136, 0, 0, 348, 0,
	137, 272, 0, 273, 0, 138, 139, 140, 141, 274,
	275, 350, 0, 145, 0, 142, 0, 349, 143, 276,
	144, 277, 278, 279, 0, 280, 0, 351, 146, 147,
	352, 148, 149, 150, 0, 152, 151, 0, 281, 353,
	153, 354, 0, 154, 0, 0, 155, 0, 156, 157,
	158, 160, 282, 159, 355, 161, 162, 164, 163, 0,
	0, 0, 283, 165, 284, 166, 167, 0, 168, 0,
	0, 169, 0, 0, 170, 285, 356, 171, 357, 286,
	172, 173, 174, 175, 176, 0, 177, 287, 178, 288,
	179, 0, 180, 181, 182, 183, 184, 289, 185, 186,
	0, 187, 188, 189, 190, 191, 193, 194, 192, 195,
	196, 197, 198, 0, 199, 358, 200, 201, 290, 202,
	0, 206, 207, 208, 209, 0, 211, 291, 210, 212,
	213, 0, 214, 203, 204, 215, 359, 216, 292, 293,
	217, 0, 223, 218, 219, 205, 220, 222, 294, 221,
	295, 0, 224, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 296, 297, 298, 0, 0, 232, 233, 299,
	300, 0, 234, 235, 236, 237, 0, 0, 238, 239,
	240, 241, 0, 242, 0, 301, 243, 244, 245, 302,
	303, 97, 0, 246, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 252, 0, 0, 0, 0,
	103, 104, 105, 253, 254, 255, 256, 106, 257, 258,
	0, 107, 259, 260, 108, 109, 0, 0, 261, 262,
	263, 0, 110, 264, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 120, 121, 93, 122,
	265, 123, 266, 267, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 268,
	130, 131, 132, 269, 270, 0, 0, 0, 133, 134,
	271, 0, 135, 0, 136, 0, 0, 0, 0, 137,
	272, 0, 273, 0, 138, 139, 140, 141, 274, 275,
	0, 0, 145, 0, 142, 0, 0, 143, 276, 144,
	277, 278, 279, 0, 280, 0, 0, 146, 147, 0,
	148, 149, 150, 0, 152, 151, 0, 281, 0, 153,
	0, 0, 154, 0, 0, 155, 0, 156, 157, 158,
	160, 282, 159, 0, 161, 162, 164, 163, 0, 0,
	0, 283, 165, 284, 166, 167, 0, 168, 0, 0,
	169, 0, 0, 170, 285, 0, 171, 0, 286, 172,
	173, 174, 175, 176, 0, 177, 287, 178, 288, 179,
	0, 180, 181, 182, 183, 184, 289, 185, 186, 0,
	187, 188, 189, 190, 191, 193, 194, 192, 195, 196,
	197, 198, 0, 199, 0, 200, 201, 290, 202, 0,
	206, 207, 208, 209, 0, 211, 291, 210, 212, 213,
	0, 214, 203, 204, 215, 0, 216, 292, 293, 217,
	0, 223, 218, 219, 205, 220, 222, 294, 221, 295,
	0, 224, 92, 225, 226, 227, 228, 229, 230, 231,
	0, 296, 297, 298, 0, 0, 232, 233, 299, 300,
	0, 234, 235, 236, 237, 0, 0, 238, 239, 240,
	241, 0, 242, 0, 301, 243, 244, 245, 302, 303,
	535, 532, 246, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 252, 96, 0, 0, 0, 103,
	104, 105, 253, 254, 255, 256, 106, 257, 258, 0,
	107, 259, 260, 108, 109, 0, 0, 261, 262, 263,
	0, 110, 264, 0, 346, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 347, 118, 119, 0,
	0, 0, 0, 0, 0, 120, 121, 309, 122, 265,
	123, 266, 267, 0, 124, 0, 125, 0, 126, 0,
	0, 127, 128, 0, 129, 0, 0, 0, 268, 130,
	131, 132, 269, 270, 0, 0, 0, 133, 134, 271,
	0, 135, 0, 136, 0, 0, 348, 0, 137, 272,
	0, 273, 0, 138, 139, 140, 141, 274, 275, 350,
	0, 145, 0, 142, 0, 349, 143, 276, 144, 277,
	278, 279, 0, 280, 0, 351, 146, 147, 352, 148,
	149, 150, 0, 152, 151, 0, 281, 353, 153, 354,
	0, 154, 0, 0, 155, 0, 156, 157, 158, 160,
	282, 159, 355, 161, 162, 164, 163, 0, 0, 0,
	283, 165, 284, 166, 167, 0, 168, 0, 0, 169,
	0, 0, 170, 285, 356, 171, 357, 286, 172, 173,
	174, 175, 176, 0, 177, 287, 178, 288, 179, 0,
	180, 181, 182, 183, 184, 289, 185, 186, 0, 187,
	188, 189, 190, 191, 193, 194, 192, 195, 196, 197,
	198, 0, 199, 358, 200, 201, 290, 202, 0, 206,
	207, 208, 209, 0, 211, 291, 210, 212, 213, 0,
	214, 203, 204, 215, 359, 216, 292, 293, 217, 0,
	223, 218, 219, 205, 220, 222, 294, 221, 295, 0,
	224, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	296, 297, 298, 0, 0, 232, 233, 299, 300, 0,
	234, 235, 236, 237, 0, 0, 238, 239, 240, 241,
	0, 242, 0, 301, 243, 244, 245, 302, 303, 97,
	0, 246, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 252, 0, 0, 0, 0, 103, 104,
	105, 253, 254, 255, 256, 106, 257, 258, 0, 107,
	259, 260, 108, 109, 0, 0, 261, 262, 263, 0,
	110, 264, 0, 0, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 0, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 309, 122, 265, 123,
	266, 267, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 268, 130, 131,
	132, 269, 270, 0, 0, 0, 133, 134, 271, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 272, 0,
	273, 0, 138, 139, 140, 141, 274, 275, 0, 0,
	145, 0, 142, 0, 0, 143, 276, 144, 277, 278,
	279, 0, 280, 0, 0, 146, 147, 0, 148, 149,
	150, 0, 152, 151, 0, 281, 0, 153, 0, 0,
	154, 0, 0, 155, 0, 156, 157, 158, 160, 282,
	159, 0, 161, 162, 164, 163, 0, 0, 0, 283,
	165, 284, 166, 167, 0, 168, 0, 0, 169, 0,
	0, 170, 285, 0, 171, 0, 286, 172, 173, 174,
	175, 176, 0, 177, 287, 178, 288, 179, 0, 180,
	181, 182, 183, 184, 289, 185, 186, 0, 187, 188,
	189, 190, 191, 193, 194, 192, 195, 196, 197, 198,
	0, 199, 0, 200, 201, 290, 202, 0, 206, 207,
	208, 209, 0, 211, 291, 210, 212, 213, 0, 214,
	203, 204, 215, 0, 216, 292, 293, 217, 0, 223,
	218, 219, 205, 220, 222, 294, 221, 295, 0, 224,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 296,
	297, 298, 0, 0, 232, 233, 299, 300, 0, 234,
	235, 236, 237, 0, 0, 238, 239, 240, 241, 0,
	242, 0, 301, 243, 244, 245, 302, 303, 535, 0,
	246, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	0, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 252, 96, 0, 0, 0, 103, 104, 105,
	253, 254, 255, 256, 106, 257, 258, 0, 107, 259,
	260, 108, 109, 0, 0, 261, 262, 263, 0, 110,
	264, 0, 346, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 347, 118, 119, 0, 0, 0,
	0, 0, 0, 120, 121, 309, 122, 265, 123, 266,
	267, 0, 124, 0, 125, 0, 126, 0, 0, 127,
	128, 0, 129, 0, 0, 0, 268, 130, 131, 132,
	269, 270, 0, 0, 0, 133, 134, 271, 0, 135,
	0, 136, 0, 0, 348, 0, 137, 272, 0, 273,
	0, 138, 139, 140, 141, 274, 275, 350, 0, 145,
	0, 142, 0, 349, 143, 276, 144, 277, 278, 279,
	0, 280, 0, 351, 146, 147, 352, 148, 149, 150,
	0, 152, 151, 0, 281, 353, 153, 354, 0, 154,
	0, 0, 155, 0, 156, 157, 158, 160, 282, 159,
	355, 161, 162, 164, 163, 0, 0, 0, 283, 165,
	284, 166, 167, 0, 168, 0, 0, 169, 0, 0,
	170, 285, 356, 171, 357, 286, 172, 173, 174, 175,
	176, 0, 177, 287, 178, 288, 179, 0, 180, 181,
	182, 183, 184, 289, 185, 186, 0, 187, 188, 189,
	190, 191, 193, 194, 192, 195, 196, 197, 198, 0,
	199, 358, 200, 201, 290, 202, 0, 206, 207, 208,
	209, 0, 211, 291, 210, 212, 213, 0, 214, 203,
	204, 215, 359, 216, 292, 293, 217, 0, 223, 218,
	219, 205, 220, 222, 294, 221, 295, 0, 224, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 296, 297,
	298, 0, 0, 232, 233, 299, 300, 0, 234, 235,
	236, 237, 0, 0, 238, 239, 240, 241, 0, 242,
	0, 301, 243, 244, 245, 302, 303, 97, 0, 246,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 252, 0, 0, 0, 0, 103, 104, 105, 253,
	254, 255, 256, 106, 257, 258, 0, 107, 259, 260,
	108, 109, 0, 0, 261, 262, 263, 1141, 110, 264,
	0, 0, 0, 111, 112, 113, 0, 114, 1139, 115,
	116, 117, 0, 0, 118, 119, 0, 0, 0, 0,
	0, 0, 120, 121, 309, 122, 265, 123, 266, 267,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 268, 130, 131, 132, 269,
	270, 0, 1382, 0, 133, 134, 271, 0, 135, 0,
	136, 1144, 0, 0, 0, 137, 272, 0, 273, 0,
	138, 139, 140, 141, 274, 275, 0, 0, 145, 1380,
	142, 0, 0, 143, 276, 144, 277, 278, 279, 0,
	280, 0, 0, 146, 147, 0, 148, 149, 150, 0,
	152, 151, 0, 281, 0, 153, 0, 0, 154, 0,
	0, 155, 0, 156, 157, 158, 160, 282, 159, 0,
	161, 162, 164, 163, 0, 0, 0, 283, 165, 284,
	166, 167, 0, 168, 0, 0, 169, 0, 0, 170,
	285, 0, 171, 0, 286, 172, 173, 174, 175, 176,
	0, 177, 287, 178, 288, 179, 1143, 180, 181, 182,
	183, 184, 289, 185, 186, 0, 187, 188, 189, 190,
	191, 193, 194, 192, 195, 196, 197, 198, 0, 199,
	0, 200, 201, 290, 202, 0, 206, 207, 208, 209,
	0, 211, 291, 210, 212, 213, 0, 214, 203, 204,
	215, 0, 216, 292, 293, 217, 0, 223, 218, 219,
	205, 220, 222, 294, 221, 295, 0, 224, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 296, 297, 298,
	0, 0, 232, 233, 299, 300, 0, 234, 235, 236,
	237, 0, 1381, 238, 239, 240, 241, 0, 242, 0,
	301, 243, 244, 245, 302, 303, 97, 0, 246, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	252, 0, 0, 0, 0, 103, 104, 105, 253, 254,
	255, 256, 106, 257, 258, 0, 107, 259, 260, 108,
	109, 0, 0, 261, 262, 263, 1141, 110, 264, 0,
	0, 1136, 111, 112, 113, 0, 114, 1139, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 309, 122, 265, 123, 266, 267, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 268, 130, 131, 132, 269, 270,
	0, 0, 0, 133, 134, 271, 0, 135, 0, 136,
	1144, 0, 0, 0, 137, 272, 0, 273, 0, 138,
	139, 140, 141, 1135, 275, 0, 0, 145, 0, 142,
	0, 0, 143, 276, 144, 277, 278, 279, 0, 280,
	0, 0, 146, 147, 0, 148, 149, 150, 0, 152,
	151, 0, 281, 0, 153, 0, 0, 154, 0, 0,
	155, 0, 156, 157, 158, 160, 282, 159, 0, 161,
	162, 164, 163, 0, 0, 0, 283, 165, 284, 166,
	167, 0, 168, 0, 0, 169, 0, 0, 170, 285,
	0, 171, 0, 286, 172, 173, 174, 175, 176, 0,
	177, 287, 178, 288, 179, 1143, 180, 181, 182, 183,
	184, 289, 185, 186, 0, 187, 188, 189, 190, 191,
	193, 194, 192, 195, 196, 197, 198, 0, 199, 0,
	200, 201, 290, 202, 0, 206, 207, 208, 209, 0,
	211, 291, 210, 212, 213, 0, 214, 203, 204, 215,
	0, 216, 292, 293, 217, 0, 223, 218, 219, 205,
	220, 222, 294, 221, 295, 0, 224, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 296, 297, 298, 0,
	0, 232, 233, 299, 300, 0, 234, 235, 236, 237,
	0, 1142, 238, 239, 240, 241, 0, 242, 0, 301,
	243, 244, 245, 302, 303, 97, 0, 246, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 252,
	0, 1835, 0, 0, 103, 104, 105, 253, 254, 255,
	256, 106, 257, 258, 0, 107, 259, 260, 108, 109,
	0, 0, 261, 262, 263, 0, 110, 264, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	120, 121, 309, 122, 265, 123, 266, 267, 0, 124,
	0, 125, 0, 126, 0, 0, 127, 128, 0, 129,
	0, 0, 0, 268, 130, 131, 132, 269, 270, 0,
	0, 0, 133, 134, 271, 0, 135, 0, 136, 0,
	0, 0, 0, 137, 272, 0, 273, 0, 138, 139,
	140, 141, 274, 275, 0, 0, 145, 0, 142, 0,
	0, 143, 276, 144, 277, 278, 279, 0, 280, 0,
	0, 146, 147, 0, 148, 149, 150, 0, 152, 151,
	0, 281, 0, 153, 0, 0, 154, 0, 0, 155,
	0, 156, 157, 158, 160, 282, 159, 0, 161, 162,
	164, 163, 0, 0, 0, 283, 165, 284, 166, 167,
	0, 168, 0, 0, 169, 0, 0, 170, 285, 0,
	171, 0, 286, 172, 173, 174, 175, 176, 0, 177,
	287, 178, 288, 179, 0, 180, 181, 182, 183, 184,
	289, 185, 186, 0, 187, 188, 189, 190, 191, 193,
	194, 192, 195, 196, 197, 198, 0, 199, 0, 200,
	201, 290, 202, 0, 206, 207, 208, 209, 0, 211,
	291, 210, 212, 213, 0, 214, 203, 204, 215, 0,
	216, 292, 293, 217, 0, 223, 218, 219, 205, 220,
	222, 294, 221, 295, 0, 224, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 296, 297, 298, 0, 0,
	232, 233, 299, 300, 0, 234, 235, 236, 237, 0,
	0, 238, 239, 240, 241, 0, 242, 0, 301, 243,
	244, 245, 302, 303, 97, 0, 246, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 0, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 0, 252, 0,
	0, 0, 0, 103, 104, 105, 253, 254, 255, 256,
	106, 257, 258, 0, 107, 259, 260, 108, 109, 0,
	0, 261, 262, 263, 0, 110, 264, 0, 0, 0,
	111, 112, 113, 0, 114, 0, 115, 116, 117, 0,
	0, 118, 119, 0, 0, 0, 0, 0, 0, 120,
	121, 309, 122, 265, 123, 266, 267, 0, 124, 0,
	125, 0, 126, 0, 0, 127, 128, 0, 129, 0,
	0, 0, 268, 130, 131, 132, 269, 270, 0, 0,
	0, 133, 134, 271, 0, 135, 0, 136, 0, 0,
	0, 0, 137, 272, 0, 273, 0, 138, 139, 140,
	141, 274, 275, 0, 0, 145, 0, 142, 0, 0,
	143, 276, 144, 277, 278, 279, 0, 280, 0, 0,
	146, 147, 0, 148, 149, 150, 0, 152, 151, 0,
	281, 0, 153, 0, 0, 154, 0, 0, 155, 0,
	156, 157, 158, 160, 282, 159, 0, 161, 162, 164,
	163, 0, 0, 0, 283, 165, 284, 166, 167, 0,
	168, 0, 569, 169, 0, 0, 170, 285, 0, 171,
	0, 286, 172, 173, 174, 175, 176, 0, 177, 287,
	178, 288, 179, 0, 180, 181, 182, 183, 184, 289,
	185, 186, 0, 187, 188, 189, 190, 191, 193, 194,
	192, 195, 196, 197, 198, 0, 199, 0, 200, 201,
	290, 202, 0, 206, 207, 208, 209, 0, 211, 291,
	210, 212, 213, 0, 214, 203, 204, 215, 0, 216,
	292, 293, 217, 0, 223, 218, 219, 205, 220, 222,
	294, 221, 295, 0, 224, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 296, 297, 298, 0, 0, 232,
	233, 299, 300, 0, 234, 235, 236, 237, 0, 0,
	238, 239, 240, 241, 0, 242, 0, 301, 243, 244,
	245, 302, 303, 97, 0, 246, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 0, 0, 0, 0, 100,
	101, 1066, 102, 0, 0, 0, 0, 252, 0, 0,
	0, 0, 103, 104, 105, 253, 254, 255, 256, 106,
	257, 258, 0, 107, 259, 260, 108, 109, 0, 0,
	261, 262, 263, 0, 110, 264, 0, 0, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 0,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	309, 122, 265, 123, 266, 267, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 268, 130, 131, 132, 269, 270, 0, 0, 0,
	133, 134, 271, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 272, 0, 273, 0, 138, 139, 140, 141,
	274, 275, 0, 0, 145, 0, 142, 0, 0, 143,
	276, 144, 277, 278, 279, 0, 280, 0, 0, 146,
	147, 0, 148, 149, 150, 0, 152, 151, 0, 281,
	0, 153, 0, 0, 154, 0, 0, 155, 0, 156,
	157, 158, 160, 282, 159, 0, 161, 162, 164, 163,
	0, 0, 0, 283, 165, 284, 166, 167, 0, 168,
	0, 0, 169, 0, 0, 170, 285, 0, 171, 0,
	286, 172, 173, 174, 175, 176, 0, 177, 287, 178,
	288, 179, 0, 180, 181, 182, 183, 184, 289, 185,
	186, 0, 187, 188, 189, 190, 191, 193, 194, 192,
	195, 196, 197, 198, 0, 199, 0, 200, 201, 290,
	202, 0, 206, 207, 208, 209, 0, 211, 291, 210,
	212, 213, 0, 214, 203, 204, 215, 0, 216, 292,
	293, 217, 0, 223, 218, 219, 205, 220, 222, 294,
	221, 295, 0, 224, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 296, 297, 298, 0, 0, 232, 233,
	299, 300, 0, 234, 235, 236, 237, 0, 0, 238,
	239, 240, 241, 0, 242, 0, 301, 243, 244, 245,
	302, 303, 97, 0, 246, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 0, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 252, 0, 0, 0,
	0, 103, 104, 105, 253, 254, 255, 256, 106, 257,
	258, 0, 107, 259, 260, 108, 109, 0, 0, 261,
	262, 263, 0, 110, 264, 0, 0, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 0, 118,
	119, 0, 0, 0, 0, 0, 0, 120, 121, 309,
	122, 265, 123, 266, 267, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	268, 130, 131, 132, 269, 270, 0, 0, 0, 133,
	134, 271, 0, 135, 0, 136, 0, 0, 0, 0,
	137, 272, 0, 273, 0, 138, 139, 140, 141, 981,
	275, 0, 0, 145, 0, 142, 0, 0, 143, 276,
	144, 277, 278, 279, 0, 280, 0, 0, 146, 147,
	0, 148, 149, 150, 0, 152, 151, 0, 281, 0,
	153, 0, 0, 154, 0, 0, 155, 0, 156, 157,
	158, 160, 282, 159, 0, 161, 162, 164, 163, 0,
	0, 0, 283, 165, 284, 166, 167, 0, 168, 0,
	569, 169, 0, 0, 170, 285, 0, 171, 0, 286,
	172, 173, 174, 175, 176, 0, 177, 287, 178, 288,
	179, 0, 180, 181, 182, 183, 184, 289, 185, 186,
	0, 187, 188, 189, 190, 191, 193, 194, 192, 195,
	196, 197, 198, 0, 199, 0, 200, 201, 290, 202,
	0, 206, 207, 208, 209, 0, 211, 291, 210, 212,
	213, 0, 214, 203, 204, 215, 0, 216, 292, 293,
	217, 0, 223, 218, 219, 205, 220, 222, 294, 221,
	295, 0, 224, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 296, 297, 298, 0, 0, 232, 233, 299,
	300, 0, 234, 235, 236, 237, 0, 0, 238, 239,
	240, 241, 0, 242, 0, 301, 243, 244, 245, 302,
	303, 97, 0, 246, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 0, 0, 0, 0, 100, 101, 721,
	102, 0, 0, 0, 0, 252, 0, 0, 0, 0,
	103, 104, 105, 253, 254, 255, 256, 106, 257, 258,
	0, 107, 259, 260, 108, 109, 0, 0, 261, 262,
	263, 0, 110, 264, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 120, 121, 309, 122,
	265, 123, 266, 267, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 268,
	130, 131, 132, 269, 270, 0, 0, 0, 133, 134,
	271, 0, 135, 0, 136, 0, 0, 0, 0, 137,
	272, 0, 273, 0, 138, 139, 140, 141, 274, 275,
	0, 0, 145, 0, 142, 0, 0, 143, 276, 144,
	277, 278, 279, 0, 280, 0, 0, 146, 147, 0,
	148, 149, 150, 0, 152, 151, 0, 281, 0, 153,
	0, 0, 154, 0, 0, 155, 0, 156, 157, 158,
	160, 282, 159, 0, 161, 162, 164, 163, 0, 0,
	0, 283, 165, 284, 166, 167, 0, 168, 0, 0,
	169, 0, 0, 170, 285, 0, 171, 0, 286, 172,
	173, 174, 175, 176, 0, 177, 287, 178, 288, 179,
	0, 180, 181, 182, 183, 184, 289, 185, 186, 0,
	187, 188, 189, 190, 191, 193, 194, 192, 195, 196,
	197, 198, 0, 199, 0, 200, 201, 290, 202, 0,
	206, 207, 208, 209, 0, 211, 291, 210, 212, 213,
	0, 214, 203, 204, 215, 0, 216, 292, 293, 217,
	0, 223, 218, 219, 205, 220, 222, 294, 221, 295,
	0, 224, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 296, 297, 298, 0, 0, 232, 233, 299, 300,
	0, 234, 235, 236, 237, 0, 0, 238, 239, 240,
	241, 0, 242, 0, 301, 243, 244, 245, 302, 303,
	97, 0, 246, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 252, 0, 0, 0, 0, 103,
	104, 105, 253, 254, 255, 256, 106, 257, 258, 0,
	107, 259, 260, 108, 109, 0, 0, 261, 262, 263,
	0, 110, 264, 0, 0, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 0, 118, 119, 0,
	0, 0, 0, 0, 0, 120, 121, 309, 122, 265,
	123, 266, 267, 0, 124, 0, 125, 0, 126, 0,
	0, 127, 128, 0, 129, 0, 0, 0, 268, 130,
	131, 132, 269, 270, 0, 0, 0, 133, 134, 271,
	0, 135, 0, 136, 0, 0, 0, 0, 137, 272,
	0, 273, 0, 138, 139, 140, 141, 581, 275, 0,
	0, 145, 0, 142, 0, 0, 143, 276, 144, 277,
	278, 279, 0, 280, 0, 0, 146, 147, 0, 148,
	149, 150, 0, 152, 151, 0, 281, 0, 153, 0,
	0, 154, 0, 0, 155, 0, 156, 157, 158, 160,
	282, 159, 0, 161, 162, 164, 163, 0, 0, 0,
	283, 165, 284, 166, 167, 0, 168, 0, 569, 169,
	0, 0, 170, 285, 0, 171, 0, 286, 172, 173,
	174, 175, 176, 0, 177, 287, 178, 288, 179, 0,
	180, 181, 182, 183, 184, 289, 185, 186, 0, 187,
	188, 189, 190, 191, 193, 194, 192, 195, 196, 197,
	198, 0, 199, 0, 200, 201, 290, 202, 0, 206,
	207, 208, 209, 0, 211, 291, 210, 212, 213, 0,
	214, 203, 204, 215, 0, 216, 292, 293, 217, 0,
	223, 218, 219, 205, 220, 222, 294, 221, 295, 0,
	224, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	296, 297, 298, 0, 0, 232, 233, 299, 300, 0,
	234, 235, 236, 237, 0, 0, 238, 239, 240, 241,
	0, 242, 0, 301, 243, 244, 245, 302, 303, 97,
	0, 246, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 252, 0, 0, 0, 0, 103, 104,
	105, 253, 254, 255, 256, 106, 257, 258, 0, 107,
	259, 260, 108, 109, 0, 0, 261, 262, 263, 0,
	110, 264, 0, 0, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 0, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 309, 122, 265, 123,
	266, 267, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 268, 130, 131,
	132, 269, 270, 0, 0, 0, 133, 134, 271, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 272, 0,
	273, 0, 138, 139, 140, 141, 574, 275, 0, 0,
	145, 0, 142, 0, 0, 143, 276, 144, 277, 278,
	279, 0, 280, 0, 0, 146, 147, 0, 148, 149,
	150, 0, 152, 151, 0, 281, 0, 153, 0, 0,
	154, 0, 0, 155, 0, 156, 157, 158, 160, 282,
	159, 0, 161, 162, 164, 163, 0, 0, 0, 283,
	165, 284, 166, 167, 0, 168, 0, 569, 169, 0,
	0, 170, 285, 0, 171, 0, 286, 172, 173, 174,
	175, 176, 0, 177, 287, 178, 288, 179, 0, 180,
	181, 182, 183, 184, 289, 185, 186, 0, 187, 188,
	189, 190, 191, 193, 194, 192, 195, 196, 197, 198,
	0, 199, 0, 200, 201, 290, 202, 0, 206, 207,
	208, 209, 0, 211, 291, 210, 212, 213, 0, 214,
	203, 204, 215, 0, 216, 292, 293, 217, 0, 223,
	218, 219, 205, 220, 222, 294, 221, 295, 0, 224,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 296,
	297, 298, 0, 0, 232, 233, 299, 300, 0, 234,
	235, 236, 237, 0, 0, 238, 239, 240, 241, 0,
	242, 0, 301, 243, 244, 245, 302, 303, 97, 0,
	246, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	0, 0, 0, 0, 100, 101, 445, 102, 0, 0,
	0, 0, 252, 0, 0, 0, 0, 103, 104, 105,
	253, 254, 255, 256, 106, 257, 258, 0, 107, 259,
	260, 108, 109, 0, 0, 261, 262, 263, 0, 110,
	264, 0, 0, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 0, 118, 119, 0, 0, 0,
	0, 0, 0, 120, 121, 309, 122, 265, 123, 266,
	267, 0, 124, 0, 125, 0, 126, 0, 0, 127,
	128, 0, 129, 0, 0, 0, 268, 130, 131, 132,
	269, 270, 0, 0, 0, 133, 134, 271, 0, 135,
	0, 136, 0, 0, 0, 0, 137, 272, 0, 273,
	0, 138, 139, 140, 141, 274, 275, 0, 0, 145,
	0, 142, 0, 0, 143, 276, 144, 277, 278, 279,
	0, 280, 0, 0, 146, 147, 0, 148, 149, 150,
	0, 152, 151, 0, 281, 0, 153, 0, 0, 154,
	0, 0, 155, 0, 156, 157, 158, 160, 282, 159,
	0, 161, 162, 164, 163, 0, 0, 0, 283, 165,
	284, 166, 167, 0, 168, 0, 0, 169, 0, 0,
	170, 285, 0, 171, 0, 286, 172, 173, 174, 175,
	176, 0, 177, 287, 178, 288, 444, 0, 180, 181,
	182, 183, 184, 289, 185, 186, 0, 187, 188, 189,
	190, 191, 193, 194, 192, 195, 196, 197, 198, 0,
	199, 0, 200, 201, 290, 202, 0, 206, 207, 208,
	209, 0, 211, 291, 210, 212, 213, 0, 214, 203,
	204, 215, 0, 216, 292, 293, 217, 0, 223, 218,
	219, 205, 220, 222, 294, 221, 295, 0, 224, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 296, 297,
	298, 0, 0, 232, 233, 299, 300, 0, 234, 235,
	236, 237, 0, 0, 238, 239, 240, 241, 0, 242,
	0, 301, 243, 244, 245, 302, 303, 97, 0, 246,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 252, 0, 0, 0, 0, 103, 104, 105, 253,
	254, 255, 256, 106, 257, 258, 0, 107, 259, 260,
	108, 109, 0, 0, 261, 262, 263, 0, 110, 264,
	0, 0, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 0, 118, 119, 0, 0, 0, 0,
	0, 0, 120, 121, 309, 122, 265, 123, 266, 267,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 268, 130, 131, 132, 269,
	270, 0, 0, 0, 133, 134, 271, 0, 135, 0,
	136, 0, 0, 0, 0, 137, 272, 0, 273, 0,
	138, 139, 140, 141, 274, 275, 0, 0, 145, 0,
	142, 0, 0, 143, 276, 144, 277, 278, 279, 0,
	280, 0, 0, 146, 147, 0, 148, 149, 150, 0,
	152, 151, 0, 281, 0, 153, 0, 0, 154, 0,
	0, 155, 0, 156, 157, 158, 160, 282, 159, 0,
	161, 162, 164, 163, 0, 0, 0, 283, 165, 284,
	166, 167, 0, 168, 0, 0, 169, 0, 0, 170,
	285, 0, 171, 0, 286, 172, 173, 174, 175, 176,
	0, 177, 287, 178, 288, 179, 0, 180, 181, 182,
	183, 184, 289, 185, 186, 0, 187, 188, 189, 190,
	191, 193, 194, 192, 195, 196, 197, 198, 0, 199,
	0, 200, 201, 290, 202, 0, 206, 207, 208, 209,
	0, 211, 291, 210, 212, 213, 0, 214, 203, 204,
	215, 0, 216, 292, 293, 217, 0, 223, 218, 219,
	205, 220, 222, 294, 221, 295, 0, 224, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 296, 297, 298,
	0, 0, 232, 233, 299, 300, 0, 234, 235, 236,
	237, 0, 0, 238, 239, 240, 241, 0, 242, 0,
	301, 243, 244, 245, 302, 303, 97, 0, 246, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	252, 0, 0, 0, 0, 103, 104, 105, 253, 254,
	255, 256, 106, 257, 258, 0, 107, 259, 260, 108,
	109, 0, 0, 261, 262, 263, 0, 110, 264, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 309, 122, 265, 123, 266, 267, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 268, 130, 131, 132, 269, 270,
	0, 0, 0, 133, 134, 271, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 272, 0, 273, 0, 138,
	139, 140, 141, 1439, 275, 0, 0, 145, 0, 142,
	0, 0, 143, 276, 144, 277, 278, 279, 0, 280,
	0, 0, 146, 147, 0, 148, 149, 150, 0, 152,
	151, 0, 281, 0, 153, 0, 0, 154, 0, 0,
	155, 0, 156, 157, 158, 160, 282, 159, 0, 161,
	162, 164, 163, 0, 0, 0, 283, 165, 284, 166,
	167, 0, 168, 0, 0, 169, 0, 0, 170, 285,
	0, 171, 0, 286, 172, 173, 174, 175, 176, 0,
	177, 287, 178, 288, 179, 0, 180, 181, 182, 183,
	184, 289, 185, 186, 0, 187, 188, 189, 190, 191,
	193, 194, 192, 195, 196, 197, 198, 0, 199, 0,
	200, 201, 290, 202, 0, 206, 207, 208, 209, 0,
	211, 291, 210, 212, 213, 0, 214, 203, 204, 215,
	0, 216, 292, 293, 217, 0, 223, 218, 219, 205,
	220, 222, 294, 221, 295, 0, 224, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 296, 297, 298, 0,
	0, 232, 233, 299, 300, 0, 234, 235, 236, 237,
	0, 0, 238, 239, 240, 241, 0, 242, 0, 301,
	243, 244, 245, 302, 303, 97, 0, 246, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 252,
	0, 0, 0, 0, 103, 104, 105, 253, 254, 255,
	256, 106, 257, 258, 0, 107, 259, 260, 108, 109,
	0, 0, 261, 262, 263, 0, 110, 264, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	120, 121, 309, 122, 265, 123, 266, 267, 0, 124,
	0, 125, 0, 126, 0, 0, 127, 128, 0, 129,
	0, 0, 0, 268, 130, 131, 132, 269, 270, 0,
	0, 0, 133, 134, 271, 0, 135, 0, 136, 0,
	0, 0, 0, 137, 272, 0, 273, 0, 138, 139,
	140, 141, 1437, 275, 0, 0, 145, 0, 142, 0,
	0, 143, 276, 144, 277, 278, 279, 0, 280, 0,
	0, 146, 147, 0, 148, 149, 150, 0, 152, 151,
	0, 281, 0, 153, 0, 0, 154, 0, 0, 155,
	0, 156, 157, 158, 160, 282, 159, 0, 161, 162,
	164, 163, 0, 0, 0, 283, 165, 284, 166, 167,
	0, 168, 0, 0, 169, 0, 0, 170, 285, 0,
	171, 0, 286, 172, 173, 174, 175, 176, 0, 177,
	287, 178, 288, 179, 0, 180, 181, 182, 183, 184,
	289, 185, 186, 0, 187, 188, 189, 190, 191, 193,
	194, 192, 195, 196, 197, 198, 0, 199, 0, 200,
	201, 290, 202, 0, 206, 207, 208, 209, 0, 211,
	291, 210, 212, 213, 0, 214, 203, 204, 215, 0,
	216, 292, 293, 217, 0, 223, 218, 219, 205, 220,
	222, 294, 221, 295, 0, 224, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 296, 297, 298, 0, 0,
	232, 233, 299, 300, 0, 234, 235, 236, 237, 0,
	0, 238, 239, 240, 241, 0, 242, 0, 301, 243,
	244, 245, 302, 303, 97, 0, 246, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 0, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 0, 252, 0,
	0, 0, 0, 103, 104, 105, 253, 254, 255, 256,
	106, 257, 258, 0, 107, 259, 260, 108, 109, 0,
	0, 261, 262, 263, 0, 110, 264, 0, 0, 0,
	111, 112, 113, 0, 114, 0, 115, 116, 117, 0,
	0, 118, 119, 0, 0, 0, 0, 0, 0, 120,
	121, 309, 122, 265, 123, 266, 267, 0, 124, 0,
	125, 0, 126, 0, 0, 127, 128, 0, 129, 0,
	0, 0, 268, 130, 131, 132, 269, 270, 0, 0,
	0, 133, 134, 271, 0, 135, 0, 136, 0, 0,
	0, 0, 137, 272, 0, 273, 0, 138, 139, 140,
	141, 1426, 275, 0, 0, 145, 0, 142, 0, 0,
	143, 276, 144, 277, 278, 279, 0, 280, 0, 0,
	146, 147, 0, 148, 149, 150, 0, 152, 151, 0,
	281, 0, 153, 0, 0, 154, 0, 0, 155, 0,
	156, 157, 158, 160, 282, 159, 0, 161, 162, 164,
	163, 0, 0, 0, 283, 165, 284, 166, 167, 0,
	168, 0, 0, 169, 0, 0, 170, 285, 0, 171,
	0, 286, 172, 173, 174, 175, 176, 0, 177, 287,
	178, 288, 179, 0, 180, 181, 182, 183, 184, 289,
	185, 186, 0, 187, 188, 189, 190, 191, 193, 194,
	192, 195, 196, 197, 198, 0, 199, 0, 200, 201,
	290, 202, 0, 206, 207, 208, 209, 0, 211, 291,
	210, 212, 213, 0, 214, 203, 204, 215, 0, 216,
	292, 293, 217, 0, 223, 218, 219, 205, 220, 222,
	294, 221, 295, 0, 224, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 296, 297, 298, 0, 0, 232,
	233, 299, 300, 0, 234, 235, 236, 237, 0, 0,
	238, 239, 240, 241, 0, 242, 0, 301, 243, 244,
	245, 302, 303, 97, 0, 246, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 252, 0, 0,
	0, 0, 103, 104, 105, 253, 254, 255, 256, 106,
	257, 258, 0, 107, 259, 260, 108, 109, 0, 0,
	261, 262, 263, 0, 110, 264, 0, 0, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 0,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	309, 122, 265, 123, 266, 267, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 268, 130, 131, 132, 269, 270, 0, 0, 0,
	133, 134, 271, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 272, 0, 273, 0, 138, 139, 140, 141,
	1096, 275, 0, 0, 145, 0, 142, 0, 0, 143,
	276, 144, 277, 278, 279, 0, 280, 0, 0, 146,
	147, 0, 148, 149, 150, 0, 152, 151, 0, 281,
	0, 153, 0, 0, 154, 0, 0, 155, 0, 156,
	157, 158, 160, 282, 159, 0, 161, 162, 164, 163,
	0, 0, 0, 283, 165, 284, 166, 167, 0, 168,
	0, 0, 169, 0, 0, 170, 285, 0, 171, 0,
	286, 172, 173, 174, 175, 176, 0, 177, 287, 178,
	288, 179, 0, 180, 181, 182, 183, 184, 289, 185,
	186, 0, 187, 188, 189, 190, 191, 193, 194, 192,
	195, 196, 197, 198, 0, 199, 0, 200, 201, 290,
	202, 0, 206, 207, 208, 209, 0, 211, 291, 210,
	212, 213, 0, 214, 203, 204, 215, 0, 216, 292,
	293, 217, 0, 223, 218, 219, 205, 220, 222, 294,
	221, 295, 0, 224, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 296, 297, 298, 0, 0, 232, 233,
	299, 300, 0, 234, 235, 236, 237, 0, 0, 238,
	239, 240, 241, 0, 242, 0, 301, 243, 244, 245,
	302, 303, 97, 0, 246, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 0, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 252, 0, 0, 0,
	0, 103, 104, 105, 253, 254, 255, 256, 106, 257,
	258, 0, 107, 259, 260, 108, 109, 0, 0, 261,
	262, 263, 0, 110, 264, 0, 0, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 0, 118,
	119, 0, 0, 0, 0, 0, 0, 120, 121, 309,
	122, 265, 123, 266, 267, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	268, 130, 131, 132, 269, 270, 0, 0, 0, 133,
	134, 271, 0, 135, 0, 136, 0, 0, 0, 0,
	137, 272, 0, 273, 0, 138, 139, 140, 141, 274,
	275, 0, 0, 145, 0, 142, 0, 0, 143, 276,
	144, 277, 278, 279, 0, 280, 0, 0, 146, 147,
	0, 148, 149, 150, 0, 152, 151, 0, 281, 0,
	153, 0, 0, 154, 0, 0, 155, 0, 156, 157,
	158, 160, 282, 159, 0, 161, 162, 164, 163, 0,
	0, 0, 283, 165, 284, 166, 167, 0, 168, 0,
	0, 169, 0, 0, 170, 285, 0, 171, 0, 286,
	172, 173, 174, 175, 176, 0, 177, 287, 178, 288,
	179, 0, 180, 181, 182, 183, 184, 289, 185, 186,
	0, 187, 188, 189, 190, 191, 193, 194, 192, 195,
	196, 197, 198, 0, 199, 0, 200, 201, 290, 202,
	0, 461, 207, 208, 209, 0, 211, 291, 210, 212,
	213, 0, 214, 203, 204, 215, 0, 216, 292, 293,
	217, 0, 223, 218, 219, 205, 220, 222, 294, 221,
	295, 0, 224, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 296, 297, 298, 0, 0, 232, 233, 299,
	300, 0, 234, 235, 236, 237, 0, 0, 238, 239,
	240, 241, 0, 242, 0, 301, 243, 244, 245, 302,
	303, 97, 0, 246, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 252, 0, 965, 0, 0,
	103, 104, 105, 253, 254, 255, 256, 106, 257, 258,
	0, 107, 259, 260, 108, 109, 0, 0, 261, 262,
	263, 0, 110, 264, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 120, 121, 309, 122,
	265, 123, 266, 267, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 268,
	130, 131, 132, 269, 270, 0, 0, 0, 133, 134,
	271, 0, 135, 0, 136, 0, 0, 0, 0, 137,
	272, 0, 273, 0, 138, 139, 140, 141, 274, 275,
	0, 0, 145, 0, 142, 0, 0, 143, 276, 144,
	277, 278, 279, 0, 280, 0, 0, 146, 147, 0,
	148, 149, 150, 0, 152, 151, 0, 281, 0, 153,
	0, 0, 154, 0, 0, 155, 0, 156, 157, 158,
	160, 282, 159, 0, 161, 162, 164, 163, 0, 0,
	0, 283, 165, 284, 166, 167, 0, 168, 0, 0,
	169, 0, 0, 170, 285, 0, 171, 0, 286, 172,
	173, 174, 175, 176, 0, 177, 287, 178, 288, 179,
	0, 180, 181, 182, 183, 184, 289, 185, 186, 0,
	187, 188, 189, 190, 191, 193, 194, 192, 195, 196,
	197, 198, 0, 199, 0, 200, 201, 290, 202, 0,
	206, 207, 208, 209, 0, 211, 291, 210, 212, 213,
	0, 0, 203, 204, 215, 0, 216, 292, 293, 217,
	0, 223, 218, 219, 205, 220, 222, 294, 221, 295,
	0, 224, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 296, 297, 298, 0, 0, 232, 233, 299, 300,
	0, 234, 235, 236, 237, 0, 0, 238, 239, 240,
	241, 0, 242, 0, 301, 243, 244, 245, 302, 303,
	97, 0, 246, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 252, 0, 0, 0, 0, 103,
	104, 105, 253, 254, 255, 256, 106, 257, 258, 0,
	107, 259, 260, 108, 109, 0, 0, 261, 262, 263,
	0, 110, 264, 0, 0, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 0, 118, 119, 0,
	0, 0, 0, 0, 0, 120, 121, 309, 122, 265,
	123, 266, 267, 0, 124, 0, 125, 0, 126, 0,
	0, 127, 128, 0, 129, 0, 0, 0, 268, 130,
	131, 132, 269, 270, 0, 0, 0, 133, 134, 271,
	0, 135, 0, 136, 0, 0, 0, 0, 137, 272,
	0, 273, 0, 138, 139, 140, 141, 796, 275, 0,
	0, 145, 0, 142, 0, 0, 143, 276, 144, 277,
	278, 279, 0, 280, 0, 0, 146, 147, 0, 148,
	149, 150, 0, 152, 151, 0, 281, 0, 153, 0,
	0, 154, 0, 0, 155, 0, 156, 157, 158, 160,
	282, 159, 0, 161, 162, 164, 163, 0, 0, 0,
	283, 165, 284, 166, 167, 0, 168, 0, 0, 169,
	0, 0, 170, 285, 0, 171, 0, 286, 172, 173,
	174, 175, 176, 0, 177, 287, 178, 288, 179, 0,
	180, 181, 182, 183, 184, 289, 185, 186, 0, 187,
	188, 189, 190, 191, 193, 194, 192, 195, 196, 197,
	198, 0, 199, 0, 200, 201, 290, 202, 0, 206,
	207, 208, 209, 0, 211, 291, 210, 212, 213, 0,
	214, 203, 204, 215, 0, 216, 292, 293, 217, 0,
	223, 218, 219, 205, 220, 222, 294, 221, 295, 0,
	224, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	296, 297, 298, 0, 0, 232, 233, 299, 300, 0,
	234, 235, 236, 237, 0, 0, 238, 239, 240, 241,
	0, 242, 0, 301, 243, 244, 245, 302, 303, 97,
	0, 246, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 252, 0, 0, 0, 0, 103, 104,
	105, 253, 254, 255, 256, 106, 257, 258, 0, 107,
	259, 260, 108, 109, 0, 0, 261, 262, 263, 0,
	110, 264, 0, 0, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 0, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 309, 122, 265, 123,
	266, 267, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 268, 130, 131,
	132, 269, 270, 0, 0, 0, 133, 134, 271, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 272, 0,
	273, 0, 138, 139, 140, 141, 791, 275, 0, 0,
	145, 0, 142, 0, 0, 143, 276, 144, 277, 278,
	279, 0, 280, 0, 0, 146, 147, 0, 148, 149,
	150, 0, 152, 151, 0, 281, 0, 153, 0, 0,
	154, 0, 0, 155, 0, 156, 157, 158, 160, 282,
	159, 0, 161, 162, 164, 163, 0, 0, 0, 283,
	165, 284, 166, 167, 0, 168, 0, 0, 169, 0,
	0, 170, 285, 0, 171, 0, 286, 172, 173, 174,
	175, 176, 0, 177, 287, 178, 288, 179, 0, 180,
	181, 182, 183, 184, 289, 185, 186, 0, 187, 188,
	189, 190, 191, 193, 194, 192, 195, 196, 197, 198,
	0, 199, 0, 200, 201, 290, 202, 0, 206, 207,
	208, 209, 0, 211, 291, 210, 212, 213, 0, 214,
	203, 204, 215, 0, 216, 292, 293, 217, 0, 223,
	218, 219, 205, 220, 222, 294, 221, 295, 0, 224,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 296,
	297, 298, 0, 0, 232, 233, 299, 300, 0, 234,
	235, 236, 237, 0, 0, 238, 239, 240, 241, 0,
	242, 0, 301, 243, 244, 245, 302, 303, 97, 0,
	246, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	0, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 252, 0, 0, 0, 0, 103, 104, 105,
	253, 254, 255, 256, 106, 257, 258, 0, 107, 259,
	260, 108, 109, 0, 0, 261, 262, 729, 0, 110,
	264, 0, 0, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 0, 118, 119, 0, 0, 0,
	0, 0, 0, 120, 121, 309, 122, 265, 123, 266,
	267, 0, 124, 0, 125, 0, 126, 0, 0, 127,
	128, 0, 129, 0, 0, 0, 268, 130, 131, 132,
	269, 270, 0, 0, 0, 133, 134, 271, 0, 135,
	0, 136, 0, 0, 0, 0, 137, 272, 0, 273,
	0, 138, 139, 140, 141, 274, 275, 0, 0, 145,
	0, 142, 0, 0, 143, 276, 144, 277, 278, 279,
	0, 280, 0, 0, 146, 147, 0, 148, 149, 150,
	0, 152, 151, 0, 281, 0, 153, 0, 0, 154,
	0, 0, 155, 0, 156, 157, 158, 160, 282, 475,
	0, 161, 162, 164, 163, 0, 0, 0, 283, 165,
	284, 166, 167, 0, 168, 0, 0, 169, 0, 0,
	170, 285, 0, 171, 0, 286, 172, 173, 174, 175,
	176, 0, 177, 287, 178, 288, 179, 0, 180, 181,
	182, 183, 184, 289, 185, 186, 0, 187, 188, 189,
	190, 191, 193, 194, 192, 195, 196, 197, 198, 0,
	199, 0, 200, 201, 290, 202, 0, 206, 207, 208,
	209, 0, 211, 291, 210, 212, 213, 0, 214, 203,
	204, 215, 0, 216, 292, 293, 217, 0, 223, 218,
	219, 205, 220, 222, 294, 221, 295, 0, 224, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 472, 297,
	298, 0, 0, 232, 468, 299, 300, 0, 234, 235,
	236, 237, 0, 0, 238, 239, 240, 241, 0, 242,
	0, 301, 243, 244, 245, 302, 303, 97, 0, 246,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 252, 0, 0, 0, 0, 103, 104, 105, 253,
	254, 255, 256, 106, 257, 258, 0, 107, 259, 260,
	108, 109, 0, 0, 261, 262, 263, 0, 110, 264,
	0, 0, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 0, 118, 119, 0, 0, 0, 0,
	0, 0, 120, 121, 309, 122, 265, 123, 266, 267,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 268, 130, 131, 132, 269,
	270, 0, 0, 0, 133, 134, 271, 0, 135, 0,
	136, 0, 0, 0, 0, 137, 272, 0, 273, 0,
	138, 139, 140, 141, 274, 275, 0, 0, 145, 0,
	142, 0, 0, 143, 276, 144, 277, 278, 279, 0,
	280, 0, 0, 146, 147, 0, 148, 149, 150, 0,
	152, 151, 0, 281, 0, 153, 0, 0, 154, 0,
	0, 155, 0, 156, 157, 158, 160, 282, 475, 0,
	161, 162, 164, 163, 0, 0, 0, 283, 165, 284,
	166, 167, 0, 168, 0, 0, 169, 0, 0, 170,
	285, 0, 171, 0, 286, 172, 173, 174, 175, 176,
	0, 177, 287, 178, 288, 179, 0, 180, 181, 182,
	183, 184, 289, 185, 186, 0, 187, 188, 189, 190,
	191, 193, 194, 192, 195, 196, 197, 198, 0, 199,
	0, 200, 201, 290, 202, 0, 206, 207, 208, 209,
	0, 211, 291, 210, 212, 213, 0, 214, 203, 204,
	215, 0, 216, 292, 293, 217, 0, 223, 218, 219,
	205, 220, 222, 294, 221, 295, 0, 224, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 472, 297, 298,
	0, 0, 232, 468, 299, 300, 0, 234, 235, 236,
	237, 0, 0, 238, 239, 240, 241, 0, 242, 0,
	301, 243, 244, 245, 302, 303, 97, 0, 246, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	252, 0, 0, 0, 0, 103, 104, 105, 253, 254,
	255, 256, 106, 257, 258, 0, 107, 259, 260, 108,
	109, 0, 0, 261, 262, 263, 0, 110, 264, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 309, 122, 265, 123, 266, 267, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 268, 130, 131, 132, 269, 270,
	0, 0, 0, 133, 134, 271, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 272, 0, 273, 0, 138,
	139, 140, 141, 709, 275, 0, 0, 145, 0, 142,
	0, 0, 143, 276, 144, 277, 278, 279, 0, 280,
	0, 0, 146, 147, 0, 148, 149, 150, 0, 152,
	151, 0, 281, 0, 153, 0, 0, 154, 0, 0,
	155, 0, 156, 157, 158, 160, 282, 159, 0, 161,
	162, 164, 163, 0, 0, 0, 283, 165, 284, 166,
	167, 0, 168, 0, 0, 169, 0, 0, 170, 285,
	0, 171, 0, 286, 172, 173, 174, 175, 176, 0,
	177, 287, 178, 288, 179, 0, 180, 181, 182, 183,
	184, 289, 185, 186, 0, 187, 188, 189, 190, 191,
	193, 194, 192, 195, 196, 197, 198, 0, 199, 0,
	200, 201, 290, 202, 0, 206, 207, 208, 209, 0,
	211, 291, 210, 212, 213, 0, 214, 203, 204, 215,
	0, 216, 292, 293, 217, 0, 223, 218, 219, 205,
	220, 222, 294, 221, 295, 0, 224, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 296, 297, 298, 0,
	0, 232, 233, 299, 300, 0, 234, 235, 236, 237,
	0, 0, 238, 239, 240, 241, 0, 242, 0, 301,
	243, 244, 245, 302, 303, 97, 0, 246, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 252,
	0, 0, 0, 0, 103, 104, 105, 253, 254, 255,
	256, 106, 257, 258, 0, 107, 259, 260, 108, 109,
	0, 0, 261, 262, 263, 0, 110, 264, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	120, 121, 309, 122, 265, 123, 266, 267, 0, 124,
	0, 125, 0, 126, 0, 0, 127, 128, 0, 129,
	0, 0, 0, 268, 130, 131, 132, 269, 270, 0,
	0, 0, 133, 134, 271, 0, 135, 0, 136, 0,
	0, 0, 0, 137, 272, 0, 273, 0, 138, 139,
	140, 141, 707, 275, 0, 0, 145, 0, 142, 0,
	0, 143, 276, 144, 277, 278, 279, 0, 280, 0,
	0, 146, 147, 0, 148, 149, 150, 0, 152, 151,
	0, 281, 0, 153, 0, 0, 154, 0, 0, 155,
	0, 156, 157, 158, 160, 282, 159, 0, 161, 162,
	164, 163, 0, 0, 0, 283, 165, 284, 166, 167,
	0, 168, 0, 0, 169, 0, 0, 170, 285, 0,
	171, 0, 286, 172, 173, 174, 175, 176, 0, 177,
	287, 178, 288, 179, 0, 180, 181, 182, 183, 184,
	289, 185, 186, 0, 187, 188, 189, 190, 191, 193,
	194, 192, 195, 196, 197, 198, 0, 199, 0, 200,
	201, 290, 202, 0, 206, 207, 208, 209, 0, 211,
	291, 210, 212, 213, 0, 214, 203, 204, 215, 0,
	216, 292, 293, 217, 0, 223, 218, 219, 205, 220,
	222, 294, 221, 295, 0, 224, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 296, 297, 298, 0, 0,
	232, 233, 299, 300, 0, 234, 235, 236, 237, 0,
	0, 238, 239, 240, 241, 0, 242, 0, 301, 243,
	244, 245, 302, 303, 97, 0, 246, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 0, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 0, 252, 0,
	0, 0, 0, 103, 104, 105, 253, 254, 255, 256,
	106, 257, 258, 0, 107, 259, 260, 108, 109, 0,
	0, 261, 262, 263, 0, 110, 264, 0, 0, 0,
	111, 112, 113, 0, 114, 0, 115, 116, 117, 0,
	0, 118, 119, 0, 0, 0, 0, 0, 0, 120,
	121, 309, 122, 265, 123, 266, 267, 0, 124, 0,
	125, 0, 126, 0, 0, 127, 128, 0, 129, 0,
	0, 0, 268, 130, 131, 132, 269, 270, 0, 0,
	0, 133, 134, 271, 0, 135, 0, 136, 0, 0,
	0, 0, 137, 272, 0, 273, 0, 138, 139, 140,
	141, 704, 275, 0, 0, 145, 0, 142, 0, 0,
	143, 276, 144, 277, 278, 279, 0, 280, 0, 0,
	146, 147, 0, 148, 149, 150, 0, 152, 151, 0,
	281, 0, 153, 0, 0, 154, 0, 0, 155, 0,
	156, 157, 158, 160, 282, 159, 0, 161, 162, 164,
	163, 0, 0, 0, 283, 165, 284, 166, 167, 0,
	168, 0, 0, 169, 0, 0, 170, 285, 0, 171,
	0, 286, 172, 173, 174, 175, 176, 0, 177, 287,
	178, 288, 179, 0, 180, 181, 182, 183, 184, 289,
	185, 186, 0, 187, 188, 189, 190, 191, 193, 194,
	192, 195, 196, 197, 198, 0, 199, 0, 200, 201,
	290, 202, 0, 206, 207, 208, 209, 0, 211, 291,
	210, 212, 213, 0, 214, 203, 204, 215, 0, 216,
	292, 293, 217, 0, 223, 218, 219, 205, 220, 222,
	294, 221, 295, 0, 224, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 296, 297, 298, 0, 0, 232,
	233, 299, 300, 0, 234, 235, 236, 237, 0, 0,
	238, 239, 240, 241, 0, 242, 0, 301, 243, 244,
	245, 302, 303, 97, 0, 246, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 252, 0, 0,
	0, 0, 103, 104, 105, 253, 254, 255, 256, 106,
	257, 258, 0, 107, 259, 260, 108, 109, 0, 0,
	261, 262, 263, 0, 110, 264, 0, 0, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 0,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	309, 122, 265, 123, 266, 267, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 268, 130, 131, 132, 269, 270, 0, 0, 0,
	133, 134, 271, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 272, 0, 273, 0, 138, 139, 140, 141,
	701, 275, 0, 0, 145, 0, 142, 0, 0, 143,
	276, 144, 277, 278, 279, 0, 280, 0, 0, 146,
	147, 0, 148, 149, 150, 0, 152, 151, 0, 281,
	0, 153, 0, 0, 154, 0, 0, 155, 0, 156,
	157, 158, 160, 282, 159, 0, 161, 162, 164, 163,
	0, 0, 0, 283, 165, 284, 166, 167, 0, 168,
	0, 0, 169, 0, 0, 170, 285, 0, 171, 0,
	286, 172, 173, 174, 175, 176, 0, 177, 287, 178,
	288, 179, 0, 180, 181, 182, 183, 184, 289, 185,
	186, 0, 187, 188, 189, 190, 191, 193, 194, 192,
	195, 196, 197, 198, 0, 199, 0, 200, 201, 290,
	202, 0, 206, 207, 208, 209, 0, 211, 291, 210,
	212, 213, 0, 214, 203, 204, 215, 0, 216, 292,
	293, 217, 0, 223, 218, 219, 205, 220, 222, 294,
	221, 295, 0, 224, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 296, 297, 298, 0, 0, 232, 233,
	299, 300, 0, 234, 235, 236, 237, 0, 0, 238,
	239, 240, 241, 0, 242, 0, 301, 243, 244, 245,
	302, 303, 97, 0, 246, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 0, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 252, 0, 0, 0,
	0, 103, 104, 105, 253, 254, 255, 256, 106, 257,
	258, 0, 107, 259, 260, 108, 109, 0, 0, 261,
	262, 263, 0, 110, 264, 0, 0, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 0, 118,
	119, 0, 0, 0, 0, 0, 0, 120, 121, 309,
	122, 265, 123, 266, 267, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	268, 130, 131, 132, 269, 270, 0, 0, 0, 133,
	134, 271, 0, 135, 0, 136, 0, 0, 0, 0,
	137, 272, 0, 273, 0, 138, 139, 140, 141, 699,
	275, 0, 0, 145, 0, 142, 0, 0, 143, 276,
	144, 277, 278, 279, 0, 280, 0, 0, 146, 147,
	0, 148, 149, 150, 0, 152, 151, 0, 281, 0,
	153, 0, 0, 154, 0, 0, 155, 0, 156, 157,
	158, 160, 282, 159, 0, 161, 162, 164, 163, 0,
	0, 0, 283, 165, 284, 166, 167, 0, 168, 0,
	0, 169, 0, 0, 170, 285, 0, 171, 0, 286,
	172, 173, 174, 175, 176, 0, 177, 287, 178, 288,
	179, 0, 180, 181, 182, 183, 184, 289, 185, 186,
	0, 187, 188, 189, 190, 191, 193, 194, 192, 195,
	196, 197, 198, 0, 199, 0, 200, 201, 290, 202,
	0, 206, 207, 208, 209, 0, 211, 291, 210, 212,
	213, 0, 214, 203, 204, 215, 0, 216, 292, 293,
	217, 0, 223, 218, 219, 205, 220, 222, 294, 221,
	295, 0, 224, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 296, 297, 298, 0, 0, 232, 233, 299,
	300, 0, 234, 235, 236, 237, 0, 0, 238, 239,
	240, 241, 0, 242, 0, 301, 243, 244, 245, 302,
	303, 97, 0, 246, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 252, 0, 0, 0, 0,
	103, 104, 105, 253, 254, 255, 256, 106, 257, 258,
	0, 107, 259, 260, 108, 109, 0, 0, 261, 262,
	263, 0, 110, 264, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 120, 121, 309, 122,
	265, 123, 266, 267, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 268,
	130, 131, 132, 269, 270, 0, 0, 0, 133, 134,
	271, 0, 135, 0, 136, 0, 0, 0, 0, 137,
	272, 0, 273, 0, 138, 139, 140, 141, 577, 275,
	0, 0, 145, 0, 142, 0, 0, 143, 276, 144,
	277, 278, 279, 0, 280, 0, 0, 146, 147, 0,
	148, 149, 150, 0, 152, 151, 0, 281, 0, 153,
	0, 0, 154, 0, 0, 155, 0, 156, 157, 158,
	160, 282, 159, 0, 161, 162, 164, 163, 0, 0,
	0, 283, 165, 284, 166, 167, 0, 168, 0, 0,
	169, 0, 0, 170, 285, 0, 171, 0, 286, 172,
	173, 174, 175, 176, 0, 177, 287, 178, 288, 179,
	0, 180, 181, 182, 183, 184, 289, 185, 186, 0,
	187, 188, 189, 190, 191, 193, 194, 192, 195, 196,
	197, 198, 0, 199, 0, 200, 201, 290, 202, 0,
	206, 207, 208, 209, 0, 211, 291, 210, 212, 213,
	0, 214, 203, 204, 215, 0, 216, 292, 293, 217,
	0, 223, 218, 219, 205, 220, 222, 294, 221, 295,
	0, 224, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 296, 297, 298, 0, 0, 232, 233, 299, 300,
	0, 234, 235, 236, 237, 0, 0, 238, 239, 240,
	241, 0, 242, 0, 301, 243, 244, 245, 302, 303,
	97, 0, 246, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 252, 0, 0, 0, 0, 103,
	104, 105, 253, 254, 255, 256, 106, 257, 258, 0,
	107, 259, 260, 108, 109, 0, 0, 261, 262, 263,
	0, 110, 264, 0, 0, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 0, 118, 119, 0,
	0, 0, 0, 0, 0, 120, 121, 309, 122, 265,
	123, 266, 267, 0, 124, 0, 125, 0, 126, 0,
	0, 127, 128, 0, 129, 0, 0, 0, 268, 130,
	131, 132, 269, 270, 0, 0, 0, 133, 134, 271,
	0, 135, 0, 136, 0, 0, 0, 0, 137, 272,
	0, 273, 0, 138, 139, 140, 141, 274, 275, 0,
	0, 145, 0, 142, 0, 0, 143, 276, 144, 277,
	278, 279, 0, 280, 0, 0, 146, 147, 0, 148,
	149, 150, 0, 152, 151, 0, 281, 0, 153, 0,
	0, 154, 0, 0, 155, 0, 156, 157, 158, 160,
	282, 159, 0, 161, 162, 164, 163, 0, 0, 0,
	283, 165, 284, 166, 167, 0, 168, 0, 0, 169,
	0, 0, 170, 285, 0, 171, 0, 286, 172, 173,
	174, 175, 176, 0, 177, 287, 178, 288, 179, 0,
	180, 181, 182, 183, 184, 289, 558, 186, 0, 187,
	188, 189, 190, 191, 193, 194, 192, 195, 196, 197,
	198, 0, 199, 0, 200, 201, 290, 202, 0, 206,
	207, 208, 209, 0, 211, 291, 210, 212, 213, 0,
	214, 203, 204, 215, 0, 216, 292, 293, 217, 0,
	223, 218, 219, 205, 220, 222, 294, 221, 295, 0,
	224, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	296, 297, 298, 0, 0, 232, 233, 299, 300, 0,
	234, 235, 236, 237, 0, 0, 238, 239, 240, 241,
	0, 242, 0, 301, 243, 244, 245, 302, 303, 97,
	0, 246, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 252, 0, 0, 0, 0, 103, 104,
	105, 253, 254, 255, 256, 106, 257, 258, 0, 107,
	259, 260, 108, 109, 0, 0, 261, 262, 263, 0,
	466, 264, 0, 0, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 0, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 309, 122, 265, 123,
	266, 267, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 268, 130, 131,
	132, 269, 270, 0, 0, 0, 133, 134, 271, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 272, 0,
	273, 0, 138, 139, 140, 141, 274, 275, 0, 0,
	145, 0, 142, 0, 0, 143, 276, 144, 277, 278,
	279, 0, 280, 0, 0, 146, 147, 0, 148, 149,
	150, 0, 152, 151, 0, 281, 0, 153, 0, 0,
	464, 0, 0, 155, 0, 156, 157, 158, 160, 282,
	475, 0, 161, 162, 164, 163, 0, 0, 0, 283,
	165, 284, 166, 167, 0, 168, 0, 0, 169, 0,
	0, 170, 285, 0, 171, 0, 286, 172, 173, 174,
	175, 176, 0, 177, 287, 178, 288, 179, 0, 180,
	181, 182, 183, 184, 289, 185, 186, 0, 187, 188,
	189, 190, 191, 193, 194, 192, 195, 196, 197, 198,
	0, 199, 0, 200, 201, 467, 202, 0, 206, 207,
	208, 209, 0, 211, 291, 210, 465, 213, 0, 214,
	203, 204, 215, 0, 216, 292, 293, 217, 0, 223,
	218, 219, 205, 220, 222, 294, 221, 295, 0, 224,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 472,
	297, 298, 0, 0, 232, 468, 299, 300, 0, 234,
	235, 236, 237, 0, 0, 238, 239, 240, 241, 0,
	242, 0, 301, 243, 244, 245, 302, 303, 97, 0,
	246, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	0, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 252, 0, 0, 0, 0, 103, 104, 105,
	253, 254, 255, 256, 106, 257, 258, 0, 107, 259,
	260, 108, 109, 0, 0, 261, 262, 263, 0, 110,
	264, 0, 0, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 0, 118, 119, 0, 0, 0,
	0, 0, 0, 120, 121, 309, 122, 265, 123, 266,
	267, 0, 124, 0, 125, 0, 126, 0, 0, 127,
	128, 0, 129, 0, 0, 0, 268, 130, 131, 132,
	269, 270, 0, 0, 0, 133, 134, 271, 0, 135,
	0, 136, 0, 0, 0, 0, 137, 272, 0, 273,
	0, 138, 139, 140, 141, 274, 275, 0, 0, 145,
	0, 142, 0, 0, 143, 276, 144, 277, 278, 279,
	0, 280, 0, 0, 146, 147, 0, 148, 149, 150,
	0, 152, 151, 0, 281, 0, 153, 0, 0, 154,
	0, 0, 155, 0, 156, 157, 158, 160, 282, 159,
	0, 161, 162, 164, 163, 0, 0, 0, 283, 165,
	284, 166, 167, 0, 168, 0, 0, 169, 0, 0,
	170, 285, 0, 171, 0, 286, 172, 173, 0, 175,
	176, 0, 177, 287, 178, 288, 179, 0, 180, 181,
	182, 0, 184, 289, 185, 186, 0, 187, 188, 189,
	190, 191, 193, 194, 192, 195, 196, 197, 198, 0,
	199, 0, 200, 201, 290, 0, 0, 206, 207, 208,
	209, 0, 211, 291, 210, 212, 213, 0, 214, 203,
	204, 215, 0, 216, 292, 293, 217, 0, 223, 218,
	219, 205, 220, 222, 294, 221, 295, 0, 224, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 296, 297,
	298, 0, 0, 232, 233, 299, 300, 0, 234, 235,
	236, 237, 0, 0, 238, 239, 240, 241, 0, 242,
	0, 301, 243, 244, 245, 302, 303, 0, 0, 246,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 857,
	858, 0, 877, 878, 879, 887, 888, 889, 0, 0,
	0, 0, 0, 0, 0, 880, 0, 0, 0, 0,
	0, 0, 860, 0, 0, 891, 0, 857, 858, 0,
	877, 878, 879, 887, 888, 889, 0, 0, 0, 0,
	0, 0, 0, 880, 0, 0, 859, 0, 0, 0,
	860, 0, 874, 891, 0, 857, 858, 0, 877, 878,
	879, 887, 888, 889, 0, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 859, 0, 0, 0, 860, 0,
	874, 891, 0, 857, 858, 0, 877, 878, 879, 887,
	888, 889, 0, 0, 0, 0, 0, 0, 0, 880,
	0, 0, 859, 865, 0, 0, 860, 0, 874, 891,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 884, 892, 0, 0, 0, 0, 0, 0,
	859, 865, 0, 0, 0, 0, 874, 0, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	884, 892, 882, 0, 0, 0, 0, 0, 875, 865,
	0, 0, 0, 0, 0, 0, 890, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 884, 892,
	882, 0, 0, 881, 0, 0, 875, 865, 0, 0,
	0, 0, 0, 0, 890, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 884, 892, 882, 0,
	0, 881, 0, 0, 875, 0, 0, 0, 0, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 0, 0,
	0, 876, 0, 0, 0, 0, 882, 0, 0, 881,
	0, 0, 875, 0, 0, 0, 0, 885, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 876,
	0, 0, 0, 0, 0, 0, 0, 881, 0, 0,
	0, 0, 0, 0, 0, 885, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 876, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 885, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 883, 876, 0, 871, 872, 873,
	886, 0, 870, 868, 869, 861, 862, 863, 864, 866,
	867, 885, 0, 0, 0, 2086, 0, 0, 0, 0,
	0, 0, 883, 0, 0, 871, 872, 873, 886, 0,
	870, 868, 869, 861, 862, 863, 864, 866, 867, 0,
	0, 0, 0, 2020, 0, 0, 0, 0, 0, 0,
	883, 0, 0, 871, 872, 873, 886, 0, 870, 868,
	869, 861, 862, 863, 864, 866, 867, 0, 0, 0,
	0, 2015, 0, 0, 0, 0, 0, 0, 883, 0,
	0, 871, 872, 873, 886, 0, 870, 868, 869, 861,
	862, 863, 864, 866, 867, 0, 0, 857, 858, 2011,
	877, 878, 879, 887, 888, 889, 0, 0, 0, 0,
	0, 0, 0, 880, 0, 0, 0, 0, 0, 0,
	860, 0, 0, 891, 0, 857, 858, 0, 877, 878,
	879, 887, 888, 889, 0, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 859, 0, 0, 0, 860, 0,
	874, 891, 0, 857, 858, 0, 877, 878, 879, 887,
	888, 889, 0, 0, 0, 0, 0, 0, 0, 880,
	0, 0, 859, 0, 0, 0, 860, 0, 874, 891,
	0, 857, 858, 0, 877, 878, 879, 887, 888, 889,
	0, 0, 0, 0, 0, 0, 0, 880, 0, 0,
	859, 865, 0, 0, 860, 0, 874, 891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	884, 892, 0, 0, 0, 0, 0, 0, 859, 865,
	0, 0, 0, 0, 874, 0, 890, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 884, 892,
	882, 0, 0, 0, 0, 0, 875, 865, 0, 0,
	0, 0, 0, 0, 890, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 884, 892, 882, 0,
	0, 881, 0, 0, 875, 865, 0, 0, 0, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 884, 892, 882, 0, 0, 881,
	0, 0, 875, 0, 0, 0, 0, 0, 0, 0,
	890, 0, 0, 0, 0, 0, 0, 0, 0, 876,
	0, 0, 0, 0, 882, 0, 0, 881, 0, 0,
	875, 0, 0, 0, 0, 885, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 876, 0, 0,
	0, 0, 0, 0, 0, 881, 0, 0, 0, 0,
	0, 0, 0, 885, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 876, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 885, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 883, 876, 0, 871, 872, 873, 886, 0,
	870, 868, 869, 861, 862, 863, 864, 866, 867, 885,
	0, 0, 0, 1988, 0, 0, 0, 0, 0, 0,
	883, 0, 0, 871, 872, 873, 886, 0, 870, 868,
	869, 861, 862, 863, 864, 866, 867, 0, 0, 0,
	0, 1919, 0, 0, 0, 0, 0, 0, 883, 0,
	0, 871, 872, 873, 886, 0, 870, 868, 869, 861,
	862, 863, 864, 866, 867, 0, 0, 0, 0, 1918,
	0, 0, 0, 0, 0, 0, 883, 0, 0, 871,
	872, 873, 886, 0, 870, 868, 869, 861, 862, 863,
	864, 866, 867, 0, 0, 857, 858, 1857, 877, 878,
	879, 887, 888, 889, 0, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 0, 0, 0, 0, 860, 0,
	0, 891, 0, 857, 858, 0, 877, 878, 879, 887,
	888, 889, 0, 0, 0, 0, 0, 0, 0, 880,
	0, 0, 859, 0, 0, 0, 860, 0, 874, 891,
	0, 857, 858, 0, 877, 878, 879, 887, 888, 889,
	0, 0, 0, 0, 0, 0, 0, 880, 0, 0,
	859, 0, 0, 0, 860, 0, 874, 891, 0, 857,
	858, 0, 877, 878, 879, 887, 888, 889, 0, 0,
	0, 0, 0, 0, 0, 880, 0, 0, 859, 865,
	0, 0, 860, 0, 874, 891, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 884, 892,
	0, 0, 0, 0, 0, 0, 859, 865, 0, 0,
	0, 0, 874, 0, 890, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 884, 892, 882, 0,
	0, 0, 0, 0, 875, 865, 0, 0, 0, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 884, 892, 882, 0, 0, 881,
	0, 0, 875, 865, 0, 0, 0, 0, 0, 0,
	890, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 884, 892, 882, 0, 0, 881, 0, 0,
	875, 0, 0, 0, 0, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 876, 0, 0,
	0, 0, 882, 0, 0, 881, 0, 0, 875, 0,
	0, 0, 0, 885, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 876, 0, 0, 0, 0,
	0, 0, 0, 881, 0, 0, 0, 0, 0, 0,
	0, 885, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 876, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 885,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	883, 876, 0, 871, 872, 873, 886, 0, 870, 868,
	869, 861, 862, 863, 864, 866, 867, 885, 0, 0,
	0, 1810, 0, 0, 0, 0, 0, 0, 883, 0,
	0, 871, 872, 873, 886, 0, 870, 868, 869, 861,
	862, 863, 864, 866, 867, 0, 0, 0, 0, 1730,
	0, 0, 0, 0, 0, 0, 883, 0, 0, 871,
	872, 873, 886, 0, 870, 868, 869, 861, 862, 863,
	864, 866, 867, 0, 0, 0, 0, 1706, 0, 0,
	0, 0, 0, 0, 883, 0, 0, 871, 872, 873,
	886, 0, 870, 868, 869, 861, 862, 863, 864, 866,
	867, 0, 0, 857, 858, 1238, 877, 878, 879, 887,
	888, 889, 0, 36, 0, 0, 0, 0, 0, 880,
	0, 0, 0, 0, 37, 65, 860, 0, 0, 891,
	0, 0, 0, 0, 0, 0, 0, 39, 0, 0,
	0, 0, 0, 0, 1520, 1521, 0, 1538, 1539, 1540,
	859, 67, 0, 0, 0, 0, 874, 40, 0, 74,
	1699, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 0, 48, 0, 0, 0, 49, 0, 0, 68,
	0, 0, 0, 53, 0, 50, 0, 1535, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 865, 0, 0,
	0, 55, 0, 0, 0, 0, 0, 51, 0, 0,
	0, 0, 0, 0, 0, 0, 884, 892, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 1526, 0,
	0, 0, 0, 0, 0, 0, 882, 0, 0, 0,
	0, 0, 875, 0, 0, 0, 857, 858, 0, 877,
	878, 879, 887, 888, 889, 0, 0, 0, 0, 0,
	0, 0, 880, 1541, 0, 0, 0, 881, 0, 860,
	0, 0, 891, 0, 0, 0, 56, 0, 0, 0,
	0, 0, 52, 1536, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 859, 0, 0, 0, 0, 0, 874,
	70, 71, 38, 0, 57, 0, 58, 0, 69, 0,
	0, 0, 0, 59, 0, 876, 0, 81, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 64, 0, 0,
	0, 885, 0, 0, 0, 0, 66, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 0, 0, 0, 0,
	865, 2188, 0, 0, 0, 0, 1537, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 884,
	892, 0, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 890, 0, 0, 0, 79,
	0, 0, 0, 0, 0, 0, 80, 0, 883, 882,
	0, 871, 872, 873, 886, 875, 870, 868, 869, 861,
	862, 863, 864, 866, 867, 78, 0, 1482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1532, 1533, 1534, 0, 2187, 1531, 1529, 1530,
	1522, 1523, 1524, 1525, 1527, 1528, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 857, 858, 876, 877,
	878, 879, 887, 888, 889, 0, 0, 0, 0, 0,
	0, 0, 880, 0, 885, 0, 0, 0, 0, 860,
	0, 0, 891, 0, 0, 0, 0, 0, 0, 857,
	858, 0, 877, 878, 879, 887, 888, 889, 0, 0,
	0, 0, 0, 859, 0, 880, 0, 0, 0, 874,
	1402, 0, 860, 0, 0, 891, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 859, 0, 0, 0,
	0, 883, 874, 0, 871, 872, 873, 886, 0, 870,
	868, 869, 861, 862, 863, 864, 866, 867, 0, 0,
	865, 0, 1552, 0, 0, 1551, 0, 0, 0, 0,
	1403, 0, 0, 1520, 1521, 0, 1538, 1539, 1540, 884,
	892, 0, 0, 0, 0, 0, 0, 0, 0, 1698,
	0, 0, 0, 865, 0, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 882,
	0, 0, 884, 892, 0, 875, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1535, 0, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	881, 0, 882, 0, 0, 0, 0, 0, 875, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 881, 0, 0, 0, 1526, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 876, 0,
	0, 0, 0, 0, 0, 0, 1124, 0, 0, 0,
	0, 0, 857, 858, 885, 877, 878, 879, 887, 888,
	889, 0, 1541, 0, 0, 0, 0, 0, 880, 0,
	0, 876, 1123, 0, 0, 860, 0, 0, 891, 0,
	0, 0, 1536, 0, 0, 0, 0, 885, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 859,
	0, 0, 0, 0, 0, 874, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 0, 871, 872, 873, 886, 0, 870,
	868, 869, 861, 862, 863, 864, 866, 867, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 883, 1537, 865, 871, 872, 873,
	886, 0, 870, 868, 869, 861, 862, 863, 864, 866,
	867, 0, 0, 0, 0, 884, 892, 0, 857, 858,
	0, 877, 878, 879, 887, 888, 889, 0, 0, 0,
	0, 890, 0, 0, 880, 0, 0, 0, 0, 0,
	0, 860, 0, 0, 891, 882, 0, 0, 0, 0,
	0, 875, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 859, 0, 0, 0, 0,
	0, 874, 0, 0, 0, 0, 881, 0, 0, 0,
	0, 1532, 1533, 1534, 0, 0, 1531, 1529, 1530, 1522,
	1523, 1524, 1525, 1527, 1528, 0, 0, 0, 0, 0,
	0, 0, 857, 858, 0, 877, 878, 879, 887, 888,
	889, 0, 0, 0, 0, 0, 0, 0, 880, 0,
	0, 0, 865, 0, 876, 860, 0, 0, 891, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	885, 884, 892, 0, 0, 0, 0, 0, 0, 859,
	0, 0, 0, 0, 0, 874, 0, 890, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 882, 0, 0, 0, 0, 0, 875, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 881, 553, 0, 0, 865, 883, 0, 0,
	871, 872, 873, 886, 0, 870, 868, 869, 861, 862,
	863, 864, 866, 867, 0, 884, 892, 0, 0, 0,
	0, 857, 858, 0, 877, 878, 879, 887, 888, 889,
	0, 890, 0, 0, 0, 0, 0, 880, 0, 0,
	876, 0, 0, 0, 860, 882, 0, 891, 0, 0,
	0, 875, 0, 0, 0, 0, 885, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 859, 0,
	0, 0, 0, 0, 874, 0, 881, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1520, 1521, 0, 1538, 1539, 1540, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 883, 876, 865, 871, 872, 873, 886,
	1558, 870, 868, 869, 861, 862, 863, 864, 866, 867,
	885, 0, 0, 0, 884, 892, 1535, 857, 858, 0,
	877, 878, 879, 887, 888, 889, 0, 0, 0, 0,
	890, 0, 0, 880, 0, 1710, 0, 1553, 0, 0,
	860, 0, 0, 891, 882, 0, 0, 0, 0, 0,
	875, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 859, 0, 0, 1526, 0, 0,
	874, 0, 0, 0, 0, 881, 0, 883, 0, 0,
	871, 872, 873, 886, 0, 870, 868, 869, 861, 862,
	863, 864, 866, 867, 0, 0, 0, 0, 0, 0,
	0, 857, 858, 0, 877, 878, 879, 887, 888, 889,
	0, 0, 0, 0, 0, 0, 0, 880, 0, 0,
	0, 865, 1536, 876, 860, 0, 0, 891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 885,
	884, 892, 0, 0, 0, 0, 0, 0, 859, 0,
	0, 0, 0, 0, 874, 0, 890, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	882, 0, 0, 0, 0, 0, 875, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1537, 0, 0, 0, 0,
	0, 881, 0, 0, 0, 865, 883, 0, 0, 871,
	872, 873, 886, 0, 870, 868, 869, 861, 862, 863,
	864, 866, 867, 0, 884, 892, 0, 857, 858, 0,
	877, 878, 879, 887, 888, 889, 0, 0, 0, 0,
	890, 0, 0, 880, 0, 0, 0, 1511, 0, 876,
	860, 0, 0, 891, 882, 0, 0, 0, 0, 0,
	875, 0, 0, 0, 0, 885, 0, 0, 0, 0,
	0, 0, 0, 0, 859, 0, 0, 0, 0, 0,
	874, 1532, 1533, 1534, 0, 881, 1531, 1529, 1530, 1522,
	1523, 1524, 1525, 1527, 1528, 0, 0, 0, 1518, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 865, 883, 876, 0, 871, 872, 873, 886, 0,
	870, 868, 869, 861, 862, 863, 864, 866, 867, 885,
	884, 892, 0, 857, 858, 0, 877, 878, 879, 887,
	888, 889, 0, 0, 0, 0, 890, 0, 0, 880,
	1520, 1521, 0, 1538, 1539, 1540, 860, 0, 0, 891,
	882, 0, 0, 0, 0, 0, 875, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	859, 0, 0, 0, 0, 0, 874, 0, 0, 0,
	0, 881, 0, 0, 0, 0, 883, 0, 0, 871,
	872, 873, 886, 1535, 870, 868, 869, 861, 862, 863,
	864, 866, 867, 0, 0, 0, 0, 857, 858, 0,
	877, 878, 879, 887, 888, 889, 0, 0, 0, 0,
	0, 0, 0, 880, 0, 0, 0, 865, 0, 876,
	860, 0, 0, 891, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1526, 885, 884, 892, 0, 0,
	0, 0, 0, 0, 859, 0, 0, 0, 0, 0,
	874, 0, 890, 0, 0, 0, 857, 858, 0, 877,
	878, 879, 887, 888, 889, 0, 882, 0, 0, 1541,
	0, 0, 875, 0, 0, 0, 0, 0, 0, 860,
	0, 0, 891, 0, 0, 0, 0, 0, 0, 1536,
	0, 0, 0, 0, 0, 0, 0, 881, 0, 0,
	0, 865, 883, 859, 0, 871, 872, 873, 886, 874,
	870, 868, 869, 861, 862, 863, 864, 866, 867, 0,
	884, 892, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 890, 0, 0, 0,
	0, 0, 0, 0, 0, 876, 0, 0, 0, 0,
	882, 0, 0, 0, 0, 0, 875, 0, 0, 0,
	865, 885, 1537, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 884,
	892, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 882,
	0, 0, 0, 0, 0, 875, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 883, 876,
	0, 871, 872, 873, 886, 0, 870, 868, 869, 861,
	862, 863, 864, 866, 867, 885, 0, 0, 1532, 1533,
	1534, 0, 0, 1531, 1529, 1530, 1522, 1523, 1524, 1525,
	1527, 1528, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 876, 0,
	0, 1008, 1000, 1025, 992, 1016, 1015, 0, 0, 994,
	993, 0, 0, 0, 885, 1027, 1026, 0, 0, 0,
	0, 0, 883, 0, 0, 871, 872, 873, 886, 0,
	870, 868, 869, 861, 862, 863, 864, 866, 867, 0,
	0, 0, 0, 0, 0, 0, 0, 1021, 0, 1013,
	1012, 0, 0, 0, 0, 0, 0, 0, 0, 1011,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1010, 0, 0,
	0, 883, 0, 0, 871, 872, 873, 886, 0, 870,
	868, 869, 861, 862, 863, 864, 866, 867, 0, 0,
	0, 0, 0, 0, 0, 1003, 1002, 1004, 1005, 1006,
	0, 1024, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 996, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1014, 0, 0, 0, 1001, 0, 1008, 1000, 1025, 992,
	1016, 1015, 0, 0, 994, 993, 0, 0, 0, 0,
	1027, 1026, 0, 0, 0, 0, 0, 0, 0, 0,
	477, 0, 0, 1009, 0, 0, 0, 1173, 1171, 1172,
	1175, 1174, 0, 0, 0, 0, 0, 0, 482, 0,
	0, 0, 1021, 0, 1013, 1012, 0, 0, 0, 0,
	483, 0, 0, 997, 1011, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1007, 998, 0, 0, 0, 0,
	0, 484, 1010, 0, 1029, 0, 485, 0, 0, 0,
	0, 490, 491, 0, 0, 501, 995, 0, 0, 1022,
	1023, 0, 0, 0, 0, 0, 0, 480, 486, 0,
	1003, 1002, 1004, 1005, 1006, 0, 1024, 0, 0, 0,
	0, 999, 0, 0, 0, 0, 1028, 0, 0, 0,
	504, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 996, 0, 0, 0, 0, 487, 0,
	0, 0, 0, 0, 0, 1014, 0, 0, 0, 1001,
	0, 0, 488, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	492, 496, 0, 0, 0, 0, 0, 0, 1009, 0,
	0, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 997, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1007,
	998, 0, 0, 0, 0, 0, 0, 0, 0, 1029,
	0, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 995, 0, 0, 1022, 1023, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 999, 495, 497, 479,
	0, 1028, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 498, 0, 0, 0, 503, 0, 0, 0,
	499, 0, 0, 0, 0, 481, 500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 502,
}
var sqlPact = [...]int{

	29320, -1000, 28, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 707, 17557, 17557, 940,
	21883, -1000, -1000, -1000, -1000, -1000, -1000, 762, 976, 657,
	317, 5503, 21883, 21883, 21574, 1265, 1213, 1211, 1265, 23428,
	-1000, -1000, 27445, -1000, 31326, 495, 497, 495, 495, 496,
	23428, 1184, 636, 14429, 866, 143, -1000, 817, 27, 27136,
	21883, 1530, 21, 19720, 228, 29320, 21265, 26827, 21883, 20956,
	588, 19, 18175, 21883, -1000, 30, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1336, 11184, 11184, 348, 30, -1000,
	1332, 1226, 1224, 19720, -1000, -1000, -1000, -1000, -1000, 26518,
	26209, 25900, 25591, 25282, -1000, 13143, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 845,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 299, 297, -1000, 20647, -1000, 1028, -1000, 20, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11184, 11184, 1026,
	-1000, 21883, -1000, -1000, 24973, 24664, 670, 295, 971, -1000,
	-1000, 544, 389, -1000, -1000, 14108, 34, -1000, -1000, -1000,
	-1000, 1353, 1532, 17248, 958, 1326, -1000, 1020, 1325, 1324,
	1323, 1322, 1321, -1000, 791, 634, 517, -1000, 1320, 382,
	915, 465, -1000, 1319, 1311, 971, -1000, 971, -1000, -1000,
	-1000, 579, 23428, -1000, -1000, -1000, -1000, -1000, 19720, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1753,
	-1000, -1000, -1000, -1000, 1749, -1000, -1000, -1000, -1000, 24355,
	21883, 21883, 1243, 24046, -1000, 817, -1000, -1000, -1000, 1153,
	1529, 1529, 1529, 1563, 125, 109, 143, 17, 21883, -1000,
	293, 17, 9513, 9513, -1000, -1000, 228, -1000, 97, 16618,
	-1000, 7843, -1000, 809, 1439, 456, 858, 1436, -136, 830,
	805, 1435, 17248, 18175, 19, -31, -1000, -1000, -1000, 5182,
	17248, 30763, -1000, 11184, 11184, 11184, 11184, 11184, 917, 327,
	-1000, 292, 289, 6493, -1000, -1000, 1743, -1000, -1000, -1000,
	134, -1000, -1000, 11184, 30, -1000, -1000, -1000, -1000, 287,
	1766, -1000, 473, -1000, -1000, -1000, 401, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1352, 285, 284, -1000,
	-1000, -1000, -1000, 281, 273, 272, 271, 261, 253, 252,
	251, 249, 244, 242, 240, 237, 236, 235, 879, -1000,
	420, -1000, -1000, 420, 420, -1000, 220, 220, 221, -1000,
	-1000, -1000, -1000, 220, -1000, -1000, -1000, 378, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 230, 30763, 691, 15678, 30,
	-1000, -1000, -1000, 19720, 21883, 21883, 751, 23737, -1000, 1433,
	121, 1432, -1000, 112, 1430, -1000, 112, 1428, -31, 1424,
	16, -1000, -1000, 228, 20338, 21883, 1612, 31269, -1000, 11184,
	-1000, -1000, 17557, 1209, 30763, 30763, 17557, -1000, -1000, 1609,
	-1000, 21883, 11184, 18, -1000, -1000, -1000, -1000, 1141, 1238,
	520, 13787, 13466, 1485, 892, -1000, -1000, -1000, 33, 5503,
	212, 743, -1000, -1000, -1000, 20029, -1000, -1000, 21883, 1350,
	17557, 21883, 21883, 21883, 21883, 21883, -1000, -1000, -1000, 503,
	1347, 21883, -1000, 1139, -1000, -1000, 21883, 21883, 793, 633,
	-1000, 18, -1000, 23428, -1000, 126, -1000, -1000, -1000, -1000,
	226, 1112, 403, 113, 23119, 403, 1109, -1000, 1153, -1000,
	1033, 1231, 10182, 1192, 11184, 143, -1000, -1000, 143, 143,
	11184, -1000, -1000, 21883, 17, 1608, 21883, 136, -1000, 29962,
	-1000, 136, -1000, -1000, -1000, 21883, 14, -1000, 30763, -1000,
	-44, 786, -1000, 19102, 1509, 1506, 1507, 19720, 1584, 27,
	1309, 1576, 27, 1306, 574, 21883, 21883, 572, 571, 19720,
	330, -1000, 21883, -1000, -1000, 15, -1000, 31114, 31269, 5503,
	609, 11184, 11184, 11184, 11184, 11184, 11184, 11184, 11184, 11184,
	11184, 11184, 11184, 11184, 11184, 11184, 11184, 11184, 11184, 11184,
	11184, 11184, 11184, 1234, 11184, 570, 11184, 11184, 11184, 11184,
	1119, 898, 204, 982, -1000, 1744, 1744, 1744, 30906, 30906,
	192, 327, -1000, 11184, -1000, 9848, 109, 28989, 6, -1000,
	-1000, -1000, 7496, 418, 30763, 30, 6158, -1000, 1740, 1022,
	1360, 1283, 224, 107, 106, 11184, 11184, 11518, 11518, 11184,
	11852, 11184, 11184, 6827, 11184, 11184, 11184, 11184, 11184, 11184,
	-1000, 223, -1000, -1000, -1000, -1000, 1738, -1000, -1000, 1728,
	-1000, 607, 596, 1723, -1000, 1304, 3, -1000, -1000, 412,
	86, 1601, 86, 15992, -1000, 21883, 21883, -1000, 21883, -1000,
	-1000, 21883, -1000, 21883, 21883, -1000, 21883, 21883, 212, 18484,
	726, 1423, 650, 212, 2, -1000, 1616, -1000, -1000, -1000,
	-1000, 88, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	221, 879, 220, 220, 220, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 378, -1000, -1000, 420, 420, 420, -1000, -1000,
	1, 30763, 569, -1000, 1302, 470, -1000, 388, -5, 971,
	924, -1000, -1000, -1000, -1000, -1000, -1000, -13, -1000, -1000,
	-13, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1765, 5503, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 21883,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 212, -1000, -1000,
	-1000, -1000, 21883, 21883, 21883, -1000, -1000, 19720, 18793, 1599,
	1421, 907, -1000, 1597, 21883, 1001, 1088, -1000, 628, 1407,
	-1000, -1000, -1000, -1000, 30763, -1000, 366, -1000, -1000, 30763,
	779, 1232, -1000, 1232, -30, -1000, 29749, -1000, 217, -14,
	412, 9513, 15365, 5503, -1000, 412, 104, 7843, -1000, 726,
	21883, 21883, 21883, -1000, -1000, 1086, 22810, 1083, 31269, 21883,
	-1000, 216, 215, 1183, 1180, 21883, 21883, 22501, 22192, 21883,
	723, 27, -1000, 213, 27, -1000, 211, 21883, 801, -1000,
	21883, 21883, 800, 1266, 1036, -1000, 407, 17248, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 381, 911,
	911, 568, 568, 568, 568, 1733, 2719, 472, 862, 4060,
	4060, 4060, 346, 214, 214, 4060, 4060, 4060, 30906, 30847,
	156, 11184, 11184, 567, 896, 204, 156, 11184, 156, 156,
	156, 156, -1000, 1204, -1000, -1000, -1000, -1000, 1301, 203,
	11852, 11852, -1000, -1000, -1000, 6493, 12186, -1000, -1000, -1000,
	-1000, 202, 11184, -1000, 29323, -194, -33, -1000, -1000, 11184,
	-116, -128, -1000, -1000, 642, -1000, 11184, -1000, 9, 11184,
	11184, 11184, 103, 102, -1000, 562, -1000, 561, 552, 549,
	-1000, 200, 929, 198, 194, 11184, -1000, -1000, 30637, 4119,
	96, 1298, -93, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	95, 93, 30511, -93, 92, 3690, -1000, 11852, 11852, 11852,
	6493, 191, 90, 29716, -93, 30427, 9179, 9179, 9179, 84,
	30301, 11184, -93, 3926, 3716, 3662, -34, -40, -45, 1719,
	-51, 83, 373, 367, 82, 689, 1296, 21883, 778, 11184,
	831, -1000, 15052, 430, 21883, 778, 91, -1000, -1000, -1000,
	358, 21883, -1000, -1000, -1000, 121, -1000, 112, 112, -31,
	-1000, -1000, 19720, -1000, -1000, 31269, 321, 316, -1000, 1715,
	-1000, 11184, 21883, 21883, 1210, -1000, -1000, -1000, 706, -1000,
	869, -1000, 14429, -1000, -76, -1000, -1000, -1000, -1000, 330,
	-1000, 78, -52, -38, 31269, -1000, -1000, -1000, -1000, -1000,
	21883, 290, 21883, 27, 21883, -1000, 1762, 27, 21883, 1400,
	1445, 343, 21883, 779, -1000, 11184, 1706, -1000, -1000, -1000,
	11184, -1000, -1000, -1000, 212, -1000, 1280, -1000, -105, 1270,
	320, -174, 89, 352, -1000, 14739, -1000, 1280, -1000, -1000,
	-1000, -1000, 548, 546, 1394, -1000, 1079, -1000, 440, -1000,
	703, 11184, 12830, 190, 188, 891, -1000, 1393, 1023, 1387,
	1023, -1000, -44, 731, -1000, 11184, -1000, 11184, -1000, 542,
	-1000, -1000, 540, 407, 1295, 641, -1000, 974, -1000, 11184,
	156, 156, 11184, 11852, 11852, -1000, 156, -1000, -1000, -1000,
	-1000, -1000, 1294, 185, 11184, 31269, 29833, 29364, -53, -1000,
	8845, -50, -1000, 11184, -1000, 28961, -1000, -1000, 315, 1443,
	-1000, 11184, 30172, 75, 8511, -1000, 30088, -20, -20, -1000,
	1760, 1124, 1076, 870, 761, 1704, -1000, 16305, 414, 959,
	28933, 31114, 31269, -1000, 11184, -1000, -1000, 1292, 11184, -1000,
	31114, 31269, 11852, 11852, 11852, 11852, 11852, 11852, 11852, 11852,
	11852, 11852, 11852, 11852, 11852, 11852, 11852, 11852, 11852, 11852,
	11852, 1195, 11852, 1722, 1722, 1722, -63, 8177, -1000, 1344,
	1292, 11184, 11184, 31269, 74, 73, 71, -1000, 11184, -93,
	11184, 11184, 11184, -1000, -1000, -1000, 69, -1000, 1702, -1000,
	-1000, -1000, -1000, -1000, 669, -1000, -1000, 7161, 30763, -1000,
	778, 1511, -67, -1000, -1000, -1000, 412, 15992, 15365, 7843,
	-69, -1000, -1000, -1000, 726, -1000, 527, 1698, 68, 30763,
	-76, -76, -1000, -1000, -1000, -1000, -1000, 21883, -1000, 1245,
	-1000, 18793, 183, 21883, 182, -1000, 181, -1000, -1000, 180,
	21883, 1157, 343, 17866, -1000, 403, 980, 28905, -1000, 64,
	1275, 1562, -1000, 15365, 1206, 1199, 15365, 1087, 936, 936,
	936, -1000, 179, 309, 352, 4526, 11184, 19411, 979, 49,
	63, 1270, 1275, 21883, 21883, 21883, 1377, -1000, 2161, -1000,
	28571, -83, -1000, 314, 1536, 11184, -1000, -1000, 177, 12830,
	21883, -1000, 1175, 1248, 481, 21883, -1000, 21883, -1000, 21883,
	21883, 21883, -84, -85, 21883, 21883, -1000, 17248, 594, 176,
	1568, 156, 3292, 2326, 11184, 31269, 2635, -95, 11184, 11184,
	-1000, -96, -1000, 11184, 307, 30763, -1000, -1000, -1000, 30763,
	11184, 1757, 11184, 60, 58, 56, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 55, -1000, -1000, 27754, 11184, 54,
	-1000, 53, 50, 30763, 1344, 30763, -1000, -1000, 714, 714,
	644, 644, 644, 644, 1722, 2074, 2248, 945, 656, 656,
	656, 741, 462, 462, 656, 656, 656, 1289, 1151, 173,
	30780, 11184, -97, -1000, -1000, -1000, 30763, 30763, 48, -1000,
	-1000, -1000, -93, 3258, 28543, 28515, -1000, 47, -1000, -80,
	-1000, -1000, 201, 27, 778, -1000, -81, -1000, 347, -1000,
	306, 304, -1000, -1000, -1000, 1250, -1000, 12830, 172, 21883,
	18793, 1590, 12830, 992, 1152, 343, 17866, -1000, 628, -1000,
	-1000, -1000, 410, 11184, 11184, 1270, 15365, 15365, 1155, 1185,
	15365, -1000, -1000, -1000, -1000, 301, 371, 352, 19411, -1000,
	1693, 1178, -101, -1000, -1000, 21883, 169, -1000, 352, 410,
	-1000, -1000, -1000, 21883, -1000, 21883, -1000, 5503, 21883, 1279,
	1074, -1000, -1000, 1174, 167, 11852, 21883, -1000, 856, 12830,
	1522, 30, 5503, 1522, 28487, 6158, -103, -107, 1071, -1000,
	1054, 11184, -1000, 31269, 1023, 1023, -1000, 537, 533, 529,
	528, -1000, -1000, -82, 16939, 1759, 11184, 11184, 2635, -108,
	-1000, 156, 156, -1000, 28153, -1000, 30763, -1000, 30088, -1000,
	-1000, -1000, -1000, 909, -1000, 28125, -1000, -1000, -1000, -1000,
	11852, 1284, 166, 31269, 28097, -1000, -1000, 11184, -1000, -1000,
	-1000, 1452, 21883, 1496, -1000, -1000, 163, -1000, -1000, 923,
	-119, 12830, -123, 45, 27, -131, 21883, -1000, 343, 17866,
	-1000, 1445, -1000, 21883, 30763, -93, -1000, 1155, -1000, 162,
	11184, 15365, -1000, -174, -1000, -138, -1000, 19411, -1000, 157,
	-191, -1000, 342, -1000, 352, 161, 21883, 19411, -1000, -1000,
	1546, -1000, -1000, 21883, 1078, -1000, -1000, 11184, 30780, 159,
	1245, 158, -1000, -1000, -1000, -1000, -1000, -1000, 1536, 9,
	-1000, 850, -1000, -1000, 30763, 1535, -1000, -1000, 21883, 21883,
	155, 154, -1000, 153, 30, -143, -1000, 341, 156, 156,
	-1000, -1000, 41, 959, 1554, -1000, 30373, 11852, 31269, -144,
	-1000, 28069, 591, -148, 21883, -1000, -1000, 5824, 21883, 856,
	-149, -1000, 1245, -1000, 856, 141, 17866, -1000, 1157, -92,
	-1000, 1588, -1000, 21883, 30763, -1000, 352, -1000, 1690, -1000,
	-1000, 1178, -1000, 4858, 19411, 21883, -153, -1000, -1000, -1000,
	1375, 274, 1128, 21883, -1000, 21883, 1522, 39, 21883, 447,
	5503, -1000, -1000, 11184, 11184, 11184, 1759, -1000, -1000, 1758,
	-1000, 799, 11184, 30373, -155, -1000, -1000, 747, -1000, 412,
	-1000, 135, 1245, 856, -1000, 1245, 12830, -1000, 1152, 21883,
	129, -159, 19411, -1000, -1000, -1000, 1661, -1000, -163, -1000,
	1367, -1000, 985, 904, 38, -164, -1000, -1000, 113, -1000,
	11184, -1000, -168, -169, -20, -1000, -1000, 37, 10850, 10850,
	-93, -1000, 15992, -1000, 21883, -1000, 1245, -1000, -178, -1000,
	-1000, -1000, -1000, -1000, 137, -1000, 21883, -1000, 987, 986,
	664, -1000, -1000, -1000, -1000, -1000, 1128, 30763, -1000, -1000,
	36, -1000, -1000, -1000, 12509, 1011, 768, 29486, -1000, -154,
	-184, -1000, 856, -1000, -1000, -1000, 1466, -1000, 454, 1111,
	1111, 985, 1757, 1636, -1000, -1000, -1000, -1000, -1000, -1000,
	1003, 1245, -1000, 1643, -1000, -1000, 1143, -1000, -1000, 10516,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2019, 2016, 1580, 1752, 2015, 2014, 2013, 1741, 2012,
	2008, 2004, 2003, 2002, 2001, 1719, 1998, 1693, 1683, 1650,
	1997, 117, 1996, 1990, 1989, 1635, 1988, 1987, 1986, 1979,
	1977, 1975, 106, 1972, 1971, 1615, 1610, 1583, 1563, 1970,
	1965, 1558, 1963, 1961, 19, 1959, 79, 1956, 48, 144,
	2561, 133, 1955, 1954, 1951, 28, 110, 64, 1949, 231,
	1948, 1947, 56, 20, 24, 21, 1946, 95, 1945, 1942,
	1394, 43, 1939, 1933, 136, 1932, 25, 22, 188, 149,
	141, 124, 122, 1931, 1930, 1928, 1927, 51, 1926, 1,
	1924, 1922, 11, 75, 17, 1921, 78, 6, 1919, 1917,
	130, 1912, 72, 104, 1550, 134, 128, 303, 1911, 69,
	10, 65, 1909, 1906, 154, 46, 1904, 33, 82, 137,
	1903, 49, 156, 50, 32, 61, 121, 1902, 1900, 1899,
	101, 1896, 118, 98, 1893, 1891, 77, 1888, 139, 132,
	1884, 1883, 91, 1882, 135, 1880, 1879, 138, 157, 1878,
	148, 1877, 1875, 155, 115, 8, 42, 67, 9, 1545,
	1544, 125, 76, 31, 16, 1873, 2222, 973, 771, 40,
	102, 68, 45, 108, 59, 73, 143, 29, 1871, 1870,
	129, 1867, 1866, 1864, 1861, 1853, 103, 1847, 1842, 62,
	142, 13, 26, 30, 85, 35, 97, 83, 150, 147,
	112, 1841, 92, 119, 1833, 152, 1831, 1826, 1491, 123,
	1824, 1820, 1819, 1434, 1347, 940, 881, 1816, 1815, 879,
	27, 1814, 1813, 70, 1812, 116, 111, 1811, 146, 283,
	57, 1810, 120, 36, 96, 1809, 109, 58, 0, 730,
	184, 1804, 126, 86, 1803, 1802, 1797, 1796, 23, 3,
	14, 4, 12, 5, 37, 34, 1795, 1794, 131, 113,
	66, 1793, 151, 1791, 1789, 1788, 47, 1787, 15, 1786,
	18, 1785, 1783, 7, 2, 1782, 1781, 140, 1778, 99,
	1775, 1573, 1774, 145, 1773, 1772, 1689, 44, 105,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 57,
	57, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 54, 54, 59, 59,
	59, 61, 61, 58, 58, 53, 53, 5, 5, 236,
	236, 237, 237, 43, 43, 47, 47, 44, 45, 45,
	46, 46, 7, 7, 7, 6, 6, 8, 8, 8,
	8, 8, 8, 15, 16, 16, 16, 16, 16, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 106,
	106, 105, 105, 108, 108, 18, 18, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	204, 204, 203, 20, 178, 178, 22, 131, 131, 23,
	23, 23, 23, 24, 31, 277, 277, 277, 281, 281,
	282, 282, 283, 283, 283, 283, 283, 283, 283, 279,
	279, 29, 29, 29, 29, 42, 34, 34, 34, 34,
	34, 34, 151, 148, 148, 147, 147, 147, 147, 149,
	149, 149, 149, 152, 152, 86, 86, 229, 228, 228,
	234, 234, 234, 84, 84, 84, 84, 84, 85, 85,
	85, 227, 227, 227, 227, 235, 235, 235, 235, 235,
	235, 233, 233, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 19, 278, 278, 280, 280, 26, 36,
	36, 37, 37, 38, 38, 38, 38, 11, 11, 12,
	12, 87, 87, 88, 88, 157, 157, 157, 157, 89,
	89, 60, 60, 60, 156, 246, 246, 247, 247, 247,
	247, 247, 247, 248, 248, 248, 248, 248, 248, 248,
	244, 244, 245, 242, 242, 243, 243, 243, 243, 284,
	284, 155, 155, 92, 92, 251, 251, 251, 251, 249,
	249, 249, 249, 249, 252, 250, 253, 253, 253, 253,
	253, 190, 190, 190, 40, 13, 66, 66, 14, 10,
	10, 135, 135, 96, 96, 195, 195, 195, 77, 77,
	55, 55, 55, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 136, 136, 137, 137, 27, 30,
	33, 39, 39, 39, 39, 39, 286, 286, 73, 73,
	73, 73, 74, 74, 150, 150, 153, 153, 154, 154,
	154, 68, 67, 69, 69, 9, 9, 62, 62, 63,
	63, 64, 64, 65, 65, 287, 287, 25, 25, 25,
	80, 80, 144, 144, 144, 146, 146, 145, 145, 145,
	121, 121, 121, 41, 101, 101, 110, 110, 111, 111,
	201, 112, 112, 32, 32, 50, 50, 48, 48, 48,
	48, 48, 48, 49, 49, 51, 51, 51, 51, 51,
	51, 51, 259, 259, 259, 262, 262, 258, 260, 260,
	261, 261, 285, 285, 122, 122, 122, 91, 90, 90,
	94, 94, 93, 95, 95, 194, 119, 119, 119, 119,
	138, 138, 139, 139, 140, 140, 141, 141, 141, 142,
	142, 143, 143, 118, 118, 174, 174, 52, 52, 100,
	100, 102, 102, 164, 164, 164, 165, 165, 163, 163,
	163, 163, 196, 196, 196, 196, 196, 196, 196, 275,
	275, 275, 276, 276, 193, 193, 197, 197, 197, 197,
	197, 197, 191, 191, 191, 191, 192, 192, 202, 202,
	125, 125, 125, 125, 123, 123, 124, 124, 198, 198,
	198, 198, 120, 120, 199, 199, 199, 158, 158, 205,
	205, 205, 223, 223, 99, 99, 99, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 207, 207, 207, 207, 209, 209,
	209, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 222, 222, 222, 222, 222,
	210, 210, 217, 217, 218, 218, 219, 220, 211, 211,
	212, 212, 213, 214, 221, 221, 221, 221, 225, 225,
	215, 215, 215, 215, 215, 216, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	133, 133, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 168, 168, 168, 168, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 254,
	254, 254, 254, 254, 254, 254, 256, 256, 257, 257,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 263, 263, 264,
	264, 266, 266, 267, 267, 268, 269, 269, 269, 270,
	271, 271, 265, 265, 272, 272, 272, 273, 273, 274,
	274, 274, 274, 274, 180, 180, 180, 181, 181, 182,
	188, 188, 188, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 75,
	75, 75, 75, 75, 107, 107, 177, 177, 175, 175,
	175, 179, 179, 126, 126, 224, 224, 224, 224, 224,
	224, 224, 127, 127, 127, 134, 128, 128, 129, 129,
	129, 129, 129, 129, 171, 172, 130, 130, 130, 173,
	173, 183, 187, 187, 186, 185, 185, 184, 184, 161,
	161, 162, 162, 160, 159, 115, 115, 114, 114, 113,
	113, 288, 288, 189, 189, 116, 116, 117, 109, 109,
	200, 200, 200, 200, 103, 103, 82, 82, 104, 104,
	78, 78, 81, 81, 79, 79, 79, 79, 97, 97,
	98, 98, 76, 76, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 226, 226, 226, 176, 70,
	70, 70, 71, 71, 72, 72, 231, 231, 231, 232,
	232, 232, 232, 230, 230, 230, 230, 230, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 4, 6, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 7, 6, 1,
	1, 1, 3, 3, 0, 2, 0, 2, 1, 3,
	5, 0, 4, 6, 7, 3, 3, 1, 1, 1,
	1, 1, 1, 6, 2, 2, 2, 2, 2, 3,
	5, 4, 6, 4, 6, 4, 6, 3, 5, 1,
	3, 1, 2, 2, 3, 2, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 5, 3, 0, 3, 3, 0, 2,
	3, 2, 3, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 2, 2, 2, 2, 2, 3, 6, 3,
	4, 1, 5, 2, 1, 3, 3, 3, 3, 1,
	3, 3, 1, 2, 2, 1, 0, 1, 1, 3,
	1, 1, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 2, 3,
	4, 4, 4, 4, 2, 4, 4, 4, 4, 4,
	4, 2, 3, 3, 3, 4, 4, 5, 2, 3,
	3, 4, 2, 3, 4, 3, 3, 4, 4, 2,
	5, 5, 6, 2, 2, 0, 2, 0, 3, 6,
	6, 5, 5, 4, 12, 4, 12, 7, 10, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 3, 2, 0, 3, 1, 2,
	2, 3, 6, 2, 1, 1, 2, 4, 2, 5,
	7, 8, 5, 3, 1, 4, 6, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 5, 2, 0, 6, 11,
	14, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 6, 8,
	8, 10, 8, 10, 1, 0, 2, 0, 2, 3,
	2, 3, 3, 2, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 6,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 2, 0, 8, 2, 0, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 1, 1, 8, 8, 1, 2, 4,
	4, 4, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 2, 2, 1, 1,
	2, 5, 2, 3, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 3, 0, 2, 0, 2, 3, 3,
	0, 1, 3, 3, 5, 1, 1, 3, 2, 4,
	4, 0, 7, 4, 6, 3, 1, 5, 5, 0,
	2, 3, 1, 3, 2, 0, 3, 4, 5, 4,
	5, 4, 5, 2, 4, 1, 1, 0, 5, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 1, 1, 3, 4, 0, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 3, 4, 4, 5, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 4, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 4, 1, 1, 1,
	5, 1, 3, 1, 3, 1, 1, 1, 1, 6,
	6, 4, 4, 4, 4, 4, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 4, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 3, 5, 4, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 3, 1, 3, 3, 3,
	2, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 2, 2, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 1, 1, 2, 2, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -8, -15,
	-16, -17, -18, -19, -20, -22, -23, -24, -25, -26,
	-28, -30, -31, -33, -32, -34, -35, -36, -37, -38,
	-39, -27, -29, -40, -41, -42, 23, 34, 232, 47,
	67, -9, -10, -11, -12, -13, -14, -261, 92, 96,
	105, 127, 212, 103, 88, 121, 206, 234, 236, 243,
	-48, -50, 254, -151, 257, 35, 266, 61, 99, 238,
	230, 231, 294, 303, 69, -259, -51, -49, 345, 319,
	326, 247, -52, 275, 311, 348, 275, 136, 81, 314,
	-277, -104, 275, 81, -79, -70, 338, 4, -238, -240,
	20, 21, 23, 33, 34, 35, 40, 44, 47, 48,
	55, 60, 61, 62, 64, 66, 67, 68, 71, 72,
	79, 80, 82, 84, 88, 90, 92, 95, 96, 98,
	103, 104, 105, 111, 112, 115, 117, 122, 127, 128,
	129, 130, 137, 140, 142, 135, 150, 151, 153, 154,
	155, 158, 157, 162, 165, 168, 170, 171, 172, 175,
	173, 177, 178, 180, 179, 185, 187, 188, 190, 193,
	196, 199, 202, 203, 204, 205, 206, 208, 210, 212,
	214, 215, 216, 217, 218, 220, 221, 223, 224, 225,
	226, 227, 230, 228, 229, 231, 232, 233, 234, 236,
	238, 239, 241, 255, 256, 267, 243, 244, 245, 246,
	250, 248, 251, 252, 254, 257, 259, 262, 265, 266,
	268, 271, 269, 264, 274, 276, 277, 278, 279, 280,
	281, 282, 289, 290, 294, 295, 296, 297, 300, 301,
	302, 303, 305, 308, 309, 310, 315, 320, 321, 322,
	323, 324, 28, 36, 37, 38, 39, 41, 42, 45,
	46, 51, 52, 53, 56, 83, 85, 86, 102, 106,
	107, 113, 123, 125, 131, 132, 141, 143, 144, 145,
	147, 160, 174, 184, 186, 197, 201, 209, 211, 219,
	240, 249, 260, 261, 270, 272, 284, 285, 286, 291,
	292, 307, 311, 312, -277, 151, 216, -78, -70, 81,
	90, 140, 302, 301, 22, 208, 248, 277, 279, 81,
	136, 275, 314, 304, -21, 345, -32, -8, -17, -4,
	-25, -41, -15, -35, -19, -36, -37, -38, -18, 23,
	-230, 4, -238, -240, -239, -241, 58, 70, 120, 139,
	133, 149, 152, 161, 163, 176, 198, 200, 237, 258,
	22, 24, 25, 26, 27, 29, 30, 31, 32, 43,
	49, 50, 54, 57, 59, 65, 69, 73, 74, 75,
	76, 77, 78, 87, 89, 91, 93, 94, 97, 99,
	101, 108, 109, 110, 116, 118, 119, 121, 124, 126,
	134, 136, 138, 146, 148, 156, 159, 164, 166, 167,
	181, 182, 183, 189, 191, 192, 194, 195, 207, 213,
	222, 235, 247, 253, 263, 273, 275, 283, 287, 288,
	293, 298, 299, 304, 306, 313, 314, 316, 317, 318,
	319, -70, -70, -70, 212, 22, -281, 22, -282, -283,
	69, 96, 121, 247, 140, 90, 301, 151, 151, -281,
	-74, 243, -70, -148, 165, 251, 55, 240, 290, -149,
	-147, -229, 284, -152, -105, 175, -70, 4, 175, 253,
	81, 289, 22, 34, 55, 60, 82, 122, 136, 137,
	65, 66, 154, 215, 165, 251, 155, 252, 276, 284,
	290, 69, 305, 280, 104, -286, 290, 290, -286, -286,
	-73, 290, 287, -74, 4, 81, 253, 175, -285, 275,
	-234, -227, -190, 9, 293, 108, 191, -233, 8, 337,
	-226, -232, 5, 7, 336, 4, -238, -240, -239, 275,
	304, 314, -135, 81, 299, -49, -51, -50, -93, -94,
	298, 146, 101, 195, -48, -50, -259, -262, 220, -258,
	-70, -262, -90, -91, 22, 93, 349, -198, -78, 192,
	-117, 345, -3, -198, 131, -78, -81, 131, -78, -70,
	-198, 131, 287, 349, -104, -97, -70, -160, -159, 347,
	119, -166, -168, 336, 337, 331, 181, 325, -180, -170,
	-183, 102, 240, 345, -78, -169, 350, 9, -256, -50,
	29, -181, -182, 49, -70, 7, 8, 5, 6, -76,
	-207, -176, -216, 293, 108, 183, -254, -255, 4, -238,
	-231, -208, -218, -212, -215, 147, 58, 74, 77, 75,
	78, 253, 304, 50, 28, 106, 107, 201, 209, 272,
	291, 292, 131, 184, 132, 56, 123, 160, 95, 37,
	39, 41, 42, 51, 52, 83, 85, 86, 113, 141,
	143, 144, 145, 186, 219, 260, 270, 285, 286, 312,
	-239, -219, -220, -213, -214, -221, -166, 119, 345, -114,
	-115, -159, -160, 119, 148, 148, -199, -198, -70, 131,
	-82, 131, -81, -106, 131, -105, -106, 131, -97, 131,
	-204, -203, -232, 311, 275, 136, -178, 345, -131, 345,
	-70, 22, 191, 349, -166, -166, 191, -70, -148, 53,
	-148, 255, 345, -153, -154, -67, -68, -69, 150, 214,
	218, 287, 330, 119, 324, -234, -86, 87, -108, 347,
	116, 55, -236, -233, 9, 255, 215, 252, 119, -278,
	191, 119, 119, 119, 119, 119, 215, 252, 289, 155,
	289, 119, 324, 150, 214, 267, 275, 314, 119, 119,
	-150, -153, -150, 287, -74, -120, -198, 8, 7, 7,
	-105, 131, -70, -105, 136, -70, 131, -93, -94, -119,
	-138, -139, 164, 110, 189, -122, 22, 93, -122, -122,
	44, 346, 346, 349, -262, -98, 345, -109, -200, -166,
	338, -109, -117, 338, -78, 345, -116, -189, -166, 87,
	-57, 228, -56, 21, 23, 96, 309, 102, 264, 281,
	244, 264, 281, 244, 228, 102, 350, 228, 228, 102,
	-236, -79, 349, -230, 338, -237, -236, 10, 11, 57,
	33, 336, 337, 338, 339, 114, 340, 341, 334, 335,
	333, 328, 329, 330, 63, 169, 242, 13, 14, 15,
	26, 194, 163, 325, 133, 258, 331, 16, 17, 18,
	149, 36, 134, -75, -83, -166, -166, -166, -166, -166,
	200, -113, -161, 343, -50, 345, -50, -166, -107, 7,
	-50, -175, 343, -184, -166, -114, 345, 5, 345, 5,
	-263, 320, 116, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	211, -225, 315, -225, -225, -209, 345, -209, -210, 345,
	-209, 321, 326, 345, 268, 346, -103, -78, -115, -199,
	-80, -78, -80, 254, -70, 30, 102, -59, 349, 48,
	233, 102, -59, 349, 102, -59, 102, 102, 346, 349,
	-198, 131, -81, 30, -177, -205, -206, -208, -217, -211,
	-215, -216, 40, 46, 45, 282, 174, 249, 261, 307,
	38, 190, 142, 141, 143, 144, 145, 260, 37, 219,
	113, 95, 86, 85, 186, 42, 41, -219, -220, -213,
	-214, 83, 285, 286, 147, 39, 52, 51, 312, 270,
	-107, -166, -277, -283, -277, 30, -147, -229, -107, 349,
	162, -85, 168, 180, 128, 192, 322, -228, 87, -234,
	-228, 87, 72, -235, 5, 4, -176, -190, 87, 165,
	-216, 347, -230, -21, 256, -105, 22, -229, -280, 116,
	-277, -229, -229, -229, -229, -229, 289, 116, -70, 162,
	-229, -229, 275, 136, 275, -74, -59, 349, 345, -92,
	181, -260, 319, -92, 345, -71, 131, -70, -260, 181,
	-119, -139, -138, -140, -166, 22, -143, 112, 177, -166,
	-168, -49, -49, -49, -95, -194, -166, -258, 30, -97,
	-100, 349, 119, 30, 4, -100, -78, 349, 346, 349,
	287, -136, 65, 59, -156, 131, 59, -242, -70, 65,
	-243, 54, 299, 213, 118, -136, 65, -136, 65, 65,
	-198, 33, -32, 119, 33, -32, 119, 287, -81, -70,
	287, 287, -198, -202, 327, -70, -202, 349, -223, -205,
	-222, 224, 225, 223, 227, 226, -205, -230, 284, -166,
	-166, -166, -166, -166, -166, -166, -166, -166, -166, -166,
	-166, -166, -166, -166, -166, -166, -166, -166, -166, -166,
	-166, 163, 133, 258, 36, 134, -166, 287, -166, -166,
	-166, -166, 173, 181, 183, 293, 108, 300, 93, 187,
	-288, 273, 32, -173, -50, 345, -188, 27, 263, 22,
	-180, 240, 345, -161, -166, -162, -107, 346, 346, 349,
	-107, -179, 344, -175, -187, -186, 316, 346, -107, 313,
	22, 93, 338, 7, -132, 323, 172, 84, 129, 171,
	-133, 246, -264, 111, 124, 345, 346, 346, -166, -166,
	-126, -224, -107, 4, 323, 172, 84, 129, 171, 246,
	-126, -127, -166, -107, -128, -167, -168, 336, 337, 331,
	345, 240, -129, -166, -107, -166, 43, 159, 288, -130,
	-166, 119, -107, -166, -166, -166, -107, -107, -107, 345,
	7, 7, 284, 284, 7, 119, 346, 349, -158, 317,
	-144, -32, 345, 87, 30, -144, -110, -111, -201, -112,
	-78, 345, -70, -70, -81, -82, -105, -106, -106, -97,
	-21, -203, 102, -21, 346, 349, -99, 29, -132, 345,
	346, 349, 287, 119, 290, 346, -154, -84, 218, 262,
	229, 250, 349, -230, -279, -70, -21, -78, -81, -78,
	-198, -87, -97, -88, -70, -157, -156, -244, -245, -242,
	136, 299, 109, 30, 102, -66, 205, 30, 191, 181,
	-62, 278, 102, -141, -226, 345, 337, -142, 240, 241,
	349, -55, 31, 91, 345, 346, -158, -200, -102, -196,
	343, -198, -78, -50, -197, 345, -230, -158, 346, -189,
	-56, -78, -70, -70, 181, -156, 131, -61, 181, -205,
	-70, 345, 345, 153, 153, -70, -70, 131, -70, 131,
	-70, -70, -57, 228, -32, 345, -32, 345, -70, 228,
	-70, -78, 228, -43, 130, 187, -46, 319, -236, 324,
	-166, -166, 287, -288, 273, -173, -166, 173, 183, 293,
	108, 300, 93, 187, 119, 345, -167, -167, -107, -170,
	345, -107, 344, 353, 346, -166, 344, 344, 349, -185,
	-186, 97, -166, -94, 349, -93, -166, -107, -107, 346,
	346, 287, 287, 287, 287, 345, -269, 199, 345, 345,
	-166, 30, 349, 346, 119, 346, 346, -134, 207, 346,
	10, 11, 336, 337, 338, 339, 114, 340, 341, 334,
	335, 333, 328, 329, 330, 63, 169, 242, 13, 14,
	15, 149, 134, -167, -167, -167, -107, 345, 346, -171,
	-172, 119, 116, 30, -130, -130, -130, 346, 119, -107,
	349, 349, 349, 346, 346, 346, 7, 346, 349, 346,
	324, 324, 346, 268, 119, -78, -121, 235, -166, -121,
	-146, 191, -103, 311, -70, -121, -101, 349, 119, 330,
	-103, -59, -59, -59, -198, -205, 343, 343, 7, -166,
	-279, -279, -67, 297, 62, 218, -234, 349, -202, 346,
	346, 349, -71, 136, -71, -32, -105, 5, -32, -78,
	102, -63, 98, -287, 330, -70, -142, -166, -194, -21,
	-118, 124, -202, 349, 70, -125, 152, 176, 120, 161,
	237, 139, 7, -21, -163, 350, 345, -193, 326, -50,
	-197, -196, -118, 287, 287, 102, 181, 308, -246, -243,
	-166, -96, -195, -70, -257, 345, -254, -255, -76, 345,
	345, -54, 96, 254, -137, 102, -59, 102, -59, 287,
	-136, 65, -107, -107, 287, 287, -46, 119, 274, 193,
	-166, -166, -167, -167, 119, 345, -166, -177, 26, 26,
	346, -107, 346, 349, -162, -166, 346, -175, 99, -166,
	283, 346, 313, -94, -94, -94, 5, 172, 129, 171,
	-133, 171, -133, -133, 7, -270, -70, 345, 317, -93,
	346, -223, -205, -166, -171, -166, -223, -205, -167, -167,
	-167, -167, -167, -167, -167, -167, -167, -167, -167, -167,
	-167, -167, -167, -167, -167, -167, -167, 93, 181, 187,
	-167, 349, -107, 346, -172, -171, -166, -166, -205, 346,
	346, 346, -107, -166, -166, -166, 346, 7, 268, -109,
	182, -121, 64, 346, -158, -111, -102, -189, 346, 344,
	7, 7, 346, -70, -89, 135, -157, 345, -71, 345,
	345, -92, 345, -70, -64, 158, -287, -233, -260, 192,
	346, 346, -174, 126, 44, -196, 152, 152, -196, -125,
	152, -123, 198, -123, -123, -275, 345, 344, -193, -230,
	343, 351, -107, -192, -191, 30, -70, 196, 346, -174,
	-70, -70, -156, 102, -247, 65, -248, 57, 109, 69,
	181, 183, 299, 213, 54, 87, 222, 346, 346, 349,
	-77, -114, 57, -77, -166, 345, -96, -97, 181, 87,
	181, 87, 80, 295, -70, -70, -78, -70, -70, 346,
	346, -70, -78, -237, 284, 345, 26, 26, -166, -177,
	346, -166, -166, 346, -166, 344, -166, 5, -166, 346,
	346, 346, 346, -271, -70, -166, 346, 346, 346, -172,
	119, 93, 187, 345, -166, 346, 346, 349, 346, 346,
	346, -145, 345, 191, -32, -121, 330, 344, 344, 134,
	-96, 345, -97, -87, 30, -96, 191, -65, 157, -287,
	-233, -62, -266, 318, -166, -107, -196, -196, -124, 306,
	191, 152, -196, 344, 346, -276, 7, -193, -192, 7,
	-165, -164, 117, 179, 346, -70, 345, -193, -266, -156,
	-70, -230, -70, 109, 131, 183, 153, 345, -167, -78,
	-155, -284, 68, 271, -195, -55, -230, -55, 346, -107,
	346, 346, 183, 183, -166, -205, -59, -59, 287, 287,
	287, 287, -169, -76, -70, -45, -44, 5, -166, -166,
	346, 346, -94, -265, 204, 346, -167, 119, 345, -177,
	346, -166, 94, -97, 65, -117, -50, 345, 202, 346,
	-96, 346, 346, -32, 346, -78, -287, -233, -63, -267,
	-268, -70, -124, 345, -166, -196, -163, 346, 349, -192,
	344, 349, 352, 330, -193, 345, -97, -191, -248, -71,
	181, -166, -72, 345, -89, 345, -77, -94, 222, -58,
	57, -70, -70, 345, 345, 345, 349, 346, -47, 330,
	346, -94, 44, -167, -177, 346, 346, 301, 182, 346,
	-70, -70, -155, 346, -89, -155, 345, -233, -64, 349,
	30, -97, -193, 7, -164, -230, 343, -192, -97, 346,
	102, 346, -251, 170, -70, -97, -55, 346, -78, -53,
	306, -230, -107, -107, -107, -44, 5, -272, 217, 241,
	-107, 346, 254, -158, 345, -89, -155, -89, -96, -65,
	-268, -270, 346, -191, 7, 346, 109, -249, -252, -250,
	191, 120, 203, 259, 346, 346, -92, -166, 346, 346,
	-94, 346, -273, -274, 36, 296, 72, -166, -273, -110,
	-97, -89, 346, 344, -70, -250, 191, -252, 191, 301,
	90, -251, 346, -274, 210, 115, 240, 210, 115, -158,
	346, -155, -253, 178, 233, 48, 254, -253, -249, 26,
	-60, 48, 233, -89, 20, 183, 87, -274,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 0, 0, 0, 0,
	0, 87, 88, 89, 90, 91, 92, 0, 0, 0,
	461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	433, -2, 0, 171, 0, 377, 0, 377, 377, 381,
	0, 0, 463, 0, 342, 460, -2, 471, 0, 0,
	0, 469, 447, 0, 0, -2, 0, 0, 0, 0,
	0, 145, 0, 1000, 928, 934, 935, 959, 960, 961,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
	1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
	1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108,
	1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118,
	1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
	1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
	1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
	1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158,
	1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
	1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
	1179, 1180, 1181, 1182, 0, 0, 0, 0, 930, 1000,
	0, 0, 0, 0, 94, 95, 96, 97, 98, 0,
	0, 0, 0, 0, 115, 0, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 0,
	253, 973, 974, 975, 976, 977, 1183, 1184, 1185, 1186,
	1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196,
	1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
	1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216,
	1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226,
	1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236,
	1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246,
	1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256,
	1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266,
	1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276,
	1277, 135, 138, 139, 1058, 141, 0, 148, 149, 150,
	152, 153, 154, 155, 156, 157, 158, 0, 0, 0,
	370, 1085, 383, 166, 1033, 1091, 988, 1169, 1112, 174,
	179, 0, 1175, 182, 187, -2, 111, 213, 214, 215,
	216, 217, 218, 0, 0, 0, 224, 255, 0, 0,
	0, 0, 0, 231, 0, 0, 0, 238, 242, 0,
	0, 0, 249, 0, 0, 385, 376, 385, 373, 374,
	375, 378, 0, 368, 161, 162, 163, 164, 0, 462,
	165, 190, 191, 192, 201, 202, 203, 204, 331, 0,
	333, 211, 212, 955, 0, 969, 970, 971, 972, 0,
	0, 0, 0, 0, 341, -2, 443, 444, -2, 0,
	466, 466, 466, 0, 0, 444, 0, 452, 1064, 455,
	941, 453, 0, 0, 468, 467, 0, 448, 548, 0,
	497, 0, 2, 0, 1153, 548, 0, 1153, 933, 0,
	0, 1153, 0, 0, 146, 147, 938, 936, 937, 0,
	0, 85, 652, 0, 0, 0, 0, 0, 0, 744,
	746, 1147, 1169, 0, 748, 749, 0, 751, 753, 754,
	0, 757, 758, 898, 930, 944, 945, 946, 947, 0,
	0, 950, 0, 952, 953, 954, 798, 767, -2, -2,
	942, 584, 585, 586, 587, -2, 1183, 771, 773, 775,
	776, 777, 778, 0, 1131, 1148, 1149, 1165, 1166, 1174,
	1178, 1179, 1153, 1162, 1154, 1143, 1151, 1160, 1006, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	968, 614, 615, 620, 621, 623, 86, 0, 0, 931,
	907, 905, 906, 0, 0, 0, 0, 554, 99, 1153,
	60, 1153, 926, 60, 1153, 109, 60, 1153, 107, 1153,
	0, 130, 132, 1181, 0, 0, 0, 0, 136, 0,
	140, 142, 0, 0, 258, 369, 0, 382, 167, 1142,
	169, 0, 0, 173, 386, 388, 389, 390, 0, 0,
	0, 0, 0, 0, 0, 183, 184, 185, 112, 0,
	461, 0, 219, 69, 70, 0, 232, 239, 0, 257,
	0, 0, 0, 0, 0, 0, 233, 240, 234, 0,
	0, 0, 243, 0, 245, 246, 0, 0, 0, 0,
	371, 384, 372, 0, 380, 60, 552, 332, 957, 956,
	314, 1153, 459, 314, 963, 459, 1153, -2, 0, 439,
	478, 479, 0, 0, 0, 0, 464, 465, 0, 0,
	0, 435, 436, 0, 454, 0, 0, 500, 918, 922,
	923, 500, 498, 549, 550, 0, 0, 915, 913, 914,
	37, 365, 39, 0, 365, 365, 0, 0, 0, 0,
	263, 0, 0, 265, 0, 0, 0, 0, 0, 0,
	539, 929, 0, 903, 904, 539, 71, 0, 0, 0,
	0, 833, 834, 835, 836, 837, 838, 841, 842, 839,
	840, 843, 844, 845, 0, 0, 0, 846, 847, 848,
	0, 0, 850, 0, 852, 0, 0, 0, 0, 0,
	0, 912, 0, 0, 849, 657, 658, 659, 681, 682,
	0, 745, 909, 902, 747, 0, -2, 854, 0, 750,
	755, 756, 0, 0, 897, -2, 0, 949, 0, 649,
	800, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	877, 883, 0, 0, 0, 0, 0, 0, 0, 0,
	599, 617, 628, 625, 624, 601, 0, 600, 598, 0,
	602, 0, 0, 0, 82, 0, 0, 924, 908, 558,
	0, 410, 0, 0, 555, 0, 0, 101, 0, 58,
	59, 0, 103, 0, 0, 105, 0, 0, 461, 0,
	0, 1153, 0, 461, 0, 856, 566, 567, 568, 569,
	570, 649, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 591, 592, 593, 594, 595, 596, 597,
	611, 0, 590, 590, 590, 603, 604, 612, 613, 618,
	619, 630, 631, 633, 635, 629, 629, 629, 626, 627,
	0, 854, 0, 151, 0, 0, 170, 0, 0, 0,
	0, 391, 198, 199, 200, 393, 394, 175, 177, 188,
	176, 178, 180, 181, 205, 206, 207, 208, 209, 210,
	0, 0, 113, 236, 222, 220, 221, 223, 225, 0,
	254, 226, 227, 228, 229, 230, 235, 461, 241, 244,
	247, 248, 0, 0, 0, 379, 334, 0, 272, 0,
	0, 337, 458, 0, 0, 0, 1153, 962, 398, 0,
	442, 476, 477, 480, 484, 485, 488, 491, 492, 482,
	652, 449, 450, 451, 472, 473, 352, 456, 0, 0,
	558, 0, 0, 0, 921, 558, 0, 0, 917, 0,
	0, 0, 0, 364, 41, 1153, 0, 62, 0, 0,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 0, 0, 262, 0, 0, 0, 932,
	0, 0, 0, 74, 0, 939, 81, 0, 653, 562,
	563, 605, 606, 607, 608, 609, 654, 655, 0, 660,
	661, 662, 663, 664, 665, 666, 667, 668, 669, -2,
	-2, -2, 673, 674, 675, -2, -2, -2, 679, 680,
	-2, 851, 853, 0, 912, 0, -2, 0, -2, -2,
	-2, -2, 693, 0, 695, 698, 700, 702, 0, 0,
	0, 0, 911, 712, 889, 0, 0, 830, 831, 832,
	697, 0, 0, 910, 901, 0, 0, -2, 752, 0,
	0, 0, 860, 861, 896, 892, 0, 759, 471, 0,
	0, 0, 0, 0, 958, 636, 637, 638, 639, 640,
	641, 650, 808, 0, 0, 0, 772, 774, 0, 0,
	0, 0, 864, -2, -2, -2, -2, -2, -2, -2,
	0, 0, 854, 874, 0, 0, 715, 0, 0, 0,
	0, 1169, 0, 854, 882, 0, 0, 0, 0, 0,
	854, 0, 888, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 422, 0,
	422, 412, 0, 0, 0, 422, 425, 426, 428, 429,
	0, 0, 556, 100, 927, 60, 110, 60, 60, 108,
	116, 131, 0, 133, 134, 0, 559, 561, 571, 0,
	137, 0, 0, 0, 0, 172, 387, 392, 0, 195,
	0, 197, 0, 114, 256, 159, 237, 250, 251, 539,
	553, 0, 0, 271, 938, 273, 275, 276, 277, 278,
	963, 0, 963, 0, 0, 335, 0, 0, 0, 0,
	400, 406, 0, 0, 486, 0, 0, 483, 489, 490,
	0, 475, 350, 351, 461, 940, 494, 919, 539, 501,
	461, 511, 548, 525, 516, 0, 920, 494, 551, 916,
	40, 354, 0, 0, 0, 43, 1153, 51, 0, 286,
	0, 0, 0, 0, 0, 367, 52, 1153, 60, 1153,
	60, 53, 38, 365, 259, 0, 260, 0, 358, 0,
	353, 356, 0, 81, 0, 0, 68, 0, 72, 0,
	-2, -2, 0, 0, 0, 713, -2, 694, 696, 699,
	701, 703, 0, 0, 0, 0, 0, 0, 0, 714,
	0, 0, 899, 902, -2, 855, 858, 859, 0, 0,
	893, 0, 0, 0, 0, 470, 471, 471, 471, 765,
	0, 0, 0, 0, 0, 0, 766, 0, 0, 0,
	0, 0, 0, 781, 0, 782, 783, 0, 0, 784,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 718, 719, 720, 0, 0, 785, 880,
	881, 0, 0, 0, 0, 0, 0, 790, 0, 887,
	0, 0, 0, 794, 795, 796, 0, 588, 0, 610,
	632, 634, 622, 83, 0, 925, 93, 0, 557, 407,
	422, 0, 0, 414, 411, 409, 558, 0, 0, 0,
	0, 102, 104, 106, 0, 857, 0, 0, 0, 855,
	143, 144, 168, 193, 194, 196, 189, 0, 252, 280,
	313, 0, 0, 963, 0, 269, 314, 336, 338, 0,
	0, 402, 406, 0, 405, 459, 0, 0, 474, 0,
	496, 0, 499, 0, 0, 0, 0, 0, 545, 545,
	545, 543, 519, 0, 525, 0, 0, 537, 0, -2,
	516, 0, 496, 0, 0, 0, 0, 61, 284, 303,
	0, 0, 343, 349, 349, 0, 768, 769, 0, 0,
	0, 45, 0, 0, 0, 0, 49, 0, 55, 0,
	0, 0, 0, 0, 0, 0, 67, 0, 0, 0,
	656, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	890, 0, 825, 0, 0, 901, -2, 862, 891, 895,
	0, 760, 0, 0, 0, 0, 951, 642, 643, 644,
	645, 646, 647, 648, 0, 806, 807, 811, 0, 0,
	770, 0, 0, 863, 873, 875, 716, 717, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, -2, -2,
	-2, 734, 735, 736, -2, -2, -2, 0, 0, 0,
	876, 0, 0, 828, 878, 879, 884, 885, 0, 787,
	788, 789, 886, 0, 0, 0, 616, 0, 84, 420,
	421, 408, 419, 0, 422, 427, 424, 430, 0, 564,
	0, 0, 572, 160, 267, 0, 274, 0, 0, 0,
	272, 0, 0, 0, 404, 406, 0, 397, 398, 481,
	487, 457, 802, 0, 0, 502, 0, 0, 0, 0,
	0, 540, 544, 541, 542, 0, 0, 525, 537, 508,
	0, 0, 0, 515, 536, 0, 535, 524, -2, 802,
	360, 362, 42, 0, 285, 0, 288, 0, 0, 0,
	0, 294, 295, 0, 0, 0, 0, 305, 312, 0,
	352, 943, 0, 352, 0, 0, 0, 0, 0, 57,
	0, 0, 366, 0, 60, 60, 355, 0, 0, 0,
	0, 359, 357, 73, 0, 0, 0, 0, -2, 0,
	706, -2, -2, 824, 855, 900, 894, 948, 471, 761,
	763, 764, 651, 813, 810, 0, 797, 779, 780, 872,
	0, 0, 0, 0, 855, 827, 786, 0, 792, 793,
	589, 0, 0, 0, 413, 423, 0, 565, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 395, 406, 0,
	399, 400, 445, 0, 495, 493, 527, 0, 529, 0,
	0, 0, 531, 511, 520, 0, 522, 537, 513, 0,
	0, 506, 0, 505, 525, 533, 0, 0, 446, 44,
	0, 289, 290, 963, 0, 293, 296, 0, 298, 965,
	280, 0, 309, 310, 344, 345, 348, 346, 349, 471,
	307, 0, 46, 47, 56, 64, 48, 54, 0, 0,
	0, 0, 538, 0, 0, 0, 78, 76, -2, -2,
	707, 826, 0, 471, 0, 799, -2, 0, 0, 0,
	829, 0, 0, 0, 0, 431, 432, 0, 0, 312,
	0, 302, 280, 270, 312, 0, 0, 401, 402, 801,
	803, 0, 528, 0, 547, 530, 525, 521, 0, 518,
	509, 0, 510, 0, 537, 0, 0, 517, 287, 291,
	0, 0, 318, 0, 306, 0, 352, 0, 0, 66,
	0, 361, 363, 0, 0, 0, 0, 80, 77, 0,
	762, 816, 0, -2, 0, 742, 791, 0, 416, 558,
	418, 0, 280, 312, 268, 280, 0, 403, 404, 0,
	0, 0, 0, 523, 507, 503, 0, 514, 0, 534,
	0, 297, 323, 0, 0, 0, 347, 760, 314, 50,
	0, 63, 0, 0, 471, 79, 75, 0, 0, 0,
	812, 743, 0, 417, 0, 300, 280, 339, 0, 396,
	804, 805, 546, 512, 0, 532, 0, 299, 319, 320,
	0, 315, 316, 317, 964, 311, 318, 65, 264, 266,
	0, 809, 814, 817, -2, 1115, 997, 0, 815, 558,
	0, 301, 312, 504, 292, 321, 0, 322, 0, 0,
	0, 323, 0, 0, 819, 820, 821, 822, 823, 415,
	283, 280, 324, 0, 327, 328, 0, 325, 308, 0,
	279, 281, 282, 340, 326, 329, 330, 818,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 334, 3, 340, 335, 3,
	345, 346, 338, 336, 349, 337, 347, 339, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 353, 348,
	328, 330, 329, 3, 350, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 343, 3, 344, 341, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 351, 333, 352, 331,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 332, 57671, 342, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:795
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:801
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:807
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:868
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:899
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:908
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:931
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:941
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.union.val = nil
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:980
		{
			sqlVAL.union.val = DropCascade
		}
	case 59:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:984
		{
			sqlVAL.union.val = DropRestrict
		}
	case 60:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = DropDefault
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:994
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 62:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1003
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 64:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1004
		{
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1007
		{
			return unimplemented(sqllex, "alter using")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1008
		{
		}
	case 67:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 74:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 76:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.str = ""
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 80:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 81:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1081
		{
		}
	case 82:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1100
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1104
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1130
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1131
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1132
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1133
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1243
		{ /* SKIP DOC */
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1247
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 133:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1359
		{
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1425
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1431
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1438
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1450
		{
			return unimplemented(sqllex, "set local")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1464
		{ /* SKIP DOC */
		}
	case 172:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[2].union.transactionModes()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1502
		{
			return unimplemented(sqllex, "set from current")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1505
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1514
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1518
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1522
		{
		}
	case 186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1522
		{
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = Low
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = Normal
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = High
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1642
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "client_encoding"}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1646
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1650
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1654
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1758
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1762
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1766
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1770
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1786
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1790
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1794
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1806
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1828
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1844
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1848
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1854
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1858
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1862
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1866
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1937
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1941
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = DropDefault
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1951
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 286:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2156
		{
			return unimplemented(sqllex, "match full")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2157
		{
			return unimplemented(sqllex, "match partial")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2158
		{
			return unimplemented(sqllex, "match simple")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2159
		{
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2165
		{
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2166
		{
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2167
		{
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2168
		{
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2169
		{
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2172
		{
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2175
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2178
		{
			return unimplemented(sqllex, "no action")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2181
		{
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2182
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2183
		{
			return unimplemented(sqllex, "action set null")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2184
		{
			return unimplemented(sqllex, "action set default")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2216
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = true
		}
	case 342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = false
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2291
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2292
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2295
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2296
		{
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.union.val = Ascending
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.union.val = Descending
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 353:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2350
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2351
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = true
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2359
		{
			sqlVAL.union.val = false
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2364
		{
		}
	case 367:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2365
		{
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2405
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2414
		{
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2415
		{
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.str = ""
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 381:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.str = ""
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2441
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2461
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = ReadOnly
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = ReadWrite
		}
	case 395:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2530
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.str = ""
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 400:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.str = ""
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.str = ""
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 404:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.str = ""
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2569
		{
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2570
		{
		}
	case 407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 408:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2634
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2638
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2646
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 423:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2668
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2669
		{
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2896
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2897
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2898
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2901
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2902
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2905
		{
			return unimplemented(sqllex, "cte")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2908
		{
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2909
		{
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2912
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2913
		{
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2916
		{
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2917
		{
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = true
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = false
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = false
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2935
		{
			sqlVAL.union.val = true
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2940
		{
		}
	case 469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2941
		{
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2961
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2979
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2999
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3021
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3051
		{
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3052
		{
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3055
		{
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3056
		{
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3110
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = &From{}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3146
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3164
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3191
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 512:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3208
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = nil
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3266
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3272
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = true
		}
	case 525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = false
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.str = astFullJoin
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.str = astLeftJoin
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.str = astRightJoin
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.str = astInnerJoin
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3383
		{
		}
	case 545:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3384
		{
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3470
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3483
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3484
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3498
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 566:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3507
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3570
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3579
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = nil
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3628
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3724
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3756
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3795
		{
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3796
		{
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = year
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = month
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = day
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = hour
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = minute
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = month
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = hour
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = minute
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = minute
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = nil
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = second
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3891
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3926
		{
			return unimplemented(sqllex, "at tz")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4094
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4160
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4333
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4379
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4383
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4386
		{
			return unimplemented(sqllex, "variadic")
		}
	case 762:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4387
		{
			return unimplemented(sqllex, "variadic")
		}
	case 763:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4410
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4426
		{
			return unimplemented(sqllex, "func_application")
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4427
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 770:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4431
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4448
		{
			return unimplemented(sqllex, "current role")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4449
		{
			return unimplemented(sqllex, "current user")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4450
		{
			return unimplemented(sqllex, "session user")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4451
		{
			return unimplemented(sqllex, "user")
		}
	case 779:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4480
		{
			return unimplemented(sqllex, "treat")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4524
		{
			return unimplemented(sqllex, "within group")
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4525
		{
		}
	case 799:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = Window(nil)
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4560
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4572
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 809:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4583
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4602
		{
			sqlVAL.str = ""
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4622
		{
			return unimplemented(sqllex, "frame range")
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4623
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4624
		{
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4627
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4628
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4634
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4635
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4636
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4637
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4638
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = Any
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = Some
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = All
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = Plus
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = Minus
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = Mult
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = Div
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = FloorDiv
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = Mod
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = Bitand
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = Bitor
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = Pow
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = Bitxor
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = LT
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = GT
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = EQ
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = LE
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4706
		{
			sqlVAL.union.val = GE
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = NE
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = Like
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = NotLike
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = ILike
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = NotILike
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4749
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4753
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4769
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 872:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4816
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4820
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4849
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4853
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 894:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 896:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 898:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5002
		{
		}
	case 912:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5003
		{
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5012
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5082
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5117
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5121
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5152
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5156
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5162
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5165
		{
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5201
		{
			return unimplemented(sqllex, "func const")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5210
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5212
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5216
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = DNull
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5237
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 963:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5272
		{
			sqlVAL.str = ""
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5278
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 965:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5282
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
