// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:466
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPERIMENTAL_FINGERPRINTS = 57444
const EXPLAIN = 57445
const EXTRACT = 57446
const EXTRACT_DURATION = 57447
const FALSE = 57448
const FAMILY = 57449
const FETCH = 57450
const FILTER = 57451
const FIRST = 57452
const FLOAT = 57453
const FLOORDIV = 57454
const FOLLOWING = 57455
const FOR = 57456
const FORCE_INDEX = 57457
const FOREIGN = 57458
const FROM = 57459
const FULL = 57460
const GRANT = 57461
const GRANTS = 57462
const GREATEST = 57463
const GROUP = 57464
const GROUPING = 57465
const HAVING = 57466
const HELP = 57467
const HIGH = 57468
const HOUR = 57469
const INCREMENTAL = 57470
const IF = 57471
const IFNULL = 57472
const ILIKE = 57473
const IN = 57474
const INTERLEAVE = 57475
const INDEX = 57476
const INDEXES = 57477
const INITIALLY = 57478
const INNER = 57479
const INSERT = 57480
const INT = 57481
const INT2VECTOR = 57482
const INT8 = 57483
const INT64 = 57484
const INTEGER = 57485
const INTERSECT = 57486
const INTERVAL = 57487
const INTO = 57488
const IS = 57489
const ISOLATION = 57490
const JOIN = 57491
const KEY = 57492
const KEYS = 57493
const LATERAL = 57494
const LC_CTYPE = 57495
const LC_COLLATE = 57496
const LEADING = 57497
const LEAST = 57498
const LEFT = 57499
const LEVEL = 57500
const LIKE = 57501
const LIMIT = 57502
const LOCAL = 57503
const LOCALTIME = 57504
const LOCALTIMESTAMP = 57505
const LOW = 57506
const LSHIFT = 57507
const MATCH = 57508
const MINUTE = 57509
const MONTH = 57510
const NAN = 57511
const NAME = 57512
const NAMES = 57513
const NATURAL = 57514
const NEXT = 57515
const NO = 57516
const NO_INDEX_JOIN = 57517
const NORMAL = 57518
const NOT = 57519
const NOTHING = 57520
const NULL = 57521
const NULLIF = 57522
const NULLS = 57523
const NUMERIC = 57524
const OF = 57525
const OFF = 57526
const OFFSET = 57527
const OID = 57528
const ON = 57529
const ONLY = 57530
const OPTIONS = 57531
const OR = 57532
const ORDER = 57533
const ORDINALITY = 57534
const OUT = 57535
const OUTER = 57536
const OVER = 57537
const OVERLAPS = 57538
const OVERLAY = 57539
const PARENT = 57540
const PARTIAL = 57541
const PARTITION = 57542
const PASSWORD = 57543
const PLACING = 57544
const POSITION = 57545
const PRECEDING = 57546
const PRECISION = 57547
const PREPARE = 57548
const PRIMARY = 57549
const PRIORITY = 57550
const QUERIES = 57551
const RANGE = 57552
const READ = 57553
const REAL = 57554
const RECURSIVE = 57555
const REF = 57556
const REFERENCES = 57557
const REGCLASS = 57558
const REGPROC = 57559
const REGPROCEDURE = 57560
const REGNAMESPACE = 57561
const REGTYPE = 57562
const RENAME = 57563
const REPEATABLE = 57564
const RELEASE = 57565
const RESET = 57566
const RESTORE = 57567
const RESTRICT = 57568
const RETURNING = 57569
const REVOKE = 57570
const RIGHT = 57571
const ROLLBACK = 57572
const ROLLUP = 57573
const ROW = 57574
const ROWS = 57575
const RSHIFT = 57576
const SAVEPOINT = 57577
const SCATTER = 57578
const SEARCH = 57579
const SECOND = 57580
const SELECT = 57581
const SERIAL = 57582
const SERIALIZABLE = 57583
const SESSION = 57584
const SESSIONS = 57585
const SESSION_USER = 57586
const SET = 57587
const SETTING = 57588
const SETTINGS = 57589
const SHOW = 57590
const SIMILAR = 57591
const SIMPLE = 57592
const SMALLINT = 57593
const SMALLSERIAL = 57594
const SNAPSHOT = 57595
const SOME = 57596
const SPLIT = 57597
const SQL = 57598
const START = 57599
const STATUS = 57600
const STDIN = 57601
const STRICT = 57602
const STRING = 57603
const STORING = 57604
const SUBSTRING = 57605
const SYMMETRIC = 57606
const SYSTEM = 57607
const TABLE = 57608
const TABLES = 57609
const TEMPLATE = 57610
const TESTING_RANGES = 57611
const TESTING_RELOCATE = 57612
const TEXT = 57613
const THEN = 57614
const TIME = 57615
const TIMESTAMP = 57616
const TIMESTAMPTZ = 57617
const TO = 57618
const TRAILING = 57619
const TRANSACTION = 57620
const TREAT = 57621
const TRIM = 57622
const TRUE = 57623
const TRUNCATE = 57624
const TYPE = 57625
const UNBOUNDED = 57626
const UNCOMMITTED = 57627
const UNION = 57628
const UNIQUE = 57629
const UNKNOWN = 57630
const UPDATE = 57631
const UPSERT = 57632
const USE = 57633
const USER = 57634
const USERS = 57635
const USING = 57636
const UUID = 57637
const VALID = 57638
const VALIDATE = 57639
const VALUE = 57640
const VALUES = 57641
const VARCHAR = 57642
const VARIADIC = 57643
const VIEW = 57644
const VARYING = 57645
const WHEN = 57646
const WHERE = 57647
const WINDOW = 57648
const WITH = 57649
const WITHIN = 57650
const WITHOUT = 57651
const WRITE = 57652
const YEAR = 57653
const ZONE = 57654
const NOT_LA = 57655
const WITH_LA = 57656
const AS_LA = 57657
const POSTFIXOP = 57658
const UMINUS = 57659

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5574

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 32,
	336, 32,
	-2, 443,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 53,
	1, 416,
	187, 416,
	227, 416,
	332, 416,
	334, 416,
	336, 416,
	-2, 426,
	-1, 68,
	1, 419,
	187, 419,
	227, 419,
	332, 419,
	334, 419,
	336, 419,
	-2, 425,
	-1, 77,
	1, 32,
	336, 32,
	-2, 443,
	-1, 446,
	1, 175,
	336, 175,
	-2, 1016,
	-1, 513,
	108, 453,
	160, 453,
	185, 453,
	-2, 422,
	-1, 516,
	108, 452,
	160, 452,
	185, 452,
	-2, 420,
	-1, 663,
	108, 452,
	160, 452,
	185, 452,
	-2, 423,
	-1, 723,
	333, 948,
	-2, 941,
	-1, 724,
	333, 949,
	-2, 942,
	-1, 730,
	5, 617,
	333, 617,
	-2, 1129,
	-1, 754,
	5, 578,
	-2, 1103,
	-1, 755,
	5, 611,
	333, 611,
	-2, 1105,
	-1, 756,
	5, 586,
	-2, 1106,
	-1, 757,
	5, 585,
	-2, 1107,
	-1, 758,
	5, 611,
	333, 611,
	-2, 1110,
	-1, 759,
	5, 611,
	333, 611,
	-2, 1111,
	-1, 760,
	5, 612,
	-2, 1114,
	-1, 761,
	5, 572,
	-2, 1115,
	-1, 762,
	5, 572,
	-2, 1116,
	-1, 763,
	5, 593,
	-2, 1120,
	-1, 764,
	5, 573,
	-2, 1125,
	-1, 765,
	5, 574,
	-2, 1126,
	-1, 766,
	5, 575,
	-2, 1127,
	-1, 767,
	5, 576,
	-2, 1128,
	-1, 768,
	5, 572,
	-2, 1133,
	-1, 769,
	5, 579,
	-2, 1138,
	-1, 770,
	5, 577,
	-2, 1141,
	-1, 771,
	5, 609,
	333, 609,
	-2, 1143,
	-1, 772,
	5, 613,
	-2, 1146,
	-1, 773,
	5, 615,
	-2, 1147,
	-1, 774,
	5, 608,
	333, 608,
	-2, 1152,
	-1, 1034,
	99, 426,
	108, 426,
	144, 426,
	160, 426,
	185, 426,
	191, 426,
	286, 426,
	-2, 736,
	-1, 1043,
	333, 925,
	-2, 913,
	-1, 1253,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 652,
	-1, 1254,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 653,
	-1, 1255,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 654,
	-1, 1259,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 658,
	-1, 1260,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 659,
	-1, 1261,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 660,
	-1, 1264,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 665,
	-1, 1270,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 667,
	-1, 1272,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 671,
	-1, 1273,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 672,
	-1, 1274,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 673,
	-1, 1275,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 674,
	-1, 1302,
	196, 807,
	-2, 810,
	-1, 1331,
	117, 847,
	333, 948,
	-2, 941,
	-1, 1332,
	117, 848,
	-2, 1099,
	-1, 1333,
	117, 849,
	-2, 1015,
	-1, 1334,
	117, 850,
	-2, 983,
	-1, 1335,
	117, 851,
	-2, 999,
	-1, 1336,
	117, 852,
	-2, 1014,
	-1, 1337,
	117, 853,
	-2, 1062,
	-1, 1496,
	99, 426,
	108, 426,
	144, 426,
	160, 426,
	185, 426,
	191, 426,
	286, 426,
	-2, 507,
	-1, 1500,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 666,
	-1, 1501,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 668,
	-1, 1506,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 669,
	-1, 1524,
	196, 806,
	-2, 809,
	-1, 1714,
	1, 508,
	69, 508,
	99, 508,
	108, 508,
	118, 508,
	122, 508,
	124, 508,
	137, 508,
	144, 508,
	149, 508,
	157, 508,
	160, 508,
	172, 508,
	185, 508,
	187, 508,
	191, 508,
	227, 508,
	229, 508,
	286, 508,
	294, 508,
	305, 508,
	306, 508,
	315, 508,
	332, 508,
	334, 508,
	336, 508,
	337, 508,
	-2, 507,
	-1, 1716,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 670,
	-1, 1721,
	147, 0,
	-2, 686,
	-1, 1731,
	196, 808,
	-2, 811,
	-1, 1765,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 713,
	-1, 1766,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 714,
	-1, 1767,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 715,
	-1, 1771,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 719,
	-1, 1772,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 720,
	-1, 1773,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 721,
	-1, 1892,
	147, 0,
	-2, 687,
	-1, 1895,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 690,
	-1, 1896,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 692,
	-1, 2000,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 691,
	-1, 2001,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 693,
	-1, 2008,
	147, 0,
	-2, 722,
	-1, 2062,
	147, 0,
	-2, 723,
	-1, 2125,
	36, 0,
	131, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 1102,
}

const sqlPrivate = 57344

const sqlLast = 30561

var sqlAct = [...]int{

	724, 2124, 1670, 2103, 1128, 2148, 2068, 2104, 1936, 2105,
	1136, 1742, 2123, 949, 1982, 1962, 1883, 1710, 1859, 1494,
	1188, 847, 1217, 1680, 52, 1816, 717, 1802, 313, 1468,
	955, 1709, 700, 1470, 90, 90, 90, 1618, 815, 1491,
	1870, 1585, 562, 1617, 1225, 714, 315, 90, 90, 90,
	1192, 1187, 90, 1864, 1206, 90, 1688, 1039, 1697, 1482,
	1232, 1535, 1165, 90, 538, 517, 504, 1584, 1300, 722,
	1191, 1224, 90, 90, 951, 721, 90, 299, 20, 90,
	90, 90, 90, 790, 787, 90, 90, 1418, 1137, 1412,
	830, 1097, 683, 1477, 1088, 522, 1357, 1310, 694, 1287,
	1230, 1284, 1120, 975, 1181, 792, 553, 912, 1328, 524,
	67, 848, 605, 819, 1213, 1158, 1030, 297, 1227, 693,
	816, 604, 1069, 1073, 498, 574, 684, 572, 499, 583,
	1195, 516, 1130, 980, 527, 1817, 666, 442, 667, 445,
	68, 431, 575, 665, 490, 69, 82, 495, 716, 910,
	441, 422, 823, 568, 67, 20, 86, 671, 525, 1993,
	646, 1523, 1994, 647, 1129, 521, 832, 832, 1133, 2140,
	434, 832, 812, 488, 2120, 1492, 1162, 1815, 983, 984,
	2115, 284, 2114, 1168, 521, 1168, 2111, 67, 2101, 812,
	2096, 1155, 1360, 812, 535, 2093, 1429, 541, 812, 2064,
	548, 986, 1155, 2058, 481, 544, 812, 32, 514, 2042,
	1527, 1526, 1815, 513, 1489, 1528, 1168, 1168, 33, 57,
	1163, 806, 2038, 2033, 985, 812, 2032, 2048, 1430, 2002,
	312, 529, 1155, 1989, 1976, 1973, 1990, 1815, 812, 1971,
	1947, 1121, 1815, 812, 59, 73, 1946, 1121, 1918, 1815,
	35, 1168, 66, 1897, 1894, 1886, 1168, 1155, 1168, 1836,
	1164, 1161, 1168, 1480, 982, 1835, 983, 984, 1168, 1124,
	1814, 48, 75, 1815, 1725, 66, 1656, 1168, 43, 1127,
	991, 60, 1124, 1651, 1480, 47, 1127, 44, 1602, 986,
	981, 1603, 90, 90, 90, 90, 90, 90, 1778, 504,
	1728, 43, 1454, 49, 1600, 76, 1086, 1168, 1458, 45,
	44, 1168, 985, 71, 812, 1599, 1598, 580, 1168, 1168,
	72, 73, 1524, 522, 1457, 1168, 1221, 812, 1304, 812,
	1534, 1166, 45, 1001, 1172, 1167, 1216, 1168, 1168, 70,
	1179, 1154, 679, 557, 1155, 833, 833, 902, 75, 1126,
	833, 1085, 1127, 841, 1084, 91, 842, 551, 595, 534,
	1818, 77, 1495, 924, 73, 619, 2138, 2122, 991, 1878,
	2110, 2073, 2059, 1974, 1923, 1919, 1555, 1556, 1911, 1910,
	777, 76, 678, 501, 1909, 1905, 1904, 1903, 1850, 71,
	46, 75, 1793, 1844, 1788, 1787, 72, 1786, 1555, 1556,
	1736, 316, 1002, 1714, 1160, 1687, 1660, 62, 63, 34,
	569, 1607, 50, 1604, 61, 1132, 983, 984, 90, 51,
	1592, 505, 561, 73, 76, 1583, 1159, 584, 1570, 54,
	1554, 1551, 56, 90, 577, 577, 90, 90, 578, 986,
	1550, 58, 1548, 1540, 1539, 1047, 73, 504, 1429, 1456,
	75, 1374, 783, 1460, 504, 56, 836, 831, 70, 1493,
	559, 947, 985, 1325, 1324, 678, 64, 1040, 1000, 70,
	954, 1296, 677, 75, 1744, 65, 2085, 2045, 1561, 2031,
	775, 90, 2030, 76, 981, 2029, 2021, 90, 2019, 2010,
	1997, 71, 987, 988, 989, 990, 992, 993, 72, 1985,
	1561, 1658, 1969, 1933, 1916, 1888, 76, 1853, 90, 90,
	90, 1841, 90, 1821, 71, 1720, 1702, 70, 991, 1678,
	1676, 72, 1675, 1673, 1626, 1625, 317, 90, 1582, 1544,
	1543, 1571, 1520, 1515, 1289, 1555, 1556, 1445, 90, 1843,
	70, 1403, 1401, 1388, 1387, 1367, 506, 1323, 1220, 1074,
	1077, 504, 90, 1081, 615, 1067, 1066, 1065, 315, 504,
	1064, 90, 1063, 1062, 1061, 1060, 90, 90, 90, 1059,
	90, 1001, 1297, 1058, 621, 663, 1057, 1056, 1055, 664,
	987, 988, 989, 990, 992, 993, 813, 90, 90, 2035,
	1054, 1053, 1052, 1051, 1044, 90, 1033, 90, 70, 782,
	1572, 622, 90, 603, 821, 652, 598, 600, 948, 539,
	682, 602, 504, 504, 591, 589, 854, 2121, 1992, 1899,
	315, 1875, 650, 1849, 781, 90, 1848, 1703, 90, 1040,
	90, 90, 90, 90, 90, 90, 648, 1561, 90, 557,
	1002, 923, 1439, 90, 90, 1438, 1031, 656, 925, 659,
	90, 783, 1388, 1995, 505, 1555, 1556, 611, 1471, 613,
	1847, 90, 1431, 800, 1121, 514, 835, 1079, 1495, 838,
	513, 810, 1080, 953, 908, 1606, 560, 674, 675, 1605,
	90, 1499, 798, 90, 569, 680, 638, 1566, 1564, 1565,
	1557, 1558, 1559, 1560, 1562, 1563, 1876, 799, 622, 612,
	502, 1212, 614, 979, 1049, 843, 622, 952, 811, 1211,
	1413, 1865, 1129, 845, 1559, 1560, 1562, 1563, 1745, 822,
	825, 1531, 1311, 522, 1070, 776, 1613, 996, 994, 995,
	987, 988, 989, 990, 992, 993, 958, 1425, 1162, 900,
	2076, 895, 946, 897, 2037, 1555, 1556, 896, 1573, 1574,
	1575, 642, 899, 783, 2136, 2135, 1829, 1555, 1556, 920,
	1451, 1171, 913, 919, 927, 929, 1555, 1556, 933, 934,
	935, 936, 937, 1046, 80, 480, 932, 479, 474, 506,
	940, 941, 1163, 475, 893, 1098, 90, 643, 1957, 1956,
	1955, 945, 1954, 1641, 90, 901, 909, 1570, 90, 1640,
	1610, 1840, 505, 292, 962, 961, 90, 90, 960, 505,
	90, 511, 514, 90, 977, 514, 514, 971, 611, 1090,
	972, 973, 1164, 1161, 1609, 1637, 1657, 90, 79, 90,
	90, 1502, 90, 983, 984, 90, 1090, 90, 90, 1444,
	90, 90, 1089, 504, 1091, 1043, 288, 1561, 1101, 1557,
	1558, 1559, 1560, 1562, 1563, 2036, 986, 293, 1512, 1561,
	612, 1149, 1443, 1442, 983, 984, 1441, 793, 1561, 794,
	1271, 1169, 1118, 1510, 1117, 1114, 649, 1109, 1810, 985,
	1112, 1071, 1072, 550, 1371, 1370, 1075, 986, 1242, 1102,
	1104, 1036, 1078, 1166, 943, 289, 1207, 587, 944, 487,
	1571, 1131, 1644, 1131, 803, 1286, 505, 1286, 1646, 1415,
	985, 1811, 1571, 316, 505, 1082, 1107, 817, 1123, 1938,
	793, 1571, 794, 801, 1094, 315, 926, 506, 1119, 601,
	1311, 1115, 90, 2083, 506, 991, 1507, 826, 802, 1100,
	795, 1166, 520, 90, 90, 90, 1508, 1293, 90, 90,
	1513, 67, 1291, 1180, 2135, 90, 67, 1144, 1135, 1150,
	78, 2145, 1145, 1423, 1153, 1628, 1160, 505, 505, 1572,
	881, 584, 1151, 804, 1563, 316, 1146, 577, 1419, 577,
	1147, 1572, 1148, 90, 1450, 1222, 315, 519, 803, 294,
	1572, 1408, 793, 795, 794, 2156, 81, 507, 832, 1075,
	1405, 1078, 1806, 1419, 1807, 2151, 1343, 801, 625, 635,
	854, 854, 1072, 1071, 1241, 296, 1214, 1215, 512, 1099,
	2024, 315, 802, 508, 1173, 295, 942, 808, 807, 586,
	2107, 506, 1809, 509, 521, 1452, 2144, 1635, 317, 506,
	1812, 1068, 626, 636, 2006, 624, 291, 290, 1509, 1294,
	1665, 1567, 1568, 1569, 1087, 1511, 1566, 1564, 1565, 1557,
	1558, 1559, 1560, 1562, 1563, 795, 1186, 1399, 1202, 1184,
	1565, 1557, 1558, 1559, 1560, 1562, 1563, 1566, 1564, 1565,
	1557, 1558, 1559, 1560, 1562, 1563, 821, 1373, 90, 90,
	90, 1210, 506, 506, 90, 1233, 1240, 90, 1308, 482,
	317, 639, 1970, 90, 90, 90, 90, 90, 1223, 1028,
	312, 2108, 1808, 1542, 1939, 90, 1629, 2098, 90, 90,
	791, 1166, 854, 1555, 1556, 504, 1698, 2143, 90, 518,
	1175, 1713, 2149, 90, 521, 90, 1662, 1504, 1645, 1285,
	2099, 1177, 90, 796, 1381, 1685, 1298, 2106, 1295, 989,
	990, 992, 993, 90, 1485, 66, 2134, 522, 669, 608,
	1178, 640, 2109, 1319, 2132, 1338, 1858, 1204, 1268, 1375,
	90, 90, 1176, 1488, 2157, 483, 1663, 833, 629, 1292,
	504, 43, 854, 993, 2150, 1696, 1400, 596, 594, 1402,
	44, 1398, 1376, 1486, 1949, 670, 796, 90, 505, 90,
	1774, 90, 1914, 2152, 1411, 90, 2162, 1385, 1948, 90,
	668, 641, 45, 1931, 2016, 1612, 729, 854, 1421, 609,
	1384, 1380, 610, 1427, 1205, 1561, 1301, 1459, 959, 1461,
	1825, 950, 90, 1305, 967, 670, 1433, 1313, 1434, 1435,
	1661, 2069, 939, 1884, 779, 1414, 1424, 1166, 1330, 1330,
	1341, 907, 1352, 1681, 903, 1432, 522, 1860, 1364, 1365,
	1366, 1873, 1828, 1266, 1269, 1487, 485, 1437, 796, 1827,
	709, 1436, 622, 1932, 1447, 1448, 1498, 1462, 1571, 669,
	316, 1465, 608, 1390, 1449, 1389, 1775, 1453, 1455, 905,
	1693, 1265, 1776, 567, 1915, 1692, 566, 968, 519, 2161,
	660, 906, 1385, 1885, 87, 87, 286, 1671, 918, 917,
	1851, 501, 496, 420, 522, 880, 1410, 414, 415, 416,
	1475, 1824, 433, 506, 1473, 447, 73, 1479, 1689, 1481,
	67, 668, 1497, 433, 1478, 56, 67, 1322, 1476, 484,
	1463, 316, 528, 528, 1490, 1929, 286, 1572, 2009, 286,
	286, 547, 286, 75, 1913, 87, 554, 1586, 1719, 423,
	1826, 1643, 1549, 1514, 881, 881, 1416, 1930, 1170, 1505,
	1503, 1125, 1113, 522, 1110, 645, 316, 1587, 1485, 1533,
	428, 1267, 644, 637, 634, 424, 76, 633, 632, 1519,
	921, 631, 630, 627, 71, 565, 558, 1488, 1050, 931,
	2066, 72, 1321, 2102, 1733, 317, 1799, 1530, 1633, 1483,
	425, 1631, 1611, 1467, 1208, 1200, 1152, 1486, 840, 839,
	70, 837, 834, 829, 809, 805, 797, 1469, 1964, 427,
	90, 90, 1484, 1652, 1624, 1564, 1565, 1557, 1558, 1559,
	1560, 1562, 1563, 2136, 672, 778, 983, 984, 532, 887,
	564, 1589, 1590, 1591, 83, 90, 1218, 915, 1623, 90,
	1966, 90, 563, 1106, 1622, 922, 317, 1608, 90, 986,
	1650, 504, 2026, 304, 30, 3, 881, 1677, 1615, 1818,
	505, 90, 1518, 620, 90, 1632, 2061, 1634, 1690, 1487,
	1521, 1674, 985, 315, 1636, 90, 676, 1111, 1090, 1642,
	473, 317, 1654, 1682, 1105, 1664, 1666, 1667, 1537, 1538,
	1649, 1704, 1647, 673, 2049, 1219, 1655, 533, 1653, 1108,
	1398, 1705, 983, 984, 1856, 1691, 1203, 1090, 1694, 1672,
	426, 310, 25, 1103, 419, 505, 881, 1722, 555, 552,
	1199, 1581, 854, 90, 1695, 1699, 1700, 1684, 991, 423,
	556, 30, 1594, 540, 1134, 309, 24, 308, 23, 978,
	476, 477, 286, 570, 286, 447, 447, 554, 985, 898,
	428, 881, 846, 854, 854, 424, 306, 22, 303, 16,
	429, 1157, 854, 854, 2159, 430, 1732, 2160, 307, 11,
	1555, 1556, 1729, 2095, 1638, 2052, 1639, 311, 10, 1881,
	425, 1001, 1738, 1739, 1740, 506, 1746, 1748, 1794, 25,
	90, 90, 90, 301, 9, 854, 1753, 894, 1683, 427,
	1751, 305, 8, 1668, 300, 7, 1781, 90, 502, 497,
	1555, 1556, 90, 24, 90, 23, 90, 90, 90, 983,
	984, 90, 90, 1659, 504, 1601, 1819, 1823, 302, 4,
	654, 653, 654, 1782, 22, 1440, 16, 1372, 1233, 1749,
	506, 1369, 1798, 1368, 1318, 1795, 11, 1233, 1754, 1822,
	1002, 1624, 1037, 655, 1901, 10, 90, 90, 2082, 1963,
	1741, 1464, 1839, 504, 1047, 1045, 1708, 486, 592, 1937,
	421, 9, 930, 90, 90, 1623, 1854, 90, 628, 8,
	1785, 1622, 7, 597, 1877, 90, 447, 447, 699, 880,
	880, 1701, 90, 1726, 726, 1861, 2097, 1852, 1906, 1624,
	426, 1541, 1857, 1879, 1624, 1981, 4, 2005, 1855, 1845,
	983, 984, 1561, 1320, 1889, 1048, 1880, 1868, 1869, 1863,
	1846, 1874, 1893, 1623, 285, 90, 42, 854, 1623, 1622,
	1620, 433, 703, 986, 1622, 1800, 1614, 286, 994, 995,
	987, 988, 989, 990, 992, 993, 1194, 1193, 318, 916,
	429, 725, 489, 1329, 1234, 1779, 985, 780, 447, 658,
	447, 727, 661, 851, 536, 1571, 1789, 543, 546, 728,
	536, 622, 852, 1912, 1076, 715, 849, 528, 582, 1138,
	90, 1290, 90, 1309, 315, 90, 853, 1529, 286, 1041,
	695, 707, 706, 90, 1306, 588, 687, 1882, 444, 315,
	55, 880, 87, 440, 1422, 1842, 505, 966, 1209, 963,
	1862, 286, 1927, 1630, 883, 510, 286, 286, 286, 1941,
	827, 1552, 1943, 590, 90, 1350, 1342, 1942, 316, 1924,
	1925, 1339, 651, 1940, 1572, 786, 854, 286, 286, 90,
	821, 1624, 504, 1029, 1965, 87, 90, 87, 1139, 618,
	1428, 1156, 447, 1958, 90, 681, 974, 531, 530, 1189,
	90, 880, 616, 1867, 904, 1623, 1959, 1174, 1022, 90,
	90, 1622, 1019, 1980, 1978, 447, 881, 1972, 447, 1624,
	87, 447, 447, 447, 447, 447, 1996, 1999, 938, 1998,
	1984, 1991, 1967, 447, 447, 1988, 880, 478, 1987, 2018,
	433, 1952, 1953, 1623, 607, 606, 1201, 881, 881, 1622,
	90, 957, 1383, 2155, 1975, 2025, 881, 881, 2011, 2020,
	1627, 1951, 2075, 854, 1557, 1558, 1559, 1560, 1562, 1563,
	528, 506, 74, 554, 2014, 90, 90, 2034, 1961, 1409,
	2015, 31, 29, 26, 21, 19, 18, 90, 2004, 881,
	2022, 90, 28, 317, 17, 27, 15, 2043, 14, 504,
	2041, 13, 12, 41, 40, 2044, 90, 39, 38, 37,
	36, 6, 5, 2, 522, 1, 315, 90, 90, 505,
	536, 0, 546, 0, 2047, 0, 2050, 0, 2051, 1979,
	2053, 2023, 0, 0, 1945, 0, 0, 0, 2057, 0,
	90, 0, 90, 0, 2054, 90, 0, 315, 2056, 0,
	0, 0, 2063, 0, 0, 882, 0, 854, 505, 0,
	0, 0, 2071, 2084, 2086, 2072, 0, 2088, 2081, 90,
	0, 2087, 90, 0, 0, 2077, 286, 0, 0, 1282,
	0, 2092, 0, 2091, 1095, 0, 2090, 0, 286, 2094,
	0, 2060, 0, 0, 1280, 0, 286, 1116, 0, 0,
	286, 0, 0, 1122, 90, 0, 90, 0, 2112, 2089,
	2119, 1624, 0, 0, 2117, 0, 0, 286, 0, 1142,
	1143, 881, 286, 90, 0, 286, 2118, 447, 447, 0,
	447, 554, 2129, 2133, 2131, 1623, 0, 0, 0, 2137,
	0, 1622, 2139, 0, 506, 0, 2046, 2142, 0, 2141,
	0, 0, 0, 0, 0, 0, 0, 1276, 0, 0,
	0, 2154, 2153, 0, 2158, 1277, 2116, 1278, 685, 685,
	0, 1283, 0, 0, 0, 0, 0, 788, 0, 316,
	0, 2163, 1481, 506, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 316, 0, 0, 0, 0, 1810,
	0, 312, 1803, 0, 0, 0, 0, 0, 0, 0,
	1801, 0, 0, 0, 1805, 536, 0, 0, 0, 0,
	853, 853, 1182, 0, 0, 0, 0, 0, 0, 0,
	881, 1485, 1811, 286, 286, 286, 0, 505, 286, 1190,
	0, 0, 2078, 2079, 2080, 554, 66, 0, 883, 883,
	1488, 0, 0, 1804, 0, 0, 0, 0, 0, 0,
	0, 880, 1483, 0, 983, 984, 784, 0, 0, 1279,
	1486, 0, 43, 286, 2100, 0, 1281, 0, 0, 0,
	0, 44, 0, 0, 0, 1484, 0, 986, 0, 820,
	0, 0, 880, 880, 536, 824, 824, 983, 984, 0,
	1872, 880, 880, 45, 317, 0, 964, 0, 969, 0,
	985, 1516, 1517, 0, 976, 543, 546, 881, 0, 317,
	986, 0, 0, 1806, 850, 1807, 1023, 1024, 1025, 1026,
	1027, 0, 853, 0, 880, 0, 1035, 0, 0, 0,
	0, 0, 1487, 985, 0, 0, 1042, 0, 0, 0,
	0, 0, 0, 1809, 505, 0, 0, 0, 0, 0,
	883, 1812, 506, 0, 0, 0, 991, 0, 704, 53,
	0, 316, 1578, 1579, 1580, 0, 0, 0, 286, 1378,
	1379, 0, 0, 0, 1095, 0, 0, 1386, 0, 0,
	0, 0, 853, 1391, 1392, 1394, 1396, 1397, 0, 991,
	0, 0, 316, 0, 0, 1404, 0, 1871, 1406, 286,
	0, 881, 0, 53, 0, 0, 0, 73, 286, 1001,
	883, 0, 0, 286, 0, 1426, 56, 853, 0, 0,
	0, 0, 286, 1808, 0, 0, 515, 0, 0, 523,
	0, 0, 0, 286, 75, 0, 53, 0, 0, 882,
	882, 0, 1001, 0, 0, 883, 0, 0, 0, 0,
	1182, 1182, 0, 0, 0, 0, 880, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 506,
	0, 0, 0, 0, 0, 71, 0, 957, 1002, 957,
	0, 447, 72, 0, 0, 286, 317, 0, 0, 1472,
	0, 0, 0, 0, 0, 0, 0, 970, 0, 0,
	0, 298, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 1002, 286, 0, 0, 0, 536, 317, 0, 0,
	1717, 1718, 0, 0, 546, 0, 0, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1140, 0, 0, 0, 0,
	546, 882, 0, 546, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 880, 0, 995, 987, 988,
	989, 990, 992, 993, 1755, 1756, 1757, 1758, 1759, 1760,
	1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,
	1771, 1772, 1773, 0, 1777, 0, 0, 0, 996, 994,
	995, 987, 988, 989, 990, 992, 993, 0, 0, 685,
	0, 882, 0, 0, 0, 1243, 1244, 1245, 1246, 1247,
	1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257,
	1258, 1259, 1260, 1261, 1262, 1263, 1264, 0, 1270, 0,
	1272, 1273, 1274, 1275, 0, 0, 882, 0, 0, 0,
	0, 0, 880, 0, 0, 0, 0, 523, 0, 1299,
	0, 1183, 546, 1185, 0, 0, 536, 0, 0, 1619,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1326, 1327, 0, 0, 1340, 0, 1351, 1353, 1358,
	1361, 1362, 1363, 0, 0, 0, 0, 0, 0, 0,
	0, 1228, 0, 0, 0, 0, 0, 0, 850, 850,
	286, 286, 788, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1669, 0, 0, 0, 1095,
	0, 957, 853, 0, 0, 0, 880, 0, 1679, 0,
	0, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	0, 286, 0, 0, 286, 0, 0, 0, 0, 0,
	883, 0, 0, 853, 853, 1712, 0, 0, 0, 0,
	0, 0, 853, 853, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1446, 0, 0, 0,
	0, 883, 883, 0, 0, 0, 1377, 0, 0, 0,
	883, 883, 0, 0, 0, 853, 0, 0, 0, 0,
	850, 0, 0, 1743, 0, 0, 0, 0, 1934, 0,
	0, 0, 0, 0, 0, 0, 0, 1407, 0, 1474,
	0, 0, 0, 883, 976, 0, 1417, 0, 0, 0,
	0, 820, 0, 0, 0, 0, 0, 0, 0, 0,
	820, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	850, 0, 0, 515, 0, 1344, 0, 0, 0, 0,
	1796, 1797, 1095, 1500, 1501, 0, 0, 0, 0, 1506,
	0, 0, 0, 0, 0, 0, 1619, 554, 0, 0,
	0, 0, 1830, 0, 1831, 850, 286, 1833, 1834, 0,
	0, 1837, 286, 1466, 0, 0, 0, 0, 0, 0,
	2008, 0, 1525, 0, 0, 0, 0, 0, 0, 1532,
	0, 0, 1536, 0, 0, 0, 0, 853, 0, 0,
	1228, 1545, 0, 0, 1619, 0, 554, 1190, 0, 1619,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 882, 0, 286, 286, 883, 1035, 286, 0, 0,
	0, 0, 1358, 1358, 1358, 1712, 0, 0, 0, 0,
	0, 0, 1887, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 882, 882, 0, 0, 0, 0, 0, 0,
	0, 882, 882, 0, 0, 1616, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1907, 2062, 0, 0, 0,
	515, 0, 0, 515, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 882, 0, 0, 685, 0, 448,
	0, 0, 0, 0, 0, 1032, 853, 1034, 0, 788,
	0, 0, 0, 0, 1038, 0, 0, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 453,
	1095, 0, 1926, 0, 883, 1928, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 0, 1619, 0, 0, 454,
	0, 0, 0, 0, 455, 0, 0, 0, 0, 460,
	461, 1344, 1344, 469, 0, 1555, 1556, 0, 1573, 1574,
	1575, 1960, 0, 0, 554, 451, 456, 1715, 0, 0,
	1716, 1891, 0, 0, 1619, 0, 0, 0, 0, 286,
	0, 0, 1721, 853, 0, 0, 1983, 472, 1140, 1228,
	0, 1730, 0, 0, 286, 0, 0, 0, 53, 1734,
	1712, 53, 1446, 0, 0, 457, 0, 1570, 0, 554,
	1712, 883, 1344, 1344, 1344, 0, 882, 1750, 0, 458,
	459, 1752, 53, 0, 53, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 462, 0, 0, 1228,
	53, 0, 1228, 0, 0, 53, 464, 0, 0, 0,
	957, 0, 0, 0, 1783, 1784, 449, 1561, 0, 0,
	0, 0, 0, 1790, 1791, 1792, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2027, 2028, 853, 0, 0,
	850, 0, 0, 0, 0, 0, 0, 2039, 0, 1820,
	0, 2040, 1576, 0, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 883, 554, 0, 0, 0,
	1571, 850, 850, 0, 0, 0, 0, 1712, 554, 0,
	850, 850, 0, 0, 0, 882, 0, 0, 465, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2070, 0, 554, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 466, 850, 471, 0, 0, 1866, 467, 0,
	0, 0, 0, 468, 0, 0, 1619, 0, 0, 1983,
	1344, 1344, 1712, 0, 0, 0, 0, 0, 470, 1572,
	0, 1229, 0, 0, 0, 0, 0, 1892, 0, 0,
	0, 1895, 1896, 0, 1832, 0, 1898, 0, 0, 0,
	1838, 0, 0, 1900, 286, 1902, 554, 0, 0, 0,
	0, 0, 882, 1908, 0, 0, 0, 1288, 0, 0,
	0, 0, 0, 2130, 1344, 1344, 1344, 1344, 1344, 1344,
	1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
	1344, 1344, 1344, 0, 1344, 0, 1917, 0, 0, 0,
	0, 1228, 1228, 0, 0, 1228, 0, 0, 0, 0,
	0, 1567, 1568, 1569, 0, 0, 1566, 1564, 1565, 1557,
	1558, 1559, 1560, 1562, 1563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 850, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1950, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 882, 53, 0, 0,
	53, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 523, 0, 0, 0, 0, 0, 0, 983, 984,
	1986, 1003, 1004, 1005, 1013, 1014, 1015, 0, 0, 0,
	0, 0, 0, 0, 1006, 0, 0, 0, 2000, 2001,
	0, 986, 0, 0, 1017, 0, 0, 0, 0, 0,
	0, 1935, 0, 0, 983, 984, 0, 0, 0, 0,
	1013, 1014, 1015, 0, 985, 0, 0, 0, 2013, 0,
	1000, 0, 0, 0, 850, 0, 0, 986, 53, 0,
	1017, 2017, 53, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1977, 0, 53,
	985, 0, 0, 0, 0, 53, 1000, 0, 0, 0,
	1496, 0, 1228, 0, 0, 0, 0, 788, 0, 0,
	991, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1010,
	1018, 0, 0, 0, 0, 0, 0, 0, 1288, 0,
	0, 0, 0, 0, 0, 1016, 991, 0, 1344, 0,
	0, 850, 0, 0, 0, 0, 0, 1008, 1034, 0,
	0, 0, 0, 1001, 0, 1010, 1018, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1007, 0,
	0, 0, 0, 1008, 0, 0, 0, 0, 0, 1001,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2113, 0, 0, 1034, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1002, 0, 0, 0, 2128, 2128, 0, 0,
	0, 0, 0, 0, 0, 850, 0, 1011, 0, 0,
	1344, 0, 0, 2074, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2128, 0, 0, 0, 0, 1002, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1011, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2128, 0, 1229,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1009, 1140, 0, 997, 998, 999, 1012, 0, 996,
	994, 995, 987, 988, 989, 990, 992, 993, 0, 0,
	0, 0, 0, 0, 0, 1920, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1344, 1009, 0, 1229,
	0, 0, 1229, 1012, 0, 996, 994, 995, 987, 988,
	989, 990, 992, 993, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 723, 712,
	713, 710, 711, 702, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 739, 705, 0, 0, 0, 95, 96, 97,
	233, 754, 235, 755, 98, 756, 757, 0, 99, 239,
	240, 100, 708, 738, 758, 759, 243, 0, 101, 750,
	0, 731, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 320, 109, 110, 0, 732, 734, 0,
	733, 735, 111, 112, 287, 113, 760, 114, 761, 762,
	789, 115, 0, 116, 0, 0, 0, 753, 118, 0,
	119, 0, 0, 0, 696, 120, 121, 122, 740, 741,
	719, 0, 0, 123, 124, 763, 0, 125, 0, 126,
	0, 0, 321, 0, 127, 751, 0, 253, 0, 128,
	129, 130, 131, 747, 749, 323, 0, 135, 0, 132,
	0, 322, 133, 764, 134, 765, 766, 767, 0, 730,
	53, 324, 136, 325, 137, 138, 0, 140, 139, 0,
	752, 326, 141, 327, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 262, 147, 328, 149, 150, 152,
	151, 691, 0, 720, 748, 153, 768, 154, 155, 0,
	156, 1229, 1229, 157, 0, 1229, 158, 265, 329, 159,
	330, 742, 160, 161, 162, 163, 0, 743, 164, 268,
	165, 0, 166, 167, 168, 169, 769, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 331, 184, 185, 697, 186, 0, 190,
	191, 192, 193, 73, 271, 194, 195, 196, 736, 197,
	187, 188, 198, 332, 199, 770, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 771, 204, 744, 0, 207,
	75, 208, 209, 210, 211, 212, 0, 276, 772, 773,
	0, 0, 213, 745, 746, 718, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 737, 222, 0, 281,
	223, 224, 225, 585, 774, 0, 0, 226, 0, 0,
	0, 71, 227, 228, 229, 230, 231, 692, 72, 0,
	0, 0, 0, 690, 0, 0, 0, 0, 688, 689,
	0, 0, 0, 0, 0, 0, 0, 698, 0, 0,
	0, 0, 701, 0, 0, 0, 1968, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 0, 0,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1229, 0, 0, 0, 92, 93, 333, 94,
	334, 335, 336, 337, 232, 338, 339, 340, 341, 95,
	96, 97, 233, 234, 235, 236, 98, 237, 238, 342,
	99, 239, 240, 100, 343, 344, 241, 242, 243, 345,
	101, 244, 346, 319, 347, 102, 103, 104, 0, 105,
	348, 106, 107, 108, 349, 320, 109, 110, 350, 351,
	352, 353, 354, 355, 111, 112, 287, 113, 245, 114,
	246, 247, 356, 115, 357, 116, 358, 359, 360, 117,
	118, 361, 119, 362, 0, 363, 248, 120, 121, 122,
	249, 250, 364, 365, 366, 123, 124, 251, 1034, 125,
	367, 126, 368, 369, 321, 370, 127, 252, 371, 253,
	372, 128, 129, 130, 131, 254, 255, 323, 373, 135,
	374, 132, 375, 322, 133, 256, 134, 257, 258, 259,
	376, 260, 377, 324, 136, 325, 137, 138, 378, 140,
	139, 379, 261, 326, 141, 327, 380, 142, 381, 382,
	143, 0, 144, 145, 146, 148, 262, 147, 328, 149,
	150, 152, 151, 383, 384, 385, 263, 153, 264, 154,
	155, 386, 156, 387, 388, 157, 389, 390, 158, 265,
	329, 159, 330, 266, 160, 161, 162, 163, 391, 267,
	164, 268, 165, 392, 166, 167, 168, 169, 269, 170,
	171, 393, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 394, 183, 331, 184, 185, 270, 186,
	0, 190, 191, 192, 193, 395, 271, 194, 195, 196,
	396, 197, 187, 188, 198, 332, 199, 272, 273, 200,
	397, 206, 201, 202, 189, 203, 205, 274, 204, 275,
	398, 207, 399, 208, 209, 210, 211, 212, 400, 276,
	277, 278, 401, 402, 213, 279, 280, 403, 214, 215,
	216, 217, 404, 405, 218, 219, 220, 221, 406, 222,
	407, 281, 223, 224, 225, 282, 283, 408, 409, 226,
	410, 411, 412, 413, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	314, 0, 0, 0, 0, 0, 0, 1706, 0, 0,
	0, 0, 0, 0, 0, 1707, 92, 93, 333, 94,
	334, 335, 336, 337, 232, 338, 339, 340, 341, 95,
	96, 97, 233, 234, 235, 236, 98, 237, 238, 342,
	99, 239, 240, 100, 343, 344, 241, 242, 243, 345,
	101, 244, 346, 319, 347, 102, 103, 104, 0, 105,
	348, 106, 107, 108, 349, 320, 109, 110, 350, 351,
	352, 353, 354, 355, 111, 112, 287, 113, 245, 114,
	246, 247, 356, 115, 357, 116, 358, 359, 360, 117,
	118, 361, 119, 362, 0, 363, 248, 120, 121, 122,
	249, 250, 364, 365, 366, 123, 124, 251, 0, 125,
	367, 126, 368, 369, 321, 370, 127, 252, 371, 253,
	372, 128, 129, 130, 131, 254, 255, 323, 373, 135,
	374, 132, 375, 322, 133, 256, 134, 257, 258, 259,
	376, 260, 377, 324, 136, 325, 137, 138, 378, 140,
	139, 379, 261, 326, 141, 327, 380, 142, 381, 382,
	143, 0, 144, 145, 146, 148, 262, 147, 328, 149,
	150, 152, 151, 383, 384, 385, 263, 153, 264, 154,
	155, 386, 156, 387, 388, 157, 389, 390, 158, 265,
	329, 159, 330, 266, 160, 161, 162, 163, 391, 267,
	164, 268, 165, 392, 166, 167, 168, 169, 269, 170,
	171, 393, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 394, 183, 331, 184, 185, 270, 186,
	0, 190, 191, 192, 193, 395, 271, 194, 195, 196,
	396, 197, 187, 188, 198, 332, 199, 272, 273, 200,
	397, 206, 201, 202, 189, 203, 205, 274, 204, 275,
	398, 207, 399, 208, 209, 210, 211, 212, 400, 276,
	277, 278, 401, 402, 213, 279, 280, 403, 214, 215,
	216, 217, 404, 405, 218, 219, 220, 221, 406, 222,
	407, 281, 223, 224, 225, 282, 283, 408, 409, 226,
	410, 411, 412, 413, 227, 228, 229, 230, 231, 0,
	0, 0, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2055, 92, 93,
	333, 94, 334, 335, 336, 337, 232, 338, 339, 340,
	341, 95, 96, 97, 233, 234, 235, 236, 98, 237,
	238, 342, 99, 239, 240, 100, 343, 344, 241, 242,
	243, 345, 101, 244, 346, 319, 347, 102, 103, 104,
	0, 105, 348, 106, 107, 108, 349, 320, 109, 110,
	350, 351, 352, 353, 354, 355, 111, 112, 287, 113,
	245, 114, 246, 247, 356, 115, 357, 116, 358, 359,
	360, 117, 118, 361, 119, 362, 0, 363, 248, 120,
	121, 122, 249, 250, 364, 365, 366, 123, 124, 251,
	0, 125, 367, 126, 368, 369, 321, 370, 127, 252,
	371, 253, 372, 128, 129, 130, 131, 254, 255, 323,
	373, 135, 374, 132, 375, 322, 133, 256, 134, 257,
	258, 259, 376, 260, 377, 324, 136, 325, 137, 138,
	378, 140, 139, 379, 261, 326, 141, 327, 380, 142,
	381, 382, 143, 0, 144, 145, 146, 148, 262, 147,
	328, 149, 150, 152, 151, 383, 384, 385, 263, 153,
	264, 154, 155, 386, 156, 387, 388, 157, 389, 390,
	158, 265, 329, 159, 330, 266, 160, 161, 162, 163,
	391, 267, 164, 268, 165, 392, 166, 167, 168, 169,
	269, 170, 171, 393, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 394, 183, 331, 184, 185,
	270, 186, 0, 190, 191, 192, 193, 395, 271, 194,
	195, 196, 396, 197, 187, 188, 198, 332, 199, 272,
	273, 200, 397, 206, 201, 202, 189, 203, 205, 274,
	204, 275, 398, 207, 399, 208, 209, 210, 211, 212,
	400, 276, 277, 278, 401, 402, 213, 279, 280, 403,
	214, 215, 216, 217, 404, 405, 218, 219, 220, 221,
	406, 222, 407, 281, 223, 224, 225, 282, 283, 408,
	409, 226, 410, 411, 412, 413, 227, 228, 229, 230,
	231, 314, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 814, 0, 0, 92, 93, 333,
	94, 334, 335, 336, 337, 232, 338, 339, 340, 341,
	95, 96, 97, 233, 234, 235, 236, 98, 237, 238,
	342, 99, 239, 240, 100, 343, 344, 241, 242, 243,
	345, 101, 244, 346, 319, 347, 102, 103, 104, 0,
	105, 348, 106, 107, 108, 349, 320, 109, 110, 350,
	351, 352, 353, 354, 355, 111, 112, 287, 113, 245,
	114, 246, 247, 356, 115, 357, 116, 358, 359, 360,
	117, 118, 361, 119, 362, 0, 363, 248, 120, 121,
	122, 249, 250, 364, 365, 366, 123, 124, 251, 0,
	125, 367, 126, 368, 369, 321, 370, 127, 252, 371,
	253, 372, 128, 129, 130, 131, 254, 255, 323, 373,
	135, 374, 132, 375, 322, 133, 256, 134, 257, 258,
	259, 376, 260, 377, 324, 136, 325, 137, 138, 378,
	140, 139, 379, 261, 326, 141, 327, 380, 142, 381,
	382, 143, 0, 144, 145, 146, 148, 262, 147, 328,
	149, 150, 152, 151, 383, 384, 385, 263, 153, 264,
	154, 155, 386, 156, 387, 388, 157, 389, 390, 158,
	265, 329, 159, 330, 266, 160, 161, 162, 163, 391,
	267, 164, 268, 165, 392, 166, 167, 168, 169, 269,
	170, 171, 393, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 394, 183, 331, 184, 185, 270,
	186, 0, 190, 191, 192, 193, 395, 271, 194, 195,
	196, 396, 197, 187, 188, 198, 332, 199, 272, 273,
	200, 397, 206, 201, 202, 189, 203, 205, 274, 204,
	275, 398, 207, 399, 208, 209, 210, 211, 212, 400,
	276, 277, 278, 401, 402, 213, 279, 280, 403, 214,
	215, 216, 217, 404, 405, 218, 219, 220, 221, 406,
	222, 407, 281, 223, 224, 225, 282, 283, 408, 409,
	226, 410, 411, 412, 413, 227, 228, 229, 230, 231,
	723, 712, 713, 710, 711, 702, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 1315, 94,
	0, 0, 0, 0, 739, 705, 0, 0, 0, 95,
	96, 97, 233, 754, 235, 755, 98, 756, 757, 0,
	99, 239, 240, 100, 708, 738, 758, 759, 243, 0,
	101, 750, 0, 731, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 320, 109, 110, 0, 732,
	734, 0, 733, 735, 111, 112, 287, 113, 760, 114,
	761, 762, 0, 115, 0, 116, 0, 1316, 0, 753,
	118, 0, 119, 0, 0, 0, 696, 120, 121, 122,
	740, 741, 719, 0, 0, 123, 124, 763, 0, 125,
	0, 126, 0, 0, 321, 0, 127, 751, 0, 253,
	0, 128, 129, 130, 131, 747, 749, 323, 0, 135,
	0, 132, 0, 322, 133, 764, 134, 765, 766, 767,
	0, 730, 0, 324, 136, 325, 137, 138, 0, 140,
	139, 0, 752, 326, 141, 327, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 328, 149,
	150, 152, 151, 691, 0, 720, 748, 153, 768, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	329, 159, 330, 742, 160, 161, 162, 163, 0, 743,
	164, 268, 165, 0, 166, 167, 168, 169, 769, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 331, 184, 185, 697, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	736, 197, 187, 188, 198, 332, 199, 770, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 771, 204, 744,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	772, 773, 0, 0, 213, 745, 746, 718, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 737, 222,
	0, 281, 223, 224, 225, 282, 774, 1314, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 692,
	0, 0, 0, 0, 0, 690, 0, 0, 0, 0,
	688, 689, 1317, 723, 712, 713, 710, 711, 702, 698,
	1312, 0, 0, 0, 701, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 739, 705, 0,
	0, 0, 95, 96, 97, 233, 754, 235, 755, 98,
	756, 757, 0, 99, 239, 240, 100, 708, 738, 758,
	759, 243, 0, 101, 750, 0, 731, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 320, 109,
	110, 0, 732, 734, 0, 733, 735, 111, 112, 287,
	113, 760, 114, 761, 762, 0, 115, 0, 116, 0,
	0, 0, 753, 118, 0, 119, 0, 0, 0, 696,
	120, 121, 122, 740, 741, 719, 0, 0, 123, 124,
	763, 0, 125, 0, 126, 0, 0, 321, 0, 127,
	751, 0, 253, 0, 128, 129, 130, 131, 747, 749,
	323, 0, 135, 0, 132, 0, 322, 133, 764, 134,
	765, 766, 767, 0, 730, 0, 324, 136, 325, 137,
	138, 0, 140, 139, 0, 752, 326, 141, 327, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 328, 149, 150, 152, 151, 691, 0, 720, 748,
	153, 768, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 265, 329, 159, 330, 742, 160, 161, 162,
	163, 0, 743, 164, 268, 165, 0, 166, 167, 168,
	169, 769, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 331, 184,
	185, 697, 186, 0, 190, 191, 192, 193, 73, 271,
	194, 195, 196, 736, 197, 187, 188, 198, 332, 199,
	770, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	771, 204, 744, 0, 207, 75, 208, 209, 210, 211,
	212, 0, 276, 772, 773, 0, 0, 213, 745, 746,
	718, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 737, 222, 0, 281, 223, 224, 225, 585, 774,
	0, 0, 226, 0, 0, 0, 71, 227, 228, 229,
	230, 231, 692, 72, 0, 0, 0, 0, 690, 0,
	0, 0, 0, 688, 689, 723, 712, 713, 710, 711,
	702, 0, 698, 0, 0, 0, 0, 701, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 739,
	705, 0, 0, 0, 95, 96, 97, 233, 754, 235,
	755, 98, 756, 757, 1354, 99, 239, 240, 100, 708,
	738, 758, 759, 243, 0, 101, 750, 0, 731, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	320, 109, 110, 0, 732, 734, 0, 733, 735, 111,
	112, 287, 113, 760, 114, 761, 762, 0, 115, 0,
	116, 0, 0, 0, 753, 118, 0, 119, 0, 0,
	0, 696, 120, 121, 122, 740, 741, 719, 0, 0,
	123, 124, 763, 0, 125, 0, 126, 0, 1359, 321,
	0, 127, 751, 0, 253, 0, 128, 129, 130, 131,
	747, 749, 323, 0, 135, 0, 132, 0, 322, 133,
	764, 134, 765, 766, 767, 0, 730, 0, 324, 136,
	325, 137, 138, 0, 140, 139, 1355, 752, 326, 141,
	327, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 328, 149, 150, 152, 151, 691, 0,
	720, 748, 153, 768, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 329, 159, 330, 742, 160,
	161, 162, 163, 0, 743, 164, 268, 165, 0, 166,
	167, 168, 169, 769, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	331, 184, 185, 697, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 736, 197, 187, 188, 198,
	332, 199, 770, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 771, 204, 744, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 772, 773, 0, 1356, 213,
	745, 746, 718, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 737, 222, 0, 281, 223, 224, 225,
	282, 774, 0, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 692, 0, 0, 0, 0, 0,
	690, 0, 0, 0, 0, 688, 689, 723, 712, 713,
	710, 711, 702, 0, 698, 0, 0, 0, 0, 701,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 739, 705, 0, 0, 0, 95, 96, 97, 233,
	754, 235, 755, 98, 756, 757, 0, 99, 239, 240,
	100, 708, 738, 758, 759, 243, 0, 101, 750, 0,
	731, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 320, 109, 110, 0, 732, 734, 0, 733,
	735, 111, 112, 287, 113, 760, 114, 761, 762, 0,
	115, 0, 116, 0, 0, 0, 753, 118, 0, 119,
	0, 0, 0, 696, 120, 121, 122, 740, 741, 719,
	0, 0, 123, 124, 763, 0, 125, 0, 126, 0,
	0, 321, 0, 127, 751, 0, 253, 0, 128, 129,
	130, 131, 747, 749, 323, 0, 135, 0, 132, 0,
	322, 133, 764, 134, 765, 766, 767, 0, 730, 0,
	324, 136, 325, 137, 138, 0, 140, 139, 0, 752,
	326, 141, 327, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 147, 328, 149, 150, 152, 151,
	691, 1648, 720, 748, 153, 768, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 265, 329, 159, 330,
	742, 160, 161, 162, 163, 0, 743, 164, 268, 165,
	0, 166, 167, 168, 169, 769, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 331, 184, 185, 697, 186, 0, 190, 191,
	192, 193, 0, 271, 194, 195, 196, 736, 197, 187,
	188, 198, 332, 199, 770, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 771, 204, 744, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 276, 772, 773, 0,
	0, 213, 745, 746, 718, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 737, 222, 0, 281, 223,
	224, 225, 282, 774, 0, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 231, 692, 0, 0, 0,
	0, 0, 690, 0, 0, 0, 0, 688, 689, 686,
	723, 712, 713, 710, 711, 702, 698, 0, 0, 0,
	0, 701, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 739, 705, 0, 0, 0, 95,
	96, 97, 233, 754, 235, 755, 98, 756, 757, 0,
	99, 239, 240, 100, 708, 738, 758, 759, 243, 0,
	101, 750, 0, 731, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 320, 109, 110, 0, 732,
	734, 0, 733, 735, 111, 112, 287, 113, 760, 114,
	761, 762, 0, 115, 0, 116, 0, 0, 0, 753,
	118, 0, 119, 0, 0, 0, 696, 120, 121, 122,
	740, 741, 719, 0, 0, 123, 124, 763, 0, 125,
	0, 126, 0, 0, 321, 0, 127, 751, 0, 253,
	0, 128, 129, 130, 131, 747, 749, 323, 0, 135,
	0, 132, 0, 322, 133, 764, 134, 765, 766, 767,
	0, 730, 0, 324, 136, 325, 137, 138, 0, 140,
	139, 0, 752, 326, 141, 327, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 328, 149,
	150, 152, 151, 691, 0, 720, 748, 153, 768, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	329, 159, 330, 742, 160, 161, 162, 163, 0, 743,
	164, 268, 165, 0, 166, 167, 168, 169, 769, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 331, 184, 185, 697, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	736, 197, 187, 188, 198, 332, 199, 770, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 771, 204, 744,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	772, 773, 0, 0, 213, 745, 746, 718, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 737, 222,
	0, 281, 223, 224, 225, 282, 774, 0, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 692,
	0, 0, 0, 0, 0, 690, 0, 0, 0, 0,
	688, 689, 0, 0, 0, 0, 0, 1040, 1307, 698,
	0, 0, 0, 0, 701, 723, 712, 713, 710, 711,
	702, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 739,
	705, 0, 0, 0, 95, 96, 97, 233, 754, 235,
	755, 98, 756, 757, 0, 99, 239, 240, 100, 708,
	738, 758, 759, 243, 0, 101, 750, 0, 731, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	320, 109, 110, 0, 732, 734, 0, 733, 735, 111,
	112, 287, 113, 760, 114, 761, 762, 0, 115, 0,
	116, 0, 0, 0, 753, 118, 0, 119, 0, 0,
	0, 696, 120, 121, 122, 740, 741, 719, 0, 0,
	123, 124, 763, 0, 125, 0, 126, 0, 0, 321,
	0, 127, 751, 0, 253, 0, 128, 129, 130, 131,
	747, 749, 323, 0, 135, 0, 132, 0, 322, 133,
	764, 134, 765, 766, 767, 0, 730, 0, 324, 136,
	325, 137, 138, 0, 140, 139, 0, 752, 326, 141,
	327, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 328, 149, 150, 152, 151, 691, 0,
	720, 748, 153, 768, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 329, 159, 330, 742, 160,
	161, 162, 163, 0, 743, 164, 268, 165, 0, 166,
	167, 168, 169, 769, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	331, 184, 185, 697, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 736, 197, 187, 188, 198,
	332, 199, 770, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 771, 204, 744, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 772, 773, 0, 0, 213,
	745, 746, 718, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 737, 222, 0, 281, 223, 224, 225,
	282, 774, 0, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 692, 0, 0, 0, 0, 0,
	690, 0, 0, 0, 0, 688, 689, 723, 712, 713,
	710, 711, 702, 0, 698, 1780, 0, 0, 0, 701,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 739, 705, 0, 0, 0, 95, 96, 97, 233,
	754, 235, 755, 98, 756, 757, 0, 99, 239, 240,
	100, 708, 738, 758, 759, 243, 0, 101, 750, 0,
	731, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 320, 109, 110, 0, 732, 734, 0, 733,
	735, 111, 112, 287, 113, 760, 114, 761, 762, 0,
	115, 0, 116, 0, 0, 0, 753, 118, 0, 119,
	0, 0, 0, 696, 120, 121, 122, 740, 741, 719,
	0, 0, 123, 124, 763, 0, 125, 0, 126, 0,
	0, 321, 0, 127, 751, 0, 253, 0, 128, 129,
	130, 131, 747, 749, 323, 0, 135, 0, 132, 0,
	322, 133, 764, 134, 765, 766, 767, 0, 730, 0,
	324, 136, 325, 137, 138, 0, 140, 139, 0, 752,
	326, 141, 327, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 147, 328, 149, 150, 152, 151,
	691, 0, 720, 748, 153, 768, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 265, 329, 159, 330,
	742, 160, 161, 162, 163, 0, 743, 164, 268, 165,
	0, 166, 167, 168, 169, 769, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 331, 184, 185, 697, 186, 0, 190, 191,
	192, 193, 0, 271, 194, 195, 196, 736, 197, 187,
	188, 198, 332, 199, 770, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 771, 204, 744, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 276, 772, 773, 0,
	0, 213, 745, 746, 718, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 737, 222, 0, 281, 223,
	224, 225, 282, 774, 1737, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 231, 692, 0, 0, 0,
	0, 0, 690, 0, 0, 0, 0, 688, 689, 723,
	712, 713, 710, 711, 702, 0, 698, 0, 0, 0,
	0, 701, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 739, 705, 0, 0, 0, 95, 96,
	97, 233, 754, 235, 755, 98, 756, 757, 0, 99,
	239, 240, 100, 708, 738, 758, 759, 243, 0, 101,
	750, 0, 731, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 320, 109, 110, 0, 732, 734,
	0, 733, 735, 111, 112, 287, 113, 760, 114, 761,
	762, 0, 115, 0, 116, 0, 0, 0, 753, 118,
	0, 119, 0, 0, 0, 696, 120, 121, 122, 740,
	741, 719, 0, 0, 123, 124, 763, 0, 125, 0,
	126, 0, 0, 321, 0, 127, 751, 0, 253, 0,
	128, 129, 130, 131, 747, 749, 323, 0, 135, 0,
	132, 0, 322, 133, 764, 134, 765, 766, 767, 0,
	730, 0, 324, 136, 325, 137, 138, 0, 140, 139,
	0, 752, 326, 141, 327, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 328, 149, 150,
	152, 151, 691, 0, 720, 748, 153, 768, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 329,
	159, 330, 742, 160, 161, 162, 163, 0, 743, 164,
	268, 165, 0, 166, 167, 168, 169, 769, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 331, 184, 185, 697, 186, 0,
	190, 191, 192, 193, 0, 271, 194, 195, 196, 736,
	197, 187, 188, 198, 332, 199, 770, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 771, 204, 744, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 276, 772,
	773, 0, 0, 213, 745, 746, 718, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 737, 222, 0,
	281, 223, 224, 225, 282, 774, 0, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 231, 692, 0,
	0, 0, 0, 0, 690, 0, 0, 0, 0, 688,
	689, 723, 712, 713, 710, 711, 702, 0, 698, 1727,
	0, 0, 0, 701, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 739, 705, 0, 0, 0,
	95, 96, 97, 233, 754, 235, 755, 98, 756, 757,
	0, 99, 239, 240, 100, 708, 738, 758, 759, 243,
	0, 101, 750, 0, 731, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 320, 109, 110, 0,
	732, 734, 0, 733, 735, 111, 112, 287, 113, 760,
	114, 761, 762, 789, 115, 0, 116, 0, 0, 0,
	753, 118, 0, 119, 0, 0, 0, 696, 120, 121,
	122, 740, 741, 719, 0, 0, 123, 124, 763, 0,
	125, 0, 126, 0, 0, 321, 0, 127, 751, 0,
	253, 0, 128, 129, 130, 131, 747, 749, 323, 0,
	135, 0, 132, 0, 322, 133, 764, 134, 765, 766,
	767, 0, 730, 0, 324, 136, 325, 137, 138, 0,
	140, 139, 0, 752, 326, 141, 327, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 328,
	149, 150, 152, 151, 691, 0, 720, 748, 153, 768,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	265, 329, 159, 330, 742, 160, 161, 162, 163, 0,
	743, 164, 268, 165, 0, 166, 167, 168, 169, 769,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 331, 184, 185, 697,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 736, 197, 187, 188, 198, 332, 199, 770, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 771, 204,
	744, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 772, 773, 0, 0, 213, 745, 746, 718, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 737,
	222, 0, 281, 223, 224, 225, 282, 774, 0, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 231,
	692, 0, 0, 0, 0, 0, 690, 0, 0, 0,
	0, 688, 689, 723, 712, 713, 710, 711, 702, 0,
	698, 0, 0, 0, 0, 701, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 739, 705, 0,
	0, 0, 95, 96, 97, 233, 754, 235, 755, 98,
	756, 757, 0, 99, 239, 240, 100, 708, 738, 758,
	759, 243, 0, 101, 750, 0, 731, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 320, 109,
	110, 0, 732, 734, 0, 733, 735, 111, 112, 287,
	113, 760, 114, 761, 762, 0, 115, 0, 116, 0,
	0, 0, 753, 118, 0, 119, 0, 0, 0, 696,
	120, 121, 122, 740, 741, 719, 0, 0, 123, 124,
	763, 0, 125, 0, 126, 0, 1359, 321, 0, 127,
	751, 0, 253, 0, 128, 129, 130, 131, 747, 749,
	323, 0, 135, 0, 132, 0, 322, 133, 764, 134,
	765, 766, 767, 0, 730, 0, 324, 136, 325, 137,
	138, 0, 140, 139, 0, 752, 326, 141, 327, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 328, 149, 150, 152, 151, 691, 0, 720, 748,
	153, 768, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 265, 329, 159, 330, 742, 160, 161, 162,
	163, 0, 743, 164, 268, 165, 0, 166, 167, 168,
	169, 769, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 331, 184,
	185, 697, 186, 0, 190, 191, 192, 193, 0, 271,
	194, 195, 196, 736, 197, 187, 188, 198, 332, 199,
	770, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	771, 204, 744, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 276, 772, 773, 0, 0, 213, 745, 746,
	718, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 737, 222, 0, 281, 223, 224, 225, 282, 774,
	0, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 231, 692, 0, 0, 0, 0, 0, 690, 0,
	0, 0, 0, 688, 689, 723, 712, 713, 710, 711,
	702, 0, 698, 0, 0, 0, 0, 701, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 739,
	705, 0, 0, 0, 95, 96, 97, 233, 754, 235,
	755, 98, 756, 757, 0, 99, 239, 240, 100, 708,
	738, 758, 759, 243, 0, 101, 750, 0, 731, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	320, 109, 110, 0, 732, 734, 0, 733, 735, 111,
	112, 287, 113, 760, 114, 761, 762, 0, 115, 0,
	116, 0, 0, 0, 753, 118, 0, 119, 0, 0,
	0, 696, 120, 121, 122, 740, 741, 719, 0, 0,
	123, 124, 763, 0, 125, 0, 126, 0, 0, 321,
	0, 127, 751, 0, 253, 0, 128, 129, 130, 131,
	747, 749, 323, 0, 135, 0, 132, 0, 322, 133,
	764, 134, 765, 766, 767, 0, 730, 0, 324, 136,
	325, 137, 138, 0, 140, 139, 0, 752, 326, 141,
	327, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 328, 149, 150, 152, 151, 691, 0,
	720, 748, 153, 768, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 329, 159, 330, 742, 160,
	161, 162, 163, 0, 743, 164, 268, 165, 0, 166,
	167, 168, 169, 769, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	331, 184, 185, 697, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 736, 197, 187, 188, 198,
	332, 199, 770, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 771, 204, 744, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 772, 773, 0, 0, 213,
	745, 746, 718, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 737, 222, 0, 281, 223, 224, 225,
	282, 774, 0, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 692, 0, 0, 0, 0, 0,
	690, 0, 0, 0, 0, 688, 689, 723, 712, 713,
	710, 711, 702, 0, 698, 1302, 0, 0, 0, 701,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 739, 705, 0, 0, 0, 95, 96, 97, 233,
	754, 235, 755, 98, 756, 757, 0, 99, 239, 240,
	100, 708, 738, 758, 759, 243, 0, 101, 750, 0,
	731, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 320, 109, 110, 0, 732, 734, 0, 733,
	735, 111, 112, 287, 113, 760, 114, 761, 762, 0,
	115, 0, 116, 0, 0, 0, 753, 118, 0, 119,
	0, 0, 0, 696, 120, 121, 122, 740, 741, 719,
	0, 0, 123, 124, 763, 0, 125, 0, 126, 0,
	0, 321, 0, 127, 751, 0, 253, 0, 128, 129,
	130, 131, 747, 749, 323, 0, 135, 0, 132, 0,
	322, 133, 764, 134, 765, 766, 767, 0, 730, 0,
	324, 136, 325, 137, 138, 0, 140, 139, 0, 752,
	326, 141, 327, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 147, 328, 149, 150, 152, 151,
	691, 0, 720, 748, 153, 768, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 265, 329, 159, 330,
	742, 160, 161, 162, 163, 0, 743, 164, 268, 165,
	0, 166, 167, 168, 169, 769, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 331, 184, 185, 697, 186, 0, 190, 191,
	192, 193, 0, 271, 194, 195, 196, 736, 197, 187,
	188, 198, 332, 199, 770, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 771, 204, 744, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 276, 772, 773, 0,
	0, 213, 745, 746, 718, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 737, 222, 0, 281, 223,
	224, 225, 282, 774, 0, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 231, 692, 0, 0, 0,
	0, 0, 690, 0, 0, 0, 0, 688, 689, 686,
	723, 712, 713, 710, 711, 702, 698, 0, 0, 0,
	0, 701, 0, 0, 0, 0, 92, 93, 965, 94,
	0, 0, 0, 0, 739, 705, 0, 0, 0, 95,
	96, 97, 233, 754, 235, 755, 98, 756, 757, 0,
	99, 239, 240, 100, 708, 738, 758, 759, 243, 0,
	101, 750, 0, 731, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 320, 109, 110, 0, 732,
	734, 0, 733, 735, 111, 112, 287, 113, 760, 114,
	761, 762, 0, 115, 0, 116, 0, 0, 0, 753,
	118, 0, 119, 0, 0, 0, 696, 120, 121, 122,
	740, 741, 719, 0, 0, 123, 124, 763, 0, 125,
	0, 126, 0, 0, 321, 0, 127, 751, 0, 253,
	0, 128, 129, 130, 131, 747, 749, 323, 0, 135,
	0, 132, 0, 322, 133, 764, 134, 765, 766, 767,
	0, 730, 0, 324, 136, 325, 137, 138, 0, 140,
	139, 0, 752, 326, 141, 327, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 328, 149,
	150, 152, 151, 691, 0, 720, 748, 153, 768, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	329, 159, 330, 742, 160, 161, 162, 163, 0, 743,
	164, 268, 165, 0, 166, 167, 168, 169, 769, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 331, 184, 185, 697, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	736, 197, 187, 188, 198, 332, 199, 770, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 771, 204, 744,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	772, 773, 0, 0, 213, 745, 746, 718, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 737, 222,
	0, 281, 223, 224, 225, 282, 774, 0, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 692,
	0, 0, 0, 0, 0, 690, 0, 0, 0, 0,
	688, 689, 723, 712, 713, 710, 711, 702, 0, 698,
	0, 0, 0, 0, 701, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 739, 705, 0, 0,
	0, 95, 96, 97, 233, 754, 235, 755, 98, 756,
	757, 0, 99, 239, 240, 100, 708, 738, 758, 759,
	243, 0, 101, 750, 0, 731, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 320, 109, 2127,
	0, 732, 734, 0, 733, 735, 111, 112, 287, 113,
	760, 114, 761, 762, 0, 115, 0, 116, 0, 0,
	0, 753, 118, 0, 119, 0, 0, 0, 696, 120,
	121, 122, 740, 741, 719, 0, 0, 123, 124, 763,
	0, 125, 0, 126, 0, 0, 321, 0, 127, 751,
	0, 253, 0, 128, 129, 130, 131, 747, 749, 323,
	0, 135, 0, 132, 0, 322, 133, 764, 134, 765,
	766, 767, 0, 730, 0, 324, 136, 325, 137, 138,
	0, 140, 139, 0, 752, 326, 141, 327, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	328, 149, 150, 152, 151, 691, 0, 720, 748, 153,
	768, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 329, 159, 330, 742, 160, 161, 162, 163,
	0, 743, 164, 268, 165, 0, 166, 167, 168, 169,
	769, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 331, 184, 185,
	697, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 736, 197, 187, 188, 198, 332, 199, 770,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 771,
	204, 744, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 772, 773, 0, 0, 213, 745, 746, 718,
	214, 215, 2126, 217, 0, 0, 218, 219, 220, 221,
	737, 222, 0, 281, 223, 224, 225, 282, 774, 0,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 692, 0, 0, 0, 0, 0, 690, 0, 0,
	0, 0, 688, 689, 723, 712, 713, 710, 711, 702,
	0, 698, 0, 0, 0, 0, 701, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 739, 705,
	0, 0, 0, 95, 96, 97, 2125, 754, 235, 755,
	98, 756, 757, 0, 99, 239, 240, 100, 708, 738,
	758, 759, 243, 0, 101, 750, 0, 731, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 320,
	109, 2127, 0, 732, 734, 0, 733, 735, 111, 112,
	287, 113, 760, 114, 761, 762, 0, 115, 0, 116,
	0, 0, 0, 753, 118, 0, 119, 0, 0, 0,
	696, 120, 121, 122, 740, 741, 719, 0, 0, 123,
	124, 763, 0, 125, 0, 126, 0, 0, 321, 0,
	127, 751, 0, 253, 0, 128, 129, 130, 131, 747,
	749, 323, 0, 135, 0, 132, 0, 322, 133, 764,
	134, 765, 766, 767, 0, 730, 0, 324, 136, 325,
	137, 138, 0, 140, 139, 0, 752, 326, 141, 327,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 328, 149, 150, 152, 151, 691, 0, 720,
	748, 153, 768, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 265, 329, 159, 330, 742, 160, 161,
	162, 163, 0, 743, 164, 268, 165, 0, 166, 167,
	168, 169, 769, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 331,
	184, 185, 697, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 736, 197, 187, 188, 198, 332,
	199, 770, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 771, 204, 744, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 772, 773, 0, 0, 213, 745,
	746, 718, 214, 215, 2126, 217, 0, 0, 218, 219,
	220, 221, 737, 222, 0, 281, 223, 224, 225, 282,
	774, 0, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 231, 692, 0, 0, 0, 0, 0, 690,
	0, 0, 0, 0, 688, 689, 723, 712, 713, 710,
	711, 702, 0, 698, 0, 0, 0, 0, 701, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	739, 705, 0, 0, 0, 95, 96, 97, 233, 754,
	235, 755, 98, 756, 757, 0, 99, 239, 240, 100,
	708, 738, 758, 759, 243, 0, 101, 750, 0, 731,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 320, 109, 110, 0, 732, 734, 0, 733, 735,
	111, 112, 287, 113, 760, 114, 761, 762, 0, 115,
	0, 116, 0, 0, 0, 753, 118, 0, 119, 0,
	0, 0, 696, 120, 121, 122, 740, 741, 719, 0,
	0, 123, 124, 763, 0, 125, 0, 126, 0, 0,
	321, 0, 127, 751, 0, 253, 0, 128, 129, 130,
	131, 747, 749, 323, 0, 135, 0, 132, 0, 322,
	133, 764, 134, 765, 766, 767, 0, 730, 0, 324,
	136, 325, 137, 138, 0, 140, 139, 0, 752, 326,
	141, 327, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 262, 147, 328, 149, 150, 152, 151, 691,
	0, 720, 748, 153, 768, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 265, 329, 159, 330, 742,
	160, 161, 162, 163, 0, 743, 164, 268, 165, 0,
	166, 167, 168, 169, 769, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 331, 184, 185, 697, 186, 0, 190, 191, 192,
	193, 0, 271, 194, 195, 196, 736, 197, 187, 188,
	198, 332, 199, 770, 273, 200, 0, 206, 201, 202,
	189, 203, 205, 771, 204, 744, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 276, 772, 773, 0, 0,
	213, 745, 746, 718, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 737, 222, 0, 281, 223, 224,
	225, 282, 774, 0, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 231, 692, 0, 0, 0, 0,
	0, 690, 0, 0, 0, 0, 688, 689, 1331, 712,
	713, 710, 711, 702, 0, 698, 0, 0, 0, 0,
	701, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 739, 705, 0, 0, 0, 95, 96, 97,
	233, 754, 235, 755, 98, 756, 757, 0, 99, 239,
	240, 100, 708, 738, 758, 759, 243, 0, 101, 750,
	0, 731, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 320, 109, 110, 0, 732, 734, 0,
	733, 735, 111, 112, 287, 113, 760, 1334, 761, 762,
	0, 115, 0, 116, 0, 0, 0, 753, 118, 0,
	119, 0, 0, 0, 696, 120, 121, 122, 740, 741,
	719, 0, 0, 123, 124, 763, 0, 125, 0, 126,
	0, 0, 321, 0, 127, 751, 0, 253, 0, 128,
	129, 1335, 131, 747, 749, 323, 0, 135, 0, 132,
	0, 322, 133, 764, 134, 765, 766, 767, 0, 730,
	0, 324, 136, 325, 137, 138, 0, 140, 139, 0,
	752, 326, 141, 327, 0, 142, 0, 0, 143, 0,
	144, 1336, 1333, 148, 262, 147, 328, 149, 150, 152,
	151, 691, 0, 720, 748, 153, 768, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 265, 329, 159,
	330, 742, 160, 161, 162, 163, 0, 743, 164, 268,
	165, 0, 166, 167, 168, 169, 769, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 331, 184, 185, 697, 186, 0, 190,
	191, 192, 1337, 0, 271, 194, 195, 196, 736, 197,
	187, 188, 198, 332, 199, 770, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 771, 204, 744, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 276, 772, 773,
	0, 0, 213, 745, 746, 718, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 737, 222, 0, 281,
	223, 224, 225, 282, 774, 0, 0, 226, 0, 0,
	0, 0, 227, 228, 229, 1332, 231, 692, 0, 0,
	0, 0, 0, 690, 0, 0, 0, 0, 688, 689,
	723, 712, 713, 710, 711, 702, 0, 698, 0, 0,
	0, 0, 701, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 739, 705, 0, 0, 0, 95,
	96, 97, 233, 754, 235, 755, 98, 756, 757, 0,
	99, 239, 240, 100, 708, 738, 758, 759, 243, 0,
	101, 750, 0, 731, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 320, 109, 110, 0, 732,
	734, 0, 733, 735, 111, 112, 287, 113, 760, 114,
	761, 762, 0, 115, 0, 116, 0, 0, 0, 753,
	118, 0, 119, 0, 0, 0, 696, 120, 121, 122,
	740, 741, 719, 0, 0, 123, 124, 763, 0, 125,
	0, 126, 0, 0, 321, 0, 127, 751, 0, 253,
	0, 128, 129, 130, 131, 747, 749, 323, 0, 135,
	0, 132, 0, 322, 133, 764, 134, 765, 766, 767,
	0, 730, 0, 324, 136, 325, 137, 138, 0, 140,
	139, 0, 752, 326, 141, 327, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 328, 149,
	150, 152, 151, 0, 0, 720, 748, 153, 768, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	329, 159, 330, 742, 160, 161, 162, 163, 0, 743,
	164, 268, 165, 0, 166, 167, 168, 169, 769, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 331, 184, 185, 1349, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	736, 197, 187, 188, 198, 332, 199, 770, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 771, 204, 744,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	772, 773, 0, 0, 213, 745, 746, 718, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 737, 222,
	0, 281, 223, 224, 225, 282, 774, 0, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 1347, 0, 0, 0, 0,
	1345, 1346, 723, 712, 713, 710, 711, 702, 0, 1348,
	0, 0, 0, 0, 701, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 739, 705, 0, 0,
	0, 95, 96, 97, 233, 754, 235, 755, 98, 756,
	757, 0, 99, 239, 240, 100, 0, 738, 758, 759,
	243, 0, 101, 750, 0, 731, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 320, 109, 110,
	0, 732, 734, 0, 733, 735, 111, 112, 287, 113,
	760, 114, 761, 762, 0, 115, 0, 116, 0, 0,
	0, 753, 118, 0, 119, 0, 0, 0, 248, 120,
	121, 122, 740, 741, 719, 0, 0, 123, 124, 763,
	0, 125, 0, 126, 0, 0, 321, 0, 127, 751,
	0, 253, 0, 128, 129, 130, 131, 747, 749, 323,
	0, 135, 0, 132, 0, 322, 133, 764, 134, 765,
	766, 767, 0, 730, 0, 324, 136, 325, 137, 138,
	0, 140, 139, 0, 752, 326, 141, 327, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	328, 149, 150, 152, 151, 0, 0, 720, 748, 153,
	768, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 329, 159, 330, 742, 160, 161, 162, 163,
	0, 743, 164, 268, 165, 0, 166, 167, 168, 169,
	769, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 331, 184, 185,
	1349, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 736, 197, 187, 188, 198, 332, 199, 770,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 771,
	204, 744, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 772, 773, 0, 0, 213, 745, 746, 718,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	737, 222, 0, 281, 223, 224, 225, 282, 774, 0,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 0, 723, 712, 713, 710, 711, 702, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 1348, 94, 0, 0, 0, 701, 739, 705, 0,
	0, 0, 95, 96, 97, 0, 754, 235, 755, 98,
	756, 757, 0, 99, 239, 240, 100, 708, 738, 758,
	759, 243, 0, 101, 750, 0, 731, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 320, 109,
	2127, 0, 732, 734, 0, 733, 735, 111, 112, 287,
	113, 760, 114, 761, 762, 0, 115, 0, 116, 0,
	0, 0, 753, 118, 0, 119, 0, 0, 0, 696,
	120, 121, 122, 740, 741, 719, 0, 0, 123, 124,
	763, 0, 125, 0, 126, 0, 0, 321, 0, 127,
	751, 0, 253, 0, 128, 129, 130, 131, 747, 749,
	0, 0, 135, 0, 132, 0, 322, 133, 764, 134,
	765, 766, 767, 0, 730, 0, 0, 136, 325, 137,
	138, 0, 140, 139, 0, 752, 326, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 328, 149, 150, 152, 151, 691, 0, 720, 748,
	153, 768, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 265, 329, 159, 330, 742, 160, 161, 162,
	163, 0, 743, 164, 268, 165, 0, 166, 167, 168,
	169, 769, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 331, 184,
	185, 697, 186, 0, 190, 191, 192, 193, 0, 271,
	194, 195, 196, 736, 197, 187, 188, 198, 0, 199,
	770, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	771, 204, 744, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 276, 772, 773, 0, 0, 213, 745, 746,
	718, 214, 215, 2126, 217, 0, 0, 218, 219, 220,
	221, 737, 222, 0, 281, 223, 224, 225, 282, 774,
	0, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 231, 723, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 688, 689, 0, 0, 0, 92, 93,
	0, 94, 698, 0, 0, 0, 739, 701, 0, 0,
	0, 95, 96, 97, 233, 234, 235, 236, 98, 237,
	238, 0, 99, 239, 240, 100, 0, 738, 241, 242,
	243, 0, 101, 750, 0, 731, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 320, 109, 110,
	0, 732, 734, 0, 733, 735, 111, 112, 287, 113,
	245, 114, 246, 247, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 248, 120,
	121, 122, 740, 741, 0, 0, 0, 123, 124, 251,
	0, 125, 0, 126, 0, 0, 321, 0, 127, 751,
	0, 253, 0, 128, 129, 130, 131, 747, 749, 323,
	0, 135, 0, 132, 0, 322, 133, 256, 134, 257,
	258, 259, 0, 260, 0, 324, 136, 325, 137, 138,
	0, 140, 139, 0, 752, 326, 141, 327, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	328, 149, 150, 152, 151, 0, 0, 0, 748, 153,
	264, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 329, 159, 330, 742, 160, 161, 162, 163,
	0, 743, 164, 268, 165, 0, 166, 167, 168, 169,
	269, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 331, 184, 185,
	270, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 736, 197, 187, 188, 198, 332, 199, 272,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 274,
	204, 744, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 277, 278, 0, 0, 213, 745, 746, 0,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	737, 222, 0, 281, 223, 224, 225, 282, 283, 0,
	0, 226, 0, 503, 0, 0, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 232, 0, 0,
	0, 1621, 95, 96, 97, 233, 234, 235, 236, 98,
	237, 238, 0, 99, 239, 240, 100, 0, 0, 241,
	242, 243, 0, 101, 244, 0, 319, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 320, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 287,
	113, 245, 114, 246, 247, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 248,
	120, 121, 122, 249, 250, 0, 0, 0, 123, 124,
	251, 0, 125, 0, 126, 0, 0, 321, 0, 127,
	252, 0, 253, 0, 128, 129, 130, 131, 254, 255,
	323, 0, 135, 0, 132, 0, 322, 133, 256, 134,
	257, 258, 259, 0, 260, 0, 324, 136, 325, 137,
	138, 0, 140, 139, 0, 261, 326, 141, 327, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 328, 149, 150, 152, 151, 0, 0, 0, 263,
	153, 264, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 265, 329, 159, 330, 266, 160, 161, 162,
	163, 0, 267, 164, 268, 165, 0, 166, 167, 168,
	169, 269, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 331, 184,
	185, 270, 186, 0, 190, 191, 192, 193, 73, 271,
	194, 195, 196, 0, 197, 187, 188, 198, 332, 199,
	272, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	274, 204, 275, 0, 207, 75, 208, 209, 210, 211,
	212, 0, 276, 277, 278, 0, 0, 213, 279, 280,
	0, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 281, 223, 224, 225, 585, 283,
	0, 0, 226, 0, 0, 0, 71, 227, 228, 229,
	230, 231, 0, 72, 503, 500, 0, 501, 496, 491,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 70, 94, 0, 0, 0, 0, 232, 0,
	0, 0, 0, 95, 96, 97, 233, 234, 235, 236,
	98, 237, 238, 0, 99, 239, 240, 100, 0, 0,
	241, 242, 243, 0, 101, 244, 0, 319, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 320,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	287, 113, 245, 114, 246, 247, 914, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	248, 120, 121, 122, 249, 250, 493, 0, 0, 123,
	124, 251, 0, 125, 0, 126, 0, 0, 321, 0,
	127, 252, 0, 253, 0, 128, 129, 130, 131, 254,
	255, 323, 0, 135, 0, 132, 0, 322, 133, 256,
	134, 257, 258, 259, 0, 260, 0, 324, 136, 325,
	137, 138, 0, 140, 139, 0, 261, 326, 141, 327,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 328, 149, 150, 152, 151, 0, 0, 0,
	263, 153, 264, 154, 155, 0, 156, 494, 0, 157,
	0, 0, 158, 265, 329, 159, 330, 266, 160, 161,
	162, 163, 0, 267, 164, 268, 165, 0, 166, 167,
	168, 169, 269, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 331,
	184, 185, 270, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 0, 197, 187, 188, 198, 332,
	199, 272, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 274, 204, 275, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 277, 278, 0, 0, 213, 279,
	280, 492, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 281, 223, 224, 225, 282,
	283, 0, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 231, 503, 500, 0, 501, 496, 491, 0,
	0, 0, 0, 0, 502, 497, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 95, 96, 97, 233, 234, 235, 236, 98,
	237, 238, 0, 99, 239, 240, 100, 0, 0, 241,
	242, 243, 0, 101, 244, 0, 319, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 320, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 287,
	113, 245, 114, 246, 247, 911, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 248,
	120, 121, 122, 249, 250, 493, 0, 0, 123, 124,
	251, 0, 125, 0, 126, 0, 0, 321, 0, 127,
	252, 0, 253, 0, 128, 129, 130, 131, 254, 255,
	323, 0, 135, 0, 132, 0, 322, 133, 256, 134,
	257, 258, 259, 0, 260, 0, 324, 136, 325, 137,
	138, 0, 140, 139, 0, 261, 326, 141, 327, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 328, 149, 150, 152, 151, 0, 0, 0, 263,
	153, 264, 154, 155, 0, 156, 494, 0, 157, 0,
	0, 158, 265, 329, 159, 330, 266, 160, 161, 162,
	163, 0, 267, 164, 268, 165, 0, 166, 167, 168,
	169, 269, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 331, 184,
	185, 270, 186, 0, 190, 191, 192, 193, 0, 271,
	194, 195, 196, 0, 197, 187, 188, 198, 332, 199,
	272, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	274, 204, 275, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 276, 277, 278, 0, 0, 213, 279, 280,
	492, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 281, 223, 224, 225, 282, 283,
	0, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 231, 503, 500, 0, 501, 496, 491, 0, 0,
	0, 0, 0, 502, 497, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 232, 0, 0, 0,
	0, 95, 96, 97, 233, 234, 235, 236, 98, 237,
	238, 0, 99, 239, 240, 100, 0, 0, 241, 242,
	243, 0, 101, 244, 0, 319, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 320, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 287, 113,
	245, 114, 246, 247, 617, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 248, 120,
	121, 122, 249, 250, 493, 0, 0, 123, 124, 251,
	0, 125, 0, 126, 0, 0, 321, 0, 127, 252,
	0, 253, 0, 128, 129, 130, 131, 254, 255, 323,
	0, 135, 0, 132, 0, 322, 133, 256, 134, 257,
	258, 259, 0, 260, 0, 324, 136, 325, 137, 138,
	0, 140, 139, 0, 261, 326, 141, 327, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	328, 149, 150, 152, 151, 0, 0, 0, 263, 153,
	264, 154, 155, 0, 156, 494, 0, 157, 0, 0,
	158, 265, 329, 159, 330, 266, 160, 161, 162, 163,
	0, 267, 164, 268, 165, 0, 166, 167, 168, 169,
	269, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 331, 184, 185,
	270, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 0, 197, 187, 188, 198, 332, 199, 272,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 274,
	204, 275, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 277, 278, 0, 0, 213, 279, 280, 492,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	0, 222, 0, 281, 223, 224, 225, 282, 283, 0,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 503, 500, 0, 501, 496, 491, 0, 0, 0,
	0, 0, 502, 497, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 232, 0, 0, 0, 0,
	95, 96, 97, 233, 234, 235, 236, 98, 237, 238,
	0, 99, 239, 240, 100, 0, 0, 241, 242, 243,
	0, 101, 244, 0, 319, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 320, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 287, 113, 245,
	114, 246, 247, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 248, 120, 121,
	122, 249, 250, 493, 0, 0, 123, 124, 251, 0,
	125, 0, 126, 0, 0, 321, 0, 127, 252, 0,
	253, 0, 128, 129, 130, 131, 254, 255, 323, 0,
	135, 0, 132, 0, 322, 133, 256, 134, 257, 258,
	259, 0, 260, 0, 324, 136, 325, 137, 138, 0,
	140, 139, 0, 261, 326, 141, 327, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 328,
	149, 150, 152, 151, 0, 0, 0, 263, 153, 264,
	154, 155, 0, 156, 494, 0, 157, 0, 0, 158,
	265, 329, 159, 330, 266, 160, 161, 162, 163, 0,
	267, 164, 268, 165, 0, 166, 167, 168, 169, 269,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 331, 184, 185, 270,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 0, 197, 187, 188, 198, 332, 199, 272, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 274, 204,
	275, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 277, 278, 0, 0, 213, 279, 280, 492, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 281, 223, 224, 225, 282, 283, 0, 89,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 502, 497, 232, 0, 0, 0, 0, 95, 96,
	97, 233, 234, 235, 236, 98, 237, 238, 0, 99,
	239, 240, 100, 0, 0, 241, 242, 243, 0, 101,
	244, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 287, 113, 245, 114, 246,
	247, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 248, 120, 121, 122, 249,
	250, 0, 0, 0, 123, 124, 251, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 252, 0, 253, 0,
	128, 129, 130, 131, 254, 255, 0, 0, 135, 0,
	132, 0, 0, 133, 256, 134, 257, 258, 259, 0,
	260, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 261, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 263, 153, 264, 154, 155,
	0, 156, 0, 537, 157, 0, 0, 158, 265, 0,
	159, 0, 266, 160, 161, 162, 163, 0, 267, 164,
	268, 165, 0, 166, 167, 168, 169, 269, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 270, 186, 0,
	190, 191, 192, 193, 73, 271, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 272, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 274, 204, 275, 0,
	207, 75, 208, 209, 210, 211, 212, 0, 276, 277,
	278, 0, 0, 213, 279, 280, 0, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	281, 223, 224, 225, 585, 283, 0, 0, 226, 0,
	89, 0, 71, 227, 228, 229, 230, 231, 0, 72,
	0, 0, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 232, 0, 1226, 0, 1231, 95,
	96, 97, 233, 234, 235, 236, 98, 237, 238, 0,
	99, 239, 240, 100, 0, 0, 241, 242, 243, 0,
	101, 244, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 287, 113, 245, 114,
	246, 247, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 248, 120, 121, 122,
	249, 250, 0, 0, 0, 123, 124, 251, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 252, 0, 253,
	0, 128, 129, 130, 131, 254, 255, 0, 0, 135,
	0, 132, 0, 0, 133, 256, 134, 257, 258, 259,
	0, 260, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 261, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 263, 153, 264, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	0, 159, 0, 266, 160, 161, 162, 163, 0, 267,
	164, 268, 165, 0, 166, 167, 168, 169, 269, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 270, 186,
	0, 190, 191, 192, 193, 73, 271, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 272, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 274, 204, 275,
	0, 207, 75, 208, 209, 210, 211, 212, 0, 276,
	277, 278, 0, 0, 213, 279, 280, 0, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 0, 222,
	0, 281, 223, 224, 225, 585, 283, 0, 0, 226,
	0, 89, 0, 71, 227, 228, 229, 230, 231, 0,
	72, 0, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 232, 0, 0, 0, 70,
	95, 96, 97, 233, 234, 235, 236, 98, 237, 238,
	0, 99, 239, 240, 100, 0, 0, 241, 242, 243,
	0, 101, 244, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 287, 113, 245,
	114, 246, 247, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 248, 120, 121,
	122, 249, 250, 0, 0, 0, 123, 124, 251, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 252, 0,
	253, 0, 128, 129, 130, 131, 254, 255, 0, 0,
	135, 0, 132, 0, 0, 133, 256, 134, 257, 258,
	259, 0, 260, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 261, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 263, 153, 264,
	154, 155, 0, 156, 0, 537, 157, 0, 0, 158,
	265, 0, 159, 0, 266, 160, 161, 162, 163, 0,
	267, 164, 268, 165, 0, 166, 167, 168, 169, 269,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 270,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 0, 197, 187, 188, 198, 0, 199, 272, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 274, 204,
	275, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 277, 278, 0, 0, 213, 279, 280, 0, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 281, 223, 224, 225, 282, 283, 0, 0,
	226, 0, 89, 0, 0, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 232, 0, 1226, 0,
	1231, 95, 96, 97, 233, 234, 235, 236, 98, 237,
	238, 0, 99, 239, 240, 100, 0, 0, 241, 242,
	243, 0, 101, 244, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 287, 113,
	245, 114, 246, 247, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 248, 120,
	121, 122, 249, 250, 0, 0, 0, 123, 124, 251,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 252,
	0, 253, 0, 128, 129, 130, 131, 254, 255, 0,
	0, 135, 0, 132, 0, 0, 133, 256, 134, 257,
	258, 259, 0, 260, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 261, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	0, 149, 150, 152, 151, 0, 0, 0, 263, 153,
	264, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 0, 159, 0, 266, 160, 161, 162, 163,
	0, 267, 164, 268, 165, 0, 166, 167, 168, 169,
	269, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	270, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 0, 197, 187, 188, 198, 0, 199, 272,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 274,
	204, 275, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 277, 278, 0, 0, 213, 279, 280, 0,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	0, 222, 0, 281, 223, 224, 225, 282, 283, 0,
	0, 226, 0, 0, 89, 0, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 232, 0,
	0, 0, 818, 95, 96, 97, 233, 234, 235, 236,
	98, 237, 238, 0, 99, 239, 240, 100, 0, 0,
	241, 242, 243, 0, 101, 244, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	287, 113, 245, 114, 246, 247, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	248, 120, 121, 122, 249, 250, 0, 0, 0, 123,
	124, 251, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 252, 0, 253, 0, 128, 129, 130, 131, 254,
	255, 0, 0, 135, 0, 132, 0, 0, 133, 256,
	134, 257, 258, 259, 0, 260, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 261, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	263, 153, 264, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 265, 0, 159, 0, 266, 160, 161,
	162, 163, 0, 267, 164, 268, 165, 0, 166, 167,
	168, 169, 269, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 270, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 272, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 274, 204, 275, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 277, 278, 0, 0, 213, 279,
	280, 0, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 281, 223, 224, 225, 282,
	283, 0, 0, 226, 0, 89, 0, 0, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 232,
	0, 0, 0, 1141, 95, 96, 97, 233, 234, 235,
	236, 98, 237, 238, 0, 99, 239, 240, 100, 0,
	0, 241, 242, 243, 0, 101, 244, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 287, 113, 245, 114, 246, 247, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 248, 120, 121, 122, 249, 250, 0, 0, 0,
	123, 124, 251, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 252, 0, 253, 0, 128, 129, 130, 131,
	254, 255, 0, 0, 135, 0, 132, 0, 0, 133,
	256, 134, 257, 258, 259, 0, 260, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 261, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 263, 153, 264, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 0, 159, 0, 266, 160,
	161, 162, 163, 0, 267, 164, 268, 165, 0, 166,
	167, 168, 169, 269, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 270, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 272, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 274, 204, 275, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 277, 278, 0, 0, 213,
	279, 280, 0, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 0, 222, 0, 281, 223, 224, 225,
	282, 283, 0, 0, 226, 0, 89, 0, 0, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	232, 0, 0, 0, 1744, 95, 96, 97, 233, 234,
	235, 236, 98, 237, 238, 0, 99, 239, 240, 100,
	0, 0, 241, 242, 243, 0, 101, 244, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 287, 113, 245, 114, 246, 247, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 248, 120, 121, 122, 249, 250, 0, 0,
	0, 123, 124, 251, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 252, 0, 253, 0, 128, 129, 130,
	131, 254, 255, 0, 0, 135, 0, 132, 0, 0,
	133, 256, 134, 257, 258, 259, 0, 260, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 261, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 262, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 263, 153, 264, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 265, 0, 159, 0, 266,
	160, 161, 162, 163, 0, 267, 164, 268, 165, 0,
	166, 167, 168, 169, 269, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 270, 186, 0, 190, 191, 192,
	193, 0, 271, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 272, 273, 200, 0, 206, 201, 202,
	189, 203, 205, 274, 204, 275, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 276, 277, 278, 0, 0,
	213, 279, 280, 0, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 0, 222, 0, 281, 223, 224,
	225, 282, 283, 0, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 231, 723, 712, 713, 710, 711,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 0, 94, 785, 0, 0, 0, 232,
	0, 0, 0, 0, 95, 96, 97, 233, 754, 235,
	755, 98, 756, 757, 0, 99, 239, 240, 100, 0,
	0, 758, 759, 243, 0, 101, 244, 0, 319, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	320, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 287, 113, 760, 114, 761, 762, 0, 115, 0,
	116, 0, 0, 0, 753, 118, 0, 119, 0, 0,
	0, 248, 120, 121, 122, 249, 250, 719, 0, 0,
	123, 124, 763, 0, 125, 0, 126, 0, 0, 321,
	0, 127, 252, 0, 253, 0, 128, 129, 130, 131,
	254, 255, 323, 0, 135, 0, 132, 0, 322, 133,
	764, 134, 765, 766, 767, 0, 730, 0, 324, 136,
	325, 137, 138, 0, 140, 139, 0, 261, 326, 141,
	327, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 328, 149, 150, 152, 151, 0, 0,
	720, 263, 153, 768, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 329, 159, 330, 266, 160,
	161, 162, 163, 0, 267, 164, 268, 165, 0, 166,
	167, 168, 169, 769, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	331, 184, 185, 270, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 0, 197, 187, 188, 198,
	332, 199, 770, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 771, 204, 275, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 772, 773, 0, 0, 213,
	279, 280, 718, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 0, 222, 0, 281, 223, 224, 225,
	282, 774, 503, 500, 226, 0, 0, 623, 0, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 232, 0, 0, 0,
	0, 95, 96, 97, 233, 234, 235, 236, 98, 237,
	238, 0, 99, 239, 240, 100, 0, 0, 241, 242,
	243, 0, 101, 244, 0, 319, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 320, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 287, 113,
	245, 114, 246, 247, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 248, 120,
	121, 122, 249, 250, 0, 0, 0, 123, 124, 251,
	0, 125, 0, 126, 0, 0, 321, 0, 127, 252,
	0, 253, 0, 128, 129, 130, 131, 254, 255, 323,
	0, 135, 0, 132, 0, 322, 133, 256, 134, 257,
	258, 259, 0, 260, 0, 324, 136, 325, 137, 138,
	0, 140, 139, 0, 261, 326, 141, 327, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	328, 149, 150, 152, 151, 0, 0, 0, 263, 153,
	264, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 329, 159, 330, 266, 160, 161, 162, 163,
	0, 267, 164, 268, 165, 0, 166, 167, 168, 169,
	269, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 331, 184, 185,
	270, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 0, 197, 187, 188, 198, 332, 199, 272,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 274,
	204, 275, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 277, 278, 0, 0, 213, 279, 280, 0,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	0, 222, 0, 281, 223, 224, 225, 282, 283, 89,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 232, 0, 0, 0, 0, 95, 96,
	97, 233, 234, 235, 236, 98, 237, 238, 0, 99,
	239, 240, 100, 0, 0, 241, 242, 243, 0, 101,
	244, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 85, 113, 245, 114, 246,
	247, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 248, 120, 121, 122, 249,
	250, 0, 0, 0, 123, 124, 251, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 252, 0, 253, 0,
	128, 129, 130, 131, 254, 255, 0, 0, 135, 0,
	132, 0, 0, 133, 256, 134, 257, 258, 259, 0,
	260, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 261, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 263, 153, 264, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 0,
	159, 0, 266, 160, 161, 162, 163, 0, 267, 164,
	268, 165, 0, 166, 167, 168, 169, 269, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 270, 186, 0,
	190, 191, 192, 193, 0, 271, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 272, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 274, 204, 275, 0,
	207, 84, 208, 209, 210, 211, 212, 0, 276, 277,
	278, 0, 0, 213, 279, 280, 0, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	281, 223, 224, 225, 282, 283, 503, 500, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	232, 88, 0, 0, 0, 95, 96, 97, 233, 234,
	235, 236, 98, 237, 238, 0, 99, 239, 240, 100,
	0, 0, 241, 242, 243, 0, 101, 244, 0, 319,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 320, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 287, 113, 245, 114, 246, 247, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 248, 120, 121, 122, 249, 250, 0, 0,
	0, 123, 124, 251, 0, 125, 0, 126, 0, 0,
	321, 0, 127, 252, 0, 253, 0, 128, 129, 130,
	131, 254, 255, 323, 0, 135, 0, 132, 0, 322,
	133, 256, 134, 257, 258, 259, 0, 260, 0, 324,
	136, 325, 137, 138, 0, 140, 139, 0, 261, 326,
	141, 327, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 262, 147, 328, 149, 150, 152, 151, 0,
	0, 0, 263, 153, 264, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 265, 329, 159, 330, 266,
	160, 161, 162, 163, 0, 267, 164, 268, 165, 0,
	166, 167, 168, 169, 269, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 331, 184, 185, 270, 186, 0, 190, 191, 192,
	193, 0, 271, 194, 195, 196, 0, 197, 187, 188,
	198, 332, 199, 272, 273, 200, 0, 206, 201, 202,
	189, 203, 205, 274, 204, 275, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 276, 277, 278, 0, 0,
	213, 279, 280, 0, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 0, 222, 0, 281, 223, 224,
	225, 282, 283, 89, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 95, 96, 97, 233, 234, 235, 236, 98,
	237, 238, 0, 99, 239, 240, 100, 0, 0, 241,
	242, 243, 0, 101, 244, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 287,
	113, 245, 114, 246, 247, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 248,
	120, 121, 122, 249, 250, 0, 0, 0, 123, 124,
	251, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	252, 0, 253, 0, 128, 129, 130, 131, 254, 255,
	0, 0, 135, 0, 132, 0, 0, 133, 256, 134,
	257, 258, 259, 0, 260, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 261, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 263,
	153, 264, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 265, 0, 159, 0, 266, 160, 161, 162,
	163, 0, 267, 164, 268, 165, 0, 166, 167, 168,
	169, 269, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 270, 186, 0, 190, 191, 192, 193, 0, 271,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	272, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	274, 204, 275, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 276, 277, 278, 0, 0, 213, 279, 280,
	0, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 281, 223, 224, 225, 282, 283,
	503, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 232, 88, 0, 0, 0, 95,
	96, 97, 233, 234, 235, 236, 98, 237, 238, 0,
	99, 239, 240, 100, 0, 0, 241, 242, 243, 0,
	101, 244, 0, 319, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 320, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 287, 113, 245, 114,
	246, 247, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 248, 120, 121, 122,
	249, 250, 0, 0, 0, 123, 124, 251, 0, 125,
	0, 126, 0, 0, 321, 0, 127, 252, 0, 253,
	0, 128, 129, 130, 131, 254, 255, 323, 0, 135,
	0, 132, 0, 322, 133, 256, 134, 257, 258, 259,
	0, 260, 0, 324, 136, 325, 137, 138, 0, 140,
	139, 0, 261, 326, 141, 327, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 328, 149,
	150, 152, 151, 0, 0, 0, 263, 153, 264, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	329, 159, 330, 266, 160, 161, 162, 163, 0, 267,
	164, 268, 165, 0, 166, 167, 168, 169, 269, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 331, 184, 185, 270, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	0, 197, 187, 188, 198, 332, 199, 272, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 274, 204, 275,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	277, 278, 0, 0, 213, 279, 280, 0, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 0, 222,
	0, 281, 223, 224, 225, 282, 283, 89, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 232, 0, 0, 0, 0, 95, 96, 97, 233,
	234, 235, 236, 98, 237, 238, 0, 99, 239, 240,
	100, 0, 0, 241, 242, 243, 1098, 101, 244, 0,
	0, 0, 102, 103, 104, 0, 105, 1096, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 287, 113, 245, 114, 246, 247, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 248, 120, 121, 122, 249, 250, 0,
	1198, 0, 123, 124, 251, 0, 125, 0, 126, 1101,
	0, 0, 0, 127, 252, 0, 253, 0, 128, 129,
	130, 131, 254, 255, 0, 0, 135, 1196, 132, 0,
	0, 133, 256, 134, 257, 258, 259, 0, 260, 0,
	0, 136, 0, 137, 138, 0, 140, 139, 0, 261,
	0, 141, 0, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 147, 0, 149, 150, 152, 151,
	0, 0, 0, 263, 153, 264, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 265, 0, 159, 0,
	266, 160, 161, 162, 163, 0, 267, 164, 268, 165,
	1100, 166, 167, 168, 169, 269, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 0, 184, 185, 270, 186, 0, 190, 191,
	192, 193, 0, 271, 194, 195, 196, 0, 197, 187,
	188, 198, 0, 199, 272, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 274, 204, 275, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 276, 277, 278, 0,
	0, 213, 279, 280, 0, 214, 215, 216, 217, 0,
	1197, 218, 219, 220, 221, 0, 222, 0, 281, 223,
	224, 225, 282, 283, 89, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 232, 0,
	0, 0, 0, 95, 96, 97, 233, 234, 235, 236,
	98, 237, 238, 0, 99, 239, 240, 100, 0, 0,
	241, 242, 243, 1098, 101, 244, 0, 0, 1093, 102,
	103, 104, 0, 105, 1096, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	287, 113, 245, 114, 246, 247, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	248, 120, 121, 122, 249, 250, 0, 0, 0, 123,
	124, 251, 0, 125, 0, 126, 1101, 0, 0, 0,
	127, 252, 0, 253, 0, 128, 129, 130, 131, 1092,
	255, 0, 0, 135, 0, 132, 0, 0, 133, 256,
	134, 257, 258, 259, 0, 260, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 261, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	263, 153, 264, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 265, 0, 159, 0, 266, 160, 161,
	162, 163, 0, 267, 164, 268, 165, 1100, 166, 167,
	168, 169, 269, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 270, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 272, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 274, 204, 275, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 277, 278, 0, 0, 213, 279,
	280, 0, 214, 215, 216, 217, 0, 1099, 218, 219,
	220, 221, 0, 222, 0, 281, 223, 224, 225, 282,
	283, 89, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 232, 0, 1711, 0, 0,
	95, 96, 97, 233, 234, 235, 236, 98, 237, 238,
	0, 99, 239, 240, 100, 0, 0, 241, 242, 243,
	0, 101, 244, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 287, 113, 245,
	114, 246, 247, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 248, 120, 121,
	122, 249, 250, 0, 0, 0, 123, 124, 251, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 252, 0,
	253, 0, 128, 129, 130, 131, 254, 255, 0, 0,
	135, 0, 132, 0, 0, 133, 256, 134, 257, 258,
	259, 0, 260, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 261, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 263, 153, 264,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	265, 0, 159, 0, 266, 160, 161, 162, 163, 0,
	267, 164, 268, 165, 0, 166, 167, 168, 169, 269,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 270,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 0, 197, 187, 188, 198, 0, 199, 272, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 274, 204,
	275, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 277, 278, 0, 0, 213, 279, 280, 0, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 281, 223, 224, 225, 282, 283, 89, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 232, 0, 0, 0, 0, 95, 96, 97,
	233, 234, 235, 236, 98, 237, 238, 0, 99, 239,
	240, 100, 0, 0, 241, 242, 243, 0, 101, 244,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 287, 113, 245, 114, 246, 247,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 248, 120, 121, 122, 249, 250,
	0, 0, 0, 123, 124, 251, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 252, 0, 253, 0, 128,
	129, 130, 131, 254, 255, 0, 0, 135, 0, 132,
	0, 0, 133, 256, 134, 257, 258, 259, 0, 260,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	261, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 262, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 263, 153, 264, 154, 155, 0,
	156, 0, 537, 157, 0, 0, 158, 265, 0, 159,
	0, 266, 160, 161, 162, 163, 0, 267, 164, 268,
	165, 0, 166, 167, 168, 169, 269, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 270, 186, 0, 190,
	191, 192, 193, 0, 271, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 272, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 274, 204, 275, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 276, 277, 278,
	0, 0, 213, 279, 280, 0, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 0, 222, 0, 281,
	223, 224, 225, 282, 283, 89, 0, 226, 0, 0,
	0, 0, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 92, 93, 928, 94, 0, 0, 0, 0, 232,
	0, 0, 0, 0, 95, 96, 97, 233, 234, 235,
	236, 98, 237, 238, 0, 99, 239, 240, 100, 0,
	0, 241, 242, 243, 0, 101, 244, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 287, 113, 245, 114, 246, 247, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 248, 120, 121, 122, 249, 250, 0, 0, 0,
	123, 124, 251, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 252, 0, 253, 0, 128, 129, 130, 131,
	254, 255, 0, 0, 135, 0, 132, 0, 0, 133,
	256, 134, 257, 258, 259, 0, 260, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 261, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 263, 153, 264, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 0, 159, 0, 266, 160,
	161, 162, 163, 0, 267, 164, 268, 165, 0, 166,
	167, 168, 169, 269, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 270, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 272, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 274, 204, 275, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 277, 278, 0, 0, 213,
	279, 280, 0, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 0, 222, 0, 281, 223, 224, 225,
	282, 283, 89, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 232, 0, 0, 0,
	0, 95, 96, 97, 233, 234, 235, 236, 98, 237,
	238, 0, 99, 239, 240, 100, 0, 0, 241, 242,
	243, 0, 101, 244, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 287, 113,
	245, 114, 246, 247, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 248, 120,
	121, 122, 249, 250, 0, 0, 0, 123, 124, 251,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 252,
	0, 253, 0, 128, 129, 130, 131, 844, 255, 0,
	0, 135, 0, 132, 0, 0, 133, 256, 134, 257,
	258, 259, 0, 260, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 261, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	0, 149, 150, 152, 151, 0, 0, 0, 263, 153,
	264, 154, 155, 0, 156, 0, 537, 157, 0, 0,
	158, 265, 0, 159, 0, 266, 160, 161, 162, 163,
	0, 267, 164, 268, 165, 0, 166, 167, 168, 169,
	269, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	270, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 0, 197, 187, 188, 198, 0, 199, 272,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 274,
	204, 275, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 277, 278, 0, 0, 213, 279, 280, 0,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	0, 222, 0, 281, 223, 224, 225, 282, 283, 89,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 92, 93, 593, 94, 0,
	0, 0, 0, 232, 0, 0, 0, 0, 95, 96,
	97, 233, 234, 235, 236, 98, 237, 238, 0, 99,
	239, 240, 100, 0, 0, 241, 242, 243, 0, 101,
	244, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 287, 113, 245, 114, 246,
	247, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 248, 120, 121, 122, 249,
	250, 0, 0, 0, 123, 124, 251, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 252, 0, 253, 0,
	128, 129, 130, 131, 254, 255, 0, 0, 135, 0,
	132, 0, 0, 133, 256, 134, 257, 258, 259, 0,
	260, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 261, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 263, 153, 264, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 0,
	159, 0, 266, 160, 161, 162, 163, 0, 267, 164,
	268, 165, 0, 166, 167, 168, 169, 269, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 270, 186, 0,
	190, 191, 192, 193, 0, 271, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 272, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 274, 204, 275, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 276, 277,
	278, 0, 0, 213, 279, 280, 0, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	281, 223, 224, 225, 282, 283, 89, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	232, 0, 0, 0, 0, 95, 96, 97, 233, 234,
	235, 236, 98, 237, 238, 0, 99, 239, 240, 100,
	0, 0, 241, 242, 243, 0, 101, 244, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 287, 113, 245, 114, 246, 247, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 248, 120, 121, 122, 249, 250, 0, 0,
	0, 123, 124, 251, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 252, 0, 253, 0, 128, 129, 130,
	131, 549, 255, 0, 0, 135, 0, 132, 0, 0,
	133, 256, 134, 257, 258, 259, 0, 260, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 261, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 262, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 263, 153, 264, 154, 155, 0, 156, 0,
	537, 157, 0, 0, 158, 265, 0, 159, 0, 266,
	160, 161, 162, 163, 0, 267, 164, 268, 165, 0,
	166, 167, 168, 169, 269, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 270, 186, 0, 190, 191, 192,
	193, 0, 271, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 272, 273, 200, 0, 206, 201, 202,
	189, 203, 205, 274, 204, 275, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 276, 277, 278, 0, 0,
	213, 279, 280, 0, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 0, 222, 0, 281, 223, 224,
	225, 282, 283, 89, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 95, 96, 97, 233, 234, 235, 236, 98,
	237, 238, 0, 99, 239, 240, 100, 0, 0, 241,
	242, 243, 0, 101, 244, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 287,
	113, 245, 114, 246, 247, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 248,
	120, 121, 122, 249, 250, 0, 0, 0, 123, 124,
	251, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	252, 0, 253, 0, 128, 129, 130, 131, 542, 255,
	0, 0, 135, 0, 132, 0, 0, 133, 256, 134,
	257, 258, 259, 0, 260, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 261, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 263,
	153, 264, 154, 155, 0, 156, 0, 537, 157, 0,
	0, 158, 265, 0, 159, 0, 266, 160, 161, 162,
	163, 0, 267, 164, 268, 165, 0, 166, 167, 168,
	169, 269, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 270, 186, 0, 190, 191, 192, 193, 0, 271,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	272, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	274, 204, 275, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 276, 277, 278, 0, 0, 213, 279, 280,
	0, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 281, 223, 224, 225, 282, 283,
	89, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 92, 93, 418, 94,
	0, 0, 0, 0, 232, 0, 0, 0, 0, 95,
	96, 97, 233, 234, 235, 236, 98, 237, 238, 0,
	99, 239, 240, 100, 0, 0, 241, 242, 243, 0,
	101, 244, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 287, 113, 245, 114,
	246, 247, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 248, 120, 121, 122,
	249, 250, 0, 0, 0, 123, 124, 251, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 252, 0, 253,
	0, 128, 129, 130, 131, 254, 255, 0, 0, 135,
	0, 132, 0, 0, 133, 256, 134, 257, 258, 259,
	0, 260, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 261, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 263, 153, 264, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	0, 159, 0, 266, 160, 161, 162, 163, 0, 267,
	164, 268, 417, 0, 166, 167, 168, 169, 269, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 270, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 272, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 274, 204, 275,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	277, 278, 0, 0, 213, 279, 280, 0, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 0, 222,
	0, 281, 223, 224, 225, 282, 283, 89, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 232, 0, 0, 0, 0, 95, 96, 97, 233,
	234, 235, 236, 98, 237, 238, 0, 99, 239, 240,
	100, 0, 0, 241, 242, 243, 0, 101, 244, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 287, 113, 245, 114, 246, 247, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 248, 120, 121, 122, 249, 250, 0,
	0, 0, 123, 124, 251, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 252, 0, 253, 0, 128, 129,
	130, 131, 254, 255, 0, 0, 135, 0, 132, 0,
	0, 133, 256, 134, 257, 258, 259, 0, 260, 0,
	0, 136, 0, 137, 138, 0, 140, 139, 0, 261,
	0, 141, 0, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 147, 0, 149, 150, 152, 151,
	0, 0, 0, 263, 153, 264, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 265, 0, 159, 0,
	266, 160, 161, 162, 163, 0, 267, 164, 268, 165,
	0, 166, 167, 168, 169, 269, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 0, 184, 185, 270, 186, 0, 190, 191,
	192, 193, 0, 271, 194, 195, 196, 0, 197, 187,
	188, 198, 0, 199, 272, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 274, 204, 275, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 276, 277, 278, 0,
	0, 213, 279, 280, 0, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 0, 222, 0, 281, 223,
	224, 225, 282, 283, 89, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 232, 0,
	0, 0, 0, 95, 96, 97, 233, 234, 235, 236,
	98, 237, 238, 0, 99, 239, 240, 100, 0, 0,
	241, 242, 243, 0, 101, 244, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	287, 113, 245, 114, 246, 247, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	248, 120, 121, 122, 249, 250, 0, 0, 0, 123,
	124, 251, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 252, 0, 253, 0, 128, 129, 130, 131, 1395,
	255, 0, 0, 135, 0, 132, 0, 0, 133, 256,
	134, 257, 258, 259, 0, 260, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 261, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	263, 153, 264, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 265, 0, 159, 0, 266, 160, 161,
	162, 163, 0, 267, 164, 268, 165, 0, 166, 167,
	168, 169, 269, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 270, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 272, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 274, 204, 275, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 277, 278, 0, 0, 213, 279,
	280, 0, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 281, 223, 224, 225, 282,
	283, 89, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 232, 0, 0, 0, 0,
	95, 96, 97, 233, 234, 235, 236, 98, 237, 238,
	0, 99, 239, 240, 100, 0, 0, 241, 242, 243,
	0, 101, 244, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 287, 113, 245,
	114, 246, 247, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 248, 120, 121,
	122, 249, 250, 0, 0, 0, 123, 124, 251, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 252, 0,
	253, 0, 128, 129, 130, 131, 1393, 255, 0, 0,
	135, 0, 132, 0, 0, 133, 256, 134, 257, 258,
	259, 0, 260, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 261, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 263, 153, 264,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	265, 0, 159, 0, 266, 160, 161, 162, 163, 0,
	267, 164, 268, 165, 0, 166, 167, 168, 169, 269,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 270,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 0, 197, 187, 188, 198, 0, 199, 272, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 274, 204,
	275, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 277, 278, 0, 0, 213, 279, 280, 0, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 281, 223, 224, 225, 282, 283, 89, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 232, 0, 0, 0, 0, 95, 96, 97,
	233, 234, 235, 236, 98, 237, 238, 0, 99, 239,
	240, 100, 0, 0, 241, 242, 243, 0, 101, 244,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 287, 113, 245, 114, 246, 247,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 248, 120, 121, 122, 249, 250,
	0, 0, 0, 123, 124, 251, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 252, 0, 253, 0, 128,
	129, 130, 131, 1382, 255, 0, 0, 135, 0, 132,
	0, 0, 133, 256, 134, 257, 258, 259, 0, 260,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	261, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 262, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 263, 153, 264, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 265, 0, 159,
	0, 266, 160, 161, 162, 163, 0, 267, 164, 268,
	165, 0, 166, 167, 168, 169, 269, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 270, 186, 0, 190,
	191, 192, 193, 0, 271, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 272, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 274, 204, 275, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 276, 277, 278,
	0, 0, 213, 279, 280, 0, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 0, 222, 0, 281,
	223, 224, 225, 282, 283, 89, 0, 226, 0, 0,
	0, 0, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 232,
	0, 0, 0, 0, 95, 96, 97, 233, 234, 235,
	236, 98, 237, 238, 0, 99, 239, 240, 100, 0,
	0, 241, 242, 243, 0, 101, 244, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 287, 113, 245, 114, 246, 247, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 248, 120, 121, 122, 249, 250, 0, 0, 0,
	123, 124, 251, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 252, 0, 253, 0, 128, 129, 130, 131,
	956, 255, 0, 0, 135, 0, 132, 0, 0, 133,
	256, 134, 257, 258, 259, 0, 260, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 261, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 263, 153, 264, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 0, 159, 0, 266, 160,
	161, 162, 163, 0, 267, 164, 268, 165, 0, 166,
	167, 168, 169, 269, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 270, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 272, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 274, 204, 275, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 277, 278, 0, 0, 213,
	279, 280, 0, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 0, 222, 0, 281, 223, 224, 225,
	282, 283, 89, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 232, 0, 0, 0,
	0, 95, 96, 97, 233, 234, 235, 236, 98, 237,
	238, 0, 99, 239, 240, 100, 0, 0, 241, 242,
	243, 0, 101, 244, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 287, 113,
	245, 114, 246, 247, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 248, 120,
	121, 122, 249, 250, 0, 0, 0, 123, 124, 251,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 252,
	0, 253, 0, 128, 129, 130, 131, 254, 255, 0,
	0, 135, 0, 132, 0, 0, 133, 256, 134, 257,
	258, 259, 0, 260, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 261, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	0, 149, 150, 152, 151, 0, 0, 0, 263, 153,
	264, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 0, 159, 0, 266, 160, 161, 162, 163,
	0, 267, 164, 268, 165, 0, 166, 167, 168, 169,
	269, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	270, 186, 0, 432, 191, 192, 193, 0, 271, 194,
	195, 196, 0, 197, 187, 188, 198, 0, 199, 272,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 274,
	204, 275, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 277, 278, 0, 0, 213, 279, 280, 0,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	0, 222, 0, 281, 223, 224, 225, 282, 283, 89,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 232, 0, 828, 0, 0, 95, 96,
	97, 233, 234, 235, 236, 98, 237, 238, 0, 99,
	239, 240, 100, 0, 0, 241, 242, 243, 0, 101,
	244, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 287, 113, 245, 114, 246,
	247, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 248, 120, 121, 122, 249,
	250, 0, 0, 0, 123, 124, 251, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 252, 0, 253, 0,
	128, 129, 130, 131, 254, 255, 0, 0, 135, 0,
	132, 0, 0, 133, 256, 134, 257, 258, 259, 0,
	260, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 261, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 263, 153, 264, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 0,
	159, 0, 266, 160, 161, 162, 163, 0, 267, 164,
	268, 165, 0, 166, 167, 168, 169, 269, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 270, 186, 0,
	190, 191, 192, 193, 0, 271, 194, 195, 196, 0,
	0, 187, 188, 198, 0, 199, 272, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 274, 204, 275, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 276, 277,
	278, 0, 0, 213, 279, 280, 0, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	281, 223, 224, 225, 282, 283, 89, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	232, 0, 0, 0, 0, 95, 96, 97, 233, 234,
	235, 236, 98, 237, 238, 0, 99, 239, 240, 100,
	0, 0, 241, 242, 243, 0, 101, 244, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 287, 113, 245, 114, 246, 247, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 248, 120, 121, 122, 249, 250, 0, 0,
	0, 123, 124, 251, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 252, 0, 253, 0, 128, 129, 130,
	131, 662, 255, 0, 0, 135, 0, 132, 0, 0,
	133, 256, 134, 257, 258, 259, 0, 260, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 261, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 262, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 263, 153, 264, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 265, 0, 159, 0, 266,
	160, 161, 162, 163, 0, 267, 164, 268, 165, 0,
	166, 167, 168, 169, 269, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 270, 186, 0, 190, 191, 192,
	193, 0, 271, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 272, 273, 200, 0, 206, 201, 202,
	189, 203, 205, 274, 204, 275, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 276, 277, 278, 0, 0,
	213, 279, 280, 0, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 0, 222, 0, 281, 223, 224,
	225, 282, 283, 89, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 95, 96, 97, 233, 234, 235, 236, 98,
	237, 238, 0, 99, 239, 240, 100, 0, 0, 241,
	242, 243, 0, 101, 244, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 287,
	113, 245, 114, 246, 247, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 248,
	120, 121, 122, 249, 250, 0, 0, 0, 123, 124,
	251, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	252, 0, 253, 0, 128, 129, 130, 131, 657, 255,
	0, 0, 135, 0, 132, 0, 0, 133, 256, 134,
	257, 258, 259, 0, 260, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 261, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 263,
	153, 264, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 265, 0, 159, 0, 266, 160, 161, 162,
	163, 0, 267, 164, 268, 165, 0, 166, 167, 168,
	169, 269, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 270, 186, 0, 190, 191, 192, 193, 0, 271,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	272, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	274, 204, 275, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 276, 277, 278, 0, 0, 213, 279, 280,
	0, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 281, 223, 224, 225, 282, 283,
	89, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 232, 0, 0, 0, 0, 95,
	96, 97, 233, 234, 235, 236, 98, 237, 238, 0,
	99, 239, 240, 100, 0, 0, 241, 242, 599, 0,
	101, 244, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 287, 113, 245, 114,
	246, 247, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 248, 120, 121, 122,
	249, 250, 0, 0, 0, 123, 124, 251, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 252, 0, 253,
	0, 128, 129, 130, 131, 254, 255, 0, 0, 135,
	0, 132, 0, 0, 133, 256, 134, 257, 258, 259,
	0, 260, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 261, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 446, 0, 149,
	150, 152, 151, 0, 0, 0, 263, 153, 264, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	0, 159, 0, 266, 160, 161, 162, 163, 0, 267,
	164, 268, 165, 0, 166, 167, 168, 169, 269, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 270, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 272, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 274, 204, 275,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 443,
	277, 278, 0, 0, 439, 279, 280, 0, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 0, 222,
	0, 281, 223, 224, 225, 282, 283, 89, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 232, 0, 0, 0, 0, 95, 96, 97, 233,
	234, 235, 236, 98, 237, 238, 0, 99, 239, 240,
	100, 0, 0, 241, 242, 243, 0, 101, 244, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 287, 113, 245, 114, 246, 247, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 248, 120, 121, 122, 249, 250, 0,
	0, 0, 123, 124, 251, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 252, 0, 253, 0, 128, 129,
	130, 131, 254, 255, 0, 0, 135, 0, 132, 0,
	0, 133, 256, 134, 257, 258, 259, 0, 260, 0,
	0, 136, 0, 137, 138, 0, 140, 139, 0, 261,
	0, 141, 0, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 446, 0, 149, 150, 152, 151,
	0, 0, 0, 263, 153, 264, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 265, 0, 159, 0,
	266, 160, 161, 162, 163, 0, 267, 164, 268, 165,
	0, 166, 167, 168, 169, 269, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 0, 184, 185, 270, 186, 0, 190, 191,
	192, 193, 0, 271, 194, 195, 196, 0, 197, 187,
	188, 198, 0, 199, 272, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 274, 204, 275, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 443, 277, 278, 0,
	0, 439, 279, 280, 0, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 0, 222, 0, 281, 223,
	224, 225, 282, 283, 89, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 232, 0,
	0, 0, 0, 95, 96, 97, 233, 234, 235, 236,
	98, 237, 238, 0, 99, 239, 240, 100, 0, 0,
	241, 242, 243, 0, 101, 244, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	287, 113, 245, 114, 246, 247, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	248, 120, 121, 122, 249, 250, 0, 0, 0, 123,
	124, 251, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 252, 0, 253, 0, 128, 129, 130, 131, 581,
	255, 0, 0, 135, 0, 132, 0, 0, 133, 256,
	134, 257, 258, 259, 0, 260, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 261, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	263, 153, 264, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 265, 0, 159, 0, 266, 160, 161,
	162, 163, 0, 267, 164, 268, 165, 0, 166, 167,
	168, 169, 269, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 270, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 272, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 274, 204, 275, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 277, 278, 0, 0, 213, 279,
	280, 0, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 281, 223, 224, 225, 282,
	283, 89, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 232, 0, 0, 0, 0,
	95, 96, 97, 233, 234, 235, 236, 98, 237, 238,
	0, 99, 239, 240, 100, 0, 0, 241, 242, 243,
	0, 101, 244, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 287, 113, 245,
	114, 246, 247, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 248, 120, 121,
	122, 249, 250, 0, 0, 0, 123, 124, 251, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 252, 0,
	253, 0, 128, 129, 130, 131, 579, 255, 0, 0,
	135, 0, 132, 0, 0, 133, 256, 134, 257, 258,
	259, 0, 260, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 261, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 263, 153, 264,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	265, 0, 159, 0, 266, 160, 161, 162, 163, 0,
	267, 164, 268, 165, 0, 166, 167, 168, 169, 269,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 270,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 0, 197, 187, 188, 198, 0, 199, 272, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 274, 204,
	275, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 277, 278, 0, 0, 213, 279, 280, 0, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 281, 223, 224, 225, 282, 283, 89, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 232, 0, 0, 0, 0, 95, 96, 97,
	233, 234, 235, 236, 98, 237, 238, 0, 99, 239,
	240, 100, 0, 0, 241, 242, 243, 0, 101, 244,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 287, 113, 245, 114, 246, 247,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 248, 120, 121, 122, 249, 250,
	0, 0, 0, 123, 124, 251, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 252, 0, 253, 0, 128,
	129, 130, 131, 576, 255, 0, 0, 135, 0, 132,
	0, 0, 133, 256, 134, 257, 258, 259, 0, 260,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	261, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 262, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 263, 153, 264, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 265, 0, 159,
	0, 266, 160, 161, 162, 163, 0, 267, 164, 268,
	165, 0, 166, 167, 168, 169, 269, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 270, 186, 0, 190,
	191, 192, 193, 0, 271, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 272, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 274, 204, 275, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 276, 277, 278,
	0, 0, 213, 279, 280, 0, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 0, 222, 0, 281,
	223, 224, 225, 282, 283, 89, 0, 226, 0, 0,
	0, 0, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 232,
	0, 0, 0, 0, 95, 96, 97, 233, 234, 235,
	236, 98, 237, 238, 0, 99, 239, 240, 100, 0,
	0, 241, 242, 243, 0, 101, 244, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 287, 113, 245, 114, 246, 247, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 248, 120, 121, 122, 249, 250, 0, 0, 0,
	123, 124, 251, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 252, 0, 253, 0, 128, 129, 130, 131,
	573, 255, 0, 0, 135, 0, 132, 0, 0, 133,
	256, 134, 257, 258, 259, 0, 260, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 261, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 263, 153, 264, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 0, 159, 0, 266, 160,
	161, 162, 163, 0, 267, 164, 268, 165, 0, 166,
	167, 168, 169, 269, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 270, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 272, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 274, 204, 275, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 277, 278, 0, 0, 213,
	279, 280, 0, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 0, 222, 0, 281, 223, 224, 225,
	282, 283, 89, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 232, 0, 0, 0,
	0, 95, 96, 97, 233, 234, 235, 236, 98, 237,
	238, 0, 99, 239, 240, 100, 0, 0, 241, 242,
	243, 0, 101, 244, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 287, 113,
	245, 114, 246, 247, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 248, 120,
	121, 122, 249, 250, 0, 0, 0, 123, 124, 251,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 252,
	0, 253, 0, 128, 129, 130, 131, 571, 255, 0,
	0, 135, 0, 132, 0, 0, 133, 256, 134, 257,
	258, 259, 0, 260, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 261, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	0, 149, 150, 152, 151, 0, 0, 0, 263, 153,
	264, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 0, 159, 0, 266, 160, 161, 162, 163,
	0, 267, 164, 268, 165, 0, 166, 167, 168, 169,
	269, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	270, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 0, 197, 187, 188, 198, 0, 199, 272,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 274,
	204, 275, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 277, 278, 0, 0, 213, 279, 280, 0,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	0, 222, 0, 281, 223, 224, 225, 282, 283, 89,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 232, 0, 0, 0, 0, 95, 96,
	97, 233, 234, 235, 236, 98, 237, 238, 0, 99,
	239, 240, 100, 0, 0, 241, 242, 243, 0, 101,
	244, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 287, 113, 245, 114, 246,
	247, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 248, 120, 121, 122, 249,
	250, 0, 0, 0, 123, 124, 251, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 252, 0, 253, 0,
	128, 129, 130, 131, 545, 255, 0, 0, 135, 0,
	132, 0, 0, 133, 256, 134, 257, 258, 259, 0,
	260, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 261, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 263, 153, 264, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 0,
	159, 0, 266, 160, 161, 162, 163, 0, 267, 164,
	268, 165, 0, 166, 167, 168, 169, 269, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 270, 186, 0,
	190, 191, 192, 193, 0, 271, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 272, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 274, 204, 275, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 276, 277,
	278, 0, 0, 213, 279, 280, 0, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	281, 223, 224, 225, 282, 283, 89, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	232, 0, 0, 0, 0, 95, 96, 97, 233, 234,
	235, 236, 98, 237, 238, 0, 99, 239, 240, 100,
	0, 0, 241, 242, 243, 0, 101, 244, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 287, 113, 245, 114, 246, 247, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 248, 120, 121, 122, 249, 250, 0, 0,
	0, 123, 124, 251, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 252, 0, 253, 0, 128, 129, 130,
	131, 254, 255, 0, 0, 135, 0, 132, 0, 0,
	133, 256, 134, 257, 258, 259, 0, 260, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 261, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 262, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 263, 153, 264, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 265, 0, 159, 0, 266,
	160, 161, 162, 163, 0, 267, 164, 268, 165, 0,
	166, 167, 168, 169, 269, 526, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 270, 186, 0, 190, 191, 192,
	193, 0, 271, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 272, 273, 200, 0, 206, 201, 202,
	189, 203, 205, 274, 204, 275, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 276, 277, 278, 0, 0,
	213, 279, 280, 0, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 0, 222, 0, 281, 223, 224,
	225, 282, 283, 89, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 95, 96, 97, 233, 234, 235, 236, 98,
	237, 238, 0, 99, 239, 240, 100, 0, 0, 241,
	242, 243, 0, 437, 244, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 287,
	113, 245, 114, 246, 247, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 248,
	120, 121, 122, 249, 250, 0, 0, 0, 123, 124,
	251, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	252, 0, 253, 0, 128, 129, 130, 131, 254, 255,
	0, 0, 135, 0, 132, 0, 0, 133, 256, 134,
	257, 258, 259, 0, 260, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 261, 0, 141, 0, 0,
	435, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	446, 0, 149, 150, 152, 151, 0, 0, 0, 263,
	153, 264, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 265, 0, 159, 0, 266, 160, 161, 162,
	163, 0, 267, 164, 268, 165, 0, 166, 167, 168,
	169, 269, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 438, 186, 0, 190, 191, 192, 193, 0, 271,
	194, 436, 196, 0, 197, 187, 188, 198, 0, 199,
	272, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	274, 204, 275, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 443, 277, 278, 0, 0, 439, 279, 280,
	0, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 281, 223, 224, 225, 282, 283,
	89, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 232, 0, 0, 0, 0, 95,
	96, 97, 233, 234, 235, 236, 98, 237, 238, 0,
	99, 239, 240, 100, 0, 0, 241, 242, 243, 0,
	101, 244, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 287, 113, 245, 114,
	246, 247, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 248, 120, 121, 122,
	249, 250, 0, 0, 0, 123, 124, 251, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 252, 0, 253,
	0, 128, 129, 130, 131, 254, 255, 0, 0, 135,
	0, 132, 0, 0, 133, 256, 134, 257, 258, 259,
	0, 260, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 261, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 263, 153, 264, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	0, 159, 0, 266, 160, 161, 0, 163, 0, 267,
	164, 268, 165, 0, 166, 167, 0, 169, 269, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 270, 0,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 272, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 274, 204, 275,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	277, 278, 0, 0, 213, 279, 280, 0, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 0, 222,
	0, 281, 223, 224, 225, 282, 283, 0, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 983,
	984, 0, 1003, 1004, 1005, 1013, 1014, 1015, 0, 0,
	0, 0, 0, 0, 0, 1006, 0, 0, 0, 0,
	0, 0, 986, 0, 0, 1017, 0, 0, 0, 0,
	0, 983, 984, 0, 1003, 1004, 1005, 1013, 1014, 1015,
	0, 0, 0, 0, 0, 985, 0, 1006, 0, 0,
	0, 1000, 0, 0, 986, 0, 0, 1017, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 985, 0, 0,
	0, 0, 0, 1000, 0, 983, 984, 0, 1003, 1004,
	1005, 1013, 1014, 1015, 0, 0, 0, 0, 0, 0,
	0, 991, 0, 0, 0, 0, 0, 0, 986, 0,
	0, 1017, 0, 0, 0, 0, 0, 0, 0, 0,
	1010, 1018, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 985, 0, 991, 0, 0, 1016, 1000, 0, 983,
	984, 0, 1003, 1004, 1005, 1013, 1014, 1015, 1008, 0,
	0, 0, 1010, 1018, 1001, 1006, 0, 0, 0, 0,
	0, 0, 986, 0, 0, 1017, 0, 0, 1016, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1007,
	1008, 0, 0, 0, 0, 985, 1001, 991, 0, 0,
	0, 1000, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1010, 1018, 0, 0,
	0, 1007, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1016, 1002, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1008, 0, 0, 0, 1011, 0,
	1001, 991, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1002, 0, 0, 0, 0,
	1010, 1018, 0, 0, 0, 0, 0, 0, 0, 0,
	1011, 0, 0, 0, 0, 0, 1016, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1008, 0,
	0, 0, 0, 0, 1001, 0, 0, 0, 0, 0,
	0, 0, 1009, 0, 0, 997, 998, 999, 1012, 1002,
	996, 994, 995, 987, 988, 989, 990, 992, 993, 1007,
	0, 0, 0, 0, 1011, 0, 1597, 0, 0, 0,
	0, 0, 0, 0, 1009, 0, 0, 997, 998, 999,
	1012, 0, 996, 994, 995, 987, 988, 989, 990, 992,
	993, 0, 0, 0, 0, 0, 0, 0, 1596, 0,
	0, 983, 984, 1002, 1003, 1004, 1005, 1013, 1014, 1015,
	0, 0, 0, 0, 0, 0, 0, 1006, 1011, 0,
	0, 0, 0, 0, 986, 0, 0, 1017, 1009, 0,
	0, 997, 998, 999, 1012, 0, 996, 994, 995, 987,
	988, 989, 990, 992, 993, 0, 0, 985, 0, 0,
	0, 0, 0, 1000, 0, 983, 984, 0, 1003, 1004,
	1005, 1013, 1014, 1015, 0, 0, 0, 0, 0, 0,
	0, 1006, 0, 0, 0, 0, 0, 0, 986, 0,
	0, 1017, 1009, 0, 0, 997, 998, 999, 1012, 0,
	996, 994, 995, 987, 988, 989, 990, 992, 993, 0,
	0, 985, 0, 991, 0, 0, 1595, 1000, 0, 983,
	984, 0, 1003, 1004, 1005, 1013, 1014, 1015, 0, 0,
	0, 0, 1010, 1018, 0, 1006, 0, 0, 0, 0,
	0, 0, 986, 0, 0, 1017, 0, 0, 1016, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1008, 0, 0, 0, 0, 985, 1001, 991, 0, 0,
	0, 1000, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1010, 1018, 0, 0,
	0, 1007, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1016, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1008, 0, 0, 0, 0, 0,
	1001, 991, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1002, 0, 0, 0, 0,
	1010, 1018, 0, 0, 0, 1007, 0, 0, 0, 0,
	1011, 0, 0, 0, 0, 0, 1016, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1008, 0,
	0, 0, 0, 0, 1001, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1002,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1007,
	0, 0, 0, 0, 1011, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1009, 0, 0, 997, 998, 999,
	1012, 0, 996, 994, 995, 987, 988, 989, 990, 992,
	993, 0, 0, 0, 0, 0, 0, 0, 1547, 0,
	0, 0, 0, 1002, 983, 984, 0, 1003, 1004, 1005,
	1013, 1014, 1015, 0, 0, 0, 0, 0, 1011, 0,
	1006, 0, 0, 0, 0, 0, 0, 986, 1009, 0,
	1017, 997, 998, 999, 1012, 0, 996, 994, 995, 987,
	988, 989, 990, 992, 993, 0, 0, 0, 0, 2067,
	985, 0, 0, 0, 0, 0, 1000, 0, 983, 984,
	0, 1003, 1004, 1005, 1013, 1014, 1015, 0, 0, 0,
	0, 0, 0, 0, 1006, 0, 0, 0, 0, 0,
	0, 986, 1009, 0, 1017, 997, 998, 999, 1012, 0,
	996, 994, 995, 987, 988, 989, 990, 992, 993, 0,
	0, 0, 0, 2065, 985, 0, 991, 0, 0, 0,
	1000, 0, 983, 984, 0, 1003, 1004, 1005, 1013, 1014,
	1015, 0, 0, 0, 0, 1010, 1018, 0, 1006, 0,
	0, 0, 0, 0, 0, 986, 0, 0, 1017, 0,
	0, 1016, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1008, 0, 0, 0, 0, 985, 1001,
	991, 0, 0, 0, 1000, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1010,
	1018, 0, 0, 0, 1007, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1016, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1008, 0, 0,
	0, 0, 0, 1001, 991, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1002, 0,
	0, 0, 0, 1010, 1018, 0, 0, 0, 1007, 0,
	0, 0, 0, 1011, 0, 0, 0, 0, 0, 1016,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1008, 0, 0, 0, 0, 0, 1001, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1002, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1007, 0, 0, 0, 0, 1011, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1009, 0, 0,
	997, 998, 999, 1012, 0, 996, 994, 995, 987, 988,
	989, 990, 992, 993, 0, 0, 0, 0, 2012, 0,
	0, 0, 0, 0, 0, 0, 1002, 983, 984, 0,
	1003, 1004, 1005, 1013, 1014, 1015, 0, 0, 0, 0,
	0, 1011, 0, 1006, 0, 0, 0, 0, 0, 0,
	986, 1009, 0, 1017, 997, 998, 999, 1012, 0, 996,
	994, 995, 987, 988, 989, 990, 992, 993, 0, 0,
	0, 0, 2007, 985, 0, 0, 0, 0, 0, 1000,
	0, 983, 984, 0, 1003, 1004, 1005, 1013, 1014, 1015,
	0, 0, 0, 0, 0, 0, 0, 1006, 0, 0,
	0, 0, 0, 0, 986, 1009, 0, 1017, 997, 998,
	999, 1012, 0, 996, 994, 995, 987, 988, 989, 990,
	992, 993, 0, 0, 0, 0, 2003, 985, 0, 991,
	0, 0, 0, 1000, 0, 983, 984, 0, 1003, 1004,
	1005, 1013, 1014, 1015, 0, 0, 0, 0, 1010, 1018,
	0, 1006, 0, 0, 0, 0, 0, 0, 986, 0,
	0, 1017, 0, 0, 1016, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1008, 0, 0, 0,
	0, 985, 1001, 991, 0, 0, 0, 1000, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1010, 1018, 0, 0, 0, 1007, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1016, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1008, 0, 0, 0, 0, 0, 1001, 991, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1002, 0, 0, 0, 0, 1010, 1018, 0, 0,
	0, 1007, 0, 0, 0, 0, 1011, 0, 0, 0,
	0, 0, 1016, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1008, 0, 0, 0, 0, 0,
	1001, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1002, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1007, 0, 0, 0, 0,
	1011, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1009, 0, 0, 997, 998, 999, 1012, 0, 996, 994,
	995, 987, 988, 989, 990, 992, 993, 0, 0, 0,
	0, 1944, 0, 0, 0, 0, 0, 0, 0, 1002,
	983, 984, 0, 1003, 1004, 1005, 1013, 1014, 1015, 0,
	0, 0, 0, 0, 1011, 0, 1006, 0, 0, 0,
	0, 0, 0, 986, 1009, 0, 1017, 997, 998, 999,
	1012, 0, 996, 994, 995, 987, 988, 989, 990, 992,
	993, 0, 0, 0, 0, 1922, 985, 0, 0, 0,
	0, 0, 1000, 0, 983, 984, 0, 1003, 1004, 1005,
	1013, 1014, 1015, 0, 0, 0, 0, 0, 0, 0,
	1006, 0, 0, 0, 0, 0, 0, 986, 1009, 0,
	1017, 997, 998, 999, 1012, 0, 996, 994, 995, 987,
	988, 989, 990, 992, 993, 0, 0, 0, 0, 1921,
	985, 0, 991, 0, 0, 0, 1000, 0, 983, 984,
	0, 1003, 1004, 1005, 1013, 1014, 1015, 0, 0, 0,
	0, 1010, 1018, 0, 1006, 0, 0, 0, 0, 0,
	0, 986, 0, 0, 1017, 0, 0, 1016, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1008,
	0, 0, 0, 0, 985, 1001, 991, 0, 0, 0,
	1000, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1010, 1018, 0, 0, 0,
	1007, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1016, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1008, 0, 0, 0, 0, 0, 1001,
	991, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1002, 0, 0, 0, 0, 1010,
	1018, 0, 0, 0, 1007, 0, 0, 0, 0, 1011,
	0, 0, 0, 0, 0, 1016, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1008, 0, 0,
	0, 0, 0, 1001, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1002, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1007, 0,
	0, 0, 0, 1011, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1009, 0, 0, 997, 998, 999, 1012,
	0, 996, 994, 995, 987, 988, 989, 990, 992, 993,
	0, 0, 0, 0, 1813, 0, 0, 0, 0, 0,
	0, 0, 1002, 983, 984, 0, 1003, 1004, 1005, 1013,
	1014, 1015, 0, 0, 0, 0, 0, 1011, 0, 1006,
	0, 0, 0, 0, 0, 0, 986, 1009, 0, 1017,
	997, 998, 999, 1012, 0, 996, 994, 995, 987, 988,
	989, 990, 992, 993, 0, 0, 0, 0, 1747, 985,
	0, 0, 0, 0, 0, 1000, 0, 983, 984, 0,
	1003, 1004, 1005, 1013, 1014, 1015, 0, 0, 0, 0,
	0, 0, 0, 1006, 0, 0, 0, 0, 0, 0,
	986, 1009, 0, 1017, 997, 998, 999, 1012, 0, 996,
	994, 995, 987, 988, 989, 990, 992, 993, 0, 0,
	0, 0, 1731, 985, 0, 991, 0, 0, 0, 1000,
	0, 983, 984, 0, 1003, 1004, 1005, 1013, 1014, 1015,
	0, 0, 0, 0, 1010, 1018, 0, 1006, 0, 0,
	0, 0, 0, 0, 986, 0, 0, 1017, 0, 0,
	1016, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1008, 0, 0, 0, 0, 985, 1001, 991,
	0, 0, 0, 1000, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1010, 1018,
	0, 0, 0, 1007, 0, 0, 0, 1555, 1556, 0,
	1573, 1574, 1575, 0, 1016, 0, 0, 0, 0, 0,
	0, 0, 0, 1890, 0, 0, 1008, 0, 0, 0,
	0, 0, 1001, 991, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1002, 0, 0,
	0, 0, 1010, 1018, 0, 0, 0, 1007, 0, 1570,
	0, 0, 1011, 0, 0, 0, 0, 0, 1016, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1008, 0, 0, 0, 0, 0, 1001, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1002, 0, 0, 0, 0, 0, 0, 0, 1561,
	0, 1007, 0, 0, 0, 0, 1011, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1009, 0, 0, 997,
	998, 999, 1012, 0, 996, 994, 995, 987, 988, 989,
	990, 992, 993, 0, 1576, 0, 0, 1686, 0, 0,
	0, 0, 0, 983, 984, 1002, 1003, 1004, 1005, 1013,
	1014, 1015, 1571, 0, 0, 0, 0, 0, 0, 1006,
	1011, 0, 0, 0, 0, 0, 986, 0, 0, 1017,
	1009, 0, 0, 997, 998, 999, 1012, 0, 996, 994,
	995, 987, 988, 989, 990, 992, 993, 0, 0, 985,
	0, 1303, 0, 0, 0, 1000, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1572, 0, 0, 1009, 0, 0, 997, 998, 999,
	1012, 0, 996, 994, 995, 987, 988, 989, 990, 992,
	993, 0, 0, 1522, 0, 991, 2147, 983, 984, 0,
	1003, 1004, 1005, 1013, 1014, 1015, 0, 0, 0, 0,
	0, 0, 0, 1006, 1010, 1018, 0, 0, 0, 0,
	986, 0, 0, 1017, 0, 0, 0, 0, 0, 0,
	1016, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1008, 985, 0, 0, 0, 0, 1001, 1000,
	0, 0, 0, 1567, 1568, 1569, 0, 0, 1566, 1564,
	1565, 1557, 1558, 1559, 1560, 1562, 1563, 0, 0, 0,
	0, 0, 0, 1007, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 991,
	0, 1587, 0, 0, 1586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1002, 1010, 1018,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1011, 0, 1016, 0, 0, 983, 984, 0,
	1003, 1004, 1005, 1013, 1014, 1015, 1008, 0, 0, 0,
	0, 0, 1001, 1006, 0, 0, 0, 0, 1218, 0,
	986, 0, 0, 1017, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1007, 0, 0,
	0, 0, 0, 985, 0, 0, 0, 0, 0, 1000,
	0, 0, 0, 0, 0, 0, 1009, 0, 0, 997,
	998, 999, 1012, 0, 996, 994, 995, 987, 988, 989,
	990, 992, 993, 0, 0, 0, 0, 1219, 0, 0,
	0, 1002, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1021, 0, 0, 0, 0, 1011, 983, 984, 991,
	1003, 1004, 1005, 1013, 1014, 1015, 0, 0, 0, 0,
	0, 0, 0, 1006, 0, 0, 0, 1020, 1010, 1018,
	986, 0, 0, 1017, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1016, 0, 0, 0, 0, 0,
	0, 0, 0, 985, 0, 0, 1008, 0, 0, 1000,
	0, 0, 1001, 0, 0, 0, 0, 0, 0, 0,
	1009, 0, 0, 997, 998, 999, 1012, 0, 996, 994,
	995, 987, 988, 989, 990, 992, 993, 1007, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 983, 984, 991,
	1003, 1004, 1005, 1013, 1014, 1015, 0, 0, 0, 0,
	0, 0, 0, 1006, 0, 0, 0, 0, 1010, 1018,
	986, 1002, 0, 1017, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1016, 0, 1011, 0, 0, 0,
	0, 0, 0, 985, 0, 0, 1008, 0, 0, 1000,
	0, 0, 1001, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1007, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 991,
	1009, 0, 0, 997, 998, 999, 1012, 0, 996, 994,
	995, 987, 988, 989, 990, 992, 993, 0, 1010, 1018,
	0, 1002, 983, 984, 0, 1003, 1004, 1005, 1013, 1014,
	1015, 0, 0, 0, 1016, 0, 1011, 0, 1006, 0,
	0, 0, 0, 0, 0, 986, 1008, 0, 1017, 0,
	0, 0, 1001, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 985, 0,
	0, 0, 0, 0, 1000, 0, 0, 1007, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1009, 0, 0, 997, 998, 999, 1012, 0, 996, 994,
	995, 987, 988, 989, 990, 992, 993, 0, 0, 0,
	0, 1002, 983, 984, 991, 1003, 1004, 1005, 1013, 1014,
	1015, 0, 0, 0, 0, 0, 1011, 0, 1006, 0,
	0, 0, 0, 1010, 1018, 986, 983, 984, 1017, 1003,
	1004, 1005, 1013, 1014, 1015, 0, 0, 0, 0, 1016,
	0, 0, 1006, 0, 0, 0, 1588, 0, 985, 986,
	0, 1008, 1017, 0, 1000, 0, 0, 1001, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 985, 0, 0, 0, 0, 0, 1000, 0,
	1009, 0, 1007, 997, 998, 999, 1012, 0, 996, 994,
	995, 987, 988, 989, 990, 992, 993, 0, 0, 0,
	0, 0, 0, 0, 991, 0, 0, 0, 0, 1593,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1010, 1018, 0, 1002, 0, 991, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1016,
	0, 1011, 0, 0, 0, 0, 0, 1010, 1018, 0,
	0, 1008, 0, 0, 0, 0, 0, 1001, 0, 0,
	0, 0, 0, 1016, 1735, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1008, 0, 0, 0, 0,
	0, 1001, 1007, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1009, 1007, 0, 997, 998,
	999, 1012, 0, 996, 994, 995, 987, 988, 989, 990,
	992, 993, 0, 0, 0, 0, 1002, 0, 983, 984,
	0, 1003, 1004, 1005, 1013, 1014, 1015, 0, 0, 0,
	0, 1011, 0, 0, 1006, 0, 0, 0, 0, 0,
	1002, 986, 983, 984, 1017, 1003, 1004, 1005, 1013, 1014,
	1015, 0, 0, 0, 0, 1011, 0, 0, 1006, 0,
	0, 0, 1546, 0, 985, 986, 0, 0, 1017, 0,
	1000, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 985, 0,
	0, 0, 0, 0, 1000, 1009, 0, 0, 997, 998,
	999, 1012, 0, 996, 994, 995, 987, 988, 989, 990,
	992, 993, 0, 0, 0, 0, 0, 0, 0, 1009,
	991, 0, 997, 998, 999, 1012, 0, 996, 994, 995,
	987, 988, 989, 990, 992, 993, 0, 0, 0, 1010,
	1018, 0, 983, 984, 991, 1003, 1004, 1005, 1013, 1014,
	1015, 0, 0, 0, 0, 1016, 0, 0, 1006, 0,
	0, 0, 0, 1010, 1018, 986, 0, 1008, 1017, 0,
	0, 0, 0, 1001, 0, 0, 0, 0, 0, 1016,
	0, 0, 0, 0, 0, 0, 0, 0, 985, 0,
	0, 1008, 0, 0, 1000, 0, 0, 1001, 1007, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1007, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1002, 0, 991, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1011, 0, 0,
	0, 0, 0, 1010, 1018, 0, 1002, 983, 984, 0,
	1003, 1004, 1005, 1013, 1014, 1015, 0, 0, 0, 1016,
	0, 1011, 0, 1006, 0, 0, 0, 0, 0, 0,
	986, 1008, 0, 1017, 0, 0, 0, 1001, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 985, 0, 0, 0, 0, 0, 1000,
	0, 1009, 1007, 0, 997, 998, 999, 1012, 0, 996,
	994, 995, 987, 988, 989, 990, 992, 993, 0, 0,
	0, 0, 0, 0, 0, 1009, 0, 0, 997, 998,
	999, 1012, 0, 996, 994, 995, 987, 988, 989, 990,
	992, 993, 0, 0, 0, 0, 1002, 983, 984, 991,
	1003, 1004, 1005, 1013, 1014, 1015, 0, 0, 0, 0,
	0, 1011, 0, 0, 0, 0, 0, 0, 1010, 1018,
	986, 1555, 1556, 1017, 1573, 1574, 1575, 0, 0, 0,
	0, 0, 0, 0, 1016, 0, 0, 1724, 0, 0,
	0, 0, 0, 985, 0, 0, 1008, 0, 0, 1000,
	0, 0, 1001, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1555, 1556, 0, 1573, 1574, 1575, 0, 0,
	0, 0, 0, 1570, 0, 1009, 0, 0, 997, 998,
	999, 1012, 0, 996, 994, 995, 987, 988, 989, 990,
	992, 993, 0, 1555, 1556, 0, 1573, 1574, 1575, 991,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1723,
	0, 0, 0, 0, 1570, 0, 0, 0, 1010, 1018,
	0, 1002, 0, 1561, 0, 1555, 1556, 0, 1573, 1574,
	1575, 0, 0, 0, 0, 0, 1011, 0, 0, 0,
	0, 0, 0, 0, 0, 1570, 1008, 0, 0, 0,
	0, 0, 1001, 0, 0, 0, 0, 0, 1576, 0,
	0, 0, 0, 0, 1561, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1571, 1570, 0, 0,
	0, 0, 0, 0, 1577, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1561, 0, 0, 0, 1576,
	1009, 0, 0, 997, 998, 999, 1012, 0, 996, 994,
	995, 987, 988, 989, 990, 992, 993, 1571, 0, 0,
	0, 1002, 0, 0, 0, 0, 0, 1561, 0, 0,
	1576, 0, 0, 0, 0, 0, 1011, 0, 0, 0,
	0, 0, 0, 0, 0, 1572, 0, 0, 1571, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1576, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1571, 0, 0, 0, 0, 0, 1572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1009, 0, 0, 997, 998, 999, 1012, 0, 996, 994,
	995, 987, 988, 989, 990, 992, 993, 1572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1567, 1568, 1569,
	0, 0, 1566, 1564, 1565, 1557, 1558, 1559, 1560, 1562,
	1563, 0, 0, 0, 0, 0, 0, 0, 0, 1572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1567, 1568,
	1569, 0, 0, 1566, 1564, 1565, 1557, 1558, 1559, 1560,
	1562, 1563, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1567,
	1568, 1569, 0, 0, 1566, 1564, 1565, 1557, 1558, 1559,
	1560, 1562, 1563, 871, 863, 888, 855, 879, 878, 0,
	0, 857, 856, 0, 0, 0, 890, 889, 0, 0,
	0, 1567, 1568, 1569, 0, 0, 1566, 1564, 1565, 1557,
	1558, 1559, 1560, 1562, 1563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 884, 0,
	876, 875, 0, 0, 0, 0, 0, 0, 0, 874,
	0, 0, 0, 0, 0, 0, 0, 871, 863, 888,
	855, 879, 878, 0, 0, 857, 856, 873, 0, 0,
	890, 889, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 866, 865, 867, 868, 869,
	0, 887, 884, 0, 876, 875, 0, 0, 0, 0,
	0, 0, 0, 874, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 859, 0, 0, 0,
	0, 873, 0, 0, 0, 0, 0, 0, 877, 0,
	0, 0, 864, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 866,
	865, 867, 868, 869, 0, 887, 0, 0, 872, 0,
	0, 0, 1237, 1235, 1236, 1239, 1238, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	859, 0, 0, 0, 0, 0, 860, 0, 0, 0,
	0, 0, 877, 0, 0, 0, 864, 870, 861, 0,
	0, 0, 0, 0, 0, 0, 0, 892, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 858, 0, 0,
	885, 886, 872, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 862, 0, 0, 0, 0, 891, 0, 0, 0,
	860, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 870, 861, 0, 0, 0, 0, 0, 0, 0,
	0, 892, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 858, 0, 0, 885, 886, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 862, 0, 0, 0, 0,
	891,
}
var sqlPact = [...]int{

	184, -1000, 25, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 694, 16435, 16435, 20593, -1000, -1000, -1000, -1000,
	-1000, -1000, 757, 723, 2158, 5147, 20593, 20593, 20296, 1291,
	1291, 22078, -1000, -1000, 25939, -1000, 3035, 500, 505, 500,
	500, 499, 22078, 1095, 633, 13427, 731, 125, -1000, 843,
	6, 25642, 20593, 1426, 22, 18514, 276, 184, 19999, 25345,
	20593, 19702, 607, 20, 17029, 20593, -1000, 8, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1279, 343, 8, -1000, 1278, 1150,
	1147, 18514, 25048, 24751, 24454, 24157, 23860, -1000, 12189, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 763, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 282, 281, -1000, 19405, -1000, 1001,
	-1000, 21, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1000, -1000, 20593, -1000, -1000, 23563, 23266, 683, 278, 1011,
	-1000, -1000, 542, 390, -1000, -1000, 13118, 30, -1000, -1000,
	-1000, -1000, 1429, 16138, 799, 1276, -1000, 991, 1275, 1274,
	1271, 1270, 1267, -1000, 800, -1000, 1266, 374, 953, 485,
	-1000, 1265, 1258, 1011, -1000, 1011, -1000, -1000, -1000, 600,
	22078, -1000, -1000, -1000, -1000, -1000, 18514, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1643, -1000, -1000,
	-1000, -1000, 1666, -1000, -1000, -1000, -1000, 22969, 20593, 20593,
	1166, 22672, -1000, 843, -1000, -1000, -1000, 1050, 1422, 1422,
	1422, 1452, 138, 131, 125, 5, 20593, -1000, 277, 5,
	9013, 9013, -1000, -1000, 276, -1000, 325, 15532, -1000, 8047,
	-1000, 899, 1326, 427, 752, 1325, -117, 807, 806, 1324,
	16138, 17029, 20, -23, -1000, -1000, -1000, 4838, 16138, 658,
	14628, 8, -1000, -1000, -1000, 18514, 20593, 20593, 692, 22375,
	-1000, 1323, 120, 1322, -1000, 119, 1321, -1000, 119, 1319,
	-23, 1318, 19, -1000, -1000, 276, 19108, 20593, 1542, 30260,
	-1000, 10302, -1000, -1000, 16435, 1481, 16435, -1000, -1000, 1539,
	-1000, 20593, 10302, 10, -1000, -1000, -1000, -1000, 1096, 1125,
	486, 12809, 12500, 1386, 1304, -1000, -1000, -1000, 28, 5147,
	679, -1000, -1000, -1000, 18811, -1000, -1000, 20593, 1285, 16435,
	20593, 20593, 20593, 20593, 20593, -1000, -1000, 20593, -1000, 1084,
	-1000, -1000, 20593, 20593, 760, 632, -1000, 10, -1000, 22078,
	-1000, 124, -1000, -1000, -1000, -1000, 275, 1054, 400, 137,
	21781, 400, 1051, -1000, 1050, -1000, 1010, 1171, 9336, 1124,
	10302, 125, -1000, -1000, 125, 125, 10302, -1000, -1000, 20593,
	5, 1529, 20593, 147, -1000, 28907, -1000, -1000, 10302, 10302,
	10302, 10302, 10302, 913, 315, -1000, 265, 263, 5779, -1000,
	-1000, 1665, -1000, -1000, -1000, 136, -1000, -1000, 10302, 8,
	-1000, -1000, -1000, -1000, 261, 1680, -1000, 440, -1000, -1000,
	-1000, 396, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1284, 260, 259, -1000, -1000, -1000, -1000, 258, 257,
	245, 244, 243, 240, 236, 232, 231, 230, 229, 227,
	224, 223, 222, 836, -1000, 421, -1000, -1000, 421, 421,
	-1000, 216, 216, 217, -1000, -1000, -1000, -1000, 216, -1000,
	-1000, -1000, 358, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	220, 147, -1000, -1000, -1000, 20593, 17, -1000, 29582, -1000,
	-31, 778, -1000, 17920, 1469, 1440, 1399, 18514, 1486, 6,
	1257, 1464, 6, 1255, 599, 20593, 20593, 598, 596, 18514,
	349, -1000, 20593, -1000, -1000, -68, -1000, -1000, 1254, 15,
	-1000, -1000, 407, 82, 1524, 82, 14930, -1000, 20593, 20593,
	-1000, 20593, -1000, -1000, 20593, -1000, 20593, 20593, -1000, 20593,
	20593, 1087, 17326, 971, 1316, 668, 1087, 7, -1000, 1552,
	-1000, -1000, -1000, -1000, 93, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 217, 836, 216, 216, 216, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 358, -1000, -1000, 421, 421,
	421, -1000, -1000, 1, 29582, 595, -1000, 1251, 483, -1000,
	381, 0, 1011, 919, -1000, -1000, -1000, -1000, -1000, -1000,
	3, -1000, -1000, 3, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1679, 5147, -1000, -1000, -1000, -1000, -1000,
	-1000, 20593, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 20593, 20593, 20593, -1000, -1000, 18514, 17623, 1510,
	1315, 867, -1000, 1496, 20593, 980, 1047, -1000, 628, 1314,
	-1000, -1000, -1000, -1000, 29582, -1000, 376, -1000, -1000, 29582,
	784, 1154, -1000, 1154, -1, -1000, 28807, -1000, 215, -8,
	407, 9013, 14327, 30196, 30260, 5147, 615, 10302, 10302, 10302,
	10302, 10302, 10302, 10302, 10302, 10302, 10302, 10302, 10302, 10302,
	10302, 10302, 10302, 10302, 10302, 10302, 10302, 10302, 10302, 1132,
	10302, 594, 10302, 10302, 10302, 10302, 1968, 875, 201, 925,
	5147, -1000, -1000, 1629, 1629, 1629, 26625, 26625, 239, 315,
	-1000, 10302, -1000, 8691, 131, 28287, -9, -1000, -1000, -1000,
	6746, 418, 29582, 8, 5456, -1000, 1657, 655, 1293, 1215,
	214, 130, 129, 10302, 10302, 10624, 10624, 10302, 10946, 10302,
	10302, 6101, 10302, 10302, 10302, 10302, 10302, 10302, -1000, 212,
	-1000, -1000, -1000, -1000, 1656, -1000, -1000, 1654, -1000, 612,
	611, 1650, 407, 117, 8047, -1000, 971, 20593, 20593, 20593,
	-1000, -1000, 1044, 21484, 1043, 30260, 20593, -1000, 211, 210,
	1135, 1133, 20593, 20593, 21187, 20890, 20593, 846, 6, -1000,
	209, 6, -1000, 208, 20593, 779, -1000, 20593, 20593, 770,
	1188, 1021, -1000, 403, 16138, 650, 1249, 20593, 751, 10302,
	776, -1000, 14026, 438, 20593, 751, 111, -1000, -1000, -1000,
	344, 20593, -1000, -1000, -1000, 120, -1000, 119, 119, -23,
	-1000, -1000, 18514, -1000, -1000, 30260, 314, 311, -1000, 1648,
	590, -1000, 587, 586, 563, -1000, 204, -1000, 10302, 20593,
	20593, 1134, -1000, -1000, -1000, 699, -1000, 824, -1000, 13427,
	-1000, -35, -1000, -1000, -1000, 349, -1000, 115, -10, -29,
	30260, -1000, -1000, -1000, -1000, -1000, 20593, 319, 20593, 6,
	20593, -1000, 1676, 6, 20593, 1313, 1331, 340, 20593, 784,
	-1000, 10302, 1645, -1000, -1000, -1000, 10302, -1000, -1000, -1000,
	1087, -1000, 1212, -1000, -74, 1260, 207, -163, 126, 354,
	-1000, 13725, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 369, 823, 823, 854, 854, 854, 854, 1720,
	2234, 168, 1436, 3514, 3514, 3514, 2267, 256, 256, 3514,
	3514, 3514, 26625, 29707, 406, 10302, 10302, 555, 873, 201,
	406, 10302, 406, 406, 406, 406, -1000, 767, -1000, -1000,
	-1000, -1000, 1246, 200, 10946, 10946, -1000, -1000, -1000, 5779,
	11268, -1000, -1000, -1000, -1000, -1000, 199, 10302, -1000, 28341,
	-180, -12, -1000, -1000, 10302, -121, -122, -1000, -1000, 626,
	-1000, 10302, -1000, -7, 10302, 10302, 10302, 110, 109, -1000,
	918, 197, 196, 10302, -1000, -1000, 29482, 26901, 108, 1245,
	-120, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 106, 97,
	29458, -120, 96, 29872, -1000, 10946, 10946, 10946, 5779, 195,
	91, 28667, -120, 29256, 8369, 8369, 8369, 86, 29232, 10302,
	-120, 26679, 26571, 26539, -18, -19, -30, 1638, -46, 79,
	367, 363, 77, 1212, -1000, -1000, -1000, -1000, 548, 524,
	1312, -1000, 1038, -1000, 430, -1000, 732, 10302, 11888, 192,
	191, 871, -1000, 1311, 951, 1308, 951, -1000, -31, 761,
	-1000, 10302, -1000, 10302, -1000, 523, -1000, -1000, 517, 403,
	1244, 637, -1000, 949, -1000, -1000, 649, -1000, -1000, 6423,
	29582, -1000, 751, 1407, -51, -1000, -1000, -1000, 407, 14930,
	14327, 8047, -58, -1000, -1000, -1000, 971, -1000, 494, 1636,
	72, 1072, 1009, 883, 703, 1616, 29582, -35, -35, -1000,
	-1000, -1000, -1000, -1000, 20593, -1000, 1174, -1000, 17623, 190,
	20593, 189, -1000, 187, -1000, -1000, 186, 20593, 1099, 340,
	16732, -1000, 400, 957, 28233, -1000, 71, 1204, 1444, -1000,
	14327, 1146, 1141, 14327, 1036, 932, 932, 932, -1000, 183,
	295, 354, 4206, 10302, 18217, 939, 48, 69, 1260, 10302,
	406, 406, 10302, 10946, 10946, -1000, 406, -1000, -1000, -1000,
	-1000, -1000, 1241, 182, 10302, 30260, 29903, 29831, -60, -1000,
	7725, -37, -1000, 10302, -1000, 28008, -1000, -1000, 298, 1307,
	-1000, 10302, 29132, 66, 7403, -1000, 29007, -26, -26, -1000,
	1675, -1000, 15231, 413, 943, 27954, 30196, 30260, -1000, 10302,
	-1000, -1000, 1240, 10302, -1000, 30196, 30260, 10946, 10946, 10946,
	10946, 10946, 10946, 10946, 10946, 10946, 10946, 10946, 10946, 10946,
	10946, 10946, 10946, 10946, 10946, 10946, 1109, 10946, 1580, 1580,
	1580, -39, 7081, -1000, 1263, 1240, 10302, 10302, 30260, 63,
	61, 60, -1000, 10302, -120, 10302, 10302, 10302, -1000, -1000,
	-1000, 58, -1000, 1601, -1000, -1000, -1000, -1000, 1204, 20593,
	20593, 20593, 1306, -1000, 2126, -1000, 27900, -64, -1000, 304,
	1423, 10302, -1000, -1000, 180, 11888, 20593, -1000, 1144, 1183,
	473, 20593, -1000, 20593, -1000, 20593, 20593, 20593, -69, -75,
	20593, 20593, -1000, 16138, 528, 178, -1000, -47, -1000, -1000,
	206, 6, 751, -1000, -53, -1000, 342, -1000, 294, 291,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 54, -1000,
	-1000, 1178, -1000, 11888, 174, 20593, 17623, 1494, 11888, 979,
	1104, 340, 16732, -1000, 628, -1000, -1000, -1000, 405, 10302,
	10302, 1260, 14327, 14327, 2093, 1112, 14327, -1000, -1000, -1000,
	-1000, 289, 362, 354, 18217, -1000, 1592, 1128, -79, -1000,
	-1000, 20593, 172, -1000, 354, 1512, 406, 28417, 3095, 10302,
	30260, 29807, -80, 10302, 10302, -1000, -81, -1000, 10302, 287,
	29582, -1000, -1000, -1000, 29582, 10302, 1669, 10302, 53, 52,
	51, -1000, -1000, -1000, 26236, 10302, 50, -1000, 45, 44,
	29582, 1263, 29582, -1000, -1000, 388, 388, 645, 645, 645,
	645, 1580, 747, 1620, 1113, 366, 366, 366, 756, 525,
	525, 366, 366, 366, 1237, 1111, 171, 29935, 10302, -86,
	-1000, -1000, -1000, 29582, 29582, 41, -1000, -1000, -1000, -120,
	3478, 27675, 27621, -1000, 40, 405, -1000, -1000, -1000, 20593,
	-1000, 20593, -1000, 5147, 20593, 1238, 1034, -1000, -1000, 1123,
	170, 10946, 20593, -1000, 852, 11888, 1425, 8, 5147, 1425,
	27567, 5456, -88, -94, 1029, -1000, 1015, 10302, -1000, 30260,
	951, 951, -1000, 516, 514, 513, 512, -1000, -1000, -55,
	15841, 1674, 1336, 20593, 1396, -1000, -1000, 169, -1000, -1000,
	-1000, 904, -95, 11888, -99, 39, 6, -100, 20593, -1000,
	340, 16732, -1000, 1331, -1000, 20593, 29582, -120, -1000, 2093,
	-1000, 166, 10302, 14327, -1000, -163, -1000, -101, -1000, 18217,
	-1000, 286, -178, -1000, 335, -1000, 354, 157, 20593, 18217,
	10302, 10302, 29807, -105, -1000, 406, 406, -1000, 27342, -1000,
	29582, -1000, 29007, -1000, -1000, -1000, 844, -1000, 27288, -1000,
	-1000, -1000, -1000, 10946, 1231, 156, 30260, 27234, -1000, -1000,
	10302, -1000, -1000, -1000, -1000, -1000, 825, -1000, -1000, 20593,
	1037, -1000, -1000, 10302, 29935, 155, 1174, 153, -1000, -1000,
	-1000, -1000, -1000, -1000, 1423, -7, -1000, 805, -1000, -1000,
	29582, 1416, -1000, -1000, 20593, 20593, 152, 149, -1000, 146,
	8, -111, -1000, 271, 566, -112, 20593, -1000, -1000, 3854,
	20593, 852, -125, -1000, 1174, -1000, 852, 144, 16732, -1000,
	1099, -110, -1000, 1484, -1000, 20593, 29582, -1000, 354, -1000,
	1588, -1000, -1000, 1128, -1000, 4526, 18217, 20593, -131, -1000,
	406, 406, -1000, -1000, 38, 943, 1442, -1000, 735, 10946,
	30260, -135, -1000, 27009, -1000, -1000, 1300, 26955, 1075, 20593,
	-1000, 20593, 1425, 37, 20593, 446, 5147, -1000, -1000, 10302,
	10302, 10302, 1674, -1000, -1000, 1673, 688, -1000, 407, -1000,
	143, 1174, 852, -1000, 1174, 11888, -1000, 1104, 20593, 141,
	-139, 18217, -1000, -1000, -1000, 1586, -1000, -144, -1000, -1000,
	907, 10302, 735, -146, -1000, -1000, 1296, -1000, 960, 912,
	36, -148, -1000, -1000, 137, -1000, 10302, -1000, -152, -154,
	-26, -1000, -1000, 14930, -1000, 20593, -1000, 1174, -1000, -160,
	-1000, -1000, -1000, -1000, -1000, 285, -1000, 33, 9980, 9980,
	-120, -1000, 20593, -1000, 977, 969, 665, -1000, -1000, -1000,
	-1000, -1000, 1075, 29582, -1000, -1000, 32, -141, -165, -1000,
	852, -1000, -1000, -1000, -1000, 11579, 923, 729, 28563, -1000,
	-1000, -1000, 1354, -1000, 466, 958, 958, 960, 1669, -1000,
	948, 1174, 1558, -1000, -1000, -1000, -1000, -1000, -1000, 1567,
	-1000, -1000, 1120, -1000, -1000, -1000, -1000, -1000, -1000, 9658,
	-1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1995, 1993, 1475, 1648, 1992, 1991, 1624, 1990, 1989,
	1988, 1987, 1984, 1983, 1621, 1613, 1597, 1588, 1982, 117,
	1981, 1978, 1976, 1578, 1975, 1974, 1972, 1966, 77, 1965,
	1964, 1576, 1557, 1555, 1531, 1963, 1962, 1473, 1961, 1959,
	15, 1958, 89, 1957, 24, 145, 2348, 140, 1952, 1942,
	1940, 22, 105, 83, 1935, 90, 1933, 1932, 54, 29,
	23, 18, 1926, 112, 1925, 1924, 1270, 30, 1919, 1917,
	141, 1892, 45, 25, 1708, 156, 152, 125, 127, 1888,
	1887, 1884, 1882, 51, 1879, 2, 1878, 1877, 13, 61,
	65, 1876, 43, 20, 1875, 1871, 133, 1870, 71, 113,
	1454, 139, 142, 192, 1869, 92, 10, 88, 1868, 1863,
	135, 42, 1855, 64, 93, 143, 1852, 87, 157, 58,
	40, 59, 108, 1851, 1846, 1845, 96, 1843, 115, 62,
	1841, 1835, 94, 1833, 136, 138, 1829, 1828, 114, 1827,
	132, 1825, 1824, 150, 170, 1823, 160, 1820, 1818, 163,
	121, 8, 50, 70, 4, 1462, 1450, 116, 68, 39,
	16, 1817, 1617, 1006, 1816, 32, 98, 67, 41, 99,
	56, 57, 148, 21, 1815, 1814, 119, 1812, 1811, 1810,
	1809, 1807, 97, 1803, 1801, 84, 144, 17, 31, 19,
	103, 37, 44, 100, 118, 153, 126, 1799, 102, 129,
	1798, 111, 1796, 1795, 1714, 123, 1794, 1792, 1789, 1445,
	1244, 1216, 26, 1783, 1781, 725, 380, 1777, 1774, 60,
	1773, 122, 124, 1772, 149, 137, 28, 1771, 128, 147,
	107, 1769, 120, 38, 0, 480, 355, 1768, 130, 91,
	1767, 1766, 1756, 1755, 27, 3, 9, 6, 7, 5,
	75, 69, 1752, 1750, 134, 109, 74, 1746, 158, 1735,
	1733, 1727, 53, 1725, 14, 1721, 11, 1718, 1716, 12,
	1, 1711, 1704, 146, 1698, 104, 1692, 1534, 1690, 151,
	1689, 1687, 1500, 33, 101,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 53, 53, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 50, 50, 55, 55, 55, 57, 57, 54,
	54, 49, 49, 5, 5, 232, 232, 233, 233, 39,
	39, 43, 43, 40, 41, 41, 42, 42, 6, 6,
	6, 7, 7, 7, 7, 7, 7, 14, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 102, 102,
	101, 101, 104, 104, 16, 16, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 200,
	200, 199, 18, 174, 174, 20, 127, 127, 21, 21,
	21, 21, 22, 27, 273, 273, 273, 277, 277, 278,
	278, 279, 279, 279, 279, 279, 279, 279, 275, 275,
	26, 26, 26, 26, 38, 30, 30, 30, 30, 30,
	30, 147, 144, 144, 143, 143, 143, 143, 145, 145,
	145, 145, 148, 148, 82, 82, 225, 224, 224, 230,
	230, 230, 80, 80, 80, 80, 80, 81, 81, 81,
	223, 223, 223, 223, 231, 231, 231, 231, 231, 231,
	229, 229, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 17, 274, 274,
	276, 276, 32, 32, 33, 33, 34, 34, 34, 34,
	10, 10, 11, 11, 83, 83, 84, 84, 153, 153,
	153, 153, 85, 85, 56, 56, 56, 152, 242, 242,
	243, 243, 243, 243, 243, 243, 244, 244, 244, 244,
	244, 244, 244, 240, 240, 241, 238, 238, 239, 239,
	239, 239, 280, 280, 151, 151, 88, 88, 247, 247,
	247, 247, 245, 245, 245, 245, 245, 248, 246, 249,
	249, 249, 249, 249, 186, 186, 186, 36, 12, 62,
	62, 13, 9, 9, 131, 131, 92, 92, 191, 191,
	191, 73, 73, 51, 51, 51, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 132, 132, 133,
	133, 24, 29, 35, 35, 35, 35, 35, 282, 282,
	69, 69, 69, 69, 70, 70, 146, 146, 149, 149,
	150, 150, 150, 64, 63, 65, 65, 8, 8, 58,
	58, 59, 59, 60, 60, 61, 61, 283, 283, 23,
	23, 23, 76, 76, 140, 140, 140, 142, 142, 141,
	141, 141, 117, 117, 117, 37, 97, 97, 106, 106,
	107, 107, 197, 108, 108, 28, 28, 46, 46, 44,
	44, 44, 44, 44, 44, 45, 45, 47, 47, 47,
	47, 47, 47, 47, 255, 255, 255, 258, 258, 254,
	256, 256, 257, 257, 281, 281, 118, 118, 118, 87,
	86, 86, 90, 90, 89, 91, 91, 190, 115, 115,
	115, 115, 134, 134, 135, 135, 136, 136, 137, 137,
	137, 138, 138, 139, 139, 114, 114, 170, 170, 48,
	48, 96, 96, 98, 98, 160, 160, 160, 161, 161,
	159, 159, 159, 159, 192, 192, 192, 192, 192, 192,
	192, 271, 271, 271, 272, 272, 189, 189, 193, 193,
	193, 193, 193, 193, 187, 187, 187, 187, 188, 188,
	198, 198, 121, 121, 121, 121, 119, 119, 120, 120,
	194, 194, 194, 194, 116, 116, 195, 195, 195, 154,
	154, 201, 201, 201, 219, 219, 95, 95, 95, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 203, 203, 203, 203,
	205, 205, 205, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 218, 218, 218,
	218, 218, 206, 206, 213, 213, 214, 214, 215, 216,
	207, 207, 208, 208, 209, 210, 217, 217, 217, 217,
	221, 221, 211, 211, 211, 211, 211, 212, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 129, 129, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 164, 164, 164, 164,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 250, 250, 250, 250, 250, 250, 250, 252, 252,
	253, 253, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 259,
	259, 260, 260, 262, 262, 263, 263, 264, 265, 265,
	265, 266, 267, 267, 261, 261, 268, 268, 268, 269,
	269, 270, 270, 270, 270, 270, 176, 176, 176, 177,
	177, 178, 184, 184, 184, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 71, 71, 71, 71, 71, 103, 103, 173, 173,
	171, 171, 171, 175, 175, 122, 122, 220, 220, 220,
	220, 220, 220, 220, 123, 123, 123, 130, 124, 124,
	125, 125, 125, 125, 125, 125, 167, 168, 126, 126,
	126, 169, 169, 179, 183, 183, 182, 181, 181, 180,
	180, 157, 157, 158, 158, 156, 155, 111, 111, 110,
	110, 109, 109, 284, 284, 185, 185, 112, 112, 113,
	105, 105, 196, 196, 196, 196, 99, 99, 78, 78,
	100, 100, 74, 74, 77, 77, 75, 75, 75, 75,
	93, 93, 94, 94, 72, 72, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 222, 222, 222,
	172, 66, 66, 66, 67, 67, 68, 68, 227, 227,
	227, 228, 228, 228, 228, 226, 226, 226, 226, 226,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 4, 6, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 3, 3, 3,
	6, 4, 3, 2, 1, 1, 0, 2, 0, 2,
	0, 2, 0, 7, 6, 1, 1, 1, 3, 3,
	0, 2, 0, 2, 1, 3, 5, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 3, 3, 0, 2, 3,
	2, 3, 6, 6, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 2, 2, 2, 2, 2, 3, 6, 3, 4,
	1, 5, 2, 1, 3, 3, 3, 3, 1, 3,
	3, 1, 2, 2, 1, 0, 1, 1, 3, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 3, 4, 4,
	4, 4, 2, 4, 4, 4, 4, 4, 4, 2,
	3, 3, 2, 3, 3, 4, 2, 3, 4, 3,
	3, 4, 4, 2, 5, 5, 6, 2, 2, 0,
	2, 0, 6, 6, 5, 5, 4, 12, 4, 12,
	7, 10, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 8, 0, 1, 1, 0, 3, 2, 0,
	3, 1, 2, 2, 3, 6, 2, 1, 1, 2,
	4, 2, 5, 7, 8, 5, 3, 1, 4, 6,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 5, 2,
	0, 6, 11, 14, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 6, 8, 8, 10, 8, 10, 1, 0, 2,
	0, 2, 2, 3, 3, 2, 2, 2, 1, 0,
	1, 3, 2, 0, 2, 1, 1, 0, 1, 3,
	1, 1, 1, 2, 3, 2, 2, 8, 11, 3,
	0, 3, 0, 3, 0, 3, 0, 1, 0, 6,
	7, 6, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 2, 0, 8, 2, 0, 1, 3,
	1, 1, 3, 5, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 1, 1, 8, 8, 1,
	2, 4, 4, 4, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 2, 2,
	1, 1, 2, 5, 2, 3, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 3, 0, 2, 0, 2,
	3, 3, 0, 1, 3, 3, 5, 1, 1, 3,
	2, 4, 4, 0, 7, 4, 6, 3, 1, 5,
	5, 0, 2, 3, 1, 3, 2, 0, 3, 4,
	5, 4, 5, 4, 5, 2, 4, 1, 1, 0,
	5, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 1, 1, 3, 4, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 3, 4, 4,
	5, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 2, 1, 3, 1, 1, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 4, 1,
	1, 1, 5, 1, 3, 1, 3, 1, 1, 1,
	1, 6, 6, 4, 4, 4, 4, 4, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 4, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 3, 5, 4,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 3, 1, 3,
	3, 3, 2, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 0, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 3, 5, 1, 0, 2, 2, 1, 1, 1,
	2, 1, 2, 1, 0, 1, 1, 1, 3, 3,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	1, 3, 1, 2, 3, 1, 1, 1, 2, 2,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 1, 5, 1, 1, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -17, -18, -20, -21, -22, -23, -25, -27, -29,
	-28, -30, -31, -32, -33, -34, -35, -24, -26, -36,
	-37, -38, 23, 34, 225, 66, -8, -9, -10, -11,
	-12, -13, -257, 94, 103, 125, 206, 101, 87, 119,
	228, 235, -44, -46, 245, -147, 248, 35, 257, 60,
	97, 230, 223, 224, 282, 291, 68, -255, -47, -45,
	333, 307, 314, 239, -48, 266, 299, 336, 266, 134,
	80, 302, -273, -100, 266, 80, -75, -66, 326, 4,
	-234, -236, 20, 21, 23, 33, 34, 35, 40, 44,
	47, 54, 59, 60, 61, 63, 65, 66, 67, 70,
	71, 78, 79, 81, 83, 87, 89, 93, 94, 96,
	101, 102, 103, 109, 110, 113, 115, 120, 125, 126,
	127, 128, 135, 138, 140, 133, 148, 150, 151, 154,
	153, 158, 161, 164, 166, 167, 168, 171, 169, 173,
	174, 176, 175, 181, 183, 184, 186, 189, 192, 195,
	198, 199, 200, 201, 204, 206, 208, 209, 210, 211,
	213, 214, 216, 217, 218, 219, 220, 223, 221, 222,
	224, 225, 226, 228, 230, 231, 233, 246, 247, 258,
	235, 236, 237, 238, 241, 242, 243, 245, 248, 250,
	253, 256, 257, 259, 262, 260, 255, 265, 267, 268,
	269, 270, 271, 278, 282, 283, 284, 285, 288, 289,
	290, 291, 293, 296, 297, 298, 303, 308, 309, 310,
	311, 312, 28, 36, 37, 38, 39, 41, 42, 45,
	46, 50, 51, 52, 55, 82, 84, 85, 100, 104,
	105, 111, 121, 123, 129, 130, 139, 141, 142, 143,
	145, 156, 170, 180, 182, 193, 197, 203, 205, 212,
	232, 240, 251, 252, 261, 263, 273, 274, 275, 279,
	280, 295, 299, 300, -273, -74, -66, 80, 89, 138,
	290, 289, 80, 134, 266, 302, 292, -19, 333, -28,
	-7, -15, -4, -23, -37, -14, -31, -17, -32, -33,
	-34, -16, 23, -226, 4, -234, -236, -235, -237, 57,
	69, 118, 137, 131, 147, 149, 157, 159, 172, 194,
	196, 229, 249, 22, 24, 25, 26, 27, 29, 30,
	31, 32, 43, 48, 49, 53, 56, 58, 64, 68,
	72, 73, 74, 75, 76, 77, 86, 88, 90, 91,
	92, 95, 97, 99, 106, 107, 108, 114, 116, 117,
	119, 122, 124, 132, 134, 136, 144, 146, 152, 155,
	160, 162, 163, 177, 178, 179, 185, 187, 188, 190,
	191, 202, 207, 215, 227, 239, 244, 254, 264, 266,
	272, 276, 277, 281, 286, 287, 292, 294, 301, 302,
	304, 305, 306, 307, -66, -66, -66, 206, 22, -277,
	22, -278, -279, 68, 94, 119, 239, 138, 89, 289,
	-277, -70, 235, -66, -144, 161, 242, 54, 232, 278,
	-145, -143, -225, 273, -148, -101, 171, -66, 4, 171,
	244, 80, 22, 34, 54, 59, 81, 120, 134, 135,
	64, 65, 151, 209, 161, 243, 267, 273, 278, 68,
	293, 269, 102, -282, 278, 278, -282, -282, -69, 278,
	276, -70, 4, 80, 244, 171, -281, 266, -230, -223,
	-186, 9, 281, 106, 187, -229, 8, 325, -222, -228,
	5, 7, 324, 4, -234, -236, -235, 266, 292, 302,
	-131, 80, 287, -45, -47, -46, -89, -90, 286, 144,
	99, 191, -44, -46, -255, -258, 213, -254, -66, -258,
	-86, -87, 22, 91, 337, -194, -74, 188, -113, 333,
	-3, -194, 129, -74, -77, 129, -74, -66, -194, 129,
	276, 337, -100, -93, -66, -156, -155, 335, 117, 117,
	333, -110, -111, -155, -156, 117, 146, 146, -195, -194,
	-66, 129, -78, 129, -77, -102, 129, -101, -102, 129,
	-93, 129, -200, -199, -228, 299, 266, 134, -174, 333,
	-127, 333, -66, 22, 187, 337, 187, -66, -144, 52,
	-144, 246, 333, -149, -150, -63, -64, -65, 148, 208,
	211, 276, 318, 117, 312, -230, -82, 86, -104, 335,
	54, -232, -229, 9, 246, 209, 243, 117, -274, 187,
	117, 117, 117, 117, 117, 209, 243, 117, 312, 148,
	208, 258, 266, 302, 117, 117, -146, -149, -146, 276,
	-70, -116, -194, 8, 7, 7, -101, 129, -66, -101,
	134, -66, 129, -89, -90, -115, -134, -135, 160, 108,
	185, -118, 22, 91, -118, -118, 44, 334, 334, 337,
	-258, -94, 333, -105, -196, -162, 326, -164, 324, 325,
	319, 177, 313, -176, -166, -179, 100, 232, 333, -74,
	-165, 338, 9, -252, -46, 29, -177, -178, 48, -66,
	7, 8, 5, 6, -72, -203, -172, -212, 281, 106,
	179, -250, -251, 4, -234, -227, -204, -214, -208, -211,
	145, 57, 73, 76, 74, 77, 244, 292, 49, 28,
	104, 105, 197, 203, 263, 279, 280, 129, 180, 130,
	55, 121, 156, 93, 37, 39, 41, 42, 50, 51,
	82, 84, 85, 111, 139, 141, 142, 143, 182, 212,
	251, 261, 274, 275, 300, -235, -215, -216, -209, -210,
	-217, -105, -113, 326, -74, 333, -112, -185, -162, 86,
	-53, 221, -52, 21, 23, 94, 297, 100, 255, 270,
	236, 255, 270, 236, 221, 100, 338, 221, 221, 100,
	-232, -75, 337, -226, 326, -233, -232, 259, 334, -99,
	-74, -111, -195, -76, -74, -76, 245, -66, 30, 100,
	-55, 337, 47, 226, 100, -55, 337, 100, -55, 100,
	100, 334, 337, -194, 129, -77, 30, -173, -201, -202,
	-204, -213, -207, -211, -212, 40, 46, 45, 271, 170,
	240, 252, 295, 38, 186, 140, 139, 141, 142, 143,
	251, 37, 212, 111, 93, 85, 84, 182, 42, 41,
	-215, -216, -209, -210, 82, 274, 275, 145, 39, 51,
	50, 300, 261, -103, -162, -273, -279, -273, 30, -143,
	-225, -103, 337, 158, -81, 164, 176, 126, 188, 310,
	-224, 86, -230, -224, 86, 71, -231, 5, 4, -172,
	-186, 86, 161, -212, 335, -226, 247, -101, 22, -225,
	-276, 114, -273, -225, -225, -225, -225, -225, -66, 158,
	-225, -225, 266, 134, 266, -70, -55, 337, 333, -88,
	177, -256, 307, -88, 333, -67, 129, -66, -256, 177,
	-115, -135, -134, -136, -162, 22, -139, 110, 173, -162,
	-164, -45, -45, -45, -91, -190, -162, -254, 30, -93,
	-96, 337, 117, 10, 11, 56, 33, 324, 325, 326,
	327, 112, 328, 329, 322, 323, 321, 316, 317, 318,
	62, 165, 234, 13, 14, 15, 26, 190, 159, 313,
	131, 249, 319, 16, 17, 18, 147, 36, 132, -71,
	30, 4, -79, -162, -162, -162, -162, -162, 196, -109,
	-157, 331, -46, 333, -46, -162, -103, 7, -46, -171,
	331, -180, -162, -110, 333, 5, 333, 5, -259, 308,
	114, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 205, -221,
	303, -221, -221, -205, 333, -205, -206, 333, -205, 309,
	314, 333, -96, -74, 337, 334, 337, 276, -132, 64,
	58, -152, 129, 58, -238, -66, 64, -239, 53, 287,
	207, 116, -132, 64, -132, 64, 64, -194, 33, -28,
	117, 33, -28, 117, 276, -77, -66, 276, 276, -194,
	-198, 315, -66, -198, 337, 117, 334, 337, -154, 305,
	-140, -28, 333, 86, 30, -140, -106, -107, -197, -108,
	-74, 333, -66, -66, -77, -78, -101, -102, -102, -93,
	-19, -199, 100, -19, 334, 337, -95, 29, -128, 333,
	311, 168, 83, 127, 167, -129, 238, 334, 337, 276,
	117, 278, 334, -150, -80, 211, 253, 222, 241, 337,
	-226, -275, -66, -74, -77, -74, -194, -83, -93, -84,
	-66, -153, -152, -240, -241, -238, 134, 287, 107, 30,
	100, -62, 201, 30, 187, 177, -58, 268, 100, -137,
	-222, 333, 325, -138, 232, 233, 337, -51, 31, 90,
	333, 334, -154, -196, -98, -192, 331, -194, -74, -46,
	-193, 333, -219, -201, -218, 217, 218, 216, 220, 219,
	-201, -226, 273, -162, -162, -162, -162, -162, -162, -162,
	-162, -162, -162, -162, -162, -162, -162, -162, -162, -162,
	-162, -162, -162, -162, -162, 159, 131, 249, 36, 132,
	-162, 276, -162, -162, -162, -162, 169, 177, 179, 281,
	106, 288, 91, 183, -284, 264, 32, -169, -46, 333,
	-184, 27, 254, 22, -226, -176, 232, 333, -157, -162,
	-158, -103, 334, 334, 337, -103, -175, 332, -171, -183,
	-182, 304, 334, -103, 301, 22, 91, 326, 7, -128,
	-260, 109, 122, 333, 334, 334, -162, -162, -122, -220,
	-103, 4, 311, 168, 83, 127, 167, 238, -122, -123,
	-162, -103, -124, -163, -164, 324, 325, 319, 333, 232,
	-125, -162, -103, -162, 43, 155, 277, -126, -162, 117,
	-103, -162, -162, -162, -103, -103, -103, 333, 7, 7,
	273, 273, 7, -154, 334, -185, -52, -74, -66, -66,
	177, -152, 129, -57, 177, -201, -66, 333, 333, 150,
	150, -66, -66, 129, -66, 129, -66, -66, -53, 221,
	-28, 333, -28, 333, -66, 221, -66, -74, 221, -39,
	128, 183, -42, 307, -232, 259, 117, -74, -117, 227,
	-162, -117, -142, 187, -99, 299, -66, -117, -97, 337,
	117, 318, -99, -55, -55, -55, -194, -201, 331, 331,
	7, 276, 276, 276, 276, 333, -162, -275, -275, -63,
	285, 61, 211, -230, 337, -198, 334, 334, 337, -67,
	134, -67, -28, -101, 5, -28, -74, 100, -59, 96,
	-283, 318, -66, -138, -162, -190, -19, -114, 122, -198,
	337, 69, -121, 149, 172, 118, 157, 229, 137, 7,
	-19, -159, 338, 333, -189, 314, -46, -193, -192, 312,
	-162, -162, 276, -284, 264, -169, -162, 169, 179, 281,
	106, 288, 91, 183, 117, 333, -163, -163, -103, -166,
	333, -103, 332, 341, 334, -162, 332, 332, 337, -181,
	-182, 95, -162, -90, 337, -89, -162, -103, -103, 334,
	334, -265, 195, 333, 333, -162, 30, 337, 334, 117,
	334, 334, -130, 202, 334, 10, 11, 324, 325, 326,
	327, 112, 328, 329, 322, 323, 321, 316, 317, 318,
	62, 165, 234, 13, 14, 15, 147, 132, -163, -163,
	-163, -103, 333, 334, -167, -168, 117, 114, 30, -126,
	-126, -126, 334, 117, -103, 337, 337, 337, 334, 334,
	334, 7, 334, 337, 334, 312, 312, 334, -114, 276,
	276, 100, 177, 296, -242, -239, -162, -92, -191, -66,
	-253, 333, -250, -251, -72, 333, 333, -50, 94, 245,
	-133, 100, -55, 100, -55, 276, -132, 64, -103, -103,
	276, 276, -42, 117, 265, 189, 259, -105, 178, -117,
	63, 334, -154, -107, -98, -185, 334, 332, 7, 7,
	334, 168, 127, 167, -129, 167, -129, -129, 7, -66,
	-85, 133, -153, 333, -67, 333, 333, -88, 333, -66,
	-60, 154, -283, -229, -256, 188, 334, 334, -170, 124,
	44, -192, 149, 149, -192, -121, 149, -119, 194, -119,
	-119, -271, 333, 332, -189, -226, 331, 339, -103, -188,
	-187, 30, -66, 192, 334, -162, -162, -163, -163, 117,
	333, -162, -173, 26, 26, 334, -103, 334, 337, -158,
	-162, 334, -171, 97, -162, 272, 334, 301, -90, -90,
	-90, 5, -266, -66, 333, 305, -89, 334, -219, -201,
	-162, -167, -162, -219, -201, -163, -163, -163, -163, -163,
	-163, -163, -163, -163, -163, -163, -163, -163, -163, -163,
	-163, -163, -163, -163, 91, 177, 183, -163, 337, -103,
	334, -168, -167, -162, -162, -201, 334, 334, 334, -103,
	-162, -162, -162, 334, 7, -170, -66, -66, -152, 100,
	-243, 64, -244, 56, 107, 68, 177, 179, 287, 207,
	53, 86, 215, 334, 334, 337, -73, -110, 56, -73,
	-162, 333, -92, -93, 177, 86, 177, 86, 79, 283,
	-66, -66, -74, -66, -66, 334, 334, -66, -74, -233,
	273, 333, -141, 333, 187, -28, -117, 318, 332, 332,
	334, 132, -92, 333, -93, -83, 30, -92, 187, -61,
	153, -283, -229, -58, -262, 306, -162, -103, -192, -192,
	-120, 294, 187, 149, -192, 332, 334, -272, 7, -189,
	-188, 7, -161, -160, 115, 175, 334, -66, 333, -189,
	26, 26, -162, -173, 334, -162, -162, 334, -162, 332,
	-162, 5, -162, 334, 334, 334, -267, -66, -162, 334,
	334, 334, -168, 117, 91, 183, 333, -162, 334, 334,
	337, 334, 334, 334, -262, -152, -66, -226, -66, 107,
	129, 179, 150, 333, -163, -74, -151, -280, 67, 262,
	-191, -51, -226, -51, 334, -103, 334, 334, 179, 179,
	-162, -201, -55, -55, 276, 276, 276, 276, -165, -72,
	-66, -41, -40, 5, 92, -93, 64, -113, -46, 333,
	198, 334, -92, 334, 334, -28, 334, -74, -283, -229,
	-59, -263, -264, -66, -120, 333, -162, -192, -159, 334,
	337, -188, 332, 337, 340, 318, -189, 333, -93, -187,
	-162, -162, 334, 334, -90, -261, 200, 334, -163, 117,
	333, -173, 334, -162, -244, -67, 177, -162, -68, 333,
	-85, 333, -73, -90, 215, -54, 56, -66, -66, 333,
	333, 333, 337, 334, -43, 318, 289, 178, 334, -66,
	-66, -151, 334, -85, -151, 333, -229, -60, 337, 30,
	-93, -189, 7, -160, -226, 331, -188, -93, 334, 334,
	-90, 44, -163, -173, 334, 334, 100, 334, -247, 166,
	-66, -93, -51, 334, -74, -49, 294, -226, -103, -103,
	-103, -40, 5, 245, -154, 333, -85, -151, -85, -92,
	-61, -264, -266, 334, -187, 7, 334, -268, 210, 233,
	-103, 334, 107, -245, -248, -246, 187, 118, 199, 250,
	334, 334, -88, -162, 334, 334, -90, -106, -93, -85,
	334, 332, 334, -269, -270, 36, 284, 71, -162, -269,
	-66, -246, 187, -248, 187, 289, 89, -247, 334, -154,
	334, -151, -270, 204, 113, 232, 204, 113, -249, 174,
	226, 47, 245, -249, -245, -56, 47, 226, -85, 26,
	20, 179, 86, -270,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 0, 0, 0, 0, 81, 82, 83, 84,
	85, 86, 0, 0, 443, 0, 0, 0, 0, 0,
	0, 0, 415, -2, 0, 160, 0, 359, 0, 359,
	359, 363, 0, 0, 445, 0, 325, 442, -2, 453,
	0, 0, 0, 451, 429, 0, 0, -2, 0, 0,
	0, 0, 0, 134, 0, 981, 910, 916, 917, 941,
	942, 943, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
	1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
	1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108,
	1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118,
	1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
	1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
	1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
	1149, 1150, 1151, 1152, 0, 0, 912, 981, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 0, 237, 955, 956, 957, 958, 959, 1153,
	1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163,
	1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173,
	1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183,
	1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193,
	1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203,
	1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213,
	1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223,
	1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233,
	1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243,
	1244, 1245, 1246, 1247, 124, 127, 128, 1034, 130, 0,
	137, 138, 139, 141, 142, 143, 144, 145, 146, 147,
	0, 352, 1059, 365, 155, 1011, 1064, 969, 1139, 1082,
	163, 168, 0, 1145, 171, 176, -2, 100, 202, 203,
	204, 205, 206, 0, 0, 0, 212, 239, 0, 0,
	0, 0, 0, 219, 0, 222, 226, 0, 0, 0,
	233, 0, 0, 367, 358, 367, 355, 356, 357, 360,
	0, 351, 150, 151, 152, 153, 0, 444, 154, 179,
	180, 181, 190, 191, 192, 193, 314, 0, 316, 200,
	201, 937, 0, 951, 952, 953, 954, 0, 0, 0,
	0, 0, 324, -2, 425, 426, -2, 0, 448, 448,
	448, 0, 0, 426, 0, 434, 1039, 437, 923, 435,
	0, 0, 450, 449, 0, 430, 530, 0, 479, 0,
	2, 0, 1123, 530, 0, 1123, 915, 0, 0, 1123,
	0, 0, 135, 136, 920, 918, 919, 0, 0, 0,
	0, 913, 889, 887, 888, 0, 0, 0, 0, 536,
	88, 1123, 56, 1123, 908, 56, 1123, 98, 56, 1123,
	96, 1123, 0, 119, 121, 1151, 0, 0, 0, 0,
	125, 0, 129, 131, 0, 0, 0, 364, 156, 1112,
	158, 0, 0, 162, 368, 370, 371, 372, 0, 0,
	0, 0, 0, 0, 0, 172, 173, 174, 101, 0,
	0, 207, 65, 66, 0, 220, 223, 0, 241, 0,
	0, 0, 0, 0, 0, 221, 224, 0, 227, 0,
	229, 230, 0, 0, 0, 0, 353, 366, 354, 0,
	362, 56, 534, 315, 939, 938, 297, 1123, 441, 297,
	945, 441, 1123, -2, 0, 421, 460, 461, 0, 0,
	0, 0, 446, 447, 0, 0, 0, 417, 418, 0,
	436, 0, 0, 482, 900, 904, 905, 634, 0, 0,
	0, 0, 0, 0, 726, 728, 1117, 1139, 0, 730,
	731, 0, 733, 735, 736, 0, 739, 740, 880, 912,
	926, 927, 928, 929, 0, 0, 932, 0, 934, 935,
	936, 780, 749, -2, -2, 924, 566, 567, 568, 569,
	-2, 1153, 753, 755, 757, 758, 759, 760, 0, 1101,
	1118, 1119, 1135, 1136, 1144, 1148, 1149, 1123, 1132, 1124,
	1113, 1121, 1130, 986, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 950, 596, 597, 602, 603,
	605, 482, 480, 531, 532, 0, 0, 897, 895, 896,
	33, 348, 35, 0, 348, 348, 0, 0, 0, 0,
	246, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	521, 911, 0, 885, 886, 521, 67, 78, 0, 0,
	906, 890, 540, 0, 392, 0, 0, 537, 0, 0,
	90, 0, 54, 55, 0, 92, 0, 0, 94, 0,
	0, 443, 0, 0, 1123, 0, 443, 0, 838, 548,
	549, 550, 551, 552, 631, 555, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 573, 574, 575, 576,
	577, 578, 579, 593, 0, 572, 572, 572, 585, 586,
	594, 595, 600, 601, 612, 613, 615, 617, 611, 611,
	611, 608, 609, 0, 836, 0, 140, 0, 0, 159,
	0, 0, 0, 0, 373, 187, 188, 189, 375, 376,
	164, 166, 177, 165, 167, 169, 170, 194, 195, 196,
	197, 198, 199, 0, 0, 102, 210, 208, 209, 211,
	213, 0, 238, 214, 215, 216, 217, 218, 225, 228,
	231, 232, 0, 0, 0, 361, 317, 0, 255, 0,
	0, 320, 440, 0, 0, 0, 1123, 944, 380, 0,
	424, 458, 459, 462, 466, 467, 470, 473, 474, 464,
	634, 431, 432, 433, 454, 455, 335, 438, 0, 0,
	540, 0, 0, 0, 0, 0, 0, 815, 816, 817,
	818, 819, 820, 823, 824, 821, 822, 825, 826, 827,
	0, 0, 0, 828, 829, 830, 0, 0, 832, 0,
	834, 0, 0, 0, 0, 0, 0, 894, 0, 0,
	0, 903, 831, 639, 640, 641, 663, 664, 0, 727,
	891, 884, 729, 0, -2, 836, 0, 732, 737, 738,
	0, 0, 879, -2, 0, 931, 0, 631, 782, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 859, 865,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 599,
	610, 607, 606, 583, 0, 582, 580, 0, 584, 0,
	0, 0, 540, 0, 0, 899, 0, 0, 0, 0,
	347, 37, 1123, 0, 58, 0, 0, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 244,
	0, 0, 245, 0, 0, 0, 914, 0, 0, 0,
	70, 0, 921, 77, 0, 0, 0, 0, 404, 0,
	404, 394, 0, 0, 0, 404, 407, 408, 410, 411,
	0, 0, 538, 89, 909, 56, 99, 56, 56, 97,
	105, 120, 0, 122, 123, 0, 541, 543, 553, 0,
	618, 619, 620, 621, 622, 623, 632, 126, 0, 0,
	0, 0, 161, 369, 374, 0, 184, 0, 186, 0,
	103, 240, 148, 234, 235, 521, 535, 0, 0, 254,
	920, 256, 258, 259, 260, 261, 945, 0, 945, 0,
	0, 318, 0, 0, 0, 0, 382, 388, 0, 0,
	468, 0, 0, 465, 471, 472, 0, 457, 333, 334,
	443, 922, 476, 901, 521, 483, 443, 493, 530, 507,
	498, 0, 635, 544, 545, 587, 588, 589, 590, 591,
	636, 637, 0, 642, 643, 644, 645, 646, 647, 648,
	649, 650, 651, -2, -2, -2, 655, 656, 657, -2,
	-2, -2, 661, 662, -2, 833, 835, 0, 894, 0,
	-2, 0, -2, -2, -2, -2, 675, 0, 677, 680,
	682, 684, 0, 0, 0, 0, 893, 694, 871, 0,
	0, 812, 813, 814, 902, 679, 0, 0, 892, 883,
	0, 0, -2, 734, 0, 0, 0, 842, 843, 878,
	874, 0, 741, 453, 0, 0, 0, 0, 0, 940,
	790, 0, 0, 0, 754, 756, 0, 0, 0, 0,
	846, -2, -2, -2, -2, -2, -2, -2, 0, 0,
	836, 856, 0, 0, 697, 0, 0, 0, 0, 1139,
	0, 836, 864, 0, 0, 0, 0, 0, 836, 0,
	870, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 476, 533, 898, 36, 337, 0, 0,
	0, 39, 1123, 47, 0, 269, 0, 0, 0, 0,
	0, 350, 48, 1123, 56, 1123, 56, 49, 34, 348,
	242, 0, 243, 0, 341, 0, 336, 339, 0, 77,
	0, 0, 64, 0, 68, 79, 0, 907, 87, 0,
	539, 389, 404, 0, 0, 396, 393, 391, 540, 0,
	0, 0, 0, 91, 93, 95, 0, 839, 0, 0,
	0, 0, 0, 0, 0, 0, 837, 132, 133, 157,
	182, 183, 185, 178, 0, 236, 263, 296, 0, 0,
	945, 0, 252, 297, 319, 321, 0, 0, 384, 388,
	0, 387, 441, 0, 0, 456, 0, 478, 0, 481,
	0, 0, 0, 0, 0, 527, 527, 527, 525, 501,
	0, 507, 0, 0, 519, 0, -2, 498, 0, 0,
	-2, -2, 0, 0, 0, 695, -2, 676, 678, 681,
	683, 685, 0, 0, 0, 0, 0, 0, 0, 696,
	0, 0, 881, 884, -2, 837, 840, 841, 0, 0,
	875, 0, 0, 0, 0, 452, 453, 453, 453, 747,
	0, 748, 0, 0, 0, 0, 0, 0, 763, 0,
	764, 765, 0, 0, 766, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 700, 701,
	702, 0, 0, 767, 862, 863, 0, 0, 0, 0,
	0, 0, 772, 0, 869, 0, 0, 0, 776, 777,
	778, 0, 570, 0, 592, 614, 616, 604, 478, 0,
	0, 0, 0, 57, 267, 286, 0, 0, 326, 332,
	332, 0, 750, 751, 0, 0, 0, 41, 0, 0,
	0, 0, 45, 0, 51, 0, 0, 0, 0, 0,
	0, 0, 63, 0, 0, 0, 80, 402, 403, 390,
	401, 0, 404, 409, 406, 412, 0, 546, 0, 0,
	554, 624, 625, 626, 627, 628, 629, 630, 0, 149,
	250, 0, 257, 0, 0, 0, 255, 0, 0, 0,
	386, 388, 0, 379, 380, 463, 469, 439, 784, 0,
	0, 484, 0, 0, 0, 0, 0, 522, 526, 523,
	524, 0, 0, 507, 519, 490, 0, 0, 0, 497,
	518, 0, 517, 506, -2, 638, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 872, 0, 807, 0, 0,
	883, -2, 844, 873, 877, 0, 742, 0, 0, 0,
	0, 933, 788, 789, 793, 0, 0, 752, 0, 0,
	845, 855, 857, 698, 699, 703, 704, 705, 706, 707,
	708, 709, 710, 711, 712, -2, -2, -2, 716, 717,
	718, -2, -2, -2, 0, 0, 0, 858, 0, 0,
	810, 860, 861, 866, 867, 0, 769, 770, 771, 868,
	0, 0, 0, 598, 0, 784, 343, 345, 38, 0,
	268, 0, 271, 0, 0, 0, 0, 277, 278, 0,
	0, 0, 0, 288, 295, 0, 335, 925, 0, 335,
	0, 0, 0, 0, 0, 53, 0, 0, 349, 0,
	56, 56, 338, 0, 0, 0, 0, 342, 340, 69,
	0, 0, 0, 0, 0, 395, 405, 0, 547, 542,
	633, 0, 0, 0, 0, 0, 0, 0, 0, 377,
	388, 0, 381, 382, 427, 0, 477, 475, 509, 0,
	511, 0, 0, 0, 513, 493, 502, 0, 504, 519,
	495, 0, 0, 488, 0, 487, 507, 515, 0, 0,
	0, 0, -2, 0, 688, -2, -2, 806, 837, 882,
	876, 930, 453, 743, 745, 746, 795, 792, 0, 779,
	761, 762, 854, 0, 0, 0, 0, 837, 809, 768,
	0, 774, 775, 571, 428, 40, 0, 272, 273, 945,
	0, 276, 279, 0, 281, 947, 263, 0, 292, 293,
	327, 328, 331, 329, 332, 453, 290, 0, 42, 43,
	52, 60, 44, 50, 0, 0, 0, 0, 520, 0,
	0, 0, 74, 72, 0, 0, 0, 413, 414, 0,
	0, 295, 0, 285, 263, 253, 295, 0, 0, 383,
	384, 783, 785, 0, 510, 0, 529, 512, 507, 503,
	0, 500, 491, 0, 492, 0, 519, 0, 0, 499,
	-2, -2, 689, 808, 0, 453, 0, 781, -2, 0,
	0, 0, 811, 0, 270, 274, 0, 0, 301, 0,
	289, 0, 335, 0, 0, 62, 0, 344, 346, 0,
	0, 0, 0, 76, 73, 0, 0, 398, 540, 400,
	0, 263, 295, 251, 263, 0, 385, 386, 0, 0,
	0, 0, 505, 489, 485, 0, 496, 0, 516, 744,
	798, 0, -2, 0, 724, 773, 0, 280, 306, 0,
	0, 0, 330, 742, 297, 46, 0, 59, 0, 0,
	453, 75, 71, 0, 399, 0, 283, 263, 322, 0,
	378, 786, 787, 528, 494, 0, 514, 0, 0, 0,
	794, 725, 0, 282, 302, 303, 0, 298, 299, 300,
	946, 294, 301, 61, 247, 249, 0, 540, 0, 284,
	295, 486, 791, 796, 799, -2, 1085, 978, 0, 797,
	275, 304, 0, 305, 0, 0, 0, 306, 0, 397,
	266, 263, 0, 801, 802, 803, 804, 805, 307, 0,
	310, 311, 0, 308, 291, 262, 264, 265, 323, 0,
	309, 312, 313, 800,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 322, 3, 328, 323, 3,
	333, 334, 326, 324, 337, 325, 335, 327, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 341, 336,
	316, 318, 317, 3, 338, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 331, 3, 332, 329, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 339, 321, 340, 319,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 320, 57659, 330,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:791
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:797
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:803
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:829
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 32:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:844
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:850
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:854
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:860
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:864
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:876
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:881
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:886
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:891
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:900
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:923
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:933
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = nil
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.union.val = DropCascade
		}
	case 55:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:976
		{
			sqlVAL.union.val = DropRestrict
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:980
		{
			sqlVAL.union.val = DropDefault
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 58:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:990
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:995
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:996
		{
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:999
		{
			return unimplemented(sqllex, "alter using")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1000
		{
		}
	case 63:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 67:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 70:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1038
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 72:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.str = ""
		}
	case 73:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 76:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 77:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1073
		{
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1108
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1132
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1136
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1213
		{ /* SKIP DOC */
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1231
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1245
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1391
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1395
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1401
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1408
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1420
		{
			return unimplemented(sqllex, "set local")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1434
		{ /* SKIP DOC */
		}
	case 161:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[2].union.transactionModes()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1472
		{
			return unimplemented(sqllex, "set from current")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1475
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1484
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1488
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1492
		{
		}
	case 175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1492
		{
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = Low
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = Normal
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = High
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1612
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "client_encoding"}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1616
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1708
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1712
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1716
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1720
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1736
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1740
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1744
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1756
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 239:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1787
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1791
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1797
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1801
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1805
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1809
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1880
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1884
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 266:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1888
		{
			sqlVAL.union.val = DropDefault
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1894
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2099
		{
			return unimplemented(sqllex, "match full")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			return unimplemented(sqllex, "match partial")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2101
		{
			return unimplemented(sqllex, "match simple")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2102
		{
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2108
		{
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2109
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2112
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2115
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2118
		{
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2121
		{
			return unimplemented(sqllex, "no action")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2124
		{
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2125
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2126
		{
			return unimplemented(sqllex, "action set null")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2127
		{
			return unimplemented(sqllex, "action set default")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2159
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = true
		}
	case 325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = false
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2234
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2235
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2238
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2239
		{
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = Ascending
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = Descending
		}
	case 335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 336:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2293
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2294
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = true
		}
	case 348:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = false
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2307
		{
		}
	case 350:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2308
		{
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2341
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2350
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2351
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.str = ""
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2359
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.str = ""
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2397
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = ReadOnly
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = ReadWrite
		}
	case 377:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.str = ""
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.str = ""
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2486
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.str = ""
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.str = ""
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2505
		{
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2506
		{
		}
	case 389:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 390:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2546
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2570
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2574
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2582
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 404:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 405:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2604
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2605
		{
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2683
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2832
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2833
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2834
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2837
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2838
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2841
		{
			return unimplemented(sqllex, "cte")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2844
		{
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2845
		{
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2848
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2849
		{
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2852
		{
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2853
		{
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = true
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = false
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = false
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = true
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2876
		{
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2877
		{
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2915
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2935
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2981
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2987
		{
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2988
		{
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2991
		{
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2992
		{
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3046
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.union.val = &From{}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3082
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3100
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3127
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 494:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3144
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3196
		{
			sqlVAL.union.val = nil
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3202
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = true
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = false
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.str = astFullJoin
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.str = astLeftJoin
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.str = astRightJoin
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.str = astInnerJoin
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3319
		{
		}
	case 527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3320
		{
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 540:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3406
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3419
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3420
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3434
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3443
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3506
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3515
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = nil
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3564
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3632
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3660
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3692
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3718
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3731
		{
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3732
		{
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = year
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = month
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = day
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = hour
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = minute
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = month
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = hour
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = minute
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = minute
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = nil
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = second
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3827
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3862
		{
			return unimplemented(sqllex, "at tz")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4030
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4096
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4269
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4322
		{
			return unimplemented(sqllex, "variadic")
		}
	case 744:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4323
		{
			return unimplemented(sqllex, "variadic")
		}
	case 745:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4346
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4362
		{
			return unimplemented(sqllex, "func_application")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4363
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4367
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4384
		{
			return unimplemented(sqllex, "current role")
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4385
		{
			return unimplemented(sqllex, "current user")
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4386
		{
			return unimplemented(sqllex, "session user")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4387
		{
			return unimplemented(sqllex, "user")
		}
	case 761:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4416
		{
			return unimplemented(sqllex, "treat")
		}
	case 769:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4460
		{
			return unimplemented(sqllex, "within group")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4461
		{
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = Window(nil)
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4496
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.str = ""
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4558
		{
			return unimplemented(sqllex, "frame range")
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4559
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4560
		{
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4563
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 800:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4564
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4570
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4571
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4572
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4573
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4574
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4593
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4599
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = Any
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = Some
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = All
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = Plus
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = Minus
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = Mult
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = Div
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = FloorDiv
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4633
		{
			sqlVAL.union.val = Mod
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.union.val = Bitand
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = Bitor
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = Pow
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.union.val = Bitxor
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4638
		{
			sqlVAL.union.val = LT
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = GT
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = EQ
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = LE
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4642
		{
			sqlVAL.union.val = GE
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = NE
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = Like
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = NotLike
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = ILike
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = NotILike
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4681
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 854:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4781
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4785
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4815
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 876:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 880:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4938
		{
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4939
		{
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5012
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5053
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5057
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5078
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5082
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 923:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5101
		{
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5137
		{
			return unimplemented(sqllex, "func const")
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5139
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5143
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5146
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5148
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5152
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5156
		{
			sqlVAL.union.val = DNull
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5173
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5208
		{
			sqlVAL.str = ""
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5214
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 947:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5218
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
