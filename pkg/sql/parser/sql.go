// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const GRANT = 57467
const GRANTS = 57468
const GREATEST = 57469
const GROUP = 57470
const GROUPING = 57471
const HAVING = 57472
const HELP = 57473
const HIGH = 57474
const HOUR = 57475
const IMPORT = 57476
const INCREMENTAL = 57477
const IF = 57478
const IFNULL = 57479
const ILIKE = 57480
const IN = 57481
const INTERLEAVE = 57482
const INDEX = 57483
const INDEXES = 57484
const INITIALLY = 57485
const INNER = 57486
const INSERT = 57487
const INT = 57488
const INT2VECTOR = 57489
const INT2 = 57490
const INT4 = 57491
const INT8 = 57492
const INT64 = 57493
const INTEGER = 57494
const INTERSECT = 57495
const INTERVAL = 57496
const INTO = 57497
const IS = 57498
const ISOLATION = 57499
const JOB = 57500
const JOBS = 57501
const JOIN = 57502
const KEY = 57503
const KEYS = 57504
const KV = 57505
const LATERAL = 57506
const LC_CTYPE = 57507
const LC_COLLATE = 57508
const LEADING = 57509
const LEAST = 57510
const LEFT = 57511
const LEVEL = 57512
const LIKE = 57513
const LIMIT = 57514
const LOCAL = 57515
const LOCALTIME = 57516
const LOCALTIMESTAMP = 57517
const LOW = 57518
const LSHIFT = 57519
const MATCH = 57520
const MINUTE = 57521
const MONTH = 57522
const NAN = 57523
const NAME = 57524
const NAMES = 57525
const NATURAL = 57526
const NEXT = 57527
const NO = 57528
const NO_INDEX_JOIN = 57529
const NORMAL = 57530
const NOT = 57531
const NOTHING = 57532
const NULL = 57533
const NULLIF = 57534
const NULLS = 57535
const NUMERIC = 57536
const OF = 57537
const OFF = 57538
const OFFSET = 57539
const OID = 57540
const ON = 57541
const ONLY = 57542
const OPTIONS = 57543
const OR = 57544
const ORDER = 57545
const ORDINALITY = 57546
const OUT = 57547
const OUTER = 57548
const OVER = 57549
const OVERLAPS = 57550
const OVERLAY = 57551
const PARENT = 57552
const PARTIAL = 57553
const PARTITION = 57554
const PASSWORD = 57555
const PAUSE = 57556
const PLACING = 57557
const PLANS = 57558
const POSITION = 57559
const PRECEDING = 57560
const PRECISION = 57561
const PREPARE = 57562
const PRIMARY = 57563
const PRIORITY = 57564
const QUERIES = 57565
const QUERY = 57566
const RANGE = 57567
const READ = 57568
const REAL = 57569
const RECURSIVE = 57570
const REF = 57571
const REFERENCES = 57572
const REGCLASS = 57573
const REGPROC = 57574
const REGPROCEDURE = 57575
const REGNAMESPACE = 57576
const REGTYPE = 57577
const RENAME = 57578
const REPEATABLE = 57579
const RELEASE = 57580
const RESET = 57581
const RESTORE = 57582
const RESTRICT = 57583
const RESUME = 57584
const RETURNING = 57585
const REVOKE = 57586
const RIGHT = 57587
const ROLLBACK = 57588
const ROLLUP = 57589
const ROW = 57590
const ROWS = 57591
const RSHIFT = 57592
const SAVEPOINT = 57593
const SCATTER = 57594
const SEARCH = 57595
const SECOND = 57596
const SELECT = 57597
const SEQUENCES = 57598
const SERIAL = 57599
const SERIALIZABLE = 57600
const SESSION = 57601
const SESSIONS = 57602
const SESSION_USER = 57603
const SET = 57604
const SETTING = 57605
const SETTINGS = 57606
const SHOW = 57607
const SIMILAR = 57608
const SIMPLE = 57609
const SMALLINT = 57610
const SMALLSERIAL = 57611
const SNAPSHOT = 57612
const SOME = 57613
const SPLIT = 57614
const SQL = 57615
const START = 57616
const STATUS = 57617
const STDIN = 57618
const STRICT = 57619
const STRING = 57620
const STORE = 57621
const STORING = 57622
const SUBSTRING = 57623
const SYMMETRIC = 57624
const SYSTEM = 57625
const TABLE = 57626
const TABLES = 57627
const TEMP = 57628
const TEMPLATE = 57629
const TEMPORARY = 57630
const TESTING_RANGES = 57631
const TESTING_RELOCATE = 57632
const TEXT = 57633
const THEN = 57634
const TIME = 57635
const TIMESTAMP = 57636
const TIMESTAMPTZ = 57637
const TO = 57638
const TRAILING = 57639
const TRACE = 57640
const TRANSACTION = 57641
const TREAT = 57642
const TRIM = 57643
const TRUE = 57644
const TRUNCATE = 57645
const TYPE = 57646
const UNBOUNDED = 57647
const UNCOMMITTED = 57648
const UNION = 57649
const UNIQUE = 57650
const UNKNOWN = 57651
const UPDATE = 57652
const UPSERT = 57653
const USE = 57654
const USER = 57655
const USERS = 57656
const USING = 57657
const UUID = 57658
const VALID = 57659
const VALIDATE = 57660
const VALUE = 57661
const VALUES = 57662
const VARCHAR = 57663
const VARIADIC = 57664
const VIEW = 57665
const VARYING = 57666
const WHEN = 57667
const WHERE = 57668
const WINDOW = 57669
const WITH = 57670
const WITHIN = 57671
const WITHOUT = 57672
const WRITE = 57673
const YEAR = 57674
const ZONE = 57675
const NOT_LA = 57676
const WITH_LA = 57677
const AS_LA = 57678
const POSTFIXOP = 57679
const UMINUS = 57680

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5904

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 34,
	357, 34,
	-2, 510,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	1, 482,
	199, 482,
	243, 482,
	353, 482,
	355, 482,
	357, 482,
	-2, 492,
	-1, 114,
	1, 485,
	199, 485,
	243, 485,
	353, 485,
	355, 485,
	357, 485,
	-2, 491,
	-1, 132,
	1, 34,
	357, 34,
	-2, 510,
	-1, 517,
	123, 1093,
	296, 1093,
	339, 1093,
	356, 1093,
	-2, 0,
	-1, 528,
	1, 219,
	357, 219,
	-2, 1098,
	-1, 540,
	112, 520,
	172, 520,
	197, 520,
	-2, 488,
	-1, 548,
	112, 519,
	172, 519,
	197, 519,
	-2, 486,
	-1, 702,
	354, 1023,
	-2, 1016,
	-1, 703,
	354, 1024,
	-2, 1017,
	-1, 709,
	5, 690,
	354, 690,
	-2, 1224,
	-1, 734,
	5, 649,
	-2, 1194,
	-1, 735,
	5, 684,
	354, 684,
	-2, 1196,
	-1, 736,
	5, 659,
	-2, 1197,
	-1, 737,
	5, 658,
	-2, 1198,
	-1, 738,
	5, 684,
	354, 684,
	-2, 1201,
	-1, 739,
	5, 684,
	354, 684,
	-2, 1202,
	-1, 740,
	5, 685,
	-2, 1205,
	-1, 741,
	5, 641,
	-2, 1206,
	-1, 742,
	5, 641,
	-2, 1207,
	-1, 743,
	5, 666,
	-2, 1211,
	-1, 744,
	5, 651,
	-2, 1212,
	-1, 745,
	5, 652,
	-2, 1213,
	-1, 746,
	5, 642,
	-2, 1218,
	-1, 747,
	5, 643,
	-2, 1219,
	-1, 748,
	5, 644,
	-2, 1220,
	-1, 749,
	5, 645,
	-2, 1221,
	-1, 750,
	5, 646,
	-2, 1222,
	-1, 751,
	5, 647,
	-2, 1223,
	-1, 752,
	5, 641,
	-2, 1228,
	-1, 753,
	5, 650,
	-2, 1233,
	-1, 754,
	5, 648,
	-2, 1236,
	-1, 755,
	5, 682,
	354, 682,
	-2, 1238,
	-1, 756,
	5, 686,
	-2, 1241,
	-1, 757,
	5, 688,
	-2, 1242,
	-1, 758,
	5, 681,
	354, 681,
	-2, 1247,
	-1, 802,
	213, 508,
	-2, 382,
	-1, 807,
	112, 519,
	172, 519,
	197, 519,
	-2, 489,
	-1, 910,
	103, 492,
	112, 492,
	153, 492,
	172, 492,
	197, 492,
	203, 492,
	307, 492,
	-2, 576,
	-1, 989,
	103, 492,
	112, 492,
	153, 492,
	172, 492,
	197, 492,
	203, 492,
	307, 492,
	-2, 809,
	-1, 998,
	354, 1000,
	-2, 988,
	-1, 1243,
	1, 577,
	70, 577,
	103, 577,
	112, 577,
	124, 577,
	128, 577,
	130, 577,
	144, 577,
	153, 577,
	160, 577,
	169, 577,
	172, 577,
	184, 577,
	197, 577,
	199, 577,
	203, 577,
	243, 577,
	245, 577,
	307, 577,
	315, 577,
	326, 577,
	327, 577,
	336, 577,
	353, 577,
	355, 577,
	357, 577,
	358, 577,
	-2, 576,
	-1, 1308,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 725,
	-1, 1309,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 726,
	-1, 1310,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 727,
	-1, 1314,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 731,
	-1, 1315,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 732,
	-1, 1316,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 733,
	-1, 1319,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 738,
	-1, 1325,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 740,
	-1, 1327,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 744,
	-1, 1328,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 745,
	-1, 1329,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 746,
	-1, 1330,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 747,
	-1, 1356,
	208, 882,
	-2, 885,
	-1, 1393,
	123, 922,
	354, 1023,
	-2, 1016,
	-1, 1394,
	123, 923,
	-2, 1190,
	-1, 1395,
	123, 924,
	-2, 1097,
	-1, 1396,
	123, 925,
	-2, 1060,
	-1, 1397,
	123, 926,
	-2, 1077,
	-1, 1398,
	123, 927,
	-2, 1096,
	-1, 1399,
	123, 928,
	-2, 1148,
	-1, 1593,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 739,
	-1, 1594,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 741,
	-1, 1599,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 742,
	-1, 1617,
	208, 881,
	-2, 884,
	-1, 1827,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 743,
	-1, 1832,
	156, 0,
	-2, 759,
	-1, 1842,
	208, 883,
	-2, 886,
	-1, 1884,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 786,
	-1, 1885,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 787,
	-1, 1886,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 788,
	-1, 1890,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 792,
	-1, 1891,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 793,
	-1, 1892,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 794,
	-1, 2008,
	156, 0,
	-2, 760,
	-1, 2011,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 763,
	-1, 2012,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 765,
	-1, 2118,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 764,
	-1, 2119,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 766,
	-1, 2126,
	156, 0,
	-2, 795,
	-1, 2182,
	156, 0,
	-2, 796,
	-1, 2257,
	36, 0,
	138, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 1193,
}

const sqlPrivate = 57344

const sqlLast = 32108

var sqlAct = [...]int{

	703, 1918, 2243, 2211, 1090, 2289, 2105, 2256, 2244, 2255,
	2245, 1126, 1259, 1711, 2133, 549, 2155, 693, 2048, 1861,
	1039, 1924, 67, 1458, 1251, 1133, 1981, 679, 1238, 1728,
	645, 397, 841, 1996, 1089, 1814, 1730, 2073, 1274, 141,
	908, 623, 141, 1467, 701, 1457, 1683, 1549, 700, 141,
	904, 1813, 1563, 1129, 1955, 1682, 1287, 141, 994, 1628,
	399, 1379, 1283, 141, 141, 1530, 1354, 141, 1806, 1273,
	141, 1486, 891, 1500, 884, 1771, 1536, 141, 1040, 1529,
	373, 1260, 1239, 1191, 1164, 381, 25, 1482, 666, 1193,
	1121, 556, 112, 1245, 1115, 781, 1364, 673, 1342, 1491,
	1419, 1339, 885, 922, 1390, 1277, 814, 371, 816, 1373,
	780, 567, 142, 809, 985, 568, 672, 1025, 573, 1459,
	1029, 659, 527, 1253, 1226, 895, 141, 141, 615, 627,
	823, 114, 141, 1213, 505, 525, 141, 141, 822, 554,
	559, 133, 868, 824, 115, 1113, 695, 523, 1997, 112,
	564, 653, 389, 926, 630, 137, 613, 509, 867, 521,
	637, 828, 1785, 1616, 1123, 1786, 1252, 553, 553, 1123,
	124, 124, 400, 905, 1376, 548, 1123, 2285, 2266, 1246,
	917, 1267, 759, 2265, 1256, 1740, 1267, 940, 941, 2263,
	2252, 2224, 1995, 917, 1437, 1267, 2208, 625, 1574, 1444,
	2207, 1774, 1575, 1444, 508, 502, 2187, 127, 2184, 2186,
	943, 1437, 557, 1215, 1147, 2202, 111, 111, 25, 2173,
	2162, 1377, 1995, 917, 112, 2138, 1620, 1619, 1995, 696,
	574, 1621, 1267, 1444, 942, 761, 131, 2120, 1653, 1654,
	1437, 1774, 401, 1214, 541, 113, 113, 2117, 2116, 1246,
	917, 1995, 56, 56, 57, 57, 1498, 540, 940, 941,
	1741, 960, 961, 962, 970, 971, 972, 1378, 1375, 1897,
	2115, 1444, 130, 917, 963, 1839, 576, 917, 59, 59,
	125, 943, 2103, 617, 974, 1995, 2081, 126, 2078, 917,
	2070, 917, 1582, 1267, 2069, 948, 2035, 1267, 2013, 1267,
	575, 1267, 1485, 1454, 2010, 942, 116, 1437, 1097, 1994,
	1968, 957, 1995, 917, 1836, 1805, 1800, 1267, 1250, 1250,
	1358, 1781, 1267, 1627, 1782, 1721, 1700, 1698, 917, 1701,
	1267, 1697, 1696, 1617, 1267, 1267, 1267, 1581, 1552, 880,
	1582, 1267, 1380, 635, 663, 622, 1659, 940, 941, 1526,
	127, 1998, 917, 1446, 958, 1436, 1267, 1124, 1437, 127,
	141, 1266, 1124, 641, 1267, 141, 948, 132, 1249, 1124,
	943, 1250, 1220, 573, 934, 1219, 909, 935, 1119, 131,
	795, 2267, 2254, 2250, 1544, 2218, 967, 975, 131, 2179,
	2136, 940, 941, 2040, 942, 554, 835, 970, 971, 972,
	2036, 2028, 127, 127, 973, 1669, 1493, 1180, 2027, 2026,
	570, 2022, 118, 118, 943, 130, 2021, 974, 2020, 965,
	1374, 2019, 1954, 125, 130, 958, 1973, 959, 1916, 1912,
	126, 131, 131, 1907, 1350, 1906, 1905, 1574, 942, 1847,
	1720, 1705, 1442, 1585, 957, 1002, 1702, 1690, 1214, 1255,
	964, 1681, 1652, 1649, 1648, 948, 1646, 1633, 116, 938,
	1632, 940, 941, 1556, 1387, 1386, 1385, 130, 130, 835,
	1243, 995, 834, 116, 1145, 125, 125, 642, 1670, 1140,
	907, 1132, 126, 126, 943, 574, 1122, 906, 660, 1863,
	2227, 2201, 2200, 2193, 654, 2175, 1653, 1654, 959, 948,
	141, 116, 116, 2171, 2159, 644, 2128, 141, 942, 2100,
	2092, 2091, 2090, 2042, 968, 2033, 2001, 1993, 1922, 967,
	975, 141, 944, 945, 946, 947, 949, 950, 1920, 573,
	1831, 141, 1825, 1824, 1821, 141, 141, 141, 1811, 141,
	1351, 1789, 1777, 1764, 141, 141, 141, 141, 141, 1762,
	1586, 1680, 965, 1653, 1654, 575, 808, 1642, 958, 1641,
	1638, 564, 1613, 1608, 1344, 1589, 1709, 1554, 1525, 948,
	1030, 820, 1663, 1655, 1656, 1657, 1658, 1660, 1661, 573,
	1033, 1972, 966, 840, 1429, 954, 955, 956, 969, 1384,
	953, 951, 952, 944, 945, 946, 947, 949, 950, 1231,
	807, 940, 941, 1125, 1659, 1037, 2037, 1023, 1022, 141,
	141, 141, 141, 141, 1021, 141, 1020, 1019, 1018, 1017,
	1016, 1015, 664, 791, 943, 1014, 1013, 1012, 1011, 1010,
	1009, 959, 141, 141, 1008, 573, 141, 1007, 1006, 915,
	999, 574, 399, 988, 141, 116, 624, 968, 942, 883,
	641, 141, 141, 141, 554, 141, 1586, 800, 812, 803,
	797, 1659, 775, 141, 889, 779, 811, 811, 771, 766,
	657, 2158, 2041, 918, 2015, 924, 1915, 1784, 1780, 1232,
	776, 1439, 944, 945, 946, 947, 949, 950, 541, 907,
	995, 574, 1707, 986, 888, 1653, 1654, 912, 1653, 1654,
	554, 540, 1201, 790, 2189, 1731, 1976, 788, 643, 1787,
	1576, 575, 1246, 831, 832, 966, 1704, 909, 112, 875,
	1669, 969, 1199, 953, 951, 952, 944, 945, 946, 947,
	949, 950, 1542, 1703, 903, 839, 1035, 1592, 787, 872,
	1200, 1036, 878, 871, 939, 772, 1103, 574, 571, 1481,
	789, 1004, 1712, 1130, 400, 2074, 1252, 1480, 1653, 1654,
	1864, 575, 869, 1365, 1570, 1026, 1938, 1624, 573, 863,
	141, 881, 2270, 1107, 1106, 141, 570, 565, 2269, 2232,
	654, 546, 1271, 2277, 2161, 2276, 911, 1717, 361, 573,
	573, 916, 2063, 1670, 1001, 1447, 399, 907, 946, 947,
	949, 950, 925, 1659, 936, 141, 928, 608, 864, 602,
	607, 1668, 603, 1502, 858, 1131, 937, 575, 2153, 1949,
	2152, 564, 564, 2151, 401, 1653, 1654, 1120, 1671, 1672,
	1673, 1655, 1656, 1657, 1658, 1660, 1661, 998, 2150, 545,
	611, 362, 538, 1194, 141, 1195, 1953, 1952, 141, 1935,
	141, 141, 141, 141, 141, 141, 1027, 1028, 1110, 1136,
	141, 1934, 1637, 1031, 141, 141, 1659, 1636, 1635, 1502,
	1634, 141, 1595, 1034, 1523, 1501, 788, 1104, 1668, 1522,
	574, 141, 1520, 1326, 141, 1664, 1662, 1663, 1655, 1656,
	1657, 1658, 1660, 1661, 1270, 870, 634, 141, 610, 1970,
	1139, 574, 574, 1142, 2160, 1144, 399, 1212, 400, 141,
	1093, 1091, 1708, 1433, 1432, 141, 1159, 1297, 141, 789,
	1196, 1096, 1092, 1083, 1468, 1669, 2288, 2287, 1109, 1189,
	141, 1188, 141, 1659, 1108, 1116, 573, 1234, 531, 499,
	141, 950, 1111, 399, 1794, 1233, 1989, 1138, 1341, 112,
	575, 1341, 2302, 2301, 2107, 1151, 1795, 1560, 920, 1205,
	541, 1170, 1223, 541, 541, 1181, 1168, 1150, 1940, 1376,
	774, 575, 575, 1160, 1296, 1204, 1161, 1162, 401, 1348,
	2205, 1990, 544, 1171, 1346, 1380, 1175, 1176, 1177, 1178,
	1179, 1174, 1669, 1365, 929, 1202, 1046, 2282, 1670, 1185,
	1186, 2276, 1077, 855, 1440, 1190, 364, 363, 1564, 1210,
	760, 547, 1254, 1203, 1254, 2178, 1377, 1112, 400, 1288,
	1295, 543, 1218, 1224, 1228, 1229, 112, 1483, 1484, 924,
	1769, 1716, 1657, 1658, 1660, 1661, 844, 2298, 1661, 1766,
	856, 609, 1268, 534, 1194, 902, 1195, 1194, 574, 1195,
	1947, 660, 1258, 2221, 1362, 400, 1857, 1269, 1760, 1272,
	1284, 124, 1378, 1375, 860, 1670, 1854, 539, 1123, 1208,
	1653, 1654, 535, 845, 1187, 1207, 843, 2222, 1653, 1654,
	612, 1985, 536, 1986, 1718, 2281, 1024, 1463, 401, 2135,
	1664, 1662, 1663, 1655, 1656, 1657, 1658, 1660, 1661, 1352,
	1349, 532, 2292, 1406, 1640, 1405, 1499, 111, 2124, 983,
	1227, 553, 1855, 1988, 571, 566, 784, 1400, 575, 1435,
	399, 1196, 1991, 141, 1196, 401, 141, 1242, 1286, 861,
	112, 1380, 1941, 141, 2246, 1917, 113, 1380, 1929, 2275,
	1197, 141, 141, 56, 141, 57, 141, 141, 399, 141,
	141, 1455, 1665, 1666, 1667, 365, 1441, 1664, 1662, 1663,
	1655, 1656, 1657, 1658, 1660, 1661, 2108, 533, 141, 59,
	1046, 1046, 688, 1477, 141, 552, 1077, 1077, 1659, 1475,
	1568, 785, 862, 1443, 2280, 786, 1659, 1380, 141, 141,
	141, 708, 1031, 2273, 1034, 141, 2047, 1465, 1597, 141,
	1987, 1340, 763, 1028, 1027, 827, 849, 141, 1448, 769,
	141, 138, 662, 1559, 356, 1374, 141, 399, 2145, 2144,
	2098, 358, 141, 141, 1564, 551, 141, 1285, 1347, 370,
	2299, 141, 400, 1503, 141, 501, 138, 1669, 1527, 507,
	2290, 141, 507, 1532, 2168, 1669, 1937, 894, 1531, 529,
	2031, 141, 1456, 1474, 1473, 1471, 141, 1472, 141, 1192,
	400, 1124, 1546, 1470, 811, 141, 811, 1479, 1751, 1508,
	1510, 141, 573, 1545, 112, 553, 1580, 2059, 554, 1102,
	141, 1747, 141, 141, 1555, 762, 1515, 1534, 1535, 1518,
	1494, 1540, 1533, 127, 2247, 2291, 1893, 1496, 616, 616,
	1506, 898, 401, 118, 356, 1584, 1566, 1587, 138, 638,
	1670, 1572, 1466, 1541, 1507, 1521, 2293, 1528, 1670, 390,
	1450, 901, 131, 1100, 940, 941, 1137, 826, 1513, 400,
	401, 1452, 2305, 1127, 1550, 1101, 1853, 896, 1323, 1524,
	2212, 1197, 395, 1184, 1197, 1098, 899, 943, 391, 366,
	2032, 1925, 1453, 2099, 387, 2062, 1156, 1583, 130, 1569,
	826, 897, 2061, 2049, 1451, 1337, 125, 554, 1577, 1591,
	1579, 942, 1590, 126, 1539, 392, 1538, 2058, 1489, 550,
	1335, 2248, 1605, 1626, 574, 1222, 1221, 825, 503, 367,
	1894, 500, 116, 784, 652, 394, 1895, 1603, 551, 401,
	1551, 390, 651, 1662, 1663, 1655, 1656, 1657, 1658, 1660,
	1661, 705, 827, 1655, 1656, 1657, 1658, 1660, 1661, 368,
	825, 369, 900, 1598, 395, 1596, 804, 1157, 1406, 1406,
	391, 1919, 948, 554, 2304, 2043, 1558, 2249, 647, 2096,
	1321, 1324, 646, 1612, 134, 573, 141, 1956, 1772, 1713,
	1383, 1331, 2127, 2030, 575, 573, 1684, 392, 1830, 1332,
	1623, 1333, 2060, 141, 2097, 1338, 141, 1793, 1600, 3,
	141, 1647, 601, 1320, 385, 33, 1607, 394, 1601, 1561,
	384, 32, 1606, 380, 29, 383, 17, 564, 377, 13,
	141, 958, 1537, 379, 16, 1519, 1406, 1406, 1406, 1516,
	141, 141, 141, 1445, 1248, 393, 141, 866, 1046, 141,
	141, 141, 141, 141, 1077, 865, 1706, 1687, 1688, 1689,
	859, 141, 854, 141, 141, 853, 852, 851, 850, 847,
	767, 650, 648, 378, 14, 376, 12, 356, 1685, 1583,
	141, 382, 10, 1715, 1748, 1714, 141, 1722, 1182, 1719,
	1725, 375, 8, 1173, 1005, 141, 141, 574, 374, 4,
	396, 857, 1733, 1734, 959, 1735, 1736, 574, 1322, 1382,
	1738, 1792, 1334, 2242, 1783, 141, 141, 639, 1790, 1336,
	636, 640, 2209, 141, 2057, 1723, 141, 393, 1743, 1602,
	933, 1742, 1945, 1788, 604, 605, 1604, 1759, 1801, 1943,
	1761, 1936, 633, 1763, 1820, 1779, 1770, 33, 1775, 1727,
	1469, 1812, 1776, 32, 1462, 1209, 29, 112, 17, 1206,
	1798, 13, 1198, 1773, 1149, 1148, 16, 575, 1146, 1833,
	1143, 1819, 1141, 1844, 1729, 1818, 511, 575, 1791, 1796,
	2085, 141, 396, 1487, 2277, 1849, 1850, 1851, 829, 1804,
	1808, 1822, 1809, 620, 512, 1803, 1802, 951, 952, 944,
	945, 946, 947, 949, 950, 1978, 14, 1046, 12, 1977,
	1118, 1807, 529, 1077, 10, 1502, 1502, 386, 2087, 770,
	1843, 1511, 1509, 1840, 8, 1406, 1406, 1512, 1799, 846,
	1046, 4, 2197, 529, 1998, 2181, 1077, 1856, 1858, 1859,
	1957, 1867, 1865, 356, 833, 1488, 1870, 529, 802, 529,
	1872, 805, 1517, 1514, 2203, 513, 529, 529, 356, 818,
	638, 830, 894, 1288, 1868, 2045, 621, 1464, 141, 1900,
	1461, 573, 1288, 1873, 1257, 1921, 1211, 1095, 1038, 1901,
	2296, 399, 141, 504, 1406, 1406, 1406, 1406, 1406, 1406,
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
	1406, 1406, 1406, 1927, 1406, 1904, 1926, 940, 941, 2303,
	1653, 1654, 1932, 898, 2080, 141, 898, 1076, 141, 940,
	941, 507, 356, 356, 877, 356, 1928, 616, 399, 141,
	141, 837, 836, 901, 573, 1962, 901, 1914, 1913, 1860,
	837, 1960, 1422, 1710, 356, 356, 1699, 1547, 138, 1225,
	1434, 1931, 896, 1967, 942, 514, 356, 1966, 899, 1964,
	1431, 899, 141, 356, 356, 356, 141, 930, 1969, 1820,
	1959, 1961, 1430, 1963, 1948, 138, 897, 1372, 1046, 992,
	1958, 2017, 1820, 574, 1077, 2002, 1944, 838, 1946, 2005,
	1999, 2226, 2009, 400, 1975, 2134, 1819, 124, 1852, 1724,
	1818, 1002, 1000, 1992, 141, 940, 941, 773, 530, 1819,
	2106, 388, 1172, 1818, 1046, 1046, 2004, 848, 511, 1543,
	1077, 1077, 1230, 1046, 1046, 2220, 1974, 2023, 943, 1077,
	1077, 510, 1639, 515, 900, 2154, 512, 900, 2123, 1381,
	400, 1003, 49, 111, 1816, 682, 574, 1979, 1810, 1276,
	1275, 402, 942, 575, 1105, 704, 1046, 2029, 558, 1391,
	1289, 141, 1077, 401, 764, 516, 706, 573, 1043, 707,
	1044, 1032, 113, 694, 1041, 141, 141, 141, 658, 56,
	1820, 57, 138, 1261, 141, 1345, 141, 529, 141, 141,
	141, 1076, 1076, 141, 141, 1363, 1622, 513, 1045, 2051,
	996, 674, 2050, 686, 685, 59, 2044, 1819, 1360, 1079,
	401, 1818, 2052, 141, 2046, 2056, 575, 1135, 765, 1548,
	1567, 141, 1971, 399, 141, 1155, 1478, 1152, 2083, 1942,
	537, 1650, 141, 656, 1412, 1404, 2086, 2077, 2082, 399,
	1401, 796, 2079, 890, 2053, 984, 1262, 794, 1573, 1438,
	882, 1820, 1163, 1820, 2094, 619, 529, 618, 2088, 792,
	529, 1099, 138, 529, 529, 529, 529, 529, 924, 1449,
	2111, 2109, 1183, 977, 2122, 976, 529, 529, 1819, 574,
	1819, 606, 1818, 507, 1818, 2104, 2170, 783, 141, 782,
	1128, 573, 1078, 616, 2129, 1750, 638, 514, 141, 2297,
	2196, 1046, 1939, 2231, 129, 128, 2188, 1077, 2110, 356,
	2132, 2112, 1557, 75, 31, 141, 30, 94, 93, 1406,
	141, 1241, 2142, 2141, 92, 91, 2140, 356, 141, 127,
	1247, 665, 573, 573, 768, 400, 2143, 141, 90, 118,
	89, 88, 356, 87, 1265, 86, 85, 2174, 2157, 575,
	2172, 400, 1278, 554, 84, 83, 82, 81, 131, 1406,
	2166, 80, 2167, 798, 799, 79, 2164, 2165, 78, 77,
	2177, 2137, 1045, 1045, 526, 515, 141, 74, 2191, 2180,
	73, 573, 2147, 1079, 1079, 2192, 72, 2176, 71, 2183,
	28, 141, 141, 24, 130, 2148, 2149, 97, 23, 21,
	22, 27, 125, 574, 2195, 401, 26, 516, 19, 126,
	18, 15, 141, 2194, 2214, 9, 141, 20, 1042, 141,
	2215, 401, 54, 55, 53, 52, 51, 2206, 116, 940,
	941, 11, 47, 46, 2228, 45, 44, 43, 399, 2216,
	42, 2225, 7, 141, 574, 574, 141, 96, 40, 886,
	886, 1820, 943, 39, 2230, 892, 1406, 2251, 2239, 2236,
	2238, 2240, 2241, 2237, 6, 95, 1078, 1078, 141, 2233,
	5, 2253, 2261, 575, 108, 105, 942, 107, 1819, 104,
	106, 109, 1818, 141, 101, 2229, 102, 103, 2217, 100,
	99, 2262, 37, 574, 2274, 2272, 36, 2278, 978, 979,
	980, 981, 982, 1046, 2268, 2279, 35, 34, 990, 1077,
	2286, 2, 1, 0, 575, 575, 0, 0, 997, 0,
	0, 2295, 0, 2294, 0, 0, 0, 0, 2300, 1076,
	0, 0, 0, 1046, 0, 356, 0, 948, 1460, 1077,
	0, 0, 573, 573, 2306, 638, 2307, 2308, 0, 0,
	400, 0, 0, 529, 529, 0, 529, 0, 356, 356,
	0, 1476, 638, 575, 0, 0, 0, 124, 1989, 0,
	0, 1982, 0, 0, 0, 678, 0, 0, 0, 1980,
	356, 0, 0, 1984, 0, 0, 1492, 0, 0, 0,
	0, 0, 1042, 1042, 0, 0, 958, 0, 1046, 0,
	356, 356, 356, 1990, 1077, 0, 0, 1278, 0, 0,
	0, 356, 0, 111, 0, 0, 0, 355, 0, 356,
	401, 0, 356, 0, 0, 1983, 0, 0, 356, 0,
	0, 0, 0, 0, 356, 356, 0, 0, 356, 0,
	0, 0, 113, 1241, 940, 941, 1241, 0, 0, 56,
	0, 57, 0, 1553, 574, 574, 1153, 0, 1158, 0,
	0, 0, 0, 356, 1165, 0, 0, 943, 356, 959,
	1571, 0, 0, 0, 0, 59, 0, 356, 0, 0,
	0, 0, 0, 1492, 0, 1609, 1610, 0, 1076, 940,
	941, 942, 1135, 0, 1135, 1588, 0, 957, 0, 0,
	932, 0, 0, 1985, 0, 1986, 0, 628, 0, 0,
	1045, 1076, 943, 0, 0, 0, 0, 0, 0, 0,
	991, 1079, 0, 0, 575, 575, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1988, 942, 0, 0, 0,
	0, 0, 0, 0, 1991, 0, 0, 0, 0, 0,
	0, 0, 948, 1676, 1677, 1678, 0, 0, 0, 0,
	0, 953, 951, 952, 944, 945, 946, 947, 949, 950,
	0, 0, 0, 0, 0, 1298, 1299, 1300, 1301, 1302,
	1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312,
	1313, 1314, 1315, 1316, 1317, 1318, 1319, 948, 1325, 127,
	1327, 1328, 1329, 1330, 1078, 0, 0, 0, 0, 118,
	0, 958, 0, 0, 0, 0, 0, 1353, 1094, 0,
	0, 0, 1987, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1388, 1389, 0, 0, 1402, 0, 1413, 1415, 1420, 1423,
	1424, 1425, 0, 0, 0, 0, 958, 0, 1492, 1076,
	0, 0, 0, 0, 130, 0, 0, 0, 0, 1045,
	0, 0, 125, 0, 0, 529, 0, 0, 356, 126,
	1079, 0, 1732, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 1045, 0, 0, 1076, 1076, 0, 372, 0,
	0, 0, 356, 1079, 1076, 1076, 0, 0, 0, 0,
	0, 0, 356, 1745, 1746, 0, 0, 0, 1278, 0,
	0, 1752, 1753, 1755, 1757, 1758, 0, 0, 0, 959,
	1042, 0, 0, 1765, 0, 1767, 356, 1076, 0, 0,
	655, 0, 1828, 1829, 0, 0, 0, 0, 0, 1237,
	0, 0, 356, 0, 0, 0, 0, 0, 1241, 0,
	0, 0, 0, 1078, 0, 0, 0, 638, 1241, 0,
	0, 0, 0, 0, 0, 0, 953, 951, 952, 944,
	945, 946, 947, 949, 950, 0, 1078, 356, 356, 0,
	0, 0, 0, 0, 0, 1278, 0, 0, 1135, 1815,
	0, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882,
	1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892,
	0, 1896, 0, 952, 944, 945, 946, 947, 949, 950,
	0, 1355, 0, 0, 0, 0, 0, 0, 1359, 0,
	1045, 0, 1367, 0, 0, 886, 0, 0, 0, 0,
	892, 1079, 0, 1862, 1392, 1392, 1403, 0, 1414, 0,
	0, 0, 0, 0, 1426, 1427, 1428, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1045, 1045, 0, 0,
	0, 0, 1076, 1565, 0, 1045, 1045, 1079, 1079, 1042,
	0, 0, 0, 0, 0, 0, 1079, 1079, 1578, 0,
	0, 0, 0, 0, 0, 0, 655, 0, 0, 0,
	0, 0, 1042, 0, 0, 0, 0, 0, 1045, 0,
	0, 817, 0, 0, 0, 0, 0, 0, 0, 1079,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	1923, 0, 0, 0, 0, 683, 68, 0, 0, 0,
	0, 1593, 1594, 0, 1933, 0, 0, 1599, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 1078, 0, 0, 0, 0, 0, 0, 0, 1078,
	1078, 0, 0, 0, 0, 874, 817, 356, 655, 1618,
	638, 0, 0, 0, 0, 0, 1625, 0, 0, 1629,
	0, 1241, 638, 68, 0, 0, 0, 628, 913, 0,
	0, 0, 1078, 0, 0, 1643, 0, 1653, 1654, 923,
	1671, 1672, 1673, 0, 1815, 0, 655, 927, 927, 0,
	0, 0, 0, 2007, 638, 0, 0, 1815, 638, 0,
	0, 990, 0, 0, 0, 0, 0, 1420, 1420, 1420,
	0, 0, 0, 0, 0, 0, 0, 0, 542, 0,
	1042, 0, 555, 1045, 0, 0, 0, 0, 0, 0,
	1668, 0, 0, 0, 1079, 0, 2024, 629, 68, 0,
	0, 0, 0, 0, 1076, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1042, 1042, 0, 0,
	0, 0, 0, 0, 0, 1042, 1042, 0, 0, 0,
	0, 1737, 0, 0, 1076, 0, 1165, 0, 0, 0,
	0, 0, 0, 0, 0, 1659, 0, 0, 0, 0,
	0, 0, 0, 1460, 0, 1815, 2101, 0, 1042, 0,
	0, 0, 0, 0, 0, 0, 0, 2054, 2055, 1278,
	0, 0, 0, 0, 0, 0, 2064, 1078, 2065, 0,
	356, 2067, 2068, 1674, 0, 2071, 356, 0, 0, 1778,
	0, 0, 0, 0, 0, 0, 2126, 0, 0, 1076,
	0, 0, 0, 2084, 1669, 638, 0, 1611, 0, 0,
	0, 0, 0, 2093, 1614, 886, 2095, 0, 0, 0,
	0, 0, 0, 0, 356, 0, 1815, 892, 1815, 0,
	0, 0, 1630, 1631, 0, 0, 0, 0, 0, 0,
	1823, 0, 0, 1826, 0, 0, 1827, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1832, 0,
	0, 0, 0, 0, 0, 0, 0, 1841, 0, 0,
	0, 0, 0, 1679, 0, 1845, 0, 1670, 1578, 0,
	356, 0, 0, 0, 1692, 1045, 0, 0, 0, 0,
	1278, 0, 628, 2182, 0, 0, 1079, 0, 1869, 0,
	0, 0, 1871, 1042, 0, 0, 0, 2156, 0, 0,
	1244, 0, 1241, 0, 0, 1045, 0, 0, 0, 0,
	2163, 0, 0, 0, 0, 1263, 1079, 0, 0, 1135,
	0, 0, 0, 0, 0, 1902, 1903, 0, 555, 0,
	0, 0, 0, 0, 1909, 1910, 1911, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1665, 1666, 1667, 0, 356, 1664,
	1662, 1663, 1655, 1656, 1657, 1658, 1660, 1661, 0, 1078,
	1045, 0, 0, 2198, 2199, 0, 0, 0, 0, 0,
	0, 1079, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2213, 0, 0, 0, 638, 1078,
	0, 356, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1815, 0, 0, 0,
	0, 0, 0, 0, 0, 2156, 0, 0, 356, 0,
	0, 0, 0, 0, 0, 0, 0, 940, 941, 0,
	960, 961, 962, 970, 971, 972, 0, 0, 0, 0,
	638, 0, 0, 963, 0, 0, 0, 0, 2000, 0,
	943, 0, 0, 974, 1078, 2271, 1837, 0, 0, 0,
	0, 2008, 0, 0, 0, 2011, 2012, 0, 0, 0,
	2014, 0, 0, 0, 942, 0, 0, 2016, 0, 2018,
	957, 0, 0, 0, 0, 1042, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2025, 0, 0, 655, 0,
	0, 0, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1042, 0, 0, 0, 0,
	0, 817, 817, 1898, 0, 0, 0, 0, 2034, 0,
	0, 0, 0, 0, 1908, 948, 0, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 975, 0, 0, 0,
	0, 0, 0, 1495, 817, 1497, 0, 0, 0, 0,
	0, 0, 68, 973, 655, 0, 0, 910, 0, 0,
	1042, 0, 817, 0, 0, 655, 0, 2075, 965, 0,
	0, 628, 0, 0, 958, 0, 0, 628, 628, 0,
	0, 628, 0, 0, 0, 1950, 0, 1951, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 964,
	0, 987, 0, 989, 0, 0, 1562, 0, 0, 0,
	993, 923, 0, 0, 0, 0, 0, 2118, 2119, 0,
	923, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1653, 1654, 0, 1671, 1672, 1673, 0, 959, 2131, 0,
	0, 0, 0, 0, 0, 0, 2006, 0, 0, 0,
	0, 0, 0, 968, 0, 0, 0, 0, 0, 0,
	0, 0, 2146, 940, 941, 0, 960, 961, 962, 970,
	971, 972, 0, 0, 0, 0, 0, 0, 0, 963,
	0, 0, 0, 1668, 0, 0, 943, 0, 0, 974,
	0, 892, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2169, 0, 0, 0, 0, 0, 0, 0, 0,
	942, 0, 0, 0, 0, 0, 957, 0, 0, 0,
	0, 966, 0, 0, 954, 955, 956, 969, 0, 953,
	951, 952, 944, 945, 946, 947, 949, 950, 1659, 0,
	0, 0, 0, 0, 542, 1695, 0, 542, 542, 940,
	941, 0, 960, 961, 962, 970, 971, 972, 0, 0,
	0, 0, 0, 0, 0, 963, 0, 0, 0, 0,
	2076, 948, 943, 68, 0, 974, 1674, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 967, 975, 0, 0, 0, 942, 1669, 0, 0,
	0, 0, 957, 0, 0, 0, 0, 0, 0, 973,
	0, 1726, 629, 0, 2114, 0, 0, 0, 0, 0,
	0, 0, 2260, 2260, 965, 0, 0, 0, 0, 0,
	958, 0, 0, 2264, 0, 1739, 0, 0, 0, 0,
	0, 0, 68, 0, 68, 1744, 0, 0, 0, 0,
	68, 0, 0, 0, 0, 964, 0, 948, 2260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1768,
	1670, 0, 0, 0, 0, 0, 0, 967, 975, 0,
	0, 0, 0, 0, 0, 628, 0, 0, 0, 0,
	0, 1343, 0, 0, 0, 973, 0, 2260, 0, 0,
	0, 0, 0, 959, 0, 0, 0, 0, 0, 0,
	965, 0, 0, 0, 0, 0, 958, 0, 0, 968,
	1263, 628, 0, 0, 0, 0, 0, 0, 0, 940,
	941, 0, 960, 961, 962, 970, 971, 972, 0, 0,
	0, 964, 0, 0, 0, 963, 0, 0, 0, 0,
	0, 0, 943, 0, 68, 974, 0, 1665, 1666, 1667,
	0, 0, 1664, 1662, 1663, 1655, 1656, 1657, 1658, 1660,
	1661, 0, 2204, 0, 0, 0, 942, 0, 0, 0,
	0, 0, 957, 0, 0, 0, 0, 966, 0, 959,
	954, 955, 956, 969, 2223, 953, 951, 952, 944, 945,
	946, 947, 949, 950, 0, 968, 0, 0, 0, 0,
	0, 1694, 0, 2234, 2235, 940, 941, 0, 960, 961,
	962, 970, 971, 972, 0, 0, 0, 0, 0, 0,
	0, 963, 0, 0, 0, 0, 0, 948, 943, 0,
	0, 974, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 967, 975, 0,
	0, 0, 942, 0, 0, 0, 0, 0, 957, 0,
	0, 0, 0, 966, 0, 973, 954, 955, 956, 969,
	0, 953, 951, 952, 944, 945, 946, 947, 949, 950,
	965, 0, 0, 0, 0, 0, 958, 1693, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 0, 68,
	628, 964, 0, 948, 0, 0, 0, 0, 0, 0,
	0, 629, 0, 0, 0, 0, 0, 629, 629, 0,
	0, 629, 0, 967, 975, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 0, 124, 959,
	0, 555, 0, 0, 0, 0, 965, 0, 0, 38,
	119, 0, 958, 0, 0, 968, 0, 0, 0, 0,
	0, 0, 110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 964, 0, 0,
	0, 0, 41, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 48, 0, 0, 0, 50,
	1343, 0, 0, 113, 0, 0, 122, 0, 0, 0,
	56, 0, 57, 966, 0, 959, 954, 955, 956, 969,
	989, 953, 951, 952, 944, 945, 946, 947, 949, 950,
	58, 968, 0, 0, 0, 0, 59, 1645, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2066, 0, 0, 0, 0, 0, 2072,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2102, 0, 966,
	0, 0, 954, 955, 956, 969, 0, 953, 951, 952,
	944, 945, 946, 947, 949, 950, 0, 0, 0, 61,
	2210, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	68, 0, 0, 69, 70, 63, 0, 64, 0, 65,
	0, 123, 0, 2139, 0, 0, 66, 0, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 76, 0, 0,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	68, 0, 0, 68, 0, 0, 0, 0, 0, 0,
	0, 68, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 629, 0, 117, 0, 0,
	0, 0, 0, 0, 0, 130, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 0, 0, 0, 0, 0,
	126, 2190, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 629, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2219, 0, 0, 0, 0, 0,
	702, 691, 692, 689, 690, 681, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 1263, 0, 0, 719, 684, 0, 0, 0, 146,
	147, 148, 300, 734, 302, 735, 149, 736, 737, 0,
	150, 306, 307, 151, 152, 687, 718, 738, 739, 310,
	0, 153, 730, 0, 710, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 404, 161, 162, 163,
	0, 711, 712, 714, 0, 713, 715, 164, 165, 357,
	166, 740, 167, 741, 742, 893, 168, 0, 169, 0,
	170, 0, 0, 733, 172, 0, 173, 0, 0, 0,
	675, 174, 175, 176, 720, 721, 698, 0, 0, 177,
	178, 743, 744, 745, 0, 179, 0, 180, 0, 0,
	405, 0, 181, 731, 0, 322, 0, 182, 183, 184,
	185, 186, 727, 729, 407, 0, 190, 0, 187, 0,
	406, 188, 746, 189, 747, 748, 749, 750, 751, 0,
	709, 0, 408, 191, 192, 193, 409, 194, 195, 196,
	629, 198, 197, 0, 732, 410, 199, 411, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	412, 207, 208, 210, 209, 670, 68, 699, 728, 211,
	752, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 336, 413, 217, 414, 722, 218, 219, 220, 221,
	222, 0, 223, 723, 224, 339, 225, 0, 226, 227,
	228, 229, 230, 753, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 415, 246, 247, 676, 248, 0, 252, 253, 254,
	255, 127, 257, 342, 256, 258, 259, 716, 260, 249,
	250, 261, 416, 262, 754, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 755, 267, 268, 724, 0, 271,
	131, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	756, 757, 0, 0, 279, 280, 725, 726, 697, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 717,
	289, 0, 352, 290, 291, 292, 661, 758, 0, 0,
	293, 0, 0, 0, 125, 294, 295, 296, 297, 298,
	671, 126, 0, 0, 0, 0, 669, 0, 0, 0,
	0, 667, 668, 0, 0, 0, 0, 0, 0, 0,
	677, 0, 0, 0, 0, 680, 0, 0, 0, 0,
	0, 0, 2089, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 398, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 0, 143, 144, 417, 145, 418, 419, 420,
	421, 299, 422, 423, 424, 425, 146, 147, 148, 300,
	301, 302, 303, 149, 304, 305, 426, 150, 306, 307,
	151, 152, 427, 428, 308, 309, 310, 429, 153, 311,
	430, 403, 431, 154, 155, 156, 989, 157, 432, 158,
	159, 160, 433, 404, 161, 162, 163, 434, 435, 437,
	436, 438, 439, 440, 164, 165, 357, 166, 312, 167,
	313, 314, 441, 168, 442, 169, 443, 170, 444, 445,
	171, 172, 446, 173, 447, 0, 448, 315, 174, 175,
	176, 316, 317, 449, 450, 451, 177, 178, 318, 319,
	320, 0, 179, 452, 180, 453, 454, 405, 455, 181,
	321, 456, 322, 457, 182, 183, 184, 185, 186, 323,
	324, 407, 458, 190, 459, 187, 460, 406, 188, 325,
	189, 326, 327, 328, 329, 330, 461, 331, 462, 408,
	191, 192, 193, 409, 194, 195, 196, 463, 198, 197,
	464, 332, 410, 199, 411, 465, 200, 466, 467, 201,
	0, 202, 203, 204, 206, 333, 205, 412, 207, 208,
	210, 209, 468, 469, 470, 334, 211, 335, 212, 213,
	471, 214, 472, 473, 215, 474, 475, 216, 336, 413,
	217, 414, 337, 218, 219, 220, 221, 222, 476, 223,
	338, 224, 339, 225, 477, 226, 227, 228, 229, 230,
	340, 231, 232, 478, 233, 234, 235, 236, 237, 239,
	240, 238, 241, 242, 243, 244, 479, 245, 415, 246,
	247, 341, 248, 0, 252, 253, 254, 255, 480, 257,
	342, 256, 258, 259, 481, 260, 249, 250, 261, 416,
	262, 343, 344, 263, 482, 270, 264, 265, 251, 266,
	269, 345, 267, 268, 346, 483, 271, 484, 272, 273,
	274, 275, 276, 277, 278, 485, 347, 348, 349, 486,
	487, 279, 280, 350, 351, 488, 281, 282, 283, 284,
	489, 490, 285, 286, 287, 288, 491, 289, 492, 352,
	290, 291, 292, 353, 354, 493, 494, 293, 495, 496,
	497, 498, 294, 295, 296, 297, 298, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 398, 0,
	0, 0, 0, 0, 0, 1235, 0, 0, 0, 0,
	0, 0, 0, 1236, 143, 144, 417, 145, 418, 419,
	420, 421, 299, 422, 423, 424, 425, 146, 147, 148,
	300, 301, 302, 303, 149, 304, 305, 426, 150, 306,
	307, 151, 152, 427, 428, 308, 309, 310, 429, 153,
	311, 430, 403, 431, 154, 155, 156, 0, 157, 432,
	158, 159, 160, 433, 404, 161, 162, 163, 434, 435,
	437, 436, 438, 439, 440, 164, 165, 357, 166, 312,
	167, 313, 314, 441, 168, 442, 169, 443, 170, 444,
	445, 171, 172, 446, 173, 447, 0, 448, 315, 174,
	175, 176, 316, 317, 449, 450, 451, 177, 178, 318,
	319, 320, 0, 179, 452, 180, 453, 454, 405, 455,
	181, 321, 456, 322, 457, 182, 183, 184, 185, 186,
	323, 324, 407, 458, 190, 459, 187, 460, 406, 188,
	325, 189, 326, 327, 328, 329, 330, 461, 331, 462,
	408, 191, 192, 193, 409, 194, 195, 196, 463, 198,
	197, 464, 332, 410, 199, 411, 465, 200, 466, 467,
	201, 0, 202, 203, 204, 206, 333, 205, 412, 207,
	208, 210, 209, 468, 469, 470, 334, 211, 335, 212,
	213, 471, 214, 472, 473, 215, 474, 475, 216, 336,
	413, 217, 414, 337, 218, 219, 220, 221, 222, 476,
	223, 338, 224, 339, 225, 477, 226, 227, 228, 229,
	230, 340, 231, 232, 478, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 479, 245, 415,
	246, 247, 341, 248, 0, 252, 253, 254, 255, 480,
	257, 342, 256, 258, 259, 481, 260, 249, 250, 261,
	416, 262, 343, 344, 263, 482, 270, 264, 265, 251,
	266, 269, 345, 267, 268, 346, 483, 271, 484, 272,
	273, 274, 275, 276, 277, 278, 485, 347, 348, 349,
	486, 487, 279, 280, 350, 351, 488, 281, 282, 283,
	284, 489, 490, 285, 286, 287, 288, 491, 289, 492,
	352, 290, 291, 292, 353, 354, 493, 494, 293, 495,
	496, 497, 498, 294, 295, 296, 297, 298, 0, 0,
	0, 398, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1965, 143, 144, 417,
	145, 418, 419, 420, 421, 299, 422, 423, 424, 425,
	146, 147, 148, 300, 301, 302, 303, 149, 304, 305,
	426, 150, 306, 307, 151, 152, 427, 428, 308, 309,
	310, 429, 153, 311, 430, 403, 431, 154, 155, 156,
	0, 157, 432, 158, 159, 160, 433, 404, 161, 162,
	163, 434, 435, 437, 436, 438, 439, 440, 164, 165,
	357, 166, 312, 167, 313, 314, 441, 168, 442, 169,
	443, 170, 444, 445, 171, 172, 446, 173, 447, 0,
	448, 315, 174, 175, 176, 316, 317, 449, 450, 451,
	177, 178, 318, 319, 320, 0, 179, 452, 180, 453,
	454, 405, 455, 181, 321, 456, 322, 457, 182, 183,
	184, 185, 186, 323, 324, 407, 458, 190, 459, 187,
	460, 406, 188, 325, 189, 326, 327, 328, 329, 330,
	461, 331, 462, 408, 191, 192, 193, 409, 194, 195,
	196, 463, 198, 197, 464, 332, 410, 199, 411, 465,
	200, 466, 467, 201, 0, 202, 203, 204, 206, 333,
	205, 412, 207, 208, 210, 209, 468, 469, 470, 334,
	211, 335, 212, 213, 471, 214, 472, 473, 215, 474,
	475, 216, 336, 413, 217, 414, 337, 218, 219, 220,
	221, 222, 476, 223, 338, 224, 339, 225, 477, 226,
	227, 228, 229, 230, 340, 231, 232, 478, 233, 234,
	235, 236, 237, 239, 240, 238, 241, 242, 243, 244,
	479, 245, 415, 246, 247, 341, 248, 0, 252, 253,
	254, 255, 480, 257, 342, 256, 258, 259, 481, 260,
	249, 250, 261, 416, 262, 343, 344, 263, 482, 270,
	264, 265, 251, 266, 269, 345, 267, 268, 346, 483,
	271, 484, 272, 273, 274, 275, 276, 277, 278, 485,
	347, 348, 349, 486, 487, 279, 280, 350, 351, 488,
	281, 282, 283, 284, 489, 490, 285, 286, 287, 288,
	491, 289, 492, 352, 290, 291, 292, 353, 354, 493,
	494, 293, 495, 496, 497, 498, 294, 295, 296, 297,
	298, 398, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 919, 0, 0, 143, 144, 417,
	145, 418, 419, 420, 421, 299, 422, 423, 424, 425,
	146, 147, 148, 300, 301, 302, 303, 149, 304, 305,
	426, 150, 306, 307, 151, 152, 427, 428, 308, 309,
	310, 429, 153, 311, 430, 403, 431, 154, 155, 156,
	0, 157, 432, 158, 159, 160, 433, 404, 161, 162,
	163, 434, 435, 437, 436, 438, 439, 440, 164, 165,
	357, 166, 312, 167, 313, 314, 441, 168, 442, 169,
	443, 170, 444, 445, 171, 172, 446, 173, 447, 0,
	448, 315, 174, 175, 176, 316, 317, 449, 450, 451,
	177, 178, 318, 319, 320, 0, 179, 452, 180, 453,
	454, 405, 455, 181, 321, 456, 322, 457, 182, 183,
	184, 185, 186, 323, 324, 407, 458, 190, 459, 187,
	460, 406, 188, 325, 189, 326, 327, 328, 329, 330,
	461, 331, 462, 408, 191, 192, 193, 409, 194, 195,
	196, 463, 198, 197, 464, 332, 410, 199, 411, 465,
	200, 466, 467, 201, 0, 202, 203, 204, 206, 333,
	205, 412, 207, 208, 210, 209, 468, 469, 470, 334,
	211, 335, 212, 213, 471, 214, 472, 473, 215, 474,
	475, 216, 336, 413, 217, 414, 337, 218, 219, 220,
	221, 222, 476, 223, 338, 224, 339, 225, 477, 226,
	227, 228, 229, 230, 340, 231, 232, 478, 233, 234,
	235, 236, 237, 239, 240, 238, 241, 242, 243, 244,
	479, 245, 415, 246, 247, 341, 248, 0, 252, 253,
	254, 255, 480, 257, 342, 256, 258, 259, 481, 260,
	249, 250, 261, 416, 262, 343, 344, 263, 482, 270,
	264, 265, 251, 266, 269, 345, 267, 268, 346, 483,
	271, 484, 272, 273, 274, 275, 276, 277, 278, 485,
	347, 348, 349, 486, 487, 279, 280, 350, 351, 488,
	281, 282, 283, 284, 489, 490, 285, 286, 287, 288,
	491, 289, 492, 352, 290, 291, 292, 353, 354, 493,
	494, 293, 495, 496, 497, 498, 294, 295, 296, 297,
	298, 702, 691, 692, 689, 690, 681, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 144, 1369,
	145, 0, 0, 0, 0, 719, 684, 0, 0, 0,
	146, 147, 148, 300, 734, 302, 735, 149, 736, 737,
	0, 150, 306, 307, 151, 152, 687, 718, 738, 739,
	310, 0, 153, 730, 0, 710, 0, 154, 155, 156,
	0, 157, 0, 158, 159, 160, 0, 404, 161, 162,
	163, 0, 711, 712, 714, 0, 713, 715, 164, 165,
	357, 166, 740, 167, 741, 742, 0, 168, 0, 169,
	0, 170, 1370, 0, 733, 172, 0, 173, 0, 0,
	0, 675, 174, 175, 176, 720, 721, 698, 0, 0,
	177, 178, 743, 744, 745, 0, 179, 0, 180, 0,
	0, 405, 0, 181, 731, 0, 322, 0, 182, 183,
	184, 185, 186, 727, 729, 407, 0, 190, 0, 187,
	0, 406, 188, 746, 189, 747, 748, 749, 750, 751,
	0, 709, 0, 408, 191, 192, 193, 409, 194, 195,
	196, 0, 198, 197, 0, 732, 410, 199, 411, 0,
	200, 0, 0, 201, 0, 202, 203, 204, 206, 333,
	205, 412, 207, 208, 210, 209, 670, 0, 699, 728,
	211, 752, 212, 213, 0, 214, 0, 0, 215, 0,
	0, 216, 336, 413, 217, 414, 722, 218, 219, 220,
	221, 222, 0, 223, 723, 224, 339, 225, 0, 226,
	227, 228, 229, 230, 753, 231, 232, 0, 233, 234,
	235, 236, 237, 239, 240, 238, 241, 242, 243, 244,
	0, 245, 415, 246, 247, 676, 248, 0, 252, 253,
	254, 255, 0, 257, 342, 256, 258, 259, 716, 260,
	249, 250, 261, 416, 262, 754, 344, 263, 0, 270,
	264, 265, 251, 266, 269, 755, 267, 268, 724, 0,
	271, 0, 272, 273, 274, 275, 276, 277, 278, 0,
	347, 756, 757, 0, 0, 279, 280, 725, 726, 697,
	281, 282, 283, 284, 0, 0, 285, 286, 287, 288,
	717, 289, 0, 352, 290, 291, 292, 353, 758, 1368,
	0, 293, 0, 0, 0, 0, 294, 295, 296, 297,
	298, 671, 0, 0, 0, 0, 0, 669, 0, 0,
	0, 0, 667, 668, 1371, 702, 691, 692, 689, 690,
	681, 677, 1366, 0, 0, 0, 680, 0, 0, 0,
	0, 143, 144, 0, 145, 0, 0, 0, 0, 719,
	684, 0, 0, 0, 146, 147, 148, 300, 734, 302,
	735, 149, 736, 737, 0, 150, 306, 307, 151, 152,
	687, 718, 738, 739, 310, 0, 153, 730, 0, 710,
	0, 154, 155, 156, 0, 157, 0, 158, 159, 160,
	0, 404, 161, 162, 163, 0, 711, 712, 714, 0,
	713, 715, 164, 165, 357, 166, 740, 167, 741, 742,
	0, 168, 0, 169, 0, 170, 0, 0, 733, 172,
	0, 173, 0, 0, 0, 675, 174, 175, 176, 720,
	721, 698, 0, 0, 177, 178, 743, 744, 745, 0,
	179, 0, 180, 0, 0, 405, 0, 181, 731, 0,
	322, 0, 182, 183, 184, 185, 186, 727, 729, 407,
	0, 190, 0, 187, 0, 406, 188, 746, 189, 747,
	748, 749, 750, 751, 0, 709, 0, 408, 191, 192,
	193, 409, 194, 195, 196, 0, 198, 197, 0, 732,
	410, 199, 411, 0, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 333, 205, 412, 207, 208, 210, 209,
	670, 0, 699, 728, 211, 752, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 336, 413, 217, 414,
	722, 218, 219, 220, 221, 222, 0, 223, 723, 224,
	339, 225, 0, 226, 227, 228, 229, 230, 753, 231,
	232, 0, 233, 234, 235, 236, 237, 239, 240, 238,
	241, 242, 243, 244, 0, 245, 415, 246, 247, 676,
	248, 0, 252, 253, 254, 255, 127, 257, 342, 256,
	258, 259, 716, 260, 249, 250, 261, 416, 262, 754,
	344, 263, 0, 270, 264, 265, 251, 266, 269, 755,
	267, 268, 724, 0, 271, 131, 272, 273, 274, 275,
	276, 277, 278, 0, 347, 756, 757, 0, 0, 279,
	280, 725, 726, 697, 281, 282, 283, 284, 0, 0,
	285, 286, 287, 288, 717, 289, 0, 352, 290, 291,
	292, 661, 758, 0, 0, 293, 0, 0, 0, 125,
	294, 295, 296, 297, 298, 671, 126, 0, 0, 0,
	0, 669, 0, 0, 0, 0, 667, 668, 702, 691,
	692, 689, 690, 681, 0, 677, 0, 0, 0, 0,
	680, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 719, 684, 0, 0, 0, 146, 147, 148,
	300, 734, 302, 735, 149, 736, 737, 1416, 150, 306,
	307, 151, 152, 687, 718, 738, 739, 310, 0, 153,
	730, 0, 710, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 404, 161, 162, 163, 0, 711,
	712, 714, 0, 713, 715, 164, 165, 357, 166, 740,
	167, 741, 742, 0, 168, 0, 169, 0, 170, 0,
	0, 733, 172, 0, 173, 0, 0, 0, 675, 174,
	175, 176, 720, 721, 698, 0, 0, 177, 178, 743,
	744, 745, 0, 179, 0, 180, 0, 1421, 405, 0,
	181, 731, 0, 322, 0, 182, 183, 184, 185, 186,
	727, 729, 407, 0, 190, 0, 187, 0, 406, 188,
	746, 189, 747, 748, 749, 750, 751, 0, 709, 0,
	408, 191, 192, 193, 409, 194, 195, 196, 0, 198,
	197, 1417, 732, 410, 199, 411, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 333, 205, 412, 207,
	208, 210, 209, 670, 0, 699, 728, 211, 752, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 336,
	413, 217, 414, 722, 218, 219, 220, 221, 222, 0,
	223, 723, 224, 339, 225, 0, 226, 227, 228, 229,
	230, 753, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 415,
	246, 247, 676, 248, 0, 252, 253, 254, 255, 0,
	257, 342, 256, 258, 259, 716, 260, 249, 250, 261,
	416, 262, 754, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 755, 267, 268, 724, 0, 271, 0, 272,
	273, 274, 275, 276, 277, 278, 0, 347, 756, 757,
	0, 1418, 279, 280, 725, 726, 697, 281, 282, 283,
	284, 0, 0, 285, 286, 287, 288, 717, 289, 0,
	352, 290, 291, 292, 353, 758, 0, 0, 293, 0,
	0, 0, 0, 294, 295, 296, 297, 298, 671, 0,
	0, 0, 0, 0, 669, 0, 0, 0, 0, 667,
	668, 702, 691, 692, 689, 690, 681, 0, 677, 0,
	0, 0, 0, 680, 0, 0, 0, 143, 144, 0,
	145, 0, 0, 0, 0, 719, 684, 0, 0, 0,
	146, 147, 148, 300, 734, 302, 735, 149, 736, 737,
	0, 150, 306, 307, 151, 152, 687, 718, 738, 739,
	310, 0, 153, 730, 0, 710, 0, 154, 155, 156,
	0, 157, 0, 158, 159, 160, 0, 404, 161, 162,
	163, 0, 711, 712, 714, 0, 713, 715, 164, 165,
	357, 166, 740, 167, 741, 742, 0, 168, 0, 169,
	0, 170, 0, 0, 733, 172, 0, 173, 0, 0,
	0, 675, 174, 175, 176, 720, 721, 698, 0, 0,
	177, 178, 743, 744, 745, 0, 179, 0, 180, 0,
	0, 405, 0, 181, 731, 0, 322, 0, 182, 183,
	184, 185, 186, 727, 729, 407, 0, 190, 0, 187,
	0, 406, 188, 746, 189, 747, 748, 749, 750, 751,
	0, 709, 0, 408, 191, 192, 193, 409, 194, 195,
	196, 0, 198, 197, 0, 732, 410, 199, 411, 0,
	200, 0, 0, 201, 0, 202, 203, 204, 206, 333,
	205, 412, 207, 208, 210, 209, 670, 1797, 699, 728,
	211, 752, 212, 213, 0, 214, 0, 0, 215, 0,
	0, 216, 336, 413, 217, 414, 722, 218, 219, 220,
	221, 222, 0, 223, 723, 224, 339, 225, 0, 226,
	227, 228, 229, 230, 753, 231, 232, 0, 233, 234,
	235, 236, 237, 239, 240, 238, 241, 242, 243, 244,
	0, 245, 415, 246, 247, 676, 248, 0, 252, 253,
	254, 255, 0, 257, 342, 256, 258, 259, 716, 260,
	249, 250, 261, 416, 262, 754, 344, 263, 0, 270,
	264, 265, 251, 266, 269, 755, 267, 268, 724, 0,
	271, 0, 272, 273, 274, 275, 276, 277, 278, 0,
	347, 756, 757, 0, 0, 279, 280, 725, 726, 697,
	281, 282, 283, 284, 0, 0, 285, 286, 287, 288,
	717, 289, 0, 352, 290, 291, 292, 353, 758, 0,
	0, 293, 0, 0, 0, 0, 294, 295, 296, 297,
	298, 671, 0, 0, 0, 0, 0, 669, 0, 0,
	0, 0, 667, 668, 887, 702, 691, 692, 689, 690,
	681, 677, 0, 0, 0, 0, 680, 0, 0, 0,
	0, 143, 144, 0, 145, 0, 0, 0, 0, 719,
	684, 0, 0, 0, 146, 147, 148, 300, 734, 302,
	735, 149, 736, 737, 0, 150, 306, 307, 151, 152,
	687, 718, 738, 739, 310, 0, 153, 730, 0, 710,
	0, 154, 155, 156, 0, 157, 0, 158, 159, 160,
	0, 404, 161, 162, 163, 0, 711, 712, 714, 0,
	713, 715, 164, 165, 357, 166, 740, 167, 741, 742,
	0, 168, 0, 169, 0, 170, 0, 0, 733, 172,
	0, 173, 0, 0, 0, 675, 174, 175, 176, 720,
	721, 698, 0, 0, 177, 178, 743, 744, 745, 0,
	179, 0, 180, 0, 0, 405, 0, 181, 731, 0,
	322, 0, 182, 183, 184, 185, 186, 727, 729, 407,
	0, 190, 1167, 187, 0, 406, 188, 746, 189, 747,
	748, 749, 750, 751, 0, 709, 0, 408, 191, 192,
	193, 409, 194, 195, 196, 0, 198, 197, 0, 732,
	410, 199, 411, 0, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 333, 205, 412, 207, 208, 210, 209,
	670, 0, 699, 728, 211, 752, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 336, 413, 217, 414,
	722, 218, 219, 220, 221, 222, 0, 223, 723, 224,
	339, 225, 1166, 226, 227, 228, 229, 230, 753, 231,
	232, 0, 233, 234, 235, 236, 237, 239, 240, 238,
	241, 242, 243, 244, 0, 245, 415, 246, 247, 676,
	248, 0, 252, 253, 254, 255, 0, 257, 342, 256,
	258, 259, 716, 260, 249, 250, 261, 416, 262, 754,
	344, 263, 0, 270, 264, 265, 251, 266, 269, 755,
	267, 268, 724, 0, 271, 0, 272, 273, 274, 275,
	276, 277, 278, 0, 347, 756, 757, 0, 0, 279,
	280, 725, 726, 697, 281, 282, 283, 284, 0, 0,
	285, 286, 287, 288, 717, 289, 0, 352, 290, 291,
	292, 353, 758, 0, 0, 293, 0, 0, 0, 0,
	294, 295, 296, 297, 298, 671, 0, 0, 0, 0,
	0, 669, 0, 0, 0, 0, 667, 668, 702, 691,
	692, 689, 690, 681, 0, 677, 0, 0, 0, 0,
	680, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 719, 684, 0, 0, 0, 146, 147, 148,
	300, 734, 302, 735, 149, 736, 737, 0, 150, 306,
	307, 151, 152, 687, 718, 738, 739, 310, 0, 153,
	730, 0, 710, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 404, 161, 162, 163, 0, 711,
	712, 714, 0, 713, 715, 164, 165, 357, 166, 740,
	167, 741, 742, 0, 168, 0, 169, 0, 170, 0,
	0, 733, 172, 0, 173, 0, 0, 0, 675, 174,
	175, 176, 720, 721, 698, 0, 0, 177, 178, 743,
	744, 745, 0, 179, 0, 180, 0, 0, 405, 0,
	181, 731, 0, 322, 0, 182, 183, 184, 185, 186,
	727, 729, 407, 0, 190, 0, 187, 0, 406, 188,
	746, 189, 747, 748, 749, 750, 751, 0, 709, 0,
	408, 191, 192, 193, 409, 194, 195, 196, 0, 198,
	197, 0, 732, 410, 199, 411, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 333, 205, 412, 207,
	208, 210, 209, 670, 0, 699, 728, 211, 752, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 336,
	413, 217, 414, 722, 218, 219, 220, 221, 222, 0,
	223, 723, 224, 339, 225, 0, 226, 227, 228, 229,
	230, 753, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 415,
	246, 247, 676, 248, 0, 252, 253, 254, 255, 0,
	257, 342, 256, 258, 259, 716, 260, 249, 250, 261,
	416, 262, 754, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 755, 267, 268, 724, 0, 271, 0, 272,
	273, 274, 275, 276, 277, 278, 0, 347, 756, 757,
	0, 0, 279, 280, 725, 726, 697, 281, 282, 283,
	284, 0, 0, 285, 286, 287, 288, 717, 289, 0,
	352, 290, 291, 292, 353, 758, 0, 0, 293, 0,
	0, 0, 0, 294, 295, 296, 297, 298, 671, 0,
	0, 0, 0, 0, 669, 0, 0, 0, 0, 667,
	668, 0, 0, 0, 0, 0, 995, 1361, 677, 0,
	0, 0, 0, 680, 702, 691, 692, 689, 690, 681,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 719, 684,
	0, 0, 0, 146, 147, 148, 300, 734, 302, 735,
	149, 736, 737, 0, 150, 306, 307, 151, 152, 687,
	718, 738, 739, 310, 0, 153, 730, 0, 710, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	404, 161, 162, 163, 0, 711, 712, 714, 0, 713,
	715, 164, 165, 357, 166, 740, 167, 741, 742, 0,
	168, 0, 169, 0, 170, 0, 0, 733, 172, 0,
	173, 0, 0, 0, 675, 174, 175, 176, 720, 721,
	698, 0, 0, 177, 178, 743, 744, 745, 0, 179,
	0, 180, 0, 0, 405, 0, 181, 731, 0, 322,
	0, 182, 183, 184, 185, 186, 727, 729, 407, 0,
	190, 0, 187, 0, 406, 188, 746, 189, 747, 748,
	749, 750, 751, 0, 709, 0, 408, 191, 192, 193,
	409, 194, 195, 196, 0, 198, 197, 0, 732, 410,
	199, 411, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 333, 205, 412, 207, 208, 210, 209, 670,
	0, 699, 728, 211, 752, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 336, 413, 217, 414, 722,
	218, 219, 220, 221, 222, 0, 223, 723, 224, 339,
	225, 0, 226, 227, 228, 229, 230, 753, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 415, 246, 247, 676, 248,
	0, 252, 253, 254, 255, 0, 257, 342, 256, 258,
	259, 716, 260, 249, 250, 261, 416, 262, 754, 344,
	263, 0, 270, 264, 265, 251, 266, 269, 755, 267,
	268, 724, 0, 271, 0, 272, 273, 274, 275, 276,
	277, 278, 0, 347, 756, 757, 0, 0, 279, 280,
	725, 726, 697, 281, 282, 283, 284, 0, 0, 285,
	286, 287, 288, 717, 289, 0, 352, 290, 291, 292,
	353, 758, 0, 0, 293, 0, 0, 0, 0, 294,
	295, 296, 297, 298, 671, 0, 0, 0, 0, 0,
	669, 0, 0, 0, 0, 667, 668, 702, 691, 692,
	689, 690, 681, 0, 677, 1899, 0, 0, 0, 680,
	0, 0, 0, 143, 144, 0, 145, 0, 0, 0,
	0, 719, 684, 0, 0, 0, 146, 147, 148, 300,
	734, 302, 735, 149, 736, 737, 0, 150, 306, 307,
	151, 152, 687, 718, 738, 739, 310, 0, 153, 730,
	0, 710, 0, 154, 155, 156, 0, 157, 0, 158,
	159, 160, 0, 404, 161, 162, 163, 0, 711, 712,
	714, 0, 713, 715, 164, 165, 357, 166, 740, 167,
	741, 742, 0, 168, 0, 169, 0, 170, 0, 0,
	733, 172, 0, 173, 0, 0, 0, 675, 174, 175,
	176, 720, 721, 698, 0, 0, 177, 178, 743, 744,
	745, 0, 179, 0, 180, 0, 0, 405, 0, 181,
	731, 0, 322, 0, 182, 183, 184, 185, 186, 727,
	729, 407, 0, 190, 0, 187, 0, 406, 188, 746,
	189, 747, 748, 749, 750, 751, 0, 709, 0, 408,
	191, 192, 193, 409, 194, 195, 196, 0, 198, 197,
	0, 732, 410, 199, 411, 0, 200, 0, 0, 201,
	0, 202, 203, 204, 206, 333, 205, 412, 207, 208,
	210, 209, 670, 0, 699, 728, 211, 752, 212, 213,
	0, 214, 0, 0, 215, 0, 0, 216, 336, 413,
	217, 414, 722, 218, 219, 220, 221, 222, 0, 223,
	723, 224, 339, 225, 0, 226, 227, 228, 229, 230,
	753, 231, 232, 0, 233, 234, 235, 236, 237, 239,
	240, 238, 241, 242, 243, 244, 0, 245, 415, 246,
	247, 676, 248, 0, 252, 253, 254, 255, 0, 257,
	342, 256, 258, 259, 716, 260, 249, 250, 261, 416,
	262, 754, 344, 263, 0, 270, 264, 265, 251, 266,
	269, 755, 267, 268, 724, 0, 271, 0, 272, 273,
	274, 275, 276, 277, 278, 0, 347, 756, 757, 0,
	0, 279, 280, 725, 726, 697, 281, 282, 283, 284,
	0, 0, 285, 286, 287, 288, 717, 289, 0, 352,
	290, 291, 292, 353, 758, 1848, 0, 293, 0, 0,
	0, 0, 294, 295, 296, 297, 298, 671, 0, 0,
	0, 0, 0, 669, 0, 0, 0, 0, 667, 668,
	702, 691, 692, 689, 690, 681, 0, 677, 0, 0,
	0, 0, 680, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 719, 684, 0, 0, 0, 146,
	147, 148, 300, 734, 302, 735, 149, 736, 737, 0,
	150, 306, 307, 151, 152, 687, 718, 738, 739, 310,
	0, 153, 730, 0, 710, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 404, 161, 162, 163,
	0, 711, 712, 714, 0, 713, 715, 164, 165, 357,
	166, 740, 167, 741, 742, 0, 168, 0, 169, 0,
	170, 0, 0, 733, 172, 0, 173, 0, 0, 0,
	675, 174, 175, 176, 720, 721, 698, 0, 0, 177,
	178, 743, 744, 745, 0, 179, 0, 180, 0, 0,
	405, 0, 181, 731, 0, 322, 0, 182, 183, 184,
	185, 186, 727, 729, 407, 0, 190, 0, 187, 0,
	406, 188, 746, 189, 747, 748, 749, 750, 751, 0,
	709, 0, 408, 191, 192, 193, 409, 194, 195, 196,
	0, 198, 197, 0, 732, 410, 199, 411, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	412, 207, 208, 210, 209, 670, 0, 699, 728, 211,
	752, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 336, 413, 217, 414, 722, 218, 219, 220, 221,
	222, 0, 223, 723, 224, 339, 225, 0, 226, 227,
	228, 229, 230, 753, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 415, 246, 247, 676, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 716, 260, 249,
	250, 261, 416, 262, 754, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 755, 267, 268, 724, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	756, 757, 0, 0, 279, 280, 725, 726, 697, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 717,
	289, 0, 352, 290, 291, 292, 353, 758, 0, 0,
	293, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	671, 0, 0, 0, 0, 0, 669, 0, 0, 0,
	0, 667, 668, 702, 691, 692, 689, 690, 681, 0,
	677, 1838, 0, 0, 0, 680, 0, 0, 0, 143,
	144, 0, 145, 0, 0, 0, 0, 719, 684, 0,
	0, 0, 146, 147, 148, 300, 734, 302, 735, 149,
	736, 737, 0, 150, 306, 307, 151, 152, 687, 718,
	738, 739, 310, 0, 153, 730, 0, 710, 0, 154,
	155, 156, 0, 157, 0, 158, 159, 160, 0, 404,
	161, 162, 163, 0, 711, 712, 714, 0, 713, 715,
	164, 165, 357, 166, 740, 167, 741, 742, 893, 168,
	0, 169, 0, 170, 0, 0, 733, 172, 0, 173,
	0, 0, 0, 675, 174, 175, 176, 720, 721, 698,
	0, 0, 177, 178, 743, 744, 745, 0, 179, 0,
	180, 0, 0, 405, 0, 181, 731, 0, 322, 0,
	182, 183, 184, 185, 186, 727, 729, 407, 0, 190,
	0, 187, 0, 406, 188, 746, 189, 747, 748, 749,
	750, 751, 0, 709, 0, 408, 191, 192, 193, 409,
	194, 195, 196, 0, 198, 197, 0, 732, 410, 199,
	411, 0, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 333, 205, 412, 207, 208, 210, 209, 670, 0,
	699, 728, 211, 752, 212, 213, 0, 214, 0, 0,
	215, 0, 0, 216, 336, 413, 217, 414, 722, 218,
	219, 220, 221, 222, 0, 223, 723, 224, 339, 225,
	0, 226, 227, 228, 229, 230, 753, 231, 232, 0,
	233, 234, 235, 236, 237, 239, 240, 238, 241, 242,
	243, 244, 0, 245, 415, 246, 247, 676, 248, 0,
	252, 253, 254, 255, 0, 257, 342, 256, 258, 259,
	716, 260, 249, 250, 261, 416, 262, 754, 344, 263,
	0, 270, 264, 265, 251, 266, 269, 755, 267, 268,
	724, 0, 271, 0, 272, 273, 274, 275, 276, 277,
	278, 0, 347, 756, 757, 0, 0, 279, 280, 725,
	726, 697, 281, 282, 283, 284, 0, 0, 285, 286,
	287, 288, 717, 289, 0, 352, 290, 291, 292, 353,
	758, 0, 0, 293, 0, 0, 0, 0, 294, 295,
	296, 297, 298, 671, 0, 0, 0, 0, 0, 669,
	0, 0, 0, 0, 667, 668, 702, 691, 692, 689,
	690, 681, 0, 677, 0, 0, 0, 0, 680, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	719, 684, 0, 0, 0, 146, 147, 148, 300, 734,
	302, 735, 149, 736, 737, 0, 150, 306, 307, 151,
	152, 687, 718, 738, 739, 310, 0, 153, 730, 0,
	710, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 404, 161, 162, 163, 0, 711, 712, 714,
	0, 713, 715, 164, 165, 357, 166, 740, 167, 741,
	742, 0, 168, 0, 169, 0, 170, 0, 0, 733,
	172, 0, 173, 0, 0, 0, 675, 174, 175, 176,
	720, 721, 698, 0, 0, 177, 178, 743, 744, 745,
	0, 179, 0, 180, 0, 1421, 405, 0, 181, 731,
	0, 322, 0, 182, 183, 184, 185, 186, 727, 729,
	407, 0, 190, 0, 187, 0, 406, 188, 746, 189,
	747, 748, 749, 750, 751, 0, 709, 0, 408, 191,
	192, 193, 409, 194, 195, 196, 0, 198, 197, 0,
	732, 410, 199, 411, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 333, 205, 412, 207, 208, 210,
	209, 670, 0, 699, 728, 211, 752, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 336, 413, 217,
	414, 722, 218, 219, 220, 221, 222, 0, 223, 723,
	224, 339, 225, 0, 226, 227, 228, 229, 230, 753,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 415, 246, 247,
	676, 248, 0, 252, 253, 254, 255, 0, 257, 342,
	256, 258, 259, 716, 260, 249, 250, 261, 416, 262,
	754, 344, 263, 0, 270, 264, 265, 251, 266, 269,
	755, 267, 268, 724, 0, 271, 0, 272, 273, 274,
	275, 276, 277, 278, 0, 347, 756, 757, 0, 0,
	279, 280, 725, 726, 697, 281, 282, 283, 284, 0,
	0, 285, 286, 287, 288, 717, 289, 0, 352, 290,
	291, 292, 353, 758, 0, 0, 293, 0, 0, 0,
	0, 294, 295, 296, 297, 298, 671, 0, 0, 0,
	0, 0, 669, 0, 0, 0, 0, 667, 668, 702,
	691, 692, 689, 690, 681, 0, 677, 0, 0, 0,
	0, 680, 0, 0, 0, 143, 144, 0, 145, 0,
	0, 0, 0, 719, 684, 0, 0, 0, 146, 147,
	148, 300, 734, 302, 735, 149, 736, 737, 0, 150,
	306, 307, 151, 152, 687, 718, 738, 739, 310, 0,
	153, 730, 0, 710, 0, 154, 155, 156, 0, 157,
	0, 158, 159, 160, 0, 404, 161, 162, 163, 0,
	711, 712, 714, 0, 713, 715, 164, 165, 357, 166,
	740, 167, 741, 742, 0, 168, 0, 169, 0, 170,
	0, 0, 733, 172, 0, 173, 0, 0, 0, 675,
	174, 175, 176, 720, 721, 698, 0, 0, 177, 178,
	743, 744, 745, 0, 179, 0, 180, 0, 0, 405,
	0, 181, 731, 0, 322, 0, 182, 183, 184, 185,
	186, 727, 729, 407, 0, 190, 0, 187, 0, 406,
	188, 746, 189, 747, 748, 749, 750, 751, 0, 709,
	0, 408, 191, 192, 193, 409, 194, 195, 196, 0,
	198, 197, 0, 732, 410, 199, 411, 0, 200, 0,
	0, 201, 0, 202, 203, 204, 206, 333, 205, 412,
	207, 208, 210, 209, 670, 0, 699, 728, 211, 752,
	212, 213, 0, 214, 0, 0, 215, 0, 0, 216,
	336, 413, 217, 414, 722, 218, 219, 220, 221, 222,
	0, 223, 723, 224, 339, 225, 0, 226, 227, 228,
	229, 230, 753, 231, 232, 0, 233, 234, 235, 236,
	237, 239, 240, 238, 241, 242, 243, 244, 0, 245,
	415, 246, 247, 676, 248, 0, 252, 253, 254, 255,
	0, 257, 342, 256, 258, 259, 716, 260, 249, 250,
	261, 416, 262, 754, 344, 263, 0, 270, 264, 265,
	251, 266, 269, 755, 267, 268, 724, 0, 271, 0,
	272, 273, 274, 275, 276, 277, 278, 0, 347, 756,
	757, 0, 0, 279, 280, 725, 726, 697, 281, 282,
	283, 284, 0, 0, 285, 286, 287, 288, 717, 289,
	0, 352, 290, 291, 292, 353, 758, 0, 0, 293,
	0, 0, 0, 0, 294, 295, 296, 297, 298, 671,
	0, 0, 0, 0, 0, 669, 0, 0, 0, 0,
	667, 668, 887, 702, 691, 692, 689, 690, 681, 677,
	0, 0, 0, 0, 680, 0, 0, 0, 0, 143,
	144, 0, 145, 0, 0, 0, 0, 719, 684, 0,
	0, 0, 146, 147, 148, 300, 734, 302, 735, 149,
	736, 737, 0, 150, 306, 307, 151, 152, 687, 718,
	738, 739, 310, 0, 153, 730, 0, 710, 0, 154,
	155, 156, 0, 157, 0, 158, 159, 160, 0, 404,
	161, 162, 163, 0, 711, 712, 714, 0, 713, 715,
	164, 165, 357, 166, 740, 167, 741, 742, 0, 168,
	0, 169, 0, 170, 0, 0, 733, 172, 0, 173,
	0, 0, 0, 675, 174, 175, 176, 720, 721, 698,
	0, 0, 177, 178, 743, 744, 745, 0, 179, 0,
	180, 0, 0, 405, 0, 181, 731, 0, 322, 0,
	182, 183, 184, 185, 186, 727, 729, 407, 0, 190,
	0, 187, 0, 406, 188, 746, 189, 747, 748, 749,
	750, 751, 0, 709, 0, 408, 191, 192, 193, 409,
	194, 195, 196, 0, 198, 197, 0, 732, 410, 199,
	411, 0, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 333, 205, 412, 207, 208, 210, 209, 670, 0,
	699, 728, 211, 752, 212, 213, 0, 214, 0, 0,
	215, 0, 0, 216, 336, 413, 217, 414, 722, 218,
	219, 220, 221, 222, 0, 223, 723, 224, 339, 225,
	0, 226, 227, 228, 229, 230, 753, 231, 232, 0,
	233, 234, 235, 236, 237, 239, 240, 238, 241, 242,
	243, 244, 0, 245, 415, 246, 247, 676, 248, 0,
	252, 253, 254, 255, 0, 257, 342, 256, 258, 259,
	716, 260, 249, 250, 261, 416, 262, 754, 344, 263,
	0, 270, 264, 265, 251, 266, 269, 755, 267, 268,
	724, 0, 271, 0, 272, 273, 274, 275, 276, 277,
	278, 0, 347, 756, 757, 0, 0, 279, 280, 725,
	726, 697, 281, 282, 283, 284, 0, 0, 285, 286,
	287, 288, 717, 289, 0, 352, 290, 291, 292, 353,
	758, 0, 0, 293, 0, 0, 0, 0, 294, 295,
	296, 297, 298, 671, 0, 0, 0, 0, 0, 669,
	0, 0, 0, 0, 667, 668, 702, 691, 692, 689,
	690, 681, 0, 677, 1356, 0, 0, 0, 680, 0,
	0, 0, 143, 144, 1154, 145, 0, 0, 0, 0,
	719, 684, 0, 0, 0, 146, 147, 148, 300, 734,
	302, 735, 149, 736, 737, 0, 150, 306, 307, 151,
	152, 687, 718, 738, 739, 310, 0, 153, 730, 0,
	710, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 404, 161, 162, 163, 0, 711, 712, 714,
	0, 713, 715, 164, 165, 357, 166, 740, 167, 741,
	742, 0, 168, 0, 169, 0, 170, 0, 0, 733,
	172, 0, 173, 0, 0, 0, 675, 174, 175, 176,
	720, 721, 698, 0, 0, 177, 178, 743, 744, 745,
	0, 179, 0, 180, 0, 0, 405, 0, 181, 731,
	0, 322, 0, 182, 183, 184, 185, 186, 727, 729,
	407, 0, 190, 0, 187, 0, 406, 188, 746, 189,
	747, 748, 749, 750, 751, 0, 709, 0, 408, 191,
	192, 193, 409, 194, 195, 196, 0, 198, 197, 0,
	732, 410, 199, 411, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 333, 205, 412, 207, 208, 210,
	209, 670, 0, 699, 728, 211, 752, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 336, 413, 217,
	414, 722, 218, 219, 220, 221, 222, 0, 223, 723,
	224, 339, 225, 0, 226, 227, 228, 229, 230, 753,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 415, 246, 247,
	676, 248, 0, 252, 253, 254, 255, 0, 257, 342,
	256, 258, 259, 716, 260, 249, 250, 261, 416, 262,
	754, 344, 263, 0, 270, 264, 265, 251, 266, 269,
	755, 267, 268, 724, 0, 271, 0, 272, 273, 274,
	275, 276, 277, 278, 0, 347, 756, 757, 0, 0,
	279, 280, 725, 726, 697, 281, 282, 283, 284, 0,
	0, 285, 286, 287, 288, 717, 289, 0, 352, 290,
	291, 292, 353, 758, 0, 0, 293, 0, 0, 0,
	0, 294, 295, 296, 297, 298, 671, 0, 0, 0,
	0, 0, 669, 0, 0, 0, 0, 667, 668, 702,
	691, 692, 689, 690, 681, 0, 677, 0, 0, 0,
	0, 680, 0, 0, 0, 143, 144, 0, 145, 0,
	0, 0, 0, 719, 684, 0, 0, 0, 146, 147,
	148, 300, 734, 302, 735, 149, 736, 737, 0, 150,
	306, 307, 151, 152, 687, 718, 738, 739, 310, 0,
	153, 730, 0, 710, 0, 154, 155, 156, 0, 157,
	0, 158, 159, 160, 0, 404, 161, 162, 2259, 0,
	711, 712, 714, 0, 713, 715, 164, 165, 357, 166,
	740, 167, 741, 742, 0, 168, 0, 169, 0, 170,
	0, 0, 733, 172, 0, 173, 0, 0, 0, 675,
	174, 175, 176, 720, 721, 698, 0, 0, 177, 178,
	743, 744, 745, 0, 179, 0, 180, 0, 0, 405,
	0, 181, 731, 0, 322, 0, 182, 183, 184, 185,
	186, 727, 729, 407, 0, 190, 0, 187, 0, 406,
	188, 746, 189, 747, 748, 749, 750, 751, 0, 709,
	0, 408, 191, 192, 193, 409, 194, 195, 196, 0,
	198, 197, 0, 732, 410, 199, 411, 0, 200, 0,
	0, 201, 0, 202, 203, 204, 206, 333, 205, 412,
	207, 208, 210, 209, 670, 0, 699, 728, 211, 752,
	212, 213, 0, 214, 0, 0, 215, 0, 0, 216,
	336, 413, 217, 414, 722, 218, 219, 220, 221, 222,
	0, 223, 723, 224, 339, 225, 0, 226, 227, 228,
	229, 230, 753, 231, 232, 0, 233, 234, 235, 236,
	237, 239, 240, 238, 241, 242, 243, 244, 0, 245,
	415, 246, 247, 676, 248, 0, 252, 253, 254, 255,
	0, 257, 342, 256, 258, 259, 716, 260, 249, 250,
	261, 416, 262, 754, 344, 263, 0, 270, 264, 265,
	251, 266, 269, 755, 267, 268, 724, 0, 271, 0,
	272, 273, 274, 275, 276, 277, 278, 0, 347, 756,
	757, 0, 0, 279, 280, 725, 726, 697, 281, 282,
	2258, 284, 0, 0, 285, 286, 287, 288, 717, 289,
	0, 352, 290, 291, 292, 353, 758, 0, 0, 293,
	0, 0, 0, 0, 294, 295, 296, 297, 298, 671,
	0, 0, 0, 0, 0, 669, 0, 0, 0, 0,
	667, 668, 702, 691, 692, 689, 690, 681, 0, 677,
	0, 0, 0, 0, 680, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 719, 684, 0, 0,
	0, 146, 147, 148, 300, 734, 302, 735, 149, 736,
	737, 0, 150, 306, 307, 151, 152, 687, 718, 738,
	739, 310, 0, 153, 730, 0, 710, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 404, 161,
	162, 163, 0, 711, 712, 714, 0, 713, 715, 164,
	165, 357, 166, 740, 167, 741, 742, 0, 168, 0,
	169, 0, 170, 0, 0, 733, 172, 0, 173, 0,
	0, 0, 675, 174, 175, 176, 720, 721, 698, 0,
	0, 177, 178, 743, 744, 745, 0, 179, 0, 180,
	0, 0, 405, 0, 181, 731, 0, 322, 0, 182,
	183, 184, 185, 186, 727, 729, 407, 0, 190, 0,
	187, 0, 406, 188, 746, 189, 747, 748, 749, 750,
	751, 0, 709, 0, 408, 191, 192, 193, 409, 194,
	195, 196, 0, 198, 197, 0, 732, 410, 199, 411,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	333, 205, 412, 207, 208, 210, 209, 670, 0, 699,
	728, 211, 752, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 336, 413, 217, 414, 722, 218, 219,
	220, 221, 222, 0, 223, 723, 224, 339, 225, 0,
	226, 227, 228, 229, 230, 753, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 415, 246, 247, 676, 248, 0, 252,
	253, 254, 255, 0, 257, 342, 256, 258, 259, 716,
	260, 249, 250, 261, 416, 262, 754, 344, 263, 0,
	270, 264, 265, 251, 266, 269, 755, 267, 268, 724,
	0, 271, 0, 272, 273, 274, 275, 276, 277, 278,
	0, 347, 756, 757, 0, 0, 279, 280, 725, 726,
	697, 281, 282, 283, 284, 0, 0, 285, 286, 287,
	288, 717, 289, 0, 352, 290, 291, 292, 353, 758,
	0, 0, 293, 0, 0, 0, 0, 294, 295, 296,
	297, 298, 671, 0, 0, 0, 0, 0, 669, 0,
	0, 0, 0, 667, 668, 702, 691, 692, 689, 690,
	681, 0, 677, 0, 0, 0, 0, 680, 0, 0,
	0, 143, 144, 0, 145, 0, 0, 0, 0, 719,
	684, 0, 0, 0, 146, 147, 148, 2257, 734, 302,
	735, 149, 736, 737, 0, 150, 306, 307, 151, 152,
	687, 718, 738, 739, 310, 0, 153, 730, 0, 710,
	0, 154, 155, 156, 0, 157, 0, 158, 159, 160,
	0, 404, 161, 162, 2259, 0, 711, 712, 714, 0,
	713, 715, 164, 165, 357, 166, 740, 167, 741, 742,
	0, 168, 0, 169, 0, 170, 0, 0, 733, 172,
	0, 173, 0, 0, 0, 675, 174, 175, 176, 720,
	721, 698, 0, 0, 177, 178, 743, 744, 745, 0,
	179, 0, 180, 0, 0, 405, 0, 181, 731, 0,
	322, 0, 182, 183, 184, 185, 186, 727, 729, 407,
	0, 190, 0, 187, 0, 406, 188, 746, 189, 747,
	748, 749, 750, 751, 0, 709, 0, 408, 191, 192,
	193, 409, 194, 195, 196, 0, 198, 197, 0, 732,
	410, 199, 411, 0, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 333, 205, 412, 207, 208, 210, 209,
	670, 0, 699, 728, 211, 752, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 336, 413, 217, 414,
	722, 218, 219, 220, 221, 222, 0, 223, 723, 224,
	339, 225, 0, 226, 227, 228, 229, 230, 753, 231,
	232, 0, 233, 234, 235, 236, 237, 239, 240, 238,
	241, 242, 243, 244, 0, 245, 415, 246, 247, 676,
	248, 0, 252, 253, 254, 255, 0, 257, 342, 256,
	258, 259, 716, 260, 249, 250, 261, 416, 262, 754,
	344, 263, 0, 270, 264, 265, 251, 266, 269, 755,
	267, 268, 724, 0, 271, 0, 272, 273, 274, 275,
	276, 277, 278, 0, 347, 756, 757, 0, 0, 279,
	280, 725, 726, 697, 281, 282, 2258, 284, 0, 0,
	285, 286, 287, 288, 717, 289, 0, 352, 290, 291,
	292, 353, 758, 0, 0, 293, 0, 0, 0, 0,
	294, 295, 296, 297, 298, 671, 0, 0, 0, 0,
	0, 669, 0, 0, 0, 0, 667, 668, 1393, 691,
	692, 689, 690, 681, 0, 677, 0, 0, 0, 0,
	680, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 719, 684, 0, 0, 0, 146, 147, 148,
	300, 734, 302, 735, 149, 736, 737, 0, 150, 306,
	307, 151, 152, 687, 718, 738, 739, 310, 0, 153,
	730, 0, 710, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 404, 161, 162, 163, 0, 711,
	712, 714, 0, 713, 715, 164, 165, 357, 166, 740,
	1396, 741, 742, 0, 168, 0, 169, 0, 170, 0,
	0, 733, 172, 0, 173, 0, 0, 0, 675, 174,
	175, 176, 720, 721, 698, 0, 0, 177, 178, 743,
	744, 745, 0, 179, 0, 180, 0, 0, 405, 0,
	181, 731, 0, 322, 0, 182, 183, 1397, 185, 186,
	727, 729, 407, 0, 190, 0, 187, 0, 406, 188,
	746, 189, 747, 748, 749, 750, 751, 0, 709, 0,
	408, 191, 192, 193, 409, 194, 195, 196, 0, 198,
	197, 0, 732, 410, 199, 411, 0, 200, 0, 0,
	201, 0, 202, 1398, 1395, 206, 333, 205, 412, 207,
	208, 210, 209, 670, 0, 699, 728, 211, 752, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 336,
	413, 217, 414, 722, 218, 219, 220, 221, 222, 0,
	223, 723, 224, 339, 225, 0, 226, 227, 228, 229,
	230, 753, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 415,
	246, 247, 676, 248, 0, 252, 253, 254, 1399, 0,
	257, 342, 256, 258, 259, 716, 260, 249, 250, 261,
	416, 262, 754, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 755, 267, 268, 724, 0, 271, 0, 272,
	273, 274, 275, 276, 277, 278, 0, 347, 756, 757,
	0, 0, 279, 280, 725, 726, 697, 281, 282, 283,
	284, 0, 0, 285, 286, 287, 288, 717, 289, 0,
	352, 290, 291, 292, 353, 758, 0, 0, 293, 0,
	0, 0, 0, 294, 295, 296, 1394, 298, 671, 0,
	0, 0, 0, 0, 669, 0, 0, 0, 0, 667,
	668, 702, 691, 692, 689, 690, 681, 0, 677, 0,
	0, 0, 0, 680, 0, 0, 0, 143, 144, 0,
	145, 0, 0, 0, 0, 719, 684, 0, 0, 0,
	146, 147, 148, 300, 734, 302, 735, 149, 736, 737,
	0, 150, 306, 307, 151, 152, 687, 718, 738, 739,
	310, 0, 153, 730, 0, 710, 0, 154, 155, 156,
	0, 157, 0, 158, 159, 160, 0, 404, 161, 162,
	163, 0, 711, 712, 714, 0, 713, 715, 164, 165,
	357, 166, 740, 167, 741, 742, 0, 168, 0, 169,
	0, 170, 0, 0, 733, 172, 0, 173, 0, 0,
	0, 675, 174, 175, 176, 720, 721, 698, 0, 0,
	177, 178, 743, 744, 745, 0, 179, 0, 180, 0,
	0, 405, 0, 181, 731, 0, 322, 0, 182, 183,
	184, 185, 186, 727, 729, 407, 0, 190, 0, 187,
	0, 406, 188, 746, 189, 747, 748, 749, 750, 751,
	0, 709, 0, 408, 191, 192, 193, 409, 194, 195,
	196, 0, 198, 197, 0, 732, 410, 199, 411, 0,
	200, 0, 0, 201, 0, 202, 203, 204, 206, 333,
	205, 412, 207, 208, 210, 209, 0, 0, 699, 728,
	211, 752, 212, 213, 0, 214, 0, 0, 215, 0,
	0, 216, 336, 413, 217, 414, 722, 218, 219, 220,
	221, 222, 0, 223, 723, 224, 339, 225, 0, 226,
	227, 228, 229, 230, 753, 231, 232, 0, 233, 234,
	235, 236, 237, 239, 240, 238, 241, 242, 243, 244,
	0, 245, 415, 246, 247, 1411, 248, 0, 252, 253,
	254, 255, 0, 257, 342, 256, 258, 259, 716, 260,
	249, 250, 261, 416, 262, 754, 344, 263, 0, 270,
	264, 265, 251, 266, 269, 755, 267, 268, 724, 0,
	271, 0, 272, 273, 274, 275, 276, 277, 278, 0,
	347, 756, 757, 0, 0, 279, 280, 725, 726, 697,
	281, 282, 283, 284, 0, 0, 285, 286, 287, 288,
	717, 289, 0, 352, 290, 291, 292, 353, 758, 0,
	0, 293, 0, 0, 0, 0, 294, 295, 296, 297,
	298, 0, 0, 0, 0, 0, 0, 1409, 0, 0,
	0, 0, 1407, 1408, 702, 691, 692, 689, 690, 681,
	0, 1410, 0, 0, 0, 0, 680, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 719, 684,
	0, 0, 0, 146, 147, 148, 300, 734, 302, 735,
	149, 736, 737, 0, 150, 306, 307, 151, 152, 0,
	718, 738, 739, 310, 0, 153, 730, 0, 710, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	404, 161, 162, 163, 0, 711, 712, 714, 0, 713,
	715, 164, 165, 357, 166, 740, 167, 741, 742, 0,
	168, 0, 169, 0, 170, 0, 0, 733, 172, 0,
	173, 0, 0, 0, 315, 174, 175, 176, 720, 721,
	698, 0, 0, 177, 178, 743, 744, 745, 0, 179,
	0, 180, 0, 0, 405, 0, 181, 731, 0, 322,
	0, 182, 183, 184, 185, 186, 727, 729, 407, 0,
	190, 0, 187, 0, 406, 188, 746, 189, 747, 748,
	749, 750, 751, 0, 709, 0, 408, 191, 192, 193,
	409, 194, 195, 196, 0, 198, 197, 0, 732, 410,
	199, 411, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 333, 205, 412, 207, 208, 210, 209, 0,
	0, 699, 728, 211, 752, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 336, 413, 217, 414, 722,
	218, 219, 220, 221, 222, 0, 223, 723, 224, 339,
	225, 0, 226, 227, 228, 229, 230, 753, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 415, 246, 247, 1411, 248,
	0, 252, 253, 254, 255, 0, 257, 342, 256, 258,
	259, 716, 260, 249, 250, 261, 416, 262, 754, 344,
	263, 0, 270, 264, 265, 251, 266, 269, 755, 267,
	268, 724, 0, 271, 0, 272, 273, 274, 275, 276,
	277, 278, 0, 347, 756, 757, 0, 0, 279, 280,
	725, 726, 697, 281, 282, 283, 284, 0, 0, 285,
	286, 287, 288, 717, 289, 0, 352, 290, 291, 292,
	353, 758, 0, 0, 293, 0, 0, 0, 0, 294,
	295, 296, 297, 298, 0, 0, 702, 691, 692, 689,
	690, 681, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 144, 1410, 145, 0, 0, 0, 680,
	719, 684, 0, 0, 0, 146, 147, 148, 0, 734,
	302, 735, 149, 736, 737, 0, 150, 306, 307, 151,
	152, 687, 718, 738, 739, 310, 0, 153, 730, 0,
	710, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 404, 161, 162, 2259, 0, 711, 712, 714,
	0, 713, 715, 164, 165, 357, 166, 740, 167, 741,
	742, 0, 168, 0, 169, 0, 170, 0, 0, 733,
	172, 0, 173, 0, 0, 0, 675, 174, 175, 176,
	720, 721, 698, 0, 0, 177, 178, 743, 744, 745,
	0, 179, 0, 180, 0, 0, 405, 0, 181, 731,
	0, 322, 0, 182, 183, 184, 185, 186, 727, 729,
	0, 0, 190, 0, 187, 0, 406, 188, 746, 189,
	747, 748, 749, 750, 751, 0, 709, 0, 0, 191,
	192, 193, 409, 194, 195, 196, 0, 198, 197, 0,
	732, 410, 199, 0, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 333, 205, 412, 207, 208, 210,
	209, 670, 0, 699, 728, 211, 752, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 336, 413, 217,
	414, 722, 218, 219, 220, 221, 222, 0, 223, 723,
	224, 339, 225, 0, 226, 227, 228, 229, 230, 753,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 415, 246, 247,
	676, 248, 0, 252, 253, 254, 255, 0, 257, 342,
	256, 258, 259, 716, 260, 249, 250, 261, 0, 262,
	754, 344, 263, 0, 270, 264, 265, 251, 266, 269,
	755, 267, 268, 724, 0, 271, 0, 272, 273, 274,
	275, 276, 277, 278, 0, 347, 756, 757, 0, 0,
	279, 280, 725, 726, 697, 281, 282, 2258, 284, 0,
	0, 285, 286, 287, 288, 717, 289, 0, 352, 290,
	291, 292, 353, 758, 0, 0, 293, 0, 0, 0,
	0, 294, 295, 296, 297, 298, 702, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 667, 668, 0,
	0, 0, 143, 144, 0, 145, 677, 0, 0, 0,
	719, 680, 0, 0, 0, 146, 147, 148, 300, 301,
	302, 303, 149, 304, 305, 0, 150, 306, 307, 151,
	152, 0, 718, 308, 309, 310, 0, 153, 730, 0,
	710, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 404, 161, 162, 163, 0, 711, 712, 714,
	0, 713, 715, 164, 165, 357, 166, 312, 167, 313,
	314, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 315, 174, 175, 176,
	720, 721, 0, 0, 0, 177, 178, 318, 319, 320,
	0, 179, 0, 180, 0, 0, 405, 0, 181, 731,
	0, 322, 0, 182, 183, 184, 185, 186, 727, 729,
	407, 0, 190, 0, 187, 0, 406, 188, 325, 189,
	326, 327, 328, 329, 330, 0, 331, 0, 408, 191,
	192, 193, 409, 194, 195, 196, 0, 198, 197, 0,
	732, 410, 199, 411, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 333, 205, 412, 207, 208, 210,
	209, 0, 0, 0, 728, 211, 335, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 336, 413, 217,
	414, 722, 218, 219, 220, 221, 222, 0, 223, 723,
	224, 339, 225, 0, 226, 227, 228, 229, 230, 340,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 415, 246, 247,
	341, 248, 0, 252, 253, 254, 255, 0, 257, 342,
	256, 258, 259, 716, 260, 249, 250, 261, 416, 262,
	343, 344, 263, 0, 270, 264, 265, 251, 266, 269,
	345, 267, 268, 724, 0, 271, 0, 272, 273, 274,
	275, 276, 277, 278, 0, 347, 348, 349, 0, 0,
	279, 280, 725, 726, 0, 281, 282, 283, 284, 0,
	0, 285, 286, 287, 288, 717, 289, 0, 352, 290,
	291, 292, 353, 354, 0, 0, 293, 0, 572, 0,
	0, 294, 295, 296, 297, 298, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 299, 0, 0, 0, 1817, 146, 147, 148,
	300, 301, 302, 303, 149, 304, 305, 0, 150, 306,
	307, 151, 152, 0, 0, 308, 309, 310, 0, 153,
	311, 0, 403, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 404, 161, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 357, 166, 312,
	167, 313, 314, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 315, 174,
	175, 176, 316, 317, 0, 0, 0, 177, 178, 318,
	319, 320, 0, 179, 0, 180, 0, 0, 405, 0,
	181, 321, 0, 322, 0, 182, 183, 184, 185, 186,
	323, 324, 407, 0, 190, 0, 187, 0, 406, 188,
	325, 189, 326, 327, 328, 329, 330, 0, 331, 0,
	408, 191, 192, 193, 409, 194, 195, 196, 0, 198,
	197, 0, 332, 410, 199, 411, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 333, 205, 412, 207,
	208, 210, 209, 0, 0, 0, 334, 211, 335, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 336,
	413, 217, 414, 337, 218, 219, 220, 221, 222, 0,
	223, 338, 224, 339, 225, 0, 226, 227, 228, 229,
	230, 340, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 415,
	246, 247, 341, 248, 0, 252, 253, 254, 255, 127,
	257, 342, 256, 258, 259, 0, 260, 249, 250, 261,
	416, 262, 343, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 345, 267, 268, 346, 0, 271, 131, 272,
	273, 274, 275, 276, 277, 278, 0, 347, 348, 349,
	0, 0, 279, 280, 350, 351, 0, 281, 282, 283,
	284, 0, 0, 285, 286, 287, 288, 0, 289, 0,
	352, 290, 291, 292, 661, 354, 0, 0, 293, 0,
	0, 0, 125, 294, 295, 296, 297, 298, 0, 126,
	572, 569, 0, 570, 565, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 144, 116, 145,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 146,
	147, 148, 300, 301, 302, 303, 149, 304, 305, 0,
	150, 306, 307, 151, 152, 0, 0, 308, 309, 310,
	0, 153, 311, 0, 403, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 404, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 357,
	166, 312, 167, 313, 314, 1117, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	315, 174, 175, 176, 316, 317, 562, 0, 0, 177,
	178, 318, 319, 320, 0, 179, 0, 180, 0, 0,
	405, 0, 181, 321, 0, 322, 0, 182, 183, 184,
	185, 186, 323, 324, 407, 0, 190, 0, 187, 0,
	406, 188, 325, 189, 326, 327, 328, 329, 330, 0,
	331, 0, 408, 191, 192, 193, 409, 194, 195, 196,
	0, 198, 197, 0, 332, 410, 199, 411, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	412, 207, 208, 210, 209, 0, 0, 0, 334, 211,
	335, 212, 213, 0, 214, 563, 0, 215, 0, 0,
	216, 336, 413, 217, 414, 337, 218, 219, 220, 221,
	222, 0, 223, 338, 224, 339, 225, 0, 226, 227,
	228, 229, 230, 340, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 415, 246, 247, 341, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 0, 260, 249,
	250, 261, 416, 262, 343, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 345, 267, 268, 346, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	348, 349, 0, 0, 279, 280, 350, 351, 561, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 0,
	289, 0, 352, 290, 291, 292, 353, 354, 0, 0,
	293, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	572, 569, 0, 570, 565, 560, 0, 0, 0, 0,
	0, 571, 566, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 146,
	147, 148, 300, 301, 302, 303, 149, 304, 305, 0,
	150, 306, 307, 151, 152, 0, 0, 308, 309, 310,
	0, 153, 311, 0, 403, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 404, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 357,
	166, 312, 167, 313, 314, 1114, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	315, 174, 175, 176, 316, 317, 562, 0, 0, 177,
	178, 318, 319, 320, 0, 179, 0, 180, 0, 0,
	405, 0, 181, 321, 0, 322, 0, 182, 183, 184,
	185, 186, 323, 324, 407, 0, 190, 0, 187, 0,
	406, 188, 325, 189, 326, 327, 328, 329, 330, 0,
	331, 0, 408, 191, 192, 193, 409, 194, 195, 196,
	0, 198, 197, 0, 332, 410, 199, 411, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	412, 207, 208, 210, 209, 0, 0, 0, 334, 211,
	335, 212, 213, 0, 214, 563, 0, 215, 0, 0,
	216, 336, 413, 217, 414, 337, 218, 219, 220, 221,
	222, 0, 223, 338, 224, 339, 225, 0, 226, 227,
	228, 229, 230, 340, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 415, 246, 247, 341, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 0, 260, 249,
	250, 261, 416, 262, 343, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 345, 267, 268, 346, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	348, 349, 0, 0, 279, 280, 350, 351, 561, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 0,
	289, 0, 352, 290, 291, 292, 353, 354, 0, 0,
	293, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	572, 569, 0, 570, 565, 560, 0, 0, 0, 0,
	0, 571, 566, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 146,
	147, 148, 300, 301, 302, 303, 149, 304, 305, 0,
	150, 306, 307, 151, 152, 0, 0, 308, 309, 310,
	0, 153, 311, 0, 403, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 404, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 357,
	166, 312, 167, 313, 314, 793, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	315, 174, 175, 176, 316, 317, 562, 0, 0, 177,
	178, 318, 319, 320, 0, 179, 0, 180, 0, 0,
	405, 0, 181, 321, 0, 322, 0, 182, 183, 184,
	185, 186, 323, 324, 407, 0, 190, 0, 187, 0,
	406, 188, 325, 189, 326, 327, 328, 329, 330, 0,
	331, 0, 408, 191, 192, 193, 409, 194, 195, 196,
	0, 198, 197, 0, 332, 410, 199, 411, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	412, 207, 208, 210, 209, 0, 0, 0, 334, 211,
	335, 212, 213, 0, 214, 563, 0, 215, 0, 0,
	216, 336, 413, 217, 414, 337, 218, 219, 220, 221,
	222, 0, 223, 338, 224, 339, 225, 0, 226, 227,
	228, 229, 230, 340, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 415, 246, 247, 341, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 0, 260, 249,
	250, 261, 416, 262, 343, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 345, 267, 268, 346, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	348, 349, 0, 0, 279, 280, 350, 351, 561, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 0,
	289, 0, 352, 290, 291, 292, 353, 354, 0, 0,
	293, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	572, 569, 0, 570, 565, 560, 0, 0, 0, 0,
	0, 571, 566, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 146,
	147, 148, 300, 301, 302, 303, 149, 304, 305, 0,
	150, 306, 307, 151, 152, 0, 0, 308, 309, 310,
	0, 153, 311, 0, 403, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 404, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 357,
	166, 312, 167, 313, 314, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	315, 174, 175, 176, 316, 317, 562, 0, 0, 177,
	178, 318, 319, 320, 0, 179, 0, 180, 0, 0,
	405, 0, 181, 321, 0, 322, 0, 182, 183, 184,
	185, 186, 323, 324, 407, 0, 190, 0, 187, 0,
	406, 188, 325, 189, 326, 327, 328, 329, 330, 0,
	331, 0, 408, 191, 192, 193, 409, 194, 195, 196,
	0, 198, 197, 0, 332, 410, 199, 411, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	412, 207, 208, 210, 209, 0, 0, 0, 334, 211,
	335, 212, 213, 0, 214, 563, 0, 215, 0, 0,
	216, 336, 413, 217, 414, 337, 218, 219, 220, 221,
	222, 0, 223, 338, 224, 339, 225, 0, 226, 227,
	228, 229, 230, 340, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 415, 246, 247, 341, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 0, 260, 249,
	250, 261, 416, 262, 343, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 345, 267, 268, 346, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	348, 349, 0, 0, 279, 280, 350, 351, 561, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 0,
	289, 0, 352, 290, 291, 292, 353, 354, 0, 140,
	293, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	0, 0, 0, 0, 0, 143, 144, 0, 145, 0,
	0, 571, 566, 299, 0, 0, 0, 0, 146, 147,
	148, 300, 301, 302, 303, 149, 304, 305, 0, 150,
	306, 307, 151, 152, 0, 0, 308, 309, 310, 0,
	153, 311, 0, 0, 0, 154, 155, 156, 0, 157,
	0, 158, 159, 160, 0, 0, 161, 162, 163, 0,
	0, 0, 0, 0, 0, 0, 164, 165, 357, 166,
	312, 167, 313, 314, 0, 168, 0, 169, 0, 170,
	0, 0, 171, 172, 0, 173, 0, 0, 0, 315,
	174, 175, 176, 316, 317, 0, 0, 0, 177, 178,
	318, 319, 320, 0, 179, 0, 180, 0, 0, 0,
	0, 181, 321, 0, 322, 0, 182, 183, 184, 185,
	186, 323, 324, 0, 0, 190, 0, 187, 0, 0,
	188, 325, 189, 326, 327, 328, 329, 330, 0, 331,
	0, 0, 191, 192, 193, 0, 194, 195, 196, 0,
	198, 197, 0, 332, 0, 199, 0, 0, 200, 0,
	0, 201, 0, 202, 203, 204, 206, 333, 205, 0,
	207, 208, 210, 209, 0, 0, 0, 334, 211, 335,
	212, 213, 0, 214, 0, 632, 215, 0, 0, 216,
	336, 0, 217, 0, 337, 218, 219, 220, 221, 222,
	0, 223, 338, 224, 339, 225, 0, 226, 227, 228,
	229, 230, 340, 231, 232, 0, 233, 234, 235, 236,
	237, 239, 240, 238, 241, 242, 243, 244, 0, 245,
	0, 246, 247, 341, 248, 0, 252, 253, 254, 255,
	127, 257, 342, 256, 258, 259, 0, 260, 249, 250,
	261, 0, 262, 343, 344, 263, 0, 270, 264, 265,
	251, 266, 269, 345, 267, 268, 346, 0, 271, 131,
	272, 273, 274, 275, 276, 277, 278, 0, 347, 348,
	349, 0, 0, 279, 280, 350, 351, 0, 281, 282,
	283, 284, 0, 0, 285, 286, 287, 288, 0, 289,
	0, 352, 290, 291, 292, 661, 354, 0, 0, 293,
	0, 140, 0, 125, 294, 295, 296, 297, 298, 0,
	126, 0, 0, 0, 0, 0, 0, 143, 144, 0,
	145, 0, 0, 0, 0, 299, 0, 626, 0, 631,
	146, 147, 148, 300, 301, 302, 303, 149, 304, 305,
	0, 150, 306, 307, 151, 152, 0, 0, 308, 309,
	310, 0, 153, 311, 0, 0, 0, 154, 155, 156,
	0, 157, 0, 158, 159, 160, 0, 0, 161, 162,
	163, 0, 0, 0, 0, 0, 0, 0, 164, 165,
	357, 166, 312, 167, 313, 314, 0, 168, 0, 169,
	0, 170, 0, 0, 171, 172, 0, 173, 0, 0,
	0, 315, 174, 175, 176, 316, 317, 0, 0, 0,
	177, 178, 318, 319, 320, 0, 179, 0, 180, 0,
	0, 0, 0, 181, 321, 0, 322, 0, 182, 183,
	184, 185, 186, 323, 324, 0, 0, 190, 0, 187,
	0, 0, 188, 325, 189, 326, 327, 328, 329, 330,
	0, 331, 0, 0, 191, 192, 193, 0, 194, 195,
	196, 0, 198, 197, 0, 332, 0, 199, 0, 0,
	200, 0, 0, 201, 0, 202, 203, 204, 206, 333,
	205, 0, 207, 208, 210, 209, 0, 0, 0, 334,
	211, 335, 212, 213, 0, 214, 0, 0, 215, 0,
	0, 216, 336, 0, 217, 0, 337, 218, 219, 220,
	221, 222, 0, 223, 338, 224, 339, 225, 0, 226,
	227, 228, 229, 230, 340, 231, 232, 0, 233, 234,
	235, 236, 237, 239, 240, 238, 241, 242, 243, 244,
	0, 245, 0, 246, 247, 341, 248, 0, 252, 253,
	254, 255, 127, 257, 342, 256, 258, 259, 0, 260,
	249, 250, 261, 0, 262, 343, 344, 263, 0, 270,
	264, 265, 251, 266, 269, 345, 267, 268, 346, 0,
	271, 131, 272, 273, 274, 275, 276, 277, 278, 0,
	347, 348, 349, 0, 0, 279, 280, 350, 351, 0,
	281, 282, 283, 284, 0, 0, 285, 286, 287, 288,
	0, 289, 0, 352, 290, 291, 292, 661, 354, 0,
	0, 293, 0, 140, 0, 125, 294, 295, 296, 297,
	298, 0, 126, 0, 0, 0, 0, 0, 0, 143,
	144, 0, 145, 0, 0, 0, 0, 299, 0, 0,
	0, 116, 146, 147, 148, 300, 301, 302, 303, 149,
	304, 305, 0, 150, 306, 307, 151, 152, 0, 0,
	308, 309, 310, 0, 153, 311, 0, 0, 0, 154,
	155, 156, 0, 157, 0, 158, 159, 160, 0, 0,
	161, 162, 163, 0, 0, 0, 0, 0, 0, 0,
	164, 165, 357, 166, 312, 167, 313, 314, 0, 168,
	0, 169, 0, 170, 0, 0, 171, 172, 0, 173,
	0, 0, 0, 315, 174, 175, 176, 316, 317, 0,
	0, 0, 177, 178, 318, 319, 320, 0, 179, 0,
	180, 0, 0, 0, 0, 181, 321, 0, 322, 0,
	182, 183, 184, 185, 186, 323, 324, 0, 0, 190,
	0, 187, 0, 0, 188, 325, 189, 326, 327, 328,
	329, 330, 0, 331, 0, 0, 191, 192, 193, 0,
	194, 195, 196, 0, 198, 197, 0, 332, 0, 199,
	0, 0, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 333, 205, 0, 207, 208, 210, 209, 0, 0,
	0, 334, 211, 335, 212, 213, 0, 214, 0, 632,
	215, 0, 0, 216, 336, 0, 217, 0, 337, 218,
	219, 220, 221, 222, 0, 223, 338, 224, 339, 225,
	0, 226, 227, 228, 229, 230, 340, 231, 232, 0,
	233, 234, 235, 236, 237, 239, 240, 238, 241, 242,
	243, 244, 0, 245, 0, 246, 247, 341, 248, 0,
	252, 253, 254, 255, 0, 257, 342, 256, 258, 259,
	0, 260, 249, 250, 261, 0, 262, 343, 344, 263,
	0, 270, 264, 265, 251, 266, 269, 345, 267, 268,
	346, 0, 271, 0, 272, 273, 274, 275, 276, 277,
	278, 0, 347, 348, 349, 0, 0, 279, 280, 350,
	351, 0, 281, 282, 283, 284, 0, 0, 285, 286,
	287, 288, 0, 289, 0, 352, 290, 291, 292, 353,
	354, 0, 0, 293, 0, 140, 0, 0, 294, 295,
	296, 297, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 144, 0, 145, 0, 0, 0, 0, 299,
	0, 626, 0, 631, 146, 147, 148, 300, 301, 302,
	303, 149, 304, 305, 0, 150, 306, 307, 151, 152,
	0, 0, 308, 309, 310, 0, 153, 311, 0, 0,
	0, 154, 155, 156, 0, 157, 0, 158, 159, 160,
	0, 0, 161, 162, 163, 0, 0, 0, 0, 0,
	0, 0, 164, 165, 357, 166, 312, 167, 313, 314,
	0, 168, 0, 169, 0, 170, 0, 0, 171, 172,
	0, 173, 0, 0, 0, 315, 174, 175, 176, 316,
	317, 0, 0, 0, 177, 178, 318, 319, 320, 0,
	179, 0, 180, 0, 0, 0, 0, 181, 321, 0,
	322, 0, 182, 183, 184, 185, 186, 323, 324, 0,
	0, 190, 0, 187, 0, 0, 188, 325, 189, 326,
	327, 328, 329, 330, 0, 331, 0, 0, 191, 192,
	193, 0, 194, 195, 196, 0, 198, 197, 0, 332,
	0, 199, 0, 0, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 333, 205, 0, 207, 208, 210, 209,
	0, 0, 0, 334, 211, 335, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 336, 0, 217, 0,
	337, 218, 219, 220, 221, 222, 0, 223, 338, 224,
	339, 225, 0, 226, 227, 228, 229, 230, 340, 231,
	232, 0, 233, 234, 235, 236, 237, 239, 240, 238,
	241, 242, 243, 244, 0, 245, 0, 246, 247, 341,
	248, 0, 252, 253, 254, 255, 0, 257, 342, 256,
	258, 259, 0, 260, 249, 250, 261, 0, 262, 343,
	344, 263, 0, 270, 264, 265, 251, 266, 269, 345,
	267, 268, 346, 0, 271, 0, 272, 273, 274, 275,
	276, 277, 278, 0, 347, 348, 349, 0, 0, 279,
	280, 350, 351, 0, 281, 282, 283, 284, 0, 0,
	285, 286, 287, 288, 0, 289, 0, 352, 290, 291,
	292, 353, 354, 0, 0, 293, 0, 0, 140, 0,
	294, 295, 296, 297, 298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 299, 0, 0, 0, 921, 146, 147, 148,
	300, 301, 302, 303, 149, 304, 305, 0, 150, 306,
	307, 151, 152, 0, 0, 308, 309, 310, 0, 153,
	311, 0, 0, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 0, 161, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 357, 166, 312,
	167, 313, 314, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 315, 174,
	175, 176, 316, 317, 0, 0, 0, 177, 178, 318,
	319, 320, 0, 179, 0, 180, 0, 0, 0, 0,
	181, 321, 0, 322, 0, 182, 183, 184, 185, 186,
	323, 324, 0, 0, 190, 0, 187, 0, 0, 188,
	325, 189, 326, 327, 328, 329, 330, 0, 331, 0,
	0, 191, 192, 193, 0, 194, 195, 196, 0, 198,
	197, 0, 332, 0, 199, 0, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 333, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 334, 211, 335, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 336,
	0, 217, 0, 337, 218, 219, 220, 221, 222, 0,
	223, 338, 224, 339, 225, 0, 226, 227, 228, 229,
	230, 340, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 341, 248, 0, 252, 253, 254, 255, 0,
	257, 342, 256, 258, 259, 0, 260, 249, 250, 261,
	0, 262, 343, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 345, 267, 268, 346, 0, 271, 0, 272,
	273, 274, 275, 276, 277, 278, 0, 347, 348, 349,
	0, 0, 279, 280, 350, 351, 0, 281, 282, 283,
	284, 0, 0, 285, 286, 287, 288, 0, 289, 0,
	352, 290, 291, 292, 353, 354, 0, 0, 293, 0,
	140, 0, 0, 294, 295, 296, 297, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 299, 0, 0, 0, 1264, 146,
	147, 148, 300, 301, 302, 303, 149, 304, 305, 0,
	150, 306, 307, 151, 152, 0, 0, 308, 309, 310,
	0, 153, 311, 0, 0, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 0, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 357,
	166, 312, 167, 313, 314, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	315, 174, 175, 176, 316, 317, 0, 0, 0, 177,
	178, 318, 319, 320, 0, 179, 0, 180, 0, 0,
	0, 0, 181, 321, 0, 322, 0, 182, 183, 184,
	185, 186, 323, 324, 0, 0, 190, 0, 187, 0,
	0, 188, 325, 189, 326, 327, 328, 329, 330, 0,
	331, 0, 0, 191, 192, 193, 0, 194, 195, 196,
	0, 198, 197, 0, 332, 0, 199, 0, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 334, 211,
	335, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 336, 0, 217, 0, 337, 218, 219, 220, 221,
	222, 0, 223, 338, 224, 339, 225, 0, 226, 227,
	228, 229, 230, 340, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 0, 246, 247, 341, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 0, 260, 249,
	250, 261, 0, 262, 343, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 345, 267, 268, 346, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	348, 349, 0, 0, 279, 280, 350, 351, 0, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 0,
	289, 0, 352, 290, 291, 292, 353, 354, 0, 0,
	293, 0, 140, 0, 0, 294, 295, 296, 297, 298,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 299, 0, 0, 0,
	1863, 146, 147, 148, 300, 301, 302, 303, 149, 304,
	305, 0, 150, 306, 307, 151, 152, 0, 0, 308,
	309, 310, 0, 153, 311, 0, 0, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 0, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 357, 166, 312, 167, 313, 314, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 315, 174, 175, 176, 316, 317, 0, 0,
	0, 177, 178, 318, 319, 320, 0, 179, 0, 180,
	0, 0, 0, 0, 181, 321, 0, 322, 0, 182,
	183, 184, 185, 186, 323, 324, 0, 0, 190, 0,
	187, 0, 0, 188, 325, 189, 326, 327, 328, 329,
	330, 0, 331, 0, 0, 191, 192, 193, 0, 194,
	195, 196, 0, 198, 197, 0, 332, 0, 199, 0,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	333, 205, 0, 207, 208, 210, 209, 0, 0, 0,
	334, 211, 335, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 336, 0, 217, 0, 337, 218, 219,
	220, 221, 222, 0, 223, 338, 224, 339, 225, 0,
	226, 227, 228, 229, 230, 340, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 0, 246, 247, 341, 248, 0, 252,
	253, 254, 255, 0, 257, 342, 256, 258, 259, 0,
	260, 249, 250, 261, 0, 262, 343, 344, 263, 0,
	270, 264, 265, 251, 266, 269, 345, 267, 268, 346,
	0, 271, 0, 272, 273, 274, 275, 276, 277, 278,
	0, 347, 348, 349, 0, 0, 279, 280, 350, 351,
	0, 281, 282, 283, 284, 0, 0, 285, 286, 287,
	288, 0, 289, 0, 352, 290, 291, 292, 353, 354,
	0, 0, 293, 0, 0, 0, 0, 294, 295, 296,
	297, 298, 702, 691, 692, 689, 690, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 144,
	0, 145, 914, 0, 0, 0, 299, 0, 0, 0,
	0, 146, 147, 148, 300, 734, 302, 735, 149, 736,
	737, 0, 150, 306, 307, 151, 152, 0, 0, 738,
	739, 310, 0, 153, 311, 0, 403, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 404, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 357, 166, 740, 167, 741, 742, 0, 168, 0,
	169, 0, 170, 0, 0, 733, 172, 0, 173, 0,
	0, 0, 315, 174, 175, 176, 316, 317, 698, 0,
	0, 177, 178, 743, 744, 745, 0, 179, 0, 180,
	0, 0, 405, 0, 181, 321, 0, 322, 0, 182,
	183, 184, 185, 186, 323, 324, 407, 0, 190, 0,
	187, 0, 406, 188, 746, 189, 747, 748, 749, 750,
	751, 0, 709, 0, 408, 191, 192, 193, 409, 194,
	195, 196, 0, 198, 197, 0, 332, 410, 199, 411,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	333, 205, 412, 207, 208, 210, 209, 0, 0, 699,
	334, 211, 752, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 336, 413, 217, 414, 337, 218, 219,
	220, 221, 222, 0, 223, 338, 224, 339, 225, 0,
	226, 227, 228, 229, 230, 753, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 415, 246, 247, 341, 248, 0, 252,
	253, 254, 255, 0, 257, 342, 256, 258, 259, 0,
	260, 249, 250, 261, 416, 262, 754, 344, 263, 0,
	270, 264, 265, 251, 266, 269, 755, 267, 268, 346,
	0, 271, 0, 272, 273, 274, 275, 276, 277, 278,
	0, 347, 756, 757, 0, 0, 279, 280, 350, 351,
	697, 281, 282, 283, 284, 0, 0, 285, 286, 287,
	288, 0, 289, 0, 352, 290, 291, 292, 353, 758,
	572, 569, 293, 0, 0, 842, 0, 294, 295, 296,
	297, 298, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 146,
	147, 148, 300, 301, 302, 303, 149, 304, 305, 0,
	150, 306, 307, 151, 152, 0, 0, 308, 309, 310,
	0, 153, 311, 0, 403, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 404, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 357,
	166, 312, 167, 313, 314, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	315, 174, 175, 176, 316, 317, 0, 0, 0, 177,
	178, 318, 319, 320, 0, 179, 0, 180, 0, 0,
	405, 0, 181, 321, 0, 322, 0, 182, 183, 184,
	185, 186, 323, 324, 407, 0, 190, 0, 187, 0,
	406, 188, 325, 189, 326, 327, 328, 329, 330, 0,
	331, 0, 408, 191, 192, 193, 409, 194, 195, 196,
	0, 198, 197, 0, 332, 410, 199, 411, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	412, 207, 208, 210, 209, 0, 0, 0, 334, 211,
	335, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 336, 413, 217, 414, 337, 218, 219, 220, 221,
	222, 0, 223, 338, 224, 339, 225, 0, 226, 227,
	228, 229, 230, 340, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 415, 246, 247, 341, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 0, 260, 249,
	250, 261, 416, 262, 343, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 345, 267, 268, 346, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	348, 349, 0, 0, 279, 280, 350, 351, 0, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 0,
	289, 0, 352, 290, 291, 292, 353, 354, 140, 0,
	293, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 299, 0, 0, 0, 0, 146, 147, 148,
	300, 301, 302, 303, 149, 304, 305, 0, 150, 306,
	307, 151, 152, 0, 0, 308, 309, 310, 0, 153,
	311, 0, 0, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 0, 161, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 136, 166, 312,
	167, 313, 314, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 315, 174,
	175, 176, 316, 317, 0, 0, 0, 177, 178, 318,
	319, 320, 0, 179, 0, 180, 0, 0, 0, 0,
	181, 321, 0, 322, 0, 182, 183, 184, 185, 186,
	323, 324, 0, 0, 190, 0, 187, 0, 0, 188,
	325, 189, 326, 327, 328, 329, 330, 0, 331, 0,
	0, 191, 192, 193, 0, 194, 195, 196, 0, 198,
	197, 0, 332, 0, 199, 0, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 333, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 334, 211, 335, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 336,
	0, 217, 0, 337, 218, 219, 220, 221, 222, 0,
	223, 338, 224, 339, 225, 0, 226, 227, 228, 229,
	230, 340, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 341, 248, 0, 252, 253, 254, 255, 0,
	257, 342, 256, 258, 259, 0, 260, 249, 250, 261,
	0, 262, 343, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 345, 267, 268, 346, 0, 271, 135, 272,
	273, 274, 275, 276, 277, 278, 0, 347, 348, 349,
	0, 0, 279, 280, 350, 351, 0, 281, 282, 283,
	284, 0, 0, 285, 286, 287, 288, 0, 289, 0,
	352, 290, 291, 292, 353, 354, 572, 569, 293, 0,
	0, 0, 0, 294, 295, 296, 297, 298, 0, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	299, 139, 0, 0, 0, 146, 147, 148, 300, 301,
	302, 303, 149, 304, 305, 0, 150, 306, 307, 151,
	152, 0, 0, 308, 309, 310, 0, 153, 311, 0,
	403, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 404, 161, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 357, 166, 312, 167, 313,
	314, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 315, 174, 175, 176,
	316, 317, 0, 0, 0, 177, 178, 318, 319, 320,
	0, 179, 0, 180, 0, 0, 405, 0, 181, 321,
	0, 322, 0, 182, 183, 184, 185, 186, 323, 324,
	407, 0, 190, 0, 187, 0, 406, 188, 325, 189,
	326, 327, 328, 329, 330, 0, 331, 0, 408, 191,
	192, 193, 409, 194, 195, 196, 0, 198, 197, 0,
	332, 410, 199, 411, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 333, 205, 412, 207, 208, 210,
	209, 0, 0, 0, 334, 211, 335, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 336, 413, 217,
	414, 337, 218, 219, 220, 221, 222, 0, 223, 338,
	224, 339, 225, 0, 226, 227, 228, 229, 230, 340,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 415, 246, 247,
	341, 248, 0, 252, 253, 254, 255, 0, 257, 342,
	256, 258, 259, 0, 260, 249, 250, 261, 416, 262,
	343, 344, 263, 0, 270, 264, 265, 251, 266, 269,
	345, 267, 268, 346, 0, 271, 0, 272, 273, 274,
	275, 276, 277, 278, 0, 347, 348, 349, 0, 0,
	279, 280, 350, 351, 0, 281, 282, 283, 284, 0,
	0, 285, 286, 287, 288, 0, 289, 0, 352, 290,
	291, 292, 353, 354, 140, 0, 293, 0, 0, 0,
	0, 294, 295, 296, 297, 298, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 299, 0,
	0, 0, 0, 146, 147, 148, 300, 301, 302, 303,
	149, 304, 305, 0, 150, 306, 307, 151, 152, 0,
	0, 308, 309, 310, 0, 153, 311, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 161, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 357, 166, 312, 167, 313, 314, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 315, 174, 175, 176, 316, 317,
	0, 0, 0, 177, 178, 318, 319, 320, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 321, 0, 322,
	0, 182, 183, 184, 185, 186, 323, 324, 0, 0,
	190, 0, 187, 0, 0, 188, 325, 189, 326, 327,
	328, 329, 330, 0, 331, 0, 0, 191, 192, 193,
	0, 194, 195, 196, 0, 198, 197, 0, 332, 0,
	199, 0, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 333, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 334, 211, 335, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 336, 0, 217, 0, 337,
	218, 219, 220, 221, 222, 0, 223, 338, 224, 339,
	225, 0, 226, 227, 228, 229, 230, 340, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 341, 248,
	0, 252, 253, 254, 255, 0, 257, 342, 256, 258,
	259, 0, 260, 249, 250, 261, 0, 262, 343, 344,
	263, 0, 270, 264, 265, 251, 266, 269, 345, 267,
	268, 346, 0, 271, 0, 272, 273, 274, 275, 276,
	277, 278, 0, 347, 348, 349, 0, 0, 279, 280,
	350, 351, 0, 281, 282, 283, 284, 0, 0, 285,
	286, 287, 288, 0, 289, 0, 352, 290, 291, 292,
	353, 354, 572, 0, 293, 0, 0, 0, 0, 294,
	295, 296, 297, 298, 0, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 299, 139, 0, 0,
	0, 146, 147, 148, 300, 301, 302, 303, 149, 304,
	305, 0, 150, 306, 307, 151, 152, 0, 0, 308,
	309, 310, 0, 153, 311, 0, 403, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 404, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 357, 166, 312, 167, 313, 314, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 315, 174, 175, 176, 316, 317, 0, 0,
	0, 177, 178, 318, 319, 320, 0, 179, 0, 180,
	0, 0, 405, 0, 181, 321, 0, 322, 0, 182,
	183, 184, 185, 186, 323, 324, 407, 0, 190, 0,
	187, 0, 406, 188, 325, 189, 326, 327, 328, 329,
	330, 0, 331, 0, 408, 191, 192, 193, 409, 194,
	195, 196, 0, 198, 197, 0, 332, 410, 199, 411,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	333, 205, 412, 207, 208, 210, 209, 0, 0, 0,
	334, 211, 335, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 336, 413, 217, 414, 337, 218, 219,
	220, 221, 222, 0, 223, 338, 224, 339, 225, 0,
	226, 227, 228, 229, 230, 340, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 415, 246, 247, 341, 248, 0, 252,
	253, 254, 255, 0, 257, 342, 256, 258, 259, 0,
	260, 249, 250, 261, 416, 262, 343, 344, 263, 0,
	270, 264, 265, 251, 266, 269, 345, 267, 268, 346,
	0, 271, 0, 272, 273, 274, 275, 276, 277, 278,
	0, 347, 348, 349, 0, 0, 279, 280, 350, 351,
	0, 281, 282, 283, 284, 0, 0, 285, 286, 287,
	288, 0, 289, 0, 352, 290, 291, 292, 353, 354,
	140, 0, 293, 0, 0, 0, 0, 294, 295, 296,
	297, 298, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 146,
	147, 148, 300, 301, 302, 303, 149, 304, 305, 0,
	150, 306, 307, 151, 152, 0, 0, 308, 309, 310,
	1284, 153, 311, 0, 0, 0, 154, 155, 156, 0,
	157, 1282, 158, 159, 160, 0, 0, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 357,
	166, 312, 167, 313, 314, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	315, 174, 175, 176, 316, 317, 0, 1281, 0, 177,
	178, 318, 319, 320, 0, 179, 0, 180, 1286, 0,
	0, 0, 181, 321, 0, 322, 0, 182, 183, 184,
	185, 186, 323, 324, 0, 0, 190, 1279, 187, 0,
	0, 188, 325, 189, 326, 327, 328, 329, 330, 0,
	331, 0, 0, 191, 192, 193, 0, 194, 195, 196,
	0, 198, 197, 0, 332, 0, 199, 0, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 334, 211,
	335, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 336, 0, 217, 0, 337, 218, 219, 220, 221,
	222, 0, 223, 338, 224, 339, 225, 1285, 226, 227,
	228, 229, 230, 340, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 0, 246, 247, 341, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 0, 260, 249,
	250, 261, 0, 262, 343, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 345, 267, 268, 346, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	348, 349, 0, 0, 279, 280, 350, 351, 0, 281,
	282, 283, 284, 0, 1280, 285, 286, 287, 288, 0,
	289, 0, 352, 290, 291, 292, 353, 354, 140, 0,
	293, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 299, 0, 0, 0, 0, 146, 147, 148,
	300, 301, 302, 303, 149, 304, 305, 0, 150, 306,
	307, 151, 152, 0, 0, 308, 309, 310, 1284, 153,
	311, 0, 0, 1505, 154, 155, 156, 0, 157, 1282,
	158, 159, 160, 0, 0, 161, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 357, 166, 312,
	167, 313, 314, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 315, 174,
	175, 176, 316, 317, 0, 0, 0, 177, 178, 318,
	319, 320, 0, 179, 0, 180, 1286, 0, 0, 0,
	181, 321, 0, 322, 0, 182, 183, 184, 185, 186,
	1504, 324, 0, 0, 190, 0, 187, 0, 0, 188,
	325, 189, 326, 327, 328, 329, 330, 0, 331, 0,
	0, 191, 192, 193, 0, 194, 195, 196, 0, 198,
	197, 0, 332, 0, 199, 0, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 333, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 334, 211, 335, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 336,
	0, 217, 0, 337, 218, 219, 220, 221, 222, 0,
	223, 338, 224, 339, 225, 1285, 226, 227, 228, 229,
	230, 340, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 341, 248, 0, 252, 253, 254, 255, 0,
	257, 342, 256, 258, 259, 0, 260, 249, 250, 261,
	0, 262, 343, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 345, 267, 268, 346, 0, 271, 0, 272,
	273, 274, 275, 276, 277, 278, 0, 347, 348, 349,
	0, 0, 279, 280, 350, 351, 0, 281, 282, 283,
	284, 0, 1507, 285, 286, 287, 288, 0, 289, 0,
	352, 290, 291, 292, 353, 354, 140, 0, 293, 0,
	0, 0, 0, 294, 295, 296, 297, 298, 0, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	299, 0, 1240, 0, 0, 146, 147, 148, 300, 301,
	302, 303, 149, 304, 305, 0, 150, 306, 307, 151,
	152, 0, 0, 308, 309, 310, 0, 153, 311, 0,
	0, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 0, 161, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 357, 166, 312, 167, 313,
	314, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 315, 174, 175, 176,
	316, 317, 0, 0, 0, 177, 178, 318, 319, 320,
	0, 179, 0, 180, 0, 0, 0, 0, 181, 321,
	0, 322, 0, 182, 183, 184, 185, 186, 323, 324,
	0, 0, 190, 0, 187, 0, 0, 188, 325, 189,
	326, 327, 328, 329, 330, 0, 331, 0, 0, 191,
	192, 193, 0, 194, 195, 196, 0, 198, 197, 0,
	332, 0, 199, 0, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 333, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 334, 211, 335, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 336, 0, 217,
	0, 337, 218, 219, 220, 221, 222, 0, 223, 338,
	224, 339, 225, 0, 226, 227, 228, 229, 230, 340,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 0, 246, 247,
	341, 248, 0, 252, 253, 254, 255, 0, 257, 342,
	256, 258, 259, 0, 260, 249, 250, 261, 0, 262,
	343, 344, 263, 0, 270, 264, 265, 251, 266, 269,
	345, 267, 268, 346, 0, 271, 0, 272, 273, 274,
	275, 276, 277, 278, 0, 347, 348, 349, 0, 0,
	279, 280, 350, 351, 0, 281, 282, 283, 284, 0,
	0, 285, 286, 287, 288, 0, 289, 0, 352, 290,
	291, 292, 353, 354, 140, 0, 293, 0, 0, 0,
	0, 294, 295, 296, 297, 298, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 299, 0,
	0, 0, 0, 146, 147, 148, 300, 301, 302, 303,
	149, 304, 305, 0, 150, 306, 307, 151, 152, 0,
	0, 308, 309, 310, 0, 153, 311, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 161, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 357, 166, 312, 167, 313, 314, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 315, 174, 175, 176, 316, 317,
	0, 0, 0, 177, 178, 318, 319, 320, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 321, 0, 322,
	0, 182, 183, 184, 185, 186, 323, 324, 0, 0,
	190, 0, 187, 0, 0, 188, 325, 189, 326, 327,
	328, 329, 330, 0, 331, 0, 0, 191, 192, 193,
	0, 194, 195, 196, 0, 198, 197, 0, 332, 0,
	199, 0, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 333, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 334, 211, 335, 212, 213, 0, 214, 0,
	632, 215, 0, 0, 216, 336, 0, 217, 0, 337,
	218, 219, 220, 221, 222, 0, 223, 338, 224, 339,
	225, 0, 226, 227, 228, 229, 230, 340, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 341, 248,
	0, 252, 253, 254, 255, 0, 257, 342, 256, 258,
	259, 0, 260, 249, 250, 261, 0, 262, 343, 344,
	263, 0, 270, 264, 265, 251, 266, 269, 345, 267,
	268, 346, 0, 271, 0, 272, 273, 274, 275, 276,
	277, 278, 0, 347, 348, 349, 0, 0, 279, 280,
	350, 351, 0, 281, 282, 283, 284, 0, 0, 285,
	286, 287, 288, 0, 289, 0, 352, 290, 291, 292,
	353, 354, 140, 0, 293, 0, 0, 0, 0, 294,
	295, 296, 297, 298, 0, 0, 0, 0, 143, 144,
	1169, 145, 0, 0, 0, 0, 299, 0, 0, 0,
	0, 146, 147, 148, 300, 301, 302, 303, 149, 304,
	305, 0, 150, 306, 307, 151, 152, 0, 0, 308,
	309, 310, 0, 153, 311, 0, 0, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 0, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 357, 166, 312, 167, 313, 314, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 315, 174, 175, 176, 316, 317, 0, 0,
	0, 177, 178, 318, 319, 320, 0, 179, 0, 180,
	0, 0, 0, 0, 181, 321, 0, 322, 0, 182,
	183, 184, 185, 186, 323, 324, 0, 0, 190, 0,
	187, 0, 0, 188, 325, 189, 326, 327, 328, 329,
	330, 0, 331, 0, 0, 191, 192, 193, 0, 194,
	195, 196, 0, 198, 197, 0, 332, 0, 199, 0,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	333, 205, 0, 207, 208, 210, 209, 0, 0, 0,
	334, 211, 335, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 336, 0, 217, 0, 337, 218, 219,
	220, 221, 222, 0, 223, 338, 224, 339, 225, 0,
	226, 227, 228, 229, 230, 340, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 0, 246, 247, 341, 248, 0, 252,
	253, 254, 255, 0, 257, 342, 256, 258, 259, 0,
	260, 249, 250, 261, 0, 262, 343, 344, 263, 0,
	270, 264, 265, 251, 266, 269, 345, 267, 268, 346,
	0, 271, 0, 272, 273, 274, 275, 276, 277, 278,
	0, 347, 348, 349, 0, 0, 279, 280, 350, 351,
	0, 281, 282, 283, 284, 0, 0, 285, 286, 287,
	288, 0, 289, 0, 352, 290, 291, 292, 353, 354,
	140, 0, 293, 0, 0, 0, 0, 294, 295, 296,
	297, 298, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 146,
	147, 148, 300, 301, 302, 303, 149, 304, 305, 0,
	150, 306, 307, 151, 152, 0, 0, 308, 309, 310,
	0, 153, 311, 0, 0, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 0, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 357,
	166, 312, 167, 313, 314, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	315, 174, 175, 176, 316, 317, 0, 0, 0, 177,
	178, 318, 319, 320, 0, 179, 0, 180, 0, 0,
	0, 0, 181, 321, 0, 322, 0, 182, 183, 184,
	185, 186, 879, 324, 0, 0, 190, 0, 187, 0,
	0, 188, 325, 189, 326, 327, 328, 329, 330, 0,
	331, 0, 0, 191, 192, 193, 0, 194, 195, 196,
	0, 198, 197, 0, 332, 0, 199, 0, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 334, 211,
	335, 212, 213, 0, 214, 0, 632, 215, 0, 0,
	216, 336, 0, 217, 0, 337, 218, 219, 220, 221,
	222, 0, 223, 338, 224, 339, 225, 0, 226, 227,
	228, 229, 230, 340, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 0, 246, 247, 341, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 0, 260, 249,
	250, 261, 0, 262, 343, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 345, 267, 268, 346, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	348, 349, 0, 0, 279, 280, 350, 351, 0, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 0,
	289, 0, 352, 290, 291, 292, 353, 354, 140, 0,
	293, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 299, 0, 0, 0, 0, 146, 147, 148,
	300, 301, 302, 303, 149, 304, 305, 0, 150, 306,
	307, 151, 152, 0, 0, 308, 309, 310, 0, 153,
	311, 0, 0, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 0, 161, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 357, 166, 312,
	167, 313, 314, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 315, 174,
	175, 176, 316, 317, 0, 0, 0, 177, 178, 318,
	319, 320, 0, 179, 0, 180, 0, 0, 0, 0,
	181, 321, 0, 322, 0, 182, 183, 184, 185, 186,
	873, 324, 0, 0, 190, 0, 187, 0, 0, 188,
	325, 189, 326, 327, 328, 329, 330, 0, 331, 0,
	0, 191, 192, 193, 0, 194, 195, 196, 0, 198,
	197, 0, 332, 0, 199, 0, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 333, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 334, 211, 335, 212,
	213, 0, 214, 0, 632, 215, 0, 0, 216, 336,
	0, 217, 0, 337, 218, 219, 220, 221, 222, 0,
	223, 338, 224, 339, 225, 0, 226, 227, 228, 229,
	230, 340, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 341, 248, 0, 252, 253, 254, 255, 0,
	257, 342, 256, 258, 259, 0, 260, 249, 250, 261,
	0, 262, 343, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 345, 267, 268, 346, 0, 271, 0, 272,
	273, 274, 275, 276, 277, 278, 0, 347, 348, 349,
	0, 0, 279, 280, 350, 351, 0, 281, 282, 283,
	284, 0, 0, 285, 286, 287, 288, 0, 289, 0,
	352, 290, 291, 292, 353, 354, 140, 0, 293, 0,
	0, 0, 0, 294, 295, 296, 297, 298, 0, 0,
	0, 0, 143, 144, 649, 145, 0, 0, 0, 0,
	299, 0, 0, 0, 0, 146, 147, 148, 300, 301,
	302, 303, 149, 304, 305, 0, 150, 306, 307, 151,
	152, 0, 0, 308, 309, 310, 0, 153, 311, 0,
	0, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 0, 161, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 357, 166, 312, 167, 313,
	314, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 315, 174, 175, 176,
	316, 317, 0, 0, 0, 177, 178, 318, 319, 320,
	0, 179, 0, 180, 0, 0, 0, 0, 181, 321,
	0, 322, 0, 182, 183, 184, 185, 186, 323, 324,
	0, 0, 190, 0, 187, 0, 0, 188, 325, 189,
	326, 327, 328, 329, 330, 0, 331, 0, 0, 191,
	192, 193, 0, 194, 195, 196, 0, 198, 197, 0,
	332, 0, 199, 0, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 333, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 334, 211, 335, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 336, 0, 217,
	0, 337, 218, 219, 220, 221, 222, 0, 223, 338,
	224, 339, 225, 0, 226, 227, 228, 229, 230, 340,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 0, 246, 247,
	341, 248, 0, 252, 253, 254, 255, 0, 257, 342,
	256, 258, 259, 0, 260, 249, 250, 261, 0, 262,
	343, 344, 263, 0, 270, 264, 265, 251, 266, 269,
	345, 267, 268, 346, 0, 271, 0, 272, 273, 274,
	275, 276, 277, 278, 0, 347, 348, 349, 0, 0,
	279, 280, 350, 351, 0, 281, 282, 283, 284, 0,
	0, 285, 286, 287, 288, 0, 289, 0, 352, 290,
	291, 292, 353, 354, 140, 0, 293, 0, 0, 0,
	0, 294, 295, 296, 297, 298, 0, 0, 0, 0,
	143, 144, 360, 145, 0, 0, 0, 0, 299, 0,
	0, 0, 0, 146, 147, 148, 300, 301, 302, 303,
	149, 304, 305, 0, 150, 306, 307, 151, 152, 0,
	0, 308, 309, 310, 0, 153, 311, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 161, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 357, 166, 312, 167, 313, 314, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 315, 174, 175, 176, 316, 317,
	0, 0, 0, 177, 178, 318, 319, 320, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 321, 0, 322,
	0, 182, 183, 184, 185, 186, 323, 324, 0, 0,
	190, 0, 187, 0, 0, 188, 325, 189, 326, 327,
	328, 329, 330, 0, 331, 0, 0, 191, 192, 193,
	0, 194, 195, 196, 0, 198, 197, 0, 332, 0,
	199, 0, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 333, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 334, 211, 335, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 336, 0, 217, 0, 337,
	218, 219, 220, 221, 222, 0, 223, 338, 224, 339,
	359, 0, 226, 227, 228, 229, 230, 340, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 341, 248,
	0, 252, 253, 254, 255, 0, 257, 342, 256, 258,
	259, 0, 260, 249, 250, 261, 0, 262, 343, 344,
	263, 0, 270, 264, 265, 251, 266, 269, 345, 267,
	268, 346, 0, 271, 0, 272, 273, 274, 275, 276,
	277, 278, 0, 347, 348, 349, 0, 0, 279, 280,
	350, 351, 0, 281, 282, 283, 284, 0, 0, 285,
	286, 287, 288, 0, 289, 0, 352, 290, 291, 292,
	353, 354, 140, 0, 293, 0, 0, 0, 0, 294,
	295, 296, 297, 298, 0, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 299, 0, 0, 0,
	0, 146, 147, 148, 300, 301, 302, 303, 149, 304,
	305, 0, 150, 306, 307, 151, 152, 0, 0, 308,
	309, 310, 0, 153, 311, 0, 0, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 0, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 357, 166, 312, 167, 313, 314, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 315, 174, 175, 176, 316, 317, 0, 0,
	0, 177, 178, 318, 319, 320, 0, 179, 0, 180,
	0, 0, 0, 0, 181, 321, 0, 322, 0, 182,
	183, 184, 185, 186, 323, 324, 0, 0, 190, 0,
	187, 0, 0, 188, 325, 189, 326, 327, 328, 329,
	330, 0, 331, 0, 0, 191, 192, 193, 0, 194,
	195, 196, 0, 198, 197, 0, 332, 0, 199, 0,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	333, 205, 0, 207, 208, 210, 209, 0, 0, 0,
	334, 211, 335, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 336, 0, 217, 0, 337, 218, 219,
	220, 221, 222, 0, 223, 338, 224, 339, 225, 0,
	226, 227, 228, 229, 230, 340, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 0, 246, 247, 341, 248, 0, 252,
	253, 254, 255, 0, 257, 342, 256, 258, 259, 0,
	260, 249, 250, 261, 0, 262, 343, 344, 263, 0,
	270, 264, 265, 251, 266, 269, 345, 267, 268, 346,
	0, 271, 0, 272, 273, 274, 275, 276, 277, 278,
	0, 347, 348, 349, 0, 0, 279, 280, 350, 351,
	0, 281, 282, 283, 284, 0, 0, 285, 286, 287,
	288, 0, 289, 0, 352, 290, 291, 292, 353, 354,
	140, 0, 293, 0, 0, 0, 0, 294, 295, 296,
	297, 298, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 146,
	147, 148, 300, 301, 302, 303, 149, 304, 305, 0,
	150, 306, 307, 151, 152, 0, 0, 308, 309, 310,
	0, 153, 311, 0, 0, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 0, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 357,
	166, 312, 167, 313, 314, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	315, 174, 175, 176, 316, 317, 0, 0, 0, 177,
	178, 318, 319, 320, 0, 179, 0, 180, 0, 0,
	0, 0, 181, 321, 0, 322, 0, 182, 183, 184,
	185, 186, 1756, 324, 0, 0, 190, 0, 187, 0,
	0, 188, 325, 189, 326, 327, 328, 329, 330, 0,
	331, 0, 0, 191, 192, 193, 0, 194, 195, 196,
	0, 198, 197, 0, 332, 0, 199, 0, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 334, 211,
	335, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 336, 0, 217, 0, 337, 218, 219, 220, 221,
	222, 0, 223, 338, 224, 339, 225, 0, 226, 227,
	228, 229, 230, 340, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 0, 246, 247, 341, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 0, 260, 249,
	250, 261, 0, 262, 343, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 345, 267, 268, 346, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	348, 349, 0, 0, 279, 280, 350, 351, 0, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 0,
	289, 0, 352, 290, 291, 292, 353, 354, 140, 0,
	293, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 299, 0, 0, 0, 0, 146, 147, 148,
	300, 301, 302, 303, 149, 304, 305, 0, 150, 306,
	307, 151, 152, 0, 0, 308, 309, 310, 0, 153,
	311, 0, 0, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 0, 161, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 357, 166, 312,
	167, 313, 314, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 315, 174,
	175, 176, 316, 317, 0, 0, 0, 177, 178, 318,
	319, 320, 0, 179, 0, 180, 0, 0, 0, 0,
	181, 321, 0, 322, 0, 182, 183, 184, 185, 186,
	1754, 324, 0, 0, 190, 0, 187, 0, 0, 188,
	325, 189, 326, 327, 328, 329, 330, 0, 331, 0,
	0, 191, 192, 193, 0, 194, 195, 196, 0, 198,
	197, 0, 332, 0, 199, 0, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 333, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 334, 211, 335, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 336,
	0, 217, 0, 337, 218, 219, 220, 221, 222, 0,
	223, 338, 224, 339, 225, 0, 226, 227, 228, 229,
	230, 340, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 341, 248, 0, 252, 253, 254, 255, 0,
	257, 342, 256, 258, 259, 0, 260, 249, 250, 261,
	0, 262, 343, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 345, 267, 268, 346, 0, 271, 0, 272,
	273, 274, 275, 276, 277, 278, 0, 347, 348, 349,
	0, 0, 279, 280, 350, 351, 0, 281, 282, 283,
	284, 0, 0, 285, 286, 287, 288, 0, 289, 0,
	352, 290, 291, 292, 353, 354, 140, 0, 293, 0,
	0, 0, 0, 294, 295, 296, 297, 298, 0, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	299, 0, 0, 0, 0, 146, 147, 148, 300, 301,
	302, 303, 149, 304, 305, 0, 150, 306, 307, 151,
	152, 0, 0, 308, 309, 310, 0, 153, 311, 0,
	0, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 0, 161, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 357, 166, 312, 167, 313,
	314, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 315, 174, 175, 176,
	316, 317, 0, 0, 0, 177, 178, 318, 319, 320,
	0, 179, 0, 180, 0, 0, 0, 0, 181, 321,
	0, 322, 0, 182, 183, 184, 185, 186, 1749, 324,
	0, 0, 190, 0, 187, 0, 0, 188, 325, 189,
	326, 327, 328, 329, 330, 0, 331, 0, 0, 191,
	192, 193, 0, 194, 195, 196, 0, 198, 197, 0,
	332, 0, 199, 0, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 333, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 334, 211, 335, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 336, 0, 217,
	0, 337, 218, 219, 220, 221, 222, 0, 223, 338,
	224, 339, 225, 0, 226, 227, 228, 229, 230, 340,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 0, 246, 247,
	341, 248, 0, 252, 253, 254, 255, 0, 257, 342,
	256, 258, 259, 0, 260, 249, 250, 261, 0, 262,
	343, 344, 263, 0, 270, 264, 265, 251, 266, 269,
	345, 267, 268, 346, 0, 271, 0, 272, 273, 274,
	275, 276, 277, 278, 0, 347, 348, 349, 0, 0,
	279, 280, 350, 351, 0, 281, 282, 283, 284, 0,
	0, 285, 286, 287, 288, 0, 289, 0, 352, 290,
	291, 292, 353, 354, 140, 0, 293, 0, 0, 0,
	0, 294, 295, 296, 297, 298, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 299, 0,
	0, 0, 0, 146, 147, 148, 300, 301, 302, 303,
	149, 304, 305, 0, 150, 306, 307, 151, 152, 0,
	0, 308, 309, 310, 0, 153, 311, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 161, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 357, 166, 312, 167, 313, 314, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 315, 174, 175, 176, 316, 317,
	0, 0, 0, 177, 178, 318, 319, 320, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 321, 0, 322,
	0, 182, 183, 184, 185, 186, 323, 324, 0, 0,
	190, 0, 187, 0, 0, 188, 325, 189, 326, 327,
	328, 329, 330, 0, 331, 0, 0, 191, 192, 193,
	0, 194, 195, 196, 0, 198, 197, 0, 332, 0,
	199, 0, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 333, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 334, 211, 335, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 336, 0, 217, 0, 337,
	218, 219, 220, 221, 222, 0, 223, 338, 224, 339,
	225, 0, 226, 227, 228, 229, 230, 340, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 341, 248,
	0, 506, 253, 254, 255, 0, 257, 342, 256, 258,
	259, 0, 260, 249, 250, 261, 0, 262, 343, 344,
	263, 0, 270, 264, 265, 251, 266, 269, 345, 267,
	268, 346, 0, 271, 0, 272, 273, 274, 275, 276,
	277, 278, 0, 347, 348, 349, 0, 0, 279, 280,
	350, 351, 0, 281, 282, 283, 284, 0, 0, 285,
	286, 287, 288, 0, 289, 0, 352, 290, 291, 292,
	353, 354, 140, 0, 293, 0, 0, 0, 0, 294,
	295, 296, 297, 298, 0, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 299, 0, 0, 0,
	0, 146, 147, 148, 300, 301, 302, 303, 149, 304,
	305, 0, 150, 306, 307, 151, 152, 0, 0, 308,
	309, 310, 0, 153, 311, 0, 0, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 0, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 357, 166, 312, 167, 313, 314, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 315, 174, 175, 176, 316, 317, 0, 0,
	0, 177, 178, 318, 319, 320, 0, 179, 0, 180,
	0, 0, 0, 0, 181, 321, 0, 322, 0, 182,
	183, 184, 185, 186, 1134, 324, 0, 0, 190, 0,
	187, 0, 0, 188, 325, 189, 326, 327, 328, 329,
	330, 0, 331, 0, 0, 191, 192, 193, 0, 194,
	195, 196, 0, 198, 197, 0, 332, 0, 199, 0,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	333, 205, 0, 207, 208, 210, 209, 0, 0, 0,
	334, 211, 335, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 336, 0, 217, 0, 337, 218, 219,
	220, 221, 222, 0, 223, 338, 224, 339, 225, 0,
	226, 227, 228, 229, 230, 340, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 0, 246, 247, 341, 248, 0, 252,
	253, 254, 255, 0, 257, 342, 256, 258, 259, 0,
	260, 249, 250, 261, 0, 262, 343, 344, 263, 0,
	270, 264, 265, 251, 266, 269, 345, 267, 268, 346,
	0, 271, 0, 272, 273, 274, 275, 276, 277, 278,
	0, 347, 348, 349, 0, 0, 279, 280, 350, 351,
	0, 281, 282, 283, 284, 0, 0, 285, 286, 287,
	288, 0, 289, 0, 352, 290, 291, 292, 353, 354,
	140, 0, 293, 0, 0, 0, 0, 294, 295, 296,
	297, 298, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 299, 0, 931, 0, 0, 146,
	147, 148, 300, 301, 302, 303, 149, 304, 305, 0,
	150, 306, 307, 151, 152, 0, 0, 308, 309, 310,
	0, 153, 311, 0, 0, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 0, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 357,
	166, 312, 167, 313, 314, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	315, 174, 175, 176, 316, 317, 0, 0, 0, 177,
	178, 318, 319, 320, 0, 179, 0, 180, 0, 0,
	0, 0, 181, 321, 0, 322, 0, 182, 183, 184,
	185, 186, 323, 324, 0, 0, 190, 0, 187, 0,
	0, 188, 325, 189, 326, 327, 328, 329, 330, 0,
	331, 0, 0, 191, 192, 193, 0, 194, 195, 196,
	0, 198, 197, 0, 332, 0, 199, 0, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 334, 211,
	335, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 336, 0, 217, 0, 337, 218, 219, 220, 221,
	222, 0, 223, 338, 224, 339, 225, 0, 226, 227,
	228, 229, 230, 340, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 0, 246, 247, 341, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 0, 0, 249,
	250, 261, 0, 262, 343, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 345, 267, 268, 346, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	348, 349, 0, 0, 279, 280, 350, 351, 0, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 0,
	289, 0, 352, 290, 291, 292, 353, 354, 140, 0,
	293, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 299, 0, 0, 0, 0, 146, 147, 148,
	300, 301, 302, 303, 149, 304, 305, 0, 150, 306,
	307, 151, 152, 0, 0, 308, 309, 310, 0, 153,
	311, 0, 0, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 0, 161, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 357, 166, 312,
	167, 313, 314, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 315, 174,
	175, 176, 316, 317, 0, 0, 0, 177, 178, 318,
	319, 320, 0, 179, 0, 180, 0, 0, 0, 0,
	181, 321, 0, 322, 0, 182, 183, 184, 185, 186,
	876, 324, 0, 0, 190, 0, 187, 0, 0, 188,
	325, 189, 326, 327, 328, 329, 330, 0, 331, 0,
	0, 191, 192, 193, 0, 194, 195, 196, 0, 198,
	197, 0, 332, 0, 199, 0, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 333, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 334, 211, 335, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 336,
	0, 217, 0, 337, 218, 219, 220, 221, 222, 0,
	223, 338, 224, 339, 225, 0, 226, 227, 228, 229,
	230, 340, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 341, 248, 0, 252, 253, 254, 255, 0,
	257, 342, 256, 258, 259, 0, 260, 249, 250, 261,
	0, 262, 343, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 345, 267, 268, 346, 0, 271, 0, 272,
	273, 274, 275, 276, 277, 278, 0, 347, 348, 349,
	0, 0, 279, 280, 350, 351, 0, 281, 282, 283,
	284, 0, 0, 285, 286, 287, 288, 0, 289, 0,
	352, 290, 291, 292, 353, 354, 140, 0, 293, 0,
	0, 0, 0, 294, 295, 296, 297, 298, 0, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	299, 0, 0, 0, 0, 146, 147, 148, 300, 301,
	302, 303, 149, 304, 305, 0, 150, 306, 307, 151,
	152, 0, 0, 308, 309, 310, 0, 153, 311, 0,
	0, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 0, 161, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 357, 166, 312, 167, 313,
	314, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 315, 174, 175, 176,
	316, 317, 0, 0, 0, 177, 178, 318, 319, 320,
	0, 179, 0, 180, 0, 0, 0, 0, 181, 321,
	0, 322, 0, 182, 183, 184, 185, 186, 821, 324,
	0, 0, 190, 0, 187, 0, 0, 188, 325, 189,
	326, 327, 328, 329, 330, 0, 331, 0, 0, 191,
	192, 193, 0, 194, 195, 196, 0, 198, 197, 0,
	332, 0, 199, 0, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 333, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 334, 211, 335, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 336, 0, 217,
	0, 337, 218, 219, 220, 221, 222, 0, 223, 338,
	224, 339, 225, 0, 226, 227, 228, 229, 230, 340,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 0, 246, 247,
	341, 248, 0, 252, 253, 254, 255, 0, 257, 342,
	256, 258, 259, 0, 260, 249, 250, 261, 0, 262,
	343, 344, 263, 0, 270, 264, 265, 251, 266, 269,
	345, 267, 268, 346, 0, 271, 0, 272, 273, 274,
	275, 276, 277, 278, 0, 347, 348, 349, 0, 0,
	279, 280, 350, 351, 0, 281, 282, 283, 284, 0,
	0, 285, 286, 287, 288, 0, 289, 0, 352, 290,
	291, 292, 353, 354, 140, 0, 293, 0, 0, 0,
	0, 294, 295, 296, 297, 298, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 299, 0,
	0, 0, 0, 146, 147, 148, 300, 301, 302, 303,
	149, 304, 305, 0, 150, 306, 307, 151, 152, 0,
	0, 308, 309, 310, 0, 153, 311, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 161, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 357, 166, 312, 167, 313, 314, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 315, 174, 175, 176, 316, 317,
	0, 0, 0, 177, 178, 318, 319, 320, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 321, 0, 322,
	0, 182, 183, 184, 185, 186, 819, 324, 0, 0,
	190, 0, 187, 0, 0, 188, 325, 189, 326, 327,
	328, 329, 330, 0, 331, 0, 0, 191, 192, 193,
	0, 194, 195, 196, 0, 198, 197, 0, 332, 0,
	199, 0, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 333, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 334, 211, 335, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 336, 0, 217, 0, 337,
	218, 219, 220, 221, 222, 0, 223, 338, 224, 339,
	225, 0, 226, 227, 228, 229, 230, 340, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 341, 248,
	0, 252, 253, 254, 255, 0, 257, 342, 256, 258,
	259, 0, 260, 249, 250, 261, 0, 262, 343, 344,
	263, 0, 270, 264, 265, 251, 266, 269, 345, 267,
	268, 346, 0, 271, 0, 272, 273, 274, 275, 276,
	277, 278, 0, 347, 348, 349, 0, 0, 279, 280,
	350, 351, 0, 281, 282, 283, 284, 0, 0, 285,
	286, 287, 288, 0, 289, 0, 352, 290, 291, 292,
	353, 354, 140, 0, 293, 0, 0, 0, 0, 294,
	295, 296, 297, 298, 0, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 299, 0, 0, 0,
	0, 146, 147, 148, 300, 301, 302, 303, 149, 304,
	305, 0, 150, 306, 307, 151, 152, 0, 0, 308,
	309, 310, 0, 153, 311, 0, 0, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 0, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 357, 166, 312, 167, 313, 314, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 315, 174, 175, 176, 316, 317, 0, 0,
	0, 177, 178, 318, 319, 320, 0, 179, 0, 180,
	0, 0, 0, 0, 181, 321, 0, 322, 0, 182,
	183, 184, 185, 186, 815, 324, 0, 0, 190, 0,
	187, 0, 0, 188, 325, 189, 326, 327, 328, 329,
	330, 0, 331, 0, 0, 191, 192, 193, 0, 194,
	195, 196, 0, 198, 197, 0, 332, 0, 199, 0,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	333, 205, 0, 207, 208, 210, 209, 0, 0, 0,
	334, 211, 335, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 336, 0, 217, 0, 337, 218, 219,
	220, 221, 222, 0, 223, 338, 224, 339, 225, 0,
	226, 227, 228, 229, 230, 340, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 0, 246, 247, 341, 248, 0, 252,
	253, 254, 255, 0, 257, 342, 256, 258, 259, 0,
	260, 249, 250, 261, 0, 262, 343, 344, 263, 0,
	270, 264, 265, 251, 266, 269, 345, 267, 268, 346,
	0, 271, 0, 272, 273, 274, 275, 276, 277, 278,
	0, 347, 348, 349, 0, 0, 279, 280, 350, 351,
	0, 281, 282, 283, 284, 0, 0, 285, 286, 287,
	288, 0, 289, 0, 352, 290, 291, 292, 353, 354,
	140, 0, 293, 0, 0, 0, 0, 294, 295, 296,
	297, 298, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 146,
	147, 148, 300, 301, 302, 303, 149, 304, 305, 0,
	150, 306, 307, 151, 152, 0, 0, 308, 309, 310,
	0, 153, 311, 0, 0, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 0, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 357,
	166, 312, 167, 313, 314, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	315, 174, 175, 176, 316, 317, 0, 0, 0, 177,
	178, 318, 319, 320, 0, 179, 0, 180, 0, 0,
	0, 0, 181, 321, 0, 322, 0, 182, 183, 184,
	185, 186, 813, 324, 0, 0, 190, 0, 187, 0,
	0, 188, 325, 189, 326, 327, 328, 329, 330, 0,
	331, 0, 0, 191, 192, 193, 0, 194, 195, 196,
	0, 198, 197, 0, 332, 0, 199, 0, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 334, 211,
	335, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 336, 0, 217, 0, 337, 218, 219, 220, 221,
	222, 0, 223, 338, 224, 339, 225, 0, 226, 227,
	228, 229, 230, 340, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 0, 246, 247, 341, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 0, 260, 249,
	250, 261, 0, 262, 343, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 345, 267, 268, 346, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	348, 349, 0, 0, 279, 280, 350, 351, 0, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 0,
	289, 0, 352, 290, 291, 292, 353, 354, 140, 0,
	293, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 299, 0, 0, 0, 0, 146, 147, 148,
	300, 301, 302, 303, 149, 304, 305, 0, 150, 306,
	307, 151, 152, 0, 0, 308, 309, 310, 0, 153,
	311, 0, 0, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 0, 161, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 357, 166, 312,
	167, 313, 314, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 315, 174,
	175, 176, 316, 317, 0, 0, 0, 177, 178, 318,
	319, 320, 0, 179, 0, 180, 0, 0, 0, 0,
	181, 321, 0, 322, 0, 182, 183, 184, 185, 186,
	810, 324, 0, 0, 190, 0, 187, 0, 0, 188,
	325, 189, 326, 327, 328, 329, 330, 0, 331, 0,
	0, 191, 192, 193, 0, 194, 195, 196, 0, 198,
	197, 0, 332, 0, 199, 0, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 333, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 334, 211, 335, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 336,
	0, 217, 0, 337, 218, 219, 220, 221, 222, 0,
	223, 338, 224, 339, 225, 0, 226, 227, 228, 229,
	230, 340, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 341, 248, 0, 252, 253, 254, 255, 0,
	257, 342, 256, 258, 259, 0, 260, 249, 250, 261,
	0, 262, 343, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 345, 267, 268, 346, 0, 271, 0, 272,
	273, 274, 275, 276, 277, 278, 0, 347, 348, 349,
	0, 0, 279, 280, 350, 351, 0, 281, 282, 283,
	284, 0, 0, 285, 286, 287, 288, 0, 289, 0,
	352, 290, 291, 292, 353, 354, 140, 0, 293, 0,
	0, 0, 0, 294, 295, 296, 297, 298, 0, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	299, 0, 0, 0, 0, 146, 147, 148, 300, 301,
	302, 303, 149, 304, 305, 0, 150, 306, 307, 151,
	152, 0, 0, 308, 309, 310, 0, 153, 311, 0,
	0, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 0, 161, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 357, 166, 312, 167, 313,
	314, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 315, 174, 175, 176,
	316, 317, 0, 0, 0, 177, 178, 318, 319, 320,
	0, 179, 0, 180, 0, 0, 0, 0, 181, 321,
	0, 322, 0, 182, 183, 184, 185, 186, 806, 324,
	0, 0, 190, 0, 187, 0, 0, 188, 325, 189,
	326, 327, 328, 329, 330, 0, 331, 0, 0, 191,
	192, 193, 0, 194, 195, 196, 0, 198, 197, 0,
	332, 0, 199, 0, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 333, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 334, 211, 335, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 336, 0, 217,
	0, 337, 218, 219, 220, 221, 222, 0, 223, 338,
	224, 339, 225, 0, 226, 227, 228, 229, 230, 340,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 0, 246, 247,
	341, 248, 0, 252, 253, 254, 255, 0, 257, 342,
	256, 258, 259, 0, 260, 249, 250, 261, 0, 262,
	343, 344, 263, 0, 270, 264, 265, 251, 266, 269,
	345, 267, 268, 346, 0, 271, 0, 272, 273, 274,
	275, 276, 277, 278, 0, 347, 348, 349, 0, 0,
	279, 280, 350, 351, 0, 281, 282, 283, 284, 0,
	0, 285, 286, 287, 288, 0, 289, 0, 352, 290,
	291, 292, 353, 354, 140, 0, 293, 0, 0, 0,
	0, 294, 295, 296, 297, 298, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 299, 0,
	0, 0, 0, 146, 147, 148, 300, 301, 302, 303,
	149, 304, 305, 0, 150, 306, 307, 151, 152, 0,
	0, 308, 309, 310, 0, 153, 311, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 161, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 357, 166, 312, 167, 313, 314, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 315, 174, 175, 176, 316, 317,
	0, 0, 0, 177, 178, 318, 319, 320, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 321, 0, 322,
	0, 182, 183, 184, 185, 186, 801, 324, 0, 0,
	190, 0, 187, 0, 0, 188, 325, 189, 326, 327,
	328, 329, 330, 0, 331, 0, 0, 191, 192, 193,
	0, 194, 195, 196, 0, 198, 197, 0, 332, 0,
	199, 0, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 333, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 334, 211, 335, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 336, 0, 217, 0, 337,
	218, 219, 220, 221, 222, 0, 223, 338, 224, 339,
	225, 0, 226, 227, 228, 229, 230, 340, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 341, 248,
	0, 252, 253, 254, 255, 0, 257, 342, 256, 258,
	259, 0, 260, 249, 250, 261, 0, 262, 343, 344,
	263, 0, 270, 264, 265, 251, 266, 269, 345, 267,
	268, 346, 0, 271, 0, 272, 273, 274, 275, 276,
	277, 278, 0, 347, 348, 349, 0, 0, 279, 280,
	350, 351, 0, 281, 282, 283, 284, 0, 0, 285,
	286, 287, 288, 0, 289, 0, 352, 290, 291, 292,
	353, 354, 140, 0, 293, 0, 0, 0, 0, 294,
	295, 296, 297, 298, 0, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 299, 0, 0, 0,
	0, 146, 147, 148, 300, 301, 302, 303, 149, 304,
	305, 0, 150, 306, 307, 151, 152, 0, 0, 308,
	309, 777, 0, 153, 311, 0, 0, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 0, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 357, 166, 312, 167, 313, 314, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 315, 174, 175, 176, 316, 317, 0, 0,
	0, 177, 178, 318, 319, 320, 0, 179, 0, 180,
	0, 0, 0, 0, 181, 321, 0, 322, 0, 182,
	183, 184, 185, 186, 323, 324, 0, 0, 190, 0,
	187, 0, 0, 188, 325, 189, 326, 327, 328, 329,
	330, 0, 331, 0, 0, 191, 192, 193, 0, 194,
	195, 196, 0, 198, 197, 0, 332, 0, 199, 0,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	333, 528, 0, 207, 208, 210, 209, 0, 0, 0,
	334, 211, 335, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 336, 0, 217, 0, 337, 218, 219,
	220, 221, 222, 0, 223, 338, 224, 339, 225, 0,
	226, 227, 228, 229, 230, 340, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 0, 246, 247, 341, 248, 0, 252,
	253, 254, 255, 0, 257, 342, 256, 258, 259, 0,
	260, 249, 250, 261, 0, 262, 343, 344, 263, 0,
	270, 264, 265, 251, 266, 269, 345, 267, 268, 346,
	0, 271, 0, 272, 273, 274, 275, 276, 277, 278,
	0, 524, 348, 349, 0, 0, 279, 778, 350, 351,
	0, 281, 282, 283, 284, 0, 0, 285, 286, 287,
	288, 0, 289, 0, 352, 290, 291, 292, 353, 354,
	140, 0, 293, 0, 0, 0, 0, 294, 295, 296,
	297, 298, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 146,
	147, 148, 300, 301, 302, 303, 149, 304, 305, 0,
	150, 306, 307, 151, 152, 0, 0, 308, 309, 310,
	0, 153, 311, 0, 0, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 0, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 357,
	166, 312, 167, 313, 314, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	315, 174, 175, 176, 316, 317, 0, 0, 0, 177,
	178, 318, 319, 320, 0, 179, 0, 180, 0, 0,
	0, 0, 181, 321, 0, 322, 0, 182, 183, 184,
	185, 186, 323, 324, 0, 0, 190, 0, 187, 0,
	0, 188, 325, 189, 326, 327, 328, 329, 330, 0,
	331, 0, 0, 191, 192, 193, 0, 194, 195, 196,
	0, 198, 197, 0, 332, 0, 199, 0, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 334, 211,
	335, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 336, 0, 217, 0, 337, 218, 219, 220, 221,
	222, 0, 223, 338, 224, 339, 225, 0, 226, 227,
	228, 229, 230, 340, 614, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 0, 246, 247, 341, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 0, 260, 249,
	250, 261, 0, 262, 343, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 345, 267, 268, 346, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	348, 349, 0, 0, 279, 280, 350, 351, 0, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 0,
	289, 0, 352, 290, 291, 292, 353, 354, 140, 0,
	293, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 299, 0, 0, 0, 0, 146, 147, 148,
	300, 301, 302, 303, 149, 304, 305, 0, 150, 306,
	307, 151, 152, 0, 0, 308, 309, 310, 0, 518,
	311, 0, 0, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 0, 161, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 357, 166, 312,
	167, 313, 314, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 315, 174,
	175, 176, 316, 317, 0, 0, 0, 177, 178, 318,
	319, 320, 0, 179, 0, 180, 0, 0, 0, 0,
	181, 321, 0, 322, 0, 182, 183, 184, 185, 186,
	323, 324, 0, 0, 190, 0, 187, 0, 0, 188,
	325, 189, 326, 327, 328, 329, 330, 0, 331, 0,
	0, 191, 192, 193, 0, 194, 195, 196, 0, 198,
	197, 0, 332, 0, 199, 0, 0, 517, 0, 0,
	201, 0, 202, 203, 204, 206, 333, 528, 0, 207,
	208, 210, 209, 0, 0, 0, 334, 211, 335, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 336,
	0, 217, 0, 337, 218, 219, 220, 221, 222, 0,
	223, 338, 224, 339, 225, 0, 226, 227, 228, 229,
	230, 340, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 519, 248, 0, 252, 253, 254, 255, 0,
	257, 342, 256, 520, 259, 0, 260, 249, 250, 261,
	0, 262, 343, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 345, 267, 268, 346, 0, 271, 0, 272,
	273, 274, 275, 276, 277, 278, 0, 524, 348, 349,
	0, 0, 279, 522, 350, 351, 0, 281, 282, 283,
	284, 0, 0, 285, 286, 287, 288, 0, 289, 0,
	352, 290, 291, 292, 353, 354, 140, 0, 293, 0,
	0, 0, 0, 294, 295, 296, 297, 298, 0, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	299, 0, 0, 0, 0, 146, 147, 148, 300, 301,
	302, 303, 149, 304, 305, 0, 150, 306, 307, 151,
	152, 0, 0, 308, 309, 310, 0, 153, 311, 0,
	0, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 0, 161, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 357, 166, 312, 167, 313,
	314, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 315, 174, 175, 176,
	316, 317, 0, 0, 0, 177, 178, 318, 319, 320,
	0, 179, 0, 180, 0, 0, 0, 0, 181, 321,
	0, 322, 0, 182, 183, 184, 185, 186, 323, 324,
	0, 0, 190, 0, 187, 0, 0, 188, 325, 189,
	326, 327, 328, 329, 330, 0, 331, 0, 0, 191,
	192, 193, 0, 194, 195, 196, 0, 198, 197, 0,
	332, 0, 199, 0, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 333, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 334, 211, 335, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 336, 0, 217,
	0, 337, 218, 219, 0, 221, 222, 0, 223, 338,
	224, 339, 225, 0, 226, 227, 228, 0, 230, 340,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 0, 246, 247,
	341, 0, 0, 252, 253, 254, 255, 0, 257, 342,
	256, 258, 259, 0, 260, 249, 250, 261, 0, 262,
	343, 344, 263, 0, 270, 264, 265, 251, 266, 269,
	345, 267, 268, 346, 0, 271, 0, 272, 273, 274,
	275, 276, 277, 278, 0, 347, 348, 349, 0, 0,
	279, 280, 350, 351, 0, 281, 282, 283, 284, 0,
	0, 285, 286, 287, 288, 0, 289, 0, 352, 290,
	291, 292, 353, 354, 0, 0, 293, 0, 0, 0,
	0, 294, 295, 296, 297, 298, 940, 941, 0, 960,
	961, 962, 970, 971, 972, 0, 0, 0, 0, 0,
	0, 0, 963, 0, 0, 0, 0, 0, 0, 943,
	0, 0, 974, 0, 940, 941, 0, 960, 961, 962,
	970, 971, 972, 0, 0, 0, 0, 0, 0, 0,
	963, 0, 0, 942, 0, 0, 0, 943, 0, 957,
	974, 0, 940, 941, 0, 960, 961, 962, 970, 971,
	972, 0, 0, 0, 0, 0, 0, 0, 963, 0,
	0, 942, 0, 0, 0, 943, 0, 957, 974, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 942,
	0, 0, 0, 0, 948, 957, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 975, 0, 0, 0, 0,
	0, 0, 948, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 973, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 967, 975, 0, 0, 0, 965, 0, 0,
	948, 0, 0, 958, 0, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 975, 0, 0, 0, 965, 0, 0, 964, 0,
	0, 958, 0, 0, 0, 0, 0, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 965, 0, 0, 964, 0, 0, 958,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 959, 0, 0, 0,
	0, 0, 0, 0, 964, 0, 0, 0, 0, 0,
	0, 0, 968, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 940, 941, 0, 960, 961,
	962, 970, 971, 972, 0, 0, 0, 0, 0, 0,
	968, 963, 0, 0, 0, 0, 0, 0, 943, 0,
	0, 974, 959, 940, 941, 0, 960, 961, 962, 970,
	971, 972, 0, 0, 0, 0, 0, 0, 968, 963,
	0, 0, 942, 0, 0, 0, 943, 0, 957, 974,
	966, 0, 0, 954, 955, 956, 969, 0, 953, 951,
	952, 944, 945, 946, 947, 949, 950, 0, 0, 0,
	942, 2185, 0, 0, 0, 0, 957, 0, 966, 0,
	0, 954, 955, 956, 969, 0, 953, 951, 952, 944,
	945, 946, 947, 949, 950, 0, 0, 0, 0, 2130,
	0, 0, 0, 948, 0, 0, 966, 0, 0, 954,
	955, 956, 969, 0, 953, 951, 952, 944, 945, 946,
	947, 949, 950, 967, 975, 0, 0, 2125, 0, 0,
	0, 948, 0, 0, 0, 1653, 1654, 0, 1671, 1672,
	1673, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 967, 975, 0, 0, 0, 965, 0, 0, 0,
	0, 0, 958, 0, 0, 0, 0, 0, 0, 973,
	0, 0, 0, 0, 0, 940, 941, 0, 960, 961,
	962, 970, 971, 972, 965, 0, 0, 964, 1668, 0,
	958, 963, 0, 0, 0, 0, 0, 0, 943, 0,
	0, 974, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 964, 0, 0, 0, 0,
	0, 0, 942, 0, 0, 0, 0, 0, 957, 0,
	0, 0, 0, 0, 0, 959, 0, 0, 0, 0,
	0, 940, 941, 1659, 960, 961, 962, 970, 971, 972,
	0, 968, 0, 0, 0, 0, 0, 963, 0, 0,
	0, 0, 0, 959, 943, 0, 0, 974, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 968,
	0, 1674, 0, 948, 0, 0, 0, 0, 942, 0,
	0, 0, 940, 941, 957, 960, 961, 962, 970, 971,
	972, 0, 1669, 967, 975, 0, 0, 0, 963, 0,
	0, 0, 0, 0, 0, 943, 0, 0, 974, 966,
	0, 973, 954, 955, 956, 969, 0, 953, 951, 952,
	944, 945, 946, 947, 949, 950, 965, 0, 0, 942,
	2121, 0, 958, 0, 0, 957, 0, 966, 0, 948,
	954, 955, 956, 969, 0, 953, 951, 952, 944, 945,
	946, 947, 949, 950, 0, 0, 0, 964, 2113, 967,
	975, 0, 0, 0, 0, 1670, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	948, 0, 965, 0, 0, 0, 0, 0, 958, 0,
	0, 0, 0, 0, 0, 959, 0, 0, 0, 0,
	967, 975, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 0, 964, 0, 0, 0, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 965, 0, 0, 0, 0, 0, 958,
	0, 0, 1665, 1666, 1667, 0, 0, 1664, 1662, 1663,
	1655, 1656, 1657, 1658, 1660, 1661, 0, 0, 0, 0,
	0, 959, 0, 0, 964, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 968, 0, 966,
	0, 0, 954, 955, 956, 969, 0, 953, 951, 952,
	944, 945, 946, 947, 949, 950, 0, 0, 0, 0,
	2039, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 959, 0, 0, 940, 941, 0, 960, 961,
	962, 970, 971, 972, 0, 0, 0, 0, 968, 0,
	0, 963, 0, 0, 0, 0, 0, 0, 943, 0,
	0, 974, 0, 0, 0, 966, 0, 0, 954, 955,
	956, 969, 0, 953, 951, 952, 944, 945, 946, 947,
	949, 950, 942, 0, 0, 0, 2038, 0, 957, 940,
	941, 0, 960, 961, 962, 970, 971, 972, 0, 0,
	0, 0, 0, 0, 0, 963, 0, 0, 0, 0,
	0, 0, 943, 0, 0, 974, 966, 0, 0, 954,
	955, 956, 969, 0, 953, 951, 952, 944, 945, 946,
	947, 949, 950, 0, 0, 0, 942, 2003, 0, 0,
	0, 0, 957, 948, 0, 0, 0, 0, 0, 0,
	0, 940, 941, 0, 960, 961, 962, 970, 971, 972,
	0, 0, 0, 967, 975, 0, 0, 963, 0, 0,
	0, 0, 0, 0, 943, 0, 0, 974, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 965, 948, 942, 0,
	0, 0, 958, 0, 957, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 967, 975, 0,
	0, 0, 0, 0, 0, 0, 0, 964, 0, 0,
	0, 0, 0, 0, 0, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	965, 0, 0, 0, 0, 0, 958, 0, 0, 948,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 959, 0, 0, 0, 967,
	975, 964, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 0, 0, 0, 0, 0, 973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 965, 0, 0, 0, 0, 0, 958, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 959,
	0, 940, 941, 0, 960, 961, 962, 970, 971, 972,
	0, 0, 0, 964, 0, 968, 0, 963, 0, 0,
	0, 0, 0, 0, 943, 0, 0, 974, 0, 966,
	0, 0, 954, 955, 956, 969, 0, 953, 951, 952,
	944, 945, 946, 947, 949, 950, 0, 0, 942, 0,
	1930, 0, 0, 0, 957, 0, 0, 0, 0, 940,
	941, 959, 960, 961, 962, 970, 971, 972, 0, 0,
	0, 0, 0, 0, 0, 963, 0, 968, 0, 0,
	0, 0, 943, 966, 0, 974, 954, 955, 956, 969,
	0, 953, 951, 952, 944, 945, 946, 947, 949, 950,
	0, 0, 0, 0, 1866, 0, 942, 0, 0, 948,
	0, 0, 957, 0, 0, 0, 940, 941, 0, 960,
	961, 962, 970, 971, 972, 0, 0, 0, 0, 967,
	975, 0, 963, 0, 0, 0, 0, 0, 0, 943,
	0, 0, 974, 0, 0, 966, 0, 973, 954, 955,
	956, 969, 0, 953, 951, 952, 944, 945, 946, 947,
	949, 950, 965, 942, 0, 0, 1842, 948, 958, 957,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 967, 975, 0,
	0, 0, 0, 964, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	965, 0, 0, 0, 948, 2284, 958, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 959, 0, 0, 967, 975, 0, 0, 0, 0,
	0, 964, 0, 0, 0, 0, 0, 968, 0, 0,
	0, 0, 973, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 965, 0, 0,
	0, 0, 0, 958, 0, 0, 0, 0, 0, 0,
	0, 0, 1653, 1654, 0, 1671, 1672, 1673, 0, 959,
	0, 0, 0, 0, 0, 0, 0, 0, 964, 0,
	0, 0, 0, 0, 0, 968, 0, 0, 0, 0,
	0, 0, 0, 0, 2283, 966, 0, 0, 954, 955,
	956, 969, 0, 953, 951, 952, 944, 945, 946, 947,
	949, 950, 0, 0, 0, 1668, 1357, 0, 0, 0,
	0, 0, 0, 0, 940, 941, 959, 960, 961, 962,
	970, 971, 972, 0, 0, 0, 0, 0, 0, 0,
	963, 0, 968, 0, 0, 0, 0, 943, 0, 0,
	974, 0, 0, 966, 0, 0, 954, 955, 956, 969,
	0, 953, 951, 952, 944, 945, 946, 947, 949, 950,
	1659, 942, 1615, 0, 0, 0, 0, 957, 0, 0,
	940, 941, 0, 960, 961, 962, 970, 971, 972, 0,
	0, 1675, 0, 0, 0, 0, 963, 0, 0, 0,
	0, 1487, 0, 943, 0, 0, 974, 0, 1674, 0,
	966, 0, 0, 954, 955, 956, 969, 0, 953, 951,
	952, 944, 945, 946, 947, 949, 950, 942, 0, 1669,
	0, 0, 948, 957, 1685, 0, 1217, 1684, 0, 0,
	0, 0, 940, 941, 0, 960, 961, 962, 970, 971,
	972, 0, 967, 975, 0, 0, 0, 0, 963, 0,
	0, 0, 1216, 1488, 0, 943, 0, 0, 974, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 965, 0, 0, 948, 942,
	0, 958, 0, 0, 0, 957, 0, 0, 0, 0,
	0, 0, 1670, 0, 0, 0, 0, 0, 967, 975,
	0, 0, 0, 0, 0, 0, 964, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 973, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 965, 0, 0, 0, 0, 0, 958, 0, 0,
	948, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 0, 0, 0, 0, 0,
	967, 975, 964, 0, 0, 0, 0, 0, 0, 0,
	968, 0, 0, 0, 0, 0, 0, 0, 973, 1665,
	1666, 1667, 0, 0, 1664, 1662, 1663, 1655, 1656, 1657,
	1658, 1660, 1661, 965, 0, 0, 0, 0, 0, 958,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	959, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 964, 0, 968, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 954, 955, 956, 969, 0, 953, 951, 952, 944,
	945, 946, 947, 949, 950, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	940, 941, 959, 960, 961, 962, 970, 971, 972, 0,
	0, 0, 0, 0, 0, 0, 963, 0, 968, 0,
	0, 0, 0, 943, 966, 0, 974, 954, 955, 956,
	969, 0, 953, 951, 952, 944, 945, 946, 947, 949,
	950, 0, 0, 0, 0, 0, 0, 942, 0, 0,
	0, 0, 0, 957, 0, 0, 0, 0, 0, 0,
	0, 0, 940, 941, 0, 960, 961, 962, 970, 971,
	972, 0, 0, 0, 0, 0, 0, 0, 963, 0,
	0, 0, 0, 0, 0, 943, 966, 0, 974, 954,
	955, 956, 969, 0, 953, 951, 952, 944, 945, 946,
	947, 949, 950, 0, 0, 0, 0, 0, 948, 942,
	0, 0, 0, 0, 0, 957, 0, 0, 940, 941,
	0, 960, 961, 962, 970, 971, 972, 0, 967, 975,
	0, 0, 0, 0, 963, 0, 0, 0, 0, 0,
	0, 943, 0, 0, 974, 0, 973, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 965, 0, 0, 0, 942, 0, 958, 0, 0,
	948, 957, 0, 0, 0, 0, 0, 0, 0, 0,
	940, 941, 0, 960, 961, 962, 970, 971, 972, 0,
	967, 975, 964, 553, 0, 0, 963, 0, 0, 0,
	1686, 0, 0, 943, 0, 0, 974, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 965, 0, 0, 948, 942, 0, 958,
	0, 1691, 0, 957, 0, 0, 0, 0, 0, 0,
	959, 0, 0, 0, 0, 0, 967, 975, 0, 0,
	0, 0, 0, 0, 964, 0, 968, 0, 0, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 965,
	0, 0, 0, 0, 0, 958, 0, 0, 948, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 959, 0, 0, 0, 0, 0, 967, 975,
	964, 0, 0, 0, 0, 0, 0, 0, 968, 0,
	0, 0, 0, 0, 966, 0, 973, 954, 955, 956,
	969, 0, 953, 951, 952, 944, 945, 946, 947, 949,
	950, 965, 0, 0, 1846, 0, 0, 958, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 959, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 964, 0, 968, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 966, 0, 0, 954,
	955, 956, 969, 0, 953, 951, 952, 944, 945, 946,
	947, 949, 950, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 940, 941,
	959, 960, 961, 962, 970, 971, 972, 0, 0, 0,
	0, 0, 0, 0, 963, 0, 968, 0, 0, 0,
	0, 943, 966, 0, 974, 954, 955, 956, 969, 0,
	953, 951, 952, 944, 945, 946, 947, 949, 950, 0,
	0, 0, 0, 0, 0, 942, 0, 0, 0, 0,
	0, 957, 0, 0, 940, 941, 0, 960, 961, 962,
	970, 971, 972, 0, 0, 0, 0, 0, 0, 0,
	963, 0, 0, 0, 1644, 0, 0, 943, 0, 0,
	974, 0, 0, 0, 966, 0, 0, 954, 955, 956,
	969, 0, 953, 951, 952, 944, 945, 946, 947, 949,
	950, 942, 0, 0, 0, 0, 948, 957, 0, 0,
	0, 0, 0, 0, 940, 941, 0, 960, 961, 962,
	970, 971, 972, 0, 0, 0, 967, 975, 0, 0,
	963, 0, 0, 0, 0, 0, 0, 943, 0, 0,
	974, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 965,
	0, 942, 948, 0, 0, 958, 0, 957, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 967, 975, 0, 0, 0, 0, 0, 0,
	964, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	973, 0, 0, 1651, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 965, 0, 0, 0, 0,
	0, 958, 948, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 959, 0,
	0, 0, 967, 975, 0, 0, 964, 0, 0, 0,
	0, 0, 0, 0, 968, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 965, 0, 0, 0, 0,
	0, 958, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 964, 0, 0, 0,
	968, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 966, 0, 0, 954, 955, 956, 969, 0,
	953, 951, 952, 944, 945, 946, 947, 949, 950, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	968, 0, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 954, 955, 956, 969, 0, 953, 951, 952, 944,
	945, 946, 947, 949, 950, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 940, 941,
	0, 960, 961, 962, 970, 971, 972, 0, 0, 0,
	0, 0, 0, 0, 963, 0, 0, 0, 0, 0,
	0, 943, 0, 0, 974, 0, 0, 0, 966, 0,
	0, 954, 955, 956, 969, 0, 953, 951, 952, 944,
	945, 946, 947, 949, 950, 942, 0, 0, 0, 940,
	941, 957, 960, 961, 962, 970, 971, 972, 0, 0,
	0, 0, 0, 1653, 1654, 0, 1671, 1672, 1673, 0,
	0, 0, 943, 0, 0, 974, 0, 0, 0, 1835,
	0, 0, 0, 0, 940, 941, 0, 960, 961, 962,
	970, 971, 972, 0, 0, 0, 942, 0, 0, 0,
	0, 0, 957, 0, 0, 0, 948, 943, 0, 0,
	974, 0, 0, 0, 1653, 1654, 1668, 1671, 1672, 1673,
	0, 0, 0, 0, 0, 0, 967, 975, 0, 0,
	1834, 942, 0, 0, 0, 0, 0, 957, 0, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 948, 0, 965,
	0, 0, 0, 0, 0, 958, 0, 1668, 0, 0,
	0, 1659, 0, 0, 0, 0, 0, 967, 975, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 948, 0, 0, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1674,
	965, 0, 967, 975, 0, 0, 958, 0, 0, 0,
	0, 0, 1659, 0, 0, 0, 0, 0, 0, 0,
	1669, 0, 0, 0, 0, 0, 0, 0, 959, 0,
	0, 0, 0, 0, 0, 965, 0, 0, 0, 0,
	0, 958, 0, 0, 968, 0, 0, 0, 0, 0,
	1674, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1669, 0, 0, 0, 0, 0, 0, 0, 959,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1670, 0, 968, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 966, 0, 959, 954, 955, 956, 969, 0,
	953, 951, 952, 944, 945, 946, 947, 949, 950, 0,
	968, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1670, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 966, 0, 0, 954, 955, 956, 969,
	0, 953, 951, 952, 944, 945, 946, 947, 949, 950,
	1665, 1666, 1667, 0, 0, 1664, 1662, 1663, 1655, 1656,
	1657, 1658, 1660, 1661, 0, 0, 0, 0, 966, 0,
	0, 954, 955, 956, 969, 0, 953, 951, 952, 944,
	945, 946, 947, 949, 950, 1065, 1055, 1084, 1047, 1075,
	1074, 0, 0, 1049, 1048, 0, 0, 0, 0, 1086,
	1085, 1665, 1666, 1667, 0, 0, 1664, 1662, 1663, 1655,
	1656, 1657, 1658, 1660, 1661, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 0, 1072, 1071, 0, 0, 0,
	0, 0, 0, 0, 0, 1070, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1069, 1067, 1068, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1065, 1055, 1084, 1047, 1075,
	1074, 0, 0, 1049, 1048, 0, 0, 0, 0, 1086,
	1085, 0, 0, 0, 1058, 1057, 1059, 1060, 1061, 1062,
	1063, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 0, 1072, 1071, 0, 0, 0,
	1051, 0, 0, 0, 0, 1070, 0, 0, 0, 0,
	0, 0, 1073, 0, 0, 0, 1056, 0, 0, 0,
	0, 0, 0, 1069, 1067, 1068, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1066, 0, 0, 0, 1292,
	1290, 1291, 1294, 1293, 1058, 1057, 1059, 1060, 1061, 1062,
	1063, 0, 1083, 0, 0, 0, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 1052, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 580, 1064, 1053, 0, 0,
	1051, 0, 0, 0, 0, 0, 1088, 578, 0, 0,
	0, 0, 1073, 0, 0, 0, 1056, 0, 0, 1050,
	0, 0, 1081, 1082, 0, 0, 0, 0, 579, 0,
	0, 0, 0, 581, 0, 0, 0, 0, 587, 588,
	0, 0, 597, 0, 1054, 1066, 0, 0, 0, 1087,
	0, 0, 0, 0, 0, 0, 513, 582, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1052, 0, 0, 0, 600,
	0, 0, 0, 0, 0, 0, 1064, 1053, 0, 0,
	0, 0, 0, 0, 0, 0, 1088, 0, 0, 583,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1050,
	0, 0, 1081, 1082, 584, 585, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 591, 0, 1054, 586, 593, 0, 0, 1087,
	0, 0, 0, 0, 0, 0, 590, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 589, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 594, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 0,
	0, 0, 599, 0, 0, 0, 516, 0, 0, 0,
	0, 592, 596, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598,
}
var sqlPact = [...]int{

	4135, -1000, 10, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 18324, -1000,
	-1000, 22458, -1000, -1000, -1000, -1000, -1000, -1000, 22140, 696,
	1133, -1000, -1000, -1000, -1000, -1000, 22458, 2304, 1332, 5937,
	655, 1233, 22458, 18324, 1230, 1332, 23730, -1000, -1000, 23730,
	1632, -1000, -1000, -1000, -1000, -1000, 27864, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 654, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	943, 759, 104, 698, -1000, 1072, -48, 15106, 31793, 510,
	513, 510, 510, 511, 757, 27546, 22458, 1631, -13, -1000,
	292, 16069, 4135, 600, -15, 18960, 22458, -1000, 7, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 354, 7, -1000, -1000, 21822,
	-1000, 1408, 1247, 1239, 20550, -1000, -1000, -1000, -1000, -1000,
	316, -1000, 13784, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1013, -1000, -14, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 22458,
	11428, 315, 1407, 11428, 1010, -1000, 22458, -1000, -1000, -1000,
	1874, -1000, -1000, -1000, -1000, -1000, 412, 1865, 707, 308,
	27228, -1000, 959, -1000, 405, 580, -1000, -1000, 14776, 24,
	20550, -1000, 11428, 11428, 26910, 22458, 22458, 1285, 26592, -1000,
	1072, -1000, -1000, 26274, 25956, 25638, 25320, 25002, -1000, 1215,
	1626, 1626, 1626, 1660, 117, 114, 104, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1784, -1000, -1000, -1000,
	-1000, 1840, -1000, -1000, -1000, -1000, -1000, 1874, 18006, 813,
	1634, 1406, -1000, 1007, 1405, 1404, 1403, 1402, 1399, -1000,
	780, -1000, 1441, 516, -1000, 1397, 907, 485, -1000, 1392,
	1384, 959, -1000, 959, -1000, -1000, -1000, 599, 23730, 21504,
	24684, 22458, 21186, -19, 22458, -1000, 295, -19, 10055, 10055,
	-1000, -1000, 292, -1000, 9369, 1652, 1038, -186, 133, 382,
	-1000, 15425, 17358, -1000, 18006, 18960, -15, -81, -1000, -1000,
	-1000, 5607, 682, 16391, 7, -1000, -1000, -1000, -1000, -1000,
	20550, 22458, 22458, 732, 24366, 342, -1000, 11428, 19, -1000,
	-1000, 292, 18324, 1250, 390, 30854, -1000, 11428, 11428, 11428,
	11428, 11428, 901, 341, -1000, 291, 289, 6611, -1000, -1000,
	1832, -1000, -1000, -1000, 119, -1000, -1000, 11428, 7, -1000,
	-1000, -1000, -1000, 286, 1857, -1000, 440, -1000, -1000, -1000,
	422, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1434, 284, 283, 280, -1000, -1000, -1000, -1000, 276, 275,
	274, 273, 272, 271, 267, 266, 265, 264, 263, 262,
	260, 254, 253, 867, -1000, 441, -1000, -1000, 441, 441,
	-1000, 216, 216, 226, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 216, -1000, -1000, -1000, 406, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 251, 1708, 31638, 18006, 30854, 18324,
	-1000, -1000, -1000, -1000, 22458, 11428, -1000, 1707, 959, -50,
	-1000, -1000, -1000, -1000, 1175, 1147, 546, 769, 14446, 14116,
	1597, -1000, -1000, -1000, 22, 5937, 128, -1000, 30854, 30854,
	249, 1144, 425, 127, 24048, 425, 1137, -1000, 1215, 121,
	1528, -1000, 121, 1526, 116, 1524, -1000, -145, -1000, 1521,
	-81, 1520, -1000, 1008, 1248, 10742, 1242, 11428, 104, -1000,
	-1000, 104, 104, 7641, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 20868, -1000, -1000, 697, 22458, 1433, 18324,
	22458, 22458, 22458, 22458, 22458, -1000, -1000, 148, 1428, 22458,
	1173, -1000, -1000, 22458, 22458, 790, 645, -1000, -50, -1000,
	23730, -1000, 1023, 1518, 450, 723, 1515, 839, 833, 1511,
	22458, -19, 1706, 22458, 90, -1000, 30082, -1000, 90, -1000,
	17, -1000, 30854, -1000, 1226, 1225, 16069, 1649, 904, 904,
	904, -1000, 245, 326, 382, 4933, 11428, -1000, 20232, 923,
	41, 115, 1652, -1000, 22458, 376, -1000, 22458, -1000, -1000,
	-1000, 1381, 13, -1000, -1000, 430, 95, 1704, 95, 16714,
	-1000, 22458, 6, 30854, 1834, 19278, 598, -1000, 467, 19596,
	31548, 31638, 5937, 624, 11428, 11428, 11428, 11428, 11428, 11428,
	11428, 11428, 11428, 11428, 11428, 11428, 11428, 11428, 11428, 11428,
	11428, 11428, 11428, 11428, 11428, 11428, 1302, 11428, 587, 11428,
	11428, 11428, 11428, 1270, 919, 210, 957, -1000, 1769, 1769,
	1769, 31199, 31199, 186, 341, -1000, 11428, -1000, 10399, 114,
	29611, -38, -1000, -1000, -1000, 7984, 438, 30854, 7, 6267,
	-1000, 1830, 883, 1456, 1322, 235, 111, 110, 109, 11428,
	11428, 12114, 12114, 11428, 12457, 11428, 11428, 6954, 11428, 11428,
	11428, 11428, 11428, 11428, -1000, 230, -1000, -1000, -1000, -1000,
	1825, -1000, -1000, 1813, -1000, 621, 620, 1803, -48, 0,
	-1000, 652, -1000, -1000, -1000, -1000, 88, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 226,
	867, 216, 216, 216, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 406, -1000, -1000, 441, 441, 441, -1000, -1000, -87,
	-1000, 1380, -1000, 411, -2, 496, -50, 959, 1094, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1856, -55, -1000, -1000, -55, -1000, -1000, 5937,
	-1000, -1000, 20550, -1000, -1000, 19596, 1700, 1510, -1000, 874,
	-1000, 1697, 22458, 998, 1123, -1000, 637, 1506, -1000, -1000,
	22458, 22458, -1000, 22458, -1000, 22458, 22458, 5937, 22458, 22458,
	-1000, -1000, -1000, 30854, -1000, 403, -1000, -1000, 30854, 779,
	1245, -1000, 1245, -56, -1000, 30020, 1217, 22458, -1000, -1000,
	-1000, -1000, -1000, 22458, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 147, -1000, -1000, -1000, -1000, 22458, 22458, 22458,
	-1000, -102, 810, -1000, 19914, 1617, 1616, 1622, 20550, 1680,
	-48, 1376, 1679, -48, 1372, 586, 22458, 583, 578, 20550,
	-1000, 214, -6, 430, 10055, 16069, 5937, -1000, 430, 9369,
	-1000, 16069, 16069, 1177, 1214, 16069, -1000, -1000, -1000, -1000,
	20232, 377, 382, 20232, -1000, 1800, 1213, -17, -1000, -1000,
	22458, 213, -1000, 382, 108, 1301, 1018, -1000, 681, 1356,
	22458, 765, 11428, 981, -1000, 15747, 444, 22458, 765, 79,
	-1000, -1000, -1000, 371, 22458, -1000, -1000, 11428, -1000, -1000,
	22458, 18006, -18, -1000, -1000, -1000, -1000, -1000, 31638, 22458,
	302, 22458, 22458, -1000, 211, 1211, 1208, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 404, 451, 451,
	591, 591, 591, 591, 1855, 2439, 177, 1314, 381, 381,
	381, 2179, 337, 337, 381, 381, 381, 31199, 31148, 2394,
	11428, 11428, 576, 916, 210, 2394, 11428, 2394, 2394, 2394,
	2394, -1000, 1287, -1000, -1000, -1000, -1000, 1353, 209, 12457,
	12457, -1000, -1000, -1000, 6611, 12800, -1000, -1000, -1000, -1000,
	208, 11428, -1000, 29669, -199, -22, -1000, -1000, 11428, -126,
	-127, -1000, -1000, 668, -1000, 11428, -1000, -35, 11428, 11428,
	11428, 105, 102, -1000, 574, -1000, 572, 571, 566, -1000,
	206, 897, 205, 203, 11428, -1000, -1000, -1000, 30794, 3909,
	101, 1348, -163, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	99, 98, 30738, -163, 97, 29902, -1000, 12457, 12457, 12457,
	6611, 197, 96, 29964, -163, 30500, 9712, 9712, 9712, 92,
	30438, 11428, -163, 3729, 3643, 3377, -23, -24, -28, 1799,
	-29, 91, 400, 383, 86, -1000, -1000, 31638, -1000, 340,
	559, -1000, 1796, 424, 18006, 22458, -1000, 1236, -1000, -1000,
	725, -1000, 858, -1000, 15106, -1000, -1000, 85, -30, -66,
	31638, -48, 22458, 1854, -48, 22458, 1505, 1534, 366, 22458,
	-1000, 121, 121, -1000, 116, -1000, -1000, -81, 779, -1000,
	11428, 1793, -1000, -1000, -1000, 7641, -1000, -1000, -1000, 22458,
	-174, -98, -1000, -1000, -1000, -1000, -1000, 376, 1026, 22458,
	22458, 22458, -1000, -1000, 1092, 23412, 1079, 196, 22458, 22458,
	23094, 22776, 22458, 822, -48, -1000, 195, -48, -1000, 189,
	22458, 803, 22458, 22458, 794, -48, -1000, 1320, -1000, -157,
	1652, -1000, 1320, -1000, -1000, 1177, -1000, 188, 11428, 16069,
	-1000, 325, -1000, -34, -1000, 20232, -1000, 324, -196, -1000,
	370, -1000, 382, 187, 22458, 20232, -1000, 424, 1344, 661,
	-1000, 680, -1000, -1000, 7297, 30854, -1000, 765, 1624, -39,
	-1000, -1000, -1000, 430, 16714, 16069, 9369, -40, 30854, -98,
	1600, 1600, 19596, -1000, 184, 22458, 13462, 180, 1006, 11428,
	179, 178, 11428, 2394, 2394, 11428, 12457, 12457, -1000, 2394,
	-1000, -1000, -1000, -1000, -1000, 1335, 176, 11428, 31638, 31264,
	31213, -41, -1000, 9026, -83, -1000, 11428, -1000, 29431, -1000,
	-1000, 338, 1532, -1000, 11428, 30382, 84, 8683, -1000, 30320,
	-36, -36, -1000, 1853, 1156, 933, 877, 731, 1792, -1000,
	17036, 434, 908, 29369, 31548, 31638, -1000, 11428, -1000, -1000,
	1333, 11428, -1000, 31548, 31638, 12457, 12457, 12457, 12457, 12457,
	12457, 12457, 12457, 12457, 12457, 12457, 12457, 12457, 12457, 12457,
	12457, 12457, 12457, 12457, 1201, 12457, 1760, 1760, 1760, -89,
	8340, -1000, 1418, 1333, 11428, 11428, 31638, 81, 80, 78,
	-1000, 11428, -163, 11428, 11428, 11428, -1000, -1000, -1000, 74,
	-1000, 1791, -1000, -1000, -1000, -1000, -1000, 1790, -1000, 323,
	73, -1000, 934, -1000, -98, -1000, -1000, -1000, -1000, -1000,
	1291, -1000, -1000, 174, -1000, -1000, 164, 22458, 1185, 366,
	18642, -1000, 425, -1000, -1000, -1000, 938, 29315, -1000, 1612,
	5937, 22458, -1000, -1000, -1000, 565, 553, 1497, -1000, 1057,
	-1000, 449, 870, -1000, 1495, 1020, 1488, 1020, -1000, -102,
	754, -1000, 11428, -1000, 11428, -1000, 551, -1000, -1000, 550,
	67, 1317, 1656, -1000, 16069, 1317, -1000, 22458, 30854, -1000,
	-186, -1000, 1788, -1000, -1000, 1213, -1000, 5274, 20232, 22458,
	-45, -1000, -1000, 18006, 606, -1000, -115, -1000, -1000, 227,
	-48, 765, -1000, -117, -1000, 367, 1587, -1000, 1583, -1000,
	2274, 13462, 163, -46, -1000, 294, 1637, 11428, -1000, -1000,
	162, 22458, -1000, 29072, 13462, 22458, 1757, 2394, 3610, 2967,
	11428, 31638, 31234, -51, 11428, 11428, -1000, -57, -1000, 11428,
	321, 30854, -1000, -1000, -1000, 30854, 11428, 1836, 11428, 66,
	63, 61, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	56, -1000, -1000, 28182, 11428, 54, -1000, 53, 46, 30854,
	1418, 30854, -1000, -1000, 685, 685, 688, 688, 688, 688,
	1760, 228, 1068, 1060, 748, 748, 748, 543, 486, 486,
	748, 748, 748, 1330, 1155, 161, 28915, 11428, -59, -1000,
	-1000, -1000, 30854, 30854, 45, -1000, -1000, -1000, -163, 248,
	29021, 28955, -1000, 38, 319, -1000, -1000, 159, -1000, 1296,
	19596, 1695, 13462, 997, 1198, 366, 18642, -1000, 637, -1000,
	-1000, -1000, 1612, -1000, 22458, 22458, 22458, 1480, -1000, -1000,
	1188, 1273, 488, 22458, -1000, 22458, -1000, 22458, 22458, 22458,
	-61, -65, 22458, 22458, -1000, 428, 11428, 11428, 1652, 428,
	-67, 382, -1000, -1000, -1000, 1767, -1000, -69, -1000, -125,
	17688, 1544, 22458, 1613, -1000, -1000, 158, 157, 156, -1000,
	22458, -1000, 5937, 22458, 1328, 1029, -1000, -1000, 1192, 155,
	12457, 22458, -73, 13462, 886, 13462, 1612, 7, 5937, 1612,
	28803, 6267, -85, -1000, -107, -108, 11428, 11428, 31234, -118,
	-1000, 2394, 2394, -1000, 28775, -1000, 30854, -1000, 30320, -1000,
	-1000, -1000, -1000, 896, -1000, 28562, -1000, -1000, -1000, -1000,
	12457, 1329, 152, 31638, 28534, -1000, -1000, 11428, -1000, -1000,
	-1000, -1000, 1850, 879, 35, -48, -130, 22458, -1000, 366,
	18642, -1000, 1534, -1000, -1000, -1000, -1000, 22458, 1028, -1000,
	1027, 11428, -1000, 31638, 1020, 1020, -1000, 542, 527, 524,
	522, -1000, -1000, -1000, 22458, 30854, -163, -1000, -1000, 20232,
	318, -1000, -1000, 150, 7, 594, -135, 22458, -1000, -1000,
	4516, 18006, 18006, 892, -1000, -1000, 22458, 1055, -1000, -1000,
	11428, 28915, 149, 886, -136, 1291, 141, -1000, -1000, -1000,
	-1000, -1000, -1000, 1637, -35, -1000, -1000, 785, 2394, 2394,
	-1000, -1000, 34, 908, 1651, -1000, 815, 12457, 31638, -147,
	-1000, 28506, -149, -1000, 365, 22458, 1291, -1000, 886, 139,
	18642, -1000, 1185, -1000, -1000, -1000, 30854, 1635, -1000, -1000,
	22458, 22458, 138, 137, -143, -1000, 1684, -1000, -1000, 11428,
	718, -1000, 430, -1000, -155, -159, -1000, -1000, 1478, 3995,
	1162, 22458, 1291, 886, -1000, 22458, 1612, 30, 22458, -1000,
	828, 11428, 815, -164, -1000, -1000, 1850, -1000, -1000, 1846,
	136, -1000, 1291, 13462, -1000, 1198, 464, 5937, -1000, -1000,
	11428, 11428, 22458, 135, -36, 16714, -1000, 424, 424, 1462,
	-1000, 935, 1170, 28, -1000, 1291, -165, -1000, -1000, 127,
	27, 11771, 11771, -163, -1000, -1000, -1000, 22458, -1000, -166,
	-1000, -1000, 11428, -1000, -172, -177, -1000, -1000, 26, -160,
	463, 457, 22458, -1000, 994, 940, 691, -1000, -1000, -1000,
	-1000, -1000, -1000, 1162, -1000, -1000, -1000, 13132, 966, 749,
	29726, -1000, -178, 886, 30854, -1000, -1000, 1836, -1000, 641,
	640, -1000, -1000, 1552, -1000, 475, 1054, 1054, 935, 1714,
	-1000, -1000, -1000, -1000, -1000, 989, 1291, 674, 673, -1000,
	1749, -1000, -1000, 1243, -1000, -1000, 11085, -1000, -1000, -1000,
	-1000, 18006, 18006, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2272, 2271, 1469, 1558, 2267, 2266, 2256, 2252, 2250,
	2249, 2247, 2246, 2244, 2241, 2240, 2239, 2237, 2235, 2234,
	2230, 2225, 2224, 2213, 2208, 2207, 2202, 1551, 2200, 2197,
	2196, 2195, 2193, 2192, 1541, 2191, 1535, 2186, 2185, 2184,
	2183, 2182, 1533, 1493, 2177, 80, 107, 1488, 2175, 2171,
	1485, 2170, 2168, 2166, 2161, 2160, 2159, 2158, 85, 2157,
	2153, 2150, 2148, 2146, 2140, 2137, 147, 159, 2134, 1483,
	2129, 2128, 2125, 2121, 2117, 2116, 2115, 2114, 2106, 2105,
	2103, 2101, 2100, 2098, 2085, 2084, 2078, 2077, 157, 2076,
	2074, 1480, 1474, 2073, 2072, 14, 2070, 13, 2066, 68,
	22, 144, 2905, 131, 2065, 2064, 2063, 2062, 71, 89,
	83, 2060, 90, 2059, 2055, 43, 29, 21, 18, 2050,
	95, 2049, 2047, 1172, 25, 2046, 2041, 134, 2035, 17,
	33, 2335, 155, 153, 108, 106, 2033, 2029, 2021, 2019,
	45, 119, 1, 2017, 2015, 11, 59, 15, 2012, 51,
	23, 2010, 2009, 133, 2008, 79, 103, 1444, 122, 113,
	1802, 2007, 74, 12, 81, 2006, 2005, 148, 30, 2003,
	41, 75, 138, 2001, 52, 161, 124, 76, 125, 104,
	2000, 1995, 1994, 100, 1993, 109, 61, 1991, 1990, 73,
	1989, 130, 143, 1987, 1986, 87, 1985, 123, 1982, 1980,
	158, 142, 110, 6, 38, 69, 24, 1442, 1438, 114,
	66, 50, 47, 1979, 1590, 1105, 88, 27, 97, 55,
	46, 98, 54, 58, 146, 20, 1978, 1968, 116, 1964,
	1963, 1961, 1960, 1956, 96, 1955, 1945, 72, 140, 82,
	28, 40, 84, 35, 65, 154, 129, 151, 102, 1943,
	93, 121, 1938, 78, 1934, 1933, 1411, 120, 1931, 1930,
	1929, 1285, 1202, 1191, 229, 1928, 1926, 1010, 235, 1924,
	1920, 56, 1919, 117, 111, 1918, 145, 135, 31, 1915,
	115, 32, 94, 1914, 4, 34, 0, 182, 112, 1911,
	105, 62, 1910, 1909, 1908, 1907, 26, 2, 10, 3,
	8, 5, 48, 44, 1905, 1904, 128, 91, 53, 1902,
	156, 1901, 1899, 1898, 37, 1895, 16, 1892, 19, 1887,
	1885, 9, 7, 1882, 1879, 141, 1877, 99, 1872, 1677,
	1871, 152, 1870, 1868, 1472, 36, 101,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 5,
	5, 5, 5, 5, 7, 8, 6, 6, 6, 6,
	9, 9, 10, 16, 13, 18, 12, 12, 15, 15,
	110, 110, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 107, 107, 112,
	112, 112, 114, 114, 111, 111, 106, 106, 20, 56,
	99, 51, 51, 284, 284, 285, 285, 94, 94, 98,
	98, 95, 96, 96, 97, 97, 26, 26, 26, 22,
	22, 23, 24, 27, 27, 27, 27, 27, 27, 34,
	35, 35, 35, 35, 35, 36, 36, 36, 36, 36,
	41, 41, 39, 39, 38, 38, 37, 37, 40, 40,
	159, 159, 158, 158, 161, 161, 42, 42, 45, 45,
	45, 45, 45, 46, 46, 46, 46, 46, 46, 46,
	46, 252, 252, 251, 44, 226, 226, 47, 184, 184,
	48, 48, 48, 48, 49, 57, 325, 325, 325, 329,
	329, 330, 330, 331, 331, 331, 331, 331, 331, 331,
	327, 327, 54, 54, 93, 61, 61, 61, 61, 61,
	61, 63, 65, 62, 62, 62, 64, 64, 66, 66,
	66, 66, 67, 67, 67, 67, 68, 68, 139, 139,
	277, 276, 276, 282, 282, 282, 137, 137, 137, 137,
	137, 138, 138, 138, 275, 275, 275, 275, 283, 283,
	283, 283, 283, 283, 281, 281, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 81, 81, 88, 88, 88, 88,
	88, 88, 70, 75, 75, 75, 71, 76, 77, 78,
	78, 78, 72, 72, 80, 80, 80, 79, 85, 85,
	85, 85, 82, 82, 82, 83, 83, 86, 86, 86,
	73, 74, 87, 84, 84, 84, 43, 326, 326, 328,
	328, 52, 30, 30, 31, 31, 140, 140, 141, 141,
	205, 205, 205, 205, 142, 142, 113, 113, 113, 204,
	294, 294, 295, 295, 295, 295, 295, 295, 296, 296,
	296, 296, 296, 296, 296, 292, 292, 293, 290, 290,
	291, 291, 291, 291, 332, 332, 203, 203, 145, 145,
	299, 299, 299, 299, 297, 297, 297, 297, 297, 300,
	298, 301, 301, 301, 301, 301, 238, 238, 238, 90,
	32, 119, 119, 33, 29, 29, 188, 188, 149, 149,
	243, 243, 243, 130, 130, 108, 108, 108, 14, 11,
	11, 11, 11, 11, 11, 19, 19, 17, 17, 189,
	189, 190, 190, 53, 55, 60, 89, 89, 89, 21,
	21, 25, 25, 59, 334, 334, 126, 126, 126, 126,
	127, 127, 200, 200, 201, 201, 202, 202, 202, 121,
	120, 122, 122, 28, 28, 115, 115, 116, 116, 117,
	117, 118, 118, 335, 335, 50, 50, 92, 133, 133,
	197, 197, 197, 199, 199, 198, 198, 198, 174, 174,
	174, 91, 154, 154, 163, 163, 164, 164, 249, 165,
	165, 58, 58, 102, 102, 100, 100, 100, 100, 100,
	100, 101, 101, 103, 103, 103, 103, 103, 103, 103,
	105, 307, 307, 307, 310, 310, 306, 308, 308, 309,
	309, 333, 333, 175, 175, 175, 144, 143, 143, 147,
	147, 146, 148, 148, 242, 242, 242, 172, 172, 172,
	172, 191, 191, 192, 192, 193, 193, 194, 194, 194,
	195, 195, 196, 196, 171, 171, 222, 222, 104, 104,
	153, 153, 155, 155, 212, 212, 212, 213, 213, 211,
	211, 211, 211, 244, 244, 244, 244, 244, 244, 244,
	323, 323, 323, 324, 324, 241, 241, 245, 245, 245,
	245, 245, 245, 239, 239, 239, 239, 240, 240, 250,
	250, 178, 178, 178, 178, 176, 176, 177, 177, 246,
	246, 246, 246, 173, 173, 247, 247, 247, 206, 206,
	253, 253, 253, 271, 271, 152, 152, 152, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 255, 255, 255, 255, 257,
	257, 257, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	270, 270, 270, 270, 270, 258, 258, 265, 265, 266,
	266, 267, 268, 259, 259, 260, 260, 261, 262, 269,
	269, 269, 269, 273, 273, 263, 263, 263, 263, 263,
	264, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 186, 186, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 216,
	216, 216, 216, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 302, 302, 302, 302, 302, 302,
	302, 304, 304, 305, 305, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 311, 311, 312, 312, 314, 314,
	315, 315, 316, 317, 317, 317, 318, 319, 319, 313,
	313, 320, 320, 320, 321, 321, 322, 322, 322, 322,
	322, 228, 228, 228, 229, 229, 230, 236, 236, 236,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 128, 128, 128, 128,
	128, 160, 160, 225, 225, 223, 223, 223, 227, 227,
	179, 179, 272, 272, 272, 272, 272, 272, 272, 180,
	180, 180, 187, 181, 181, 182, 182, 182, 182, 182,
	182, 219, 220, 183, 183, 183, 221, 221, 231, 235,
	235, 234, 233, 233, 232, 232, 209, 209, 210, 210,
	208, 207, 168, 168, 167, 167, 166, 166, 336, 336,
	237, 237, 169, 169, 170, 162, 162, 248, 248, 248,
	248, 156, 156, 135, 135, 157, 157, 131, 131, 134,
	134, 132, 132, 132, 132, 150, 150, 151, 151, 129,
	129, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 274, 274, 274, 224, 123, 123, 123, 124,
	124, 125, 125, 279, 279, 279, 280, 280, 280, 280,
	278, 278, 278, 278, 278, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 6, 6, 6, 5, 5, 4, 12, 4, 12,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 7, 6,
	1, 16, 16, 1, 1, 1, 3, 3, 0, 2,
	0, 2, 1, 3, 5, 0, 4, 6, 7, 1,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 6,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	4, 6, 4, 6, 4, 6, 3, 5, 3, 5,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 5, 3, 0, 3, 3, 0,
	2, 3, 2, 3, 6, 6, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 3, 2, 1, 1, 1, 1, 1,
	3, 4, 5, 3, 2, 6, 3, 4, 3, 3,
	3, 3, 1, 3, 3, 1, 2, 2, 1, 0,
	1, 1, 3, 1, 1, 1, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 3, 1, 1, 1, 1,
	1, 2, 3, 4, 4, 4, 4, 2, 4, 4,
	4, 4, 4, 4, 2, 3, 3, 2, 4, 5,
	4, 5, 2, 3, 3, 4, 2, 4, 3, 3,
	4, 4, 2, 5, 5, 6, 2, 2, 0, 2,
	0, 3, 7, 10, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 3,
	2, 0, 3, 1, 2, 2, 3, 6, 2, 1,
	1, 2, 4, 2, 5, 7, 8, 5, 3, 1,
	4, 6, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	4, 3, 0, 6, 11, 14, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 8, 10, 8, 10, 6, 8, 6, 8, 1,
	0, 2, 0, 2, 3, 2, 1, 1, 1, 3,
	3, 2, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 0, 1, 3, 1, 1, 1, 2,
	3, 2, 2, 8, 11, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 6, 1, 3,
	1, 4, 2, 8, 5, 4, 3, 0, 2, 2,
	0, 8, 2, 0, 1, 3, 1, 1, 3, 5,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 1, 1, 8, 8, 1, 1, 4, 4, 4,
	2, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 4, 5, 2, 2, 1,
	1, 2, 5, 2, 3, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 3, 0, 2, 0, 2, 3,
	3, 0, 1, 3, 3, 5, 1, 1, 3, 2,
	4, 4, 0, 8, 4, 6, 3, 1, 5, 5,
	0, 2, 3, 1, 3, 2, 0, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 5,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 1, 1, 2, 3, 0, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 2, 1, 3, 1, 1,
	2, 2, 1, 1, 3, 5, 6, 8, 6, 6,
	4, 4, 1, 1, 1, 5, 1, 3, 1, 3,
	1, 3, 1, 1, 1, 1, 6, 6, 4, 4,
	4, 4, 4, 6, 5, 5, 5, 4, 8, 6,
	6, 4, 4, 4, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 3, 5, 4, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 3, 1, 3, 3, 3, 2, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	0, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 3, 5, 1, 0,
	2, 2, 1, 1, 1, 2, 1, 2, 1, 0,
	1, 1, 1, 3, 3, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 2, 3,
	1, 1, 1, 2, 2, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 1, 5, 1,
	1, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -26, -27, -48,
	-34, -35, -36, -47, -42, -49, -43, -50, -51, -52,
	-44, -56, -55, -57, -60, -58, -53, -54, -61, -69,
	-89, -90, -91, -92, -5, -6, -7, -8, 34, -23,
	-24, 67, -28, -29, -30, -31, -32, -33, 90, -309,
	94, -37, -38, -39, -41, -40, 105, 107, 125, 131,
	134, 214, 220, 240, 242, 244, 251, -100, -102, 238,
	239, -62, -63, -64, -65, -93, 262, -70, -71, -72,
	-73, -74, -75, -76, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -86, -87, -21, -25, -59, 303, -9,
	-10, -13, -12, -11, -16, -18, -15, -17, -19, -14,
	47, 69, -307, 98, -103, -101, 354, 312, 265, 35,
	274, 61, 101, 246, 23, 328, 335, 255, -104, -105,
	320, 284, 357, -325, -157, 284, 83, -132, -123, 347,
	4, -286, -288, 20, 21, 23, 33, 34, 35, 40,
	44, 47, 48, 55, 60, 61, 62, 64, 66, 67,
	68, 71, 72, 73, 81, 82, 84, 86, 90, 92,
	94, 97, 98, 100, 105, 106, 107, 113, 114, 119,
	121, 126, 131, 132, 133, 134, 135, 142, 145, 147,
	140, 157, 158, 159, 161, 162, 163, 166, 165, 170,
	173, 176, 178, 179, 180, 183, 181, 185, 186, 188,
	187, 193, 195, 196, 198, 201, 204, 207, 210, 211,
	212, 213, 214, 216, 218, 220, 222, 223, 224, 225,
	226, 228, 229, 231, 232, 233, 234, 235, 238, 236,
	237, 239, 240, 241, 242, 244, 246, 247, 249, 263,
	264, 275, 251, 252, 253, 254, 258, 256, 259, 260,
	262, 265, 267, 270, 273, 274, 276, 279, 280, 277,
	272, 283, 285, 286, 287, 288, 289, 290, 291, 298,
	299, 303, 304, 305, 306, 309, 310, 311, 312, 314,
	317, 318, 319, 324, 329, 330, 331, 332, 333, 28,
	36, 37, 38, 39, 41, 42, 45, 46, 51, 52,
	53, 56, 85, 87, 88, 104, 108, 109, 115, 116,
	117, 127, 129, 136, 137, 146, 148, 149, 150, 151,
	152, 154, 168, 182, 192, 194, 205, 209, 217, 219,
	227, 248, 257, 268, 269, 278, 281, 293, 294, 295,
	300, 301, 316, 320, 321, -131, -123, 83, -123, 220,
	22, 92, 145, 311, 310, 22, 216, 256, 286, 288,
	-123, -46, 354, -45, -4, -27, -36, -47, -42, -43,
	-69, -58, -34, -50, -91, -92, -329, 22, -330, -331,
	69, 98, 125, 255, 145, 92, 310, -278, 4, -286,
	-288, -287, -289, 58, 70, 124, 144, 138, 156, 160,
	169, 171, 184, 206, 208, 245, 266, 22, 24, 25,
	26, 27, 29, 30, 31, 32, 43, 49, 50, 54,
	57, 59, 65, 69, 74, 75, 77, 76, 78, 79,
	80, 89, 91, 93, 95, 96, 99, 101, 103, 110,
	111, 112, 120, 122, 123, 125, 128, 130, 139, 141,
	143, 153, 155, 164, 167, 172, 174, 175, 189, 190,
	191, 197, 199, 200, 202, 203, 215, 221, 230, 243,
	255, 261, 271, 282, 284, 292, 296, 297, 302, 307,
	308, 313, 315, 322, 323, 325, 326, 327, 328, 284,
	158, -123, -325, 158, -329, -127, 251, -123, -127, -88,
	259, 4, 22, 83, 183, 261, 293, 173, 55, 248,
	259, -67, 299, -66, 293, -277, -68, -158, 183, -123,
	-333, 284, 158, 224, 284, 313, 323, -188, 83, 308,
	-101, -103, -102, 323, 284, 141, 83, 313, -146, -147,
	307, 153, 103, 203, -100, -102, -307, -282, -275, -238,
	9, 302, 110, 199, -281, 8, 346, -274, -280, 5,
	7, 345, 4, -286, -288, -287, -88, 259, 34, 55,
	22, 60, 84, 126, 141, 142, 162, 65, 66, 223,
	173, 159, 298, 163, 260, 285, 299, 69, 314, 289,
	106, -334, 299, 299, -334, -334, -126, 299, 296, 284,
	141, 83, 323, -310, 228, -306, -123, -310, -143, -144,
	22, 95, 358, -170, 354, -244, 352, -246, -131, -102,
	-245, 354, 200, -3, 296, 358, -157, -150, -123, -208,
	-207, 356, 123, 354, -167, -168, -207, -208, -123, 22,
	123, 155, 155, -247, -246, -131, -184, 354, -252, -251,
	-280, 320, 199, 358, -158, -214, -216, 345, 346, 340,
	189, 334, -228, -218, -231, 104, 248, 354, -131, -217,
	359, 9, -304, -102, 29, -229, -230, 49, -123, 7,
	8, 5, 6, -129, -255, -224, -264, 302, 110, 191,
	-302, -303, 4, -286, -279, -256, -266, -260, -263, 154,
	58, 75, 76, 79, 77, 80, 261, 313, 50, 28,
	108, 109, 209, 217, 281, 300, 301, 136, 192, 137,
	56, 127, 168, 97, 37, 39, 41, 42, 51, 52,
	85, 87, 88, 115, 116, 117, 146, 148, 149, 150,
	151, 152, 194, 227, 268, 278, 294, 295, 321, -287,
	-267, -268, -261, -262, -269, -226, 354, 123, -214, 199,
	-123, -88, 333, 2, 263, 354, -67, 53, 299, -201,
	-202, -120, -121, -122, 157, 222, 226, 333, 296, 339,
	123, -282, -139, 89, -161, 356, -173, -246, -214, -214,
	-158, 136, -123, -158, 141, -123, 136, -146, -147, -159,
	136, -158, -159, 136, -135, 136, -134, -131, -123, 136,
	-150, 136, -172, -191, -192, 172, 112, 197, -175, 22,
	95, -175, -175, 44, 355, 355, 8, 7, 7, -88,
	-284, -281, 9, 263, 223, 260, 55, 123, -326, 199,
	123, 123, 123, 123, 123, 223, 260, 120, 298, 123,
	157, 222, 275, 284, 323, 123, 123, -200, -201, -200,
	296, -127, -246, 136, -131, -134, 136, -123, -246, 136,
	358, -310, -151, 354, -162, -248, -214, 347, -162, -170,
	-169, -237, -214, 89, 70, -178, 160, 184, 124, 169,
	245, 144, 7, -46, -211, 359, 354, 347, -241, 335,
	-102, -245, -244, -131, 354, -284, -132, 358, -278, 347,
	276, 355, -156, -131, -168, -247, -133, -131, -133, 262,
	-123, 30, -160, -214, 355, 358, -325, -331, 69, 354,
	10, 11, 57, 33, 345, 346, 347, 348, 118, 349,
	350, 343, 344, 342, 337, 338, 339, 63, 177, 250,
	13, 14, 15, 26, 202, 171, 334, 138, 266, 340,
	16, 17, 18, 156, 36, 139, -128, -136, -214, -214,
	-214, -214, -214, 208, -166, -209, 352, -102, 354, -102,
	-214, -160, 7, -102, -223, 352, -232, -214, -167, 354,
	5, 354, 5, -311, 329, 120, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 219, -273, 324, -273, -273, -257,
	354, -257, -258, 354, -257, 330, 335, 354, 30, -225,
	-253, -254, -256, -265, -259, -263, -264, 40, 46, 45,
	291, 182, 257, 269, 316, 38, 198, 147, 146, 148,
	149, 150, 151, 152, 268, 37, 227, 116, 117, 115,
	97, 88, 87, 194, 42, 41, -267, -268, -261, -262,
	85, 294, 295, 154, 39, 52, 51, 321, 278, -285,
	-284, -325, -66, -277, -160, 30, -201, 358, 170, -138,
	176, 188, 132, 200, 331, -283, 5, 4, -224, -238,
	89, 173, -264, -276, 89, -282, -276, 89, 73, 356,
	-278, -112, 358, 48, 241, 354, -145, 189, -119, -308,
	328, -145, 354, -124, 136, -123, -308, 189, -172, -112,
	358, 104, -112, 104, -112, 358, 104, 359, 104, 104,
	-192, -191, -193, -214, 22, -196, 114, 185, -214, -216,
	-101, -101, -101, -148, -242, -214, 221, 141, -158, 22,
	264, -277, -328, 120, -325, -277, -277, -277, -277, -277,
	259, -46, 120, -123, 170, -277, -277, 284, 141, 284,
	-127, -110, 236, -109, 21, 23, 98, 318, 104, 272,
	290, 252, 272, 290, 252, 236, 104, 236, 236, 104,
	-306, 30, -150, -153, 358, 123, 30, 4, -153, 358,
	355, 160, 160, -244, -178, 160, -176, 206, -176, -176,
	-323, 354, 353, -241, -278, 352, 360, -160, -240, -239,
	30, -123, 204, 355, -131, -250, 336, -123, 123, 355,
	358, -206, 326, -197, -58, 354, 89, 30, -197, -163,
	-164, -249, -165, -131, 354, -123, 355, 358, -46, -251,
	296, 315, -141, -205, -204, -292, -293, -290, -123, 141,
	308, 111, 65, -291, 54, 221, 122, -271, -253, -270,
	232, 233, 231, 235, 234, -253, -278, 293, -214, -214,
	-214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
	-214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
	171, 138, 266, 36, 139, -214, 296, -214, -214, -214,
	-214, 181, 189, 191, 302, 110, 309, 95, 195, -336,
	282, 32, -221, -102, 354, -236, 27, 271, 22, -228,
	248, 354, -209, -214, -210, -160, 355, 355, 358, -160,
	-227, 353, -223, -235, -234, 325, 355, -160, 322, 22,
	95, 347, 7, -185, 332, 180, 86, 133, 179, -186,
	254, -312, 113, 128, 354, 355, 355, 355, -214, -214,
	-179, -272, -160, 4, 332, 180, 86, 133, 179, 254,
	-179, -180, -214, -160, -181, -215, -216, 345, 346, 340,
	354, 248, -182, -214, -160, -214, 43, 167, 297, -183,
	-214, 123, -160, -214, -214, -214, -160, -160, -160, 354,
	7, 7, 293, 293, 7, -45, 355, 358, -152, 29,
	352, -185, 354, -250, 358, 123, 355, 299, -202, -137,
	226, 270, 237, 258, 358, -278, -246, -140, -150, -141,
	-123, 30, 104, 213, 30, 199, 189, -115, 287, 104,
	-158, -159, -159, -134, -135, -278, -123, -150, -194, -274,
	354, 346, -195, 248, 249, 358, -108, 31, 93, 161,
	-131, -327, -123, 259, -46, -131, -134, -131, 358, 296,
	-189, 65, 59, -204, 136, 59, -290, 308, -189, 65,
	-189, 65, 65, -246, 33, -58, 123, 33, -58, 123,
	296, -134, 296, 296, -246, 354, 355, -206, -248, -155,
	-244, -278, -206, -237, -244, -244, -177, 315, 199, 160,
	-244, -239, 355, -324, 7, -241, -240, 7, -213, -212,
	121, 187, 355, -123, 354, -241, 355, -94, 135, 195,
	276, 123, -131, -174, 243, -214, -174, -199, 199, -156,
	320, -123, -174, -154, 358, 123, 339, -156, -214, -327,
	-284, 355, 358, -253, -124, 141, 354, -124, -123, 354,
	161, 161, 333, -214, -214, 296, -336, 282, -221, -214,
	181, 191, 302, 110, 309, 95, 195, 123, 354, -215,
	-215, -160, -218, 354, -160, 353, 362, 355, -214, 353,
	353, 358, -233, -234, 99, -214, -147, 358, -146, -214,
	-160, -160, 355, 355, 296, 296, 296, 296, 354, -317,
	207, 354, 354, -214, 30, 358, 355, 123, 355, 355,
	-187, 215, 355, 10, 11, 345, 346, 347, 348, 118,
	349, 350, 343, 344, 342, 337, 338, 339, 63, 177,
	250, 13, 14, 15, 156, 139, -215, -215, -215, -160,
	354, 355, -219, -220, 123, 120, 30, -183, -183, -183,
	355, 123, -160, 358, 358, 358, 355, 355, 355, 7,
	355, 358, 355, 333, 333, 355, -253, 352, 353, 7,
	7, -97, 328, -284, -327, -120, 306, 62, 226, -282,
	355, 355, -58, -158, 5, -58, -131, 104, -116, 100,
	-335, 339, -123, -112, -112, -112, -195, -214, -242, -131,
	359, 358, -250, -109, -131, -123, -123, 189, -204, 136,
	-114, 189, -123, -123, 136, -123, 136, -123, -123, -110,
	236, -58, 354, -58, 354, -123, 236, -123, -131, 236,
	-45, -171, 128, -250, 358, -171, -177, 354, -214, -244,
	353, 355, 358, -240, 353, 358, 361, 339, -241, 354,
	-150, -239, -97, 123, 283, 276, -162, 190, -174, 64,
	355, -206, -164, -155, -237, 355, -99, 71, -99, -205,
	-294, 354, -124, -149, -243, -123, -305, 354, -302, -303,
	-129, 354, -291, -214, 354, 354, -214, -214, -215, -215,
	123, 354, -214, -225, 26, 26, 355, -160, 355, 358,
	-210, -214, 355, -223, 101, -214, 292, 355, 322, -147,
	-147, -147, 5, 180, 133, 179, -186, 179, -186, -186,
	7, -318, -123, 354, 326, -146, 355, -271, -253, -214,
	-219, -214, -271, -253, -215, -215, -215, -215, -215, -215,
	-215, -215, -215, -215, -215, -215, -215, -215, -215, -215,
	-215, -215, -215, 95, 189, 195, -215, 358, -160, 355,
	-220, -219, -214, -214, -253, 355, 355, 355, -160, -214,
	-214, -214, 355, 7, 7, 353, 355, 201, -142, 140,
	354, -145, 354, -123, -117, 166, -335, -281, -308, 200,
	355, -108, -278, -123, 296, 296, 104, 189, 317, -107,
	98, 262, -190, 104, -112, 104, -112, 296, -189, 65,
	-160, -160, 296, 296, 355, -222, 130, 44, -244, -222,
	-150, -211, 7, -212, -278, 352, -240, -150, 355, -285,
	293, -198, 354, 199, -58, -174, 339, 82, 82, -295,
	65, -296, 57, 111, 69, 189, 191, 308, 221, 54,
	89, 230, -149, 354, 355, 358, -130, -167, 57, -130,
	-214, 354, -150, 355, -149, -150, 26, 26, -214, -225,
	355, -214, -214, 355, -214, 353, -214, 5, -214, 355,
	355, 355, 355, -319, -123, -214, 355, 355, 355, -220,
	123, 95, 195, 354, -214, 355, 355, 358, 355, 355,
	355, 353, 354, 139, -140, 30, -149, 199, -118, 165,
	-335, -281, -115, -108, -123, -123, -204, 104, 189, 89,
	189, 89, 82, 304, -123, -123, -131, -123, -123, 355,
	355, -123, -131, -314, 327, -214, -160, -314, 355, -241,
	7, 355, -217, -129, -123, 96, -150, 65, -170, -102,
	354, 354, 354, -123, -278, -123, 111, 136, 191, 161,
	354, -215, -131, 355, -149, -203, -332, 68, 280, -243,
	-108, -278, -108, 355, -160, 355, 355, 355, -214, -214,
	355, 355, -147, -313, 212, 355, -215, 123, 354, -225,
	355, -214, -96, -95, 5, 210, 355, -58, 355, -131,
	-335, -281, -116, -204, 191, 191, -214, -253, -112, -112,
	296, 296, 296, 296, -315, -316, -123, -240, 353, 354,
	310, 190, 355, -123, -285, -285, -296, -124, 189, -214,
	-125, 354, -203, 355, -142, 354, -130, -147, 230, 355,
	-147, 44, -215, -225, 355, 355, 358, 355, -98, 339,
	-131, -142, -203, 354, -281, -117, -111, 57, -123, -123,
	354, 354, 358, 30, -160, 262, -206, 355, 355, 104,
	355, -299, 178, -123, -142, -203, -150, -108, 355, -131,
	-320, 225, 249, -160, 355, -95, 5, 354, -142, -149,
	-118, -106, 315, -278, -160, -160, -316, -318, -147, -163,
	-97, -97, 111, -297, -300, -298, 199, 124, 211, 267,
	355, -142, 355, -145, 355, -321, -322, 36, 305, 73,
	-214, -321, -150, 355, -214, 355, 355, 355, -206, 315,
	315, -123, -298, 199, -300, 199, 310, 92, -299, -322,
	218, 119, 248, 218, 119, 355, -203, 286, 286, -301,
	186, 241, 48, 262, -301, -297, 26, -113, 48, 241,
	-142, 279, 279, 20, 191, 89, -322, -284, -284,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 35, 36, 37, 38, 0, 109,
	110, 0, 113, 114, 115, 116, 117, 118, 0, 0,
	0, 125, 126, 127, 128, 129, 0, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 481, -2, 0,
	0, 195, 196, 197, 198, 199, 0, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 416, 417, 418, 512, 39,
	40, 41, 42, 43, 46, 47, 48, 49, 44, 45,
	0, 387, 509, 0, -2, 520, 0, 0, 0, 425,
	0, 425, 425, 429, 0, 0, 0, 518, 495, 496,
	0, 0, -2, 0, 176, 0, 1058, 985, 991, 992,
	1016, 1017, 1018, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
	1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1062,
	1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
	1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
	1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
	1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
	1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
	1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
	1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
	1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142,
	1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152,
	1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162,
	1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172,
	1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
	1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
	1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
	1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
	1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
	1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232,
	1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242,
	1243, 1244, 1245, 1246, 1247, 0, 987, 1058, 170, 1118,
	172, 0, 0, 0, 0, 120, 121, 122, 123, 124,
	169, 146, 0, 153, 154, 155, 156, 157, 158, 159,
	160, 148, 149, 150, 151, 152, 0, 179, 180, 181,
	183, 184, 185, 186, 187, 188, 189, 306, 1030, 1031,
	1032, 1033, 1034, 1248, 1249, 1250, 1251, 1252, 1253, 1254,
	1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264,
	1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274,
	1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284,
	1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294,
	1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304,
	1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314,
	1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324,
	1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334,
	1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 0,
	0, 166, 0, 0, 0, 415, 1145, 431, 413, 192,
	0, 266, 267, 268, 269, 270, 0, -2, 1045, 1234,
	1151, 204, 1173, 212, 1240, 0, 215, 220, -2, 142,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 386,
	-2, 491, 492, 0, 0, 0, 0, 0, -2, 0,
	515, 515, 515, 0, 0, 492, 0, 194, 223, 224,
	225, 234, 235, 236, 237, 376, 0, 378, 244, 245,
	1012, 0, 1026, 1027, 1028, 1029, 264, 0, 0, 0,
	267, 0, 277, 308, 0, 0, 0, 0, 0, 284,
	0, 287, 0, 0, 292, 296, 0, 0, 302, 0,
	0, 433, 424, 433, 421, 422, 423, 426, 0, 0,
	0, 0, 0, 501, 1124, 504, 998, 502, 0, 0,
	517, 516, 0, 548, 0, 500, 510, 562, 599, 576,
	567, 0, 0, 2, 0, 0, 177, 178, 995, 993,
	994, 0, 0, 0, 988, 964, 962, 963, 171, 173,
	0, 0, 0, 0, 605, 599, 167, 0, 0, 161,
	163, 1246, 0, 0, 0, 311, 707, 0, 0, 0,
	0, 0, 0, 799, 801, 1208, 1234, 0, 803, 804,
	0, 806, 808, 809, 0, 812, 813, 955, 987, 1001,
	1002, 1003, 1004, 0, 0, 1007, 0, 1009, 1010, 1011,
	855, 822, -2, -2, 999, 635, 636, 637, 638, -2,
	1248, 826, 828, 830, 832, 833, 834, 835, 0, 1192,
	1209, 1210, 1230, 1231, 1239, 1243, 1244, 1216, 1227, 1217,
	1204, 1214, 1225, 1064, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1025,
	669, 670, 675, 676, 678, 0, 0, 0, 414, 0,
	430, 193, 271, 200, 0, 0, 203, 1203, 1173, 206,
	434, 436, 437, 438, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 143, 0, 81, 603, 111, 112,
	359, 1216, -2, 359, 1020, 508, 1216, -2, 0, 81,
	1216, 140, 81, 1216, 81, 1216, 983, 990, 136, 1216,
	138, 1216, 487, 529, 530, 0, 0, 0, 0, 513,
	514, 0, 0, 0, 483, 484, 377, 1014, 1013, 265,
	272, 93, 94, 0, 285, 293, 0, 0, 310, 0,
	0, 0, 0, 0, 0, 286, 294, 510, 0, 0,
	0, 298, 299, 0, 0, 0, 0, 419, 432, 420,
	0, 428, 0, 1216, 599, 0, 1216, 0, 0, 1216,
	0, 503, 0, 0, 551, 975, 979, 980, 551, 549,
	0, 972, 970, 971, 0, 0, 0, 0, 596, 596,
	596, 594, 570, 0, 576, 0, 0, 600, 588, 0,
	-2, 567, 0, 601, 0, 590, 986, 0, 960, 961,
	106, 0, 0, 981, 965, 609, 0, 458, 0, 0,
	606, 0, 0, 911, 510, 0, 0, 182, 0, 0,
	0, 0, 0, 0, 890, 891, 892, 893, 894, 895,
	898, 899, 896, 897, 900, 901, 902, 0, 0, 0,
	903, 904, 905, 0, 0, 907, 0, 909, 0, 0,
	0, 0, 0, 0, 969, 0, 0, 906, 712, 713,
	714, 736, 737, 0, 800, 966, 959, 802, 0, -2,
	911, 0, 805, 810, 811, 0, 0, 954, -2, 0,
	1006, 0, 704, 857, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 934, 940, 0, 0, 0, 0,
	0, 0, 0, 0, 654, 672, 683, 680, 679, 656,
	0, 655, 653, 0, 657, 0, 0, 0, 510, 0,
	913, 617, 618, 619, 620, 621, 704, 624, 625, 626,
	627, 628, 629, 630, 631, 632, 633, 634, 642, 643,
	644, 645, 646, 647, 648, 649, 650, 651, 652, 666,
	0, 641, 641, 641, 658, 659, 667, 668, 673, 674,
	685, 686, 688, 690, 684, 684, 684, 681, 682, 590,
	95, 0, 201, 0, 0, 0, 207, 0, 0, 439,
	231, 232, 233, 441, 442, 213, 238, 239, 240, 241,
	242, 243, 0, 208, 210, 221, 209, 211, 214, 0,
	144, 379, 0, 79, 80, 317, 0, 0, 380, 0,
	507, 0, 0, 0, 1216, 1019, 446, 0, 490, 130,
	0, 0, 132, 0, 134, 0, 0, 0, 0, 0,
	527, 528, 531, 535, 536, 539, 542, 543, 533, 707,
	497, 498, 499, 521, 522, 397, 0, 0, 273, 274,
	275, 276, 278, 0, 307, 279, 280, 281, 282, 283,
	288, 290, 510, 295, 297, 300, 301, 0, 0, 0,
	427, 50, 410, 60, 0, 410, 410, 0, 0, 0,
	0, 56, 0, 0, 58, 0, 0, 0, 0, 0,
	505, 0, 0, 609, 0, 0, 0, 978, 609, 0,
	974, 0, 0, 0, 0, 0, 591, 595, 592, 593,
	0, 0, 576, 588, 559, 0, 0, 0, 566, 587,
	0, 586, 575, -2, 0, 98, 0, 996, 0, 0,
	0, 470, 0, 470, 460, 0, 0, 0, 470, 473,
	474, 476, 477, 0, 0, 607, 168, 0, 147, 162,
	0, 0, 0, 318, 320, 321, 322, 323, 0, 1020,
	0, 1020, 0, 349, 0, 0, 0, 708, 613, 614,
	660, 661, 662, 663, 664, 709, 710, 0, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, -2, -2,
	-2, 728, 729, 730, -2, -2, -2, 734, 735, -2,
	908, 910, 0, 969, 0, -2, 0, -2, -2, -2,
	-2, 748, 0, 750, 753, 755, 757, 0, 0, 0,
	0, 968, 767, 946, 0, 0, 887, 888, 889, 752,
	0, 0, 967, 958, 0, 0, -2, 807, 0, 0,
	0, 917, 918, 953, 949, 0, 814, 520, 0, 0,
	0, 0, 0, 1015, 691, 692, 693, 694, 695, 696,
	705, 865, 0, 0, 0, 827, 829, 831, 0, 0,
	0, 0, 921, -2, -2, -2, -2, -2, -2, -2,
	0, 0, 911, 931, 0, 0, 770, 0, 0, 0,
	0, 1234, 0, 911, 939, 0, 0, 0, 0, 0,
	911, 0, 945, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 0, 610, 612,
	0, 622, 0, 105, 0, 0, 202, 0, 435, 440,
	0, 228, 0, 230, 0, 145, 604, 0, 0, 316,
	995, 0, 0, 0, 0, 0, 0, 448, 454, 0,
	141, 81, 81, 984, 81, 989, 137, 139, 0, 537,
	0, 0, 534, 540, 541, 0, 524, 395, 396, 0,
	0, 309, 190, 289, 291, 303, 304, 590, 0, 0,
	0, 0, 409, 62, 1216, 0, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 55, 0,
	0, 0, 0, 0, 0, 510, 997, 545, 976, 590,
	552, 977, 545, 973, 578, 0, 580, 0, 0, 0,
	582, 0, 571, 0, 573, 588, 564, 0, 0, 557,
	0, 556, 576, 584, 0, 0, 602, 105, 0, 0,
	107, 0, 982, 119, 0, 608, 455, 470, 0, 0,
	462, 459, 457, 609, 0, 0, 0, 0, 912, 174,
	0, 0, 0, 331, 0, 1020, 0, 0, 0, 0,
	0, 0, 0, -2, -2, 0, 0, 0, 768, -2,
	749, 751, 754, 756, 758, 0, 0, 0, 0, 0,
	0, 0, 769, 0, 0, 956, 959, -2, 912, 915,
	916, 0, 0, 950, 0, 0, 0, 0, 519, 520,
	520, 520, 820, 0, 0, 0, 0, 0, 0, 821,
	0, 0, 0, 0, 0, 0, 838, 0, 839, 840,
	0, 0, 841, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 773, 774, 775, 0,
	0, 842, 937, 938, 0, 0, 0, 0, 0, 0,
	847, 0, 944, 0, 0, 0, 851, 852, 853, 0,
	639, 0, 665, 687, 689, 677, 914, 0, 615, 0,
	0, 89, 0, 96, 175, 205, 226, 227, 229, 222,
	325, 358, 314, 359, 381, 383, 0, 0, 450, 454,
	0, 453, 508, 131, 133, 135, 0, 0, 523, 397,
	0, 0, 305, 61, 399, 0, 0, 0, 64, 1216,
	72, 0, 412, 73, 1216, 81, 1216, 81, 74, 51,
	410, 52, 0, 53, 0, 407, 0, 398, 405, 0,
	0, 547, 0, 550, 0, 547, 579, 0, 598, 581,
	562, 572, 0, 569, 560, 0, 561, 0, 588, 0,
	0, 568, 88, 0, 0, 108, 468, 469, 456, 467,
	0, 470, 475, 472, 478, 0, 0, 90, 0, 319,
	329, 0, 0, 0, 388, 394, 394, 0, 823, 824,
	0, 0, 348, 0, 0, 0, 711, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 947, 0, 882, 0,
	0, 958, -2, 919, 948, 952, 0, 815, 0, 0,
	0, 0, 1008, 697, 698, 699, 700, 701, 702, 703,
	0, 863, 864, 868, 0, 0, 825, 0, 0, 920,
	930, 932, 771, 772, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, -2, -2, -2, 789, 790, 791,
	-2, -2, -2, 0, 0, 0, 933, 0, 0, 885,
	935, 936, 941, 942, 0, 844, 845, 846, 943, 0,
	0, 0, 671, 0, 0, 616, 623, 0, 312, 0,
	317, 0, 0, 0, 452, 454, 0, 445, 446, 532,
	538, 525, 397, 191, 0, 0, 0, 0, 82, 66,
	0, 0, 0, 0, 70, 0, 76, 0, 0, 0,
	0, 0, 0, 0, 506, 859, 0, 0, 553, 859,
	0, 576, 574, 558, 554, 0, 565, 0, 585, 97,
	0, 0, 0, 0, 461, 471, 0, 0, 0, 330,
	0, 333, 0, 0, 0, 0, 339, 340, 0, 0,
	0, 0, 0, 0, 357, 0, 397, 1000, 0, 397,
	0, 0, 0, 350, 0, 0, 0, 0, -2, 0,
	761, -2, -2, 881, 912, 957, 951, 1005, 520, 816,
	818, 819, 706, 870, 867, 0, 854, 836, 837, 929,
	0, 0, 0, 0, 912, 884, 843, 0, 849, 850,
	640, 611, 0, 0, 0, 0, 0, 0, 443, 454,
	0, 447, 448, 526, 401, 403, 63, 0, 0, 78,
	0, 0, 411, 0, 81, 81, 400, 0, 0, 0,
	0, 408, 406, 493, 0, 546, 544, 494, 597, 588,
	0, 583, 589, 0, 0, 0, 0, 0, 479, 480,
	0, 0, 0, 0, 334, 335, 1020, 0, 338, 341,
	0, 343, 1022, 357, 0, 325, 0, 354, 355, 389,
	390, 393, 391, 394, 520, 347, 352, 0, -2, -2,
	762, 883, 0, 520, 0, 856, -2, 0, 0, 0,
	886, 0, 0, 102, 100, 0, 325, 315, 357, 0,
	0, 449, 450, 65, 67, 68, 77, 85, 69, 75,
	0, 0, 0, 0, 858, 860, 0, 563, 555, 0,
	0, 464, 609, 466, 0, 0, 332, 336, 0, 0,
	363, 0, 325, 357, 351, 0, 397, 0, 0, 817,
	873, 0, -2, 0, 797, 848, 0, 104, 101, 0,
	0, 313, 325, 0, 451, 452, 87, 0, 402, 404,
	0, 0, 0, 0, 520, 0, 465, 105, 105, 0,
	342, 368, 0, 0, 345, 325, 0, 392, 815, 359,
	0, 0, 0, 869, 798, 103, 99, 0, 384, 0,
	444, 71, 0, 84, 0, 0, 861, 862, 0, 609,
	0, 0, 0, 344, 364, 365, 0, 360, 361, 362,
	1021, 346, 356, 363, 866, 871, 874, -2, 1176, 1055,
	0, 872, 0, 357, 86, 57, 59, 0, 463, 0,
	0, 337, 366, 0, 367, 0, 0, 0, 368, 0,
	876, 877, 878, 879, 880, 328, 325, 0, 0, 369,
	0, 372, 373, 0, 370, 353, 0, 324, 326, 327,
	385, 0, 0, 371, 374, 375, 875, 91, 92,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 343, 3, 349, 344, 3,
	354, 355, 347, 345, 358, 346, 356, 348, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 362, 357,
	337, 339, 338, 3, 359, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 352, 3, 353, 350, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 360, 342, 361, 340,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 341,
	57680, 351, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:861
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:867
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:873
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 34:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:957
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:963
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:969
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:975
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:981
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:985
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:991
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:995
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1041
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1064
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1074
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = nil
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = DropCascade
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = DropRestrict
		}
	case 81:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = DropDefault
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 83:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 84:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1136
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1137
		{
		}
	case 86:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1140
		{
			return unimplemented(sqllex, "alter using")
		}
	case 87:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1141
		{
		}
	case 88:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.str = "CSV"
		}
	case 91:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql.y:1163
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions(), Temp: sqlDollar[16].union.expr()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql.y:1167
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions(), Temp: sqlDollar[16].union.expr()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 98:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.str = ""
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1232
		{
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1255
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1261
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1287
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1288
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1289
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1290
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1415
		{ /* SKIP DOC */
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1533
		{
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1580
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1602
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1613
		{ /* SKIP DOC */
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1614
		{ /* SKIP DOC */
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1615
		{
			return unimplemented(sqllex, "set local")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1680
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1683
		{
			return unimplemented(sqllex, "set from current")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1690
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1694
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1700
		{
		}
	case 219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1702
		{
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1739
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1743
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = Low
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = Normal
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1757
		{
			sqlVAL.union.val = High
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1763
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.str = "client_encoding"
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1920
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1936
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1948
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1978
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1982
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1986
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2010
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2014
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2018
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2030
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2035
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2052
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 324:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2123
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2127
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 328:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = DropDefault
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2137
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2148
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2158
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2342
		{
			return unimplemented(sqllex, "match full")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2343
		{
			return unimplemented(sqllex, "match partial")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2344
		{
			return unimplemented(sqllex, "match simple")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2345
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2351
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2352
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2353
		{
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2354
		{
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2355
		{
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2358
		{
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2361
		{
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2364
		{
			return unimplemented(sqllex, "no action")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2367
		{
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2368
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2369
		{
			return unimplemented(sqllex, "action set null")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2370
		{
			return unimplemented(sqllex, "action set default")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2374
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2402
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 383:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = true
		}
	case 387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.union.val = false
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2477
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2478
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2481
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2482
		{
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2486
		{
			sqlVAL.union.val = Ascending
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.union.val = Descending
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 398:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2506
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2522
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2524
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2532
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = true
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = false
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2557
		{
		}
	case 412:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2558
		{
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2562
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2569
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2607
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2616
		{
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2617
		{
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.str = ""
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.str = ""
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2663
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = ReadOnly
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = ReadWrite
		}
	case 443:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.str = ""
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.str = ""
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.str = ""
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.str = ""
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2771
		{
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2772
		{
		}
	case 455:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2832
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2838
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2842
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2850
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 471:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2872
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2873
		{
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2951
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2961
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3066
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3103
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3104
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3105
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3108
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3109
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3112
		{
			return unimplemented(sqllex, "cte")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3115
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3116
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3119
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3120
		{
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3123
		{
		}
	case 512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3124
		{
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = true
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = false
		}
	case 515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = false
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = true
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3147
		{
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3148
		{
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3195
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3215
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3267
		{
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3268
		{
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3271
		{
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3272
		{
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 545:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 547:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3326
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = &From{}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3362
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3380
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3407
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 563:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3424
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = nil
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3489
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3495
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = true
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = false
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3588
		{
			sqlVAL.str = astFullJoin
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.str = astLeftJoin
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.str = astRightJoin
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.str = astInnerJoin
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3606
		{
		}
	case 596:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3607
		{
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3632
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3636
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3693
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3706
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3707
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3723
		{
			return unimplementedWithIssue(sqllex, 17156)
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3732
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3795
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3804
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = nil
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3869
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3965
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3997
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4036
		{
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4037
		{
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = year
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = month
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = day
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = hour
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = minute
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = month
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = hour
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = minute
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = minute
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = nil
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = second
		}
	case 706:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4132
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4167
		{
			return unimplemented(sqllex, "at tz")
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4335
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4357
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4401
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4574
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4600
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4604
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4620
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4627
		{
			return unimplemented(sqllex, "variadic")
		}
	case 817:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4628
		{
			return unimplemented(sqllex, "variadic")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4638
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4651
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4667
		{
			return unimplemented(sqllex, "func_application")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4668
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 825:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4672
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4697
		{
			return unimplemented(sqllex, "current role")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4698
		{
			return unimplemented(sqllex, "current user")
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4699
		{
			return unimplemented(sqllex, "session user")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4700
		{
			return unimplemented(sqllex, "user")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4706
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4729
		{
			return unimplemented(sqllex, "treat")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4773
		{
			return unimplemented(sqllex, "within group")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4774
		{
		}
	case 856:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 857:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = Window(nil)
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4809
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 866:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.str = ""
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4861
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4871
		{
			return unimplemented(sqllex, "frame range")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4872
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4873
		{
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4876
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4877
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4883
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4884
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4885
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4886
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4887
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4912
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = Any
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = Some
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = All
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = Plus
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = Minus
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = Mult
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = Div
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = FloorDiv
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = Mod
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = Bitand
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = Bitor
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = Pow
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = Bitxor
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = LT
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = GT
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = EQ
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = LE
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = GE
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = NE
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = Like
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = NotLike
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = ILike
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4963
		{
			sqlVAL.union.val = NotILike
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4998
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5012
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5058
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 940:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5128
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5132
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5153
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5160
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 951:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5170
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5180
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5197
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5204
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5210
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5216
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5222
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5226
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5232
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5236
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5242
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5246
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5251
		{
		}
	case 969:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5252
		{
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5261
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5280
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5286
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5290
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5296
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5309
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5313
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5321
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5331
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5335
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5356
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5360
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5366
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5370
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5383
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5387
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5391
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5395
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5401
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5405
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5411
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5414
		{
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5435
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5443
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5447
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5450
		{
			return unimplemented(sqllex, "func const")
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5456
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5459
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5461
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5465
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5469
		{
			sqlVAL.union.val = DNull
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5476
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5480
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5486
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5521
		{
			sqlVAL.str = ""
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5527
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5531
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
