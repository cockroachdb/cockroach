// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:341
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const COALESCE = 57396
const COLLATE = 57397
const COLLATION = 57398
const COLUMN = 57399
const COLUMNS = 57400
const COMMIT = 57401
const COMMITTED = 57402
const CONCAT = 57403
const CONFLICT = 57404
const CONSTRAINT = 57405
const CONSTRAINTS = 57406
const COPY = 57407
const COVERING = 57408
const CREATE = 57409
const CROSS = 57410
const CUBE = 57411
const CURRENT = 57412
const CURRENT_CATALOG = 57413
const CURRENT_DATE = 57414
const CURRENT_ROLE = 57415
const CURRENT_TIME = 57416
const CURRENT_TIMESTAMP = 57417
const CURRENT_USER = 57418
const CYCLE = 57419
const DATA = 57420
const DATABASE = 57421
const DATABASES = 57422
const DATE = 57423
const DAY = 57424
const DEC = 57425
const DECIMAL = 57426
const DEFAULT = 57427
const DEALLOCATE = 57428
const DEFERRABLE = 57429
const DELETE = 57430
const DESC = 57431
const DISTINCT = 57432
const DO = 57433
const DOUBLE = 57434
const DROP = 57435
const ELSE = 57436
const ENCODING = 57437
const END = 57438
const ESCAPE = 57439
const EXCEPT = 57440
const EXISTS = 57441
const EXECUTE = 57442
const EXPLAIN = 57443
const EXTRACT = 57444
const EXTRACT_DURATION = 57445
const FALSE = 57446
const FAMILY = 57447
const FETCH = 57448
const FILTER = 57449
const FIRST = 57450
const FLOAT = 57451
const FLOORDIV = 57452
const FOLLOWING = 57453
const FOR = 57454
const FORCE_INDEX = 57455
const FOREIGN = 57456
const FROM = 57457
const FULL = 57458
const GRANT = 57459
const GRANTS = 57460
const GREATEST = 57461
const GROUP = 57462
const GROUPING = 57463
const HAVING = 57464
const HELP = 57465
const HIGH = 57466
const HOUR = 57467
const INCREMENTAL = 57468
const IF = 57469
const IFNULL = 57470
const ILIKE = 57471
const IN = 57472
const INTERLEAVE = 57473
const INDEX = 57474
const INDEXES = 57475
const INITIALLY = 57476
const INNER = 57477
const INSERT = 57478
const INT = 57479
const INT2VECTOR = 57480
const INT8 = 57481
const INT64 = 57482
const INTEGER = 57483
const INTERSECT = 57484
const INTERVAL = 57485
const INTO = 57486
const IS = 57487
const ISOLATION = 57488
const JOIN = 57489
const KEY = 57490
const KEYS = 57491
const LATERAL = 57492
const LC_CTYPE = 57493
const LC_COLLATE = 57494
const LEADING = 57495
const LEAST = 57496
const LEFT = 57497
const LEVEL = 57498
const LIKE = 57499
const LIMIT = 57500
const LOCAL = 57501
const LOCALTIME = 57502
const LOCALTIMESTAMP = 57503
const LOW = 57504
const LSHIFT = 57505
const MATCH = 57506
const MINUTE = 57507
const MONTH = 57508
const NAME = 57509
const NAMES = 57510
const NATURAL = 57511
const NEXT = 57512
const NO = 57513
const NO_INDEX_JOIN = 57514
const NORMAL = 57515
const NOT = 57516
const NOTHING = 57517
const NULL = 57518
const NULLIF = 57519
const NULLS = 57520
const NUMERIC = 57521
const OF = 57522
const OFF = 57523
const OFFSET = 57524
const OID = 57525
const ON = 57526
const ONLY = 57527
const OPTIONS = 57528
const OR = 57529
const ORDER = 57530
const ORDINALITY = 57531
const OUT = 57532
const OUTER = 57533
const OVER = 57534
const OVERLAPS = 57535
const OVERLAY = 57536
const PARENT = 57537
const PARTIAL = 57538
const PARTITION = 57539
const PASSWORD = 57540
const PLACING = 57541
const POSITION = 57542
const PRECEDING = 57543
const PRECISION = 57544
const PREPARE = 57545
const PRIMARY = 57546
const PRIORITY = 57547
const RANGE = 57548
const READ = 57549
const REAL = 57550
const RECURSIVE = 57551
const REF = 57552
const REFERENCES = 57553
const REGCLASS = 57554
const REGPROC = 57555
const REGPROCEDURE = 57556
const REGNAMESPACE = 57557
const REGTYPE = 57558
const RENAME = 57559
const REPEATABLE = 57560
const RELEASE = 57561
const RESTORE = 57562
const RESTRICT = 57563
const RETURNING = 57564
const REVOKE = 57565
const RIGHT = 57566
const ROLLBACK = 57567
const ROLLUP = 57568
const ROW = 57569
const ROWS = 57570
const RSHIFT = 57571
const STATUS = 57572
const SAVEPOINT = 57573
const SEARCH = 57574
const SECOND = 57575
const SELECT = 57576
const SERIAL = 57577
const SERIALIZABLE = 57578
const SESSION = 57579
const SESSION_USER = 57580
const SET = 57581
const SHOW = 57582
const SIMILAR = 57583
const SIMPLE = 57584
const SMALLINT = 57585
const SMALLSERIAL = 57586
const SNAPSHOT = 57587
const SOME = 57588
const SPLIT = 57589
const SQL = 57590
const START = 57591
const STDIN = 57592
const STRICT = 57593
const STRING = 57594
const STORING = 57595
const SUBSTRING = 57596
const SYMMETRIC = 57597
const SYSTEM = 57598
const TABLE = 57599
const TABLES = 57600
const TEMPLATE = 57601
const TEXT = 57602
const THEN = 57603
const TIME = 57604
const TIMESTAMP = 57605
const TIMESTAMPTZ = 57606
const TO = 57607
const TRAILING = 57608
const TRANSACTION = 57609
const TREAT = 57610
const TRIM = 57611
const TRUE = 57612
const TRUNCATE = 57613
const TYPE = 57614
const UNBOUNDED = 57615
const UNCOMMITTED = 57616
const UNION = 57617
const UNIQUE = 57618
const UNKNOWN = 57619
const UPDATE = 57620
const UPSERT = 57621
const USER = 57622
const USERS = 57623
const USING = 57624
const VALID = 57625
const VALIDATE = 57626
const VALUE = 57627
const VALUES = 57628
const VARCHAR = 57629
const VARIADIC = 57630
const VIEW = 57631
const VARYING = 57632
const WHEN = 57633
const WHERE = 57634
const WINDOW = 57635
const WITH = 57636
const WITHIN = 57637
const WITHOUT = 57638
const YEAR = 57639
const ZONE = 57640
const NOT_LA = 57641
const WITH_LA = 57642
const AS_LA = 57643
const POSTFIXOP = 57644
const UMINUS = 57645

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5381

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 28,
	322, 28,
	-2, 411,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	98, 394,
	142, 394,
	158, 394,
	182, 394,
	188, 394,
	275, 394,
	-2, 384,
	-1, 62,
	98, 393,
	142, 393,
	158, 393,
	182, 393,
	188, 393,
	275, 393,
	-2, 387,
	-1, 71,
	1, 28,
	322, 28,
	-2, 411,
	-1, 420,
	1, 191,
	322, 191,
	-2, 976,
	-1, 456,
	158, 421,
	182, 421,
	-2, 390,
	-1, 459,
	158, 420,
	182, 420,
	-2, 388,
	-1, 591,
	158, 420,
	182, 420,
	-2, 391,
	-1, 650,
	319, 910,
	-2, 903,
	-1, 651,
	319, 911,
	-2, 904,
	-1, 657,
	5, 579,
	319, 579,
	-2, 1078,
	-1, 681,
	5, 540,
	-2, 1052,
	-1, 682,
	5, 573,
	319, 573,
	-2, 1054,
	-1, 683,
	5, 548,
	-2, 1055,
	-1, 684,
	5, 547,
	-2, 1056,
	-1, 685,
	5, 573,
	319, 573,
	-2, 1059,
	-1, 686,
	5, 573,
	319, 573,
	-2, 1060,
	-1, 687,
	5, 574,
	-2, 1063,
	-1, 688,
	5, 534,
	-2, 1064,
	-1, 689,
	5, 534,
	-2, 1065,
	-1, 690,
	5, 555,
	-2, 1069,
	-1, 691,
	5, 535,
	-2, 1074,
	-1, 692,
	5, 536,
	-2, 1075,
	-1, 693,
	5, 537,
	-2, 1076,
	-1, 694,
	5, 538,
	-2, 1077,
	-1, 695,
	5, 534,
	-2, 1082,
	-1, 696,
	5, 541,
	-2, 1087,
	-1, 697,
	5, 539,
	-2, 1090,
	-1, 698,
	5, 571,
	319, 571,
	-2, 1092,
	-1, 699,
	5, 575,
	-2, 1095,
	-1, 700,
	5, 577,
	-2, 1096,
	-1, 701,
	5, 570,
	319, 570,
	-2, 1100,
	-1, 959,
	98, 394,
	142, 394,
	158, 394,
	182, 394,
	188, 394,
	275, 394,
	-2, 696,
	-1, 968,
	319, 887,
	-2, 875,
	-1, 1176,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 614,
	-1, 1177,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 615,
	-1, 1178,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 616,
	-1, 1182,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 620,
	-1, 1183,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 621,
	-1, 1184,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 622,
	-1, 1187,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 627,
	-1, 1193,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 629,
	-1, 1196,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 634,
	-1, 1197,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 635,
	-1, 1198,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 636,
	-1, 1224,
	193, 767,
	-2, 770,
	-1, 1253,
	115, 807,
	319, 910,
	-2, 903,
	-1, 1254,
	115, 808,
	-2, 1048,
	-1, 1255,
	115, 809,
	-2, 975,
	-1, 1256,
	115, 810,
	-2, 944,
	-1, 1257,
	115, 811,
	-2, 959,
	-1, 1258,
	115, 812,
	-2, 974,
	-1, 1259,
	115, 813,
	-2, 1016,
	-1, 1413,
	98, 394,
	142, 394,
	158, 394,
	182, 394,
	188, 394,
	275, 394,
	-2, 470,
	-1, 1417,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 628,
	-1, 1418,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 630,
	-1, 1423,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 631,
	-1, 1440,
	193, 766,
	-2, 769,
	-1, 1623,
	1, 471,
	68, 471,
	98, 471,
	116, 471,
	120, 471,
	122, 471,
	135, 471,
	142, 471,
	147, 471,
	155, 471,
	158, 471,
	169, 471,
	182, 471,
	184, 471,
	188, 471,
	222, 471,
	224, 471,
	275, 471,
	282, 471,
	292, 471,
	293, 471,
	301, 471,
	318, 471,
	320, 471,
	322, 471,
	323, 471,
	-2, 470,
	-1, 1625,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 632,
	-1, 1630,
	145, 0,
	-2, 646,
	-1, 1640,
	193, 768,
	-2, 771,
	-1, 1674,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 673,
	-1, 1675,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 674,
	-1, 1676,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 675,
	-1, 1680,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 679,
	-1, 1681,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 680,
	-1, 1682,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 681,
	-1, 1803,
	145, 0,
	-2, 647,
	-1, 1806,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 650,
	-1, 1807,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 652,
	-1, 1911,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 651,
	-1, 1912,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 653,
	-1, 1919,
	145, 0,
	-2, 682,
	-1, 1977,
	145, 0,
	-2, 683,
	-1, 2040,
	36, 0,
	129, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 1051,
}

const sqlNprod = 1196
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 27628

var sqlAct = [...]int{

	651, 2039, 2017, 1580, 2064, 1983, 2018, 2038, 1618, 1049,
	1847, 2019, 1057, 1140, 877, 1651, 1794, 614, 1619, 1411,
	1769, 276, 460, 1892, 1865, 290, 1711, 641, 649, 1755,
	84, 84, 84, 1501, 1590, 648, 1876, 1756, 421, 48,
	1780, 771, 292, 84, 84, 84, 467, 61, 84, 1115,
	883, 84, 505, 1408, 839, 1387, 734, 1389, 1774, 84,
	627, 1114, 1133, 1338, 278, 20, 84, 84, 1119, 523,
	84, 1451, 481, 84, 84, 84, 84, 740, 1596, 84,
	84, 1399, 1605, 1222, 1148, 964, 1155, 61, 1500, 879,
	1118, 1147, 1089, 1022, 1279, 1394, 717, 714, 1058, 1013,
	1232, 644, 621, 610, 465, 1209, 1332, 1206, 1041, 1153,
	283, 27, 900, 282, 16, 284, 8, 1073, 61, 1109,
	1250, 832, 719, 744, 1082, 955, 611, 620, 578, 496,
	1150, 577, 524, 518, 998, 459, 20, 515, 517, 1051,
	994, 1122, 905, 470, 1877, 594, 62, 595, 755, 834,
	593, 408, 76, 643, 830, 399, 80, 748, 468, 598,
	511, 576, 1439, 1904, 1086, 289, 1905, 1050, 757, 63,
	411, 464, 757, 2055, 757, 2034, 737, 2025, 1875, 1350,
	737, 2015, 27, 264, 1079, 16, 2010, 8, 1054, 737,
	2006, 464, 1979, 737, 1973, 1079, 1955, 737, 1349, 1875,
	478, 289, 1945, 484, 1409, 737, 491, 1087, 457, 60,
	447, 1940, 487, 1913, 1939, 907, 1079, 1902, 908, 909,
	766, 1899, 1443, 1886, 1900, 472, 1875, 1444, 1442, 1883,
	418, 456, 737, 1092, 1874, 39, 67, 1875, 1092, 1852,
	1042, 911, 737, 40, 1042, 60, 1851, 1088, 1085, 737,
	1829, 1808, 1805, 1092, 1092, 1079, 1961, 1797, 1738, 69,
	1092, 1092, 1397, 910, 1737, 41, 1045, 1092, 906, 925,
	729, 39, 84, 84, 84, 84, 84, 1723, 527, 40,
	737, 1634, 1566, 1560, 1092, 1048, 1048, 1518, 70, 1516,
	1519, 1045, 1092, 908, 909, 1515, 65, 1514, 1092, 1397,
	1092, 41, 66, 1687, 1440, 1376, 1092, 1092, 737, 1144,
	1637, 1374, 737, 520, 520, 1090, 911, 465, 916, 1096,
	1091, 64, 1092, 1092, 1078, 1047, 1450, 1079, 1048, 1010,
	765, 1011, 1009, 766, 525, 1377, 1226, 67, 910, 1139,
	1104, 606, 758, 908, 909, 872, 758, 871, 758, 824,
	823, 737, 494, 540, 477, 1878, 71, 500, 1412, 1788,
	69, 856, 560, 2053, 2037, 2032, 911, 2024, 1974, 67,
	1884, 926, 1834, 1830, 1822, 1821, 67, 1820, 605, 1084,
	1816, 1815, 52, 1814, 1379, 908, 909, 1349, 910, 70,
	1753, 1702, 69, 916, 1747, 84, 1697, 65, 1696, 69,
	1695, 1083, 512, 66, 1645, 1623, 1595, 1570, 911, 521,
	84, 504, 67, 84, 84, 1523, 1520, 1508, 52, 1499,
	972, 70, 1053, 906, 1470, 1467, 1466, 1464, 70, 1456,
	910, 1455, 710, 1375, 1296, 69, 65, 927, 1247, 1410,
	1568, 1282, 66, 916, 761, 1218, 926, 84, 756, 84,
	875, 84, 84, 84, 64, 84, 1246, 605, 965, 604,
	64, 64, 502, 882, 70, 1653, 1996, 1958, 1938, 1932,
	84, 1930, 65, 1471, 1472, 1921, 1908, 1895, 66, 592,
	1881, 84, 1872, 1844, 1827, 916, 1799, 1763, 1743, 584,
	1629, 587, 1610, 1588, 527, 84, 1586, 1612, 908, 909,
	1585, 292, 527, 1583, 84, 1535, 1534, 1498, 1460, 84,
	84, 84, 927, 84, 921, 918, 919, 920, 912, 913,
	914, 915, 917, 1459, 937, 1436, 738, 2036, 591, 1746,
	1431, 1211, 84, 84, 1365, 908, 909, 1219, 926, 1323,
	84, 1322, 84, 910, 549, 1310, 1309, 548, 733, 1289,
	709, 1245, 1143, 527, 527, 999, 741, 746, 911, 1002,
	1006, 292, 84, 992, 84, 84, 84, 84, 84, 84,
	84, 1310, 991, 1477, 990, 84, 84, 989, 708, 583,
	910, 84, 988, 543, 545, 987, 857, 986, 985, 84,
	918, 919, 920, 912, 913, 914, 915, 917, 581, 937,
	1471, 1472, 881, 579, 927, 984, 983, 84, 982, 981,
	84, 908, 909, 980, 457, 895, 979, 978, 977, 965,
	976, 500, 601, 602, 969, 958, 1471, 1472, 607, 1489,
	1490, 1491, 64, 876, 911, 916, 778, 456, 482, 512,
	609, 546, 1802, 912, 913, 914, 915, 917, 536, 937,
	534, 736, 2008, 772, 1903, 1810, 910, 855, 1265, 904,
	1789, 1785, 767, 1752, 1751, 465, 503, 760, 750, 747,
	763, 769, 1786, 908, 909, 1359, 1358, 1486, 956, 886,
	710, 921, 918, 919, 920, 912, 913, 914, 915, 917,
	554, 937, 818, 725, 820, 1942, 819, 1906, 1390, 1750,
	1477, 1351, 1004, 1042, 1412, 852, 1005, 1522, 845, 851,
	1521, 1416, 626, 84, 570, 555, 861, 974, 880, 1333,
	1775, 84, 1050, 1654, 1447, 84, 1477, 704, 1233, 84,
	84, 874, 873, 84, 971, 454, 1345, 995, 84, 1529,
	1989, 890, 889, 888, 265, 457, 574, 1944, 457, 457,
	902, 1567, 84, 1487, 84, 84, 2050, 84, 710, 1023,
	84, 1492, 84, 84, 289, 84, 703, 527, 896, 2051,
	463, 897, 898, 1473, 1474, 1475, 1476, 1478, 575, 1487,
	1731, 968, 479, 268, 1095, 486, 489, 1070, 479, 1016,
	1086, 440, 858, 1371, 85, 862, 863, 864, 865, 866,
	1067, 520, 441, 520, 937, 869, 870, 1860, 60, 1471,
	1472, 1859, 61, 1052, 462, 1052, 272, 61, 1550, 1488,
	1026, 1027, 1029, 525, 1000, 1549, 996, 997, 1526, 1525,
	1003, 269, 1419, 1087, 39, 1074, 293, 914, 915, 917,
	552, 937, 40, 908, 909, 1488, 446, 1015, 445, 1044,
	1943, 1007, 1364, 1546, 1363, 1032, 1362, 292, 1428, 74,
	464, 84, 1019, 1040, 41, 1361, 911, 1036, 720, 273,
	721, 397, 1426, 1088, 1085, 1194, 84, 84, 720, 553,
	721, 1076, 1108, 84, 1075, 720, 1077, 721, 910, 1093,
	1056, 1039, 1038, 1035, 580, 1065, 1068, 1066, 1069, 1071,
	1473, 1474, 1475, 1476, 1478, 493, 1742, 1293, 84, 1477,
	1025, 84, 73, 450, 1292, 1145, 400, 937, 1483, 1484,
	1485, 1233, 1482, 1479, 1480, 1481, 1473, 1474, 1475, 1476,
	1478, 1165, 455, 1000, 1134, 1003, 451, 405, 1553, 400,
	722, 1090, 401, 916, 1424, 452, 292, 461, 1429, 1164,
	722, 532, 1097, 997, 996, 449, 1098, 722, 726, 2050,
	405, 1015, 1208, 1555, 1849, 401, 402, 1014, 1471, 1472,
	1335, 1216, 742, 271, 270, 67, 1208, 2021, 816, 937,
	1100, 52, 1024, 1994, 479, 404, 489, 1215, 822, 402,
	751, 1102, 1213, 727, 274, 1090, 926, 1191, 69, 2061,
	1111, 1266, 1204, 1575, 1112, 1084, 1113, 1370, 404, 1103,
	778, 778, 1719, 84, 84, 84, 1202, 1295, 1101, 84,
	571, 746, 84, 726, 2072, 1537, 275, 70, 84, 84,
	84, 84, 84, 1146, 1339, 65, 84, 72, 1425, 84,
	84, 66, 1328, 2012, 1720, 1427, 527, 1137, 1138, 84,
	1558, 1230, 1347, 1325, 84, 1544, 84, 2022, 731, 1572,
	277, 730, 927, 84, 1321, 2013, 757, 961, 1477, 75,
	1402, 1090, 528, 84, 718, 1372, 531, 1933, 1343, 572,
	1220, 1217, 551, 403, 993, 2060, 1200, 1303, 1199, 1405,
	1189, 1192, 1205, 465, 84, 84, 1917, 1241, 550, 1573,
	1334, 1604, 1260, 2023, 573, 527, 403, 1297, 2067, 1403,
	1873, 1475, 1476, 1478, 1129, 1341, 1339, 953, 1188, 1458,
	1606, 1487, 778, 464, 84, 1622, 84, 406, 84, 1320,
	2020, 723, 84, 1715, 1298, 1716, 84, 1554, 596, 2049,
	2047, 723, 920, 912, 913, 914, 915, 917, 723, 937,
	406, 1850, 1768, 1131, 563, 84, 541, 551, 1683, 539,
	597, 479, 597, 1718, 1331, 1825, 1382, 1090, 1854, 1012,
	1721, 1538, 1853, 1842, 1378, 2059, 1380, 1344, 1404, 1927,
	1528, 778, 1201, 2078, 1727, 1421, 1352, 1488, 1306, 1203,
	61, 1381, 1302, 711, 465, 1384, 1132, 1730, 2073, 1207,
	829, 887, 1190, 1356, 1729, 878, 1571, 1984, 1074, 596,
	868, 1214, 825, 1367, 1368, 1353, 745, 1354, 1355, 778,
	1795, 479, 749, 749, 1266, 1266, 1373, 1369, 1843, 1591,
	1770, 1312, 2065, 1311, 1783, 1717, 1601, 1600, 827, 1415,
	758, 550, 1684, 462, 486, 489, 636, 510, 1685, 828,
	509, 465, 1392, 588, 1076, 1826, 1396, 1075, 1449, 1077,
	1581, 1393, 804, 656, 1414, 1479, 1480, 1481, 1473, 1474,
	1475, 1476, 1478, 1726, 2077, 1398, 81, 81, 266, 1796,
	1754, 1840, 2066, 1330, 1597, 1266, 1266, 1266, 528, 391,
	392, 393, 1395, 1728, 410, 293, 528, 422, 1422, 1420,
	2068, 803, 1244, 1841, 1920, 410, 1824, 1502, 1628, 1552,
	465, 84, 471, 471, 1465, 1435, 266, 1430, 1336, 266,
	266, 490, 266, 1402, 1094, 81, 497, 1046, 569, 568,
	567, 566, 1446, 565, 564, 561, 508, 706, 501, 1503,
	975, 860, 1405, 1243, 2016, 1981, 1406, 528, 528, 1708,
	84, 84, 1542, 1540, 1400, 293, 1527, 1386, 1562, 1135,
	1533, 1127, 1403, 1072, 764, 762, 759, 754, 732, 728,
	724, 1505, 1506, 1507, 1642, 84, 1401, 1388, 84, 1867,
	84, 2051, 599, 557, 475, 850, 849, 84, 843, 840,
	527, 1524, 507, 847, 1869, 1031, 506, 1587, 84, 1559,
	1223, 84, 1531, 1141, 1878, 77, 1935, 1227, 287, 23,
	292, 1235, 84, 396, 1015, 1976, 285, 22, 286, 11,
	1030, 1545, 1252, 1252, 1263, 1008, 1274, 1598, 1613, 1611,
	1584, 1404, 1286, 1287, 1288, 1614, 1551, 479, 1266, 1266,
	1407, 489, 1564, 1556, 1593, 479, 1592, 603, 1563, 1565,
	600, 1561, 476, 1320, 61, 1574, 1576, 1577, 439, 84,
	407, 1142, 1034, 558, 1061, 1541, 853, 1543, 1582, 489,
	288, 10, 489, 1631, 498, 1647, 1648, 1649, 499, 1033,
	23, 1594, 1599, 1603, 495, 1602, 1607, 1608, 22, 705,
	11, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
	1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
	3, 1266, 1962, 1766, 442, 443, 1130, 1126, 266, 513,
	266, 422, 422, 1638, 810, 1015, 84, 84, 84, 1055,
	1641, 1028, 1655, 778, 1690, 84, 84, 280, 9, 903,
	854, 84, 10, 84, 821, 84, 84, 84, 770, 1657,
	84, 84, 1081, 527, 2075, 2076, 653, 1660, 1662, 279,
	7, 528, 1156, 1163, 778, 778, 281, 4, 1471, 1472,
	908, 909, 2009, 778, 778, 1106, 1105, 1965, 1792, 1703,
	1578, 1569, 483, 1517, 1724, 1725, 84, 84, 479, 1360,
	1691, 1294, 1291, 527, 1290, 1240, 1707, 1107, 962, 1812,
	1993, 84, 84, 1704, 1866, 84, 778, 741, 1650, 9,
	1383, 1762, 1761, 527, 84, 972, 1762, 1761, 1767, 1760,
	1151, 84, 1791, 970, 1760, 1748, 1749, 448, 1848, 398,
	1741, 7, 859, 562, 1787, 1764, 804, 804, 4, 1609,
	2011, 537, 1817, 1800, 1457, 1891, 1916, 1772, 1765, 1771,
	1242, 293, 465, 1434, 84, 973, 542, 1773, 38, 422,
	422, 1437, 1744, 1758, 630, 1709, 1530, 1121, 1120, 525,
	295, 1804, 848, 652, 1307, 803, 803, 833, 842, 1453,
	1454, 1251, 1790, 1157, 707, 1778, 1779, 654, 775, 1784,
	655, 844, 841, 410, 1823, 266, 776, 422, 586, 422,
	1001, 589, 642, 773, 1059, 1212, 1231, 1445, 966, 84,
	622, 84, 1497, 84, 84, 634, 471, 633, 1228, 533,
	1793, 51, 84, 1510, 547, 1299, 416, 266, 417, 1342,
	1745, 778, 1136, 1357, 891, 1539, 453, 1468, 1266, 535,
	293, 81, 1272, 1264, 1261, 582, 713, 84, 804, 954,
	266, 1838, 1327, 1060, 559, 266, 266, 266, 1348, 752,
	1080, 1337, 608, 1835, 1547, 1548, 745, 899, 474, 84,
	1862, 1307, 527, 473, 1116, 745, 84, 1836, 266, 266,
	556, 826, 1099, 947, 84, 479, 81, 803, 81, 944,
	444, 1762, 1761, 1882, 1929, 1879, 1868, 1128, 777, 1760,
	84, 84, 1305, 1861, 2071, 1934, 1536, 804, 422, 1901,
	81, 422, 422, 422, 422, 422, 867, 1907, 1988, 1910,
	1894, 422, 422, 1870, 68, 1941, 1889, 410, 1888, 1890,
	1864, 1885, 1329, 778, 26, 885, 1915, 24, 21, 1898,
	528, 84, 1266, 19, 1385, 804, 803, 18, 17, 1909,
	25, 1931, 1617, 471, 15, 14, 497, 13, 12, 37,
	84, 84, 36, 35, 1925, 1432, 1433, 1151, 1897, 1922,
	84, 34, 806, 33, 84, 32, 6, 5, 1635, 84,
	2, 1857, 1858, 1, 803, 1948, 0, 0, 1956, 527,
	1950, 1926, 0, 1952, 0, 0, 84, 1957, 0, 528,
	0, 0, 84, 1762, 1761, 0, 0, 292, 84, 84,
	1966, 1760, 465, 1949, 0, 0, 1971, 1951, 1964, 0,
	0, 1968, 0, 0, 1967, 1960, 1494, 1495, 1496, 778,
	746, 84, 1969, 84, 84, 0, 84, 0, 1266, 1975,
	1688, 0, 0, 1959, 0, 1963, 0, 0, 0, 61,
	0, 1698, 1997, 0, 0, 1995, 817, 0, 1972, 266,
	0, 2001, 84, 1978, 1992, 84, 2000, 1020, 0, 0,
	0, 266, 0, 0, 1990, 266, 1037, 1999, 2005, 266,
	0, 2003, 1986, 2007, 1043, 2004, 1762, 1761, 2002, 0,
	1998, 0, 0, 0, 1760, 84, 0, 84, 266, 0,
	1063, 1064, 2026, 266, 2033, 0, 266, 2029, 422, 422,
	0, 422, 2031, 0, 2028, 0, 0, 84, 0, 0,
	0, 2044, 0, 778, 805, 0, 2048, 0, 2035, 0,
	2046, 0, 2052, 0, 0, 0, 84, 0, 0, 2054,
	1777, 0, 2058, 0, 2057, 2056, 2030, 0, 0, 0,
	0, 0, 0, 0, 0, 2070, 2069, 0, 0, 0,
	2074, 0, 1061, 1151, 1471, 1472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2079, 0, 1626,
	1627, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 774, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1110, 0, 0,
	1151, 1471, 1472, 1151, 0, 1486, 1156, 1658, 0, 0,
	0, 0, 266, 1117, 0, 1156, 1663, 0, 0, 497,
	0, 0, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671,
	1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681,
	1682, 0, 1686, 0, 266, 0, 0, 422, 1694, 804,
	0, 0, 0, 0, 1477, 0, 0, 0, 0, 1719,
	0, 1712, 777, 777, 0, 0, 0, 0, 0, 1710,
	0, 0, 0, 1714, 528, 0, 0, 0, 0, 0,
	804, 804, 0, 0, 0, 0, 0, 0, 803, 804,
	804, 1720, 0, 0, 293, 0, 0, 0, 0, 0,
	0, 1477, 0, 0, 0, 0, 0, 1487, 1471, 1472,
	0, 1713, 0, 0, 0, 0, 631, 49, 0, 803,
	803, 0, 804, 0, 0, 908, 909, 0, 803, 803,
	0, 0, 0, 0, 0, 702, 806, 806, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1734, 911, 266,
	1300, 1301, 0, 1740, 1487, 1020, 0, 49, 1308, 0,
	0, 803, 0, 0, 1313, 1314, 1316, 1318, 1319, 0,
	910, 0, 1324, 1488, 777, 1326, 266, 294, 458, 0,
	1715, 466, 1716, 0, 0, 266, 0, 0, 49, 0,
	266, 0, 1346, 0, 0, 0, 0, 0, 0, 266,
	0, 0, 0, 1151, 1151, 0, 0, 1151, 1477, 266,
	1718, 0, 0, 1954, 0, 0, 0, 1721, 0, 0,
	1488, 0, 0, 0, 0, 916, 0, 0, 0, 0,
	1110, 1110, 0, 777, 0, 0, 0, 528, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 804, 806, 0,
	1482, 1479, 1480, 1481, 1473, 1474, 1475, 1476, 1478, 0,
	885, 1487, 885, 0, 422, 0, 0, 1398, 266, 1845,
	1991, 777, 1391, 0, 0, 1856, 0, 528, 926, 0,
	0, 0, 1717, 0, 0, 0, 803, 0, 805, 805,
	0, 266, 0, 0, 0, 0, 0, 528, 0, 0,
	1481, 1473, 1474, 1475, 1476, 1478, 0, 806, 2014, 0,
	0, 0, 0, 0, 0, 1402, 0, 0, 0, 0,
	612, 612, 0, 0, 1846, 0, 0, 1488, 0, 715,
	0, 0, 0, 0, 1405, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 927, 806, 1400, 0, 0, 804,
	0, 908, 909, 0, 1403, 774, 774, 938, 939, 940,
	0, 423, 0, 0, 0, 0, 0, 0, 1401, 0,
	0, 1887, 0, 1919, 911, 0, 0, 942, 0, 424,
	0, 0, 0, 1782, 0, 0, 1151, 0, 803, 0,
	0, 0, 0, 0, 466, 0, 910, 0, 0, 0,
	805, 0, 925, 0, 1482, 1479, 1480, 1481, 1473, 1474,
	1475, 1476, 1478, 529, 0, 426, 0, 0, 0, 0,
	431, 432, 0, 1404, 437, 912, 913, 914, 915, 917,
	0, 937, 0, 0, 0, 0, 425, 427, 0, 0,
	0, 0, 0, 892, 894, 804, 0, 497, 0, 0,
	901, 916, 0, 0, 0, 0, 528, 0, 0, 805,
	0, 0, 948, 949, 950, 951, 952, 774, 0, 1977,
	935, 943, 960, 0, 0, 428, 0, 0, 0, 0,
	0, 1781, 967, 0, 803, 0, 266, 266, 0, 429,
	430, 0, 0, 0, 0, 0, 0, 805, 933, 0,
	0, 0, 0, 0, 926, 0, 433, 0, 0, 0,
	0, 1579, 0, 0, 1020, 0, 885, 0, 0, 0,
	0, 0, 0, 1589, 0, 0, 774, 0, 0, 0,
	0, 0, 0, 0, 266, 0, 1987, 266, 0, 804,
	0, 0, 0, 0, 0, 0, 0, 0, 1621, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 774, 0, 0, 0, 0, 0,
	927, 0, 0, 528, 0, 0, 0, 0, 803, 0,
	0, 0, 936, 0, 458, 777, 0, 0, 0, 0,
	0, 293, 0, 0, 0, 1652, 0, 1061, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 434, 777, 777, 0, 435,
	0, 0, 0, 0, 436, 777, 777, 0, 0, 529,
	0, 0, 0, 0, 0, 0, 294, 529, 438, 0,
	934, 0, 0, 0, 0, 0, 0, 921, 918, 919,
	920, 912, 913, 914, 915, 917, 0, 937, 777, 806,
	0, 0, 1705, 1706, 1020, 0, 0, 0, 0, 0,
	0, 497, 497, 0, 0, 0, 0, 1732, 0, 1733,
	0, 266, 1735, 1736, 0, 0, 1739, 266, 529, 529,
	806, 806, 0, 0, 0, 0, 294, 0, 0, 806,
	806, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 458, 0, 0, 458, 458,
	1757, 0, 497, 1117, 0, 1757, 0, 0, 0, 0,
	0, 0, 806, 0, 0, 0, 0, 266, 266, 0,
	957, 266, 959, 0, 0, 0, 0, 0, 0, 963,
	1621, 0, 0, 612, 0, 0, 0, 1798, 0, 1166,
	1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
	1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
	1187, 0, 1193, 777, 1195, 1196, 1197, 1198, 0, 0,
	1818, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1221, 0, 0, 0, 0, 0, 0,
	0, 805, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1248, 1249, 0, 0, 1262,
	0, 1273, 1275, 1280, 1283, 1284, 1285, 0, 0, 0,
	0, 0, 805, 805, 0, 1020, 0, 1837, 0, 422,
	1839, 805, 805, 0, 0, 0, 715, 806, 266, 0,
	0, 0, 0, 0, 0, 49, 0, 49, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 774, 1863,
	0, 0, 49, 497, 805, 777, 0, 49, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 0, 0,
	1757, 0, 529, 0, 0, 266, 0, 0, 0, 774,
	774, 0, 1893, 0, 0, 0, 0, 0, 774, 774,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 1471,
	1472, 0, 1489, 1490, 1491, 0, 497, 1621, 0, 1366,
	0, 0, 0, 0, 0, 1801, 0, 0, 0, 0,
	0, 774, 0, 0, 0, 0, 0, 0, 0, 806,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 885, 0, 0,
	1486, 777, 0, 0, 0, 0, 901, 0, 0, 0,
	0, 0, 294, 0, 0, 0, 1936, 1937, 0, 0,
	0, 0, 0, 0, 0, 0, 1946, 0, 0, 805,
	1947, 0, 1757, 0, 0, 422, 0, 0, 0, 0,
	0, 0, 0, 0, 1152, 0, 0, 0, 0, 1477,
	0, 0, 497, 0, 0, 1417, 1418, 0, 1621, 0,
	0, 1423, 0, 0, 1621, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 806, 0, 0, 0, 0,
	1210, 0, 0, 0, 1492, 0, 0, 1985, 0, 497,
	266, 0, 422, 1441, 0, 777, 774, 0, 0, 0,
	1448, 294, 1487, 1452, 0, 0, 0, 0, 0, 0,
	0, 0, 1461, 0, 0, 1757, 0, 0, 1893, 0,
	0, 1621, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 805, 0, 0, 0, 0, 0, 960, 0, 0,
	0, 0, 0, 1280, 1280, 1280, 0, 0, 0, 0,
	0, 266, 0, 497, 908, 909, 0, 928, 929, 930,
	938, 939, 940, 0, 0, 0, 0, 0, 1488, 806,
	931, 0, 0, 2045, 0, 0, 1532, 911, 0, 0,
	942, 1471, 1472, 0, 1489, 1490, 1491, 0, 0, 0,
	466, 0, 1621, 0, 0, 0, 0, 1633, 774, 910,
	0, 529, 0, 0, 0, 925, 612, 0, 0, 0,
	0, 0, 0, 0, 612, 0, 0, 0, 715, 0,
	0, 0, 0, 0, 0, 0, 0, 805, 0, 0,
	0, 0, 1486, 0, 0, 0, 0, 0, 0, 0,
	0, 1483, 1484, 1485, 0, 1482, 1479, 1480, 1481, 1473,
	1474, 1475, 1476, 1478, 916, 0, 0, 0, 0, 0,
	529, 0, 0, 49, 0, 0, 0, 49, 0, 0,
	0, 0, 0, 935, 943, 0, 0, 0, 0, 0,
	49, 1477, 0, 1624, 0, 0, 1625, 0, 0, 941,
	0, 1413, 0, 0, 774, 0, 0, 1630, 0, 0,
	0, 933, 0, 0, 0, 0, 1639, 926, 0, 0,
	0, 0, 0, 0, 1643, 0, 1492, 1366, 0, 0,
	0, 805, 0, 0, 0, 0, 0, 0, 0, 1210,
	0, 932, 1659, 0, 1487, 0, 1661, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 959, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1692,
	1693, 0, 0, 927, 0, 0, 0, 0, 1699, 1700,
	1701, 0, 0, 0, 0, 936, 0, 0, 774, 908,
	909, 0, 928, 929, 930, 938, 939, 940, 0, 0,
	1488, 0, 0, 0, 0, 931, 0, 959, 0, 0,
	0, 0, 911, 0, 0, 942, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 612, 0, 0, 0, 0,
	0, 0, 0, 0, 910, 0, 0, 0, 0, 0,
	925, 0, 0, 934, 0, 0, 922, 923, 924, 0,
	921, 918, 919, 920, 912, 913, 914, 915, 917, 0,
	937, 0, 0, 0, 1776, 0, 0, 1831, 0, 0,
	0, 0, 0, 1483, 1484, 1485, 0, 1482, 1479, 1480,
	1481, 1473, 1474, 1475, 1476, 1478, 0, 1152, 0, 916,
	0, 0, 0, 0, 0, 1803, 0, 0, 0, 1806,
	1807, 0, 0, 0, 1809, 0, 0, 0, 935, 943,
	0, 1811, 0, 1813, 0, 0, 28, 0, 0, 0,
	0, 1819, 0, 0, 941, 0, 0, 29, 53, 0,
	0, 0, 0, 0, 1152, 0, 933, 1152, 0, 0,
	0, 0, 926, 0, 49, 529, 0, 0, 0, 0,
	0, 0, 55, 0, 1828, 0, 0, 0, 31, 0,
	60, 0, 0, 0, 0, 294, 932, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 39, 0, 0, 56,
	0, 0, 0, 43, 40, 0, 1855, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 927, 0,
	45, 0, 0, 0, 0, 0, 41, 0, 0, 0,
	936, 0, 0, 0, 0, 0, 1880, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1896,
	0, 0, 0, 0, 908, 909, 0, 928, 929, 930,
	938, 939, 940, 0, 0, 0, 0, 0, 1911, 1912,
	931, 0, 0, 0, 0, 0, 0, 911, 934, 0,
	942, 922, 923, 924, 0, 921, 918, 919, 920, 912,
	913, 914, 915, 917, 0, 937, 42, 49, 1924, 910,
	0, 0, 1513, 0, 0, 925, 0, 0, 529, 0,
	0, 1928, 58, 30, 0, 0, 46, 0, 57, 0,
	0, 0, 0, 0, 47, 1471, 1472, 67, 1489, 1490,
	1491, 0, 50, 52, 0, 0, 0, 1152, 1152, 715,
	0, 1152, 54, 0, 0, 0, 0, 0, 529, 466,
	69, 0, 0, 0, 916, 0, 0, 1471, 1472, 0,
	1489, 1490, 1491, 0, 59, 0, 0, 0, 529, 0,
	0, 0, 0, 935, 943, 0, 1486, 0, 0, 70,
	0, 0, 0, 0, 0, 0, 0, 65, 0, 941,
	0, 0, 0, 66, 0, 0, 0, 0, 0, 0,
	0, 933, 0, 0, 0, 0, 0, 926, 1486, 0,
	0, 0, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1477, 0, 0, 0, 0,
	0, 932, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2027, 1477, 0, 0,
	1492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 927, 0, 0, 0, 0, 1487, 2043,
	2043, 0, 0, 0, 0, 936, 0, 1871, 0, 0,
	0, 0, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 2043, 0, 0,
	1487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1152, 0, 0, 0, 0, 0, 0, 529, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2043, 934, 1488, 0, 922, 923, 924, 0,
	921, 918, 919, 920, 912, 913, 914, 915, 917, 0,
	937, 0, 0, 0, 0, 0, 0, 1512, 0, 0,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 959,
	0, 0, 0, 0, 0, 0, 0, 1483, 1484, 1485,
	0, 1482, 1479, 1480, 1481, 1473, 1474, 1475, 1476, 1478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 529, 0, 0, 291, 0, 1483,
	1484, 1485, 0, 1482, 1479, 1480, 1481, 1473, 1474, 1475,
	1476, 1478, 294, 86, 87, 310, 88, 311, 312, 313,
	314, 213, 315, 316, 317, 318, 89, 90, 91, 214,
	215, 216, 217, 92, 218, 219, 319, 93, 220, 221,
	94, 320, 321, 222, 223, 224, 322, 225, 323, 296,
	324, 95, 96, 97, 0, 98, 325, 99, 100, 101,
	326, 297, 102, 103, 327, 328, 329, 330, 331, 332,
	104, 105, 267, 106, 226, 107, 227, 228, 333, 108,
	334, 109, 335, 336, 337, 110, 111, 338, 112, 339,
	0, 340, 229, 113, 114, 230, 231, 341, 342, 343,
	115, 116, 232, 0, 117, 344, 118, 345, 346, 298,
	347, 119, 233, 348, 234, 349, 120, 121, 122, 123,
	235, 236, 300, 350, 127, 351, 124, 352, 299, 125,
	237, 126, 238, 239, 240, 353, 241, 354, 301, 128,
	302, 129, 130, 355, 132, 131, 356, 242, 303, 133,
	304, 357, 134, 358, 359, 135, 0, 136, 137, 138,
	243, 139, 305, 140, 141, 143, 142, 360, 361, 362,
	244, 144, 245, 145, 146, 363, 147, 364, 365, 148,
	366, 367, 149, 246, 306, 150, 307, 247, 151, 152,
	153, 154, 368, 248, 155, 249, 156, 369, 157, 158,
	159, 250, 160, 161, 370, 162, 163, 164, 165, 166,
	168, 169, 167, 170, 171, 371, 172, 308, 173, 174,
	251, 175, 0, 176, 177, 178, 179, 372, 252, 180,
	181, 373, 182, 183, 309, 184, 253, 254, 185, 374,
	191, 186, 187, 188, 190, 255, 189, 256, 375, 192,
	376, 193, 194, 195, 377, 257, 258, 259, 378, 379,
	196, 260, 261, 380, 197, 198, 199, 200, 381, 382,
	201, 202, 203, 383, 204, 384, 205, 206, 207, 262,
	263, 385, 386, 208, 387, 388, 389, 390, 209, 210,
	211, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	1615, 0, 0, 0, 0, 0, 0, 0, 1616, 86,
	87, 310, 88, 311, 312, 313, 314, 213, 315, 316,
	317, 318, 89, 90, 91, 214, 215, 216, 217, 92,
	218, 219, 319, 93, 220, 221, 94, 320, 321, 222,
	223, 224, 322, 225, 323, 296, 324, 95, 96, 97,
	0, 98, 325, 99, 100, 101, 326, 297, 102, 103,
	327, 328, 329, 330, 331, 332, 104, 105, 267, 106,
	226, 107, 227, 228, 333, 108, 334, 109, 335, 336,
	337, 110, 111, 338, 112, 339, 0, 340, 229, 113,
	114, 230, 231, 341, 342, 343, 115, 116, 232, 0,
	117, 344, 118, 345, 346, 298, 347, 119, 233, 348,
	234, 349, 120, 121, 122, 123, 235, 236, 300, 350,
	127, 351, 124, 352, 299, 125, 237, 126, 238, 239,
	240, 353, 241, 354, 301, 128, 302, 129, 130, 355,
	132, 131, 356, 242, 303, 133, 304, 357, 134, 358,
	359, 135, 0, 136, 137, 138, 243, 139, 305, 140,
	141, 143, 142, 360, 361, 362, 244, 144, 245, 145,
	146, 363, 147, 364, 365, 148, 366, 367, 149, 246,
	306, 150, 307, 247, 151, 152, 153, 154, 368, 248,
	155, 249, 156, 369, 157, 158, 159, 250, 160, 161,
	370, 162, 163, 164, 165, 166, 168, 169, 167, 170,
	171, 371, 172, 308, 173, 174, 251, 175, 0, 176,
	177, 178, 179, 372, 252, 180, 181, 373, 182, 183,
	309, 184, 253, 254, 185, 374, 191, 186, 187, 188,
	190, 255, 189, 256, 375, 192, 376, 193, 194, 195,
	377, 257, 258, 259, 378, 379, 196, 260, 261, 380,
	197, 198, 199, 200, 381, 382, 201, 202, 203, 383,
	204, 384, 205, 206, 207, 262, 263, 385, 386, 208,
	387, 388, 389, 390, 209, 210, 211, 212, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1970, 86, 87, 310,
	88, 311, 312, 313, 314, 213, 315, 316, 317, 318,
	89, 90, 91, 214, 215, 216, 217, 92, 218, 219,
	319, 93, 220, 221, 94, 320, 321, 222, 223, 224,
	322, 225, 323, 296, 324, 95, 96, 97, 0, 98,
	325, 99, 100, 101, 326, 297, 102, 103, 327, 328,
	329, 330, 331, 332, 104, 105, 267, 106, 226, 107,
	227, 228, 333, 108, 334, 109, 335, 336, 337, 110,
	111, 338, 112, 339, 0, 340, 229, 113, 114, 230,
	231, 341, 342, 343, 115, 116, 232, 0, 117, 344,
	118, 345, 346, 298, 347, 119, 233, 348, 234, 349,
	120, 121, 122, 123, 235, 236, 300, 350, 127, 351,
	124, 352, 299, 125, 237, 126, 238, 239, 240, 353,
	241, 354, 301, 128, 302, 129, 130, 355, 132, 131,
	356, 242, 303, 133, 304, 357, 134, 358, 359, 135,
	0, 136, 137, 138, 243, 139, 305, 140, 141, 143,
	142, 360, 361, 362, 244, 144, 245, 145, 146, 363,
	147, 364, 365, 148, 366, 367, 149, 246, 306, 150,
	307, 247, 151, 152, 153, 154, 368, 248, 155, 249,
	156, 369, 157, 158, 159, 250, 160, 161, 370, 162,
	163, 164, 165, 166, 168, 169, 167, 170, 171, 371,
	172, 308, 173, 174, 251, 175, 0, 176, 177, 178,
	179, 372, 252, 180, 181, 373, 182, 183, 309, 184,
	253, 254, 185, 374, 191, 186, 187, 188, 190, 255,
	189, 256, 375, 192, 376, 193, 194, 195, 377, 257,
	258, 259, 378, 379, 196, 260, 261, 380, 197, 198,
	199, 200, 381, 382, 201, 202, 203, 383, 204, 384,
	205, 206, 207, 262, 263, 385, 386, 208, 387, 388,
	389, 390, 209, 210, 211, 212, 291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 739,
	0, 0, 86, 87, 310, 88, 311, 312, 313, 314,
	213, 315, 316, 317, 318, 89, 90, 91, 214, 215,
	216, 217, 92, 218, 219, 319, 93, 220, 221, 94,
	320, 321, 222, 223, 224, 322, 225, 323, 296, 324,
	95, 96, 97, 0, 98, 325, 99, 100, 101, 326,
	297, 102, 103, 327, 328, 329, 330, 331, 332, 104,
	105, 267, 106, 226, 107, 227, 228, 333, 108, 334,
	109, 335, 336, 337, 110, 111, 338, 112, 339, 0,
	340, 229, 113, 114, 230, 231, 341, 342, 343, 115,
	116, 232, 0, 117, 344, 118, 345, 346, 298, 347,
	119, 233, 348, 234, 349, 120, 121, 122, 123, 235,
	236, 300, 350, 127, 351, 124, 352, 299, 125, 237,
	126, 238, 239, 240, 353, 241, 354, 301, 128, 302,
	129, 130, 355, 132, 131, 356, 242, 303, 133, 304,
	357, 134, 358, 359, 135, 0, 136, 137, 138, 243,
	139, 305, 140, 141, 143, 142, 360, 361, 362, 244,
	144, 245, 145, 146, 363, 147, 364, 365, 148, 366,
	367, 149, 246, 306, 150, 307, 247, 151, 152, 153,
	154, 368, 248, 155, 249, 156, 369, 157, 158, 159,
	250, 160, 161, 370, 162, 163, 164, 165, 166, 168,
	169, 167, 170, 171, 371, 172, 308, 173, 174, 251,
	175, 0, 176, 177, 178, 179, 372, 252, 180, 181,
	373, 182, 183, 309, 184, 253, 254, 185, 374, 191,
	186, 187, 188, 190, 255, 189, 256, 375, 192, 376,
	193, 194, 195, 377, 257, 258, 259, 378, 379, 196,
	260, 261, 380, 197, 198, 199, 200, 381, 382, 201,
	202, 203, 383, 204, 384, 205, 206, 207, 262, 263,
	385, 386, 208, 387, 388, 389, 390, 209, 210, 211,
	212, 650, 639, 640, 637, 638, 629, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 1237,
	88, 0, 0, 0, 0, 666, 632, 0, 0, 0,
	89, 90, 91, 214, 681, 216, 682, 92, 683, 684,
	0, 93, 220, 221, 94, 635, 665, 685, 686, 224,
	0, 677, 0, 658, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 297, 102, 103, 0, 659,
	661, 0, 660, 662, 104, 105, 267, 106, 687, 107,
	688, 689, 0, 108, 0, 109, 0, 1238, 0, 680,
	111, 0, 112, 0, 0, 0, 623, 113, 114, 667,
	668, 646, 0, 0, 115, 116, 690, 0, 117, 0,
	118, 0, 0, 298, 0, 119, 678, 0, 234, 0,
	120, 121, 122, 123, 674, 676, 300, 0, 127, 0,
	124, 0, 299, 125, 691, 126, 692, 693, 694, 0,
	657, 0, 301, 128, 302, 129, 130, 0, 132, 131,
	0, 679, 303, 133, 304, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 243, 139, 305, 140, 141, 143,
	142, 618, 0, 647, 675, 144, 695, 145, 146, 0,
	147, 0, 0, 148, 0, 0, 149, 246, 306, 150,
	307, 669, 151, 152, 153, 154, 0, 670, 155, 249,
	156, 0, 157, 158, 159, 696, 160, 161, 0, 162,
	163, 164, 165, 166, 168, 169, 167, 170, 171, 0,
	172, 308, 173, 174, 624, 175, 0, 176, 177, 178,
	179, 0, 252, 180, 181, 663, 182, 183, 309, 184,
	697, 254, 185, 0, 191, 186, 187, 188, 190, 698,
	189, 671, 0, 192, 0, 193, 194, 195, 0, 257,
	699, 700, 0, 0, 196, 672, 673, 645, 197, 198,
	199, 200, 0, 0, 201, 202, 203, 664, 204, 0,
	205, 206, 207, 262, 701, 1236, 0, 208, 0, 0,
	0, 0, 209, 210, 211, 212, 619, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 615, 616, 1239,
	0, 0, 0, 617, 0, 0, 625, 1234, 0, 0,
	0, 628, 650, 639, 640, 637, 638, 629, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 666, 632, 0, 0,
	0, 89, 90, 91, 214, 681, 216, 682, 92, 683,
	684, 0, 93, 220, 221, 94, 635, 665, 685, 686,
	224, 0, 677, 0, 658, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 297, 102, 103, 0,
	659, 661, 0, 660, 662, 104, 105, 267, 106, 687,
	107, 688, 689, 716, 108, 0, 109, 0, 0, 0,
	680, 111, 0, 112, 0, 0, 0, 623, 113, 114,
	667, 668, 646, 0, 0, 115, 116, 690, 0, 117,
	0, 118, 0, 0, 298, 0, 119, 678, 0, 234,
	0, 120, 121, 122, 123, 674, 676, 300, 0, 127,
	0, 124, 0, 299, 125, 691, 126, 692, 693, 694,
	0, 657, 0, 301, 128, 302, 129, 130, 0, 132,
	131, 0, 679, 303, 133, 304, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 243, 139, 305, 140, 141,
	143, 142, 618, 0, 647, 675, 144, 695, 145, 146,
	0, 147, 0, 0, 148, 0, 0, 149, 246, 306,
	150, 307, 669, 151, 152, 153, 154, 0, 670, 155,
	249, 156, 0, 157, 158, 159, 696, 160, 161, 0,
	162, 163, 164, 165, 166, 168, 169, 167, 170, 171,
	0, 172, 308, 173, 174, 624, 175, 0, 176, 177,
	178, 179, 67, 252, 180, 181, 663, 182, 183, 309,
	184, 697, 254, 185, 0, 191, 186, 187, 188, 190,
	698, 189, 671, 0, 192, 69, 193, 194, 195, 0,
	257, 699, 700, 0, 0, 196, 672, 673, 645, 197,
	198, 199, 200, 0, 0, 201, 202, 203, 664, 204,
	0, 205, 206, 207, 530, 701, 0, 0, 208, 0,
	0, 0, 65, 209, 210, 211, 212, 619, 66, 650,
	639, 640, 637, 638, 629, 0, 0, 0, 615, 616,
	0, 0, 0, 0, 617, 86, 87, 625, 88, 0,
	0, 0, 628, 666, 632, 0, 0, 0, 89, 90,
	91, 214, 681, 216, 682, 92, 683, 684, 0, 93,
	220, 221, 94, 635, 665, 685, 686, 224, 0, 677,
	0, 658, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 297, 102, 103, 0, 659, 661, 0,
	660, 662, 104, 105, 267, 106, 687, 107, 688, 689,
	0, 108, 0, 109, 0, 0, 0, 680, 111, 0,
	112, 0, 0, 0, 623, 113, 114, 667, 668, 646,
	0, 0, 115, 116, 690, 0, 117, 0, 118, 0,
	0, 298, 0, 119, 678, 0, 234, 0, 120, 121,
	122, 123, 674, 676, 300, 0, 127, 0, 124, 0,
	299, 125, 691, 126, 692, 693, 694, 0, 657, 0,
	301, 128, 302, 129, 130, 0, 132, 131, 0, 679,
	303, 133, 304, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 243, 139, 305, 140, 141, 143, 142, 618,
	0, 647, 675, 144, 695, 145, 146, 0, 147, 0,
	0, 148, 0, 0, 149, 246, 306, 150, 307, 669,
	151, 152, 153, 154, 0, 670, 155, 249, 156, 0,
	157, 158, 159, 696, 160, 161, 0, 162, 163, 164,
	165, 166, 168, 169, 167, 170, 171, 0, 172, 308,
	173, 174, 624, 175, 0, 176, 177, 178, 179, 67,
	252, 180, 181, 663, 182, 183, 309, 184, 697, 254,
	185, 0, 191, 186, 187, 188, 190, 698, 189, 671,
	0, 192, 69, 193, 194, 195, 0, 257, 699, 700,
	0, 0, 196, 672, 673, 645, 197, 198, 199, 200,
	0, 0, 201, 202, 203, 664, 204, 0, 205, 206,
	207, 530, 701, 0, 0, 208, 0, 0, 0, 65,
	209, 210, 211, 212, 619, 66, 650, 639, 640, 637,
	638, 629, 0, 0, 0, 615, 616, 0, 0, 0,
	0, 617, 86, 87, 625, 88, 0, 0, 0, 628,
	666, 632, 0, 0, 0, 89, 90, 91, 214, 681,
	216, 682, 92, 683, 684, 1276, 93, 220, 221, 94,
	635, 665, 685, 686, 224, 0, 677, 0, 658, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	297, 102, 103, 0, 659, 661, 0, 660, 662, 104,
	105, 267, 106, 687, 107, 688, 689, 0, 108, 0,
	109, 0, 0, 0, 680, 111, 0, 112, 0, 0,
	0, 623, 113, 114, 667, 668, 646, 0, 0, 115,
	116, 690, 0, 117, 0, 118, 0, 1281, 298, 0,
	119, 678, 0, 234, 0, 120, 121, 122, 123, 674,
	676, 300, 0, 127, 0, 124, 0, 299, 125, 691,
	126, 692, 693, 694, 0, 657, 0, 301, 128, 302,
	129, 130, 0, 132, 131, 1277, 679, 303, 133, 304,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 243,
	139, 305, 140, 141, 143, 142, 618, 0, 647, 675,
	144, 695, 145, 146, 0, 147, 0, 0, 148, 0,
	0, 149, 246, 306, 150, 307, 669, 151, 152, 153,
	154, 0, 670, 155, 249, 156, 0, 157, 158, 159,
	696, 160, 161, 0, 162, 163, 164, 165, 166, 168,
	169, 167, 170, 171, 0, 172, 308, 173, 174, 624,
	175, 0, 176, 177, 178, 179, 0, 252, 180, 181,
	663, 182, 183, 309, 184, 697, 254, 185, 0, 191,
	186, 187, 188, 190, 698, 189, 671, 0, 192, 0,
	193, 194, 195, 0, 257, 699, 700, 0, 1278, 196,
	672, 673, 645, 197, 198, 199, 200, 0, 0, 201,
	202, 203, 664, 204, 0, 205, 206, 207, 262, 701,
	0, 0, 208, 0, 0, 0, 0, 209, 210, 211,
	212, 619, 0, 650, 639, 640, 637, 638, 629, 0,
	0, 0, 615, 616, 0, 0, 0, 0, 617, 86,
	87, 625, 88, 0, 0, 0, 628, 666, 632, 0,
	0, 0, 89, 90, 91, 214, 681, 216, 682, 92,
	683, 684, 0, 93, 220, 221, 94, 635, 665, 685,
	686, 224, 0, 677, 0, 658, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 297, 102, 103,
	0, 659, 661, 0, 660, 662, 104, 105, 267, 106,
	687, 107, 688, 689, 0, 108, 0, 109, 0, 0,
	0, 680, 111, 0, 112, 0, 0, 0, 623, 113,
	114, 667, 668, 646, 0, 0, 115, 116, 690, 0,
	117, 0, 118, 0, 0, 298, 0, 119, 678, 0,
	234, 0, 120, 121, 122, 123, 674, 676, 300, 0,
	127, 0, 124, 0, 299, 125, 691, 126, 692, 693,
	694, 0, 657, 0, 301, 128, 302, 129, 130, 0,
	132, 131, 0, 679, 303, 133, 304, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 243, 139, 305, 140,
	141, 143, 142, 618, 1557, 647, 675, 144, 695, 145,
	146, 0, 147, 0, 0, 148, 0, 0, 149, 246,
	306, 150, 307, 669, 151, 152, 153, 154, 0, 670,
	155, 249, 156, 0, 157, 158, 159, 696, 160, 161,
	0, 162, 163, 164, 165, 166, 168, 169, 167, 170,
	171, 0, 172, 308, 173, 174, 624, 175, 0, 176,
	177, 178, 179, 0, 252, 180, 181, 663, 182, 183,
	309, 184, 697, 254, 185, 0, 191, 186, 187, 188,
	190, 698, 189, 671, 0, 192, 0, 193, 194, 195,
	0, 257, 699, 700, 0, 0, 196, 672, 673, 645,
	197, 198, 199, 200, 0, 0, 201, 202, 203, 664,
	204, 0, 205, 206, 207, 262, 701, 0, 0, 208,
	0, 0, 0, 0, 209, 210, 211, 212, 619, 0,
	650, 639, 640, 637, 638, 629, 0, 0, 0, 615,
	616, 613, 0, 0, 0, 617, 86, 87, 625, 88,
	0, 0, 0, 628, 666, 632, 0, 0, 0, 89,
	90, 91, 214, 681, 216, 682, 92, 683, 684, 0,
	93, 220, 221, 94, 635, 665, 685, 686, 224, 0,
	677, 0, 658, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 297, 102, 103, 0, 659, 661,
	0, 660, 662, 104, 105, 267, 106, 687, 107, 688,
	689, 0, 108, 0, 109, 0, 0, 0, 680, 111,
	0, 112, 0, 0, 0, 623, 113, 114, 667, 668,
	646, 0, 0, 115, 116, 690, 0, 117, 0, 118,
	0, 0, 298, 0, 119, 678, 0, 234, 0, 120,
	121, 122, 123, 674, 676, 300, 0, 127, 0, 124,
	0, 299, 125, 691, 126, 692, 693, 694, 0, 657,
	0, 301, 128, 302, 129, 130, 0, 132, 131, 0,
	679, 303, 133, 304, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 243, 139, 305, 140, 141, 143, 142,
	618, 0, 647, 675, 144, 695, 145, 146, 0, 147,
	0, 0, 148, 0, 0, 149, 246, 306, 150, 307,
	669, 151, 152, 153, 154, 0, 670, 155, 249, 156,
	0, 157, 158, 159, 696, 160, 161, 0, 162, 163,
	164, 165, 166, 168, 169, 167, 170, 171, 0, 172,
	308, 173, 174, 624, 175, 0, 176, 177, 178, 179,
	0, 252, 180, 181, 663, 182, 183, 309, 184, 697,
	254, 185, 0, 191, 186, 187, 188, 190, 698, 189,
	671, 0, 192, 0, 193, 194, 195, 0, 257, 699,
	700, 0, 0, 196, 672, 673, 645, 197, 198, 199,
	200, 0, 0, 201, 202, 203, 664, 204, 0, 205,
	206, 207, 262, 701, 0, 0, 208, 0, 0, 0,
	0, 209, 210, 211, 212, 619, 0, 0, 0, 0,
	650, 639, 640, 637, 638, 629, 615, 616, 0, 0,
	0, 0, 617, 965, 1229, 625, 86, 87, 0, 88,
	628, 0, 0, 0, 666, 632, 0, 0, 0, 89,
	90, 91, 214, 681, 216, 682, 92, 683, 684, 0,
	93, 220, 221, 94, 635, 665, 685, 686, 224, 0,
	677, 0, 658, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 297, 102, 103, 0, 659, 661,
	0, 660, 662, 104, 105, 267, 106, 687, 107, 688,
	689, 0, 108, 0, 109, 0, 0, 0, 680, 111,
	0, 112, 0, 0, 0, 623, 113, 114, 667, 668,
	646, 0, 0, 115, 116, 690, 0, 117, 0, 118,
	0, 0, 298, 0, 119, 678, 0, 234, 0, 120,
	121, 122, 123, 674, 676, 300, 0, 127, 0, 124,
	0, 299, 125, 691, 126, 692, 693, 694, 0, 657,
	0, 301, 128, 302, 129, 130, 0, 132, 131, 0,
	679, 303, 133, 304, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 243, 139, 305, 140, 141, 143, 142,
	618, 0, 647, 675, 144, 695, 145, 146, 0, 147,
	0, 0, 148, 0, 0, 149, 246, 306, 150, 307,
	669, 151, 152, 153, 154, 0, 670, 155, 249, 156,
	0, 157, 158, 159, 696, 160, 161, 0, 162, 163,
	164, 165, 166, 168, 169, 167, 170, 171, 0, 172,
	308, 173, 174, 624, 175, 0, 176, 177, 178, 179,
	0, 252, 180, 181, 663, 182, 183, 309, 184, 697,
	254, 185, 0, 191, 186, 187, 188, 190, 698, 189,
	671, 0, 192, 0, 193, 194, 195, 0, 257, 699,
	700, 0, 0, 196, 672, 673, 645, 197, 198, 199,
	200, 0, 0, 201, 202, 203, 664, 204, 0, 205,
	206, 207, 262, 701, 0, 0, 208, 0, 0, 0,
	0, 209, 210, 211, 212, 619, 0, 650, 639, 640,
	637, 638, 629, 0, 0, 0, 615, 616, 613, 0,
	0, 0, 617, 86, 87, 625, 88, 0, 0, 0,
	628, 666, 632, 0, 0, 0, 89, 90, 91, 214,
	681, 216, 682, 92, 683, 684, 0, 93, 220, 221,
	94, 635, 665, 685, 686, 224, 0, 677, 0, 658,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 297, 102, 103, 0, 659, 661, 0, 660, 662,
	104, 105, 267, 106, 687, 107, 688, 689, 0, 108,
	0, 109, 0, 0, 0, 680, 111, 0, 112, 0,
	0, 0, 623, 113, 114, 667, 668, 646, 0, 0,
	115, 116, 690, 0, 117, 0, 118, 0, 0, 298,
	0, 119, 678, 0, 234, 0, 120, 121, 122, 123,
	674, 676, 300, 0, 127, 0, 124, 0, 299, 125,
	691, 126, 692, 693, 694, 0, 657, 0, 301, 128,
	302, 129, 130, 0, 132, 131, 0, 679, 303, 133,
	304, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	243, 139, 305, 140, 141, 143, 142, 618, 0, 647,
	675, 144, 695, 145, 146, 0, 147, 0, 0, 148,
	0, 0, 149, 246, 306, 150, 307, 669, 151, 152,
	153, 154, 0, 670, 155, 249, 156, 0, 157, 158,
	159, 696, 160, 161, 0, 162, 163, 164, 165, 166,
	168, 169, 167, 170, 171, 0, 172, 308, 173, 174,
	624, 175, 0, 176, 177, 178, 179, 0, 252, 180,
	181, 663, 182, 183, 309, 184, 697, 254, 185, 0,
	191, 186, 187, 188, 190, 698, 189, 671, 0, 192,
	0, 193, 194, 195, 0, 257, 699, 700, 0, 0,
	196, 672, 673, 645, 197, 198, 199, 200, 0, 0,
	201, 202, 203, 664, 204, 0, 205, 206, 207, 262,
	701, 0, 0, 208, 0, 0, 0, 0, 209, 210,
	211, 212, 619, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 615, 616, 0, 0, 0, 0, 617,
	0, 0, 625, 1689, 0, 0, 0, 628, 650, 639,
	640, 637, 638, 629, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 666, 632, 0, 0, 0, 89, 90, 91,
	214, 681, 216, 682, 92, 683, 684, 0, 93, 220,
	221, 94, 635, 665, 685, 686, 224, 0, 677, 0,
	658, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 297, 102, 103, 0, 659, 661, 0, 660,
	662, 104, 105, 267, 106, 687, 107, 688, 689, 0,
	108, 0, 109, 0, 0, 0, 680, 111, 0, 112,
	0, 0, 0, 623, 113, 114, 667, 668, 646, 0,
	0, 115, 116, 690, 0, 117, 0, 118, 0, 0,
	298, 0, 119, 678, 0, 234, 0, 120, 121, 122,
	123, 674, 676, 300, 0, 127, 0, 124, 0, 299,
	125, 691, 126, 692, 693, 694, 0, 657, 0, 301,
	128, 302, 129, 130, 0, 132, 131, 0, 679, 303,
	133, 304, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 243, 139, 305, 140, 141, 143, 142, 618, 0,
	647, 675, 144, 695, 145, 146, 0, 147, 0, 0,
	148, 0, 0, 149, 246, 306, 150, 307, 669, 151,
	152, 153, 154, 0, 670, 155, 249, 156, 0, 157,
	158, 159, 696, 160, 161, 0, 162, 163, 164, 165,
	166, 168, 169, 167, 170, 171, 0, 172, 308, 173,
	174, 624, 175, 0, 176, 177, 178, 179, 0, 252,
	180, 181, 663, 182, 183, 309, 184, 697, 254, 185,
	0, 191, 186, 187, 188, 190, 698, 189, 671, 0,
	192, 0, 193, 194, 195, 0, 257, 699, 700, 0,
	0, 196, 672, 673, 645, 197, 198, 199, 200, 0,
	0, 201, 202, 203, 664, 204, 0, 205, 206, 207,
	262, 701, 1646, 0, 208, 0, 0, 0, 0, 209,
	210, 211, 212, 619, 0, 650, 639, 640, 637, 638,
	629, 0, 0, 0, 615, 616, 0, 0, 0, 0,
	617, 86, 87, 625, 88, 0, 0, 0, 628, 666,
	632, 0, 0, 0, 89, 90, 91, 214, 681, 216,
	682, 92, 683, 684, 0, 93, 220, 221, 94, 635,
	665, 685, 686, 224, 0, 677, 0, 658, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 297,
	102, 103, 0, 659, 661, 0, 660, 662, 104, 105,
	267, 106, 687, 107, 688, 689, 0, 108, 0, 109,
	0, 0, 0, 680, 111, 0, 112, 0, 0, 0,
	623, 113, 114, 667, 668, 646, 0, 0, 115, 116,
	690, 0, 117, 0, 118, 0, 0, 298, 0, 119,
	678, 0, 234, 0, 120, 121, 122, 123, 674, 676,
	300, 0, 127, 0, 124, 0, 299, 125, 691, 126,
	692, 693, 694, 0, 657, 0, 301, 128, 302, 129,
	130, 0, 132, 131, 0, 679, 303, 133, 304, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 243, 139,
	305, 140, 141, 143, 142, 618, 0, 647, 675, 144,
	695, 145, 146, 0, 147, 0, 0, 148, 0, 0,
	149, 246, 306, 150, 307, 669, 151, 152, 153, 154,
	0, 670, 155, 249, 156, 0, 157, 158, 159, 696,
	160, 161, 0, 162, 163, 164, 165, 166, 168, 169,
	167, 170, 171, 0, 172, 308, 173, 174, 624, 175,
	0, 176, 177, 178, 179, 0, 252, 180, 181, 663,
	182, 183, 309, 184, 697, 254, 185, 0, 191, 186,
	187, 188, 190, 698, 189, 671, 0, 192, 0, 193,
	194, 195, 0, 257, 699, 700, 0, 0, 196, 672,
	673, 645, 197, 198, 199, 200, 0, 0, 201, 202,
	203, 664, 204, 0, 205, 206, 207, 262, 701, 0,
	0, 208, 0, 0, 0, 0, 209, 210, 211, 212,
	619, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 615, 616, 0, 0, 0, 0, 617, 0, 0,
	625, 1636, 0, 0, 0, 628, 650, 639, 640, 637,
	638, 629, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	666, 632, 0, 0, 0, 89, 90, 91, 214, 681,
	216, 682, 92, 683, 684, 0, 93, 220, 221, 94,
	635, 665, 685, 686, 224, 0, 677, 0, 658, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	297, 102, 103, 0, 659, 661, 0, 660, 662, 104,
	105, 267, 106, 687, 107, 688, 689, 716, 108, 0,
	109, 0, 0, 0, 680, 111, 0, 112, 0, 0,
	0, 623, 113, 114, 667, 668, 646, 0, 0, 115,
	116, 690, 0, 117, 0, 118, 0, 0, 298, 0,
	119, 678, 0, 234, 0, 120, 121, 122, 123, 674,
	676, 300, 0, 127, 0, 124, 0, 299, 125, 691,
	126, 692, 693, 694, 0, 657, 0, 301, 128, 302,
	129, 130, 0, 132, 131, 0, 679, 303, 133, 304,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 243,
	139, 305, 140, 141, 143, 142, 618, 0, 647, 675,
	144, 695, 145, 146, 0, 147, 0, 0, 148, 0,
	0, 149, 246, 306, 150, 307, 669, 151, 152, 153,
	154, 0, 670, 155, 249, 156, 0, 157, 158, 159,
	696, 160, 161, 0, 162, 163, 164, 165, 166, 168,
	169, 167, 170, 171, 0, 172, 308, 173, 174, 624,
	175, 0, 176, 177, 178, 179, 0, 252, 180, 181,
	663, 182, 183, 309, 184, 697, 254, 185, 0, 191,
	186, 187, 188, 190, 698, 189, 671, 0, 192, 0,
	193, 194, 195, 0, 257, 699, 700, 0, 0, 196,
	672, 673, 645, 197, 198, 199, 200, 0, 0, 201,
	202, 203, 664, 204, 0, 205, 206, 207, 262, 701,
	0, 0, 208, 0, 0, 0, 0, 209, 210, 211,
	212, 619, 0, 650, 639, 640, 637, 638, 629, 0,
	0, 0, 615, 616, 0, 0, 0, 0, 617, 86,
	87, 625, 88, 0, 0, 0, 628, 666, 632, 0,
	0, 0, 89, 90, 91, 214, 681, 216, 682, 92,
	683, 684, 0, 93, 220, 221, 94, 635, 665, 685,
	686, 224, 0, 677, 0, 658, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 297, 102, 103,
	0, 659, 661, 0, 660, 662, 104, 105, 267, 106,
	687, 107, 688, 689, 0, 108, 0, 109, 0, 0,
	0, 680, 111, 0, 112, 0, 0, 0, 623, 113,
	114, 667, 668, 646, 0, 0, 115, 116, 690, 0,
	117, 0, 118, 0, 1281, 298, 0, 119, 678, 0,
	234, 0, 120, 121, 122, 123, 674, 676, 300, 0,
	127, 0, 124, 0, 299, 125, 691, 126, 692, 693,
	694, 0, 657, 0, 301, 128, 302, 129, 130, 0,
	132, 131, 0, 679, 303, 133, 304, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 243, 139, 305, 140,
	141, 143, 142, 618, 0, 647, 675, 144, 695, 145,
	146, 0, 147, 0, 0, 148, 0, 0, 149, 246,
	306, 150, 307, 669, 151, 152, 153, 154, 0, 670,
	155, 249, 156, 0, 157, 158, 159, 696, 160, 161,
	0, 162, 163, 164, 165, 166, 168, 169, 167, 170,
	171, 0, 172, 308, 173, 174, 624, 175, 0, 176,
	177, 178, 179, 0, 252, 180, 181, 663, 182, 183,
	309, 184, 697, 254, 185, 0, 191, 186, 187, 188,
	190, 698, 189, 671, 0, 192, 0, 193, 194, 195,
	0, 257, 699, 700, 0, 0, 196, 672, 673, 645,
	197, 198, 199, 200, 0, 0, 201, 202, 203, 664,
	204, 0, 205, 206, 207, 262, 701, 0, 0, 208,
	0, 0, 0, 0, 209, 210, 211, 212, 619, 0,
	650, 639, 640, 637, 638, 629, 0, 0, 0, 615,
	616, 0, 0, 0, 0, 617, 86, 87, 625, 88,
	0, 0, 0, 628, 666, 632, 0, 0, 0, 89,
	90, 91, 214, 681, 216, 682, 92, 683, 684, 0,
	93, 220, 221, 94, 635, 665, 685, 686, 224, 0,
	677, 0, 658, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 297, 102, 103, 0, 659, 661,
	0, 660, 662, 104, 105, 267, 106, 687, 107, 688,
	689, 0, 108, 0, 109, 0, 0, 0, 680, 111,
	0, 112, 0, 0, 0, 623, 113, 114, 667, 668,
	646, 0, 0, 115, 116, 690, 0, 117, 0, 118,
	0, 0, 298, 0, 119, 678, 0, 234, 0, 120,
	121, 122, 123, 674, 676, 300, 0, 127, 0, 124,
	0, 299, 125, 691, 126, 692, 693, 694, 0, 657,
	0, 301, 128, 302, 129, 130, 0, 132, 131, 0,
	679, 303, 133, 304, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 243, 139, 305, 140, 141, 143, 142,
	618, 0, 647, 675, 144, 695, 145, 146, 0, 147,
	0, 0, 148, 0, 0, 149, 246, 306, 150, 307,
	669, 151, 152, 153, 154, 0, 670, 155, 249, 156,
	0, 157, 158, 159, 696, 160, 161, 0, 162, 163,
	164, 165, 166, 168, 169, 167, 170, 171, 0, 172,
	308, 173, 174, 624, 175, 0, 176, 177, 178, 179,
	0, 252, 180, 181, 663, 182, 183, 309, 184, 697,
	254, 185, 0, 191, 186, 187, 188, 190, 698, 189,
	671, 0, 192, 0, 193, 194, 195, 0, 257, 699,
	700, 0, 0, 196, 672, 673, 645, 197, 198, 199,
	200, 0, 0, 201, 202, 203, 664, 204, 0, 205,
	206, 207, 262, 701, 0, 0, 208, 0, 0, 0,
	0, 209, 210, 211, 212, 619, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 615, 616, 0, 0,
	0, 0, 617, 0, 0, 625, 1224, 0, 0, 0,
	628, 650, 639, 640, 637, 638, 629, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 893,
	88, 0, 0, 0, 0, 666, 632, 0, 0, 0,
	89, 90, 91, 214, 681, 216, 682, 92, 683, 684,
	0, 93, 220, 221, 94, 635, 665, 685, 686, 224,
	0, 677, 0, 658, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 297, 102, 103, 0, 659,
	661, 0, 660, 662, 104, 105, 267, 106, 687, 107,
	688, 689, 0, 108, 0, 109, 0, 0, 0, 680,
	111, 0, 112, 0, 0, 0, 623, 113, 114, 667,
	668, 646, 0, 0, 115, 116, 690, 0, 117, 0,
	118, 0, 0, 298, 0, 119, 678, 0, 234, 0,
	120, 121, 122, 123, 674, 676, 300, 0, 127, 0,
	124, 0, 299, 125, 691, 126, 692, 693, 694, 0,
	657, 0, 301, 128, 302, 129, 130, 0, 132, 131,
	0, 679, 303, 133, 304, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 243, 139, 305, 140, 141, 143,
	142, 618, 0, 647, 675, 144, 695, 145, 146, 0,
	147, 0, 0, 148, 0, 0, 149, 246, 306, 150,
	307, 669, 151, 152, 153, 154, 0, 670, 155, 249,
	156, 0, 157, 158, 159, 696, 160, 161, 0, 162,
	163, 164, 165, 166, 168, 169, 167, 170, 171, 0,
	172, 308, 173, 174, 624, 175, 0, 176, 177, 178,
	179, 0, 252, 180, 181, 663, 182, 183, 309, 184,
	697, 254, 185, 0, 191, 186, 187, 188, 190, 698,
	189, 671, 0, 192, 0, 193, 194, 195, 0, 257,
	699, 700, 0, 0, 196, 672, 673, 645, 197, 198,
	199, 200, 0, 0, 201, 202, 203, 664, 204, 0,
	205, 206, 207, 262, 701, 0, 0, 208, 0, 0,
	0, 0, 209, 210, 211, 212, 619, 0, 650, 639,
	640, 637, 638, 629, 0, 0, 0, 615, 616, 0,
	0, 0, 0, 617, 86, 87, 625, 88, 0, 0,
	0, 628, 666, 632, 0, 0, 0, 89, 90, 91,
	214, 681, 216, 682, 92, 683, 684, 0, 93, 220,
	221, 94, 635, 665, 685, 686, 224, 0, 677, 0,
	658, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 297, 102, 2042, 0, 659, 661, 0, 660,
	662, 104, 105, 267, 106, 687, 107, 688, 689, 0,
	108, 0, 109, 0, 0, 0, 680, 111, 0, 112,
	0, 0, 0, 623, 113, 114, 667, 668, 646, 0,
	0, 115, 116, 690, 0, 117, 0, 118, 0, 0,
	298, 0, 119, 678, 0, 234, 0, 120, 121, 122,
	123, 674, 676, 300, 0, 127, 0, 124, 0, 299,
	125, 691, 126, 692, 693, 694, 0, 657, 0, 301,
	128, 302, 129, 130, 0, 132, 131, 0, 679, 303,
	133, 304, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 243, 139, 305, 140, 141, 143, 142, 618, 0,
	647, 675, 144, 695, 145, 146, 0, 147, 0, 0,
	148, 0, 0, 149, 246, 306, 150, 307, 669, 151,
	152, 153, 154, 0, 670, 155, 249, 156, 0, 157,
	158, 159, 696, 160, 161, 0, 162, 163, 164, 165,
	166, 168, 169, 167, 170, 171, 0, 172, 308, 173,
	174, 624, 175, 0, 176, 177, 178, 179, 0, 252,
	180, 181, 663, 182, 183, 309, 184, 697, 254, 185,
	0, 191, 186, 187, 188, 190, 698, 189, 671, 0,
	192, 0, 193, 194, 195, 0, 257, 699, 700, 0,
	0, 196, 672, 673, 645, 197, 198, 2041, 200, 0,
	0, 201, 202, 203, 664, 204, 0, 205, 206, 207,
	262, 701, 0, 0, 208, 0, 0, 0, 0, 209,
	210, 211, 212, 619, 0, 650, 639, 640, 637, 638,
	629, 0, 0, 0, 615, 616, 0, 0, 0, 0,
	617, 86, 87, 625, 88, 0, 0, 0, 628, 666,
	632, 0, 0, 0, 89, 90, 91, 2040, 681, 216,
	682, 92, 683, 684, 0, 93, 220, 221, 94, 635,
	665, 685, 686, 224, 0, 677, 0, 658, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 297,
	102, 2042, 0, 659, 661, 0, 660, 662, 104, 105,
	267, 106, 687, 107, 688, 689, 0, 108, 0, 109,
	0, 0, 0, 680, 111, 0, 112, 0, 0, 0,
	623, 113, 114, 667, 668, 646, 0, 0, 115, 116,
	690, 0, 117, 0, 118, 0, 0, 298, 0, 119,
	678, 0, 234, 0, 120, 121, 122, 123, 674, 676,
	300, 0, 127, 0, 124, 0, 299, 125, 691, 126,
	692, 693, 694, 0, 657, 0, 301, 128, 302, 129,
	130, 0, 132, 131, 0, 679, 303, 133, 304, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 243, 139,
	305, 140, 141, 143, 142, 618, 0, 647, 675, 144,
	695, 145, 146, 0, 147, 0, 0, 148, 0, 0,
	149, 246, 306, 150, 307, 669, 151, 152, 153, 154,
	0, 670, 155, 249, 156, 0, 157, 158, 159, 696,
	160, 161, 0, 162, 163, 164, 165, 166, 168, 169,
	167, 170, 171, 0, 172, 308, 173, 174, 624, 175,
	0, 176, 177, 178, 179, 0, 252, 180, 181, 663,
	182, 183, 309, 184, 697, 254, 185, 0, 191, 186,
	187, 188, 190, 698, 189, 671, 0, 192, 0, 193,
	194, 195, 0, 257, 699, 700, 0, 0, 196, 672,
	673, 645, 197, 198, 2041, 200, 0, 0, 201, 202,
	203, 664, 204, 0, 205, 206, 207, 262, 701, 0,
	0, 208, 0, 0, 0, 0, 209, 210, 211, 212,
	619, 0, 650, 639, 640, 637, 638, 629, 0, 0,
	0, 615, 616, 0, 0, 0, 0, 617, 86, 87,
	625, 88, 0, 0, 0, 628, 666, 632, 0, 0,
	0, 89, 90, 91, 214, 681, 216, 682, 92, 683,
	684, 0, 93, 220, 221, 94, 635, 665, 685, 686,
	224, 0, 677, 0, 658, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 297, 102, 103, 0,
	659, 661, 0, 660, 662, 104, 105, 267, 106, 687,
	107, 688, 689, 0, 108, 0, 109, 0, 0, 0,
	680, 111, 0, 112, 0, 0, 0, 623, 113, 114,
	667, 668, 646, 0, 0, 115, 116, 690, 0, 117,
	0, 118, 0, 0, 298, 0, 119, 678, 0, 234,
	0, 120, 121, 122, 123, 674, 676, 300, 0, 127,
	0, 124, 0, 299, 125, 691, 126, 692, 693, 694,
	0, 657, 0, 301, 128, 302, 129, 130, 0, 132,
	131, 0, 679, 303, 133, 304, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 243, 139, 305, 140, 141,
	143, 142, 618, 0, 647, 675, 144, 695, 145, 146,
	0, 147, 0, 0, 148, 0, 0, 149, 246, 306,
	150, 307, 669, 151, 152, 153, 154, 0, 670, 155,
	249, 156, 0, 157, 158, 159, 696, 160, 161, 0,
	162, 163, 164, 165, 166, 168, 169, 167, 170, 171,
	0, 172, 308, 173, 174, 624, 175, 0, 176, 177,
	178, 179, 0, 252, 180, 181, 663, 182, 183, 309,
	184, 697, 254, 185, 0, 191, 186, 187, 188, 190,
	698, 189, 671, 0, 192, 0, 193, 194, 195, 0,
	257, 699, 700, 0, 0, 196, 672, 673, 645, 197,
	198, 199, 200, 0, 0, 201, 202, 203, 664, 204,
	0, 205, 206, 207, 262, 701, 0, 0, 208, 0,
	0, 0, 0, 209, 210, 211, 212, 619, 0, 1253,
	639, 640, 637, 638, 629, 0, 0, 0, 615, 616,
	0, 0, 0, 0, 617, 86, 87, 625, 88, 0,
	0, 0, 628, 666, 632, 0, 0, 0, 89, 90,
	91, 214, 681, 216, 682, 92, 683, 684, 0, 93,
	220, 221, 94, 635, 665, 685, 686, 224, 0, 677,
	0, 658, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 297, 102, 103, 0, 659, 661, 0,
	660, 662, 104, 105, 267, 106, 687, 1256, 688, 689,
	0, 108, 0, 109, 0, 0, 0, 680, 111, 0,
	112, 0, 0, 0, 623, 113, 114, 667, 668, 646,
	0, 0, 115, 116, 690, 0, 117, 0, 118, 0,
	0, 298, 0, 119, 678, 0, 234, 0, 120, 121,
	1257, 123, 674, 676, 300, 0, 127, 0, 124, 0,
	299, 125, 691, 126, 692, 693, 694, 0, 657, 0,
	301, 128, 302, 129, 130, 0, 132, 131, 0, 679,
	303, 133, 304, 0, 134, 0, 0, 135, 0, 136,
	1258, 1255, 243, 139, 305, 140, 141, 143, 142, 618,
	0, 647, 675, 144, 695, 145, 146, 0, 147, 0,
	0, 148, 0, 0, 149, 246, 306, 150, 307, 669,
	151, 152, 153, 154, 0, 670, 155, 249, 156, 0,
	157, 158, 159, 696, 160, 161, 0, 162, 163, 164,
	165, 166, 168, 169, 167, 170, 171, 0, 172, 308,
	173, 174, 624, 175, 0, 176, 177, 178, 1259, 0,
	252, 180, 181, 663, 182, 183, 309, 184, 697, 254,
	185, 0, 191, 186, 187, 188, 190, 698, 189, 671,
	0, 192, 0, 193, 194, 195, 0, 257, 699, 700,
	0, 0, 196, 672, 673, 645, 197, 198, 199, 200,
	0, 0, 201, 202, 203, 664, 204, 0, 205, 206,
	207, 262, 701, 0, 0, 208, 0, 0, 0, 0,
	209, 210, 1254, 212, 619, 0, 650, 639, 640, 637,
	638, 629, 0, 0, 0, 615, 616, 0, 0, 0,
	0, 617, 86, 87, 625, 88, 0, 0, 0, 628,
	666, 632, 0, 0, 0, 89, 90, 91, 214, 681,
	216, 682, 92, 683, 684, 0, 93, 220, 221, 94,
	635, 665, 685, 686, 224, 0, 677, 0, 658, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	297, 102, 103, 0, 659, 661, 0, 660, 662, 104,
	105, 267, 106, 687, 107, 688, 689, 0, 108, 0,
	109, 0, 0, 0, 680, 111, 0, 112, 0, 0,
	0, 623, 113, 114, 667, 668, 646, 0, 0, 115,
	116, 690, 0, 117, 0, 118, 0, 0, 298, 0,
	119, 678, 0, 234, 0, 120, 121, 122, 123, 674,
	676, 300, 0, 127, 0, 124, 0, 299, 125, 691,
	126, 692, 693, 694, 0, 657, 0, 301, 128, 302,
	129, 130, 0, 132, 131, 0, 679, 303, 133, 304,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 243,
	139, 305, 140, 141, 143, 142, 0, 0, 647, 675,
	144, 695, 145, 146, 0, 147, 0, 0, 148, 0,
	0, 149, 246, 306, 150, 307, 669, 151, 152, 153,
	154, 0, 670, 155, 249, 156, 0, 157, 158, 159,
	696, 160, 161, 0, 162, 163, 164, 165, 166, 168,
	169, 167, 170, 171, 0, 172, 308, 173, 174, 1271,
	175, 0, 176, 177, 178, 179, 0, 252, 180, 181,
	663, 182, 183, 309, 184, 697, 254, 185, 0, 191,
	186, 187, 188, 190, 698, 189, 671, 0, 192, 0,
	193, 194, 195, 0, 257, 699, 700, 0, 0, 196,
	672, 673, 645, 197, 198, 199, 200, 0, 0, 201,
	202, 203, 664, 204, 0, 205, 206, 207, 262, 701,
	0, 0, 208, 0, 0, 0, 0, 209, 210, 211,
	212, 0, 0, 650, 639, 640, 637, 638, 629, 0,
	0, 0, 1267, 1268, 0, 0, 0, 0, 1269, 86,
	87, 1270, 88, 0, 0, 0, 628, 666, 632, 0,
	0, 0, 89, 90, 91, 0, 681, 216, 682, 92,
	683, 684, 0, 93, 220, 221, 94, 635, 665, 685,
	686, 224, 0, 677, 0, 658, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 297, 102, 2042,
	0, 659, 661, 0, 660, 662, 104, 105, 267, 106,
	687, 107, 688, 689, 0, 108, 0, 109, 0, 0,
	0, 680, 111, 0, 112, 0, 0, 0, 623, 113,
	114, 667, 668, 646, 0, 0, 115, 116, 690, 0,
	117, 0, 118, 0, 0, 298, 0, 119, 678, 0,
	234, 0, 120, 121, 122, 123, 674, 676, 0, 0,
	127, 0, 124, 0, 299, 125, 691, 126, 692, 693,
	694, 0, 657, 0, 0, 128, 302, 129, 130, 0,
	132, 131, 0, 679, 303, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 243, 139, 305, 140,
	141, 143, 142, 618, 0, 647, 675, 144, 695, 145,
	146, 0, 147, 0, 0, 148, 0, 0, 149, 246,
	306, 150, 307, 669, 151, 152, 153, 154, 0, 670,
	155, 249, 156, 0, 157, 158, 159, 696, 160, 161,
	0, 162, 163, 164, 165, 166, 168, 169, 167, 170,
	171, 0, 172, 308, 173, 174, 624, 175, 0, 176,
	177, 178, 179, 0, 252, 180, 181, 663, 182, 183,
	0, 184, 697, 254, 185, 0, 191, 186, 187, 188,
	190, 698, 189, 671, 0, 192, 0, 193, 194, 195,
	0, 257, 699, 700, 0, 0, 196, 672, 673, 645,
	197, 198, 2041, 200, 0, 0, 201, 202, 203, 664,
	204, 0, 205, 206, 207, 262, 701, 0, 0, 208,
	0, 0, 0, 0, 209, 210, 211, 212, 0, 0,
	650, 639, 640, 637, 638, 629, 0, 0, 0, 615,
	616, 0, 0, 0, 0, 617, 86, 87, 625, 88,
	0, 0, 0, 628, 666, 632, 0, 0, 0, 89,
	90, 91, 214, 681, 216, 682, 92, 683, 684, 0,
	93, 220, 221, 94, 0, 665, 685, 686, 224, 0,
	677, 0, 658, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 297, 102, 103, 0, 659, 661,
	0, 660, 662, 104, 105, 267, 106, 687, 107, 688,
	689, 0, 108, 0, 109, 0, 0, 0, 680, 111,
	0, 112, 0, 0, 0, 229, 113, 114, 667, 668,
	646, 0, 0, 115, 116, 690, 0, 117, 0, 118,
	0, 0, 298, 0, 119, 678, 0, 234, 0, 120,
	121, 122, 123, 674, 676, 300, 0, 127, 0, 124,
	0, 299, 125, 691, 126, 692, 693, 694, 0, 657,
	0, 301, 128, 302, 129, 130, 0, 132, 131, 0,
	679, 303, 133, 304, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 243, 139, 305, 140, 141, 143, 142,
	0, 0, 647, 675, 144, 695, 145, 146, 0, 147,
	0, 0, 148, 0, 0, 149, 246, 306, 150, 307,
	669, 151, 152, 153, 154, 0, 670, 155, 249, 156,
	0, 157, 158, 159, 696, 160, 161, 0, 162, 163,
	164, 165, 166, 168, 169, 167, 170, 171, 0, 172,
	308, 173, 174, 1271, 175, 0, 176, 177, 178, 179,
	0, 252, 180, 181, 663, 182, 183, 309, 184, 697,
	254, 185, 0, 191, 186, 187, 188, 190, 698, 189,
	671, 0, 192, 0, 193, 194, 195, 0, 257, 699,
	700, 0, 0, 196, 672, 673, 645, 197, 198, 199,
	200, 650, 0, 201, 202, 203, 664, 204, 0, 205,
	206, 207, 262, 701, 0, 0, 208, 86, 87, 0,
	88, 209, 210, 211, 212, 666, 0, 0, 0, 0,
	89, 90, 91, 214, 215, 216, 217, 92, 218, 219,
	0, 93, 220, 221, 94, 1270, 665, 222, 223, 224,
	628, 677, 0, 658, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 297, 102, 103, 0, 659,
	661, 0, 660, 662, 104, 105, 267, 106, 226, 107,
	227, 228, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 229, 113, 114, 667,
	668, 0, 0, 0, 115, 116, 232, 0, 117, 0,
	118, 0, 0, 298, 0, 119, 678, 0, 234, 0,
	120, 121, 122, 123, 674, 676, 300, 0, 127, 0,
	124, 0, 299, 125, 237, 126, 238, 239, 240, 0,
	241, 0, 301, 128, 302, 129, 130, 0, 132, 131,
	0, 679, 303, 133, 304, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 243, 139, 305, 140, 141, 143,
	142, 0, 0, 0, 675, 144, 245, 145, 146, 0,
	147, 0, 0, 148, 0, 0, 149, 246, 306, 150,
	307, 669, 151, 152, 153, 154, 0, 670, 155, 249,
	156, 0, 157, 158, 159, 250, 160, 161, 0, 162,
	163, 164, 165, 166, 168, 169, 167, 170, 171, 0,
	172, 308, 173, 174, 251, 175, 0, 176, 177, 178,
	179, 0, 252, 180, 181, 663, 182, 183, 309, 184,
	253, 254, 185, 0, 191, 186, 187, 188, 190, 255,
	189, 671, 0, 192, 0, 193, 194, 195, 0, 257,
	258, 259, 0, 0, 196, 672, 673, 0, 197, 198,
	199, 200, 526, 0, 201, 202, 203, 664, 204, 0,
	205, 206, 207, 262, 263, 0, 0, 208, 86, 87,
	0, 88, 209, 210, 211, 212, 213, 0, 0, 0,
	0, 89, 90, 91, 214, 215, 216, 217, 92, 218,
	219, 0, 93, 220, 221, 94, 1759, 0, 222, 223,
	224, 0, 225, 0, 296, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 297, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 267, 106, 226,
	107, 227, 228, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 229, 113, 114,
	230, 231, 0, 0, 0, 115, 116, 232, 0, 117,
	0, 118, 0, 0, 298, 0, 119, 233, 0, 234,
	0, 120, 121, 122, 123, 235, 236, 300, 0, 127,
	0, 124, 0, 299, 125, 237, 126, 238, 239, 240,
	0, 241, 0, 301, 128, 302, 129, 130, 0, 132,
	131, 0, 242, 303, 133, 304, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 243, 139, 305, 140, 141,
	143, 142, 0, 0, 0, 244, 144, 245, 145, 146,
	0, 147, 0, 0, 148, 0, 0, 149, 246, 306,
	150, 307, 247, 151, 152, 153, 154, 0, 248, 155,
	249, 156, 0, 157, 158, 159, 250, 160, 161, 0,
	162, 163, 164, 165, 166, 168, 169, 167, 170, 171,
	0, 172, 308, 173, 174, 251, 175, 0, 176, 177,
	178, 179, 67, 252, 180, 181, 0, 182, 183, 309,
	184, 253, 254, 185, 0, 191, 186, 187, 188, 190,
	255, 189, 256, 0, 192, 69, 193, 194, 195, 0,
	257, 258, 259, 0, 0, 196, 260, 261, 0, 197,
	198, 199, 200, 0, 0, 201, 202, 203, 0, 204,
	0, 205, 206, 207, 530, 263, 0, 0, 208, 0,
	0, 0, 65, 209, 210, 211, 212, 0, 66, 526,
	735, 0, 843, 840, 835, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 64, 88, 0,
	0, 0, 0, 213, 0, 0, 0, 0, 89, 90,
	91, 214, 215, 216, 217, 92, 218, 219, 0, 93,
	220, 221, 94, 0, 0, 222, 223, 224, 0, 225,
	0, 296, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 297, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 267, 106, 226, 107, 227, 228,
	846, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 229, 113, 114, 230, 231, 837,
	0, 0, 115, 116, 232, 0, 117, 0, 118, 0,
	0, 298, 0, 119, 233, 0, 234, 0, 120, 121,
	122, 123, 235, 236, 300, 0, 127, 0, 124, 0,
	299, 125, 237, 126, 238, 239, 240, 0, 241, 0,
	301, 128, 302, 129, 130, 0, 132, 131, 0, 242,
	303, 133, 304, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 243, 139, 305, 140, 141, 143, 142, 0,
	0, 0, 244, 144, 245, 145, 146, 0, 147, 838,
	0, 148, 0, 0, 149, 246, 306, 150, 307, 247,
	151, 152, 153, 154, 0, 248, 155, 249, 156, 0,
	157, 158, 159, 250, 160, 161, 0, 162, 163, 164,
	165, 166, 168, 169, 167, 170, 171, 0, 172, 308,
	173, 174, 251, 175, 0, 176, 177, 178, 179, 0,
	252, 180, 181, 0, 182, 183, 309, 184, 253, 254,
	185, 0, 191, 186, 187, 188, 190, 255, 189, 256,
	0, 192, 0, 193, 194, 195, 0, 257, 258, 259,
	0, 0, 196, 260, 261, 836, 197, 198, 199, 200,
	0, 0, 201, 202, 203, 0, 204, 0, 205, 206,
	207, 262, 263, 526, 735, 208, 843, 840, 835, 0,
	209, 210, 211, 212, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 844, 841, 213, 0, 0,
	0, 0, 89, 90, 91, 214, 215, 216, 217, 92,
	218, 219, 0, 93, 220, 221, 94, 0, 0, 222,
	223, 224, 0, 225, 0, 296, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 297, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 267, 106,
	226, 107, 227, 228, 831, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 229, 113,
	114, 230, 231, 837, 0, 0, 115, 116, 232, 0,
	117, 0, 118, 0, 0, 298, 0, 119, 233, 0,
	234, 0, 120, 121, 122, 123, 235, 236, 300, 0,
	127, 0, 124, 0, 299, 125, 237, 126, 238, 239,
	240, 0, 241, 0, 301, 128, 302, 129, 130, 0,
	132, 131, 0, 242, 303, 133, 304, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 243, 139, 305, 140,
	141, 143, 142, 0, 0, 0, 244, 144, 245, 145,
	146, 0, 147, 838, 0, 148, 0, 0, 149, 246,
	306, 150, 307, 247, 151, 152, 153, 154, 0, 248,
	155, 249, 156, 0, 157, 158, 159, 250, 160, 161,
	0, 162, 163, 164, 165, 166, 168, 169, 167, 170,
	171, 0, 172, 308, 173, 174, 251, 175, 0, 176,
	177, 178, 179, 0, 252, 180, 181, 0, 182, 183,
	309, 184, 253, 254, 185, 0, 191, 186, 187, 188,
	190, 255, 189, 256, 0, 192, 0, 193, 194, 195,
	0, 257, 258, 259, 0, 0, 196, 260, 261, 836,
	197, 198, 199, 200, 0, 0, 201, 202, 203, 0,
	204, 0, 205, 206, 207, 262, 263, 526, 735, 208,
	843, 840, 835, 0, 209, 210, 211, 212, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 844,
	841, 213, 0, 0, 0, 0, 89, 90, 91, 214,
	215, 216, 217, 92, 218, 219, 0, 93, 220, 221,
	94, 0, 0, 222, 223, 224, 0, 225, 0, 296,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 297, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 267, 106, 226, 107, 227, 228, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 229, 113, 114, 230, 231, 837, 0, 0,
	115, 116, 232, 0, 117, 0, 118, 0, 0, 298,
	0, 119, 233, 0, 234, 0, 120, 121, 122, 123,
	235, 236, 300, 0, 127, 0, 124, 0, 299, 125,
	237, 126, 238, 239, 240, 0, 241, 0, 301, 128,
	302, 129, 130, 0, 132, 131, 0, 242, 303, 133,
	304, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	243, 139, 305, 140, 141, 143, 142, 0, 0, 0,
	244, 144, 245, 145, 146, 0, 147, 838, 0, 148,
	0, 0, 149, 246, 306, 150, 307, 247, 151, 152,
	153, 154, 0, 248, 155, 249, 156, 0, 157, 158,
	159, 250, 160, 161, 0, 162, 163, 164, 165, 166,
	168, 169, 167, 170, 171, 0, 172, 308, 173, 174,
	251, 175, 0, 176, 177, 178, 179, 0, 252, 180,
	181, 0, 182, 183, 309, 184, 253, 254, 185, 0,
	191, 186, 187, 188, 190, 255, 189, 256, 0, 192,
	0, 193, 194, 195, 0, 257, 258, 259, 0, 0,
	196, 260, 261, 836, 197, 198, 199, 200, 0, 0,
	201, 202, 203, 0, 204, 0, 205, 206, 207, 262,
	263, 83, 0, 208, 0, 0, 0, 0, 209, 210,
	211, 212, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 844, 841, 213, 0, 0, 0, 0,
	89, 90, 91, 214, 215, 216, 217, 92, 218, 219,
	0, 93, 220, 221, 94, 0, 0, 222, 223, 224,
	0, 225, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 226, 107,
	227, 228, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 229, 113, 114, 230,
	231, 0, 0, 0, 115, 116, 232, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 233, 0, 234, 0,
	120, 121, 122, 123, 235, 236, 0, 0, 127, 0,
	124, 0, 0, 125, 237, 126, 238, 239, 240, 0,
	241, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 242, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 243, 139, 0, 140, 141, 143,
	142, 0, 0, 0, 244, 144, 245, 145, 146, 0,
	147, 0, 480, 148, 0, 0, 149, 246, 0, 150,
	0, 247, 151, 152, 153, 154, 0, 248, 155, 249,
	156, 0, 157, 158, 159, 250, 160, 161, 0, 162,
	163, 164, 165, 166, 168, 169, 167, 170, 171, 0,
	172, 0, 173, 174, 251, 175, 0, 176, 177, 178,
	179, 67, 252, 180, 181, 0, 182, 183, 0, 184,
	253, 254, 185, 0, 191, 186, 187, 188, 190, 255,
	189, 256, 0, 192, 69, 193, 194, 195, 0, 257,
	258, 259, 0, 0, 196, 260, 261, 0, 197, 198,
	199, 200, 0, 0, 201, 202, 203, 0, 204, 0,
	205, 206, 207, 530, 263, 0, 0, 208, 83, 0,
	0, 65, 209, 210, 211, 212, 0, 66, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 213, 0, 1149, 0, 1154, 89, 90, 91,
	214, 215, 216, 217, 92, 218, 219, 0, 93, 220,
	221, 94, 0, 0, 222, 223, 224, 0, 225, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 267, 106, 226, 107, 227, 228, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 229, 113, 114, 230, 231, 0, 0,
	0, 115, 116, 232, 0, 117, 0, 118, 0, 0,
	0, 0, 119, 233, 0, 234, 0, 120, 121, 122,
	123, 235, 236, 0, 0, 127, 0, 124, 0, 0,
	125, 237, 126, 238, 239, 240, 0, 241, 0, 0,
	128, 0, 129, 130, 0, 132, 131, 0, 242, 0,
	133, 0, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 243, 139, 0, 140, 141, 143, 142, 0, 0,
	0, 244, 144, 245, 145, 146, 0, 147, 0, 0,
	148, 0, 0, 149, 246, 0, 150, 0, 247, 151,
	152, 153, 154, 0, 248, 155, 249, 156, 0, 157,
	158, 159, 250, 160, 161, 0, 162, 163, 164, 165,
	166, 168, 169, 167, 170, 171, 0, 172, 0, 173,
	174, 251, 175, 0, 176, 177, 178, 179, 67, 252,
	180, 181, 0, 182, 183, 0, 184, 253, 254, 185,
	0, 191, 186, 187, 188, 190, 255, 189, 256, 0,
	192, 69, 193, 194, 195, 0, 257, 258, 259, 0,
	0, 196, 260, 261, 0, 197, 198, 199, 200, 0,
	0, 201, 202, 203, 0, 204, 0, 205, 206, 207,
	530, 263, 0, 0, 208, 83, 0, 0, 65, 209,
	210, 211, 212, 0, 66, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 213,
	0, 0, 0, 64, 89, 90, 91, 214, 215, 216,
	217, 92, 218, 219, 0, 93, 220, 221, 94, 0,
	0, 222, 223, 224, 0, 225, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	267, 106, 226, 107, 227, 228, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	229, 113, 114, 230, 231, 0, 0, 0, 115, 116,
	232, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	233, 0, 234, 0, 120, 121, 122, 123, 235, 236,
	0, 0, 127, 0, 124, 0, 0, 125, 237, 126,
	238, 239, 240, 0, 241, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 242, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 243, 139,
	0, 140, 141, 143, 142, 0, 0, 0, 244, 144,
	245, 145, 146, 0, 147, 0, 480, 148, 0, 0,
	149, 246, 0, 150, 0, 247, 151, 152, 153, 154,
	0, 248, 155, 249, 156, 0, 157, 158, 159, 250,
	160, 161, 0, 162, 163, 164, 165, 166, 168, 169,
	167, 170, 171, 0, 172, 0, 173, 174, 251, 175,
	0, 176, 177, 178, 179, 0, 252, 180, 181, 0,
	182, 183, 0, 184, 253, 254, 185, 0, 191, 186,
	187, 188, 190, 255, 189, 256, 0, 192, 0, 193,
	194, 195, 0, 257, 258, 259, 0, 0, 196, 260,
	261, 0, 197, 198, 199, 200, 0, 0, 201, 202,
	203, 0, 204, 0, 205, 206, 207, 262, 263, 0,
	0, 208, 83, 0, 0, 0, 209, 210, 211, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 213, 0, 1149, 0,
	1154, 89, 90, 91, 214, 215, 216, 217, 92, 218,
	219, 0, 93, 220, 221, 94, 0, 0, 222, 223,
	224, 0, 225, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 267, 106, 226,
	107, 227, 228, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 229, 113, 114,
	230, 231, 0, 0, 0, 115, 116, 232, 0, 117,
	0, 118, 0, 0, 0, 0, 119, 233, 0, 234,
	0, 120, 121, 122, 123, 235, 236, 0, 0, 127,
	0, 124, 0, 0, 125, 237, 126, 238, 239, 240,
	0, 241, 0, 0, 128, 0, 129, 130, 0, 132,
	131, 0, 242, 0, 133, 0, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 243, 139, 0, 140, 141,
	143, 142, 0, 0, 0, 244, 144, 245, 145, 146,
	0, 147, 0, 0, 148, 0, 0, 149, 246, 0,
	150, 0, 247, 151, 152, 153, 154, 0, 248, 155,
	249, 156, 0, 157, 158, 159, 250, 160, 161, 0,
	162, 163, 164, 165, 166, 168, 169, 167, 170, 171,
	0, 172, 0, 173, 174, 251, 175, 0, 176, 177,
	178, 179, 0, 252, 180, 181, 0, 182, 183, 0,
	184, 253, 254, 185, 0, 191, 186, 187, 188, 190,
	255, 189, 256, 0, 192, 0, 193, 194, 195, 0,
	257, 258, 259, 0, 0, 196, 260, 261, 0, 197,
	198, 199, 200, 83, 0, 201, 202, 203, 0, 204,
	0, 205, 206, 207, 262, 263, 0, 0, 208, 86,
	87, 0, 88, 209, 210, 211, 212, 213, 0, 0,
	0, 0, 89, 90, 91, 214, 215, 216, 217, 92,
	218, 219, 0, 93, 220, 221, 94, 0, 743, 222,
	223, 224, 0, 225, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 267, 106,
	226, 107, 227, 228, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 229, 113,
	114, 230, 231, 0, 0, 0, 115, 116, 232, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 233, 0,
	234, 0, 120, 121, 122, 123, 235, 236, 0, 0,
	127, 0, 124, 0, 0, 125, 237, 126, 238, 239,
	240, 0, 241, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 242, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 243, 139, 0, 140,
	141, 143, 142, 0, 0, 0, 244, 144, 245, 145,
	146, 0, 147, 0, 0, 148, 0, 0, 149, 246,
	0, 150, 0, 247, 151, 152, 153, 154, 0, 248,
	155, 249, 156, 0, 157, 158, 159, 250, 160, 161,
	0, 162, 163, 164, 165, 166, 168, 169, 167, 170,
	171, 0, 172, 0, 173, 174, 251, 175, 0, 176,
	177, 178, 179, 0, 252, 180, 181, 0, 182, 183,
	0, 184, 253, 254, 185, 0, 191, 186, 187, 188,
	190, 255, 189, 256, 0, 192, 0, 193, 194, 195,
	0, 257, 258, 259, 0, 0, 196, 260, 261, 0,
	197, 198, 199, 200, 83, 0, 201, 202, 203, 0,
	204, 0, 205, 206, 207, 262, 263, 0, 0, 208,
	86, 87, 0, 88, 209, 210, 211, 212, 213, 0,
	0, 0, 0, 89, 90, 91, 214, 215, 216, 217,
	92, 218, 219, 0, 93, 220, 221, 94, 1062, 0,
	222, 223, 224, 0, 225, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 267,
	106, 226, 107, 227, 228, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 229,
	113, 114, 230, 231, 0, 0, 0, 115, 116, 232,
	0, 117, 0, 118, 0, 0, 0, 0, 119, 233,
	0, 234, 0, 120, 121, 122, 123, 235, 236, 0,
	0, 127, 0, 124, 0, 0, 125, 237, 126, 238,
	239, 240, 0, 241, 0, 0, 128, 0, 129, 130,
	0, 132, 131, 0, 242, 0, 133, 0, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 243, 139, 0,
	140, 141, 143, 142, 0, 0, 0, 244, 144, 245,
	145, 146, 0, 147, 0, 0, 148, 0, 0, 149,
	246, 0, 150, 0, 247, 151, 152, 153, 154, 0,
	248, 155, 249, 156, 0, 157, 158, 159, 250, 160,
	161, 0, 162, 163, 164, 165, 166, 168, 169, 167,
	170, 171, 0, 172, 0, 173, 174, 251, 175, 0,
	176, 177, 178, 179, 0, 252, 180, 181, 0, 182,
	183, 0, 184, 253, 254, 185, 0, 191, 186, 187,
	188, 190, 255, 189, 256, 0, 192, 0, 193, 194,
	195, 0, 257, 258, 259, 0, 0, 196, 260, 261,
	0, 197, 198, 199, 200, 83, 0, 201, 202, 203,
	0, 204, 0, 205, 206, 207, 262, 263, 0, 0,
	208, 86, 87, 0, 88, 209, 210, 211, 212, 213,
	0, 0, 0, 0, 89, 90, 91, 214, 215, 216,
	217, 92, 218, 219, 0, 93, 220, 221, 94, 1653,
	0, 222, 223, 224, 0, 225, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	267, 106, 226, 107, 227, 228, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	229, 113, 114, 230, 231, 0, 0, 0, 115, 116,
	232, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	233, 0, 234, 0, 120, 121, 122, 123, 235, 236,
	0, 0, 127, 0, 124, 0, 0, 125, 237, 126,
	238, 239, 240, 0, 241, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 242, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 243, 139,
	0, 140, 141, 143, 142, 0, 0, 0, 244, 144,
	245, 145, 146, 0, 147, 0, 0, 148, 0, 0,
	149, 246, 0, 150, 0, 247, 151, 152, 153, 154,
	0, 248, 155, 249, 156, 0, 157, 158, 159, 250,
	160, 161, 0, 162, 163, 164, 165, 166, 168, 169,
	167, 170, 171, 0, 172, 0, 173, 174, 251, 175,
	0, 176, 177, 178, 179, 0, 252, 180, 181, 0,
	182, 183, 0, 184, 253, 254, 185, 0, 191, 186,
	187, 188, 190, 255, 189, 256, 0, 192, 0, 193,
	194, 195, 0, 257, 258, 259, 0, 0, 196, 260,
	261, 0, 197, 198, 199, 200, 0, 0, 201, 202,
	203, 0, 204, 0, 205, 206, 207, 262, 263, 0,
	0, 208, 0, 0, 0, 0, 209, 210, 211, 212,
	650, 639, 640, 637, 638, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 0, 88,
	712, 0, 0, 0, 213, 0, 0, 0, 0, 89,
	90, 91, 214, 681, 216, 682, 92, 683, 684, 0,
	93, 220, 221, 94, 0, 0, 685, 686, 224, 0,
	225, 0, 296, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 297, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 267, 106, 687, 107, 688,
	689, 0, 108, 0, 109, 0, 0, 0, 680, 111,
	0, 112, 0, 0, 0, 229, 113, 114, 230, 231,
	646, 0, 0, 115, 116, 690, 0, 117, 0, 118,
	0, 0, 298, 0, 119, 233, 0, 234, 0, 120,
	121, 122, 123, 235, 236, 300, 0, 127, 0, 124,
	0, 299, 125, 691, 126, 692, 693, 694, 0, 657,
	0, 301, 128, 302, 129, 130, 0, 132, 131, 0,
	242, 303, 133, 304, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 243, 139, 305, 140, 141, 143, 142,
	0, 0, 647, 244, 144, 695, 145, 146, 0, 147,
	0, 0, 148, 0, 0, 149, 246, 306, 150, 307,
	247, 151, 152, 153, 154, 0, 248, 155, 249, 156,
	0, 157, 158, 159, 696, 160, 161, 0, 162, 163,
	164, 165, 166, 168, 169, 167, 170, 171, 0, 172,
	308, 173, 174, 251, 175, 0, 176, 177, 178, 179,
	0, 252, 180, 181, 0, 182, 183, 309, 184, 697,
	254, 185, 0, 191, 186, 187, 188, 190, 698, 189,
	256, 0, 192, 0, 193, 194, 195, 0, 257, 699,
	700, 0, 0, 196, 260, 261, 645, 197, 198, 199,
	200, 83, 0, 201, 202, 203, 0, 204, 0, 205,
	206, 207, 262, 701, 0, 0, 208, 86, 87, 0,
	88, 209, 210, 211, 212, 213, 0, 0, 0, 0,
	89, 90, 91, 214, 215, 216, 217, 92, 218, 219,
	0, 93, 220, 221, 94, 0, 0, 222, 223, 224,
	0, 225, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 79, 106, 226, 107,
	227, 228, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 229, 113, 114, 230,
	231, 0, 0, 0, 115, 116, 232, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 233, 0, 234, 0,
	120, 121, 122, 123, 235, 236, 0, 0, 127, 0,
	124, 0, 0, 125, 237, 126, 238, 239, 240, 0,
	241, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 242, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 243, 139, 0, 140, 141, 143,
	142, 0, 0, 0, 244, 144, 245, 145, 146, 0,
	147, 0, 0, 148, 0, 0, 149, 246, 0, 150,
	0, 247, 151, 152, 153, 154, 0, 248, 155, 249,
	156, 0, 157, 158, 159, 250, 160, 161, 0, 162,
	163, 164, 165, 166, 168, 169, 167, 170, 171, 0,
	172, 0, 173, 174, 251, 175, 0, 176, 177, 178,
	179, 0, 252, 180, 181, 0, 182, 183, 0, 184,
	253, 254, 185, 0, 191, 186, 187, 188, 190, 255,
	189, 256, 0, 192, 78, 193, 194, 195, 0, 257,
	258, 259, 0, 0, 196, 260, 261, 0, 197, 198,
	199, 200, 0, 0, 201, 202, 203, 0, 204, 0,
	205, 206, 207, 262, 263, 0, 0, 208, 526, 735,
	0, 0, 209, 210, 211, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 82,
	0, 0, 213, 0, 0, 0, 0, 89, 90, 91,
	214, 215, 216, 217, 92, 218, 219, 0, 93, 220,
	221, 94, 0, 0, 222, 223, 224, 0, 225, 0,
	296, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 297, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 267, 106, 226, 107, 227, 228, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 229, 113, 114, 230, 231, 0, 0,
	0, 115, 116, 232, 0, 117, 0, 118, 0, 0,
	298, 0, 119, 233, 0, 234, 0, 120, 121, 122,
	123, 235, 236, 300, 0, 127, 0, 124, 0, 299,
	125, 237, 126, 238, 239, 240, 0, 241, 0, 301,
	128, 302, 129, 130, 0, 132, 131, 0, 242, 303,
	133, 304, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 243, 139, 305, 140, 141, 143, 142, 0, 0,
	0, 244, 144, 245, 145, 146, 0, 147, 0, 0,
	148, 0, 0, 149, 246, 306, 150, 307, 247, 151,
	152, 153, 154, 0, 248, 155, 249, 156, 0, 157,
	158, 159, 250, 160, 161, 0, 162, 163, 164, 165,
	166, 168, 169, 167, 170, 171, 0, 172, 308, 173,
	174, 251, 175, 0, 176, 177, 178, 179, 0, 252,
	180, 181, 0, 182, 183, 309, 184, 253, 254, 185,
	0, 191, 186, 187, 188, 190, 255, 189, 256, 0,
	192, 0, 193, 194, 195, 0, 257, 258, 259, 0,
	0, 196, 260, 261, 0, 197, 198, 199, 200, 83,
	0, 201, 202, 203, 0, 204, 0, 205, 206, 207,
	262, 263, 0, 0, 208, 86, 87, 0, 88, 209,
	210, 211, 212, 213, 0, 0, 0, 0, 89, 90,
	91, 214, 215, 216, 217, 92, 218, 219, 0, 93,
	220, 221, 94, 0, 0, 222, 223, 224, 0, 225,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 267, 106, 226, 107, 227, 228,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 229, 113, 114, 230, 231, 0,
	0, 0, 115, 116, 232, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 233, 0, 234, 0, 120, 121,
	122, 123, 235, 236, 0, 0, 127, 0, 124, 0,
	0, 125, 237, 126, 238, 239, 240, 0, 241, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 242,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 243, 139, 0, 140, 141, 143, 142, 0,
	0, 0, 244, 144, 245, 145, 146, 0, 147, 0,
	0, 148, 0, 0, 149, 246, 0, 150, 0, 247,
	151, 152, 153, 154, 0, 248, 155, 249, 156, 0,
	157, 158, 159, 250, 160, 161, 0, 162, 163, 164,
	165, 166, 168, 169, 167, 170, 171, 0, 172, 0,
	173, 174, 251, 175, 0, 176, 177, 178, 179, 0,
	252, 180, 181, 0, 182, 183, 0, 184, 253, 254,
	185, 0, 191, 186, 187, 188, 190, 255, 189, 256,
	0, 192, 0, 193, 194, 195, 0, 257, 258, 259,
	0, 0, 196, 260, 261, 0, 197, 198, 199, 200,
	0, 0, 201, 202, 203, 0, 204, 0, 205, 206,
	207, 262, 263, 0, 526, 208, 0, 0, 0, 0,
	209, 210, 211, 212, 0, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 82, 213, 0,
	0, 0, 0, 89, 90, 91, 214, 215, 216, 217,
	92, 218, 219, 0, 93, 220, 221, 94, 0, 0,
	222, 223, 224, 0, 225, 0, 296, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 297, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 267,
	106, 226, 107, 227, 228, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 229,
	113, 114, 230, 231, 0, 0, 0, 115, 116, 232,
	0, 117, 0, 118, 0, 0, 298, 0, 119, 233,
	0, 234, 0, 120, 121, 122, 123, 235, 236, 300,
	0, 127, 0, 124, 0, 299, 125, 237, 126, 238,
	239, 240, 0, 241, 0, 301, 128, 302, 129, 130,
	0, 132, 131, 0, 242, 303, 133, 304, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 243, 139, 305,
	140, 141, 143, 142, 0, 0, 0, 244, 144, 245,
	145, 146, 0, 147, 0, 0, 148, 0, 0, 149,
	246, 306, 150, 307, 247, 151, 152, 153, 154, 0,
	248, 155, 249, 156, 0, 157, 158, 159, 250, 160,
	161, 0, 162, 163, 164, 165, 166, 168, 169, 167,
	170, 171, 0, 172, 308, 173, 174, 251, 175, 0,
	176, 177, 178, 179, 0, 252, 180, 181, 0, 182,
	183, 309, 184, 253, 254, 185, 0, 191, 186, 187,
	188, 190, 255, 189, 256, 0, 192, 0, 193, 194,
	195, 0, 257, 258, 259, 0, 0, 196, 260, 261,
	0, 197, 198, 199, 200, 83, 0, 201, 202, 203,
	0, 204, 0, 205, 206, 207, 262, 263, 0, 0,
	208, 86, 87, 0, 88, 209, 210, 211, 212, 213,
	0, 0, 0, 0, 89, 90, 91, 214, 215, 216,
	217, 92, 218, 219, 0, 93, 220, 221, 94, 0,
	0, 222, 223, 224, 1023, 225, 0, 0, 0, 95,
	96, 97, 0, 98, 1021, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	267, 106, 226, 107, 227, 228, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	229, 113, 114, 230, 231, 0, 1125, 0, 115, 116,
	232, 0, 117, 0, 118, 1026, 0, 0, 0, 119,
	233, 0, 234, 0, 120, 121, 122, 123, 235, 236,
	0, 0, 127, 1123, 124, 0, 0, 125, 237, 126,
	238, 239, 240, 0, 241, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 242, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 243, 139,
	0, 140, 141, 143, 142, 0, 0, 0, 244, 144,
	245, 145, 146, 0, 147, 0, 0, 148, 0, 0,
	149, 246, 0, 150, 0, 247, 151, 152, 153, 154,
	0, 248, 155, 249, 156, 1025, 157, 158, 159, 250,
	160, 161, 0, 162, 163, 164, 165, 166, 168, 169,
	167, 170, 171, 0, 172, 0, 173, 174, 251, 175,
	0, 176, 177, 178, 179, 0, 252, 180, 181, 0,
	182, 183, 0, 184, 253, 254, 185, 0, 191, 186,
	187, 188, 190, 255, 189, 256, 0, 192, 0, 193,
	194, 195, 0, 257, 258, 259, 0, 0, 196, 260,
	261, 0, 197, 198, 199, 200, 83, 1124, 201, 202,
	203, 0, 204, 0, 205, 206, 207, 262, 263, 0,
	0, 208, 86, 87, 0, 88, 209, 210, 211, 212,
	213, 0, 0, 0, 0, 89, 90, 91, 214, 215,
	216, 217, 92, 218, 219, 0, 93, 220, 221, 94,
	0, 0, 222, 223, 224, 1023, 225, 0, 0, 1018,
	95, 96, 97, 0, 98, 1021, 99, 100, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 267, 106, 226, 107, 227, 228, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 229, 113, 114, 230, 231, 0, 0, 0, 115,
	116, 232, 0, 117, 0, 118, 1026, 0, 0, 0,
	119, 233, 0, 234, 0, 120, 121, 122, 123, 1017,
	236, 0, 0, 127, 0, 124, 0, 0, 125, 237,
	126, 238, 239, 240, 0, 241, 0, 0, 128, 0,
	129, 130, 0, 132, 131, 0, 242, 0, 133, 0,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 243,
	139, 0, 140, 141, 143, 142, 0, 0, 0, 244,
	144, 245, 145, 146, 0, 147, 0, 0, 148, 0,
	0, 149, 246, 0, 150, 0, 247, 151, 152, 153,
	154, 0, 248, 155, 249, 156, 1025, 157, 158, 159,
	250, 160, 161, 0, 162, 163, 164, 165, 166, 168,
	169, 167, 170, 171, 0, 172, 0, 173, 174, 251,
	175, 0, 176, 177, 178, 179, 0, 252, 180, 181,
	0, 182, 183, 0, 184, 253, 254, 185, 0, 191,
	186, 187, 188, 190, 255, 189, 256, 0, 192, 0,
	193, 194, 195, 0, 257, 258, 259, 0, 0, 196,
	260, 261, 0, 197, 198, 199, 200, 83, 1024, 201,
	202, 203, 0, 204, 0, 205, 206, 207, 262, 263,
	0, 0, 208, 86, 87, 0, 88, 209, 210, 211,
	212, 213, 0, 1620, 0, 0, 89, 90, 91, 214,
	215, 216, 217, 92, 218, 219, 0, 93, 220, 221,
	94, 0, 0, 222, 223, 224, 0, 225, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 267, 106, 226, 107, 227, 228, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 229, 113, 114, 230, 231, 0, 0, 0,
	115, 116, 232, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 233, 0, 234, 0, 120, 121, 122, 123,
	235, 236, 0, 0, 127, 0, 124, 0, 0, 125,
	237, 126, 238, 239, 240, 0, 241, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 242, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	243, 139, 0, 140, 141, 143, 142, 0, 0, 0,
	244, 144, 245, 145, 146, 0, 147, 0, 0, 148,
	0, 0, 149, 246, 0, 150, 0, 247, 151, 152,
	153, 154, 0, 248, 155, 249, 156, 0, 157, 158,
	159, 250, 160, 161, 0, 162, 163, 164, 165, 166,
	168, 169, 167, 170, 171, 0, 172, 0, 173, 174,
	251, 175, 0, 176, 177, 178, 179, 0, 252, 180,
	181, 0, 182, 183, 0, 184, 253, 254, 185, 0,
	191, 186, 187, 188, 190, 255, 189, 256, 0, 192,
	0, 193, 194, 195, 0, 257, 258, 259, 0, 0,
	196, 260, 261, 0, 197, 198, 199, 200, 83, 0,
	201, 202, 203, 0, 204, 0, 205, 206, 207, 262,
	263, 0, 0, 208, 86, 87, 0, 88, 209, 210,
	211, 212, 213, 0, 0, 0, 0, 89, 90, 91,
	214, 215, 216, 217, 92, 218, 219, 0, 93, 220,
	221, 94, 0, 0, 222, 223, 224, 0, 225, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 267, 106, 226, 107, 227, 228, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 229, 113, 114, 230, 231, 0, 0,
	0, 115, 116, 232, 0, 117, 0, 118, 0, 0,
	0, 0, 119, 233, 0, 234, 0, 120, 121, 122,
	123, 235, 236, 0, 0, 127, 0, 124, 0, 0,
	125, 237, 126, 238, 239, 240, 0, 241, 0, 0,
	128, 0, 129, 130, 0, 132, 131, 0, 242, 0,
	133, 0, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 243, 139, 0, 140, 141, 143, 142, 0, 0,
	0, 244, 144, 245, 145, 146, 0, 147, 0, 480,
	148, 0, 0, 149, 246, 0, 150, 0, 247, 151,
	152, 153, 154, 0, 248, 155, 249, 156, 0, 157,
	158, 159, 250, 160, 161, 0, 162, 163, 164, 165,
	166, 168, 169, 167, 170, 171, 0, 172, 0, 173,
	174, 251, 175, 0, 176, 177, 178, 179, 0, 252,
	180, 181, 0, 182, 183, 0, 184, 253, 254, 185,
	0, 191, 186, 187, 188, 190, 255, 189, 256, 0,
	192, 0, 193, 194, 195, 0, 257, 258, 259, 0,
	0, 196, 260, 261, 0, 197, 198, 199, 200, 83,
	0, 201, 202, 203, 0, 204, 0, 205, 206, 207,
	262, 263, 0, 0, 208, 86, 87, 0, 88, 209,
	210, 211, 212, 213, 0, 0, 0, 0, 89, 90,
	91, 214, 215, 216, 217, 92, 218, 219, 0, 93,
	220, 221, 94, 0, 0, 222, 223, 224, 0, 225,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 267, 106, 226, 107, 227, 228,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 229, 113, 114, 230, 231, 0,
	0, 0, 115, 116, 232, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 233, 0, 234, 0, 120, 121,
	122, 123, 768, 236, 0, 0, 127, 0, 124, 0,
	0, 125, 237, 126, 238, 239, 240, 0, 241, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 242,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 243, 139, 0, 140, 141, 143, 142, 0,
	0, 0, 244, 144, 245, 145, 146, 0, 147, 0,
	480, 148, 0, 0, 149, 246, 0, 150, 0, 247,
	151, 152, 153, 154, 0, 248, 155, 249, 156, 0,
	157, 158, 159, 250, 160, 161, 0, 162, 163, 164,
	165, 166, 168, 169, 167, 170, 171, 0, 172, 0,
	173, 174, 251, 175, 0, 176, 177, 178, 179, 0,
	252, 180, 181, 0, 182, 183, 0, 184, 253, 254,
	185, 0, 191, 186, 187, 188, 190, 255, 189, 256,
	0, 192, 0, 193, 194, 195, 0, 257, 258, 259,
	0, 0, 196, 260, 261, 0, 197, 198, 199, 200,
	83, 0, 201, 202, 203, 0, 204, 0, 205, 206,
	207, 262, 263, 0, 0, 208, 86, 87, 538, 88,
	209, 210, 211, 212, 213, 0, 0, 0, 0, 89,
	90, 91, 214, 215, 216, 217, 92, 218, 219, 0,
	93, 220, 221, 94, 0, 0, 222, 223, 224, 0,
	225, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 267, 106, 226, 107, 227,
	228, 0, 108, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 229, 113, 114, 230, 231,
	0, 0, 0, 115, 116, 232, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 233, 0, 234, 0, 120,
	121, 122, 123, 235, 236, 0, 0, 127, 0, 124,
	0, 0, 125, 237, 126, 238, 239, 240, 0, 241,
	0, 0, 128, 0, 129, 130, 0, 132, 131, 0,
	242, 0, 133, 0, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 243, 139, 0, 140, 141, 143, 142,
	0, 0, 0, 244, 144, 245, 145, 146, 0, 147,
	0, 0, 148, 0, 0, 149, 246, 0, 150, 0,
	247, 151, 152, 153, 154, 0, 248, 155, 249, 156,
	0, 157, 158, 159, 250, 160, 161, 0, 162, 163,
	164, 165, 166, 168, 169, 167, 170, 171, 0, 172,
	0, 173, 174, 251, 175, 0, 176, 177, 178, 179,
	0, 252, 180, 181, 0, 182, 183, 0, 184, 253,
	254, 185, 0, 191, 186, 187, 188, 190, 255, 189,
	256, 0, 192, 0, 193, 194, 195, 0, 257, 258,
	259, 0, 0, 196, 260, 261, 0, 197, 198, 199,
	200, 83, 0, 201, 202, 203, 0, 204, 0, 205,
	206, 207, 262, 263, 0, 0, 208, 86, 87, 0,
	88, 209, 210, 211, 212, 213, 0, 0, 0, 0,
	89, 90, 91, 214, 215, 216, 217, 92, 218, 219,
	0, 93, 220, 221, 94, 0, 0, 222, 223, 224,
	0, 225, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 226, 107,
	227, 228, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 229, 113, 114, 230,
	231, 0, 0, 0, 115, 116, 232, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 233, 0, 234, 0,
	120, 121, 122, 123, 492, 236, 0, 0, 127, 0,
	124, 0, 0, 125, 237, 126, 238, 239, 240, 0,
	241, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 242, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 243, 139, 0, 140, 141, 143,
	142, 0, 0, 0, 244, 144, 245, 145, 146, 0,
	147, 0, 480, 148, 0, 0, 149, 246, 0, 150,
	0, 247, 151, 152, 153, 154, 0, 248, 155, 249,
	156, 0, 157, 158, 159, 250, 160, 161, 0, 162,
	163, 164, 165, 166, 168, 169, 167, 170, 171, 0,
	172, 0, 173, 174, 251, 175, 0, 176, 177, 178,
	179, 0, 252, 180, 181, 0, 182, 183, 0, 184,
	253, 254, 185, 0, 191, 186, 187, 188, 190, 255,
	189, 256, 0, 192, 0, 193, 194, 195, 0, 257,
	258, 259, 0, 0, 196, 260, 261, 0, 197, 198,
	199, 200, 83, 0, 201, 202, 203, 0, 204, 0,
	205, 206, 207, 262, 263, 0, 0, 208, 86, 87,
	0, 88, 209, 210, 211, 212, 213, 0, 0, 0,
	0, 89, 90, 91, 214, 215, 216, 217, 92, 218,
	219, 0, 93, 220, 221, 94, 0, 0, 222, 223,
	224, 0, 225, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 267, 106, 226,
	107, 227, 228, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 229, 113, 114,
	230, 231, 0, 0, 0, 115, 116, 232, 0, 117,
	0, 118, 0, 0, 0, 0, 119, 233, 0, 234,
	0, 120, 121, 122, 123, 485, 236, 0, 0, 127,
	0, 124, 0, 0, 125, 237, 126, 238, 239, 240,
	0, 241, 0, 0, 128, 0, 129, 130, 0, 132,
	131, 0, 242, 0, 133, 0, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 243, 139, 0, 140, 141,
	143, 142, 0, 0, 0, 244, 144, 245, 145, 146,
	0, 147, 0, 480, 148, 0, 0, 149, 246, 0,
	150, 0, 247, 151, 152, 153, 154, 0, 248, 155,
	249, 156, 0, 157, 158, 159, 250, 160, 161, 0,
	162, 163, 164, 165, 166, 168, 169, 167, 170, 171,
	0, 172, 0, 173, 174, 251, 175, 0, 176, 177,
	178, 179, 0, 252, 180, 181, 0, 182, 183, 0,
	184, 253, 254, 185, 0, 191, 186, 187, 188, 190,
	255, 189, 256, 0, 192, 0, 193, 194, 195, 0,
	257, 258, 259, 0, 0, 196, 260, 261, 0, 197,
	198, 199, 200, 83, 0, 201, 202, 203, 0, 204,
	0, 205, 206, 207, 262, 263, 0, 0, 208, 86,
	87, 395, 88, 209, 210, 211, 212, 213, 0, 0,
	0, 0, 89, 90, 91, 214, 215, 216, 217, 92,
	218, 219, 0, 93, 220, 221, 94, 0, 0, 222,
	223, 224, 0, 225, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 267, 106,
	226, 107, 227, 228, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 229, 113,
	114, 230, 231, 0, 0, 0, 115, 116, 232, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 233, 0,
	234, 0, 120, 121, 122, 123, 235, 236, 0, 0,
	127, 0, 124, 0, 0, 125, 237, 126, 238, 239,
	240, 0, 241, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 242, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 243, 139, 0, 140,
	141, 143, 142, 0, 0, 0, 244, 144, 245, 145,
	146, 0, 147, 0, 0, 148, 0, 0, 149, 246,
	0, 150, 0, 247, 151, 152, 153, 154, 0, 248,
	155, 249, 394, 0, 157, 158, 159, 250, 160, 161,
	0, 162, 163, 164, 165, 166, 168, 169, 167, 170,
	171, 0, 172, 0, 173, 174, 251, 175, 0, 176,
	177, 178, 179, 0, 252, 180, 181, 0, 182, 183,
	0, 184, 253, 254, 185, 0, 191, 186, 187, 188,
	190, 255, 189, 256, 0, 192, 0, 193, 194, 195,
	0, 257, 258, 259, 0, 0, 196, 260, 261, 0,
	197, 198, 199, 200, 83, 0, 201, 202, 203, 0,
	204, 0, 205, 206, 207, 262, 263, 0, 0, 208,
	86, 87, 0, 88, 209, 210, 211, 212, 213, 0,
	0, 0, 0, 89, 90, 91, 214, 215, 216, 217,
	92, 218, 219, 0, 93, 220, 221, 94, 0, 0,
	222, 223, 224, 0, 225, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 267,
	106, 226, 107, 227, 228, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 229,
	113, 114, 230, 231, 0, 0, 0, 115, 116, 232,
	0, 117, 0, 118, 0, 0, 0, 0, 119, 233,
	0, 234, 0, 120, 121, 122, 123, 235, 236, 0,
	0, 127, 0, 124, 0, 0, 125, 237, 126, 238,
	239, 240, 0, 241, 0, 0, 128, 0, 129, 130,
	0, 132, 131, 0, 242, 0, 133, 0, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 243, 139, 0,
	140, 141, 143, 142, 0, 0, 0, 244, 144, 245,
	145, 146, 0, 147, 0, 0, 148, 0, 0, 149,
	246, 0, 150, 0, 247, 151, 152, 153, 154, 0,
	248, 155, 249, 156, 0, 157, 158, 159, 250, 160,
	161, 0, 162, 163, 164, 165, 166, 168, 169, 167,
	170, 171, 0, 172, 0, 173, 174, 251, 175, 0,
	176, 177, 178, 179, 0, 252, 180, 181, 0, 182,
	183, 0, 184, 253, 254, 185, 0, 191, 186, 187,
	188, 190, 255, 189, 256, 0, 192, 0, 193, 194,
	195, 0, 257, 258, 259, 0, 0, 196, 260, 261,
	0, 197, 198, 199, 200, 83, 0, 201, 202, 203,
	0, 204, 0, 205, 206, 207, 262, 263, 0, 0,
	208, 86, 87, 0, 88, 209, 210, 211, 212, 213,
	0, 0, 0, 0, 89, 90, 91, 214, 215, 216,
	217, 92, 218, 219, 0, 93, 220, 221, 94, 0,
	0, 222, 223, 224, 0, 225, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	267, 106, 226, 107, 227, 228, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	229, 113, 114, 230, 231, 0, 0, 0, 115, 116,
	232, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	233, 0, 234, 0, 120, 121, 122, 123, 1317, 236,
	0, 0, 127, 0, 124, 0, 0, 125, 237, 126,
	238, 239, 240, 0, 241, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 242, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 243, 139,
	0, 140, 141, 143, 142, 0, 0, 0, 244, 144,
	245, 145, 146, 0, 147, 0, 0, 148, 0, 0,
	149, 246, 0, 150, 0, 247, 151, 152, 153, 154,
	0, 248, 155, 249, 156, 0, 157, 158, 159, 250,
	160, 161, 0, 162, 163, 164, 165, 166, 168, 169,
	167, 170, 171, 0, 172, 0, 173, 174, 251, 175,
	0, 176, 177, 178, 179, 0, 252, 180, 181, 0,
	182, 183, 0, 184, 253, 254, 185, 0, 191, 186,
	187, 188, 190, 255, 189, 256, 0, 192, 0, 193,
	194, 195, 0, 257, 258, 259, 0, 0, 196, 260,
	261, 0, 197, 198, 199, 200, 83, 0, 201, 202,
	203, 0, 204, 0, 205, 206, 207, 262, 263, 0,
	0, 208, 86, 87, 0, 88, 209, 210, 211, 212,
	213, 0, 0, 0, 0, 89, 90, 91, 214, 215,
	216, 217, 92, 218, 219, 0, 93, 220, 221, 94,
	0, 0, 222, 223, 224, 0, 225, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 267, 106, 226, 107, 227, 228, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 229, 113, 114, 230, 231, 0, 0, 0, 115,
	116, 232, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 233, 0, 234, 0, 120, 121, 122, 123, 1315,
	236, 0, 0, 127, 0, 124, 0, 0, 125, 237,
	126, 238, 239, 240, 0, 241, 0, 0, 128, 0,
	129, 130, 0, 132, 131, 0, 242, 0, 133, 0,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 243,
	139, 0, 140, 141, 143, 142, 0, 0, 0, 244,
	144, 245, 145, 146, 0, 147, 0, 0, 148, 0,
	0, 149, 246, 0, 150, 0, 247, 151, 152, 153,
	154, 0, 248, 155, 249, 156, 0, 157, 158, 159,
	250, 160, 161, 0, 162, 163, 164, 165, 166, 168,
	169, 167, 170, 171, 0, 172, 0, 173, 174, 251,
	175, 0, 176, 177, 178, 179, 0, 252, 180, 181,
	0, 182, 183, 0, 184, 253, 254, 185, 0, 191,
	186, 187, 188, 190, 255, 189, 256, 0, 192, 0,
	193, 194, 195, 0, 257, 258, 259, 0, 0, 196,
	260, 261, 0, 197, 198, 199, 200, 83, 0, 201,
	202, 203, 0, 204, 0, 205, 206, 207, 262, 263,
	0, 0, 208, 86, 87, 0, 88, 209, 210, 211,
	212, 213, 0, 0, 0, 0, 89, 90, 91, 214,
	215, 216, 217, 92, 218, 219, 0, 93, 220, 221,
	94, 0, 0, 222, 223, 224, 0, 225, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 267, 106, 226, 107, 227, 228, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 229, 113, 114, 230, 231, 0, 0, 0,
	115, 116, 232, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 233, 0, 234, 0, 120, 121, 122, 123,
	1304, 236, 0, 0, 127, 0, 124, 0, 0, 125,
	237, 126, 238, 239, 240, 0, 241, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 242, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	243, 139, 0, 140, 141, 143, 142, 0, 0, 0,
	244, 144, 245, 145, 146, 0, 147, 0, 0, 148,
	0, 0, 149, 246, 0, 150, 0, 247, 151, 152,
	153, 154, 0, 248, 155, 249, 156, 0, 157, 158,
	159, 250, 160, 161, 0, 162, 163, 164, 165, 166,
	168, 169, 167, 170, 171, 0, 172, 0, 173, 174,
	251, 175, 0, 176, 177, 178, 179, 0, 252, 180,
	181, 0, 182, 183, 0, 184, 253, 254, 185, 0,
	191, 186, 187, 188, 190, 255, 189, 256, 0, 192,
	0, 193, 194, 195, 0, 257, 258, 259, 0, 0,
	196, 260, 261, 0, 197, 198, 199, 200, 83, 0,
	201, 202, 203, 0, 204, 0, 205, 206, 207, 262,
	263, 0, 0, 208, 86, 87, 0, 88, 209, 210,
	211, 212, 213, 0, 0, 0, 0, 89, 90, 91,
	214, 215, 216, 217, 92, 218, 219, 0, 93, 220,
	221, 94, 0, 0, 222, 223, 224, 0, 225, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 267, 106, 226, 107, 227, 228, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 229, 113, 114, 230, 231, 0, 0,
	0, 115, 116, 232, 0, 117, 0, 118, 0, 0,
	0, 0, 119, 233, 0, 234, 0, 120, 121, 122,
	123, 884, 236, 0, 0, 127, 0, 124, 0, 0,
	125, 237, 126, 238, 239, 240, 0, 241, 0, 0,
	128, 0, 129, 130, 0, 132, 131, 0, 242, 0,
	133, 0, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 243, 139, 0, 140, 141, 143, 142, 0, 0,
	0, 244, 144, 245, 145, 146, 0, 147, 0, 0,
	148, 0, 0, 149, 246, 0, 150, 0, 247, 151,
	152, 153, 154, 0, 248, 155, 249, 156, 0, 157,
	158, 159, 250, 160, 161, 0, 162, 163, 164, 165,
	166, 168, 169, 167, 170, 171, 0, 172, 0, 173,
	174, 251, 175, 0, 176, 177, 178, 179, 0, 252,
	180, 181, 0, 182, 183, 0, 184, 253, 254, 185,
	0, 191, 186, 187, 188, 190, 255, 189, 256, 0,
	192, 0, 193, 194, 195, 0, 257, 258, 259, 0,
	0, 196, 260, 261, 0, 197, 198, 199, 200, 83,
	0, 201, 202, 203, 0, 204, 0, 205, 206, 207,
	262, 263, 0, 0, 208, 86, 87, 0, 88, 209,
	210, 211, 212, 213, 0, 0, 0, 0, 89, 90,
	91, 214, 215, 216, 217, 92, 218, 219, 0, 93,
	220, 221, 94, 0, 0, 222, 223, 224, 0, 225,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 267, 106, 226, 107, 227, 228,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 229, 113, 114, 230, 231, 0,
	0, 0, 115, 116, 232, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 233, 0, 234, 0, 120, 121,
	122, 123, 235, 236, 0, 0, 127, 0, 124, 0,
	0, 125, 237, 126, 238, 239, 240, 0, 241, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 242,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 243, 139, 0, 140, 141, 143, 142, 0,
	0, 0, 244, 144, 245, 145, 146, 0, 147, 0,
	0, 148, 0, 0, 149, 246, 0, 150, 0, 247,
	151, 152, 153, 154, 0, 248, 155, 249, 156, 0,
	157, 158, 159, 250, 160, 161, 0, 162, 163, 164,
	165, 166, 168, 169, 167, 170, 171, 0, 172, 0,
	173, 174, 251, 175, 0, 176, 409, 178, 179, 0,
	252, 180, 181, 0, 182, 183, 0, 184, 253, 254,
	185, 0, 191, 186, 187, 188, 190, 255, 189, 256,
	0, 192, 0, 193, 194, 195, 0, 257, 258, 259,
	0, 0, 196, 260, 261, 0, 197, 198, 199, 200,
	83, 0, 201, 202, 203, 0, 204, 0, 205, 206,
	207, 262, 263, 0, 0, 208, 86, 87, 0, 88,
	209, 210, 211, 212, 213, 0, 753, 0, 0, 89,
	90, 91, 214, 215, 216, 217, 92, 218, 219, 0,
	93, 220, 221, 94, 0, 0, 222, 223, 224, 0,
	225, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 267, 106, 226, 107, 227,
	228, 0, 108, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 229, 113, 114, 230, 231,
	0, 0, 0, 115, 116, 232, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 233, 0, 234, 0, 120,
	121, 122, 123, 235, 236, 0, 0, 127, 0, 124,
	0, 0, 125, 237, 126, 238, 239, 240, 0, 241,
	0, 0, 128, 0, 129, 130, 0, 132, 131, 0,
	242, 0, 133, 0, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 243, 139, 0, 140, 141, 143, 142,
	0, 0, 0, 244, 144, 245, 145, 146, 0, 147,
	0, 0, 148, 0, 0, 149, 246, 0, 150, 0,
	247, 151, 152, 153, 154, 0, 248, 155, 249, 156,
	0, 157, 158, 159, 250, 160, 161, 0, 162, 163,
	164, 165, 166, 168, 169, 167, 170, 171, 0, 172,
	0, 173, 174, 251, 175, 0, 176, 177, 178, 179,
	0, 252, 180, 181, 0, 0, 183, 0, 184, 253,
	254, 185, 0, 191, 186, 187, 188, 190, 255, 189,
	256, 0, 192, 0, 193, 194, 195, 0, 257, 258,
	259, 0, 0, 196, 260, 261, 0, 197, 198, 199,
	200, 83, 0, 201, 202, 203, 0, 204, 0, 205,
	206, 207, 262, 263, 0, 0, 208, 86, 87, 0,
	88, 209, 210, 211, 212, 213, 0, 0, 0, 0,
	89, 90, 91, 214, 215, 216, 217, 92, 218, 219,
	0, 93, 220, 221, 94, 0, 0, 222, 223, 224,
	0, 225, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 226, 107,
	227, 228, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 229, 113, 114, 230,
	231, 0, 0, 0, 115, 116, 232, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 233, 0, 234, 0,
	120, 121, 122, 123, 590, 236, 0, 0, 127, 0,
	124, 0, 0, 125, 237, 126, 238, 239, 240, 0,
	241, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 242, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 243, 139, 0, 140, 141, 143,
	142, 0, 0, 0, 244, 144, 245, 145, 146, 0,
	147, 0, 0, 148, 0, 0, 149, 246, 0, 150,
	0, 247, 151, 152, 153, 154, 0, 248, 155, 249,
	156, 0, 157, 158, 159, 250, 160, 161, 0, 162,
	163, 164, 165, 166, 168, 169, 167, 170, 171, 0,
	172, 0, 173, 174, 251, 175, 0, 176, 177, 178,
	179, 0, 252, 180, 181, 0, 182, 183, 0, 184,
	253, 254, 185, 0, 191, 186, 187, 188, 190, 255,
	189, 256, 0, 192, 0, 193, 194, 195, 0, 257,
	258, 259, 0, 0, 196, 260, 261, 0, 197, 198,
	199, 200, 83, 0, 201, 202, 203, 0, 204, 0,
	205, 206, 207, 262, 263, 0, 0, 208, 86, 87,
	0, 88, 209, 210, 211, 212, 213, 0, 0, 0,
	0, 89, 90, 91, 214, 215, 216, 217, 92, 218,
	219, 0, 93, 220, 221, 94, 0, 0, 222, 223,
	224, 0, 225, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 267, 106, 226,
	107, 227, 228, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 229, 113, 114,
	230, 231, 0, 0, 0, 115, 116, 232, 0, 117,
	0, 118, 0, 0, 0, 0, 119, 233, 0, 234,
	0, 120, 121, 122, 123, 585, 236, 0, 0, 127,
	0, 124, 0, 0, 125, 237, 126, 238, 239, 240,
	0, 241, 0, 0, 128, 0, 129, 130, 0, 132,
	131, 0, 242, 0, 133, 0, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 243, 139, 0, 140, 141,
	143, 142, 0, 0, 0, 244, 144, 245, 145, 146,
	0, 147, 0, 0, 148, 0, 0, 149, 246, 0,
	150, 0, 247, 151, 152, 153, 154, 0, 248, 155,
	249, 156, 0, 157, 158, 159, 250, 160, 161, 0,
	162, 163, 164, 165, 166, 168, 169, 167, 170, 171,
	0, 172, 0, 173, 174, 251, 175, 0, 176, 177,
	178, 179, 0, 252, 180, 181, 0, 182, 183, 0,
	184, 253, 254, 185, 0, 191, 186, 187, 188, 190,
	255, 189, 256, 0, 192, 0, 193, 194, 195, 0,
	257, 258, 259, 0, 0, 196, 260, 261, 0, 197,
	198, 199, 200, 83, 0, 201, 202, 203, 0, 204,
	0, 205, 206, 207, 262, 263, 0, 0, 208, 86,
	87, 0, 88, 209, 210, 211, 212, 213, 0, 0,
	0, 0, 89, 90, 91, 214, 215, 216, 217, 92,
	218, 219, 0, 93, 220, 221, 94, 0, 0, 222,
	223, 544, 0, 225, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 267, 106,
	226, 107, 227, 228, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 229, 113,
	114, 230, 231, 0, 0, 0, 115, 116, 232, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 233, 0,
	234, 0, 120, 121, 122, 123, 235, 236, 0, 0,
	127, 0, 124, 0, 0, 125, 237, 126, 238, 239,
	240, 0, 241, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 242, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 243, 420, 0, 140,
	141, 143, 142, 0, 0, 0, 244, 144, 245, 145,
	146, 0, 147, 0, 0, 148, 0, 0, 149, 246,
	0, 150, 0, 247, 151, 152, 153, 154, 0, 248,
	155, 249, 156, 0, 157, 158, 159, 250, 160, 161,
	0, 162, 163, 164, 165, 166, 168, 169, 167, 170,
	171, 0, 172, 0, 173, 174, 251, 175, 0, 176,
	177, 178, 179, 0, 252, 180, 181, 0, 182, 183,
	0, 184, 253, 254, 185, 0, 191, 186, 187, 188,
	190, 255, 189, 256, 0, 192, 0, 193, 194, 195,
	0, 419, 258, 259, 0, 0, 415, 260, 261, 0,
	197, 198, 199, 200, 83, 0, 201, 202, 203, 0,
	204, 0, 205, 206, 207, 262, 263, 0, 0, 208,
	86, 87, 0, 88, 209, 210, 211, 212, 213, 0,
	0, 0, 0, 89, 90, 91, 214, 215, 216, 217,
	92, 218, 219, 0, 93, 220, 221, 94, 0, 0,
	222, 223, 224, 0, 225, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 267,
	106, 226, 107, 227, 228, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 229,
	113, 114, 230, 231, 0, 0, 0, 115, 116, 232,
	0, 117, 0, 118, 0, 0, 0, 0, 119, 233,
	0, 234, 0, 120, 121, 122, 123, 235, 236, 0,
	0, 127, 0, 124, 0, 0, 125, 237, 126, 238,
	239, 240, 0, 241, 0, 0, 128, 0, 129, 130,
	0, 132, 131, 0, 242, 0, 133, 0, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 243, 420, 0,
	140, 141, 143, 142, 0, 0, 0, 244, 144, 245,
	145, 146, 0, 147, 0, 0, 148, 0, 0, 149,
	246, 0, 150, 0, 247, 151, 152, 153, 154, 0,
	248, 155, 249, 156, 0, 157, 158, 159, 250, 160,
	161, 0, 162, 163, 164, 165, 166, 168, 169, 167,
	170, 171, 0, 172, 0, 173, 174, 251, 175, 0,
	176, 177, 178, 179, 0, 252, 180, 181, 0, 182,
	183, 0, 184, 253, 254, 185, 0, 191, 186, 187,
	188, 190, 255, 189, 256, 0, 192, 0, 193, 194,
	195, 0, 419, 258, 259, 0, 0, 415, 260, 261,
	0, 197, 198, 199, 200, 83, 0, 201, 202, 203,
	0, 204, 0, 205, 206, 207, 262, 263, 0, 0,
	208, 86, 87, 0, 88, 209, 210, 211, 212, 213,
	0, 0, 0, 0, 89, 90, 91, 214, 215, 216,
	217, 92, 218, 219, 0, 93, 220, 221, 94, 0,
	0, 222, 223, 224, 0, 225, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	267, 106, 226, 107, 227, 228, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	229, 113, 114, 230, 231, 0, 0, 0, 115, 116,
	232, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	233, 0, 234, 0, 120, 121, 122, 123, 522, 236,
	0, 0, 127, 0, 124, 0, 0, 125, 237, 126,
	238, 239, 240, 0, 241, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 242, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 243, 139,
	0, 140, 141, 143, 142, 0, 0, 0, 244, 144,
	245, 145, 146, 0, 147, 0, 0, 148, 0, 0,
	149, 246, 0, 150, 0, 247, 151, 152, 153, 154,
	0, 248, 155, 249, 156, 0, 157, 158, 159, 250,
	160, 161, 0, 162, 163, 164, 165, 166, 168, 169,
	167, 170, 171, 0, 172, 0, 173, 174, 251, 175,
	0, 176, 177, 178, 179, 0, 252, 180, 181, 0,
	182, 183, 0, 184, 253, 254, 185, 0, 191, 186,
	187, 188, 190, 255, 189, 256, 0, 192, 0, 193,
	194, 195, 0, 257, 258, 259, 0, 0, 196, 260,
	261, 0, 197, 198, 199, 200, 83, 0, 201, 202,
	203, 0, 204, 0, 205, 206, 207, 262, 263, 0,
	0, 208, 86, 87, 0, 88, 209, 210, 211, 212,
	213, 0, 0, 0, 0, 89, 90, 91, 214, 215,
	216, 217, 92, 218, 219, 0, 93, 220, 221, 94,
	0, 0, 222, 223, 224, 0, 225, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 267, 106, 226, 107, 227, 228, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 229, 113, 114, 230, 231, 0, 0, 0, 115,
	116, 232, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 233, 0, 234, 0, 120, 121, 122, 123, 519,
	236, 0, 0, 127, 0, 124, 0, 0, 125, 237,
	126, 238, 239, 240, 0, 241, 0, 0, 128, 0,
	129, 130, 0, 132, 131, 0, 242, 0, 133, 0,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 243,
	139, 0, 140, 141, 143, 142, 0, 0, 0, 244,
	144, 245, 145, 146, 0, 147, 0, 0, 148, 0,
	0, 149, 246, 0, 150, 0, 247, 151, 152, 153,
	154, 0, 248, 155, 249, 156, 0, 157, 158, 159,
	250, 160, 161, 0, 162, 163, 164, 165, 166, 168,
	169, 167, 170, 171, 0, 172, 0, 173, 174, 251,
	175, 0, 176, 177, 178, 179, 0, 252, 180, 181,
	0, 182, 183, 0, 184, 253, 254, 185, 0, 191,
	186, 187, 188, 190, 255, 189, 256, 0, 192, 0,
	193, 194, 195, 0, 257, 258, 259, 0, 0, 196,
	260, 261, 0, 197, 198, 199, 200, 83, 0, 201,
	202, 203, 0, 204, 0, 205, 206, 207, 262, 263,
	0, 0, 208, 86, 87, 0, 88, 209, 210, 211,
	212, 213, 0, 0, 0, 0, 89, 90, 91, 214,
	215, 216, 217, 92, 218, 219, 0, 93, 220, 221,
	94, 0, 0, 222, 223, 224, 0, 225, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 267, 106, 226, 107, 227, 228, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 229, 113, 114, 230, 231, 0, 0, 0,
	115, 116, 232, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 233, 0, 234, 0, 120, 121, 122, 123,
	516, 236, 0, 0, 127, 0, 124, 0, 0, 125,
	237, 126, 238, 239, 240, 0, 241, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 242, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	243, 139, 0, 140, 141, 143, 142, 0, 0, 0,
	244, 144, 245, 145, 146, 0, 147, 0, 0, 148,
	0, 0, 149, 246, 0, 150, 0, 247, 151, 152,
	153, 154, 0, 248, 155, 249, 156, 0, 157, 158,
	159, 250, 160, 161, 0, 162, 163, 164, 165, 166,
	168, 169, 167, 170, 171, 0, 172, 0, 173, 174,
	251, 175, 0, 176, 177, 178, 179, 0, 252, 180,
	181, 0, 182, 183, 0, 184, 253, 254, 185, 0,
	191, 186, 187, 188, 190, 255, 189, 256, 0, 192,
	0, 193, 194, 195, 0, 257, 258, 259, 0, 0,
	196, 260, 261, 0, 197, 198, 199, 200, 83, 0,
	201, 202, 203, 0, 204, 0, 205, 206, 207, 262,
	263, 0, 0, 208, 86, 87, 0, 88, 209, 210,
	211, 212, 213, 0, 0, 0, 0, 89, 90, 91,
	214, 215, 216, 217, 92, 218, 219, 0, 93, 220,
	221, 94, 0, 0, 222, 223, 224, 0, 225, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 267, 106, 226, 107, 227, 228, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 229, 113, 114, 230, 231, 0, 0,
	0, 115, 116, 232, 0, 117, 0, 118, 0, 0,
	0, 0, 119, 233, 0, 234, 0, 120, 121, 122,
	123, 514, 236, 0, 0, 127, 0, 124, 0, 0,
	125, 237, 126, 238, 239, 240, 0, 241, 0, 0,
	128, 0, 129, 130, 0, 132, 131, 0, 242, 0,
	133, 0, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 243, 139, 0, 140, 141, 143, 142, 0, 0,
	0, 244, 144, 245, 145, 146, 0, 147, 0, 0,
	148, 0, 0, 149, 246, 0, 150, 0, 247, 151,
	152, 153, 154, 0, 248, 155, 249, 156, 0, 157,
	158, 159, 250, 160, 161, 0, 162, 163, 164, 165,
	166, 168, 169, 167, 170, 171, 0, 172, 0, 173,
	174, 251, 175, 0, 176, 177, 178, 179, 0, 252,
	180, 181, 0, 182, 183, 0, 184, 253, 254, 185,
	0, 191, 186, 187, 188, 190, 255, 189, 256, 0,
	192, 0, 193, 194, 195, 0, 257, 258, 259, 0,
	0, 196, 260, 261, 0, 197, 198, 199, 200, 83,
	0, 201, 202, 203, 0, 204, 0, 205, 206, 207,
	262, 263, 0, 0, 208, 86, 87, 0, 88, 209,
	210, 211, 212, 213, 0, 0, 0, 0, 89, 90,
	91, 214, 215, 216, 217, 92, 218, 219, 0, 93,
	220, 221, 94, 0, 0, 222, 223, 224, 0, 225,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 267, 106, 226, 107, 227, 228,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 229, 113, 114, 230, 231, 0,
	0, 0, 115, 116, 232, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 233, 0, 234, 0, 120, 121,
	122, 123, 488, 236, 0, 0, 127, 0, 124, 0,
	0, 125, 237, 126, 238, 239, 240, 0, 241, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 242,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 243, 139, 0, 140, 141, 143, 142, 0,
	0, 0, 244, 144, 245, 145, 146, 0, 147, 0,
	0, 148, 0, 0, 149, 246, 0, 150, 0, 247,
	151, 152, 153, 154, 0, 248, 155, 249, 156, 0,
	157, 158, 159, 250, 160, 161, 0, 162, 163, 164,
	165, 166, 168, 169, 167, 170, 171, 0, 172, 0,
	173, 174, 251, 175, 0, 176, 177, 178, 179, 0,
	252, 180, 181, 0, 182, 183, 0, 184, 253, 254,
	185, 0, 191, 186, 187, 188, 190, 255, 189, 256,
	0, 192, 0, 193, 194, 195, 0, 257, 258, 259,
	0, 0, 196, 260, 261, 0, 197, 198, 199, 200,
	83, 0, 201, 202, 203, 0, 204, 0, 205, 206,
	207, 262, 263, 0, 0, 208, 86, 87, 0, 88,
	209, 210, 211, 212, 213, 0, 0, 0, 0, 89,
	90, 91, 214, 215, 216, 217, 92, 218, 219, 0,
	93, 220, 221, 94, 0, 0, 222, 223, 224, 0,
	225, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 267, 106, 226, 107, 227,
	228, 0, 108, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 229, 113, 114, 230, 231,
	0, 0, 0, 115, 116, 232, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 233, 0, 234, 0, 120,
	121, 122, 123, 235, 236, 0, 0, 127, 0, 124,
	0, 0, 125, 237, 126, 238, 239, 240, 0, 241,
	0, 0, 128, 0, 129, 130, 0, 132, 131, 0,
	242, 0, 133, 0, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 243, 139, 0, 140, 141, 143, 142,
	0, 0, 0, 244, 144, 245, 145, 146, 0, 147,
	0, 0, 148, 0, 0, 149, 246, 0, 150, 0,
	247, 151, 152, 153, 154, 0, 248, 155, 249, 156,
	0, 157, 158, 159, 250, 469, 161, 0, 162, 163,
	164, 165, 166, 168, 169, 167, 170, 171, 0, 172,
	0, 173, 174, 251, 175, 0, 176, 177, 178, 179,
	0, 252, 180, 181, 0, 182, 183, 0, 184, 253,
	254, 185, 0, 191, 186, 187, 188, 190, 255, 189,
	256, 0, 192, 0, 193, 194, 195, 0, 257, 258,
	259, 0, 0, 196, 260, 261, 0, 197, 198, 199,
	200, 83, 0, 201, 202, 203, 0, 204, 0, 205,
	206, 207, 262, 263, 0, 0, 208, 86, 87, 0,
	88, 209, 210, 211, 212, 213, 0, 0, 0, 0,
	89, 90, 91, 214, 215, 216, 217, 92, 218, 219,
	0, 93, 220, 221, 94, 0, 0, 222, 223, 224,
	0, 225, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 226, 107,
	227, 228, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 229, 113, 114, 230,
	231, 0, 0, 0, 115, 116, 232, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 233, 0, 234, 0,
	120, 121, 122, 123, 235, 236, 0, 0, 127, 0,
	124, 0, 0, 125, 237, 126, 238, 239, 240, 0,
	241, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 242, 0, 133, 0, 0, 412, 0, 0, 135,
	0, 136, 137, 138, 243, 420, 0, 140, 141, 143,
	142, 0, 0, 0, 244, 144, 245, 145, 146, 0,
	147, 0, 0, 148, 0, 0, 149, 246, 0, 150,
	0, 247, 151, 152, 153, 154, 0, 248, 155, 249,
	156, 0, 157, 158, 159, 250, 160, 161, 0, 162,
	163, 164, 165, 166, 168, 169, 167, 170, 171, 0,
	172, 0, 173, 174, 414, 175, 0, 176, 177, 178,
	179, 0, 252, 180, 413, 0, 182, 183, 0, 184,
	253, 254, 185, 0, 191, 186, 187, 188, 190, 255,
	189, 256, 0, 192, 0, 193, 194, 195, 0, 419,
	258, 259, 0, 0, 415, 260, 261, 0, 197, 198,
	199, 200, 83, 0, 201, 202, 203, 0, 204, 0,
	205, 206, 207, 262, 263, 0, 0, 208, 86, 87,
	0, 88, 209, 210, 211, 212, 213, 0, 0, 0,
	0, 89, 90, 91, 214, 215, 216, 217, 92, 218,
	219, 0, 93, 220, 221, 94, 0, 0, 222, 223,
	224, 0, 225, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 267, 106, 226,
	107, 227, 228, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 229, 113, 114,
	230, 231, 0, 0, 0, 115, 116, 232, 0, 117,
	0, 118, 0, 0, 0, 0, 119, 233, 0, 234,
	0, 120, 121, 122, 123, 235, 236, 0, 0, 127,
	0, 124, 0, 0, 125, 237, 126, 238, 239, 240,
	0, 241, 0, 0, 128, 0, 129, 130, 0, 132,
	131, 0, 242, 0, 133, 0, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 243, 139, 0, 140, 141,
	143, 142, 0, 0, 0, 244, 144, 245, 145, 146,
	0, 147, 0, 0, 148, 0, 0, 149, 246, 0,
	150, 0, 247, 151, 152, 0, 154, 0, 248, 155,
	249, 156, 0, 157, 0, 159, 250, 160, 161, 0,
	162, 163, 164, 165, 166, 168, 169, 167, 170, 171,
	0, 172, 0, 173, 174, 251, 0, 0, 176, 177,
	178, 179, 0, 252, 180, 181, 0, 182, 183, 0,
	184, 253, 254, 185, 0, 191, 186, 187, 188, 190,
	255, 189, 256, 0, 192, 0, 193, 194, 195, 0,
	257, 258, 259, 0, 0, 196, 260, 261, 0, 197,
	198, 199, 200, 0, 0, 201, 202, 203, 0, 204,
	0, 205, 206, 207, 262, 263, 0, 0, 208, 0,
	0, 0, 0, 209, 210, 211, 212, 908, 909, 0,
	928, 929, 930, 938, 939, 940, 0, 0, 0, 0,
	0, 0, 0, 931, 0, 0, 0, 0, 0, 0,
	911, 0, 0, 942, 0, 0, 0, 0, 908, 909,
	0, 928, 929, 930, 938, 939, 940, 0, 0, 0,
	0, 0, 910, 0, 931, 0, 0, 0, 925, 0,
	0, 911, 0, 0, 942, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 910, 0, 0, 0, 0, 0, 925,
	0, 0, 0, 0, 0, 0, 0, 0, 908, 909,
	0, 928, 929, 930, 938, 939, 940, 916, 0, 0,
	0, 0, 0, 0, 931, 0, 0, 0, 0, 0,
	0, 911, 0, 0, 942, 0, 935, 943, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 916, 0,
	0, 0, 941, 910, 0, 0, 0, 0, 0, 925,
	0, 0, 0, 0, 933, 0, 0, 935, 943, 0,
	926, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 941, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 932, 933, 0, 0, 0, 0,
	0, 926, 0, 0, 0, 0, 0, 0, 916, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 932, 0, 935, 943, 0,
	0, 0, 0, 0, 0, 0, 927, 0, 0, 0,
	0, 0, 0, 941, 0, 0, 0, 0, 936, 0,
	0, 0, 0, 0, 0, 933, 0, 0, 0, 0,
	0, 926, 0, 0, 0, 0, 0, 927, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 936,
	0, 0, 0, 0, 0, 932, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 934, 0, 0, 922,
	923, 924, 0, 921, 918, 919, 920, 912, 913, 914,
	915, 917, 0, 937, 0, 0, 0, 927, 0, 0,
	1511, 0, 0, 0, 0, 0, 0, 934, 0, 936,
	922, 923, 924, 0, 921, 918, 919, 920, 912, 913,
	914, 915, 917, 0, 937, 0, 0, 0, 0, 0,
	0, 1463, 0, 0, 0, 0, 0, 0, 908, 909,
	0, 928, 929, 930, 938, 939, 940, 0, 0, 0,
	0, 0, 0, 0, 931, 0, 0, 0, 0, 0,
	0, 911, 0, 0, 942, 0, 0, 934, 0, 0,
	922, 923, 924, 0, 921, 918, 919, 920, 912, 913,
	914, 915, 917, 910, 937, 0, 0, 0, 1982, 925,
	908, 909, 0, 928, 929, 930, 938, 939, 940, 0,
	0, 0, 0, 0, 0, 0, 931, 0, 0, 0,
	0, 0, 0, 911, 0, 0, 942, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 908, 909, 0, 928,
	929, 930, 938, 939, 940, 910, 0, 0, 916, 0,
	0, 925, 931, 0, 0, 0, 0, 0, 0, 911,
	0, 0, 942, 0, 0, 0, 0, 935, 943, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 910, 0, 941, 0, 0, 0, 925, 0, 0,
	0, 0, 0, 0, 0, 933, 0, 0, 0, 0,
	916, 926, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1471, 1472, 0, 1489, 1490, 1491, 0, 935,
	943, 0, 0, 0, 0, 932, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 941, 916, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 933, 0, 0,
	0, 0, 0, 926, 0, 935, 943, 0, 0, 0,
	0, 0, 0, 1486, 0, 0, 0, 927, 0, 0,
	0, 941, 0, 0, 0, 0, 0, 932, 0, 936,
	0, 0, 0, 933, 0, 0, 0, 0, 0, 926,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1477, 932, 0, 0, 0, 0, 0, 927,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 936, 0, 0, 0, 0, 0, 934, 0, 0,
	922, 923, 924, 0, 921, 918, 919, 920, 912, 913,
	914, 915, 917, 0, 937, 927, 0, 0, 1980, 0,
	0, 0, 0, 0, 0, 1487, 0, 936, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 934,
	0, 0, 922, 923, 924, 0, 921, 918, 919, 920,
	912, 913, 914, 915, 917, 0, 937, 0, 0, 0,
	1953, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 934, 0, 0, 922, 923,
	924, 1488, 921, 918, 919, 920, 912, 913, 914, 915,
	917, 0, 937, 0, 908, 909, 1923, 928, 929, 930,
	938, 939, 940, 0, 0, 0, 0, 0, 0, 0,
	931, 0, 0, 0, 0, 0, 0, 911, 0, 0,
	942, 0, 0, 0, 0, 908, 909, 0, 928, 929,
	930, 938, 939, 940, 0, 0, 0, 0, 0, 910,
	0, 931, 0, 0, 0, 925, 0, 0, 911, 0,
	0, 942, 0, 0, 1483, 1484, 1485, 0, 1482, 1479,
	1480, 1481, 1473, 1474, 1475, 1476, 1478, 0, 0, 0,
	910, 0, 0, 0, 0, 0, 925, 0, 0, 0,
	1471, 1472, 0, 1489, 1490, 1491, 0, 0, 0, 0,
	0, 0, 0, 0, 916, 0, 1632, 0, 0, 0,
	0, 908, 909, 0, 928, 929, 930, 938, 939, 940,
	0, 0, 0, 935, 943, 0, 0, 931, 0, 0,
	0, 0, 0, 0, 911, 916, 0, 942, 0, 941,
	0, 1486, 908, 909, 0, 928, 929, 930, 938, 939,
	940, 933, 0, 0, 935, 943, 910, 926, 931, 0,
	0, 0, 925, 0, 0, 911, 0, 0, 942, 0,
	941, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 932, 933, 0, 0, 0, 0, 910, 926, 0,
	1477, 0, 0, 925, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 916, 932, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 927, 0, 1492, 0, 0, 0, 0,
	935, 943, 0, 0, 0, 936, 0, 0, 0, 0,
	0, 0, 916, 1487, 0, 0, 941, 0, 0, 0,
	0, 0, 0, 0, 927, 0, 0, 0, 933, 0,
	0, 935, 943, 0, 926, 0, 936, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 941, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 932, 933,
	0, 0, 0, 934, 0, 926, 922, 923, 924, 0,
	921, 918, 919, 920, 912, 913, 914, 915, 917, 1488,
	937, 0, 0, 0, 1918, 0, 0, 0, 0, 932,
	0, 0, 0, 0, 934, 0, 0, 922, 923, 924,
	927, 921, 918, 919, 920, 912, 913, 914, 915, 917,
	0, 937, 936, 0, 0, 1914, 0, 0, 0, 0,
	0, 908, 909, 0, 928, 929, 930, 938, 939, 940,
	0, 927, 0, 0, 0, 0, 0, 931, 0, 0,
	0, 0, 0, 936, 911, 0, 0, 942, 0, 0,
	0, 0, 1483, 1484, 1485, 0, 1482, 1479, 1480, 1481,
	1473, 1474, 1475, 1476, 1478, 0, 910, 0, 0, 0,
	934, 0, 925, 922, 923, 924, 0, 921, 918, 919,
	920, 912, 913, 914, 915, 917, 0, 937, 0, 0,
	0, 1833, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 934, 0, 0, 922, 923, 924, 0, 921, 918,
	919, 920, 912, 913, 914, 915, 917, 0, 937, 0,
	0, 916, 1832, 0, 0, 0, 908, 909, 0, 928,
	929, 930, 938, 939, 940, 0, 0, 0, 0, 0,
	935, 943, 931, 0, 0, 0, 0, 0, 0, 911,
	0, 0, 942, 0, 0, 0, 941, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 933, 0,
	0, 910, 0, 0, 926, 0, 0, 925, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 932, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 916, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	927, 0, 0, 0, 0, 935, 943, 0, 0, 0,
	0, 0, 936, 0, 0, 0, 0, 0, 0, 0,
	0, 941, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 933, 0, 0, 0, 0, 0, 926,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 932, 0, 0, 0, 0, 0, 0,
	934, 0, 0, 922, 923, 924, 0, 921, 918, 919,
	920, 912, 913, 914, 915, 917, 0, 937, 0, 0,
	0, 1722, 0, 908, 909, 0, 928, 929, 930, 938,
	939, 940, 0, 0, 0, 927, 0, 0, 0, 931,
	0, 0, 0, 0, 0, 0, 911, 936, 0, 942,
	0, 0, 0, 0, 0, 908, 909, 0, 928, 929,
	930, 938, 939, 940, 0, 0, 0, 0, 910, 0,
	0, 931, 0, 0, 925, 0, 0, 0, 911, 0,
	0, 942, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	910, 0, 0, 0, 0, 934, 925, 0, 922, 923,
	924, 0, 921, 918, 919, 920, 912, 913, 914, 915,
	917, 0, 937, 916, 0, 0, 1656, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 935, 943, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 916, 0, 0, 941, 0,
	0, 908, 909, 0, 928, 929, 930, 938, 939, 940,
	933, 0, 0, 0, 935, 943, 926, 931, 0, 0,
	0, 0, 0, 0, 911, 0, 0, 942, 0, 0,
	941, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	932, 0, 933, 0, 0, 0, 910, 0, 926, 0,
	0, 0, 925, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 932, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 927, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 936, 0, 0, 0, 0, 0,
	0, 916, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 927, 0, 0, 0, 0, 0,
	935, 943, 0, 0, 0, 0, 936, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 941, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 933, 0,
	0, 0, 934, 0, 926, 922, 923, 924, 0, 921,
	918, 919, 920, 912, 913, 914, 915, 917, 0, 937,
	0, 0, 0, 1640, 0, 0, 0, 0, 932, 0,
	0, 0, 0, 0, 934, 0, 0, 922, 923, 924,
	0, 921, 918, 919, 920, 912, 913, 914, 915, 917,
	0, 937, 0, 0, 0, 1225, 0, 0, 0, 0,
	908, 909, 0, 928, 929, 930, 938, 939, 940, 0,
	927, 0, 0, 0, 0, 0, 931, 0, 0, 0,
	0, 0, 936, 911, 0, 0, 942, 0, 0, 0,
	0, 908, 909, 0, 928, 929, 930, 938, 939, 940,
	0, 0, 0, 0, 0, 910, 0, 931, 0, 0,
	0, 925, 0, 0, 911, 0, 0, 942, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 910, 0, 0, 0,
	934, 0, 925, 922, 923, 924, 0, 921, 918, 919,
	920, 912, 913, 914, 915, 917, 0, 937, 0, 1438,
	916, 2063, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 935,
	943, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 916, 0, 1503, 0, 941, 1502, 0, 908, 909,
	0, 928, 929, 930, 938, 939, 940, 933, 0, 0,
	935, 943, 0, 926, 931, 0, 0, 0, 0, 1141,
	0, 911, 0, 0, 942, 0, 941, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 932, 933, 0,
	0, 0, 0, 910, 926, 0, 0, 0, 0, 925,
	0, 2062, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 932, 0,
	0, 0, 0, 0, 0, 0, 0, 1142, 0, 927,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 936, 0, 0, 0, 0, 0, 0, 916, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	927, 0, 0, 0, 0, 0, 0, 935, 943, 0,
	0, 0, 936, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 941, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 933, 0, 0, 0, 934,
	0, 926, 922, 923, 924, 0, 921, 918, 919, 920,
	912, 913, 914, 915, 917, 0, 937, 0, 0, 0,
	0, 0, 0, 0, 0, 932, 0, 0, 0, 0,
	934, 0, 0, 922, 923, 924, 0, 921, 918, 919,
	920, 912, 913, 914, 915, 917, 0, 937, 0, 946,
	0, 0, 0, 0, 0, 908, 909, 0, 928, 929,
	930, 938, 939, 940, 0, 0, 0, 927, 0, 0,
	0, 931, 0, 0, 0, 945, 0, 0, 911, 936,
	0, 942, 0, 0, 0, 0, 0, 908, 909, 0,
	928, 929, 930, 938, 939, 940, 0, 0, 0, 0,
	910, 0, 0, 931, 0, 0, 925, 0, 0, 0,
	911, 0, 0, 942, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 910, 0, 0, 0, 0, 934, 925, 0,
	922, 923, 924, 0, 921, 918, 919, 920, 912, 913,
	914, 915, 917, 0, 937, 916, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 935, 943, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 916, 908, 909,
	941, 928, 929, 930, 938, 939, 940, 0, 0, 0,
	0, 0, 933, 0, 931, 0, 935, 943, 926, 0,
	0, 911, 0, 0, 942, 0, 0, 0, 0, 0,
	0, 0, 941, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 932, 910, 933, 0, 0, 0, 0, 925,
	926, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 932, 464, 0, 0, 0, 0,
	0, 0, 0, 0, 927, 0, 0, 908, 909, 0,
	928, 929, 930, 938, 939, 940, 936, 0, 916, 0,
	0, 0, 0, 931, 0, 0, 0, 0, 0, 0,
	911, 0, 0, 942, 0, 0, 927, 935, 943, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 936, 0,
	0, 0, 910, 941, 0, 0, 0, 0, 925, 0,
	0, 0, 0, 0, 0, 933, 0, 0, 0, 0,
	0, 926, 0, 0, 934, 0, 0, 922, 923, 924,
	0, 921, 918, 919, 920, 912, 913, 914, 915, 917,
	0, 937, 0, 0, 0, 932, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 934, 916, 0, 922,
	923, 924, 1509, 921, 918, 919, 920, 912, 913, 914,
	915, 917, 0, 937, 0, 0, 935, 943, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 927, 0, 0,
	0, 0, 941, 0, 0, 0, 0, 0, 0, 936,
	0, 0, 0, 0, 933, 0, 0, 0, 0, 0,
	926, 0, 0, 0, 0, 0, 0, 0, 0, 1644,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 932, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 934, 0, 0,
	922, 923, 924, 0, 921, 918, 919, 920, 912, 913,
	914, 915, 917, 0, 937, 0, 927, 908, 909, 0,
	928, 929, 930, 938, 939, 940, 0, 0, 936, 0,
	0, 0, 0, 931, 0, 0, 0, 1504, 0, 0,
	911, 0, 0, 942, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 910, 0, 0, 0, 0, 0, 925, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 934, 0, 0, 922,
	923, 924, 0, 921, 918, 919, 920, 912, 913, 914,
	915, 917, 0, 937, 0, 908, 909, 0, 928, 929,
	930, 938, 939, 940, 0, 0, 0, 916, 0, 0,
	0, 931, 0, 0, 0, 0, 0, 0, 911, 0,
	0, 942, 0, 0, 0, 0, 935, 943, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	910, 0, 941, 0, 0, 0, 925, 0, 0, 0,
	0, 0, 0, 0, 933, 0, 0, 0, 0, 0,
	926, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 932, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 916, 0, 0, 0, 0,
	0, 0, 908, 909, 0, 928, 929, 930, 938, 939,
	940, 0, 0, 0, 935, 943, 0, 0, 931, 0,
	0, 0, 1462, 0, 0, 911, 927, 0, 942, 0,
	941, 0, 0, 0, 0, 0, 0, 0, 936, 0,
	0, 0, 933, 0, 0, 0, 0, 910, 926, 0,
	0, 0, 0, 925, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 932, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 934, 0, 0, 922,
	923, 924, 916, 921, 918, 919, 920, 912, 913, 914,
	915, 917, 0, 937, 927, 0, 0, 0, 0, 0,
	0, 935, 943, 0, 0, 0, 936, 0, 0, 0,
	0, 0, 0, 0, 0, 908, 909, 941, 928, 929,
	930, 938, 939, 940, 0, 0, 0, 0, 0, 933,
	0, 931, 0, 0, 0, 926, 0, 0, 911, 0,
	0, 942, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 932,
	910, 0, 0, 0, 934, 0, 925, 922, 923, 924,
	0, 921, 918, 919, 920, 912, 913, 914, 915, 917,
	0, 937, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 908, 909, 0, 928, 929, 930, 938, 939, 940,
	0, 927, 0, 0, 0, 0, 0, 931, 0, 0,
	0, 0, 0, 936, 911, 916, 0, 942, 0, 0,
	0, 908, 909, 0, 928, 929, 930, 938, 939, 940,
	0, 0, 0, 0, 935, 943, 910, 0, 0, 0,
	0, 0, 925, 0, 911, 0, 0, 942, 0, 0,
	941, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 933, 0, 0, 0, 910, 0, 926, 0,
	0, 934, 925, 0, 922, 923, 924, 0, 921, 918,
	919, 920, 912, 913, 914, 915, 917, 0, 937, 0,
	0, 916, 932, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	935, 943, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 916, 0, 0, 908, 909, 941, 928, 929, 930,
	938, 939, 940, 0, 927, 0, 0, 0, 933, 0,
	935, 943, 0, 0, 926, 0, 936, 911, 0, 0,
	942, 0, 0, 0, 0, 0, 941, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 933, 910,
	0, 0, 0, 0, 926, 925, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 934, 0, 0, 922, 923, 924,
	927, 921, 918, 919, 920, 912, 913, 914, 915, 917,
	0, 937, 936, 0, 916, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	927, 0, 0, 935, 943, 0, 0, 0, 0, 0,
	0, 0, 936, 0, 0, 0, 0, 0, 0, 0,
	0, 794, 786, 811, 779, 802, 801, 0, 0, 781,
	780, 933, 0, 0, 813, 812, 0, 926, 0, 0,
	934, 0, 0, 922, 923, 924, 0, 921, 918, 919,
	920, 912, 913, 914, 915, 917, 0, 937, 0, 0,
	0, 0, 0, 0, 0, 807, 0, 799, 798, 0,
	934, 0, 0, 922, 923, 924, 797, 921, 918, 919,
	920, 912, 913, 914, 915, 917, 0, 937, 0, 0,
	0, 0, 0, 796, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 927, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 936, 0, 0, 0, 0,
	0, 789, 788, 790, 791, 792, 0, 810, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 783, 0, 0, 0, 0, 0, 794, 786, 811,
	779, 802, 801, 800, 0, 781, 780, 787, 0, 0,
	813, 812, 0, 934, 0, 0, 922, 923, 924, 0,
	921, 918, 919, 920, 912, 913, 914, 915, 917, 0,
	937, 0, 795, 0, 0, 0, 1160, 1158, 1159, 1162,
	1161, 807, 0, 799, 798, 0, 0, 0, 0, 0,
	0, 0, 797, 0, 0, 0, 0, 0, 0, 784,
	0, 0, 0, 0, 0, 0, 0, 793, 785, 796,
	0, 0, 0, 0, 0, 0, 815, 0, 0, 0,
	0, 0, 0, 0, 782, 0, 0, 808, 809, 0,
	0, 0, 0, 0, 0, 0, 0, 789, 788, 790,
	791, 792, 0, 810, 0, 0, 0, 0, 0, 0,
	0, 814, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 783, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 800,
	0, 0, 0, 787, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 795, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 784, 0, 0, 0, 0,
	0, 0, 0, 793, 785, 0, 0, 0, 0, 0,
	0, 0, 815, 0, 0, 0, 0, 0, 0, 0,
	782, 0, 0, 808, 809, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 814,
}
var sqlPact = [...]int{

	3583, -1000, 34, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 780, 15297,
	15297, 18850, -1000, -1000, -1000, -1000, -1000, -1000, 695, 737,
	741, 5032, 18850, 18850, 18579, 849, 849, 20205, -1000, -1000,
	23457, -1000, 2467, 524, 535, 524, 524, 581, 20205, 698,
	656, 135, -1000, 672, 2, 23186, 18850, 1362, 31, 17224,
	319, 3583, 18308, 22915, 18850, 18037, 640, 29, 15855, 18850,
	-1000, 36, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1223, 347, 36, -1000, 1221, 1106,
	1103, 17224, 22644, 22373, 22102, 21831, -1000, 11908, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 819,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 331, 329, -1000, 17766, -1000, 975, -1000, 30, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 972, -1000, 18850,
	-1000, -1000, 21560, 21289, 322, 952, -1000, -1000, 575, 417,
	1378, -1000, 41, -1000, -1000, -1000, 1220, -1000, 970, 1219,
	1218, 1216, 1215, 1214, 1213, 416, 874, 489, -1000, 952,
	-1000, 952, -1000, -1000, -1000, 629, 20205, -1000, 17224, -1000,
	21018, 18850, 18850, 1121, 20747, -1000, 672, -1000, -1000, -1000,
	980, 1360, 1360, 1360, 1403, 139, 137, 135, 18, 18850,
	-1000, 321, 18, 7136, 7136, -1000, -1000, 319, -1000, 368,
	14731, -1000, 8372, -1000, 857, 1271, 446, 776, 1270, -54,
	844, 841, 1269, 15584, 15855, 29, 28, -1000, -1000, -1000,
	4737, 15584, 722, 13918, 36, -1000, -1000, -1000, 17224, 18850,
	18850, 751, 20476, -1000, 1268, 125, 1267, -1000, 121, 1266,
	-1000, 121, 1265, 10, -1000, -1000, -1000, -1000, -1000, -1000,
	319, 17495, 18850, 1518, 27340, -1000, 10178, -1000, -1000, 15297,
	872, 15297, -1000, -1000, 1514, -1000, 10178, -1000, 27, 26,
	1056, 1076, 12489, 12205, 1323, 1381, -1000, -1000, -1000, 40,
	5032, 18850, 1229, 15297, 18850, 18850, 18850, 18850, 18850, 18850,
	-1000, 1054, -1000, -1000, 18850, 18850, -1000, 24, 22, -1000,
	20205, -1000, 127, -1000, 314, 1031, 424, 144, 19934, 424,
	1027, -1000, 980, -1000, 978, 1051, 9287, 10178, 135, -1000,
	-1000, 135, 135, 10178, -1000, -1000, 18850, 18, 1509, 18850,
	100, -1000, 26115, -1000, -1000, 10178, 10178, 10178, 10178, 10178,
	924, 361, -1000, 313, 306, 5945, -1000, -1000, 1591, -1000,
	-1000, -1000, 141, -1000, -1000, 10178, 36, -1000, -1000, -1000,
	-1000, 305, 1618, -1000, 415, -1000, -1000, -1000, 422, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1228, 301,
	299, -1000, -1000, -1000, -1000, 298, 297, 294, 290, 289,
	287, 286, 269, 268, 266, 263, 258, 255, 253, 244,
	882, -1000, 447, -1000, -1000, 447, 447, -1000, 236, 236,
	240, -1000, -1000, -1000, -1000, 236, -1000, -1000, -1000, 406,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 241, 100, -1000,
	-1000, -1000, 18850, 9, -1000, 26885, -1000, 8, 904, -1000,
	16682, 1468, 1357, 1332, 17224, 1446, 1429, 628, 18850, 18850,
	627, 626, 17224, 402, -1000, -1000, -1000, 18850, -1000, -1000,
	-57, -1000, -1000, 1212, 5, -1000, -1000, 430, 103, 1499,
	103, 14189, -1000, 18850, 18850, -1000, 18850, -1000, -1000, 18850,
	-1000, 18850, 18850, -1000, 18850, 142, 16140, 864, 1264, 711,
	2, 4, -1000, 1523, -1000, -1000, -1000, -1000, 82, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 240, 882, 236, 236,
	236, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 406, -1000,
	-1000, 447, 447, 447, -1000, -1000, 0, 26885, 624, -1000,
	1209, 517, -1, 877, 1095, 773, -1000, -1000, -1000, -1000,
	17, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1568, -1000, -1000, 1590, 17, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1610, 5032, -1000, -1000, -1000,
	18850, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 877, 1095, -1000, -1000, 17224, 16411, 1487, 1262, 916,
	-1000, 1486, 18850, 969, 1022, -1000, 675, 1260, -1000, -1000,
	-1000, -1000, 26885, -1000, 26885, 820, 1101, -1000, 1101, 16,
	-1000, 25908, -1000, 233, -11, 430, 7136, 13631, 27204, 27340,
	18850, 669, 10178, 10178, 10178, 10178, 10178, 10178, 10178, 10178,
	10178, 10178, 10178, 10178, 10178, 10178, 10178, 10178, 10178, 10178,
	10178, 10178, 10178, 10178, 961, 10178, 610, 10178, 10178, 10178,
	10178, 912, 944, 212, 965, 5032, -1000, -1000, 663, 663,
	663, 26991, 26991, 218, 361, -1000, 10178, -1000, 8966, 137,
	25455, 13, -1000, -1000, -1000, 6836, 437, 26885, 36, 5327,
	-1000, 1588, 708, 1236, 1182, 232, 136, 118, 10178, 10178,
	10475, 10475, 10178, 10772, 10178, 10178, 6242, 10178, 10178, 10178,
	10178, 10178, 10178, -1000, 230, -1000, -1000, -1000, -1000, 1587,
	-1000, -1000, 1585, -1000, 652, 645, 1584, 430, 114, 8372,
	-1000, 864, 18850, 18850, 18850, -1000, -1000, 1018, 19663, 1014,
	27340, 18850, -1000, 227, 226, 1085, 1083, 18850, 18850, 19392,
	19121, 18850, 847, 222, 220, 18850, 836, -1000, 18850, 18850,
	825, 1157, 984, -1000, 425, 15584, 720, 1203, 18850, 812,
	10178, 894, -1000, 13344, 450, 18850, 830, 64, -1000, -1000,
	-1000, 397, 18850, -1000, -1000, -1000, 125, -1000, 121, 121,
	-1000, -1000, 17224, -1000, -1000, -1000, -1000, -1000, -1000, 27340,
	359, 358, -1000, 1582, 600, -1000, 591, 589, 587, -1000,
	215, -1000, 10178, 18850, 18850, 1095, -1000, -1000, -1000, -1000,
	733, -1000, 868, -1000, 12773, -1000, -1000, -1000, -1000, -12,
	-1000, -1000, -1000, -1000, 113, -15, 12, 27340, -1000, -1000,
	-1000, -1000, -1000, 18850, 252, 18850, 2, 18850, -1000, 1605,
	2, 18850, 1258, 1282, 394, 18850, -1000, -1000, -1000, 10178,
	-1000, -1000, -1000, 2, -1000, 1172, -1000, -61, 1207, 1339,
	-120, 120, 404, -1000, 13057, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 413, 525, 525, 601, 601,
	601, 601, 833, 833, 2225, 283, 2451, 2451, 2451, 375,
	333, 333, 2451, 2451, 2451, 26991, 26961, 208, 10178, 10178,
	567, 930, 212, 208, 10178, 1560, 208, 208, 208, -1000,
	768, -1000, -1000, -1000, 1202, 211, 10772, 10772, -1000, -1000,
	-1000, 5945, 11366, -1000, -1000, -1000, -1000, -1000, 206, 10178,
	-1000, 25561, -165, -16, -1000, -1000, 10178, -90, -96, -1000,
	-1000, 630, -1000, 10178, -1000, 3, 10178, 10178, 10178, 111,
	109, -1000, 927, 204, 189, 10178, -1000, -1000, 26752, 24048,
	107, 1199, -85, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	106, 105, 26645, -85, 104, 3805, -1000, 10772, 10772, 10772,
	5945, 188, 99, 25801, -85, 26557, 8669, 8669, 8669, 97,
	26337, 10178, -85, 24017, 3734, 3469, -23, -25, -31, 1576,
	-33, 96, 412, 409, 95, 1172, -1000, -1000, -1000, -1000,
	564, 563, 1257, -1000, 1006, -1000, 456, -1000, 706, 10178,
	18850, 187, 186, 932, -1000, 1254, 1019, 1253, 1019, -1000,
	8, 790, 10178, 10178, -1000, 560, -1000, -1000, 553, 425,
	1194, 682, -1000, 951, -1000, -1000, 713, -1000, -1000, 6539,
	26885, -1000, 828, 1337, -37, -1000, -1000, 7136, 430, 14189,
	13631, 8372, -38, -1000, -1000, -1000, 864, -1000, 433, 1574,
	87, 1040, 934, 838, 762, 1573, 26885, -12, -12, -1000,
	-1000, -1000, -1000, -1000, 18850, 1129, -1000, 16411, 184, 18850,
	181, -1000, 177, -1000, -1000, 174, 18850, 1077, 394, 15584,
	-1000, 424, -1000, 86, 1162, 1383, -1000, 13631, 1090, 1089,
	13631, 954, 929, 929, 929, -1000, 173, 178, 404, 4133,
	10178, 16953, 936, 58, 85, 1207, 10178, 208, 208, 10178,
	10772, 10772, -1000, 208, -1000, -1000, -1000, -1000, 1193, 171,
	10178, 27340, 24850, 3261, -39, -1000, 8051, -13, -1000, 10178,
	-1000, 25423, -1000, -1000, 302, 1278, -1000, 10178, 26248, 84,
	7754, -1000, 26147, -17, -17, -1000, 1603, -1000, 14460, 431,
	935, 25216, 27204, 27340, -1000, 10178, -1000, -1000, 1192, 10178,
	-1000, 27204, 27340, 10772, 10772, 10772, 10772, 10772, 10772, 10772,
	10772, 10772, 10772, 10772, 10772, 10772, 10772, 10772, 10772, 10772,
	10772, 10772, 1068, 10772, 1558, 1558, 1558, -20, 7433, -1000,
	1227, 1192, 10178, 10178, 27340, 80, 78, 76, -1000, 10178,
	-85, 10178, 10178, 10178, -1000, -1000, -1000, 71, -1000, 1572,
	-1000, -1000, -1000, -1000, 1162, 18850, 18850, 18850, 1250, -1000,
	2116, -1000, 25111, -43, 18850, 18850, -1000, 1099, 1119, 508,
	18850, -1000, 18850, -1000, 18850, 18850, 18850, -56, -62, 18850,
	18850, -1000, 15584, 644, 169, -1000, -55, -1000, 7136, 210,
	2, -55, 812, -1000, -24, -1000, 395, -1000, 346, 345,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 70, -1000,
	-1000, 1150, -1000, 11637, 168, 18850, 16411, 1483, 11637, 968,
	1079, 394, 15584, -1000, 675, -1000, 427, 10178, 10178, 1207,
	13631, 13631, 2309, 1087, 13631, -1000, -1000, -1000, -1000, 343,
	352, 342, 11908, 16953, -1000, 1571, 1107, -63, -1000, -1000,
	18850, 167, -1000, 404, 488, 208, 3029, 616, 10178, 27340,
	27094, -68, 10178, 10178, -1000, -69, -1000, 10178, 337, 26885,
	-1000, -1000, -1000, 26885, 10178, 1594, 10178, 63, 61, 60,
	-1000, -1000, -1000, 23728, 10178, 57, -1000, 55, 54, 26885,
	1227, 26885, -1000, -1000, 799, 799, 1558, 1558, 1558, 1558,
	2101, 2101, 590, 958, 2054, 2054, 2054, 2208, 463, 463,
	2054, 2054, 2054, 1191, 1075, 165, 3837, 10178, -70, -1000,
	-1000, -1000, 26885, 26885, 53, -1000, -1000, -1000, -85, 3234,
	24902, 24871, -1000, 52, 427, -1000, -1000, -1000, 18850, -1000,
	18850, -1000, 18850, 18850, 1176, 997, -1000, -1000, 1080, 164,
	10772, 18850, -1000, 898, -74, -81, 996, -1000, 992, 10178,
	-1000, 27340, 1019, 1019, -1000, 546, 542, -1000, -1000, -1000,
	-1000, -32, 15026, 1599, -55, 1288, 18850, 1331, -1000, -1000,
	163, -1000, -1000, -1000, 915, -86, -1000, 300, 1349, 10178,
	-1000, -1000, 161, 11637, -91, 50, 2, -97, 18850, -1000,
	394, 15584, -1000, 1282, -1000, 18850, 26885, -85, -1000, 2309,
	-1000, 158, 10178, 13631, -1000, -120, -1000, -99, -1000, 404,
	-103, -1000, 336, -160, -1000, 393, -1000, 404, 157, 18850,
	16953, 10178, 10178, 27094, -107, -1000, 208, 208, -1000, 24795,
	-1000, 26885, -1000, 26147, -1000, -1000, -1000, 899, -1000, 24764,
	-1000, -1000, -1000, -1000, 10772, 1189, 156, 27340, 24456, -1000,
	-1000, 10178, -1000, -1000, -1000, -1000, -1000, 959, -1000, -1000,
	18850, 1005, -1000, -1000, 10178, 3837, 152, 1129, 150, -1000,
	-1000, -1000, 866, -1000, -1000, 26885, 1351, -1000, -1000, 18850,
	18850, -1000, 149, 36, -109, -1000, 391, 572, -118, 18850,
	-1000, -1000, 5648, 18850, 898, 11637, 1372, 36, 18850, 1372,
	24420, 5327, -124, -1000, 1129, -1000, 898, 148, 15584, -1000,
	1077, -67, -1000, 1482, -1000, 18850, 26885, -1000, 404, -1000,
	1570, 16953, 142, -1000, 1107, -1000, 4439, 16953, 18850, -126,
	-1000, 208, 208, -1000, -1000, 48, 935, 1371, -1000, 24532,
	10772, 27340, -128, -1000, 24368, -1000, -1000, 1246, 24108, 1043,
	18850, -1000, 18850, 18850, 458, 18850, -1000, -1000, 10178, 1599,
	-1000, -1000, 1595, 744, -1000, 430, -1000, 147, 1129, -1000,
	-1000, -1000, -1000, 1349, 3, 898, -1000, 1129, 11637, -1000,
	1079, 18850, 146, -130, 16953, -1000, -1000, 334, -1000, -1000,
	1565, -1000, -134, -1000, -1000, 837, 10178, 24532, -139, -1000,
	-1000, 1239, -1000, 946, 861, 47, -143, 144, -1000, 10178,
	-1000, -17, -1000, -1000, 14189, -1000, 18850, -1000, 1372, 45,
	1129, -1000, -145, -1000, -1000, -1000, -1000, -1000, 404, 209,
	-1000, 44, 9881, 9881, -85, -1000, 18850, -1000, 956, 955,
	681, -1000, -1000, -1000, -1000, -1000, 1043, 26885, 43, -125,
	-147, -1000, -1000, -1000, 898, 16953, -1000, -1000, -1000, -1000,
	11069, 974, 772, 25770, -1000, -1000, -1000, 1293, -1000, 478,
	1061, 1061, 946, 1594, -1000, 977, 1129, -1000, 1528, -1000,
	-1000, -1000, -1000, -1000, -1000, 1535, -1000, -1000, 1098, -1000,
	-1000, -1000, -1000, -1000, -1000, 9584, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1883, 1880, 1510, 1566, 1877, 1876, 1559, 1875, 1873,
	1871, 1863, 1862, 1859, 115, 1537, 1470, 21, 1418, 1858,
	117, 1857, 1855, 1854, 113, 1850, 1848, 1847, 64, 1843,
	1838, 1416, 1408, 1837, 1834, 110, 1832, 24, 1830, 106,
	1825, 39, 169, 2226, 146, 1824, 1818, 1806, 13, 122,
	96, 1805, 148, 1804, 1802, 62, 55, 34, 20, 1797,
	131, 128, 1246, 50, 1794, 1790, 151, 1789, 27, 36,
	712, 156, 157, 138, 137, 1783, 1782, 1781, 1780, 61,
	1774, 3, 1773, 1768, 14, 71, 22, 1767, 29, 49,
	1762, 1760, 142, 1758, 91, 123, 1405, 38, 133, 441,
	1754, 103, 12, 98, 1753, 1749, 1749, 144, 52, 1746,
	72, 95, 150, 1745, 63, 159, 82, 40, 81, 120,
	1744, 1743, 1742, 94, 1739, 124, 92, 1737, 1736, 99,
	1735, 145, 147, 1734, 1732, 139, 1730, 1729, 1728, 170,
	1726, 1724, 161, 1721, 10, 68, 90, 9, 1396, 1392,
	125, 83, 53, 16, 1720, 1956, 658, 17, 60, 102,
	88, 33, 105, 78, 85, 153, 41, 1719, 1718, 127,
	1717, 1715, 1710, 1708, 1707, 100, 1706, 1705, 97, 149,
	18, 8, 19, 112, 37, 84, 109, 130, 160, 126,
	1704, 108, 132, 69, 653, 1703, 1702, 1556, 134, 1700,
	1696, 1690, 1489, 1337, 1263, 101, 1688, 1687, 766, 727,
	1684, 1683, 86, 1681, 140, 1678, 1677, 154, 230, 25,
	1673, 56, 54, 121, 1672, 77, 0, 2245, 794, 1670,
	141, 93, 1668, 1667, 1666, 1665, 26, 2, 11, 5,
	6, 4, 35, 28, 1664, 1663, 143, 46, 89, 1658,
	158, 1655, 1650, 1646, 58, 1645, 23, 1644, 15, 1642,
	1640, 7, 1, 1639, 1634, 152, 1633, 119, 1632, 1413,
	1629, 155, 1628, 1627, 1458, 57, 107,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 50, 50, 49, 49, 49, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 47, 47,
	52, 52, 52, 54, 54, 51, 51, 46, 46, 5,
	5, 225, 225, 36, 36, 40, 40, 37, 38, 38,
	39, 39, 6, 6, 6, 7, 7, 7, 7, 7,
	7, 14, 15, 15, 15, 15, 15, 15, 15, 15,
	98, 98, 97, 97, 100, 100, 16, 16, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 193,
	193, 192, 19, 167, 167, 20, 20, 20, 20, 21,
	124, 124, 22, 22, 22, 22, 23, 27, 265, 265,
	265, 269, 269, 270, 270, 271, 271, 271, 271, 271,
	271, 271, 267, 267, 30, 30, 30, 30, 30, 143,
	139, 139, 141, 141, 141, 141, 61, 138, 138, 138,
	138, 140, 140, 140, 140, 218, 217, 217, 223, 223,
	223, 76, 76, 76, 76, 76, 77, 77, 77, 216,
	216, 216, 216, 224, 224, 224, 224, 224, 224, 78,
	78, 78, 222, 222, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 18, 266, 266, 268, 268, 32,
	32, 10, 10, 11, 11, 79, 79, 80, 80, 146,
	146, 146, 146, 81, 81, 53, 53, 53, 145, 234,
	234, 235, 235, 235, 235, 235, 235, 236, 236, 236,
	236, 236, 236, 236, 232, 232, 233, 230, 230, 231,
	231, 231, 231, 272, 272, 144, 144, 84, 84, 239,
	239, 239, 239, 237, 237, 237, 237, 237, 240, 238,
	241, 241, 241, 241, 241, 179, 179, 179, 34, 12,
	59, 59, 13, 9, 9, 128, 128, 88, 88, 184,
	184, 184, 69, 69, 48, 48, 48, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 129, 129,
	130, 130, 25, 29, 33, 33, 33, 33, 33, 274,
	274, 65, 65, 65, 65, 66, 66, 142, 142, 142,
	142, 142, 60, 8, 8, 55, 55, 56, 56, 57,
	57, 58, 58, 275, 275, 24, 24, 24, 24, 24,
	72, 72, 135, 135, 135, 137, 137, 136, 136, 136,
	114, 114, 114, 35, 93, 93, 102, 102, 103, 103,
	190, 104, 104, 28, 28, 43, 43, 41, 41, 41,
	41, 41, 41, 42, 42, 44, 44, 44, 44, 44,
	44, 44, 247, 247, 247, 250, 250, 246, 248, 248,
	249, 249, 273, 273, 115, 115, 115, 83, 82, 82,
	86, 86, 85, 87, 87, 183, 112, 112, 112, 112,
	131, 132, 132, 133, 133, 134, 134, 111, 111, 163,
	163, 45, 45, 92, 92, 94, 94, 153, 153, 153,
	154, 154, 152, 152, 152, 152, 185, 185, 185, 185,
	185, 185, 185, 185, 263, 263, 263, 264, 264, 182,
	182, 186, 186, 186, 186, 186, 186, 180, 180, 180,
	180, 181, 181, 191, 191, 118, 118, 118, 118, 116,
	116, 117, 117, 187, 187, 187, 187, 113, 113, 188,
	188, 188, 147, 147, 194, 194, 194, 212, 212, 91,
	91, 91, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 196, 196,
	196, 196, 198, 198, 198, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 211,
	211, 211, 211, 211, 199, 199, 206, 206, 207, 207,
	208, 209, 200, 200, 201, 201, 202, 203, 210, 210,
	210, 210, 214, 214, 204, 204, 204, 204, 204, 205,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 126, 126, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 157, 157, 157, 157,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 242, 242, 242, 242, 242, 242, 242, 244, 244,
	245, 245, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 251,
	251, 252, 252, 254, 254, 255, 255, 256, 257, 257,
	257, 258, 259, 259, 253, 253, 260, 260, 260, 261,
	261, 262, 262, 262, 262, 262, 169, 169, 169, 170,
	170, 171, 177, 177, 177, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 67, 67, 67, 67, 67, 99, 99, 166, 166,
	164, 164, 164, 168, 168, 119, 119, 213, 213, 213,
	213, 213, 213, 213, 120, 120, 120, 127, 121, 121,
	122, 122, 122, 122, 122, 122, 160, 161, 123, 123,
	123, 162, 162, 172, 176, 176, 175, 174, 174, 173,
	173, 150, 150, 151, 151, 149, 148, 108, 108, 107,
	107, 105, 105, 106, 106, 276, 276, 178, 178, 109,
	109, 110, 101, 101, 189, 189, 189, 189, 95, 95,
	74, 74, 96, 96, 70, 70, 73, 73, 71, 71,
	71, 71, 89, 89, 90, 90, 68, 68, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 215,
	215, 215, 165, 62, 62, 62, 63, 63, 64, 64,
	220, 220, 220, 221, 221, 221, 221, 219, 219, 219,
	219, 219, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 4,
	6, 1, 3, 2, 5, 3, 6, 4, 6, 6,
	6, 4, 8, 3, 3, 3, 6, 4, 3, 2,
	1, 1, 0, 2, 0, 2, 0, 2, 0, 7,
	6, 1, 3, 3, 0, 2, 0, 2, 1, 3,
	5, 0, 4, 6, 7, 1, 1, 1, 1, 1,
	1, 6, 3, 5, 4, 6, 4, 6, 4, 6,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 1, 1, 1, 1, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 1, 5,
	2, 1, 1, 1, 3, 3, 2, 3, 3, 3,
	3, 1, 3, 3, 2, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 2, 2, 2, 4, 2, 4,
	4, 4, 4, 4, 4, 4, 2, 3, 4, 3,
	3, 4, 4, 2, 2, 2, 0, 2, 0, 8,
	8, 7, 10, 6, 9, 1, 0, 1, 3, 1,
	1, 1, 1, 8, 0, 1, 1, 0, 3, 2,
	0, 3, 1, 2, 2, 3, 6, 2, 1, 1,
	2, 4, 2, 5, 7, 8, 5, 3, 1, 4,
	6, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 5,
	2, 0, 6, 11, 14, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 6, 8, 8, 10, 8, 10, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 1, 3,
	3, 0, 3, 8, 11, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 6, 8, 5, 7,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 2, 0, 8, 2, 0, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 1, 1, 8, 8, 1, 2, 4,
	4, 4, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 2, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 3, 3, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 7, 4, 6, 3,
	1, 5, 6, 9, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	5, 2, 1, 1, 1, 1, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 3,
	4, 4, 5, 3, 3, 3, 3, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 2, 1, 3, 1, 1, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 4, 1,
	1, 1, 5, 1, 3, 1, 3, 1, 1, 1,
	1, 6, 6, 4, 4, 4, 4, 4, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 4, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 3, 5, 4,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 3, 1, 3,
	3, 3, 2, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 0, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 3, 5, 1, 0, 2, 2, 1, 1, 1,
	2, 1, 2, 0, 2, 1, 0, 1, 1, 1,
	3, 3, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 2, 3, 1, 1, 1,
	2, 2, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -27, -29,
	-28, -30, -31, -32, -33, -25, -34, -35, 23, 34,
	220, 65, -8, -9, -10, -11, -12, -13, -249, 93,
	101, 123, 203, 100, 86, 117, 223, 231, -41, -43,
	239, -143, 240, 35, 249, 59, 96, 225, 219, 271,
	67, -247, -44, -42, 319, 294, 300, 234, -45, 257,
	286, 322, 257, 132, 79, 289, -265, -96, 257, 79,
	-71, -62, 312, 4, -226, -228, 20, 21, 23, 33,
	34, 35, 40, 44, 47, 58, 59, 60, 62, 64,
	65, 66, 69, 70, 77, 78, 80, 82, 86, 88,
	92, 93, 95, 100, 101, 107, 108, 111, 113, 118,
	123, 124, 125, 126, 133, 136, 138, 131, 146, 148,
	149, 152, 151, 156, 159, 162, 164, 165, 166, 168,
	170, 171, 173, 172, 178, 180, 181, 183, 186, 189,
	192, 195, 196, 197, 198, 201, 203, 205, 206, 207,
	209, 210, 212, 213, 214, 215, 216, 219, 217, 218,
	220, 221, 223, 225, 226, 228, 230, 231, 232, 233,
	236, 237, 239, 240, 242, 245, 248, 249, 250, 253,
	251, 247, 256, 258, 259, 260, 267, 271, 272, 273,
	274, 277, 278, 279, 281, 283, 284, 285, 290, 295,
	296, 297, 298, 28, 36, 37, 38, 39, 41, 42,
	45, 46, 50, 51, 52, 54, 81, 83, 84, 99,
	102, 103, 109, 119, 121, 127, 128, 137, 139, 140,
	141, 143, 154, 167, 177, 179, 190, 194, 200, 202,
	208, 227, 235, 243, 244, 252, 254, 262, 263, 264,
	268, 269, 286, 287, -265, -70, -62, 79, 88, 136,
	279, 278, 79, 132, 257, 289, -17, 319, -28, -7,
	-15, -4, -24, -35, -14, -31, -18, -32, -16, 23,
	-219, 4, -226, -228, -227, -229, 56, 68, 116, 135,
	129, 145, 147, 155, 157, 169, 191, 193, 224, 241,
	22, 24, 25, 26, 27, 29, 30, 31, 32, 43,
	48, 49, 53, 55, 57, 63, 67, 71, 72, 73,
	74, 75, 76, 85, 87, 89, 90, 91, 94, 96,
	98, 104, 105, 106, 112, 114, 115, 117, 120, 122,
	130, 132, 134, 142, 144, 150, 153, 158, 160, 161,
	174, 175, 176, 182, 184, 185, 187, 188, 199, 204,
	211, 222, 234, 238, 246, 255, 257, 261, 265, 266,
	270, 275, 276, 280, 282, 288, 289, 291, 292, 293,
	294, -62, -62, -62, 203, 22, -269, 22, -270, -271,
	67, 93, 117, 234, 136, 88, 278, -269, -66, 231,
	-62, -139, 159, 237, 227, 267, -140, -138, -218, 262,
	168, -97, -62, 4, 22, 79, 58, 80, 118, 132,
	133, 63, 64, 149, 258, 262, 267, 67, 281, -274,
	267, 267, -274, -274, -65, 267, 265, -66, -273, 257,
	257, 280, 289, -128, 79, 276, -42, -44, -43, -85,
	-86, 275, 142, 98, 188, -41, -43, -247, -250, 209,
	-246, -62, -250, -82, -83, 22, 90, 323, -187, -70,
	185, -110, 319, -3, -187, 127, -70, -73, 127, -70,
	-62, -187, 127, 265, 323, -96, -89, -62, -149, -148,
	321, 115, 115, 319, -107, -108, -148, -149, 115, 144,
	144, -188, -187, -62, 127, -74, 127, -73, -98, 127,
	-97, -98, 127, -193, -192, -221, 4, -226, -228, -227,
	286, 257, 132, -167, 319, -124, 319, -62, 22, 184,
	323, 184, -62, -139, 52, -139, 319, -141, -60, -61,
	146, 205, 265, 304, 115, 298, -78, 5, 85, -100,
	321, 115, -266, 184, 115, 115, 115, 115, 115, 115,
	298, 146, 205, 230, 257, 289, -142, -60, -61, -142,
	265, -66, -113, -187, -97, 127, -62, -97, 132, -62,
	127, -85, -86, -112, -131, -132, 158, 182, -115, 22,
	90, -115, -115, 44, 320, 320, 323, -250, -90, 319,
	-101, -189, -155, 312, -157, 310, 311, 316, 174, 299,
	-169, -159, -172, 99, 227, 319, -70, -158, 324, 9,
	-244, -43, 29, -170, -171, 48, -62, 7, 8, 5,
	6, -68, -196, -165, -205, 270, 104, 176, -242, -243,
	4, -226, -220, -197, -207, -201, -204, 143, 56, 72,
	75, 73, 76, 238, 280, 49, 28, 102, 103, 194,
	200, 254, 268, 269, 127, 177, 128, 54, 119, 154,
	92, 37, 39, 41, 42, 50, 51, 81, 83, 84,
	109, 137, 139, 140, 141, 179, 208, 243, 252, 263,
	264, 287, -227, -208, -209, -202, -203, -210, -101, -110,
	312, -70, 319, -109, -178, -155, 85, -50, 217, -49,
	21, 23, 93, 284, 99, 247, 247, 217, 99, 324,
	217, 217, 99, -222, -221, 5, -71, 323, -219, 312,
	-225, -222, 250, 320, -95, -70, -108, -188, -72, -70,
	-72, 239, -62, 30, 99, -52, 323, 47, 221, 99,
	-52, 323, 99, -52, 99, 320, 323, -187, 127, -73,
	30, -166, -194, -195, -197, -206, -200, -204, -205, 40,
	46, 45, 260, 167, 235, 244, 38, 183, 138, 137,
	139, 140, 141, 243, 37, 208, 109, 92, 84, 83,
	179, 42, 41, -208, -209, -202, -203, 81, 263, 264,
	143, 39, 51, 50, 287, 252, -99, -155, -265, -271,
	-265, 30, -99, 323, 323, 156, -77, 162, 173, 124,
	-217, 85, -223, -216, -179, 9, 270, 104, 184, -222,
	8, 311, -215, 7, 310, -217, 85, 70, -224, 5,
	4, -165, -179, 85, 159, -205, 321, -219, -218, -268,
	112, -265, -218, -218, -218, -218, -218, -62, 156, -218,
	-218, 323, 323, -66, -52, 323, 319, -84, 174, -248,
	294, -84, 319, -63, 127, -62, -248, 174, -112, -132,
	-131, -133, -155, 22, -155, -157, -42, -42, -42, -87,
	-183, -155, -246, 30, -89, -92, 323, 115, 10, 11,
	55, 33, 310, 311, 312, 313, 110, 314, 307, 308,
	309, 306, 302, 303, 304, 61, 163, 229, 13, 14,
	15, 26, 187, 157, 299, 129, 241, 316, 16, 17,
	18, 145, 36, 130, -67, 30, 4, -75, -155, -155,
	-155, -155, -155, 193, -105, -150, 317, -43, 319, -43,
	-155, -99, 7, -43, -164, 317, -173, -155, -107, 319,
	5, 319, 5, -251, 295, 112, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 202, -214, 290, -214, -214, -198, 319,
	-198, -199, 319, -198, 296, 300, 319, -92, -70, 323,
	320, 323, 265, -129, 63, 57, -145, 127, 57, -230,
	-62, 63, -231, 53, 276, 204, 114, -129, 63, -129,
	63, 63, -187, 33, 33, 265, -73, -62, 265, 265,
	-187, -191, 301, -62, -191, 323, 115, 320, 323, -147,
	292, -135, -28, 319, 85, 30, -135, -102, -103, -190,
	-104, -70, 319, -62, -62, -73, -74, -97, -98, -98,
	-17, -192, 99, -20, -28, -24, -35, -14, 320, 323,
	-91, 29, -125, 319, 297, 166, 82, 125, 165, -126,
	233, 320, 323, 265, 115, 267, 320, -61, -60, -76,
	207, 245, 218, 236, 323, 8, 7, 7, -219, -267,
	-62, -61, -60, -187, -79, -89, -80, -62, -146, -145,
	-232, -233, -230, 132, 276, 105, 30, 99, -59, 198,
	30, 184, 174, -55, 259, 99, -134, 227, 228, 323,
	-48, 31, 89, 319, 320, -147, -189, -94, -185, 317,
	-187, -70, -43, -186, 319, -212, -194, -211, 213, 214,
	212, 216, 215, -194, -97, 262, -155, -155, -155, -155,
	-155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
	-155, -155, -155, -155, -155, -155, -155, -155, 157, 129,
	241, 36, 130, -155, 265, -155, -155, -155, -155, 176,
	174, 270, 104, 277, 90, 180, -276, 255, 32, -162,
	-43, 319, -177, 27, 246, 22, -219, -169, 227, 319,
	-150, -155, -151, -99, 320, 320, 323, -99, -168, 318,
	-164, -176, -175, 291, 320, -99, 288, 22, 90, 312,
	7, -125, -252, 107, 120, 319, 320, 320, -155, -155,
	-119, -213, -99, 4, 297, 166, 82, 125, 165, 233,
	-119, -120, -155, -99, -121, -156, -157, 310, 311, 316,
	319, 227, -122, -155, -99, -155, 43, 153, 266, -123,
	-155, 115, -99, -155, -155, -155, -99, -99, -99, 319,
	7, 7, 262, 262, 7, -147, 320, -178, -49, -70,
	-62, -62, 174, -145, 127, -54, 174, -194, -62, 319,
	319, 148, 148, -62, -62, 127, -62, 127, -62, -62,
	-50, 217, 319, 319, -62, 217, -62, -70, 217, -36,
	126, 180, -39, 294, -222, 250, 115, -70, -114, 222,
	-155, -114, -137, 184, -95, 286, -62, 222, -93, 323,
	115, 304, -95, -52, -52, -52, -187, -194, 317, 317,
	7, 265, 265, 265, 265, 319, -155, -267, -267, -60,
	274, 60, 207, -223, 323, 320, 320, 323, -63, 132,
	-63, -28, -97, 5, -28, -70, 99, -56, 95, -275,
	304, -62, -183, -20, -111, 120, -191, 323, 68, -118,
	147, 169, 116, 155, 224, 135, 7, 101, -152, 324,
	319, -182, 300, -43, -186, -185, 298, -155, -155, 265,
	-276, 255, -162, -155, 176, 270, 104, 277, 90, 180,
	115, 319, -156, -156, -99, -159, 319, -99, 318, 327,
	320, -155, 318, 318, 323, -174, -175, 94, -155, -86,
	323, -85, -155, -99, -99, 320, 320, -257, 192, 319,
	319, -155, 30, 323, 320, 115, 320, 320, -127, 199,
	320, 10, 11, 310, 311, 312, 313, 110, 314, 307,
	308, 309, 306, 302, 303, 304, 61, 163, 229, 13,
	14, 15, 145, 130, -156, -156, -156, -99, 319, 320,
	-160, -161, 115, 112, 30, -123, -123, -123, 320, 115,
	-99, 323, 323, 323, 320, 320, 320, 7, 320, 323,
	320, 298, 298, 320, -111, 265, 265, 99, 174, 283,
	-234, -231, -155, -89, 319, 319, -47, 93, 239, -130,
	99, -52, 99, -52, 265, -129, 63, -99, -99, 265,
	265, -39, 115, 256, 186, 250, -101, 175, 222, 62,
	320, -101, -147, -103, -94, -178, 320, 318, 7, 7,
	320, 166, 125, 165, -126, 165, -126, -126, 7, -62,
	-81, 131, -146, 319, -63, 319, 319, -84, 319, -62,
	-57, 152, -275, -222, -248, 320, -163, 122, 44, -185,
	147, 147, -185, -118, 147, -116, 191, -116, -116, -263,
	319, -17, 319, -182, -219, 317, 325, -99, -181, -180,
	30, -62, 189, 320, -155, -155, -156, -156, 115, 319,
	-155, -166, 26, 26, 320, -99, 320, 323, -151, -155,
	320, -164, 96, -155, 261, 320, 288, -86, -86, -86,
	5, -258, -62, 319, 292, -85, 320, -212, -194, -155,
	-160, -155, -212, -194, -156, -156, -156, -156, -156, -156,
	-156, -156, -156, -156, -156, -156, -156, -156, -156, -156,
	-156, -156, -156, 90, 174, 180, -156, 323, -99, 320,
	-161, -160, -155, -155, -194, 320, 320, 320, -99, -155,
	-155, -155, 320, 7, -163, -62, -62, -145, 99, -235,
	63, -236, 55, 105, 67, 174, 176, 276, 204, 53,
	85, 211, 320, 320, -89, -89, 174, 85, 174, 85,
	78, 272, -62, -62, -70, -62, -62, 320, 320, -62,
	-70, -225, 262, 319, -101, -136, 319, 184, -28, -114,
	304, 318, 318, 320, 130, -88, -184, -62, -245, 319,
	-242, -243, -68, 319, -89, -79, 30, -88, 184, -58,
	151, -275, -222, -55, -254, 293, -155, -99, -185, -185,
	-117, 282, 184, 147, -185, 318, 320, -264, 7, 318,
	-193, -181, 7, -154, -153, 113, 172, 320, -62, 319,
	-182, 26, 26, -155, -166, 320, -155, -155, 320, -155,
	318, -155, 5, -155, 320, 320, 320, -259, -62, -155,
	320, 320, 320, -161, 115, 90, 180, 319, -155, 320,
	320, 323, 320, 320, 320, -254, -145, -62, -97, -62,
	105, 127, 176, 148, 319, -156, -70, -144, -272, 66,
	253, 320, 320, 176, 176, -155, -194, -52, -52, 265,
	265, -158, -68, -62, -38, -37, 5, 91, -89, 63,
	-110, -43, 319, 195, 320, 323, -69, -107, 55, -69,
	-155, 319, -88, 320, 320, -28, 320, -70, -275, -222,
	-56, -255, -256, -62, -117, 319, -155, -185, -152, 320,
	323, -182, 320, 318, 323, 326, 304, -182, 319, -89,
	-180, -155, -155, 320, 320, -86, -253, 197, 320, -156,
	115, 319, -166, 320, -155, -236, -63, 174, -155, -64,
	319, -81, 319, 211, -51, 55, -62, -62, 319, 323,
	320, -40, 304, 278, 175, 320, -62, -62, -144, -184,
	-48, -97, -48, 320, -99, 320, -81, -144, 319, -222,
	-57, 323, 30, -89, -182, 7, -181, -17, -153, -219,
	317, -181, -89, 320, 320, -86, 44, -156, -166, 320,
	320, 99, 320, -239, 164, -62, -89, -70, -46, 282,
	-97, -99, -37, 5, 239, -147, 319, -81, -69, -86,
	-144, -81, -88, -58, -256, -258, 320, -180, 318, 7,
	320, -260, 206, 228, -99, 320, 105, -237, -240, -238,
	184, 116, 196, 242, 320, 320, -84, -155, -86, -102,
	-89, -48, 320, -81, 320, -182, 318, 320, -261, -262,
	36, 273, 70, -155, -261, -62, -238, 184, -240, 184,
	278, 88, -239, 320, -147, 320, -144, -181, -262, 201,
	111, 227, 201, 111, -241, 171, 221, 47, 239, -241,
	-237, -53, 47, 221, -81, 26, 20, 176, 85, -262,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 0, 0,
	0, 0, 75, 76, 77, 78, 79, 80, 0, 0,
	411, 0, 0, 0, 0, 0, 0, 0, 383, -2,
	0, 148, 0, 330, 0, 330, 330, 334, 0, 413,
	296, 410, -2, 421, 0, 0, 0, 419, 397, 0,
	0, -2, 0, 0, 0, 0, 0, 128, 0, 942,
	872, 878, 879, 903, 904, 905, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
	1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
	1097, 1098, 1099, 1100, 0, 0, 874, 942, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 0,
	214, 917, 918, 919, 920, 921, 1101, 1102, 1103, 1104,
	1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
	1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
	1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
	1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
	1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154,
	1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164,
	1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
	1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184,
	1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194,
	1195, 114, 121, 122, 993, 124, 0, 131, 132, 133,
	135, 136, 137, 138, 139, 140, 141, 0, 323, 1014,
	336, 144, 971, 1018, 1088, 1033, 151, 161, 0, 1094,
	-2, 165, 92, 194, 195, 196, 0, 198, 216, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 213, 341,
	329, 341, 326, 327, 328, 331, 0, 322, 0, 412,
	0, 0, 0, 0, 0, 295, -2, 393, 394, -2,
	0, 416, 416, 416, 0, 0, 394, 0, 402, 997,
	405, 885, 403, 0, 0, 418, 417, 0, 398, 493,
	0, 441, 0, 2, 0, 1072, 493, 0, 1072, 877,
	0, 0, 1072, 0, 0, 129, 130, 882, 880, 881,
	0, 0, 0, 0, 875, 849, 847, 848, 0, 0,
	0, 0, 499, 82, 1072, 52, 1072, 870, 52, 1072,
	90, 52, 1072, 0, 109, 111, 913, 914, 915, 916,
	1099, 0, 0, 0, 0, 119, 0, 123, 125, 0,
	0, 0, 335, 145, 1061, 147, 0, 150, 152, 153,
	0, 0, 0, 0, 0, 0, 164, 189, 190, 93,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 209, 210, 0, 0, 324, 337, 338, 325,
	0, 333, 52, 497, 268, 1072, 409, 268, 907, 409,
	1072, -2, 0, 389, 428, 429, 0, 0, 0, 414,
	415, 0, 0, 0, 385, 386, 0, 404, 0, 0,
	444, 862, 866, 867, 596, 0, 0, 0, 0, 0,
	0, 686, 688, 1066, 1088, 0, 690, 691, 0, 693,
	695, 696, 0, 699, 700, 840, 874, 888, 889, 890,
	891, 0, 0, 894, 0, 896, 897, 898, 740, 709,
	-2, -2, 886, 528, 529, 530, 531, -2, 1101, 713,
	715, 717, 718, 719, 720, 0, 1050, 1067, 1068, 1084,
	1085, 1093, 1097, 1098, 1072, 1081, 1073, 1062, 1070, 1079,
	947, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 912, 558, 559, 564, 565, 567, 444, 442,
	494, 495, 0, 0, 859, 857, 858, 29, 319, 31,
	0, 319, 319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 484, 192, 193, 873, 0, 845, 846,
	484, 61, 72, 0, 0, 868, 850, 503, 0, 360,
	0, 0, 500, 0, 0, 84, 0, 50, 51, 0,
	86, 0, 0, 88, 0, 411, 0, 0, 1072, 0,
	411, 0, 798, 511, 512, 513, 514, 515, 593, 518,
	519, 520, 521, 522, 523, 524, 525, 526, 527, 535,
	536, 537, 538, 539, 540, 541, 555, 0, 534, 534,
	534, 547, 548, 556, 557, 562, 563, 574, 575, 577,
	579, 573, 573, 573, 570, 571, 0, 796, 0, 134,
	0, 0, 0, 0, 0, 0, 156, 176, 177, 178,
	157, 159, 166, 168, 169, 170, 179, 180, 181, 182,
	285, 0, 287, 899, 0, 158, 160, 162, 163, 183,
	184, 185, 186, 187, 188, 0, 0, 94, 197, 199,
	0, 215, 200, 201, 202, 203, 204, 205, 208, 211,
	212, 0, 0, 332, 288, 0, 226, 0, 0, 291,
	408, 0, 0, 0, 1072, 906, 346, 0, 392, 426,
	427, 430, 433, 434, 431, 596, 399, 400, 401, 422,
	423, 306, 406, 0, 0, 503, 0, 0, 0, 0,
	0, 0, 775, 776, 777, 778, 779, 780, 783, 784,
	781, 782, 785, 786, 787, 0, 0, 0, 788, 789,
	790, 0, 0, 792, 0, 794, 0, 0, 0, 0,
	0, 0, 856, 0, 0, 0, 865, 791, 601, 602,
	603, 625, 626, 0, 687, 851, 844, 689, 0, -2,
	796, 0, 692, 697, 698, 0, 0, 839, -2, 0,
	893, 0, 593, 742, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 819, 825, 0, 0, 0, 0, 0,
	0, 0, 0, 543, 561, 572, 569, 568, 545, 0,
	544, 542, 0, 546, 0, 0, 0, 503, 0, 0,
	861, 0, 0, 0, 0, 318, 33, 1072, 0, 54,
	0, 0, 258, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 876, 0, 0,
	0, 64, 0, 883, 71, 0, 0, 0, 0, 372,
	0, 372, 362, 0, 0, 0, 358, 375, 376, 378,
	379, 0, 0, 501, 83, 871, 52, 91, 52, 52,
	97, 110, 0, 112, 115, 116, 117, 118, 113, 0,
	504, 506, 516, 0, 580, 581, 582, 583, 584, 585,
	594, 120, 0, 0, 0, 0, 149, 154, 155, 342,
	0, 173, 0, 175, 0, 286, 901, 900, 95, 217,
	142, 339, 340, 498, 0, 0, 225, 882, 227, 229,
	230, 231, 232, 907, 0, 907, 0, 0, 289, 0,
	0, 0, 0, 348, 354, 0, 432, 435, 436, 0,
	425, 304, 305, 411, 884, 438, 863, 484, 445, 0,
	455, 493, 470, 460, 0, 597, 507, 508, 549, 550,
	551, 552, 553, 598, 599, 0, 604, 605, 606, 607,
	608, 609, 610, 611, 612, 613, -2, -2, -2, 617,
	618, 619, -2, -2, -2, 623, 624, -2, 793, 795,
	0, 856, 0, -2, 0, 633, -2, -2, -2, 637,
	0, 640, 642, 644, 0, 0, 0, 0, 855, 654,
	831, 0, 0, 772, 773, 774, 864, 639, 0, 0,
	852, 843, 0, 0, -2, 694, 0, 0, 0, 802,
	803, 838, 834, 0, 701, 421, 0, 0, 0, 0,
	0, 902, 750, 0, 0, 0, 714, 716, 0, 0,
	0, 0, 806, -2, -2, -2, -2, -2, -2, -2,
	0, 0, 796, 816, 0, 0, 657, 0, 0, 0,
	0, 1088, 0, 796, 824, 0, 0, 0, 0, 0,
	796, 0, 830, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 438, 496, 860, 32, 308,
	0, 0, 0, 35, 1072, 43, 0, 240, 0, 0,
	0, 0, 0, 321, 44, 1072, 52, 1072, 52, 45,
	30, 319, 0, 0, 312, 0, 307, 310, 0, 71,
	0, 0, 60, 0, 62, 73, 0, 869, 81, 0,
	502, 355, 356, 0, 0, 364, 361, 0, 503, 0,
	0, 0, 0, 85, 87, 89, 0, 799, 0, 0,
	0, 0, 0, 0, 0, 0, 797, 126, 127, 146,
	171, 172, 174, 167, 0, 234, 267, 0, 0, 907,
	0, 223, 268, 290, 292, 0, 0, 350, 354, 0,
	353, 409, 424, 0, 440, 0, 443, 0, 0, 0,
	0, 0, 490, 490, 490, 488, 464, 411, 470, 0,
	0, 482, 0, -2, 460, 0, 0, -2, -2, 0,
	0, 0, 655, -2, 638, 641, 643, 645, 0, 0,
	0, 0, 0, 0, 0, 656, 0, 0, 841, 844,
	-2, 797, 800, 801, 0, 0, 835, 0, 0, 0,
	0, 420, 421, 421, 421, 707, 0, 708, 0, 0,
	0, 0, 0, 0, 723, 0, 724, 725, 0, 0,
	726, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 660, 661, 662, 0, 0, 727,
	822, 823, 0, 0, 0, 0, 0, 0, 732, 0,
	829, 0, 0, 0, 736, 737, 738, 0, 532, 0,
	554, 576, 578, 566, 440, 0, 0, 0, 0, 53,
	238, 257, 0, 0, 0, 0, 37, 0, 0, 0,
	0, 41, 0, 47, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 74, 370, 371, 0, 369,
	0, 359, 372, 377, 374, 380, 0, 509, 0, 0,
	517, 586, 587, 588, 589, 590, 591, 592, 0, 143,
	221, 0, 228, 0, 0, 0, 226, 0, 0, 0,
	352, 354, 0, 345, 346, 407, 744, 0, 0, 446,
	0, 0, 0, 0, 0, 485, 489, 486, 487, 0,
	0, 0, 0, 482, 452, 0, 0, 0, 459, 481,
	0, 480, 469, -2, 600, -2, 0, 0, 0, 0,
	-2, 0, 0, 0, 832, 0, 767, 0, 0, 843,
	-2, 804, 833, 837, 0, 702, 0, 0, 0, 0,
	895, 748, 749, 753, 0, 0, 712, 0, 0, 805,
	815, 817, 658, 659, 663, 664, 665, 666, 667, 668,
	669, 670, 671, 672, -2, -2, -2, 676, 677, 678,
	-2, -2, -2, 0, 0, 0, 818, 0, 0, 770,
	820, 821, 826, 827, 0, 729, 730, 731, 828, 0,
	0, 0, 560, 0, 744, 314, 316, 34, 0, 239,
	0, 242, 0, 0, 0, 0, 248, 249, 0, 0,
	0, 0, 259, 266, 0, 0, 0, 49, 0, 0,
	320, 0, 52, 52, 309, 0, 0, 219, 220, 313,
	311, 63, 0, 0, 357, 0, 0, 0, 363, 373,
	0, 510, 505, 595, 0, 0, 297, 303, 303, 0,
	710, 711, 0, 0, 0, 0, 0, 0, 0, 343,
	354, 0, 347, 348, 395, 0, 439, 437, 472, 0,
	474, 0, 0, 0, 476, 455, 465, 0, 467, 470,
	0, 457, 0, 0, 450, 0, 449, 470, 478, 0,
	0, 0, 0, -2, 0, 648, -2, -2, 766, 797,
	842, 836, 892, 421, 703, 705, 706, 755, 752, 0,
	739, 721, 722, 814, 0, 0, 0, 0, 797, 769,
	728, 0, 734, 735, 533, 396, 36, 0, 243, 244,
	907, 0, 247, 250, 0, 252, 909, 234, 0, 263,
	264, 261, 0, 38, 39, 48, 56, 40, 46, 0,
	0, 483, 0, 0, 0, 68, 66, 0, 0, 0,
	381, 382, 0, 0, 266, 0, 306, 887, 0, 306,
	0, 0, 0, 256, 234, 224, 266, 0, 0, 349,
	350, 743, 745, 0, 473, 0, 492, 475, 470, 466,
	0, 482, 411, 453, 0, 454, 0, 482, 0, 0,
	461, -2, -2, 649, 768, 0, 421, 0, 741, -2,
	0, 0, 0, 771, 0, 241, 245, 0, 0, 272,
	0, 260, 0, 0, 58, 0, 315, 317, 0, 0,
	70, 67, 0, 0, 366, 503, 368, 0, 234, 298,
	299, 302, 300, 303, 421, 266, 222, 234, 0, 351,
	352, 0, 0, 0, 0, 468, 462, 0, 451, 447,
	0, 458, 0, 479, 704, 758, 0, -2, 0, 684,
	733, 0, 251, 277, 0, 0, 0, 268, 42, 0,
	55, 421, 69, 65, 0, 367, 0, 254, 306, 0,
	234, 293, 0, 344, 746, 747, 491, 456, 470, 0,
	477, 0, 0, 0, 754, 685, 0, 253, 273, 274,
	0, 269, 270, 271, 908, 265, 272, 57, 0, 503,
	0, 301, 702, 255, 266, 482, 448, 751, 756, 759,
	-2, 1036, 939, 0, 757, 246, 275, 0, 276, 0,
	0, 0, 277, 0, 365, 237, 234, 463, 0, 761,
	762, 763, 764, 765, 278, 0, 281, 282, 0, 279,
	262, 233, 235, 236, 294, 0, 280, 283, 284, 760,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 308, 3, 314, 309, 3,
	319, 320, 312, 310, 323, 311, 321, 313, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 327, 322,
	302, 304, 303, 3, 324, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 317, 3, 318, 307, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 325, 306, 326, 316,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 305,
	57645, 315, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:772
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:778
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:784
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:810
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 28:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:821
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:827
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:848
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:868
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:877
		{
			return unimplemented(sqllex)
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:900
		{
			return unimplemented(sqllex)
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:910
		{
			return unimplemented(sqllex)
		}
	case 45:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:920
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:929
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:939
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = nil
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = DropCascade
		}
	case 51:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = DropRestrict
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:957
		{
			sqlVAL.union.val = DropDefault
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:973
		{
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:976
		{
			return unimplemented(sqllex)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:977
		{
		}
	case 59:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:981
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].str, IncrementalFrom: sqlDollar[6].union.strs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:985
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.strs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 64:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = []string(nil)
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 66:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.str = ""
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 70:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 71:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1040
		{
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1170
		{ /* SKIP DOC */
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1295
		{
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1318
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1357
		{
			return unimplemented(sqllex)
		}
	case 146:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1366
		{ /* SKIP DOC */
		}
	case 149:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1429
		{
			return unimplemented(sqllex)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1435
		{
			return unimplemented(sqllex)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = Low
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = Normal
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = High
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1544
		{
			return unimplemented(sqllex)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1545
		{
			return unimplemented(sqllex)
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1546
		{
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1642
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1738
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1742
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = DropDefault
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1752
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1763
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].union.unresolvedName().String())}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 266:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1948
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1957
		{
			return unimplemented(sqllex)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1958
		{
			return unimplemented(sqllex)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1959
		{
			return unimplemented(sqllex)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1960
		{
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1967
		{
			return unimplemented(sqllex)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1968
		{
			return unimplemented(sqllex)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1969
		{
			return unimplemented(sqllex)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1970
		{
			return unimplemented(sqllex)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1971
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1974
		{
			return unimplemented(sqllex)
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1977
		{
			return unimplemented(sqllex)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1980
		{
			return unimplemented(sqllex)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1981
		{
			return unimplemented(sqllex)
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1982
		{
			return unimplemented(sqllex)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1983
		{
			return unimplemented(sqllex)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1984
		{
			return unimplemented(sqllex)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2016
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = true
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = false
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2091
		{
			return unimplemented(sqllex)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2092
		{
			return unimplemented(sqllex)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2095
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2096
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = Ascending
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = Descending
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2150
		{
			return unimplemented(sqllex)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2151
		{
			return unimplemented(sqllex)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = true
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = false
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2164
		{
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2165
		{
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2198
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2207
		{
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2208
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.str = ""
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.str = ""
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.str = ""
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2301
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 348:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.str = ""
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 350:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.str = ""
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.str = ""
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2330
		{
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2331
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = AbsentReturningClause
		}
	case 357:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2351
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = AbsentReturningClause
		}
	case 359:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2359
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2401
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2405
		{
			return unimplemented(sqllex)
		}
	case 369:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2413
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 373:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2435
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2436
		{
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2663
		{
			return unimplemented(sqllex)
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2664
		{
			return unimplemented(sqllex)
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2665
		{
			return unimplemented(sqllex)
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2668
		{
			return unimplemented(sqllex)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2669
		{
			return unimplemented(sqllex)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2672
		{
			return unimplemented(sqllex)
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2675
		{
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2676
		{
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2679
		{
			return unimplemented(sqllex)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2680
		{
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2683
		{
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2684
		{
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = true
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = false
		}
	case 416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = false
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = true
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2707
		{
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2708
		{
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2746
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2766
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2807
		{
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2808
		{
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2866
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = &From{}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2902
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2920
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2947
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 456:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2964
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = nil
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3021
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3025
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3031
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = true
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = false
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.str = astFullJoin
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.str = astLeftJoin
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.str = astRightJoin
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.str = astInnerJoin
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3142
		{
		}
	case 490:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3143
		{
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3229
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3242
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3243
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3257
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3266
		{
			return unimplemented(sqllex)
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3325
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3334
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = nil
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3367
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3383
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 555:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3478
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3510
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3549
		{
		}
	case 573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3550
		{
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = year
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = month
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = day
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = hour
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = minute
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = month
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = hour
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = minute
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = minute
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3632
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3636
		{
			sqlVAL.union.val = nil
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = second
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3645
		{
			return unimplemented(sqllex)
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3680
		{
			return unimplemented(sqllex)
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3689
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3769
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3840
		{
			return unimplemented(sqllex)
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3906
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.unresolvedName(),
			}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4079
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4132
		{
			return unimplemented(sqllex)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4133
		{
			return unimplemented(sqllex)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4156
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4172
		{
			return unimplemented(sqllex)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4173
		{
			return unimplemented(sqllex)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4177
		{
			return unimplemented(sqllex)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4194
		{
			return unimplemented(sqllex)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4195
		{
			return unimplemented(sqllex)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4196
		{
			return unimplemented(sqllex)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4197
		{
			return unimplemented(sqllex)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4226
		{
			return unimplemented(sqllex)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4270
		{
			return unimplemented(sqllex)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4271
		{
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = Window(nil)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4306
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.str = ""
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4368
		{
			return unimplemented(sqllex)
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4369
		{
			return unimplemented(sqllex)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4370
		{
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4373
		{
			return unimplemented(sqllex)
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4374
		{
			return unimplemented(sqllex)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4380
		{
			return unimplemented(sqllex)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4381
		{
			return unimplemented(sqllex)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4382
		{
			return unimplemented(sqllex)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4383
		{
			return unimplemented(sqllex)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4384
		{
			return unimplemented(sqllex)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4395
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = Any
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = Some
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = All
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = Plus
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = Minus
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = Mult
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = Div
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = FloorDiv
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = Mod
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = Bitand
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = Bitor
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = Bitxor
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = Bitxor
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = LT
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = GT
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = EQ
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = LE
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = GE
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = NE
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = Like
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = NotLike
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = ILike
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = NotILike
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4491
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4549
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4583
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4599
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4625
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4677
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 840:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4719
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4749
		{
			sqlVAL.union.val = UnresolvedName(nil)
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4753
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4758
		{
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4759
		{
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4768
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4816
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4820
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4896
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4919
		{
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4955
		{
			return unimplemented(sqllex)
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 895:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = DNull
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4994
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5029
		{
			sqlVAL.str = ""
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
