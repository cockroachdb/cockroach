// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:465
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_SCHEMA = 57417
const CURRENT_ROLE = 57418
const CURRENT_TIME = 57419
const CURRENT_TIMESTAMP = 57420
const CURRENT_USER = 57421
const CYCLE = 57422
const DATA = 57423
const DATABASE = 57424
const DATABASES = 57425
const DATE = 57426
const DAY = 57427
const DEC = 57428
const DECIMAL = 57429
const DEFAULT = 57430
const DEALLOCATE = 57431
const DEFERRABLE = 57432
const DELETE = 57433
const DESC = 57434
const DISCARD = 57435
const DISTINCT = 57436
const DO = 57437
const DOUBLE = 57438
const DROP = 57439
const ELSE = 57440
const ENCODING = 57441
const END = 57442
const ESCAPE = 57443
const EXCEPT = 57444
const EXISTS = 57445
const EXECUTE = 57446
const EXPERIMENTAL_FINGERPRINTS = 57447
const EXPLAIN = 57448
const EXTRACT = 57449
const EXTRACT_DURATION = 57450
const FALSE = 57451
const FAMILY = 57452
const FETCH = 57453
const FILTER = 57454
const FIRST = 57455
const FLOAT = 57456
const FLOAT4 = 57457
const FLOAT8 = 57458
const FLOORDIV = 57459
const FOLLOWING = 57460
const FOR = 57461
const FORCE_INDEX = 57462
const FOREIGN = 57463
const FROM = 57464
const FULL = 57465
const GRANT = 57466
const GRANTS = 57467
const GREATEST = 57468
const GROUP = 57469
const GROUPING = 57470
const HAVING = 57471
const HELP = 57472
const HIGH = 57473
const HOUR = 57474
const INCREMENTAL = 57475
const IF = 57476
const IFNULL = 57477
const ILIKE = 57478
const IN = 57479
const INTERLEAVE = 57480
const INDEX = 57481
const INDEXES = 57482
const INITIALLY = 57483
const INNER = 57484
const INSERT = 57485
const INT = 57486
const INT2VECTOR = 57487
const INT2 = 57488
const INT4 = 57489
const INT8 = 57490
const INT64 = 57491
const INTEGER = 57492
const INTERSECT = 57493
const INTERVAL = 57494
const INTO = 57495
const IS = 57496
const ISOLATION = 57497
const JOB = 57498
const JOBS = 57499
const JOIN = 57500
const KEY = 57501
const KEYS = 57502
const KV = 57503
const LATERAL = 57504
const LC_CTYPE = 57505
const LC_COLLATE = 57506
const LEADING = 57507
const LEAST = 57508
const LEFT = 57509
const LEVEL = 57510
const LIKE = 57511
const LIMIT = 57512
const LOCAL = 57513
const LOCALTIME = 57514
const LOCALTIMESTAMP = 57515
const LOW = 57516
const LSHIFT = 57517
const MATCH = 57518
const MINUTE = 57519
const MONTH = 57520
const NAN = 57521
const NAME = 57522
const NAMES = 57523
const NATURAL = 57524
const NEXT = 57525
const NO = 57526
const NO_INDEX_JOIN = 57527
const NORMAL = 57528
const NOT = 57529
const NOTHING = 57530
const NULL = 57531
const NULLIF = 57532
const NULLS = 57533
const NUMERIC = 57534
const OF = 57535
const OFF = 57536
const OFFSET = 57537
const OID = 57538
const ON = 57539
const ONLY = 57540
const OPTIONS = 57541
const OR = 57542
const ORDER = 57543
const ORDINALITY = 57544
const OUT = 57545
const OUTER = 57546
const OVER = 57547
const OVERLAPS = 57548
const OVERLAY = 57549
const PARENT = 57550
const PARTIAL = 57551
const PARTITION = 57552
const PASSWORD = 57553
const PAUSE = 57554
const PLACING = 57555
const PLANS = 57556
const POSITION = 57557
const PRECEDING = 57558
const PRECISION = 57559
const PREPARE = 57560
const PRIMARY = 57561
const PRIORITY = 57562
const QUERIES = 57563
const QUERY = 57564
const RANGE = 57565
const READ = 57566
const REAL = 57567
const RECURSIVE = 57568
const REF = 57569
const REFERENCES = 57570
const REGCLASS = 57571
const REGPROC = 57572
const REGPROCEDURE = 57573
const REGNAMESPACE = 57574
const REGTYPE = 57575
const RENAME = 57576
const REPEATABLE = 57577
const RELEASE = 57578
const RESET = 57579
const RESTORE = 57580
const RESTRICT = 57581
const RESUME = 57582
const RETURNING = 57583
const REVOKE = 57584
const RIGHT = 57585
const ROLLBACK = 57586
const ROLLUP = 57587
const ROW = 57588
const ROWS = 57589
const RSHIFT = 57590
const SAVEPOINT = 57591
const SCATTER = 57592
const SEARCH = 57593
const SECOND = 57594
const SELECT = 57595
const SEQUENCES = 57596
const SERIAL = 57597
const SERIALIZABLE = 57598
const SESSION = 57599
const SESSIONS = 57600
const SESSION_USER = 57601
const SET = 57602
const SETTING = 57603
const SETTINGS = 57604
const SHOW = 57605
const SIMILAR = 57606
const SIMPLE = 57607
const SMALLINT = 57608
const SMALLSERIAL = 57609
const SNAPSHOT = 57610
const SOME = 57611
const SPLIT = 57612
const SQL = 57613
const START = 57614
const STATUS = 57615
const STDIN = 57616
const STRICT = 57617
const STRING = 57618
const STORING = 57619
const SUBSTRING = 57620
const SYMMETRIC = 57621
const SYSTEM = 57622
const TABLE = 57623
const TABLES = 57624
const TEMP = 57625
const TEMPLATE = 57626
const TEMPORARY = 57627
const TESTING_RANGES = 57628
const TESTING_RELOCATE = 57629
const TEXT = 57630
const THEN = 57631
const TIME = 57632
const TIMESTAMP = 57633
const TIMESTAMPTZ = 57634
const TO = 57635
const TRAILING = 57636
const TRACE = 57637
const TRANSACTION = 57638
const TREAT = 57639
const TRIM = 57640
const TRUE = 57641
const TRUNCATE = 57642
const TYPE = 57643
const UNBOUNDED = 57644
const UNCOMMITTED = 57645
const UNION = 57646
const UNIQUE = 57647
const UNKNOWN = 57648
const UPDATE = 57649
const UPSERT = 57650
const USE = 57651
const USER = 57652
const USERS = 57653
const USING = 57654
const UUID = 57655
const VALID = 57656
const VALIDATE = 57657
const VALUE = 57658
const VALUES = 57659
const VARCHAR = 57660
const VARIADIC = 57661
const VIEW = 57662
const VARYING = 57663
const WHEN = 57664
const WHERE = 57665
const WINDOW = 57666
const WITH = 57667
const WITHIN = 57668
const WITHOUT = 57669
const WRITE = 57670
const YEAR = 57671
const ZONE = 57672
const NOT_LA = 57673
const WITH_LA = 57674
const AS_LA = 57675
const POSTFIXOP = 57676
const UMINUS = 57677

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5875

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 33,
	354, 33,
	-2, 506,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 66,
	1, 478,
	197, 478,
	241, 478,
	350, 478,
	352, 478,
	354, 478,
	-2, 488,
	-1, 112,
	1, 481,
	197, 481,
	241, 481,
	350, 481,
	352, 481,
	354, 481,
	-2, 487,
	-1, 130,
	1, 33,
	354, 33,
	-2, 506,
	-1, 511,
	122, 1087,
	293, 1087,
	336, 1087,
	353, 1087,
	-2, 0,
	-1, 522,
	1, 215,
	354, 215,
	-2, 1092,
	-1, 534,
	111, 516,
	170, 516,
	195, 516,
	-2, 484,
	-1, 542,
	111, 515,
	170, 515,
	195, 515,
	-2, 482,
	-1, 689,
	351, 1019,
	-2, 1012,
	-1, 690,
	351, 1020,
	-2, 1013,
	-1, 696,
	5, 686,
	351, 686,
	-2, 1217,
	-1, 721,
	5, 645,
	-2, 1187,
	-1, 722,
	5, 680,
	351, 680,
	-2, 1189,
	-1, 723,
	5, 655,
	-2, 1190,
	-1, 724,
	5, 654,
	-2, 1191,
	-1, 725,
	5, 680,
	351, 680,
	-2, 1194,
	-1, 726,
	5, 680,
	351, 680,
	-2, 1195,
	-1, 727,
	5, 681,
	-2, 1198,
	-1, 728,
	5, 637,
	-2, 1199,
	-1, 729,
	5, 637,
	-2, 1200,
	-1, 730,
	5, 662,
	-2, 1204,
	-1, 731,
	5, 647,
	-2, 1205,
	-1, 732,
	5, 648,
	-2, 1206,
	-1, 733,
	5, 638,
	-2, 1211,
	-1, 734,
	5, 639,
	-2, 1212,
	-1, 735,
	5, 640,
	-2, 1213,
	-1, 736,
	5, 641,
	-2, 1214,
	-1, 737,
	5, 642,
	-2, 1215,
	-1, 738,
	5, 643,
	-2, 1216,
	-1, 739,
	5, 637,
	-2, 1221,
	-1, 740,
	5, 646,
	-2, 1226,
	-1, 741,
	5, 644,
	-2, 1229,
	-1, 742,
	5, 678,
	351, 678,
	-2, 1231,
	-1, 743,
	5, 682,
	-2, 1234,
	-1, 744,
	5, 684,
	-2, 1235,
	-1, 745,
	5, 677,
	351, 677,
	-2, 1240,
	-1, 789,
	211, 504,
	-2, 378,
	-1, 794,
	111, 515,
	170, 515,
	195, 515,
	-2, 485,
	-1, 956,
	102, 488,
	111, 488,
	151, 488,
	170, 488,
	195, 488,
	201, 488,
	304, 488,
	-2, 805,
	-1, 965,
	351, 996,
	-2, 984,
	-1, 1236,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 721,
	-1, 1237,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 722,
	-1, 1238,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 723,
	-1, 1242,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 727,
	-1, 1243,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 728,
	-1, 1244,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 729,
	-1, 1247,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 734,
	-1, 1253,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 736,
	-1, 1255,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 740,
	-1, 1256,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 741,
	-1, 1257,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 742,
	-1, 1258,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 743,
	-1, 1284,
	206, 878,
	-2, 881,
	-1, 1321,
	122, 918,
	351, 1019,
	-2, 1012,
	-1, 1322,
	122, 919,
	-2, 1183,
	-1, 1323,
	122, 920,
	-2, 1091,
	-1, 1324,
	122, 921,
	-2, 1055,
	-1, 1325,
	122, 922,
	-2, 1072,
	-1, 1326,
	122, 923,
	-2, 1090,
	-1, 1327,
	122, 924,
	-2, 1142,
	-1, 1506,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 735,
	-1, 1507,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 737,
	-1, 1512,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 738,
	-1, 1530,
	206, 877,
	-2, 880,
	-1, 1712,
	102, 488,
	111, 488,
	151, 488,
	170, 488,
	195, 488,
	201, 488,
	304, 488,
	-2, 572,
	-1, 1731,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 739,
	-1, 1736,
	154, 0,
	-2, 755,
	-1, 1746,
	206, 879,
	-2, 882,
	-1, 1788,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 782,
	-1, 1789,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 783,
	-1, 1790,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 784,
	-1, 1794,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 788,
	-1, 1795,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 789,
	-1, 1796,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 790,
	-1, 1903,
	1, 573,
	70, 573,
	102, 573,
	111, 573,
	123, 573,
	127, 573,
	129, 573,
	142, 573,
	151, 573,
	158, 573,
	167, 573,
	170, 573,
	182, 573,
	195, 573,
	197, 573,
	201, 573,
	241, 573,
	243, 573,
	304, 573,
	312, 573,
	323, 573,
	324, 573,
	333, 573,
	350, 573,
	352, 573,
	354, 573,
	355, 573,
	-2, 572,
	-1, 1915,
	154, 0,
	-2, 756,
	-1, 1918,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 759,
	-1, 1919,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 761,
	-1, 2044,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 760,
	-1, 2045,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 762,
	-1, 2052,
	154, 0,
	-2, 791,
	-1, 2132,
	154, 0,
	-2, 792,
	-1, 2217,
	36, 0,
	136, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 1186,
}

const sqlPrivate = 57344

const sqlLast = 31784

var sqlAct = [...]int{

	690, 1823, 2216, 2224, 2074, 2225, 2262, 2189, 2226, 1093,
	2215, 1195, 1203, 2106, 1899, 392, 1350, 543, 1765, 2059,
	2027, 1846, 1385, 1983, 1100, 1954, 2014, 1830, 1650, 1969,
	65, 2008, 634, 1596, 1389, 617, 1652, 1707, 139, 140,
	1488, 139, 1384, 666, 1426, 1877, 680, 1898, 139, 1407,
	1096, 1710, 1886, 1440, 1388, 1397, 139, 1056, 1215, 394,
	1088, 139, 139, 1471, 1698, 139, 1541, 961, 139, 688,
	1829, 878, 1595, 1282, 1470, 139, 1204, 1476, 1006, 871,
	1623, 1307, 368, 1158, 1693, 1160, 550, 110, 1131, 687,
	1422, 768, 1082, 1292, 1189, 1431, 660, 366, 395, 521,
	1270, 1473, 1347, 872, 1057, 803, 1267, 891, 1392, 558,
	561, 801, 952, 767, 1301, 796, 567, 1318, 992, 996,
	659, 562, 647, 1197, 139, 139, 376, 24, 1180, 519,
	139, 499, 609, 810, 139, 139, 112, 809, 131, 811,
	1080, 113, 855, 110, 553, 548, 682, 517, 1970, 384,
	642, 895, 607, 135, 854, 568, 815, 626, 515, 503,
	122, 2117, 1529, 1090, 2118, 1196, 1090, 1090, 1200, 2248,
	547, 547, 886, 1566, 1567, 1708, 1584, 1585, 1586, 2238,
	542, 2237, 1211, 1500, 1211, 2235, 1304, 2233, 1968, 1914,
	886, 2211, 2208, 2183, 886, 886, 1365, 1499, 2175, 502,
	496, 886, 2148, 1662, 2137, 1968, 109, 2136, 551, 1705,
	1182, 683, 2134, 1007, 1114, 1365, 2127, 110, 2113, 886,
	1333, 2114, 907, 908, 2089, 122, 1581, 1968, 125, 2086,
	1211, 619, 886, 1305, 111, 2085, 2084, 2072, 1968, 886,
	1968, 55, 2165, 56, 1371, 910, 2046, 535, 2030, 1365,
	2005, 1211, 534, 1211, 1696, 1533, 129, 24, 907, 908,
	1534, 927, 928, 929, 937, 938, 939, 58, 1181, 909,
	2004, 109, 1967, 1211, 930, 1968, 570, 611, 1306, 1303,
	1572, 910, 1942, 1920, 941, 1211, 1211, 1917, 1740, 1438,
	1365, 1211, 128, 1729, 1724, 1663, 1194, 1194, 1190, 111,
	123, 1633, 1801, 1743, 886, 909, 55, 124, 56, 1613,
	1611, 924, 1614, 1211, 886, 1610, 1609, 1587, 1211, 1211,
	1696, 1190, 1532, 1634, 1211, 1540, 114, 1211, 1530, 915,
	630, 1211, 58, 125, 1467, 1425, 1373, 886, 1582, 1211,
	1381, 1364, 1210, 1371, 1365, 1211, 1193, 1187, 903, 1194,
	1186, 904, 1064, 1308, 1091, 139, 1286, 1091, 1091, 867,
	139, 129, 624, 651, 616, 915, 130, 2022, 567, 1971,
	1086, 564, 1711, 782, 2240, 2231, 2214, 2196, 125, 2129,
	2087, 1947, 1943, 1935, 934, 942, 1934, 925, 1933, 1929,
	125, 1928, 822, 1927, 1433, 1926, 1903, 128, 548, 1876,
	116, 1821, 940, 1816, 1811, 123, 129, 568, 1810, 907,
	908, 1583, 124, 1909, 1809, 1751, 1499, 932, 129, 881,
	1637, 1632, 1618, 925, 1615, 1603, 1709, 1278, 1594, 1565,
	1302, 1199, 910, 1562, 1561, 1559, 1546, 1545, 1481, 1315,
	969, 1314, 128, 1181, 1313, 822, 821, 962, 931, 114,
	1099, 1767, 1369, 2186, 128, 125, 909, 631, 2164, 2163,
	926, 643, 123, 2156, 2150, 116, 1819, 2146, 2124, 124,
	1112, 1566, 1567, 1107, 1089, 2121, 114, 2109, 2069, 2054,
	2043, 2032, 1974, 129, 1966, 1950, 1940, 1891, 114, 648,
	1844, 1566, 1567, 1842, 1841, 1840, 926, 1578, 1579, 1580,
	633, 139, 1577, 1575, 1576, 1568, 1569, 1570, 1571, 1573,
	1574, 1837, 935, 1827, 2239, 139, 915, 1735, 1686, 128,
	1684, 1638, 1641, 567, 1593, 139, 1555, 123, 1554, 139,
	139, 139, 1279, 139, 124, 1551, 1526, 1521, 139, 139,
	139, 139, 139, 1272, 1466, 997, 1000, 1357, 1312, 1092,
	748, 1004, 795, 114, 911, 912, 913, 914, 916, 917,
	990, 989, 568, 2116, 807, 988, 987, 1908, 986, 985,
	984, 983, 982, 567, 907, 908, 981, 980, 1572, 933,
	746, 979, 921, 922, 923, 936, 978, 920, 918, 919,
	911, 912, 913, 914, 916, 917, 977, 910, 1572, 2019,
	2188, 794, 976, 139, 139, 139, 139, 139, 975, 139,
	974, 973, 568, 966, 955, 778, 114, 618, 870, 762,
	753, 909, 139, 645, 567, 139, 784, 1949, 787, 1948,
	790, 394, 1638, 139, 1922, 1892, 1582, 798, 798, 396,
	139, 139, 139, 962, 139, 1621, 887, 1566, 1567, 1620,
	953, 139, 876, 881, 799, 775, 2139, 2119, 777, 766,
	1653, 1912, 901, 568, 758, 630, 893, 1501, 1617, 1190,
	395, 1002, 1711, 763, 1168, 1616, 1003, 827, 1566, 1567,
	747, 958, 828, 1505, 774, 759, 632, 535, 1070, 971,
	1097, 1624, 534, 875, 1166, 548, 569, 2009, 776, 540,
	1196, 532, 818, 819, 1768, 859, 565, 1421, 865, 1583,
	862, 1167, 2020, 1566, 1567, 1420, 1584, 1585, 1586, 1537,
	1293, 993, 1495, 1860, 605, 1566, 1567, 2202, 884, 2126,
	850, 826, 2254, 828, 858, 1074, 1073, 2255, 564, 559,
	1998, 643, 1374, 913, 914, 916, 917, 1629, 602, 907,
	908, 601, 856, 596, 597, 567, 539, 139, 1161, 1442,
	1162, 868, 139, 845, 2104, 1871, 1581, 2103, 881, 851,
	2102, 2101, 910, 1875, 546, 1874, 567, 567, 885, 1061,
	1857, 604, 1442, 394, 1856, 1572, 968, 1550, 1441, 905,
	894, 1549, 139, 897, 568, 1548, 909, 1547, 1087, 1508,
	1098, 906, 924, 1568, 1569, 1570, 1571, 1573, 1574, 1818,
	1161, 1464, 1162, 1566, 1567, 568, 568, 356, 1071, 1077,
	1572, 1463, 395, 545, 965, 1570, 1571, 1573, 1574, 775,
	1461, 139, 1572, 1254, 1163, 139, 1214, 139, 139, 139,
	139, 139, 139, 1103, 994, 995, 857, 139, 2125, 998,
	623, 139, 139, 1906, 1408, 1398, 915, 1106, 139, 1001,
	1109, 1361, 1111, 1360, 828, 695, 1581, 1225, 139, 357,
	1156, 139, 776, 547, 525, 1155, 1718, 1719, 1582, 1485,
	1269, 889, 1269, 1050, 139, 385, 1163, 139, 1137, 2076,
	1582, 1060, 761, 1179, 2177, 1058, 898, 842, 538, 139,
	528, 139, 1078, 1862, 360, 567, 1308, 390, 1063, 1059,
	394, 917, 2180, 386, 925, 1423, 1424, 1083, 1489, 1076,
	1572, 1075, 1400, 603, 533, 1224, 2245, 541, 1761, 529,
	1135, 110, 1691, 1105, 843, 1688, 2181, 537, 1172, 530,
	387, 1276, 1148, 1293, 568, 1118, 1274, 1175, 569, 395,
	1117, 1583, 535, 2254, 1171, 535, 535, 1127, 1174, 389,
	1128, 1129, 606, 1583, 1138, 1013, 2153, 1142, 1143, 1144,
	1145, 1146, 1283, 2260, 1169, 1141, 544, 1630, 1582, 1287,
	1152, 1153, 991, 1295, 1574, 1493, 1079, 926, 1628, 1157,
	110, 1170, 1161, 1869, 1162, 1320, 1320, 1331, 893, 1342,
	1177, 1212, 2265, 1308, 1185, 1354, 1355, 1356, 1403, 526,
	1568, 1569, 1570, 1571, 1573, 1574, 1439, 1154, 2050, 2228,
	1399, 1202, 1198, 1682, 1198, 2061, 648, 1213, 1090, 1489,
	1290, 750, 950, 359, 358, 1553, 1887, 1578, 1579, 1580,
	1902, 547, 1577, 1575, 1576, 1568, 1569, 1570, 1571, 1573,
	1574, 1583, 1164, 1822, 1577, 1575, 1576, 1568, 1569, 1570,
	1571, 1573, 1574, 1851, 1280, 2244, 1863, 2227, 1163, 388,
	814, 1277, 847, 565, 560, 527, 2253, 1304, 920, 918,
	919, 911, 912, 913, 914, 916, 917, 394, 1363, 2251,
	139, 1982, 110, 139, 831, 1405, 361, 1328, 2077, 836,
	139, 756, 1382, 569, 1164, 2229, 1448, 505, 139, 139,
	771, 139, 650, 139, 139, 394, 139, 139, 2096, 1013,
	1013, 1216, 1223, 391, 1305, 506, 395, 1510, 1368, 1268,
	1415, 832, 1938, 1484, 830, 139, 362, 848, 2263, 1417,
	2273, 139, 1577, 1575, 1576, 1568, 1569, 1570, 1571, 1573,
	1574, 1370, 1797, 569, 395, 139, 139, 139, 998, 2095,
	1001, 2230, 139, 2243, 2261, 363, 139, 364, 1758, 1306,
	1303, 995, 994, 653, 139, 772, 2067, 139, 1375, 773,
	813, 2143, 1859, 139, 394, 507, 1566, 1567, 1275, 1673,
	849, 1383, 1468, 2264, 1962, 139, 1443, 1479, 1251, 1478,
	139, 1994, 139, 1669, 569, 1159, 1406, 1410, 798, 139,
	798, 396, 675, 1759, 2266, 139, 1449, 1451, 1413, 1091,
	1069, 1701, 1997, 395, 1411, 1414, 1412, 1265, 1963, 1996,
	548, 1939, 1104, 1419, 1094, 1757, 110, 1377, 1491, 812,
	1704, 2272, 1263, 1497, 1308, 1798, 2028, 1434, 1379, 1123,
	136, 1799, 1697, 351, 2190, 1151, 1885, 1847, 1480, 813,
	353, 1436, 1065, 1067, 814, 1702, 2068, 1454, 365, 1380,
	1446, 1984, 2017, 495, 136, 1068, 1643, 501, 1465, 1462,
	501, 1378, 1642, 1429, 508, 1469, 1164, 523, 1308, 1524,
	1882, 1518, 1881, 1572, 1456, 497, 1527, 1459, 1249, 1252,
	1993, 494, 771, 548, 1044, 1701, 1516, 1494, 641, 640,
	1504, 2029, 1259, 1539, 1543, 1544, 1502, 545, 812, 1124,
	1260, 1302, 1261, 791, 1704, 1824, 1266, 1958, 1995, 1959,
	1951, 1248, 636, 635, 1483, 569, 610, 610, 1878, 1694,
	1699, 1703, 351, 2065, 1311, 132, 136, 627, 2053, 1702,
	1937, 1582, 1597, 1511, 1734, 1592, 569, 569, 1509, 1961,
	504, 3, 509, 396, 1700, 1717, 1605, 2066, 1964, 548,
	1525, 1560, 567, 139, 380, 32, 1513, 1520, 1486, 2016,
	379, 31, 567, 1460, 1457, 1536, 1514, 1372, 1192, 505,
	1519, 853, 852, 510, 139, 846, 139, 139, 374, 28,
	841, 840, 839, 139, 378, 17, 139, 506, 372, 13,
	139, 568, 838, 373, 16, 375, 14, 837, 1636, 834,
	1639, 568, 754, 749, 1583, 1703, 1250, 639, 1598, 1149,
	139, 595, 1262, 1140, 1043, 972, 844, 371, 12, 1264,
	139, 139, 139, 377, 10, 1960, 139, 1600, 1601, 1602,
	139, 139, 139, 139, 139, 1310, 2223, 2187, 1044, 1044,
	370, 8, 139, 1992, 139, 139, 1627, 507, 1626, 628,
	629, 1867, 1655, 1656, 1631, 1657, 1625, 1865, 139, 625,
	1670, 828, 369, 4, 1858, 569, 1649, 1409, 1522, 1523,
	396, 1402, 622, 1176, 2015, 1173, 1515, 1165, 1116, 1115,
	139, 139, 1645, 1517, 1113, 32, 1110, 1108, 548, 1658,
	1725, 31, 1748, 1651, 1660, 2038, 1575, 1576, 1568, 1569,
	1570, 1571, 1573, 1574, 1665, 816, 614, 2255, 1644, 28,
	1085, 1647, 1664, 1722, 1442, 17, 1442, 2040, 1681, 13,
	1452, 1714, 1450, 1741, 16, 382, 14, 1427, 1453, 1692,
	1723, 598, 599, 110, 139, 1713, 1589, 1590, 1591, 110,
	1753, 1754, 1755, 1716, 1715, 1695, 508, 637, 12, 1720,
	1706, 2160, 351, 1728, 10, 1727, 1726, 1013, 381, 1619,
	907, 908, 1683, 1971, 833, 1685, 907, 908, 1043, 1043,
	2131, 8, 385, 1879, 907, 908, 820, 817, 615, 1013,
	1737, 1635, 1747, 1744, 1458, 1455, 2258, 2166, 1428, 910,
	1802, 1980, 1404, 4, 390, 1401, 1771, 910, 1201, 1012,
	386, 1812, 1769, 1178, 1062, 1776, 692, 909, 1005, 1804,
	1760, 1762, 1763, 909, 1367, 139, 1774, 2271, 139, 1566,
	1567, 909, 498, 2210, 509, 907, 908, 387, 824, 823,
	139, 2169, 2025, 567, 1820, 1843, 1817, 1764, 824, 1013,
	1622, 1635, 1828, 394, 139, 1612, 389, 396, 1362, 1805,
	1359, 1358, 1300, 959, 825, 510, 1924, 2185, 1854, 2060,
	1756, 1646, 969, 967, 760, 1836, 524, 2075, 1848, 1825,
	383, 1139, 568, 915, 835, 396, 1838, 139, 2021, 1890,
	139, 1872, 395, 1873, 2179, 1850, 1853, 1930, 1835, 394,
	1552, 139, 2105, 757, 2049, 1309, 970, 48, 567, 1832,
	669, 1952, 1826, 1391, 1894, 1390, 1897, 523, 1834, 397,
	1732, 1733, 1072, 1013, 691, 552, 1870, 351, 1866, 1319,
	1868, 523, 789, 523, 1217, 792, 751, 693, 395, 1010,
	523, 523, 351, 805, 627, 1888, 1889, 568, 694, 1893,
	1880, 1904, 1849, 1883, 396, 1884, 1911, 1011, 139, 1013,
	1013, 1216, 1772, 1012, 1012, 1905, 388, 999, 1013, 1013,
	1216, 1777, 681, 1008, 646, 1046, 1205, 1273, 1291, 1778,
	1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788,
	1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1936, 1800,
	1535, 1013, 963, 1808, 1916, 501, 351, 351, 864, 351,
	661, 610, 673, 672, 1288, 752, 2026, 828, 1492, 1907,
	391, 1122, 1418, 1119, 351, 1864, 531, 136, 139, 1563,
	644, 1340, 139, 139, 1332, 351, 1329, 783, 877, 567,
	951, 1910, 351, 351, 351, 1206, 899, 139, 139, 139,
	1975, 781, 1972, 136, 1978, 1498, 139, 1366, 139, 869,
	139, 139, 139, 1130, 1836, 139, 139, 613, 612, 1386,
	779, 1066, 139, 139, 1985, 1979, 139, 1836, 568, 1376,
	944, 1836, 943, 1991, 139, 600, 2011, 1835, 1965, 1988,
	1987, 139, 2145, 902, 770, 769, 1095, 1672, 2259, 139,
	1835, 1977, 2159, 1861, 1835, 1981, 1044, 1834, 911, 912,
	913, 914, 916, 917, 2201, 127, 126, 2138, 2058, 1482,
	1834, 2039, 73, 30, 1834, 29, 2034, 92, 1044, 1046,
	1046, 2024, 91, 2048, 2023, 2012, 2013, 1013, 2041, 2018,
	2035, 90, 569, 2036, 139, 2033, 394, 139, 1986, 89,
	88, 87, 569, 86, 85, 139, 84, 83, 82, 136,
	81, 2063, 394, 80, 523, 79, 78, 77, 76, 75,
	520, 72, 71, 139, 70, 69, 567, 2080, 1126, 27,
	23, 2083, 95, 139, 22, 395, 2078, 20, 1044, 21,
	26, 25, 18, 893, 1102, 15, 9, 19, 53, 54,
	139, 395, 52, 1836, 2079, 1836, 2093, 2081, 139, 2055,
	51, 2091, 50, 11, 139, 568, 46, 2094, 45, 44,
	43, 42, 41, 139, 139, 7, 1835, 2073, 1835, 94,
	2108, 139, 39, 523, 38, 6, 1043, 523, 2123, 136,
	523, 523, 523, 523, 523, 2122, 1834, 2112, 1834, 1150,
	2099, 2100, 139, 523, 523, 93, 139, 2130, 1043, 5,
	501, 2115, 1044, 106, 548, 103, 2149, 2147, 105, 102,
	610, 2111, 2120, 627, 104, 107, 99, 100, 2141, 2154,
	2142, 101, 567, 98, 2155, 2092, 351, 97, 36, 1191,
	35, 2152, 139, 139, 34, 33, 2, 2088, 1044, 1044,
	139, 351, 2151, 1209, 1, 2158, 0, 1044, 1044, 0,
	394, 139, 139, 0, 0, 0, 0, 0, 1043, 0,
	0, 568, 2167, 2133, 0, 2171, 0, 0, 2170, 2178,
	0, 2176, 0, 0, 2174, 0, 0, 139, 2182, 2192,
	1044, 139, 1013, 2193, 139, 1334, 2184, 2198, 2052, 395,
	0, 394, 0, 0, 2168, 0, 139, 0, 2173, 139,
	0, 0, 0, 2194, 0, 0, 2203, 1045, 139, 2206,
	2204, 2205, 2200, 2209, 2070, 2207, 0, 139, 0, 0,
	2213, 0, 2221, 0, 2212, 2232, 2195, 0, 0, 0,
	395, 2157, 1043, 1836, 122, 0, 0, 2234, 0, 2222,
	1013, 0, 2098, 0, 0, 0, 0, 0, 1697, 0,
	2242, 0, 0, 0, 139, 2241, 1835, 2199, 0, 0,
	0, 1012, 2252, 569, 2250, 0, 122, 0, 1043, 1043,
	2257, 0, 2256, 396, 0, 0, 1834, 1043, 1043, 0,
	109, 0, 0, 1012, 0, 0, 0, 0, 0, 2269,
	2268, 2270, 2267, 665, 0, 0, 1013, 0, 0, 0,
	0, 1701, 0, 0, 2132, 0, 0, 0, 111, 0,
	1043, 0, 109, 0, 0, 55, 1044, 56, 0, 396,
	1704, 0, 0, 907, 908, 0, 0, 0, 569, 0,
	0, 0, 351, 0, 350, 1387, 1699, 0, 0, 0,
	111, 58, 627, 1012, 0, 1702, 910, 55, 0, 56,
	523, 523, 0, 523, 0, 351, 351, 0, 1416, 627,
	1700, 1045, 1045, 0, 0, 0, 0, 0, 0, 122,
	909, 0, 0, 58, 0, 0, 0, 351, 0, 0,
	0, 0, 0, 1432, 0, 0, 0, 0, 0, 0,
	0, 0, 1566, 1567, 0, 0, 0, 351, 351, 351,
	0, 0, 0, 0, 1447, 0, 0, 0, 351, 0,
	1009, 0, 0, 0, 0, 109, 351, 1012, 0, 351,
	0, 1703, 0, 620, 0, 351, 0, 1046, 652, 0,
	915, 755, 0, 0, 0, 0, 0, 351, 0, 0,
	0, 0, 351, 111, 1496, 0, 1043, 0, 0, 1046,
	55, 351, 56, 1012, 1012, 0, 0, 1432, 0, 569,
	785, 786, 1012, 1012, 125, 0, 0, 0, 1147, 0,
	0, 1334, 1334, 0, 116, 0, 58, 0, 907, 908,
	0, 927, 928, 929, 937, 938, 939, 0, 925, 0,
	0, 0, 129, 0, 930, 1012, 125, 0, 0, 1572,
	0, 910, 0, 0, 941, 0, 116, 0, 0, 1046,
	0, 1962, 0, 0, 1955, 0, 0, 0, 0, 0,
	0, 1044, 1953, 0, 129, 909, 1957, 0, 128, 0,
	0, 924, 0, 0, 0, 0, 123, 0, 0, 1334,
	1334, 1334, 0, 124, 0, 1963, 873, 873, 0, 0,
	0, 0, 879, 0, 0, 0, 0, 1582, 0, 0,
	128, 926, 114, 0, 1009, 1009, 396, 1956, 123, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 1044,
	0, 0, 396, 1046, 0, 915, 0, 0, 945, 946,
	947, 948, 949, 0, 114, 0, 569, 0, 957, 125,
	0, 0, 0, 0, 934, 942, 0, 0, 964, 116,
	0, 0, 0, 0, 0, 1432, 0, 0, 0, 1046,
	1046, 0, 940, 0, 670, 66, 0, 129, 1046, 1046,
	1583, 1012, 0, 0, 0, 1044, 1102, 932, 1102, 1640,
	0, 0, 0, 925, 1958, 523, 1959, 0, 351, 0,
	0, 1043, 1654, 620, 919, 911, 912, 913, 914, 916,
	917, 1046, 0, 128, 0, 0, 0, 0, 931, 0,
	0, 123, 351, 0, 0, 0, 1961, 0, 124, 0,
	0, 66, 351, 1667, 1668, 1964, 0, 0, 1447, 0,
	0, 0, 1674, 1675, 1677, 1679, 1680, 367, 0, 0,
	0, 0, 569, 0, 1687, 0, 1689, 351, 0, 1043,
	0, 0, 0, 1334, 1334, 0, 926, 0, 0, 0,
	351, 0, 0, 1576, 1568, 1569, 1570, 1571, 1573, 1574,
	396, 0, 935, 0, 0, 536, 0, 0, 0, 549,
	0, 0, 351, 351, 0, 0, 1120, 0, 1125, 0,
	0, 0, 0, 0, 1132, 66, 0, 0, 0, 0,
	0, 0, 1960, 0, 0, 1043, 0, 0, 0, 0,
	0, 396, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
	1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
	1334, 0, 1334, 0, 0, 0, 1766, 1046, 0, 933,
	0, 0, 921, 922, 923, 936, 0, 920, 918, 919,
	911, 912, 913, 914, 916, 917, 0, 0, 620, 1045,
	0, 0, 0, 1944, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 804, 0, 0, 1012, 0, 0, 0,
	0, 1045, 0, 0, 0, 1226, 1227, 1228, 1229, 1230,
	1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240,
	1241, 1242, 1243, 1244, 1245, 1246, 1247, 0, 1253, 0,
	1255, 1256, 1257, 1258, 0, 0, 0, 1447, 0, 0,
	1102, 1831, 0, 0, 0, 0, 0, 1281, 0, 0,
	0, 0, 1845, 0, 1012, 0, 0, 861, 804, 0,
	620, 1045, 0, 0, 0, 0, 1855, 0, 0, 0,
	1316, 1317, 0, 0, 1330, 882, 1341, 1343, 1348, 1351,
	1352, 1353, 0, 0, 0, 0, 892, 0, 0, 0,
	0, 0, 0, 620, 896, 896, 0, 0, 0, 351,
	0, 0, 351, 0, 0, 0, 0, 0, 0, 0,
	1012, 0, 0, 1901, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1045, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1566, 1567, 549, 1584, 1585, 1586, 0, 0, 0, 0,
	0, 0, 1046, 0, 0, 0, 1913, 0, 0, 0,
	1931, 1045, 1045, 0, 0, 0, 0, 0, 0, 0,
	1045, 1045, 1009, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 907,
	908, 0, 0, 1581, 1009, 937, 938, 939, 0, 0,
	0, 0, 0, 1045, 0, 0, 0, 0, 0, 0,
	1046, 0, 910, 0, 0, 941, 0, 0, 0, 0,
	1831, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 1831, 627, 1387, 909, 1831, 0, 0,
	0, 0, 924, 0, 0, 0, 0, 1572, 0, 1989,
	1990, 1447, 0, 0, 1009, 0, 0, 0, 1999, 0,
	2000, 0, 351, 2002, 2003, 873, 1046, 2006, 351, 0,
	879, 0, 0, 0, 351, 351, 0, 0, 351, 0,
	1490, 0, 0, 0, 1587, 0, 1901, 0, 0, 0,
	0, 1334, 0, 2031, 0, 1503, 915, 907, 908, 2037,
	0, 627, 0, 0, 0, 1582, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 934, 942, 1334, 0, 0,
	910, 0, 0, 0, 0, 536, 0, 1188, 1009, 0,
	0, 0, 1506, 1507, 0, 0, 0, 0, 1512, 1045,
	0, 0, 1207, 0, 909, 0, 2062, 0, 932, 2064,
	0, 0, 0, 0, 925, 0, 0, 351, 0, 1831,
	0, 1831, 0, 0, 1009, 1009, 0, 0, 0, 0,
	1531, 0, 0, 1009, 1009, 351, 0, 1538, 1583, 0,
	1542, 0, 0, 0, 0, 1447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1556, 0, 0, 0,
	0, 0, 2107, 0, 915, 0, 1009, 1334, 0, 0,
	351, 0, 0, 0, 0, 0, 1901, 0, 0, 0,
	0, 0, 957, 0, 0, 627, 1901, 926, 1348, 1348,
	1348, 1566, 1567, 2128, 1584, 1585, 1586, 954, 0, 956,
	0, 0, 0, 935, 0, 0, 960, 1739, 0, 0,
	0, 0, 0, 0, 2140, 0, 0, 0, 1102, 0,
	907, 908, 925, 0, 1578, 1579, 1580, 0, 0, 1577,
	1575, 1576, 1568, 1569, 1570, 1571, 1573, 1574, 0, 0,
	0, 0, 0, 910, 1581, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2161, 2162, 0, 0, 0, 0,
	0, 0, 627, 0, 1659, 0, 0, 909, 0, 1132,
	933, 0, 0, 1901, 627, 0, 936, 0, 920, 918,
	919, 911, 912, 913, 914, 916, 917, 0, 0, 0,
	0, 0, 0, 620, 0, 926, 0, 0, 1572, 2191,
	0, 0, 1009, 627, 1045, 0, 351, 0, 0, 1831,
	0, 0, 0, 0, 0, 0, 804, 804, 2107, 0,
	0, 1901, 0, 0, 0, 0, 0, 915, 0, 0,
	351, 0, 0, 873, 0, 1587, 0, 0, 1430, 627,
	0, 0, 0, 0, 0, 879, 0, 0, 0, 1730,
	536, 0, 1731, 536, 536, 0, 1582, 0, 1435, 804,
	1437, 0, 1045, 0, 1736, 0, 0, 0, 0, 620,
	0, 0, 0, 1745, 0, 0, 2249, 804, 0, 66,
	620, 1749, 0, 0, 1503, 925, 1474, 918, 919, 911,
	912, 913, 914, 916, 917, 0, 0, 0, 1487, 0,
	0, 0, 0, 892, 1773, 0, 0, 0, 1775, 0,
	0, 0, 892, 0, 0, 0, 0, 0, 1045, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1583,
	66, 0, 66, 0, 0, 0, 0, 0, 66, 0,
	0, 1806, 1807, 0, 0, 0, 0, 0, 0, 0,
	1813, 1814, 1815, 0, 0, 0, 0, 0, 926, 0,
	1566, 1567, 0, 1584, 1585, 1586, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1738, 1271, 0, 0,
	0, 0, 0, 0, 0, 1839, 0, 0, 907, 908,
	0, 927, 928, 929, 937, 938, 939, 0, 0, 0,
	0, 0, 0, 0, 930, 0, 0, 1009, 0, 0,
	0, 910, 0, 1581, 941, 1578, 1579, 1580, 0, 0,
	1577, 1575, 1576, 1568, 1569, 1570, 1571, 1573, 1574, 0,
	0, 0, 0, 0, 0, 909, 0, 0, 0, 0,
	66, 924, 0, 0, 0, 0, 0, 0, 0, 920,
	918, 919, 911, 912, 913, 914, 916, 917, 0, 0,
	0, 0, 0, 0, 0, 1009, 0, 1572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1915, 0,
	0, 0, 1918, 1919, 0, 0, 0, 1921, 0, 0,
	0, 0, 0, 0, 1923, 915, 1925, 0, 0, 0,
	0, 0, 0, 0, 1587, 0, 0, 0, 0, 1648,
	0, 0, 1932, 0, 934, 942, 0, 0, 0, 0,
	0, 1009, 0, 0, 0, 1582, 0, 0, 0, 0,
	0, 0, 940, 1661, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1666, 0, 1941, 0, 932, 0, 0,
	0, 0, 0, 925, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1690, 0,
	0, 0, 0, 0, 0, 0, 0, 1973, 931, 0,
	0, 1474, 0, 0, 66, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1583, 0,
	0, 0, 66, 1207, 1474, 66, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1475, 0, 0,
	0, 0, 2010, 0, 0, 0, 926, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 935, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2044, 2045, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1578, 1579, 1580, 1271, 2057, 1577,
	1575, 1576, 1568, 1569, 1570, 1571, 1573, 1574, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 956, 0, 933,
	0, 0, 921, 922, 923, 936, 0, 920, 918, 919,
	911, 912, 913, 914, 916, 917, 0, 0, 0, 0,
	0, 0, 0, 1608, 0, 0, 0, 0, 0, 0,
	2097, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 907, 908,
	2110, 927, 928, 929, 937, 938, 939, 0, 0, 0,
	0, 0, 0, 956, 930, 0, 0, 0, 0, 0,
	0, 910, 0, 0, 941, 0, 0, 879, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1474, 0, 0, 1474, 0, 909, 0, 0, 0, 0,
	0, 924, 0, 2144, 0, 907, 908, 0, 927, 928,
	929, 937, 938, 939, 0, 0, 0, 0, 0, 0,
	0, 930, 0, 0, 0, 0, 66, 0, 910, 66,
	0, 941, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 909, 0, 0, 915, 0, 0, 924, 0,
	0, 0, 0, 0, 1566, 1567, 0, 1584, 1585, 1586,
	0, 0, 0, 0, 934, 942, 0, 0, 0, 0,
	66, 0, 0, 66, 0, 0, 0, 0, 0, 0,
	0, 66, 940, 0, 0, 0, 0, 66, 0, 0,
	0, 0, 1712, 0, 0, 1566, 1567, 932, 1584, 1585,
	1586, 0, 915, 925, 2220, 2220, 0, 1581, 0, 0,
	0, 0, 0, 0, 0, 1475, 0, 0, 0, 0,
	0, 934, 942, 0, 0, 0, 2236, 0, 931, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 940,
	0, 2220, 0, 0, 0, 0, 0, 0, 1581, 0,
	0, 0, 0, 2001, 932, 0, 0, 0, 0, 2007,
	925, 1572, 0, 0, 0, 1474, 1474, 0, 0, 1474,
	0, 0, 0, 0, 0, 0, 926, 0, 0, 0,
	0, 1588, 2220, 0, 0, 931, 0, 0, 0, 0,
	0, 0, 935, 0, 0, 0, 0, 0, 1587, 0,
	0, 0, 1572, 0, 0, 0, 0, 0, 907, 908,
	0, 927, 928, 929, 937, 938, 939, 0, 0, 1582,
	0, 0, 0, 0, 930, 0, 0, 0, 0, 0,
	0, 910, 0, 926, 941, 0, 0, 0, 0, 1587,
	0, 0, 0, 0, 0, 0, 0, 0, 2071, 935,
	0, 0, 0, 0, 0, 909, 0, 0, 0, 933,
	1582, 924, 921, 922, 923, 936, 2090, 920, 918, 919,
	911, 912, 913, 914, 916, 917, 0, 0, 0, 0,
	0, 0, 0, 1607, 0, 0, 0, 0, 0, 0,
	0, 0, 1583, 0, 0, 0, 0, 0, 0, 0,
	0, 1474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1475, 0, 0, 1475, 915, 933, 0, 0, 921,
	922, 923, 936, 0, 920, 918, 919, 911, 912, 913,
	914, 916, 917, 1583, 934, 942, 0, 0, 0, 66,
	1606, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 940, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 932, 0, 0,
	0, 0, 0, 925, 0, 0, 0, 0, 1578, 1579,
	1580, 0, 0, 1577, 1575, 1576, 1568, 1569, 1570, 1571,
	1573, 1574, 0, 0, 0, 0, 0, 0, 931, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1578,
	1579, 1580, 0, 0, 1577, 1575, 1576, 1568, 1569, 1570,
	1571, 1573, 1574, 0, 0, 0, 0, 2197, 0, 0,
	0, 0, 0, 0, 0, 0, 926, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1207, 935, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1475, 1475, 0, 0,
	1475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2042, 0, 933,
	0, 0, 921, 922, 923, 936, 0, 920, 918, 919,
	911, 912, 913, 914, 916, 917, 0, 0, 0, 0,
	0, 0, 0, 1558, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 66, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 393, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 956, 141,
	142, 412, 143, 413, 414, 415, 416, 294, 417, 418,
	419, 420, 144, 145, 146, 295, 296, 297, 298, 147,
	299, 300, 421, 148, 301, 302, 149, 150, 422, 423,
	303, 304, 305, 424, 151, 306, 425, 398, 426, 152,
	153, 154, 0, 155, 427, 156, 157, 158, 428, 399,
	159, 160, 429, 430, 432, 431, 433, 434, 435, 161,
	162, 352, 163, 307, 164, 308, 309, 436, 165, 437,
	166, 438, 167, 439, 440, 168, 169, 441, 170, 442,
	0, 443, 310, 171, 172, 173, 311, 312, 444, 445,
	446, 174, 175, 313, 314, 315, 0, 176, 447, 177,
	448, 449, 400, 450, 178, 316, 451, 317, 452, 179,
	180, 181, 182, 318, 319, 402, 453, 186, 454, 183,
	455, 401, 184, 320, 185, 321, 322, 323, 324, 325,
	456, 326, 457, 403, 187, 188, 189, 404, 190, 191,
	192, 458, 194, 193, 459, 327, 405, 195, 406, 460,
	196, 461, 462, 197, 0, 198, 199, 200, 202, 328,
	201, 407, 203, 204, 206, 205, 463, 464, 465, 329,
	207, 330, 208, 209, 466, 210, 467, 468, 211, 469,
	470, 212, 331, 408, 213, 409, 332, 214, 215, 216,
	217, 218, 471, 219, 333, 220, 334, 221, 472, 222,
	223, 224, 225, 226, 335, 227, 228, 473, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 240,
	474, 241, 410, 242, 243, 336, 244, 0, 248, 249,
	250, 251, 475, 253, 337, 252, 254, 255, 476, 256,
	245, 246, 257, 411, 258, 338, 339, 259, 477, 265,
	260, 261, 247, 262, 264, 340, 263, 341, 478, 266,
	479, 267, 268, 269, 270, 271, 272, 273, 480, 342,
	343, 344, 481, 482, 274, 275, 345, 346, 483, 276,
	277, 278, 279, 484, 485, 280, 281, 282, 283, 486,
	284, 487, 347, 285, 286, 287, 348, 349, 488, 489,
	288, 490, 491, 492, 493, 289, 290, 291, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 393, 0, 0, 0, 0, 0, 0, 1895, 0,
	0, 0, 0, 0, 0, 0, 1896, 141, 142, 412,
	143, 413, 414, 415, 416, 294, 417, 418, 419, 420,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	421, 148, 301, 302, 149, 150, 422, 423, 303, 304,
	305, 424, 151, 306, 425, 398, 426, 152, 153, 154,
	0, 155, 427, 156, 157, 158, 428, 399, 159, 160,
	429, 430, 432, 431, 433, 434, 435, 161, 162, 352,
	163, 307, 164, 308, 309, 436, 165, 437, 166, 438,
	167, 439, 440, 168, 169, 441, 170, 442, 0, 443,
	310, 171, 172, 173, 311, 312, 444, 445, 446, 174,
	175, 313, 314, 315, 0, 176, 447, 177, 448, 449,
	400, 450, 178, 316, 451, 317, 452, 179, 180, 181,
	182, 318, 319, 402, 453, 186, 454, 183, 455, 401,
	184, 320, 185, 321, 322, 323, 324, 325, 456, 326,
	457, 403, 187, 188, 189, 404, 190, 191, 192, 458,
	194, 193, 459, 327, 405, 195, 406, 460, 196, 461,
	462, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 463, 464, 465, 329, 207, 330,
	208, 209, 466, 210, 467, 468, 211, 469, 470, 212,
	331, 408, 213, 409, 332, 214, 215, 216, 217, 218,
	471, 219, 333, 220, 334, 221, 472, 222, 223, 224,
	225, 226, 335, 227, 228, 473, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 474, 241,
	410, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	475, 253, 337, 252, 254, 255, 476, 256, 245, 246,
	257, 411, 258, 338, 339, 259, 477, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 478, 266, 479, 267,
	268, 269, 270, 271, 272, 273, 480, 342, 343, 344,
	481, 482, 274, 275, 345, 346, 483, 276, 277, 278,
	279, 484, 485, 280, 281, 282, 283, 486, 284, 487,
	347, 285, 286, 287, 348, 349, 488, 489, 288, 490,
	491, 492, 493, 289, 290, 291, 292, 293, 0, 0,
	0, 393, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2172, 141, 142, 412,
	143, 413, 414, 415, 416, 294, 417, 418, 419, 420,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	421, 148, 301, 302, 149, 150, 422, 423, 303, 304,
	305, 424, 151, 306, 425, 398, 426, 152, 153, 154,
	0, 155, 427, 156, 157, 158, 428, 399, 159, 160,
	429, 430, 432, 431, 433, 434, 435, 161, 162, 352,
	163, 307, 164, 308, 309, 436, 165, 437, 166, 438,
	167, 439, 440, 168, 169, 441, 170, 442, 0, 443,
	310, 171, 172, 173, 311, 312, 444, 445, 446, 174,
	175, 313, 314, 315, 0, 176, 447, 177, 448, 449,
	400, 450, 178, 316, 451, 317, 452, 179, 180, 181,
	182, 318, 319, 402, 453, 186, 454, 183, 455, 401,
	184, 320, 185, 321, 322, 323, 324, 325, 456, 326,
	457, 403, 187, 188, 189, 404, 190, 191, 192, 458,
	194, 193, 459, 327, 405, 195, 406, 460, 196, 461,
	462, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 463, 464, 465, 329, 207, 330,
	208, 209, 466, 210, 467, 468, 211, 469, 470, 212,
	331, 408, 213, 409, 332, 214, 215, 216, 217, 218,
	471, 219, 333, 220, 334, 221, 472, 222, 223, 224,
	225, 226, 335, 227, 228, 473, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 474, 241,
	410, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	475, 253, 337, 252, 254, 255, 476, 256, 245, 246,
	257, 411, 258, 338, 339, 259, 477, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 478, 266, 479, 267,
	268, 269, 270, 271, 272, 273, 480, 342, 343, 344,
	481, 482, 274, 275, 345, 346, 483, 276, 277, 278,
	279, 484, 485, 280, 281, 282, 283, 486, 284, 487,
	347, 285, 286, 287, 348, 349, 488, 489, 288, 490,
	491, 492, 493, 289, 290, 291, 292, 293, 393, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 888, 0, 0, 141, 142, 412, 143, 413, 414,
	415, 416, 294, 417, 418, 419, 420, 144, 145, 146,
	295, 296, 297, 298, 147, 299, 300, 421, 148, 301,
	302, 149, 150, 422, 423, 303, 304, 305, 424, 151,
	306, 425, 398, 426, 152, 153, 154, 0, 155, 427,
	156, 157, 158, 428, 399, 159, 160, 429, 430, 432,
	431, 433, 434, 435, 161, 162, 352, 163, 307, 164,
	308, 309, 436, 165, 437, 166, 438, 167, 439, 440,
	168, 169, 441, 170, 442, 0, 443, 310, 171, 172,
	173, 311, 312, 444, 445, 446, 174, 175, 313, 314,
	315, 0, 176, 447, 177, 448, 449, 400, 450, 178,
	316, 451, 317, 452, 179, 180, 181, 182, 318, 319,
	402, 453, 186, 454, 183, 455, 401, 184, 320, 185,
	321, 322, 323, 324, 325, 456, 326, 457, 403, 187,
	188, 189, 404, 190, 191, 192, 458, 194, 193, 459,
	327, 405, 195, 406, 460, 196, 461, 462, 197, 0,
	198, 199, 200, 202, 328, 201, 407, 203, 204, 206,
	205, 463, 464, 465, 329, 207, 330, 208, 209, 466,
	210, 467, 468, 211, 469, 470, 212, 331, 408, 213,
	409, 332, 214, 215, 216, 217, 218, 471, 219, 333,
	220, 334, 221, 472, 222, 223, 224, 225, 226, 335,
	227, 228, 473, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 474, 241, 410, 242, 243,
	336, 244, 0, 248, 249, 250, 251, 475, 253, 337,
	252, 254, 255, 476, 256, 245, 246, 257, 411, 258,
	338, 339, 259, 477, 265, 260, 261, 247, 262, 264,
	340, 263, 341, 478, 266, 479, 267, 268, 269, 270,
	271, 272, 273, 480, 342, 343, 344, 481, 482, 274,
	275, 345, 346, 483, 276, 277, 278, 279, 484, 485,
	280, 281, 282, 283, 486, 284, 487, 347, 285, 286,
	287, 348, 349, 488, 489, 288, 490, 491, 492, 493,
	289, 290, 291, 292, 293, 689, 678, 679, 676, 677,
	668, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 142, 0, 143, 0, 0, 0, 0, 706,
	671, 0, 0, 0, 144, 145, 146, 295, 721, 297,
	722, 147, 723, 724, 0, 148, 301, 302, 149, 150,
	674, 705, 725, 726, 305, 0, 151, 717, 0, 697,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 399, 159, 160, 0, 698, 699, 701, 0, 700,
	702, 161, 162, 352, 163, 727, 164, 728, 729, 880,
	165, 0, 166, 0, 167, 0, 0, 720, 169, 0,
	170, 0, 0, 0, 662, 171, 172, 173, 707, 708,
	685, 0, 0, 174, 175, 730, 731, 732, 0, 176,
	0, 177, 0, 0, 400, 0, 178, 718, 0, 317,
	0, 179, 180, 181, 182, 714, 716, 402, 0, 186,
	0, 183, 0, 401, 184, 733, 185, 734, 735, 736,
	737, 738, 0, 696, 0, 403, 187, 188, 189, 404,
	190, 191, 192, 0, 194, 193, 0, 719, 405, 195,
	406, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 407, 203, 204, 206, 205, 657, 0,
	686, 715, 207, 739, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 408, 213, 409, 709, 214,
	215, 216, 217, 218, 0, 219, 710, 220, 334, 221,
	0, 222, 223, 224, 225, 226, 740, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 410, 242, 243, 663, 244, 0,
	248, 249, 250, 251, 125, 253, 337, 252, 254, 255,
	703, 256, 245, 246, 257, 411, 258, 741, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 742, 263, 711,
	0, 266, 129, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 743, 744, 0, 0, 274, 275, 712, 713,
	684, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 704, 284, 0, 347, 285, 286, 287, 649, 745,
	0, 0, 288, 0, 0, 0, 123, 289, 290, 291,
	292, 293, 658, 124, 0, 0, 0, 0, 656, 0,
	0, 0, 0, 654, 655, 689, 678, 679, 676, 677,
	668, 0, 664, 0, 0, 0, 0, 667, 0, 0,
	0, 141, 142, 1297, 143, 0, 0, 0, 0, 706,
	671, 0, 0, 0, 144, 145, 146, 295, 721, 297,
	722, 147, 723, 724, 0, 148, 301, 302, 149, 150,
	674, 705, 725, 726, 305, 0, 151, 717, 0, 697,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 399, 159, 160, 0, 698, 699, 701, 0, 700,
	702, 161, 162, 352, 163, 727, 164, 728, 729, 0,
	165, 0, 166, 0, 167, 1298, 0, 720, 169, 0,
	170, 0, 0, 0, 662, 171, 172, 173, 707, 708,
	685, 0, 0, 174, 175, 730, 731, 732, 0, 176,
	0, 177, 0, 0, 400, 0, 178, 718, 0, 317,
	0, 179, 180, 181, 182, 714, 716, 402, 0, 186,
	0, 183, 0, 401, 184, 733, 185, 734, 735, 736,
	737, 738, 0, 696, 0, 403, 187, 188, 189, 404,
	190, 191, 192, 0, 194, 193, 0, 719, 405, 195,
	406, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 407, 203, 204, 206, 205, 657, 0,
	686, 715, 207, 739, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 408, 213, 409, 709, 214,
	215, 216, 217, 218, 0, 219, 710, 220, 334, 221,
	0, 222, 223, 224, 225, 226, 740, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 410, 242, 243, 663, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	703, 256, 245, 246, 257, 411, 258, 741, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 742, 263, 711,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 743, 744, 0, 0, 274, 275, 712, 713,
	684, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 704, 284, 0, 347, 285, 286, 287, 348, 745,
	1296, 0, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 658, 0, 0, 0, 0, 0, 656, 0,
	0, 0, 0, 654, 655, 1299, 689, 678, 679, 676,
	677, 668, 664, 1294, 0, 0, 0, 667, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	706, 671, 0, 0, 0, 144, 145, 146, 295, 721,
	297, 722, 147, 723, 724, 0, 148, 301, 302, 149,
	150, 674, 705, 725, 726, 305, 0, 151, 717, 0,
	697, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 399, 159, 160, 0, 698, 699, 701, 0,
	700, 702, 161, 162, 352, 163, 727, 164, 728, 729,
	0, 165, 0, 166, 0, 167, 0, 0, 720, 169,
	0, 170, 0, 0, 0, 662, 171, 172, 173, 707,
	708, 685, 0, 0, 174, 175, 730, 731, 732, 0,
	176, 0, 177, 0, 0, 400, 0, 178, 718, 0,
	317, 0, 179, 180, 181, 182, 714, 716, 402, 0,
	186, 0, 183, 0, 401, 184, 733, 185, 734, 735,
	736, 737, 738, 0, 696, 0, 403, 187, 188, 189,
	404, 190, 191, 192, 0, 194, 193, 0, 719, 405,
	195, 406, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 407, 203, 204, 206, 205, 657,
	0, 686, 715, 207, 739, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 408, 213, 409, 709,
	214, 215, 216, 217, 218, 0, 219, 710, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 740, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 410, 242, 243, 663, 244,
	0, 248, 249, 250, 251, 125, 253, 337, 252, 254,
	255, 703, 256, 245, 246, 257, 411, 258, 741, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 742, 263,
	711, 0, 266, 129, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 743, 744, 0, 0, 274, 275, 712,
	713, 684, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 704, 284, 0, 347, 285, 286, 287, 649,
	745, 0, 0, 288, 0, 0, 0, 123, 289, 290,
	291, 292, 293, 658, 124, 0, 0, 0, 0, 656,
	0, 0, 0, 0, 654, 655, 689, 678, 679, 676,
	677, 668, 0, 664, 0, 0, 0, 0, 667, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	706, 671, 0, 0, 0, 144, 145, 146, 295, 721,
	297, 722, 147, 723, 724, 1344, 148, 301, 302, 149,
	150, 674, 705, 725, 726, 305, 0, 151, 717, 0,
	697, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 399, 159, 160, 0, 698, 699, 701, 0,
	700, 702, 161, 162, 352, 163, 727, 164, 728, 729,
	0, 165, 0, 166, 0, 167, 0, 0, 720, 169,
	0, 170, 0, 0, 0, 662, 171, 172, 173, 707,
	708, 685, 0, 0, 174, 175, 730, 731, 732, 0,
	176, 0, 177, 0, 1349, 400, 0, 178, 718, 0,
	317, 0, 179, 180, 181, 182, 714, 716, 402, 0,
	186, 0, 183, 0, 401, 184, 733, 185, 734, 735,
	736, 737, 738, 0, 696, 0, 403, 187, 188, 189,
	404, 190, 191, 192, 0, 194, 193, 1345, 719, 405,
	195, 406, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 407, 203, 204, 206, 205, 657,
	0, 686, 715, 207, 739, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 408, 213, 409, 709,
	214, 215, 216, 217, 218, 0, 219, 710, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 740, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 410, 242, 243, 663, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 703, 256, 245, 246, 257, 411, 258, 741, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 742, 263,
	711, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 743, 744, 0, 1346, 274, 275, 712,
	713, 684, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 704, 284, 0, 347, 285, 286, 287, 348,
	745, 0, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 658, 0, 0, 0, 0, 0, 656,
	0, 0, 0, 0, 654, 655, 689, 678, 679, 676,
	677, 668, 0, 664, 0, 0, 0, 0, 667, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	706, 671, 0, 0, 0, 144, 145, 146, 295, 721,
	297, 722, 147, 723, 724, 0, 148, 301, 302, 149,
	150, 674, 705, 725, 726, 305, 0, 151, 717, 0,
	697, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 399, 159, 160, 0, 698, 699, 701, 0,
	700, 702, 161, 162, 352, 163, 727, 164, 728, 729,
	0, 165, 0, 166, 0, 167, 0, 0, 720, 169,
	0, 170, 0, 0, 0, 662, 171, 172, 173, 707,
	708, 685, 0, 0, 174, 175, 730, 731, 732, 0,
	176, 0, 177, 0, 0, 400, 0, 178, 718, 0,
	317, 0, 179, 180, 181, 182, 714, 716, 402, 0,
	186, 0, 183, 0, 401, 184, 733, 185, 734, 735,
	736, 737, 738, 0, 696, 0, 403, 187, 188, 189,
	404, 190, 191, 192, 0, 194, 193, 0, 719, 405,
	195, 406, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 407, 203, 204, 206, 205, 657,
	1721, 686, 715, 207, 739, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 408, 213, 409, 709,
	214, 215, 216, 217, 218, 0, 219, 710, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 740, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 410, 242, 243, 663, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 703, 256, 245, 246, 257, 411, 258, 741, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 742, 263,
	711, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 743, 744, 0, 0, 274, 275, 712,
	713, 684, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 704, 284, 0, 347, 285, 286, 287, 348,
	745, 0, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 658, 0, 0, 0, 0, 0, 656,
	0, 0, 0, 0, 654, 655, 874, 689, 678, 679,
	676, 677, 668, 664, 0, 0, 0, 0, 667, 0,
	0, 0, 0, 141, 142, 0, 143, 0, 0, 0,
	0, 706, 671, 0, 0, 0, 144, 145, 146, 295,
	721, 297, 722, 147, 723, 724, 0, 148, 301, 302,
	149, 150, 674, 705, 725, 726, 305, 0, 151, 717,
	0, 697, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 399, 159, 160, 0, 698, 699, 701,
	0, 700, 702, 161, 162, 352, 163, 727, 164, 728,
	729, 0, 165, 0, 166, 0, 167, 0, 0, 720,
	169, 0, 170, 0, 0, 0, 662, 171, 172, 173,
	707, 708, 685, 0, 0, 174, 175, 730, 731, 732,
	0, 176, 0, 177, 0, 0, 400, 0, 178, 718,
	0, 317, 0, 179, 180, 181, 182, 714, 716, 402,
	0, 186, 1134, 183, 0, 401, 184, 733, 185, 734,
	735, 736, 737, 738, 0, 696, 0, 403, 187, 188,
	189, 404, 190, 191, 192, 0, 194, 193, 0, 719,
	405, 195, 406, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 407, 203, 204, 206, 205,
	657, 0, 686, 715, 207, 739, 208, 209, 0, 210,
	0, 0, 211, 0, 0, 212, 331, 408, 213, 409,
	709, 214, 215, 216, 217, 218, 0, 219, 710, 220,
	334, 221, 1133, 222, 223, 224, 225, 226, 740, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 410, 242, 243, 663,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 703, 256, 245, 246, 257, 411, 258, 741,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 742,
	263, 711, 0, 266, 0, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 743, 744, 0, 0, 274, 275,
	712, 713, 684, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 704, 284, 0, 347, 285, 286, 287,
	348, 745, 0, 0, 288, 0, 0, 0, 0, 289,
	290, 291, 292, 293, 658, 0, 0, 0, 0, 0,
	656, 0, 0, 0, 0, 654, 655, 689, 678, 679,
	676, 677, 668, 0, 664, 0, 0, 0, 0, 667,
	0, 0, 0, 141, 142, 0, 143, 0, 0, 0,
	0, 706, 671, 0, 0, 0, 144, 145, 146, 295,
	721, 297, 722, 147, 723, 724, 0, 148, 301, 302,
	149, 150, 674, 705, 725, 726, 305, 0, 151, 717,
	0, 697, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 399, 159, 160, 0, 698, 699, 701,
	0, 700, 702, 161, 162, 352, 163, 727, 164, 728,
	729, 0, 165, 0, 166, 0, 167, 0, 0, 720,
	169, 0, 170, 0, 0, 0, 662, 171, 172, 173,
	707, 708, 685, 0, 0, 174, 175, 730, 731, 732,
	0, 176, 0, 177, 0, 0, 400, 0, 178, 718,
	0, 317, 0, 179, 180, 181, 182, 714, 716, 402,
	0, 186, 0, 183, 0, 401, 184, 733, 185, 734,
	735, 736, 737, 738, 0, 696, 0, 403, 187, 188,
	189, 404, 190, 191, 192, 0, 194, 193, 0, 719,
	405, 195, 406, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 407, 203, 204, 206, 205,
	657, 0, 686, 715, 207, 739, 208, 209, 0, 210,
	0, 0, 211, 0, 0, 212, 331, 408, 213, 409,
	709, 214, 215, 216, 217, 218, 0, 219, 710, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 740, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 410, 242, 243, 663,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 703, 256, 245, 246, 257, 411, 258, 741,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 742,
	263, 711, 0, 266, 0, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 743, 744, 0, 0, 274, 275,
	712, 713, 684, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 704, 284, 0, 347, 285, 286, 287,
	348, 745, 0, 0, 288, 0, 0, 0, 0, 289,
	290, 291, 292, 293, 658, 0, 0, 0, 0, 0,
	656, 0, 0, 0, 0, 654, 655, 0, 0, 0,
	0, 0, 962, 1289, 664, 0, 0, 0, 0, 667,
	689, 678, 679, 676, 677, 668, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 706, 671, 0, 0, 0, 144,
	145, 146, 295, 721, 297, 722, 147, 723, 724, 0,
	148, 301, 302, 149, 150, 674, 705, 725, 726, 305,
	0, 151, 717, 0, 697, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 399, 159, 160, 0,
	698, 699, 701, 0, 700, 702, 161, 162, 352, 163,
	727, 164, 728, 729, 0, 165, 0, 166, 0, 167,
	0, 0, 720, 169, 0, 170, 0, 0, 0, 662,
	171, 172, 173, 707, 708, 685, 0, 0, 174, 175,
	730, 731, 732, 0, 176, 0, 177, 0, 0, 400,
	0, 178, 718, 0, 317, 0, 179, 180, 181, 182,
	714, 716, 402, 0, 186, 0, 183, 0, 401, 184,
	733, 185, 734, 735, 736, 737, 738, 0, 696, 0,
	403, 187, 188, 189, 404, 190, 191, 192, 0, 194,
	193, 0, 719, 405, 195, 406, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 407, 203,
	204, 206, 205, 657, 0, 686, 715, 207, 739, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	408, 213, 409, 709, 214, 215, 216, 217, 218, 0,
	219, 710, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 740, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 410,
	242, 243, 663, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 703, 256, 245, 246, 257,
	411, 258, 741, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 742, 263, 711, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 743, 744, 0,
	0, 274, 275, 712, 713, 684, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 704, 284, 0, 347,
	285, 286, 287, 348, 745, 0, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 658, 0, 0,
	0, 0, 0, 656, 0, 0, 0, 0, 654, 655,
	689, 678, 679, 676, 677, 668, 0, 664, 1803, 0,
	0, 0, 667, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 706, 671, 0, 0, 0, 144,
	145, 146, 295, 721, 297, 722, 147, 723, 724, 0,
	148, 301, 302, 149, 150, 674, 705, 725, 726, 305,
	0, 151, 717, 0, 697, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 399, 159, 160, 0,
	698, 699, 701, 0, 700, 702, 161, 162, 352, 163,
	727, 164, 728, 729, 0, 165, 0, 166, 0, 167,
	0, 0, 720, 169, 0, 170, 0, 0, 0, 662,
	171, 172, 173, 707, 708, 685, 0, 0, 174, 175,
	730, 731, 732, 0, 176, 0, 177, 0, 0, 400,
	0, 178, 718, 0, 317, 0, 179, 180, 181, 182,
	714, 716, 402, 0, 186, 0, 183, 0, 401, 184,
	733, 185, 734, 735, 736, 737, 738, 0, 696, 0,
	403, 187, 188, 189, 404, 190, 191, 192, 0, 194,
	193, 0, 719, 405, 195, 406, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 407, 203,
	204, 206, 205, 657, 0, 686, 715, 207, 739, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	408, 213, 409, 709, 214, 215, 216, 217, 218, 0,
	219, 710, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 740, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 410,
	242, 243, 663, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 703, 256, 245, 246, 257,
	411, 258, 741, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 742, 263, 711, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 743, 744, 0,
	0, 274, 275, 712, 713, 684, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 704, 284, 0, 347,
	285, 286, 287, 348, 745, 1752, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 658, 0, 0,
	0, 0, 0, 656, 0, 0, 0, 0, 654, 655,
	689, 678, 679, 676, 677, 668, 0, 664, 0, 0,
	0, 0, 667, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 706, 671, 0, 0, 0, 144,
	145, 146, 295, 721, 297, 722, 147, 723, 724, 0,
	148, 301, 302, 149, 150, 674, 705, 725, 726, 305,
	0, 151, 717, 0, 697, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 399, 159, 160, 0,
	698, 699, 701, 0, 700, 702, 161, 162, 352, 163,
	727, 164, 728, 729, 0, 165, 0, 166, 0, 167,
	0, 0, 720, 169, 0, 170, 0, 0, 0, 662,
	171, 172, 173, 707, 708, 685, 0, 0, 174, 175,
	730, 731, 732, 0, 176, 0, 177, 0, 0, 400,
	0, 178, 718, 0, 317, 0, 179, 180, 181, 182,
	714, 716, 402, 0, 186, 0, 183, 0, 401, 184,
	733, 185, 734, 735, 736, 737, 738, 0, 696, 0,
	403, 187, 188, 189, 404, 190, 191, 192, 0, 194,
	193, 0, 719, 405, 195, 406, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 407, 203,
	204, 206, 205, 657, 0, 686, 715, 207, 739, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	408, 213, 409, 709, 214, 215, 216, 217, 218, 0,
	219, 710, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 740, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 410,
	242, 243, 663, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 703, 256, 245, 246, 257,
	411, 258, 741, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 742, 263, 711, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 743, 744, 0,
	0, 274, 275, 712, 713, 684, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 704, 284, 0, 347,
	285, 286, 287, 348, 745, 0, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 658, 0, 0,
	0, 0, 0, 656, 0, 0, 0, 0, 654, 655,
	689, 678, 679, 676, 677, 668, 0, 664, 1742, 0,
	0, 0, 667, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 706, 671, 0, 0, 0, 144,
	145, 146, 295, 721, 297, 722, 147, 723, 724, 0,
	148, 301, 302, 149, 150, 674, 705, 725, 726, 305,
	0, 151, 717, 0, 697, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 399, 159, 160, 0,
	698, 699, 701, 0, 700, 702, 161, 162, 352, 163,
	727, 164, 728, 729, 880, 165, 0, 166, 0, 167,
	0, 0, 720, 169, 0, 170, 0, 0, 0, 662,
	171, 172, 173, 707, 708, 685, 0, 0, 174, 175,
	730, 731, 732, 0, 176, 0, 177, 0, 0, 400,
	0, 178, 718, 0, 317, 0, 179, 180, 181, 182,
	714, 716, 402, 0, 186, 0, 183, 0, 401, 184,
	733, 185, 734, 735, 736, 737, 738, 0, 696, 0,
	403, 187, 188, 189, 404, 190, 191, 192, 0, 194,
	193, 0, 719, 405, 195, 406, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 407, 203,
	204, 206, 205, 657, 0, 686, 715, 207, 739, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	408, 213, 409, 709, 214, 215, 216, 217, 218, 0,
	219, 710, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 740, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 410,
	242, 243, 663, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 703, 256, 245, 246, 257,
	411, 258, 741, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 742, 263, 711, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 743, 744, 0,
	0, 274, 275, 712, 713, 684, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 704, 284, 0, 347,
	285, 286, 287, 348, 745, 0, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 658, 0, 0,
	0, 0, 0, 656, 0, 0, 0, 0, 654, 655,
	689, 678, 679, 676, 677, 668, 0, 664, 0, 0,
	0, 0, 667, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 706, 671, 0, 0, 0, 144,
	145, 146, 295, 721, 297, 722, 147, 723, 724, 0,
	148, 301, 302, 149, 150, 674, 705, 725, 726, 305,
	0, 151, 717, 0, 697, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 399, 159, 160, 0,
	698, 699, 701, 0, 700, 702, 161, 162, 352, 163,
	727, 164, 728, 729, 0, 165, 0, 166, 0, 167,
	0, 0, 720, 169, 0, 170, 0, 0, 0, 662,
	171, 172, 173, 707, 708, 685, 0, 0, 174, 175,
	730, 731, 732, 0, 176, 0, 177, 0, 1349, 400,
	0, 178, 718, 0, 317, 0, 179, 180, 181, 182,
	714, 716, 402, 0, 186, 0, 183, 0, 401, 184,
	733, 185, 734, 735, 736, 737, 738, 0, 696, 0,
	403, 187, 188, 189, 404, 190, 191, 192, 0, 194,
	193, 0, 719, 405, 195, 406, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 407, 203,
	204, 206, 205, 657, 0, 686, 715, 207, 739, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	408, 213, 409, 709, 214, 215, 216, 217, 218, 0,
	219, 710, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 740, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 410,
	242, 243, 663, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 703, 256, 245, 246, 257,
	411, 258, 741, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 742, 263, 711, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 743, 744, 0,
	0, 274, 275, 712, 713, 684, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 704, 284, 0, 347,
	285, 286, 287, 348, 745, 0, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 658, 0, 0,
	0, 0, 0, 656, 0, 0, 0, 0, 654, 655,
	689, 678, 679, 676, 677, 668, 0, 664, 0, 0,
	0, 0, 667, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 706, 671, 0, 0, 0, 144,
	145, 146, 295, 721, 297, 722, 147, 723, 724, 0,
	148, 301, 302, 149, 150, 674, 705, 725, 726, 305,
	0, 151, 717, 0, 697, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 399, 159, 160, 0,
	698, 699, 701, 0, 700, 702, 161, 162, 352, 163,
	727, 164, 728, 729, 0, 165, 0, 166, 0, 167,
	0, 0, 720, 169, 0, 170, 0, 0, 0, 662,
	171, 172, 173, 707, 708, 685, 0, 0, 174, 175,
	730, 731, 732, 0, 176, 0, 177, 0, 0, 400,
	0, 178, 718, 0, 317, 0, 179, 180, 181, 182,
	714, 716, 402, 0, 186, 0, 183, 0, 401, 184,
	733, 185, 734, 735, 736, 737, 738, 0, 696, 0,
	403, 187, 188, 189, 404, 190, 191, 192, 0, 194,
	193, 0, 719, 405, 195, 406, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 407, 203,
	204, 206, 205, 657, 0, 686, 715, 207, 739, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	408, 213, 409, 709, 214, 215, 216, 217, 218, 0,
	219, 710, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 740, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 410,
	242, 243, 663, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 703, 256, 245, 246, 257,
	411, 258, 741, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 742, 263, 711, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 743, 744, 0,
	0, 274, 275, 712, 713, 684, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 704, 284, 0, 347,
	285, 286, 287, 348, 745, 0, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 658, 0, 0,
	0, 0, 0, 656, 0, 0, 0, 0, 654, 655,
	874, 689, 678, 679, 676, 677, 668, 664, 0, 0,
	0, 0, 667, 0, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 706, 671, 0, 0, 0,
	144, 145, 146, 295, 721, 297, 722, 147, 723, 724,
	0, 148, 301, 302, 149, 150, 674, 705, 725, 726,
	305, 0, 151, 717, 0, 697, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 399, 159, 160,
	0, 698, 699, 701, 0, 700, 702, 161, 162, 352,
	163, 727, 164, 728, 729, 0, 165, 0, 166, 0,
	167, 0, 0, 720, 169, 0, 170, 0, 0, 0,
	662, 171, 172, 173, 707, 708, 685, 0, 0, 174,
	175, 730, 731, 732, 0, 176, 0, 177, 0, 0,
	400, 0, 178, 718, 0, 317, 0, 179, 180, 181,
	182, 714, 716, 402, 0, 186, 0, 183, 0, 401,
	184, 733, 185, 734, 735, 736, 737, 738, 0, 696,
	0, 403, 187, 188, 189, 404, 190, 191, 192, 0,
	194, 193, 0, 719, 405, 195, 406, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 657, 0, 686, 715, 207, 739,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 408, 213, 409, 709, 214, 215, 216, 217, 218,
	0, 219, 710, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 740, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	410, 242, 243, 663, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 703, 256, 245, 246,
	257, 411, 258, 741, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 742, 263, 711, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 743, 744,
	0, 0, 274, 275, 712, 713, 684, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 704, 284, 0,
	347, 285, 286, 287, 348, 745, 0, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 658, 0,
	0, 0, 0, 0, 656, 0, 0, 0, 0, 654,
	655, 689, 678, 679, 676, 677, 668, 0, 664, 1284,
	0, 0, 0, 667, 0, 0, 0, 141, 142, 1121,
	143, 0, 0, 0, 0, 706, 671, 0, 0, 0,
	144, 145, 146, 295, 721, 297, 722, 147, 723, 724,
	0, 148, 301, 302, 149, 150, 674, 705, 725, 726,
	305, 0, 151, 717, 0, 697, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 399, 159, 160,
	0, 698, 699, 701, 0, 700, 702, 161, 162, 352,
	163, 727, 164, 728, 729, 0, 165, 0, 166, 0,
	167, 0, 0, 720, 169, 0, 170, 0, 0, 0,
	662, 171, 172, 173, 707, 708, 685, 0, 0, 174,
	175, 730, 731, 732, 0, 176, 0, 177, 0, 0,
	400, 0, 178, 718, 0, 317, 0, 179, 180, 181,
	182, 714, 716, 402, 0, 186, 0, 183, 0, 401,
	184, 733, 185, 734, 735, 736, 737, 738, 0, 696,
	0, 403, 187, 188, 189, 404, 190, 191, 192, 0,
	194, 193, 0, 719, 405, 195, 406, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 657, 0, 686, 715, 207, 739,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 408, 213, 409, 709, 214, 215, 216, 217, 218,
	0, 219, 710, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 740, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	410, 242, 243, 663, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 703, 256, 245, 246,
	257, 411, 258, 741, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 742, 263, 711, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 743, 744,
	0, 0, 274, 275, 712, 713, 684, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 704, 284, 0,
	347, 285, 286, 287, 348, 745, 0, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 658, 0,
	0, 0, 0, 0, 656, 0, 0, 0, 0, 654,
	655, 689, 678, 679, 676, 677, 668, 0, 664, 0,
	0, 0, 0, 667, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 706, 671, 0, 0, 0,
	144, 145, 146, 295, 721, 297, 722, 147, 723, 724,
	0, 148, 301, 302, 149, 150, 674, 705, 725, 726,
	305, 0, 151, 717, 0, 697, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 399, 159, 2219,
	0, 698, 699, 701, 0, 700, 702, 161, 162, 352,
	163, 727, 164, 728, 729, 0, 165, 0, 166, 0,
	167, 0, 0, 720, 169, 0, 170, 0, 0, 0,
	662, 171, 172, 173, 707, 708, 685, 0, 0, 174,
	175, 730, 731, 732, 0, 176, 0, 177, 0, 0,
	400, 0, 178, 718, 0, 317, 0, 179, 180, 181,
	182, 714, 716, 402, 0, 186, 0, 183, 0, 401,
	184, 733, 185, 734, 735, 736, 737, 738, 0, 696,
	0, 403, 187, 188, 189, 404, 190, 191, 192, 0,
	194, 193, 0, 719, 405, 195, 406, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 657, 0, 686, 715, 207, 739,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 408, 213, 409, 709, 214, 215, 216, 217, 218,
	0, 219, 710, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 740, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	410, 242, 243, 663, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 703, 256, 245, 246,
	257, 411, 258, 741, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 742, 263, 711, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 743, 744,
	0, 0, 274, 275, 712, 713, 684, 276, 277, 2218,
	279, 0, 0, 280, 281, 282, 283, 704, 284, 0,
	347, 285, 286, 287, 348, 745, 0, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 658, 0,
	0, 0, 0, 0, 656, 0, 0, 0, 0, 654,
	655, 689, 678, 679, 676, 677, 668, 0, 664, 0,
	0, 0, 0, 667, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 706, 671, 0, 0, 0,
	144, 145, 146, 295, 721, 297, 722, 147, 723, 724,
	0, 148, 301, 302, 149, 150, 674, 705, 725, 726,
	305, 0, 151, 717, 0, 697, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 399, 159, 160,
	0, 698, 699, 701, 0, 700, 702, 161, 162, 352,
	163, 727, 164, 728, 729, 0, 165, 0, 166, 0,
	167, 0, 0, 720, 169, 0, 170, 0, 0, 0,
	662, 171, 172, 173, 707, 708, 685, 0, 0, 174,
	175, 730, 731, 732, 0, 176, 0, 177, 0, 0,
	400, 0, 178, 718, 0, 317, 0, 179, 180, 181,
	182, 714, 716, 402, 0, 186, 0, 183, 0, 401,
	184, 733, 185, 734, 735, 736, 737, 738, 0, 696,
	0, 403, 187, 188, 189, 404, 190, 191, 192, 0,
	194, 193, 0, 719, 405, 195, 406, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 657, 0, 686, 715, 207, 739,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 408, 213, 409, 709, 214, 215, 216, 217, 218,
	0, 219, 710, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 740, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	410, 242, 243, 663, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 703, 256, 245, 246,
	257, 411, 258, 741, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 742, 263, 711, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 743, 744,
	0, 0, 274, 275, 712, 713, 684, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 704, 284, 0,
	347, 285, 286, 287, 348, 745, 0, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 658, 0,
	0, 0, 0, 0, 656, 0, 0, 0, 0, 654,
	655, 689, 678, 679, 676, 677, 668, 0, 664, 0,
	0, 0, 0, 667, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 706, 671, 0, 0, 0,
	144, 145, 146, 2217, 721, 297, 722, 147, 723, 724,
	0, 148, 301, 302, 149, 150, 674, 705, 725, 726,
	305, 0, 151, 717, 0, 697, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 399, 159, 2219,
	0, 698, 699, 701, 0, 700, 702, 161, 162, 352,
	163, 727, 164, 728, 729, 0, 165, 0, 166, 0,
	167, 0, 0, 720, 169, 0, 170, 0, 0, 0,
	662, 171, 172, 173, 707, 708, 685, 0, 0, 174,
	175, 730, 731, 732, 0, 176, 0, 177, 0, 0,
	400, 0, 178, 718, 0, 317, 0, 179, 180, 181,
	182, 714, 716, 402, 0, 186, 0, 183, 0, 401,
	184, 733, 185, 734, 735, 736, 737, 738, 0, 696,
	0, 403, 187, 188, 189, 404, 190, 191, 192, 0,
	194, 193, 0, 719, 405, 195, 406, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 657, 0, 686, 715, 207, 739,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 408, 213, 409, 709, 214, 215, 216, 217, 218,
	0, 219, 710, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 740, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	410, 242, 243, 663, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 703, 256, 245, 246,
	257, 411, 258, 741, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 742, 263, 711, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 743, 744,
	0, 0, 274, 275, 712, 713, 684, 276, 277, 2218,
	279, 0, 0, 280, 281, 282, 283, 704, 284, 0,
	347, 285, 286, 287, 348, 745, 0, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 658, 0,
	0, 0, 0, 0, 656, 0, 0, 0, 0, 654,
	655, 1321, 678, 679, 676, 677, 668, 0, 664, 0,
	0, 0, 0, 667, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 706, 671, 0, 0, 0,
	144, 145, 146, 295, 721, 297, 722, 147, 723, 724,
	0, 148, 301, 302, 149, 150, 674, 705, 725, 726,
	305, 0, 151, 717, 0, 697, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 399, 159, 160,
	0, 698, 699, 701, 0, 700, 702, 161, 162, 352,
	163, 727, 1324, 728, 729, 0, 165, 0, 166, 0,
	167, 0, 0, 720, 169, 0, 170, 0, 0, 0,
	662, 171, 172, 173, 707, 708, 685, 0, 0, 174,
	175, 730, 731, 732, 0, 176, 0, 177, 0, 0,
	400, 0, 178, 718, 0, 317, 0, 179, 180, 1325,
	182, 714, 716, 402, 0, 186, 0, 183, 0, 401,
	184, 733, 185, 734, 735, 736, 737, 738, 0, 696,
	0, 403, 187, 188, 189, 404, 190, 191, 192, 0,
	194, 193, 0, 719, 405, 195, 406, 0, 196, 0,
	0, 197, 0, 198, 1326, 1323, 202, 328, 201, 407,
	203, 204, 206, 205, 657, 0, 686, 715, 207, 739,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 408, 213, 409, 709, 214, 215, 216, 217, 218,
	0, 219, 710, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 740, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	410, 242, 243, 663, 244, 0, 248, 249, 250, 1327,
	0, 253, 337, 252, 254, 255, 703, 256, 245, 246,
	257, 411, 258, 741, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 742, 263, 711, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 743, 744,
	0, 0, 274, 275, 712, 713, 684, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 704, 284, 0,
	347, 285, 286, 287, 348, 745, 0, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 1322, 293, 658, 0,
	0, 0, 0, 0, 656, 0, 0, 0, 0, 654,
	655, 689, 678, 679, 676, 677, 668, 0, 664, 0,
	0, 0, 0, 667, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 706, 671, 0, 0, 0,
	144, 145, 146, 295, 721, 297, 722, 147, 723, 724,
	0, 148, 301, 302, 149, 150, 674, 705, 725, 726,
	305, 0, 151, 717, 0, 697, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 399, 159, 160,
	0, 698, 699, 701, 0, 700, 702, 161, 162, 352,
	163, 727, 164, 728, 729, 0, 165, 0, 166, 0,
	167, 0, 0, 720, 169, 0, 170, 0, 0, 0,
	662, 171, 172, 173, 707, 708, 685, 0, 0, 174,
	175, 730, 731, 732, 0, 176, 0, 177, 0, 0,
	400, 0, 178, 718, 0, 317, 0, 179, 180, 181,
	182, 714, 716, 402, 0, 186, 0, 183, 0, 401,
	184, 733, 185, 734, 735, 736, 737, 738, 0, 696,
	0, 403, 187, 188, 189, 404, 190, 191, 192, 0,
	194, 193, 0, 719, 405, 195, 406, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 0, 0, 686, 715, 207, 739,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 408, 213, 409, 709, 214, 215, 216, 217, 218,
	0, 219, 710, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 740, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	410, 242, 243, 1339, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 703, 256, 245, 246,
	257, 411, 258, 741, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 742, 263, 711, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 743, 744,
	0, 0, 274, 275, 712, 713, 684, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 704, 284, 0,
	347, 285, 286, 287, 348, 745, 0, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 0, 0,
	0, 0, 0, 0, 1337, 0, 0, 0, 0, 1335,
	1336, 689, 678, 679, 676, 677, 668, 0, 1338, 0,
	0, 0, 0, 667, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 706, 671, 0, 0, 0,
	144, 145, 146, 295, 721, 297, 722, 147, 723, 724,
	0, 148, 301, 302, 149, 150, 0, 705, 725, 726,
	305, 0, 151, 717, 0, 697, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 399, 159, 160,
	0, 698, 699, 701, 0, 700, 702, 161, 162, 352,
	163, 727, 164, 728, 729, 0, 165, 0, 166, 0,
	167, 0, 0, 720, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 707, 708, 685, 0, 0, 174,
	175, 730, 731, 732, 0, 176, 0, 177, 0, 0,
	400, 0, 178, 718, 0, 317, 0, 179, 180, 181,
	182, 714, 716, 402, 0, 186, 0, 183, 0, 401,
	184, 733, 185, 734, 735, 736, 737, 738, 0, 696,
	0, 403, 187, 188, 189, 404, 190, 191, 192, 0,
	194, 193, 0, 719, 405, 195, 406, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 0, 0, 686, 715, 207, 739,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 408, 213, 409, 709, 214, 215, 216, 217, 218,
	0, 219, 710, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 740, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	410, 242, 243, 1339, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 703, 256, 245, 246,
	257, 411, 258, 741, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 742, 263, 711, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 743, 744,
	0, 0, 274, 275, 712, 713, 684, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 704, 284, 0,
	347, 285, 286, 287, 348, 745, 0, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 0, 0,
	689, 678, 679, 676, 677, 668, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 142, 1338, 143,
	0, 0, 0, 667, 706, 671, 0, 0, 0, 144,
	145, 146, 0, 721, 297, 722, 147, 723, 724, 0,
	148, 301, 302, 149, 150, 674, 705, 725, 726, 305,
	0, 151, 717, 0, 697, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 399, 159, 2219, 0,
	698, 699, 701, 0, 700, 702, 161, 162, 352, 163,
	727, 164, 728, 729, 0, 165, 0, 166, 0, 167,
	0, 0, 720, 169, 0, 170, 0, 0, 0, 662,
	171, 172, 173, 707, 708, 685, 0, 0, 174, 175,
	730, 731, 732, 0, 176, 0, 177, 0, 0, 400,
	0, 178, 718, 0, 317, 0, 179, 180, 181, 182,
	714, 716, 0, 0, 186, 0, 183, 0, 401, 184,
	733, 185, 734, 735, 736, 737, 738, 0, 696, 0,
	0, 187, 188, 189, 404, 190, 191, 192, 0, 194,
	193, 0, 719, 405, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 407, 203,
	204, 206, 205, 657, 0, 686, 715, 207, 739, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	408, 213, 409, 709, 214, 215, 216, 217, 218, 0,
	219, 710, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 740, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 410,
	242, 243, 663, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 703, 256, 245, 246, 257,
	0, 258, 741, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 742, 263, 711, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 743, 744, 0,
	0, 274, 275, 712, 713, 684, 276, 277, 2218, 279,
	0, 0, 280, 281, 282, 283, 704, 284, 0, 347,
	285, 286, 287, 348, 745, 0, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 689, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 654, 655,
	0, 0, 0, 141, 142, 0, 143, 664, 0, 0,
	0, 706, 667, 0, 0, 0, 144, 145, 146, 295,
	296, 297, 298, 147, 299, 300, 0, 148, 301, 302,
	149, 150, 0, 705, 303, 304, 305, 0, 151, 717,
	0, 697, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 399, 159, 160, 0, 698, 699, 701,
	0, 700, 702, 161, 162, 352, 163, 307, 164, 308,
	309, 0, 165, 0, 166, 0, 167, 0, 0, 168,
	169, 0, 170, 0, 0, 0, 310, 171, 172, 173,
	707, 708, 0, 0, 0, 174, 175, 313, 314, 315,
	0, 176, 0, 177, 0, 0, 400, 0, 178, 718,
	0, 317, 0, 179, 180, 181, 182, 714, 716, 402,
	0, 186, 0, 183, 0, 401, 184, 320, 185, 321,
	322, 323, 324, 325, 0, 326, 0, 403, 187, 188,
	189, 404, 190, 191, 192, 0, 194, 193, 0, 719,
	405, 195, 406, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 407, 203, 204, 206, 205,
	0, 0, 0, 715, 207, 330, 208, 209, 0, 210,
	0, 0, 211, 0, 0, 212, 331, 408, 213, 409,
	709, 214, 215, 216, 217, 218, 0, 219, 710, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 335, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 410, 242, 243, 336,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 703, 256, 245, 246, 257, 411, 258, 338,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 340,
	263, 711, 0, 266, 0, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 343, 344, 0, 0, 274, 275,
	712, 713, 0, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 704, 284, 0, 347, 285, 286, 287,
	348, 349, 0, 0, 288, 0, 566, 0, 0, 289,
	290, 291, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 0, 0, 0, 1833, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	398, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 399, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 400, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 402, 0,
	186, 0, 183, 0, 401, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 403, 187, 188, 189,
	404, 190, 191, 192, 0, 194, 193, 0, 327, 405,
	195, 406, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 407, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 408, 213, 409, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 410, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 125, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 411, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 129, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 649,
	349, 0, 0, 288, 0, 0, 0, 123, 289, 290,
	291, 292, 293, 0, 124, 566, 563, 0, 564, 559,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 142, 114, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 398,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 399, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 1084,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	556, 0, 0, 174, 175, 313, 314, 315, 0, 176,
	0, 177, 0, 0, 400, 0, 178, 316, 0, 317,
	0, 179, 180, 181, 182, 318, 319, 402, 0, 186,
	0, 183, 0, 401, 184, 320, 185, 321, 322, 323,
	324, 325, 0, 326, 0, 403, 187, 188, 189, 404,
	190, 191, 192, 0, 194, 193, 0, 327, 405, 195,
	406, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 407, 203, 204, 206, 205, 0, 0,
	0, 329, 207, 330, 208, 209, 0, 210, 557, 0,
	211, 0, 0, 212, 331, 408, 213, 409, 332, 214,
	215, 216, 217, 218, 0, 219, 333, 220, 334, 221,
	0, 222, 223, 224, 225, 226, 335, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 410, 242, 243, 336, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	0, 256, 245, 246, 257, 411, 258, 338, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 340, 263, 341,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 343, 344, 0, 0, 274, 275, 345, 346,
	555, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 0, 284, 0, 347, 285, 286, 287, 348, 349,
	0, 0, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 566, 563, 0, 564, 559, 554, 0, 0,
	0, 0, 0, 565, 560, 0, 0, 0, 141, 142,
	0, 143, 0, 0, 0, 0, 294, 0, 0, 0,
	0, 144, 145, 146, 295, 296, 297, 298, 147, 299,
	300, 0, 148, 301, 302, 149, 150, 0, 0, 303,
	304, 305, 0, 151, 306, 0, 398, 0, 152, 153,
	154, 0, 155, 0, 156, 157, 158, 0, 399, 159,
	160, 0, 0, 0, 0, 0, 0, 0, 161, 162,
	352, 163, 307, 164, 308, 309, 1081, 165, 0, 166,
	0, 167, 0, 0, 168, 169, 0, 170, 0, 0,
	0, 310, 171, 172, 173, 311, 312, 556, 0, 0,
	174, 175, 313, 314, 315, 0, 176, 0, 177, 0,
	0, 400, 0, 178, 316, 0, 317, 0, 179, 180,
	181, 182, 318, 319, 402, 0, 186, 0, 183, 0,
	401, 184, 320, 185, 321, 322, 323, 324, 325, 0,
	326, 0, 403, 187, 188, 189, 404, 190, 191, 192,
	0, 194, 193, 0, 327, 405, 195, 406, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	407, 203, 204, 206, 205, 0, 0, 0, 329, 207,
	330, 208, 209, 0, 210, 557, 0, 211, 0, 0,
	212, 331, 408, 213, 409, 332, 214, 215, 216, 217,
	218, 0, 219, 333, 220, 334, 221, 0, 222, 223,
	224, 225, 226, 335, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 410, 242, 243, 336, 244, 0, 248, 249, 250,
	251, 0, 253, 337, 252, 254, 255, 0, 256, 245,
	246, 257, 411, 258, 338, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 340, 263, 341, 0, 266, 0,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 343,
	344, 0, 0, 274, 275, 345, 346, 555, 276, 277,
	278, 279, 0, 0, 280, 281, 282, 283, 0, 284,
	0, 347, 285, 286, 287, 348, 349, 0, 0, 288,
	0, 0, 0, 0, 289, 290, 291, 292, 293, 566,
	563, 0, 564, 559, 554, 0, 0, 0, 0, 0,
	565, 560, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 398, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 399, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 780, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 556, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 400, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 318,
	319, 402, 0, 186, 0, 183, 0, 401, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 403,
	187, 188, 189, 404, 190, 191, 192, 0, 194, 193,
	0, 327, 405, 195, 406, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 407, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 557, 0, 211, 0, 0, 212, 331, 408,
	213, 409, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 410, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 411,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 555, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 348, 349, 0, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 566, 563, 0, 564,
	559, 554, 0, 0, 0, 0, 0, 565, 560, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	398, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 399, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 556, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 400, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 402, 0,
	186, 0, 183, 0, 401, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 403, 187, 188, 189,
	404, 190, 191, 192, 0, 194, 193, 0, 327, 405,
	195, 406, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 407, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 557,
	0, 211, 0, 0, 212, 331, 408, 213, 409, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 410, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 411, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 555, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 0, 138, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 0, 0, 0, 0, 0, 141, 142,
	0, 143, 0, 0, 565, 560, 294, 0, 0, 0,
	0, 144, 145, 146, 295, 296, 297, 298, 147, 299,
	300, 0, 148, 301, 302, 149, 150, 0, 0, 303,
	304, 305, 0, 151, 306, 0, 0, 0, 152, 153,
	154, 0, 155, 0, 156, 157, 158, 0, 0, 159,
	160, 0, 0, 0, 0, 0, 0, 0, 161, 162,
	352, 163, 307, 164, 308, 309, 0, 165, 0, 166,
	0, 167, 0, 0, 168, 169, 0, 170, 0, 0,
	0, 310, 171, 172, 173, 311, 312, 0, 0, 0,
	174, 175, 313, 314, 315, 0, 176, 0, 177, 0,
	0, 0, 0, 178, 316, 0, 317, 0, 179, 180,
	181, 182, 318, 319, 0, 0, 186, 0, 183, 0,
	0, 184, 320, 185, 321, 322, 323, 324, 325, 0,
	326, 0, 0, 187, 188, 189, 0, 190, 191, 192,
	0, 194, 193, 0, 327, 0, 195, 0, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	0, 203, 204, 206, 205, 0, 0, 0, 329, 207,
	330, 208, 209, 0, 210, 0, 621, 211, 0, 0,
	212, 331, 0, 213, 0, 332, 214, 215, 216, 217,
	218, 0, 219, 333, 220, 334, 221, 0, 222, 223,
	224, 225, 226, 335, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 0, 242, 243, 336, 244, 0, 248, 249, 250,
	251, 125, 253, 337, 252, 254, 255, 0, 256, 245,
	246, 257, 0, 258, 338, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 340, 263, 341, 0, 266, 129,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 343,
	344, 0, 0, 274, 275, 345, 346, 0, 276, 277,
	278, 279, 0, 0, 280, 281, 282, 283, 0, 284,
	0, 347, 285, 286, 287, 649, 349, 0, 0, 288,
	0, 138, 0, 123, 289, 290, 291, 292, 293, 0,
	124, 0, 0, 0, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 1472, 0, 1477,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 174,
	175, 313, 314, 315, 0, 176, 0, 177, 0, 0,
	0, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 318, 319, 0, 0, 186, 0, 183, 0, 0,
	184, 320, 185, 321, 322, 323, 324, 325, 0, 326,
	0, 0, 187, 188, 189, 0, 190, 191, 192, 0,
	194, 193, 0, 327, 0, 195, 0, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 0,
	203, 204, 206, 205, 0, 0, 0, 329, 207, 330,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 0, 213, 0, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 335, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	0, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	125, 253, 337, 252, 254, 255, 0, 256, 245, 246,
	257, 0, 258, 338, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 0, 266, 129, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 343, 344,
	0, 0, 274, 275, 345, 346, 0, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 0, 284, 0,
	347, 285, 286, 287, 649, 349, 0, 0, 288, 0,
	138, 0, 123, 289, 290, 291, 292, 293, 0, 124,
	0, 0, 0, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 294, 0, 0, 0, 114, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	0, 151, 306, 0, 0, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 0, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 0, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 0,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	318, 319, 0, 0, 186, 0, 183, 0, 0, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	0, 187, 188, 189, 0, 190, 191, 192, 0, 194,
	193, 0, 327, 0, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 0, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 621, 211, 0, 0, 212, 331,
	0, 213, 0, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	0, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 0, 284, 0, 347,
	285, 286, 287, 348, 349, 0, 0, 288, 0, 138,
	0, 0, 289, 290, 291, 292, 293, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 1472, 0, 1477, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 0, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 318,
	319, 0, 0, 186, 0, 183, 0, 0, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 0,
	187, 188, 189, 0, 190, 191, 192, 0, 194, 193,
	0, 327, 0, 195, 0, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 0, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 0,
	213, 0, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 0, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 0,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 348, 349, 0, 0, 288, 0, 0, 138,
	0, 289, 290, 291, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 890, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 0, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 318,
	319, 0, 0, 186, 0, 183, 0, 0, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 0,
	187, 188, 189, 0, 190, 191, 192, 0, 194, 193,
	0, 327, 0, 195, 0, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 0, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 0,
	213, 0, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 0, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 0,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 348, 349, 0, 0, 288, 0, 138, 0,
	0, 289, 290, 291, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 142, 0, 143, 0, 0,
	0, 0, 294, 0, 0, 0, 1208, 144, 145, 146,
	295, 296, 297, 298, 147, 299, 300, 0, 148, 301,
	302, 149, 150, 0, 0, 303, 304, 305, 0, 151,
	306, 0, 0, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 0, 159, 160, 0, 0, 0,
	0, 0, 0, 0, 161, 162, 352, 163, 307, 164,
	308, 309, 0, 165, 0, 166, 0, 167, 0, 0,
	168, 169, 0, 170, 0, 0, 0, 310, 171, 172,
	173, 311, 312, 0, 0, 0, 174, 175, 313, 314,
	315, 0, 176, 0, 177, 0, 0, 0, 0, 178,
	316, 0, 317, 0, 179, 180, 181, 182, 318, 319,
	0, 0, 186, 0, 183, 0, 0, 184, 320, 185,
	321, 322, 323, 324, 325, 0, 326, 0, 0, 187,
	188, 189, 0, 190, 191, 192, 0, 194, 193, 0,
	327, 0, 195, 0, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 0, 203, 204, 206,
	205, 0, 0, 0, 329, 207, 330, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 0, 213,
	0, 332, 214, 215, 216, 217, 218, 0, 219, 333,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 335,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 0, 242, 243,
	336, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 0, 256, 245, 246, 257, 0, 258,
	338, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	340, 263, 341, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 343, 344, 0, 0, 274,
	275, 345, 346, 0, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 0, 284, 0, 347, 285, 286,
	287, 348, 349, 0, 0, 288, 0, 138, 0, 0,
	289, 290, 291, 292, 293, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 142, 0, 143, 0, 0, 0,
	0, 294, 0, 0, 0, 1767, 144, 145, 146, 295,
	296, 297, 298, 147, 299, 300, 0, 148, 301, 302,
	149, 150, 0, 0, 303, 304, 305, 0, 151, 306,
	0, 0, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 0, 159, 160, 0, 0, 0, 0,
	0, 0, 0, 161, 162, 352, 163, 307, 164, 308,
	309, 0, 165, 0, 166, 0, 167, 0, 0, 168,
	169, 0, 170, 0, 0, 0, 310, 171, 172, 173,
	311, 312, 0, 0, 0, 174, 175, 313, 314, 315,
	0, 176, 0, 177, 0, 0, 0, 0, 178, 316,
	0, 317, 0, 179, 180, 181, 182, 318, 319, 0,
	0, 186, 0, 183, 0, 0, 184, 320, 185, 321,
	322, 323, 324, 325, 0, 326, 0, 0, 187, 188,
	189, 0, 190, 191, 192, 0, 194, 193, 0, 327,
	0, 195, 0, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 0, 203, 204, 206, 205,
	0, 0, 0, 329, 207, 330, 208, 209, 0, 210,
	0, 0, 211, 0, 0, 212, 331, 0, 213, 0,
	332, 214, 215, 216, 217, 218, 0, 219, 333, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 335, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 0, 242, 243, 336,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 0, 256, 245, 246, 257, 0, 258, 338,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 340,
	263, 341, 0, 266, 0, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 343, 344, 0, 0, 274, 275,
	345, 346, 0, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 0, 284, 0, 347, 285, 286, 287,
	348, 349, 0, 0, 288, 0, 0, 0, 0, 289,
	290, 291, 292, 293, 689, 678, 679, 676, 677, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 0, 143, 883, 0, 0, 0, 294, 0,
	0, 0, 0, 144, 145, 146, 295, 721, 297, 722,
	147, 723, 724, 0, 148, 301, 302, 149, 150, 0,
	0, 725, 726, 305, 0, 151, 306, 0, 398, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	399, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 727, 164, 728, 729, 0, 165,
	0, 166, 0, 167, 0, 0, 720, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 685,
	0, 0, 174, 175, 730, 731, 732, 0, 176, 0,
	177, 0, 0, 400, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 318, 319, 402, 0, 186, 0,
	183, 0, 401, 184, 733, 185, 734, 735, 736, 737,
	738, 0, 696, 0, 403, 187, 188, 189, 404, 190,
	191, 192, 0, 194, 193, 0, 327, 405, 195, 406,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 407, 203, 204, 206, 205, 0, 0, 686,
	329, 207, 739, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 408, 213, 409, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 740, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 410, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 411, 258, 741, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 742, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 743, 744, 0, 0, 274, 275, 345, 346, 684,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 348, 745, 566,
	563, 288, 0, 0, 829, 0, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 398, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 399, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 400, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 318,
	319, 402, 0, 186, 0, 183, 0, 401, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 403,
	187, 188, 189, 404, 190, 191, 192, 0, 194, 193,
	0, 327, 405, 195, 406, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 407, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 408,
	213, 409, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 410, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 411,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 348, 349, 138, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 134, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 318, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 133, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 348, 349, 566,
	563, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 137, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 398, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 399, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 400, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 318,
	319, 402, 0, 186, 0, 183, 0, 401, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 403,
	187, 188, 189, 404, 190, 191, 192, 0, 194, 193,
	0, 327, 405, 195, 406, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 407, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 408,
	213, 409, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 410, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 411,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 348, 349, 138, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 318, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 348, 349, 566,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 137, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 398, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 399, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 400, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 318,
	319, 402, 0, 186, 0, 183, 0, 401, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 403,
	187, 188, 189, 404, 190, 191, 192, 0, 194, 193,
	0, 327, 405, 195, 406, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 407, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 408,
	213, 409, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 410, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 411,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 348, 349, 138, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 1398, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 1396, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	1395, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 1400, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 318, 319, 0, 0, 186, 1393,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 1399,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 1394, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 348, 349, 138,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 1398,
	151, 306, 0, 0, 1445, 152, 153, 154, 0, 155,
	1396, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 1400, 0, 0, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 1444,
	319, 0, 0, 186, 0, 183, 0, 0, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 0,
	187, 188, 189, 0, 190, 191, 192, 0, 194, 193,
	0, 327, 0, 195, 0, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 0, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 0,
	213, 0, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 1399, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 0, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 0,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	1448, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 348, 349, 138, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 0,
	1900, 0, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 318, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 348, 349, 138,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 0, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 318,
	319, 0, 0, 186, 0, 183, 0, 0, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 0,
	187, 188, 189, 0, 190, 191, 192, 0, 194, 193,
	0, 327, 0, 195, 0, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 0, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 621, 211, 0, 0, 212, 331, 0,
	213, 0, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 0, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 0,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 348, 349, 138, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 0, 0, 0, 0,
	141, 142, 1136, 143, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 318, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 348, 349, 138,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 0, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 866,
	319, 0, 0, 186, 0, 183, 0, 0, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 0,
	187, 188, 189, 0, 190, 191, 192, 0, 194, 193,
	0, 327, 0, 195, 0, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 0, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 621, 211, 0, 0, 212, 331, 0,
	213, 0, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 0, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 0,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 348, 349, 138, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 860, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 621, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 348, 349, 138,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 141, 142, 638, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 0, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 318,
	319, 0, 0, 186, 0, 183, 0, 0, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 0,
	187, 188, 189, 0, 190, 191, 192, 0, 194, 193,
	0, 327, 0, 195, 0, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 0, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 0,
	213, 0, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 0, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 0,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 348, 349, 138, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 0, 0, 0, 0,
	141, 142, 355, 143, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 318, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 354, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 348, 349, 138,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 0, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 318,
	319, 0, 0, 186, 0, 183, 0, 0, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 0,
	187, 188, 189, 0, 190, 191, 192, 0, 194, 193,
	0, 327, 0, 195, 0, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 0, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 0,
	213, 0, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 0, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 0,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 348, 349, 138, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 1678, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 348, 349, 138,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 0, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 1676,
	319, 0, 0, 186, 0, 183, 0, 0, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 0,
	187, 188, 189, 0, 190, 191, 192, 0, 194, 193,
	0, 327, 0, 195, 0, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 0, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 0,
	213, 0, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 0, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 0,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 348, 349, 138, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 1671, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 348, 349, 138,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 0, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 318,
	319, 0, 0, 186, 0, 183, 0, 0, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 0,
	187, 188, 189, 0, 190, 191, 192, 0, 194, 193,
	0, 327, 0, 195, 0, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 0, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 0,
	213, 0, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 0, 242,
	243, 336, 244, 0, 500, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 0,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 348, 349, 138, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 1101, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 348, 349, 138,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 900, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 0, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 318,
	319, 0, 0, 186, 0, 183, 0, 0, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 0,
	187, 188, 189, 0, 190, 191, 192, 0, 194, 193,
	0, 327, 0, 195, 0, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 0, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 0,
	213, 0, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 0, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 0, 245, 246, 257, 0,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 348, 349, 138, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 863, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 348, 349, 138,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 0, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 808,
	319, 0, 0, 186, 0, 183, 0, 0, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 0,
	187, 188, 189, 0, 190, 191, 192, 0, 194, 193,
	0, 327, 0, 195, 0, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 0, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 0,
	213, 0, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 0, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 0,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 348, 349, 138, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 806, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 348, 349, 138,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 0, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 802,
	319, 0, 0, 186, 0, 183, 0, 0, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 0,
	187, 188, 189, 0, 190, 191, 192, 0, 194, 193,
	0, 327, 0, 195, 0, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 0, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 0,
	213, 0, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 0, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 0,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 348, 349, 138, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 800, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 348, 349, 138,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 0, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 797,
	319, 0, 0, 186, 0, 183, 0, 0, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 0,
	187, 188, 189, 0, 190, 191, 192, 0, 194, 193,
	0, 327, 0, 195, 0, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 0, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 0,
	213, 0, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 0, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 0,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 348, 349, 138, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 793, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 348, 349, 138,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 0, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 788,
	319, 0, 0, 186, 0, 183, 0, 0, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 0,
	187, 188, 189, 0, 190, 191, 192, 0, 194, 193,
	0, 327, 0, 195, 0, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 0, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 0,
	213, 0, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 0, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 0,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 348, 349, 138, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 764, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 318, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 522, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	518, 343, 344, 0, 0, 274, 765, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 348, 349, 138,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 0, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 318,
	319, 0, 0, 186, 0, 183, 0, 0, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 0,
	187, 188, 189, 0, 190, 191, 192, 0, 194, 193,
	0, 327, 0, 195, 0, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 0, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 0,
	213, 0, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 608, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 0, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 0,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 348, 349, 138, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 512, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 318, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 511, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 522, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 513, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 514, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	518, 343, 344, 0, 0, 274, 516, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 348, 349, 138,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 0, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 318,
	319, 0, 0, 186, 0, 183, 0, 0, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 0,
	187, 188, 189, 0, 190, 191, 192, 0, 194, 193,
	0, 327, 0, 195, 0, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 0, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 0,
	213, 0, 332, 214, 215, 0, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 0, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 0, 242,
	243, 336, 0, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 0,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 348, 349, 0, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 907, 908, 0, 927,
	928, 929, 937, 938, 939, 0, 0, 0, 0, 0,
	0, 0, 930, 0, 0, 0, 0, 0, 0, 910,
	0, 0, 941, 0, 907, 908, 0, 927, 928, 929,
	937, 938, 939, 0, 0, 0, 0, 0, 0, 0,
	930, 0, 0, 909, 0, 0, 0, 910, 0, 924,
	941, 0, 907, 908, 0, 927, 928, 929, 937, 938,
	939, 0, 0, 0, 0, 0, 0, 0, 930, 0,
	0, 909, 0, 0, 0, 910, 0, 924, 941, 0,
	0, 907, 908, 0, 927, 928, 929, 937, 938, 939,
	0, 0, 0, 0, 0, 0, 0, 930, 0, 909,
	0, 0, 0, 915, 910, 924, 0, 941, 0, 907,
	908, 0, 927, 928, 929, 937, 938, 939, 0, 0,
	0, 0, 934, 942, 0, 930, 0, 0, 909, 0,
	0, 915, 910, 0, 924, 941, 0, 0, 0, 0,
	940, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	934, 942, 0, 0, 0, 932, 909, 0, 0, 915,
	0, 925, 924, 0, 0, 0, 0, 0, 940, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 934, 942,
	0, 0, 0, 932, 0, 0, 931, 0, 915, 925,
	0, 0, 0, 0, 0, 0, 940, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 934, 942, 0,
	0, 932, 0, 0, 931, 0, 915, 925, 0, 0,
	0, 0, 0, 0, 0, 940, 0, 0, 0, 0,
	0, 0, 0, 0, 926, 934, 942, 0, 0, 0,
	932, 0, 931, 0, 0, 0, 925, 0, 0, 0,
	935, 0, 0, 940, 0, 0, 0, 0, 0, 0,
	0, 0, 926, 0, 0, 0, 0, 0, 932, 0,
	0, 931, 0, 0, 925, 0, 0, 0, 935, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	926, 0, 0, 0, 0, 0, 0, 0, 0, 931,
	0, 0, 0, 0, 0, 0, 935, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 933, 0, 926,
	921, 922, 923, 936, 0, 920, 918, 919, 911, 912,
	913, 914, 916, 917, 0, 935, 0, 0, 2135, 0,
	0, 0, 0, 0, 0, 933, 0, 926, 921, 922,
	923, 936, 0, 920, 918, 919, 911, 912, 913, 914,
	916, 917, 0, 935, 0, 0, 2082, 0, 0, 0,
	0, 0, 0, 933, 0, 0, 921, 922, 923, 936,
	0, 920, 918, 919, 911, 912, 913, 914, 916, 917,
	0, 0, 0, 0, 2056, 0, 0, 0, 0, 0,
	0, 0, 933, 0, 0, 921, 922, 923, 936, 0,
	920, 918, 919, 911, 912, 913, 914, 916, 917, 0,
	0, 0, 0, 2051, 0, 0, 0, 0, 0, 0,
	933, 0, 0, 921, 922, 923, 936, 0, 920, 918,
	919, 911, 912, 913, 914, 916, 917, 0, 0, 907,
	908, 2047, 927, 928, 929, 937, 938, 939, 0, 0,
	0, 0, 0, 0, 0, 930, 0, 0, 0, 0,
	0, 0, 910, 0, 0, 941, 0, 907, 908, 0,
	927, 928, 929, 937, 938, 939, 0, 0, 0, 0,
	0, 0, 0, 930, 0, 0, 909, 0, 0, 0,
	910, 0, 924, 941, 0, 907, 908, 0, 927, 928,
	929, 937, 938, 939, 0, 0, 0, 0, 0, 0,
	0, 930, 0, 0, 909, 0, 0, 0, 910, 0,
	924, 941, 0, 0, 907, 908, 0, 927, 928, 929,
	937, 938, 939, 0, 0, 0, 0, 0, 0, 0,
	930, 0, 909, 0, 0, 0, 915, 910, 924, 0,
	941, 0, 907, 908, 0, 927, 928, 929, 937, 938,
	939, 0, 0, 0, 0, 934, 942, 0, 930, 0,
	0, 909, 0, 0, 915, 910, 0, 924, 941, 0,
	0, 0, 0, 940, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 934, 942, 0, 0, 0, 932, 909,
	0, 0, 915, 0, 925, 924, 0, 0, 0, 0,
	0, 940, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 934, 942, 0, 0, 0, 932, 0, 0, 931,
	0, 915, 925, 0, 0, 0, 0, 0, 0, 940,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	934, 942, 0, 0, 932, 0, 0, 931, 0, 915,
	925, 0, 0, 0, 0, 0, 0, 0, 940, 0,
	0, 0, 0, 0, 0, 0, 0, 926, 934, 942,
	0, 0, 0, 932, 0, 931, 0, 0, 0, 925,
	0, 0, 0, 935, 0, 0, 940, 0, 0, 0,
	0, 0, 0, 0, 0, 926, 0, 0, 0, 0,
	0, 932, 0, 0, 931, 0, 0, 925, 0, 0,
	0, 935, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 926, 0, 0, 0, 0, 0, 0,
	0, 0, 931, 0, 0, 0, 0, 0, 0, 935,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	933, 0, 926, 921, 922, 923, 936, 0, 920, 918,
	919, 911, 912, 913, 914, 916, 917, 0, 935, 0,
	0, 1976, 0, 0, 0, 0, 0, 0, 933, 0,
	926, 921, 922, 923, 936, 0, 920, 918, 919, 911,
	912, 913, 914, 916, 917, 0, 935, 0, 0, 1946,
	0, 0, 0, 0, 0, 0, 933, 0, 0, 921,
	922, 923, 936, 0, 920, 918, 919, 911, 912, 913,
	914, 916, 917, 0, 0, 0, 0, 1945, 0, 0,
	0, 0, 0, 0, 0, 933, 0, 0, 921, 922,
	923, 936, 0, 920, 918, 919, 911, 912, 913, 914,
	916, 917, 0, 0, 0, 0, 1852, 0, 0, 0,
	0, 0, 0, 933, 0, 0, 921, 922, 923, 936,
	0, 920, 918, 919, 911, 912, 913, 914, 916, 917,
	0, 0, 907, 908, 1770, 927, 928, 929, 937, 938,
	939, 0, 0, 0, 0, 0, 0, 0, 930, 0,
	0, 0, 0, 0, 0, 910, 0, 0, 941, 0,
	907, 908, 0, 927, 928, 929, 937, 938, 939, 0,
	0, 0, 0, 0, 0, 0, 930, 0, 0, 909,
	0, 0, 0, 910, 0, 924, 941, 0, 907, 908,
	0, 927, 928, 929, 937, 938, 939, 0, 0, 0,
	0, 0, 0, 0, 930, 0, 0, 909, 0, 0,
	0, 910, 0, 924, 941, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 909, 0, 0, 0, 915,
	0, 924, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 934, 942,
	0, 0, 0, 0, 0, 0, 0, 915, 0, 0,
	0, 0, 0, 0, 0, 0, 940, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 934, 942, 0, 0,
	0, 932, 0, 0, 0, 915, 0, 925, 0, 0,
	0, 0, 0, 0, 940, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 934, 942, 0, 0, 0, 932,
	0, 0, 931, 0, 0, 925, 0, 0, 0, 0,
	0, 0, 940, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 932, 0, 0,
	931, 0, 0, 925, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	926, 0, 0, 0, 0, 0, 0, 0, 931, 0,
	37, 117, 0, 0, 0, 0, 935, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 926, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 0, 0, 40, 935, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 926, 0, 0, 0,
	0, 0, 0, 0, 0, 47, 0, 0, 0, 49,
	0, 0, 935, 111, 0, 0, 120, 0, 0, 0,
	55, 0, 56, 933, 0, 0, 921, 922, 923, 936,
	0, 920, 918, 919, 911, 912, 913, 914, 916, 917,
	57, 0, 0, 0, 1746, 0, 58, 0, 0, 0,
	0, 933, 0, 0, 921, 922, 923, 936, 0, 920,
	918, 919, 911, 912, 913, 914, 916, 917, 0, 0,
	0, 0, 1285, 0, 0, 0, 0, 0, 0, 933,
	0, 0, 921, 922, 923, 936, 0, 920, 918, 919,
	911, 912, 913, 914, 916, 917, 907, 908, 1528, 927,
	928, 929, 937, 938, 939, 0, 0, 0, 0, 0,
	0, 0, 930, 0, 0, 0, 0, 0, 0, 910,
	0, 0, 941, 0, 0, 0, 0, 0, 59, 0,
	0, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	0, 0, 0, 909, 0, 0, 0, 0, 0, 924,
	0, 0, 67, 68, 61, 0, 62, 0, 63, 0,
	121, 0, 0, 0, 0, 64, 0, 0, 0, 125,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 0,
	0, 0, 0, 915, 2247, 907, 908, 0, 927, 928,
	929, 937, 938, 939, 0, 0, 96, 0, 0, 0,
	0, 930, 934, 942, 0, 115, 0, 0, 910, 0,
	0, 941, 0, 128, 0, 0, 0, 0, 0, 0,
	940, 123, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 0, 909, 0, 0, 932, 0, 0, 924, 0,
	0, 925, 0, 0, 0, 0, 0, 114, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 931, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 915, 0, 1598, 0, 0, 1597, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 934, 942, 0, 926, 0, 0, 907, 908, 0,
	927, 928, 929, 937, 938, 939, 0, 0, 0, 940,
	935, 0, 0, 930, 0, 0, 0, 0, 1427, 0,
	910, 0, 0, 941, 932, 0, 0, 0, 0, 0,
	925, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 909, 0, 0, 0, 0, 0,
	924, 0, 0, 0, 0, 931, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 933, 0, 1428,
	921, 922, 923, 936, 0, 920, 918, 919, 911, 912,
	913, 914, 916, 917, 0, 0, 0, 0, 0, 1184,
	0, 0, 0, 926, 915, 907, 908, 0, 927, 928,
	929, 937, 938, 939, 0, 0, 0, 0, 0, 935,
	0, 930, 0, 934, 942, 1183, 0, 0, 910, 0,
	0, 941, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 940, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 909, 0, 0, 0, 932, 0, 924, 0,
	0, 0, 925, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 933, 931, 0, 921,
	922, 923, 936, 0, 920, 918, 919, 911, 912, 913,
	914, 916, 917, 0, 0, 0, 0, 0, 0, 0,
	907, 908, 915, 927, 928, 929, 937, 938, 939, 0,
	0, 0, 0, 0, 0, 0, 930, 0, 0, 0,
	0, 934, 942, 910, 0, 926, 941, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 940,
	0, 935, 0, 0, 0, 0, 0, 909, 0, 0,
	0, 0, 0, 924, 932, 0, 0, 0, 0, 0,
	925, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 931, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 915, 933, 0,
	0, 921, 922, 923, 936, 0, 920, 918, 919, 911,
	912, 913, 914, 916, 917, 0, 934, 942, 0, 0,
	0, 0, 0, 926, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 940, 0, 0, 0, 0, 935,
	907, 908, 0, 927, 928, 929, 937, 938, 939, 932,
	0, 0, 0, 0, 0, 925, 930, 0, 0, 0,
	0, 0, 0, 910, 0, 0, 941, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	931, 547, 0, 0, 0, 0, 0, 909, 0, 0,
	0, 0, 0, 924, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 933, 0, 0, 921,
	922, 923, 936, 0, 920, 918, 919, 911, 912, 913,
	914, 916, 917, 0, 0, 0, 0, 0, 926, 0,
	907, 908, 0, 927, 928, 929, 937, 938, 939, 0,
	0, 0, 0, 0, 935, 0, 930, 915, 0, 0,
	0, 0, 0, 910, 0, 0, 941, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 934, 942, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 909, 0, 0,
	0, 0, 0, 924, 940, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 932,
	0, 0, 0, 0, 0, 925, 0, 0, 0, 0,
	0, 933, 0, 0, 921, 922, 923, 936, 0, 920,
	918, 919, 911, 912, 913, 914, 916, 917, 0, 0,
	931, 0, 0, 0, 0, 0, 0, 915, 0, 0,
	0, 0, 1604, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 934, 942, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 940, 0, 0, 0, 926, 0,
	907, 908, 0, 927, 928, 929, 937, 938, 939, 932,
	0, 0, 0, 0, 935, 925, 930, 0, 0, 0,
	1599, 0, 0, 910, 0, 0, 941, 0, 0, 907,
	908, 0, 927, 928, 929, 937, 938, 939, 0, 1750,
	931, 0, 0, 0, 0, 930, 0, 909, 0, 0,
	0, 0, 910, 924, 0, 941, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 909, 0, 0, 0,
	0, 933, 924, 0, 921, 922, 923, 936, 926, 920,
	918, 919, 911, 912, 913, 914, 916, 917, 0, 0,
	0, 0, 0, 0, 935, 0, 0, 915, 0, 0,
	0, 0, 0, 0, 907, 908, 0, 927, 928, 929,
	937, 938, 939, 0, 0, 0, 934, 942, 0, 0,
	930, 0, 0, 0, 1557, 0, 915, 910, 0, 0,
	941, 0, 0, 0, 940, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 934, 942, 0, 0, 932,
	0, 909, 0, 0, 0, 925, 0, 924, 0, 0,
	0, 933, 0, 940, 921, 922, 923, 936, 0, 920,
	918, 919, 911, 912, 913, 914, 916, 917, 932, 0,
	931, 0, 0, 0, 925, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 931,
	0, 915, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1564, 0, 0, 0, 0, 0, 926, 0,
	934, 942, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 935, 0, 0, 0, 940, 0,
	0, 0, 0, 0, 0, 0, 0, 926, 0, 0,
	0, 0, 0, 932, 0, 0, 0, 0, 0, 925,
	0, 0, 0, 935, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 907, 908, 0, 927, 928, 929, 937,
	938, 939, 0, 0, 931, 0, 0, 0, 0, 930,
	0, 0, 0, 0, 0, 0, 910, 0, 0, 941,
	0, 933, 0, 0, 921, 922, 923, 936, 0, 920,
	918, 919, 911, 912, 913, 914, 916, 917, 0, 0,
	909, 0, 0, 0, 0, 0, 924, 0, 0, 0,
	933, 0, 926, 921, 922, 923, 936, 0, 920, 918,
	919, 911, 912, 913, 914, 916, 917, 0, 935, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 907, 908,
	0, 927, 928, 929, 937, 938, 939, 0, 0, 0,
	0, 0, 0, 0, 930, 0, 0, 0, 0, 0,
	915, 910, 0, 0, 941, 0, 907, 908, 0, 927,
	928, 929, 937, 938, 939, 0, 0, 0, 0, 934,
	942, 0, 0, 0, 0, 909, 0, 0, 0, 910,
	0, 924, 941, 0, 0, 933, 0, 940, 921, 922,
	923, 936, 0, 920, 918, 919, 911, 912, 913, 914,
	916, 917, 932, 909, 0, 0, 0, 0, 925, 924,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 931, 0, 915, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 934, 942, 0, 0, 0, 0,
	0, 0, 0, 915, 0, 0, 0, 0, 0, 0,
	0, 0, 940, 0, 0, 0, 0, 0, 0, 0,
	0, 926, 934, 942, 0, 0, 0, 932, 0, 0,
	0, 0, 0, 925, 0, 0, 0, 935, 0, 0,
	940, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 932, 0, 0, 0, 0,
	0, 925, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 933, 0, 926, 921, 922, 923,
	936, 0, 920, 918, 919, 911, 912, 913, 914, 916,
	917, 0, 935, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 907, 908, 926, 927, 928, 929, 937, 938,
	939, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	935, 0, 0, 0, 0, 910, 0, 0, 941, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 909,
	0, 0, 0, 0, 0, 924, 0, 0, 0, 933,
	0, 0, 921, 922, 923, 936, 0, 920, 918, 919,
	911, 912, 913, 914, 916, 917, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 933, 0, 0,
	921, 922, 923, 936, 0, 920, 918, 919, 911, 912,
	913, 914, 916, 917, 0, 0, 0, 0, 0, 915,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1032, 1022, 1051, 1014, 1042, 1041, 934, 942,
	1016, 1015, 0, 0, 0, 0, 1053, 1052, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 932, 0, 0, 0, 0, 0, 925, 0, 1047,
	0, 1039, 1038, 0, 0, 0, 0, 0, 0, 0,
	0, 1037, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1036,
	1034, 1035, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1025,
	1024, 1026, 1027, 1028, 1029, 1030, 0, 1050, 0, 0,
	926, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 935, 0, 0, 0,
	0, 0, 0, 0, 0, 1018, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1040, 0, 0,
	0, 1023, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1033, 0, 0, 0, 1220, 1218, 1219, 1222, 1221, 0,
	0, 0, 0, 933, 0, 0, 921, 922, 923, 936,
	0, 920, 918, 919, 911, 912, 913, 914, 916, 917,
	1019, 1032, 1022, 1051, 1014, 1042, 1041, 0, 0, 1016,
	1015, 1031, 1020, 0, 0, 1053, 1052, 0, 0, 0,
	0, 1055, 0, 0, 0, 0, 505, 0, 0, 0,
	0, 0, 0, 1017, 0, 0, 1048, 1049, 0, 0,
	0, 0, 0, 0, 574, 0, 0, 0, 1047, 0,
	1039, 1038, 0, 0, 0, 0, 572, 0, 1021, 0,
	1037, 0, 0, 1054, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 573, 1036, 1034,
	1035, 0, 575, 0, 0, 0, 0, 581, 582, 0,
	0, 591, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 507, 576, 0, 0, 1025, 1024,
	1026, 1027, 1028, 1029, 1030, 0, 1050, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 594, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1018, 0, 0, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 1040, 0, 0, 0,
	1023, 578, 579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 585,
	0, 0, 580, 587, 0, 0, 0, 0, 0, 1033,
	0, 0, 0, 584, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1019,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1031, 1020, 0, 0, 0, 0, 0, 0, 0, 0,
	1055, 0, 0, 583, 0, 0, 0, 0, 0, 0,
	0, 0, 1017, 0, 0, 1048, 1049, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1021, 0, 571,
	588, 509, 1054, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 589, 0, 0, 0, 593, 0,
	0, 0, 510, 0, 0, 0, 0, 586, 590, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592,
}
var sqlPact = [...]int{

	29446, -1000, 12, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 18230, -1000, -1000,
	22325, -1000, -1000, -1000, -1000, -1000, -1000, 22010, 726, 882,
	-1000, -1000, -1000, -1000, -1000, 22325, 2316, 1523, 5614, 1145,
	22325, 18230, 1139, 1523, 23585, -1000, -1000, 23585, 1103, -1000,
	-1000, -1000, -1000, -1000, 27680, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 593, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 853, 619,
	125, 617, -1000, 672, -25, 15042, 31472, 457, 458, 457,
	457, 455, 642, 27365, 22325, 1504, 9, -1000, 266, 20435,
	29446, 557, 7, 18860, 22325, -1000, -23, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	335, -23, -1000, -1000, 21695, -1000, 1305, 1156, 1155, 20435,
	-1000, -1000, -1000, -1000, -1000, 272, -1000, 13732, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 915, -1000, 8, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11397, 269, 1300, 11397, 904, -1000,
	22325, -1000, -1000, -1000, 1385, -1000, -1000, -1000, -1000, -1000,
	355, 1682, 631, 268, 27050, -1000, 955, -1000, 354, 536,
	-1000, -1000, 14715, 20, 20435, -1000, 11397, 11397, 26735, 22325,
	22325, 1184, 26420, -1000, 672, -1000, -1000, 26105, 25790, 25475,
	25160, 24845, -1000, 1069, 1503, 1503, 1503, 1552, 94, 93,
	125, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1641, -1000, -1000, -1000, -1000, 1667, -1000, -1000, -1000, -1000,
	-1000, 1385, 17915, 873, 1529, 1297, -1000, 902, 1295, 1290,
	1280, 1279, 1278, -1000, 676, -1000, 1317, 468, -1000, 1273,
	917, 449, -1000, 1270, 1269, 955, -1000, 955, -1000, -1000,
	-1000, 553, 23585, 21380, 24530, 22325, 21065, 4, 22325, -1000,
	267, 4, 10036, 10036, -1000, -1000, 266, -1000, 9356, -1000,
	309, 17273, -1000, 17915, 18860, 7, -41, -1000, -1000, -1000,
	5287, 607, 16315, -23, -1000, -1000, -1000, -1000, -1000, 20435,
	22325, 22325, 636, 24215, -1000, 11397, -4, -1000, -1000, 266,
	18230, 816, 30753, -1000, 11397, 11397, 11397, 11397, 11397, 826,
	301, -1000, 265, 263, 6622, -1000, -1000, 1666, -1000, -1000,
	-1000, 98, -1000, -1000, 11397, -23, -1000, -1000, -1000, -1000,
	262, 1678, -1000, 435, -1000, -1000, -1000, 363, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1316, 260, 259,
	257, -1000, -1000, -1000, -1000, 251, 245, 235, 230, 226,
	225, 221, 220, 219, 218, 217, 215, 214, 210, 209,
	765, -1000, 400, -1000, -1000, 400, 400, -1000, 194, 194,
	195, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 194,
	-1000, -1000, -1000, 344, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 200, 1598, 31414, 17915, 30753, 18230, -1000, -1000, -1000,
	-1000, 22325, 11397, -1000, 1594, 955, -3, -1000, -1000, -1000,
	-1000, 1094, 1089, 490, 731, 14388, 14061, 1458, -1000, -1000,
	-1000, 17, 5614, 119, -1000, 30753, 30753, 198, 1047, 365,
	99, 23900, 365, 1045, -1000, 1069, 118, 1404, -1000, 118,
	1403, 115, 1401, -1000, -142, -1000, 1396, -41, 1395, -1000,
	875, 1148, 10717, 1136, 11397, 125, -1000, -1000, 125, 125,
	7643, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	20750, -1000, -1000, 626, 22325, 1314, 18230, 22325, 22325, 22325,
	22325, 22325, -1000, -1000, 2181, 1310, 22325, 1087, -1000, -1000,
	22325, 22325, 736, 589, -1000, -3, -1000, 23585, -1000, 971,
	1394, 424, 704, 1392, 724, 713, 1390, 22325, 4, 1593,
	22325, 88, -1000, 29965, -1000, 88, -1000, -5, -1000, 30753,
	-1000, -1000, -1000, 22325, 336, -1000, 22325, -1000, -1000, -1000,
	1266, -6, -1000, -1000, 377, 80, 1588, 80, 16635, -1000,
	22325, -10, 30753, 2213, 19175, 543, -1000, 31195, 31414, 5614,
	577, 11397, 11397, 11397, 11397, 11397, 11397, 11397, 11397, 11397,
	11397, 11397, 11397, 11397, 11397, 11397, 11397, 11397, 11397, 11397,
	11397, 11397, 11397, 1162, 11397, 540, 11397, 11397, 11397, 11397,
	1133, 850, 192, 919, -1000, 1635, 1635, 1635, 30866, 30866,
	181, 301, -1000, 11397, -1000, 10377, 93, 29250, 1, -1000,
	-1000, -1000, 7983, 398, 30753, -23, 6281, -1000, 1665, 992,
	1343, 1217, 197, 92, 89, 87, 11397, 11397, 12077, 12077,
	11397, 12417, 11397, 11397, 6962, 11397, 11397, 11397, 11397, 11397,
	11397, -1000, 196, -1000, -1000, -1000, -1000, 1664, -1000, -1000,
	1663, -1000, 573, 571, 1661, -25, -11, -1000, 1605, -1000,
	-1000, -1000, -1000, 101, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 195, 765, 194, 194,
	194, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 344, -1000,
	-1000, 400, 400, 400, -1000, -1000, -12, -1000, 1265, -1000,
	362, -16, 446, -3, 955, 1013, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1677,
	-15, -1000, -1000, -15, -1000, -1000, 5614, -1000, -1000, 20435,
	-1000, -1000, 19490, 1585, 1388, -1000, 797, -1000, 1582, 22325,
	898, 1019, -1000, 570, 1384, -1000, -1000, 22325, 22325, -1000,
	22325, -1000, 22325, 22325, 5614, 22325, 22325, -1000, -1000, -1000,
	30753, -1000, 364, -1000, -1000, 30753, 669, 1166, -1000, 1166,
	-20, -1000, 29857, 1124, 22325, -1000, -1000, -1000, -1000, -1000,
	22325, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 137,
	-1000, -1000, -1000, -1000, 22325, 22325, 22325, -1000, -66, 723,
	-1000, 19805, 1477, 1475, 1483, 20435, 1572, -25, 1262, 1571,
	-25, 1261, 537, 22325, 528, 518, 20435, -1000, 193, -18,
	377, 10036, 15996, 5614, -1000, 377, 9356, -1000, 86, 1201,
	940, -1000, 605, 1256, 22325, 677, 11397, 788, -1000, 15677,
	405, 22325, 677, 61, -1000, -1000, -1000, 331, 22325, -1000,
	-1000, 11397, -1000, -1000, 22325, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 353, 399, 399, 564, 564,
	564, 564, 1584, 2283, 212, 3107, 2999, 2999, 2999, 3270,
	1576, 1576, 2999, 2999, 2999, 30866, 30838, 739, 11397, 11397,
	506, 848, 192, 739, 11397, 739, 739, 739, 739, -1000,
	1197, -1000, -1000, -1000, -1000, 1255, 186, 12417, 12417, -1000,
	-1000, -1000, 6622, 12757, -1000, -1000, -1000, -1000, 185, 11397,
	-1000, 29278, -197, -24, -1000, -1000, 11397, -28, -95, -1000,
	-1000, 621, -1000, 11397, -1000, -30, 11397, 11397, 11397, 85,
	84, -1000, 504, -1000, 502, 498, 494, -1000, 184, 830,
	177, 175, 11397, -1000, -1000, -1000, 30574, 4178, 83, 1249,
	-125, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 82, 81,
	30489, -125, 77, 4024, -1000, 12417, 12417, 12417, 6622, 173,
	76, 29725, -125, 30460, 9696, 9696, 9696, 73, 30310, 11397,
	-125, 3965, 3908, 3538, -36, -37, -42, 1658, -43, 72,
	345, 338, 70, -1000, -1000, 31414, 300, 296, -1000, 1653,
	366, 17915, 22325, -1000, 1147, -1000, -1000, 685, -1000, 753,
	-1000, 15042, -1000, -1000, 69, -51, -32, 31414, -1000, -1000,
	-1000, -1000, -1000, 22325, 281, 22325, 22325, -1000, 171, 1123,
	1117, -25, 22325, 1676, -25, 22325, 1383, 1414, 324, 22325,
	-1000, 118, 118, -1000, 115, -1000, -1000, -41, 669, -1000,
	11397, 1651, -1000, -1000, -1000, 7643, -1000, -1000, -1000, 22325,
	-153, -60, -1000, -1000, -1000, -1000, -1000, 336, 737, 22325,
	22325, 22325, -1000, -1000, 1016, 23270, 1002, 31414, 170, 22325,
	22325, 22955, 22640, 22325, 789, -25, -1000, 169, -25, -1000,
	167, 22325, 701, 22325, 22325, 698, -25, -1000, 1212, -1000,
	-35, 2148, 202, -181, 75, 340, -1000, 15358, -1000, 1212,
	-1000, -1000, 366, 1243, 596, -1000, 603, -1000, -1000, 7302,
	30753, -1000, 677, 1486, -58, -1000, -1000, -1000, 377, 16635,
	15996, 9356, -59, 30753, -60, 11397, 739, 739, 11397, 12417,
	12417, -1000, 739, -1000, -1000, -1000, -1000, -1000, 1232, 166,
	11397, 31414, 3510, 3241, -64, -1000, 9016, -52, -1000, 11397,
	-1000, 29222, -1000, -1000, 294, 1412, -1000, 11397, 30220, 63,
	8676, -1000, 30070, -31, -31, -1000, 1675, 1057, 1036, 751,
	654, 1650, -1000, 16954, 381, 840, 28882, 31195, 31414, -1000,
	11397, -1000, -1000, 1230, 11397, -1000, 31195, 31414, 12417, 12417,
	12417, 12417, 12417, 12417, 12417, 12417, 12417, 12417, 12417, 12417,
	12417, 12417, 12417, 12417, 12417, 12417, 12417, 1058, 12417, 1629,
	1629, 1629, -53, 8336, -1000, 1309, 1230, 11397, 11397, 31414,
	62, 56, 52, -1000, 11397, -125, 11397, 11397, 11397, -1000,
	-1000, -1000, 51, -1000, 1649, -1000, -1000, -1000, -1000, -1000,
	459, 1647, 49, -1000, 854, -1000, -60, -1000, -1000, -1000,
	-1000, -1000, 1187, -1000, 19490, -1000, 162, 22325, 13413, 160,
	801, 11397, 144, 143, -1000, 142, -1000, -1000, 139, 22325,
	1093, 324, 18545, -1000, 365, -1000, -1000, -1000, 865, 28854,
	-1000, 1516, 5614, 22325, -1000, -1000, -1000, 491, 487, 1381,
	-1000, 995, -1000, 409, 806, -1000, 1374, 980, 1368, 980,
	-1000, -66, 700, -1000, 11397, -1000, 11397, -1000, 482, -1000,
	-1000, 480, 47, 1209, 1549, -1000, 15996, 1134, 1132, 15996,
	1098, 832, 832, 832, -1000, 136, 285, 340, 4619, 11397,
	20120, 838, 40, 44, 2148, 1209, -1000, 17915, 563, -1000,
	-87, -1000, -1000, 216, -25, 677, -1000, -101, -1000, 325,
	1570, 739, 2950, 163, 11397, 31414, 31102, -65, 11397, 11397,
	-1000, -69, -1000, 11397, 284, 30753, -1000, -1000, -1000, 30753,
	11397, 1671, 11397, 43, 41, 39, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 37, -1000, -1000, 27995, 11397, 36,
	-1000, 34, 31, 30753, 1309, 30753, -1000, -1000, 481, 481,
	637, 637, 637, 637, 1629, 2352, 461, 1176, 803, 803,
	803, 715, 668, 668, 803, 803, 803, 1228, 1038, 135,
	4065, 11397, -70, -1000, -1000, -1000, 30753, 30753, 30, -1000,
	-1000, -1000, -125, 2438, 28825, 28797, -1000, 29, -1000, 279,
	277, -1000, 134, -1000, 1193, -1000, 2427, 13413, 133, -80,
	-1000, 312, 1526, 11397, -1000, -1000, 131, 22325, -1000, 28769,
	13413, 22325, 19490, 1581, 13413, 894, 1108, 324, 18545, -1000,
	570, -1000, -1000, -1000, 1516, -1000, 22325, 22325, 22325, 1360,
	-1000, -1000, 1113, 1141, 439, 22325, -1000, 22325, -1000, 22325,
	22325, 22325, -82, -102, 22325, 22325, -1000, 373, 11397, 11397,
	2148, 15996, 15996, 1182, 1114, 15996, -1000, -1000, -1000, -1000,
	249, 360, 340, 20120, -1000, 1645, 1126, -104, -1000, -1000,
	22325, 130, -1000, 340, 373, -111, 17600, 1420, 22325, 1472,
	-1000, -1000, 129, 11397, 11397, 31102, -106, -1000, 739, 739,
	-1000, 28429, -1000, 30753, -1000, 30070, -1000, -1000, -1000, -1000,
	808, -1000, 28401, -1000, -1000, -1000, -1000, 12417, 1226, 128,
	31414, 28372, -1000, -1000, 11397, -1000, -1000, -1000, -1000, -1000,
	1674, 817, -1000, 22325, -1000, 5614, 22325, 1233, 987, -1000,
	-1000, 1107, 127, 12417, 22325, -115, 13413, 821, 13413, 1516,
	-23, 5614, 1516, 28344, 6281, -116, -1000, -117, -123, 28,
	-25, -128, 22325, -1000, 324, 18545, -1000, 1414, -1000, -1000,
	-1000, -1000, 22325, 970, -1000, 929, 11397, -1000, 31414, 980,
	980, -1000, 478, 477, 474, 471, -1000, -1000, -1000, 22325,
	30753, -125, -1000, 1182, -1000, 126, 11397, 15996, -1000, -181,
	-1000, -134, -1000, 20120, -1000, 213, -194, -1000, 321, -1000,
	340, 124, 22325, 20120, -1000, -1000, 117, -23, 541, -136,
	22325, -1000, -1000, 5941, 739, 739, -1000, -1000, 27, 840,
	1546, -1000, 703, 12417, 31414, -140, -1000, 28316, -148, -1000,
	320, 22325, 1140, -1000, -1000, 22325, 994, -1000, -1000, 11397,
	4065, 116, 821, -150, 1187, 113, -1000, -1000, -1000, -1000,
	-1000, -1000, 1526, -30, -1000, -1000, 738, 1187, -1000, 821,
	112, 18545, -1000, 1093, -1000, -1000, -1000, 30753, 1514, -1000,
	-1000, 22325, 22325, 108, 107, -113, -1000, 1577, -1000, 22325,
	30753, -1000, 340, -1000, 1644, -1000, -1000, 1126, -1000, 4957,
	20120, 22325, -154, -1000, 11397, 634, -1000, 377, -1000, -1000,
	689, 11397, 703, -159, -1000, -1000, 1674, -1000, -1000, 1672,
	102, -1000, -1000, 1354, 248, 1078, 22325, 1187, 821, -1000,
	22325, 1516, 25, 22325, -1000, 1187, 13413, -1000, 1108, 415,
	5614, -1000, -1000, 11397, 11397, 22325, 100, -160, 20120, -1000,
	-1000, -1000, 1636, -1000, -161, -1000, -31, 16635, -1000, 24,
	11737, 11737, -125, -1000, -1000, -1000, 22325, 1346, -1000, 870,
	896, 23, -1000, 1187, -165, -1000, -1000, 99, -1000, -167,
	-1000, -1000, 11397, -1000, -171, -173, -1000, -1000, -1000, -1000,
	164, -1000, 22, -158, -1000, -1000, -1000, 13086, 947, 680,
	29616, -1000, -183, 22325, -1000, 892, 879, 646, -1000, -1000,
	-1000, -1000, -1000, -1000, 1078, 821, 30753, -1000, -1000, -1000,
	1671, -1000, 1580, -1000, -1000, -1000, -1000, -1000, 925, -1000,
	-1000, 1436, -1000, 425, 954, 954, 870, 1187, 11057, -1000,
	-1000, -1000, -1000, 1617, -1000, -1000, 1052, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2114, 2106, 1361, 1482, 2105, 2104, 2100, 2098, 2097,
	2093, 2091, 2087, 2086, 2085, 2084, 2079, 2078, 2075, 2073,
	2069, 2065, 2045, 2044, 2042, 2039, 2035, 1460, 2032, 2031,
	2030, 2029, 2028, 2026, 1443, 2023, 1437, 2022, 2020, 2012,
	2009, 2008, 1415, 1413, 2007, 82, 97, 1408, 2006, 2005,
	1404, 2002, 2001, 2000, 1999, 1997, 1994, 126, 1992, 1990,
	1989, 1985, 1984, 1982, 1981, 147, 158, 1980, 1398, 1979,
	1978, 1977, 1976, 1975, 1973, 1970, 1968, 1967, 1966, 1964,
	1963, 1961, 1960, 1959, 1951, 1942, 1937, 159, 1935, 1933,
	1380, 1374, 1932, 1929, 19, 1928, 80, 1927, 30, 141,
	2594, 136, 1926, 1925, 1924, 1913, 44, 85, 83, 1912,
	60, 1908, 1907, 49, 28, 21, 23, 1906, 91, 1905,
	1904, 1212, 24, 1902, 1895, 131, 1892, 46, 29, 2263,
	153, 151, 105, 111, 1890, 1889, 1881, 1880, 42, 1879,
	1, 1878, 1877, 9, 66, 17, 1873, 70, 22, 1869,
	1867, 128, 1865, 74, 107, 1345, 99, 115, 16, 1861,
	79, 12, 76, 1855, 1850, 148, 32, 1848, 35, 84,
	137, 1847, 40, 156, 52, 26, 64, 117, 1846, 1844,
	1841, 102, 1840, 114, 81, 1839, 1836, 53, 1835, 133,
	139, 1833, 1832, 90, 1831, 123, 1829, 1828, 154, 142,
	113, 4, 34, 54, 11, 1333, 1332, 112, 73, 37,
	20, 1826, 1903, 220, 1173, 43, 96, 72, 33, 100,
	45, 67, 146, 78, 1825, 1824, 120, 1823, 1822, 1820,
	1812, 1810, 93, 1788, 1787, 71, 144, 14, 47, 51,
	88, 27, 63, 77, 101, 150, 103, 1786, 94, 122,
	1784, 213, 1783, 1782, 1626, 119, 1777, 1767, 1758, 1423,
	1031, 865, 211, 1749, 1747, 680, 550, 1746, 1744, 58,
	1739, 118, 110, 1735, 140, 129, 15, 1734, 121, 109,
	92, 1732, 104, 57, 0, 580, 39, 1729, 108, 55,
	1725, 1723, 1722, 1721, 25, 3, 8, 7, 5, 6,
	89, 69, 1720, 1719, 132, 86, 50, 1717, 152, 1716,
	1715, 1714, 31, 1712, 13, 1710, 18, 1707, 1704, 10,
	2, 1699, 1698, 138, 1694, 95, 1691, 1578, 1690, 149,
	1687, 1686, 1431, 36, 106,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 5, 5,
	5, 5, 5, 7, 8, 6, 6, 6, 6, 9,
	9, 10, 16, 13, 18, 12, 12, 15, 15, 108,
	108, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 105, 105, 110, 110,
	110, 112, 112, 109, 109, 104, 104, 20, 55, 282,
	282, 283, 283, 93, 93, 97, 97, 94, 95, 95,
	96, 96, 26, 26, 26, 22, 22, 23, 24, 27,
	27, 27, 27, 27, 27, 34, 35, 35, 35, 35,
	35, 36, 36, 36, 36, 36, 41, 41, 39, 39,
	38, 38, 37, 37, 40, 40, 157, 157, 156, 156,
	159, 159, 42, 42, 45, 45, 45, 45, 45, 46,
	46, 46, 46, 46, 46, 46, 46, 250, 250, 249,
	44, 224, 224, 47, 182, 182, 48, 48, 48, 48,
	49, 56, 323, 323, 323, 327, 327, 328, 328, 329,
	329, 329, 329, 329, 329, 329, 325, 325, 53, 53,
	92, 60, 60, 60, 60, 60, 60, 62, 64, 61,
	61, 61, 63, 63, 65, 65, 65, 65, 66, 66,
	66, 66, 67, 67, 137, 137, 275, 274, 274, 280,
	280, 280, 135, 135, 135, 135, 135, 136, 136, 136,
	273, 273, 273, 273, 281, 281, 281, 281, 281, 281,
	279, 279, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	80, 80, 87, 87, 87, 87, 87, 87, 69, 74,
	74, 74, 70, 75, 76, 77, 77, 77, 71, 71,
	79, 79, 79, 78, 84, 84, 84, 84, 81, 81,
	81, 82, 82, 85, 85, 85, 72, 73, 86, 83,
	83, 83, 43, 324, 324, 326, 326, 51, 30, 30,
	31, 31, 138, 138, 139, 139, 203, 203, 203, 203,
	140, 140, 111, 111, 111, 202, 292, 292, 293, 293,
	293, 293, 293, 293, 294, 294, 294, 294, 294, 294,
	294, 290, 290, 291, 288, 288, 289, 289, 289, 289,
	330, 330, 201, 201, 143, 143, 297, 297, 297, 297,
	295, 295, 295, 295, 295, 298, 296, 299, 299, 299,
	299, 299, 236, 236, 236, 89, 32, 117, 117, 33,
	29, 29, 186, 186, 147, 147, 241, 241, 241, 128,
	128, 106, 106, 106, 14, 11, 11, 11, 11, 11,
	11, 19, 19, 17, 17, 187, 187, 188, 188, 52,
	54, 59, 88, 88, 88, 21, 21, 25, 25, 58,
	332, 332, 124, 124, 124, 124, 125, 125, 198, 198,
	199, 199, 200, 200, 200, 119, 118, 120, 120, 28,
	28, 113, 113, 114, 114, 115, 115, 116, 116, 333,
	333, 50, 50, 91, 131, 131, 195, 195, 195, 197,
	197, 196, 196, 196, 172, 172, 172, 90, 152, 152,
	161, 161, 162, 162, 247, 163, 163, 57, 57, 100,
	100, 98, 98, 98, 98, 98, 98, 99, 99, 101,
	101, 101, 101, 101, 101, 101, 103, 305, 305, 305,
	308, 308, 304, 306, 306, 307, 307, 331, 331, 173,
	173, 173, 142, 141, 141, 145, 145, 144, 146, 146,
	240, 240, 240, 170, 170, 170, 170, 189, 189, 190,
	190, 191, 191, 192, 192, 192, 193, 193, 194, 194,
	169, 169, 220, 220, 102, 102, 151, 151, 153, 153,
	210, 210, 210, 211, 211, 209, 209, 209, 209, 242,
	242, 242, 242, 242, 242, 242, 321, 321, 321, 322,
	322, 239, 239, 243, 243, 243, 243, 243, 243, 237,
	237, 237, 237, 238, 238, 248, 248, 176, 176, 176,
	176, 174, 174, 175, 175, 244, 244, 244, 244, 171,
	171, 245, 245, 245, 204, 204, 251, 251, 251, 269,
	269, 150, 150, 150, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 253, 253, 253, 253, 255, 255, 255, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 268, 268, 268, 268,
	268, 256, 256, 263, 263, 264, 264, 265, 266, 257,
	257, 258, 258, 259, 260, 267, 267, 267, 267, 271,
	271, 261, 261, 261, 261, 261, 262, 183, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 184, 184, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 214, 214, 214, 214, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	300, 300, 300, 300, 300, 300, 300, 302, 302, 303,
	303, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	309, 309, 310, 310, 312, 312, 313, 313, 314, 315,
	315, 315, 316, 317, 317, 311, 311, 318, 318, 318,
	319, 319, 320, 320, 320, 320, 320, 226, 226, 226,
	227, 227, 228, 234, 234, 234, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 126, 126, 126, 126, 126, 158, 158, 223,
	223, 221, 221, 221, 225, 225, 177, 177, 270, 270,
	270, 270, 270, 270, 270, 178, 178, 178, 185, 179,
	179, 180, 180, 180, 180, 180, 180, 217, 218, 181,
	181, 181, 219, 219, 229, 233, 233, 232, 231, 231,
	230, 230, 207, 207, 208, 208, 206, 205, 166, 166,
	165, 165, 164, 164, 334, 334, 235, 235, 167, 167,
	168, 160, 160, 246, 246, 246, 246, 154, 154, 133,
	133, 155, 155, 129, 129, 132, 132, 130, 130, 130,
	130, 148, 148, 149, 149, 127, 127, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 272, 272,
	272, 222, 121, 121, 121, 122, 122, 123, 123, 277,
	277, 277, 278, 278, 278, 278, 276, 276, 276, 276,
	276, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	6, 6, 6, 5, 5, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 7, 6, 1,
	1, 1, 3, 3, 0, 2, 0, 2, 1, 3,
	5, 0, 4, 6, 7, 1, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 6, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 4, 6, 4, 6,
	4, 6, 3, 5, 3, 5, 1, 3, 1, 2,
	2, 3, 2, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	5, 3, 0, 3, 3, 0, 2, 3, 2, 3,
	6, 6, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 3,
	2, 1, 1, 1, 1, 1, 3, 4, 5, 3,
	2, 6, 3, 4, 3, 3, 3, 3, 1, 3,
	3, 1, 2, 2, 1, 0, 1, 1, 3, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 3, 1, 1, 1, 1, 1, 2, 3, 4,
	4, 4, 4, 2, 4, 4, 4, 4, 4, 4,
	2, 3, 3, 2, 4, 5, 4, 5, 2, 3,
	3, 4, 2, 4, 3, 3, 4, 4, 2, 5,
	5, 6, 2, 2, 0, 2, 0, 3, 7, 10,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 1,
	8, 0, 1, 1, 0, 3, 2, 0, 3, 1,
	2, 2, 3, 6, 2, 1, 1, 2, 4, 2,
	5, 7, 8, 5, 3, 1, 4, 6, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 4, 3, 0, 6,
	11, 14, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 8, 10, 8,
	10, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	3, 2, 1, 1, 1, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 6, 1, 3, 1, 4, 2, 8,
	5, 4, 3, 0, 2, 2, 0, 8, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 1, 1, 8,
	8, 1, 1, 4, 4, 4, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 4, 5, 2, 2, 1, 1, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 2, 3, 3, 0, 1, 3,
	3, 5, 1, 1, 3, 2, 4, 4, 0, 7,
	4, 6, 3, 1, 5, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 4, 1, 1,
	1, 5, 1, 3, 1, 3, 1, 3, 1, 1,
	1, 1, 6, 6, 4, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 3, 1,
	3, 3, 3, 2, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -26, -27, -48,
	-34, -35, -36, -47, -42, -49, -43, -50, -51, -44,
	-55, -54, -56, -59, -57, -52, -53, -60, -68, -88,
	-89, -90, -91, -5, -6, -7, -8, 34, -23, -24,
	67, -28, -29, -30, -31, -32, -33, 89, -307, 93,
	-37, -38, -39, -41, -40, 104, 106, 124, 130, 212,
	218, 238, 240, 242, 249, -98, -100, 236, 237, -61,
	-62, -63, -64, -92, 260, -69, -70, -71, -72, -73,
	-74, -75, -76, -77, -78, -79, -80, -81, -82, -83,
	-84, -85, -86, -21, -25, -58, 300, -9, -10, -13,
	-12, -11, -16, -18, -15, -17, -19, -14, 47, 69,
	-305, 97, -101, -99, 351, 309, 263, 35, 272, 61,
	100, 244, 23, 325, 332, 253, -102, -103, 317, 281,
	354, -323, -155, 281, 82, -130, -121, 344, 4, -284,
	-286, 20, 21, 23, 33, 34, 35, 40, 44, 47,
	48, 55, 60, 61, 62, 64, 66, 67, 68, 71,
	72, 80, 81, 83, 85, 89, 91, 93, 96, 97,
	99, 104, 105, 106, 112, 113, 118, 120, 125, 130,
	131, 132, 133, 140, 143, 145, 138, 155, 156, 157,
	159, 160, 161, 164, 163, 168, 171, 174, 176, 177,
	178, 181, 179, 183, 184, 186, 185, 191, 193, 194,
	196, 199, 202, 205, 208, 209, 210, 211, 212, 214,
	216, 218, 220, 221, 222, 223, 224, 226, 227, 229,
	230, 231, 232, 233, 236, 234, 235, 237, 238, 239,
	240, 242, 244, 245, 247, 261, 262, 273, 249, 250,
	251, 252, 256, 254, 257, 258, 260, 263, 265, 268,
	271, 272, 274, 277, 275, 270, 280, 282, 283, 284,
	285, 286, 287, 288, 295, 296, 300, 301, 302, 303,
	306, 307, 308, 309, 311, 314, 315, 316, 321, 326,
	327, 328, 329, 330, 28, 36, 37, 38, 39, 41,
	42, 45, 46, 51, 52, 53, 56, 84, 86, 87,
	103, 107, 108, 114, 115, 116, 126, 128, 134, 135,
	144, 146, 147, 148, 149, 150, 152, 166, 180, 190,
	192, 203, 207, 215, 217, 225, 246, 255, 266, 267,
	276, 278, 290, 291, 292, 297, 298, 313, 317, 318,
	-129, -121, 82, -121, 218, 22, 91, 143, 308, 307,
	22, 214, 254, 283, 285, -121, -46, 351, -45, -4,
	-27, -36, -47, -43, -68, -42, -57, -34, -50, -90,
	-91, -327, 22, -328, -329, 69, 97, 124, 253, 143,
	91, 307, -276, 4, -284, -286, -285, -287, 58, 70,
	123, 142, 136, 154, 158, 167, 169, 182, 204, 206,
	243, 264, 22, 24, 25, 26, 27, 29, 30, 31,
	32, 43, 49, 50, 54, 57, 59, 65, 69, 73,
	74, 76, 75, 77, 78, 79, 88, 90, 92, 94,
	95, 98, 100, 102, 109, 110, 111, 119, 121, 122,
	124, 127, 129, 137, 139, 141, 151, 153, 162, 165,
	170, 172, 173, 187, 188, 189, 195, 197, 198, 200,
	201, 213, 219, 228, 241, 253, 259, 269, 279, 281,
	289, 293, 294, 299, 304, 305, 310, 312, 319, 320,
	322, 323, 324, 325, 156, -121, -323, 156, -327, -125,
	249, -121, -125, -87, 257, 4, 22, 82, 181, 259,
	290, 171, 55, 246, 257, -66, 296, -65, 290, -275,
	-67, -156, 181, -121, -331, 281, 156, 222, 281, 310,
	320, -186, 82, 305, -99, -101, -100, 320, 281, 139,
	82, 310, -144, -145, 304, 151, 102, 201, -98, -100,
	-305, -280, -273, -236, 9, 299, 109, 197, -279, 8,
	343, -272, -278, 5, 7, 342, 4, -284, -286, -285,
	-87, 257, 34, 55, 22, 60, 83, 125, 139, 140,
	160, 65, 66, 221, 171, 157, 295, 161, 258, 282,
	296, 69, 311, 286, 105, -332, 296, 296, -332, -332,
	-124, 296, 293, 281, 139, 82, 320, -308, 226, -304,
	-121, -308, -141, -142, 22, 94, 355, -168, 351, -244,
	-129, 198, -3, 293, 355, -155, -148, -121, -206, -205,
	353, 122, 351, -165, -166, -205, -206, -121, 22, 122,
	153, 153, -245, -244, -182, 351, -250, -249, -278, 317,
	197, 355, -212, -214, 342, 343, 337, 187, 331, -226,
	-216, -229, 103, 246, 351, -129, -215, 356, 9, -302,
	-100, 29, -227, -228, 49, -121, 7, 8, 5, 6,
	-127, -253, -222, -262, 299, 109, 189, -300, -301, 4,
	-284, -277, -254, -264, -258, -261, 152, 58, 74, 75,
	78, 76, 79, 259, 310, 50, 28, 107, 108, 207,
	215, 278, 297, 298, 134, 190, 135, 56, 126, 166,
	96, 37, 39, 41, 42, 51, 52, 84, 86, 87,
	114, 115, 116, 144, 146, 147, 148, 149, 150, 192,
	225, 266, 276, 291, 292, 318, -285, -265, -266, -259,
	-260, -267, -224, 351, 122, -212, 197, -121, -87, 330,
	2, 261, 351, -66, 53, 296, -199, -200, -118, -119,
	-120, 155, 220, 224, 330, 293, 336, 122, -280, -137,
	88, -159, 353, -171, -244, -212, -212, -156, 134, -121,
	-156, 139, -121, 134, -144, -145, -157, 134, -156, -157,
	134, -133, 134, -132, -129, -121, 134, -148, 134, -170,
	-189, -190, 170, 111, 195, -173, 22, 94, -173, -173,
	44, 352, 352, 8, 7, 7, -87, -282, -279, 9,
	261, 221, 258, 55, 122, -324, 197, 122, 122, 122,
	122, 122, 221, 258, 119, 295, 122, 155, 220, 273,
	281, 320, 122, 122, -198, -199, -198, 293, -125, -244,
	134, -129, -132, 134, -121, -244, 134, 355, -308, -149,
	351, -160, -246, -212, 344, -160, -168, -167, -235, -212,
	88, 344, -129, 351, -282, -130, 355, -276, 344, 274,
	352, -154, -129, -166, -245, -131, -129, -131, 260, -121,
	30, -158, -212, 352, 355, -323, -329, 10, 11, 57,
	33, 342, 343, 344, 345, 117, 346, 347, 340, 341,
	339, 334, 335, 336, 63, 175, 248, 13, 14, 15,
	26, 200, 169, 331, 136, 264, 337, 16, 17, 18,
	154, 36, 137, -126, -134, -212, -212, -212, -212, -212,
	206, -164, -207, 349, -100, 351, -100, -212, -158, 7,
	-100, -221, 349, -230, -212, -165, 351, 5, 351, 5,
	-309, 326, 119, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 217, -271, 321, -271, -271, -255, 351, -255, -256,
	351, -255, 327, 332, 351, 30, -223, -251, -252, -254,
	-263, -257, -261, -262, 40, 46, 45, 288, 180, 255,
	267, 313, 38, 196, 145, 144, 146, 147, 148, 149,
	150, 266, 37, 225, 115, 116, 114, 96, 87, 86,
	192, 42, 41, -265, -266, -259, -260, 84, 291, 292,
	152, 39, 52, 51, 318, 276, -283, -282, -323, -65,
	-275, -158, 30, -199, 355, 168, -136, 174, 186, 131,
	198, 328, -281, 5, 4, -222, -236, 88, 171, -262,
	-274, 88, -280, -274, 88, 72, 353, -276, -110, 355,
	48, 239, 351, -143, 187, -117, -306, 325, -143, 351,
	-122, 134, -121, -306, 187, -170, -110, 355, 103, -110,
	103, -110, 355, 103, 356, 103, 103, -190, -189, -191,
	-212, 22, -194, 113, 183, -212, -214, -99, -99, -99,
	-146, -240, -212, 219, 139, -156, 22, 262, -275, -326,
	119, -323, -275, -275, -275, -275, -275, 257, -46, 119,
	-121, 168, -275, -275, 281, 139, 281, -125, -108, 234,
	-107, 21, 23, 97, 315, 103, 270, 287, 250, 270,
	287, 250, 234, 103, 234, 234, 103, -304, 30, -148,
	-151, 355, 122, 30, 4, -151, 355, 352, -129, -248,
	333, -121, 122, 352, 355, -204, 323, -195, -57, 351,
	88, 30, -195, -161, -162, -247, -163, -129, 351, -121,
	352, 355, -46, -249, 293, -269, -251, -268, 230, 231,
	229, 233, 232, -251, -276, 290, -212, -212, -212, -212,
	-212, -212, -212, -212, -212, -212, -212, -212, -212, -212,
	-212, -212, -212, -212, -212, -212, -212, -212, 169, 136,
	264, 36, 137, -212, 293, -212, -212, -212, -212, 179,
	187, 189, 299, 109, 306, 94, 193, -334, 279, 32,
	-219, -100, 351, -234, 27, 269, 22, -226, 246, 351,
	-207, -212, -208, -158, 352, 352, 355, -158, -225, 350,
	-221, -233, -232, 322, 352, -158, 319, 22, 94, 344,
	7, -183, 329, 178, 85, 132, 177, -184, 252, -310,
	112, 127, 351, 352, 352, 352, -212, -212, -177, -270,
	-158, 4, 329, 178, 85, 132, 177, 252, -177, -178,
	-212, -158, -179, -213, -214, 342, 343, 337, 351, 246,
	-180, -212, -158, -212, 43, 165, 294, -181, -212, 122,
	-158, -212, -212, -212, -158, -158, -158, 351, 7, 7,
	290, 290, 7, -45, 352, 355, -150, 29, -183, 351,
	-248, 355, 122, 352, 296, -200, -135, 224, 268, 235,
	256, 355, -276, -244, -138, -148, -139, -121, -203, -202,
	-290, -291, -288, 139, 305, 110, 65, -289, 54, 219,
	121, 30, 103, 211, 30, 197, 187, -113, 284, 103,
	-156, -157, -157, -132, -133, -276, -121, -148, -192, -272,
	351, 343, -193, 246, 247, 355, -106, 31, 92, 159,
	-129, -325, -121, 257, -46, -129, -132, -129, 355, 293,
	-187, 65, 59, -202, 134, 59, -288, -121, 305, -187,
	65, -187, 65, 65, -244, 33, -57, 122, 33, -57,
	122, 293, -132, 293, 293, -244, 351, 352, -204, -246,
	-153, -242, 349, -244, -129, -100, -243, 351, -276, -204,
	-235, 352, -93, 133, 193, 274, 122, -129, -172, 241,
	-212, -172, -197, 197, -154, 317, -121, -172, -152, 355,
	122, 336, -154, -212, -325, 330, -212, -212, 293, -334,
	279, -219, -212, 179, 189, 299, 109, 306, 94, 193,
	122, 351, -213, -213, -158, -216, 351, -158, 350, 359,
	352, -212, 350, 350, 355, -231, -232, 98, -212, -145,
	355, -144, -212, -158, -158, 352, 352, 293, 293, 293,
	293, 351, -315, 205, 351, 351, -212, 30, 355, 352,
	122, 352, 352, -185, 213, 352, 10, 11, 342, 343,
	344, 345, 117, 346, 347, 340, 341, 339, 334, 335,
	336, 63, 175, 248, 13, 14, 15, 154, 137, -213,
	-213, -213, -158, 351, 352, -217, -218, 122, 119, 30,
	-181, -181, -181, 352, 122, -158, 355, 355, 355, 352,
	352, 352, 7, 352, 355, 352, 330, 330, 352, -251,
	349, 349, 7, -96, 325, -282, -325, -118, 303, 62,
	224, -280, 352, 352, 355, -251, -122, 139, 351, -122,
	-121, 351, 159, 159, -57, -156, 5, -57, -129, 103,
	-114, 99, -333, 336, -121, -110, -110, -110, -193, -212,
	-240, -129, 356, 355, -248, -107, -129, -121, -121, 187,
	-202, 134, -112, 187, -121, -121, 134, -121, 134, -121,
	-121, -108, 234, -57, 351, -57, 351, -121, 234, -121,
	-129, 234, -45, -169, 127, -248, 355, 70, -176, 158,
	182, 123, 167, 243, 142, 7, -46, -209, 356, 351,
	-239, 332, -100, -243, -242, -169, -96, 122, 280, 274,
	-160, 188, -172, 64, 352, -204, -162, -153, -235, 352,
	-212, -212, -213, -213, 122, 351, -212, -223, 26, 26,
	352, -158, 352, 355, -208, -212, 352, -221, 100, -212,
	289, 352, 319, -145, -145, -145, 5, 178, 132, 177,
	-184, 177, -184, -184, 7, -316, -121, 351, 323, -144,
	352, -269, -251, -212, -217, -212, -269, -251, -213, -213,
	-213, -213, -213, -213, -213, -213, -213, -213, -213, -213,
	-213, -213, -213, -213, -213, -213, -213, 94, 187, 193,
	-213, 355, -158, 352, -218, -217, -212, -212, -251, 352,
	352, 352, -158, -212, -212, -212, 352, 7, 350, 7,
	7, 352, 199, -140, 138, -203, -292, 351, -122, -147,
	-241, -121, -303, 351, -300, -301, -127, 351, -289, -212,
	351, 351, 351, -143, 351, -121, -115, 164, -333, -279,
	-306, 198, 352, -106, -276, -121, 293, 293, 103, 187,
	314, -105, 97, 260, -188, 103, -110, 103, -110, 293,
	-187, 65, -158, -158, 293, 293, 352, -220, 129, 44,
	-242, 158, 158, -242, -176, 158, -174, 204, -174, -174,
	-321, 351, 350, -239, -276, 349, 357, -158, -238, -237,
	30, -121, 202, 352, -220, -283, 290, -196, 351, 197,
	-57, -172, 336, 26, 26, -212, -223, 352, -212, -212,
	352, -212, 350, -212, 5, -212, 352, 352, 352, 352,
	-317, -121, -212, 352, 352, 352, -218, 122, 94, 193,
	351, -212, 352, 352, 355, 352, 352, 352, 350, 350,
	351, 137, -293, 65, -294, 57, 110, 69, 187, 189,
	305, 219, 54, 88, 228, -147, 351, 352, 355, -128,
	-165, 57, -128, -212, 351, -148, 352, -147, -148, -138,
	30, -147, 197, -116, 163, -333, -279, -113, -106, -121,
	-121, -202, 103, 187, 88, 187, 88, 81, 301, -121,
	-121, -129, -121, -121, 352, 352, -121, -129, -312, 324,
	-212, -158, -242, -242, -175, 312, 197, 158, -242, 350,
	352, -322, 7, -239, -238, 7, -211, -210, 120, 185,
	352, -121, 351, -239, -312, -215, -127, -121, 95, -148,
	65, -168, -100, 351, -212, -212, 352, 352, -145, -311,
	210, 352, -213, 122, 351, -223, 352, -212, -95, -94,
	5, 208, -121, -276, -121, 110, 134, 189, 159, 351,
	-213, -129, 352, -147, -201, -330, 68, 277, -241, -106,
	-276, -106, 352, -158, 352, 352, 352, 352, -57, 352,
	-129, -333, -279, -114, -202, 189, 189, -212, -251, -110,
	-110, 293, 293, 293, 293, -313, -314, -121, -175, 351,
	-212, -242, -209, 352, 355, -238, 350, 355, 358, 336,
	-239, 351, -148, -237, 351, 307, 188, 352, -121, 352,
	-145, 44, -213, -223, 352, 352, 355, 352, -97, 336,
	-121, -294, -122, 187, -212, -123, 351, -201, 352, -140,
	351, -128, -145, 228, -140, -201, 351, -279, -115, -109,
	57, -121, -121, 351, 351, 355, 30, -148, -239, 7,
	-210, -276, 349, -238, -148, 352, -158, 260, -204, -318,
	223, 247, -158, 352, -94, 5, 351, 103, 352, -297,
	176, -121, -140, -201, -148, -106, 352, -129, -140, -147,
	-116, -104, 312, -276, -158, -158, -314, -316, 352, -237,
	7, 352, -145, -161, 352, -319, -320, 36, 302, 72,
	-212, -319, -148, 110, -295, -298, -296, 197, 123, 209,
	265, 352, -140, 352, -143, 352, -212, 352, 352, 350,
	352, -204, -320, 216, 118, 246, 216, 118, 352, -121,
	-296, 197, -298, 197, 307, 91, -297, -201, 26, -111,
	48, 239, -299, 184, 239, 48, 260, -299, -295, -140,
	-320, 20, 189, 88,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 34, 35, 36, 37, 0, 105, 106,
	0, 109, 110, 111, 112, 113, 114, 0, 0, 0,
	121, 122, 123, 124, 125, 0, 506, 0, 0, 0,
	0, 0, 0, 0, 0, 477, -2, 0, 0, 191,
	192, 193, 194, 195, 0, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 259, 412, 413, 414, 508, 38, 39, 40,
	41, 42, 45, 46, 47, 48, 43, 44, 0, 383,
	505, 0, -2, 516, 0, 0, 0, 421, 0, 421,
	421, 425, 0, 0, 0, 514, 491, 492, 0, 0,
	-2, 0, 172, 0, 1053, 981, 987, 988, 1012, 1013,
	1014, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
	1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130,
	1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
	1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
	1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
	1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
	1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230,
	1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240,
	0, 983, 1053, 166, 1112, 168, 0, 0, 0, 0,
	116, 117, 118, 119, 120, 165, 142, 0, 149, 150,
	151, 152, 153, 154, 155, 156, 144, 145, 146, 147,
	148, 0, 175, 176, 177, 179, 180, 181, 182, 183,
	184, 185, 302, 1026, 1027, 1028, 1029, 1030, 1241, 1242,
	1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
	1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
	1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272,
	1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
	1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302,
	1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312,
	1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322,
	1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332,
	1333, 1334, 1335, 1336, 0, 162, 0, 0, 0, 411,
	1139, 427, 409, 188, 0, 262, 263, 264, 265, 266,
	0, -2, 1041, 1227, 1145, 200, 1166, 208, 1233, 0,
	211, 216, -2, 138, 0, 507, 0, 0, 0, 0,
	0, 0, 0, 382, -2, 487, 488, 0, 0, 0,
	0, 0, -2, 0, 511, 511, 511, 0, 0, 488,
	0, 190, 219, 220, 221, 230, 231, 232, 233, 372,
	0, 374, 240, 241, 1008, 0, 1022, 1023, 1024, 1025,
	260, 0, 0, 0, 263, 0, 273, 304, 0, 0,
	0, 0, 0, 280, 0, 283, 0, 0, 288, 292,
	0, 0, 298, 0, 0, 429, 420, 429, 417, 418,
	419, 422, 0, 0, 0, 0, 0, 497, 1118, 500,
	994, 498, 0, 0, 513, 512, 0, 544, 0, 496,
	595, 0, 2, 0, 0, 173, 174, 991, 989, 990,
	0, 0, 0, 984, 960, 958, 959, 167, 169, 0,
	0, 0, 0, 601, 163, 0, 0, 157, 159, 1239,
	0, 0, 307, 703, 0, 0, 0, 0, 0, 0,
	795, 797, 1201, 1227, 0, 799, 800, 0, 802, 804,
	805, 0, 808, 809, 951, 983, 997, 998, 999, 1000,
	0, 0, 1003, 0, 1005, 1006, 1007, 851, 818, -2,
	-2, 995, 631, 632, 633, 634, -2, 1241, 822, 824,
	826, 828, 829, 830, 831, 0, 1185, 1202, 1203, 1223,
	1224, 1232, 1236, 1237, 1209, 1220, 1210, 1197, 1207, 1218,
	1059, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1021, 665, 666, 671,
	672, 674, 0, 0, 0, 410, 0, 426, 189, 267,
	196, 0, 0, 199, 1196, 1166, 202, 430, 432, 433,
	434, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 139, 0, 80, 599, 107, 108, 355, 1209, -2,
	355, 1016, 504, 1209, -2, 0, 80, 1209, 136, 80,
	1209, 80, 1209, 979, 986, 132, 1209, 134, 1209, 483,
	525, 526, 0, 0, 0, 0, 509, 510, 0, 0,
	0, 479, 480, 373, 1010, 1009, 261, 268, 89, 90,
	0, 281, 289, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 282, 290, 506, 0, 0, 0, 294, 295,
	0, 0, 0, 0, 415, 428, 416, 0, 424, 0,
	1209, 595, 0, 1209, 0, 0, 1209, 0, 499, 0,
	0, 547, 971, 975, 976, 547, 545, 0, 968, 966,
	967, 596, 597, 0, 586, 982, 0, 956, 957, 102,
	0, 0, 977, 961, 605, 0, 454, 0, 0, 602,
	0, 0, 907, 506, 0, 0, 178, 0, 0, 0,
	0, 886, 887, 888, 889, 890, 891, 894, 895, 892,
	893, 896, 897, 898, 0, 0, 0, 899, 900, 901,
	0, 0, 903, 0, 905, 0, 0, 0, 0, 0,
	0, 965, 0, 0, 902, 708, 709, 710, 732, 733,
	0, 796, 962, 955, 798, 0, -2, 907, 0, 801,
	806, 807, 0, 0, 950, -2, 0, 1002, 0, 700,
	853, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 930, 936, 0, 0, 0, 0, 0, 0, 0,
	0, 650, 668, 679, 676, 675, 652, 0, 651, 649,
	0, 653, 0, 0, 0, 506, 0, 909, 613, 614,
	615, 616, 617, 700, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 662, 0, 637, 637,
	637, 654, 655, 663, 664, 669, 670, 681, 682, 684,
	686, 680, 680, 680, 677, 678, 586, 91, 0, 197,
	0, 0, 0, 203, 0, 0, 435, 227, 228, 229,
	437, 438, 209, 234, 235, 236, 237, 238, 239, 0,
	204, 206, 217, 205, 207, 210, 0, 140, 375, 0,
	78, 79, 313, 0, 0, 376, 0, 503, 0, 0,
	0, 1209, 1015, 442, 0, 486, 126, 0, 0, 128,
	0, 130, 0, 0, 0, 0, 0, 523, 524, 527,
	531, 532, 535, 538, 539, 529, 703, 493, 494, 495,
	517, 518, 393, 0, 0, 269, 270, 271, 272, 274,
	0, 303, 275, 276, 277, 278, 279, 284, 286, 506,
	291, 293, 296, 297, 0, 0, 0, 423, 49, 406,
	59, 0, 406, 406, 0, 0, 0, 0, 55, 0,
	0, 57, 0, 0, 0, 0, 0, 501, 0, 0,
	605, 0, 0, 0, 974, 605, 0, 970, 0, 94,
	0, 992, 0, 0, 0, 466, 0, 466, 456, 0,
	0, 0, 466, 469, 470, 472, 473, 0, 0, 603,
	164, 0, 143, 158, 0, 704, 609, 610, 656, 657,
	658, 659, 660, 705, 706, 0, 711, 712, 713, 714,
	715, 716, 717, 718, 719, 720, -2, -2, -2, 724,
	725, 726, -2, -2, -2, 730, 731, -2, 904, 906,
	0, 965, 0, -2, 0, -2, -2, -2, -2, 744,
	0, 746, 749, 751, 753, 0, 0, 0, 0, 964,
	763, 942, 0, 0, 883, 884, 885, 748, 0, 0,
	963, 954, 0, 0, -2, 803, 0, 0, 0, 913,
	914, 949, 945, 0, 810, 516, 0, 0, 0, 0,
	0, 1011, 687, 688, 689, 690, 691, 692, 701, 861,
	0, 0, 0, 823, 825, 827, 0, 0, 0, 0,
	917, -2, -2, -2, -2, -2, -2, -2, 0, 0,
	907, 927, 0, 0, 766, 0, 0, 0, 0, 1227,
	0, 907, 935, 0, 0, 0, 0, 0, 907, 0,
	941, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 160, 161, 0, 606, 608, 618, 0,
	101, 0, 0, 198, 0, 431, 436, 0, 224, 0,
	226, 0, 141, 600, 0, 0, 312, 991, 314, 316,
	317, 318, 319, 1016, 0, 1016, 0, 345, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 444, 450, 0,
	137, 80, 80, 980, 80, 985, 133, 135, 0, 533,
	0, 0, 530, 536, 537, 0, 520, 391, 392, 0,
	0, 305, 186, 285, 287, 299, 300, 586, 0, 0,
	0, 0, 405, 61, 1209, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 54,
	0, 0, 0, 0, 0, 0, 506, 993, 541, 972,
	586, 548, 506, 558, 595, 572, 563, 0, 973, 541,
	969, 598, 101, 0, 0, 103, 0, 978, 115, 0,
	604, 451, 466, 0, 0, 458, 455, 453, 605, 0,
	0, 0, 0, 908, 170, 0, -2, -2, 0, 0,
	0, 764, -2, 745, 747, 750, 752, 754, 0, 0,
	0, 0, 0, 0, 0, 765, 0, 0, 952, 955,
	-2, 908, 911, 912, 0, 0, 946, 0, 0, 0,
	0, 515, 516, 516, 516, 816, 0, 0, 0, 0,
	0, 0, 817, 0, 0, 0, 0, 0, 0, 834,
	0, 835, 836, 0, 0, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 769,
	770, 771, 0, 0, 838, 933, 934, 0, 0, 0,
	0, 0, 0, 843, 0, 940, 0, 0, 0, 847,
	848, 849, 0, 635, 0, 661, 683, 685, 673, 910,
	0, 0, 0, 88, 0, 92, 171, 201, 222, 223,
	225, 218, 321, 354, 0, 327, 0, 1016, 0, 0,
	0, 0, 0, 0, 310, 355, 377, 379, 0, 0,
	446, 450, 0, 449, 504, 127, 129, 131, 0, 0,
	519, 393, 0, 0, 301, 60, 395, 0, 0, 0,
	63, 1209, 71, 0, 408, 72, 1209, 80, 1209, 80,
	73, 50, 406, 51, 0, 52, 0, 403, 0, 394,
	401, 0, 0, 543, 0, 546, 0, 0, 0, 0,
	0, 592, 592, 592, 590, 566, 0, 572, 0, 0,
	584, 0, -2, 563, 0, 543, 87, 0, 0, 104,
	464, 465, 452, 463, 0, 466, 471, 468, 474, 0,
	707, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	943, 0, 878, 0, 0, 954, -2, 915, 944, 948,
	0, 811, 0, 0, 0, 0, 1004, 693, 694, 695,
	696, 697, 698, 699, 0, 859, 860, 864, 0, 0,
	821, 0, 0, 916, 926, 928, 767, 768, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, -2, -2,
	-2, 785, 786, 787, -2, -2, -2, 0, 0, 0,
	929, 0, 0, 881, 931, 932, 937, 938, 0, 840,
	841, 842, 939, 0, 0, 0, 667, 0, 611, 0,
	0, 619, 0, 308, 0, 315, 325, 0, 0, 0,
	384, 390, 390, 0, 819, 820, 0, 0, 344, 0,
	0, 0, 313, 0, 0, 0, 448, 450, 0, 441,
	442, 528, 534, 521, 393, 187, 0, 0, 0, 0,
	81, 65, 0, 0, 0, 0, 69, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 502, 855, 0, 0,
	549, 0, 0, 0, 0, 0, 587, 591, 588, 589,
	0, 0, 572, 584, 555, 0, 0, 0, 562, 583,
	0, 582, 571, -2, 855, 93, 0, 0, 0, 0,
	457, 467, 0, 0, 0, -2, 0, 757, -2, -2,
	877, 908, 953, 947, 1001, 516, 812, 814, 815, 702,
	866, 863, 0, 850, 832, 833, 925, 0, 0, 0,
	0, 908, 880, 839, 0, 845, 846, 636, 612, 607,
	0, 0, 326, 0, 329, 0, 0, 0, 0, 335,
	336, 0, 0, 0, 0, 0, 0, 353, 0, 393,
	996, 0, 393, 0, 0, 0, 346, 0, 0, 0,
	0, 0, 0, 439, 450, 0, 443, 444, 522, 397,
	399, 62, 0, 0, 77, 0, 0, 407, 0, 80,
	80, 396, 0, 0, 0, 0, 404, 402, 489, 0,
	542, 540, 574, 0, 576, 0, 0, 0, 578, 558,
	567, 0, 569, 584, 560, 0, 0, 553, 0, 552,
	572, 580, 0, 0, 490, 585, 0, 0, 0, 0,
	0, 475, 476, 0, -2, -2, 758, 879, 0, 516,
	0, 852, -2, 0, 0, 0, 882, 0, 0, 98,
	96, 0, 0, 330, 331, 1016, 0, 334, 337, 0,
	339, 1018, 353, 0, 321, 0, 350, 351, 385, 386,
	389, 387, 390, 516, 343, 348, 0, 321, 311, 353,
	0, 0, 445, 446, 64, 66, 67, 76, 84, 68,
	74, 0, 0, 0, 0, 854, 856, 0, 575, 0,
	594, 577, 572, 568, 0, 565, 556, 0, 557, 0,
	584, 0, 0, 564, 0, 0, 460, 605, 462, 813,
	869, 0, -2, 0, 793, 844, 0, 100, 97, 0,
	0, 328, 332, 0, 0, 359, 0, 321, 353, 347,
	0, 393, 0, 0, 309, 321, 0, 447, 448, 86,
	0, 398, 400, 0, 0, 0, 0, 0, 0, 570,
	554, 550, 0, 561, 0, 581, 516, 0, 461, 0,
	0, 0, 865, 794, 99, 95, 0, 0, 338, 364,
	0, 0, 341, 321, 0, 388, 811, 355, 380, 0,
	440, 70, 0, 83, 0, 0, 857, 858, 593, 559,
	0, 579, 0, 605, 862, 867, 870, -2, 1169, 1050,
	0, 868, 0, 0, 340, 360, 361, 0, 356, 357,
	358, 1017, 342, 352, 359, 353, 85, 56, 58, 551,
	0, 459, 0, 872, 873, 874, 875, 876, 324, 333,
	362, 0, 363, 0, 0, 0, 364, 321, 0, 320,
	322, 323, 365, 0, 368, 369, 0, 366, 349, 381,
	871, 367, 370, 371,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 340, 3, 346, 341, 3,
	351, 352, 344, 342, 355, 343, 353, 345, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 359, 354,
	334, 336, 335, 3, 356, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 349, 3, 350, 347, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 357, 339, 358, 337,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 338, 57677, 348, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:861
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:867
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:873
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 49:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:946
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:956
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:962
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:968
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:974
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:980
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:984
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:990
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:994
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1040
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1063
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1073
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = nil
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = DropCascade
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = DropRestrict
		}
	case 80:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = DropDefault
		}
	case 81:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 82:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 83:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1135
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 84:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1136
		{
		}
	case 85:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1139
		{
			return unimplemented(sqllex, "alter using")
		}
	case 86:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1140
		{
		}
	case 87:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 96:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.str = ""
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1215
		{
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1244
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1270
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1271
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1272
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1273
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1400
		{ /* SKIP DOC */
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 162:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 165:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1516
		{
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1585
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1596
		{ /* SKIP DOC */
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1597
		{ /* SKIP DOC */
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1598
		{
			return unimplemented(sqllex, "set local")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1663
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			return unimplemented(sqllex, "set from current")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1673
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1677
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1683
		{
		}
	case 215:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1685
		{
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = Low
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = Normal
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = High
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.str = "client_encoding"
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1961
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1965
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1969
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1993
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1997
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2001
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2013
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2035
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2106
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2110
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = DropDefault
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2120
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2325
		{
			return unimplemented(sqllex, "match full")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2326
		{
			return unimplemented(sqllex, "match partial")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2327
		{
			return unimplemented(sqllex, "match simple")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2328
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2334
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2335
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2336
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2337
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2338
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2341
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2347
		{
			return unimplemented(sqllex, "no action")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2350
		{
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2351
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2352
		{
			return unimplemented(sqllex, "action set null")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2353
		{
			return unimplemented(sqllex, "action set default")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2385
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = true
		}
	case 383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = false
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2460
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2461
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2464
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2465
		{
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2469
		{
			sqlVAL.union.val = Ascending
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = Descending
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 394:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2505
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2507
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = true
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = false
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2540
		{
		}
	case 408:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2541
		{
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2552
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2590
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2599
		{
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2600
		{
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.str = ""
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.str = ""
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2646
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = ReadOnly
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = ReadWrite
		}
	case 439:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.str = ""
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.str = ""
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.str = ""
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.str = ""
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2754
		{
		}
	case 450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2755
		{
		}
	case 451:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 452:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2821
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2825
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2833
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 467:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2855
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2856
		{
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3086
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3087
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3088
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3091
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3092
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3095
		{
			return unimplemented(sqllex, "cte")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3098
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3099
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3102
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3103
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3106
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3107
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = true
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = false
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = false
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = true
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3130
		{
		}
	case 514:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3131
		{
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3178
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3198
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3250
		{
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3251
		{
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3254
		{
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3255
		{
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 541:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3309
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &From{}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3345
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3363
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3390
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 559:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3407
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = nil
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3465
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3471
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = true
		}
	case 572:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = false
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.str = astFullJoin
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.str = astLeftJoin
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.str = astRightJoin
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.str = astInnerJoin
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3582
		{
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3583
		{
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3669
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3682
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3683
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3697
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3706
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3769
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3778
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = nil
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3843
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3939
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3971
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4005
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4010
		{
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4011
		{
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = year
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = month
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = day
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = hour
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = minute
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = month
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = hour
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = minute
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = minute
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = nil
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = second
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4106
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4141
		{
			return unimplemented(sqllex, "at tz")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4309
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4375
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4491
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4548
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4561
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4582
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4594
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4598
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4601
		{
			return unimplemented(sqllex, "variadic")
		}
	case 813:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4602
		{
			return unimplemented(sqllex, "variadic")
		}
	case 814:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4604
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4625
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4641
		{
			return unimplemented(sqllex, "func_application")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4642
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4646
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4671
		{
			return unimplemented(sqllex, "current role")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4672
		{
			return unimplemented(sqllex, "current user")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4673
		{
			return unimplemented(sqllex, "session user")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4674
		{
			return unimplemented(sqllex, "user")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4703
		{
			return unimplemented(sqllex, "treat")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4747
		{
			return unimplemented(sqllex, "within group")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4748
		{
		}
	case 852:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = Window(nil)
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4783
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4791
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 862:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.str = ""
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 866:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4845
		{
			return unimplemented(sqllex, "frame range")
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4846
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4847
		{
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4850
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4851
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4857
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4858
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4859
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4860
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4861
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4896
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = Any
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = Some
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = All
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = Plus
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = Minus
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = Mult
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = Div
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = FloorDiv
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4920
		{
			sqlVAL.union.val = Mod
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = Bitand
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = Bitor
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = Pow
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = Bitxor
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4925
		{
			sqlVAL.union.val = LT
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = GT
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = EQ
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = LE
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = GE
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = NE
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = Like
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = NotLike
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = ILike
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = NotILike
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4986
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5068
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5116
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 947:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 949:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5154
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5161
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5184
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5196
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5200
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5206
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5210
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5216
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5225
		{
		}
	case 965:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5226
		{
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5245
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5260
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5264
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5270
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5299
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5309
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5330
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5334
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5344
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5357
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5361
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5369
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5375
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5379
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 994:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5388
		{
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5398
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5402
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5421
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5424
		{
			return unimplemented(sqllex, "func const")
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5426
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5430
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5433
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5435
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5443
		{
			sqlVAL.union.val = DNull
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5450
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5460
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5495
		{
			sqlVAL.str = ""
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5501
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5505
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
