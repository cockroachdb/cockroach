// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:47

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *TableNameWithIndex {
	tn := u.val.(TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() TableNameWithIndex {
	return u.val.(TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:495
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ACTION = lex.ACTION
const ADD = lex.ADD
const ALL = lex.ALL
const ALL_EXISTENCE = lex.ALL_EXISTENCE
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPLAIN = lex.EXPLAIN
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HELP = lex.HELP
const HIGH = lex.HIGH
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const INET = lex.INET
const INTERLEAVE = lex.INTERLEAVE
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const IS = lex.IS
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const ON = lex.ON
const ONLY = lex.ONLY
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SOME_EXISTENCE = lex.SOME_EXISTENCE
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALL_EXISTENCE",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SOME_EXISTENCE",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6993

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	381, 54,
	-2, 738,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 47,
	152, 587,
	-2, 0,
	-1, 55,
	97, 738,
	156, 738,
	331, 738,
	332, 738,
	-2, 0,
	-1, 65,
	1, 700,
	215, 700,
	261, 700,
	376, 700,
	378, 700,
	380, 700,
	381, 700,
	-2, 713,
	-1, 98,
	4, 740,
	20, 740,
	21, 740,
	24, 740,
	29, 740,
	34, 740,
	35, 740,
	36, 740,
	37, 740,
	38, 740,
	39, 740,
	40, 740,
	41, 740,
	42, 740,
	43, 740,
	45, 740,
	46, 740,
	47, 740,
	48, 740,
	49, 740,
	52, 740,
	53, 740,
	54, 740,
	56, 740,
	57, 740,
	61, 740,
	62, 740,
	63, 740,
	65, 740,
	66, 740,
	67, 740,
	68, 740,
	70, 740,
	72, 740,
	73, 740,
	76, 740,
	77, 740,
	78, 740,
	86, 740,
	87, 740,
	88, 740,
	89, 740,
	90, 740,
	91, 740,
	92, 740,
	93, 740,
	95, 740,
	97, 740,
	99, 740,
	102, 740,
	103, 740,
	105, 740,
	109, 740,
	110, 740,
	111, 740,
	112, 740,
	113, 740,
	114, 740,
	115, 740,
	123, 740,
	124, 740,
	125, 740,
	126, 740,
	127, 740,
	129, 740,
	131, 740,
	136, 740,
	137, 740,
	139, 740,
	142, 740,
	143, 740,
	144, 740,
	145, 740,
	146, 740,
	147, 740,
	150, 740,
	151, 740,
	153, 740,
	156, 740,
	157, 740,
	158, 740,
	159, 740,
	160, 740,
	161, 740,
	162, 740,
	163, 740,
	165, 740,
	168, 740,
	169, 740,
	170, 740,
	172, 740,
	173, 740,
	174, 740,
	175, 740,
	176, 740,
	178, 740,
	179, 740,
	181, 740,
	183, 740,
	184, 740,
	187, 740,
	188, 740,
	191, 740,
	193, 740,
	195, 740,
	196, 740,
	197, 740,
	198, 740,
	199, 740,
	201, 740,
	202, 740,
	203, 740,
	204, 740,
	208, 740,
	209, 740,
	210, 740,
	211, 740,
	212, 740,
	214, 740,
	216, 740,
	217, 740,
	220, 740,
	221, 740,
	223, 740,
	225, 740,
	226, 740,
	227, 740,
	228, 740,
	229, 740,
	230, 740,
	231, 740,
	233, 740,
	234, 740,
	235, 740,
	236, 740,
	237, 740,
	239, 740,
	240, 740,
	241, 740,
	242, 740,
	243, 740,
	244, 740,
	245, 740,
	246, 740,
	248, 740,
	249, 740,
	250, 740,
	251, 740,
	252, 740,
	254, 740,
	255, 740,
	256, 740,
	257, 740,
	258, 740,
	259, 740,
	260, 740,
	262, 740,
	264, 740,
	265, 740,
	266, 740,
	267, 740,
	269, 740,
	270, 740,
	271, 740,
	272, 740,
	273, 740,
	275, 740,
	276, 740,
	277, 740,
	278, 740,
	279, 740,
	281, 740,
	282, 740,
	283, 740,
	284, 740,
	286, 740,
	287, 740,
	288, 740,
	289, 740,
	292, 740,
	293, 740,
	294, 740,
	295, 740,
	296, 740,
	297, 740,
	298, 740,
	299, 740,
	300, 740,
	301, 740,
	303, 740,
	305, 740,
	306, 740,
	307, 740,
	308, 740,
	309, 740,
	310, 740,
	311, 740,
	312, 740,
	314, 740,
	315, 740,
	316, 740,
	319, 740,
	320, 740,
	321, 740,
	322, 740,
	324, 740,
	325, 740,
	326, 740,
	327, 740,
	330, 740,
	331, 740,
	332, 740,
	333, 740,
	335, 740,
	337, 740,
	338, 740,
	339, 740,
	340, 740,
	341, 740,
	342, 740,
	345, 740,
	350, 740,
	351, 740,
	352, 740,
	353, 740,
	354, 740,
	-2, 0,
	-1, 116,
	1, 703,
	215, 703,
	261, 703,
	376, 703,
	378, 703,
	380, 703,
	381, 703,
	-2, 712,
	-1, 121,
	1, 638,
	168, 638,
	239, 638,
	243, 638,
	380, 638,
	381, 638,
	-2, 0,
	-1, 123,
	1, 638,
	380, 638,
	381, 638,
	-2, 0,
	-1, 124,
	1, 638,
	380, 638,
	381, 638,
	-2, 0,
	-1, 125,
	1, 642,
	380, 642,
	381, 642,
	-2, 0,
	-1, 147,
	4, 746,
	5, 746,
	6, 746,
	7, 746,
	8, 746,
	9, 746,
	20, 746,
	21, 746,
	24, 746,
	29, 746,
	30, 746,
	34, 746,
	35, 746,
	36, 746,
	37, 746,
	38, 746,
	39, 746,
	40, 746,
	41, 746,
	42, 746,
	43, 746,
	45, 746,
	46, 746,
	47, 746,
	48, 746,
	49, 746,
	50, 746,
	51, 746,
	52, 746,
	53, 746,
	54, 746,
	56, 746,
	57, 746,
	59, 746,
	61, 746,
	62, 746,
	63, 746,
	65, 746,
	66, 746,
	67, 746,
	68, 746,
	70, 746,
	72, 746,
	73, 746,
	75, 746,
	76, 746,
	77, 746,
	78, 746,
	80, 746,
	81, 746,
	82, 746,
	84, 746,
	85, 746,
	86, 746,
	87, 746,
	88, 746,
	89, 746,
	90, 746,
	91, 746,
	92, 746,
	93, 746,
	94, 746,
	95, 746,
	97, 746,
	99, 746,
	102, 746,
	103, 746,
	105, 746,
	109, 746,
	110, 746,
	111, 746,
	112, 746,
	113, 746,
	114, 746,
	115, 746,
	116, 746,
	117, 746,
	123, 746,
	124, 746,
	125, 746,
	126, 746,
	127, 746,
	129, 746,
	131, 746,
	134, 746,
	136, 746,
	137, 746,
	139, 746,
	142, 746,
	143, 746,
	144, 746,
	145, 746,
	146, 746,
	147, 746,
	148, 746,
	150, 746,
	151, 746,
	153, 746,
	155, 746,
	156, 746,
	157, 746,
	158, 746,
	159, 746,
	160, 746,
	161, 746,
	162, 746,
	163, 746,
	165, 746,
	167, 746,
	168, 746,
	169, 746,
	170, 746,
	171, 746,
	172, 746,
	173, 746,
	174, 746,
	175, 746,
	176, 746,
	178, 746,
	179, 746,
	181, 746,
	182, 746,
	183, 746,
	184, 746,
	185, 746,
	187, 746,
	188, 746,
	191, 746,
	193, 746,
	194, 746,
	195, 746,
	196, 746,
	197, 746,
	198, 746,
	199, 746,
	200, 746,
	201, 746,
	202, 746,
	203, 746,
	204, 746,
	205, 746,
	207, 746,
	208, 746,
	209, 746,
	210, 746,
	211, 746,
	212, 746,
	214, 746,
	217, 746,
	220, 746,
	221, 746,
	222, 746,
	223, 746,
	224, 746,
	225, 746,
	226, 746,
	227, 746,
	228, 746,
	229, 746,
	230, 746,
	231, 746,
	233, 746,
	234, 746,
	235, 746,
	236, 746,
	237, 746,
	239, 746,
	240, 746,
	241, 746,
	242, 746,
	243, 746,
	244, 746,
	245, 746,
	246, 746,
	248, 746,
	249, 746,
	250, 746,
	251, 746,
	252, 746,
	254, 746,
	255, 746,
	256, 746,
	257, 746,
	258, 746,
	259, 746,
	260, 746,
	262, 746,
	263, 746,
	264, 746,
	265, 746,
	266, 746,
	267, 746,
	269, 746,
	270, 746,
	271, 746,
	272, 746,
	273, 746,
	275, 746,
	276, 746,
	277, 746,
	278, 746,
	279, 746,
	280, 746,
	281, 746,
	282, 746,
	283, 746,
	284, 746,
	285, 746,
	286, 746,
	287, 746,
	288, 746,
	289, 746,
	292, 746,
	293, 746,
	294, 746,
	295, 746,
	296, 746,
	297, 746,
	298, 746,
	299, 746,
	300, 746,
	301, 746,
	303, 746,
	305, 746,
	306, 746,
	307, 746,
	308, 746,
	309, 746,
	310, 746,
	311, 746,
	312, 746,
	314, 746,
	315, 746,
	316, 746,
	319, 746,
	320, 746,
	321, 746,
	322, 746,
	323, 746,
	324, 746,
	325, 746,
	326, 746,
	327, 746,
	330, 746,
	331, 746,
	332, 746,
	333, 746,
	334, 746,
	335, 746,
	337, 746,
	338, 746,
	339, 746,
	340, 746,
	341, 746,
	342, 746,
	345, 746,
	350, 746,
	351, 746,
	352, 746,
	353, 746,
	354, 746,
	355, 746,
	363, 746,
	368, 746,
	369, 746,
	370, 746,
	377, 746,
	383, 746,
	-2, 0,
	-1, 150,
	1, 54,
	381, 54,
	-2, 738,
	-1, 518,
	133, 1356,
	317, 1356,
	360, 1356,
	379, 1356,
	-2, 0,
	-1, 519,
	133, 1303,
	317, 1303,
	360, 1303,
	379, 1303,
	-2, 0,
	-1, 521,
	133, 1416,
	317, 1416,
	360, 1416,
	379, 1416,
	-2, 0,
	-1, 523,
	133, 1439,
	317, 1439,
	360, 1439,
	379, 1439,
	-2, 0,
	-1, 530,
	133, 1361,
	317, 1361,
	360, 1361,
	379, 1361,
	-2, 352,
	-1, 556,
	1, 430,
	376, 430,
	378, 430,
	380, 430,
	381, 430,
	-2, 0,
	-1, 557,
	1, 483,
	130, 483,
	376, 483,
	378, 483,
	380, 483,
	381, 483,
	-2, 0,
	-1, 563,
	1, 444,
	376, 444,
	378, 444,
	380, 444,
	381, 444,
	-2, 0,
	-1, 565,
	1, 448,
	376, 448,
	378, 448,
	380, 448,
	381, 448,
	-2, 0,
	-1, 568,
	1, 456,
	376, 456,
	378, 456,
	380, 456,
	381, 456,
	-2, 0,
	-1, 569,
	1, 461,
	376, 461,
	378, 461,
	380, 461,
	381, 461,
	-2, 0,
	-1, 572,
	1, 471,
	376, 471,
	378, 471,
	380, 471,
	381, 471,
	-2, 0,
	-1, 597,
	118, 748,
	130, 748,
	186, 748,
	213, 748,
	-2, 707,
	-1, 604,
	118, 747,
	130, 747,
	186, 747,
	213, 747,
	-2, 704,
	-1, 660,
	377, 1281,
	-2, 1274,
	-1, 661,
	377, 1282,
	-2, 1275,
	-1, 667,
	5, 932,
	377, 932,
	-2, 1491,
	-1, 692,
	5, 891,
	-2, 1460,
	-1, 693,
	5, 926,
	377, 926,
	-2, 1462,
	-1, 694,
	5, 901,
	-2, 1463,
	-1, 695,
	5, 900,
	-2, 1464,
	-1, 696,
	5, 926,
	377, 926,
	-2, 1467,
	-1, 697,
	5, 926,
	377, 926,
	-2, 1468,
	-1, 698,
	5, 927,
	-2, 1471,
	-1, 699,
	5, 883,
	-2, 1472,
	-1, 700,
	5, 883,
	-2, 1473,
	-1, 701,
	5, 908,
	-2, 1477,
	-1, 702,
	5, 893,
	-2, 1478,
	-1, 703,
	5, 894,
	-2, 1479,
	-1, 704,
	5, 884,
	-2, 1485,
	-1, 705,
	5, 885,
	-2, 1486,
	-1, 706,
	5, 886,
	-2, 1487,
	-1, 707,
	5, 887,
	-2, 1488,
	-1, 708,
	5, 888,
	-2, 1489,
	-1, 709,
	5, 889,
	-2, 1490,
	-1, 710,
	5, 883,
	-2, 1497,
	-1, 711,
	5, 892,
	-2, 1502,
	-1, 712,
	5, 890,
	-2, 1505,
	-1, 713,
	5, 924,
	377, 924,
	-2, 1507,
	-1, 714,
	5, 928,
	-2, 1510,
	-1, 715,
	5, 930,
	-2, 1511,
	-1, 716,
	5, 923,
	377, 923,
	-2, 1516,
	-1, 780,
	112, 507,
	-2, 837,
	-1, 911,
	229, 736,
	-2, 580,
	-1, 916,
	215, 1278,
	-2, 0,
	-1, 952,
	1, 225,
	376, 225,
	378, 225,
	380, 225,
	381, 225,
	-2, 711,
	-1, 955,
	4, 1515,
	10, 1515,
	11, 1515,
	13, 1515,
	14, 1515,
	15, 1515,
	16, 1515,
	17, 1515,
	18, 1515,
	20, 1515,
	21, 1515,
	23, 1515,
	24, 1515,
	27, 1515,
	29, 1515,
	31, 1515,
	34, 1515,
	35, 1515,
	36, 1515,
	37, 1515,
	38, 1515,
	39, 1515,
	40, 1515,
	41, 1515,
	42, 1515,
	43, 1515,
	45, 1515,
	46, 1515,
	47, 1515,
	48, 1515,
	49, 1515,
	52, 1515,
	53, 1515,
	54, 1515,
	56, 1515,
	57, 1515,
	58, 1515,
	61, 1515,
	62, 1515,
	63, 1515,
	64, 1515,
	65, 1515,
	66, 1515,
	67, 1515,
	68, 1515,
	70, 1515,
	71, 1515,
	72, 1515,
	73, 1515,
	75, 1515,
	76, 1515,
	77, 1515,
	78, 1515,
	86, 1515,
	87, 1515,
	88, 1515,
	89, 1515,
	90, 1515,
	91, 1515,
	92, 1515,
	93, 1515,
	95, 1515,
	97, 1515,
	99, 1515,
	102, 1515,
	103, 1515,
	105, 1515,
	109, 1515,
	110, 1515,
	111, 1515,
	112, 1515,
	113, 1515,
	114, 1515,
	115, 1515,
	119, 1515,
	120, 1515,
	121, 1515,
	122, 1515,
	123, 1515,
	124, 1515,
	125, 1515,
	126, 1515,
	127, 1515,
	128, 1515,
	129, 1515,
	131, 1515,
	134, 1515,
	136, 1515,
	137, 1515,
	139, 1515,
	142, 1515,
	143, 1515,
	144, 1515,
	145, 1515,
	146, 1515,
	147, 1515,
	148, 1515,
	149, 1515,
	150, 1515,
	151, 1515,
	153, 1515,
	155, 1515,
	156, 1515,
	157, 1515,
	158, 1515,
	159, 1515,
	160, 1515,
	161, 1515,
	162, 1515,
	163, 1515,
	165, 1515,
	167, 1515,
	168, 1515,
	169, 1515,
	170, 1515,
	171, 1515,
	172, 1515,
	173, 1515,
	174, 1515,
	175, 1515,
	176, 1515,
	178, 1515,
	179, 1515,
	181, 1515,
	182, 1515,
	183, 1515,
	184, 1515,
	185, 1515,
	187, 1515,
	188, 1515,
	191, 1515,
	192, 1515,
	193, 1515,
	195, 1515,
	196, 1515,
	197, 1515,
	198, 1515,
	199, 1515,
	200, 1515,
	201, 1515,
	202, 1515,
	203, 1515,
	204, 1515,
	208, 1515,
	209, 1515,
	210, 1515,
	211, 1515,
	212, 1515,
	214, 1515,
	217, 1515,
	218, 1515,
	220, 1515,
	221, 1515,
	223, 1515,
	225, 1515,
	226, 1515,
	227, 1515,
	228, 1515,
	229, 1515,
	230, 1515,
	231, 1515,
	233, 1515,
	234, 1515,
	235, 1515,
	236, 1515,
	237, 1515,
	239, 1515,
	240, 1515,
	241, 1515,
	242, 1515,
	243, 1515,
	244, 1515,
	245, 1515,
	246, 1515,
	248, 1515,
	249, 1515,
	250, 1515,
	251, 1515,
	252, 1515,
	253, 1515,
	254, 1515,
	255, 1515,
	256, 1515,
	257, 1515,
	258, 1515,
	259, 1515,
	260, 1515,
	262, 1515,
	263, 1515,
	264, 1515,
	265, 1515,
	266, 1515,
	267, 1515,
	268, 1515,
	269, 1515,
	270, 1515,
	271, 1515,
	272, 1515,
	273, 1515,
	275, 1515,
	276, 1515,
	277, 1515,
	278, 1515,
	279, 1515,
	281, 1515,
	282, 1515,
	283, 1515,
	284, 1515,
	285, 1515,
	286, 1515,
	287, 1515,
	288, 1515,
	289, 1515,
	291, 1515,
	292, 1515,
	293, 1515,
	294, 1515,
	295, 1515,
	296, 1515,
	297, 1515,
	298, 1515,
	299, 1515,
	300, 1515,
	301, 1515,
	303, 1515,
	305, 1515,
	306, 1515,
	307, 1515,
	308, 1515,
	309, 1515,
	310, 1515,
	311, 1515,
	312, 1515,
	314, 1515,
	315, 1515,
	316, 1515,
	319, 1515,
	320, 1515,
	321, 1515,
	322, 1515,
	324, 1515,
	325, 1515,
	326, 1515,
	327, 1515,
	330, 1515,
	331, 1515,
	332, 1515,
	333, 1515,
	335, 1515,
	337, 1515,
	338, 1515,
	339, 1515,
	340, 1515,
	341, 1515,
	342, 1515,
	345, 1515,
	350, 1515,
	351, 1515,
	352, 1515,
	353, 1515,
	354, 1515,
	355, 1515,
	356, 1515,
	358, 1515,
	359, 1515,
	360, 1515,
	361, 1515,
	362, 1515,
	363, 1515,
	365, 1515,
	366, 1515,
	367, 1515,
	368, 1515,
	369, 1515,
	370, 1515,
	371, 1515,
	372, 1515,
	373, 1515,
	375, 1515,
	378, 1515,
	379, 1515,
	382, 1515,
	383, 1515,
	-2, 0,
	-1, 971,
	133, 1416,
	317, 1416,
	360, 1416,
	379, 1416,
	-2, 0,
	-1, 988,
	133, 1439,
	317, 1439,
	360, 1439,
	379, 1439,
	-2, 0,
	-1, 989,
	168, 650,
	239, 650,
	243, 650,
	-2, 340,
	-1, 1058,
	118, 747,
	130, 747,
	186, 747,
	213, 747,
	-2, 708,
	-1, 1139,
	108, 713,
	118, 713,
	130, 713,
	164, 713,
	186, 713,
	213, 713,
	219, 713,
	328, 713,
	-2, 1062,
	-1, 1149,
	377, 1258,
	-2, 1246,
	-1, 1167,
	378, 1175,
	-2, 0,
	-1, 1191,
	168, 650,
	239, 650,
	243, 650,
	-2, 645,
	-1, 1219,
	378, 1175,
	-2, 0,
	-1, 1223,
	108, 713,
	118, 713,
	130, 713,
	164, 713,
	186, 713,
	213, 713,
	219, 713,
	328, 713,
	-2, 814,
	-1, 1370,
	168, 650,
	239, 650,
	243, 650,
	-2, 342,
	-1, 1479,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 967,
	-1, 1480,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 968,
	-1, 1481,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 969,
	-1, 1482,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 970,
	-1, 1483,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 971,
	-1, 1484,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 972,
	-1, 1485,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 973,
	-1, 1486,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 974,
	-1, 1495,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 983,
	-1, 1496,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 984,
	-1, 1497,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 985,
	-1, 1500,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 990,
	-1, 1506,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 992,
	-1, 1508,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 996,
	-1, 1509,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 997,
	-1, 1510,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 998,
	-1, 1511,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 999,
	-1, 1580,
	133, 1186,
	377, 1281,
	-2, 1274,
	-1, 1581,
	133, 1187,
	-2, 1456,
	-1, 1582,
	133, 1188,
	-2, 1360,
	-1, 1583,
	133, 1189,
	-2, 1321,
	-1, 1584,
	133, 1190,
	-2, 1338,
	-1, 1585,
	133, 1191,
	-2, 1359,
	-1, 1586,
	133, 1192,
	-2, 1413,
	-1, 1663,
	1, 815,
	75, 815,
	108, 815,
	118, 815,
	130, 815,
	134, 815,
	138, 815,
	140, 815,
	155, 815,
	164, 815,
	171, 815,
	182, 815,
	186, 815,
	200, 815,
	213, 815,
	215, 815,
	219, 815,
	261, 815,
	263, 815,
	328, 815,
	336, 815,
	347, 815,
	348, 815,
	357, 815,
	376, 815,
	378, 815,
	380, 815,
	381, 815,
	382, 815,
	-2, 814,
	-1, 1818,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 991,
	-1, 1819,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 993,
	-1, 1824,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 994,
	-1, 1842,
	224, 1146,
	-2, 1148,
	-1, 2019,
	229, 736,
	-2, 580,
	-1, 2078,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 995,
	-1, 2083,
	167, 0,
	-2, 1011,
	-1, 2092,
	224, 1147,
	-2, 1149,
	-1, 2134,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1039,
	-1, 2135,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1040,
	-1, 2136,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1041,
	-1, 2140,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1045,
	-1, 2141,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1046,
	-1, 2142,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1047,
	-1, 2283,
	167, 0,
	-2, 1012,
	-1, 2286,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1015,
	-1, 2287,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1017,
	-1, 2417,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1016,
	-1, 2418,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1018,
	-1, 2425,
	167, 0,
	-2, 1048,
	-1, 2503,
	167, 0,
	-2, 1049,
	-1, 2586,
	37, 0,
	148, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1459,
	-1, 2669,
	377, 1527,
	-2, 520,
}

const sqlPrivate = 57344

const sqlLast = 44273

var sqlAct = [...]int{

	661, 1241, 2654, 2666, 2652, 2381, 2667, 2229, 2380, 2594,
	1734, 2635, 2596, 2585, 2595, 2056, 2451, 2558, 2584, 1742,
	2111, 2391, 1268, 945, 2508, 2240, 2351, 659, 605, 658,
	1276, 1812, 2262, 1311, 788, 2264, 2337, 2269, 1523, 187,
	623, 472, 26, 905, 1289, 187, 1658, 2023, 2194, 187,
	2193, 2025, 637, 2431, 1239, 187, 1731, 1221, 1712, 2031,
	187, 187, 1713, 1957, 187, 2317, 803, 187, 1936, 1226,
	1908, 2256, 1217, 1271, 1743, 187, 651, 1270, 941, 1200,
	1716, 1676, 1717, 1944, 1706, 1667, 1907, 454, 1659, 1458,
	2164, 1453, 1853, 992, 1560, 1229, 1808, 613, 111, 1395,
	1544, 1231, 1145, 1536, 1535, 1520, 1391, 770, 1201, 1609,
	1791, 1436, 451, 1264, 1434, 991, 1177, 1554, 1181, 1063,
	64, 1714, 790, 953, 931, 1736, 1720, 938, 773, 1645,
	1208, 1632, 753, 629, 1064, 509, 1134, 178, 1394, 1576,
	526, 1437, 187, 187, 529, 653, 1435, 1191, 116, 487,
	187, 928, 1283, 111, 522, 117, 183, 751, 1190, 2352,
	1841, 2178, 550, 1068, 2179, 2382, 1291, 1291, 2682, 1291,
	1735, 609, 2675, 187, 187, 793, 187, 187, 805, 2382,
	2681, 2674, 187, 187, 2675, 2675, 2631, 2630, 1218, 2629,
	1259, 1259, 26, 1259, 609, 2611, 2606, 2605, 501, 2350,
	1639, 1639, 2602, 1079, 1080, 2040, 1259, 2582, 2581, 2553,
	604, 1301, 1301, 1768, 2548, 2076, 1707, 2547, 1259, 767,
	619, 1259, 2546, 2041, 2542, 2534, 2405, 1082, 1259, 2350,
	2505, 2482, 2479, 2477, 1768, 2350, 1259, 2350, 2462, 610,
	2461, 2167, 1259, 2439, 2350, 893, 2436, 1259, 111, 2419,
	1259, 1081, 1707, 1768, 2376, 800, 1878, 1879, 1639, 2371,
	598, 2349, 2330, 1639, 1845, 2350, 1259, 597, 719, 2285,
	1846, 1634, 2255, 1768, 1079, 1080, 1711, 1301, 2687, 2250,
	778, 782, 614, 1711, 2174, 2087, 2050, 2011, 2175, 1639,
	2012, 1259, 2673, 1557, 654, 1933, 1079, 1080, 1082, 1639,
	755, 1932, 1119, 1120, 1121, 1259, 948, 1925, 1923, 1922,
	1893, 1926, 1639, 1639, 1921, 1255, 1639, 2554, 1639, 2683,
	1082, 1087, 1081, 1123, 1878, 1879, 1778, 1896, 1897, 1898,
	1639, 1767, 1757, 2663, 1639, 1768, 1639, 1710, 1638, 1304,
	1301, 1711, 1639, 1305, 1081, 1558, 2409, 2405, 1079, 1080,
	1101, 1109, 1110, 1111, 1119, 1120, 1121, 1852, 757, 2167,
	758, 1097, 1633, 2066, 1665, 1112, 2147, 1537, 2089, 2012,
	1811, 1789, 1082, 1373, 1884, 1123, 1292, 1292, 1893, 1292,
	1195, 1539, 1259, 891, 973, 1102, 150, 970, 969, 968,
	967, 2353, 1087, 966, 965, 964, 1081, 1559, 1556, 963,
	962, 961, 1101, 960, 1392, 1104, 1105, 1106, 1107, 1098,
	959, 958, 957, 147, 1087, 956, 759, 756, 603, 602,
	601, 600, 596, 187, 793, 187, 595, 187, 594, 593,
	187, 1079, 1080, 592, 1116, 1124, 187, 589, 1894, 588,
	587, 586, 1884, 149, 582, 187, 187, 187, 187, 793,
	581, 580, 548, 547, 793, 1082, 1102, 1104, 1105, 1106,
	1107, 1103, 546, 545, 544, 543, 1087, 542, 541, 540,
	897, 1114, 2040, 539, 538, 1561, 537, 536, 1102, 1081,
	148, 786, 187, 612, 535, 718, 1116, 1124, 141, 1079,
	1080, 534, 533, 532, 517, 142, 187, 2658, 1573, 1297,
	1290, 516, 1426, 1878, 1879, 1122, 1894, 479, 515, 514,
	1878, 1879, 187, 1082, 1895, 513, 118, 442, 38, 1952,
	1633, 147, 187, 1114, 420, 413, 412, 170, 169, 168,
	1102, 41, 1103, 167, 166, 165, 164, 1081, 163, 1108,
	162, 161, 160, 930, 159, 158, 157, 156, 1739, 1087,
	155, 149, 154, 793, 1103, 1555, 1113, 478, 1092, 1090,
	1091, 1083, 1084, 1085, 1086, 1088, 1089, 909, 153, 914,
	935, 1117, 152, 1571, 610, 151, 954, 1569, 904, 1773,
	1222, 2656, 1895, 1398, 187, 1004, 480, 1567, 148, 934,
	934, 1108, 2601, 54, 2583, 482, 55, 1242, 1079, 1080,
	2569, 2563, 1075, 2500, 2480, 2316, 1103, 1087, 1878, 1879,
	2315, 1889, 1887, 1888, 1880, 1881, 1882, 1883, 1885, 1886,
	2398, 1884, 1082, 1117, 118, 1308, 1059, 57, 1884, 1096,
	1002, 1091, 1083, 1084, 1085, 1086, 1088, 1089, 2311, 2412,
	974, 1115, 766, 2410, 2310, 2303, 1081, 2302, 2301, 1118,
	2297, 1092, 1090, 1091, 1083, 1084, 1085, 1086, 1088, 1089,
	2296, 2295, 2294, 2288, 1153, 2261, 2161, 2156, 2155, 2154,
	2097, 989, 1890, 1891, 1892, 2010, 986, 2014, 1964, 1889,
	1887, 1888, 1880, 1881, 1882, 1883, 1885, 1886, 1960, 1930,
	1058, 1053, 1894, 1115, 1927, 1915, 1093, 1094, 1100, 1099,
	1095, 1118, 1906, 1092, 1090, 1091, 1083, 1084, 1085, 1086,
	1088, 1089, 897, 58, 1005, 1877, 1087, 1874, 1873, 1871,
	2312, 1858, 1857, 1842, 1663, 1075, 1884, 1220, 147, 1531,
	911, 1146, 1074, 1137, 1219, 2676, 1206, 2661, 902, 2643,
	119, 60, 2642, 61, 1275, 2113, 2672, 1060, 2573, 2572,
	2571, 187, 1061, 187, 2537, 147, 610, 147, 149, 479,
	2529, 1793, 598, 2527, 481, 1393, 1807, 94, 1895, 597,
	38, 1071, 1072, 2519, 1806, 187, 187, 2517, 1076, 2492,
	1102, 2491, 2397, 41, 1525, 149, 2448, 149, 2427, 1083,
	1084, 1085, 1086, 1088, 1089, 148, 2406, 2385, 1770, 2374,
	2356, 2308, 2238, 141, 2235, 2234, 1149, 2232, 2202, 478,
	142, 2201, 2182, 1179, 1180, 1878, 1879, 2170, 2082, 1183,
	2054, 2000, 148, 1991, 148, 1977, 1976, 1962, 1931, 1186,
	141, 1738, 141, 1905, 1867, 1866, 1863, 142, 480, 142,
	1532, 1204, 1838, 1833, 1182, 54, 1185, 482, 55, 1085,
	1086, 1088, 1089, 1079, 1080, 1251, 1103, 621, 118, 1007,
	118, 1880, 1881, 1882, 1883, 1885, 1886, 111, 1880, 1881,
	1882, 1883, 1885, 1886, 1572, 1650, 1621, 1082, 1565, 57,
	1267, 1199, 1216, 1198, 1189, 1175, 1194, 1174, 1173, 2511,
	1950, 793, 187, 1172, 1171, 610, 1170, 1169, 805, 1168,
	1192, 1081, 1977, 1224, 187, 1167, 1166, 1165, 1164, 1163,
	1196, 1162, 1161, 1160, 1159, 1158, 1157, 187, 1150, 1138,
	1137, 985, 977, 187, 950, 187, 2404, 187, 1309, 2290,
	2260, 187, 2177, 1884, 2173, 1844, 1651, 1274, 1146, 2052,
	1135, 1001, 1878, 1879, 1242, 1777, 1220, 2026, 1266, 1570,
	2408, 2407, 2401, 1568, 1090, 1091, 1083, 1084, 1085, 1086,
	1088, 1089, 2180, 1566, 1260, 58, 2042, 1707, 1882, 1883,
	1885, 1886, 187, 187, 1383, 1382, 1222, 1392, 1389, 793,
	1294, 187, 903, 1296, 187, 1187, 1240, 1299, 1776, 1057,
	1188, 1280, 119, 60, 2413, 61, 2221, 1894, 2411, 1051,
	1557, 2214, 1365, 1141, 2003, 805, 1996, 1929, 1237, 147,
	187, 1928, 1817, 1413, 1431, 187, 481, 765, 998, 94,
	187, 187, 1155, 187, 2057, 187, 1238, 187, 1379, 187,
	930, 1272, 1878, 1879, 1995, 1799, 1152, 1312, 1245, 149,
	187, 2432, 1735, 2114, 1849, 1545, 187, 187, 1258, 1178,
	1045, 2659, 1558, 2657, 443, 187, 187, 2189, 2036, 2566,
	1232, 1761, 448, 1233, 1386, 423, 174, 2541, 2626, 1438,
	2364, 1399, 1779, 1895, 1282, 2473, 148, 666, 187, 1285,
	2627, 2063, 805, 746, 141, 2379, 1220, 744, 742, 2471,
	1046, 142, 739, 2470, 748, 2469, 1037, 1425, 1669, 2223,
	432, 2216, 2186, 2185, 1559, 1556, 1862, 2213, 1448, 1861,
	1306, 1669, 118, 1878, 1879, 1860, 1859, 421, 1366, 1820,
	1668, 447, 2670, 1307, 1367, 999, 986, 1232, 1760, 1625,
	1233, 1702, 111, 1205, 1697, 1359, 1370, 1692, 1507, 1396,
	447, 721, 1234, 1771, 1384, 720, 1193, 1414, 1467, 1594,
	1884, 890, 898, 900, 1400, 1404, 1624, 1407, 1387, 433,
	1468, 1408, 1732, 1409, 1380, 1410, 1424, 1411, 1000, 1412,
	1889, 1887, 1888, 1880, 1881, 1882, 1883, 1885, 1886, 2227,
	1423, 2228, 1561, 1522, 1440, 446, 1418, 1420, 584, 2053,
	496, 1522, 2540, 1266, 187, 2453, 187, 1257, 1439, 187,
	426, 1432, 2007, 426, 446, 591, 1433, 1595, 1262, 1234,
	187, 1078, 590, 608, 1894, 2579, 1089, 598, 1457, 805,
	598, 598, 187, 1403, 1449, 591, 187, 1450, 1451, 187,
	1286, 1884, 1054, 187, 975, 1529, 984, 187, 1031, 2107,
	979, 1527, 1561, 805, 2618, 187, 1353, 793, 2550, 1542,
	1540, 2033, 2204, 2002, 171, 187, 805, 2064, 610, 1993,
	187, 1630, 1555, 610, 1243, 1176, 1530, 621, 187, 607,
	1533, 1604, 1318, 2551, 2645, 1652, 187, 1032, 2522, 1642,
	1688, 1677, 2217, 175, 2034, 1653, 1545, 187, 414, 187,
	1895, 187, 1699, 1388, 187, 1894, 187, 1232, 187, 187,
	1233, 187, 793, 793, 1587, 1886, 793, 1207, 1726, 1691,
	187, 1006, 1247, 575, 2626, 1670, 1694, 1561, 1303, 1681,
	1683, 1056, 1704, 1656, 609, 1737, 1756, 1737, 1628, 1627,
	2033, 618, 1422, 1703, 435, 434, 1637, 445, 1393, 1390,
	175, 1643, 1647, 1648, 1686, 2062, 610, 176, 1353, 1353,
	1291, 1050, 1693, 1368, 1224, 2211, 445, 2069, 1680, 1673,
	1988, 1127, 1128, 1129, 1130, 1131, 1211, 448, 1666, 2638,
	1242, 1895, 1140, 2423, 1318, 1318, 1752, 444, 1235, 1234,
	1809, 1810, 1148, 1010, 2382, 2476, 448, 1214, 1887, 1888,
	1880, 1881, 1882, 1883, 1885, 1886, 444, 576, 1763, 805,
	2345, 740, 111, 1209, 176, 740, 741, 187, 111, 750,
	740, 1741, 749, 1036, 1212, 1132, 422, 1758, 1750, 422,
	1751, 2071, 2454, 187, 187, 187, 1753, 187, 954, 1759,
	2205, 1762, 1210, 606, 995, 1749, 1772, 177, 934, 2346,
	934, 427, 1865, 1242, 427, 1235, 423, 1946, 1055, 423,
	1774, 1646, 1822, 2598, 1248, 415, 424, 187, 488, 424,
	1521, 1662, 609, 1352, 1679, 1790, 1183, 1518, 1186, 1253,
	1888, 1880, 1881, 1882, 1883, 1885, 1886, 2067, 1180, 1179,
	2277, 493, 2617, 1516, 2646, 1252, 506, 489, 1780, 2597,
	585, 1077, 495, 1018, 177, 1213, 575, 1202, 1202, 172,
	2625, 441, 1796, 1528, 1402, 996, 485, 1249, 577, 997,
	1141, 2068, 2623, 111, 618, 2530, 983, 1504, 1547, 490,
	1830, 436, 2636, 1782, 1067, 1250, 663, 416, 1794, 174,
	1230, 1579, 1579, 1592, 1798, 1784, 1828, 1612, 2390, 173,
	492, 1616, 1617, 1619, 1823, 1803, 2599, 1802, 2104, 1729,
	2341, 1805, 2342, 1695, 1066, 1678, 172, 1785, 488, 980,
	1292, 1595, 1595, 972, 1512, 1352, 1352, 1631, 1945, 1783,
	2531, 2271, 1513, 2070, 1514, 2006, 1851, 2306, 1519, 2637,
	576, 493, 2464, 2344, 2463, 2446, 174, 489, 2616, 578,
	2363, 2514, 2347, 2188, 1066, 2345, 173, 2362, 2338, 1973,
	2105, 2639, 2360, 1969, 1730, 2600, 1062, 1281, 1755, 2336,
	1821, 1273, 1269, 2103, 2340, 1235, 2559, 1825, 907, 490,
	2143, 1011, 1065, 579, 1445, 1417, 906, 1826, 1502, 1505,
	1378, 1831, 1066, 2651, 2346, 187, 805, 1595, 1595, 1595,
	492, 187, 187, 1934, 1848, 187, 610, 1958, 1940, 1067,
	187, 1044, 1374, 187, 2270, 2662, 2392, 2339, 491, 1211,
	1012, 187, 1065, 1009, 2241, 1501, 1947, 187, 187, 187,
	2447, 1979, 1978, 187, 2343, 1815, 187, 1641, 1561, 1376,
	1214, 1640, 187, 187, 187, 187, 187, 995, 2307, 1067,
	1515, 577, 1377, 187, 607, 793, 1644, 1517, 187, 1954,
	1065, 1446, 1939, 805, 1938, 180, 1019, 1212, 2361, 1953,
	1942, 1943, 187, 2359, 1948, 494, 1912, 1913, 1914, 1959,
	610, 1963, 187, 504, 187, 2144, 187, 793, 793, 1989,
	187, 2145, 437, 2272, 187, 916, 621, 621, 1949, 187,
	1998, 187, 1935, 1827, 1371, 2341, 2650, 2342, 187, 990,
	1829, 2230, 2013, 498, 2015, 1970, 2383, 2444, 491, 2005,
	2318, 187, 793, 477, 34, 1503, 2016, 1965, 2165, 2001,
	2020, 1564, 578, 1910, 438, 2426, 187, 2305, 2344, 2226,
	1909, 927, 1987, 925, 2081, 1040, 2445, 2347, 1213, 476,
	33, 2008, 1872, 1832, 1775, 2044, 2045, 1709, 2046, 2047,
	3, 2038, 1442, 895, 1447, 439, 579, 440, 1701, 1690,
	1454, 896, 1049, 1048, 978, 494, 187, 1041, 1062, 1800,
	1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478,
	1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488,
	1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498,
	1499, 1500, 2035, 1506, 2029, 1508, 1509, 1510, 1511, 610,
	1035, 2043, 1595, 1595, 1415, 1029, 187, 2084, 1027, 2343,
	2017, 2048, 1534, 2061, 636, 1025, 2059, 2060, 1406, 1140,
	1023, 475, 30, 2099, 2100, 2101, 2058, 892, 1042, 2065,
	503, 1207, 1156, 1836, 1563, 474, 70, 2593, 1574, 1575,
	1839, 2072, 1591, 2074, 1603, 1605, 1610, 1613, 1614, 1615,
	995, 473, 69, 1021, 34, 995, 1039, 1855, 1856, 417,
	497, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
	1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
	33, 1595, 2088, 1353, 1043, 926, 2090, 924, 187, 2093,
	1211, 776, 470, 22, 187, 2106, 2108, 2109, 738, 2117,
	2115, 1700, 2120, 187, 187, 1015, 1689, 1904, 2122, 1318,
	2556, 1214, 1256, 2334, 1612, 1612, 1612, 2209, 2149, 1917,
	2207, 996, 2094, 2187, 1353, 997, 996, 1209, 1034, 2022,
	997, 471, 23, 469, 28, 2150, 1028, 1733, 1212, 1026,
	2176, 1994, 468, 20, 1727, 2199, 1024, 2198, 1725, 2148,
	1318, 1022, 1302, 187, 1300, 187, 1210, 2172, 2181, 2163,
	2225, 2166, 1298, 187, 771, 2183, 793, 2169, 2208, 111,
	2210, 2168, 30, 2018, 2019, 1295, 1293, 1353, 466, 19,
	2236, 187, 187, 1254, 1020, 2233, 70, 780, 784, 2218,
	2251, 802, 2184, 923, 2200, 1317, 2224, 2191, 187, 1246,
	2243, 484, 69, 1318, 1244, 467, 18, 187, 2049, 805,
	187, 187, 187, 2219, 2212, 1236, 2242, 805, 2024, 1213,
	2219, 485, 743, 745, 2487, 1069, 1813, 2627, 2245, 458,
	15, 2403, 2246, 2231, 2402, 1397, 1014, 2237, 459, 16,
	2257, 2244, 1353, 22, 465, 52, 762, 2279, 457, 51,
	2253, 1938, 2489, 2247, 187, 2252, 2284, 1459, 1466, 1355,
	464, 12, 2258, 1354, 463, 45, 763, 1685, 1318, 456,
	46, 1669, 1669, 488, 2249, 2273, 462, 7, 1353, 1353,
	1684, 1682, 23, 2280, 28, 461, 6, 1353, 1353, 1999,
	2276, 1990, 1814, 20, 460, 36, 493, 1317, 1317, 1705,
	1352, 1696, 489, 1070, 1318, 1318, 455, 35, 187, 1801,
	2524, 187, 2353, 1318, 1318, 1429, 1430, 1013, 483, 2502,
	1353, 805, 187, 187, 922, 2475, 187, 187, 187, 19,
	2319, 2304, 1073, 1698, 490, 1687, 2555, 2388, 1740, 1728,
	1724, 1352, 1629, 187, 764, 1369, 1318, 1310, 187, 2634,
	187, 2649, 187, 187, 187, 492, 18, 187, 793, 1878,
	1879, 1355, 1355, 2354, 805, 1354, 1354, 793, 2328, 2199,
	2438, 2198, 2324, 2322, 2321, 187, 187, 2320, 1818, 1819,
	15, 505, 2325, 793, 1824, 2329, 2323, 2326, 2259, 16,
	2378, 2162, 2357, 2292, 1352, 52, 1079, 1080, 2110, 51,
	2199, 1787, 2198, 1837, 2055, 2358, 2199, 2370, 2198, 2102,
	2333, 12, 1079, 1080, 2375, 45, 1843, 2394, 2200, 1955,
	46, 1924, 1850, 2384, 2157, 1854, 1788, 7, 1626, 2389,
	2377, 2219, 2399, 2393, 2387, 1623, 6, 2386, 2219, 1079,
	1080, 2395, 1868, 1622, 1081, 36, 1787, 1786, 1553, 2200,
	784, 2400, 2416, 1143, 1153, 2200, 1151, 35, 1047, 1352,
	1038, 802, 2421, 1082, 1033, 1030, 1016, 982, 1372, 583,
	2414, 2415, 2452, 491, 486, 187, 1140, 187, 1405, 805,
	187, 1017, 2428, 1610, 1610, 1610, 1595, 1081, 187, 1951,
	1649, 1353, 2549, 2298, 805, 1352, 1352, 1864, 2507, 2215,
	2422, 1562, 1154, 49, 1352, 1352, 2196, 640, 2222, 2335,
	1202, 2190, 1719, 1718, 808, 2435, 1941, 1318, 2199, 1381,
	2198, 2437, 662, 2456, 1578, 1460, 2458, 1595, 737, 664,
	494, 187, 1315, 665, 793, 1316, 1266, 1352, 187, 2455,
	1184, 652, 1313, 951, 1744, 2442, 187, 187, 793, 793,
	2467, 2468, 187, 2199, 187, 2198, 1385, 2440, 1526, 1543,
	2457, 1847, 1147, 632, 644, 643, 1541, 2200, 2485, 976,
	2481, 631, 2474, 187, 1956, 2032, 2478, 2396, 187, 2494,
	2490, 2493, 646, 2486, 2484, 187, 1444, 2497, 1804, 1441,
	2028, 2501, 2206, 425, 1875, 949, 2219, 1601, 784, 2518,
	2488, 2504, 2200, 1593, 1589, 1052, 1133, 1595, 1745, 1003,
	187, 187, 2030, 2039, 2498, 2513, 2499, 187, 2512, 1769,
	1197, 184, 1452, 761, 2510, 793, 2520, 418, 2535, 2521,
	187, 428, 793, 793, 2533, 760, 2660, 449, 1375, 2536,
	1781, 2528, 499, 184, 1314, 1126, 507, 1125, 747, 512,
	2516, 994, 2539, 621, 621, 2544, 2545, 531, 187, 2538,
	187, 993, 1972, 187, 2373, 805, 621, 2644, 2523, 2203,
	2565, 146, 143, 145, 144, 2004, 73, 32, 31, 93,
	92, 2574, 188, 2073, 2576, 91, 90, 89, 1454, 88,
	87, 2575, 2562, 2580, 2077, 187, 86, 2078, 85, 84,
	83, 2578, 82, 81, 80, 2199, 79, 2198, 1352, 2083,
	2590, 78, 187, 187, 187, 77, 2592, 1353, 2091, 2591,
	187, 76, 2561, 2610, 754, 754, 2095, 2603, 2577, 1941,
	75, 2567, 418, 527, 187, 524, 72, 2613, 2614, 2612,
	2615, 71, 29, 1318, 25, 97, 1314, 1314, 2622, 2119,
	24, 2624, 68, 2121, 2200, 418, 418, 67, 798, 418,
	27, 2628, 17, 2633, 184, 894, 11, 21, 2632, 115,
	114, 113, 112, 1353, 2607, 2608, 2609, 14, 2641, 2640,
	2647, 13, 110, 109, 2653, 2655, 2151, 2152, 2648, 771,
	1227, 108, 107, 106, 10, 2158, 2159, 2160, 9, 1318,
	96, 2268, 42, 43, 8, 2653, 2664, 40, 2671, 2665,
	1834, 1835, 39, 95, 137, 2653, 2677, 136, 2678, 133,
	2680, 135, 2679, 2171, 132, 2655, 2686, 2434, 2684, 2655,
	2688, 2685, 134, 104, 139, 138, 1353, 130, 128, 129,
	131, 127, 126, 140, 103, 616, 102, 575, 101, 1079,
	1080, 100, 1974, 2192, 2495, 2496, 99, 794, 5, 2,
	806, 1, 1318, 0, 2460, 618, 0, 0, 0, 0,
	0, 0, 0, 1082, 0, 0, 0, 0, 0, 0,
	0, 0, 2472, 0, 0, 0, 1901, 1902, 1903, 0,
	0, 0, 1317, 1974, 0, 0, 0, 1081, 717, 617,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1202, 0, 0, 0, 0, 0, 0, 0, 1265, 2254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 576, 0, 1317, 1352, 0, 0, 784, 0, 1284,
	0, 1284, 0, 0, 0, 0, 2051, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1355, 0, 2283, 0,
	1354, 0, 2286, 2287, 0, 0, 2289, 1087, 0, 0,
	0, 0, 0, 2291, 0, 2293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1317, 0, 0, 0,
	1352, 2300, 0, 0, 0, 0, 0, 1355, 0, 0,
	0, 1354, 0, 0, 0, 531, 0, 531, 0, 917,
	2552, 0, 920, 0, 0, 0, 0, 0, 418, 0,
	0, 0, 0, 0, 2309, 0, 0, 531, 531, 418,
	942, 1102, 0, 0, 0, 2568, 0, 2570, 0, 0,
	0, 0, 577, 0, 0, 0, 0, 1459, 2118, 0,
	1355, 1317, 0, 1352, 1354, 0, 1459, 2123, 0, 0,
	0, 0, 0, 0, 531, 0, 0, 0, 0, 0,
	1428, 0, 0, 795, 2355, 0, 807, 0, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 1317, 1317, 2153,
	0, 0, 0, 0, 981, 0, 1317, 1317, 0, 0,
	1215, 0, 0, 0, 531, 0, 794, 1103, 0, 0,
	0, 2079, 2080, 0, 0, 1355, 0, 479, 0, 1354,
	0, 615, 0, 578, 0, 0, 0, 0, 38, 1317,
	0, 794, 0, 0, 0, 0, 794, 0, 0, 0,
	0, 41, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1355, 1355, 0, 0, 1354, 1354, 579, 2417, 2418,
	1355, 1355, 0, 0, 1354, 1354, 418, 478, 0, 0,
	2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133,
	2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2430,
	2146, 0, 0, 1355, 0, 2433, 480, 1354, 0, 0,
	0, 0, 0, 54, 0, 482, 55, 1083, 1084, 1085,
	1086, 1088, 1089, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 771, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 794, 0, 57, 0, 2465,
	771, 0, 0, 1664, 0, 0, 0, 0, 0, 0,
	0, 784, 0, 0, 0, 0, 0, 0, 0, 784,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 802,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1317, 1746, 0, 641, 65, 0, 0, 0, 0, 0,
	0, 0, 802, 802, 0, 0, 0, 0, 0, 0,
	0, 0, 795, 58, 0, 2515, 0, 0, 0, 0,
	0, 0, 0, 512, 0, 754, 0, 0, 0, 0,
	0, 1314, 0, 0, 0, 0, 0, 795, 0, 0,
	119, 60, 795, 61, 0, 0, 0, 418, 418, 65,
	0, 0, 0, 0, 1355, 0, 0, 147, 1354, 0,
	0, 0, 0, 0, 481, 0, 0, 94, 0, 0,
	0, 0, 1314, 0, 0, 0, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 0, 0, 599, 0, 0, 0, 38,
	0, 0, 611, 0, 0, 0, 0, 2589, 2589, 0,
	0, 0, 41, 0, 148, 1314, 0, 1795, 802, 1797,
	0, 784, 141, 2604, 0, 0, 0, 0, 0, 142,
	0, 795, 0, 772, 65, 0, 0, 0, 478, 0,
	0, 0, 0, 2589, 0, 0, 0, 0, 0, 0,
	118, 1816, 0, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 418, 480, 0, 0,
	0, 0, 0, 0, 54, 0, 482, 55, 0, 1279,
	1314, 0, 0, 0, 0, 418, 0, 418, 0, 418,
	0, 2589, 0, 1287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1317, 0, 57, 0,
	0, 0, 0, 0, 0, 0, 1314, 1314, 2668, 0,
	0, 0, 2466, 0, 0, 1314, 1314, 0, 0, 2668,
	0, 0, 2668, 2668, 531, 184, 0, 0, 0, 0,
	0, 0, 0, 184, 0, 0, 531, 0, 0, 0,
	0, 0, 0, 794, 0, 0, 0, 0, 1314, 0,
	806, 0, 1317, 0, 0, 0, 0, 0, 0, 0,
	1355, 0, 531, 0, 1354, 2425, 0, 531, 0, 0,
	0, 0, 184, 531, 0, 531, 0, 531, 0, 531,
	0, 531, 0, 0, 58, 0, 0, 0, 0, 0,
	0, 0, 1416, 0, 0, 0, 0, 0, 531, 531,
	0, 0, 0, 0, 0, 0, 2449, 1427, 418, 0,
	0, 119, 60, 0, 61, 1317, 1355, 0, 0, 771,
	1354, 0, 0, 0, 0, 771, 771, 0, 147, 771,
	531, 794, 479, 0, 0, 481, 0, 0, 94, 0,
	0, 0, 0, 38, 0, 0, 0, 0, 0, 0,
	0, 1966, 0, 0, 0, 0, 41, 806, 149, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1992, 0, 1355,
	0, 0, 478, 1354, 0, 0, 2503, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 2009, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 0, 0,
	142, 480, 0, 0, 2021, 0, 0, 0, 54, 1314,
	482, 55, 0, 1265, 0, 0, 0, 611, 0, 0,
	0, 453, 1265, 0, 806, 0, 1878, 1879, 0, 1896,
	1897, 1898, 0, 0, 0, 0, 512, 0, 754, 0,
	0, 894, 57, 2282, 0, 0, 0, 0, 0, 795,
	0, 0, 418, 0, 0, 0, 807, 0, 0, 0,
	0, 0, 0, 0, 1661, 0, 0, 0, 418, 1878,
	1879, 418, 1896, 1897, 1898, 1674, 0, 0, 0, 418,
	1893, 0, 0, 0, 0, 0, 2281, 418, 0, 0,
	2075, 0, 0, 0, 0, 1878, 1879, 418, 1896, 1897,
	1898, 0, 1708, 0, 0, 0, 0, 0, 0, 0,
	1715, 0, 2086, 0, 0, 0, 0, 0, 894, 0,
	0, 0, 0, 1893, 0, 0, 0, 0, 58, 418,
	0, 1748, 0, 531, 0, 0, 531, 795, 531, 0,
	418, 418, 0, 1754, 1884, 0, 0, 0, 0, 1893,
	0, 0, 1674, 0, 0, 119, 60, 0, 61, 0,
	0, 806, 0, 807, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 0, 0, 0, 0, 599, 0, 481,
	0, 0, 94, 1899, 0, 806, 0, 1884, 0, 794,
	0, 0, 0, 0, 0, 0, 0, 1136, 806, 1139,
	0, 0, 149, 0, 0, 0, 1144, 0, 1894, 0,
	0, 0, 0, 1884, 0, 0, 0, 0, 0, 0,
	0, 0, 771, 0, 0, 0, 1899, 0, 0, 0,
	0, 0, 0, 0, 0, 1314, 0, 0, 0, 148,
	807, 0, 0, 0, 794, 794, 0, 141, 794, 1792,
	0, 1894, 1899, 0, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 418, 418, 418, 0, 418,
	0, 0, 1764, 0, 0, 118, 0, 1894, 0, 0,
	0, 0, 0, 38, 1895, 0, 0, 0, 0, 0,
	0, 1314, 0, 0, 0, 0, 41, 0, 0, 418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1746, 771, 0, 0, 0,
	0, 0, 1765, 0, 0, 0, 0, 1895, 0, 0,
	0, 0, 0, 65, 0, 0, 0, 0, 1223, 0,
	0, 806, 0, 0, 0, 2275, 802, 0, 0, 0,
	0, 1766, 0, 1895, 1314, 0, 0, 0, 0, 0,
	482, 0, 1878, 1879, 0, 1896, 1897, 1898, 0, 0,
	0, 0, 0, 0, 1890, 1891, 1892, 807, 0, 2085,
	0, 1889, 1887, 1888, 1880, 1881, 1882, 1883, 1885, 1886,
	0, 0, 57, 0, 0, 0, 0, 0, 0, 0,
	0, 807, 0, 0, 0, 795, 0, 0, 0, 0,
	0, 0, 0, 0, 807, 0, 1893, 1890, 1891, 1892,
	0, 0, 0, 0, 1889, 1887, 1888, 1880, 1881, 1882,
	1883, 1885, 1886, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 771, 1890, 1891, 1892, 0, 0, 0, 0,
	1889, 1887, 1888, 1880, 1881, 1882, 1883, 1885, 1886, 0,
	795, 795, 0, 0, 795, 0, 0, 0, 0, 1878,
	1879, 0, 1896, 1897, 1898, 0, 0, 418, 58, 0,
	1884, 0, 0, 418, 418, 0, 2367, 418, 0, 0,
	0, 2372, 1661, 0, 0, 1661, 0, 0, 0, 0,
	0, 0, 0, 1961, 0, 119, 60, 0, 61, 418,
	1967, 1968, 0, 0, 0, 1674, 0, 0, 1975, 1899,
	0, 0, 147, 1893, 1980, 1981, 1983, 1985, 1986, 481,
	0, 0, 94, 0, 0, 418, 0, 0, 0, 0,
	1997, 0, 0, 0, 1894, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 418, 0, 0, 807, 0, 0,
	0, 0, 0, 0, 1279, 0, 1279, 0, 531, 0,
	0, 0, 418, 0, 0, 0, 2027, 0, 806, 0,
	0, 418, 0, 2037, 0, 0, 0, 1884, 0, 148,
	418, 0, 0, 0, 0, 0, 0, 141, 65, 0,
	0, 0, 0, 1792, 142, 0, 0, 0, 1900, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1792, 0,
	1895, 0, 2450, 0, 0, 118, 1899, 0, 0, 1079,
	1080, 0, 599, 0, 0, 599, 599, 794, 0, 0,
	0, 0, 0, 0, 0, 806, 0, 0, 0, 0,
	0, 1894, 0, 1082, 0, 0, 0, 0, 418, 0,
	0, 0, 0, 0, 0, 2483, 0, 0, 0, 794,
	794, 0, 0, 0, 0, 0, 0, 1081, 0, 0,
	0, 0, 0, 1101, 0, 0, 0, 0, 1524, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 611, 0, 0, 794, 0, 1139, 0, 2112, 0,
	1890, 1891, 1892, 0, 0, 0, 0, 1889, 1887, 1888,
	1880, 1881, 1882, 1883, 1885, 1886, 0, 1895, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1104, 1105,
	1106, 1107, 0, 0, 0, 0, 0, 1087, 0, 0,
	0, 2532, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 772, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1878, 1879, 0, 1896, 1897, 1898, 1223,
	418, 0, 0, 0, 807, 0, 1661, 2564, 0, 0,
	0, 0, 65, 0, 0, 894, 1661, 0, 0, 0,
	0, 1102, 0, 0, 65, 0, 0, 1890, 1891, 1892,
	2195, 0, 0, 0, 1889, 1887, 1888, 1880, 1881, 1882,
	1883, 1885, 1886, 0, 0, 0, 0, 1893, 0, 2220,
	0, 0, 0, 0, 0, 0, 2220, 65, 0, 65,
	0, 0, 0, 795, 1746, 1674, 0, 1279, 0, 0,
	0, 807, 0, 0, 0, 2239, 0, 0, 65, 0,
	0, 0, 1108, 0, 65, 0, 0, 0, 0, 0,
	0, 0, 0, 418, 418, 795, 795, 1103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2265, 1884, 0, 0, 0, 0, 0, 0, 0, 2267,
	0, 0, 2274, 418, 418, 0, 0, 0, 0, 0,
	795, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1899, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2299, 0, 0, 0,
	0, 0, 0, 0, 0, 1894, 0, 0, 794, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
	0, 0, 0, 0, 1092, 1090, 1091, 1083, 1084, 1085,
	1086, 1088, 1089, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	418, 806, 0, 894, 0, 0, 0, 0, 0, 806,
	0, 0, 0, 0, 1661, 894, 0, 0, 2331, 2332,
	1674, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1895, 0, 0, 2195, 894, 0, 0, 0, 0,
	2365, 0, 2366, 0, 418, 2368, 2369, 2220, 0, 418,
	0, 0, 0, 0, 2220, 0, 0, 0, 0, 1524,
	0, 0, 0, 0, 0, 2195, 0, 894, 1715, 0,
	0, 2195, 0, 0, 0, 0, 0, 0, 0, 1139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1079, 1080, 0, 1109, 1110, 1111, 1119,
	1120, 1121, 0, 0, 0, 0, 1097, 0, 0, 0,
	1112, 0, 0, 806, 0, 0, 0, 1082, 0, 0,
	1123, 1890, 1891, 1892, 0, 0, 0, 0, 1889, 1887,
	1888, 1880, 1881, 1882, 1883, 1885, 1886, 0, 0, 0,
	0, 1081, 0, 0, 0, 0, 0, 1101, 0, 0,
	794, 0, 0, 1139, 1098, 0, 806, 0, 0, 794,
	0, 0, 0, 0, 0, 0, 0, 1674, 0, 2441,
	0, 0, 2443, 0, 795, 794, 0, 0, 0, 0,
	418, 0, 0, 2195, 0, 0, 0, 0, 772, 0,
	0, 0, 0, 0, 772, 772, 0, 0, 772, 0,
	0, 0, 1104, 1105, 1106, 1107, 0, 0, 0, 0,
	0, 1087, 2220, 0, 0, 0, 0, 807, 2195, 0,
	0, 0, 0, 418, 0, 807, 0, 0, 0, 0,
	894, 1116, 1124, 0, 0, 0, 0, 0, 2265, 2265,
	0, 65, 0, 0, 894, 0, 894, 0, 0, 0,
	1122, 0, 65, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2509, 0, 0, 1114, 0,
	1661, 806, 0, 0, 0, 1102, 0, 1279, 65, 0,
	0, 0, 65, 0, 0, 0, 806, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 0, 0, 0,
	0, 1113, 2525, 2526, 0, 0, 0, 0, 0, 418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2543, 0, 0, 0, 794, 0, 0, 807,
	0, 0, 0, 0, 0, 0, 1108, 0, 0, 0,
	794, 794, 0, 0, 0, 0, 0, 0, 0, 0,
	2560, 1103, 894, 0, 0, 418, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 795, 0, 1117, 0,
	2195, 0, 807, 0, 1096, 795, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2509, 0, 0,
	0, 795, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 894, 894, 894, 0, 0, 0,
	0, 0, 418, 0, 0, 0, 0, 794, 0, 0,
	0, 0, 0, 0, 794, 794, 2621, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1115, 0,
	0, 1093, 1094, 1100, 1099, 1095, 1118, 0, 1092, 1090,
	1091, 1083, 1084, 1085, 1086, 1088, 1089, 806, 37, 0,
	0, 0, 0, 0, 0, 1920, 0, 0, 0, 38,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 0, 65, 0, 807, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 772, 807, 0, 0, 0, 44, 0, 47, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 48,
	0, 0, 0, 50, 0, 0, 0, 53, 0, 0,
	124, 0, 795, 0, 54, 0, 105, 55, 0, 0,
	0, 0, 0, 0, 0, 0, 795, 795, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 0, 0, 0, 0, 0, 0, 57, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 772, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 795, 0, 0, 0, 0, 0, 0,
	795, 795, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 58, 0, 0, 0, 0, 0,
	0, 59, 0, 807, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	66, 119, 60, 0, 61, 0, 62, 0, 125, 0,
	0, 0, 0, 63, 0, 0, 0, 0, 147, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 94, 0,
	0, 772, 0, 0, 0, 0, 0, 0, 122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 0, 0, 0, 0, 148, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 0, 0,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 65, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 4, 0, 0, 0, 804, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 809, 0, 191, 810,
	811, 812, 813, 353, 814, 815, 816, 817, 192, 193,
	194, 354, 355, 356, 357, 195, 358, 359, 818, 196,
	360, 361, 197, 198, 819, 820, 362, 363, 364, 821,
	199, 365, 822, 796, 823, 200, 201, 202, 0, 204,
	205, 206, 203, 824, 207, 0, 208, 209, 825, 722,
	210, 211, 212, 826, 827, 829, 828, 830, 831, 832,
	213, 214, 419, 215, 366, 216, 367, 368, 833, 217,
	834, 218, 835, 219, 836, 837, 220, 221, 838, 222,
	839, 0, 840, 369, 223, 225, 224, 226, 370, 371,
	841, 723, 842, 0, 0, 0, 0, 227, 228, 372,
	373, 374, 65, 229, 843, 230, 844, 845, 724, 846,
	231, 375, 847, 376, 848, 1524, 232, 233, 234, 235,
	377, 378, 726, 849, 379, 239, 850, 236, 851, 725,
	237, 380, 238, 381, 382, 383, 384, 385, 852, 386,
	853, 727, 240, 241, 242, 728, 387, 388, 243, 244,
	245, 854, 247, 246, 855, 389, 729, 248, 249, 730,
	856, 250, 251, 857, 858, 252, 0, 253, 731, 254,
	255, 257, 390, 256, 732, 258, 259, 261, 260, 859,
	860, 861, 391, 262, 392, 263, 264, 862, 265, 863,
	864, 266, 865, 866, 267, 393, 733, 268, 734, 394,
	269, 270, 271, 272, 273, 274, 867, 275, 395, 276,
	396, 277, 868, 278, 279, 280, 281, 282, 397, 283,
	284, 869, 285, 286, 287, 288, 289, 0, 291, 292,
	290, 293, 294, 295, 296, 870, 297, 735, 298, 299,
	398, 300, 0, 304, 305, 306, 307, 308, 871, 310,
	399, 309, 311, 312, 872, 313, 301, 302, 314, 736,
	315, 400, 401, 316, 873, 0, 323, 317, 318, 303,
	319, 322, 402, 320, 321, 403, 874, 324, 875, 325,
	326, 327, 328, 329, 330, 331, 332, 876, 404, 405,
	406, 877, 878, 333, 334, 407, 408, 879, 335, 336,
	337, 338, 880, 881, 339, 340, 341, 342, 882, 343,
	883, 409, 344, 345, 346, 410, 411, 884, 885, 347,
	886, 887, 888, 889, 348, 349, 350, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 804,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1654,
	0, 0, 0, 0, 0, 189, 190, 809, 1655, 191,
	810, 811, 812, 813, 353, 814, 815, 816, 817, 192,
	193, 194, 354, 355, 356, 357, 195, 358, 359, 818,
	196, 360, 361, 197, 198, 819, 820, 362, 363, 364,
	821, 199, 365, 822, 796, 823, 200, 201, 202, 0,
	204, 205, 206, 203, 824, 207, 0, 208, 209, 825,
	722, 210, 211, 212, 826, 827, 829, 828, 830, 831,
	832, 213, 214, 419, 215, 366, 216, 367, 368, 833,
	217, 834, 218, 835, 219, 836, 837, 220, 221, 838,
	222, 839, 0, 840, 369, 223, 225, 224, 226, 370,
	371, 841, 723, 842, 0, 0, 0, 0, 227, 228,
	372, 373, 374, 0, 229, 843, 230, 844, 845, 724,
	846, 231, 375, 847, 376, 848, 0, 232, 233, 234,
	235, 377, 378, 726, 849, 379, 239, 850, 236, 851,
	725, 237, 380, 238, 381, 382, 383, 384, 385, 852,
	386, 853, 727, 240, 241, 242, 728, 387, 388, 243,
	244, 245, 854, 247, 246, 855, 389, 729, 248, 249,
	730, 856, 250, 251, 857, 858, 252, 0, 253, 731,
	254, 255, 257, 390, 256, 732, 258, 259, 261, 260,
	859, 860, 861, 391, 262, 392, 263, 264, 862, 265,
	863, 864, 266, 865, 866, 267, 393, 733, 268, 734,
	394, 269, 270, 271, 272, 273, 274, 867, 275, 395,
	276, 396, 277, 868, 278, 279, 280, 281, 282, 397,
	283, 284, 869, 285, 286, 287, 288, 289, 0, 291,
	292, 290, 293, 294, 295, 296, 870, 297, 735, 298,
	299, 398, 300, 0, 304, 305, 306, 307, 308, 871,
	310, 399, 309, 311, 312, 872, 313, 301, 302, 314,
	736, 315, 400, 401, 316, 873, 0, 323, 317, 318,
	303, 319, 322, 402, 320, 321, 403, 874, 324, 875,
	325, 326, 327, 328, 329, 330, 331, 332, 876, 404,
	405, 406, 877, 878, 333, 334, 407, 408, 879, 335,
	336, 337, 338, 880, 881, 339, 340, 341, 342, 882,
	343, 883, 409, 344, 345, 346, 410, 411, 884, 885,
	347, 886, 887, 888, 889, 348, 349, 350, 351, 352,
	0, 804, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 189, 190, 809,
	2327, 191, 810, 811, 812, 813, 353, 814, 815, 816,
	817, 192, 193, 194, 354, 355, 356, 357, 195, 358,
	359, 818, 196, 360, 361, 197, 198, 819, 820, 362,
	363, 364, 821, 199, 365, 822, 796, 823, 200, 201,
	202, 0, 204, 205, 206, 203, 824, 207, 0, 208,
	209, 825, 722, 210, 211, 212, 826, 827, 829, 828,
	830, 831, 832, 213, 214, 419, 215, 366, 216, 367,
	368, 833, 217, 834, 218, 835, 219, 836, 837, 220,
	221, 838, 222, 839, 0, 840, 369, 223, 225, 224,
	226, 370, 371, 841, 723, 842, 0, 0, 0, 0,
	227, 228, 372, 373, 374, 0, 229, 843, 230, 844,
	845, 724, 846, 231, 375, 847, 376, 848, 0, 232,
	233, 234, 235, 377, 378, 726, 849, 379, 239, 850,
	236, 851, 725, 237, 380, 238, 381, 382, 383, 384,
	385, 852, 386, 853, 727, 240, 241, 242, 728, 387,
	388, 243, 244, 245, 854, 247, 246, 855, 389, 729,
	248, 249, 730, 856, 250, 251, 857, 858, 252, 0,
	253, 731, 254, 255, 257, 390, 256, 732, 258, 259,
	261, 260, 859, 860, 861, 391, 262, 392, 263, 264,
	862, 265, 863, 864, 266, 865, 866, 267, 393, 733,
	268, 734, 394, 269, 270, 271, 272, 273, 274, 867,
	275, 395, 276, 396, 277, 868, 278, 279, 280, 281,
	282, 397, 283, 284, 869, 285, 286, 287, 288, 289,
	0, 291, 292, 290, 293, 294, 295, 296, 870, 297,
	735, 298, 299, 398, 300, 0, 304, 305, 306, 307,
	308, 871, 310, 399, 309, 311, 312, 872, 313, 301,
	302, 314, 736, 315, 400, 401, 316, 873, 0, 323,
	317, 318, 303, 319, 322, 402, 320, 321, 403, 874,
	324, 875, 325, 326, 327, 328, 329, 330, 331, 332,
	876, 404, 405, 406, 877, 878, 333, 334, 407, 408,
	879, 335, 336, 337, 338, 880, 881, 339, 340, 341,
	342, 882, 343, 883, 409, 344, 345, 346, 410, 411,
	884, 885, 347, 886, 887, 888, 889, 348, 349, 350,
	351, 352, 804, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1261, 189, 190,
	809, 0, 191, 810, 811, 812, 813, 353, 814, 815,
	816, 817, 192, 193, 194, 354, 355, 356, 357, 195,
	358, 359, 818, 196, 360, 361, 197, 198, 819, 820,
	362, 363, 364, 821, 199, 365, 822, 796, 823, 200,
	201, 202, 0, 204, 205, 206, 203, 824, 207, 0,
	208, 209, 825, 722, 210, 211, 212, 826, 827, 829,
	828, 830, 831, 832, 213, 214, 419, 215, 366, 216,
	367, 368, 833, 217, 834, 218, 835, 219, 836, 837,
	220, 221, 838, 222, 839, 0, 840, 369, 223, 225,
	224, 226, 370, 371, 841, 723, 842, 0, 0, 0,
	0, 227, 228, 372, 373, 374, 0, 229, 843, 230,
	844, 845, 724, 846, 231, 375, 847, 376, 848, 0,
	232, 233, 234, 235, 377, 378, 726, 849, 379, 239,
	850, 236, 851, 725, 237, 380, 238, 381, 382, 383,
	384, 385, 852, 386, 853, 727, 240, 241, 242, 728,
	387, 388, 243, 244, 245, 854, 247, 246, 855, 389,
	729, 248, 249, 730, 856, 250, 251, 857, 858, 252,
	0, 253, 731, 254, 255, 257, 390, 256, 732, 258,
	259, 261, 260, 859, 860, 861, 391, 262, 392, 263,
	264, 862, 265, 863, 864, 266, 865, 866, 267, 393,
	733, 268, 734, 394, 269, 270, 271, 272, 273, 274,
	867, 275, 395, 276, 396, 277, 868, 278, 279, 280,
	281, 282, 397, 283, 284, 869, 285, 286, 287, 288,
	289, 0, 291, 292, 290, 293, 294, 295, 296, 870,
	297, 735, 298, 299, 398, 300, 0, 304, 305, 306,
	307, 308, 871, 310, 399, 309, 311, 312, 872, 313,
	301, 302, 314, 736, 315, 400, 401, 316, 873, 0,
	323, 317, 318, 303, 319, 322, 402, 320, 321, 403,
	874, 324, 875, 325, 326, 327, 328, 329, 330, 331,
	332, 876, 404, 405, 406, 877, 878, 333, 334, 407,
	408, 879, 335, 336, 337, 338, 880, 881, 339, 340,
	341, 342, 882, 343, 883, 409, 344, 345, 346, 410,
	411, 884, 885, 347, 886, 887, 888, 889, 348, 349,
	350, 351, 352, 1552, 0, 660, 649, 650, 647, 648,
	639, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 189, 190, 1549, 0, 191, 0, 0, 0, 0,
	677, 642, 0, 0, 0, 192, 193, 194, 354, 692,
	356, 693, 195, 694, 695, 0, 196, 360, 361, 197,
	198, 645, 676, 696, 697, 364, 0, 199, 688, 0,
	668, 0, 200, 201, 202, 0, 204, 205, 206, 203,
	0, 207, 0, 208, 209, 0, 722, 210, 211, 212,
	0, 669, 670, 672, 0, 671, 673, 213, 214, 419,
	215, 698, 216, 699, 700, 630, 217, 0, 218, 0,
	219, 1550, 0, 691, 221, 0, 222, 0, 0, 0,
	633, 223, 225, 224, 226, 678, 679, 656, 723, 0,
	0, 0, 0, 0, 227, 228, 701, 702, 703, 0,
	229, 0, 230, 0, 0, 724, 0, 231, 689, 0,
	376, 0, 0, 232, 233, 234, 235, 685, 687, 726,
	0, 379, 239, 0, 236, 0, 725, 237, 704, 238,
	705, 706, 707, 708, 709, 0, 667, 0, 727, 240,
	241, 242, 728, 387, 388, 243, 244, 245, 0, 247,
	246, 0, 690, 729, 248, 249, 730, 0, 250, 251,
	0, 0, 252, 0, 253, 731, 254, 255, 257, 390,
	256, 732, 258, 259, 261, 260, 627, 0, 657, 686,
	262, 710, 263, 264, 0, 265, 0, 0, 266, 0,
	0, 267, 393, 733, 268, 734, 680, 269, 270, 271,
	272, 273, 274, 0, 275, 681, 276, 396, 277, 0,
	278, 279, 280, 281, 282, 711, 283, 284, 0, 285,
	286, 287, 288, 289, 0, 291, 292, 290, 293, 294,
	295, 296, 0, 297, 735, 298, 299, 634, 300, 0,
	304, 305, 306, 307, 308, 0, 310, 399, 309, 311,
	312, 674, 313, 301, 302, 314, 736, 315, 712, 401,
	316, 0, 0, 323, 317, 318, 303, 319, 322, 713,
	320, 321, 682, 0, 324, 0, 325, 326, 327, 328,
	329, 330, 331, 332, 0, 404, 714, 715, 0, 0,
	333, 334, 683, 684, 655, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 675, 343, 0, 409, 344,
	345, 346, 410, 716, 1548, 0, 347, 0, 0, 0,
	0, 348, 349, 350, 351, 352, 628, 0, 0, 0,
	0, 0, 0, 0, 626, 0, 0, 0, 0, 624,
	625, 1551, 0, 0, 0, 0, 0, 0, 635, 1546,
	0, 0, 0, 612, 638, 660, 649, 650, 647, 648,
	639, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	677, 642, 0, 0, 0, 192, 193, 194, 354, 692,
	356, 693, 195, 694, 695, 0, 196, 360, 361, 197,
	198, 645, 676, 696, 697, 364, 0, 199, 688, 0,
	668, 0, 200, 201, 202, 0, 204, 205, 206, 203,
	0, 207, 0, 208, 209, 0, 722, 210, 211, 212,
	0, 669, 670, 672, 0, 671, 673, 213, 214, 419,
	215, 698, 216, 699, 700, 630, 217, 0, 218, 0,
	219, 0, 0, 691, 221, 0, 222, 0, 0, 0,
	633, 223, 225, 224, 226, 678, 679, 656, 723, 0,
	0, 0, 0, 0, 227, 228, 701, 702, 703, 0,
	229, 0, 230, 0, 0, 724, 0, 231, 689, 0,
	376, 0, 0, 232, 233, 234, 235, 685, 687, 726,
	0, 379, 239, 0, 236, 0, 725, 237, 704, 238,
	705, 706, 707, 708, 709, 0, 667, 0, 727, 240,
	241, 242, 728, 387, 388, 243, 244, 245, 0, 247,
	246, 0, 690, 729, 248, 249, 730, 0, 250, 251,
	0, 0, 252, 0, 253, 731, 254, 255, 257, 390,
	256, 732, 258, 259, 261, 260, 627, 0, 657, 686,
	262, 710, 263, 264, 0, 265, 0, 0, 266, 0,
	0, 267, 393, 733, 268, 734, 680, 269, 270, 271,
	272, 273, 274, 0, 275, 681, 276, 396, 277, 0,
	278, 279, 280, 281, 282, 711, 283, 284, 0, 285,
	286, 287, 288, 289, 0, 291, 292, 290, 293, 294,
	295, 296, 0, 297, 735, 298, 299, 634, 300, 0,
	304, 305, 306, 307, 308, 147, 310, 399, 309, 311,
	312, 674, 313, 301, 302, 314, 736, 315, 712, 401,
	316, 0, 0, 323, 317, 318, 303, 319, 322, 713,
	320, 321, 682, 0, 324, 149, 325, 326, 327, 328,
	329, 330, 331, 332, 0, 404, 714, 715, 0, 0,
	333, 334, 683, 684, 655, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 675, 343, 0, 409, 344,
	345, 346, 955, 716, 0, 0, 347, 0, 0, 0,
	141, 348, 349, 350, 351, 352, 628, 142, 0, 0,
	0, 0, 0, 0, 626, 0, 0, 0, 0, 624,
	625, 660, 649, 650, 647, 648, 639, 0, 1142, 0,
	0, 0, 0, 0, 638, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 677, 642, 0, 0,
	0, 192, 193, 194, 354, 692, 356, 693, 195, 694,
	695, 0, 196, 360, 361, 197, 198, 645, 676, 696,
	697, 364, 0, 199, 688, 0, 668, 0, 200, 201,
	202, 0, 204, 205, 206, 203, 0, 207, 0, 208,
	209, 0, 722, 210, 211, 212, 0, 669, 670, 672,
	0, 671, 673, 213, 214, 419, 215, 698, 216, 699,
	700, 630, 217, 0, 218, 0, 219, 0, 0, 691,
	221, 0, 222, 0, 0, 0, 633, 223, 225, 224,
	226, 678, 679, 656, 723, 0, 0, 0, 0, 0,
	227, 228, 701, 702, 703, 0, 229, 0, 230, 0,
	0, 724, 0, 231, 689, 0, 376, 0, 0, 232,
	233, 234, 235, 685, 687, 726, 0, 379, 239, 0,
	236, 0, 725, 237, 704, 238, 705, 706, 707, 708,
	709, 0, 667, 0, 727, 240, 241, 242, 728, 387,
	388, 243, 244, 245, 0, 247, 246, 0, 690, 729,
	248, 249, 730, 0, 250, 251, 0, 0, 252, 0,
	253, 731, 254, 255, 257, 390, 256, 732, 258, 259,
	261, 260, 627, 0, 657, 686, 262, 710, 263, 264,
	0, 265, 0, 0, 266, 0, 0, 267, 393, 733,
	268, 734, 680, 269, 270, 271, 272, 273, 274, 0,
	275, 681, 276, 396, 277, 0, 278, 279, 280, 281,
	282, 711, 283, 284, 0, 285, 286, 287, 288, 289,
	0, 291, 292, 290, 293, 294, 295, 296, 0, 297,
	735, 298, 299, 634, 300, 0, 304, 305, 306, 307,
	308, 147, 310, 399, 309, 311, 312, 674, 313, 301,
	302, 314, 736, 315, 712, 401, 316, 0, 0, 323,
	317, 318, 303, 319, 322, 713, 320, 321, 682, 0,
	324, 149, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 404, 714, 715, 0, 0, 333, 334, 683, 684,
	655, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 675, 343, 0, 409, 344, 345, 346, 955, 716,
	0, 0, 347, 0, 0, 0, 141, 348, 349, 350,
	351, 352, 628, 142, 0, 0, 0, 0, 0, 0,
	626, 0, 0, 0, 0, 624, 625, 660, 649, 650,
	647, 648, 639, 0, 1142, 0, 0, 0, 0, 0,
	638, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 677, 642, 0, 0, 0, 192, 193, 194,
	354, 692, 356, 693, 195, 694, 695, 1606, 196, 360,
	361, 197, 198, 645, 676, 696, 697, 364, 0, 199,
	688, 0, 668, 0, 200, 201, 202, 0, 204, 205,
	206, 203, 0, 207, 0, 208, 209, 0, 722, 210,
	211, 212, 0, 669, 670, 672, 0, 671, 673, 213,
	214, 419, 215, 698, 216, 699, 700, 630, 217, 0,
	218, 0, 219, 0, 0, 691, 221, 0, 222, 0,
	0, 0, 633, 223, 225, 224, 226, 678, 679, 656,
	723, 0, 0, 0, 0, 0, 227, 228, 701, 702,
	703, 0, 229, 0, 230, 0, 1611, 724, 0, 231,
	689, 0, 376, 0, 0, 232, 233, 234, 235, 685,
	687, 726, 0, 379, 239, 0, 236, 0, 725, 237,
	704, 238, 705, 706, 707, 708, 709, 0, 667, 0,
	727, 240, 241, 242, 728, 387, 388, 243, 244, 245,
	0, 247, 246, 1607, 690, 729, 248, 249, 730, 0,
	250, 251, 0, 0, 252, 0, 253, 731, 254, 255,
	257, 390, 256, 732, 258, 259, 261, 260, 627, 0,
	657, 686, 262, 710, 263, 264, 0, 265, 0, 0,
	266, 0, 0, 267, 393, 733, 268, 734, 680, 269,
	270, 271, 272, 273, 274, 0, 275, 681, 276, 396,
	277, 0, 278, 279, 280, 281, 282, 711, 283, 284,
	0, 285, 286, 287, 288, 289, 0, 291, 292, 290,
	293, 294, 295, 296, 0, 297, 735, 298, 299, 634,
	300, 0, 304, 305, 306, 307, 308, 0, 310, 399,
	309, 311, 312, 674, 313, 301, 302, 314, 736, 315,
	712, 401, 316, 0, 0, 323, 317, 318, 303, 319,
	322, 713, 320, 321, 682, 0, 324, 0, 325, 326,
	327, 328, 329, 330, 331, 332, 0, 404, 714, 715,
	0, 1608, 333, 334, 683, 684, 655, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 675, 343, 0,
	409, 344, 345, 346, 410, 716, 0, 0, 347, 0,
	0, 0, 0, 348, 349, 350, 351, 352, 628, 660,
	649, 650, 647, 648, 639, 0, 626, 0, 0, 0,
	0, 624, 625, 0, 0, 189, 190, 0, 0, 191,
	635, 0, 0, 0, 677, 642, 638, 0, 0, 192,
	193, 194, 354, 692, 356, 693, 195, 694, 695, 0,
	196, 360, 361, 197, 198, 645, 676, 696, 697, 364,
	0, 199, 688, 0, 668, 0, 200, 201, 202, 0,
	204, 205, 206, 203, 0, 207, 0, 208, 209, 0,
	722, 210, 211, 212, 0, 669, 670, 672, 0, 671,
	673, 213, 214, 419, 215, 698, 216, 699, 700, 630,
	217, 0, 218, 0, 219, 0, 0, 691, 221, 0,
	222, 0, 0, 0, 633, 223, 225, 224, 226, 678,
	679, 656, 723, 0, 0, 0, 0, 0, 227, 228,
	701, 702, 703, 0, 229, 0, 230, 0, 0, 724,
	0, 231, 689, 0, 376, 0, 0, 232, 233, 234,
	235, 685, 687, 726, 0, 379, 239, 0, 236, 0,
	725, 237, 704, 238, 705, 706, 707, 708, 709, 0,
	667, 0, 727, 240, 241, 242, 728, 387, 388, 243,
	244, 245, 0, 247, 246, 0, 690, 729, 248, 249,
	730, 0, 250, 251, 0, 0, 252, 0, 253, 731,
	254, 255, 257, 390, 256, 732, 258, 259, 261, 260,
	627, 2248, 657, 686, 262, 710, 263, 264, 0, 265,
	0, 0, 266, 0, 0, 267, 393, 733, 268, 734,
	680, 269, 270, 271, 272, 273, 274, 0, 275, 681,
	276, 396, 277, 0, 278, 279, 280, 281, 282, 711,
	283, 284, 0, 285, 286, 287, 288, 289, 0, 291,
	292, 290, 293, 294, 295, 296, 0, 297, 735, 298,
	299, 634, 300, 0, 304, 305, 306, 307, 308, 0,
	310, 399, 309, 311, 312, 674, 313, 301, 302, 314,
	736, 315, 712, 401, 316, 0, 0, 323, 317, 318,
	303, 319, 322, 713, 320, 321, 682, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	714, 715, 0, 0, 333, 334, 683, 684, 655, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 675,
	343, 0, 409, 344, 345, 346, 410, 716, 0, 0,
	347, 0, 0, 0, 0, 348, 349, 350, 351, 352,
	628, 660, 649, 650, 647, 648, 639, 0, 626, 0,
	0, 0, 0, 624, 625, 1203, 0, 189, 190, 0,
	0, 191, 635, 0, 0, 0, 677, 642, 638, 0,
	0, 192, 193, 194, 354, 692, 356, 693, 195, 694,
	695, 0, 196, 360, 361, 197, 198, 645, 676, 696,
	697, 364, 0, 199, 688, 0, 668, 0, 200, 201,
	202, 0, 204, 205, 206, 203, 0, 207, 0, 208,
	209, 0, 722, 210, 211, 212, 0, 669, 670, 672,
	0, 671, 673, 213, 214, 419, 215, 698, 216, 699,
	700, 630, 217, 0, 218, 0, 219, 0, 0, 691,
	221, 0, 222, 0, 0, 0, 633, 223, 225, 224,
	226, 678, 679, 656, 723, 0, 0, 0, 0, 0,
	227, 228, 701, 702, 703, 0, 229, 0, 230, 0,
	0, 724, 0, 231, 689, 0, 376, 0, 0, 232,
	233, 234, 235, 685, 687, 726, 0, 379, 239, 1456,
	236, 0, 725, 237, 704, 238, 705, 706, 707, 708,
	709, 0, 667, 0, 727, 240, 241, 242, 728, 387,
	388, 243, 244, 245, 0, 247, 246, 0, 690, 729,
	248, 249, 730, 0, 250, 251, 0, 0, 252, 0,
	253, 731, 254, 255, 257, 390, 256, 732, 258, 259,
	261, 260, 627, 0, 657, 686, 262, 710, 263, 264,
	0, 265, 0, 0, 266, 0, 0, 267, 393, 733,
	268, 734, 680, 269, 270, 271, 272, 273, 274, 0,
	275, 681, 276, 396, 277, 1455, 278, 279, 280, 281,
	282, 711, 283, 284, 0, 285, 286, 287, 288, 289,
	0, 291, 292, 290, 293, 294, 295, 296, 0, 297,
	735, 298, 299, 634, 300, 0, 304, 305, 306, 307,
	308, 0, 310, 399, 309, 311, 312, 674, 313, 301,
	302, 314, 736, 315, 712, 401, 316, 0, 0, 323,
	317, 318, 303, 319, 322, 713, 320, 321, 682, 0,
	324, 0, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 404, 714, 715, 0, 0, 333, 334, 683, 684,
	655, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 675, 343, 0, 409, 344, 345, 346, 410, 716,
	0, 0, 347, 0, 0, 0, 0, 348, 349, 350,
	351, 352, 628, 0, 0, 0, 0, 0, 0, 0,
	626, 0, 0, 0, 0, 624, 625, 0, 0, 0,
	0, 0, 0, 0, 635, 0, 0, 0, 0, 620,
	638, 660, 649, 650, 647, 648, 639, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 677, 642, 0, 0,
	0, 192, 193, 194, 354, 692, 356, 693, 195, 694,
	695, 0, 196, 360, 361, 197, 198, 645, 676, 696,
	697, 364, 0, 199, 688, 0, 668, 0, 200, 201,
	202, 0, 204, 205, 206, 203, 0, 207, 0, 208,
	209, 0, 722, 210, 211, 212, 0, 669, 670, 672,
	0, 671, 673, 213, 214, 419, 215, 698, 216, 699,
	700, 630, 217, 0, 218, 0, 219, 0, 0, 691,
	221, 0, 222, 0, 0, 0, 633, 223, 225, 224,
	226, 678, 679, 656, 723, 0, 0, 0, 0, 0,
	227, 228, 701, 702, 703, 0, 229, 0, 230, 0,
	0, 724, 0, 231, 689, 0, 376, 0, 0, 232,
	233, 234, 235, 685, 687, 726, 0, 379, 239, 0,
	236, 0, 725, 237, 704, 238, 705, 706, 707, 708,
	709, 0, 667, 0, 727, 240, 241, 242, 728, 387,
	388, 243, 244, 245, 0, 247, 246, 0, 690, 729,
	248, 249, 730, 0, 250, 251, 0, 0, 252, 0,
	253, 731, 254, 255, 257, 390, 256, 732, 258, 259,
	261, 260, 627, 0, 657, 686, 262, 710, 263, 264,
	0, 265, 622, 0, 266, 0, 0, 267, 393, 733,
	268, 734, 680, 269, 270, 271, 272, 273, 274, 0,
	275, 681, 276, 396, 277, 0, 278, 279, 280, 281,
	282, 711, 283, 284, 0, 285, 286, 287, 288, 289,
	0, 291, 292, 290, 293, 294, 295, 296, 0, 297,
	735, 298, 299, 634, 300, 0, 304, 305, 306, 307,
	308, 0, 310, 399, 309, 311, 312, 674, 313, 301,
	302, 314, 736, 315, 712, 401, 316, 0, 0, 323,
	317, 318, 303, 319, 322, 713, 320, 321, 682, 0,
	324, 0, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 404, 714, 715, 0, 0, 333, 334, 683, 684,
	655, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 675, 343, 0, 409, 344, 345, 346, 410, 716,
	0, 0, 347, 0, 0, 0, 0, 348, 349, 350,
	351, 352, 628, 660, 649, 650, 647, 648, 639, 0,
	626, 0, 0, 0, 0, 624, 625, 0, 0, 189,
	190, 0, 0, 191, 635, 0, 0, 0, 677, 642,
	638, 0, 0, 192, 193, 194, 354, 692, 356, 693,
	195, 694, 695, 0, 196, 360, 361, 197, 198, 645,
	676, 696, 697, 364, 0, 199, 688, 0, 668, 0,
	200, 201, 202, 0, 204, 205, 206, 203, 0, 207,
	0, 208, 209, 0, 722, 210, 211, 212, 0, 669,
	670, 672, 0, 671, 673, 213, 214, 419, 215, 698,
	216, 699, 700, 630, 217, 0, 218, 0, 219, 0,
	0, 691, 221, 0, 222, 0, 0, 0, 633, 223,
	225, 224, 226, 678, 679, 656, 723, 0, 0, 0,
	0, 0, 227, 228, 701, 702, 703, 0, 229, 0,
	230, 0, 0, 724, 0, 231, 689, 0, 376, 0,
	0, 232, 233, 234, 235, 685, 687, 726, 0, 379,
	239, 0, 236, 0, 725, 237, 704, 238, 705, 706,
	707, 708, 709, 0, 667, 0, 727, 240, 241, 242,
	728, 387, 388, 243, 244, 245, 0, 247, 246, 0,
	690, 729, 248, 249, 730, 0, 250, 251, 0, 0,
	252, 0, 253, 731, 254, 255, 257, 390, 256, 732,
	258, 259, 261, 260, 627, 0, 657, 686, 262, 710,
	263, 264, 0, 265, 0, 0, 266, 0, 0, 267,
	393, 733, 268, 734, 680, 269, 270, 271, 272, 273,
	274, 0, 275, 681, 276, 396, 277, 0, 278, 279,
	280, 281, 282, 711, 283, 284, 0, 285, 286, 287,
	288, 289, 0, 291, 292, 290, 293, 294, 295, 296,
	0, 297, 735, 298, 299, 634, 300, 0, 304, 305,
	306, 307, 308, 0, 310, 399, 309, 311, 312, 674,
	313, 301, 302, 314, 736, 315, 712, 401, 316, 0,
	0, 323, 317, 318, 303, 319, 322, 713, 320, 321,
	682, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 714, 715, 0, 0, 333, 334,
	683, 684, 655, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 675, 343, 0, 409, 344, 345, 346,
	410, 716, 2098, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 628, 660, 649, 650, 647, 648,
	639, 0, 626, 0, 0, 0, 0, 624, 625, 0,
	0, 189, 190, 0, 0, 191, 635, 0, 0, 0,
	677, 642, 638, 0, 0, 192, 193, 194, 354, 692,
	356, 693, 195, 694, 695, 0, 196, 360, 361, 197,
	198, 645, 676, 696, 697, 364, 0, 199, 688, 0,
	668, 0, 200, 201, 202, 0, 204, 205, 206, 203,
	0, 207, 0, 208, 209, 0, 722, 210, 211, 212,
	0, 669, 670, 672, 0, 671, 673, 213, 214, 419,
	215, 698, 216, 699, 700, 630, 217, 0, 218, 0,
	219, 0, 0, 691, 221, 0, 222, 0, 0, 0,
	633, 223, 225, 224, 226, 678, 679, 656, 723, 0,
	0, 0, 0, 0, 227, 228, 701, 702, 703, 0,
	229, 0, 230, 0, 0, 724, 0, 231, 689, 0,
	376, 0, 0, 232, 233, 234, 235, 685, 687, 726,
	0, 379, 239, 0, 236, 0, 725, 237, 704, 238,
	705, 706, 707, 708, 709, 0, 667, 0, 727, 240,
	241, 242, 728, 387, 388, 243, 244, 245, 0, 247,
	246, 0, 690, 729, 248, 249, 730, 0, 250, 251,
	0, 0, 252, 0, 253, 731, 254, 255, 257, 390,
	256, 732, 258, 259, 261, 260, 627, 0, 657, 686,
	262, 710, 263, 264, 0, 265, 622, 0, 266, 0,
	0, 267, 393, 733, 268, 734, 680, 269, 270, 271,
	272, 273, 274, 0, 275, 681, 276, 396, 277, 0,
	278, 279, 280, 281, 282, 711, 283, 284, 0, 285,
	286, 287, 288, 289, 0, 291, 292, 290, 293, 294,
	295, 296, 0, 297, 735, 298, 299, 634, 300, 0,
	304, 305, 306, 307, 308, 0, 310, 399, 309, 311,
	312, 674, 313, 301, 302, 314, 736, 315, 712, 401,
	316, 0, 0, 323, 317, 318, 303, 319, 322, 713,
	320, 321, 682, 0, 324, 0, 325, 326, 327, 328,
	329, 330, 331, 332, 0, 404, 714, 715, 0, 0,
	333, 334, 683, 684, 655, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 675, 343, 0, 409, 344,
	345, 346, 410, 716, 0, 0, 347, 0, 0, 0,
	0, 348, 349, 350, 351, 352, 628, 660, 649, 650,
	647, 648, 639, 0, 626, 0, 0, 0, 0, 624,
	625, 0, 0, 189, 190, 0, 0, 191, 635, 0,
	0, 0, 677, 642, 638, 0, 0, 192, 193, 194,
	354, 692, 356, 693, 195, 694, 695, 0, 196, 360,
	361, 197, 198, 645, 676, 696, 697, 364, 0, 199,
	688, 0, 668, 0, 200, 201, 202, 0, 204, 205,
	206, 203, 0, 207, 0, 208, 209, 0, 722, 210,
	211, 212, 0, 669, 670, 672, 0, 671, 673, 213,
	214, 419, 215, 698, 216, 699, 700, 630, 217, 0,
	218, 0, 219, 0, 0, 691, 221, 0, 222, 0,
	0, 0, 633, 223, 225, 224, 226, 678, 679, 656,
	723, 0, 0, 0, 0, 0, 227, 228, 701, 702,
	703, 0, 229, 0, 230, 0, 0, 724, 0, 231,
	689, 0, 376, 0, 0, 232, 233, 234, 235, 685,
	687, 726, 0, 379, 239, 0, 236, 0, 725, 237,
	704, 238, 705, 706, 707, 708, 709, 0, 667, 0,
	727, 240, 241, 242, 728, 387, 388, 243, 244, 245,
	0, 247, 246, 0, 690, 729, 248, 249, 730, 0,
	250, 251, 0, 0, 252, 0, 253, 731, 254, 255,
	257, 390, 256, 732, 258, 259, 261, 260, 627, 0,
	657, 686, 262, 710, 263, 264, 0, 265, 0, 0,
	266, 0, 0, 267, 393, 733, 268, 734, 680, 269,
	270, 271, 272, 273, 274, 0, 275, 681, 276, 396,
	277, 0, 278, 279, 280, 281, 282, 711, 283, 284,
	0, 285, 286, 287, 288, 289, 0, 291, 292, 290,
	293, 294, 295, 296, 0, 297, 735, 298, 299, 634,
	300, 0, 304, 305, 306, 307, 308, 0, 310, 399,
	309, 311, 312, 674, 313, 301, 302, 314, 736, 315,
	712, 401, 316, 0, 0, 323, 317, 318, 303, 319,
	322, 713, 320, 321, 682, 0, 324, 0, 325, 326,
	327, 328, 329, 330, 331, 332, 0, 404, 714, 715,
	0, 0, 333, 334, 683, 684, 655, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 675, 343, 0,
	409, 344, 345, 346, 410, 716, 0, 0, 347, 0,
	0, 0, 0, 348, 349, 350, 351, 352, 628, 660,
	649, 650, 647, 648, 639, 0, 626, 0, 0, 0,
	0, 624, 625, 1203, 0, 189, 190, 0, 0, 191,
	635, 0, 0, 0, 677, 642, 638, 0, 0, 192,
	193, 194, 354, 692, 356, 693, 195, 694, 695, 0,
	196, 360, 361, 197, 198, 645, 676, 696, 697, 364,
	0, 199, 688, 0, 668, 0, 200, 201, 202, 0,
	204, 205, 206, 203, 0, 207, 0, 208, 209, 0,
	722, 210, 211, 212, 0, 669, 670, 672, 0, 671,
	673, 213, 214, 419, 215, 698, 216, 699, 700, 630,
	217, 0, 218, 0, 219, 0, 0, 691, 221, 0,
	222, 0, 0, 0, 633, 223, 225, 224, 226, 678,
	679, 656, 723, 0, 0, 0, 0, 0, 227, 228,
	701, 702, 703, 0, 229, 0, 230, 0, 1611, 724,
	0, 231, 689, 0, 376, 0, 0, 232, 233, 234,
	235, 685, 687, 726, 0, 379, 239, 0, 236, 0,
	725, 237, 704, 238, 705, 706, 707, 708, 709, 0,
	667, 0, 727, 240, 241, 242, 728, 387, 388, 243,
	244, 245, 0, 247, 246, 0, 690, 729, 248, 249,
	730, 0, 250, 251, 0, 0, 252, 0, 253, 731,
	254, 255, 257, 390, 256, 732, 258, 259, 261, 260,
	627, 0, 657, 686, 262, 710, 263, 264, 0, 265,
	0, 0, 266, 0, 0, 267, 393, 733, 268, 734,
	680, 269, 270, 271, 272, 273, 274, 0, 275, 681,
	276, 396, 277, 0, 278, 279, 280, 281, 282, 711,
	283, 284, 0, 285, 286, 287, 288, 289, 0, 291,
	292, 290, 293, 294, 295, 296, 0, 297, 735, 298,
	299, 634, 300, 0, 304, 305, 306, 307, 308, 0,
	310, 399, 309, 311, 312, 674, 313, 301, 302, 314,
	736, 315, 712, 401, 316, 0, 0, 323, 317, 318,
	303, 319, 322, 713, 320, 321, 682, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	714, 715, 0, 0, 333, 334, 683, 684, 655, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 675,
	343, 0, 409, 344, 345, 346, 410, 716, 0, 0,
	347, 0, 0, 0, 0, 348, 349, 350, 351, 352,
	628, 0, 0, 0, 0, 0, 0, 0, 626, 0,
	0, 0, 0, 624, 625, 0, 0, 0, 0, 0,
	0, 0, 635, 0, 0, 0, 0, 1657, 638, 660,
	649, 650, 647, 648, 639, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 677, 642, 0, 0, 0, 192,
	193, 194, 354, 692, 356, 693, 195, 694, 695, 0,
	196, 360, 361, 197, 198, 645, 676, 696, 697, 364,
	0, 199, 688, 0, 668, 0, 200, 201, 202, 0,
	204, 205, 206, 203, 0, 207, 0, 208, 209, 0,
	722, 210, 211, 212, 0, 669, 670, 672, 0, 671,
	673, 213, 214, 419, 215, 698, 216, 699, 700, 630,
	217, 0, 218, 0, 219, 0, 0, 691, 221, 0,
	222, 0, 0, 0, 633, 223, 225, 224, 226, 678,
	679, 656, 723, 0, 0, 0, 0, 0, 227, 228,
	701, 702, 703, 0, 229, 0, 230, 0, 0, 724,
	0, 231, 689, 0, 376, 0, 0, 232, 233, 234,
	235, 685, 687, 726, 0, 379, 239, 0, 236, 0,
	725, 237, 704, 238, 705, 706, 707, 708, 709, 0,
	667, 0, 727, 240, 241, 242, 728, 387, 388, 243,
	244, 245, 0, 247, 246, 0, 690, 729, 248, 249,
	730, 0, 250, 251, 0, 0, 252, 0, 253, 731,
	254, 255, 257, 390, 256, 732, 258, 259, 261, 260,
	627, 0, 657, 686, 262, 710, 263, 264, 0, 265,
	0, 0, 266, 0, 0, 267, 393, 733, 268, 734,
	680, 269, 270, 271, 272, 273, 274, 0, 275, 681,
	276, 396, 277, 0, 278, 279, 280, 281, 282, 711,
	283, 284, 0, 285, 286, 287, 288, 289, 0, 291,
	292, 290, 293, 294, 295, 296, 0, 297, 735, 298,
	299, 634, 300, 0, 304, 305, 306, 307, 308, 0,
	310, 399, 309, 311, 312, 674, 313, 301, 302, 314,
	736, 315, 712, 401, 316, 0, 0, 323, 317, 318,
	303, 319, 322, 713, 320, 321, 682, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	714, 715, 0, 0, 333, 334, 683, 684, 655, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 675,
	343, 0, 409, 344, 345, 346, 410, 716, 0, 0,
	347, 0, 0, 0, 0, 348, 349, 350, 351, 352,
	628, 0, 0, 0, 0, 0, 0, 0, 626, 0,
	0, 0, 0, 624, 625, 0, 0, 0, 0, 0,
	0, 0, 635, 0, 0, 0, 0, 1620, 638, 660,
	649, 650, 647, 648, 639, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 677, 642, 0, 0, 0, 192,
	193, 194, 354, 692, 356, 693, 195, 694, 695, 0,
	196, 360, 361, 197, 198, 645, 676, 696, 697, 364,
	0, 199, 688, 0, 668, 0, 200, 201, 202, 0,
	204, 205, 206, 203, 0, 207, 0, 208, 209, 0,
	722, 210, 211, 212, 0, 669, 670, 672, 0, 671,
	673, 213, 214, 419, 215, 698, 216, 699, 700, 630,
	217, 0, 218, 0, 219, 0, 0, 691, 221, 0,
	222, 0, 0, 0, 633, 223, 225, 224, 226, 678,
	679, 656, 723, 0, 0, 0, 0, 0, 227, 228,
	701, 702, 703, 0, 229, 0, 230, 0, 0, 724,
	0, 231, 689, 0, 376, 0, 0, 232, 233, 234,
	235, 685, 687, 726, 0, 379, 239, 0, 236, 0,
	725, 237, 704, 238, 705, 706, 707, 708, 709, 0,
	667, 0, 727, 240, 241, 242, 728, 387, 388, 243,
	244, 245, 0, 247, 246, 0, 690, 729, 248, 249,
	730, 0, 250, 251, 0, 0, 252, 0, 253, 731,
	254, 255, 257, 390, 256, 732, 258, 259, 261, 260,
	627, 0, 657, 686, 262, 710, 263, 264, 0, 265,
	0, 0, 266, 0, 0, 267, 393, 733, 268, 734,
	680, 269, 270, 271, 272, 273, 274, 0, 275, 681,
	276, 396, 277, 0, 278, 279, 280, 281, 282, 711,
	283, 284, 0, 285, 286, 287, 288, 289, 0, 291,
	292, 290, 293, 294, 295, 296, 0, 297, 735, 298,
	299, 634, 300, 0, 304, 305, 306, 307, 308, 0,
	310, 399, 309, 311, 312, 674, 313, 301, 302, 314,
	736, 315, 712, 401, 316, 0, 0, 323, 317, 318,
	303, 319, 322, 713, 320, 321, 682, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	714, 715, 0, 0, 333, 334, 683, 684, 655, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 675,
	343, 0, 409, 344, 345, 346, 410, 716, 0, 0,
	347, 0, 0, 0, 0, 348, 349, 350, 351, 352,
	628, 0, 0, 0, 0, 0, 0, 0, 626, 0,
	0, 0, 0, 624, 625, 0, 0, 0, 0, 0,
	0, 0, 635, 0, 0, 0, 0, 1618, 638, 660,
	649, 650, 647, 648, 639, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 677, 642, 0, 0, 0, 192,
	193, 194, 354, 692, 356, 693, 195, 694, 695, 0,
	196, 360, 361, 197, 198, 645, 676, 696, 697, 364,
	0, 199, 688, 0, 668, 0, 200, 201, 202, 0,
	204, 205, 206, 203, 0, 207, 0, 208, 209, 0,
	722, 210, 211, 212, 0, 669, 670, 672, 0, 671,
	673, 213, 214, 419, 215, 698, 216, 699, 700, 630,
	217, 0, 218, 0, 219, 0, 0, 691, 221, 0,
	222, 0, 0, 0, 633, 223, 225, 224, 226, 678,
	679, 656, 723, 0, 0, 0, 0, 0, 227, 228,
	701, 702, 703, 0, 229, 0, 230, 0, 0, 724,
	0, 231, 689, 0, 376, 0, 0, 232, 233, 234,
	235, 685, 687, 726, 0, 379, 239, 0, 236, 0,
	725, 237, 704, 238, 705, 706, 707, 708, 709, 0,
	667, 0, 727, 240, 241, 242, 728, 387, 388, 243,
	244, 245, 0, 247, 246, 0, 690, 729, 248, 249,
	730, 0, 250, 251, 0, 0, 252, 0, 253, 731,
	254, 255, 257, 390, 256, 732, 258, 259, 261, 260,
	627, 0, 657, 686, 262, 710, 263, 264, 0, 265,
	0, 0, 266, 0, 0, 267, 393, 733, 268, 734,
	680, 269, 270, 271, 272, 273, 274, 0, 275, 681,
	276, 396, 277, 0, 278, 279, 280, 281, 282, 711,
	283, 284, 0, 285, 286, 287, 288, 289, 0, 291,
	292, 290, 293, 294, 295, 296, 0, 297, 735, 298,
	299, 634, 300, 0, 304, 305, 306, 307, 308, 0,
	310, 399, 309, 311, 312, 674, 313, 301, 302, 314,
	736, 315, 712, 401, 316, 0, 0, 323, 317, 318,
	303, 319, 322, 713, 320, 321, 682, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	714, 715, 0, 0, 333, 334, 683, 684, 655, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 675,
	343, 0, 409, 344, 345, 346, 410, 716, 0, 0,
	347, 0, 0, 0, 0, 348, 349, 350, 351, 352,
	628, 0, 0, 0, 0, 0, 0, 0, 626, 0,
	0, 0, 0, 624, 625, 0, 0, 0, 0, 0,
	0, 0, 635, 0, 0, 0, 0, 1602, 638, 660,
	649, 650, 647, 648, 639, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 677, 642, 0, 0, 0, 192,
	193, 194, 354, 692, 356, 693, 195, 694, 695, 0,
	196, 360, 361, 197, 198, 645, 676, 696, 697, 364,
	0, 199, 688, 0, 668, 0, 200, 201, 202, 0,
	204, 205, 206, 203, 0, 207, 0, 208, 209, 0,
	722, 210, 211, 212, 0, 669, 670, 672, 0, 671,
	673, 213, 214, 419, 215, 698, 216, 699, 700, 630,
	217, 0, 218, 0, 219, 0, 0, 691, 221, 0,
	222, 0, 0, 0, 633, 223, 225, 224, 226, 678,
	679, 656, 723, 0, 0, 0, 0, 0, 227, 228,
	701, 702, 703, 0, 229, 0, 230, 0, 0, 724,
	0, 231, 689, 0, 376, 0, 0, 232, 233, 234,
	235, 685, 687, 726, 0, 379, 239, 0, 236, 0,
	725, 237, 704, 238, 705, 706, 707, 708, 709, 0,
	667, 0, 727, 240, 241, 242, 728, 387, 388, 243,
	244, 245, 0, 247, 246, 0, 690, 729, 248, 249,
	730, 0, 250, 251, 0, 0, 252, 0, 253, 731,
	254, 255, 257, 390, 256, 732, 258, 259, 261, 260,
	627, 0, 657, 686, 262, 710, 263, 264, 0, 265,
	0, 0, 266, 0, 0, 267, 393, 733, 268, 734,
	680, 269, 270, 271, 272, 273, 274, 0, 275, 681,
	276, 396, 277, 0, 278, 279, 280, 281, 282, 711,
	283, 284, 0, 285, 286, 287, 288, 289, 0, 291,
	292, 290, 293, 294, 295, 296, 0, 297, 735, 298,
	299, 634, 300, 0, 304, 305, 306, 307, 308, 0,
	310, 399, 309, 311, 312, 674, 313, 301, 302, 314,
	736, 315, 712, 401, 316, 0, 0, 323, 317, 318,
	303, 319, 322, 713, 320, 321, 682, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	714, 715, 0, 0, 333, 334, 683, 684, 655, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 675,
	343, 0, 409, 344, 345, 346, 410, 716, 0, 0,
	347, 0, 0, 0, 0, 348, 349, 350, 351, 352,
	628, 0, 0, 0, 0, 0, 0, 0, 626, 0,
	0, 0, 0, 624, 625, 0, 0, 0, 0, 0,
	0, 0, 635, 0, 0, 0, 0, 1590, 638, 660,
	649, 650, 647, 648, 639, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 677, 642, 0, 0, 0, 192,
	193, 194, 354, 692, 356, 693, 195, 694, 695, 0,
	196, 360, 361, 197, 198, 645, 676, 696, 697, 364,
	0, 199, 688, 0, 668, 0, 200, 201, 202, 0,
	204, 205, 206, 203, 0, 207, 0, 208, 209, 0,
	722, 210, 211, 212, 0, 669, 670, 672, 0, 671,
	673, 213, 214, 419, 215, 698, 216, 699, 700, 630,
	217, 0, 218, 0, 219, 0, 0, 691, 221, 0,
	222, 0, 0, 0, 633, 223, 225, 224, 226, 678,
	679, 656, 723, 0, 0, 0, 0, 0, 227, 228,
	701, 702, 703, 0, 229, 0, 230, 0, 0, 724,
	0, 231, 689, 0, 376, 0, 0, 232, 233, 234,
	235, 685, 687, 726, 0, 379, 239, 0, 236, 0,
	725, 237, 704, 238, 705, 706, 707, 708, 709, 0,
	667, 0, 727, 240, 241, 242, 728, 387, 388, 243,
	244, 245, 0, 247, 246, 0, 690, 729, 248, 249,
	730, 0, 250, 251, 0, 0, 252, 0, 253, 731,
	254, 255, 257, 390, 256, 732, 258, 259, 261, 260,
	627, 0, 657, 686, 262, 710, 263, 264, 0, 265,
	0, 0, 266, 0, 0, 267, 393, 733, 268, 734,
	680, 269, 270, 271, 272, 273, 274, 0, 275, 681,
	276, 396, 277, 0, 278, 279, 280, 281, 282, 711,
	283, 284, 0, 285, 286, 287, 288, 289, 0, 291,
	292, 290, 293, 294, 295, 296, 0, 297, 735, 298,
	299, 634, 300, 0, 304, 305, 306, 307, 308, 0,
	310, 399, 309, 311, 312, 674, 313, 301, 302, 314,
	736, 315, 712, 401, 316, 0, 0, 323, 317, 318,
	303, 319, 322, 713, 320, 321, 682, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	714, 715, 0, 0, 333, 334, 683, 684, 655, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 675,
	343, 0, 409, 344, 345, 346, 410, 716, 0, 0,
	347, 0, 0, 0, 0, 348, 349, 350, 351, 352,
	628, 0, 0, 0, 0, 0, 0, 0, 626, 0,
	0, 0, 0, 624, 625, 0, 0, 0, 0, 0,
	0, 0, 635, 0, 0, 0, 0, 1588, 638, 1580,
	649, 650, 647, 648, 639, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 677, 642, 0, 0, 0, 192,
	193, 194, 354, 692, 356, 693, 195, 694, 695, 0,
	196, 360, 361, 197, 198, 645, 676, 696, 697, 364,
	0, 199, 688, 0, 668, 0, 200, 201, 202, 0,
	204, 205, 206, 203, 0, 207, 0, 208, 209, 0,
	722, 210, 211, 212, 0, 669, 670, 672, 0, 671,
	673, 213, 214, 419, 215, 698, 1583, 699, 700, 630,
	217, 0, 218, 0, 219, 0, 0, 691, 221, 0,
	222, 0, 0, 0, 633, 223, 225, 224, 226, 678,
	679, 656, 723, 0, 0, 0, 0, 0, 227, 228,
	701, 702, 703, 0, 229, 0, 230, 0, 0, 724,
	0, 231, 689, 0, 376, 0, 0, 232, 1584, 234,
	235, 685, 687, 726, 0, 379, 239, 0, 236, 0,
	725, 237, 704, 238, 705, 706, 707, 708, 709, 0,
	667, 0, 727, 240, 241, 242, 728, 387, 388, 243,
	244, 245, 0, 247, 246, 0, 690, 729, 248, 249,
	730, 0, 250, 251, 0, 0, 252, 0, 253, 731,
	1585, 1582, 257, 390, 256, 732, 258, 259, 261, 260,
	627, 0, 657, 686, 262, 710, 263, 264, 0, 265,
	0, 0, 266, 0, 0, 267, 393, 733, 268, 734,
	680, 269, 270, 271, 272, 273, 274, 0, 275, 681,
	276, 396, 277, 0, 278, 279, 280, 281, 282, 711,
	283, 284, 0, 285, 286, 287, 288, 289, 0, 291,
	292, 290, 293, 294, 295, 296, 0, 297, 735, 298,
	299, 634, 300, 0, 304, 305, 306, 307, 1586, 0,
	310, 399, 309, 311, 312, 674, 313, 301, 302, 314,
	736, 315, 712, 401, 316, 0, 0, 323, 317, 318,
	303, 319, 322, 713, 320, 321, 682, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	714, 715, 0, 0, 333, 334, 683, 684, 655, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 675,
	343, 0, 409, 344, 345, 346, 410, 716, 0, 0,
	347, 0, 0, 0, 0, 348, 349, 350, 1581, 352,
	628, 0, 0, 0, 0, 0, 0, 0, 626, 0,
	0, 0, 0, 624, 625, 0, 0, 0, 0, 0,
	0, 0, 635, 0, 0, 0, 0, 1577, 638, 1580,
	649, 650, 647, 648, 639, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 677, 642, 0, 0, 0, 192,
	193, 194, 354, 692, 356, 693, 195, 694, 695, 0,
	196, 360, 361, 197, 198, 645, 676, 696, 697, 364,
	0, 199, 688, 0, 668, 0, 200, 201, 202, 0,
	204, 205, 206, 203, 0, 207, 0, 208, 209, 0,
	722, 210, 211, 212, 0, 669, 670, 672, 0, 671,
	673, 213, 214, 419, 215, 698, 1583, 699, 700, 630,
	217, 0, 218, 0, 219, 0, 0, 691, 221, 0,
	222, 0, 0, 0, 633, 223, 225, 224, 226, 678,
	679, 656, 723, 0, 0, 0, 0, 0, 227, 228,
	701, 702, 703, 0, 229, 0, 230, 0, 0, 724,
	0, 231, 689, 0, 376, 0, 0, 232, 1584, 234,
	235, 685, 687, 726, 0, 379, 239, 0, 236, 0,
	725, 237, 704, 238, 705, 706, 707, 708, 709, 0,
	667, 0, 727, 240, 241, 242, 728, 387, 388, 243,
	244, 245, 0, 247, 246, 0, 690, 729, 248, 249,
	730, 0, 250, 251, 0, 0, 252, 0, 253, 731,
	1585, 1582, 257, 390, 256, 732, 258, 259, 261, 260,
	627, 0, 657, 686, 262, 710, 263, 264, 0, 265,
	0, 0, 266, 0, 0, 267, 393, 733, 268, 734,
	680, 269, 270, 271, 272, 273, 274, 0, 275, 681,
	276, 396, 277, 0, 278, 279, 280, 281, 282, 711,
	283, 284, 0, 285, 286, 287, 288, 289, 0, 291,
	292, 290, 293, 294, 295, 296, 0, 297, 735, 298,
	299, 634, 300, 0, 304, 305, 306, 307, 1586, 0,
	310, 399, 309, 311, 312, 674, 313, 301, 302, 314,
	736, 315, 712, 401, 316, 0, 0, 323, 317, 318,
	303, 319, 322, 713, 320, 321, 682, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	714, 715, 0, 0, 333, 334, 683, 684, 655, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 675,
	343, 0, 409, 344, 345, 346, 410, 716, 0, 0,
	347, 0, 0, 0, 0, 348, 349, 350, 1581, 352,
	628, 660, 649, 650, 647, 648, 639, 0, 626, 0,
	0, 0, 0, 624, 625, 0, 0, 189, 190, 0,
	0, 191, 635, 0, 0, 0, 677, 642, 638, 0,
	0, 192, 193, 194, 354, 692, 356, 693, 195, 694,
	695, 0, 196, 360, 361, 197, 198, 645, 676, 696,
	697, 364, 0, 199, 688, 0, 668, 0, 200, 201,
	202, 0, 204, 205, 206, 203, 0, 207, 0, 208,
	209, 0, 722, 210, 211, 212, 0, 669, 670, 672,
	0, 671, 673, 213, 214, 419, 215, 698, 216, 699,
	700, 630, 217, 0, 218, 0, 219, 0, 0, 691,
	221, 0, 222, 0, 0, 0, 633, 223, 225, 224,
	226, 678, 679, 656, 723, 0, 0, 0, 0, 0,
	227, 228, 701, 702, 703, 0, 229, 0, 230, 0,
	0, 724, 0, 231, 689, 0, 376, 0, 0, 232,
	233, 234, 235, 685, 687, 726, 0, 379, 239, 0,
	236, 0, 725, 237, 704, 238, 705, 706, 707, 708,
	709, 0, 667, 0, 727, 240, 241, 242, 728, 387,
	388, 243, 244, 245, 0, 247, 246, 0, 690, 729,
	248, 249, 730, 0, 250, 251, 0, 0, 252, 0,
	253, 731, 254, 255, 257, 390, 256, 732, 258, 259,
	261, 260, 627, 0, 657, 686, 262, 710, 263, 264,
	0, 265, 0, 0, 266, 0, 0, 267, 393, 733,
	268, 734, 680, 269, 270, 271, 272, 273, 274, 0,
	275, 681, 276, 396, 277, 0, 278, 279, 280, 281,
	282, 711, 283, 284, 0, 285, 286, 287, 288, 289,
	0, 291, 292, 290, 293, 294, 295, 296, 0, 297,
	735, 298, 299, 634, 300, 0, 304, 305, 306, 307,
	308, 0, 310, 399, 309, 311, 312, 674, 313, 301,
	302, 314, 736, 315, 712, 401, 316, 0, 0, 323,
	317, 318, 303, 319, 322, 713, 320, 321, 682, 0,
	324, 0, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 404, 714, 715, 0, 0, 333, 334, 683, 684,
	655, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 675, 343, 0, 409, 344, 345, 346, 410, 716,
	0, 0, 347, 0, 0, 0, 0, 348, 349, 350,
	351, 352, 628, 660, 649, 650, 647, 648, 639, 0,
	626, 0, 0, 0, 0, 624, 625, 0, 0, 189,
	190, 1443, 1146, 191, 635, 0, 0, 0, 677, 642,
	638, 0, 0, 192, 193, 194, 354, 692, 356, 693,
	195, 694, 695, 0, 196, 360, 361, 197, 198, 645,
	676, 696, 697, 364, 0, 199, 688, 0, 668, 0,
	200, 201, 202, 0, 204, 205, 206, 203, 0, 207,
	0, 208, 209, 0, 722, 210, 211, 212, 0, 669,
	670, 672, 0, 671, 673, 213, 214, 419, 215, 698,
	216, 699, 700, 630, 217, 0, 218, 0, 219, 0,
	0, 691, 221, 0, 222, 0, 0, 0, 633, 223,
	225, 224, 226, 678, 679, 656, 723, 0, 0, 0,
	0, 0, 227, 228, 701, 702, 703, 0, 229, 0,
	230, 0, 0, 724, 0, 231, 689, 0, 376, 0,
	0, 232, 233, 234, 235, 685, 687, 726, 0, 379,
	239, 0, 236, 0, 725, 237, 704, 238, 705, 706,
	707, 708, 709, 0, 667, 0, 727, 240, 241, 242,
	728, 387, 388, 243, 244, 245, 0, 247, 246, 0,
	690, 729, 248, 249, 730, 0, 250, 251, 0, 0,
	252, 0, 253, 731, 254, 255, 257, 390, 256, 732,
	258, 259, 261, 260, 627, 0, 657, 686, 262, 710,
	263, 264, 0, 265, 0, 0, 266, 0, 0, 267,
	393, 733, 268, 734, 680, 269, 270, 271, 272, 273,
	274, 0, 275, 681, 276, 396, 277, 0, 278, 279,
	280, 281, 282, 711, 283, 284, 0, 285, 286, 287,
	288, 289, 0, 291, 292, 290, 293, 294, 295, 296,
	0, 297, 735, 298, 299, 634, 300, 0, 304, 305,
	306, 307, 308, 0, 310, 399, 309, 311, 312, 674,
	313, 301, 302, 314, 736, 315, 712, 401, 316, 0,
	0, 323, 317, 318, 303, 319, 322, 713, 320, 321,
	682, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 714, 715, 0, 0, 333, 334,
	683, 684, 655, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 675, 343, 0, 409, 344, 345, 346,
	410, 716, 0, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 628, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 624, 625, 0,
	0, 0, 0, 0, 0, 0, 635, 0, 0, 0,
	0, 901, 638, 660, 649, 650, 647, 648, 639, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 677, 642,
	0, 0, 0, 192, 193, 194, 354, 692, 356, 693,
	195, 694, 695, 0, 196, 360, 361, 197, 198, 645,
	676, 696, 697, 364, 0, 199, 688, 0, 668, 0,
	200, 201, 202, 0, 204, 205, 206, 203, 0, 207,
	0, 208, 209, 0, 722, 210, 211, 212, 0, 669,
	670, 672, 0, 671, 673, 213, 214, 419, 215, 698,
	216, 699, 700, 630, 217, 0, 218, 0, 219, 0,
	0, 691, 221, 0, 222, 0, 0, 0, 633, 223,
	225, 224, 226, 678, 679, 656, 723, 0, 0, 0,
	0, 0, 227, 228, 701, 702, 703, 0, 229, 0,
	230, 0, 0, 724, 0, 231, 689, 0, 376, 0,
	0, 232, 233, 234, 235, 685, 687, 726, 0, 379,
	239, 0, 236, 0, 725, 237, 704, 238, 705, 706,
	707, 708, 709, 0, 667, 0, 727, 240, 241, 242,
	728, 387, 388, 243, 244, 245, 0, 247, 246, 0,
	690, 729, 248, 249, 730, 0, 250, 251, 0, 0,
	252, 0, 253, 731, 254, 255, 257, 390, 256, 732,
	258, 259, 261, 260, 627, 0, 657, 686, 262, 710,
	263, 264, 0, 265, 0, 0, 266, 0, 0, 267,
	393, 733, 268, 734, 680, 269, 270, 271, 272, 273,
	274, 0, 275, 681, 276, 396, 277, 0, 278, 279,
	280, 281, 282, 711, 283, 284, 0, 285, 286, 287,
	288, 289, 0, 291, 292, 290, 293, 294, 295, 296,
	0, 297, 735, 298, 299, 634, 300, 0, 304, 305,
	306, 307, 308, 0, 310, 399, 309, 311, 312, 674,
	313, 301, 302, 314, 736, 315, 712, 401, 316, 0,
	0, 323, 317, 318, 303, 319, 322, 713, 320, 321,
	682, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 714, 715, 0, 0, 333, 334,
	683, 684, 655, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 675, 343, 0, 409, 344, 345, 346,
	410, 716, 0, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 628, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 624, 625, 0,
	0, 0, 0, 0, 0, 0, 635, 0, 0, 0,
	0, 899, 638, 660, 649, 650, 647, 648, 639, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 677, 642,
	0, 0, 0, 192, 193, 194, 354, 692, 356, 693,
	195, 694, 695, 0, 196, 360, 361, 197, 198, 645,
	676, 696, 697, 364, 0, 199, 688, 0, 668, 0,
	200, 201, 202, 0, 204, 205, 206, 203, 0, 207,
	0, 208, 209, 0, 722, 210, 211, 212, 0, 669,
	670, 672, 0, 671, 673, 213, 214, 419, 215, 698,
	216, 699, 700, 630, 217, 0, 218, 0, 219, 0,
	0, 691, 221, 0, 222, 0, 0, 0, 633, 223,
	225, 224, 226, 678, 679, 656, 723, 0, 0, 0,
	0, 0, 227, 228, 701, 702, 703, 0, 229, 0,
	230, 0, 0, 724, 0, 231, 689, 0, 376, 0,
	0, 232, 233, 234, 235, 685, 687, 726, 0, 379,
	239, 0, 236, 0, 725, 237, 704, 238, 705, 706,
	707, 708, 709, 0, 667, 0, 727, 240, 241, 242,
	728, 387, 388, 243, 244, 245, 0, 247, 246, 0,
	690, 729, 248, 249, 730, 0, 250, 251, 0, 0,
	252, 0, 253, 731, 254, 255, 257, 390, 256, 732,
	258, 259, 261, 260, 627, 0, 657, 686, 262, 710,
	263, 264, 0, 265, 0, 0, 266, 0, 0, 267,
	393, 733, 268, 734, 680, 269, 270, 271, 272, 273,
	274, 0, 275, 681, 276, 396, 277, 0, 278, 279,
	280, 281, 282, 711, 283, 284, 0, 285, 286, 287,
	288, 289, 0, 291, 292, 290, 293, 294, 295, 296,
	0, 297, 735, 298, 299, 634, 300, 0, 304, 305,
	306, 307, 308, 0, 310, 399, 309, 311, 312, 674,
	313, 301, 302, 314, 736, 315, 712, 401, 316, 0,
	0, 323, 317, 318, 303, 319, 322, 713, 320, 321,
	682, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 714, 715, 0, 0, 333, 334,
	683, 684, 655, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 675, 343, 0, 409, 344, 345, 346,
	410, 716, 0, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 628, 660, 649, 650, 647, 648,
	639, 0, 626, 0, 0, 0, 0, 624, 625, 0,
	0, 189, 190, 0, 0, 191, 635, 0, 0, 0,
	677, 642, 638, 0, 0, 192, 193, 194, 354, 692,
	356, 693, 195, 694, 695, 0, 196, 360, 361, 197,
	198, 645, 676, 696, 697, 364, 0, 199, 688, 0,
	668, 0, 200, 201, 202, 0, 204, 205, 206, 203,
	0, 207, 0, 208, 209, 0, 722, 210, 211, 212,
	0, 669, 670, 672, 0, 671, 673, 213, 214, 419,
	215, 698, 216, 699, 700, 630, 217, 0, 218, 0,
	219, 0, 0, 691, 221, 0, 222, 0, 0, 0,
	633, 223, 225, 224, 226, 678, 679, 656, 723, 0,
	0, 0, 0, 0, 227, 228, 701, 702, 703, 0,
	229, 0, 230, 0, 0, 724, 0, 231, 689, 0,
	376, 0, 0, 232, 233, 234, 235, 685, 687, 726,
	0, 379, 239, 0, 236, 0, 725, 237, 704, 238,
	705, 706, 707, 708, 709, 0, 667, 0, 727, 240,
	241, 242, 728, 387, 388, 243, 244, 245, 0, 247,
	246, 0, 690, 729, 248, 249, 730, 0, 250, 251,
	0, 0, 252, 0, 253, 2669, 254, 255, 257, 390,
	256, 732, 258, 259, 261, 260, 627, 0, 657, 686,
	262, 710, 263, 264, 0, 265, 0, 0, 266, 0,
	0, 267, 393, 733, 268, 734, 680, 269, 270, 271,
	272, 273, 274, 0, 275, 681, 276, 396, 277, 0,
	278, 279, 280, 281, 282, 711, 283, 284, 0, 285,
	286, 287, 288, 289, 0, 291, 292, 290, 293, 294,
	295, 296, 0, 297, 735, 298, 299, 634, 300, 0,
	304, 305, 306, 307, 308, 0, 310, 399, 309, 311,
	312, 674, 313, 301, 302, 314, 736, 315, 712, 401,
	316, 0, 0, 323, 317, 318, 303, 319, 322, 713,
	320, 321, 682, 0, 324, 0, 325, 326, 327, 328,
	329, 330, 331, 332, 0, 404, 714, 715, 0, 0,
	333, 334, 683, 684, 655, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 675, 343, 0, 409, 344,
	345, 346, 410, 716, 0, 0, 347, 0, 0, 0,
	0, 348, 349, 350, 351, 352, 628, 660, 649, 650,
	647, 648, 639, 0, 626, 0, 0, 0, 0, 624,
	625, 0, 0, 189, 190, 0, 0, 191, 635, 0,
	0, 0, 677, 642, 638, 0, 0, 192, 193, 194,
	354, 692, 356, 693, 195, 694, 695, 0, 196, 360,
	361, 197, 198, 645, 676, 696, 697, 364, 0, 199,
	688, 0, 668, 0, 200, 201, 202, 0, 204, 205,
	206, 203, 0, 207, 0, 208, 209, 0, 722, 210,
	211, 2588, 0, 669, 670, 672, 0, 671, 673, 213,
	214, 419, 215, 698, 216, 699, 700, 630, 217, 0,
	218, 0, 219, 0, 0, 691, 221, 0, 222, 0,
	0, 0, 633, 223, 225, 224, 226, 678, 679, 656,
	723, 0, 0, 0, 0, 0, 227, 228, 701, 702,
	703, 0, 229, 0, 230, 0, 0, 724, 0, 231,
	689, 0, 376, 0, 0, 232, 233, 234, 235, 685,
	687, 726, 0, 379, 239, 0, 236, 0, 725, 237,
	704, 238, 705, 706, 707, 708, 709, 0, 667, 0,
	727, 240, 241, 242, 728, 387, 388, 243, 244, 245,
	0, 247, 246, 0, 690, 729, 248, 249, 730, 0,
	250, 251, 0, 0, 252, 0, 253, 731, 254, 255,
	257, 390, 256, 732, 258, 259, 261, 260, 627, 0,
	657, 686, 262, 710, 263, 264, 0, 265, 0, 0,
	266, 0, 0, 267, 393, 733, 268, 734, 680, 269,
	270, 271, 272, 273, 274, 0, 275, 681, 276, 396,
	277, 0, 278, 279, 280, 281, 282, 711, 283, 284,
	0, 285, 286, 287, 288, 289, 0, 291, 292, 290,
	293, 294, 295, 296, 0, 297, 735, 298, 299, 634,
	300, 0, 304, 305, 306, 307, 308, 0, 310, 399,
	309, 311, 312, 674, 313, 301, 302, 314, 736, 315,
	712, 401, 316, 0, 0, 323, 317, 318, 303, 319,
	322, 713, 320, 321, 682, 0, 324, 0, 325, 326,
	327, 328, 329, 330, 331, 332, 0, 404, 714, 715,
	0, 0, 333, 334, 683, 684, 655, 335, 336, 2587,
	338, 0, 0, 339, 340, 341, 342, 675, 343, 0,
	409, 344, 345, 346, 410, 716, 0, 0, 347, 0,
	0, 0, 0, 348, 349, 350, 351, 352, 628, 660,
	649, 650, 647, 648, 639, 0, 626, 0, 0, 0,
	0, 624, 625, 0, 0, 189, 190, 0, 0, 191,
	635, 0, 0, 0, 677, 642, 638, 0, 0, 192,
	193, 194, 354, 692, 356, 693, 195, 694, 695, 0,
	196, 360, 361, 197, 198, 645, 676, 696, 697, 364,
	0, 199, 688, 0, 668, 0, 200, 201, 202, 0,
	204, 205, 206, 203, 0, 207, 0, 208, 209, 0,
	722, 210, 211, 212, 0, 669, 670, 672, 0, 671,
	673, 213, 214, 419, 215, 698, 216, 699, 700, 630,
	217, 0, 218, 0, 219, 0, 0, 691, 221, 0,
	222, 0, 0, 0, 633, 223, 225, 224, 226, 678,
	679, 656, 723, 0, 0, 0, 0, 0, 227, 228,
	701, 702, 703, 0, 229, 0, 230, 0, 0, 724,
	0, 231, 689, 0, 376, 0, 0, 232, 233, 234,
	235, 685, 687, 726, 0, 379, 239, 0, 236, 0,
	725, 237, 704, 238, 705, 706, 707, 708, 709, 0,
	667, 0, 727, 240, 241, 242, 728, 387, 388, 243,
	244, 245, 0, 247, 246, 0, 690, 729, 248, 249,
	730, 0, 250, 251, 0, 0, 252, 0, 253, 731,
	254, 255, 257, 390, 256, 732, 258, 259, 261, 260,
	627, 0, 657, 686, 262, 710, 263, 264, 0, 265,
	0, 0, 266, 0, 0, 267, 393, 733, 268, 734,
	680, 269, 270, 271, 272, 273, 274, 0, 275, 681,
	276, 396, 277, 0, 278, 279, 280, 281, 282, 711,
	283, 284, 0, 285, 286, 287, 288, 289, 0, 291,
	292, 290, 293, 294, 295, 296, 0, 297, 735, 298,
	299, 634, 300, 0, 304, 305, 306, 307, 308, 0,
	310, 399, 309, 311, 312, 674, 313, 301, 302, 314,
	736, 315, 712, 401, 316, 0, 0, 323, 317, 318,
	303, 319, 322, 713, 320, 321, 682, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	714, 715, 0, 0, 333, 334, 683, 684, 655, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 675,
	343, 0, 409, 344, 345, 346, 410, 716, 0, 0,
	347, 0, 0, 0, 0, 348, 349, 350, 351, 352,
	628, 660, 649, 650, 647, 648, 639, 0, 626, 0,
	0, 0, 0, 624, 625, 0, 0, 189, 190, 0,
	0, 191, 635, 0, 0, 0, 677, 642, 638, 0,
	0, 192, 193, 194, 2586, 692, 356, 693, 195, 694,
	695, 0, 196, 360, 361, 197, 198, 645, 676, 696,
	697, 364, 0, 199, 688, 0, 668, 0, 200, 201,
	202, 0, 204, 205, 206, 203, 0, 207, 0, 208,
	209, 0, 722, 210, 211, 2588, 0, 669, 670, 672,
	0, 671, 673, 213, 214, 419, 215, 698, 216, 699,
	700, 630, 217, 0, 218, 0, 219, 0, 0, 691,
	221, 0, 222, 0, 0, 0, 633, 223, 225, 224,
	226, 678, 679, 656, 723, 0, 0, 0, 0, 0,
	227, 228, 701, 702, 703, 0, 229, 0, 230, 0,
	0, 724, 0, 231, 689, 0, 376, 0, 0, 232,
	233, 234, 235, 685, 687, 726, 0, 379, 239, 0,
	236, 0, 725, 237, 704, 238, 705, 706, 707, 708,
	709, 0, 667, 0, 727, 240, 241, 242, 728, 387,
	388, 243, 244, 245, 0, 247, 246, 0, 690, 729,
	248, 249, 730, 0, 250, 251, 0, 0, 252, 0,
	253, 731, 254, 255, 257, 390, 256, 732, 258, 259,
	261, 260, 627, 0, 657, 686, 262, 710, 263, 264,
	0, 265, 0, 0, 266, 0, 0, 267, 393, 733,
	268, 734, 680, 269, 270, 271, 272, 273, 274, 0,
	275, 681, 276, 396, 277, 0, 278, 279, 280, 281,
	282, 711, 283, 284, 0, 285, 286, 287, 288, 289,
	0, 291, 292, 290, 293, 294, 295, 296, 0, 297,
	735, 298, 299, 634, 300, 0, 304, 305, 306, 307,
	308, 0, 310, 399, 309, 311, 312, 674, 313, 301,
	302, 314, 736, 315, 712, 401, 316, 0, 0, 323,
	317, 318, 303, 319, 322, 713, 320, 321, 682, 0,
	324, 0, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 404, 714, 715, 0, 0, 333, 334, 683, 684,
	655, 335, 336, 2587, 338, 0, 0, 339, 340, 341,
	342, 675, 343, 0, 409, 344, 345, 346, 410, 716,
	0, 0, 347, 0, 0, 0, 0, 348, 349, 350,
	351, 352, 628, 660, 649, 650, 647, 648, 639, 0,
	626, 0, 0, 0, 0, 624, 625, 0, 0, 189,
	190, 0, 0, 191, 635, 0, 0, 0, 677, 642,
	638, 0, 0, 192, 193, 194, 354, 692, 356, 693,
	195, 694, 695, 0, 196, 360, 361, 197, 198, 645,
	676, 696, 697, 364, 0, 199, 688, 0, 668, 0,
	200, 201, 202, 0, 204, 205, 206, 203, 0, 207,
	0, 208, 209, 0, 722, 210, 211, 212, 0, 669,
	670, 672, 0, 671, 673, 213, 214, 419, 215, 698,
	216, 699, 700, 0, 217, 0, 218, 0, 219, 0,
	0, 691, 221, 0, 222, 0, 0, 0, 633, 223,
	225, 224, 226, 678, 679, 656, 723, 0, 0, 0,
	0, 0, 227, 228, 701, 702, 703, 0, 229, 0,
	230, 0, 0, 724, 0, 231, 689, 0, 376, 0,
	0, 232, 233, 234, 235, 685, 687, 726, 0, 379,
	239, 0, 236, 0, 725, 237, 704, 238, 705, 706,
	707, 708, 709, 0, 667, 0, 727, 240, 241, 242,
	728, 387, 388, 243, 244, 245, 0, 247, 246, 0,
	690, 729, 248, 249, 730, 0, 250, 251, 0, 0,
	252, 0, 253, 731, 254, 255, 257, 390, 256, 732,
	258, 259, 261, 260, 0, 0, 657, 686, 262, 710,
	263, 264, 0, 265, 0, 0, 266, 0, 0, 267,
	393, 733, 268, 734, 680, 269, 270, 271, 272, 273,
	274, 0, 275, 681, 276, 396, 277, 0, 278, 279,
	280, 281, 282, 711, 283, 284, 0, 285, 286, 287,
	288, 289, 0, 291, 292, 290, 293, 294, 295, 296,
	0, 297, 735, 298, 299, 1600, 300, 0, 304, 305,
	306, 307, 308, 0, 310, 399, 309, 311, 312, 674,
	313, 301, 302, 314, 736, 315, 712, 401, 316, 0,
	0, 323, 317, 318, 303, 319, 322, 713, 320, 321,
	682, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 714, 715, 0, 0, 333, 334,
	683, 684, 655, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 675, 343, 0, 409, 344, 345, 346,
	410, 716, 0, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 660, 649, 650, 647, 648, 639,
	0, 0, 1598, 0, 0, 0, 0, 1596, 1597, 0,
	189, 190, 0, 0, 191, 0, 1599, 0, 0, 677,
	642, 0, 638, 0, 192, 193, 194, 0, 692, 356,
	693, 195, 694, 695, 0, 196, 360, 361, 197, 198,
	645, 676, 696, 697, 364, 0, 199, 688, 0, 668,
	0, 200, 201, 202, 0, 204, 205, 206, 203, 0,
	207, 0, 208, 209, 0, 722, 210, 211, 2588, 0,
	669, 670, 672, 0, 671, 673, 213, 214, 419, 215,
	698, 216, 699, 700, 630, 217, 0, 218, 0, 219,
	0, 0, 691, 221, 0, 222, 0, 0, 0, 633,
	223, 225, 224, 226, 678, 679, 656, 723, 0, 0,
	0, 0, 0, 227, 228, 701, 702, 703, 0, 229,
	0, 230, 0, 0, 724, 0, 231, 689, 0, 376,
	0, 0, 232, 233, 234, 235, 685, 687, 0, 0,
	379, 239, 0, 236, 0, 725, 237, 704, 238, 705,
	706, 707, 708, 709, 0, 667, 0, 0, 240, 241,
	242, 728, 387, 388, 243, 244, 245, 0, 247, 246,
	0, 690, 729, 248, 249, 0, 0, 250, 251, 0,
	0, 252, 0, 253, 731, 254, 255, 257, 390, 256,
	732, 258, 259, 261, 260, 627, 0, 657, 686, 262,
	710, 263, 264, 0, 265, 0, 0, 266, 0, 0,
	267, 393, 733, 268, 734, 680, 269, 270, 271, 272,
	273, 274, 0, 275, 681, 276, 396, 277, 0, 278,
	279, 280, 281, 282, 711, 283, 284, 0, 285, 286,
	287, 288, 289, 0, 291, 292, 290, 293, 294, 295,
	296, 0, 297, 735, 298, 299, 634, 300, 0, 304,
	305, 306, 307, 308, 0, 310, 399, 309, 311, 312,
	674, 313, 301, 302, 314, 0, 315, 712, 401, 316,
	0, 0, 323, 317, 318, 303, 319, 322, 713, 320,
	321, 682, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 714, 715, 0, 0, 333,
	334, 683, 684, 655, 335, 336, 2587, 338, 0, 0,
	339, 340, 341, 342, 675, 343, 0, 409, 344, 345,
	346, 410, 716, 0, 0, 347, 0, 0, 0, 0,
	348, 349, 350, 351, 352, 660, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 624, 625,
	0, 189, 190, 0, 0, 191, 0, 635, 0, 0,
	677, 0, 0, 638, 0, 192, 193, 194, 354, 355,
	356, 357, 195, 358, 359, 0, 196, 360, 361, 197,
	198, 0, 676, 362, 363, 364, 0, 199, 688, 0,
	668, 0, 200, 201, 202, 0, 204, 205, 206, 203,
	0, 207, 0, 208, 209, 0, 722, 210, 211, 212,
	0, 669, 670, 672, 0, 671, 673, 213, 214, 419,
	215, 366, 216, 367, 368, 0, 217, 0, 218, 0,
	219, 0, 0, 220, 221, 0, 222, 0, 0, 0,
	369, 223, 225, 224, 226, 678, 679, 0, 723, 0,
	0, 0, 0, 0, 227, 228, 372, 373, 374, 0,
	229, 0, 230, 0, 0, 724, 0, 231, 689, 0,
	376, 0, 0, 232, 233, 234, 235, 685, 687, 726,
	0, 379, 239, 0, 236, 0, 725, 237, 380, 238,
	381, 382, 383, 384, 385, 0, 386, 0, 727, 240,
	241, 242, 728, 387, 388, 243, 244, 245, 0, 247,
	246, 0, 690, 729, 248, 249, 730, 0, 250, 251,
	0, 0, 252, 0, 253, 731, 254, 255, 257, 390,
	256, 732, 258, 259, 261, 260, 0, 0, 0, 686,
	262, 392, 263, 264, 0, 265, 0, 0, 266, 0,
	0, 267, 393, 733, 268, 734, 680, 269, 270, 271,
	272, 273, 274, 0, 275, 681, 276, 396, 277, 0,
	278, 279, 280, 281, 282, 397, 283, 284, 0, 285,
	286, 287, 288, 289, 0, 291, 292, 290, 293, 294,
	295, 296, 0, 297, 735, 298, 299, 398, 300, 0,
	304, 305, 306, 307, 308, 0, 310, 399, 309, 311,
	312, 674, 313, 301, 302, 314, 736, 315, 400, 401,
	316, 0, 0, 323, 317, 318, 303, 319, 322, 402,
	320, 321, 682, 0, 324, 0, 325, 326, 327, 328,
	329, 330, 331, 332, 0, 404, 405, 406, 0, 0,
	333, 334, 683, 684, 0, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 675, 343, 0, 409, 344,
	345, 346, 410, 411, 0, 0, 347, 952, 0, 792,
	0, 348, 349, 350, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 353, 0, 0, 0, 2197, 192,
	193, 194, 354, 355, 356, 357, 195, 358, 359, 0,
	196, 360, 361, 197, 198, 0, 0, 362, 363, 364,
	0, 199, 365, 0, 796, 0, 200, 201, 202, 0,
	204, 205, 206, 203, 0, 207, 0, 208, 209, 0,
	722, 210, 211, 212, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 419, 215, 366, 216, 367, 368, 0,
	217, 0, 218, 0, 219, 0, 0, 220, 221, 0,
	222, 0, 0, 0, 369, 223, 225, 224, 226, 370,
	371, 0, 723, 0, 0, 0, 0, 0, 227, 228,
	372, 373, 374, 0, 229, 0, 230, 0, 0, 724,
	0, 231, 375, 0, 376, 0, 0, 232, 233, 234,
	235, 377, 378, 726, 0, 379, 239, 0, 236, 0,
	725, 237, 380, 238, 381, 382, 383, 384, 385, 0,
	386, 0, 727, 240, 241, 242, 728, 387, 388, 243,
	244, 245, 0, 247, 246, 0, 389, 729, 248, 249,
	730, 0, 250, 251, 0, 0, 252, 0, 253, 731,
	254, 255, 257, 390, 256, 732, 258, 259, 261, 260,
	0, 0, 0, 391, 262, 392, 263, 264, 0, 265,
	0, 0, 266, 0, 0, 267, 393, 733, 268, 734,
	394, 269, 270, 271, 272, 273, 274, 0, 275, 395,
	276, 396, 277, 0, 278, 279, 280, 281, 282, 397,
	283, 284, 0, 285, 286, 287, 288, 289, 0, 291,
	292, 290, 293, 294, 295, 296, 0, 297, 735, 298,
	299, 398, 300, 0, 304, 305, 306, 307, 308, 147,
	310, 399, 309, 311, 312, 0, 313, 301, 302, 314,
	736, 315, 400, 401, 316, 0, 0, 323, 317, 318,
	303, 319, 322, 402, 320, 321, 403, 0, 324, 149,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	405, 406, 0, 0, 333, 334, 407, 408, 0, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 0,
	343, 0, 409, 344, 345, 346, 955, 411, 0, 0,
	347, 612, 0, 186, 141, 348, 349, 350, 351, 352,
	0, 142, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 353, 0,
	0, 0, 118, 192, 193, 194, 354, 355, 356, 357,
	195, 358, 359, 0, 196, 360, 361, 197, 198, 0,
	0, 362, 363, 364, 0, 199, 365, 0, 0, 0,
	200, 201, 202, 0, 204, 205, 206, 203, 0, 207,
	0, 208, 209, 0, 0, 210, 211, 212, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 419, 215, 366,
	216, 367, 368, 0, 217, 0, 218, 0, 219, 0,
	0, 220, 221, 0, 222, 0, 0, 0, 369, 223,
	225, 224, 226, 370, 371, 0, 0, 0, 0, 0,
	0, 0, 227, 228, 372, 373, 374, 0, 229, 0,
	230, 0, 0, 0, 0, 231, 375, 0, 376, 0,
	0, 232, 233, 234, 235, 377, 378, 0, 0, 379,
	239, 0, 236, 0, 0, 237, 380, 238, 381, 382,
	383, 384, 385, 0, 386, 0, 0, 240, 241, 242,
	0, 387, 388, 243, 244, 245, 0, 247, 246, 0,
	389, 0, 248, 249, 0, 0, 250, 251, 0, 0,
	252, 0, 253, 0, 254, 255, 257, 390, 256, 0,
	258, 259, 261, 260, 0, 0, 0, 391, 262, 392,
	263, 264, 0, 265, 0, 775, 266, 0, 0, 267,
	393, 0, 268, 0, 394, 269, 270, 271, 272, 273,
	274, 0, 275, 395, 276, 396, 277, 0, 278, 279,
	280, 281, 282, 397, 283, 284, 0, 285, 286, 287,
	288, 289, 0, 291, 292, 290, 293, 294, 295, 296,
	0, 297, 0, 298, 299, 398, 300, 0, 304, 305,
	306, 307, 308, 147, 310, 399, 309, 311, 312, 0,
	313, 301, 302, 314, 0, 315, 400, 401, 316, 0,
	0, 323, 317, 318, 303, 319, 322, 402, 320, 321,
	403, 0, 324, 149, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 405, 406, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	955, 411, 0, 0, 347, 0, 0, 186, 141, 348,
	349, 350, 351, 352, 0, 142, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 353, 0, 769, 0, 1225, 192, 193, 194,
	354, 355, 356, 357, 195, 358, 359, 0, 196, 360,
	361, 197, 198, 0, 0, 362, 363, 364, 0, 199,
	365, 0, 0, 0, 200, 201, 202, 0, 204, 205,
	206, 203, 0, 207, 0, 208, 209, 0, 0, 210,
	211, 212, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 419, 215, 366, 216, 367, 368, 0, 217, 0,
	218, 0, 219, 0, 0, 220, 221, 0, 222, 0,
	0, 0, 369, 223, 225, 224, 226, 370, 371, 0,
	0, 0, 0, 0, 0, 0, 227, 228, 372, 373,
	374, 0, 229, 0, 230, 0, 0, 0, 0, 231,
	375, 0, 376, 0, 0, 232, 233, 234, 235, 377,
	378, 0, 0, 379, 239, 0, 236, 0, 0, 237,
	380, 238, 381, 382, 383, 384, 385, 0, 386, 0,
	0, 240, 241, 242, 0, 387, 388, 243, 244, 245,
	0, 247, 246, 0, 389, 0, 248, 249, 0, 0,
	250, 251, 0, 0, 252, 0, 253, 0, 254, 255,
	257, 390, 256, 0, 258, 259, 261, 260, 0, 0,
	0, 391, 262, 392, 263, 264, 0, 265, 0, 775,
	266, 0, 0, 267, 393, 0, 268, 0, 394, 269,
	270, 271, 272, 273, 274, 0, 275, 395, 276, 396,
	277, 0, 278, 279, 280, 281, 282, 397, 283, 284,
	0, 285, 286, 287, 288, 289, 0, 291, 292, 290,
	293, 294, 295, 296, 0, 297, 0, 298, 299, 398,
	300, 0, 304, 305, 306, 307, 308, 147, 310, 399,
	309, 311, 312, 0, 313, 301, 302, 314, 0, 315,
	400, 401, 316, 0, 0, 323, 317, 318, 303, 319,
	322, 402, 320, 321, 403, 0, 324, 149, 325, 326,
	327, 328, 329, 330, 331, 332, 0, 404, 405, 406,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 955, 411, 0, 0, 347, 612,
	0, 186, 141, 348, 349, 350, 351, 352, 0, 142,
	0, 0, 0, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 353, 0, 769, 0,
	1225, 192, 193, 194, 354, 355, 356, 357, 195, 358,
	359, 0, 196, 360, 361, 197, 198, 0, 0, 362,
	363, 364, 0, 199, 365, 0, 0, 0, 200, 201,
	202, 0, 204, 205, 206, 203, 0, 207, 0, 208,
	209, 0, 0, 210, 211, 212, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 419, 215, 366, 216, 367,
	368, 0, 217, 0, 218, 0, 219, 0, 0, 220,
	221, 0, 222, 0, 0, 0, 369, 223, 225, 224,
	226, 370, 371, 0, 0, 0, 0, 0, 0, 0,
	227, 228, 372, 373, 374, 0, 229, 0, 230, 0,
	0, 0, 0, 231, 375, 0, 376, 0, 0, 232,
	233, 234, 235, 377, 378, 0, 0, 379, 239, 0,
	236, 0, 0, 237, 380, 238, 381, 382, 383, 384,
	385, 0, 386, 0, 0, 240, 241, 242, 0, 387,
	388, 243, 244, 245, 0, 247, 246, 0, 389, 0,
	248, 249, 0, 0, 250, 251, 0, 0, 252, 0,
	253, 0, 254, 255, 257, 390, 256, 0, 258, 259,
	261, 260, 0, 0, 0, 391, 262, 392, 263, 264,
	0, 265, 0, 0, 266, 0, 0, 267, 393, 0,
	268, 0, 394, 269, 270, 271, 272, 273, 274, 0,
	275, 395, 276, 396, 277, 0, 278, 279, 280, 281,
	282, 397, 283, 284, 0, 285, 286, 287, 288, 289,
	0, 291, 292, 290, 293, 294, 295, 296, 0, 297,
	0, 298, 299, 398, 300, 0, 304, 305, 306, 307,
	308, 147, 310, 399, 309, 311, 312, 0, 313, 301,
	302, 314, 0, 315, 400, 401, 316, 0, 0, 323,
	317, 318, 303, 319, 322, 402, 320, 321, 403, 0,
	324, 149, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 404, 405, 406, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 955, 411,
	0, 0, 347, 1937, 0, 186, 141, 348, 349, 350,
	351, 352, 0, 142, 0, 0, 0, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	353, 0, 0, 0, 118, 192, 193, 194, 354, 355,
	356, 357, 195, 358, 359, 0, 196, 360, 361, 197,
	198, 0, 0, 362, 363, 364, 0, 199, 365, 0,
	0, 0, 200, 201, 202, 0, 204, 205, 206, 203,
	0, 207, 0, 208, 209, 0, 0, 210, 211, 212,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 419,
	215, 366, 216, 367, 368, 0, 217, 0, 218, 0,
	219, 0, 0, 220, 221, 0, 222, 0, 0, 0,
	369, 223, 225, 224, 226, 370, 371, 0, 0, 0,
	0, 0, 0, 0, 227, 228, 372, 373, 374, 0,
	229, 0, 230, 0, 0, 0, 0, 231, 375, 0,
	376, 0, 0, 232, 233, 234, 235, 377, 378, 0,
	0, 379, 239, 0, 236, 0, 0, 237, 380, 238,
	381, 382, 383, 384, 385, 0, 386, 0, 0, 240,
	241, 242, 0, 387, 388, 243, 244, 245, 0, 247,
	246, 0, 389, 0, 248, 249, 0, 0, 250, 251,
	0, 0, 252, 0, 253, 0, 254, 255, 257, 390,
	256, 0, 258, 259, 261, 260, 0, 0, 0, 391,
	262, 392, 263, 264, 0, 265, 0, 775, 266, 0,
	0, 267, 393, 0, 268, 0, 394, 269, 270, 271,
	272, 273, 274, 0, 275, 395, 276, 396, 277, 0,
	278, 279, 280, 281, 282, 397, 283, 284, 0, 285,
	286, 287, 288, 289, 0, 291, 292, 290, 293, 294,
	295, 296, 0, 297, 0, 298, 299, 398, 300, 0,
	304, 305, 306, 307, 308, 0, 310, 399, 309, 311,
	312, 0, 313, 301, 302, 314, 0, 315, 400, 401,
	316, 0, 0, 323, 317, 318, 303, 319, 322, 402,
	320, 321, 403, 0, 324, 0, 325, 326, 327, 328,
	329, 330, 331, 332, 0, 404, 405, 406, 0, 0,
	333, 334, 407, 408, 0, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 0, 343, 0, 409, 344,
	345, 346, 410, 411, 0, 0, 347, 768, 0, 186,
	0, 348, 349, 350, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 353, 0, 769, 0, 774, 192,
	193, 194, 354, 355, 356, 357, 195, 358, 359, 0,
	196, 360, 361, 197, 198, 0, 0, 362, 363, 364,
	0, 199, 365, 0, 0, 0, 200, 201, 202, 0,
	204, 205, 206, 203, 0, 207, 0, 208, 209, 0,
	0, 210, 211, 212, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 419, 215, 366, 216, 367, 368, 0,
	217, 0, 218, 0, 219, 0, 0, 220, 221, 0,
	222, 0, 0, 0, 369, 223, 225, 224, 226, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 227, 228,
	372, 373, 374, 0, 229, 0, 230, 0, 0, 0,
	0, 231, 375, 0, 376, 0, 0, 232, 233, 234,
	235, 377, 378, 0, 0, 379, 239, 0, 236, 0,
	0, 237, 380, 238, 381, 382, 383, 384, 385, 0,
	386, 0, 0, 240, 241, 242, 0, 387, 388, 243,
	244, 245, 0, 247, 246, 0, 389, 0, 248, 249,
	0, 0, 250, 251, 0, 0, 252, 0, 253, 0,
	254, 255, 257, 390, 256, 0, 258, 259, 261, 260,
	0, 0, 0, 391, 262, 392, 263, 264, 0, 265,
	0, 775, 266, 0, 0, 267, 393, 0, 268, 0,
	394, 269, 270, 271, 272, 273, 274, 0, 275, 395,
	276, 396, 277, 0, 278, 279, 280, 281, 282, 397,
	283, 284, 0, 285, 286, 287, 288, 289, 0, 291,
	292, 290, 293, 294, 295, 296, 0, 297, 0, 298,
	299, 398, 300, 0, 304, 305, 306, 307, 308, 0,
	310, 399, 309, 311, 312, 0, 313, 301, 302, 314,
	0, 315, 400, 401, 316, 0, 0, 323, 317, 318,
	303, 319, 322, 402, 320, 321, 403, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	405, 406, 0, 0, 333, 334, 407, 408, 0, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 0,
	343, 0, 409, 344, 345, 346, 410, 411, 0, 0,
	347, 0, 0, 186, 0, 348, 349, 350, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 353, 0,
	769, 0, 774, 192, 193, 194, 354, 355, 356, 357,
	195, 358, 359, 0, 196, 360, 361, 197, 198, 0,
	0, 362, 363, 364, 0, 199, 365, 0, 0, 0,
	200, 201, 202, 0, 204, 205, 206, 203, 0, 207,
	0, 208, 209, 0, 0, 210, 211, 212, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 419, 215, 366,
	216, 367, 368, 0, 217, 0, 218, 0, 219, 0,
	0, 220, 221, 0, 222, 0, 0, 0, 369, 223,
	225, 224, 226, 370, 371, 0, 0, 0, 0, 0,
	0, 0, 227, 228, 372, 373, 374, 0, 229, 0,
	230, 0, 0, 0, 0, 231, 375, 0, 376, 0,
	0, 232, 233, 234, 235, 377, 378, 0, 0, 379,
	239, 0, 236, 0, 0, 237, 380, 238, 381, 382,
	383, 384, 385, 0, 386, 0, 0, 240, 241, 242,
	0, 387, 388, 243, 244, 245, 0, 247, 246, 0,
	389, 0, 248, 249, 0, 0, 250, 251, 0, 0,
	252, 0, 253, 0, 254, 255, 257, 390, 256, 0,
	258, 259, 261, 260, 0, 0, 0, 391, 262, 392,
	263, 264, 0, 265, 0, 775, 266, 0, 0, 267,
	393, 0, 268, 0, 394, 269, 270, 271, 272, 273,
	274, 0, 275, 395, 276, 396, 277, 0, 278, 279,
	280, 281, 282, 397, 283, 284, 0, 285, 286, 287,
	288, 289, 0, 291, 292, 290, 293, 294, 295, 296,
	0, 297, 0, 298, 299, 398, 300, 0, 304, 305,
	306, 307, 308, 0, 310, 399, 309, 311, 312, 0,
	313, 301, 302, 314, 0, 315, 400, 401, 316, 0,
	0, 323, 317, 318, 303, 319, 322, 402, 320, 321,
	403, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 405, 406, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 0, 0, 347, 0, 0, 186, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 353, 0, 769, 0, 774, 192, 193, 194,
	354, 355, 356, 357, 195, 358, 359, 0, 196, 360,
	361, 197, 198, 0, 0, 362, 363, 364, 0, 199,
	365, 0, 0, 0, 200, 201, 202, 0, 204, 205,
	206, 203, 0, 207, 0, 208, 209, 0, 0, 210,
	211, 212, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 419, 215, 366, 216, 367, 368, 0, 217, 0,
	218, 0, 219, 0, 0, 220, 221, 0, 222, 0,
	0, 0, 369, 223, 225, 224, 226, 370, 371, 0,
	0, 0, 0, 0, 0, 0, 227, 228, 372, 373,
	374, 0, 229, 0, 230, 0, 0, 0, 0, 231,
	375, 0, 376, 0, 0, 232, 233, 234, 235, 377,
	378, 0, 0, 379, 239, 0, 236, 0, 0, 237,
	380, 238, 381, 382, 383, 384, 385, 0, 386, 0,
	0, 240, 241, 242, 0, 387, 388, 243, 244, 245,
	0, 247, 246, 0, 389, 0, 248, 249, 0, 0,
	250, 251, 0, 0, 252, 0, 253, 0, 254, 255,
	257, 390, 256, 0, 258, 259, 261, 260, 0, 0,
	0, 391, 262, 392, 263, 264, 0, 265, 0, 0,
	266, 0, 0, 267, 393, 0, 268, 0, 394, 269,
	270, 271, 272, 273, 274, 0, 275, 395, 276, 396,
	277, 0, 278, 279, 280, 281, 282, 397, 283, 284,
	0, 285, 286, 287, 288, 289, 0, 291, 292, 290,
	293, 294, 295, 296, 0, 297, 0, 298, 299, 398,
	300, 0, 304, 305, 306, 307, 308, 0, 310, 399,
	309, 311, 312, 0, 313, 301, 302, 314, 0, 315,
	400, 401, 316, 0, 0, 323, 317, 318, 303, 319,
	322, 402, 320, 321, 403, 0, 324, 0, 325, 326,
	327, 328, 329, 330, 331, 332, 0, 404, 405, 406,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 410, 411, 0, 0, 347, 0,
	0, 0, 186, 348, 349, 350, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 353, 0, 0,
	0, 1263, 192, 193, 194, 354, 355, 356, 357, 195,
	358, 359, 0, 196, 360, 361, 197, 198, 0, 0,
	362, 363, 364, 0, 199, 365, 0, 0, 0, 200,
	201, 202, 0, 204, 205, 206, 203, 0, 207, 0,
	208, 209, 0, 0, 210, 211, 212, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 419, 215, 366, 216,
	367, 368, 0, 217, 0, 218, 0, 219, 0, 0,
	220, 221, 0, 222, 0, 0, 0, 369, 223, 225,
	224, 226, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 227, 228, 372, 373, 374, 0, 229, 0, 230,
	0, 0, 0, 0, 231, 375, 0, 376, 0, 0,
	232, 233, 234, 235, 377, 378, 0, 0, 379, 239,
	0, 236, 0, 0, 237, 380, 238, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 240, 241, 242, 0,
	387, 388, 243, 244, 245, 0, 247, 246, 0, 389,
	0, 248, 249, 0, 0, 250, 251, 0, 0, 252,
	0, 253, 0, 254, 255, 257, 390, 256, 0, 258,
	259, 261, 260, 0, 0, 0, 391, 262, 392, 263,
	264, 0, 265, 0, 0, 266, 0, 0, 267, 393,
	0, 268, 0, 394, 269, 270, 271, 272, 273, 274,
	0, 275, 395, 276, 396, 277, 0, 278, 279, 280,
	281, 282, 397, 283, 284, 0, 285, 286, 287, 288,
	289, 0, 291, 292, 290, 293, 294, 295, 296, 0,
	297, 0, 298, 299, 398, 300, 0, 304, 305, 306,
	307, 308, 0, 310, 399, 309, 311, 312, 0, 313,
	301, 302, 314, 0, 315, 400, 401, 316, 0, 0,
	323, 317, 318, 303, 319, 322, 402, 320, 321, 403,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 405, 406, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	411, 0, 0, 347, 0, 0, 186, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 353, 0, 0, 0, 1747, 192, 193, 194, 354,
	355, 356, 357, 195, 358, 359, 0, 196, 360, 361,
	197, 198, 0, 0, 362, 363, 364, 0, 199, 365,
	0, 0, 0, 200, 201, 202, 0, 204, 205, 206,
	203, 0, 207, 0, 208, 209, 0, 0, 210, 211,
	212, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	419, 215, 366, 216, 367, 368, 0, 217, 0, 218,
	0, 219, 0, 0, 220, 221, 0, 222, 0, 0,
	0, 369, 223, 225, 224, 226, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 227, 228, 372, 373, 374,
	0, 229, 0, 230, 0, 0, 0, 0, 231, 375,
	0, 376, 0, 0, 232, 233, 234, 235, 377, 378,
	0, 0, 379, 239, 0, 236, 0, 0, 237, 380,
	238, 381, 382, 383, 384, 385, 0, 386, 0, 0,
	240, 241, 242, 0, 387, 388, 243, 244, 245, 0,
	247, 246, 0, 389, 0, 248, 249, 0, 0, 250,
	251, 0, 0, 252, 0, 253, 0, 254, 255, 257,
	390, 256, 0, 258, 259, 261, 260, 0, 0, 0,
	391, 262, 392, 263, 264, 0, 265, 0, 0, 266,
	0, 0, 267, 393, 0, 268, 0, 394, 269, 270,
	271, 272, 273, 274, 0, 275, 395, 276, 396, 277,
	0, 278, 279, 280, 281, 282, 397, 283, 284, 0,
	285, 286, 287, 288, 289, 0, 291, 292, 290, 293,
	294, 295, 296, 0, 297, 0, 298, 299, 398, 300,
	0, 304, 305, 306, 307, 308, 0, 310, 399, 309,
	311, 312, 0, 313, 301, 302, 314, 0, 315, 400,
	401, 316, 0, 0, 323, 317, 318, 303, 319, 322,
	402, 320, 321, 403, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 405, 406, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 410, 411, 0, 0, 347, 0, 0,
	186, 0, 348, 349, 350, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 353, 0, 0, 0, 2113,
	192, 193, 194, 354, 355, 356, 357, 195, 358, 359,
	0, 196, 360, 361, 197, 198, 0, 0, 362, 363,
	364, 0, 199, 365, 0, 0, 0, 200, 201, 202,
	0, 204, 205, 206, 203, 0, 207, 0, 208, 209,
	0, 0, 210, 211, 212, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 419, 215, 366, 216, 367, 368,
	0, 217, 0, 218, 0, 219, 0, 0, 220, 221,
	0, 222, 0, 0, 0, 369, 223, 225, 224, 226,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 227,
	228, 372, 373, 374, 0, 229, 0, 230, 0, 0,
	0, 0, 231, 375, 0, 376, 0, 0, 232, 233,
	234, 235, 377, 378, 0, 0, 379, 239, 0, 236,
	0, 0, 237, 380, 238, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 240, 241, 242, 0, 387, 388,
	243, 244, 245, 0, 247, 246, 0, 389, 0, 248,
	249, 0, 0, 250, 251, 0, 0, 252, 0, 253,
	0, 254, 255, 257, 390, 256, 0, 258, 259, 261,
	260, 0, 0, 0, 391, 262, 392, 263, 264, 0,
	265, 0, 0, 266, 0, 0, 267, 393, 0, 268,
	0, 394, 269, 270, 271, 272, 273, 274, 0, 275,
	395, 276, 396, 277, 0, 278, 279, 280, 281, 282,
	397, 283, 284, 0, 285, 286, 287, 288, 289, 0,
	291, 292, 290, 293, 294, 295, 296, 0, 297, 0,
	298, 299, 398, 300, 0, 304, 305, 306, 307, 308,
	0, 310, 399, 309, 311, 312, 0, 313, 301, 302,
	314, 0, 315, 400, 401, 316, 0, 0, 323, 317,
	318, 303, 319, 322, 402, 320, 321, 403, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 405, 406, 0, 0, 333, 334, 407, 408, 0,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 0, 409, 344, 345, 346, 410, 411, 0,
	0, 347, 0, 0, 0, 0, 348, 349, 350, 351,
	352, 660, 649, 650, 647, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 1228, 0, 0, 353, 0, 0, 0,
	0, 192, 193, 194, 354, 692, 356, 693, 195, 694,
	695, 0, 196, 360, 361, 197, 198, 0, 0, 696,
	697, 364, 0, 199, 365, 0, 796, 0, 200, 201,
	202, 0, 204, 205, 206, 203, 0, 207, 0, 208,
	209, 0, 722, 210, 211, 212, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 419, 215, 698, 216, 699,
	700, 0, 217, 0, 218, 0, 219, 0, 0, 691,
	221, 0, 222, 0, 0, 0, 369, 223, 225, 224,
	226, 370, 371, 656, 723, 0, 0, 0, 0, 0,
	227, 228, 701, 702, 703, 0, 229, 0, 230, 0,
	0, 724, 0, 231, 375, 0, 376, 0, 0, 232,
	233, 234, 235, 377, 378, 726, 0, 379, 239, 0,
	236, 0, 725, 237, 704, 238, 705, 706, 707, 708,
	709, 0, 667, 0, 727, 240, 241, 242, 728, 387,
	388, 243, 244, 245, 0, 247, 246, 0, 389, 729,
	248, 249, 730, 0, 250, 251, 0, 0, 252, 0,
	253, 731, 254, 255, 257, 390, 256, 732, 258, 259,
	261, 260, 0, 0, 657, 391, 262, 710, 263, 264,
	0, 265, 0, 0, 266, 0, 0, 267, 393, 733,
	268, 734, 394, 269, 270, 271, 272, 273, 274, 0,
	275, 395, 276, 396, 277, 0, 278, 279, 280, 281,
	282, 711, 283, 284, 0, 285, 286, 287, 288, 289,
	0, 291, 292, 290, 293, 294, 295, 296, 0, 297,
	735, 298, 299, 398, 300, 0, 304, 305, 306, 307,
	308, 0, 310, 399, 309, 311, 312, 0, 313, 301,
	302, 314, 736, 315, 712, 401, 316, 0, 0, 323,
	317, 318, 303, 319, 322, 713, 320, 321, 403, 0,
	324, 0, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 404, 714, 715, 0, 0, 333, 334, 407, 408,
	655, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 716,
	0, 0, 347, 0, 0, 0, 0, 348, 349, 350,
	351, 352, 1008, 0, 792, 791, 0, 0, 0, 789,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 353,
	0, 0, 0, 0, 192, 193, 194, 354, 355, 356,
	357, 195, 358, 359, 0, 196, 360, 361, 197, 198,
	0, 0, 362, 363, 364, 0, 199, 365, 0, 796,
	0, 200, 201, 202, 0, 204, 205, 206, 203, 0,
	207, 0, 208, 209, 0, 722, 210, 211, 212, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 419, 215,
	366, 216, 367, 368, 0, 217, 0, 218, 0, 219,
	0, 0, 220, 221, 0, 222, 0, 0, 0, 369,
	223, 225, 224, 226, 370, 371, 0, 723, 0, 0,
	0, 0, 0, 227, 228, 372, 373, 374, 0, 229,
	0, 230, 0, 0, 724, 0, 231, 375, 0, 376,
	0, 0, 232, 233, 234, 235, 377, 378, 726, 0,
	379, 239, 0, 236, 0, 725, 237, 380, 238, 381,
	382, 383, 384, 385, 0, 386, 0, 727, 240, 241,
	242, 728, 387, 388, 243, 244, 245, 0, 247, 246,
	0, 389, 729, 248, 249, 730, 0, 250, 251, 0,
	0, 252, 0, 253, 731, 254, 255, 257, 390, 256,
	732, 258, 259, 261, 260, 0, 0, 0, 391, 262,
	392, 263, 264, 0, 265, 0, 0, 266, 0, 0,
	267, 393, 733, 268, 734, 394, 269, 270, 271, 272,
	273, 274, 0, 275, 395, 276, 396, 277, 0, 278,
	279, 280, 281, 282, 397, 283, 284, 0, 285, 286,
	287, 288, 289, 0, 291, 292, 290, 293, 294, 295,
	296, 0, 297, 735, 298, 299, 398, 300, 0, 304,
	305, 306, 307, 308, 0, 310, 399, 309, 311, 312,
	0, 313, 301, 302, 314, 736, 315, 400, 401, 316,
	0, 0, 323, 317, 318, 303, 319, 322, 402, 320,
	321, 403, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 405, 406, 0, 0, 333,
	334, 407, 408, 0, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 410, 411, 0, 0, 347, 0, 0, 0, 0,
	348, 349, 350, 351, 352, 947, 0, 792, 791, 0,
	0, 0, 789, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 353, 0, 0, 0, 0, 192, 193, 194,
	354, 355, 356, 357, 195, 358, 359, 0, 196, 360,
	361, 197, 198, 0, 0, 362, 363, 364, 0, 199,
	365, 0, 796, 0, 200, 201, 202, 0, 204, 205,
	206, 203, 0, 207, 0, 208, 209, 0, 722, 210,
	211, 212, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 419, 215, 366, 216, 367, 368, 0, 217, 0,
	218, 0, 219, 0, 0, 220, 221, 0, 222, 0,
	0, 0, 369, 223, 225, 224, 226, 370, 371, 0,
	723, 0, 0, 0, 0, 0, 227, 228, 372, 373,
	374, 0, 229, 0, 230, 0, 0, 724, 0, 231,
	375, 0, 376, 0, 0, 232, 233, 234, 235, 946,
	378, 726, 0, 379, 239, 0, 236, 0, 725, 237,
	380, 238, 381, 382, 383, 384, 385, 0, 386, 0,
	727, 240, 241, 242, 728, 387, 388, 243, 244, 245,
	0, 247, 246, 0, 389, 729, 248, 249, 730, 0,
	250, 251, 0, 0, 252, 0, 253, 731, 254, 255,
	257, 390, 256, 732, 258, 259, 261, 260, 0, 0,
	0, 391, 262, 392, 263, 264, 0, 265, 0, 0,
	266, 0, 0, 267, 393, 733, 268, 734, 394, 269,
	270, 271, 272, 273, 274, 0, 275, 395, 276, 396,
	277, 0, 278, 279, 280, 281, 282, 397, 283, 284,
	0, 285, 286, 287, 288, 289, 0, 291, 292, 290,
	293, 294, 295, 296, 0, 297, 735, 298, 299, 398,
	300, 0, 304, 305, 306, 307, 308, 0, 310, 399,
	309, 311, 312, 0, 313, 301, 302, 314, 736, 315,
	400, 401, 316, 0, 0, 323, 317, 318, 303, 319,
	322, 402, 320, 321, 403, 0, 324, 0, 325, 326,
	327, 328, 329, 330, 331, 332, 0, 404, 405, 406,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 410, 411, 0, 0, 347, 0,
	0, 0, 0, 348, 349, 350, 351, 352, 913, 0,
	792, 791, 0, 0, 0, 789, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	192, 193, 194, 354, 355, 356, 357, 195, 358, 359,
	0, 196, 360, 361, 197, 198, 0, 0, 362, 363,
	364, 0, 199, 365, 0, 796, 0, 200, 201, 202,
	0, 204, 205, 206, 203, 0, 207, 0, 208, 209,
	0, 722, 210, 211, 212, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 419, 215, 366, 216, 367, 368,
	0, 217, 0, 218, 0, 219, 0, 0, 220, 221,
	0, 222, 0, 0, 0, 369, 223, 225, 224, 226,
	370, 371, 0, 723, 0, 0, 0, 0, 0, 227,
	228, 372, 373, 374, 0, 229, 0, 230, 0, 0,
	724, 0, 231, 375, 0, 376, 0, 0, 232, 233,
	234, 235, 912, 378, 726, 0, 379, 239, 0, 236,
	0, 725, 237, 380, 238, 381, 382, 383, 384, 385,
	0, 386, 0, 727, 240, 241, 242, 728, 387, 388,
	243, 244, 245, 0, 247, 246, 0, 389, 729, 248,
	249, 730, 0, 250, 251, 0, 0, 252, 0, 253,
	731, 254, 255, 257, 390, 256, 732, 258, 259, 261,
	260, 0, 0, 0, 391, 262, 392, 263, 264, 0,
	265, 0, 0, 266, 0, 0, 267, 393, 733, 268,
	734, 394, 269, 270, 271, 272, 273, 274, 0, 275,
	395, 276, 396, 277, 0, 278, 279, 280, 281, 282,
	397, 283, 284, 0, 285, 286, 287, 288, 289, 0,
	291, 292, 290, 293, 294, 295, 296, 0, 297, 735,
	298, 299, 398, 300, 0, 304, 305, 306, 307, 308,
	0, 310, 399, 309, 311, 312, 0, 313, 301, 302,
	314, 736, 315, 400, 401, 316, 0, 0, 323, 317,
	318, 303, 319, 322, 402, 320, 321, 403, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 405, 406, 0, 0, 333, 334, 407, 408, 0,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 0, 409, 344, 345, 346, 410, 411, 0,
	0, 347, 0, 0, 0, 0, 348, 349, 350, 351,
	352, 785, 0, 792, 791, 0, 0, 0, 789, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 192, 193, 194, 354, 355, 356, 357,
	195, 358, 359, 0, 196, 360, 361, 197, 198, 0,
	0, 362, 363, 364, 0, 199, 365, 0, 796, 0,
	200, 201, 202, 0, 204, 205, 206, 203, 0, 207,
	0, 208, 209, 0, 722, 210, 211, 212, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 419, 215, 366,
	216, 367, 368, 0, 217, 0, 218, 0, 219, 0,
	0, 220, 221, 0, 222, 0, 0, 0, 369, 223,
	225, 224, 226, 370, 371, 0, 723, 0, 0, 0,
	0, 0, 227, 228, 372, 373, 374, 0, 229, 0,
	230, 0, 0, 724, 0, 231, 375, 0, 376, 0,
	0, 232, 233, 234, 235, 787, 378, 726, 0, 379,
	239, 0, 236, 0, 725, 237, 380, 238, 381, 382,
	383, 384, 385, 0, 386, 0, 727, 240, 241, 242,
	728, 387, 388, 243, 244, 245, 0, 247, 246, 0,
	389, 729, 248, 249, 730, 0, 250, 251, 0, 0,
	252, 0, 253, 731, 254, 255, 257, 390, 256, 732,
	258, 259, 261, 260, 0, 0, 0, 391, 262, 392,
	263, 264, 0, 265, 0, 0, 266, 0, 0, 267,
	393, 733, 268, 734, 394, 269, 270, 271, 272, 273,
	274, 0, 275, 395, 276, 396, 277, 0, 278, 279,
	280, 281, 282, 397, 283, 284, 0, 285, 286, 287,
	288, 289, 0, 291, 292, 290, 293, 294, 295, 296,
	0, 297, 735, 298, 299, 398, 300, 0, 304, 305,
	306, 307, 308, 0, 310, 399, 309, 311, 312, 0,
	313, 301, 302, 314, 736, 315, 400, 401, 316, 0,
	0, 323, 317, 318, 303, 319, 322, 402, 320, 321,
	403, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 405, 406, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 0, 502, 347, 186, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	353, 0, 0, 0, 0, 192, 193, 194, 354, 355,
	356, 357, 195, 358, 359, 0, 196, 360, 361, 197,
	198, 0, 0, 362, 363, 364, 0, 199, 365, 0,
	0, 0, 200, 201, 202, 0, 204, 205, 206, 203,
	0, 207, 0, 208, 209, 0, 0, 210, 211, 212,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 182,
	215, 366, 216, 367, 368, 0, 217, 0, 218, 0,
	219, 0, 0, 220, 221, 0, 222, 0, 0, 0,
	369, 223, 225, 224, 226, 370, 371, 0, 0, 0,
	0, 0, 0, 0, 227, 228, 372, 373, 374, 0,
	229, 0, 230, 0, 0, 0, 0, 231, 375, 0,
	376, 0, 0, 232, 233, 234, 235, 377, 378, 0,
	0, 379, 239, 0, 236, 0, 0, 237, 380, 238,
	381, 382, 383, 384, 385, 0, 386, 0, 0, 240,
	241, 242, 0, 387, 388, 243, 244, 245, 0, 247,
	246, 0, 389, 0, 248, 249, 0, 0, 250, 251,
	0, 0, 252, 0, 253, 0, 254, 255, 257, 390,
	256, 0, 258, 259, 261, 260, 0, 0, 0, 391,
	262, 392, 263, 264, 0, 265, 0, 0, 266, 0,
	0, 267, 393, 0, 268, 0, 394, 269, 270, 271,
	272, 273, 274, 0, 275, 395, 276, 396, 277, 0,
	278, 279, 280, 281, 282, 397, 283, 284, 0, 285,
	286, 287, 288, 289, 0, 291, 292, 290, 293, 294,
	295, 296, 0, 297, 0, 298, 299, 398, 300, 0,
	304, 305, 306, 307, 308, 0, 310, 399, 309, 311,
	312, 0, 313, 301, 302, 314, 0, 315, 400, 401,
	316, 0, 0, 323, 317, 318, 303, 319, 322, 402,
	320, 321, 403, 0, 324, 181, 325, 326, 327, 328,
	329, 330, 331, 332, 0, 404, 405, 406, 0, 0,
	333, 334, 407, 408, 0, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 0, 343, 0, 409, 344,
	345, 346, 410, 411, 0, 179, 347, 186, 0, 0,
	0, 348, 349, 350, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 185, 353, 0, 0, 0, 0, 192, 193, 194,
	354, 355, 356, 357, 195, 358, 359, 0, 196, 360,
	361, 197, 198, 0, 0, 362, 363, 364, 0, 199,
	365, 0, 0, 0, 200, 201, 202, 0, 204, 205,
	206, 203, 0, 207, 0, 208, 209, 0, 0, 210,
	211, 212, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 182, 215, 366, 216, 367, 368, 0, 217, 0,
	218, 0, 219, 0, 0, 220, 221, 0, 222, 0,
	0, 0, 369, 223, 225, 224, 226, 370, 371, 0,
	0, 0, 0, 0, 0, 0, 227, 228, 372, 373,
	374, 0, 229, 0, 230, 0, 0, 0, 0, 231,
	375, 0, 376, 0, 0, 232, 233, 234, 235, 377,
	378, 0, 0, 379, 239, 0, 236, 0, 0, 237,
	380, 238, 381, 382, 383, 384, 385, 0, 386, 0,
	0, 240, 241, 242, 0, 387, 388, 243, 244, 245,
	0, 247, 246, 0, 389, 0, 248, 249, 0, 0,
	250, 251, 0, 0, 252, 0, 253, 0, 254, 255,
	257, 390, 256, 0, 258, 259, 261, 260, 0, 0,
	0, 391, 262, 392, 263, 264, 0, 265, 0, 0,
	266, 0, 0, 267, 393, 0, 268, 0, 394, 269,
	270, 271, 272, 273, 274, 0, 275, 395, 276, 396,
	277, 0, 278, 279, 280, 281, 282, 397, 283, 284,
	0, 285, 286, 287, 288, 289, 0, 291, 292, 290,
	293, 294, 295, 296, 0, 297, 0, 298, 299, 398,
	300, 0, 304, 305, 306, 307, 308, 0, 310, 399,
	309, 311, 312, 0, 313, 301, 302, 314, 0, 315,
	400, 401, 316, 0, 0, 323, 317, 318, 303, 319,
	322, 402, 320, 321, 403, 0, 324, 181, 325, 326,
	327, 328, 329, 330, 331, 332, 0, 404, 405, 406,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 410, 411, 792, 791, 347, 0,
	0, 789, 0, 348, 349, 350, 351, 352, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 353, 0, 185, 0, 0, 192, 193, 194, 354,
	355, 356, 357, 195, 358, 359, 0, 196, 360, 361,
	197, 198, 0, 0, 362, 363, 364, 0, 199, 365,
	0, 796, 0, 200, 201, 202, 0, 204, 205, 206,
	203, 0, 207, 0, 208, 209, 0, 722, 210, 211,
	212, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	419, 215, 366, 216, 367, 368, 0, 217, 0, 218,
	0, 219, 0, 0, 220, 221, 0, 222, 0, 0,
	0, 369, 223, 225, 224, 226, 370, 371, 0, 723,
	0, 0, 0, 0, 0, 227, 228, 372, 373, 374,
	0, 229, 0, 230, 0, 0, 724, 0, 231, 375,
	0, 376, 0, 0, 232, 233, 234, 235, 377, 378,
	726, 0, 379, 239, 0, 236, 0, 725, 237, 380,
	238, 381, 382, 383, 384, 385, 0, 386, 0, 727,
	240, 241, 242, 728, 387, 388, 243, 244, 245, 0,
	247, 246, 0, 389, 729, 248, 249, 730, 0, 250,
	251, 0, 0, 252, 0, 253, 731, 254, 255, 257,
	390, 256, 732, 258, 259, 261, 260, 0, 0, 0,
	391, 262, 392, 263, 264, 0, 265, 0, 0, 266,
	0, 0, 267, 393, 733, 268, 734, 394, 269, 270,
	271, 272, 273, 274, 0, 275, 395, 276, 396, 277,
	0, 278, 279, 280, 281, 282, 397, 283, 284, 0,
	285, 286, 287, 288, 289, 0, 291, 292, 290, 293,
	294, 295, 296, 0, 297, 735, 298, 299, 398, 300,
	0, 304, 305, 306, 307, 308, 0, 310, 399, 309,
	311, 312, 0, 313, 301, 302, 314, 736, 315, 400,
	401, 316, 0, 0, 323, 317, 318, 303, 319, 322,
	402, 320, 321, 403, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 405, 406, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 410, 411, 186, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 351, 352, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	353, 0, 0, 0, 0, 192, 193, 194, 354, 355,
	356, 357, 195, 358, 359, 0, 196, 360, 361, 197,
	198, 0, 0, 362, 363, 364, 0, 199, 365, 0,
	0, 0, 200, 201, 202, 0, 204, 205, 206, 203,
	0, 207, 0, 208, 209, 0, 0, 210, 211, 212,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 182,
	215, 366, 216, 367, 368, 0, 217, 0, 218, 0,
	219, 0, 0, 220, 221, 0, 222, 0, 0, 0,
	369, 223, 225, 224, 226, 370, 371, 0, 0, 0,
	0, 0, 0, 0, 227, 228, 372, 373, 374, 0,
	229, 0, 230, 0, 0, 0, 0, 231, 375, 0,
	376, 0, 0, 232, 233, 234, 235, 377, 378, 0,
	0, 379, 239, 0, 236, 0, 0, 237, 380, 238,
	381, 382, 383, 384, 385, 0, 386, 0, 0, 240,
	241, 242, 0, 387, 388, 243, 244, 245, 0, 247,
	246, 0, 389, 0, 248, 249, 0, 0, 250, 251,
	0, 0, 252, 0, 253, 0, 254, 255, 257, 390,
	256, 0, 258, 259, 261, 260, 0, 0, 0, 391,
	262, 392, 263, 264, 0, 265, 0, 0, 266, 0,
	0, 267, 393, 0, 268, 0, 394, 269, 270, 271,
	272, 273, 274, 0, 275, 395, 276, 396, 277, 0,
	278, 279, 280, 281, 282, 397, 283, 284, 0, 285,
	286, 287, 288, 289, 0, 291, 292, 290, 293, 294,
	295, 296, 0, 297, 0, 298, 299, 398, 300, 0,
	304, 305, 306, 307, 308, 0, 310, 399, 309, 311,
	312, 0, 313, 301, 302, 314, 0, 315, 400, 401,
	316, 0, 0, 323, 317, 318, 303, 319, 322, 402,
	320, 321, 403, 0, 324, 181, 325, 326, 327, 328,
	329, 330, 331, 332, 0, 404, 405, 406, 0, 0,
	333, 334, 407, 408, 0, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 0, 343, 0, 409, 344,
	345, 346, 410, 411, 792, 791, 347, 0, 0, 0,
	0, 348, 349, 350, 351, 352, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 353,
	0, 185, 0, 0, 192, 193, 194, 354, 355, 356,
	357, 195, 358, 359, 0, 196, 360, 361, 197, 198,
	0, 0, 362, 363, 364, 0, 199, 365, 0, 796,
	0, 200, 201, 202, 0, 204, 205, 206, 203, 0,
	207, 0, 208, 209, 0, 722, 210, 211, 212, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 419, 215,
	366, 216, 367, 368, 0, 217, 0, 218, 0, 219,
	0, 0, 220, 221, 0, 222, 0, 0, 0, 369,
	223, 225, 224, 226, 370, 371, 0, 723, 0, 0,
	0, 0, 0, 227, 228, 372, 373, 374, 0, 229,
	0, 230, 0, 0, 724, 0, 231, 375, 0, 376,
	0, 0, 232, 233, 234, 235, 377, 378, 726, 0,
	379, 239, 0, 236, 0, 725, 237, 380, 238, 381,
	382, 383, 384, 385, 0, 386, 0, 727, 240, 241,
	242, 728, 387, 388, 243, 244, 245, 0, 247, 246,
	0, 389, 729, 248, 249, 730, 0, 250, 251, 0,
	0, 252, 0, 253, 731, 254, 255, 257, 390, 256,
	732, 258, 259, 261, 260, 0, 0, 0, 391, 262,
	392, 263, 264, 0, 265, 0, 0, 266, 0, 0,
	267, 393, 733, 268, 734, 394, 269, 270, 271, 272,
	273, 274, 0, 275, 395, 276, 396, 277, 0, 278,
	279, 280, 281, 282, 397, 283, 284, 0, 285, 286,
	287, 288, 289, 0, 291, 292, 290, 293, 294, 295,
	296, 0, 297, 735, 298, 299, 398, 300, 0, 304,
	305, 306, 307, 308, 0, 310, 399, 309, 311, 312,
	0, 313, 301, 302, 314, 736, 315, 400, 401, 316,
	0, 0, 323, 317, 318, 303, 319, 322, 402, 320,
	321, 403, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 405, 406, 0, 0, 333,
	334, 407, 408, 0, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 410, 411, 186, 0, 347, 0, 0, 0, 0,
	348, 349, 350, 351, 352, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 192, 193, 194, 354, 355, 356, 357,
	195, 358, 359, 0, 196, 360, 361, 197, 198, 0,
	0, 362, 363, 364, 0, 199, 365, 0, 0, 0,
	200, 201, 202, 0, 204, 205, 206, 203, 0, 207,
	0, 208, 209, 0, 0, 210, 211, 212, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 419, 215, 366,
	216, 367, 368, 0, 217, 0, 218, 0, 219, 0,
	0, 220, 221, 0, 222, 0, 0, 0, 369, 223,
	225, 224, 226, 370, 371, 0, 0, 0, 0, 0,
	0, 0, 227, 228, 372, 373, 374, 0, 229, 0,
	230, 0, 0, 0, 0, 231, 375, 0, 376, 0,
	0, 232, 233, 234, 235, 377, 378, 0, 0, 379,
	239, 0, 236, 0, 0, 237, 380, 238, 381, 382,
	383, 384, 385, 0, 386, 0, 0, 240, 241, 242,
	0, 387, 388, 243, 244, 245, 0, 247, 246, 0,
	389, 0, 248, 249, 0, 0, 250, 251, 0, 0,
	252, 0, 253, 0, 254, 255, 257, 390, 256, 0,
	258, 259, 261, 260, 0, 0, 0, 391, 262, 392,
	263, 264, 0, 265, 0, 0, 266, 0, 0, 267,
	393, 0, 268, 0, 394, 269, 270, 271, 272, 273,
	274, 0, 275, 395, 276, 396, 277, 0, 278, 279,
	280, 281, 282, 397, 283, 284, 0, 285, 286, 287,
	288, 289, 0, 291, 292, 290, 293, 294, 295, 296,
	0, 297, 0, 298, 299, 398, 300, 0, 304, 305,
	306, 307, 308, 0, 310, 399, 309, 311, 312, 0,
	313, 301, 302, 314, 0, 315, 400, 401, 316, 0,
	0, 323, 317, 318, 303, 319, 322, 402, 320, 321,
	403, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 405, 406, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 792, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 353, 0, 185,
	0, 0, 192, 193, 194, 354, 355, 356, 357, 195,
	358, 359, 0, 196, 360, 361, 197, 198, 0, 0,
	362, 363, 364, 0, 199, 365, 0, 796, 0, 200,
	201, 202, 0, 204, 205, 206, 203, 0, 207, 0,
	208, 209, 0, 722, 210, 211, 212, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 419, 215, 366, 216,
	367, 368, 0, 217, 0, 218, 0, 219, 0, 0,
	220, 221, 0, 222, 0, 0, 0, 369, 223, 225,
	224, 226, 370, 371, 0, 723, 0, 0, 0, 0,
	0, 227, 228, 372, 373, 374, 0, 229, 0, 230,
	0, 0, 724, 0, 231, 375, 0, 376, 0, 0,
	232, 233, 234, 235, 377, 378, 726, 0, 379, 239,
	0, 236, 0, 725, 237, 380, 238, 381, 382, 383,
	384, 385, 0, 386, 0, 727, 240, 241, 242, 728,
	387, 388, 243, 244, 245, 0, 247, 246, 0, 389,
	729, 248, 249, 730, 0, 250, 251, 0, 0, 252,
	0, 253, 731, 254, 255, 257, 390, 256, 732, 258,
	259, 261, 260, 0, 0, 0, 391, 262, 392, 263,
	264, 0, 265, 0, 0, 266, 0, 0, 267, 393,
	733, 268, 734, 394, 269, 270, 271, 272, 273, 274,
	0, 275, 395, 276, 396, 277, 0, 278, 279, 280,
	281, 282, 397, 283, 284, 0, 285, 286, 287, 288,
	289, 0, 291, 292, 290, 293, 294, 295, 296, 0,
	297, 735, 298, 299, 398, 300, 0, 304, 305, 306,
	307, 308, 0, 310, 399, 309, 311, 312, 0, 313,
	301, 302, 314, 736, 315, 400, 401, 316, 0, 0,
	323, 317, 318, 303, 319, 322, 402, 320, 321, 403,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 405, 406, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	411, 186, 0, 347, 0, 0, 0, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 353, 0, 0, 0,
	0, 192, 193, 194, 354, 355, 356, 357, 195, 358,
	359, 0, 196, 360, 361, 197, 198, 0, 0, 362,
	363, 364, 1677, 199, 365, 0, 0, 0, 200, 201,
	202, 0, 204, 205, 206, 203, 1675, 207, 0, 208,
	209, 0, 0, 210, 211, 212, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 419, 215, 366, 216, 367,
	368, 0, 217, 0, 218, 0, 219, 0, 0, 220,
	221, 0, 222, 0, 0, 0, 369, 223, 225, 224,
	226, 370, 371, 0, 1723, 0, 0, 0, 0, 0,
	227, 228, 372, 373, 374, 0, 229, 0, 230, 1680,
	0, 0, 0, 231, 375, 0, 376, 0, 0, 232,
	233, 234, 235, 377, 378, 0, 0, 379, 239, 1721,
	236, 0, 0, 237, 380, 238, 381, 382, 383, 384,
	385, 0, 386, 0, 0, 240, 241, 242, 0, 387,
	388, 243, 244, 245, 0, 247, 246, 0, 389, 0,
	248, 249, 0, 0, 250, 251, 0, 0, 252, 0,
	253, 0, 254, 255, 257, 390, 256, 0, 258, 259,
	261, 260, 0, 0, 0, 391, 262, 392, 263, 264,
	0, 265, 0, 0, 266, 0, 0, 267, 393, 0,
	268, 0, 394, 269, 270, 271, 272, 273, 274, 0,
	275, 395, 276, 396, 277, 1679, 278, 279, 280, 281,
	282, 397, 283, 284, 0, 285, 286, 287, 288, 289,
	0, 291, 292, 290, 293, 294, 295, 296, 0, 297,
	0, 298, 299, 398, 300, 0, 304, 305, 306, 307,
	308, 0, 310, 399, 309, 311, 312, 0, 313, 301,
	302, 314, 0, 315, 400, 401, 316, 0, 0, 323,
	317, 318, 303, 319, 322, 402, 320, 321, 403, 0,
	324, 0, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 404, 405, 406, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 1722, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	186, 0, 347, 0, 0, 0, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	192, 193, 194, 354, 355, 356, 357, 195, 358, 359,
	0, 196, 360, 361, 197, 198, 0, 0, 362, 363,
	364, 1677, 199, 365, 0, 0, 1672, 200, 201, 202,
	0, 204, 205, 206, 203, 1675, 207, 0, 208, 209,
	0, 0, 210, 211, 212, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 419, 215, 366, 216, 367, 368,
	0, 217, 0, 218, 0, 219, 0, 0, 220, 221,
	0, 222, 0, 0, 0, 369, 223, 225, 224, 226,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 227,
	228, 372, 373, 374, 0, 229, 0, 230, 1680, 0,
	0, 0, 231, 375, 0, 376, 0, 0, 232, 233,
	234, 235, 1671, 378, 0, 0, 379, 239, 0, 236,
	0, 0, 237, 380, 238, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 240, 241, 242, 0, 387, 388,
	243, 244, 245, 0, 247, 246, 0, 389, 0, 248,
	249, 0, 0, 250, 251, 0, 0, 252, 0, 253,
	0, 254, 255, 257, 390, 256, 0, 258, 259, 261,
	260, 0, 0, 0, 391, 262, 392, 263, 264, 0,
	265, 0, 0, 266, 0, 0, 267, 393, 0, 268,
	0, 394, 269, 270, 271, 272, 273, 274, 0, 275,
	395, 276, 396, 277, 1679, 278, 279, 280, 281, 282,
	397, 283, 284, 0, 285, 286, 287, 288, 289, 0,
	291, 292, 290, 293, 294, 295, 296, 0, 297, 0,
	298, 299, 398, 300, 0, 304, 305, 306, 307, 308,
	0, 310, 399, 309, 311, 312, 0, 313, 301, 302,
	314, 0, 315, 400, 401, 316, 0, 0, 323, 317,
	318, 303, 319, 322, 402, 320, 321, 403, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 405, 406, 0, 0, 333, 334, 407, 408, 0,
	335, 336, 337, 338, 0, 1678, 339, 340, 341, 342,
	0, 343, 0, 409, 344, 345, 346, 410, 411, 0,
	929, 347, 186, 0, 0, 0, 348, 349, 350, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 192, 193, 194, 354, 355, 356, 357, 195,
	358, 359, 0, 196, 360, 361, 197, 198, 0, 0,
	362, 363, 364, 0, 199, 365, 0, 0, 0, 200,
	201, 202, 0, 204, 205, 206, 203, 0, 207, 0,
	208, 209, 0, 0, 210, 211, 212, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 419, 215, 366, 216,
	367, 368, 0, 217, 0, 218, 0, 219, 0, 0,
	220, 221, 0, 222, 0, 0, 0, 369, 223, 225,
	224, 226, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 227, 228, 372, 373, 374, 0, 229, 0, 230,
	0, 0, 0, 0, 231, 375, 0, 376, 0, 0,
	232, 233, 234, 235, 377, 378, 0, 0, 379, 239,
	0, 236, 0, 0, 237, 380, 238, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 240, 241, 242, 0,
	387, 388, 243, 244, 245, 0, 247, 246, 0, 389,
	0, 248, 249, 0, 0, 250, 251, 0, 0, 252,
	0, 253, 0, 254, 255, 257, 390, 256, 0, 258,
	259, 261, 260, 0, 0, 0, 391, 262, 392, 263,
	264, 0, 265, 0, 775, 266, 0, 0, 267, 393,
	0, 268, 0, 394, 269, 270, 271, 272, 273, 274,
	0, 275, 395, 276, 396, 277, 0, 278, 279, 280,
	281, 282, 397, 283, 284, 0, 285, 286, 287, 288,
	289, 0, 291, 292, 290, 293, 294, 295, 296, 0,
	297, 0, 298, 299, 398, 300, 0, 304, 305, 306,
	307, 308, 0, 310, 399, 309, 311, 312, 0, 313,
	301, 302, 314, 0, 315, 400, 401, 316, 0, 0,
	323, 317, 318, 303, 319, 322, 402, 320, 321, 403,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 405, 406, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	411, 0, 781, 347, 186, 0, 0, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 353,
	0, 0, 0, 0, 192, 193, 194, 354, 355, 356,
	357, 195, 358, 359, 0, 196, 360, 361, 197, 198,
	0, 0, 362, 363, 364, 0, 199, 365, 0, 0,
	0, 200, 201, 202, 0, 204, 205, 206, 203, 0,
	207, 0, 208, 209, 0, 0, 210, 211, 212, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 419, 215,
	366, 216, 367, 368, 0, 217, 0, 218, 0, 219,
	0, 0, 220, 221, 0, 222, 0, 0, 0, 369,
	223, 225, 224, 226, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 227, 228, 372, 373, 374, 0, 229,
	0, 230, 0, 0, 0, 0, 231, 375, 0, 376,
	0, 0, 232, 233, 234, 235, 783, 378, 0, 0,
	379, 239, 0, 236, 0, 0, 237, 380, 238, 381,
	382, 383, 384, 385, 0, 386, 0, 0, 240, 241,
	242, 0, 387, 388, 243, 244, 245, 0, 247, 246,
	0, 389, 0, 248, 249, 0, 0, 250, 251, 0,
	0, 252, 0, 253, 0, 254, 255, 257, 390, 256,
	0, 258, 259, 261, 260, 0, 0, 0, 391, 262,
	392, 263, 264, 0, 265, 0, 775, 266, 0, 0,
	267, 393, 0, 268, 0, 394, 269, 270, 271, 272,
	273, 274, 0, 275, 395, 276, 396, 277, 0, 278,
	279, 280, 281, 282, 397, 283, 284, 0, 285, 286,
	287, 288, 289, 0, 291, 292, 290, 293, 294, 295,
	296, 0, 297, 0, 298, 299, 398, 300, 0, 304,
	305, 306, 307, 308, 0, 310, 399, 309, 311, 312,
	0, 313, 301, 302, 314, 0, 315, 400, 401, 316,
	0, 0, 323, 317, 318, 303, 319, 322, 402, 320,
	321, 403, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 405, 406, 0, 0, 333,
	334, 407, 408, 0, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 410, 411, 0, 777, 347, 186, 0, 0, 0,
	348, 349, 350, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 353, 0, 0, 0, 0, 192, 193, 194, 354,
	355, 356, 357, 195, 358, 359, 0, 196, 360, 361,
	197, 198, 0, 0, 362, 363, 364, 0, 199, 365,
	0, 0, 0, 200, 201, 202, 0, 204, 205, 206,
	203, 0, 207, 0, 208, 209, 0, 0, 210, 211,
	212, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	419, 215, 366, 216, 367, 368, 0, 217, 0, 218,
	0, 219, 0, 0, 220, 221, 0, 222, 0, 0,
	0, 369, 223, 225, 224, 226, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 227, 228, 372, 373, 374,
	0, 229, 0, 230, 0, 0, 0, 0, 231, 375,
	0, 376, 0, 0, 232, 233, 234, 235, 779, 378,
	0, 0, 379, 239, 0, 236, 0, 0, 237, 380,
	238, 381, 382, 383, 384, 385, 0, 386, 0, 0,
	240, 241, 242, 0, 387, 388, 243, 244, 245, 0,
	247, 246, 0, 389, 0, 248, 249, 0, 0, 250,
	251, 0, 0, 252, 0, 253, 0, 254, 255, 257,
	390, 256, 0, 258, 259, 261, 260, 0, 0, 0,
	391, 262, 392, 263, 264, 0, 265, 0, 775, 266,
	0, 0, 267, 393, 0, 268, 0, 394, 269, 270,
	271, 272, 273, 274, 0, 275, 395, 276, 396, 277,
	0, 278, 279, 280, 281, 282, 397, 283, 284, 0,
	285, 286, 287, 288, 289, 0, 291, 292, 290, 293,
	294, 295, 296, 0, 297, 0, 298, 299, 398, 300,
	0, 304, 305, 306, 307, 308, 0, 310, 399, 309,
	311, 312, 0, 313, 301, 302, 314, 0, 315, 400,
	401, 316, 0, 0, 323, 317, 318, 303, 319, 322,
	402, 320, 321, 403, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 405, 406, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 410, 411, 0, 431, 347, 186, 0,
	0, 0, 348, 349, 350, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 430, 0, 191, 0,
	0, 0, 0, 353, 0, 0, 0, 0, 192, 193,
	194, 354, 355, 356, 357, 195, 358, 359, 0, 196,
	360, 361, 197, 198, 0, 0, 362, 363, 364, 0,
	199, 365, 0, 0, 0, 200, 201, 202, 0, 204,
	205, 206, 203, 0, 207, 0, 208, 209, 0, 0,
	210, 211, 212, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 419, 215, 366, 216, 367, 368, 0, 217,
	0, 218, 0, 219, 0, 0, 220, 221, 0, 222,
	0, 0, 0, 369, 223, 225, 224, 226, 370, 371,
	0, 0, 0, 0, 0, 0, 0, 227, 228, 372,
	373, 374, 0, 229, 0, 230, 0, 0, 0, 0,
	231, 375, 0, 376, 0, 0, 232, 233, 234, 235,
	377, 378, 0, 0, 379, 239, 0, 236, 0, 0,
	237, 380, 238, 381, 382, 383, 384, 385, 0, 386,
	0, 0, 240, 241, 242, 0, 387, 388, 243, 244,
	245, 0, 247, 246, 0, 389, 0, 248, 249, 0,
	0, 250, 251, 0, 0, 252, 0, 253, 0, 254,
	255, 257, 390, 256, 0, 258, 259, 261, 260, 0,
	0, 0, 391, 262, 392, 263, 264, 0, 265, 0,
	0, 266, 0, 0, 267, 393, 0, 268, 0, 394,
	269, 270, 271, 272, 273, 274, 0, 275, 395, 276,
	396, 429, 0, 278, 279, 280, 281, 282, 397, 283,
	284, 0, 285, 286, 287, 288, 289, 0, 291, 292,
	290, 293, 294, 295, 296, 0, 297, 0, 298, 299,
	398, 300, 0, 304, 305, 306, 307, 308, 0, 310,
	399, 309, 311, 312, 0, 313, 301, 302, 314, 0,
	315, 400, 401, 316, 0, 0, 323, 317, 318, 303,
	319, 322, 402, 320, 321, 403, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 405,
	406, 0, 0, 333, 334, 407, 408, 0, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	0, 409, 344, 345, 346, 410, 411, 186, 0, 347,
	0, 0, 0, 0, 348, 349, 350, 351, 352, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 353, 0, 1660, 0, 0, 192, 193, 194,
	354, 355, 356, 357, 195, 358, 359, 0, 196, 360,
	361, 197, 198, 0, 0, 362, 363, 364, 0, 199,
	365, 0, 0, 0, 200, 201, 202, 0, 204, 205,
	206, 203, 0, 207, 0, 208, 209, 0, 0, 210,
	211, 212, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 419, 215, 366, 216, 367, 368, 0, 217, 0,
	218, 0, 219, 0, 0, 220, 221, 0, 222, 0,
	0, 0, 369, 223, 225, 224, 226, 370, 371, 0,
	0, 0, 0, 0, 0, 0, 227, 228, 372, 373,
	374, 0, 229, 0, 230, 0, 0, 0, 0, 231,
	375, 0, 376, 0, 0, 232, 233, 234, 235, 377,
	378, 0, 0, 379, 239, 0, 236, 0, 0, 237,
	380, 238, 381, 382, 383, 384, 385, 0, 386, 0,
	0, 240, 241, 242, 0, 387, 388, 243, 244, 245,
	0, 247, 246, 0, 389, 0, 248, 249, 0, 0,
	250, 251, 0, 0, 252, 0, 253, 0, 254, 255,
	257, 390, 256, 0, 258, 259, 261, 260, 0, 0,
	0, 391, 262, 392, 263, 264, 0, 265, 0, 0,
	266, 0, 0, 267, 393, 0, 268, 0, 394, 269,
	270, 271, 272, 273, 274, 0, 275, 395, 276, 396,
	277, 0, 278, 279, 280, 281, 282, 397, 283, 284,
	0, 285, 286, 287, 288, 289, 0, 291, 292, 290,
	293, 294, 295, 296, 0, 297, 0, 298, 299, 398,
	300, 0, 304, 305, 306, 307, 308, 0, 310, 399,
	309, 311, 312, 0, 313, 301, 302, 314, 0, 315,
	400, 401, 316, 0, 0, 323, 317, 318, 303, 319,
	322, 402, 320, 321, 403, 0, 324, 0, 325, 326,
	327, 328, 329, 330, 331, 332, 0, 404, 405, 406,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 410, 411, 186, 2266, 347, 0,
	0, 0, 0, 348, 349, 350, 351, 352, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 353, 0, 0, 0, 0, 192, 193, 194, 354,
	355, 356, 357, 195, 358, 359, 0, 196, 360, 361,
	197, 198, 0, 0, 362, 363, 364, 0, 199, 365,
	0, 0, 0, 200, 201, 202, 0, 204, 205, 206,
	203, 0, 207, 0, 208, 209, 0, 0, 210, 211,
	212, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	419, 215, 366, 216, 367, 368, 0, 217, 0, 218,
	0, 219, 0, 0, 220, 221, 0, 222, 0, 0,
	0, 369, 223, 225, 224, 226, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 227, 228, 372, 373, 374,
	0, 229, 0, 230, 0, 0, 0, 0, 231, 375,
	0, 376, 0, 0, 232, 233, 234, 235, 377, 378,
	0, 0, 379, 239, 0, 236, 0, 0, 237, 380,
	238, 381, 382, 383, 384, 385, 0, 386, 0, 0,
	240, 241, 242, 0, 387, 388, 243, 244, 245, 0,
	247, 246, 0, 389, 0, 248, 249, 0, 0, 250,
	251, 0, 0, 252, 0, 253, 0, 254, 255, 257,
	390, 256, 0, 258, 259, 261, 260, 0, 0, 0,
	391, 262, 392, 263, 264, 0, 265, 0, 0, 266,
	0, 0, 267, 393, 0, 268, 0, 394, 269, 270,
	271, 272, 273, 274, 0, 275, 395, 276, 396, 277,
	0, 278, 279, 280, 281, 282, 397, 283, 284, 0,
	285, 286, 287, 288, 289, 0, 291, 292, 290, 293,
	294, 295, 296, 0, 297, 0, 298, 299, 398, 300,
	0, 304, 305, 306, 307, 308, 0, 310, 399, 309,
	311, 312, 0, 313, 301, 302, 314, 0, 315, 400,
	401, 316, 0, 0, 323, 317, 318, 303, 319, 322,
	402, 320, 321, 403, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 405, 406, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 410, 411, 186, 2266, 347, 0, 0,
	0, 0, 348, 349, 350, 351, 352, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	353, 0, 0, 0, 0, 192, 193, 194, 354, 355,
	356, 357, 195, 358, 359, 0, 196, 360, 361, 197,
	198, 0, 0, 362, 363, 364, 0, 199, 365, 0,
	0, 0, 200, 201, 202, 0, 204, 205, 206, 203,
	0, 207, 0, 208, 209, 0, 0, 210, 211, 212,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 419,
	215, 366, 216, 367, 368, 0, 217, 0, 218, 0,
	219, 0, 0, 220, 221, 0, 222, 0, 0, 0,
	369, 223, 225, 224, 226, 370, 371, 0, 0, 0,
	0, 0, 0, 0, 227, 228, 372, 373, 374, 0,
	229, 0, 230, 0, 0, 0, 0, 231, 375, 0,
	376, 0, 0, 232, 233, 234, 235, 377, 378, 0,
	0, 379, 239, 0, 236, 0, 0, 237, 380, 238,
	381, 382, 383, 384, 385, 0, 386, 0, 0, 240,
	241, 242, 0, 387, 388, 243, 244, 245, 0, 247,
	246, 0, 389, 0, 248, 249, 0, 0, 250, 251,
	0, 0, 252, 0, 253, 0, 254, 255, 257, 390,
	256, 0, 258, 259, 261, 260, 0, 0, 0, 391,
	262, 392, 263, 264, 0, 265, 0, 0, 2263, 0,
	0, 267, 393, 0, 268, 0, 394, 269, 270, 271,
	272, 273, 274, 0, 275, 395, 276, 396, 277, 0,
	278, 279, 280, 281, 282, 397, 283, 284, 0, 285,
	286, 287, 288, 289, 0, 291, 292, 290, 293, 294,
	295, 296, 0, 297, 0, 298, 299, 398, 300, 0,
	304, 305, 306, 307, 308, 0, 310, 399, 309, 311,
	312, 0, 313, 301, 302, 314, 0, 315, 400, 401,
	316, 0, 0, 323, 317, 318, 303, 319, 322, 402,
	320, 321, 403, 0, 324, 0, 325, 326, 327, 328,
	329, 330, 331, 332, 0, 404, 405, 406, 0, 0,
	333, 334, 407, 408, 0, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 0, 343, 0, 409, 344,
	345, 346, 410, 411, 186, 0, 347, 0, 0, 0,
	0, 348, 349, 350, 351, 352, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 353,
	0, 0, 0, 0, 192, 193, 194, 354, 355, 356,
	357, 195, 358, 359, 0, 196, 360, 361, 197, 198,
	0, 0, 362, 363, 364, 0, 199, 365, 0, 0,
	0, 200, 201, 202, 0, 204, 205, 206, 203, 0,
	207, 0, 208, 209, 0, 0, 210, 211, 212, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 419, 215,
	366, 216, 367, 368, 0, 217, 0, 218, 0, 219,
	0, 0, 220, 221, 0, 222, 0, 0, 0, 369,
	223, 225, 224, 226, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 227, 228, 372, 373, 374, 0, 229,
	0, 230, 0, 0, 0, 0, 231, 375, 0, 376,
	0, 0, 232, 233, 234, 235, 377, 378, 0, 0,
	379, 239, 0, 236, 0, 0, 237, 380, 238, 381,
	382, 383, 384, 385, 0, 386, 0, 0, 240, 241,
	242, 0, 387, 388, 243, 244, 245, 0, 247, 246,
	0, 389, 0, 248, 249, 0, 0, 250, 251, 0,
	0, 252, 0, 253, 0, 254, 255, 257, 390, 256,
	0, 258, 259, 261, 260, 0, 0, 0, 391, 262,
	392, 263, 264, 0, 265, 0, 775, 266, 0, 0,
	267, 393, 0, 268, 0, 394, 269, 270, 271, 272,
	273, 274, 0, 275, 395, 276, 396, 277, 0, 278,
	279, 280, 281, 282, 397, 283, 284, 0, 285, 286,
	287, 288, 289, 0, 291, 292, 290, 293, 294, 295,
	296, 0, 297, 0, 298, 299, 398, 300, 0, 304,
	305, 306, 307, 308, 0, 310, 399, 309, 311, 312,
	0, 313, 301, 302, 314, 0, 315, 400, 401, 316,
	0, 0, 323, 317, 318, 303, 319, 322, 402, 320,
	321, 403, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 405, 406, 0, 0, 333,
	334, 407, 408, 0, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 410, 411, 0, 1421, 347, 186, 0, 0, 0,
	348, 349, 350, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 353, 0, 0, 0, 0, 192, 193, 194, 354,
	355, 356, 357, 195, 358, 359, 0, 196, 360, 361,
	197, 198, 0, 0, 362, 363, 364, 0, 199, 365,
	0, 0, 0, 200, 201, 202, 0, 204, 205, 206,
	203, 0, 207, 0, 208, 209, 0, 0, 210, 211,
	212, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	419, 215, 366, 216, 367, 368, 0, 217, 0, 218,
	0, 219, 0, 0, 220, 221, 0, 222, 0, 0,
	0, 369, 223, 225, 224, 226, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 227, 228, 372, 373, 374,
	0, 229, 0, 230, 0, 0, 0, 0, 231, 375,
	0, 376, 0, 0, 232, 233, 234, 235, 377, 378,
	0, 0, 379, 239, 0, 236, 0, 0, 237, 380,
	238, 381, 382, 383, 384, 385, 0, 386, 0, 0,
	240, 241, 242, 0, 387, 388, 243, 244, 245, 0,
	247, 246, 0, 389, 0, 248, 249, 0, 0, 250,
	251, 0, 0, 252, 0, 253, 0, 254, 255, 257,
	390, 256, 0, 258, 259, 261, 260, 0, 0, 0,
	391, 262, 392, 263, 264, 0, 265, 0, 0, 266,
	0, 0, 267, 393, 0, 268, 0, 394, 269, 270,
	271, 272, 273, 274, 0, 275, 395, 276, 396, 277,
	0, 278, 279, 280, 281, 282, 397, 283, 284, 0,
	285, 286, 287, 288, 289, 0, 291, 292, 290, 293,
	294, 295, 296, 0, 297, 0, 298, 299, 398, 300,
	0, 304, 305, 306, 307, 308, 0, 310, 399, 309,
	311, 312, 0, 313, 301, 302, 314, 0, 315, 400,
	401, 316, 0, 0, 323, 317, 318, 303, 319, 322,
	402, 320, 321, 403, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 405, 406, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 410, 411, 0, 1419, 347, 186, 0,
	0, 0, 348, 349, 350, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 0, 0, 191, 0,
	0, 0, 0, 353, 0, 0, 0, 0, 192, 193,
	194, 354, 355, 356, 357, 195, 358, 359, 0, 196,
	360, 361, 197, 198, 0, 0, 362, 363, 364, 0,
	199, 365, 0, 0, 0, 200, 201, 202, 0, 204,
	205, 206, 203, 0, 207, 0, 208, 209, 0, 0,
	210, 211, 212, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 419, 215, 366, 216, 367, 368, 0, 217,
	0, 218, 0, 219, 0, 0, 220, 221, 0, 222,
	0, 0, 0, 369, 223, 225, 224, 226, 370, 371,
	0, 0, 0, 0, 0, 0, 0, 227, 228, 372,
	373, 374, 0, 229, 0, 230, 0, 0, 0, 0,
	231, 375, 0, 376, 0, 0, 232, 233, 234, 235,
	377, 378, 0, 0, 379, 239, 0, 236, 0, 0,
	237, 380, 238, 381, 382, 383, 384, 385, 0, 386,
	0, 0, 240, 241, 242, 0, 387, 388, 243, 244,
	245, 0, 247, 246, 0, 389, 0, 248, 249, 0,
	0, 250, 251, 0, 0, 252, 0, 253, 0, 254,
	255, 257, 390, 256, 0, 258, 259, 261, 260, 0,
	0, 0, 391, 262, 392, 263, 264, 0, 265, 0,
	0, 266, 0, 0, 267, 393, 0, 268, 0, 394,
	269, 270, 271, 272, 273, 274, 0, 275, 395, 276,
	396, 277, 0, 278, 279, 280, 281, 282, 397, 283,
	284, 0, 285, 286, 287, 288, 289, 0, 291, 292,
	290, 293, 294, 295, 296, 0, 297, 0, 298, 299,
	398, 300, 0, 304, 305, 306, 307, 308, 0, 310,
	399, 309, 311, 312, 0, 313, 301, 302, 314, 0,
	315, 400, 401, 316, 0, 0, 323, 317, 318, 303,
	319, 322, 402, 320, 321, 403, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 405,
	406, 0, 0, 333, 334, 407, 408, 0, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	0, 409, 344, 345, 346, 410, 411, 186, 0, 347,
	0, 0, 0, 0, 348, 349, 350, 351, 352, 0,
	0, 0, 0, 189, 190, 1401, 0, 191, 0, 0,
	0, 0, 353, 0, 0, 0, 0, 192, 193, 194,
	354, 355, 356, 357, 195, 358, 359, 0, 196, 360,
	361, 197, 198, 0, 0, 362, 363, 364, 0, 199,
	365, 0, 0, 0, 200, 201, 202, 0, 204, 205,
	206, 203, 0, 207, 0, 208, 209, 0, 0, 210,
	211, 212, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 419, 215, 366, 216, 367, 368, 0, 217, 0,
	218, 0, 219, 0, 0, 220, 221, 0, 222, 0,
	0, 0, 369, 223, 225, 224, 226, 370, 371, 0,
	0, 0, 0, 0, 0, 0, 227, 228, 372, 373,
	374, 0, 229, 0, 230, 0, 0, 0, 0, 231,
	375, 0, 376, 0, 0, 232, 233, 234, 235, 377,
	378, 0, 0, 379, 239, 0, 236, 0, 0, 237,
	380, 238, 381, 382, 383, 384, 385, 0, 386, 0,
	0, 240, 241, 242, 0, 387, 388, 243, 244, 245,
	0, 247, 246, 0, 389, 0, 248, 249, 0, 0,
	250, 251, 0, 0, 252, 0, 253, 0, 254, 255,
	257, 390, 256, 0, 258, 259, 261, 260, 0, 0,
	0, 391, 262, 392, 263, 264, 0, 265, 0, 0,
	266, 0, 0, 267, 393, 0, 268, 0, 394, 269,
	270, 271, 272, 273, 274, 0, 275, 395, 276, 396,
	277, 0, 278, 279, 280, 281, 282, 397, 283, 284,
	0, 285, 286, 287, 288, 289, 0, 291, 292, 290,
	293, 294, 295, 296, 0, 297, 0, 298, 299, 398,
	300, 0, 304, 305, 306, 307, 308, 0, 310, 399,
	309, 311, 312, 0, 313, 301, 302, 314, 0, 315,
	400, 401, 316, 0, 0, 323, 317, 318, 303, 319,
	322, 402, 320, 321, 403, 0, 324, 0, 325, 326,
	327, 328, 329, 330, 331, 332, 0, 404, 405, 406,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 410, 411, 0, 528, 347, 186,
	0, 0, 0, 348, 349, 350, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 353, 0, 0, 0, 0, 192,
	193, 194, 354, 355, 356, 357, 195, 358, 359, 0,
	196, 360, 361, 197, 198, 0, 0, 362, 363, 987,
	0, 199, 365, 0, 0, 0, 200, 201, 202, 0,
	204, 205, 206, 203, 0, 207, 0, 208, 209, 0,
	0, 210, 211, 212, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 419, 215, 366, 216, 367, 368, 0,
	217, 0, 218, 0, 219, 0, 0, 220, 221, 0,
	222, 0, 0, 0, 369, 223, 225, 224, 226, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 227, 228,
	372, 373, 374, 0, 229, 0, 230, 0, 0, 0,
	0, 231, 375, 0, 376, 0, 0, 232, 233, 234,
	235, 377, 378, 0, 0, 379, 239, 0, 236, 0,
	0, 237, 380, 238, 381, 382, 383, 384, 385, 0,
	386, 0, 0, 240, 241, 242, 0, 387, 388, 243,
	244, 245, 0, 247, 246, 0, 389, 0, 248, 249,
	0, 0, 250, 251, 0, 0, 252, 0, 253, 0,
	254, 255, 257, 390, 530, 0, 258, 259, 261, 260,
	0, 0, 0, 391, 262, 392, 263, 264, 0, 265,
	0, 0, 266, 0, 0, 267, 393, 0, 268, 0,
	394, 269, 270, 271, 272, 273, 274, 0, 275, 395,
	276, 396, 277, 0, 278, 279, 280, 281, 282, 397,
	283, 284, 0, 285, 286, 287, 288, 289, 0, 291,
	292, 290, 293, 294, 295, 296, 0, 297, 0, 298,
	299, 398, 300, 0, 304, 305, 306, 307, 308, 0,
	310, 399, 309, 311, 312, 0, 313, 301, 302, 314,
	0, 315, 400, 401, 316, 0, 0, 323, 317, 318,
	303, 319, 322, 402, 320, 321, 403, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 525,
	405, 406, 0, 0, 333, 334, 407, 408, 0, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 0,
	343, 0, 409, 344, 345, 346, 410, 411, 0, 1278,
	347, 186, 0, 0, 0, 348, 349, 350, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 353, 0, 0, 0,
	0, 192, 193, 194, 354, 355, 356, 357, 195, 358,
	359, 0, 196, 360, 361, 197, 198, 0, 0, 362,
	363, 364, 0, 199, 365, 0, 0, 0, 200, 201,
	202, 0, 204, 205, 206, 203, 0, 207, 0, 208,
	209, 0, 0, 210, 211, 212, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 419, 215, 366, 216, 367,
	368, 0, 217, 0, 218, 0, 219, 0, 0, 220,
	221, 0, 222, 0, 0, 0, 369, 223, 225, 224,
	226, 370, 371, 0, 0, 0, 0, 0, 0, 0,
	227, 228, 372, 373, 374, 0, 229, 0, 230, 0,
	0, 0, 0, 231, 375, 0, 376, 0, 0, 232,
	233, 234, 235, 1277, 378, 0, 0, 379, 239, 0,
	236, 0, 0, 237, 380, 238, 381, 382, 383, 384,
	385, 0, 386, 0, 0, 240, 241, 242, 0, 387,
	388, 243, 244, 245, 0, 247, 246, 0, 389, 0,
	248, 249, 0, 0, 250, 251, 0, 0, 252, 0,
	253, 0, 254, 255, 257, 390, 256, 0, 258, 259,
	261, 260, 0, 0, 0, 391, 262, 392, 263, 264,
	0, 265, 0, 0, 266, 0, 0, 267, 393, 0,
	268, 0, 394, 269, 270, 271, 272, 273, 274, 0,
	275, 395, 276, 396, 277, 0, 278, 279, 280, 281,
	282, 397, 283, 284, 0, 285, 286, 287, 288, 289,
	0, 291, 292, 290, 293, 294, 295, 296, 0, 297,
	0, 298, 299, 398, 300, 0, 304, 305, 306, 307,
	308, 0, 310, 399, 309, 311, 312, 0, 313, 301,
	302, 314, 0, 315, 400, 401, 316, 0, 0, 323,
	317, 318, 303, 319, 322, 402, 320, 321, 403, 0,
	324, 0, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 404, 405, 406, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	0, 528, 347, 186, 0, 0, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 192, 193, 194, 354, 355, 356, 357,
	195, 358, 359, 0, 196, 360, 361, 197, 198, 0,
	0, 362, 363, 987, 0, 199, 365, 0, 0, 0,
	200, 201, 202, 0, 204, 205, 206, 203, 0, 207,
	0, 208, 209, 0, 0, 210, 211, 212, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 419, 215, 366,
	216, 367, 368, 0, 217, 0, 218, 0, 219, 0,
	0, 220, 221, 0, 222, 0, 0, 0, 369, 223,
	225, 224, 226, 370, 371, 0, 0, 0, 0, 0,
	0, 0, 227, 228, 372, 373, 374, 0, 229, 0,
	230, 0, 0, 0, 0, 231, 375, 0, 376, 0,
	0, 232, 233, 234, 235, 377, 378, 0, 0, 379,
	239, 0, 236, 0, 0, 237, 380, 238, 381, 382,
	383, 384, 385, 0, 386, 0, 0, 240, 241, 242,
	0, 387, 388, 243, 244, 245, 0, 247, 246, 0,
	389, 0, 248, 249, 0, 0, 250, 251, 0, 0,
	252, 0, 253, 0, 254, 255, 257, 390, 530, 0,
	258, 259, 261, 260, 0, 0, 0, 391, 262, 392,
	263, 264, 0, 265, 0, 0, 266, 0, 0, 267,
	393, 0, 268, 0, 394, 269, 270, 271, 272, 273,
	274, 0, 275, 395, 276, 396, 277, 0, 278, 279,
	280, 281, 282, 397, 283, 284, 0, 285, 286, 287,
	288, 289, 0, 291, 292, 290, 293, 294, 295, 296,
	0, 297, 0, 298, 299, 398, 300, 0, 304, 305,
	306, 307, 308, 0, 310, 399, 309, 311, 312, 0,
	313, 301, 302, 314, 0, 315, 400, 401, 316, 0,
	0, 323, 317, 318, 303, 319, 322, 402, 320, 321,
	403, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 525, 405, 406, 0, 0, 333, 988,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 0, 528, 347, 186, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	353, 0, 0, 0, 0, 192, 193, 194, 354, 355,
	356, 357, 195, 358, 359, 0, 196, 360, 361, 197,
	198, 0, 0, 362, 363, 364, 0, 519, 365, 0,
	0, 0, 200, 201, 202, 0, 204, 205, 206, 203,
	0, 207, 0, 208, 209, 0, 0, 210, 211, 212,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 419,
	215, 366, 216, 367, 368, 0, 217, 0, 218, 0,
	219, 0, 0, 220, 221, 0, 222, 0, 0, 0,
	369, 223, 225, 224, 226, 370, 371, 0, 0, 0,
	0, 0, 0, 0, 227, 228, 372, 373, 374, 0,
	229, 0, 230, 0, 0, 0, 0, 231, 375, 0,
	376, 0, 0, 232, 233, 234, 235, 377, 378, 0,
	0, 379, 239, 0, 236, 0, 0, 237, 380, 238,
	381, 382, 383, 384, 385, 0, 386, 0, 0, 240,
	241, 242, 0, 387, 388, 243, 244, 245, 0, 247,
	246, 0, 389, 0, 248, 249, 0, 0, 250, 251,
	0, 0, 252, 0, 253, 0, 254, 255, 257, 390,
	530, 0, 258, 259, 261, 260, 0, 0, 0, 391,
	262, 392, 263, 264, 0, 265, 0, 0, 266, 0,
	0, 267, 393, 0, 268, 0, 394, 269, 270, 271,
	272, 273, 274, 0, 275, 395, 276, 396, 277, 0,
	278, 279, 280, 281, 282, 397, 283, 284, 0, 285,
	286, 287, 288, 289, 0, 291, 292, 290, 293, 294,
	295, 296, 0, 297, 0, 298, 299, 398, 300, 0,
	304, 305, 306, 307, 308, 0, 310, 399, 309, 971,
	312, 0, 313, 301, 302, 314, 0, 315, 400, 401,
	316, 0, 0, 323, 317, 318, 303, 319, 322, 402,
	320, 321, 403, 0, 324, 0, 325, 326, 327, 328,
	329, 330, 331, 332, 0, 525, 405, 406, 0, 0,
	333, 334, 407, 408, 0, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 0, 343, 0, 409, 344,
	345, 346, 410, 411, 0, 944, 347, 186, 0, 0,
	0, 348, 349, 350, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 353, 0, 0, 0, 0, 192, 193, 194,
	354, 355, 356, 357, 195, 358, 359, 0, 196, 360,
	361, 197, 198, 0, 0, 362, 363, 364, 0, 199,
	365, 0, 0, 0, 200, 201, 202, 0, 204, 205,
	206, 203, 0, 207, 0, 208, 209, 0, 0, 210,
	211, 212, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 419, 215, 366, 216, 367, 368, 0, 217, 0,
	218, 0, 219, 0, 0, 220, 221, 0, 222, 0,
	0, 0, 369, 223, 225, 224, 226, 370, 371, 0,
	0, 0, 0, 0, 0, 0, 227, 228, 372, 373,
	374, 0, 229, 0, 230, 0, 0, 0, 0, 231,
	375, 0, 376, 0, 0, 232, 233, 234, 235, 943,
	378, 0, 0, 379, 239, 0, 236, 0, 0, 237,
	380, 238, 381, 382, 383, 384, 385, 0, 386, 0,
	0, 240, 241, 242, 0, 387, 388, 243, 244, 245,
	0, 247, 246, 0, 389, 0, 248, 249, 0, 0,
	250, 251, 0, 0, 252, 0, 253, 0, 254, 255,
	257, 390, 256, 0, 258, 259, 261, 260, 0, 0,
	0, 391, 262, 392, 263, 264, 0, 265, 0, 0,
	266, 0, 0, 267, 393, 0, 268, 0, 394, 269,
	270, 271, 272, 273, 274, 0, 275, 395, 276, 396,
	277, 0, 278, 279, 280, 281, 282, 397, 283, 284,
	0, 285, 286, 287, 288, 289, 0, 291, 292, 290,
	293, 294, 295, 296, 0, 297, 0, 298, 299, 398,
	300, 0, 304, 305, 306, 307, 308, 0, 310, 399,
	309, 311, 312, 0, 313, 301, 302, 314, 0, 315,
	400, 401, 316, 0, 0, 323, 317, 318, 303, 319,
	322, 402, 320, 321, 403, 0, 324, 0, 325, 326,
	327, 328, 329, 330, 331, 332, 0, 404, 405, 406,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 410, 411, 0, 940, 347, 186,
	0, 0, 0, 348, 349, 350, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 353, 0, 0, 0, 0, 192,
	193, 194, 354, 355, 356, 357, 195, 358, 359, 0,
	196, 360, 361, 197, 198, 0, 0, 362, 363, 364,
	0, 199, 365, 0, 0, 0, 200, 201, 202, 0,
	204, 205, 206, 203, 0, 207, 0, 208, 209, 0,
	0, 210, 211, 212, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 419, 215, 366, 216, 367, 368, 0,
	217, 0, 218, 0, 219, 0, 0, 220, 221, 0,
	222, 0, 0, 0, 369, 223, 225, 224, 226, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 227, 228,
	372, 373, 374, 0, 229, 0, 230, 0, 0, 0,
	0, 231, 375, 0, 376, 0, 0, 232, 233, 234,
	235, 939, 378, 0, 0, 379, 239, 0, 236, 0,
	0, 237, 380, 238, 381, 382, 383, 384, 385, 0,
	386, 0, 0, 240, 241, 242, 0, 387, 388, 243,
	244, 245, 0, 247, 246, 0, 389, 0, 248, 249,
	0, 0, 250, 251, 0, 0, 252, 0, 253, 0,
	254, 255, 257, 390, 256, 0, 258, 259, 261, 260,
	0, 0, 0, 391, 262, 392, 263, 264, 0, 265,
	0, 0, 266, 0, 0, 267, 393, 0, 268, 0,
	394, 269, 270, 271, 272, 273, 274, 0, 275, 395,
	276, 396, 277, 0, 278, 279, 280, 281, 282, 397,
	283, 284, 0, 285, 286, 287, 288, 289, 0, 291,
	292, 290, 293, 294, 295, 296, 0, 297, 0, 298,
	299, 398, 300, 0, 304, 305, 306, 307, 308, 0,
	310, 399, 309, 311, 312, 0, 313, 301, 302, 314,
	0, 315, 400, 401, 316, 0, 0, 323, 317, 318,
	303, 319, 322, 402, 320, 321, 403, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	405, 406, 0, 0, 333, 334, 407, 408, 0, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 0,
	343, 0, 409, 344, 345, 346, 410, 411, 0, 937,
	347, 186, 0, 0, 0, 348, 349, 350, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 353, 0, 0, 0,
	0, 192, 193, 194, 354, 355, 356, 357, 195, 358,
	359, 0, 196, 360, 361, 197, 198, 0, 0, 362,
	363, 364, 0, 199, 365, 0, 0, 0, 200, 201,
	202, 0, 204, 205, 206, 203, 0, 207, 0, 208,
	209, 0, 0, 210, 211, 212, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 419, 215, 366, 216, 367,
	368, 0, 217, 0, 218, 0, 219, 0, 0, 220,
	221, 0, 222, 0, 0, 0, 369, 223, 225, 224,
	226, 370, 371, 0, 0, 0, 0, 0, 0, 0,
	227, 228, 372, 373, 374, 0, 229, 0, 230, 0,
	0, 0, 0, 231, 375, 0, 376, 0, 0, 232,
	233, 234, 235, 936, 378, 0, 0, 379, 239, 0,
	236, 0, 0, 237, 380, 238, 381, 382, 383, 384,
	385, 0, 386, 0, 0, 240, 241, 242, 0, 387,
	388, 243, 244, 245, 0, 247, 246, 0, 389, 0,
	248, 249, 0, 0, 250, 251, 0, 0, 252, 0,
	253, 0, 254, 255, 257, 390, 256, 0, 258, 259,
	261, 260, 0, 0, 0, 391, 262, 392, 263, 264,
	0, 265, 0, 0, 266, 0, 0, 267, 393, 0,
	268, 0, 394, 269, 270, 271, 272, 273, 274, 0,
	275, 395, 276, 396, 277, 0, 278, 279, 280, 281,
	282, 397, 283, 284, 0, 285, 286, 287, 288, 289,
	0, 291, 292, 290, 293, 294, 295, 296, 0, 297,
	0, 298, 299, 398, 300, 0, 304, 305, 306, 307,
	308, 0, 310, 399, 309, 311, 312, 0, 313, 301,
	302, 314, 0, 315, 400, 401, 316, 0, 0, 323,
	317, 318, 303, 319, 322, 402, 320, 321, 403, 0,
	324, 0, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 404, 405, 406, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	0, 933, 347, 186, 0, 0, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 192, 193, 194, 354, 355, 356, 357,
	195, 358, 359, 0, 196, 360, 361, 197, 198, 0,
	0, 362, 363, 364, 0, 199, 365, 0, 0, 0,
	200, 201, 202, 0, 204, 205, 206, 203, 0, 207,
	0, 208, 209, 0, 0, 210, 211, 212, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 419, 215, 366,
	216, 367, 368, 0, 217, 0, 218, 0, 219, 0,
	0, 220, 221, 0, 222, 0, 0, 0, 369, 223,
	225, 224, 226, 370, 371, 0, 0, 0, 0, 0,
	0, 0, 227, 228, 372, 373, 374, 0, 229, 0,
	230, 0, 0, 0, 0, 231, 375, 0, 376, 0,
	0, 232, 233, 234, 235, 932, 378, 0, 0, 379,
	239, 0, 236, 0, 0, 237, 380, 238, 381, 382,
	383, 384, 385, 0, 386, 0, 0, 240, 241, 242,
	0, 387, 388, 243, 244, 245, 0, 247, 246, 0,
	389, 0, 248, 249, 0, 0, 250, 251, 0, 0,
	252, 0, 253, 0, 254, 255, 257, 390, 256, 0,
	258, 259, 261, 260, 0, 0, 0, 391, 262, 392,
	263, 264, 0, 265, 0, 0, 266, 0, 0, 267,
	393, 0, 268, 0, 394, 269, 270, 271, 272, 273,
	274, 0, 275, 395, 276, 396, 277, 0, 278, 279,
	280, 281, 282, 397, 283, 284, 0, 285, 286, 287,
	288, 289, 0, 291, 292, 290, 293, 294, 295, 296,
	0, 297, 0, 298, 299, 398, 300, 0, 304, 305,
	306, 307, 308, 0, 310, 399, 309, 311, 312, 0,
	313, 301, 302, 314, 0, 315, 400, 401, 316, 0,
	0, 323, 317, 318, 303, 319, 322, 402, 320, 321,
	403, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 405, 406, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 186, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 189, 190,
	921, 0, 191, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 192, 193, 194, 354, 355, 356, 357, 195,
	358, 359, 0, 196, 360, 361, 197, 198, 0, 0,
	362, 363, 364, 0, 199, 365, 0, 0, 0, 200,
	201, 202, 0, 204, 205, 206, 203, 0, 207, 0,
	208, 209, 0, 0, 210, 211, 212, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 419, 215, 366, 216,
	367, 368, 0, 217, 0, 218, 0, 219, 0, 0,
	220, 221, 0, 222, 0, 0, 0, 369, 223, 225,
	224, 226, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 227, 228, 372, 373, 374, 0, 229, 0, 230,
	0, 0, 0, 0, 231, 375, 0, 376, 0, 0,
	232, 233, 234, 235, 377, 378, 0, 0, 379, 239,
	0, 236, 0, 0, 237, 380, 238, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 240, 241, 242, 0,
	387, 388, 243, 244, 245, 0, 247, 246, 0, 389,
	0, 248, 249, 0, 0, 250, 251, 0, 0, 252,
	0, 253, 0, 254, 255, 257, 390, 256, 0, 258,
	259, 261, 260, 0, 0, 0, 391, 262, 392, 263,
	264, 0, 265, 0, 0, 266, 0, 0, 267, 393,
	0, 268, 0, 394, 269, 270, 271, 272, 273, 274,
	0, 275, 395, 276, 396, 277, 0, 278, 279, 280,
	281, 282, 397, 283, 284, 0, 285, 286, 287, 288,
	289, 0, 291, 292, 290, 293, 294, 295, 296, 0,
	297, 0, 298, 299, 398, 300, 0, 304, 305, 306,
	307, 308, 0, 310, 399, 309, 311, 312, 0, 313,
	301, 302, 314, 0, 315, 400, 401, 316, 0, 0,
	323, 317, 318, 303, 319, 322, 402, 320, 321, 403,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 405, 406, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	411, 0, 919, 347, 186, 0, 0, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 353,
	0, 0, 0, 0, 192, 193, 194, 354, 355, 356,
	357, 195, 358, 359, 0, 196, 360, 361, 197, 198,
	0, 0, 362, 363, 364, 0, 199, 365, 0, 0,
	0, 200, 201, 202, 0, 204, 205, 206, 203, 0,
	207, 0, 208, 209, 0, 0, 210, 211, 212, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 419, 215,
	366, 216, 367, 368, 0, 217, 0, 218, 0, 219,
	0, 0, 220, 221, 0, 222, 0, 0, 0, 369,
	223, 225, 224, 226, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 227, 228, 372, 373, 374, 0, 229,
	0, 230, 0, 0, 0, 0, 231, 375, 0, 376,
	0, 0, 232, 233, 234, 235, 918, 378, 0, 0,
	379, 239, 0, 236, 0, 0, 237, 380, 238, 381,
	382, 383, 384, 385, 0, 386, 0, 0, 240, 241,
	242, 0, 387, 388, 243, 244, 245, 0, 247, 246,
	0, 389, 0, 248, 249, 0, 0, 250, 251, 0,
	0, 252, 0, 253, 0, 254, 255, 257, 390, 256,
	0, 258, 259, 261, 260, 0, 0, 0, 391, 262,
	392, 263, 264, 0, 265, 0, 0, 266, 0, 0,
	267, 393, 0, 268, 0, 394, 269, 270, 271, 272,
	273, 274, 0, 275, 395, 276, 396, 277, 0, 278,
	279, 280, 281, 282, 397, 283, 284, 0, 285, 286,
	287, 288, 289, 0, 291, 292, 290, 293, 294, 295,
	296, 0, 297, 0, 298, 299, 398, 300, 0, 304,
	305, 306, 307, 308, 0, 310, 399, 309, 311, 312,
	0, 313, 301, 302, 314, 0, 315, 400, 401, 316,
	0, 0, 323, 317, 318, 303, 319, 322, 402, 320,
	321, 403, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 405, 406, 0, 0, 333,
	334, 407, 408, 0, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 410, 411, 0, 915, 347, 186, 0, 0, 0,
	348, 349, 350, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 353, 0, 0, 0, 0, 192, 193, 194, 354,
	355, 356, 357, 195, 358, 359, 0, 196, 360, 361,
	197, 198, 0, 0, 362, 363, 364, 0, 199, 365,
	0, 0, 0, 200, 201, 202, 0, 204, 205, 206,
	203, 0, 207, 0, 208, 209, 0, 0, 210, 211,
	212, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	419, 215, 366, 216, 367, 368, 0, 217, 0, 218,
	0, 219, 0, 0, 220, 221, 0, 222, 0, 0,
	0, 369, 223, 225, 224, 226, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 227, 228, 372, 373, 374,
	0, 229, 0, 230, 0, 0, 0, 0, 231, 375,
	0, 376, 0, 0, 232, 233, 234, 235, 377, 378,
	0, 0, 379, 239, 0, 236, 0, 0, 237, 380,
	238, 381, 382, 383, 384, 385, 0, 386, 0, 0,
	240, 241, 242, 0, 387, 388, 243, 244, 245, 0,
	247, 246, 0, 389, 0, 248, 249, 0, 0, 250,
	251, 0, 0, 252, 0, 253, 0, 254, 255, 257,
	390, 256, 0, 258, 259, 261, 260, 0, 0, 0,
	391, 262, 392, 263, 264, 0, 265, 0, 0, 266,
	0, 0, 267, 393, 0, 268, 0, 394, 269, 270,
	271, 272, 273, 274, 0, 275, 395, 276, 396, 277,
	0, 278, 279, 280, 281, 282, 397, 283, 284, 0,
	285, 286, 287, 288, 289, 0, 291, 292, 290, 293,
	294, 295, 296, 0, 297, 0, 298, 299, 398, 300,
	0, 304, 305, 306, 307, 308, 0, 310, 399, 309,
	311, 312, 0, 313, 301, 302, 314, 0, 315, 400,
	401, 316, 0, 0, 323, 317, 318, 303, 319, 322,
	402, 320, 321, 403, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 405, 406, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 410, 411, 0, 908, 347, 186, 0,
	0, 0, 348, 349, 350, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 0, 0, 191, 0,
	0, 0, 0, 353, 0, 0, 0, 0, 192, 193,
	194, 354, 355, 356, 357, 195, 358, 359, 0, 196,
	360, 361, 197, 198, 0, 0, 362, 363, 364, 0,
	199, 365, 0, 0, 0, 200, 201, 202, 0, 204,
	205, 206, 203, 0, 207, 0, 208, 209, 0, 0,
	210, 211, 212, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 419, 215, 366, 216, 367, 368, 0, 217,
	0, 218, 0, 219, 0, 0, 220, 221, 0, 222,
	0, 0, 0, 369, 223, 225, 224, 226, 370, 371,
	0, 0, 0, 0, 0, 0, 0, 227, 228, 372,
	373, 374, 0, 229, 0, 230, 0, 0, 0, 0,
	231, 375, 0, 376, 0, 0, 232, 233, 234, 235,
	910, 378, 0, 0, 379, 239, 0, 236, 0, 0,
	237, 380, 238, 381, 382, 383, 384, 385, 0, 386,
	0, 0, 240, 241, 242, 0, 387, 388, 243, 244,
	245, 0, 247, 246, 0, 389, 0, 248, 249, 0,
	0, 250, 251, 0, 0, 252, 0, 253, 0, 254,
	255, 257, 390, 256, 0, 258, 259, 261, 260, 0,
	0, 0, 391, 262, 392, 263, 264, 0, 265, 0,
	0, 266, 0, 0, 267, 393, 0, 268, 0, 394,
	269, 270, 271, 272, 273, 274, 0, 275, 395, 276,
	396, 277, 0, 278, 279, 280, 281, 282, 397, 283,
	284, 0, 285, 286, 287, 288, 289, 0, 291, 292,
	290, 293, 294, 295, 296, 0, 297, 0, 298, 299,
	398, 300, 0, 304, 305, 306, 307, 308, 0, 310,
	399, 309, 311, 312, 0, 313, 301, 302, 314, 0,
	315, 400, 401, 316, 0, 0, 323, 317, 318, 303,
	319, 322, 402, 320, 321, 403, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 405,
	406, 0, 0, 333, 334, 407, 408, 0, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	0, 409, 344, 345, 346, 410, 411, 0, 799, 347,
	186, 0, 0, 0, 348, 349, 350, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	192, 193, 194, 354, 355, 356, 357, 195, 358, 359,
	0, 196, 360, 361, 197, 198, 0, 0, 362, 363,
	364, 0, 199, 365, 0, 0, 0, 200, 201, 202,
	0, 204, 205, 206, 203, 0, 207, 0, 208, 209,
	0, 0, 210, 211, 212, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 419, 215, 366, 216, 367, 368,
	0, 217, 0, 218, 0, 219, 0, 0, 220, 221,
	0, 222, 0, 0, 0, 369, 223, 225, 224, 226,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 227,
	228, 372, 373, 374, 0, 229, 0, 230, 0, 0,
	0, 0, 231, 375, 0, 376, 0, 0, 232, 233,
	234, 235, 801, 378, 0, 0, 379, 239, 0, 236,
	0, 0, 237, 380, 238, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 240, 241, 242, 0, 387, 388,
	243, 244, 245, 0, 247, 246, 0, 389, 0, 248,
	249, 0, 0, 250, 251, 0, 0, 252, 0, 253,
	0, 254, 255, 257, 390, 256, 0, 258, 259, 261,
	260, 0, 0, 0, 391, 262, 392, 263, 264, 0,
	265, 0, 0, 266, 0, 0, 267, 393, 0, 268,
	0, 394, 269, 270, 271, 272, 273, 274, 0, 275,
	395, 276, 396, 277, 0, 278, 279, 280, 281, 282,
	397, 283, 284, 0, 285, 286, 287, 288, 289, 0,
	291, 292, 290, 293, 294, 295, 296, 0, 297, 0,
	298, 299, 398, 300, 0, 304, 305, 306, 307, 308,
	0, 310, 399, 309, 311, 312, 0, 313, 301, 302,
	314, 0, 315, 400, 401, 316, 0, 0, 323, 317,
	318, 303, 319, 322, 402, 320, 321, 403, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 405, 406, 0, 0, 333, 334, 407, 408, 0,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 0, 409, 344, 345, 346, 410, 411, 0,
	797, 347, 186, 0, 0, 0, 348, 349, 350, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 192, 193, 194, 354, 355, 356, 357, 195,
	358, 359, 0, 196, 360, 361, 197, 198, 0, 0,
	362, 363, 364, 0, 199, 365, 0, 0, 0, 200,
	201, 202, 0, 204, 205, 206, 203, 0, 207, 0,
	208, 209, 0, 0, 210, 211, 212, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 419, 215, 366, 216,
	367, 368, 0, 217, 0, 218, 0, 219, 0, 0,
	220, 221, 0, 222, 0, 0, 0, 369, 223, 225,
	224, 226, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 227, 228, 372, 373, 374, 0, 229, 0, 230,
	0, 0, 0, 0, 231, 375, 0, 376, 0, 0,
	232, 233, 234, 235, 377, 378, 0, 0, 379, 239,
	0, 236, 0, 0, 237, 380, 238, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 240, 241, 242, 0,
	387, 388, 243, 244, 245, 0, 247, 246, 0, 389,
	0, 248, 249, 0, 0, 250, 251, 0, 0, 252,
	0, 253, 0, 254, 255, 257, 390, 256, 0, 258,
	259, 261, 260, 0, 0, 0, 391, 262, 392, 263,
	264, 0, 265, 0, 0, 266, 0, 0, 267, 393,
	0, 268, 0, 394, 269, 270, 271, 272, 273, 274,
	0, 275, 395, 276, 396, 277, 0, 278, 279, 280,
	281, 282, 397, 283, 284, 0, 285, 286, 287, 288,
	289, 0, 291, 292, 290, 293, 294, 295, 296, 0,
	297, 0, 298, 299, 398, 300, 0, 304, 305, 306,
	307, 308, 0, 310, 399, 309, 311, 312, 0, 313,
	301, 302, 314, 0, 315, 400, 401, 316, 0, 0,
	323, 317, 318, 303, 319, 322, 402, 320, 321, 403,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 405, 406, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	411, 0, 528, 347, 186, 0, 0, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 353,
	0, 0, 0, 0, 192, 193, 194, 354, 355, 356,
	357, 195, 358, 359, 0, 196, 360, 361, 197, 198,
	0, 0, 362, 363, 364, 0, 519, 365, 0, 0,
	0, 200, 201, 202, 0, 204, 205, 206, 203, 0,
	207, 0, 208, 209, 0, 0, 210, 211, 212, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 419, 215,
	366, 216, 367, 368, 0, 217, 0, 218, 0, 219,
	0, 0, 220, 221, 0, 222, 0, 0, 0, 369,
	223, 225, 224, 226, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 227, 228, 372, 373, 374, 0, 229,
	0, 230, 0, 0, 0, 0, 231, 375, 0, 376,
	0, 0, 232, 233, 234, 235, 377, 378, 0, 0,
	379, 239, 0, 236, 0, 0, 237, 380, 238, 381,
	382, 383, 384, 385, 0, 386, 0, 0, 240, 241,
	242, 0, 387, 388, 243, 244, 245, 0, 247, 246,
	0, 389, 0, 248, 249, 0, 0, 250, 518, 0,
	0, 252, 0, 253, 0, 254, 255, 257, 390, 530,
	0, 258, 259, 261, 260, 0, 0, 0, 391, 262,
	392, 263, 264, 0, 265, 0, 0, 266, 0, 0,
	267, 393, 0, 268, 0, 394, 269, 270, 271, 272,
	273, 274, 0, 275, 395, 276, 396, 277, 0, 278,
	279, 280, 281, 282, 397, 283, 284, 0, 285, 286,
	287, 288, 289, 0, 291, 292, 290, 293, 294, 295,
	296, 0, 297, 0, 298, 299, 520, 300, 0, 304,
	305, 306, 307, 308, 0, 310, 399, 309, 521, 312,
	0, 313, 301, 302, 314, 0, 315, 400, 401, 316,
	0, 0, 323, 317, 318, 303, 319, 322, 402, 320,
	321, 403, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 525, 405, 406, 0, 0, 333,
	523, 407, 408, 0, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 410, 411, 0, 510, 347, 186, 0, 0, 0,
	348, 349, 350, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 353, 0, 0, 0, 0, 192, 193, 194, 354,
	355, 356, 357, 195, 358, 359, 0, 196, 360, 361,
	197, 198, 0, 0, 362, 363, 364, 0, 199, 365,
	0, 0, 0, 200, 201, 202, 0, 204, 205, 206,
	203, 0, 207, 0, 208, 209, 0, 0, 210, 211,
	212, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	419, 215, 366, 216, 367, 368, 0, 217, 0, 218,
	0, 219, 0, 0, 220, 221, 0, 222, 0, 0,
	0, 369, 223, 225, 224, 226, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 227, 228, 372, 373, 374,
	0, 229, 0, 230, 0, 0, 0, 0, 231, 375,
	0, 376, 0, 0, 232, 233, 234, 235, 377, 378,
	0, 0, 379, 239, 0, 236, 0, 0, 237, 380,
	238, 381, 382, 383, 384, 385, 0, 386, 0, 0,
	240, 241, 242, 0, 387, 388, 243, 244, 245, 0,
	247, 246, 0, 389, 0, 248, 249, 0, 0, 250,
	251, 0, 0, 252, 0, 253, 0, 254, 255, 257,
	390, 256, 0, 258, 259, 261, 260, 0, 0, 0,
	391, 262, 392, 263, 264, 0, 265, 0, 0, 266,
	0, 0, 267, 393, 0, 268, 0, 394, 269, 270,
	271, 272, 273, 274, 0, 275, 395, 276, 396, 277,
	0, 278, 279, 280, 281, 282, 397, 283, 284, 0,
	285, 286, 287, 288, 289, 0, 291, 292, 290, 293,
	294, 295, 296, 0, 297, 0, 298, 299, 398, 300,
	0, 511, 305, 306, 307, 308, 0, 310, 399, 309,
	311, 312, 0, 313, 301, 302, 314, 0, 315, 400,
	401, 316, 0, 0, 323, 317, 318, 303, 319, 322,
	402, 320, 321, 403, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 405, 406, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 410, 411, 0, 508, 347, 186, 0,
	0, 0, 348, 349, 350, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 0, 0, 191, 0,
	0, 0, 0, 353, 0, 0, 0, 0, 192, 193,
	194, 354, 355, 356, 357, 195, 358, 359, 0, 196,
	360, 361, 197, 198, 0, 0, 362, 363, 364, 0,
	199, 365, 0, 0, 0, 200, 201, 202, 0, 204,
	205, 206, 203, 0, 207, 0, 208, 209, 0, 0,
	210, 211, 212, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 419, 215, 366, 216, 367, 368, 0, 217,
	0, 218, 0, 219, 0, 0, 220, 221, 0, 222,
	0, 0, 0, 369, 223, 225, 224, 226, 370, 371,
	0, 0, 0, 0, 0, 0, 0, 227, 228, 372,
	373, 374, 0, 229, 0, 230, 0, 0, 0, 0,
	231, 375, 0, 376, 0, 0, 232, 233, 234, 235,
	377, 378, 0, 0, 379, 239, 0, 236, 0, 0,
	237, 380, 238, 381, 382, 383, 384, 385, 0, 386,
	0, 0, 240, 241, 242, 0, 387, 388, 243, 244,
	245, 0, 247, 246, 0, 389, 0, 248, 249, 0,
	0, 250, 251, 0, 0, 252, 0, 253, 0, 254,
	255, 257, 390, 256, 0, 258, 259, 261, 260, 0,
	0, 0, 391, 262, 392, 263, 264, 0, 265, 0,
	0, 266, 0, 0, 267, 393, 0, 268, 0, 394,
	269, 270, 271, 272, 273, 274, 0, 275, 395, 276,
	396, 277, 0, 278, 279, 280, 281, 282, 397, 283,
	284, 0, 285, 286, 287, 288, 289, 0, 291, 292,
	290, 293, 294, 295, 296, 0, 297, 0, 298, 299,
	398, 300, 0, 304, 305, 306, 307, 308, 0, 310,
	399, 309, 311, 312, 0, 313, 301, 302, 314, 0,
	315, 400, 401, 316, 0, 0, 323, 317, 318, 303,
	319, 322, 402, 320, 321, 403, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 405,
	406, 0, 0, 333, 334, 407, 408, 0, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	0, 409, 344, 345, 346, 410, 411, 0, 500, 347,
	186, 0, 0, 0, 348, 349, 350, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	192, 193, 194, 354, 355, 356, 357, 195, 358, 359,
	0, 196, 360, 361, 197, 198, 0, 0, 362, 363,
	364, 0, 199, 365, 0, 0, 0, 200, 201, 202,
	0, 204, 205, 206, 203, 0, 207, 0, 208, 209,
	0, 0, 210, 211, 212, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 419, 215, 366, 216, 367, 368,
	0, 217, 0, 218, 0, 219, 0, 0, 220, 221,
	0, 222, 0, 0, 0, 369, 223, 225, 224, 226,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 227,
	228, 372, 373, 374, 0, 229, 0, 230, 0, 0,
	0, 0, 231, 375, 0, 376, 0, 0, 232, 233,
	234, 235, 377, 378, 0, 0, 379, 239, 0, 236,
	0, 0, 237, 380, 238, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 240, 241, 242, 0, 387, 388,
	243, 244, 245, 0, 247, 246, 0, 389, 0, 248,
	249, 0, 0, 250, 251, 0, 0, 252, 0, 253,
	0, 254, 255, 257, 390, 256, 0, 258, 259, 261,
	260, 0, 0, 0, 391, 262, 392, 263, 264, 0,
	265, 0, 0, 266, 0, 0, 267, 393, 0, 268,
	0, 394, 269, 270, 271, 272, 273, 274, 0, 275,
	395, 276, 396, 277, 0, 278, 279, 280, 281, 282,
	397, 283, 284, 0, 285, 286, 287, 288, 289, 0,
	291, 292, 290, 293, 294, 295, 296, 0, 297, 0,
	298, 299, 398, 300, 0, 304, 305, 306, 307, 308,
	0, 310, 399, 309, 311, 312, 0, 313, 301, 302,
	314, 0, 315, 400, 401, 316, 0, 0, 323, 317,
	318, 303, 319, 322, 402, 320, 321, 403, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 405, 406, 0, 0, 333, 334, 407, 408, 0,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 0, 409, 344, 345, 346, 410, 411, 0,
	450, 347, 186, 0, 0, 0, 348, 349, 350, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 192, 193, 194, 354, 355, 356, 357, 195,
	358, 359, 0, 196, 360, 361, 197, 198, 0, 0,
	362, 363, 364, 0, 199, 365, 0, 0, 0, 200,
	201, 202, 0, 204, 205, 206, 203, 0, 207, 0,
	208, 209, 0, 0, 210, 211, 212, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 419, 215, 366, 216,
	367, 368, 0, 217, 0, 218, 0, 219, 0, 0,
	220, 221, 0, 222, 0, 0, 0, 369, 223, 225,
	224, 226, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 227, 228, 372, 373, 374, 0, 229, 0, 230,
	0, 0, 0, 0, 231, 375, 0, 376, 0, 0,
	232, 233, 234, 235, 377, 378, 0, 0, 379, 239,
	0, 236, 0, 0, 237, 380, 238, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 240, 241, 242, 0,
	387, 388, 243, 244, 245, 0, 247, 246, 0, 389,
	0, 248, 249, 0, 0, 250, 251, 0, 0, 252,
	0, 253, 0, 254, 255, 257, 390, 256, 0, 258,
	259, 261, 260, 0, 0, 0, 391, 262, 392, 263,
	264, 0, 265, 0, 0, 266, 0, 0, 267, 393,
	0, 268, 0, 394, 269, 270, 271, 272, 273, 274,
	0, 275, 395, 276, 396, 277, 0, 278, 279, 280,
	281, 282, 397, 283, 284, 0, 285, 286, 287, 288,
	289, 0, 291, 292, 290, 293, 294, 295, 296, 0,
	297, 0, 298, 299, 398, 300, 0, 304, 305, 306,
	307, 308, 0, 310, 399, 309, 311, 312, 0, 313,
	301, 302, 314, 0, 315, 400, 401, 316, 0, 0,
	323, 317, 318, 303, 319, 322, 402, 320, 321, 403,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 405, 406, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	411, 186, 0, 347, 0, 0, 0, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 353, 0, 0, 0,
	0, 192, 193, 194, 354, 355, 356, 357, 195, 358,
	359, 0, 196, 360, 361, 197, 198, 0, 0, 362,
	363, 364, 0, 199, 365, 0, 0, 0, 200, 201,
	202, 0, 204, 205, 206, 203, 0, 207, 0, 208,
	209, 0, 0, 210, 211, 212, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 419, 215, 366, 216, 367,
	368, 0, 217, 0, 218, 0, 219, 0, 0, 220,
	221, 0, 222, 0, 0, 0, 369, 223, 225, 224,
	226, 370, 371, 0, 0, 0, 0, 0, 0, 0,
	227, 228, 372, 373, 374, 0, 229, 0, 230, 0,
	0, 0, 0, 231, 375, 0, 376, 0, 0, 232,
	233, 234, 235, 377, 378, 0, 0, 379, 239, 0,
	236, 0, 0, 237, 380, 238, 381, 382, 383, 384,
	385, 0, 386, 0, 0, 240, 241, 242, 0, 387,
	388, 243, 244, 245, 0, 247, 246, 0, 389, 0,
	248, 249, 0, 0, 250, 251, 0, 0, 252, 0,
	253, 0, 254, 255, 257, 390, 256, 0, 258, 259,
	261, 260, 0, 0, 0, 391, 262, 392, 263, 264,
	0, 265, 0, 0, 266, 0, 0, 267, 393, 0,
	268, 0, 394, 269, 270, 271, 272, 273, 274, 0,
	275, 395, 276, 396, 277, 0, 278, 279, 280, 281,
	282, 397, 283, 284, 0, 285, 286, 287, 288, 289,
	0, 291, 292, 290, 293, 294, 295, 296, 0, 297,
	0, 298, 299, 398, 300, 0, 304, 305, 306, 307,
	308, 0, 310, 399, 309, 311, 312, 0, 313, 301,
	302, 314, 0, 315, 400, 401, 316, 0, 0, 323,
	317, 318, 303, 319, 322, 402, 320, 321, 403, 0,
	324, 0, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 404, 405, 406, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	186, 0, 347, 0, 0, 0, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	192, 193, 194, 354, 355, 356, 357, 195, 358, 359,
	0, 196, 360, 361, 197, 198, 0, 0, 362, 363,
	364, 0, 199, 365, 0, 0, 0, 200, 201, 202,
	0, 204, 205, 206, 203, 0, 207, 0, 208, 209,
	0, 0, 210, 211, 212, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 419, 215, 366, 216, 367, 368,
	0, 217, 0, 218, 0, 219, 0, 0, 220, 221,
	0, 222, 0, 0, 0, 369, 223, 225, 224, 226,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 227,
	228, 372, 373, 374, 0, 229, 0, 230, 0, 0,
	0, 0, 231, 375, 0, 376, 0, 0, 232, 233,
	234, 235, 1984, 378, 0, 0, 379, 239, 0, 236,
	0, 0, 237, 380, 238, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 240, 241, 242, 0, 387, 388,
	243, 244, 245, 0, 247, 246, 0, 389, 0, 248,
	249, 0, 0, 250, 251, 0, 0, 252, 0, 253,
	0, 254, 255, 257, 390, 256, 0, 258, 259, 261,
	260, 0, 0, 0, 391, 262, 392, 263, 264, 0,
	265, 0, 0, 266, 0, 0, 267, 393, 0, 268,
	0, 394, 269, 270, 271, 272, 273, 274, 0, 275,
	395, 276, 396, 277, 0, 278, 279, 280, 281, 282,
	397, 283, 284, 0, 285, 286, 287, 288, 289, 0,
	291, 292, 290, 293, 294, 295, 296, 0, 297, 0,
	298, 299, 398, 300, 0, 304, 305, 306, 307, 308,
	0, 310, 399, 309, 311, 312, 0, 313, 301, 302,
	314, 0, 315, 400, 401, 316, 0, 0, 323, 317,
	318, 303, 319, 322, 402, 320, 321, 403, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 405, 406, 0, 0, 333, 334, 407, 408, 0,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 0, 409, 344, 345, 346, 410, 411, 186,
	0, 347, 0, 0, 0, 0, 348, 349, 350, 351,
	352, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 353, 0, 0, 0, 0, 192,
	193, 194, 354, 355, 356, 357, 195, 358, 359, 0,
	196, 360, 361, 197, 198, 0, 0, 362, 363, 364,
	0, 199, 365, 0, 0, 0, 200, 201, 202, 0,
	204, 205, 206, 203, 0, 207, 0, 208, 209, 0,
	0, 210, 211, 212, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 419, 215, 366, 216, 367, 368, 0,
	217, 0, 218, 0, 219, 0, 0, 220, 221, 0,
	222, 0, 0, 0, 369, 223, 225, 224, 226, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 227, 228,
	372, 373, 374, 0, 229, 0, 230, 0, 0, 0,
	0, 231, 375, 0, 376, 0, 0, 232, 233, 234,
	235, 1982, 378, 0, 0, 379, 239, 0, 236, 0,
	0, 237, 380, 238, 381, 382, 383, 384, 385, 0,
	386, 0, 0, 240, 241, 242, 0, 387, 388, 243,
	244, 245, 0, 247, 246, 0, 389, 0, 248, 249,
	0, 0, 250, 251, 0, 0, 252, 0, 253, 0,
	254, 255, 257, 390, 256, 0, 258, 259, 261, 260,
	0, 0, 0, 391, 262, 392, 263, 264, 0, 265,
	0, 0, 266, 0, 0, 267, 393, 0, 268, 0,
	394, 269, 270, 271, 272, 273, 274, 0, 275, 395,
	276, 396, 277, 0, 278, 279, 280, 281, 282, 397,
	283, 284, 0, 285, 286, 287, 288, 289, 0, 291,
	292, 290, 293, 294, 295, 296, 0, 297, 0, 298,
	299, 398, 300, 0, 304, 305, 306, 307, 308, 0,
	310, 399, 309, 311, 312, 0, 313, 301, 302, 314,
	0, 315, 400, 401, 316, 0, 0, 323, 317, 318,
	303, 319, 322, 402, 320, 321, 403, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	405, 406, 0, 0, 333, 334, 407, 408, 0, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 0,
	343, 0, 409, 344, 345, 346, 410, 411, 186, 0,
	347, 0, 0, 0, 0, 348, 349, 350, 351, 352,
	0, 0, 0, 0, 189, 190, 0, 0, 191, 0,
	0, 0, 0, 353, 0, 0, 0, 0, 192, 193,
	194, 354, 355, 356, 357, 195, 358, 359, 0, 196,
	360, 361, 197, 198, 0, 0, 362, 363, 364, 0,
	199, 365, 0, 0, 0, 200, 201, 202, 0, 204,
	205, 206, 203, 0, 207, 0, 208, 209, 0, 0,
	210, 211, 212, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 419, 215, 366, 216, 367, 368, 0, 217,
	0, 218, 0, 219, 0, 0, 220, 221, 0, 222,
	0, 0, 0, 369, 223, 225, 224, 226, 370, 371,
	0, 0, 0, 0, 0, 0, 0, 227, 228, 372,
	373, 374, 0, 229, 0, 230, 0, 0, 0, 0,
	231, 375, 0, 376, 0, 0, 232, 233, 234, 235,
	1971, 378, 0, 0, 379, 239, 0, 236, 0, 0,
	237, 380, 238, 381, 382, 383, 384, 385, 0, 386,
	0, 0, 240, 241, 242, 0, 387, 388, 243, 244,
	245, 0, 247, 246, 0, 389, 0, 248, 249, 0,
	0, 250, 251, 0, 0, 252, 0, 253, 0, 254,
	255, 257, 390, 256, 0, 258, 259, 261, 260, 0,
	0, 0, 391, 262, 392, 263, 264, 0, 265, 0,
	0, 266, 0, 0, 267, 393, 0, 268, 0, 394,
	269, 270, 271, 272, 273, 274, 0, 275, 395, 276,
	396, 277, 0, 278, 279, 280, 281, 282, 397, 283,
	284, 0, 285, 286, 287, 288, 289, 0, 291, 292,
	290, 293, 294, 295, 296, 0, 297, 0, 298, 299,
	398, 300, 0, 304, 305, 306, 307, 308, 0, 310,
	399, 309, 311, 312, 0, 313, 301, 302, 314, 0,
	315, 400, 401, 316, 0, 0, 323, 317, 318, 303,
	319, 322, 402, 320, 321, 403, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 405,
	406, 0, 0, 333, 334, 407, 408, 0, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	0, 409, 344, 345, 346, 410, 411, 186, 0, 347,
	0, 0, 0, 0, 348, 349, 350, 351, 352, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 353, 0, 0, 0, 0, 192, 193, 194,
	354, 355, 356, 357, 195, 358, 359, 0, 196, 360,
	361, 197, 198, 0, 0, 362, 363, 364, 0, 199,
	365, 0, 0, 0, 200, 201, 202, 0, 204, 205,
	206, 203, 0, 207, 0, 208, 209, 0, 0, 210,
	211, 212, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 419, 215, 366, 216, 367, 368, 0, 217, 0,
	218, 0, 219, 0, 0, 220, 221, 0, 222, 0,
	0, 0, 369, 223, 225, 224, 226, 370, 371, 0,
	0, 0, 0, 0, 0, 0, 227, 228, 372, 373,
	374, 0, 229, 0, 230, 0, 0, 0, 0, 231,
	375, 0, 376, 0, 0, 232, 233, 234, 235, 377,
	378, 0, 0, 379, 239, 0, 236, 0, 0, 237,
	380, 238, 381, 382, 383, 384, 385, 0, 386, 0,
	0, 240, 241, 242, 0, 387, 388, 243, 244, 245,
	0, 247, 246, 0, 389, 0, 248, 249, 0, 0,
	250, 251, 0, 0, 252, 0, 253, 0, 254, 255,
	257, 390, 256, 0, 258, 259, 261, 260, 0, 0,
	0, 391, 262, 392, 263, 264, 0, 265, 0, 0,
	266, 0, 0, 267, 393, 0, 268, 0, 394, 269,
	270, 271, 272, 273, 274, 0, 275, 395, 276, 396,
	277, 0, 278, 279, 280, 281, 282, 397, 283, 284,
	0, 285, 286, 287, 288, 289, 0, 291, 292, 290,
	293, 294, 295, 296, 0, 297, 0, 298, 299, 398,
	300, 0, 511, 305, 306, 307, 308, 0, 310, 399,
	309, 311, 312, 0, 313, 301, 302, 314, 0, 315,
	400, 401, 316, 0, 0, 323, 317, 318, 303, 319,
	322, 402, 320, 321, 403, 0, 324, 0, 325, 326,
	327, 328, 329, 330, 331, 332, 0, 404, 405, 406,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 410, 411, 186, 0, 347, 0,
	0, 0, 0, 348, 349, 350, 351, 352, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 353, 0, 1288, 0, 0, 192, 193, 194, 354,
	355, 356, 357, 195, 358, 359, 0, 196, 360, 361,
	197, 198, 0, 0, 362, 363, 364, 0, 199, 365,
	0, 0, 0, 200, 201, 202, 0, 204, 205, 206,
	203, 0, 207, 0, 208, 209, 0, 0, 210, 211,
	212, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	419, 215, 366, 216, 367, 368, 0, 217, 0, 218,
	0, 219, 0, 0, 220, 221, 0, 222, 0, 0,
	0, 369, 223, 225, 224, 226, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 227, 228, 372, 373, 374,
	0, 229, 0, 230, 0, 0, 0, 0, 231, 375,
	0, 376, 0, 0, 232, 233, 234, 235, 377, 378,
	0, 0, 379, 239, 0, 236, 0, 0, 237, 380,
	238, 381, 382, 383, 384, 385, 0, 386, 0, 0,
	240, 241, 242, 0, 387, 388, 243, 244, 245, 0,
	247, 246, 0, 389, 0, 248, 249, 0, 0, 250,
	251, 0, 0, 252, 0, 253, 0, 254, 255, 257,
	390, 256, 0, 258, 259, 261, 260, 0, 0, 0,
	391, 262, 392, 263, 264, 0, 265, 0, 0, 266,
	0, 0, 267, 393, 0, 268, 0, 394, 269, 270,
	271, 272, 273, 274, 0, 275, 395, 276, 396, 277,
	0, 278, 279, 280, 281, 282, 397, 283, 284, 0,
	285, 286, 287, 288, 289, 0, 291, 292, 290, 293,
	294, 295, 296, 0, 297, 0, 298, 299, 398, 300,
	0, 304, 305, 306, 307, 308, 0, 310, 399, 309,
	311, 312, 0, 0, 301, 302, 314, 0, 315, 400,
	401, 316, 0, 0, 323, 317, 318, 303, 319, 322,
	402, 320, 321, 403, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 405, 406, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 410, 411, 186, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 351, 352, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	353, 0, 0, 0, 0, 192, 193, 194, 354, 355,
	356, 357, 195, 358, 359, 0, 196, 360, 361, 197,
	198, 0, 0, 362, 363, 364, 0, 199, 365, 0,
	0, 0, 200, 201, 202, 0, 204, 205, 206, 203,
	0, 207, 0, 208, 209, 0, 0, 210, 211, 212,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 419,
	215, 366, 216, 367, 368, 0, 217, 0, 218, 0,
	219, 0, 0, 220, 221, 0, 222, 0, 0, 0,
	369, 223, 225, 224, 226, 370, 371, 0, 0, 0,
	0, 0, 0, 0, 227, 228, 372, 373, 374, 0,
	229, 0, 230, 0, 0, 0, 0, 231, 375, 0,
	376, 0, 0, 232, 233, 234, 235, 377, 378, 0,
	0, 379, 239, 0, 236, 0, 0, 237, 380, 238,
	381, 382, 383, 384, 385, 0, 386, 0, 0, 240,
	241, 242, 0, 387, 388, 243, 244, 245, 0, 247,
	246, 0, 389, 0, 248, 249, 0, 0, 250, 251,
	0, 0, 252, 0, 253, 0, 254, 255, 257, 390,
	256, 0, 258, 259, 261, 260, 0, 0, 0, 391,
	262, 392, 263, 264, 0, 265, 0, 0, 266, 0,
	0, 267, 393, 0, 268, 0, 394, 269, 270, 271,
	272, 273, 274, 0, 275, 395, 276, 396, 277, 0,
	278, 279, 280, 281, 282, 397, 752, 284, 0, 285,
	286, 287, 288, 289, 0, 291, 292, 290, 293, 294,
	295, 296, 0, 297, 0, 298, 299, 398, 300, 0,
	304, 305, 306, 307, 308, 0, 310, 399, 309, 311,
	312, 0, 313, 301, 302, 314, 0, 315, 400, 401,
	316, 0, 0, 323, 317, 318, 303, 319, 322, 402,
	320, 321, 403, 0, 324, 0, 325, 326, 327, 328,
	329, 330, 331, 332, 0, 404, 405, 406, 0, 0,
	333, 334, 407, 408, 0, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 0, 343, 0, 409, 344,
	345, 346, 410, 411, 186, 0, 347, 0, 0, 0,
	0, 348, 349, 350, 351, 352, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 353,
	0, 0, 0, 0, 192, 193, 194, 354, 355, 356,
	357, 195, 358, 359, 0, 196, 360, 361, 197, 198,
	0, 0, 362, 363, 364, 0, 199, 365, 0, 0,
	0, 200, 201, 202, 0, 204, 205, 206, 203, 0,
	207, 0, 208, 209, 0, 0, 210, 211, 212, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 419, 215,
	366, 216, 367, 368, 0, 217, 0, 218, 0, 219,
	0, 0, 220, 221, 0, 222, 0, 0, 0, 369,
	223, 225, 224, 226, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 227, 228, 372, 373, 374, 0, 229,
	0, 230, 0, 0, 0, 0, 231, 375, 0, 376,
	0, 0, 232, 233, 234, 235, 377, 378, 0, 0,
	379, 239, 0, 236, 0, 0, 237, 380, 238, 381,
	382, 383, 384, 385, 0, 386, 0, 0, 240, 241,
	242, 0, 387, 388, 243, 244, 245, 0, 247, 246,
	0, 389, 0, 248, 249, 0, 0, 250, 251, 0,
	0, 252, 0, 253, 0, 254, 255, 257, 390, 256,
	0, 258, 259, 261, 260, 0, 0, 0, 391, 262,
	392, 263, 264, 0, 265, 0, 0, 266, 0, 0,
	267, 393, 0, 268, 0, 394, 269, 270, 0, 272,
	273, 274, 0, 275, 395, 276, 396, 277, 0, 278,
	279, 280, 0, 282, 397, 283, 284, 0, 285, 286,
	287, 288, 289, 0, 291, 292, 290, 293, 294, 295,
	296, 0, 297, 0, 298, 299, 398, 0, 0, 304,
	305, 306, 307, 308, 0, 310, 399, 309, 311, 312,
	0, 313, 301, 302, 314, 0, 315, 400, 401, 316,
	0, 0, 323, 317, 318, 303, 319, 322, 402, 320,
	321, 403, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 405, 406, 0, 0, 333,
	334, 407, 408, 0, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 410, 411, 0, 0, 347, 0, 0, 0, 0,
	348, 349, 350, 351, 352, 1079, 1080, 0, 1109, 1110,
	1111, 1119, 1120, 1121, 0, 0, 0, 0, 1097, 0,
	0, 0, 1112, 0, 0, 0, 0, 0, 0, 1082,
	0, 0, 1123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 0, 1079, 1080, 1101,
	1109, 1110, 1111, 1119, 1120, 1121, 1098, 0, 0, 0,
	1097, 0, 0, 0, 1112, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 1123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1081, 0, 0, 0, 0,
	0, 1101, 0, 0, 1104, 1105, 1106, 1107, 1098, 0,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1116, 1124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1122, 0, 0, 0, 1104, 1105, 1106, 1107,
	0, 0, 0, 0, 0, 1087, 0, 0, 0, 0,
	1114, 0, 0, 0, 0, 0, 0, 1102, 0, 0,
	0, 0, 0, 0, 0, 1116, 1124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1113, 1122, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1114, 0, 0, 0, 0, 0, 0, 1102,
	0, 0, 0, 0, 0, 0, 0, 0, 1108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1103, 0, 1113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1117, 0, 0, 0, 0, 0, 1096, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1103, 0, 0, 0, 0,
	0, 0, 1079, 1080, 0, 1109, 1110, 1111, 1119, 1120,
	1121, 0, 1117, 0, 0, 1097, 0, 0, 1096, 1112,
	0, 0, 0, 0, 0, 0, 1082, 0, 0, 1123,
	1115, 0, 0, 1093, 1094, 1100, 1099, 1095, 1118, 0,
	1092, 1090, 1091, 1083, 1084, 1085, 1086, 1088, 1089, 0,
	1081, 0, 0, 0, 0, 0, 1101, 1919, 0, 0,
	0, 0, 0, 1098, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1115, 0, 0, 1093, 1094, 1100, 1099, 1095,
	1118, 0, 1092, 1090, 1091, 1083, 1084, 1085, 1086, 1088,
	1089, 0, 0, 0, 0, 0, 0, 0, 0, 1918,
	0, 1104, 1105, 1106, 1107, 0, 0, 0, 0, 0,
	1087, 0, 0, 0, 0, 1079, 1080, 0, 1109, 1110,
	1111, 1119, 1120, 1121, 0, 0, 0, 0, 1097, 0,
	1116, 1124, 1112, 0, 0, 0, 0, 0, 0, 1082,
	0, 0, 1123, 0, 0, 0, 0, 0, 0, 1122,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 0, 1114, 0, 1101,
	0, 0, 0, 0, 1102, 0, 1098, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1104, 1105, 1106, 1107, 0, 0,
	0, 0, 0, 1087, 0, 1108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1103, 0, 0, 1116, 1124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1117, 0, 0,
	0, 0, 1122, 1096, 1079, 1080, 0, 1109, 1110, 1111,
	1119, 1120, 1121, 0, 0, 0, 0, 1097, 0, 0,
	1114, 1112, 0, 0, 0, 0, 0, 1102, 1082, 0,
	0, 1123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1081, 1113, 0, 0, 0, 0, 1101, 0,
	0, 0, 0, 0, 0, 1098, 0, 1115, 0, 0,
	1093, 1094, 1100, 1099, 1095, 1118, 0, 1092, 1090, 1091,
	1083, 1084, 1085, 1086, 1088, 1089, 0, 0, 1108, 0,
	0, 0, 0, 0, 1870, 0, 0, 0, 0, 0,
	0, 0, 0, 1103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1104, 1105, 1106, 1107, 0, 0, 0,
	1117, 0, 1087, 0, 0, 0, 1096, 1079, 1080, 0,
	1109, 1110, 1111, 1119, 1120, 1121, 0, 0, 0, 0,
	1097, 0, 1116, 1124, 1112, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 1123, 0, 0, 0, 0, 0,
	0, 1122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1081, 0, 0, 0, 1114,
	0, 1101, 0, 0, 0, 0, 1102, 0, 1098, 0,
	1115, 0, 0, 1093, 1094, 1100, 1099, 1095, 1118, 0,
	1092, 1090, 1091, 1083, 1084, 1085, 1086, 1088, 1089, 0,
	0, 0, 1113, 2557, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1104, 1105, 1106, 1107,
	0, 0, 0, 0, 0, 1087, 0, 1108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1103, 0, 0, 1116, 1124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1117,
	0, 0, 0, 0, 1122, 1096, 1079, 1080, 0, 1109,
	1110, 1111, 1119, 1120, 1121, 0, 0, 0, 0, 1097,
	0, 0, 1114, 1112, 0, 0, 0, 0, 0, 1102,
	1082, 0, 0, 1123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1081, 1113, 0, 0, 0, 0,
	1101, 0, 0, 0, 0, 0, 0, 1098, 0, 1115,
	0, 0, 1093, 1094, 1100, 1099, 1095, 1118, 0, 1092,
	1090, 1091, 1083, 1084, 1085, 1086, 1088, 1089, 0, 0,
	1108, 0, 2506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1104, 1105, 1106, 1107, 0,
	0, 0, 1117, 0, 1087, 0, 0, 0, 1096, 1079,
	1080, 0, 1109, 1110, 1111, 1119, 1120, 1121, 0, 0,
	0, 0, 1097, 0, 1116, 1124, 1112, 0, 0, 0,
	0, 0, 0, 1082, 0, 0, 1123, 0, 0, 0,
	0, 0, 0, 1122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1081, 0, 0,
	0, 1114, 0, 1101, 0, 0, 0, 0, 1102, 0,
	1098, 0, 1115, 0, 0, 1093, 1094, 1100, 1099, 1095,
	1118, 0, 1092, 1090, 1091, 1083, 1084, 1085, 1086, 1088,
	1089, 0, 0, 0, 1113, 2459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1104, 1105,
	1106, 1107, 0, 0, 0, 0, 0, 1087, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1103, 0, 0, 1116, 1124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1117, 0, 0, 0, 0, 1122, 1096, 1079, 1080,
	0, 1109, 1110, 1111, 1119, 1120, 1121, 0, 0, 0,
	0, 1097, 0, 0, 1114, 1112, 0, 0, 0, 0,
	0, 1102, 1082, 0, 0, 1123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 1113, 0, 0,
	0, 0, 1101, 0, 0, 0, 0, 0, 0, 1098,
	0, 1115, 0, 0, 1093, 1094, 1100, 1099, 1095, 1118,
	0, 1092, 1090, 1091, 1083, 1084, 1085, 1086, 1088, 1089,
	0, 0, 1108, 0, 2429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1104, 1105, 1106,
	1107, 0, 0, 0, 1117, 0, 1087, 0, 0, 0,
	1096, 1079, 1080, 0, 1109, 1110, 1111, 1119, 1120, 1121,
	0, 0, 0, 0, 1097, 0, 1116, 1124, 1112, 0,
	0, 0, 0, 0, 0, 1082, 0, 0, 1123, 0,
	0, 0, 0, 0, 0, 1122, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1081,
	0, 0, 0, 1114, 0, 1101, 0, 0, 0, 0,
	1102, 0, 1098, 0, 1115, 0, 0, 1093, 1094, 1100,
	1099, 1095, 1118, 0, 1092, 1090, 1091, 1083, 1084, 1085,
	1086, 1088, 1089, 0, 0, 0, 1113, 2424, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1104, 1105, 1106, 1107, 0, 0, 0, 0, 0, 1087,
	0, 1108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1103, 0, 0, 1116,
	1124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1117, 0, 0, 0, 0, 1122, 1096,
	1079, 1080, 0, 1109, 1110, 1111, 1119, 1120, 1121, 0,
	0, 0, 0, 1097, 0, 0, 1114, 1112, 0, 0,
	0, 0, 0, 1102, 1082, 0, 0, 1123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1081, 1113,
	0, 0, 0, 0, 1101, 0, 0, 0, 0, 0,
	0, 1098, 0, 1115, 0, 0, 1093, 1094, 1100, 1099,
	1095, 1118, 0, 1092, 1090, 1091, 1083, 1084, 1085, 1086,
	1088, 1089, 0, 0, 1108, 0, 2420, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1104,
	1105, 1106, 1107, 0, 0, 0, 1117, 0, 1087, 0,
	0, 0, 1096, 1079, 1080, 0, 1109, 1110, 1111, 1119,
	1120, 1121, 0, 0, 0, 0, 1097, 0, 1116, 1124,
	1112, 0, 0, 0, 0, 0, 0, 1082, 0, 0,
	1123, 0, 0, 0, 0, 0, 0, 1122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 0, 0, 0, 1114, 0, 1101, 0, 0,
	0, 0, 1102, 0, 1098, 0, 1115, 0, 0, 1093,
	1094, 1100, 1099, 1095, 1118, 0, 1092, 1090, 1091, 1083,
	1084, 1085, 1086, 1088, 1089, 0, 0, 0, 1113, 2348,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1104, 1105, 1106, 1107, 0, 0, 0, 0,
	0, 1087, 0, 1108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1103, 0,
	0, 1116, 1124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1117, 0, 0, 0, 0,
	1122, 1096, 1079, 1080, 0, 1109, 1110, 1111, 1119, 1120,
	1121, 0, 0, 0, 0, 1097, 0, 0, 1114, 1112,
	0, 0, 0, 0, 0, 1102, 1082, 0, 0, 1123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1081, 1113, 0, 0, 0, 0, 1101, 0, 0, 0,
	0, 0, 0, 1098, 0, 1115, 0, 0, 1093, 1094,
	1100, 1099, 1095, 1118, 0, 1092, 1090, 1091, 1083, 1084,
	1085, 1086, 1088, 1089, 0, 0, 1108, 0, 2314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1104, 1105, 1106, 1107, 0, 0, 0, 1117, 0,
	1087, 0, 0, 0, 1096, 1079, 1080, 0, 1109, 1110,
	1111, 1119, 1120, 1121, 0, 0, 0, 0, 1097, 0,
	1116, 1124, 1112, 0, 0, 0, 0, 0, 0, 1082,
	0, 0, 1123, 0, 0, 0, 0, 0, 0, 1122,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 0, 1114, 0, 1101,
	0, 0, 0, 0, 1102, 0, 1098, 0, 1115, 0,
	0, 1093, 1094, 1100, 1099, 1095, 1118, 0, 1092, 1090,
	1091, 1083, 1084, 1085, 1086, 1088, 1089, 0, 0, 0,
	1113, 2313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1104, 1105, 1106, 1107, 0, 0,
	0, 0, 0, 1087, 0, 1108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1103, 0, 0, 1116, 1124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1117, 0, 0,
	0, 0, 1122, 1096, 1079, 1080, 0, 1109, 1110, 1111,
	1119, 1120, 1121, 0, 0, 0, 0, 1097, 0, 0,
	1114, 1112, 0, 0, 0, 0, 0, 1102, 1082, 0,
	0, 1123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1081, 1113, 0, 0, 0, 0, 1101, 0,
	0, 0, 0, 0, 0, 1098, 0, 1115, 0, 0,
	1093, 1094, 1100, 1099, 1095, 1118, 0, 1092, 1090, 1091,
	1083, 1084, 1085, 1086, 1088, 1089, 0, 0, 1108, 0,
	2278, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1104, 1105, 1106, 1107, 0, 0, 0,
	1117, 0, 1087, 0, 0, 0, 1096, 1079, 1080, 0,
	1109, 1110, 1111, 1119, 1120, 1121, 0, 0, 0, 0,
	1097, 0, 1116, 1124, 1112, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 1123, 0, 0, 0, 0, 0,
	0, 1122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1081, 0, 0, 0, 1114,
	0, 1101, 0, 0, 0, 0, 1102, 0, 1098, 0,
	1115, 0, 0, 1093, 1094, 1100, 1099, 1095, 1118, 0,
	1092, 1090, 1091, 1083, 1084, 1085, 1086, 1088, 1089, 0,
	0, 0, 1113, 2116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1104, 1105, 1106, 1107,
	0, 0, 0, 0, 0, 1087, 0, 1108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1103, 0, 0, 1116, 1124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1117,
	0, 0, 0, 0, 1122, 1096, 1079, 1080, 0, 1109,
	1110, 1111, 1119, 1120, 1121, 0, 0, 0, 0, 1097,
	0, 0, 1114, 1112, 0, 0, 0, 0, 0, 1102,
	1082, 0, 0, 1123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1081, 1113, 0, 0, 0, 0,
	1101, 0, 0, 0, 0, 0, 0, 1098, 0, 1115,
	0, 0, 1093, 1094, 1100, 1099, 1095, 1118, 0, 1092,
	1090, 1091, 1083, 1084, 1085, 1086, 1088, 1089, 0, 0,
	1108, 0, 2092, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1104, 1105, 1106, 1107, 0,
	0, 0, 1117, 0, 1087, 0, 0, 0, 1096, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1116, 1124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1114, 0, 0, 0, 0, 0, 0, 1102, 0,
	0, 0, 1115, 0, 0, 1093, 1094, 1100, 1099, 1095,
	1118, 0, 1092, 1090, 1091, 1083, 1084, 1085, 1086, 1088,
	1089, 0, 0, 0, 1113, 1538, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1103, 1079, 1080, 0, 1109, 1110,
	1111, 1119, 1120, 1121, 0, 0, 0, 0, 1097, 0,
	0, 1117, 1112, 0, 0, 0, 0, 1096, 0, 1082,
	0, 0, 1123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 0, 0, 0, 1101,
	0, 0, 0, 0, 0, 0, 1098, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1115, 0, 0, 1093, 1094, 1100, 1099, 1095, 1118,
	0, 1092, 1090, 1091, 1083, 1084, 1085, 1086, 1088, 1089,
	0, 0, 1840, 0, 1104, 1105, 1106, 1107, 0, 0,
	0, 0, 0, 1087, 2620, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1079, 1080, 0, 1109, 1110, 1111,
	1119, 1120, 1121, 1116, 1124, 0, 0, 1097, 0, 0,
	0, 1112, 0, 0, 0, 0, 0, 0, 1082, 0,
	0, 1123, 1122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1114, 0, 1081, 0, 0, 0, 0, 1102, 1101, 0,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2619, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1104, 1105, 1106, 1107, 0, 1108, 0,
	0, 0, 1087, 0, 1910, 0, 0, 1909, 0, 0,
	0, 0, 0, 1103, 0, 0, 0, 0, 0, 0,
	0, 0, 1116, 1124, 0, 0, 0, 0, 0, 0,
	1117, 0, 0, 0, 0, 0, 1096, 0, 0, 0,
	0, 1122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1114,
	0, 0, 0, 0, 0, 0, 1102, 0, 0, 0,
	0, 0, 0, 0, 1079, 1080, 0, 1109, 1110, 1111,
	1119, 1120, 1121, 0, 0, 0, 0, 1097, 0, 0,
	0, 1112, 1113, 0, 0, 0, 1813, 0, 1082, 0,
	1115, 1123, 0, 1093, 1094, 1100, 1099, 1095, 1118, 0,
	1092, 1090, 1091, 1083, 1084, 1085, 1086, 1088, 1089, 0,
	0, 0, 1081, 0, 0, 0, 0, 1108, 1101, 0,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 1103, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1117,
	0, 0, 1814, 0, 0, 1096, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1104, 1105, 1106, 1107, 0, 0, 0,
	0, 0, 1087, 0, 0, 0, 0, 1636, 0, 0,
	0, 0, 0, 1079, 1080, 0, 1109, 1110, 1111, 1119,
	1120, 1121, 1116, 1124, 0, 0, 1097, 0, 0, 0,
	1112, 0, 0, 0, 1635, 0, 0, 1082, 0, 1115,
	1123, 1122, 1093, 1094, 1100, 1099, 1095, 1118, 0, 1092,
	1090, 1091, 1083, 1084, 1085, 1086, 1088, 1089, 0, 1114,
	0, 1081, 0, 0, 0, 0, 1102, 1101, 0, 0,
	0, 0, 0, 0, 1098, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1104, 1105, 1106, 1107, 0, 1108, 0, 0,
	0, 1087, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1103, 0, 0, 0, 0, 0, 0, 0,
	0, 1116, 1124, 0, 0, 0, 0, 0, 0, 1117,
	0, 0, 0, 0, 0, 1096, 0, 0, 0, 0,
	1122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1114, 0,
	0, 0, 0, 0, 0, 1102, 0, 0, 0, 0,
	0, 0, 0, 1079, 1080, 0, 1109, 1110, 1111, 1119,
	1120, 1121, 0, 0, 0, 0, 1097, 0, 0, 0,
	1112, 1113, 0, 0, 0, 0, 0, 1082, 0, 1115,
	1123, 0, 1093, 1094, 1100, 1099, 1095, 1118, 0, 1092,
	1090, 1091, 1083, 1084, 1085, 1086, 1088, 1089, 0, 0,
	0, 1081, 0, 0, 0, 0, 1108, 1101, 0, 0,
	0, 0, 0, 0, 1098, 0, 0, 0, 0, 0,
	0, 1103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1117, 0,
	0, 0, 1079, 1080, 1096, 1109, 1110, 1111, 1119, 1120,
	1121, 0, 0, 0, 0, 1097, 0, 0, 0, 1112,
	0, 0, 1104, 1105, 1106, 1107, 1082, 0, 0, 1123,
	0, 1087, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1081, 1116, 1124, 0, 0, 0, 1101, 0, 0, 0,
	0, 0, 0, 1098, 0, 0, 0, 0, 1115, 0,
	1122, 1093, 1094, 1100, 1099, 1095, 1118, 0, 1092, 1090,
	1091, 1083, 1084, 1085, 1086, 1088, 1089, 0, 1114, 0,
	0, 0, 0, 0, 0, 1102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1104, 1105, 1106, 1107, 0, 0, 0, 0, 0,
	1087, 1113, 609, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1116, 1124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1108, 0, 0, 1122,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1103, 0, 0, 0, 0, 0, 1114, 0, 0,
	0, 0, 0, 0, 1102, 0, 0, 0, 1117, 0,
	0, 0, 1079, 1080, 1096, 1109, 1110, 1111, 1119, 1120,
	1121, 0, 0, 0, 0, 1097, 0, 0, 0, 1112,
	1113, 0, 0, 0, 0, 0, 1082, 0, 0, 1123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1081, 0, 0, 0, 0, 1108, 1101, 0, 0, 0,
	0, 0, 0, 1098, 0, 0, 0, 0, 1115, 0,
	1103, 1093, 1094, 1100, 1099, 1095, 1118, 0, 1092, 1090,
	1091, 1083, 1084, 1085, 1086, 1088, 1089, 1117, 0, 0,
	0, 0, 0, 1096, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1104, 1105, 1106, 1107, 2096, 0, 0, 0, 0,
	1087, 0, 0, 0, 0, 1916, 0, 0, 0, 0,
	0, 1079, 1080, 0, 1109, 1110, 1111, 1119, 1120, 1121,
	1116, 1124, 0, 0, 1097, 0, 0, 0, 1112, 0,
	0, 0, 1911, 0, 0, 1082, 0, 1115, 1123, 1122,
	1093, 1094, 1100, 1099, 1095, 1118, 0, 1092, 1090, 1091,
	1083, 1084, 1085, 1086, 1088, 1089, 0, 1114, 0, 1081,
	0, 0, 0, 0, 1102, 1101, 0, 0, 0, 0,
	0, 0, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1104, 1105, 1106, 1107, 0, 1108, 0, 0, 0, 1087,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1103, 0, 0, 0, 0, 0, 0, 0, 0, 1116,
	1124, 0, 0, 0, 0, 0, 0, 1117, 0, 0,
	0, 0, 0, 1096, 0, 0, 0, 0, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1114, 0, 0, 0,
	0, 0, 0, 1102, 0, 0, 0, 0, 0, 0,
	0, 1079, 1080, 0, 1109, 1110, 1111, 1119, 1120, 1121,
	0, 0, 0, 0, 1097, 0, 0, 0, 1112, 1113,
	0, 0, 0, 0, 0, 1082, 0, 1115, 1123, 0,
	1093, 1094, 1100, 1099, 1095, 1118, 0, 1092, 1090, 1091,
	1083, 1084, 1085, 1086, 1088, 1089, 0, 0, 0, 1081,
	0, 0, 0, 0, 1108, 1101, 0, 0, 0, 0,
	0, 0, 1098, 0, 0, 0, 0, 0, 0, 1103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1117, 0, 0, 0,
	0, 0, 1096, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1104, 1105, 1106, 1107, 0, 0, 0, 0, 0, 1087,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1079, 1080, 0, 1109, 1110, 1111, 1119, 1120, 1121, 1116,
	1124, 0, 0, 1097, 0, 0, 0, 1112, 0, 0,
	0, 1869, 0, 0, 1082, 0, 1115, 1123, 1122, 1093,
	1094, 1100, 1099, 1095, 1118, 0, 1092, 1090, 1091, 1083,
	1084, 1085, 1086, 1088, 1089, 0, 1114, 0, 1081, 0,
	0, 0, 0, 1102, 1101, 0, 0, 0, 0, 0,
	0, 1098, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1876, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1104,
	1105, 1106, 1107, 0, 1108, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1103,
	0, 0, 0, 0, 0, 0, 0, 0, 1116, 1124,
	0, 0, 0, 0, 0, 0, 1117, 0, 0, 0,
	0, 0, 1096, 0, 0, 0, 0, 1122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1114, 0, 0, 0, 0,
	0, 0, 1102, 0, 0, 0, 0, 0, 0, 0,
	1079, 1080, 0, 1109, 1110, 1111, 1119, 1120, 1121, 0,
	0, 0, 0, 1097, 0, 0, 0, 1112, 1113, 0,
	0, 0, 0, 0, 1082, 0, 1115, 1123, 0, 1093,
	1094, 1100, 1099, 1095, 1118, 0, 1092, 1090, 1091, 1083,
	1084, 1085, 1086, 1088, 1089, 0, 0, 0, 1081, 0,
	0, 0, 0, 1108, 1101, 0, 0, 0, 0, 0,
	0, 1098, 0, 0, 0, 0, 0, 0, 1103, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1117, 0, 0, 0, 1079,
	1080, 1096, 1109, 1110, 1111, 1119, 1120, 1121, 0, 0,
	0, 0, 1097, 0, 0, 0, 1112, 0, 0, 1104,
	1105, 1106, 1107, 1082, 0, 0, 1123, 0, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1081, 1116, 1124,
	0, 0, 0, 1101, 0, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 1115, 0, 1122, 1093, 1094,
	1100, 1099, 1095, 1118, 0, 1092, 1090, 1091, 1083, 1084,
	1085, 1086, 1088, 1089, 0, 1114, 0, 0, 0, 0,
	0, 0, 1102, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1104, 1105,
	1106, 1107, 0, 0, 0, 0, 0, 1087, 1113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1116, 1124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1108, 0, 0, 1122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1103, 0,
	0, 0, 0, 0, 1114, 0, 0, 0, 0, 0,
	0, 1102, 0, 0, 0, 1117, 0, 0, 0, 1079,
	1080, 1096, 1109, 1110, 1111, 1119, 1120, 1121, 0, 0,
	0, 0, 1097, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1082, 0, 0, 1123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1081, 0, 0,
	0, 0, 1108, 1101, 0, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 1115, 0, 1103, 1093, 1094,
	1100, 1099, 1095, 1118, 0, 1092, 1090, 1091, 1083, 1084,
	1085, 1086, 1088, 1089, 1117, 0, 0, 0, 1079, 1080,
	1096, 1109, 1110, 1111, 1119, 1120, 1121, 0, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 1104, 1105,
	1106, 1107, 1082, 0, 0, 1123, 0, 1087, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 1116, 1124, 0,
	0, 0, 1101, 0, 0, 0, 0, 0, 0, 1098,
	0, 0, 0, 0, 1115, 0, 1122, 1093, 1094, 1100,
	1099, 1095, 1118, 0, 1092, 1090, 1091, 1083, 1084, 1085,
	1086, 1088, 1089, 0, 1114, 0, 0, 0, 0, 0,
	0, 1102, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1104, 1105, 1106,
	1107, 0, 0, 0, 0, 0, 1087, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1116, 1124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1103, 0, 0,
	0, 0, 0, 1114, 0, 0, 0, 0, 0, 0,
	1102, 0, 0, 0, 1117, 0, 0, 0, 0, 0,
	1096, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1108, 0, 0, 0, 0, 1333, 0, 0, 0,
	0, 0, 0, 0, 1115, 0, 1103, 1093, 1094, 1100,
	1099, 1095, 1118, 0, 1092, 1090, 1091, 1083, 1084, 1085,
	1086, 1088, 1089, 1117, 0, 0, 0, 0, 0, 1096,
	1341, 1330, 1360, 1319, 1351, 1350, 0, 0, 1321, 1320,
	0, 0, 0, 0, 1362, 1361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1356, 0, 1348, 1347, 0, 0, 0, 0,
	0, 0, 0, 1115, 1346, 0, 1093, 1094, 1100, 1099,
	1095, 1118, 0, 1092, 1090, 1091, 1083, 1084, 1085, 1086,
	1088, 1089, 0, 0, 0, 0, 0, 1345, 1343, 1344,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1329, 0, 0, 0, 0, 0, 0, 1334,
	1332, 1335, 1336, 1337, 1338, 1339, 0, 1359, 0, 0,
	0, 0, 0, 0, 1323, 1322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1333,
	1325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1349, 0, 0, 0, 1331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1341, 1330, 1360, 1319, 1351, 1350, 0,
	0, 1321, 1320, 0, 0, 0, 1342, 1362, 1361, 0,
	1463, 1461, 1462, 1465, 1464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1326, 549,
	0, 575, 0, 0, 0, 1356, 0, 1348, 1347, 1340,
	1327, 0, 0, 0, 0, 0, 0, 1346, 0, 554,
	1364, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 552, 1324, 0, 0, 0, 1357, 1358, 0,
	1345, 1343, 1344, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 0, 0, 0, 0, 555, 1328,
	0, 0, 0, 0, 1363, 1329, 561, 562, 0, 0,
	0, 571, 1334, 1332, 1335, 1336, 1337, 1338, 1339, 0,
	1359, 0, 0, 0, 0, 576, 556, 1323, 1322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 574, 0,
	0, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1349, 0, 0, 0, 1331,
	0, 0, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 0, 0, 565, 0, 0,
	0, 0, 560, 567, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 0, 0, 0, 0,
	0, 1326, 0, 0, 0, 0, 577, 0, 0, 0,
	0, 0, 1340, 1327, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1364, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 0, 0,
	1357, 1358, 0, 0, 0, 0, 0, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1328, 0, 0, 0, 0, 1363, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 551, 568, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 569, 0, 0, 0, 573, 0, 0, 0,
	0, 579, 0, 0, 0, 0, 566, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 572,
}
var sqlPact = [...]int{

	5044, -1000, 5, -1000, -1000, -1000, 195, -1000, -1000, -1000,
	-1000, 192, 188, 172, -1000, 170, 167, 166, 165, 164,
	162, 161, 160, 158, 156, 155, -1000, 154, -1000, -1000,
	-1000, -1000, 153, 149, 148, -1000, 147, 1252, 23263, 146,
	145, 1286, -1000, -1000, 36217, 144, -1000, 1115, 27004, 1003,
	1499, -1000, 137, 1052, 35878, 3244, 2059, 1188, 1751, 35536,
	22921, 1721, 1484, 35194, -1000, -1000, 34852, 135, 129, 128,
	121, 114, -1000, -1000, 34510, 113, 112, 111, 104, 97,
	96, 94, 93, 89, 88, 87, 85, 84, 83, -1000,
	82, 73, 72, -1000, 43937, 71, 70, 64, 1186, 61,
	60, 59, 57, -1000, -1000, 941, 53, 49, 48, 46,
	42, 247, 41, 40, 39, 38, -1000, 1105, 481, 2703,
	9037, 1090, 1086, 1085, 1081, 1092, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 38251, 36217, 37, -22, 36, -1000, 2104, 640, 19095,
	5044, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 26662, 26320, 22579, 34168, 33826, 6488, 834, -1000,
	1, 24619, 36217, -1000, 91, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 14569, 14189, 605, 91, -1000,
	-1000, -1000, 33484, 22226, 33142, 1583, 32800, -1000, -1000, 32458,
	-1000, -1000, 2051, 1781, 1779, 25978, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 32119, 31777, 31435, 31093, 21873, 547,
	-1000, -1000, -1000, 17375, -1000, -1000, -1000, -1000, 35, -1000,
	32, 31, -1000, 30, 23, 21, 20, 19, 15, -1000,
	14, 13, -1000, 10, 9, -1000, 8, 7, 1112, 1195,
	1033, 30751, 921, 1348, -1000, -1000, 2, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 36217, -1000, 15625, -1000, 545,
	-1000, 1681, -1000, 15625, -1000, 1344, -1000, -1000, -1000, -1000,
	-1000, 36217, -1000, -1000, -1000, -1000, -1000, -1000, 2325, 1234,
	544, 30409, -1000, 1747, -1000, 664, 808, -1000, -1000, -1000,
	9741, 206, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1309, 21520, 1381, 2121, 1963, 2324, 1491, 1911, 1878,
	1873, 1866, 1863, 2323, 998, 2322, 1858, 1094, 2318, 1783,
	1649, 746, 2316, 1680, 1679, -1000, -1000, -1000, -1000, 997,
	-1000, -1000, -1000, 28360, -1000, -1000, -1000, -1000, -1000, -1000,
	1144, 967, -1000, -1000, -1000, -1000, -1000, 1105, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1476, 2063, 2063, 2063, 2147,
	354, 347, -1000, 247, -1000, 1492, -1000, 1209, -1000, -1000,
	-1000, 43040, -1000, -1000, 15625, 15625, 15625, 15625, 15625, 1191,
	-1000, 565, -1000, 543, 542, 7587, -1000, -1000, 2306, -1000,
	-1000, -1000, 356, -1000, -1000, 15625, 91, -1000, -1000, -1000,
	-1000, 541, 2311, -1000, 659, -1000, -1000, -1000, 672, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1762, 539,
	538, 537, -1000, 536, -1000, -1000, 535, 534, 532, 531,
	530, 529, 528, 522, 520, 519, 517, 516, 511, 510,
	508, 1029, -1000, 704, -1000, -1000, 704, 704, -1000, 467,
	467, 469, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	467, -1000, -1000, -1000, 634, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 507, 1266, -1000,
	-1000, 1266, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 829,
	37573, -2, 36217, -1000, 506, -2, -1000, -1000, 504, -1000,
	10093, 10093, -1000, -1000, -1000, 15625, -1000, 1816, -1000, 2953,
	-195, 357, 620, -1000, 18063, 20816, -1000, -1000, 1276, 1966,
	716, -1000, 1010, 1955, 576, -1000, 689, 1950, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1200, -1000,
	1215, 1934, -68, 1860, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	23602, 24619, 1, 0, -1000, -1000, -1000, 6137, 43040, -1000,
	43040, -1000, 912, 19783, 91, -1000, -1000, -1000, -1000, 503,
	1407, 682, 1406, -1000, 367, -1000, 30067, 682, 1402, -1000,
	-1000, -1000, 28360, -1000, 36217, -1000, 36217, -1000, 949, -1000,
	37912, 118, 1927, -1000, -1000, 118, 1926, -1000, 117, 1913,
	-1000, -1000, 1301, 1905, -1000, -42, 1903, -1000, -1000, -1000,
	15625, -39, -1000, -1000, -1000, 640, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 29725, 23941, 1384, 551, 43040, 2176, 43855, 23602, 43040,
	23941, -1000, -1000, 36217, -1000, 15625, -1000, 2174, 1742, -9,
	-1000, -1000, -1000, -1000, -1000, 1468, 1488, 812, 970, 9741,
	9741, 2017, -1000, 204, 6488, -1000, -1000, -1000, -1000, 29383,
	-1000, -1000, -1000, 1221, 36217, -1000, -1000, 1748, -1000, 23941,
	36217, -1000, 36217, -1000, 36217, -1000, 36217, -1000, 36217, -1000,
	-1000, -1000, -1000, -1000, 735, -1000, 1734, -1000, -1000, 36217,
	-1000, 1441, -1000, -1000, -1000, 29044, 28702, -1000, 1028, 862,
	-1000, -1000, 120, -1000, 36217, 36217, 2110, 660, -1000, 1476,
	1436, 1688, 738, 1311, 1514, 13809, 1500, 15625, 247, -1000,
	-1000, 247, 247, 8657, -1000, -1000, -1000, 36217, -1000, 43662,
	43855, 6488, 846, 15625, 15625, 15625, 15625, 15625, 15625, 15625,
	15625, 15625, 15625, 15625, 15625, 15625, 15625, 15625, 15625, 15625,
	15625, 15625, 15625, 15625, 15625, 15625, 15625, 15625, 15625, 15625,
	15625, 15625, 15625, 15625, 15625, 1480, 15625, 821, 15625, 15625,
	15625, 15625, 1367, 1158, 407, 1213, -1000, 2262, 2262, 2262,
	43319, 43319, 463, 565, -1000, 15625, -1000, 139, 15625, 347,
	41067, -1, 7221, -1000, -1000, -1000, 13457, 699, 43040, 91,
	6841, -1000, 2301, 909, 1771, 1633, 501, 585, 575, 571,
	496, 15625, 15625, 13105, 12725, 12345, 16329, 11965, 15625, 7953,
	15625, 15625, 15625, 15625, 11585, 11205, -1000, 499, -1000, -1000,
	-1000, -1000, 2296, -1000, -1000, 2288, -1000, 842, 815, 2281,
	-1000, -9, -1000, 37573, -1000, 36217, -2, 2171, 36217, 15625,
	138, -1000, 41933, -1000, 138, -40, 43040, 1510, 1506, 19439,
	1525, 1229, 1229, 1229, -1000, 498, 560, 620, 5424, 10825,
	-1000, 27343, 1241, 224, 346, 17719, 1816, -1000, 36217, -18,
	1051, -1000, 25636, 2072, 2071, 2058, 28360, 2161, 139, 1854,
	1676, -1000, 6488, 820, 28360, 1087, 23602, 2094, 817, 2159,
	139, 1849, 1675, 814, 36217, 6488, 2092, 610, -1000, 36217,
	-1000, -1000, -1000, 1664, -41, -1000, -1000, 25297, 2169, 1899,
	-1000, 1079, -1000, 1895, 2168, 36217, 1334, 1399, -1000, -1000,
	855, 1888, 695, 454, 2167, 454, 20128, -1000, 36217, -1000,
	36217, -1000, -1000, 36217, -1000, 36217, -1000, 36217, 36217, -1000,
	36217, 23602, 23602, -46, 3498, 24958, 811, -1000, 725, 25297,
	3848, -47, -1000, 768, -1000, -1000, -1000, -1000, 202, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 469, 1029, 467, 467, 467,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 634, -1000, -1000,
	704, 704, 704, -1000, -1000, -105, 1661, 628, -52, 752,
	-9, -1000, 1266, -1000, 1280, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2309, -1000,
	2299, -1000, -1000, 2279, -11, -1000, -11, -1000, 6488, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 36217, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 483, -1000, -1000, -1000, -1000,
	-1000, -1000, 36217, 36217, 36217, -1000, 28360, -1000, 686, 1689,
	-1000, 2103, 1436, 1688, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 43040, -1000, 397, -1000, -1000, 43040, 1114, 1530,
	-1000, 1530, -12, -1000, 41804, 1501, 36217, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 658, 479,
	479, 843, 843, 843, 843, 2289, 264, 2699, 588, 286,
	286, 286, 286, 286, 286, 286, 286, 193, 421, 421,
	193, 193, 193, 193, 193, 286, 286, 286, 43319, 43129,
	4219, 15625, 15625, 802, 1150, 407, 4219, 15625, 4219, 4219,
	4219, 4219, -1000, 1420, -1000, -1000, -1000, -1000, 1660, 466,
	16329, 16329, -1000, -1000, -1000, 7587, 15625, -1000, -1000, -1000,
	-1000, 465, 15625, -1000, 41226, -226, 345, -66, -1000, 15625,
	559, -112, -1000, 940, -1000, 15625, -1000, -25, 15625, 15625,
	15625, 344, -1000, 343, -1000, 799, -1000, 798, 792, 789,
	-1000, 459, 1219, 458, 457, 15625, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 42850, 39252, 341, -1000, 1659, -66,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 340, -1000, 339,
	-1000, 42721, -66, 337, 4059, -1000, 16329, 16329, 16329, 7587,
	456, 324, -1000, 41614, -1000, 42531, 10445, 10445, 10445, 317,
	42402, 15625, -66, 38987, 38935, 4693, -64, -69, -1000, -70,
	-1000, 2274, -71, 316, 657, 653, 311, -1000, -1000, 451,
	-77, -83, 695, 10093, 18751, 6488, -1000, 695, -1000, 15625,
	19439, 19439, 1232, 1495, 19439, -1000, -1000, -1000, -1000, 27343,
	512, 620, 27343, -1000, 2272, 1516, 310, -1000, -1000, -1000,
	36217, 450, -1000, 620, 300, 1039, 36217, 36217, 36217, -1000,
	-1000, 1398, 37234, 1394, 43855, 36217, -1000, 449, 448, 1498,
	1497, 36217, 36217, 36895, 36556, 36217, 1106, 139, -1000, 2084,
	446, -1000, 36217, 1005, 23602, 685, 652, 36217, 139, -1000,
	2082, 444, 6488, 999, -1000, 650, 1614, 1364, -1000, 906,
	1658, 36217, 297, -91, -13, 43855, -1000, -1000, -1000, -1000,
	-1000, 36217, 525, 36217, 139, 36217, 23602, 23602, 139, 36217,
	1880, 1973, 587, 36217, 1514, 15625, 1069, -1000, 18407, 717,
	36217, 990, 90, -1000, -1000, -1000, 606, 36217, -1000, -1000,
	118, 118, -1000, 117, 1301, -1000, -42, -1000, -1000, -1000,
	36217, 23602, -92, -1000, 732, 731, 728, -1000, 43855, -1000,
	564, 813, -1000, 2257, 675, 36217, 9741, 9741, -1000, 1519,
	-1000, -1000, 1018, -1000, 1014, -1000, -1000, -1000, -1000, 9741,
	-1000, -19, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1260,
	1269, -1000, -1000, -1000, 1114, -1000, 15625, 2254, -1000, -1000,
	-1000, 8657, -1000, -1000, -1000, 36217, -168, 15625, 4219, 4219,
	15625, 16329, 16329, -1000, 4219, -1000, -1000, -1000, -1000, -1000,
	1651, 441, 15625, 43855, 3952, 3685, -93, 193, 15625, -14,
	-1000, 15625, -1000, 40944, -1000, -1000, 563, 1876, -1000, 15625,
	42212, 292, 9389, -1000, 42123, -48, -48, -1000, 2264, 1417,
	1405, 1044, 969, 2251, -1000, 20472, 696, 1243, 40785, 43662,
	43855, -1000, 15625, -1000, -1000, 1647, 15625, -1000, 43662, 43855,
	16329, 16329, 16329, 16329, 16329, 16329, 16329, 16329, 16329, 16329,
	16329, 16329, 16329, 16329, 16329, 16329, 16329, 16329, 16329, 1520,
	16329, 2209, 2209, 2209, -16, 15625, -1000, 1643, 1647, 15625,
	15625, 43855, 291, 290, 289, -1000, 15625, -66, 15625, 15625,
	15625, -1000, -1000, -1000, 288, -1000, 2244, -1000, -1000, -1000,
	-1000, 3848, -1000, -1000, 1630, -1000, -141, -1000, 1816, -1000,
	1630, 43040, -1000, 1232, -1000, 440, 15625, 19439, -1000, 558,
	-1000, -94, -1000, 27343, -1000, 556, -221, -1000, 602, -1000,
	620, 435, 36217, 27343, -1000, -1000, -1000, 786, 785, 1874,
	-1000, 1388, -1000, 719, -1000, 1226, 15625, 17031, 434, 431,
	1149, -1000, 1871, 1301, 1868, 1301, -1000, -18, 1038, -1000,
	647, 15625, -1000, 784, -1000, 1053, 21167, -1000, -1000, 642,
	15625, -1000, 782, 21167, 675, 1646, 876, -1000, 885, -1000,
	1600, -1000, 25297, 430, 36217, 428, -1000, 427, -1000, 682,
	-1000, 425, 36217, 1485, 587, 24280, -1000, 682, 990, -1000,
	43040, -1000, 990, 8305, 2066, -99, -1000, -1000, -1000, 695,
	20128, 19439, 15625, -106, -1000, -1000, -1000, -1000, -19, 2024,
	2024, -1000, 2241, -1000, 554, 287, -1000, 28021, -19, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 36217, 1502, 6488, 36217,
	36217, 36217, 1264, 40662, -1000, 2054, 6488, 2246, 4219, 3659,
	3616, 15625, 43855, 43408, -109, 15625, 15625, -1000, 285, 15625,
	553, 43040, -1000, -1000, -1000, 43040, 15625, 2248, 15625, 284,
	283, 282, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	272, -1000, -1000, 38590, 15625, 270, -1000, 269, 267, 43040,
	1643, 43040, -1000, -1000, 598, 598, 932, 932, 932, 932,
	2209, 1103, 500, 1022, 246, 246, 246, 805, 493, 493,
	246, 246, 246, 1644, 1477, 424, 4373, 15625, 266, -1000,
	-1000, 43040, 43040, 260, -1000, -1000, -1000, -66, 338, 40503,
	40380, -1000, 232, 227, 1620, 2145, -1000, 19439, 1620, -1000,
	36217, 43040, -1000, -195, -1000, 2225, -1000, -1000, 1516, -1000,
	5785, 27343, 36217, -116, -1000, 36217, 36217, 36217, 1864, -1000,
	1540, -1000, 40221, -117, -1000, 333, 2114, 15625, -1000, -1000,
	423, 17031, 36217, -1000, 1508, 1503, 745, 36217, -1000, 36217,
	-1000, 36217, 36217, 36217, 21167, -119, 36217, 23602, -1000, 422,
	91, 21167, -124, 6488, -1000, -1000, 23602, 771, -1000, 1156,
	1607, -1000, 17031, 420, 36217, 25297, 2166, -1000, 17031, 1323,
	1478, 587, 24280, -1000, 855, -1000, -1000, -20, -1000, 405,
	139, 990, -1000, -23, 43040, 592, 2007, -1000, 2004, 550,
	-1000, -1000, -35, 419, -1000, 591, 590, -1000, -36, -1000,
	621, 617, -1000, -1000, -1000, 1142, 1142, -1000, -1000, -1000,
	2054, 15625, 15625, 43408, -129, -1000, 4219, 4219, -1000, 40098,
	-1000, 43040, -1000, 42123, -1000, -1000, -1000, -1000, 1145, -1000,
	39939, -1000, -1000, -1000, -1000, 16329, 1642, 411, 43855, 39816,
	-1000, -1000, 15625, -1000, -1000, -1000, -1000, 693, 15625, 15625,
	1816, 693, -132, 620, -1000, -1000, -1000, 2223, -1000, -135,
	-1000, -1000, -1000, -1000, 36217, -1000, 36217, -1000, 6488, 36217,
	1640, 1378, -1000, -1000, 1496, 409, 16329, 36217, -1000, 1122,
	17031, 2054, 91, 6488, 2054, 39657, 6841, -138, -140, 1377,
	-1000, 1375, 15625, -1000, 43855, 1301, 1301, -1000, 778, 776,
	-1000, 772, -1000, -1000, 15625, -1000, 758, -1000, -42, 21167,
	-1000, -1000, 2140, 1159, -145, 17031, -146, 226, 139, -147,
	36217, -1000, 587, 24280, -1000, 1973, 1983, 36217, 2043, -1000,
	-1000, 407, 404, 402, -1000, 27682, 27682, 23602, 23602, 1502,
	-1000, 36217, -1000, 36217, -1000, -1000, -1000, 4219, 4219, -1000,
	-1000, 225, 1243, 2134, -1000, 314, 16329, 43855, -148, -1000,
	39534, -1000, 36217, 43040, -66, -1000, -1000, 27343, 513, -1000,
	-1000, 1345, -1000, -1000, 36217, 1386, -1000, -1000, 15625, 4373,
	400, 1600, 396, -1000, -1000, -1000, -1000, -1000, -1000, 2114,
	-25, -1000, 1031, -1000, -1000, 43040, 2112, -1000, -1000, 36217,
	36217, 386, -48, 383, -1000, 1328, 36217, 1122, -153, -1000,
	1600, -1000, 1122, 377, 24280, -1000, 1485, 861, -154, 36217,
	-1000, 23602, 23602, -1000, -156, -1000, -1000, -1000, -161, -164,
	-1000, 1006, 15625, 314, -169, -1000, -1000, -65, -1000, 2165,
	-1000, -1000, -1000, -1000, 1861, 39375, 1423, 36217, -1000, 36217,
	2054, 223, 36217, 723, 6488, -1000, -1000, 15625, 222, 15625,
	373, 372, 371, 1600, 1122, -1000, 1600, 17031, -1000, 1478,
	934, -1000, 695, -1000, -170, -171, -1000, -1000, -1000, 216,
	15977, 15977, -66, -1000, 36217, 368, 1780, -1000, 1274, 1319,
	214, -176, -1000, -1000, 367, -1000, 15625, -1000, -181, 2248,
	-182, 36217, 36217, 36217, -1000, 1600, -1000, -183, -1000, 20128,
	-1000, 675, 675, -1000, -1000, -1000, 16680, 1353, 978, 41485,
	-1000, -1000, -1000, 36217, -1000, 1297, 1285, 983, -1000, -1000,
	-1000, -1000, -1000, 1423, 43040, -1000, -1000, -189, -191, -192,
	-1000, 1122, -177, -1000, -1000, 2182, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1990, -1000, 737, 1320, 1320, 1274, 365,
	362, 1225, 1600, -1000, 15273, -1000, 2191, -1000, -1000, 1539,
	-1000, -1000, 1142, 1142, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 203, 712, 119, 710, -1000, 360, -1000, 1472,
	-49, 14921, 810, 369, -90, -1000, -197, -1000, 43040, -1000,
	358, -1000, 14921, 1142, -1000, 14921, 14921, -198, -1000, -1000,
	-210, -1000, -63, 1142, -104, -1000, -1000, 1142, -1000,
}
var sqlPgo = [...]int{

	0, 2721, 2719, 1800, 2718, 2166, 2716, 2711, 2708, 2706,
	2154, 2704, 2703, 2702, 2701, 2700, 2699, 2698, 2697, 2695,
	2694, 2693, 2692, 2684, 2681, 2679, 2677, 2674, 2145, 2673,
	2136, 2672, 2667, 2664, 2663, 2662, 2661, 37, 2660, 2658,
	2654, 2129, 2653, 2652, 2651, 2643, 2124, 2642, 2120, 2641,
	2637, 2108, 2632, 2631, 2630, 2104, 2629, 2098, 2627, 87,
	112, 2089, 2626, 2622, 2065, 2038, 2002, 2620, 1993, 2617,
	2612, 1991, 1952, 2610, 41, 2605, 2604, 2602, 1911, 1895,
	2601, 2596, 2595, 154, 2593, 1881, 2590, 2581, 2575, 2571,
	2566, 2564, 2563, 2562, 2560, 2559, 2558, 2556, 2550, 2549,
	2547, 2546, 2545, 2540, 2539, 162, 2538, 2537, 1789, 1763,
	2536, 2535, 35, 32, 15, 71, 120, 155, 3163, 148,
	2534, 2533, 2532, 2531, 2530, 2529, 31, 101, 95, 2528,
	44, 2527, 2522, 56, 47, 25, 21, 77, 93, 2521,
	2511, 2442, 30, 2510, 2508, 135, 2507, 76, 26, 1874,
	156, 152, 78, 127, 2505, 2500, 2498, 58, 121, 7,
	8, 5, 1, 54, 4, 2, 2496, 3, 6, 2495,
	2483, 22, 92, 28, 2482, 50, 62, 2480, 2479, 131,
	2473, 68, 113, 1705, 144, 124, 367, 103, 2469, 79,
	19, 74, 2468, 2466, 159, 43, 90, 146, 114, 2465,
	59, 163, 129, 83, 130, 139, 2464, 2463, 2457, 109,
	2455, 117, 94, 2454, 2453, 85, 2452, 119, 134, 2450,
	141, 111, 2449, 2448, 96, 2446, 125, 2437, 2435, 158,
	147, 115, 16, 82, 80, 10, 1626, 1618, 136, 104,
	72, 63, 2434, 736, 1149, 40, 52, 2431, 86, 70,
	38, 65, 102, 145, 33, 2429, 2426, 133, 2425, 2424,
	2423, 2422, 2421, 100, 2419, 2418, 2416, 88, 46, 57,
	91, 48, 69, 128, 107, 151, 108, 2404, 84, 123,
	2403, 1037, 2402, 2401, 1526, 118, 2400, 2395, 2393, 1145,
	1141, 1077, 294, 2392, 2389, 485, 268, 2388, 2385, 89,
	2384, 116, 106, 99, 138, 140, 66, 2382, 122, 34,
	2379, 306, 23, 0, 2758, 2542, 2374, 126, 81, 2373,
	2372, 2371, 2369, 36, 17, 9, 11, 12, 14, 29,
	27, 2367, 2366, 132, 97, 73, 2363, 157, 2362, 2361,
	2360, 53, 2358, 24, 2357, 20, 2353, 2352, 18, 13,
	2350, 2349, 137, 2341, 110, 2338, 2178, 2334, 149, 2332,
	2329, 1958, 2328, 51, 105,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 6, 6,
	6, 6, 6, 6, 6, 8, 8, 10, 10, 9,
	9, 9, 11, 7, 7, 7, 7, 7, 7, 13,
	13, 14, 23, 17, 25, 12, 20, 18, 26, 16,
	16, 22, 22, 128, 128, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	125, 125, 130, 130, 130, 132, 132, 129, 129, 124,
	124, 28, 28, 72, 72, 115, 65, 65, 65, 311,
	311, 312, 312, 111, 111, 112, 112, 112, 112, 113,
	113, 114, 114, 114, 39, 39, 39, 30, 30, 30,
	30, 30, 31, 31, 32, 32, 40, 40, 40, 40,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 48, 48, 49, 49, 49, 49, 49, 49, 50,
	50, 50, 50, 51, 51, 51, 51, 51, 51, 51,
	51, 56, 56, 56, 54, 54, 54, 53, 53, 53,
	52, 52, 52, 55, 55, 55, 185, 185, 184, 184,
	188, 188, 57, 57, 57, 57, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 60, 60,
	60, 60, 60, 60, 60, 280, 280, 279, 58, 58,
	255, 255, 61, 61, 210, 210, 62, 62, 62, 62,
	62, 63, 63, 73, 73, 352, 352, 352, 356, 356,
	357, 357, 358, 358, 358, 358, 358, 358, 358, 354,
	354, 68, 68, 68, 68, 69, 69, 69, 70, 70,
	110, 110, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 33, 33, 34, 35, 35, 36, 36, 37, 37,
	37, 37, 37, 79, 79, 79, 81, 78, 78, 78,
	80, 80, 80, 80, 82, 82, 83, 83, 83, 83,
	83, 84, 84, 305, 303, 303, 304, 304, 155, 155,
	155, 155, 155, 156, 156, 156, 310, 310, 310, 310,
	310, 310, 309, 309, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 97, 97, 97, 105, 105, 105, 105, 105, 105,
	105, 86, 86, 91, 91, 91, 91, 91, 87, 87,
	92, 92, 93, 93, 94, 94, 94, 94, 94, 94,
	88, 88, 88, 88, 96, 96, 96, 96, 95, 95,
	101, 101, 101, 101, 101, 101, 98, 98, 98, 98,
	99, 99, 99, 102, 102, 102, 102, 89, 89, 90,
	90, 103, 103, 104, 104, 104, 104, 104, 104, 100,
	100, 100, 353, 353, 355, 355, 66, 66, 44, 44,
	45, 45, 157, 157, 158, 158, 234, 234, 234, 234,
	159, 159, 131, 131, 131, 162, 163, 163, 160, 160,
	161, 161, 164, 164, 164, 166, 166, 167, 167, 168,
	168, 165, 165, 165, 233, 321, 321, 322, 322, 322,
	322, 322, 322, 323, 323, 323, 323, 323, 323, 323,
	319, 319, 320, 317, 317, 318, 318, 318, 318, 359,
	359, 232, 232, 171, 171, 324, 324, 324, 324, 325,
	325, 325, 325, 325, 328, 327, 326, 326, 326, 326,
	326, 266, 266, 266, 107, 107, 46, 46, 46, 137,
	137, 47, 47, 43, 43, 43, 214, 214, 175, 175,
	271, 271, 271, 148, 148, 126, 126, 126, 19, 21,
	21, 15, 15, 15, 15, 15, 15, 27, 27, 24,
	24, 215, 215, 216, 216, 67, 67, 71, 71, 76,
	76, 106, 106, 106, 106, 106, 106, 29, 29, 29,
	29, 38, 38, 38, 38, 75, 75, 361, 361, 144,
	144, 144, 144, 145, 145, 229, 229, 230, 230, 362,
	362, 231, 231, 231, 139, 138, 140, 140, 42, 42,
	42, 133, 133, 134, 134, 135, 135, 136, 136, 363,
	363, 64, 64, 64, 109, 109, 151, 151, 226, 226,
	226, 228, 228, 227, 227, 227, 200, 200, 200, 108,
	108, 180, 180, 190, 190, 191, 191, 277, 192, 74,
	74, 118, 118, 116, 116, 116, 116, 116, 116, 116,
	116, 117, 117, 117, 119, 119, 119, 119, 119, 119,
	119, 122, 122, 122, 123, 123, 123, 121, 121, 334,
	334, 334, 337, 337, 333, 335, 335, 336, 336, 360,
	360, 201, 201, 201, 170, 169, 169, 173, 173, 172,
	174, 174, 270, 270, 270, 198, 198, 197, 197, 197,
	197, 219, 219, 217, 217, 218, 218, 222, 222, 223,
	223, 223, 224, 224, 225, 225, 196, 196, 251, 251,
	221, 221, 220, 120, 120, 120, 179, 179, 179, 181,
	181, 241, 241, 241, 242, 242, 240, 240, 240, 240,
	272, 272, 272, 272, 272, 272, 272, 272, 350, 350,
	350, 351, 351, 269, 269, 273, 273, 273, 273, 273,
	273, 267, 267, 267, 267, 268, 268, 278, 278, 204,
	204, 204, 204, 202, 202, 203, 203, 274, 274, 274,
	274, 199, 199, 275, 275, 275, 235, 235, 281, 281,
	281, 299, 299, 178, 178, 178, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 283, 283, 283,
	283, 285, 285, 285, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 298, 298, 298, 298, 298, 286, 286, 293,
	293, 294, 294, 295, 296, 287, 287, 288, 288, 289,
	290, 297, 297, 297, 297, 301, 301, 291, 291, 291,
	291, 291, 292, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 212, 212, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 245, 245, 245, 245, 247, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 247, 329, 329, 329,
	329, 329, 329, 329, 329, 331, 331, 332, 332, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 338,
	338, 339, 339, 341, 341, 342, 342, 343, 344, 344,
	344, 345, 346, 346, 340, 340, 347, 347, 347, 348,
	348, 349, 349, 349, 349, 349, 257, 257, 258, 259,
	265, 265, 265, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 146,
	146, 146, 146, 146, 187, 187, 186, 186, 254, 254,
	252, 252, 256, 256, 205, 205, 300, 300, 300, 300,
	300, 300, 300, 206, 206, 206, 213, 207, 207, 208,
	208, 208, 208, 208, 248, 249, 209, 209, 209, 250,
	250, 260, 264, 264, 263, 262, 262, 261, 261, 238,
	238, 239, 239, 237, 236, 195, 195, 194, 194, 193,
	193, 364, 364, 189, 189, 276, 276, 276, 276, 182,
	182, 153, 153, 183, 183, 149, 149, 152, 152, 150,
	150, 150, 150, 176, 176, 177, 177, 147, 147, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	302, 302, 302, 253, 141, 141, 141, 142, 142, 143,
	143, 307, 307, 307, 308, 308, 308, 308, 306, 306,
	306, 306, 306, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 3, 4,
	6, 6, 6, 5, 5, 7, 7, 8, 8, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 6, 6, 4, 8, 3, 3, 3, 6, 4,
	3, 2, 1, 1, 0, 2, 0, 2, 0, 2,
	0, 7, 2, 6, 2, 1, 12, 12, 2, 1,
	1, 1, 3, 3, 0, 3, 1, 3, 1, 1,
	3, 2, 5, 0, 4, 6, 7, 1, 2, 1,
	2, 2, 3, 3, 3, 3, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 3, 1,
	2, 7, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 1, 3, 1, 2,
	2, 3, 2, 2, 5, 3, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 1, 3, 1, 5, 2,
	3, 0, 3, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 2, 6, 2, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 2, 1, 2, 2, 3, 2, 4, 3,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	3, 1, 1, 4, 4, 7, 1, 3, 2, 4,
	2, 4, 1, 6, 6, 3, 5, 3, 2, 6,
	3, 3, 4, 4, 3, 3, 1, 3, 3, 1,
	1, 2, 1, 1, 1, 1, 1, 3, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 3, 3, 1, 1, 1, 1, 1, 2,
	2, 3, 3, 4, 4, 3, 4, 4, 4, 3,
	2, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 2, 3, 3, 3, 2, 3,
	4, 3, 5, 3, 4, 5, 2, 3, 3, 3,
	4, 2, 3, 4, 3, 3, 3, 4, 4, 4,
	4, 2, 3, 7, 7, 8, 8, 4, 5, 5,
	5, 5, 2, 0, 2, 0, 3, 2, 8, 10,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 1,
	8, 0, 1, 1, 0, 2, 1, 0, 1, 0,
	9, 9, 5, 6, 4, 3, 5, 1, 3, 1,
	1, 9, 10, 8, 3, 2, 0, 3, 1, 2,
	2, 3, 6, 2, 1, 1, 2, 4, 2, 5,
	7, 8, 5, 3, 1, 4, 6, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 2, 4, 7, 3, 3,
	0, 6, 3, 11, 14, 4, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 8, 10, 8, 10, 6, 8, 6,
	8, 1, 0, 2, 0, 2, 2, 3, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 2, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 0, 1, 3, 1,
	0, 1, 1, 1, 2, 3, 2, 2, 8, 11,
	3, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 3, 6, 3, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 2, 0, 8,
	3, 2, 0, 1, 3, 1, 1, 3, 5, 1,
	1, 3, 3, 1, 2, 4, 4, 2, 3, 5,
	5, 2, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 4, 5, 1, 0, 2, 2, 1,
	1, 1, 0, 2, 5, 2, 3, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 3, 0, 2, 0,
	1, 0, 2, 4, 2, 5, 3, 2, 0, 1,
	3, 3, 5, 1, 1, 3, 2, 4, 4, 0,
	8, 4, 6, 3, 3, 1, 5, 5, 0, 2,
	3, 1, 3, 2, 0, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 1, 1, 2, 3, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 4, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 2, 1,
	3, 1, 1, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 3, 4, 1, 1, 1, 5,
	1, 3, 3, 1, 3, 3, 1, 3, 3, 1,
	1, 3, 3, 1, 1, 6, 6, 4, 3, 4,
	3, 4, 3, 4, 4, 3, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 3, 4, 3, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 5, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 3, 1, 3,
	3, 3, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 2, 2, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 380, -4, -28, -30, -33, -39,
	-40, -62, -48, -49, -50, -61, -57, -63, -64, -65,
	-66, -58, -72, -71, -73, -76, -74, -67, -68, -77,
	-85, -106, -107, -108, -109, -5, -10, 24, 35, -31,
	-32, 48, -35, -34, 72, -46, -41, 74, 95, -336,
	99, -51, -55, 103, 110, 113, 135, 144, 230, 237,
	258, 260, 262, 269, -116, -118, 256, -69, -70, -78,
	-79, -80, -81, -110, 281, -86, -87, -88, -89, -90,
	-91, -92, -93, -94, -95, -96, -97, -98, -99, -100,
	-101, -102, -103, -104, 284, -29, -38, -75, 324, -6,
	-7, -8, -9, -11, -21, 112, -42, -43, -44, -45,
	-47, -334, -52, -53, -54, -56, -119, -117, 377, 257,
	333, 36, 294, 62, 106, 264, -13, -14, -17, -16,
	-18, -15, -23, -25, -22, -24, -26, -27, -19, -20,
	-12, 349, 356, -122, -120, -121, -123, 274, 341, 304,
	381, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 2, 304, 344, 334, 88, 152, 242, -352, 2,
	-183, 304, 88, -150, -141, 370, 4, -313, -315, 20,
	21, 24, 34, 35, 36, 41, 45, 48, 49, 56,
	61, 62, 63, 68, 65, 66, 67, 70, 72, 73,
	76, 77, 78, 86, 87, 89, 91, 95, 97, 99,
	102, 103, 105, 110, 112, 111, 113, 123, 124, 129,
	131, 136, 142, 143, 144, 145, 153, 156, 158, 151,
	168, 169, 170, 174, 175, 176, 179, 178, 183, 184,
	187, 188, 191, 193, 195, 196, 199, 197, 201, 202,
	204, 203, 209, 211, 212, 214, 217, 220, 223, 226,
	227, 228, 229, 230, 231, 233, 235, 237, 239, 240,
	241, 242, 243, 245, 246, 248, 249, 250, 251, 252,
	256, 254, 255, 257, 258, 259, 260, 262, 264, 265,
	267, 282, 283, 295, 269, 270, 271, 272, 273, 277,
	275, 278, 279, 281, 284, 286, 289, 293, 294, 296,
	299, 300, 297, 292, 303, 305, 306, 307, 308, 309,
	310, 311, 312, 319, 320, 324, 325, 326, 327, 330,
	331, 332, 333, 335, 338, 339, 340, 345, 350, 351,
	352, 353, 354, 29, 37, 38, 39, 40, 42, 43,
	46, 47, 52, 53, 54, 57, 90, 92, 93, 109,
	114, 115, 125, 126, 127, 137, 139, 146, 147, 150,
	157, 159, 160, 161, 162, 163, 165, 172, 173, 181,
	198, 208, 210, 221, 225, 234, 236, 244, 266, 276,
	287, 288, 298, 301, 314, 315, 316, 321, 322, 337,
	341, 342, 380, 380, 2, 169, 241, -149, -141, 88,
	380, 2, 304, 334, 344, -214, 88, 329, -141, 237,
	22, 2, 97, 156, 332, 331, 22, 233, 275, 306,
	308, 2, 380, 2, 344, 304, 152, 88, 334, -141,
	2, -60, 2, 377, -59, -5, -41, -51, -61, -57,
	-10, -28, -30, -46, -48, -55, -65, -64, -66, -68,
	-72, -71, -74, -78, -79, -85, -108, -109, 74, 24,
	103, 281, 112, -356, 2, 22, -357, -358, 74, 103,
	135, 274, 156, 97, 331, 304, 2, 169, 2, -141,
	2, -352, 2, 169, 2, -356, 2, -141, 2, -145,
	2, 269, -141, 380, 380, 380, 380, 380, 188, 56,
	266, 278, -83, 320, -82, 314, -305, -84, 2, -184,
	199, -141, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 2,
	-105, 278, 35, 56, 22, 61, 89, 136, 152, 153,
	175, 69, 70, 240, 188, 170, 319, 176, 279, 305,
	320, 74, 335, 309, 111, 4, 88, 199, 280, 314,
	380, 380, 380, -360, 2, 304, 380, 380, 380, 380,
	271, 284, 380, 380, 380, 380, 380, -117, -119, -118,
	380, 380, 380, 380, -172, -173, 328, 164, 108, 219,
	-116, -118, 2, -334, -105, 278, 2, 56, 22, -303,
	2, -243, 215, -245, 368, 369, 363, 205, 355, -257,
	94, -247, -260, 109, 266, 377, -149, -246, 383, 9,
	-331, -118, 30, -258, -259, 50, -141, 7, 8, 5,
	6, -147, -283, -253, -292, 323, 116, 207, -329, -330,
	4, -313, -307, -284, -294, -288, -291, 165, 59, 80,
	81, 84, 82, 85, 280, 334, 51, 29, 114, 115,
	225, 234, 301, 321, 322, 146, 208, 147, 57, 137,
	181, 102, 38, 40, 42, 43, 52, 53, 90, 92,
	93, 125, 126, 127, 157, 159, 160, 161, 162, 163,
	210, 244, 287, 298, 315, 316, 342, -314, -295, -296,
	-289, -290, 75, 117, 134, 155, 148, 167, 171, 182,
	185, 194, 200, 222, 224, 263, 285, -297, -361, 2,
	320, 320, 2, -361, 2, -361, 2, -144, 2, 320,
	317, -337, 245, -333, -141, -337, 380, 380, 382, 380,
	-169, -170, 2, 22, 100, 377, 2, -272, 2, 375,
	-274, -149, -118, -273, 377, 216, -3, 2, -274, 146,
	-149, 2, -274, 146, -149, 2, -311, 146, -309, 9,
	-308, 5, 4, -313, -315, -314, 59, 2, -141, 2,
	-152, 146, -149, -306, 4, -313, -315, -314, -316, 22,
	25, 26, 27, 28, 30, 31, 32, 33, 44, 50,
	51, 55, 58, 60, 69, 74, 79, 80, 82, 81,
	83, 84, 85, 94, 96, 98, 100, 101, 104, 106,
	108, 116, 118, 130, 132, 133, 135, 138, 140, 149,
	152, 154, 164, 166, 177, 180, 186, 189, 190, 205,
	206, 207, 213, 215, 216, 218, 219, 232, 238, 247,
	261, 274, 280, 290, 302, 304, 313, 317, 318, 323,
	328, 329, 334, 336, 343, 344, 346, 347, 348, 349,
	317, 382, -183, -176, -141, -237, -236, 379, -243, 2,
	-243, 2, 133, 377, -194, -195, -236, -237, 2, -184,
	146, -311, 146, 2, -184, 2, 152, -141, 146, 2,
	-141, 22, 133, 2, 166, 2, 166, 2, -275, 2,
	-274, -185, 146, 2, -184, -185, 146, 2, -153, 146,
	2, -152, -141, 146, 2, -312, 146, 2, -311, -210,
	377, -280, 2, -279, -308, 341, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 278, 215, 382, -184, -243, -255, 377, 133, -243,
	215, -141, 2, 282, 2, 377, -83, 54, 320, -230,
	2, -231, -138, -139, -140, 168, 239, 243, 354, 317,
	360, 133, -303, -188, 379, -105, 2, -311, 2, 282,
	2, 240, 279, 56, 133, 2, 2, -353, 2, 215,
	133, 2, 133, 2, 133, 2, 133, 2, 133, 2,
	2, 240, 279, 2, 130, 2, 319, 2, 2, 133,
	2, 168, 239, 295, 2, 304, 344, 2, 133, 133,
	354, 2, -199, -274, 88, 304, 354, 22, -172, -173,
	-220, -197, 130, -217, -218, 186, 118, 213, -201, 22,
	100, -201, -201, 45, 378, 378, -105, 282, 2, 10,
	11, 58, 34, 368, 369, 370, 371, 128, 372, 373,
	366, 367, 365, 358, 359, 362, 291, 23, 71, 361,
	360, 64, 192, 268, 119, 120, 121, 122, 253, 13,
	14, 15, 27, 218, 185, 355, 148, 285, 363, 16,
	17, 18, 167, 37, 149, -146, -154, -243, -243, -243,
	-243, -243, 224, -193, -238, 375, -118, 377, 377, -118,
	-243, -186, 377, 7, -118, -252, 375, -261, -243, -194,
	377, 5, 377, 5, -338, 350, 130, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 236, -301, 345, -301,
	-301, -285, 377, -285, -286, 377, -285, 351, 356, 377,
	-229, -230, -229, 317, -145, 382, -337, -177, 377, 377,
	-189, -276, -243, 370, -189, -186, -243, 75, -204, 171,
	200, 134, 182, 263, 155, 7, -60, -240, 383, 377,
	370, -269, 356, -118, -273, 377, -272, -149, 377, -128,
	254, -127, 21, 24, 103, 339, 109, 292, 310, -163,
	270, -162, 228, 254, 109, 349, 109, 112, 254, 292,
	310, -163, 270, 254, 109, 383, 112, -311, -150, 382,
	-306, 370, 296, 378, -182, -149, -195, 377, -171, 205,
	-137, -335, 349, 205, -171, 377, -142, 146, 2, -141,
	-335, 205, -275, -151, -149, -151, 281, -141, 31, -130,
	382, 49, 259, 109, -130, 109, -130, 382, 109, -130,
	109, 382, 109, -186, 378, 382, -352, -358, 74, 377,
	31, -254, -281, -282, -284, -293, -287, -291, -292, 41,
	47, 46, 173, 172, 311, 198, 276, 288, 337, 150,
	39, 214, 158, 4, 157, 159, 160, 161, 162, 163,
	287, 38, 244, 126, 127, 125, 102, 93, 92, 210,
	43, 42, -295, -296, -289, -290, 90, 315, 316, 165,
	40, 53, 52, 342, 298, -312, -352, -305, -186, 31,
	-230, 2, -362, 382, 184, -156, 191, 204, 142, 216,
	352, -310, 5, 4, -253, -266, 94, 188, -292, 8,
	369, -302, 7, 368, -304, -303, -304, 78, 379, -306,
	-184, 22, 283, 2, -305, -355, 130, -352, -305, -305,
	-305, -305, -305, 278, -60, 130, -141, 184, -305, 2,
	-305, 2, 304, 152, 304, -130, 382, -141, -149, 65,
	66, 354, -220, -197, -198, -197, -221, -220, 331, -218,
	-217, -222, -243, 22, -225, 124, 201, -243, -245, -117,
	-117, -117, -174, -270, -243, 238, 152, -305, -299, -281,
	-298, 249, 250, 248, 252, 251, -281, -306, 314, -243,
	-243, -243, -243, -243, -243, -243, -243, -243, -243, -243,
	-243, -243, -243, -243, -243, -243, -243, -243, -243, -243,
	-243, -243, -243, -243, -243, -243, -243, -243, -243, -243,
	-243, 185, 148, 285, 37, 149, -243, 317, -243, -243,
	-243, -243, 197, 205, 207, 323, 116, 330, 100, 211,
	-364, 302, 33, -250, -118, 377, -265, 28, 290, 22,
	-257, 266, 377, -238, -243, -239, -187, -186, 378, 382,
	-187, -256, -252, -264, -263, 346, 378, -186, 343, 22,
	100, 370, 2, 7, -211, 353, 196, 91, 143, 195,
	-212, 273, -339, 123, 138, 377, 378, 2, 378, 2,
	378, 2, 378, 2, -243, -243, -205, 2, -300, -186,
	4, 353, 196, 91, 143, 195, 273, -205, 2, -206,
	2, -243, -186, -207, -244, -245, 368, 369, 363, 377,
	266, -208, 2, -243, -187, -243, 44, 180, 318, -209,
	-243, 133, -186, -243, -243, -243, -186, -186, 2, -186,
	2, 377, 7, 7, 314, 314, 7, -145, -333, 31,
	-176, -186, -179, 382, 133, 31, 4, -179, 378, 382,
	171, 171, -272, -204, 171, -202, 222, -202, -202, -350,
	377, 376, -269, -306, 375, 384, -187, 2, -268, -267,
	31, -141, 220, 378, -149, 382, 317, -215, 69, 60,
	-233, 146, 60, -317, -141, 69, -318, 55, 329, 238,
	132, -215, 69, -215, 69, 69, -274, 34, -74, 112,
	133, -306, 317, -274, 229, -311, 67, 317, 34, -74,
	112, 133, 317, -152, -306, 67, -278, 357, -141, 133,
	378, 382, -157, -176, -158, -141, -234, -233, -319, -320,
	-317, 152, 329, 117, 31, 109, 229, 109, 31, 215,
	205, -133, 307, 109, -235, 347, -226, -74, 377, 94,
	31, -226, -190, -191, -277, -192, -149, 377, -141, -184,
	-185, -185, -152, -153, -141, -311, -312, 378, -60, -279,
	317, 336, -158, -59, 24, 74, 103, 378, 382, -178,
	30, 375, -211, 377, -278, 133, 360, 317, 378, 320,
	-231, -155, 243, 289, 255, 277, 8, 7, 7, 382,
	-306, -354, -141, 278, -60, -149, -152, -149, -274, 349,
	130, 66, -198, -221, -223, -302, 377, 369, -224, 266,
	267, 382, -126, 32, 98, 174, -149, 354, -243, -243,
	317, -364, 302, -250, -243, 197, 207, 323, 116, 330,
	100, 211, 133, 377, -244, -244, -186, -243, 377, -186,
	376, 386, 378, -243, 376, 376, 382, -262, -263, 104,
	-243, -173, 382, -172, -243, -186, -186, 378, 378, 317,
	317, 317, 317, 377, -344, 223, 377, 377, -243, 31,
	382, 378, 133, 378, 378, -213, 232, 378, 10, 11,
	368, 369, 370, 371, 128, 372, 373, 366, 367, 365,
	358, 359, 360, 64, 192, 268, 13, 14, 15, 167,
	149, -244, -244, -244, -186, 377, 378, -248, -249, 133,
	130, 31, -209, -209, -209, 378, 133, -186, 382, 382,
	382, 378, 378, 378, 7, 378, 382, 378, 354, 354,
	378, 377, 378, 378, -235, -276, -181, 2, -272, -306,
	-235, -243, -272, -272, -203, 336, 215, 171, -272, -267,
	378, -351, 7, -269, -268, 7, -242, -241, 131, 203,
	378, -141, 377, -269, 378, -127, -149, -141, -141, 205,
	-233, 146, -132, 205, -281, -141, 377, 377, 174, 174,
	-141, -141, 146, -141, 146, -141, -141, -128, 254, -74,
	67, 377, -149, 254, -311, 349, 354, -141, -74, 67,
	377, -306, 254, 354, -111, 145, 211, 296, 133, -149,
	378, 378, 382, -142, 152, -142, -74, -184, -311, -311,
	-74, -149, 109, -134, 105, -363, 360, -141, -219, -217,
	-243, -200, -228, 261, 215, -182, 341, -141, -200, -180,
	382, 133, 360, -182, -130, -130, -130, -130, -354, -311,
	378, -281, 375, 376, 7, 7, -114, 349, -354, -303,
	-303, -138, 327, 63, 243, -303, 382, 217, 242, 88,
	304, 152, -224, -243, -270, -149, 383, -243, -243, -244,
	-244, 133, 377, -243, -254, 27, 27, 378, -187, 382,
	-239, -243, 378, -252, 106, -243, 313, 378, 343, -173,
	-173, -173, 5, 196, 143, 195, -212, 195, -212, -212,
	7, -345, -141, 377, 347, -172, 378, -299, -281, -243,
	-248, -243, -299, -281, -244, -244, -244, -244, -244, -244,
	-244, -244, -244, -244, -244, -244, -244, -244, -244, -244,
	-244, -244, -244, 100, 205, 211, -244, 382, -187, -249,
	-248, -243, -243, -281, 378, 378, 378, -186, -243, -243,
	-243, 378, 7, -59, -196, 138, -278, 382, -196, -203,
	377, -243, -272, 376, 378, 382, -268, 376, 382, 385,
	360, -269, 377, -176, -267, 317, 317, 109, 205, 338,
	-321, -318, -243, -175, -271, -141, -332, 377, -329, -330,
	-147, 377, 377, -125, 103, 281, -216, 109, -130, 109,
	-130, 317, -215, 69, 354, -186, 317, 229, -246, -147,
	-141, 354, -186, 317, -246, -114, 133, 303, 296, -159,
	151, -234, 377, -142, 377, 377, -171, -137, 377, -141,
	-135, 179, -363, -309, -335, -200, -200, -189, 206, 68,
	378, -235, -191, -181, -243, 378, -115, 76, -115, 7,
	376, 378, -113, 217, -112, -141, 5, -141, -36, -37,
	152, 69, 231, -306, -141, -149, -152, 216, 378, -126,
	-306, 27, 27, -243, -254, 378, -243, -243, 378, -243,
	376, -243, 5, -243, 378, 378, 378, 378, -346, -141,
	-243, 378, 378, 378, -249, 133, 100, 211, 377, -243,
	378, 378, 382, 378, 378, 378, 378, -251, 140, 45,
	-272, -251, -176, -240, 7, -241, -306, 375, -268, -176,
	378, -141, -141, -233, 109, -322, 69, -323, 58, 117,
	74, 205, 207, 329, 238, 55, 94, 247, 378, 378,
	382, -148, -194, 58, -148, -243, 377, -175, -176, 205,
	94, 205, 94, 87, 325, -141, -141, -149, -141, -141,
	-246, 378, -149, -311, 377, -246, 378, -306, -312, 314,
	-160, -161, 228, 149, -175, 377, -176, -157, 31, -175,
	215, -136, 178, -363, -309, -133, -227, 377, 215, -74,
	-200, 360, 87, 87, 376, 382, 377, 360, 360, 382,
	22, 377, 22, 377, -163, -163, -126, -243, -243, 378,
	378, -173, -340, 228, 378, -244, 133, 377, -254, 378,
	-243, -341, 348, -243, -186, -341, 378, -269, 7, 378,
	-233, -141, -306, -141, 117, 146, 207, 174, 377, -244,
	-149, -232, -359, 73, 300, -271, -126, -306, -126, 378,
	-186, 378, 378, 207, 207, -243, -281, -130, -130, 317,
	317, 317, -186, 317, -246, 45, 226, 378, -175, 378,
	378, -74, 378, -149, -363, -309, -134, 101, -176, 69,
	-250, 377, 377, -112, -113, -311, -311, -37, -176, -176,
	378, -173, 45, -244, -254, 378, 378, -342, -343, -141,
	-268, 376, -323, -142, 205, -243, -143, 377, -159, 377,
	-148, -173, 247, -129, 58, -141, -141, 377, -173, 377,
	187, 242, -149, -232, 378, -159, -232, 377, -309, -135,
	331, 206, 378, -141, -312, -312, 378, 378, 378, -347,
	242, 267, -186, 378, 382, 31, 109, 378, -324, 193,
	-141, -176, -126, 378, -149, -124, 336, -306, -186, 378,
	-186, 377, 377, 377, -159, -232, -159, -175, -136, 281,
	-235, 378, 378, 378, -348, -349, 37, 326, 78, -243,
	-348, -343, -345, 117, -325, -328, -327, 215, 134, 227,
	286, 378, 378, -171, -243, 378, 378, -176, -176, -176,
	-159, 378, -190, -114, -114, -349, 235, 129, 266, 235,
	129, -141, -327, 215, -328, 215, 331, 97, -324, 378,
	378, 378, -232, -235, 27, -326, 202, 259, 49, 281,
	-326, -325, 377, 377, -131, 49, 259, -159, -349, 20,
	207, 94, -164, -162, -165, -162, 378, 341, 378, 341,
	-166, 377, 183, 382, -161, -160, -167, -168, -243, 194,
	312, -164, 377, 382, 378, 382, 377, -167, -164, -168,
	-167, 378, 378, 382, -161, -160, -165, 382, -165,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 56, 0, 0, 157,
	159, 0, 321, 322, 0, 166, 168, -2, 0, 0,
	0, 189, 190, 0, 0, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 699, -2, 0, 301, 303, 312,
	314, 316, 318, 319, 0, 374, 376, 378, 380, 382,
	384, 386, 388, 390, 392, 394, 396, 398, 400, 402,
	403, 405, 407, 409, 0, 621, 623, 625, -2, 59,
	61, 63, 65, 67, 77, 0, 170, 172, 174, 176,
	179, 737, 193, 195, 197, 199, -2, 748, 0, 0,
	0, -2, 0, -2, -2, -2, 68, 69, 70, 71,
	72, 73, 83, 84, 85, 86, 87, 75, 79, 80,
	82, 0, 0, 714, 716, 718, 720, -2, 0, 0,
	-2, 7, 13, 15, 17, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 43, 49, 51, 53,
	57, 58, 0, 0, 0, 0, 0, 0, 0, 132,
	285, 0, 1319, 1243, 1249, 1250, 1274, 1275, 1276, 1293,
	1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
	1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
	1314, 1315, 1316, 1317, 1318, 1320, 1321, 1322, 1323, 1324,
	1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334,
	1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344,
	1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354,
	1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364,
	1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374,
	1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384,
	1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394,
	1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404,
	1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414,
	1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424,
	1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434,
	1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444,
	1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454,
	1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464,
	1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474,
	1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484,
	1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494,
	1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504,
	1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514,
	1515, 1516, 158, 160, 161, 0, 0, 0, 1245, 1319,
	167, 169, 0, 0, 0, 0, 0, 586, 276, 1382,
	278, 280, 0, 0, 0, 0, 183, 184, 185, 186,
	187, 188, 191, 192, 0, 0, 0, 0, 0, 275,
	273, 222, 223, 0, 258, 259, 260, 261, 262, 264,
	226, 228, 230, 231, 233, 235, 237, 239, 241, 243,
	244, 246, 248, 249, 251, 253, 254, 256, 587, 0,
	0, 0, 0, 0, 282, 288, 289, 290, 292, 293,
	294, 295, 296, 297, 298, 0, 138, 0, 487, 271,
	269, 0, 134, 0, 618, 0, 284, 619, 620, 615,
	616, 1409, 644, 302, 304, 313, 315, 317, -2, -2,
	1503, -2, 338, -2, 346, 1509, 0, 349, 350, 353,
	-2, 218, 375, 377, 379, 381, 383, 385, 387, 389,
	391, 393, 395, 397, 399, 401, 404, 406, 408, 410,
	411, 0, 0, 0, 415, 0, -2, -2, 0, 0,
	0, 0, 0, -2, 0, -2, 0, 0, -2, -2,
	0, 0, -2, 0, 0, 414, 416, 417, 418, 0,
	622, 624, 626, 0, 575, 739, 60, 62, 64, 66,
	0, 0, 171, 173, 175, 177, 180, -2, 712, 713,
	194, 196, 198, 200, -2, 0, 743, 743, 743, 0,
	0, 713, 711, 0, 305, 0, 307, 0, 415, 310,
	311, 354, 355, 949, 0, 0, 0, 0, 0, 0,
	1022, 1052, 1054, 1474, 1503, 0, 1056, 1057, 0, 1059,
	1061, 1062, 0, 1065, 1066, 1218, 1245, 1259, 1260, 1261,
	1262, 0, 0, 1265, 0, 1267, 1268, 1269, 1120, 1076,
	-2, -2, 1257, 877, 878, 879, 880, -2, 1517, 1080,
	1083, 1086, 1089, 1090, 1093, 1094, 0, 1458, 1475, 1476,
	1499, 1500, 1508, 1512, 1513, 1482, 1496, 1483, 1470, 1480,
	1494, 1325, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1283, 911, 912,
	917, 918, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525,
	1526, 1527, 1528, 1529, 1530, 1531, 1532, 920, 646, 628,
	637, 646, 630, 631, 632, 633, 634, 635, 636, 639,
	0, 729, 1388, 732, 1256, 730, 715, 717, 0, 719,
	0, 0, 723, 745, 744, 0, 784, 727, 728, 738,
	799, 837, 814, 805, 0, 0, 2, 74, 0, 1482,
	-2, 76, 0, 1482, 837, 78, 0, 1482, 139, 140,
	372, 373, 1284, 1285, 1286, 1287, 1517, 81, 0, 88,
	507, 1482, 1248, 0, 1288, 1289, 1290, 1291, 1292, 1533,
	1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543,
	1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553,
	1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563,
	1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573,
	1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583,
	1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593,
	1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603,
	1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613,
	0, 0, 286, 287, 1253, 1251, 1252, 0, 162, 163,
	164, 165, 0, 0, 1246, 1227, 1225, 1226, 178, 554,
	1482, -2, 1482, 578, 554, 582, -2, 736, 1482, 660,
	277, 279, 0, 182, 0, 673, 0, 675, 0, 690,
	843, 124, 1482, 203, 216, 124, 1482, 206, 124, 1482,
	209, 1241, 124, 1482, 212, 213, 1482, 215, 141, 272,
	0, 0, -2, 265, 267, -2, 263, 227, 229, 232,
	234, 236, 238, 240, 242, 245, 247, 250, 252, 255,
	257, -2, 0, 0, 0, 486, 0, 0, 0, 617,
	0, 643, 320, 0, 335, 0, 337, 1469, -2, -2,
	341, 647, 651, 652, 653, 0, 0, 0, 0, 0,
	0, 0, 351, 219, 0, 412, 413, 421, 422, 0,
	425, 446, 458, 0, 0, 429, 431, 485, 433, 0,
	0, 435, 0, 437, 0, 439, 0, 441, 0, 443,
	445, 447, 459, 449, 738, 451, 0, 453, 457, 0,
	462, 0, 464, 465, 466, 0, 0, 472, 0, 0,
	419, 420, 124, 841, 0, 0, 0, 0, -2, 0,
	756, 781, 0, 759, 760, 0, 0, 0, 0, 741,
	742, 0, 0, 0, 701, 702, 306, 0, 309, 0,
	0, 0, 0, 1153, 1154, 1155, 1156, 1157, 1158, 1161,
	1162, 1159, 1160, 1163, 1164, 0, 0, 0, 0, 0,
	1165, 0, 0, 0, 0, 0, 0, 0, 0, 1166,
	1167, 1168, 0, 0, 1170, 0, 1172, 0, 0, 0,
	0, 0, 0, 1232, 0, 0, 1169, 954, 955, 956,
	988, 989, 0, 1053, 1229, 1222, 1055, 0, 1175, -2,
	1176, 0, 0, 1058, 1063, 1064, 1175, 0, 1217, -2,
	0, 1264, 0, 946, 1122, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1198, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 896, 914, 925, 922,
	921, 898, 0, 897, 895, 0, 899, 0, 0, 0,
	627, -2, 629, 0, 641, 0, 731, 0, 0, 0,
	788, 1233, 1237, 1238, 788, 0, 1176, 0, 0, 0,
	0, 834, 834, 834, 832, 808, 0, 814, 0, -2,
	838, 826, 0, -2, 805, 0, 0, 839, 0, 89,
	612, 103, 0, 612, 612, 0, 0, 0, 0, 0,
	99, 506, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 828, 1244, 0,
	1223, 1224, 154, 0, 0, 1239, 1228, 493, 0, 0,
	576, 0, 735, 0, 0, 0, 0, 1482, 585, 1277,
	662, 0, 847, 0, 676, 0, 0, 844, 0, 201,
	0, 122, 123, 0, 204, 0, 207, 0, 0, 210,
	0, 0, 0, 0, 738, 0, 0, 291, 0, 0,
	738, 0, 1178, 855, 856, 857, 858, 859, 946, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 908, 0, 883, 883, 883,
	900, 901, 909, 910, 915, 916, 927, 928, 930, 932,
	926, 926, 926, 923, 924, 828, 0, 0, 0, 0,
	-2, 343, 0, 649, 0, 654, 363, 364, 365, 656,
	657, 347, 366, 367, 368, 369, 370, 371, 0, 571,
	0, 573, 1270, 0, 344, 356, 345, 348, 0, 220,
	423, 424, 426, 427, 428, 432, 0, 482, 434, 436,
	438, 440, 442, 450, 454, 738, 460, 463, 467, 468,
	469, 470, 0, 0, 0, 574, 0, 323, 324, 0,
	477, 0, 756, 781, 705, 755, 706, 780, 782, 757,
	758, 763, 767, 768, 771, 774, 775, 765, 949, 724,
	725, 726, 749, 750, 597, 0, 0, 308, 950, 851,
	852, 902, 903, 904, 905, 906, 951, 952, 0, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, -2,
	-2, -2, -2, -2, -2, -2, -2, 975, 976, 977,
	978, 979, 980, 981, 982, -2, -2, -2, 986, 987,
	-2, 1171, 1173, 0, 1232, 0, -2, 0, -2, -2,
	-2, -2, 1000, 0, 1002, 1005, 1007, 1009, 0, 0,
	0, 0, 1231, 1019, 1209, 0, 0, 1150, 1151, 1152,
	1004, 0, 0, 1230, 1221, 0, 0, 1174, 1060, 0,
	0, 0, 1182, 1216, 1212, 0, 1067, 748, 0, 0,
	0, 0, 1074, 0, 1273, 933, 934, 935, 936, 937,
	938, 947, 1130, 0, 0, 0, 1081, 1082, 1084, 1085,
	1087, 1088, 1091, 1092, 0, 0, 0, 1098, 0, 1185,
	-2, -2, -2, -2, -2, -2, -2, 0, 1100, 0,
	1102, 1176, 1195, 0, 0, 1023, 0, 0, 0, 0,
	1503, 0, 1105, 1176, 1203, 0, 0, 0, 0, 0,
	1176, 0, 1208, 0, 0, 0, 0, 0, 1116, 0,
	1118, 0, 0, 0, 0, 0, 0, 640, 733, 0,
	0, 0, 847, 0, 0, 0, 1236, 847, 783, 0,
	0, 0, 0, 0, 0, 829, 833, 830, 831, 0,
	0, 814, 826, 796, 0, 0, 0, 803, 804, 825,
	0, 824, 813, -2, 0, 0, 0, 0, 0, 611,
	105, 1482, 0, 126, 0, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 505, 0, 0, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 0, 1247, 0, 144, 0, 1254, 0,
	0, 0, 0, 0, 492, 1253, 494, 496, 497, 498,
	499, 1278, 0, 1278, 0, 0, 0, 0, 0, 0,
	0, 664, 670, 0, 762, 0, 688, 678, 0, 0,
	0, 688, 692, 693, 695, 696, 0, 0, 845, 217,
	124, 124, 1242, 124, 124, 142, 214, 274, 224, 266,
	0, 0, 0, 268, 0, 0, 0, 270, 0, 848,
	850, 0, 860, 0, 153, 0, 0, 0, 336, 0,
	648, 655, 0, 360, 0, 362, 572, 1272, 1271, 0,
	221, 484, 299, 452, 455, 479, 480, 481, 842, 0,
	0, 478, 709, 710, 0, 769, 0, 0, 766, 772,
	773, 0, 752, 595, 596, 0, 0, 0, -2, -2,
	0, 0, 0, 1020, -2, 1001, 1003, 1006, 1008, 1010,
	0, 0, 0, 0, 0, 0, 0, 1021, 1175, 0,
	1219, 1222, -2, 1177, 1180, 1181, 0, 0, 1213, 0,
	0, 0, 0, 747, 748, 748, 748, 1073, 0, 0,
	0, 0, 0, 0, 1075, 0, 0, 0, 0, 0,
	0, 1097, 0, 1099, 1101, 0, 0, 1103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1026, 1027, 1028, 0, 1175, 1104, 1201, 1202, 0,
	0, 0, 0, 0, 0, 1110, 0, 1207, 0, 0,
	0, 1114, 1115, 1117, 0, 881, 0, 907, 929, 931,
	919, 738, 1255, 785, 777, 1234, 828, 787, 789, 1235,
	777, 1177, 816, 0, 818, 0, 0, 0, 820, 0,
	809, 0, 811, 826, 801, 0, 0, 794, 0, 793,
	814, 822, 0, 0, 840, 104, 601, 0, 0, 0,
	107, 1482, 115, 0, 526, 0, 0, 0, 0, 0,
	614, 116, 1482, 124, 1482, 124, 117, 90, 612, 91,
	0, 0, 607, 0, 599, 0, 0, 598, 92, 0,
	0, 609, 0, 0, 153, 0, 0, 155, 0, 1240,
	501, 553, 0, 0, 1278, 0, 490, 554, 579, -2,
	581, 0, 0, 666, 670, 0, 669, 736, 688, 761,
	846, 671, 688, 0, 0, 0, 680, 677, 674, 847,
	0, 0, 0, 0, 202, 205, 208, 211, 281, 0,
	0, 1179, 0, 853, 0, 0, 133, 0, 283, 333,
	334, 339, 358, 359, 361, 357, 0, 0, 0, 0,
	0, 0, 0, 0, 751, 597, 0, 953, -2, 0,
	0, 0, 0, -2, 0, 0, 0, 1210, 0, 0,
	0, 1221, -2, 1183, 1211, 1215, 0, 1068, 0, 0,
	0, 0, 1266, 939, 940, 941, 942, 943, 944, 945,
	0, 1128, 1129, 1133, 0, 0, 1079, 0, 0, 1184,
	1194, 1196, 1024, 1025, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, -2, -2, -2, 1042, 1043, 1044,
	-2, -2, -2, 0, 0, 0, 1197, 0, 0, 1199,
	1200, 1204, 1205, 0, 1107, 1108, 1109, 1206, 0, 0,
	0, 913, 0, 0, 779, 0, 786, 0, 779, 817,
	0, 836, 819, 799, 810, 0, 807, 797, 0, 798,
	0, 826, 0, 0, 806, 0, 0, 0, 0, 125,
	524, 543, 0, 0, 588, 594, 594, 0, 1077, 1078,
	0, 0, 0, 109, 0, 0, 0, 0, 113, 0,
	119, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 95, 131, 0, 0, 156, 509,
	0, 495, 0, 0, 0, 493, 0, 577, 0, 0,
	668, 670, 0, 661, 662, 181, 672, 686, 687, 685,
	0, 688, 694, 691, 697, 0, 0, 135, 0, 0,
	854, 861, 151, 1371, 149, 146, 148, 300, 325, 326,
	0, 0, 332, 473, 474, 507, 507, 764, 770, 753,
	597, 0, 0, -2, 0, 1013, -2, -2, 1146, 1177,
	1220, 1214, 1263, 748, 1069, 1071, 1072, 948, 1135, 1132,
	0, 1119, 1095, 1096, 1193, 0, 0, 0, 0, 1177,
	1148, 1106, 0, 1112, 1113, 882, 734, 1124, 0, 0,
	790, 1124, 0, 814, 812, 795, 791, 0, 802, 0,
	823, 603, 605, 106, 0, 525, 0, 528, 0, 0,
	0, 0, 534, 535, 0, 0, 0, 0, 545, 552,
	0, 597, 1258, 0, 597, 0, 0, 0, 0, 0,
	121, 0, 0, 613, 0, 124, 124, 602, 0, 0,
	97, 0, 608, 600, 0, 98, 0, 610, 143, 0,
	488, 508, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 658, 670, 0, 663, 664, 0, 0, 0, 679,
	689, 0, 0, 0, 849, 0, 0, 0, 0, 0,
	328, 0, 330, 0, 475, 476, 754, -2, -2, 1014,
	1147, 0, 748, 0, 1121, -2, 0, 0, 0, 1149,
	0, 721, 0, 778, 776, 722, 835, 826, 0, 821,
	108, 0, 529, 530, 1278, 0, 533, 536, 0, 538,
	1280, 501, 0, 549, 550, 589, 590, 593, 591, 594,
	748, 547, 0, 110, 111, 120, 128, 112, 118, 0,
	0, 0, 748, 0, 827, 0, 0, 552, 0, 542,
	501, 491, 552, 0, 0, 665, 666, 0, 0, 0,
	698, 0, 0, 150, 0, 145, 147, 327, 0, 0,
	1070, 1138, 0, -2, 0, 1050, 1111, 1123, 1125, 0,
	800, 792, 527, 531, 0, 0, 558, 0, 546, 0,
	597, 0, 0, 130, 0, 604, 606, 0, 0, 0,
	0, 0, 0, 501, 552, 489, 501, 0, 667, 668,
	0, 682, 847, 684, 0, 0, 152, 329, 331, 0,
	0, 0, 1134, 1051, 0, 0, 0, 537, 563, 0,
	0, 0, 592, 1068, 554, 114, 0, 127, 0, 0,
	0, 0, 0, 0, 540, 501, 583, 0, 659, 0,
	683, 153, 153, 1131, 1136, 1139, -2, 1442, 1316, 0,
	1137, 1126, 1127, 0, 539, 559, 560, 0, 555, 556,
	557, 1279, 551, 558, 129, 100, 102, 0, 0, 0,
	541, 552, 847, 136, 137, 0, 1141, 1142, 1143, 1144,
	1145, 532, 561, 0, 562, 0, 0, 0, 563, 0,
	0, 504, 501, 681, 0, 564, 0, 567, 568, 0,
	565, 548, 0, 0, 500, 502, 503, 584, 1140, 566,
	569, 570, 0, 0, 0, 0, 510, 0, 511, 0,
	509, 0, 0, 0, 508, 514, 0, 517, 519, -2,
	0, 512, 0, 0, 515, 0, 0, 0, 513, 518,
	0, 516, 509, 0, 508, 523, 521, 0, 522,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 366, 3, 372, 367, 3,
	377, 378, 370, 368, 382, 369, 379, 371, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 386, 381,
	358, 360, 359, 362, 383, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 375, 3, 376, 373, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 384, 365, 385, 363,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 361, 57701, 364, 57702, 374, 57703, 380, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:921
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:927
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:933
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:942
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:944
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:956
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:968
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:987
		{
			return helpWith(sqllex, "ALTER")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:990
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:991
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:992
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:993
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1030
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1041
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1050
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1062
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1086
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1112
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1118
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1124
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1133
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1142
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{
					TableOrIndex: TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableName()},
					Partition:    Name(sqlDollar[4].str),
				},
				YAMLConfig: sqlDollar[8].union.expr(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1154
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
					Partition:    Name(sqlDollar[4].str),
				},
				YAMLConfig: sqlDollar[8].union.expr(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1226
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1249
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1259
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = nil
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = DropCascade
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = DropRestrict
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = DropDefault
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1321
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1322
		{
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1325
		{
			return unimplemented(sqllex, "alter using")
		}
	case 130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1326
		{
		}
	case 131:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1353
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1379
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.str = "CSV"
		}
	case 136:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1417
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1486
		{
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1507
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1508
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1519
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1530
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1538
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1540
		{
			return helpWith(sqllex, "CREATE")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1543
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1545
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1546
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1548
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1549
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1568
		{
			return helpWith(sqllex, "DELETE")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1580
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1581
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1582
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1589
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1590
		{
			return helpWith(sqllex, "DROP")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1593
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1594
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1595
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1596
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1611
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1626
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1649
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1672
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1687
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1738
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1747
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1751
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1753
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			return helpWith(sqllex, "DELETE")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1755
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1756
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1757
		{
			return helpWith(sqllex, "INSERT")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1758
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1760
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1761
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1763
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1766
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1767
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1769
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1777
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1778
		{ /* SKIP DOC */
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1806
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1830
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1865
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1885
		{
			return helpWith(sqllex, "GRANT")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1905
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1927
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1978
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1983
		{
			return helpWith(sqllex, "RESET")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1984
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1999
		{
			return helpWith(sqllex, "RESET")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2010
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2015
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2018
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2022
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2023
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2024
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2025
		{ /* SKIP DOC */
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2026
		{ /* SKIP DOC */
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2027
		{
			return unimplemented(sqllex, "set local")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubDatabase, Database: Name(sqlDollar[4].str)}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = &ScrubOptionConstraint{}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = &ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = &ScrubOptionPhysical{}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2112
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 339:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2162
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2167
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2184
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2187
		{
			return unimplemented(sqllex, "set from current")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2189
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2195
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2199
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2237
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = Low
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = Normal
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = High
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2298
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2299
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2300
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2301
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2302
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2303
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2304
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2305
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2306
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2307
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2308
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2309
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2310
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2311
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2313
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2314
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2315
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2317
		{
			return helpWith(sqllex, "SHOW")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2326
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.str = "client_encoding"
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2341
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2352
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2369
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2374
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2385
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2396
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2407
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2418
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2428
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2441
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2444
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2452
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2455
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2474
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2487
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2492
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2510
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2526
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2530
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2533
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2541
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2545
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2549
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2552
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2563
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2574
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2585
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2589
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[7].str)}}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2593
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2597
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{
				TableOrIndex: TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableName()},
				Partition:    Name(sqlDollar[8].str),
			}}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2604
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
				Partition:    Name(sqlDollar[8].str),
			}}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2611
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2615
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2621
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2625
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2629
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2635
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2663
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2770
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2774
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.union.val = DropDefault
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.str = ""
		}
	case 509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 510:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   UnrestrictedName(sqlDollar[1].str),
				Tuples: sqlDollar[3].union.tuples(),
			}}, sqlDollar[5].union.listPartitions()...)
		}
	case 513:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuples:       sqlDollar[3].union.tuples(),
				Subpartition: sqlDollar[4].union.partitionBy(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuples:       sqlDollar[3].union.tuples(),
				Subpartition: sqlDollar[4].union.partitionBy(),
			}}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  UnrestrictedName(sqlDollar[1].str),
				Tuple: &Tuple{Exprs: sqlDollar[6].union.exprs()},
			}}, sqlDollar[9].union.rangePartitions()...)
		}
	case 522:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuple:        &Tuple{Exprs: sqlDollar[6].union.exprs()},
				Subpartition: sqlDollar[8].union.partitionBy(),
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 523:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuple:        &Tuple{Exprs: sqlDollar[6].union.exprs()},
				Subpartition: sqlDollar[8].union.partitionBy(),
			}}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2897
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2999
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3029
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3104
		{
			return unimplemented(sqllex, "match full")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3105
		{
			return unimplemented(sqllex, "match partial")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3106
		{
			return unimplemented(sqllex, "match simple")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3107
		{
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = NoAction
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = Restrict
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = Cascade
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = SetNull
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = SetDefault
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3193
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = nil
		}
	case 581:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3233
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3273
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = true
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = false
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3303
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3304
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3307
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3308
		{
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = Ascending
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = Descending
		}
	case 597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 598:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3359
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3361
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = true
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = false
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3394
		{
		}
	case 614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3395
		{
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3406
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3417
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3428
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3432
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3433
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3434
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3452
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3457
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3470
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3475
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3483
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3490
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3493
		{
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3494
		{
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.str = ""
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.str = ""
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3540
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3553
		{
		}
	case 650:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3555
		{
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = ReadOnly
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = ReadWrite
		}
	case 658:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3619
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.str = ""
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.str = ""
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.str = ""
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.str = ""
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3662
		{
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3663
		{
		}
	case 671:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3687
		{
			return helpWith(sqllex, "INSERT")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3704
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3746
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3750
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3758
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 689:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3781
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3785
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3786
		{
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: sqlDollar[5].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3913
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3948
		{
			return helpWith(sqllex, "SELECT")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3949
		{
			return helpWith(sqllex, "VALUES")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3950
		{
			return helpWith(sqllex, "TABLE")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3997
		{
			return helpWith(sqllex, "SELECT")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4041
		{
			return helpWith(sqllex, "TABLE")
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4052
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4053
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4054
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4057
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4058
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4061
		{
			return unimplemented(sqllex, "cte")
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4064
		{
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4065
		{
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4068
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4069
		{
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4072
		{
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4073
		{
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = true
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = false
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = false
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = true
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4096
		{
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4097
		{
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[4].str)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4151
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4175
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4227
		{
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4228
		{
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4231
		{
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4232
		{
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = false
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = true
		}
	case 783:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4303
		{
			return helpWith(sqllex, "VALUES")
		}
	case 785:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4305
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4320
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = &From{}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4342
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4360
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4383
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[2].str)}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4387
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 800:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4424
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4449
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 806:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = nil
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4490
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4496
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = true
		}
	case 814:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = false
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4573
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4583
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.str = astFullJoin
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4593
		{
			sqlVAL.str = astLeftJoin
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.str = astRightJoin
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.str = astInnerJoin
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4607
		{
		}
	case 834:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4608
		{
		}
	case 835:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4633
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4694
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4708
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4716
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4740
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 861:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4751
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4753
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4757
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4761
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = jsonbColType
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4769
		{
			sqlVAL.union.val = jsonColType
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4781
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4785
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4809
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4840
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4849
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = nil
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4914
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 908:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5010
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 919:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5042
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5058
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5068
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5081
		{
		}
	case 926:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5082
		{
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 929:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 931:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = year
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = month
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = day
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = hour
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = minute
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = month
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.union.val = hour
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5148
		{
			sqlVAL.union.val = minute
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5152
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5156
		{
			sqlVAL.union.val = minute
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5160
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 946:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5168
		{
			sqlVAL.union.val = nil
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = second
		}
	case 948:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5177
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5212
		{
			return unimplemented(sqllex, "at tz")
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5225
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5229
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5233
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5237
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5245
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5249
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5253
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5257
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5261
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5265
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5273
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Existence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SomeExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5289
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: AllExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5293
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5309
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5313
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5317
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5321
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5349
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5353
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5357
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5361
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5369
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5373
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5389
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5393
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5397
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5401
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5405
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5420
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5426
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5430
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5434
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5438
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5442
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5446
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5450
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5458
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5462
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5466
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5470
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5474
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5482
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5486
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5503
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5518
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5522
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5526
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5530
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5546
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5550
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5554
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5558
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5562
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5566
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5570
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5574
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5578
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5582
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5586
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5590
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5594
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5598
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5602
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5606
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5610
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5614
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5618
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5622
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5626
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5639
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5647
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5663
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5676
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5680
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5685
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5689
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5693
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5697
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5701
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5709
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5713
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5716
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5717
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5719
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5727
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5730
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5741
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5748
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5757
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5758
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5762
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5764
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5768
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5771
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5773
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5777
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5780
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5782
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5786
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5789
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5790
		{
			return unimplemented(sqllex, "current role")
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5792
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5799
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5801
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5805
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5809
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5813
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5817
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5820
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5822
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5825
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5827
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5830
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5832
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5836
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5839
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5840
		{
			return unimplemented(sqllex, "treat")
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5842
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5846
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5850
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5854
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5858
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5862
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5866
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5870
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5874
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5877
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5879
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5882
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5886
		{
			return unimplemented(sqllex, "within group")
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5887
		{
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5891
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5895
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5902
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5906
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5922
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5930
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5934
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5945
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5964
		{
			sqlVAL.str = ""
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5970
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5974
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5984
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5985
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5986
		{
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5989
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5990
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5996
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5997
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5998
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5999
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6000
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6011
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6015
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6021
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6033
		{
			sqlVAL.union.val = Any
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6037
		{
			sqlVAL.union.val = Some
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6041
		{
			sqlVAL.union.val = All
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6046
		{
			sqlVAL.union.val = Plus
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6047
		{
			sqlVAL.union.val = Minus
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6048
		{
			sqlVAL.union.val = Mult
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6049
		{
			sqlVAL.union.val = Div
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6050
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6051
		{
			sqlVAL.union.val = Mod
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6052
		{
			sqlVAL.union.val = Bitand
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6053
		{
			sqlVAL.union.val = Bitor
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6054
		{
			sqlVAL.union.val = Pow
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6055
		{
			sqlVAL.union.val = Bitxor
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6056
		{
			sqlVAL.union.val = LT
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6057
		{
			sqlVAL.union.val = GT
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6058
		{
			sqlVAL.union.val = EQ
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6059
		{
			sqlVAL.union.val = LE
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6060
		{
			sqlVAL.union.val = GE
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6061
		{
			sqlVAL.union.val = NE
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6065
		{
			sqlVAL.union.val = Like
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = NotLike
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6067
		{
			sqlVAL.union.val = ILike
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6068
		{
			sqlVAL.union.val = NotILike
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6080
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6086
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6090
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6096
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6100
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6106
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6110
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6116
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6120
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6126
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6130
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6152
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6156
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6160
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6166
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6173
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6177
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6194
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6198
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6202
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6206
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6210
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6216
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6222
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6228
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6232
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6236
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6242
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6246
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6257
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6264
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6268
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6274
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6280
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6284
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6291
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6297
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6301
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6308
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6314
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6320
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6326
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6330
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6336
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6340
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6346
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6350
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6355
		{
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6356
		{
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6360
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6364
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6370
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6379
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[2].str)}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6383
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6387
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6395
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6399
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6405
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6409
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6415
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6419
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6430
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6434
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6440
		{
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6444
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6457
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6461
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6465
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6469
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6475
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6479
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6485
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6488
		{
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6498
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6502
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6509
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6513
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6517
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6521
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6524
		{
			return unimplemented(sqllex, "func const")
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6526
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6530
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6533
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6535
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6539
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6543
		{
			sqlVAL.union.val = DNull
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6550
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6554
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6560
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6595
		{
			sqlVAL.str = ""
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6601
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6605
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
