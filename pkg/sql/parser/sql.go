// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:350
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPLAIN = 57444
const EXTRACT = 57445
const EXTRACT_DURATION = 57446
const FALSE = 57447
const FAMILY = 57448
const FETCH = 57449
const FILTER = 57450
const FIRST = 57451
const FLOAT = 57452
const FLOORDIV = 57453
const FOLLOWING = 57454
const FOR = 57455
const FORCE_INDEX = 57456
const FOREIGN = 57457
const FROM = 57458
const FULL = 57459
const GRANT = 57460
const GRANTS = 57461
const GREATEST = 57462
const GROUP = 57463
const GROUPING = 57464
const HAVING = 57465
const HELP = 57466
const HIGH = 57467
const HOUR = 57468
const INCREMENTAL = 57469
const IF = 57470
const IFNULL = 57471
const ILIKE = 57472
const IN = 57473
const INTERLEAVE = 57474
const INDEX = 57475
const INDEXES = 57476
const INITIALLY = 57477
const INNER = 57478
const INSERT = 57479
const INT = 57480
const INT2VECTOR = 57481
const INT8 = 57482
const INT64 = 57483
const INTEGER = 57484
const INTERSECT = 57485
const INTERVAL = 57486
const INTO = 57487
const IS = 57488
const ISOLATION = 57489
const JOIN = 57490
const KEY = 57491
const KEYS = 57492
const LATERAL = 57493
const LC_CTYPE = 57494
const LC_COLLATE = 57495
const LEADING = 57496
const LEAST = 57497
const LEFT = 57498
const LEVEL = 57499
const LIKE = 57500
const LIMIT = 57501
const LOCAL = 57502
const LOCALTIME = 57503
const LOCALTIMESTAMP = 57504
const LOW = 57505
const LSHIFT = 57506
const MATCH = 57507
const MINUTE = 57508
const MONTH = 57509
const NAN = 57510
const NAME = 57511
const NAMES = 57512
const NATURAL = 57513
const NEXT = 57514
const NO = 57515
const NO_INDEX_JOIN = 57516
const NORMAL = 57517
const NOT = 57518
const NOTHING = 57519
const NULL = 57520
const NULLIF = 57521
const NULLS = 57522
const NUMERIC = 57523
const OF = 57524
const OFF = 57525
const OFFSET = 57526
const OID = 57527
const ON = 57528
const ONLY = 57529
const OPTIONS = 57530
const OR = 57531
const ORDER = 57532
const ORDINALITY = 57533
const OUT = 57534
const OUTER = 57535
const OVER = 57536
const OVERLAPS = 57537
const OVERLAY = 57538
const PARENT = 57539
const PARTIAL = 57540
const PARTITION = 57541
const PASSWORD = 57542
const PLACING = 57543
const POSITION = 57544
const PRECEDING = 57545
const PRECISION = 57546
const PREPARE = 57547
const PRIMARY = 57548
const PRIORITY = 57549
const RANGE = 57550
const READ = 57551
const REAL = 57552
const RECURSIVE = 57553
const REF = 57554
const REFERENCES = 57555
const REGCLASS = 57556
const REGPROC = 57557
const REGPROCEDURE = 57558
const REGNAMESPACE = 57559
const REGTYPE = 57560
const RENAME = 57561
const REPEATABLE = 57562
const RELEASE = 57563
const RESET = 57564
const RESTORE = 57565
const RESTRICT = 57566
const RETURNING = 57567
const REVOKE = 57568
const RIGHT = 57569
const ROLLBACK = 57570
const ROLLUP = 57571
const ROW = 57572
const ROWS = 57573
const RSHIFT = 57574
const SAVEPOINT = 57575
const SCATTER = 57576
const SEARCH = 57577
const SECOND = 57578
const SELECT = 57579
const SERIAL = 57580
const SERIALIZABLE = 57581
const SESSION = 57582
const SESSION_USER = 57583
const SET = 57584
const SETTING = 57585
const SHOW = 57586
const SIMILAR = 57587
const SIMPLE = 57588
const SMALLINT = 57589
const SMALLSERIAL = 57590
const SNAPSHOT = 57591
const SOME = 57592
const SPLIT = 57593
const SQL = 57594
const START = 57595
const STATUS = 57596
const STDIN = 57597
const STRICT = 57598
const STRING = 57599
const STORING = 57600
const SUBSTRING = 57601
const SYMMETRIC = 57602
const SYSTEM = 57603
const TABLE = 57604
const TABLES = 57605
const TEMPLATE = 57606
const TESTING_RANGES = 57607
const TESTING_RELOCATE = 57608
const TEXT = 57609
const THEN = 57610
const TIME = 57611
const TIMESTAMP = 57612
const TIMESTAMPTZ = 57613
const TO = 57614
const TRAILING = 57615
const TRANSACTION = 57616
const TREAT = 57617
const TRIM = 57618
const TRUE = 57619
const TRUNCATE = 57620
const TYPE = 57621
const UNBOUNDED = 57622
const UNCOMMITTED = 57623
const UNION = 57624
const UNIQUE = 57625
const UNKNOWN = 57626
const UPDATE = 57627
const UPSERT = 57628
const USER = 57629
const USERS = 57630
const USING = 57631
const VALID = 57632
const VALIDATE = 57633
const VALUE = 57634
const VALUES = 57635
const VARCHAR = 57636
const VARIADIC = 57637
const VIEW = 57638
const VARYING = 57639
const WHEN = 57640
const WHERE = 57641
const WINDOW = 57642
const WITH = 57643
const WITHIN = 57644
const WITHOUT = 57645
const YEAR = 57646
const ZONE = 57647
const NOT_LA = 57648
const WITH_LA = 57649
const AS_LA = 57650
const POSTFIXOP = 57651
const UMINUS = 57652

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5450

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 31,
	328, 31,
	-2, 426,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 52,
	99, 409,
	143, 409,
	159, 409,
	184, 409,
	190, 409,
	282, 409,
	-2, 399,
	-1, 66,
	99, 408,
	143, 408,
	159, 408,
	184, 408,
	190, 408,
	282, 408,
	-2, 402,
	-1, 75,
	1, 31,
	328, 31,
	-2, 426,
	-1, 434,
	1, 200,
	328, 200,
	-2, 989,
	-1, 472,
	159, 436,
	184, 436,
	-2, 405,
	-1, 475,
	159, 435,
	184, 435,
	-2, 403,
	-1, 609,
	159, 435,
	184, 435,
	-2, 406,
	-1, 668,
	325, 922,
	-2, 915,
	-1, 669,
	325, 923,
	-2, 916,
	-1, 675,
	5, 594,
	325, 594,
	-2, 1097,
	-1, 699,
	5, 555,
	-2, 1071,
	-1, 700,
	5, 588,
	325, 588,
	-2, 1073,
	-1, 701,
	5, 563,
	-2, 1074,
	-1, 702,
	5, 562,
	-2, 1075,
	-1, 703,
	5, 588,
	325, 588,
	-2, 1078,
	-1, 704,
	5, 588,
	325, 588,
	-2, 1079,
	-1, 705,
	5, 589,
	-2, 1082,
	-1, 706,
	5, 549,
	-2, 1083,
	-1, 707,
	5, 549,
	-2, 1084,
	-1, 708,
	5, 570,
	-2, 1088,
	-1, 709,
	5, 550,
	-2, 1093,
	-1, 710,
	5, 551,
	-2, 1094,
	-1, 711,
	5, 552,
	-2, 1095,
	-1, 712,
	5, 553,
	-2, 1096,
	-1, 713,
	5, 549,
	-2, 1101,
	-1, 714,
	5, 556,
	-2, 1106,
	-1, 715,
	5, 554,
	-2, 1109,
	-1, 716,
	5, 586,
	325, 586,
	-2, 1111,
	-1, 717,
	5, 590,
	-2, 1114,
	-1, 718,
	5, 592,
	-2, 1115,
	-1, 719,
	5, 585,
	325, 585,
	-2, 1119,
	-1, 986,
	99, 409,
	143, 409,
	159, 409,
	184, 409,
	190, 409,
	282, 409,
	-2, 711,
	-1, 995,
	325, 899,
	-2, 887,
	-1, 1208,
	13, 0,
	14, 0,
	15, 0,
	309, 0,
	310, 0,
	311, 0,
	-2, 628,
	-1, 1209,
	13, 0,
	14, 0,
	15, 0,
	309, 0,
	310, 0,
	311, 0,
	-2, 629,
	-1, 1210,
	13, 0,
	14, 0,
	15, 0,
	309, 0,
	310, 0,
	311, 0,
	-2, 630,
	-1, 1214,
	13, 0,
	14, 0,
	15, 0,
	309, 0,
	310, 0,
	311, 0,
	-2, 634,
	-1, 1215,
	13, 0,
	14, 0,
	15, 0,
	309, 0,
	310, 0,
	311, 0,
	-2, 635,
	-1, 1216,
	13, 0,
	14, 0,
	15, 0,
	309, 0,
	310, 0,
	311, 0,
	-2, 636,
	-1, 1219,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 641,
	-1, 1225,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 643,
	-1, 1228,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 648,
	-1, 1229,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 649,
	-1, 1230,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 650,
	-1, 1257,
	195, 782,
	-2, 785,
	-1, 1286,
	116, 821,
	325, 922,
	-2, 915,
	-1, 1287,
	116, 822,
	-2, 1067,
	-1, 1288,
	116, 823,
	-2, 988,
	-1, 1289,
	116, 824,
	-2, 957,
	-1, 1290,
	116, 825,
	-2, 972,
	-1, 1291,
	116, 826,
	-2, 987,
	-1, 1292,
	116, 827,
	-2, 1033,
	-1, 1448,
	99, 409,
	143, 409,
	159, 409,
	184, 409,
	190, 409,
	282, 409,
	-2, 485,
	-1, 1452,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 642,
	-1, 1453,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 644,
	-1, 1458,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 645,
	-1, 1476,
	195, 781,
	-2, 784,
	-1, 1664,
	1, 486,
	69, 486,
	99, 486,
	117, 486,
	121, 486,
	123, 486,
	136, 486,
	143, 486,
	148, 486,
	156, 486,
	159, 486,
	171, 486,
	184, 486,
	186, 486,
	190, 486,
	225, 486,
	227, 486,
	282, 486,
	289, 486,
	299, 486,
	300, 486,
	308, 486,
	324, 486,
	326, 486,
	328, 486,
	329, 486,
	-2, 485,
	-1, 1666,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 646,
	-1, 1671,
	146, 0,
	-2, 662,
	-1, 1681,
	195, 783,
	-2, 786,
	-1, 1714,
	13, 0,
	14, 0,
	15, 0,
	309, 0,
	310, 0,
	311, 0,
	-2, 688,
	-1, 1715,
	13, 0,
	14, 0,
	15, 0,
	309, 0,
	310, 0,
	311, 0,
	-2, 689,
	-1, 1716,
	13, 0,
	14, 0,
	15, 0,
	309, 0,
	310, 0,
	311, 0,
	-2, 690,
	-1, 1720,
	13, 0,
	14, 0,
	15, 0,
	309, 0,
	310, 0,
	311, 0,
	-2, 694,
	-1, 1721,
	13, 0,
	14, 0,
	15, 0,
	309, 0,
	310, 0,
	311, 0,
	-2, 695,
	-1, 1722,
	13, 0,
	14, 0,
	15, 0,
	309, 0,
	310, 0,
	311, 0,
	-2, 696,
	-1, 1842,
	146, 0,
	-2, 663,
	-1, 1845,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 666,
	-1, 1846,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 668,
	-1, 1951,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 667,
	-1, 1952,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 669,
	-1, 1959,
	146, 0,
	-2, 697,
	-1, 2015,
	146, 0,
	-2, 698,
	-1, 2080,
	36, 0,
	130, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 1070,
}

const sqlPrivate = 57344

const sqlLast = 28645

var sqlAct = [...]int{

	88, 2079, 2057, 1621, 1886, 2021, 2104, 1659, 2058, 2078,
	1088, 1660, 2059, 1568, 1631, 905, 659, 1446, 1692, 1808,
	1912, 1932, 1833, 667, 795, 483, 65, 1173, 287, 303,
	666, 1443, 911, 1819, 521, 645, 1080, 1765, 1148, 435,
	1422, 1751, 497, 1147, 1569, 305, 51, 1536, 1424, 289,
	20, 1152, 1813, 539, 779, 1181, 758, 1637, 1166, 1535,
	1487, 764, 1373, 1188, 1255, 991, 1434, 907, 1646, 65,
	1151, 756, 735, 1180, 1429, 1089, 628, 476, 732, 1120,
	1049, 1242, 1265, 1367, 639, 1239, 1186, 1072, 928, 1040,
	1140, 765, 294, 30, 858, 737, 1104, 1312, 768, 1283,
	644, 65, 1113, 982, 629, 293, 16, 295, 8, 638,
	540, 531, 933, 1025, 1082, 481, 1766, 1155, 534, 486,
	1183, 596, 512, 533, 595, 20, 66, 796, 475, 611,
	860, 612, 432, 67, 421, 276, 613, 661, 80, 431,
	412, 84, 856, 772, 1021, 484, 527, 594, 424, 616,
	1944, 1475, 781, 1945, 781, 1117, 936, 937, 1081, 480,
	480, 781, 965, 966, 967, 1444, 936, 937, 30, 662,
	2095, 1479, 275, 761, 495, 751, 1480, 502, 505, 939,
	495, 16, 969, 8, 2074, 1085, 1478, 1764, 1384, 939,
	2069, 1123, 473, 1123, 494, 463, 462, 500, 1118, 472,
	507, 503, 938, 2068, 2065, 1385, 1123, 761, 952, 935,
	2055, 302, 938, 1110, 2050, 1123, 488, 761, 952, 2046,
	936, 937, 761, 955, 956, 957, 965, 966, 967, 2017,
	2011, 1993, 1110, 761, 1764, 1999, 958, 1989, 1119, 1116,
	761, 1984, 1953, 939, 1983, 1110, 969, 1942, 1939, 1926,
	790, 1940, 1764, 1076, 1432, 934, 64, 944, 71, 1923,
	1921, 1897, 761, 1764, 761, 1896, 938, 944, 1764, 1727,
	1868, 1678, 952, 1123, 1507, 1508, 962, 970, 1847, 1409,
	1073, 1123, 42, 73, 1844, 1836, 1073, 1110, 1123, 543,
	43, 1785, 1784, 1763, 1123, 1123, 1764, 1675, 1123, 1486,
	1123, 1432, 1607, 1602, 960, 1079, 1079, 1076, 1121, 1038,
	953, 1412, 44, 1553, 74, 1551, 1554, 1259, 1123, 1172,
	953, 944, 69, 1135, 1550, 536, 536, 1123, 70, 782,
	1549, 782, 624, 1123, 1476, 481, 71, 1123, 782, 1411,
	962, 970, 761, 900, 1177, 541, 68, 761, 899, 1127,
	936, 937, 1123, 850, 1122, 1109, 968, 1123, 1110, 1078,
	1037, 73, 1079, 1036, 789, 849, 761, 790, 960, 510,
	556, 493, 1767, 939, 953, 1513, 1115, 75, 954, 71,
	516, 1827, 1447, 495, 882, 505, 577, 2093, 954, 2077,
	2064, 963, 74, 2026, 520, 2012, 938, 1114, 1793, 959,
	69, 623, 1924, 528, 73, 537, 70, 1873, 1869, 1861,
	1860, 1859, 1855, 1854, 1853, 518, 1799, 1742, 1384, 1315,
	1737, 1736, 934, 1735, 1084, 71, 1686, 1664, 1522, 1636,
	1611, 1414, 55, 910, 785, 74, 780, 1558, 1555, 1543,
	1609, 1534, 954, 903, 1506, 1503, 1502, 1500, 1492, 1491,
	73, 944, 961, 1410, 1329, 963, 1280, 936, 937, 948,
	946, 947, 940, 941, 942, 943, 945, 68, 964, 948,
	946, 947, 940, 941, 942, 943, 945, 728, 964, 1279,
	939, 74, 1251, 623, 1445, 999, 992, 622, 68, 69,
	669, 669, 936, 937, 1694, 70, 1523, 2038, 1996, 669,
	1982, 1507, 1508, 938, 953, 1981, 602, 1980, 605, 1972,
	543, 936, 937, 68, 1970, 939, 961, 305, 543, 949,
	950, 951, 1961, 948, 946, 947, 940, 941, 942, 943,
	945, 1948, 964, 609, 939, 2076, 727, 1792, 938, 1870,
	1935, 1919, 1883, 1866, 1838, 1802, 762, 1790, 936, 937,
	610, 566, 1770, 669, 565, 770, 1670, 938, 944, 1651,
	1507, 1508, 1629, 1627, 669, 495, 1626, 726, 1624, 1577,
	543, 543, 954, 1576, 559, 561, 1533, 1252, 305, 1516,
	1509, 1510, 1511, 1512, 1514, 601, 1496, 1495, 1472, 784,
	1467, 1244, 787, 944, 938, 1400, 599, 729, 1358, 1356,
	1343, 755, 1513, 1342, 597, 1322, 1278, 883, 1176, 1026,
	473, 953, 1029, 1033, 1019, 669, 669, 472, 1018, 1017,
	769, 909, 669, 1343, 519, 495, 773, 773, 619, 620,
	1016, 625, 1298, 1015, 669, 669, 669, 669, 669, 1014,
	1013, 865, 865, 516, 669, 528, 1012, 1011, 502, 505,
	1010, 1009, 760, 1008, 669, 902, 940, 941, 942, 943,
	945, 1513, 964, 1007, 1006, 2048, 932, 1005, 791, 1004,
	774, 771, 793, 1003, 996, 914, 985, 68, 904, 954,
	498, 627, 563, 552, 550, 1943, 1849, 1828, 1824, 1798,
	481, 1797, 992, 1394, 842, 847, 844, 843, 1393, 983,
	1825, 728, 846, 878, 1986, 1946, 1425, 1796, 571, 745,
	877, 884, 722, 871, 888, 889, 890, 891, 892, 887,
	802, 1386, 936, 937, 895, 896, 743, 1031, 1073, 569,
	1447, 1032, 1557, 901, 1556, 936, 937, 1451, 1001, 587,
	916, 744, 881, 473, 930, 918, 473, 473, 572, 917,
	924, 908, 1368, 925, 926, 1814, 1266, 1608, 939, 1081,
	948, 946, 947, 940, 941, 942, 943, 945, 570, 964,
	1695, 995, 591, 1483, 1022, 1564, 721, 1380, 2029, 2090,
	283, 938, 1988, 632, 738, 1778, 739, 78, 1126, 455,
	1043, 543, 2091, 728, 1061, 456, 1907, 1064, 940, 941,
	942, 943, 945, 1406, 964, 998, 592, 1509, 1510, 1511,
	1512, 1514, 1906, 1905, 302, 65, 1904, 302, 1101, 1592,
	65, 1027, 1083, 964, 1083, 1098, 536, 1030, 536, 1054,
	1056, 1035, 1050, 284, 1591, 461, 944, 460, 1561, 1034,
	77, 1560, 1454, 495, 1105, 470, 1399, 541, 1023, 1024,
	1398, 505, 1075, 1397, 1396, 495, 1046, 740, 1226, 64,
	964, 1124, 64, 1059, 569, 1070, 1042, 1042, 1511, 1512,
	1514, 413, 1588, 1041, 1067, 1071, 1092, 279, 1069, 1066,
	598, 505, 509, 305, 505, 42, 1789, 1107, 42, 1087,
	1987, 1326, 418, 43, 1053, 1097, 43, 414, 1325, 1198,
	1106, 1102, 1108, 570, 1096, 1099, 738, 1100, 739, 1167,
	465, 674, 1139, 1595, 738, 44, 739, 898, 44, 876,
	875, 415, 869, 866, 1597, 280, 548, 1370, 766, 562,
	1241, 1241, 1888, 2036, 588, 669, 1027, 775, 1030, 2101,
	417, 669, 669, 669, 669, 669, 669, 669, 669, 669,
	669, 669, 669, 669, 669, 669, 669, 669, 669, 669,
	669, 669, 285, 669, 1121, 669, 669, 669, 669, 76,
	1178, 1128, 840, 305, 1579, 1129, 1266, 1374, 1197, 740,
	1616, 1024, 1023, 848, 669, 1052, 669, 740, 2090, 1613,
	1507, 1508, 1363, 669, 589, 1248, 286, 669, 1142, 505,
	1246, 879, 1249, 79, 495, 479, 669, 669, 669, 669,
	669, 669, 669, 669, 669, 669, 669, 669, 669, 669,
	669, 1144, 1143, 1405, 1146, 1145, 1360, 466, 71, 1614,
	770, 71, 1507, 1508, 964, 55, 1184, 669, 55, 1179,
	416, 590, 1521, 942, 943, 945, 897, 964, 471, 478,
	1121, 753, 467, 73, 741, 547, 73, 752, 1263, 834,
	1975, 468, 1051, 988, 1189, 1196, 2061, 1170, 1171, 1464,
	1433, 1328, 1020, 282, 281, 880, 1407, 543, 1378, 749,
	1586, 1039, 669, 1462, 74, 1253, 1117, 74, 419, 568,
	1250, 1513, 69, 567, 748, 69, 480, 1336, 70, 1121,
	2112, 70, 1274, 748, 1354, 2052, 802, 802, 1293, 1162,
	1355, 746, 736, 1357, 2100, 1330, 1653, 1374, 1437, 288,
	746, 1957, 1580, 1889, 669, 1223, 747, 1920, 2053, 1118,
	980, 481, 1353, 1513, 1331, 747, 543, 1440, 1494, 781,
	1332, 1647, 1663, 480, 1522, 1376, 1459, 2062, 1596, 1435,
	1382, 2060, 1388, 568, 1389, 1390, 1460, 1438, 1456, 1240,
	1465, 2089, 2087, 1131, 1759, 1807, 615, 1164, 1369, 1119,
	1116, 1362, 1436, 669, 1133, 1340, 741, 580, 557, 555,
	1372, 1366, 1899, 1379, 741, 769, 1522, 1821, 477, 1413,
	1898, 1415, 1387, 1134, 769, 2063, 2107, 1760, 1881, 1967,
	1417, 1864, 65, 1132, 495, 2099, 1563, 865, 1339, 1416,
	614, 1335, 1523, 1419, 1165, 1402, 1403, 802, 1437, 1221,
	1224, 669, 669, 1247, 1391, 915, 1105, 669, 1439, 2118,
	1408, 870, 867, 1759, 481, 615, 1752, 1440, 1392, 1121,
	669, 669, 1774, 1450, 1750, 669, 669, 1220, 1754, 1645,
	906, 1404, 1612, 669, 1523, 1461, 2022, 1438, 614, 1834,
	669, 1427, 1463, 828, 1723, 1420, 1760, 669, 1431, 1107,
	669, 669, 669, 1428, 1449, 855, 894, 2113, 1340, 669,
	802, 724, 1106, 851, 1108, 1632, 1753, 1755, 1184, 1756,
	1820, 481, 1865, 1517, 1515, 1516, 1509, 1510, 1511, 1512,
	1514, 669, 669, 669, 669, 1809, 1457, 1115, 1882, 1455,
	669, 669, 669, 853, 1345, 669, 782, 1758, 654, 1835,
	802, 2117, 2105, 1344, 1761, 854, 1777, 827, 1439, 1822,
	1471, 1642, 1773, 1776, 1222, 1517, 1515, 1516, 1509, 1510,
	1511, 1512, 1514, 669, 669, 1641, 1485, 1482, 567, 1724,
	481, 85, 85, 277, 526, 1725, 1755, 669, 1756, 669,
	1575, 525, 478, 606, 404, 405, 406, 1574, 1622, 423,
	1800, 1365, 436, 2106, 1573, 669, 1638, 1430, 1879, 1277,
	423, 436, 1960, 1863, 1537, 1669, 1758, 669, 487, 487,
	1594, 2108, 277, 1761, 1757, 277, 277, 506, 277, 923,
	1880, 85, 513, 1559, 1583, 1256, 1585, 1540, 1541, 1542,
	1501, 1466, 1260, 1371, 723, 1125, 1268, 1077, 671, 1065,
	1603, 1062, 1566, 1775, 593, 543, 586, 1285, 1285, 1296,
	585, 1307, 584, 1628, 583, 582, 581, 1319, 1320, 1321,
	1600, 578, 524, 517, 1587, 305, 669, 1625, 1593, 1538,
	1002, 1598, 669, 886, 1276, 669, 669, 669, 2056, 1605,
	1604, 1654, 801, 1757, 1353, 1606, 1441, 669, 65, 2019,
	1748, 1652, 1633, 669, 1655, 1584, 669, 1615, 1617, 1618,
	1582, 1562, 1421, 1623, 669, 1092, 1184, 669, 1640, 1168,
	1160, 1643, 1672, 1103, 1635, 788, 1634, 786, 783, 778,
	754, 750, 669, 1644, 742, 1683, 669, 1648, 1649, 1423,
	669, 669, 669, 669, 669, 669, 669, 669, 669, 669,
	669, 669, 669, 669, 669, 669, 669, 669, 1914, 669,
	617, 1433, 1174, 1184, 669, 2091, 1184, 491, 669, 669,
	1679, 574, 523, 522, 3, 669, 1682, 669, 669, 669,
	873, 1916, 1042, 1058, 1042, 300, 25, 1696, 1057, 81,
	1055, 1442, 1698, 1601, 1701, 1977, 1688, 1689, 1690, 299,
	24, 1703, 1767, 669, 2014, 298, 23, 669, 1639, 1437,
	1063, 296, 22, 1730, 621, 297, 11, 301, 10, 1060,
	1771, 1175, 2000, 1575, 1805, 543, 1731, 409, 1440, 618,
	1574, 277, 529, 277, 436, 436, 492, 1573, 1163, 1768,
	1435, 1159, 1086, 931, 1747, 845, 1772, 1744, 1438, 794,
	499, 1112, 575, 291, 9, 669, 1189, 1699, 514, 515,
	669, 25, 2115, 1436, 543, 1189, 1704, 802, 1801, 669,
	669, 1575, 511, 1806, 1237, 24, 1575, 420, 1574, 828,
	828, 23, 1794, 1574, 543, 1573, 1788, 22, 1235, 454,
	1573, 11, 1830, 10, 1470, 1803, 1795, 1734, 802, 802,
	669, 1804, 1473, 2116, 669, 669, 2049, 802, 802, 669,
	2003, 1810, 1839, 290, 7, 1831, 669, 1781, 669, 1439,
	1489, 1490, 1743, 1787, 1812, 1843, 669, 1817, 1818, 9,
	481, 1823, 1619, 292, 4, 1811, 1610, 1829, 1851, 802,
	541, 1507, 1508, 827, 827, 936, 937, 1552, 457, 458,
	1395, 1231, 1327, 1532, 1137, 1136, 553, 1324, 669, 1232,
	1323, 1233, 1273, 1138, 1545, 1238, 989, 2035, 1913, 1691,
	1418, 558, 1184, 1184, 436, 436, 1184, 999, 997, 1862,
	464, 1887, 411, 885, 579, 1826, 1650, 2051, 1856, 7,
	828, 669, 1493, 89, 1931, 669, 1956, 1275, 1000, 41,
	1571, 669, 648, 1749, 1565, 1154, 1589, 669, 1590, 4,
	423, 1575, 1153, 277, 308, 436, 604, 436, 1574, 607,
	669, 874, 1877, 1891, 1299, 1573, 1893, 1874, 670, 859,
	1875, 770, 868, 669, 487, 1284, 1909, 1892, 306, 1890,
	1190, 543, 725, 672, 799, 277, 1922, 673, 800, 1575,
	1028, 660, 669, 828, 827, 1908, 1574, 797, 1090, 85,
	1234, 1915, 830, 1573, 1902, 1903, 1245, 1236, 277, 1917,
	802, 669, 669, 277, 277, 277, 1941, 776, 801, 801,
	1264, 1950, 1934, 1930, 1947, 1925, 1938, 1481, 1928, 993,
	640, 652, 1885, 828, 669, 1658, 277, 277, 651, 1261,
	549, 669, 1468, 1469, 85, 1832, 85, 1949, 1937, 54,
	564, 436, 1929, 430, 669, 1377, 1791, 827, 1169, 919,
	1971, 1962, 1676, 1581, 469, 1504, 551, 436, 1305, 85,
	436, 436, 436, 436, 436, 893, 1901, 1297, 1927, 1294,
	436, 436, 1966, 600, 731, 981, 1091, 423, 1965, 576,
	669, 1383, 1111, 1184, 626, 913, 1992, 827, 1994, 543,
	1955, 1995, 1973, 1529, 1530, 1531, 927, 490, 489, 1149,
	573, 852, 1130, 487, 974, 1998, 513, 305, 802, 2004,
	971, 459, 1969, 1728, 1161, 2009, 2002, 1338, 2111, 801,
	1976, 669, 1578, 2028, 1738, 829, 481, 2006, 65, 798,
	72, 2005, 1985, 1974, 2001, 1911, 2007, 1364, 29, 26,
	21, 669, 669, 669, 19, 18, 2016, 2010, 28, 17,
	27, 15, 14, 13, 12, 40, 2039, 669, 2040, 2041,
	1997, 2025, 39, 38, 2034, 37, 36, 35, 6, 5,
	2042, 2024, 2, 1575, 2047, 669, 1, 2030, 2043, 2045,
	1574, 2044, 801, 1299, 1299, 0, 2037, 1573, 0, 0,
	669, 0, 0, 0, 2013, 0, 802, 0, 0, 0,
	0, 841, 720, 2066, 2073, 0, 0, 2071, 0, 277,
	0, 0, 544, 669, 669, 0, 0, 1047, 0, 1816,
	0, 277, 801, 2084, 0, 0, 2075, 410, 2088, 277,
	1068, 2086, 2092, 277, 0, 0, 2027, 2072, 0, 2096,
	1074, 669, 2098, 2097, 1299, 1299, 1299, 307, 1667, 1668,
	0, 0, 0, 0, 277, 2110, 1094, 1095, 2109, 277,
	2114, 0, 277, 0, 436, 436, 0, 436, 2094, 0,
	0, 2070, 0, 413, 0, 0, 669, 2119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 802, 1507, 1508, 418, 0, 0, 1092, 0, 414,
	0, 0, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712,
	1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722,
	0, 1726, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	828, 0, 417, 0, 649, 52, 0, 0, 0, 0,
	1895, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1141, 0, 0, 0, 0,
	0, 828, 828, 0, 0, 0, 277, 277, 830, 830,
	828, 828, 277, 1150, 0, 0, 0, 0, 52, 513,
	0, 0, 0, 1513, 0, 0, 0, 0, 0, 1299,
	1299, 0, 0, 0, 827, 0, 0, 0, 0, 0,
	474, 0, 828, 482, 277, 0, 0, 436, 0, 0,
	52, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 544, 0, 827, 827, 1507, 1508, 0,
	306, 544, 416, 0, 827, 827, 1522, 0, 0, 0,
	0, 0, 0, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
	1299, 0, 1299, 0, 0, 0, 827, 0, 0, 0,
	0, 0, 0, 0, 936, 937, 0, 0, 0, 830,
	419, 545, 0, 544, 544, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 939, 0, 0,
	0, 829, 829, 0, 1523, 798, 798, 0, 277, 1333,
	1334, 0, 0, 0, 1047, 0, 0, 1341, 0, 0,
	938, 0, 0, 1346, 1347, 1349, 1351, 1352, 1513, 801,
	0, 0, 0, 828, 0, 1359, 0, 0, 1361, 277,
	0, 0, 830, 1884, 0, 0, 0, 0, 277, 0,
	2031, 2032, 2033, 277, 0, 1381, 0, 0, 0, 0,
	801, 801, 277, 1507, 1508, 0, 1524, 1525, 1526, 801,
	801, 0, 277, 0, 0, 944, 0, 0, 0, 1841,
	0, 1522, 830, 0, 2054, 0, 1515, 1516, 1509, 1510,
	1511, 1512, 1514, 1141, 1141, 0, 0, 827, 0, 0,
	0, 801, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 829, 0, 0, 1521, 798, 1507, 1508, 0,
	1524, 1525, 1526, 482, 0, 913, 0, 913, 953, 436,
	0, 0, 0, 277, 0, 0, 0, 1426, 936, 937,
	0, 828, 0, 0, 0, 0, 1959, 0, 0, 1523,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 939, 0, 0, 1513, 0, 0, 0, 0, 1521,
	0, 0, 0, 0, 0, 829, 0, 0, 0, 798,
	0, 630, 630, 0, 938, 0, 0, 0, 1507, 1508,
	733, 1524, 1525, 1526, 1299, 0, 954, 0, 0, 1527,
	0, 0, 545, 0, 544, 827, 0, 0, 0, 307,
	545, 0, 0, 0, 0, 829, 0, 1522, 1513, 798,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 828,
	0, 0, 801, 1509, 1510, 1511, 1512, 1514, 1528, 944,
	1521, 0, 0, 2015, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1527, 0, 0, 0, 0, 0, 0,
	0, 0, 545, 545, 0, 0, 0, 0, 0, 0,
	307, 1522, 0, 0, 0, 0, 0, 0, 946, 947,
	940, 941, 942, 943, 945, 1523, 964, 0, 0, 1513,
	0, 0, 953, 827, 0, 0, 306, 1299, 0, 0,
	0, 0, 0, 0, 0, 0, 920, 922, 0, 0,
	0, 0, 1570, 929, 0, 0, 0, 0, 474, 0,
	0, 0, 0, 0, 828, 975, 976, 977, 978, 979,
	0, 0, 0, 0, 0, 987, 0, 0, 0, 1523,
	801, 0, 1522, 0, 0, 994, 0, 0, 0, 0,
	0, 0, 0, 277, 277, 0, 0, 0, 0, 0,
	954, 0, 1518, 1519, 1520, 0, 1517, 1515, 1516, 1509,
	1510, 1511, 1512, 1514, 0, 0, 0, 0, 1620, 0,
	0, 1047, 0, 913, 0, 0, 306, 0, 827, 0,
	1630, 0, 0, 0, 1299, 0, 0, 0, 0, 830,
	0, 277, 0, 0, 277, 0, 0, 0, 0, 0,
	1523, 0, 0, 0, 0, 1662, 1518, 1519, 1520, 0,
	1517, 1515, 1516, 1509, 1510, 1511, 1512, 1514, 801, 0,
	830, 830, 0, 0, 0, 0, 0, 0, 0, 830,
	830, 0, 0, 947, 940, 941, 942, 943, 945, 0,
	964, 474, 0, 0, 474, 474, 0, 0, 0, 0,
	0, 0, 0, 1693, 0, 0, 0, 0, 0, 0,
	0, 830, 0, 0, 0, 0, 984, 0, 986, 0,
	0, 0, 0, 545, 0, 990, 0, 1518, 1519, 1520,
	544, 1517, 1515, 1516, 1509, 1510, 1511, 1512, 1514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 801, 0, 0, 0, 0, 0, 1745,
	1746, 1047, 829, 0, 0, 0, 798, 0, 0, 0,
	0, 0, 0, 0, 0, 1570, 513, 0, 0, 544,
	0, 1779, 0, 1780, 0, 277, 1782, 1783, 0, 0,
	1786, 277, 0, 829, 829, 0, 0, 798, 798, 0,
	0, 0, 829, 829, 0, 307, 798, 798, 0, 52,
	0, 0, 52, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1570, 0, 513, 1150, 0, 1570, 0,
	0, 0, 830, 0, 829, 0, 0, 52, 798, 52,
	277, 277, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 1662, 52, 0, 630, 0, 0, 52,
	1837, 0, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
	1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216,
	1217, 1218, 1219, 0, 1225, 0, 1227, 1228, 1229, 1230,
	0, 0, 0, 1857, 0, 307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1254, 0, 1507, 1508, 0,
	1524, 1525, 1526, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1840, 0, 0, 0, 1281, 1282, 0,
	0, 1295, 0, 1306, 1308, 1313, 1316, 1317, 1318, 0,
	830, 0, 0, 0, 0, 0, 0, 1047, 0, 1876,
	0, 436, 1878, 0, 0, 0, 0, 0, 733, 1521,
	277, 0, 0, 1570, 0, 829, 436, 0, 0, 798,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1910, 0,
	0, 513, 0, 0, 0, 0, 0, 0, 0, 545,
	1185, 1570, 0, 1375, 0, 0, 277, 0, 1513, 0,
	0, 0, 0, 1933, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 0, 0, 830, 0,
	0, 0, 0, 0, 0, 1243, 0, 513, 1662, 0,
	0, 0, 0, 1527, 0, 1401, 0, 0, 0, 1507,
	1508, 0, 1524, 1525, 1526, 0, 0, 0, 545, 0,
	0, 1522, 0, 0, 0, 1674, 0, 0, 544, 0,
	0, 0, 0, 829, 0, 0, 0, 798, 913, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 0, 0, 0, 929, 0, 0, 0, 0, 0,
	0, 1521, 0, 1978, 1979, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1990, 0, 0, 0, 1991,
	0, 0, 0, 830, 0, 52, 0, 0, 52, 1523,
	0, 0, 0, 0, 513, 0, 0, 0, 0, 0,
	1662, 0, 1452, 1453, 0, 0, 1662, 513, 1458, 482,
	1513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 829, 0, 0, 0, 798, 0, 0, 0, 2023,
	0, 513, 0, 0, 277, 0, 436, 0, 0, 0,
	0, 1477, 0, 0, 0, 1527, 0, 0, 1484, 0,
	0, 1488, 0, 0, 0, 1570, 0, 0, 1933, 0,
	1497, 1662, 0, 1522, 0, 0, 1518, 1519, 1520, 0,
	1517, 1515, 1516, 1509, 1510, 1511, 1512, 1514, 0, 0,
	0, 0, 0, 0, 52, 987, 0, 0, 52, 0,
	0, 1313, 1313, 1313, 0, 277, 0, 513, 544, 0,
	0, 52, 936, 937, 0, 955, 956, 957, 965, 966,
	967, 0, 1448, 0, 0, 2085, 829, 0, 958, 0,
	798, 0, 0, 0, 1567, 939, 0, 0, 969, 0,
	0, 1523, 0, 0, 1662, 0, 0, 544, 0, 1507,
	1508, 0, 1524, 1525, 1526, 0, 0, 0, 938, 1243,
	0, 0, 0, 0, 952, 1673, 630, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 733, 986,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1521, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 944, 0, 0, 0, 545, 1518, 1519,
	1520, 0, 1517, 1515, 1516, 1509, 1510, 1511, 1512, 1514,
	0, 0, 962, 970, 0, 0, 0, 307, 986, 0,
	0, 0, 0, 1665, 0, 0, 1666, 0, 968, 0,
	1513, 437, 1507, 1508, 0, 1524, 1525, 1526, 1671, 0,
	960, 0, 0, 0, 0, 0, 953, 1680, 0, 438,
	0, 0, 0, 0, 0, 1684, 0, 0, 1401, 0,
	0, 0, 0, 0, 0, 1527, 0, 0, 0, 0,
	0, 959, 0, 1700, 0, 0, 0, 1702, 0, 0,
	0, 0, 0, 1522, 1521, 0, 440, 0, 0, 0,
	0, 445, 446, 0, 0, 451, 0, 0, 0, 0,
	1185, 0, 0, 0, 544, 0, 0, 439, 441, 1732,
	1733, 0, 0, 0, 954, 0, 0, 0, 1739, 1740,
	1741, 0, 0, 0, 0, 0, 0, 963, 0, 0,
	0, 0, 0, 1513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1769, 0, 442, 1185, 0, 0,
	1185, 1523, 0, 0, 0, 0, 0, 52, 0, 0,
	443, 444, 0, 0, 0, 0, 0, 545, 1527, 0,
	0, 0, 0, 0, 0, 0, 0, 447, 0, 0,
	0, 0, 0, 0, 0, 0, 1522, 0, 961, 0,
	0, 949, 950, 951, 0, 948, 946, 947, 940, 941,
	942, 943, 945, 0, 964, 0, 545, 0, 0, 0,
	1815, 1548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 544, 0, 0, 0, 545, 0, 1518, 1519,
	1520, 0, 1517, 1515, 1516, 1509, 1510, 1511, 1512, 1514,
	306, 1842, 0, 0, 0, 1845, 1846, 0, 0, 0,
	1848, 0, 0, 0, 1523, 0, 0, 1850, 0, 1852,
	0, 0, 0, 0, 0, 0, 0, 1858, 936, 937,
	0, 955, 956, 957, 965, 966, 967, 0, 0, 0,
	0, 0, 0, 0, 958, 0, 0, 0, 0, 0,
	448, 939, 453, 0, 969, 0, 449, 0, 0, 1867,
	0, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 938, 452, 0, 52, 0, 0,
	952, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1518, 1519, 1520, 0, 1517, 1515, 1516, 1509, 1510,
	1511, 1512, 1514, 0, 0, 0, 0, 0, 1900, 0,
	0, 0, 0, 0, 0, 0, 1185, 1185, 0, 0,
	1185, 0, 0, 0, 0, 0, 0, 0, 482, 944,
	0, 0, 0, 0, 936, 937, 0, 955, 956, 957,
	965, 966, 967, 545, 0, 0, 0, 0, 962, 970,
	958, 0, 0, 1936, 0, 0, 0, 939, 0, 0,
	969, 0, 0, 0, 968, 0, 0, 0, 0, 0,
	0, 0, 1951, 1952, 0, 0, 960, 0, 0, 0,
	938, 0, 953, 0, 0, 0, 952, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1964, 0, 0, 0, 0, 959, 0, 0,
	0, 0, 0, 0, 0, 1968, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 944, 0, 1538, 0, 0,
	1537, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	954, 733, 0, 0, 962, 970, 0, 0, 0, 0,
	0, 545, 0, 963, 0, 0, 0, 0, 0, 0,
	968, 1918, 0, 0, 0, 0, 0, 0, 0, 307,
	52, 0, 960, 0, 0, 0, 0, 0, 953, 0,
	0, 0, 0, 0, 0, 0, 0, 1185, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 959, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 961, 0, 0, 949, 950, 951,
	0, 948, 946, 947, 940, 941, 942, 943, 945, 0,
	964, 0, 0, 0, 0, 0, 0, 1547, 0, 0,
	0, 0, 0, 0, 0, 0, 954, 0, 0, 0,
	0, 2067, 0, 0, 0, 0, 0, 0, 0, 963,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2083, 2083, 0, 0, 0, 0,
	0, 0, 0, 0, 986, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2083, 0, 0, 0, 0, 52, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	961, 0, 304, 949, 950, 951, 0, 948, 946, 947,
	940, 941, 942, 943, 945, 0, 964, 2083, 90, 91,
	323, 92, 324, 325, 326, 327, 224, 328, 329, 330,
	331, 93, 94, 95, 225, 226, 227, 228, 96, 229,
	230, 332, 97, 231, 232, 98, 333, 334, 233, 234,
	235, 335, 99, 236, 336, 309, 337, 100, 101, 102,
	0, 103, 338, 104, 105, 106, 339, 310, 107, 108,
	340, 341, 342, 343, 344, 345, 109, 110, 278, 111,
	237, 112, 238, 239, 346, 113, 347, 114, 348, 349,
	350, 115, 116, 351, 117, 352, 0, 353, 240, 118,
	119, 241, 242, 354, 355, 356, 120, 121, 243, 0,
	122, 357, 123, 358, 359, 311, 360, 124, 244, 361,
	245, 362, 125, 126, 127, 128, 246, 247, 313, 363,
	132, 364, 129, 365, 312, 130, 248, 131, 249, 250,
	251, 366, 252, 367, 314, 133, 315, 134, 135, 368,
	137, 136, 369, 253, 316, 138, 317, 370, 139, 371,
	372, 140, 0, 141, 142, 143, 145, 254, 144, 318,
	146, 147, 149, 148, 373, 374, 375, 255, 150, 256,
	151, 152, 376, 153, 377, 378, 154, 379, 380, 155,
	257, 319, 156, 320, 258, 157, 158, 159, 160, 381,
	259, 161, 260, 162, 382, 163, 164, 165, 261, 166,
	167, 383, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 384, 179, 321, 180, 181, 262, 182,
	0, 185, 186, 187, 188, 385, 263, 189, 190, 386,
	191, 183, 192, 322, 193, 264, 265, 194, 387, 200,
	195, 196, 184, 197, 199, 266, 198, 267, 388, 201,
	389, 202, 203, 204, 205, 206, 390, 268, 269, 270,
	391, 392, 207, 271, 272, 393, 208, 209, 210, 211,
	394, 395, 212, 213, 214, 396, 215, 397, 216, 217,
	218, 273, 274, 398, 399, 219, 400, 401, 402, 403,
	220, 221, 222, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 0, 0, 0, 0, 0,
	0, 1656, 0, 0, 0, 0, 0, 0, 0, 1657,
	90, 91, 323, 92, 324, 325, 326, 327, 224, 328,
	329, 330, 331, 93, 94, 95, 225, 226, 227, 228,
	96, 229, 230, 332, 97, 231, 232, 98, 333, 334,
	233, 234, 235, 335, 99, 236, 336, 309, 337, 100,
	101, 102, 0, 103, 338, 104, 105, 106, 339, 310,
	107, 108, 340, 341, 342, 343, 344, 345, 109, 110,
	278, 111, 237, 112, 238, 239, 346, 113, 347, 114,
	348, 349, 350, 115, 116, 351, 117, 352, 0, 353,
	240, 118, 119, 241, 242, 354, 355, 356, 120, 121,
	243, 0, 122, 357, 123, 358, 359, 311, 360, 124,
	244, 361, 245, 362, 125, 126, 127, 128, 246, 247,
	313, 363, 132, 364, 129, 365, 312, 130, 248, 131,
	249, 250, 251, 366, 252, 367, 314, 133, 315, 134,
	135, 368, 137, 136, 369, 253, 316, 138, 317, 370,
	139, 371, 372, 140, 0, 141, 142, 143, 145, 254,
	144, 318, 146, 147, 149, 148, 373, 374, 375, 255,
	150, 256, 151, 152, 376, 153, 377, 378, 154, 379,
	380, 155, 257, 319, 156, 320, 258, 157, 158, 159,
	160, 381, 259, 161, 260, 162, 382, 163, 164, 165,
	261, 166, 167, 383, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 384, 179, 321, 180, 181,
	262, 182, 0, 185, 186, 187, 188, 385, 263, 189,
	190, 386, 191, 183, 192, 322, 193, 264, 265, 194,
	387, 200, 195, 196, 184, 197, 199, 266, 198, 267,
	388, 201, 389, 202, 203, 204, 205, 206, 390, 268,
	269, 270, 391, 392, 207, 271, 272, 393, 208, 209,
	210, 211, 394, 395, 212, 213, 214, 396, 215, 397,
	216, 217, 218, 273, 274, 398, 399, 219, 400, 401,
	402, 403, 220, 221, 222, 223, 0, 0, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2008, 90, 91, 323, 92, 324, 325,
	326, 327, 224, 328, 329, 330, 331, 93, 94, 95,
	225, 226, 227, 228, 96, 229, 230, 332, 97, 231,
	232, 98, 333, 334, 233, 234, 235, 335, 99, 236,
	336, 309, 337, 100, 101, 102, 0, 103, 338, 104,
	105, 106, 339, 310, 107, 108, 340, 341, 342, 343,
	344, 345, 109, 110, 278, 111, 237, 112, 238, 239,
	346, 113, 347, 114, 348, 349, 350, 115, 116, 351,
	117, 352, 0, 353, 240, 118, 119, 241, 242, 354,
	355, 356, 120, 121, 243, 0, 122, 357, 123, 358,
	359, 311, 360, 124, 244, 361, 245, 362, 125, 126,
	127, 128, 246, 247, 313, 363, 132, 364, 129, 365,
	312, 130, 248, 131, 249, 250, 251, 366, 252, 367,
	314, 133, 315, 134, 135, 368, 137, 136, 369, 253,
	316, 138, 317, 370, 139, 371, 372, 140, 0, 141,
	142, 143, 145, 254, 144, 318, 146, 147, 149, 148,
	373, 374, 375, 255, 150, 256, 151, 152, 376, 153,
	377, 378, 154, 379, 380, 155, 257, 319, 156, 320,
	258, 157, 158, 159, 160, 381, 259, 161, 260, 162,
	382, 163, 164, 165, 261, 166, 167, 383, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 384,
	179, 321, 180, 181, 262, 182, 0, 185, 186, 187,
	188, 385, 263, 189, 190, 386, 191, 183, 192, 322,
	193, 264, 265, 194, 387, 200, 195, 196, 184, 197,
	199, 266, 198, 267, 388, 201, 389, 202, 203, 204,
	205, 206, 390, 268, 269, 270, 391, 392, 207, 271,
	272, 393, 208, 209, 210, 211, 394, 395, 212, 213,
	214, 396, 215, 397, 216, 217, 218, 273, 274, 398,
	399, 219, 400, 401, 402, 403, 220, 221, 222, 223,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 763, 0, 0, 0, 90, 91, 323, 92,
	324, 325, 326, 327, 224, 328, 329, 330, 331, 93,
	94, 95, 225, 226, 227, 228, 96, 229, 230, 332,
	97, 231, 232, 98, 333, 334, 233, 234, 235, 335,
	99, 236, 336, 309, 337, 100, 101, 102, 0, 103,
	338, 104, 105, 106, 339, 310, 107, 108, 340, 341,
	342, 343, 344, 345, 109, 110, 278, 111, 237, 112,
	238, 239, 346, 113, 347, 114, 348, 349, 350, 115,
	116, 351, 117, 352, 0, 353, 240, 118, 119, 241,
	242, 354, 355, 356, 120, 121, 243, 0, 122, 357,
	123, 358, 359, 311, 360, 124, 244, 361, 245, 362,
	125, 126, 127, 128, 246, 247, 313, 363, 132, 364,
	129, 365, 312, 130, 248, 131, 249, 250, 251, 366,
	252, 367, 314, 133, 315, 134, 135, 368, 137, 136,
	369, 253, 316, 138, 317, 370, 139, 371, 372, 140,
	0, 141, 142, 143, 145, 254, 144, 318, 146, 147,
	149, 148, 373, 374, 375, 255, 150, 256, 151, 152,
	376, 153, 377, 378, 154, 379, 380, 155, 257, 319,
	156, 320, 258, 157, 158, 159, 160, 381, 259, 161,
	260, 162, 382, 163, 164, 165, 261, 166, 167, 383,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 384, 179, 321, 180, 181, 262, 182, 0, 185,
	186, 187, 188, 385, 263, 189, 190, 386, 191, 183,
	192, 322, 193, 264, 265, 194, 387, 200, 195, 196,
	184, 197, 199, 266, 198, 267, 388, 201, 389, 202,
	203, 204, 205, 206, 390, 268, 269, 270, 391, 392,
	207, 271, 272, 393, 208, 209, 210, 211, 394, 395,
	212, 213, 214, 396, 215, 397, 216, 217, 218, 273,
	274, 398, 399, 219, 400, 401, 402, 403, 220, 221,
	222, 223, 668, 657, 658, 655, 656, 647, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 684, 650, 0, 0,
	0, 93, 94, 95, 225, 699, 227, 700, 96, 701,
	702, 0, 97, 231, 232, 98, 653, 683, 703, 704,
	235, 0, 99, 695, 0, 676, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 310, 107, 108,
	0, 677, 679, 0, 678, 680, 109, 110, 278, 111,
	705, 112, 706, 707, 734, 113, 0, 114, 0, 0,
	0, 698, 116, 0, 117, 0, 0, 0, 641, 118,
	119, 685, 686, 664, 0, 0, 120, 121, 708, 0,
	122, 0, 123, 0, 0, 311, 0, 124, 696, 0,
	245, 0, 125, 126, 127, 128, 692, 694, 313, 0,
	132, 0, 129, 0, 312, 130, 709, 131, 710, 711,
	712, 0, 675, 0, 314, 133, 315, 134, 135, 0,
	137, 136, 0, 697, 316, 138, 317, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 254, 144, 318,
	146, 147, 149, 148, 636, 0, 665, 693, 150, 713,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	257, 319, 156, 320, 687, 157, 158, 159, 160, 0,
	688, 161, 260, 162, 0, 163, 164, 165, 714, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 321, 180, 181, 642, 182,
	0, 185, 186, 187, 188, 71, 263, 189, 190, 681,
	191, 183, 192, 322, 193, 715, 265, 194, 0, 200,
	195, 196, 184, 197, 199, 716, 198, 689, 0, 201,
	73, 202, 203, 204, 205, 206, 0, 268, 717, 718,
	0, 0, 207, 690, 691, 663, 208, 209, 210, 211,
	0, 0, 212, 213, 214, 682, 215, 0, 216, 217,
	218, 546, 719, 0, 0, 219, 0, 0, 0, 69,
	220, 221, 222, 223, 637, 70, 0, 0, 668, 657,
	658, 655, 656, 647, 633, 634, 0, 0, 0, 0,
	635, 0, 0, 643, 90, 91, 1270, 92, 646, 0,
	0, 0, 684, 650, 0, 0, 0, 93, 94, 95,
	225, 699, 227, 700, 96, 701, 702, 0, 97, 231,
	232, 98, 653, 683, 703, 704, 235, 0, 99, 695,
	0, 676, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 310, 107, 108, 0, 677, 679, 0,
	678, 680, 109, 110, 278, 111, 705, 112, 706, 707,
	0, 113, 0, 114, 0, 1271, 0, 698, 116, 0,
	117, 0, 0, 0, 641, 118, 119, 685, 686, 664,
	0, 0, 120, 121, 708, 0, 122, 0, 123, 0,
	0, 311, 0, 124, 696, 0, 245, 0, 125, 126,
	127, 128, 692, 694, 313, 0, 132, 0, 129, 0,
	312, 130, 709, 131, 710, 711, 712, 0, 675, 0,
	314, 133, 315, 134, 135, 0, 137, 136, 0, 697,
	316, 138, 317, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 254, 144, 318, 146, 147, 149, 148,
	636, 0, 665, 693, 150, 713, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 257, 319, 156, 320,
	687, 157, 158, 159, 160, 0, 688, 161, 260, 162,
	0, 163, 164, 165, 714, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 321, 180, 181, 642, 182, 0, 185, 186, 187,
	188, 0, 263, 189, 190, 681, 191, 183, 192, 322,
	193, 715, 265, 194, 0, 200, 195, 196, 184, 197,
	199, 716, 198, 689, 0, 201, 0, 202, 203, 204,
	205, 206, 0, 268, 717, 718, 0, 0, 207, 690,
	691, 663, 208, 209, 210, 211, 0, 0, 212, 213,
	214, 682, 215, 0, 216, 217, 218, 273, 719, 1269,
	0, 219, 0, 0, 0, 0, 220, 221, 222, 223,
	637, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	633, 634, 1272, 0, 0, 0, 635, 0, 0, 643,
	1267, 0, 0, 0, 646, 668, 657, 658, 655, 656,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 684,
	650, 0, 0, 0, 93, 94, 95, 225, 699, 227,
	700, 96, 701, 702, 0, 97, 231, 232, 98, 653,
	683, 703, 704, 235, 0, 99, 695, 0, 676, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	310, 107, 108, 0, 677, 679, 0, 678, 680, 109,
	110, 278, 111, 705, 112, 706, 707, 0, 113, 0,
	114, 0, 0, 0, 698, 116, 0, 117, 0, 0,
	0, 641, 118, 119, 685, 686, 664, 0, 0, 120,
	121, 708, 0, 122, 0, 123, 0, 0, 311, 0,
	124, 696, 0, 245, 0, 125, 126, 127, 128, 692,
	694, 313, 0, 132, 0, 129, 0, 312, 130, 709,
	131, 710, 711, 712, 0, 675, 0, 314, 133, 315,
	134, 135, 0, 137, 136, 0, 697, 316, 138, 317,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	254, 144, 318, 146, 147, 149, 148, 636, 0, 665,
	693, 150, 713, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 257, 319, 156, 320, 687, 157, 158,
	159, 160, 0, 688, 161, 260, 162, 0, 163, 164,
	165, 714, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 321, 180,
	181, 642, 182, 0, 185, 186, 187, 188, 71, 263,
	189, 190, 681, 191, 183, 192, 322, 193, 715, 265,
	194, 0, 200, 195, 196, 184, 197, 199, 716, 198,
	689, 0, 201, 73, 202, 203, 204, 205, 206, 0,
	268, 717, 718, 0, 0, 207, 690, 691, 663, 208,
	209, 210, 211, 0, 0, 212, 213, 214, 682, 215,
	0, 216, 217, 218, 546, 719, 0, 0, 219, 0,
	0, 0, 69, 220, 221, 222, 223, 637, 70, 0,
	0, 668, 657, 658, 655, 656, 647, 633, 634, 0,
	0, 0, 0, 635, 0, 0, 643, 90, 91, 0,
	92, 646, 0, 0, 0, 684, 650, 0, 0, 0,
	93, 94, 95, 225, 699, 227, 700, 96, 701, 702,
	1309, 97, 231, 232, 98, 653, 683, 703, 704, 235,
	0, 99, 695, 0, 676, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 310, 107, 108, 0,
	677, 679, 0, 678, 680, 109, 110, 278, 111, 705,
	112, 706, 707, 0, 113, 0, 114, 0, 0, 0,
	698, 116, 0, 117, 0, 0, 0, 641, 118, 119,
	685, 686, 664, 0, 0, 120, 121, 708, 0, 122,
	0, 123, 0, 1314, 311, 0, 124, 696, 0, 245,
	0, 125, 126, 127, 128, 692, 694, 313, 0, 132,
	0, 129, 0, 312, 130, 709, 131, 710, 711, 712,
	0, 675, 0, 314, 133, 315, 134, 135, 0, 137,
	136, 1310, 697, 316, 138, 317, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 254, 144, 318, 146,
	147, 149, 148, 636, 0, 665, 693, 150, 713, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 257,
	319, 156, 320, 687, 157, 158, 159, 160, 0, 688,
	161, 260, 162, 0, 163, 164, 165, 714, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 321, 180, 181, 642, 182, 0,
	185, 186, 187, 188, 0, 263, 189, 190, 681, 191,
	183, 192, 322, 193, 715, 265, 194, 0, 200, 195,
	196, 184, 197, 199, 716, 198, 689, 0, 201, 0,
	202, 203, 204, 205, 206, 0, 268, 717, 718, 0,
	1311, 207, 690, 691, 663, 208, 209, 210, 211, 0,
	0, 212, 213, 214, 682, 215, 0, 216, 217, 218,
	273, 719, 0, 0, 219, 0, 0, 0, 0, 220,
	221, 222, 223, 637, 668, 657, 658, 655, 656, 647,
	0, 0, 0, 633, 634, 0, 0, 0, 0, 635,
	90, 91, 643, 92, 0, 0, 0, 646, 684, 650,
	0, 0, 0, 93, 94, 95, 225, 699, 227, 700,
	96, 701, 702, 0, 97, 231, 232, 98, 653, 683,
	703, 704, 235, 0, 99, 695, 0, 676, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 310,
	107, 108, 0, 677, 679, 0, 678, 680, 109, 110,
	278, 111, 705, 112, 706, 707, 0, 113, 0, 114,
	0, 0, 0, 698, 116, 0, 117, 0, 0, 0,
	641, 118, 119, 685, 686, 664, 0, 0, 120, 121,
	708, 0, 122, 0, 123, 0, 0, 311, 0, 124,
	696, 0, 245, 0, 125, 126, 127, 128, 692, 694,
	313, 0, 132, 0, 129, 0, 312, 130, 709, 131,
	710, 711, 712, 0, 675, 0, 314, 133, 315, 134,
	135, 0, 137, 136, 0, 697, 316, 138, 317, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 254,
	144, 318, 146, 147, 149, 148, 636, 1599, 665, 693,
	150, 713, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 257, 319, 156, 320, 687, 157, 158, 159,
	160, 0, 688, 161, 260, 162, 0, 163, 164, 165,
	714, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 321, 180, 181,
	642, 182, 0, 185, 186, 187, 188, 0, 263, 189,
	190, 681, 191, 183, 192, 322, 193, 715, 265, 194,
	0, 200, 195, 196, 184, 197, 199, 716, 198, 689,
	0, 201, 0, 202, 203, 204, 205, 206, 0, 268,
	717, 718, 0, 0, 207, 690, 691, 663, 208, 209,
	210, 211, 0, 0, 212, 213, 214, 682, 215, 0,
	216, 217, 218, 273, 719, 0, 0, 219, 0, 0,
	0, 0, 220, 221, 222, 223, 637, 668, 657, 658,
	655, 656, 647, 0, 0, 0, 633, 634, 631, 0,
	0, 0, 635, 90, 91, 643, 92, 0, 0, 0,
	646, 684, 650, 0, 0, 0, 93, 94, 95, 225,
	699, 227, 700, 96, 701, 702, 0, 97, 231, 232,
	98, 653, 683, 703, 704, 235, 0, 99, 695, 0,
	676, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 310, 107, 108, 0, 677, 679, 0, 678,
	680, 109, 110, 278, 111, 705, 112, 706, 707, 0,
	113, 0, 114, 0, 0, 0, 698, 116, 0, 117,
	0, 0, 0, 641, 118, 119, 685, 686, 664, 0,
	0, 120, 121, 708, 0, 122, 0, 123, 0, 0,
	311, 0, 124, 696, 0, 245, 0, 125, 126, 127,
	128, 692, 694, 313, 0, 132, 0, 129, 0, 312,
	130, 709, 131, 710, 711, 712, 0, 675, 0, 314,
	133, 315, 134, 135, 0, 137, 136, 0, 697, 316,
	138, 317, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 254, 144, 318, 146, 147, 149, 148, 636,
	0, 665, 693, 150, 713, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 257, 319, 156, 320, 687,
	157, 158, 159, 160, 0, 688, 161, 260, 162, 0,
	163, 164, 165, 714, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	321, 180, 181, 642, 182, 0, 185, 186, 187, 188,
	0, 263, 189, 190, 681, 191, 183, 192, 322, 193,
	715, 265, 194, 0, 200, 195, 196, 184, 197, 199,
	716, 198, 689, 0, 201, 0, 202, 203, 204, 205,
	206, 0, 268, 717, 718, 0, 0, 207, 690, 691,
	663, 208, 209, 210, 211, 0, 0, 212, 213, 214,
	682, 215, 0, 216, 217, 218, 273, 719, 0, 0,
	219, 0, 0, 0, 0, 220, 221, 222, 223, 637,
	0, 0, 0, 668, 657, 658, 655, 656, 647, 633,
	634, 0, 0, 0, 0, 635, 992, 1262, 643, 90,
	91, 0, 92, 646, 0, 0, 0, 684, 650, 0,
	0, 0, 93, 94, 95, 225, 699, 227, 700, 96,
	701, 702, 0, 97, 231, 232, 98, 653, 683, 703,
	704, 235, 0, 99, 695, 0, 676, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 310, 107,
	108, 0, 677, 679, 0, 678, 680, 109, 110, 278,
	111, 705, 112, 706, 707, 0, 113, 0, 114, 0,
	0, 0, 698, 116, 0, 117, 0, 0, 0, 641,
	118, 119, 685, 686, 664, 0, 0, 120, 121, 708,
	0, 122, 0, 123, 0, 0, 311, 0, 124, 696,
	0, 245, 0, 125, 126, 127, 128, 692, 694, 313,
	0, 132, 0, 129, 0, 312, 130, 709, 131, 710,
	711, 712, 0, 675, 0, 314, 133, 315, 134, 135,
	0, 137, 136, 0, 697, 316, 138, 317, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 254, 144,
	318, 146, 147, 149, 148, 636, 0, 665, 693, 150,
	713, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 257, 319, 156, 320, 687, 157, 158, 159, 160,
	0, 688, 161, 260, 162, 0, 163, 164, 165, 714,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 321, 180, 181, 642,
	182, 0, 185, 186, 187, 188, 0, 263, 189, 190,
	681, 191, 183, 192, 322, 193, 715, 265, 194, 0,
	200, 195, 196, 184, 197, 199, 716, 198, 689, 0,
	201, 0, 202, 203, 204, 205, 206, 0, 268, 717,
	718, 0, 0, 207, 690, 691, 663, 208, 209, 210,
	211, 0, 0, 212, 213, 214, 682, 215, 0, 216,
	217, 218, 273, 719, 0, 0, 219, 0, 0, 0,
	0, 220, 221, 222, 223, 637, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 633, 634, 0, 0, 0,
	0, 635, 0, 0, 643, 1729, 0, 0, 0, 646,
	668, 657, 658, 655, 656, 647, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 684, 650, 0, 0, 0, 93,
	94, 95, 225, 699, 227, 700, 96, 701, 702, 0,
	97, 231, 232, 98, 653, 683, 703, 704, 235, 0,
	99, 695, 0, 676, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 310, 107, 108, 0, 677,
	679, 0, 678, 680, 109, 110, 278, 111, 705, 112,
	706, 707, 0, 113, 0, 114, 0, 0, 0, 698,
	116, 0, 117, 0, 0, 0, 641, 118, 119, 685,
	686, 664, 0, 0, 120, 121, 708, 0, 122, 0,
	123, 0, 0, 311, 0, 124, 696, 0, 245, 0,
	125, 126, 127, 128, 692, 694, 313, 0, 132, 0,
	129, 0, 312, 130, 709, 131, 710, 711, 712, 0,
	675, 0, 314, 133, 315, 134, 135, 0, 137, 136,
	0, 697, 316, 138, 317, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 254, 144, 318, 146, 147,
	149, 148, 636, 0, 665, 693, 150, 713, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 257, 319,
	156, 320, 687, 157, 158, 159, 160, 0, 688, 161,
	260, 162, 0, 163, 164, 165, 714, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 321, 180, 181, 642, 182, 0, 185,
	186, 187, 188, 0, 263, 189, 190, 681, 191, 183,
	192, 322, 193, 715, 265, 194, 0, 200, 195, 196,
	184, 197, 199, 716, 198, 689, 0, 201, 0, 202,
	203, 204, 205, 206, 0, 268, 717, 718, 0, 0,
	207, 690, 691, 663, 208, 209, 210, 211, 0, 0,
	212, 213, 214, 682, 215, 0, 216, 217, 218, 273,
	719, 1687, 0, 219, 0, 0, 0, 0, 220, 221,
	222, 223, 637, 668, 657, 658, 655, 656, 647, 0,
	0, 0, 633, 634, 0, 0, 0, 0, 635, 90,
	91, 643, 92, 0, 0, 0, 646, 684, 650, 0,
	0, 0, 93, 94, 95, 225, 699, 227, 700, 96,
	701, 702, 0, 97, 231, 232, 98, 653, 683, 703,
	704, 235, 0, 99, 695, 0, 676, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 310, 107,
	108, 0, 677, 679, 0, 678, 680, 109, 110, 278,
	111, 705, 112, 706, 707, 0, 113, 0, 114, 0,
	0, 0, 698, 116, 0, 117, 0, 0, 0, 641,
	118, 119, 685, 686, 664, 0, 0, 120, 121, 708,
	0, 122, 0, 123, 0, 0, 311, 0, 124, 696,
	0, 245, 0, 125, 126, 127, 128, 692, 694, 313,
	0, 132, 0, 129, 0, 312, 130, 709, 131, 710,
	711, 712, 0, 675, 0, 314, 133, 315, 134, 135,
	0, 137, 136, 0, 697, 316, 138, 317, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 254, 144,
	318, 146, 147, 149, 148, 636, 0, 665, 693, 150,
	713, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 257, 319, 156, 320, 687, 157, 158, 159, 160,
	0, 688, 161, 260, 162, 0, 163, 164, 165, 714,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 321, 180, 181, 642,
	182, 0, 185, 186, 187, 188, 0, 263, 189, 190,
	681, 191, 183, 192, 322, 193, 715, 265, 194, 0,
	200, 195, 196, 184, 197, 199, 716, 198, 689, 0,
	201, 0, 202, 203, 204, 205, 206, 0, 268, 717,
	718, 0, 0, 207, 690, 691, 663, 208, 209, 210,
	211, 0, 0, 212, 213, 214, 682, 215, 0, 216,
	217, 218, 273, 719, 0, 0, 219, 0, 0, 0,
	0, 220, 221, 222, 223, 637, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 633, 634, 0, 0, 0,
	0, 635, 0, 0, 643, 1677, 0, 0, 0, 646,
	668, 657, 658, 655, 656, 647, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 684, 650, 0, 0, 0, 93,
	94, 95, 225, 699, 227, 700, 96, 701, 702, 0,
	97, 231, 232, 98, 653, 683, 703, 704, 235, 0,
	99, 695, 0, 676, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 310, 107, 108, 0, 677,
	679, 0, 678, 680, 109, 110, 278, 111, 705, 112,
	706, 707, 734, 113, 0, 114, 0, 0, 0, 698,
	116, 0, 117, 0, 0, 0, 641, 118, 119, 685,
	686, 664, 0, 0, 120, 121, 708, 0, 122, 0,
	123, 0, 0, 311, 0, 124, 696, 0, 245, 0,
	125, 126, 127, 128, 692, 694, 313, 0, 132, 0,
	129, 0, 312, 130, 709, 131, 710, 711, 712, 0,
	675, 0, 314, 133, 315, 134, 135, 0, 137, 136,
	0, 697, 316, 138, 317, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 254, 144, 318, 146, 147,
	149, 148, 636, 0, 665, 693, 150, 713, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 257, 319,
	156, 320, 687, 157, 158, 159, 160, 0, 688, 161,
	260, 162, 0, 163, 164, 165, 714, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 321, 180, 181, 642, 182, 0, 185,
	186, 187, 188, 0, 263, 189, 190, 681, 191, 183,
	192, 322, 193, 715, 265, 194, 0, 200, 195, 196,
	184, 197, 199, 716, 198, 689, 0, 201, 0, 202,
	203, 204, 205, 206, 0, 268, 717, 718, 0, 0,
	207, 690, 691, 663, 208, 209, 210, 211, 0, 0,
	212, 213, 214, 682, 215, 0, 216, 217, 218, 273,
	719, 0, 0, 219, 0, 0, 0, 0, 220, 221,
	222, 223, 637, 668, 657, 658, 655, 656, 647, 0,
	0, 0, 633, 634, 0, 0, 0, 0, 635, 90,
	91, 643, 92, 0, 0, 0, 646, 684, 650, 0,
	0, 0, 93, 94, 95, 225, 699, 227, 700, 96,
	701, 702, 0, 97, 231, 232, 98, 653, 683, 703,
	704, 235, 0, 99, 695, 0, 676, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 310, 107,
	108, 0, 677, 679, 0, 678, 680, 109, 110, 278,
	111, 705, 112, 706, 707, 0, 113, 0, 114, 0,
	0, 0, 698, 116, 0, 117, 0, 0, 0, 641,
	118, 119, 685, 686, 664, 0, 0, 120, 121, 708,
	0, 122, 0, 123, 0, 1314, 311, 0, 124, 696,
	0, 245, 0, 125, 126, 127, 128, 692, 694, 313,
	0, 132, 0, 129, 0, 312, 130, 709, 131, 710,
	711, 712, 0, 675, 0, 314, 133, 315, 134, 135,
	0, 137, 136, 0, 697, 316, 138, 317, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 254, 144,
	318, 146, 147, 149, 148, 636, 0, 665, 693, 150,
	713, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 257, 319, 156, 320, 687, 157, 158, 159, 160,
	0, 688, 161, 260, 162, 0, 163, 164, 165, 714,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 321, 180, 181, 642,
	182, 0, 185, 186, 187, 188, 0, 263, 189, 190,
	681, 191, 183, 192, 322, 193, 715, 265, 194, 0,
	200, 195, 196, 184, 197, 199, 716, 198, 689, 0,
	201, 0, 202, 203, 204, 205, 206, 0, 268, 717,
	718, 0, 0, 207, 690, 691, 663, 208, 209, 210,
	211, 0, 0, 212, 213, 214, 682, 215, 0, 216,
	217, 218, 273, 719, 0, 0, 219, 0, 0, 0,
	0, 220, 221, 222, 223, 637, 668, 657, 658, 655,
	656, 647, 0, 0, 0, 633, 634, 0, 0, 0,
	0, 635, 90, 91, 643, 92, 0, 0, 0, 646,
	684, 650, 0, 0, 0, 93, 94, 95, 225, 699,
	227, 700, 96, 701, 702, 0, 97, 231, 232, 98,
	653, 683, 703, 704, 235, 0, 99, 695, 0, 676,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 310, 107, 108, 0, 677, 679, 0, 678, 680,
	109, 110, 278, 111, 705, 112, 706, 707, 0, 113,
	0, 114, 0, 0, 0, 698, 116, 0, 117, 0,
	0, 0, 641, 118, 119, 685, 686, 664, 0, 0,
	120, 121, 708, 0, 122, 0, 123, 0, 0, 311,
	0, 124, 696, 0, 245, 0, 125, 126, 127, 128,
	692, 694, 313, 0, 132, 0, 129, 0, 312, 130,
	709, 131, 710, 711, 712, 0, 675, 0, 314, 133,
	315, 134, 135, 0, 137, 136, 0, 697, 316, 138,
	317, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 254, 144, 318, 146, 147, 149, 148, 636, 0,
	665, 693, 150, 713, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 257, 319, 156, 320, 687, 157,
	158, 159, 160, 0, 688, 161, 260, 162, 0, 163,
	164, 165, 714, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 321,
	180, 181, 642, 182, 0, 185, 186, 187, 188, 0,
	263, 189, 190, 681, 191, 183, 192, 322, 193, 715,
	265, 194, 0, 200, 195, 196, 184, 197, 199, 716,
	198, 689, 0, 201, 0, 202, 203, 204, 205, 206,
	0, 268, 717, 718, 0, 0, 207, 690, 691, 663,
	208, 209, 210, 211, 0, 0, 212, 213, 214, 682,
	215, 0, 216, 217, 218, 273, 719, 0, 0, 219,
	0, 0, 0, 0, 220, 221, 222, 223, 637, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 633, 634,
	0, 0, 0, 0, 635, 0, 0, 643, 1257, 0,
	0, 0, 646, 668, 657, 658, 655, 656, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	91, 0, 92, 0, 0, 0, 0, 684, 650, 0,
	0, 0, 93, 94, 95, 225, 699, 227, 700, 96,
	701, 702, 0, 97, 231, 232, 98, 653, 683, 703,
	704, 235, 0, 99, 695, 0, 676, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 310, 107,
	108, 0, 677, 679, 0, 678, 680, 109, 110, 278,
	111, 705, 112, 706, 707, 0, 113, 0, 114, 0,
	0, 0, 698, 116, 0, 117, 0, 0, 0, 641,
	118, 119, 685, 686, 664, 0, 0, 120, 121, 708,
	0, 122, 0, 123, 0, 0, 311, 0, 124, 696,
	0, 245, 0, 125, 126, 127, 128, 692, 694, 313,
	0, 132, 0, 129, 0, 312, 130, 709, 131, 710,
	711, 712, 0, 675, 0, 314, 133, 315, 134, 135,
	0, 137, 136, 0, 697, 316, 138, 317, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 254, 144,
	318, 146, 147, 149, 148, 636, 0, 665, 693, 150,
	713, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 257, 319, 156, 320, 687, 157, 158, 159, 160,
	0, 688, 161, 260, 162, 0, 163, 164, 165, 714,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 321, 180, 181, 642,
	182, 0, 185, 186, 187, 188, 0, 263, 189, 190,
	681, 191, 183, 192, 322, 193, 715, 265, 194, 0,
	200, 195, 196, 184, 197, 199, 716, 198, 689, 0,
	201, 0, 202, 203, 204, 205, 206, 0, 268, 717,
	718, 0, 0, 207, 690, 691, 663, 208, 209, 210,
	211, 0, 0, 212, 213, 214, 682, 215, 0, 216,
	217, 218, 273, 719, 0, 0, 219, 0, 0, 0,
	0, 220, 221, 222, 223, 637, 0, 0, 0, 668,
	657, 658, 655, 656, 647, 633, 634, 631, 0, 0,
	0, 635, 0, 0, 643, 90, 91, 921, 92, 646,
	0, 0, 0, 684, 650, 0, 0, 0, 93, 94,
	95, 225, 699, 227, 700, 96, 701, 702, 0, 97,
	231, 232, 98, 653, 683, 703, 704, 235, 0, 99,
	695, 0, 676, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 310, 107, 108, 0, 677, 679,
	0, 678, 680, 109, 110, 278, 111, 705, 112, 706,
	707, 0, 113, 0, 114, 0, 0, 0, 698, 116,
	0, 117, 0, 0, 0, 641, 118, 119, 685, 686,
	664, 0, 0, 120, 121, 708, 0, 122, 0, 123,
	0, 0, 311, 0, 124, 696, 0, 245, 0, 125,
	126, 127, 128, 692, 694, 313, 0, 132, 0, 129,
	0, 312, 130, 709, 131, 710, 711, 712, 0, 675,
	0, 314, 133, 315, 134, 135, 0, 137, 136, 0,
	697, 316, 138, 317, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 254, 144, 318, 146, 147, 149,
	148, 636, 0, 665, 693, 150, 713, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 257, 319, 156,
	320, 687, 157, 158, 159, 160, 0, 688, 161, 260,
	162, 0, 163, 164, 165, 714, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 321, 180, 181, 642, 182, 0, 185, 186,
	187, 188, 0, 263, 189, 190, 681, 191, 183, 192,
	322, 193, 715, 265, 194, 0, 200, 195, 196, 184,
	197, 199, 716, 198, 689, 0, 201, 0, 202, 203,
	204, 205, 206, 0, 268, 717, 718, 0, 0, 207,
	690, 691, 663, 208, 209, 210, 211, 0, 0, 212,
	213, 214, 682, 215, 0, 216, 217, 218, 273, 719,
	0, 0, 219, 0, 0, 0, 0, 220, 221, 222,
	223, 637, 668, 657, 658, 655, 656, 647, 0, 0,
	0, 633, 634, 0, 0, 0, 0, 635, 90, 91,
	643, 92, 0, 0, 0, 646, 684, 650, 0, 0,
	0, 93, 94, 95, 225, 699, 227, 700, 96, 701,
	702, 0, 97, 231, 232, 98, 653, 683, 703, 704,
	235, 0, 99, 695, 0, 676, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 310, 107, 2082,
	0, 677, 679, 0, 678, 680, 109, 110, 278, 111,
	705, 112, 706, 707, 0, 113, 0, 114, 0, 0,
	0, 698, 116, 0, 117, 0, 0, 0, 641, 118,
	119, 685, 686, 664, 0, 0, 120, 121, 708, 0,
	122, 0, 123, 0, 0, 311, 0, 124, 696, 0,
	245, 0, 125, 126, 127, 128, 692, 694, 313, 0,
	132, 0, 129, 0, 312, 130, 709, 131, 710, 711,
	712, 0, 675, 0, 314, 133, 315, 134, 135, 0,
	137, 136, 0, 697, 316, 138, 317, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 254, 144, 318,
	146, 147, 149, 148, 636, 0, 665, 693, 150, 713,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	257, 319, 156, 320, 687, 157, 158, 159, 160, 0,
	688, 161, 260, 162, 0, 163, 164, 165, 714, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 321, 180, 181, 642, 182,
	0, 185, 186, 187, 188, 0, 263, 189, 190, 681,
	191, 183, 192, 322, 193, 715, 265, 194, 0, 200,
	195, 196, 184, 197, 199, 716, 198, 689, 0, 201,
	0, 202, 203, 204, 205, 206, 0, 268, 717, 718,
	0, 0, 207, 690, 691, 663, 208, 209, 2081, 211,
	0, 0, 212, 213, 214, 682, 215, 0, 216, 217,
	218, 273, 719, 0, 0, 219, 0, 0, 0, 0,
	220, 221, 222, 223, 637, 668, 657, 658, 655, 656,
	647, 0, 0, 0, 633, 634, 0, 0, 0, 0,
	635, 90, 91, 643, 92, 0, 0, 0, 646, 684,
	650, 0, 0, 0, 93, 94, 95, 2080, 699, 227,
	700, 96, 701, 702, 0, 97, 231, 232, 98, 653,
	683, 703, 704, 235, 0, 99, 695, 0, 676, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	310, 107, 2082, 0, 677, 679, 0, 678, 680, 109,
	110, 278, 111, 705, 112, 706, 707, 0, 113, 0,
	114, 0, 0, 0, 698, 116, 0, 117, 0, 0,
	0, 641, 118, 119, 685, 686, 664, 0, 0, 120,
	121, 708, 0, 122, 0, 123, 0, 0, 311, 0,
	124, 696, 0, 245, 0, 125, 126, 127, 128, 692,
	694, 313, 0, 132, 0, 129, 0, 312, 130, 709,
	131, 710, 711, 712, 0, 675, 0, 314, 133, 315,
	134, 135, 0, 137, 136, 0, 697, 316, 138, 317,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	254, 144, 318, 146, 147, 149, 148, 636, 0, 665,
	693, 150, 713, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 257, 319, 156, 320, 687, 157, 158,
	159, 160, 0, 688, 161, 260, 162, 0, 163, 164,
	165, 714, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 321, 180,
	181, 642, 182, 0, 185, 186, 187, 188, 0, 263,
	189, 190, 681, 191, 183, 192, 322, 193, 715, 265,
	194, 0, 200, 195, 196, 184, 197, 199, 716, 198,
	689, 0, 201, 0, 202, 203, 204, 205, 206, 0,
	268, 717, 718, 0, 0, 207, 690, 691, 663, 208,
	209, 2081, 211, 0, 0, 212, 213, 214, 682, 215,
	0, 216, 217, 218, 273, 719, 0, 0, 219, 0,
	0, 0, 0, 220, 221, 222, 223, 637, 668, 657,
	658, 655, 656, 647, 0, 0, 0, 633, 634, 0,
	0, 0, 0, 635, 90, 91, 643, 92, 0, 0,
	0, 646, 684, 650, 0, 0, 0, 93, 94, 95,
	225, 699, 227, 700, 96, 701, 702, 0, 97, 231,
	232, 98, 653, 683, 703, 704, 235, 0, 99, 695,
	0, 676, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 310, 107, 108, 0, 677, 679, 0,
	678, 680, 109, 110, 278, 111, 705, 112, 706, 707,
	0, 113, 0, 114, 0, 0, 0, 698, 116, 0,
	117, 0, 0, 0, 641, 118, 119, 685, 686, 664,
	0, 0, 120, 121, 708, 0, 122, 0, 123, 0,
	0, 311, 0, 124, 696, 0, 245, 0, 125, 126,
	127, 128, 692, 694, 313, 0, 132, 0, 129, 0,
	312, 130, 709, 131, 710, 711, 712, 0, 675, 0,
	314, 133, 315, 134, 135, 0, 137, 136, 0, 697,
	316, 138, 317, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 254, 144, 318, 146, 147, 149, 148,
	636, 0, 665, 693, 150, 713, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 257, 319, 156, 320,
	687, 157, 158, 159, 160, 0, 688, 161, 260, 162,
	0, 163, 164, 165, 714, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 321, 180, 181, 642, 182, 0, 185, 186, 187,
	188, 0, 263, 189, 190, 681, 191, 183, 192, 322,
	193, 715, 265, 194, 0, 200, 195, 196, 184, 197,
	199, 716, 198, 689, 0, 201, 0, 202, 203, 204,
	205, 206, 0, 268, 717, 718, 0, 0, 207, 690,
	691, 663, 208, 209, 210, 211, 0, 0, 212, 213,
	214, 682, 215, 0, 216, 217, 218, 273, 719, 0,
	0, 219, 0, 0, 0, 0, 220, 221, 222, 223,
	637, 1286, 657, 658, 655, 656, 647, 0, 0, 0,
	633, 634, 0, 0, 0, 0, 635, 90, 91, 643,
	92, 0, 0, 0, 646, 684, 650, 0, 0, 0,
	93, 94, 95, 225, 699, 227, 700, 96, 701, 702,
	0, 97, 231, 232, 98, 653, 683, 703, 704, 235,
	0, 99, 695, 0, 676, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 310, 107, 108, 0,
	677, 679, 0, 678, 680, 109, 110, 278, 111, 705,
	1289, 706, 707, 0, 113, 0, 114, 0, 0, 0,
	698, 116, 0, 117, 0, 0, 0, 641, 118, 119,
	685, 686, 664, 0, 0, 120, 121, 708, 0, 122,
	0, 123, 0, 0, 311, 0, 124, 696, 0, 245,
	0, 125, 126, 1290, 128, 692, 694, 313, 0, 132,
	0, 129, 0, 312, 130, 709, 131, 710, 711, 712,
	0, 675, 0, 314, 133, 315, 134, 135, 0, 137,
	136, 0, 697, 316, 138, 317, 0, 139, 0, 0,
	140, 0, 141, 1291, 1288, 145, 254, 144, 318, 146,
	147, 149, 148, 636, 0, 665, 693, 150, 713, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 257,
	319, 156, 320, 687, 157, 158, 159, 160, 0, 688,
	161, 260, 162, 0, 163, 164, 165, 714, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 321, 180, 181, 642, 182, 0,
	185, 186, 187, 1292, 0, 263, 189, 190, 681, 191,
	183, 192, 322, 193, 715, 265, 194, 0, 200, 195,
	196, 184, 197, 199, 716, 198, 689, 0, 201, 0,
	202, 203, 204, 205, 206, 0, 268, 717, 718, 0,
	0, 207, 690, 691, 663, 208, 209, 210, 211, 0,
	0, 212, 213, 214, 682, 215, 0, 216, 217, 218,
	273, 719, 0, 0, 219, 0, 0, 0, 0, 220,
	221, 1287, 223, 637, 668, 657, 658, 655, 656, 647,
	0, 0, 0, 633, 634, 0, 0, 0, 0, 635,
	90, 91, 643, 92, 0, 0, 0, 646, 684, 650,
	0, 0, 0, 93, 94, 95, 225, 699, 227, 700,
	96, 701, 702, 0, 97, 231, 232, 98, 653, 683,
	703, 704, 235, 0, 99, 695, 0, 676, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 310,
	107, 108, 0, 677, 679, 0, 678, 680, 109, 110,
	278, 111, 705, 112, 706, 707, 0, 113, 0, 114,
	0, 0, 0, 698, 116, 0, 117, 0, 0, 0,
	641, 118, 119, 685, 686, 664, 0, 0, 120, 121,
	708, 0, 122, 0, 123, 0, 0, 311, 0, 124,
	696, 0, 245, 0, 125, 126, 127, 128, 692, 694,
	313, 0, 132, 0, 129, 0, 312, 130, 709, 131,
	710, 711, 712, 0, 675, 0, 314, 133, 315, 134,
	135, 0, 137, 136, 0, 697, 316, 138, 317, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 254,
	144, 318, 146, 147, 149, 148, 0, 0, 665, 693,
	150, 713, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 257, 319, 156, 320, 687, 157, 158, 159,
	160, 0, 688, 161, 260, 162, 0, 163, 164, 165,
	714, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 321, 180, 181,
	1304, 182, 0, 185, 186, 187, 188, 0, 263, 189,
	190, 681, 191, 183, 192, 322, 193, 715, 265, 194,
	0, 200, 195, 196, 184, 197, 199, 716, 198, 689,
	0, 201, 0, 202, 203, 204, 205, 206, 0, 268,
	717, 718, 0, 0, 207, 690, 691, 663, 208, 209,
	210, 211, 0, 0, 212, 213, 214, 682, 215, 0,
	216, 217, 218, 273, 719, 0, 0, 219, 0, 0,
	0, 0, 220, 221, 222, 223, 0, 668, 657, 658,
	655, 656, 647, 0, 0, 0, 1300, 1301, 0, 0,
	0, 0, 1302, 90, 91, 1303, 92, 0, 0, 0,
	646, 684, 650, 0, 0, 0, 93, 94, 95, 0,
	699, 227, 700, 96, 701, 702, 0, 97, 231, 232,
	98, 653, 683, 703, 704, 235, 0, 99, 695, 0,
	676, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 310, 107, 2082, 0, 677, 679, 0, 678,
	680, 109, 110, 278, 111, 705, 112, 706, 707, 0,
	113, 0, 114, 0, 0, 0, 698, 116, 0, 117,
	0, 0, 0, 641, 118, 119, 685, 686, 664, 0,
	0, 120, 121, 708, 0, 122, 0, 123, 0, 0,
	311, 0, 124, 696, 0, 245, 0, 125, 126, 127,
	128, 692, 694, 0, 0, 132, 0, 129, 0, 312,
	130, 709, 131, 710, 711, 712, 0, 675, 0, 0,
	133, 315, 134, 135, 0, 137, 136, 0, 697, 316,
	138, 0, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 254, 144, 318, 146, 147, 149, 148, 636,
	0, 665, 693, 150, 713, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 257, 319, 156, 320, 687,
	157, 158, 159, 160, 0, 688, 161, 260, 162, 0,
	163, 164, 165, 714, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	321, 180, 181, 642, 182, 0, 185, 186, 187, 188,
	0, 263, 189, 190, 681, 191, 183, 192, 0, 193,
	715, 265, 194, 0, 200, 195, 196, 184, 197, 199,
	716, 198, 689, 0, 201, 0, 202, 203, 204, 205,
	206, 0, 268, 717, 718, 0, 0, 207, 690, 691,
	663, 208, 209, 2081, 211, 0, 0, 212, 213, 214,
	682, 215, 0, 216, 217, 218, 273, 719, 0, 0,
	219, 0, 0, 0, 0, 220, 221, 222, 223, 0,
	668, 657, 658, 655, 656, 647, 0, 0, 0, 633,
	634, 0, 0, 0, 0, 635, 90, 91, 643, 92,
	0, 0, 0, 646, 684, 650, 0, 0, 0, 93,
	94, 95, 225, 699, 227, 700, 96, 701, 702, 0,
	97, 231, 232, 98, 0, 683, 703, 704, 235, 0,
	99, 695, 0, 676, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 310, 107, 108, 0, 677,
	679, 0, 678, 680, 109, 110, 278, 111, 705, 112,
	706, 707, 0, 113, 0, 114, 0, 0, 0, 698,
	116, 0, 117, 0, 0, 0, 240, 118, 119, 685,
	686, 664, 0, 0, 120, 121, 708, 0, 122, 0,
	123, 0, 0, 311, 0, 124, 696, 0, 245, 0,
	125, 126, 127, 128, 692, 694, 313, 0, 132, 0,
	129, 0, 312, 130, 709, 131, 710, 711, 712, 0,
	675, 0, 314, 133, 315, 134, 135, 0, 137, 136,
	0, 697, 316, 138, 317, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 254, 144, 318, 146, 147,
	149, 148, 0, 0, 665, 693, 150, 713, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 257, 319,
	156, 320, 687, 157, 158, 159, 160, 0, 688, 161,
	260, 162, 0, 163, 164, 165, 714, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 321, 180, 181, 1304, 182, 0, 185,
	186, 187, 188, 0, 263, 189, 190, 681, 191, 183,
	192, 322, 193, 715, 265, 194, 0, 200, 195, 196,
	184, 197, 199, 716, 198, 689, 0, 201, 0, 202,
	203, 204, 205, 206, 0, 268, 717, 718, 0, 0,
	207, 690, 691, 663, 208, 209, 210, 211, 0, 0,
	212, 213, 214, 682, 215, 0, 216, 217, 218, 273,
	719, 0, 0, 219, 0, 0, 0, 0, 220, 221,
	222, 223, 0, 668, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	91, 1303, 92, 0, 0, 0, 646, 684, 0, 0,
	0, 0, 93, 94, 95, 225, 226, 227, 228, 96,
	229, 230, 0, 97, 231, 232, 98, 0, 683, 233,
	234, 235, 0, 99, 695, 0, 676, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 310, 107,
	108, 0, 677, 679, 0, 678, 680, 109, 110, 278,
	111, 237, 112, 238, 239, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 240,
	118, 119, 685, 686, 0, 0, 0, 120, 121, 243,
	0, 122, 0, 123, 0, 0, 311, 0, 124, 696,
	0, 245, 0, 125, 126, 127, 128, 692, 694, 313,
	0, 132, 0, 129, 0, 312, 130, 248, 131, 249,
	250, 251, 0, 252, 0, 314, 133, 315, 134, 135,
	0, 137, 136, 0, 697, 316, 138, 317, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 254, 144,
	318, 146, 147, 149, 148, 0, 0, 0, 693, 150,
	256, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 257, 319, 156, 320, 687, 157, 158, 159, 160,
	0, 688, 161, 260, 162, 0, 163, 164, 165, 261,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 321, 180, 181, 262,
	182, 0, 185, 186, 187, 188, 0, 263, 189, 190,
	681, 191, 183, 192, 322, 193, 264, 265, 194, 0,
	200, 195, 196, 184, 197, 199, 266, 198, 689, 0,
	201, 0, 202, 203, 204, 205, 206, 0, 268, 269,
	270, 0, 0, 207, 690, 691, 0, 208, 209, 210,
	211, 0, 0, 212, 213, 214, 682, 215, 0, 216,
	217, 218, 273, 274, 0, 0, 219, 542, 0, 0,
	0, 220, 221, 222, 223, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 224, 0, 0, 1572, 0, 93, 94, 95, 225,
	226, 227, 228, 96, 229, 230, 0, 97, 231, 232,
	98, 0, 0, 233, 234, 235, 0, 99, 236, 0,
	309, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 310, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 278, 111, 237, 112, 238, 239, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 240, 118, 119, 241, 242, 0, 0,
	0, 120, 121, 243, 0, 122, 0, 123, 0, 0,
	311, 0, 124, 244, 0, 245, 0, 125, 126, 127,
	128, 246, 247, 313, 0, 132, 0, 129, 0, 312,
	130, 248, 131, 249, 250, 251, 0, 252, 0, 314,
	133, 315, 134, 135, 0, 137, 136, 0, 253, 316,
	138, 317, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 254, 144, 318, 146, 147, 149, 148, 0,
	0, 0, 255, 150, 256, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 257, 319, 156, 320, 258,
	157, 158, 159, 160, 0, 259, 161, 260, 162, 0,
	163, 164, 165, 261, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	321, 180, 181, 262, 182, 0, 185, 186, 187, 188,
	71, 263, 189, 190, 0, 191, 183, 192, 322, 193,
	264, 265, 194, 0, 200, 195, 196, 184, 197, 199,
	266, 198, 267, 0, 201, 73, 202, 203, 204, 205,
	206, 0, 268, 269, 270, 0, 0, 207, 271, 272,
	0, 208, 209, 210, 211, 0, 0, 212, 213, 214,
	0, 215, 0, 216, 217, 218, 546, 274, 0, 0,
	219, 0, 0, 0, 69, 220, 221, 222, 223, 0,
	70, 0, 0, 542, 759, 0, 869, 866, 861, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 90,
	91, 0, 92, 0, 0, 0, 0, 224, 0, 0,
	0, 0, 93, 94, 95, 225, 226, 227, 228, 96,
	229, 230, 0, 97, 231, 232, 98, 0, 0, 233,
	234, 235, 0, 99, 236, 0, 309, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 310, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 278,
	111, 237, 112, 238, 239, 872, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 240,
	118, 119, 241, 242, 863, 0, 0, 120, 121, 243,
	0, 122, 0, 123, 0, 0, 311, 0, 124, 244,
	0, 245, 0, 125, 126, 127, 128, 246, 247, 313,
	0, 132, 0, 129, 0, 312, 130, 248, 131, 249,
	250, 251, 0, 252, 0, 314, 133, 315, 134, 135,
	0, 137, 136, 0, 253, 316, 138, 317, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 254, 144,
	318, 146, 147, 149, 148, 0, 0, 0, 255, 150,
	256, 151, 152, 0, 153, 864, 0, 154, 0, 0,
	155, 257, 319, 156, 320, 258, 157, 158, 159, 160,
	0, 259, 161, 260, 162, 0, 163, 164, 165, 261,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 321, 180, 181, 262,
	182, 0, 185, 186, 187, 188, 0, 263, 189, 190,
	0, 191, 183, 192, 322, 193, 264, 265, 194, 0,
	200, 195, 196, 184, 197, 199, 266, 198, 267, 0,
	201, 0, 202, 203, 204, 205, 206, 0, 268, 269,
	270, 0, 0, 207, 271, 272, 862, 208, 209, 210,
	211, 0, 0, 212, 213, 214, 0, 215, 0, 216,
	217, 218, 273, 274, 542, 759, 219, 869, 866, 861,
	0, 220, 221, 222, 223, 0, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 870, 867, 0, 224, 0,
	0, 0, 0, 93, 94, 95, 225, 226, 227, 228,
	96, 229, 230, 0, 97, 231, 232, 98, 0, 0,
	233, 234, 235, 0, 99, 236, 0, 309, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 310,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	278, 111, 237, 112, 238, 239, 857, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	240, 118, 119, 241, 242, 863, 0, 0, 120, 121,
	243, 0, 122, 0, 123, 0, 0, 311, 0, 124,
	244, 0, 245, 0, 125, 126, 127, 128, 246, 247,
	313, 0, 132, 0, 129, 0, 312, 130, 248, 131,
	249, 250, 251, 0, 252, 0, 314, 133, 315, 134,
	135, 0, 137, 136, 0, 253, 316, 138, 317, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 254,
	144, 318, 146, 147, 149, 148, 0, 0, 0, 255,
	150, 256, 151, 152, 0, 153, 864, 0, 154, 0,
	0, 155, 257, 319, 156, 320, 258, 157, 158, 159,
	160, 0, 259, 161, 260, 162, 0, 163, 164, 165,
	261, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 321, 180, 181,
	262, 182, 0, 185, 186, 187, 188, 0, 263, 189,
	190, 0, 191, 183, 192, 322, 193, 264, 265, 194,
	0, 200, 195, 196, 184, 197, 199, 266, 198, 267,
	0, 201, 0, 202, 203, 204, 205, 206, 0, 268,
	269, 270, 0, 0, 207, 271, 272, 862, 208, 209,
	210, 211, 0, 0, 212, 213, 214, 0, 215, 0,
	216, 217, 218, 273, 274, 542, 759, 219, 869, 866,
	861, 0, 220, 221, 222, 223, 0, 0, 0, 0,
	0, 90, 91, 0, 92, 0, 870, 867, 0, 224,
	0, 0, 0, 0, 93, 94, 95, 225, 226, 227,
	228, 96, 229, 230, 0, 97, 231, 232, 98, 0,
	0, 233, 234, 235, 0, 99, 236, 0, 309, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	310, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 278, 111, 237, 112, 238, 239, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 240, 118, 119, 241, 242, 863, 0, 0, 120,
	121, 243, 0, 122, 0, 123, 0, 0, 311, 0,
	124, 244, 0, 245, 0, 125, 126, 127, 128, 246,
	247, 313, 0, 132, 0, 129, 0, 312, 130, 248,
	131, 249, 250, 251, 0, 252, 0, 314, 133, 315,
	134, 135, 0, 137, 136, 0, 253, 316, 138, 317,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	254, 144, 318, 146, 147, 149, 148, 0, 0, 0,
	255, 150, 256, 151, 152, 0, 153, 864, 0, 154,
	0, 0, 155, 257, 319, 156, 320, 258, 157, 158,
	159, 160, 0, 259, 161, 260, 162, 0, 163, 164,
	165, 261, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 321, 180,
	181, 262, 182, 0, 185, 186, 187, 188, 0, 263,
	189, 190, 0, 191, 183, 192, 322, 193, 264, 265,
	194, 0, 200, 195, 196, 184, 197, 199, 266, 198,
	267, 0, 201, 0, 202, 203, 204, 205, 206, 0,
	268, 269, 270, 0, 0, 207, 271, 272, 862, 208,
	209, 210, 211, 0, 0, 212, 213, 214, 0, 215,
	0, 216, 217, 218, 273, 274, 87, 0, 219, 0,
	0, 0, 0, 220, 221, 222, 223, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 870, 867, 0,
	224, 0, 0, 0, 0, 93, 94, 95, 225, 226,
	227, 228, 96, 229, 230, 0, 97, 231, 232, 98,
	0, 0, 233, 234, 235, 0, 99, 236, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 278, 111, 237, 112, 238, 239, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 240, 118, 119, 241, 242, 0, 0, 0,
	120, 121, 243, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 244, 0, 245, 0, 125, 126, 127, 128,
	246, 247, 0, 0, 132, 0, 129, 0, 0, 130,
	248, 131, 249, 250, 251, 0, 252, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 253, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 254, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 255, 150, 256, 151, 152, 0, 153, 0, 496,
	154, 0, 0, 155, 257, 0, 156, 0, 258, 157,
	158, 159, 160, 0, 259, 161, 260, 162, 0, 163,
	164, 165, 261, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 262, 182, 0, 185, 186, 187, 188, 71,
	263, 189, 190, 0, 191, 183, 192, 0, 193, 264,
	265, 194, 0, 200, 195, 196, 184, 197, 199, 266,
	198, 267, 0, 201, 73, 202, 203, 204, 205, 206,
	0, 268, 269, 270, 0, 0, 207, 271, 272, 0,
	208, 209, 210, 211, 0, 0, 212, 213, 214, 0,
	215, 0, 216, 217, 218, 546, 274, 0, 0, 219,
	87, 0, 0, 69, 220, 221, 222, 223, 0, 70,
	0, 0, 0, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 224, 1182, 0, 1187, 0, 93,
	94, 95, 225, 226, 227, 228, 96, 229, 230, 0,
	97, 231, 232, 98, 0, 0, 233, 234, 235, 0,
	99, 236, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 278, 111, 237, 112,
	238, 239, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 240, 118, 119, 241,
	242, 0, 0, 0, 120, 121, 243, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 244, 0, 245, 0,
	125, 126, 127, 128, 246, 247, 0, 0, 132, 0,
	129, 0, 0, 130, 248, 131, 249, 250, 251, 0,
	252, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 253, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 254, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 255, 150, 256, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 257, 0,
	156, 0, 258, 157, 158, 159, 160, 0, 259, 161,
	260, 162, 0, 163, 164, 165, 261, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 262, 182, 0, 185,
	186, 187, 188, 71, 263, 189, 190, 0, 191, 183,
	192, 0, 193, 264, 265, 194, 0, 200, 195, 196,
	184, 197, 199, 266, 198, 267, 0, 201, 73, 202,
	203, 204, 205, 206, 0, 268, 269, 270, 0, 0,
	207, 271, 272, 0, 208, 209, 210, 211, 0, 0,
	212, 213, 214, 0, 215, 0, 216, 217, 218, 546,
	274, 0, 0, 219, 87, 0, 0, 69, 220, 221,
	222, 223, 0, 70, 0, 0, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 224, 0,
	0, 68, 0, 93, 94, 95, 225, 226, 227, 228,
	96, 229, 230, 0, 97, 231, 232, 98, 0, 0,
	233, 234, 235, 0, 99, 236, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	278, 111, 237, 112, 238, 239, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	240, 118, 119, 241, 242, 0, 0, 0, 120, 121,
	243, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	244, 0, 245, 0, 125, 126, 127, 128, 246, 247,
	0, 0, 132, 0, 129, 0, 0, 130, 248, 131,
	249, 250, 251, 0, 252, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 253, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 254,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 255,
	150, 256, 151, 152, 0, 153, 0, 496, 154, 0,
	0, 155, 257, 0, 156, 0, 258, 157, 158, 159,
	160, 0, 259, 161, 260, 162, 0, 163, 164, 165,
	261, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	262, 182, 0, 185, 186, 187, 188, 0, 263, 189,
	190, 0, 191, 183, 192, 0, 193, 264, 265, 194,
	0, 200, 195, 196, 184, 197, 199, 266, 198, 267,
	0, 201, 0, 202, 203, 204, 205, 206, 0, 268,
	269, 270, 0, 0, 207, 271, 272, 0, 208, 209,
	210, 211, 0, 0, 212, 213, 214, 0, 215, 0,
	216, 217, 218, 273, 274, 0, 0, 219, 87, 0,
	0, 0, 220, 221, 222, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 224, 1182, 0, 1187, 0, 93, 94, 95,
	225, 226, 227, 228, 96, 229, 230, 0, 97, 231,
	232, 98, 0, 0, 233, 234, 235, 0, 99, 236,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 278, 111, 237, 112, 238, 239,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 240, 118, 119, 241, 242, 0,
	0, 0, 120, 121, 243, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 244, 0, 245, 0, 125, 126,
	127, 128, 246, 247, 0, 0, 132, 0, 129, 0,
	0, 130, 248, 131, 249, 250, 251, 0, 252, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 253,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 254, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 255, 150, 256, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 257, 0, 156, 0,
	258, 157, 158, 159, 160, 0, 259, 161, 260, 162,
	0, 163, 164, 165, 261, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 262, 182, 0, 185, 186, 187,
	188, 0, 263, 189, 190, 0, 191, 183, 192, 0,
	193, 264, 265, 194, 0, 200, 195, 196, 184, 197,
	199, 266, 198, 267, 0, 201, 0, 202, 203, 204,
	205, 206, 0, 268, 269, 270, 0, 0, 207, 271,
	272, 0, 208, 209, 210, 211, 87, 0, 212, 213,
	214, 0, 215, 0, 216, 217, 218, 273, 274, 0,
	0, 219, 90, 91, 0, 92, 220, 221, 222, 223,
	224, 0, 0, 0, 0, 93, 94, 95, 225, 226,
	227, 228, 96, 229, 230, 0, 97, 231, 232, 98,
	767, 0, 233, 234, 235, 0, 99, 236, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 278, 111, 237, 112, 238, 239, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 240, 118, 119, 241, 242, 0, 0, 0,
	120, 121, 243, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 244, 0, 245, 0, 125, 126, 127, 128,
	246, 247, 0, 0, 132, 0, 129, 0, 0, 130,
	248, 131, 249, 250, 251, 0, 252, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 253, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 254, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 255, 150, 256, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 257, 0, 156, 0, 258, 157,
	158, 159, 160, 0, 259, 161, 260, 162, 0, 163,
	164, 165, 261, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 262, 182, 0, 185, 186, 187, 188, 0,
	263, 189, 190, 0, 191, 183, 192, 0, 193, 264,
	265, 194, 0, 200, 195, 196, 184, 197, 199, 266,
	198, 267, 0, 201, 0, 202, 203, 204, 205, 206,
	0, 268, 269, 270, 0, 0, 207, 271, 272, 0,
	208, 209, 210, 211, 0, 0, 212, 213, 214, 0,
	215, 0, 216, 217, 218, 273, 274, 0, 0, 219,
	0, 0, 0, 0, 220, 221, 222, 223, 0, 668,
	657, 658, 655, 656, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 91, 1093, 92, 0,
	0, 0, 0, 224, 0, 0, 0, 0, 93, 94,
	95, 225, 699, 227, 700, 96, 701, 702, 0, 97,
	231, 232, 98, 0, 0, 703, 704, 235, 0, 99,
	236, 0, 309, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 310, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 278, 111, 705, 112, 706,
	707, 0, 113, 0, 114, 0, 0, 0, 698, 116,
	0, 117, 0, 0, 0, 240, 118, 119, 241, 242,
	664, 0, 0, 120, 121, 708, 0, 122, 0, 123,
	0, 0, 311, 0, 124, 244, 0, 245, 0, 125,
	126, 127, 128, 246, 247, 313, 0, 132, 0, 129,
	0, 312, 130, 709, 131, 710, 711, 712, 0, 675,
	0, 314, 133, 315, 134, 135, 0, 137, 136, 0,
	253, 316, 138, 317, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 254, 144, 318, 146, 147, 149,
	148, 0, 0, 665, 255, 150, 713, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 257, 319, 156,
	320, 258, 157, 158, 159, 160, 0, 259, 161, 260,
	162, 0, 163, 164, 165, 714, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 321, 180, 181, 262, 182, 0, 185, 186,
	187, 188, 0, 263, 189, 190, 0, 191, 183, 192,
	322, 193, 715, 265, 194, 0, 200, 195, 196, 184,
	197, 199, 716, 198, 267, 0, 201, 0, 202, 203,
	204, 205, 206, 0, 268, 717, 718, 0, 0, 207,
	271, 272, 663, 208, 209, 210, 211, 87, 0, 212,
	213, 214, 0, 215, 0, 216, 217, 218, 273, 719,
	0, 0, 219, 90, 91, 0, 92, 220, 221, 222,
	223, 224, 0, 0, 0, 0, 93, 94, 95, 225,
	226, 227, 228, 96, 229, 230, 0, 97, 231, 232,
	98, 0, 0, 233, 234, 235, 0, 99, 236, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 278, 111, 237, 112, 238, 239, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 240, 118, 119, 241, 242, 0, 0,
	0, 120, 121, 243, 0, 122, 0, 123, 0, 0,
	0, 0, 124, 244, 0, 245, 0, 125, 126, 127,
	128, 246, 247, 0, 0, 132, 0, 129, 0, 0,
	130, 248, 131, 249, 250, 251, 0, 252, 0, 0,
	133, 0, 134, 135, 0, 137, 136, 0, 253, 0,
	138, 0, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 254, 144, 0, 146, 147, 149, 148, 0,
	0, 0, 255, 150, 256, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 257, 0, 156, 0, 258,
	157, 158, 159, 160, 0, 259, 161, 260, 162, 0,
	163, 164, 165, 261, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	0, 180, 181, 262, 182, 0, 185, 186, 187, 188,
	0, 263, 189, 190, 0, 191, 183, 192, 0, 193,
	264, 265, 194, 0, 200, 195, 196, 184, 197, 199,
	266, 198, 267, 0, 201, 0, 202, 203, 204, 205,
	206, 0, 268, 269, 270, 0, 0, 207, 271, 272,
	0, 208, 209, 210, 211, 0, 0, 212, 213, 214,
	0, 215, 0, 216, 217, 218, 273, 274, 0, 0,
	219, 87, 0, 0, 0, 220, 221, 222, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 224, 0, 0, 1694, 0,
	93, 94, 95, 225, 226, 227, 228, 96, 229, 230,
	0, 97, 231, 232, 98, 0, 0, 233, 234, 235,
	0, 99, 236, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 278, 111, 237,
	112, 238, 239, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 240, 118, 119,
	241, 242, 0, 0, 0, 120, 121, 243, 0, 122,
	0, 123, 0, 0, 0, 0, 124, 244, 0, 245,
	0, 125, 126, 127, 128, 246, 247, 0, 0, 132,
	0, 129, 0, 0, 130, 248, 131, 249, 250, 251,
	0, 252, 0, 0, 133, 0, 134, 135, 0, 137,
	136, 0, 253, 0, 138, 0, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 254, 144, 0, 146,
	147, 149, 148, 0, 0, 0, 255, 150, 256, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 257,
	0, 156, 0, 258, 157, 158, 159, 160, 0, 259,
	161, 260, 162, 0, 163, 164, 165, 261, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 0, 180, 181, 262, 182, 0,
	185, 186, 187, 188, 0, 263, 189, 190, 0, 191,
	183, 192, 0, 193, 264, 265, 194, 0, 200, 195,
	196, 184, 197, 199, 266, 198, 267, 0, 201, 0,
	202, 203, 204, 205, 206, 0, 268, 269, 270, 0,
	0, 207, 271, 272, 0, 208, 209, 210, 211, 0,
	0, 212, 213, 214, 0, 215, 0, 216, 217, 218,
	273, 274, 0, 0, 219, 0, 0, 0, 0, 220,
	221, 222, 223, 0, 542, 759, 0, 0, 0, 757,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 91, 730, 92, 0, 0, 0, 0, 224, 0,
	0, 0, 0, 93, 94, 95, 225, 226, 227, 228,
	96, 229, 230, 0, 97, 231, 232, 98, 0, 0,
	233, 234, 235, 0, 99, 236, 0, 309, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 310,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	278, 111, 237, 112, 238, 239, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	240, 118, 119, 241, 242, 0, 0, 0, 120, 121,
	243, 0, 122, 0, 123, 0, 0, 311, 0, 124,
	244, 0, 245, 0, 125, 126, 127, 128, 246, 247,
	313, 0, 132, 0, 129, 0, 312, 130, 248, 131,
	249, 250, 251, 0, 252, 0, 314, 133, 315, 134,
	135, 0, 137, 136, 0, 253, 316, 138, 317, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 254,
	144, 318, 146, 147, 149, 148, 0, 0, 0, 255,
	150, 256, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 257, 319, 156, 320, 258, 157, 158, 159,
	160, 0, 259, 161, 260, 162, 0, 163, 164, 165,
	261, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 321, 180, 181,
	262, 182, 0, 185, 186, 187, 188, 0, 263, 189,
	190, 0, 191, 183, 192, 322, 193, 264, 265, 194,
	0, 200, 195, 196, 184, 197, 199, 266, 198, 267,
	0, 201, 0, 202, 203, 204, 205, 206, 0, 268,
	269, 270, 0, 0, 207, 271, 272, 0, 208, 209,
	210, 211, 542, 759, 212, 213, 214, 0, 215, 0,
	216, 217, 218, 273, 274, 0, 0, 219, 90, 91,
	0, 92, 220, 221, 222, 223, 224, 0, 0, 0,
	0, 93, 94, 95, 225, 226, 227, 228, 96, 229,
	230, 0, 97, 231, 232, 98, 0, 0, 233, 234,
	235, 0, 99, 236, 0, 309, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 310, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 278, 111,
	237, 112, 238, 239, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 240, 118,
	119, 241, 242, 0, 0, 0, 120, 121, 243, 0,
	122, 0, 123, 0, 0, 311, 0, 124, 244, 0,
	245, 0, 125, 126, 127, 128, 246, 247, 313, 0,
	132, 0, 129, 0, 312, 130, 248, 131, 249, 250,
	251, 0, 252, 0, 314, 133, 315, 134, 135, 0,
	137, 136, 0, 253, 316, 138, 317, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 254, 144, 318,
	146, 147, 149, 148, 0, 0, 0, 255, 150, 256,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	257, 319, 156, 320, 258, 157, 158, 159, 160, 0,
	259, 161, 260, 162, 0, 163, 164, 165, 261, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 321, 180, 181, 262, 182,
	0, 185, 186, 187, 188, 0, 263, 189, 190, 0,
	191, 183, 192, 322, 193, 264, 265, 194, 0, 200,
	195, 196, 184, 197, 199, 266, 198, 267, 0, 201,
	0, 202, 203, 204, 205, 206, 0, 268, 269, 270,
	0, 0, 207, 271, 272, 0, 208, 209, 210, 211,
	87, 0, 212, 213, 214, 0, 215, 0, 216, 217,
	218, 273, 274, 0, 0, 219, 90, 91, 0, 92,
	220, 221, 222, 223, 224, 0, 0, 0, 0, 93,
	94, 95, 225, 226, 227, 228, 96, 229, 230, 0,
	97, 231, 232, 98, 0, 0, 233, 234, 235, 0,
	99, 236, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 83, 111, 237, 112,
	238, 239, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 240, 118, 119, 241,
	242, 0, 0, 0, 120, 121, 243, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 244, 0, 245, 0,
	125, 126, 127, 128, 246, 247, 0, 0, 132, 0,
	129, 0, 0, 130, 248, 131, 249, 250, 251, 0,
	252, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 253, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 254, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 255, 150, 256, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 257, 0,
	156, 0, 258, 157, 158, 159, 160, 0, 259, 161,
	260, 162, 0, 163, 164, 165, 261, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 262, 182, 0, 185,
	186, 187, 188, 0, 263, 189, 190, 0, 191, 183,
	192, 0, 193, 264, 265, 194, 0, 200, 195, 196,
	184, 197, 199, 266, 198, 267, 0, 201, 82, 202,
	203, 204, 205, 206, 0, 268, 269, 270, 0, 0,
	207, 271, 272, 0, 208, 209, 210, 211, 0, 0,
	212, 213, 214, 0, 215, 0, 216, 217, 218, 273,
	274, 542, 0, 219, 0, 0, 0, 0, 220, 221,
	222, 223, 0, 0, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 86, 224, 0, 0, 0, 0,
	93, 94, 95, 225, 226, 227, 228, 96, 229, 230,
	0, 97, 231, 232, 98, 0, 0, 233, 234, 235,
	0, 99, 236, 0, 309, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 310, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 278, 111, 237,
	112, 238, 239, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 240, 118, 119,
	241, 242, 0, 0, 0, 120, 121, 243, 0, 122,
	0, 123, 0, 0, 311, 0, 124, 244, 0, 245,
	0, 125, 126, 127, 128, 246, 247, 313, 0, 132,
	0, 129, 0, 312, 130, 248, 131, 249, 250, 251,
	0, 252, 0, 314, 133, 315, 134, 135, 0, 137,
	136, 0, 253, 316, 138, 317, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 254, 144, 318, 146,
	147, 149, 148, 0, 0, 0, 255, 150, 256, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 257,
	319, 156, 320, 258, 157, 158, 159, 160, 0, 259,
	161, 260, 162, 0, 163, 164, 165, 261, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 321, 180, 181, 262, 182, 0,
	185, 186, 187, 188, 0, 263, 189, 190, 0, 191,
	183, 192, 322, 193, 264, 265, 194, 0, 200, 195,
	196, 184, 197, 199, 266, 198, 267, 0, 201, 0,
	202, 203, 204, 205, 206, 0, 268, 269, 270, 0,
	0, 207, 271, 272, 0, 208, 209, 210, 211, 87,
	0, 212, 213, 214, 0, 215, 0, 216, 217, 218,
	273, 274, 0, 0, 219, 90, 91, 0, 92, 220,
	221, 222, 223, 224, 0, 0, 0, 0, 93, 94,
	95, 225, 226, 227, 228, 96, 229, 230, 0, 97,
	231, 232, 98, 0, 0, 233, 234, 235, 0, 99,
	236, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 278, 111, 237, 112, 238,
	239, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 240, 118, 119, 241, 242,
	0, 0, 0, 120, 121, 243, 0, 122, 0, 123,
	0, 0, 0, 0, 124, 244, 0, 245, 0, 125,
	126, 127, 128, 246, 247, 0, 0, 132, 0, 129,
	0, 0, 130, 248, 131, 249, 250, 251, 0, 252,
	0, 0, 133, 0, 134, 135, 0, 137, 136, 0,
	253, 0, 138, 0, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 254, 144, 0, 146, 147, 149,
	148, 0, 0, 0, 255, 150, 256, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 257, 0, 156,
	0, 258, 157, 158, 159, 160, 0, 259, 161, 260,
	162, 0, 163, 164, 165, 261, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 0, 180, 181, 262, 182, 0, 185, 186,
	187, 188, 0, 263, 189, 190, 0, 191, 183, 192,
	0, 193, 264, 265, 194, 0, 200, 195, 196, 184,
	197, 199, 266, 198, 267, 0, 201, 0, 202, 203,
	204, 205, 206, 0, 268, 269, 270, 0, 0, 207,
	271, 272, 0, 208, 209, 210, 211, 0, 0, 212,
	213, 214, 0, 215, 0, 216, 217, 218, 273, 274,
	87, 0, 219, 0, 0, 0, 0, 220, 221, 222,
	223, 0, 0, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 86, 224, 0, 0, 0, 0, 93,
	94, 95, 225, 226, 227, 228, 96, 229, 230, 0,
	97, 231, 232, 98, 0, 0, 233, 234, 235, 1050,
	99, 236, 0, 0, 0, 100, 101, 102, 0, 103,
	1048, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 278, 111, 237, 112,
	238, 239, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 240, 118, 119, 241,
	242, 0, 1158, 0, 120, 121, 243, 0, 122, 0,
	123, 1053, 0, 0, 0, 124, 244, 0, 245, 0,
	125, 126, 127, 128, 246, 247, 0, 0, 132, 1156,
	129, 0, 0, 130, 248, 131, 249, 250, 251, 0,
	252, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 253, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 254, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 255, 150, 256, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 257, 0,
	156, 0, 258, 157, 158, 159, 160, 0, 259, 161,
	260, 162, 1052, 163, 164, 165, 261, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 262, 182, 0, 185,
	186, 187, 188, 0, 263, 189, 190, 0, 191, 183,
	192, 0, 193, 264, 265, 194, 0, 200, 195, 196,
	184, 197, 199, 266, 198, 267, 0, 201, 0, 202,
	203, 204, 205, 206, 0, 268, 269, 270, 0, 0,
	207, 271, 272, 0, 208, 209, 210, 211, 87, 1157,
	212, 213, 214, 0, 215, 0, 216, 217, 218, 273,
	274, 0, 0, 219, 90, 91, 0, 92, 220, 221,
	222, 223, 224, 0, 0, 0, 0, 93, 94, 95,
	225, 226, 227, 228, 96, 229, 230, 0, 97, 231,
	232, 98, 0, 0, 233, 234, 235, 1050, 99, 236,
	0, 0, 1045, 100, 101, 102, 0, 103, 1048, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 278, 111, 237, 112, 238, 239,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 240, 118, 119, 241, 242, 0,
	0, 0, 120, 121, 243, 0, 122, 0, 123, 1053,
	0, 0, 0, 124, 244, 0, 245, 0, 125, 126,
	127, 128, 1044, 247, 0, 0, 132, 0, 129, 0,
	0, 130, 248, 131, 249, 250, 251, 0, 252, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 253,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 254, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 255, 150, 256, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 257, 0, 156, 0,
	258, 157, 158, 159, 160, 0, 259, 161, 260, 162,
	1052, 163, 164, 165, 261, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 262, 182, 0, 185, 186, 187,
	188, 0, 263, 189, 190, 0, 191, 183, 192, 0,
	193, 264, 265, 194, 0, 200, 195, 196, 184, 197,
	199, 266, 198, 267, 0, 201, 0, 202, 203, 204,
	205, 206, 0, 268, 269, 270, 0, 0, 207, 271,
	272, 0, 208, 209, 210, 211, 87, 1051, 212, 213,
	214, 0, 215, 0, 216, 217, 218, 273, 274, 0,
	0, 219, 90, 91, 0, 92, 220, 221, 222, 223,
	224, 0, 1661, 0, 0, 93, 94, 95, 225, 226,
	227, 228, 96, 229, 230, 0, 97, 231, 232, 98,
	0, 0, 233, 234, 235, 0, 99, 236, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 278, 111, 237, 112, 238, 239, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 240, 118, 119, 241, 242, 0, 0, 0,
	120, 121, 243, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 244, 0, 245, 0, 125, 126, 127, 128,
	246, 247, 0, 0, 132, 0, 129, 0, 0, 130,
	248, 131, 249, 250, 251, 0, 252, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 253, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 254, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 255, 150, 256, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 257, 0, 156, 0, 258, 157,
	158, 159, 160, 0, 259, 161, 260, 162, 0, 163,
	164, 165, 261, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 262, 182, 0, 185, 186, 187, 188, 0,
	263, 189, 190, 0, 191, 183, 192, 0, 193, 264,
	265, 194, 0, 200, 195, 196, 184, 197, 199, 266,
	198, 267, 0, 201, 0, 202, 203, 204, 205, 206,
	0, 268, 269, 270, 0, 0, 207, 271, 272, 0,
	208, 209, 210, 211, 87, 0, 212, 213, 214, 0,
	215, 0, 216, 217, 218, 273, 274, 0, 0, 219,
	90, 91, 0, 92, 220, 221, 222, 223, 224, 0,
	0, 0, 0, 93, 94, 95, 225, 226, 227, 228,
	96, 229, 230, 0, 97, 231, 232, 98, 0, 0,
	233, 234, 235, 0, 99, 236, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	278, 111, 237, 112, 238, 239, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	240, 118, 119, 241, 242, 0, 0, 0, 120, 121,
	243, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	244, 0, 245, 0, 125, 126, 127, 128, 246, 247,
	0, 0, 132, 0, 129, 0, 0, 130, 248, 131,
	249, 250, 251, 0, 252, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 253, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 254,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 255,
	150, 256, 151, 152, 0, 153, 0, 496, 154, 0,
	0, 155, 257, 0, 156, 0, 258, 157, 158, 159,
	160, 0, 259, 161, 260, 162, 0, 163, 164, 165,
	261, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	262, 182, 0, 185, 186, 187, 188, 0, 263, 189,
	190, 0, 191, 183, 192, 0, 193, 264, 265, 194,
	0, 200, 195, 196, 184, 197, 199, 266, 198, 267,
	0, 201, 0, 202, 203, 204, 205, 206, 0, 268,
	269, 270, 0, 0, 207, 271, 272, 0, 208, 209,
	210, 211, 87, 0, 212, 213, 214, 0, 215, 0,
	216, 217, 218, 273, 274, 0, 0, 219, 90, 91,
	0, 92, 220, 221, 222, 223, 224, 0, 0, 0,
	0, 93, 94, 95, 225, 226, 227, 228, 96, 229,
	230, 0, 97, 231, 232, 98, 0, 0, 233, 234,
	235, 0, 99, 236, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 278, 111,
	237, 112, 238, 239, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 240, 118,
	119, 241, 242, 0, 0, 0, 120, 121, 243, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 244, 0,
	245, 0, 125, 126, 127, 128, 792, 247, 0, 0,
	132, 0, 129, 0, 0, 130, 248, 131, 249, 250,
	251, 0, 252, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 253, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 254, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 255, 150, 256,
	151, 152, 0, 153, 0, 496, 154, 0, 0, 155,
	257, 0, 156, 0, 258, 157, 158, 159, 160, 0,
	259, 161, 260, 162, 0, 163, 164, 165, 261, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 262, 182,
	0, 185, 186, 187, 188, 0, 263, 189, 190, 0,
	191, 183, 192, 0, 193, 264, 265, 194, 0, 200,
	195, 196, 184, 197, 199, 266, 198, 267, 0, 201,
	0, 202, 203, 204, 205, 206, 0, 268, 269, 270,
	0, 0, 207, 271, 272, 0, 208, 209, 210, 211,
	87, 0, 212, 213, 214, 0, 215, 0, 216, 217,
	218, 273, 274, 0, 0, 219, 90, 91, 554, 92,
	220, 221, 222, 223, 224, 0, 0, 0, 0, 93,
	94, 95, 225, 226, 227, 228, 96, 229, 230, 0,
	97, 231, 232, 98, 0, 0, 233, 234, 235, 0,
	99, 236, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 278, 111, 237, 112,
	238, 239, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 240, 118, 119, 241,
	242, 0, 0, 0, 120, 121, 243, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 244, 0, 245, 0,
	125, 126, 127, 128, 246, 247, 0, 0, 132, 0,
	129, 0, 0, 130, 248, 131, 249, 250, 251, 0,
	252, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 253, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 254, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 255, 150, 256, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 257, 0,
	156, 0, 258, 157, 158, 159, 160, 0, 259, 161,
	260, 162, 0, 163, 164, 165, 261, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 262, 182, 0, 185,
	186, 187, 188, 0, 263, 189, 190, 0, 191, 183,
	192, 0, 193, 264, 265, 194, 0, 200, 195, 196,
	184, 197, 199, 266, 198, 267, 0, 201, 0, 202,
	203, 204, 205, 206, 0, 268, 269, 270, 0, 0,
	207, 271, 272, 0, 208, 209, 210, 211, 87, 0,
	212, 213, 214, 0, 215, 0, 216, 217, 218, 273,
	274, 0, 0, 219, 90, 91, 0, 92, 220, 221,
	222, 223, 224, 0, 0, 0, 0, 93, 94, 95,
	225, 226, 227, 228, 96, 229, 230, 0, 97, 231,
	232, 98, 0, 0, 233, 234, 235, 0, 99, 236,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 278, 111, 237, 112, 238, 239,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 240, 118, 119, 241, 242, 0,
	0, 0, 120, 121, 243, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 244, 0, 245, 0, 125, 126,
	127, 128, 508, 247, 0, 0, 132, 0, 129, 0,
	0, 130, 248, 131, 249, 250, 251, 0, 252, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 253,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 254, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 255, 150, 256, 151, 152, 0, 153,
	0, 496, 154, 0, 0, 155, 257, 0, 156, 0,
	258, 157, 158, 159, 160, 0, 259, 161, 260, 162,
	0, 163, 164, 165, 261, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 262, 182, 0, 185, 186, 187,
	188, 0, 263, 189, 190, 0, 191, 183, 192, 0,
	193, 264, 265, 194, 0, 200, 195, 196, 184, 197,
	199, 266, 198, 267, 0, 201, 0, 202, 203, 204,
	205, 206, 0, 268, 269, 270, 0, 0, 207, 271,
	272, 0, 208, 209, 210, 211, 87, 0, 212, 213,
	214, 0, 215, 0, 216, 217, 218, 273, 274, 0,
	0, 219, 90, 91, 0, 92, 220, 221, 222, 223,
	224, 0, 0, 0, 0, 93, 94, 95, 225, 226,
	227, 228, 96, 229, 230, 0, 97, 231, 232, 98,
	0, 0, 233, 234, 235, 0, 99, 236, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 278, 111, 237, 112, 238, 239, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 240, 118, 119, 241, 242, 0, 0, 0,
	120, 121, 243, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 244, 0, 245, 0, 125, 126, 127, 128,
	501, 247, 0, 0, 132, 0, 129, 0, 0, 130,
	248, 131, 249, 250, 251, 0, 252, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 253, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 254, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 255, 150, 256, 151, 152, 0, 153, 0, 496,
	154, 0, 0, 155, 257, 0, 156, 0, 258, 157,
	158, 159, 160, 0, 259, 161, 260, 162, 0, 163,
	164, 165, 261, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 262, 182, 0, 185, 186, 187, 188, 0,
	263, 189, 190, 0, 191, 183, 192, 0, 193, 264,
	265, 194, 0, 200, 195, 196, 184, 197, 199, 266,
	198, 267, 0, 201, 0, 202, 203, 204, 205, 206,
	0, 268, 269, 270, 0, 0, 207, 271, 272, 0,
	208, 209, 210, 211, 87, 0, 212, 213, 214, 0,
	215, 0, 216, 217, 218, 273, 274, 0, 0, 219,
	90, 91, 408, 92, 220, 221, 222, 223, 224, 0,
	0, 0, 0, 93, 94, 95, 225, 226, 227, 228,
	96, 229, 230, 0, 97, 231, 232, 98, 0, 0,
	233, 234, 235, 0, 99, 236, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	278, 111, 237, 112, 238, 239, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	240, 118, 119, 241, 242, 0, 0, 0, 120, 121,
	243, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	244, 0, 245, 0, 125, 126, 127, 128, 246, 247,
	0, 0, 132, 0, 129, 0, 0, 130, 248, 131,
	249, 250, 251, 0, 252, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 253, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 254,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 255,
	150, 256, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 257, 0, 156, 0, 258, 157, 158, 159,
	160, 0, 259, 161, 260, 407, 0, 163, 164, 165,
	261, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	262, 182, 0, 185, 186, 187, 188, 0, 263, 189,
	190, 0, 191, 183, 192, 0, 193, 264, 265, 194,
	0, 200, 195, 196, 184, 197, 199, 266, 198, 267,
	0, 201, 0, 202, 203, 204, 205, 206, 0, 268,
	269, 270, 0, 0, 207, 271, 272, 0, 208, 209,
	210, 211, 87, 0, 212, 213, 214, 0, 215, 0,
	216, 217, 218, 273, 274, 0, 0, 219, 90, 91,
	0, 92, 220, 221, 222, 223, 224, 0, 0, 0,
	0, 93, 94, 95, 225, 226, 227, 228, 96, 229,
	230, 0, 97, 231, 232, 98, 0, 0, 233, 234,
	235, 0, 99, 236, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 278, 111,
	237, 112, 238, 239, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 240, 118,
	119, 241, 242, 0, 0, 0, 120, 121, 243, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 244, 0,
	245, 0, 125, 126, 127, 128, 246, 247, 0, 0,
	132, 0, 129, 0, 0, 130, 248, 131, 249, 250,
	251, 0, 252, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 253, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 254, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 255, 150, 256,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	257, 0, 156, 0, 258, 157, 158, 159, 160, 0,
	259, 161, 260, 162, 0, 163, 164, 165, 261, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 262, 182,
	0, 185, 186, 187, 188, 0, 263, 189, 190, 0,
	191, 183, 192, 0, 193, 264, 265, 194, 0, 200,
	195, 196, 184, 197, 199, 266, 198, 267, 0, 201,
	0, 202, 203, 204, 205, 206, 0, 268, 269, 270,
	0, 0, 207, 271, 272, 0, 208, 209, 210, 211,
	87, 0, 212, 213, 214, 0, 215, 0, 216, 217,
	218, 273, 274, 0, 0, 219, 90, 91, 0, 92,
	220, 221, 222, 223, 224, 0, 0, 0, 0, 93,
	94, 95, 225, 226, 227, 228, 96, 229, 230, 0,
	97, 231, 232, 98, 0, 0, 233, 234, 235, 0,
	99, 236, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 278, 111, 237, 112,
	238, 239, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 240, 118, 119, 241,
	242, 0, 0, 0, 120, 121, 243, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 244, 0, 245, 0,
	125, 126, 127, 128, 1350, 247, 0, 0, 132, 0,
	129, 0, 0, 130, 248, 131, 249, 250, 251, 0,
	252, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 253, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 254, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 255, 150, 256, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 257, 0,
	156, 0, 258, 157, 158, 159, 160, 0, 259, 161,
	260, 162, 0, 163, 164, 165, 261, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 262, 182, 0, 185,
	186, 187, 188, 0, 263, 189, 190, 0, 191, 183,
	192, 0, 193, 264, 265, 194, 0, 200, 195, 196,
	184, 197, 199, 266, 198, 267, 0, 201, 0, 202,
	203, 204, 205, 206, 0, 268, 269, 270, 0, 0,
	207, 271, 272, 0, 208, 209, 210, 211, 87, 0,
	212, 213, 214, 0, 215, 0, 216, 217, 218, 273,
	274, 0, 0, 219, 90, 91, 0, 92, 220, 221,
	222, 223, 224, 0, 0, 0, 0, 93, 94, 95,
	225, 226, 227, 228, 96, 229, 230, 0, 97, 231,
	232, 98, 0, 0, 233, 234, 235, 0, 99, 236,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 278, 111, 237, 112, 238, 239,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 240, 118, 119, 241, 242, 0,
	0, 0, 120, 121, 243, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 244, 0, 245, 0, 125, 126,
	127, 128, 1348, 247, 0, 0, 132, 0, 129, 0,
	0, 130, 248, 131, 249, 250, 251, 0, 252, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 253,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 254, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 255, 150, 256, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 257, 0, 156, 0,
	258, 157, 158, 159, 160, 0, 259, 161, 260, 162,
	0, 163, 164, 165, 261, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 262, 182, 0, 185, 186, 187,
	188, 0, 263, 189, 190, 0, 191, 183, 192, 0,
	193, 264, 265, 194, 0, 200, 195, 196, 184, 197,
	199, 266, 198, 267, 0, 201, 0, 202, 203, 204,
	205, 206, 0, 268, 269, 270, 0, 0, 207, 271,
	272, 0, 208, 209, 210, 211, 87, 0, 212, 213,
	214, 0, 215, 0, 216, 217, 218, 273, 274, 0,
	0, 219, 90, 91, 0, 92, 220, 221, 222, 223,
	224, 0, 0, 0, 0, 93, 94, 95, 225, 226,
	227, 228, 96, 229, 230, 0, 97, 231, 232, 98,
	0, 0, 233, 234, 235, 0, 99, 236, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 278, 111, 237, 112, 238, 239, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 240, 118, 119, 241, 242, 0, 0, 0,
	120, 121, 243, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 244, 0, 245, 0, 125, 126, 127, 128,
	1337, 247, 0, 0, 132, 0, 129, 0, 0, 130,
	248, 131, 249, 250, 251, 0, 252, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 253, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 254, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 255, 150, 256, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 257, 0, 156, 0, 258, 157,
	158, 159, 160, 0, 259, 161, 260, 162, 0, 163,
	164, 165, 261, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 262, 182, 0, 185, 186, 187, 188, 0,
	263, 189, 190, 0, 191, 183, 192, 0, 193, 264,
	265, 194, 0, 200, 195, 196, 184, 197, 199, 266,
	198, 267, 0, 201, 0, 202, 203, 204, 205, 206,
	0, 268, 269, 270, 0, 0, 207, 271, 272, 0,
	208, 209, 210, 211, 87, 0, 212, 213, 214, 0,
	215, 0, 216, 217, 218, 273, 274, 0, 0, 219,
	90, 91, 0, 92, 220, 221, 222, 223, 224, 0,
	0, 0, 0, 93, 94, 95, 225, 226, 227, 228,
	96, 229, 230, 0, 97, 231, 232, 98, 0, 0,
	233, 234, 235, 0, 99, 236, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	278, 111, 237, 112, 238, 239, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	240, 118, 119, 241, 242, 0, 0, 0, 120, 121,
	243, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	244, 0, 245, 0, 125, 126, 127, 128, 912, 247,
	0, 0, 132, 0, 129, 0, 0, 130, 248, 131,
	249, 250, 251, 0, 252, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 253, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 254,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 255,
	150, 256, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 257, 0, 156, 0, 258, 157, 158, 159,
	160, 0, 259, 161, 260, 162, 0, 163, 164, 165,
	261, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	262, 182, 0, 185, 186, 187, 188, 0, 263, 189,
	190, 0, 191, 183, 192, 0, 193, 264, 265, 194,
	0, 200, 195, 196, 184, 197, 199, 266, 198, 267,
	0, 201, 0, 202, 203, 204, 205, 206, 0, 268,
	269, 270, 0, 0, 207, 271, 272, 0, 208, 209,
	210, 211, 87, 0, 212, 213, 214, 0, 215, 0,
	216, 217, 218, 273, 274, 0, 0, 219, 90, 91,
	0, 92, 220, 221, 222, 223, 224, 0, 0, 0,
	0, 93, 94, 95, 225, 226, 227, 228, 96, 229,
	230, 0, 97, 231, 232, 98, 0, 0, 233, 234,
	235, 0, 99, 236, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 278, 111,
	237, 112, 238, 239, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 240, 118,
	119, 241, 242, 0, 0, 0, 120, 121, 243, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 244, 0,
	245, 0, 125, 126, 127, 128, 246, 247, 0, 0,
	132, 0, 129, 0, 0, 130, 248, 131, 249, 250,
	251, 0, 252, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 253, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 254, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 255, 150, 256,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	257, 0, 156, 0, 258, 157, 158, 159, 160, 0,
	259, 161, 260, 162, 0, 163, 164, 165, 261, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 262, 182,
	0, 422, 186, 187, 188, 0, 263, 189, 190, 0,
	191, 183, 192, 0, 193, 264, 265, 194, 0, 200,
	195, 196, 184, 197, 199, 266, 198, 267, 0, 201,
	0, 202, 203, 204, 205, 206, 0, 268, 269, 270,
	0, 0, 207, 271, 272, 0, 208, 209, 210, 211,
	87, 0, 212, 213, 214, 0, 215, 0, 216, 217,
	218, 273, 274, 0, 0, 219, 90, 91, 0, 92,
	220, 221, 222, 223, 224, 0, 777, 0, 0, 93,
	94, 95, 225, 226, 227, 228, 96, 229, 230, 0,
	97, 231, 232, 98, 0, 0, 233, 234, 235, 0,
	99, 236, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 278, 111, 237, 112,
	238, 239, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 240, 118, 119, 241,
	242, 0, 0, 0, 120, 121, 243, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 244, 0, 245, 0,
	125, 126, 127, 128, 246, 247, 0, 0, 132, 0,
	129, 0, 0, 130, 248, 131, 249, 250, 251, 0,
	252, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 253, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 254, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 255, 150, 256, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 257, 0,
	156, 0, 258, 157, 158, 159, 160, 0, 259, 161,
	260, 162, 0, 163, 164, 165, 261, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 262, 182, 0, 185,
	186, 187, 188, 0, 263, 189, 190, 0, 0, 183,
	192, 0, 193, 264, 265, 194, 0, 200, 195, 196,
	184, 197, 199, 266, 198, 267, 0, 201, 0, 202,
	203, 204, 205, 206, 0, 268, 269, 270, 0, 0,
	207, 271, 272, 0, 208, 209, 210, 211, 87, 0,
	212, 213, 214, 0, 215, 0, 216, 217, 218, 273,
	274, 0, 0, 219, 90, 91, 0, 92, 220, 221,
	222, 223, 224, 0, 0, 0, 0, 93, 94, 95,
	225, 226, 227, 228, 96, 229, 230, 0, 97, 231,
	232, 98, 0, 0, 233, 234, 235, 0, 99, 236,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 278, 111, 237, 112, 238, 239,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 240, 118, 119, 241, 242, 0,
	0, 0, 120, 121, 243, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 244, 0, 245, 0, 125, 126,
	127, 128, 608, 247, 0, 0, 132, 0, 129, 0,
	0, 130, 248, 131, 249, 250, 251, 0, 252, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 253,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 254, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 255, 150, 256, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 257, 0, 156, 0,
	258, 157, 158, 159, 160, 0, 259, 161, 260, 162,
	0, 163, 164, 165, 261, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 262, 182, 0, 185, 186, 187,
	188, 0, 263, 189, 190, 0, 191, 183, 192, 0,
	193, 264, 265, 194, 0, 200, 195, 196, 184, 197,
	199, 266, 198, 267, 0, 201, 0, 202, 203, 204,
	205, 206, 0, 268, 269, 270, 0, 0, 207, 271,
	272, 0, 208, 209, 210, 211, 87, 0, 212, 213,
	214, 0, 215, 0, 216, 217, 218, 273, 274, 0,
	0, 219, 90, 91, 0, 92, 220, 221, 222, 223,
	224, 0, 0, 0, 0, 93, 94, 95, 225, 226,
	227, 228, 96, 229, 230, 0, 97, 231, 232, 98,
	0, 0, 233, 234, 235, 0, 99, 236, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 278, 111, 237, 112, 238, 239, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 240, 118, 119, 241, 242, 0, 0, 0,
	120, 121, 243, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 244, 0, 245, 0, 125, 126, 127, 128,
	603, 247, 0, 0, 132, 0, 129, 0, 0, 130,
	248, 131, 249, 250, 251, 0, 252, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 253, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 254, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 255, 150, 256, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 257, 0, 156, 0, 258, 157,
	158, 159, 160, 0, 259, 161, 260, 162, 0, 163,
	164, 165, 261, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 262, 182, 0, 185, 186, 187, 188, 0,
	263, 189, 190, 0, 191, 183, 192, 0, 193, 264,
	265, 194, 0, 200, 195, 196, 184, 197, 199, 266,
	198, 267, 0, 201, 0, 202, 203, 204, 205, 206,
	0, 268, 269, 270, 0, 0, 207, 271, 272, 0,
	208, 209, 210, 211, 87, 0, 212, 213, 214, 0,
	215, 0, 216, 217, 218, 273, 274, 0, 0, 219,
	90, 91, 0, 92, 220, 221, 222, 223, 224, 0,
	0, 0, 0, 93, 94, 95, 225, 226, 227, 228,
	96, 229, 230, 0, 97, 231, 232, 98, 0, 0,
	233, 234, 560, 0, 99, 236, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	278, 111, 237, 112, 238, 239, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	240, 118, 119, 241, 242, 0, 0, 0, 120, 121,
	243, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	244, 0, 245, 0, 125, 126, 127, 128, 246, 247,
	0, 0, 132, 0, 129, 0, 0, 130, 248, 131,
	249, 250, 251, 0, 252, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 253, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 254,
	434, 0, 146, 147, 149, 148, 0, 0, 0, 255,
	150, 256, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 257, 0, 156, 0, 258, 157, 158, 159,
	160, 0, 259, 161, 260, 162, 0, 163, 164, 165,
	261, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	262, 182, 0, 185, 186, 187, 188, 0, 263, 189,
	190, 0, 191, 183, 192, 0, 193, 264, 265, 194,
	0, 200, 195, 196, 184, 197, 199, 266, 198, 267,
	0, 201, 0, 202, 203, 204, 205, 206, 0, 433,
	269, 270, 0, 0, 429, 271, 272, 0, 208, 209,
	210, 211, 87, 0, 212, 213, 214, 0, 215, 0,
	216, 217, 218, 273, 274, 0, 0, 219, 90, 91,
	0, 92, 220, 221, 222, 223, 224, 0, 0, 0,
	0, 93, 94, 95, 225, 226, 227, 228, 96, 229,
	230, 0, 97, 231, 232, 98, 0, 0, 233, 234,
	235, 0, 99, 236, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 278, 111,
	237, 112, 238, 239, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 240, 118,
	119, 241, 242, 0, 0, 0, 120, 121, 243, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 244, 0,
	245, 0, 125, 126, 127, 128, 246, 247, 0, 0,
	132, 0, 129, 0, 0, 130, 248, 131, 249, 250,
	251, 0, 252, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 253, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 254, 434, 0,
	146, 147, 149, 148, 0, 0, 0, 255, 150, 256,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	257, 0, 156, 0, 258, 157, 158, 159, 160, 0,
	259, 161, 260, 162, 0, 163, 164, 165, 261, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 262, 182,
	0, 185, 186, 187, 188, 0, 263, 189, 190, 0,
	191, 183, 192, 0, 193, 264, 265, 194, 0, 200,
	195, 196, 184, 197, 199, 266, 198, 267, 0, 201,
	0, 202, 203, 204, 205, 206, 0, 433, 269, 270,
	0, 0, 429, 271, 272, 0, 208, 209, 210, 211,
	87, 0, 212, 213, 214, 0, 215, 0, 216, 217,
	218, 273, 274, 0, 0, 219, 90, 91, 0, 92,
	220, 221, 222, 223, 224, 0, 0, 0, 0, 93,
	94, 95, 225, 226, 227, 228, 96, 229, 230, 0,
	97, 231, 232, 98, 0, 0, 233, 234, 235, 0,
	99, 236, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 278, 111, 237, 112,
	238, 239, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 240, 118, 119, 241,
	242, 0, 0, 0, 120, 121, 243, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 244, 0, 245, 0,
	125, 126, 127, 128, 538, 247, 0, 0, 132, 0,
	129, 0, 0, 130, 248, 131, 249, 250, 251, 0,
	252, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 253, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 254, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 255, 150, 256, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 257, 0,
	156, 0, 258, 157, 158, 159, 160, 0, 259, 161,
	260, 162, 0, 163, 164, 165, 261, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 262, 182, 0, 185,
	186, 187, 188, 0, 263, 189, 190, 0, 191, 183,
	192, 0, 193, 264, 265, 194, 0, 200, 195, 196,
	184, 197, 199, 266, 198, 267, 0, 201, 0, 202,
	203, 204, 205, 206, 0, 268, 269, 270, 0, 0,
	207, 271, 272, 0, 208, 209, 210, 211, 87, 0,
	212, 213, 214, 0, 215, 0, 216, 217, 218, 273,
	274, 0, 0, 219, 90, 91, 0, 92, 220, 221,
	222, 223, 224, 0, 0, 0, 0, 93, 94, 95,
	225, 226, 227, 228, 96, 229, 230, 0, 97, 231,
	232, 98, 0, 0, 233, 234, 235, 0, 99, 236,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 278, 111, 237, 112, 238, 239,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 240, 118, 119, 241, 242, 0,
	0, 0, 120, 121, 243, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 244, 0, 245, 0, 125, 126,
	127, 128, 535, 247, 0, 0, 132, 0, 129, 0,
	0, 130, 248, 131, 249, 250, 251, 0, 252, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 253,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 254, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 255, 150, 256, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 257, 0, 156, 0,
	258, 157, 158, 159, 160, 0, 259, 161, 260, 162,
	0, 163, 164, 165, 261, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 262, 182, 0, 185, 186, 187,
	188, 0, 263, 189, 190, 0, 191, 183, 192, 0,
	193, 264, 265, 194, 0, 200, 195, 196, 184, 197,
	199, 266, 198, 267, 0, 201, 0, 202, 203, 204,
	205, 206, 0, 268, 269, 270, 0, 0, 207, 271,
	272, 0, 208, 209, 210, 211, 87, 0, 212, 213,
	214, 0, 215, 0, 216, 217, 218, 273, 274, 0,
	0, 219, 90, 91, 0, 92, 220, 221, 222, 223,
	224, 0, 0, 0, 0, 93, 94, 95, 225, 226,
	227, 228, 96, 229, 230, 0, 97, 231, 232, 98,
	0, 0, 233, 234, 235, 0, 99, 236, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 278, 111, 237, 112, 238, 239, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 240, 118, 119, 241, 242, 0, 0, 0,
	120, 121, 243, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 244, 0, 245, 0, 125, 126, 127, 128,
	532, 247, 0, 0, 132, 0, 129, 0, 0, 130,
	248, 131, 249, 250, 251, 0, 252, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 253, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 254, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 255, 150, 256, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 257, 0, 156, 0, 258, 157,
	158, 159, 160, 0, 259, 161, 260, 162, 0, 163,
	164, 165, 261, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 262, 182, 0, 185, 186, 187, 188, 0,
	263, 189, 190, 0, 191, 183, 192, 0, 193, 264,
	265, 194, 0, 200, 195, 196, 184, 197, 199, 266,
	198, 267, 0, 201, 0, 202, 203, 204, 205, 206,
	0, 268, 269, 270, 0, 0, 207, 271, 272, 0,
	208, 209, 210, 211, 87, 0, 212, 213, 214, 0,
	215, 0, 216, 217, 218, 273, 274, 0, 0, 219,
	90, 91, 0, 92, 220, 221, 222, 223, 224, 0,
	0, 0, 0, 93, 94, 95, 225, 226, 227, 228,
	96, 229, 230, 0, 97, 231, 232, 98, 0, 0,
	233, 234, 235, 0, 99, 236, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	278, 111, 237, 112, 238, 239, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	240, 118, 119, 241, 242, 0, 0, 0, 120, 121,
	243, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	244, 0, 245, 0, 125, 126, 127, 128, 530, 247,
	0, 0, 132, 0, 129, 0, 0, 130, 248, 131,
	249, 250, 251, 0, 252, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 253, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 254,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 255,
	150, 256, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 257, 0, 156, 0, 258, 157, 158, 159,
	160, 0, 259, 161, 260, 162, 0, 163, 164, 165,
	261, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	262, 182, 0, 185, 186, 187, 188, 0, 263, 189,
	190, 0, 191, 183, 192, 0, 193, 264, 265, 194,
	0, 200, 195, 196, 184, 197, 199, 266, 198, 267,
	0, 201, 0, 202, 203, 204, 205, 206, 0, 268,
	269, 270, 0, 0, 207, 271, 272, 0, 208, 209,
	210, 211, 87, 0, 212, 213, 214, 0, 215, 0,
	216, 217, 218, 273, 274, 0, 0, 219, 90, 91,
	0, 92, 220, 221, 222, 223, 224, 0, 0, 0,
	0, 93, 94, 95, 225, 226, 227, 228, 96, 229,
	230, 0, 97, 231, 232, 98, 0, 0, 233, 234,
	235, 0, 99, 236, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 278, 111,
	237, 112, 238, 239, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 240, 118,
	119, 241, 242, 0, 0, 0, 120, 121, 243, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 244, 0,
	245, 0, 125, 126, 127, 128, 504, 247, 0, 0,
	132, 0, 129, 0, 0, 130, 248, 131, 249, 250,
	251, 0, 252, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 253, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 254, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 255, 150, 256,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	257, 0, 156, 0, 258, 157, 158, 159, 160, 0,
	259, 161, 260, 162, 0, 163, 164, 165, 261, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 262, 182,
	0, 185, 186, 187, 188, 0, 263, 189, 190, 0,
	191, 183, 192, 0, 193, 264, 265, 194, 0, 200,
	195, 196, 184, 197, 199, 266, 198, 267, 0, 201,
	0, 202, 203, 204, 205, 206, 0, 268, 269, 270,
	0, 0, 207, 271, 272, 0, 208, 209, 210, 211,
	87, 0, 212, 213, 214, 0, 215, 0, 216, 217,
	218, 273, 274, 0, 0, 219, 90, 91, 0, 92,
	220, 221, 222, 223, 224, 0, 0, 0, 0, 93,
	94, 95, 225, 226, 227, 228, 96, 229, 230, 0,
	97, 231, 232, 98, 0, 0, 233, 234, 235, 0,
	99, 236, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 278, 111, 237, 112,
	238, 239, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 240, 118, 119, 241,
	242, 0, 0, 0, 120, 121, 243, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 244, 0, 245, 0,
	125, 126, 127, 128, 246, 247, 0, 0, 132, 0,
	129, 0, 0, 130, 248, 131, 249, 250, 251, 0,
	252, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 253, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 254, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 255, 150, 256, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 257, 0,
	156, 0, 258, 157, 158, 159, 160, 0, 259, 161,
	260, 162, 0, 163, 164, 165, 261, 485, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 262, 182, 0, 185,
	186, 187, 188, 0, 263, 189, 190, 0, 191, 183,
	192, 0, 193, 264, 265, 194, 0, 200, 195, 196,
	184, 197, 199, 266, 198, 267, 0, 201, 0, 202,
	203, 204, 205, 206, 0, 268, 269, 270, 0, 0,
	207, 271, 272, 0, 208, 209, 210, 211, 87, 0,
	212, 213, 214, 0, 215, 0, 216, 217, 218, 273,
	274, 0, 0, 219, 90, 91, 0, 92, 220, 221,
	222, 223, 224, 0, 0, 0, 0, 93, 94, 95,
	225, 226, 227, 228, 96, 229, 230, 0, 97, 231,
	232, 98, 0, 0, 233, 234, 235, 0, 427, 236,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 278, 111, 237, 112, 238, 239,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 240, 118, 119, 241, 242, 0,
	0, 0, 120, 121, 243, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 244, 0, 245, 0, 125, 126,
	127, 128, 246, 247, 0, 0, 132, 0, 129, 0,
	0, 130, 248, 131, 249, 250, 251, 0, 252, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 253,
	0, 138, 0, 0, 425, 0, 0, 140, 0, 141,
	142, 143, 145, 254, 434, 0, 146, 147, 149, 148,
	0, 0, 0, 255, 150, 256, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 257, 0, 156, 0,
	258, 157, 158, 159, 160, 0, 259, 161, 260, 162,
	0, 163, 164, 165, 261, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 428, 182, 0, 185, 186, 187,
	188, 0, 263, 189, 426, 0, 191, 183, 192, 0,
	193, 264, 265, 194, 0, 200, 195, 196, 184, 197,
	199, 266, 198, 267, 0, 201, 0, 202, 203, 204,
	205, 206, 0, 433, 269, 270, 0, 0, 429, 271,
	272, 0, 208, 209, 210, 211, 87, 0, 212, 213,
	214, 0, 215, 0, 216, 217, 218, 273, 274, 0,
	0, 219, 90, 91, 0, 92, 220, 221, 222, 223,
	224, 0, 0, 0, 0, 93, 94, 95, 225, 226,
	227, 228, 96, 229, 230, 0, 97, 231, 232, 98,
	0, 0, 233, 234, 235, 0, 99, 236, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 278, 111, 237, 112, 238, 239, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 240, 118, 119, 241, 242, 0, 0, 0,
	120, 121, 243, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 244, 0, 245, 0, 125, 126, 127, 128,
	246, 247, 0, 0, 132, 0, 129, 0, 0, 130,
	248, 131, 249, 250, 251, 0, 252, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 253, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 254, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 255, 150, 256, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 257, 0, 156, 0, 258, 157,
	158, 0, 160, 0, 259, 161, 260, 162, 0, 163,
	0, 165, 261, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 262, 0, 0, 185, 186, 187, 188, 0,
	263, 189, 190, 0, 191, 183, 192, 0, 193, 264,
	265, 194, 0, 200, 195, 196, 184, 197, 199, 266,
	198, 267, 0, 201, 0, 202, 203, 204, 205, 206,
	0, 268, 269, 270, 0, 0, 207, 271, 272, 0,
	208, 209, 210, 211, 0, 0, 212, 213, 214, 0,
	215, 0, 216, 217, 218, 273, 274, 0, 0, 219,
	0, 0, 0, 0, 220, 221, 222, 223, 936, 937,
	0, 955, 956, 957, 965, 966, 967, 0, 0, 0,
	0, 0, 0, 0, 958, 0, 0, 0, 0, 0,
	0, 939, 936, 937, 969, 955, 956, 957, 965, 966,
	967, 0, 0, 0, 0, 0, 0, 0, 958, 0,
	0, 0, 0, 0, 938, 939, 0, 0, 969, 0,
	952, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 938, 0,
	0, 0, 0, 0, 952, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 936,
	937, 0, 955, 956, 957, 965, 966, 967, 0, 944,
	0, 0, 0, 0, 0, 958, 0, 0, 0, 0,
	0, 0, 939, 0, 0, 969, 0, 0, 962, 970,
	0, 0, 0, 944, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 968, 938, 0, 0, 0, 0,
	0, 952, 962, 970, 0, 0, 960, 0, 0, 0,
	0, 0, 953, 0, 0, 0, 0, 0, 968, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	960, 0, 0, 0, 0, 0, 953, 959, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	944, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 959, 0, 0, 0, 0, 0, 0, 0, 962,
	970, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	954, 0, 0, 0, 0, 968, 0, 0, 0, 0,
	0, 0, 0, 963, 0, 0, 0, 960, 0, 0,
	0, 0, 0, 953, 954, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 963, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 959, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 961, 0, 0, 949, 950, 951,
	0, 948, 946, 947, 940, 941, 942, 943, 945, 0,
	964, 954, 0, 0, 0, 0, 0, 1546, 961, 0,
	0, 949, 950, 951, 963, 948, 946, 947, 940, 941,
	942, 943, 945, 0, 964, 0, 0, 0, 0, 0,
	0, 1499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 936, 937, 0, 955, 956, 957,
	965, 966, 967, 0, 0, 0, 0, 0, 0, 0,
	958, 0, 0, 0, 0, 0, 0, 939, 0, 0,
	969, 0, 0, 0, 0, 961, 0, 0, 949, 950,
	951, 0, 948, 946, 947, 940, 941, 942, 943, 945,
	938, 964, 0, 0, 0, 2020, 952, 0, 936, 937,
	0, 955, 956, 957, 965, 966, 967, 0, 0, 0,
	0, 0, 0, 0, 958, 0, 0, 0, 0, 0,
	0, 939, 0, 0, 969, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 936, 937, 0, 955, 956,
	957, 965, 966, 967, 938, 944, 0, 0, 0, 0,
	952, 958, 0, 0, 0, 0, 0, 0, 939, 0,
	0, 969, 0, 0, 962, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	968, 938, 0, 0, 0, 0, 0, 952, 0, 0,
	0, 0, 960, 0, 0, 0, 0, 0, 953, 944,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 962, 970,
	0, 0, 0, 959, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 968, 0, 944, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 960, 0, 0, 0,
	0, 0, 953, 0, 0, 962, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 954, 0, 0, 0,
	0, 968, 0, 0, 0, 0, 0, 959, 0, 963,
	0, 0, 0, 960, 0, 0, 0, 0, 0, 953,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 0, 0, 0, 0, 0,
	954, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 963, 0, 0, 0, 0, 0, 0,
	961, 0, 0, 949, 950, 951, 0, 948, 946, 947,
	940, 941, 942, 943, 945, 0, 964, 954, 0, 0,
	2018, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	963, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 961, 0, 0, 949, 950, 951,
	0, 948, 946, 947, 940, 941, 942, 943, 945, 0,
	964, 0, 0, 0, 1963, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 961, 0, 0, 949, 950, 951, 0, 948, 946,
	947, 940, 941, 942, 943, 945, 0, 964, 0, 936,
	937, 1958, 955, 956, 957, 965, 966, 967, 0, 0,
	0, 0, 0, 0, 0, 958, 0, 0, 0, 0,
	0, 0, 939, 936, 937, 969, 955, 956, 957, 965,
	966, 967, 0, 0, 0, 0, 0, 0, 0, 958,
	0, 0, 0, 0, 0, 938, 939, 0, 0, 969,
	0, 952, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 938,
	0, 0, 0, 0, 0, 952, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	936, 937, 0, 955, 956, 957, 965, 966, 967, 0,
	944, 0, 0, 0, 0, 0, 958, 0, 0, 0,
	0, 0, 0, 939, 0, 0, 969, 0, 0, 962,
	970, 0, 0, 0, 944, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 968, 938, 0, 0, 0,
	0, 0, 952, 962, 970, 0, 0, 960, 0, 0,
	0, 0, 0, 953, 0, 0, 0, 0, 0, 968,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 960, 0, 0, 0, 0, 0, 953, 959, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 944, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 959, 0, 0, 0, 0, 0, 0, 0,
	962, 970, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 954, 0, 0, 0, 0, 968, 0, 0, 0,
	0, 0, 0, 0, 963, 0, 0, 0, 960, 0,
	0, 0, 0, 0, 953, 954, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 963, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 959,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 0, 0, 949, 950,
	951, 0, 948, 946, 947, 940, 941, 942, 943, 945,
	0, 964, 954, 0, 0, 1954, 0, 0, 0, 961,
	0, 0, 949, 950, 951, 963, 948, 946, 947, 940,
	941, 942, 943, 945, 0, 964, 0, 0, 0, 1894,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 936, 937, 0, 955, 956,
	957, 965, 966, 967, 0, 0, 0, 0, 0, 0,
	0, 958, 0, 0, 0, 0, 0, 0, 939, 0,
	0, 969, 0, 0, 0, 0, 961, 0, 0, 949,
	950, 951, 0, 948, 946, 947, 940, 941, 942, 943,
	945, 938, 964, 0, 0, 0, 1872, 952, 0, 936,
	937, 0, 955, 956, 957, 965, 966, 967, 0, 0,
	0, 0, 0, 0, 0, 958, 0, 0, 0, 0,
	0, 0, 939, 0, 0, 969, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 936, 937, 0, 955,
	956, 957, 965, 966, 967, 938, 944, 0, 0, 0,
	0, 952, 958, 0, 0, 0, 0, 0, 0, 939,
	0, 0, 969, 0, 0, 962, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 938, 0, 0, 0, 0, 0, 952, 0,
	0, 0, 0, 960, 0, 0, 0, 0, 0, 953,
	944, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 962,
	970, 0, 0, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 968, 0, 944, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 960, 0, 0,
	0, 0, 0, 953, 0, 0, 962, 970, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 954, 0, 0,
	0, 0, 968, 0, 0, 0, 0, 0, 959, 0,
	963, 0, 0, 0, 960, 0, 0, 0, 0, 0,
	953, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 959, 0, 0, 0, 0,
	0, 954, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 963, 0, 0, 0, 0, 0,
	0, 961, 0, 0, 949, 950, 951, 0, 948, 946,
	947, 940, 941, 942, 943, 945, 0, 964, 954, 0,
	0, 1871, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 963, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 0, 0, 949, 950,
	951, 0, 948, 946, 947, 940, 941, 942, 943, 945,
	0, 964, 0, 0, 0, 1762, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 961, 0, 0, 949, 950, 951, 0, 948,
	946, 947, 940, 941, 942, 943, 945, 0, 964, 0,
	936, 937, 1697, 955, 956, 957, 965, 966, 967, 0,
	0, 0, 0, 0, 0, 0, 958, 0, 0, 0,
	0, 0, 0, 939, 936, 937, 969, 955, 956, 957,
	965, 966, 967, 0, 0, 0, 0, 0, 0, 0,
	958, 0, 0, 0, 0, 0, 938, 939, 0, 0,
	969, 0, 952, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	938, 0, 0, 0, 0, 0, 952, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 936, 937, 0, 955, 956, 957, 965, 966, 967,
	0, 944, 0, 0, 0, 0, 0, 958, 0, 0,
	0, 0, 0, 0, 939, 0, 0, 969, 0, 0,
	962, 970, 0, 0, 0, 944, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 938, 0, 0,
	0, 0, 0, 952, 962, 970, 0, 0, 960, 0,
	0, 0, 0, 0, 953, 0, 0, 0, 0, 0,
	968, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 960, 0, 0, 0, 0, 0, 953, 959,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 944, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 959, 0, 0, 0, 0, 0, 0,
	0, 962, 970, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 954, 0, 0, 0, 0, 968, 0, 0,
	0, 0, 0, 0, 0, 963, 0, 0, 0, 960,
	0, 0, 0, 0, 0, 953, 954, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 963,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	959, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 961, 0, 0, 949,
	950, 951, 0, 948, 946, 947, 940, 941, 942, 943,
	945, 0, 964, 954, 0, 0, 1681, 0, 0, 0,
	961, 0, 0, 949, 950, 951, 963, 948, 946, 947,
	940, 941, 942, 943, 945, 0, 964, 0, 0, 0,
	1258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 936, 937, 0, 955,
	956, 957, 965, 966, 967, 0, 0, 0, 0, 0,
	0, 0, 958, 0, 0, 0, 0, 0, 0, 939,
	0, 0, 969, 0, 0, 0, 0, 961, 0, 0,
	949, 950, 951, 0, 948, 946, 947, 940, 941, 942,
	943, 945, 938, 964, 0, 1474, 0, 0, 952, 0,
	936, 937, 0, 955, 956, 957, 965, 966, 967, 0,
	0, 0, 0, 0, 0, 0, 958, 0, 0, 0,
	0, 1174, 0, 939, 0, 0, 969, 0, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 936, 937, 0,
	955, 956, 957, 965, 966, 967, 938, 944, 2103, 0,
	0, 0, 952, 958, 0, 0, 0, 972, 0, 0,
	939, 0, 0, 969, 0, 0, 962, 970, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1175, 0, 968, 938, 0, 0, 0, 0, 0, 952,
	0, 0, 0, 0, 960, 0, 0, 0, 0, 0,
	953, 944, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	962, 970, 0, 0, 0, 959, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 0, 944, 2102,
	0, 0, 0, 0, 0, 0, 0, 0, 960, 0,
	0, 0, 0, 0, 953, 0, 0, 962, 970, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 954, 0,
	0, 0, 0, 968, 0, 0, 0, 0, 0, 959,
	0, 963, 0, 0, 0, 960, 0, 0, 0, 0,
	0, 953, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 959, 0, 0, 0,
	0, 0, 954, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 963, 0, 0, 0, 0,
	0, 0, 961, 0, 0, 949, 950, 951, 0, 948,
	946, 947, 940, 941, 942, 943, 945, 0, 964, 954,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 963, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 961, 0, 0, 949,
	950, 951, 0, 948, 946, 947, 940, 941, 942, 943,
	945, 0, 964, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 961, 0, 0, 949, 950, 951, 0,
	948, 946, 947, 940, 941, 942, 943, 945, 0, 964,
	936, 937, 0, 955, 956, 957, 965, 966, 967, 0,
	0, 0, 0, 0, 0, 0, 958, 0, 0, 0,
	0, 0, 0, 939, 936, 937, 969, 955, 956, 957,
	965, 966, 967, 0, 0, 0, 0, 0, 0, 0,
	958, 0, 0, 0, 0, 0, 938, 939, 0, 0,
	969, 0, 952, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	938, 0, 0, 0, 0, 0, 952, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 936, 937, 0, 955, 956, 957, 965, 966, 967,
	0, 944, 0, 0, 0, 0, 0, 958, 0, 0,
	0, 0, 0, 0, 939, 0, 0, 969, 0, 0,
	962, 970, 0, 0, 0, 944, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 938, 0, 0,
	0, 0, 0, 952, 962, 970, 0, 0, 960, 0,
	0, 0, 0, 0, 953, 0, 0, 0, 0, 0,
	968, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 960, 0, 0, 0, 0, 0, 953, 959,
	480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 944, 0, 0, 0, 0, 1544, 0, 0,
	0, 0, 0, 959, 0, 0, 0, 0, 0, 0,
	0, 962, 970, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 954, 0, 0, 0, 0, 968, 0, 0,
	0, 0, 0, 0, 0, 963, 0, 0, 0, 960,
	0, 0, 0, 0, 0, 953, 954, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 963,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	959, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1685, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 961, 0, 0, 949,
	950, 951, 0, 948, 946, 947, 940, 941, 942, 943,
	945, 0, 964, 954, 0, 0, 0, 0, 0, 0,
	961, 0, 0, 949, 950, 951, 963, 948, 946, 947,
	940, 941, 942, 943, 945, 0, 964, 936, 937, 0,
	955, 956, 957, 965, 966, 967, 0, 0, 0, 0,
	0, 0, 0, 958, 0, 0, 0, 1539, 0, 0,
	939, 0, 0, 969, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 938, 0, 0, 0, 961, 0, 952,
	949, 950, 951, 0, 948, 946, 947, 940, 941, 942,
	943, 945, 0, 964, 936, 937, 0, 955, 956, 957,
	965, 966, 967, 0, 0, 0, 0, 0, 0, 0,
	958, 0, 0, 0, 0, 0, 0, 939, 936, 937,
	969, 955, 956, 957, 965, 966, 967, 0, 944, 0,
	0, 0, 0, 0, 958, 0, 0, 0, 1498, 0,
	938, 939, 0, 0, 969, 0, 952, 962, 970, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 938, 0, 0, 0, 0, 0,
	952, 0, 0, 0, 0, 960, 0, 0, 0, 0,
	0, 953, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 944, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 959, 0, 0, 0,
	0, 0, 0, 0, 962, 970, 0, 0, 0, 944,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	968, 0, 0, 0, 0, 0, 0, 0, 962, 970,
	0, 0, 960, 0, 0, 0, 0, 0, 953, 954,
	0, 0, 0, 0, 968, 0, 0, 0, 0, 0,
	0, 0, 963, 0, 0, 0, 960, 0, 0, 0,
	0, 0, 953, 959, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1505, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 936, 937, 959, 955, 956,
	957, 965, 966, 967, 0, 0, 0, 0, 0, 0,
	0, 958, 0, 0, 0, 0, 954, 0, 939, 0,
	0, 969, 0, 961, 0, 0, 949, 950, 951, 963,
	948, 946, 947, 940, 941, 942, 943, 945, 0, 964,
	954, 938, 0, 0, 0, 0, 0, 952, 0, 0,
	0, 0, 0, 963, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	961, 0, 0, 949, 950, 951, 944, 948, 946, 947,
	940, 941, 942, 943, 945, 0, 964, 0, 0, 0,
	0, 0, 0, 0, 961, 962, 970, 949, 950, 951,
	0, 948, 946, 947, 940, 941, 942, 943, 945, 0,
	964, 968, 936, 937, 0, 955, 956, 957, 965, 966,
	967, 0, 0, 960, 0, 0, 0, 0, 958, 953,
	0, 0, 0, 0, 0, 939, 0, 0, 969, 0,
	0, 0, 0, 0, 936, 937, 0, 955, 956, 957,
	965, 966, 967, 0, 959, 0, 0, 0, 938, 0,
	0, 0, 0, 0, 952, 0, 0, 939, 936, 937,
	969, 955, 956, 957, 965, 966, 967, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	938, 939, 0, 0, 969, 0, 952, 954, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	963, 0, 0, 944, 938, 0, 0, 0, 0, 0,
	952, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 962, 970, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 944, 0, 0, 968, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	960, 0, 0, 0, 962, 970, 953, 0, 0, 944,
	0, 961, 0, 0, 949, 950, 951, 0, 948, 946,
	947, 940, 941, 942, 943, 945, 0, 964, 962, 970,
	0, 0, 960, 0, 0, 0, 0, 0, 953, 31,
	0, 0, 0, 0, 968, 0, 0, 0, 0, 0,
	32, 56, 0, 0, 0, 0, 960, 0, 0, 0,
	0, 0, 953, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 954, 0, 58, 0, 0, 0,
	0, 0, 34, 0, 64, 0, 0, 963, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 47, 0, 0, 954, 0, 0, 0,
	42, 0, 0, 59, 0, 0, 0, 46, 43, 963,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	954, 0, 0, 0, 48, 0, 0, 0, 0, 0,
	44, 0, 0, 963, 0, 0, 0, 0, 961, 0,
	0, 949, 950, 951, 0, 948, 946, 947, 940, 941,
	942, 943, 945, 0, 964, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	961, 0, 0, 949, 950, 951, 0, 948, 946, 947,
	940, 941, 942, 943, 945, 0, 964, 0, 0, 0,
	0, 0, 0, 0, 961, 0, 0, 949, 950, 951,
	0, 948, 946, 947, 940, 941, 942, 943, 945, 0,
	964, 45, 0, 0, 0, 0, 0, 818, 810, 835,
	803, 826, 825, 0, 0, 805, 804, 61, 62, 33,
	837, 836, 49, 0, 60, 0, 0, 0, 0, 50,
	0, 0, 0, 71, 0, 0, 0, 0, 53, 0,
	55, 0, 0, 0, 0, 0, 0, 0, 0, 57,
	0, 0, 831, 0, 823, 822, 0, 0, 73, 0,
	0, 0, 0, 821, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 63, 0, 0, 0, 0, 0,
	820, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 0, 70, 0, 0, 0, 0, 813, 812,
	814, 815, 816, 0, 834, 0, 0, 0, 0, 0,
	0, 68, 0, 0, 0, 0, 0, 818, 810, 835,
	803, 826, 825, 0, 0, 805, 804, 0, 0, 807,
	837, 836, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 824, 0, 0, 0, 811, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 831, 0, 823, 822, 0, 0, 0, 0,
	819, 0, 0, 821, 1193, 1191, 1192, 1195, 1194, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	820, 0, 0, 0, 0, 0, 0, 0, 808, 0,
	0, 0, 0, 0, 0, 0, 0, 817, 809, 0,
	0, 0, 0, 0, 0, 0, 0, 839, 813, 812,
	814, 815, 816, 0, 834, 0, 0, 806, 0, 0,
	832, 833, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 807,
	0, 0, 0, 0, 838, 0, 0, 0, 0, 0,
	0, 824, 0, 0, 0, 811, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	819, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 808, 0,
	0, 0, 0, 0, 0, 0, 0, 817, 809, 0,
	0, 0, 0, 0, 0, 0, 0, 839, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 806, 0, 0,
	832, 833, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 838,
}
var sqlPact = [...]int{

	28056, -1000, 49, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 707, 16196, 16196, 19558, -1000, -1000, -1000, -1000, -1000,
	-1000, 788, 700, 794, 5056, 19558, 19558, 19280, 2045, 2045,
	20948, -1000, -1000, 24284, -1000, 3497, 515, 521, 515, 515,
	563, 20948, 19558, 648, 765, 142, -1000, 906, 21, 24006,
	19558, 1515, 42, 17890, 355, 28056, 19002, 23728, 19558, 18724,
	610, 40, 16765, 19558, -1000, 53, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1327, 299, 53, -1000, 1326,
	1216, 1209, 17890, 23450, 23172, 22894, 22616, -1000, 12123, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 793, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 359, 358, -1000, 18446, -1000, 993,
	-1000, 41, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	992, -1000, 19558, -1000, -1000, 22338, 22060, 686, 357, 946,
	-1000, -1000, 592, 443, 1536, -1000, 59, -1000, -1000, -1000,
	1325, -1000, 991, 1320, 1319, 1318, 1316, 1314, 1310, 434,
	787, 510, -1000, 1308, 946, -1000, 946, -1000, -1000, -1000,
	608, 20948, -1000, -1000, 17890, -1000, 21782, 19558, 19558, 1230,
	21504, -1000, 906, -1000, -1000, -1000, 1051, 1508, 1508, 1508,
	1540, 161, 157, 142, 3, 19558, -1000, 356, 3, 9099,
	9099, -1000, -1000, 355, -1000, 383, 15337, -1000, 8166, -1000,
	893, 1404, 475, 860, 1401, -155, 838, 832, 1400, 15640,
	16765, 40, 37, -1000, -1000, -1000, 4754, 15640, 673, 14184,
	53, -1000, -1000, -1000, 17890, 19558, 19558, 695, 21226, -1000,
	1399, 107, 1398, -1000, 105, 1397, -1000, 105, 1395, 38,
	-1000, -1000, -1000, -1000, -1000, -1000, 355, 18168, 19558, 1589,
	28350, -1000, 10314, -1000, -1000, 16196, 803, 16196, -1000, -1000,
	1585, -1000, 19558, 10314, -1000, 36, 24, 1126, 1150, 12720,
	12429, 1479, 915, -1000, -1000, -1000, 57, 5056, 19558, 1340,
	16196, 19558, 19558, 19558, 19558, 19558, 19558, -1000, 1119, -1000,
	-1000, 19558, 19558, 784, -1000, 19, 14, -1000, 20948, -1000,
	114, -1000, 353, 1074, 450, 108, 20670, 450, 1049, -1000,
	1051, -1000, 982, 1099, 9405, 10314, 142, -1000, -1000, 142,
	142, 10314, -1000, -1000, 19558, 3, 1583, 19558, 93, -1000,
	26827, -1000, -1000, 10314, 10314, 10314, 10314, 10314, 935, 376,
	-1000, 352, 351, 5991, -1000, -1000, 1729, -1000, -1000, -1000,
	163, -1000, -1000, 10314, 53, -1000, -1000, -1000, -1000, 349,
	1743, -1000, 480, -1000, -1000, -1000, 436, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1337, 348, 344, -1000,
	-1000, -1000, -1000, 342, 339, 338, 328, 326, 325, 322,
	321, 315, 314, 308, 305, 294, 293, 289, 868, -1000,
	477, -1000, -1000, 477, 477, -1000, 284, 284, 287, -1000,
	-1000, -1000, -1000, 284, -1000, -1000, -1000, 424, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 288, 93, -1000, -1000, -1000,
	19558, 34, -1000, 27745, -1000, -20, 809, -1000, 17334, 1496,
	1494, 1489, 17890, 1556, 21, 1305, 1547, 21, 1303, 607,
	19558, 19558, 606, 593, 17890, 420, -1000, -1000, -1000, -1000,
	-1000, 19558, -1000, -1000, -22, -1000, -1000, 1301, 33, -1000,
	-1000, 460, 99, 1582, 99, 14462, -1000, 19558, 19558, -1000,
	19558, -1000, -1000, 19558, -1000, 19558, 19558, -1000, 19558, 188,
	16487, 763, 1393, 869, 21, 29, -1000, 1592, -1000, -1000,
	-1000, -1000, 72, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	287, 868, 284, 284, 284, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 424, -1000, -1000, 477, 477, 477, -1000, -1000,
	28, 27745, 589, -1000, 1299, 514, -1000, 457, 23, 882,
	1201, 954, -1000, -1000, -1000, -1000, -6, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1717, -1000, -1000,
	1726, -6, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1742, 5056, -1000, -1000, -1000, 19558, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 19558, 19558, 882,
	1201, -1000, -1000, 17890, 17056, 1581, 1390, 909, -1000, 1578,
	19558, 981, 1038, -1000, 645, 1389, -1000, -1000, -1000, -1000,
	27745, -1000, 27745, 837, 1219, -1000, 1219, -10, -1000, 26790,
	-1000, 283, 18, 460, 9099, 13890, 28230, 28350, 19558, 630,
	10314, 10314, 10314, 10314, 10314, 10314, 10314, 10314, 10314, 10314,
	10314, 10314, 10314, 10314, 10314, 10314, 10314, 10314, 10314, 10314,
	10314, 1089, 10314, 586, 10314, 10314, 10314, 10314, 1553, 899,
	266, 973, 5056, -1000, -1000, 712, 712, 712, 27938, 27938,
	252, 376, -1000, 10314, -1000, 8772, 157, 26404, -12, -1000,
	-1000, -1000, 6903, 458, 27745, 53, 5664, -1000, 1725, 1003,
	1346, 1258, 281, 153, 130, 10314, 10314, 10617, 10617, 10314,
	10920, 10314, 10314, 6297, 10314, 10314, 10314, 10314, 10314, 10314,
	-1000, 280, -1000, -1000, -1000, -1000, 1723, -1000, -1000, 1720,
	-1000, 629, 622, 1715, 460, 128, 8166, -1000, 763, 19558,
	19558, 19558, -1000, -1000, 1035, 20392, 1032, 28350, 19558, -1000,
	278, 275, 1174, 1165, 19558, 19558, 20114, 19836, 19558, 885,
	21, -1000, 274, 21, -1000, 273, 19558, 807, -1000, 19558,
	19558, 773, 1244, 999, -1000, 451, 15640, 672, 1297, 19558,
	752, 10314, 892, -1000, 13596, 484, 19558, 752, 89, -1000,
	-1000, -1000, 410, 19558, -1000, -1000, -1000, 107, -1000, 105,
	105, -1000, -1000, 17890, -1000, -1000, -1000, -1000, -1000, -1000,
	28350, 375, 370, -1000, 1713, 582, -1000, 581, 578, 574,
	-1000, 270, -1000, 10314, 19558, 19558, 1201, -1000, -1000, -1000,
	-1000, 742, -1000, 867, -1000, 13011, -1000, -1000, -1000, -1000,
	-50, -1000, -1000, -1000, -1000, -1000, -1000, 127, 13, -18,
	28350, -1000, -1000, -1000, -1000, -1000, 19558, 298, 19558, 21,
	19558, -1000, 1735, 21, 19558, 1382, 1413, 395, 19558, -1000,
	-1000, -1000, 10314, -1000, -1000, -1000, 21, -1000, 1256, -1000,
	-28, 1462, 1459, -165, 159, 423, -1000, 13302, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 432, 725,
	725, 501, 501, 501, 501, 2478, 340, 2314, 146, 146,
	146, 447, 482, 482, 146, 146, 146, 27938, 27882, 156,
	10314, 10314, 570, 898, 266, 156, 10314, 1705, 156, 156,
	156, -1000, 978, -1000, -1000, -1000, -1000, 1295, 265, 10920,
	10920, -1000, -1000, -1000, 5991, 11526, -1000, -1000, -1000, -1000,
	-1000, 263, 10314, -1000, 26471, -182, 8, -1000, -1000, 10314,
	-138, -153, -1000, -1000, 678, -1000, 10314, -1000, -30, 10314,
	10314, 10314, 123, 122, -1000, 944, 262, 261, 10314, -1000,
	-1000, 27568, 24882, 121, 1294, -114, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 120, 119, 27544, -114, 118, 2457, -1000,
	10920, 10920, 10920, 5991, 251, 115, 3834, -114, 27477, 8469,
	8469, 8469, 113, 27231, 10314, -114, 24858, 3728, 3352, 4,
	-2, -11, 1710, -13, 112, 429, 427, 111, 1256, -1000,
	-1000, -1000, -1000, 569, 566, 1381, -1000, 1030, -1000, 485,
	-1000, 779, 10314, 11829, 248, 244, 880, -1000, 1380, 1092,
	1375, 1092, -1000, -20, 808, -1000, 10314, -1000, 10314, -1000,
	562, -1000, -1000, 547, 451, 1274, 652, -1000, 960, -1000,
	-1000, 669, -1000, -1000, 6600, 27745, -1000, 752, 1500, -23,
	-1000, -1000, -1000, 460, 14462, 13890, 8166, -24, -1000, -1000,
	-1000, 763, -1000, 433, 1699, 104, 1085, 863, 814, 728,
	1695, 27745, -50, -50, -1000, -1000, -1000, -1000, -1000, 19558,
	1236, -1000, 17056, 243, 19558, 241, -1000, 238, -1000, -1000,
	237, 19558, 1132, 395, 15918, -1000, 450, -1000, 103, 1253,
	1534, -1000, 13890, 1197, 1183, 13890, 1101, 948, 948, 948,
	-1000, 234, 791, 423, 4138, 10314, 17612, 951, 75, 101,
	1462, 10314, 156, 156, 10314, 10920, 10920, -1000, 156, -1000,
	-1000, -1000, -1000, -1000, 1269, 231, 10314, 28350, 3389, 3159,
	-29, -1000, 7839, -58, -1000, 10314, -1000, 26380, -1000, -1000,
	369, 1408, -1000, 10314, 27164, 100, 7536, -1000, 27140, -31,
	-31, -1000, 1734, -1000, 15043, 471, 953, 26066, 28230, 28350,
	-1000, 10314, -1000, -1000, 1268, 10314, -1000, 28230, 28350, 10920,
	10920, 10920, 10920, 10920, 10920, 10920, 10920, 10920, 10920, 10920,
	10920, 10920, 10920, 10920, 10920, 10920, 10920, 1173, 10920, 1701,
	1701, 1701, -60, 7209, -1000, 1336, 1268, 10314, 10314, 28350,
	97, 95, 94, -1000, 10314, -114, 10314, 10314, 10314, -1000,
	-1000, -1000, 91, -1000, 1685, -1000, -1000, -1000, -1000, 1253,
	19558, 19558, 19558, 1370, -1000, 1180, -1000, 26029, -33, -1000,
	316, 1516, 10314, -1000, -1000, 227, 11829, 19558, -1000, 1156,
	1247, 506, 19558, -1000, 19558, -1000, 19558, 19558, 19558, -34,
	-35, 19558, 19558, -1000, 15640, 617, 222, -1000, -74, -1000,
	-1000, 212, 21, 752, -1000, -75, -1000, 396, -1000, 367,
	365, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 90,
	-1000, -1000, 1239, -1000, 11829, 220, 19558, 17056, 1564, 11829,
	979, 1153, 395, 15918, -1000, 645, -1000, 455, 10314, 10314,
	1462, 13890, 13890, 1001, 1181, 13890, -1000, -1000, -1000, -1000,
	364, 374, 363, 12123, 17612, -1000, 1678, 1145, -41, -1000,
	-1000, 19558, 219, -1000, 423, 538, 156, 3017, 2403, 10314,
	28350, 27914, -42, 10314, 10314, -1000, -48, -1000, 10314, 362,
	27745, -1000, -1000, -1000, 27745, 10314, 1703, 10314, 88, 87,
	86, -1000, -1000, -1000, 24562, 10314, 85, -1000, 84, 83,
	27745, 1336, 27745, -1000, -1000, 550, 550, 1701, 1701, 1701,
	1701, 264, 2267, 2122, 980, 980, 980, 1022, 491, 491,
	980, 980, 980, 1267, 1110, 218, 3492, 10314, -56, -1000,
	-1000, -1000, 27745, 27745, 82, -1000, -1000, -1000, -114, 210,
	25975, 25710, -1000, 81, 455, -1000, -1000, -1000, 19558, -1000,
	19558, -1000, 19558, 19558, 1272, 1020, -1000, -1000, 1159, 217,
	10920, 19558, -1000, 865, 11829, 1501, 53, 19558, 1501, 25643,
	5664, -61, -65, 1012, -1000, 1004, 10314, -1000, 28350, 1092,
	1092, -1000, 544, 541, 540, 524, -1000, -1000, -76, 14765,
	1733, 1436, 19558, 1487, -1000, -1000, 216, -1000, -1000, -1000,
	930, -66, 11829, -67, 76, 21, -77, 19558, -1000, 395,
	15918, -1000, 1413, -1000, 19558, 27745, -114, -1000, 1001, -1000,
	215, 10314, 13890, -1000, -165, -1000, -78, -1000, 423, -79,
	-1000, 361, -179, -1000, 394, -1000, 423, 206, 19558, 17612,
	10314, 10314, 27914, -84, -1000, 156, 156, -1000, 25619, -1000,
	27745, -1000, 27140, -1000, -1000, -1000, 922, -1000, 25305, -1000,
	-1000, -1000, -1000, 10920, 1266, 197, 28350, 25268, -1000, -1000,
	10314, -1000, -1000, -1000, -1000, -1000, 1111, -1000, -1000, 19558,
	1023, -1000, -1000, 10314, 3492, 189, 1236, 184, -1000, -1000,
	-1000, -1000, -1000, -1000, 1516, -30, -1000, 847, -1000, -1000,
	27745, 1509, -1000, -1000, 19558, 19558, 182, 180, -1000, 175,
	53, -85, -1000, 393, 605, -89, 19558, -1000, -1000, 5358,
	19558, 865, -95, -1000, 1236, -1000, 865, 173, 15918, -1000,
	1132, -94, -1000, 1562, -1000, 19558, 27745, -1000, 423, -1000,
	1673, 17612, 188, -1000, 1145, -1000, 4450, 17612, 19558, -96,
	-1000, 156, 156, -1000, -1000, 69, 953, 1530, -1000, 2528,
	10920, 28350, -97, -1000, 25214, -1000, -1000, 1369, 24949, 1091,
	19558, -1000, 19558, 1501, 67, 19558, 489, 19558, -1000, -1000,
	10314, 10314, 10314, 1733, -1000, -1000, 1732, 691, -1000, 460,
	-1000, 172, 1236, 865, -1000, 1236, 11829, -1000, 1153, 19558,
	169, -107, 17612, -1000, -1000, 341, -1000, -1000, 1669, -1000,
	-112, -1000, -1000, 897, 10314, 2528, -116, -1000, -1000, 1352,
	-1000, 965, 949, 64, -122, -1000, -1000, 108, -1000, 10314,
	-1000, -123, -136, -31, -1000, -1000, 14462, -1000, 19558, -1000,
	1236, -1000, -142, -1000, -1000, -1000, -1000, -1000, 423, 211,
	-1000, 63, 10011, 10011, -114, -1000, 19558, -1000, 976, 975,
	703, -1000, -1000, -1000, -1000, -1000, 1091, 27745, -1000, -1000,
	61, -141, -156, -1000, 865, 17612, -1000, -1000, -1000, -1000,
	11223, 1002, 709, 26736, -1000, -1000, -1000, 1446, -1000, 494,
	1149, 1149, 965, 1703, -1000, 1053, 1236, -1000, 1606, -1000,
	-1000, -1000, -1000, -1000, -1000, 1653, -1000, -1000, 1143, -1000,
	-1000, -1000, -1000, -1000, -1000, 9708, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2016, 2012, 1544, 1703, 2009, 2008, 1683, 2007, 2006,
	2005, 2003, 2002, 1995, 107, 1623, 1587, 28, 1585, 1994,
	96, 1993, 1992, 1991, 105, 1990, 1989, 1988, 1985, 49,
	1984, 1980, 1581, 1575, 1569, 1555, 1979, 1978, 92, 1977,
	20, 1975, 83, 1972, 46, 133, 2184, 126, 1970, 1963,
	1962, 27, 95, 72, 1960, 54, 1958, 1957, 58, 40,
	14, 19, 1954, 124, 121, 1318, 32, 1952, 1951, 134,
	1950, 16, 37, 100, 141, 143, 123, 111, 1944, 1942,
	1941, 1940, 43, 1939, 3, 1938, 1937, 15, 60, 77,
	1936, 13, 38, 1924, 1922, 112, 1921, 73, 98, 1559,
	39, 118, 419, 1919, 76, 10, 75, 1916, 1915, 116,
	34, 1914, 42, 74, 129, 1913, 62, 149, 68, 33,
	66, 99, 1909, 1907, 1898, 97, 1896, 102, 79, 1895,
	1894, 89, 1893, 131, 136, 1889, 1888, 114, 1886, 1885,
	139, 148, 1883, 1880, 147, 1879, 4, 51, 70, 36,
	1543, 1542, 103, 64, 31, 22, 1875, 2041, 632, 783,
	35, 84, 59, 47, 81, 57, 65, 137, 24, 1870,
	1869, 109, 1868, 1861, 1860, 1859, 1857, 82, 1850, 1836,
	78, 130, 11, 7, 17, 88, 44, 55, 86, 120,
	146, 104, 1828, 87, 110, 53, 127, 1827, 1821, 1418,
	113, 1820, 1818, 1817, 1414, 1281, 911, 169, 1814, 1813,
	776, 712, 1812, 1810, 63, 1805, 144, 1802, 1799, 142,
	132, 29, 1798, 56, 71, 94, 1791, 91, 61, 0,
	2042, 1763, 1784, 117, 80, 1782, 1775, 1774, 1773, 41,
	2, 12, 5, 8, 6, 30, 23, 1772, 1770, 119,
	25, 67, 1769, 145, 1768, 1767, 1766, 52, 1764, 21,
	1762, 18, 1758, 1757, 9, 1, 1756, 1755, 138, 1754,
	90, 1753, 1597, 1752, 140, 1751, 1750, 1659, 48, 85,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 53, 53, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 50, 50, 55, 55, 55, 57, 57, 54, 54,
	49, 49, 5, 5, 227, 227, 228, 228, 39, 39,
	43, 43, 40, 41, 41, 42, 42, 6, 6, 6,
	7, 7, 7, 7, 7, 7, 14, 15, 15, 15,
	15, 15, 15, 15, 15, 101, 101, 100, 100, 103,
	103, 16, 16, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 195, 195, 194, 19,
	169, 169, 20, 20, 20, 20, 21, 126, 126, 22,
	22, 22, 22, 23, 28, 268, 268, 268, 272, 272,
	273, 273, 274, 274, 274, 274, 274, 274, 274, 270,
	270, 27, 31, 31, 31, 31, 31, 31, 145, 141,
	141, 143, 143, 143, 143, 64, 140, 140, 140, 140,
	142, 142, 142, 142, 220, 219, 219, 225, 225, 225,
	79, 79, 79, 79, 79, 80, 80, 80, 218, 218,
	218, 218, 226, 226, 226, 226, 226, 226, 81, 81,
	81, 224, 224, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 18, 269, 269, 271, 271,
	33, 33, 34, 34, 35, 35, 35, 35, 10, 10,
	11, 11, 82, 82, 83, 83, 148, 148, 148, 148,
	84, 84, 56, 56, 56, 147, 237, 237, 238, 238,
	238, 238, 238, 238, 239, 239, 239, 239, 239, 239,
	239, 235, 235, 236, 233, 233, 234, 234, 234, 234,
	275, 275, 146, 146, 87, 87, 242, 242, 242, 242,
	240, 240, 240, 240, 240, 243, 241, 244, 244, 244,
	244, 244, 181, 181, 181, 37, 12, 62, 62, 13,
	9, 9, 130, 130, 91, 91, 186, 186, 186, 72,
	72, 51, 51, 51, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 131, 131, 132, 132, 25,
	30, 36, 36, 36, 36, 36, 277, 277, 68, 68,
	68, 68, 69, 69, 144, 144, 144, 144, 144, 63,
	8, 8, 58, 58, 59, 59, 60, 60, 61, 61,
	278, 278, 24, 24, 24, 75, 75, 137, 137, 137,
	139, 139, 138, 138, 138, 116, 116, 116, 38, 96,
	96, 105, 105, 106, 106, 192, 107, 107, 29, 29,
	46, 46, 44, 44, 44, 44, 44, 44, 45, 45,
	47, 47, 47, 47, 47, 47, 47, 250, 250, 250,
	253, 253, 249, 251, 251, 252, 252, 276, 276, 117,
	117, 117, 86, 85, 85, 89, 89, 88, 90, 90,
	185, 114, 114, 114, 114, 133, 134, 134, 135, 135,
	136, 136, 113, 113, 165, 165, 48, 48, 95, 95,
	97, 97, 155, 155, 155, 156, 156, 154, 154, 154,
	154, 187, 187, 187, 187, 187, 187, 187, 187, 266,
	266, 266, 267, 267, 184, 184, 188, 188, 188, 188,
	188, 188, 182, 182, 182, 182, 183, 183, 193, 193,
	120, 120, 120, 120, 118, 118, 119, 119, 189, 189,
	189, 189, 115, 115, 190, 190, 190, 149, 149, 196,
	196, 196, 214, 214, 94, 94, 94, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 198, 198, 198, 198, 200, 200, 200,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 213, 213, 213, 213, 213, 201,
	201, 208, 208, 209, 209, 210, 211, 202, 202, 203,
	203, 204, 205, 212, 212, 212, 212, 216, 216, 206,
	206, 206, 206, 206, 207, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 128,
	128, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 159, 159, 159, 159, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 245, 245, 245, 245,
	245, 245, 245, 247, 247, 248, 248, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 254, 254, 255, 255, 257, 257,
	258, 258, 259, 260, 260, 260, 261, 262, 262, 256,
	256, 263, 263, 263, 264, 264, 265, 265, 265, 265,
	265, 171, 171, 171, 172, 172, 173, 179, 179, 179,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 70, 70, 70, 70, 70,
	102, 102, 168, 168, 166, 166, 166, 170, 170, 121,
	121, 215, 215, 215, 215, 215, 215, 215, 122, 122,
	122, 129, 123, 123, 124, 124, 124, 124, 124, 124,
	162, 163, 125, 125, 125, 164, 164, 174, 178, 178,
	177, 176, 176, 175, 175, 152, 152, 153, 153, 151,
	150, 110, 110, 109, 109, 108, 108, 279, 279, 180,
	180, 111, 111, 112, 104, 104, 191, 191, 191, 191,
	98, 98, 77, 77, 99, 99, 73, 73, 76, 76,
	74, 74, 74, 74, 92, 92, 93, 93, 71, 71,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 217, 217, 217, 167, 65, 65, 65, 66, 66,
	67, 67, 222, 222, 222, 223, 223, 223, 223, 221,
	221, 221, 221, 221, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	2, 0, 7, 6, 1, 1, 1, 3, 3, 0,
	2, 0, 2, 1, 3, 5, 0, 4, 6, 7,
	1, 1, 1, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 4, 6, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 5,
	3, 0, 1, 1, 1, 1, 3, 3, 0, 2,
	3, 2, 3, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 2, 3, 6, 3, 4, 1, 5, 2,
	1, 1, 1, 3, 3, 2, 3, 3, 3, 3,
	1, 3, 3, 2, 1, 1, 3, 1, 1, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 2, 2, 2, 4, 2, 4, 4,
	4, 4, 4, 4, 4, 2, 3, 4, 3, 3,
	4, 4, 2, 5, 5, 2, 2, 0, 2, 0,
	6, 6, 5, 5, 4, 12, 4, 12, 7, 10,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 1,
	8, 0, 1, 1, 0, 3, 2, 0, 3, 1,
	2, 2, 3, 6, 2, 1, 1, 2, 4, 2,
	5, 7, 8, 5, 3, 1, 4, 6, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 5, 2, 0, 6,
	11, 14, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 6,
	8, 8, 10, 8, 10, 1, 0, 2, 0, 2,
	2, 3, 3, 2, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 1, 3, 3, 0, 3,
	8, 11, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 6, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 2, 0, 8, 2,
	0, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 2, 4, 4, 4, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 2, 2, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 3, 3, 0,
	1, 3, 3, 5, 1, 1, 3, 2, 4, 4,
	0, 7, 4, 6, 3, 1, 5, 6, 9, 0,
	2, 3, 1, 3, 2, 0, 3, 4, 5, 4,
	5, 4, 5, 2, 4, 1, 1, 0, 5, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 1, 1, 3, 4, 0, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 5, 2, 1, 1, 1,
	1, 4, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 3, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 4, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 2, 1, 2, 1, 1, 2, 1, 3,
	1, 1, 2, 2, 1, 1, 3, 5, 6, 8,
	6, 6, 4, 4, 1, 1, 1, 5, 1, 3,
	1, 3, 1, 1, 1, 1, 6, 6, 4, 4,
	4, 4, 4, 6, 5, 5, 5, 4, 8, 6,
	6, 4, 4, 4, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 3, 5, 4, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 3, 1, 3, 3, 3, 2, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 0,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 2,
	2, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	1, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	1, 1, 2, 2, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -35, -36, -25, -27, -37,
	-38, 23, 34, 223, 66, -8, -9, -10, -11, -12,
	-13, -252, 94, 102, 124, 205, 101, 87, 118, 226,
	233, -44, -46, 242, -145, 244, 35, 253, 60, 97,
	228, 221, 222, 278, 68, -250, -47, -45, 325, 301,
	307, 237, -48, 262, 293, 328, 262, 133, 80, 296,
	-268, -99, 262, 80, -74, -65, 318, 4, -229, -231,
	20, 21, 23, 33, 34, 35, 40, 44, 47, 54,
	59, 60, 61, 63, 65, 66, 67, 70, 71, 78,
	79, 81, 83, 87, 89, 93, 94, 96, 101, 102,
	108, 109, 112, 114, 119, 124, 125, 126, 127, 134,
	137, 139, 132, 147, 149, 150, 153, 152, 157, 160,
	163, 165, 166, 167, 170, 168, 172, 173, 175, 174,
	180, 182, 183, 185, 188, 191, 194, 197, 198, 199,
	200, 203, 205, 207, 208, 209, 211, 212, 214, 215,
	216, 217, 218, 221, 219, 220, 222, 223, 224, 226,
	228, 229, 231, 243, 254, 233, 234, 235, 236, 239,
	240, 242, 244, 246, 249, 252, 253, 255, 258, 256,
	251, 261, 263, 264, 265, 266, 267, 274, 278, 279,
	280, 281, 284, 285, 286, 288, 290, 291, 292, 297,
	302, 303, 304, 305, 28, 36, 37, 38, 39, 41,
	42, 45, 46, 50, 51, 52, 55, 82, 84, 85,
	100, 103, 104, 110, 120, 122, 128, 129, 138, 140,
	141, 142, 144, 155, 169, 179, 181, 192, 196, 202,
	204, 210, 230, 238, 247, 248, 257, 259, 269, 270,
	271, 275, 276, 293, 294, -268, -73, -65, 80, 89,
	137, 286, 285, 80, 133, 262, 296, -17, 325, -29,
	-7, -15, -4, -24, -38, -14, -32, -18, -33, -34,
	-35, -16, 23, -221, 4, -229, -231, -230, -232, 57,
	69, 117, 136, 130, 146, 148, 156, 158, 171, 193,
	195, 227, 245, 22, 24, 25, 26, 27, 29, 30,
	31, 32, 43, 48, 49, 53, 56, 58, 64, 68,
	72, 73, 74, 75, 76, 77, 86, 88, 90, 91,
	92, 95, 97, 99, 105, 106, 107, 113, 115, 116,
	118, 121, 123, 131, 133, 135, 143, 145, 151, 154,
	159, 161, 162, 176, 177, 178, 184, 186, 187, 189,
	190, 201, 206, 213, 225, 237, 241, 250, 260, 262,
	268, 272, 273, 277, 282, 283, 287, 289, 295, 296,
	298, 299, 300, 301, -65, -65, -65, 205, 22, -272,
	22, -273, -274, 68, 94, 118, 237, 137, 89, 285,
	-272, -69, 233, -65, -141, 160, 240, 54, 230, 274,
	-142, -140, -220, 269, 170, -100, -65, 4, 22, 80,
	59, 81, 119, 133, 134, 64, 65, 150, 263, 269,
	274, 68, 288, 265, -277, 274, 274, -277, -277, -68,
	274, 272, -69, -220, -276, 262, 262, 287, 296, -130,
	80, 283, -45, -47, -46, -88, -89, 282, 143, 99,
	190, -44, -46, -250, -253, 211, -249, -65, -253, -85,
	-86, 22, 91, 329, -189, -73, 187, -112, 325, -3,
	-189, 128, -73, -76, 128, -73, -65, -189, 128, 272,
	329, -99, -92, -65, -151, -150, 327, 116, 116, 325,
	-109, -110, -150, -151, 116, 145, 145, -190, -189, -65,
	128, -77, 128, -76, -101, 128, -100, -101, 128, -195,
	-194, -223, 4, -229, -231, -230, 293, 262, 133, -169,
	325, -126, 325, -65, 22, 186, 329, 186, -65, -141,
	52, -141, 243, 325, -143, -63, -64, 147, 207, 272,
	311, 116, 305, -81, 5, 86, -103, 327, 116, -269,
	186, 116, 116, 116, 116, 116, 116, 305, 147, 207,
	254, 262, 296, 116, -144, -63, -64, -144, 272, -69,
	-115, -189, -100, 128, -65, -100, 133, -65, 128, -88,
	-89, -114, -133, -134, 159, 184, -117, 22, 91, -117,
	-117, 44, 326, 326, 329, -253, -93, 325, -104, -191,
	-157, 318, -159, 316, 317, 322, 176, 306, -171, -161,
	-174, 100, 230, 325, -73, -160, 330, 9, -247, -46,
	29, -172, -173, 48, -65, 7, 8, 5, 6, -71,
	-198, -167, -207, 277, 105, 178, -245, -246, 4, -229,
	-222, -199, -209, -203, -206, 144, 57, 73, 76, 74,
	77, 241, 287, 49, 28, 103, 104, 196, 202, 259,
	275, 276, 128, 179, 129, 55, 120, 155, 93, 37,
	39, 41, 42, 50, 51, 82, 84, 85, 110, 138,
	140, 141, 142, 181, 210, 247, 257, 270, 271, 294,
	-230, -210, -211, -204, -205, -212, -104, -112, 318, -73,
	325, -111, -180, -157, 86, -53, 219, -52, 21, 23,
	94, 291, 100, 251, 266, 234, 251, 266, 234, 219,
	100, 330, 219, 219, 100, -227, -224, 9, -223, 5,
	-74, 329, -221, 318, -228, -227, 255, 326, -98, -73,
	-110, -190, -75, -73, -75, 242, -65, 30, 100, -55,
	329, 47, 224, 100, -55, 329, 100, -55, 100, 326,
	329, -189, 128, -76, 30, -168, -196, -197, -199, -208,
	-202, -206, -207, 40, 46, 45, 267, 169, 238, 248,
	38, 185, 139, 138, 140, 141, 142, 247, 37, 210,
	110, 93, 85, 84, 181, 42, 41, -210, -211, -204,
	-205, 82, 270, 271, 144, 39, 51, 50, 294, 257,
	-102, -157, -268, -274, -268, 30, -140, -220, -102, 329,
	329, 157, -80, 163, 175, 125, -219, 86, -225, -218,
	-181, 9, 277, 105, 186, -224, 8, 317, -217, 7,
	316, -219, 86, 71, -226, 5, 4, -167, -181, 86,
	160, -207, 327, -221, -220, -271, 113, -268, -220, -220,
	-220, -220, -220, -65, 157, -220, -220, 262, 133, 329,
	329, -69, -55, 329, 325, -87, 176, -251, 301, -87,
	325, -66, 128, -65, -251, 176, -114, -134, -133, -135,
	-157, 22, -157, -159, -45, -45, -45, -90, -185, -157,
	-249, 30, -92, -95, 329, 116, 10, 11, 56, 33,
	316, 317, 318, 319, 111, 320, 314, 315, 313, 309,
	310, 311, 62, 164, 232, 13, 14, 15, 26, 189,
	158, 306, 130, 245, 322, 16, 17, 18, 146, 36,
	131, -70, 30, 4, -78, -157, -157, -157, -157, -157,
	195, -108, -152, 323, -46, 325, -46, -157, -102, 7,
	-46, -166, 323, -175, -157, -109, 325, 5, 325, 5,
	-254, 302, 113, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	204, -216, 297, -216, -216, -200, 325, -200, -201, 325,
	-200, 303, 307, 325, -95, -73, 329, 326, 329, 272,
	-131, 64, 58, -147, 128, 58, -233, -65, 64, -234,
	53, 283, 206, 115, -131, 64, -131, 64, 64, -189,
	33, -29, 116, 33, -29, 116, 272, -76, -65, 272,
	272, -189, -193, 308, -65, -193, 329, 116, 326, 329,
	-149, 299, -137, -29, 325, 86, 30, -137, -105, -106,
	-192, -107, -73, 325, -65, -65, -76, -77, -100, -101,
	-101, -17, -194, 100, -20, -29, -24, -38, -14, 326,
	329, -94, 29, -127, 325, 304, 167, 83, 126, 166,
	-128, 236, 326, 329, 272, 116, 274, 326, -64, -63,
	-79, 209, 249, 220, 239, 329, 8, 7, 7, -221,
	-270, -65, -73, -76, -64, -63, -189, -82, -92, -83,
	-65, -148, -147, -235, -236, -233, 133, 283, 106, 30,
	100, -62, 200, 30, 186, 176, -58, 264, 100, -136,
	230, 231, 329, -51, 31, 90, 325, 326, -149, -191,
	-97, -187, 323, -189, -73, -46, -188, 325, -214, -196,
	-213, 215, 216, 214, 218, 217, -196, -100, 269, -157,
	-157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
	-157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
	158, 130, 245, 36, 131, -157, 272, -157, -157, -157,
	-157, 168, 176, 178, 277, 105, 284, 91, 182, -279,
	260, 32, -164, -46, 325, -179, 27, 250, 22, -221,
	-171, 230, 325, -152, -157, -153, -102, 326, 326, 329,
	-102, -170, 324, -166, -178, -177, 298, 326, -102, 295,
	22, 91, 318, 7, -127, -255, 108, 121, 325, 326,
	326, -157, -157, -121, -215, -102, 4, 304, 167, 83,
	126, 166, 236, -121, -122, -157, -102, -123, -158, -159,
	316, 317, 322, 325, 230, -124, -157, -102, -157, 43,
	154, 273, -125, -157, 116, -102, -157, -157, -157, -102,
	-102, -102, 325, 7, 7, 269, 269, 7, -149, 326,
	-180, -52, -73, -65, -65, 176, -147, 128, -57, 176,
	-196, -65, 325, 325, 149, 149, -65, -65, 128, -65,
	128, -65, -65, -53, 219, -29, 325, -29, 325, -65,
	219, -65, -73, 219, -39, 127, 182, -42, 301, -227,
	255, 116, -73, -116, 225, -157, -116, -139, 186, -98,
	293, -65, -116, -96, 329, 116, 311, -98, -55, -55,
	-55, -189, -196, 323, 323, 7, 272, 272, 272, 272,
	325, -157, -270, -270, -63, 281, 61, 209, -225, 329,
	326, 326, 329, -66, 133, -66, -29, -100, 5, -29,
	-73, 100, -59, 96, -278, 311, -65, -185, -20, -113,
	121, -193, 329, 69, -120, 148, 171, 117, 156, 227,
	136, 7, 102, -154, 330, 325, -184, 307, -46, -188,
	-187, 305, -157, -157, 272, -279, 260, -164, -157, 168,
	178, 277, 105, 284, 91, 182, 116, 325, -158, -158,
	-102, -161, 325, -102, 324, 333, 326, -157, 324, 324,
	329, -176, -177, 95, -157, -89, 329, -88, -157, -102,
	-102, 326, 326, -260, 194, 325, 325, -157, 30, 329,
	326, 116, 326, 326, -129, 201, 326, 10, 11, 316,
	317, 318, 319, 111, 320, 314, 315, 313, 309, 310,
	311, 62, 164, 232, 13, 14, 15, 146, 131, -158,
	-158, -158, -102, 325, 326, -162, -163, 116, 113, 30,
	-125, -125, -125, 326, 116, -102, 329, 329, 329, 326,
	326, 326, 7, 326, 329, 326, 305, 305, 326, -113,
	272, 272, 100, 176, 290, -237, -234, -157, -91, -186,
	-65, -248, 325, -245, -246, -71, 325, 325, -50, 94,
	242, -132, 100, -55, 100, -55, 272, -131, 64, -102,
	-102, 272, 272, -42, 116, 261, 188, 255, -104, 177,
	-116, 63, 326, -149, -106, -97, -180, 326, 324, 7,
	7, 326, 167, 126, 166, -128, 166, -128, -128, 7,
	-65, -84, 132, -148, 325, -66, 325, 325, -87, 325,
	-65, -60, 153, -278, -224, -251, 326, -165, 123, 44,
	-187, 148, 148, -187, -120, 148, -118, 193, -118, -118,
	-266, 325, -17, 325, -184, -221, 323, 331, -102, -183,
	-182, 30, -65, 191, 326, -157, -157, -158, -158, 116,
	325, -157, -168, 26, 26, 326, -102, 326, 329, -153,
	-157, 326, -166, 97, -157, 268, 326, 295, -89, -89,
	-89, 5, -261, -65, 325, 299, -88, 326, -214, -196,
	-157, -162, -157, -214, -196, -158, -158, -158, -158, -158,
	-158, -158, -158, -158, -158, -158, -158, -158, -158, -158,
	-158, -158, -158, 91, 176, 182, -158, 329, -102, 326,
	-163, -162, -157, -157, -196, 326, 326, 326, -102, -157,
	-157, -157, 326, 7, -165, -65, -65, -147, 100, -238,
	64, -239, 56, 106, 68, 176, 178, 283, 206, 53,
	86, 213, 326, 326, 329, -72, -109, 56, -72, -157,
	325, -91, -92, 176, 86, 176, 86, 79, 279, -65,
	-65, -73, -65, -65, 326, 326, -65, -73, -228, 269,
	325, -138, 325, 186, -29, -116, 311, 324, 324, 326,
	131, -91, 325, -92, -82, 30, -91, 186, -61, 152,
	-278, -224, -58, -257, 300, -157, -102, -187, -187, -119,
	289, 186, 148, -187, 324, 326, -267, 7, 324, -195,
	-183, 7, -156, -155, 114, 174, 326, -65, 325, -184,
	26, 26, -157, -168, 326, -157, -157, 326, -157, 324,
	-157, 5, -157, 326, 326, 326, -262, -65, -157, 326,
	326, 326, -163, 116, 91, 182, 325, -157, 326, 326,
	329, 326, 326, 326, -257, -147, -65, -100, -65, 106,
	128, 178, 149, 325, -158, -73, -146, -275, 67, 258,
	-186, -51, -100, -51, 326, -102, 326, 326, 178, 178,
	-157, -196, -55, -55, 272, 272, 272, 272, -160, -71,
	-65, -41, -40, 5, 92, -92, 64, -112, -46, 325,
	197, 326, -91, 326, 326, -29, 326, -73, -278, -224,
	-59, -258, -259, -65, -119, 325, -157, -187, -154, 326,
	329, -184, 326, 324, 329, 332, 311, -184, 325, -92,
	-182, -157, -157, 326, 326, -89, -256, 199, 326, -158,
	116, 325, -168, 326, -157, -239, -66, 176, -157, -67,
	325, -84, 325, -72, -89, 213, -54, 56, -65, -65,
	325, 325, 325, 329, 326, -43, 311, 285, 177, 326,
	-65, -65, -146, 326, -84, -146, 325, -224, -60, 329,
	30, -92, -184, 7, -183, -17, -155, -221, 323, -183,
	-92, 326, 326, -89, 44, -158, -168, 326, 326, 100,
	326, -242, 165, -65, -92, -51, 326, -73, -49, 289,
	-100, -102, -102, -102, -40, 5, 242, -149, 325, -84,
	-146, -84, -91, -61, -259, -261, 326, -182, 324, 7,
	326, -263, 208, 231, -102, 326, 106, -240, -243, -241,
	186, 117, 198, 246, 326, 326, -87, -157, 326, 326,
	-89, -105, -92, -84, 326, -184, 324, 326, -264, -265,
	36, 280, 71, -157, -264, -65, -241, 186, -243, 186,
	285, 89, -242, 326, -149, 326, -146, -183, -265, 203,
	112, 230, 203, 112, -244, 173, 224, 47, 242, -244,
	-240, -56, 47, 224, -84, 26, 20, 178, 86, -265,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 0, 0, 0, 0, 80, 81, 82, 83, 84,
	85, 0, 0, 426, 0, 0, 0, 0, 0, 0,
	0, 398, -2, 0, 157, 0, 347, 0, 347, 347,
	351, 0, 0, 428, 313, 425, -2, 436, 0, 0,
	0, 434, 412, 0, 0, -2, 0, 0, 0, 0,
	0, 135, 0, 955, 884, 890, 891, 915, 916, 917,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 956, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
	1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,
	1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
	1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
	1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
	1115, 1116, 1117, 1118, 1119, 0, 0, 886, 955, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 0, 225, 929, 930, 931, 932, 933, 1120,
	1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130,
	1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
	1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
	1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
	1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1213, 1214, 121, 128, 129, 1007, 131, 0,
	138, 139, 140, 142, 143, 144, 145, 146, 147, 148,
	0, 340, 1030, 353, 152, 984, 1035, 943, 1107, 1052,
	160, 170, 0, 1113, -2, 174, 97, 203, 204, 205,
	0, 207, 227, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 222, 0, 358, 346, 358, 343, 344, 345,
	348, 0, 339, 151, 0, 427, 0, 0, 0, 0,
	0, 312, -2, 408, 409, -2, 0, 431, 431, 431,
	0, 0, 409, 0, 417, 1011, 420, 897, 418, 0,
	0, 433, 432, 0, 413, 508, 0, 456, 0, 2,
	0, 1091, 508, 0, 1091, 889, 0, 0, 1091, 0,
	0, 136, 137, 894, 892, 893, 0, 0, 0, 0,
	887, 863, 861, 862, 0, 0, 0, 0, 514, 87,
	1091, 55, 1091, 882, 55, 1091, 95, 55, 1091, 0,
	116, 118, 925, 926, 927, 928, 1118, 0, 0, 0,
	0, 126, 0, 130, 132, 0, 0, 0, 352, 153,
	1080, 155, 0, 0, 159, 161, 162, 0, 0, 0,
	0, 0, 0, 173, 198, 199, 98, 0, 0, 229,
	0, 0, 0, 0, 0, 0, 0, 216, 0, 218,
	219, 0, 0, 0, 341, 354, 355, 342, 0, 350,
	55, 512, 285, 1091, 424, 285, 919, 424, 1091, -2,
	0, 404, 443, 444, 0, 0, 0, 429, 430, 0,
	0, 0, 400, 401, 0, 419, 0, 0, 459, 874,
	878, 879, 611, 0, 0, 0, 0, 0, 0, 701,
	703, 1085, 1107, 0, 705, 706, 0, 708, 710, 711,
	0, 714, 715, 854, 886, 900, 901, 902, 903, 0,
	0, 906, 0, 908, 909, 910, 755, 724, -2, -2,
	898, 543, 544, 545, 546, -2, 1120, 728, 730, 732,
	733, 734, 735, 0, 1069, 1086, 1087, 1103, 1104, 1112,
	1116, 1117, 1091, 1100, 1092, 1081, 1089, 1098, 960, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	924, 573, 574, 579, 580, 582, 459, 457, 509, 510,
	0, 0, 871, 869, 870, 32, 336, 34, 0, 336,
	336, 0, 0, 0, 0, 234, 0, 0, 236, 0,
	0, 0, 0, 0, 0, 499, 64, 65, 201, 202,
	885, 0, 859, 860, 499, 66, 77, 0, 0, 880,
	864, 518, 0, 375, 0, 0, 515, 0, 0, 89,
	0, 53, 54, 0, 91, 0, 0, 93, 0, 426,
	0, 0, 1091, 0, 426, 0, 812, 526, 527, 528,
	529, 530, 608, 533, 534, 535, 536, 537, 538, 539,
	540, 541, 542, 550, 551, 552, 553, 554, 555, 556,
	570, 0, 549, 549, 549, 562, 563, 571, 572, 577,
	578, 589, 590, 592, 594, 588, 588, 588, 585, 586,
	0, 810, 0, 141, 0, 0, 156, 0, 0, 0,
	0, 0, 165, 185, 186, 187, 166, 168, 175, 177,
	178, 179, 188, 189, 190, 191, 302, 0, 304, 911,
	0, 167, 169, 171, 172, 192, 193, 194, 195, 196,
	197, 0, 0, 99, 206, 208, 0, 226, 209, 210,
	211, 212, 213, 214, 217, 220, 221, 0, 0, 0,
	0, 349, 305, 0, 243, 0, 0, 308, 423, 0,
	0, 0, 1091, 918, 363, 0, 407, 441, 442, 445,
	448, 449, 446, 611, 414, 415, 416, 437, 438, 323,
	421, 0, 0, 518, 0, 0, 0, 0, 0, 0,
	790, 791, 792, 793, 794, 795, 798, 796, 797, 799,
	800, 801, 0, 0, 0, 802, 803, 804, 0, 0,
	806, 0, 808, 0, 0, 0, 0, 0, 0, 868,
	0, 0, 0, 877, 805, 616, 617, 618, 639, 640,
	0, 702, 865, 858, 704, 0, -2, 810, 0, 707,
	712, 713, 0, 0, 853, -2, 0, 905, 0, 608,
	757, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	833, 839, 0, 0, 0, 0, 0, 0, 0, 0,
	558, 576, 587, 584, 583, 560, 0, 559, 557, 0,
	561, 0, 0, 0, 518, 0, 0, 873, 0, 0,
	0, 0, 335, 36, 1091, 0, 57, 0, 0, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 232, 0, 0, 233, 0, 0, 0, 888, 0,
	0, 0, 69, 0, 895, 76, 0, 0, 0, 0,
	387, 0, 387, 377, 0, 0, 0, 387, 390, 391,
	393, 394, 0, 0, 516, 88, 883, 55, 96, 55,
	55, 102, 117, 0, 119, 122, 123, 124, 125, 120,
	0, 519, 521, 531, 0, 595, 596, 597, 598, 599,
	600, 609, 127, 0, 0, 0, 0, 158, 163, 164,
	359, 0, 182, 0, 184, 0, 303, 913, 912, 100,
	228, 149, 223, 224, 356, 357, 513, 0, 0, 242,
	894, 244, 246, 247, 248, 249, 919, 0, 919, 0,
	0, 306, 0, 0, 0, 0, 365, 371, 0, 447,
	450, 451, 0, 440, 321, 322, 426, 896, 453, 875,
	499, 460, 0, 470, 508, 485, 475, 0, 612, 522,
	523, 564, 565, 566, 567, 568, 613, 614, 0, 619,
	620, 621, 622, 623, 624, 625, 626, 627, -2, -2,
	-2, 631, 632, 633, -2, -2, -2, 637, 638, -2,
	807, 809, 0, 868, 0, -2, 0, 647, -2, -2,
	-2, 651, 0, 653, 656, 658, 660, 0, 0, 0,
	0, 867, 670, 845, 0, 0, 787, 788, 789, 876,
	655, 0, 0, 866, 857, 0, 0, -2, 709, 0,
	0, 0, 816, 817, 852, 848, 0, 716, 436, 0,
	0, 0, 0, 0, 914, 765, 0, 0, 0, 729,
	731, 0, 0, 0, 0, 820, -2, -2, -2, -2,
	-2, -2, -2, 0, 0, 810, 830, 0, 0, 673,
	0, 0, 0, 0, 1107, 0, 810, 838, 0, 0,
	0, 0, 0, 810, 0, 844, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 453, 511,
	872, 35, 325, 0, 0, 0, 38, 1091, 46, 0,
	257, 0, 0, 0, 0, 0, 338, 47, 1091, 55,
	1091, 55, 48, 33, 336, 230, 0, 231, 0, 329,
	0, 324, 327, 0, 76, 0, 0, 63, 0, 67,
	78, 0, 881, 86, 0, 517, 372, 387, 0, 0,
	379, 376, 374, 518, 0, 0, 0, 0, 90, 92,
	94, 0, 813, 0, 0, 0, 0, 0, 0, 0,
	0, 811, 133, 134, 154, 180, 181, 183, 176, 0,
	251, 284, 0, 0, 919, 0, 240, 285, 307, 309,
	0, 0, 367, 371, 0, 370, 424, 439, 0, 455,
	0, 458, 0, 0, 0, 0, 0, 505, 505, 505,
	503, 479, 426, 485, 0, 0, 497, 0, -2, 475,
	0, 0, -2, -2, 0, 0, 0, 671, -2, 652,
	654, 657, 659, 661, 0, 0, 0, 0, 0, 0,
	0, 672, 0, 0, 855, 858, -2, 811, 814, 815,
	0, 0, 849, 0, 0, 0, 0, 435, 436, 436,
	436, 722, 0, 723, 0, 0, 0, 0, 0, 0,
	738, 0, 739, 740, 0, 0, 741, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 676,
	677, 678, 0, 0, 742, 836, 837, 0, 0, 0,
	0, 0, 0, 747, 0, 843, 0, 0, 0, 751,
	752, 753, 0, 547, 0, 569, 591, 593, 581, 455,
	0, 0, 0, 0, 56, 255, 274, 0, 0, 314,
	320, 320, 0, 725, 726, 0, 0, 0, 40, 0,
	0, 0, 0, 44, 0, 50, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 0, 79, 385, 386,
	373, 384, 0, 387, 392, 389, 395, 0, 524, 0,
	0, 532, 601, 602, 603, 604, 605, 606, 607, 0,
	150, 238, 0, 245, 0, 0, 0, 243, 0, 0,
	0, 369, 371, 0, 362, 363, 422, 759, 0, 0,
	461, 0, 0, 0, 0, 0, 500, 504, 501, 502,
	0, 0, 0, 0, 497, 467, 0, 0, 0, 474,
	496, 0, 495, 484, -2, 615, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 846, 0, 782, 0, 0,
	857, -2, 818, 847, 851, 0, 717, 0, 0, 0,
	0, 907, 763, 764, 768, 0, 0, 727, 0, 0,
	819, 829, 831, 674, 675, 679, 680, 681, 682, 683,
	684, 685, 686, 687, -2, -2, -2, 691, 692, 693,
	-2, -2, -2, 0, 0, 0, 832, 0, 0, 785,
	834, 835, 840, 841, 0, 744, 745, 746, 842, 0,
	0, 0, 575, 0, 759, 331, 333, 37, 0, 256,
	0, 259, 0, 0, 0, 0, 265, 266, 0, 0,
	0, 0, 276, 283, 0, 323, 899, 0, 323, 0,
	0, 0, 0, 0, 52, 0, 0, 337, 0, 55,
	55, 326, 0, 0, 0, 0, 330, 328, 68, 0,
	0, 0, 0, 0, 378, 388, 0, 525, 520, 610,
	0, 0, 0, 0, 0, 0, 0, 0, 360, 371,
	0, 364, 365, 410, 0, 454, 452, 487, 0, 489,
	0, 0, 0, 491, 470, 480, 0, 482, 485, 0,
	472, 0, 0, 465, 0, 464, 485, 493, 0, 0,
	0, 0, -2, 0, 664, -2, -2, 781, 811, 856,
	850, 904, 436, 718, 720, 721, 770, 767, 0, 754,
	736, 737, 828, 0, 0, 0, 0, 811, 784, 743,
	0, 749, 750, 548, 411, 39, 0, 260, 261, 919,
	0, 264, 267, 0, 269, 921, 251, 0, 280, 281,
	315, 316, 319, 317, 320, 436, 278, 0, 41, 42,
	51, 59, 43, 49, 0, 0, 0, 0, 498, 0,
	0, 0, 73, 71, 0, 0, 0, 396, 397, 0,
	0, 283, 0, 273, 251, 241, 283, 0, 0, 366,
	367, 758, 760, 0, 488, 0, 507, 490, 485, 481,
	0, 497, 426, 468, 0, 469, 0, 497, 0, 0,
	476, -2, -2, 665, 783, 0, 436, 0, 756, -2,
	0, 0, 0, 786, 0, 258, 262, 0, 0, 289,
	0, 277, 0, 323, 0, 0, 61, 0, 332, 334,
	0, 0, 0, 0, 75, 72, 0, 0, 381, 518,
	383, 0, 251, 283, 239, 251, 0, 368, 369, 0,
	0, 0, 0, 483, 477, 0, 466, 462, 0, 473,
	0, 494, 719, 773, 0, -2, 0, 699, 748, 0,
	268, 294, 0, 0, 0, 318, 717, 285, 45, 0,
	58, 0, 0, 436, 74, 70, 0, 382, 0, 271,
	251, 310, 0, 361, 761, 762, 506, 471, 485, 0,
	492, 0, 0, 0, 769, 700, 0, 270, 290, 291,
	0, 286, 287, 288, 920, 282, 289, 60, 235, 237,
	0, 518, 0, 272, 283, 497, 463, 766, 771, 774,
	-2, 1055, 952, 0, 772, 263, 292, 0, 293, 0,
	0, 0, 294, 0, 380, 254, 251, 478, 0, 776,
	777, 778, 779, 780, 295, 0, 298, 299, 0, 296,
	279, 250, 252, 253, 311, 0, 297, 300, 301, 775,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 320, 315, 3,
	325, 326, 318, 316, 329, 317, 327, 319, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 333, 328,
	309, 311, 310, 3, 330, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 323, 3, 324, 314, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 331, 313, 332, 322,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 312, 57652, 321, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:785
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:791
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:797
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:823
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:843
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:857
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:864
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:869
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:893
		{
			return unimplemented(sqllex)
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:916
		{
			return unimplemented(sqllex)
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:919
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:926
		{
			return unimplemented(sqllex)
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:929
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:945
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = nil
		}
	case 53:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = DropCascade
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = DropRestrict
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = DropDefault
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:983
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:988
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:989
		{
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:992
		{
			return unimplemented(sqllex)
		}
	case 61:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:993
		{
		}
	case 62:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:997
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1001
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 69:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 70:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 71:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.str = ""
		}
	case 72:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 75:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 76:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1066
		{
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{ /* SKIP DOC */
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1323
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[2].union.unresolvedName(), SetMode: SetModeReset}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1392
		{
			return unimplemented(sqllex)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1406
		{ /* SKIP DOC */
		}
	case 158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1469
		{
			return unimplemented(sqllex)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1475
		{
			return unimplemented(sqllex)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = Low
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.union.val = Normal
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = High
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1584
		{
			return unimplemented(sqllex)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1585
		{
			return unimplemented(sqllex)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1586
		{
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1674
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1678
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1690
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 230:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1721
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1725
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1731
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1735
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1739
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1743
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1814
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1818
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = DropDefault
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1828
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].union.unresolvedName().String())}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1920
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1959
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 285:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2033
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2034
		{
			return unimplemented(sqllex)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2035
		{
			return unimplemented(sqllex)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2036
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2043
		{
			return unimplemented(sqllex)
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2044
		{
			return unimplemented(sqllex)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2045
		{
			return unimplemented(sqllex)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2046
		{
			return unimplemented(sqllex)
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2047
		{
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2050
		{
			return unimplemented(sqllex)
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2053
		{
			return unimplemented(sqllex)
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2056
		{
			return unimplemented(sqllex)
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2057
		{
			return unimplemented(sqllex)
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2058
		{
			return unimplemented(sqllex)
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2059
		{
			return unimplemented(sqllex)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2060
		{
			return unimplemented(sqllex)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2092
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = true
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = false
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2167
		{
			return unimplemented(sqllex)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2168
		{
			return unimplemented(sqllex)
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2171
		{
			return unimplemented(sqllex)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2172
		{
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2176
		{
			sqlVAL.union.val = Ascending
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.union.val = Descending
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 324:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2226
		{
			return unimplemented(sqllex)
		}
	case 334:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2227
		{
			return unimplemented(sqllex)
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = true
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.union.val = false
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2240
		{
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2241
		{
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2274
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2283
		{
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2284
		{
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.str = ""
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.str = ""
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2328
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 360:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.str = ""
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.str = ""
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 367:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.str = ""
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 369:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.str = ""
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2406
		{
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2407
		{
		}
	case 372:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2441
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2471
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2475
		{
			return unimplemented(sqllex)
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2483
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 388:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2505
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2506
		{
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2663
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2733
		{
			return unimplemented(sqllex)
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2734
		{
			return unimplemented(sqllex)
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2735
		{
			return unimplemented(sqllex)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2738
		{
			return unimplemented(sqllex)
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2739
		{
			return unimplemented(sqllex)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2742
		{
			return unimplemented(sqllex)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2745
		{
		}
	case 424:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2746
		{
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2749
		{
			return unimplemented(sqllex)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2750
		{
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2753
		{
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2754
		{
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2758
		{
			sqlVAL.union.val = true
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = false
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = false
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = true
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2777
		{
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2778
		{
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2816
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2836
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2877
		{
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2878
		{
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2936
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = &From{}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2972
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2985
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2990
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3017
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3034
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = nil
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3095
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3101
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = true
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = false
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.str = astFullJoin
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.str = astLeftJoin
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.str = astRightJoin
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.str = astInnerJoin
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3212
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3213
		{
		}
	case 506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3299
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3312
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3313
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3327
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3336
		{
			return unimplemented(sqllex)
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3370
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3395
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3404
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = nil
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3453
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3549
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3581
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3620
		{
		}
	case 588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3621
		{
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = year
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = month
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = day
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = hour
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = minute
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = month
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = hour
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = minute
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = minute
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = nil
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = second
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3716
		{
			return unimplemented(sqllex)
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3751
		{
			return unimplemented(sqllex)
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3915
		{
			return unimplemented(sqllex)
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3953
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3957
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3981
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4150
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4203
		{
			return unimplemented(sqllex)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4204
		{
			return unimplemented(sqllex)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4227
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4243
		{
			return unimplemented(sqllex)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4244
		{
			return unimplemented(sqllex)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4248
		{
			return unimplemented(sqllex)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4265
		{
			return unimplemented(sqllex)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4266
		{
			return unimplemented(sqllex)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4267
		{
			return unimplemented(sqllex)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4268
		{
			return unimplemented(sqllex)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4297
		{
			return unimplemented(sqllex)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4341
		{
			return unimplemented(sqllex)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4342
		{
		}
	case 756:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4357
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = Window(nil)
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4377
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4400
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.str = ""
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4439
		{
			return unimplemented(sqllex)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4440
		{
			return unimplemented(sqllex)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4441
		{
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4444
		{
			return unimplemented(sqllex)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4445
		{
			return unimplemented(sqllex)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4451
		{
			return unimplemented(sqllex)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4452
		{
			return unimplemented(sqllex)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4453
		{
			return unimplemented(sqllex)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4454
		{
			return unimplemented(sqllex)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4455
		{
			return unimplemented(sqllex)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = Any
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = Some
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = All
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = Plus
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = Minus
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = Mult
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = Div
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.union.val = FloorDiv
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = Mod
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = Bitand
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = Bitor
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = Bitxor
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = LT
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = GT
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4520
		{
			sqlVAL.union.val = EQ
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = LE
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = GE
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = NE
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = Like
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = NotLike
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = ILike
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = NotILike
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4561
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4625
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 850:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 852:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 854:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4764
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4818
		{
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4819
		{
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4834
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4853
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4908
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4912
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4937
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4981
		{
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4991
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4995
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5006
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5017
		{
			return unimplemented(sqllex)
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 907:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = DNull
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5056
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 919:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.str = ""
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5097
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 921:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5101
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
