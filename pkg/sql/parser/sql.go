// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:350
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPERIMENTAL_FINGERPRINTS = 57444
const EXPLAIN = 57445
const EXTRACT = 57446
const EXTRACT_DURATION = 57447
const FALSE = 57448
const FAMILY = 57449
const FETCH = 57450
const FILTER = 57451
const FIRST = 57452
const FLOAT = 57453
const FLOORDIV = 57454
const FOLLOWING = 57455
const FOR = 57456
const FORCE_INDEX = 57457
const FOREIGN = 57458
const FROM = 57459
const FULL = 57460
const GRANT = 57461
const GRANTS = 57462
const GREATEST = 57463
const GROUP = 57464
const GROUPING = 57465
const HAVING = 57466
const HELP = 57467
const HIGH = 57468
const HOUR = 57469
const INCREMENTAL = 57470
const IF = 57471
const IFNULL = 57472
const ILIKE = 57473
const IN = 57474
const INTERLEAVE = 57475
const INDEX = 57476
const INDEXES = 57477
const INITIALLY = 57478
const INNER = 57479
const INSERT = 57480
const INT = 57481
const INT2VECTOR = 57482
const INT8 = 57483
const INT64 = 57484
const INTEGER = 57485
const INTERSECT = 57486
const INTERVAL = 57487
const INTO = 57488
const IS = 57489
const ISOLATION = 57490
const JOIN = 57491
const KEY = 57492
const KEYS = 57493
const LATERAL = 57494
const LC_CTYPE = 57495
const LC_COLLATE = 57496
const LEADING = 57497
const LEAST = 57498
const LEFT = 57499
const LEVEL = 57500
const LIKE = 57501
const LIMIT = 57502
const LOCAL = 57503
const LOCALTIME = 57504
const LOCALTIMESTAMP = 57505
const LOW = 57506
const LSHIFT = 57507
const MATCH = 57508
const MINUTE = 57509
const MONTH = 57510
const NAN = 57511
const NAME = 57512
const NAMES = 57513
const NATURAL = 57514
const NEXT = 57515
const NO = 57516
const NO_INDEX_JOIN = 57517
const NORMAL = 57518
const NOT = 57519
const NOTHING = 57520
const NULL = 57521
const NULLIF = 57522
const NULLS = 57523
const NUMERIC = 57524
const OF = 57525
const OFF = 57526
const OFFSET = 57527
const OID = 57528
const ON = 57529
const ONLY = 57530
const OPTIONS = 57531
const OR = 57532
const ORDER = 57533
const ORDINALITY = 57534
const OUT = 57535
const OUTER = 57536
const OVER = 57537
const OVERLAPS = 57538
const OVERLAY = 57539
const PARENT = 57540
const PARTIAL = 57541
const PARTITION = 57542
const PASSWORD = 57543
const PLACING = 57544
const POSITION = 57545
const PRECEDING = 57546
const PRECISION = 57547
const PREPARE = 57548
const PRIMARY = 57549
const PRIORITY = 57550
const RANGE = 57551
const READ = 57552
const REAL = 57553
const RECURSIVE = 57554
const REF = 57555
const REFERENCES = 57556
const REGCLASS = 57557
const REGPROC = 57558
const REGPROCEDURE = 57559
const REGNAMESPACE = 57560
const REGTYPE = 57561
const RENAME = 57562
const REPEATABLE = 57563
const RELEASE = 57564
const RESET = 57565
const RESTORE = 57566
const RESTRICT = 57567
const RETURNING = 57568
const REVOKE = 57569
const RIGHT = 57570
const ROLLBACK = 57571
const ROLLUP = 57572
const ROW = 57573
const ROWS = 57574
const RSHIFT = 57575
const SAVEPOINT = 57576
const SCATTER = 57577
const SEARCH = 57578
const SECOND = 57579
const SELECT = 57580
const SERIAL = 57581
const SERIALIZABLE = 57582
const SESSION = 57583
const SESSION_USER = 57584
const SET = 57585
const SETTING = 57586
const SETTINGS = 57587
const SHOW = 57588
const SIMILAR = 57589
const SIMPLE = 57590
const SMALLINT = 57591
const SMALLSERIAL = 57592
const SNAPSHOT = 57593
const SOME = 57594
const SPLIT = 57595
const SQL = 57596
const START = 57597
const STATUS = 57598
const STDIN = 57599
const STRICT = 57600
const STRING = 57601
const STORING = 57602
const SUBSTRING = 57603
const SYMMETRIC = 57604
const SYSTEM = 57605
const TABLE = 57606
const TABLES = 57607
const TEMPLATE = 57608
const TESTING_RANGES = 57609
const TESTING_RELOCATE = 57610
const TEXT = 57611
const THEN = 57612
const TIME = 57613
const TIMESTAMP = 57614
const TIMESTAMPTZ = 57615
const TO = 57616
const TRAILING = 57617
const TRANSACTION = 57618
const TREAT = 57619
const TRIM = 57620
const TRUE = 57621
const TRUNCATE = 57622
const TYPE = 57623
const UNBOUNDED = 57624
const UNCOMMITTED = 57625
const UNION = 57626
const UNIQUE = 57627
const UNKNOWN = 57628
const UPDATE = 57629
const UPSERT = 57630
const USER = 57631
const USERS = 57632
const USING = 57633
const VALID = 57634
const VALIDATE = 57635
const VALUE = 57636
const VALUES = 57637
const VARCHAR = 57638
const VARIADIC = 57639
const VIEW = 57640
const VARYING = 57641
const WHEN = 57642
const WHERE = 57643
const WINDOW = 57644
const WITH = 57645
const WITHIN = 57646
const WITHOUT = 57647
const YEAR = 57648
const ZONE = 57649
const NOT_LA = 57650
const WITH_LA = 57651
const AS_LA = 57652
const POSTFIXOP = 57653
const UMINUS = 57654

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5473

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 31,
	331, 31,
	-2, 431,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 52,
	99, 414,
	144, 414,
	160, 414,
	185, 414,
	191, 414,
	284, 414,
	-2, 404,
	-1, 66,
	99, 413,
	144, 413,
	160, 413,
	185, 413,
	191, 413,
	284, 413,
	-2, 407,
	-1, 75,
	1, 31,
	331, 31,
	-2, 431,
	-1, 436,
	1, 200,
	331, 200,
	-2, 998,
	-1, 477,
	160, 441,
	185, 441,
	-2, 410,
	-1, 480,
	160, 440,
	185, 440,
	-2, 408,
	-1, 617,
	160, 440,
	185, 440,
	-2, 411,
	-1, 676,
	328, 930,
	-2, 923,
	-1, 677,
	328, 931,
	-2, 924,
	-1, 683,
	5, 599,
	328, 599,
	-2, 1107,
	-1, 707,
	5, 560,
	-2, 1081,
	-1, 708,
	5, 593,
	328, 593,
	-2, 1083,
	-1, 709,
	5, 568,
	-2, 1084,
	-1, 710,
	5, 567,
	-2, 1085,
	-1, 711,
	5, 593,
	328, 593,
	-2, 1088,
	-1, 712,
	5, 593,
	328, 593,
	-2, 1089,
	-1, 713,
	5, 594,
	-2, 1092,
	-1, 714,
	5, 554,
	-2, 1093,
	-1, 715,
	5, 554,
	-2, 1094,
	-1, 716,
	5, 575,
	-2, 1098,
	-1, 717,
	5, 555,
	-2, 1103,
	-1, 718,
	5, 556,
	-2, 1104,
	-1, 719,
	5, 557,
	-2, 1105,
	-1, 720,
	5, 558,
	-2, 1106,
	-1, 721,
	5, 554,
	-2, 1111,
	-1, 722,
	5, 561,
	-2, 1116,
	-1, 723,
	5, 559,
	-2, 1119,
	-1, 724,
	5, 591,
	328, 591,
	-2, 1121,
	-1, 725,
	5, 595,
	-2, 1124,
	-1, 726,
	5, 597,
	-2, 1125,
	-1, 727,
	5, 590,
	328, 590,
	-2, 1129,
	-1, 999,
	99, 414,
	144, 414,
	160, 414,
	185, 414,
	191, 414,
	284, 414,
	-2, 718,
	-1, 1008,
	328, 907,
	-2, 895,
	-1, 1223,
	13, 0,
	14, 0,
	15, 0,
	311, 0,
	312, 0,
	313, 0,
	-2, 634,
	-1, 1224,
	13, 0,
	14, 0,
	15, 0,
	311, 0,
	312, 0,
	313, 0,
	-2, 635,
	-1, 1225,
	13, 0,
	14, 0,
	15, 0,
	311, 0,
	312, 0,
	313, 0,
	-2, 636,
	-1, 1229,
	13, 0,
	14, 0,
	15, 0,
	311, 0,
	312, 0,
	313, 0,
	-2, 640,
	-1, 1230,
	13, 0,
	14, 0,
	15, 0,
	311, 0,
	312, 0,
	313, 0,
	-2, 641,
	-1, 1231,
	13, 0,
	14, 0,
	15, 0,
	311, 0,
	312, 0,
	313, 0,
	-2, 642,
	-1, 1234,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	308, 0,
	314, 0,
	-2, 647,
	-1, 1240,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	308, 0,
	314, 0,
	-2, 649,
	-1, 1242,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	308, 0,
	314, 0,
	-2, 653,
	-1, 1243,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	308, 0,
	314, 0,
	-2, 654,
	-1, 1244,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	308, 0,
	314, 0,
	-2, 655,
	-1, 1245,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	308, 0,
	314, 0,
	-2, 656,
	-1, 1272,
	196, 789,
	-2, 792,
	-1, 1301,
	117, 829,
	328, 930,
	-2, 923,
	-1, 1302,
	117, 830,
	-2, 1077,
	-1, 1303,
	117, 831,
	-2, 997,
	-1, 1304,
	117, 832,
	-2, 965,
	-1, 1305,
	117, 833,
	-2, 981,
	-1, 1306,
	117, 834,
	-2, 996,
	-1, 1307,
	117, 835,
	-2, 1043,
	-1, 1464,
	99, 414,
	144, 414,
	160, 414,
	185, 414,
	191, 414,
	284, 414,
	-2, 490,
	-1, 1468,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	308, 0,
	314, 0,
	-2, 648,
	-1, 1469,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	308, 0,
	314, 0,
	-2, 650,
	-1, 1474,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	308, 0,
	314, 0,
	-2, 651,
	-1, 1492,
	196, 788,
	-2, 791,
	-1, 1681,
	1, 491,
	69, 491,
	99, 491,
	118, 491,
	122, 491,
	124, 491,
	137, 491,
	144, 491,
	149, 491,
	157, 491,
	160, 491,
	172, 491,
	185, 491,
	187, 491,
	191, 491,
	226, 491,
	228, 491,
	284, 491,
	291, 491,
	301, 491,
	302, 491,
	310, 491,
	327, 491,
	329, 491,
	331, 491,
	332, 491,
	-2, 490,
	-1, 1683,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	308, 0,
	314, 0,
	-2, 652,
	-1, 1688,
	147, 0,
	-2, 668,
	-1, 1698,
	196, 790,
	-2, 793,
	-1, 1732,
	13, 0,
	14, 0,
	15, 0,
	311, 0,
	312, 0,
	313, 0,
	-2, 695,
	-1, 1733,
	13, 0,
	14, 0,
	15, 0,
	311, 0,
	312, 0,
	313, 0,
	-2, 696,
	-1, 1734,
	13, 0,
	14, 0,
	15, 0,
	311, 0,
	312, 0,
	313, 0,
	-2, 697,
	-1, 1738,
	13, 0,
	14, 0,
	15, 0,
	311, 0,
	312, 0,
	313, 0,
	-2, 701,
	-1, 1739,
	13, 0,
	14, 0,
	15, 0,
	311, 0,
	312, 0,
	313, 0,
	-2, 702,
	-1, 1740,
	13, 0,
	14, 0,
	15, 0,
	311, 0,
	312, 0,
	313, 0,
	-2, 703,
	-1, 1860,
	147, 0,
	-2, 669,
	-1, 1863,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	308, 0,
	314, 0,
	-2, 672,
	-1, 1864,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	308, 0,
	314, 0,
	-2, 674,
	-1, 1969,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	308, 0,
	314, 0,
	-2, 673,
	-1, 1970,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	308, 0,
	314, 0,
	-2, 675,
	-1, 1977,
	147, 0,
	-2, 704,
	-1, 2033,
	147, 0,
	-2, 705,
	-1, 2098,
	36, 0,
	131, 0,
	159, 0,
	247, 0,
	308, 0,
	314, 0,
	-2, 1080,
}

const sqlPrivate = 57344

const sqlLast = 28934

var sqlAct = [...]int{

	677, 2097, 2075, 1638, 2122, 2039, 2076, 2096, 2077, 1676,
	1101, 1677, 1826, 1462, 917, 1950, 1904, 1709, 1187, 803,
	481, 502, 1851, 488, 65, 1930, 667, 675, 1585, 1648,
	1783, 289, 1769, 88, 88, 88, 1459, 1837, 1093, 1162,
	923, 1438, 1586, 526, 1831, 307, 88, 88, 88, 1166,
	51, 88, 674, 1440, 88, 764, 766, 804, 291, 20,
	1553, 1654, 88, 88, 544, 1388, 1180, 65, 653, 1195,
	88, 88, 772, 1503, 88, 1161, 1552, 88, 88, 88,
	88, 1450, 1270, 88, 88, 919, 1004, 1165, 1194, 1382,
	743, 1133, 1202, 740, 1663, 787, 1053, 1062, 1102, 65,
	1445, 636, 647, 1257, 1280, 1254, 1200, 1327, 1085, 940,
	437, 866, 776, 603, 1298, 296, 30, 745, 1117, 486,
	1153, 295, 16, 517, 297, 8, 773, 995, 1126, 646,
	305, 637, 604, 1197, 20, 1034, 538, 1038, 545, 536,
	1169, 480, 945, 539, 1784, 1095, 491, 620, 619, 423,
	868, 669, 621, 66, 864, 80, 433, 414, 532, 780,
	84, 624, 489, 602, 1491, 1962, 789, 426, 1963, 485,
	789, 948, 949, 67, 1130, 1094, 789, 2113, 1098, 2092,
	769, 2087, 1782, 2086, 1136, 2083, 1136, 2073, 769, 277,
	1123, 30, 2068, 2064, 951, 769, 769, 16, 1523, 1524,
	8, 1541, 1542, 1543, 1460, 2035, 1399, 499, 1123, 2029,
	505, 467, 769, 512, 508, 1495, 485, 950, 1131, 478,
	1496, 2011, 2007, 965, 1782, 769, 2002, 1971, 1960, 2001,
	1123, 798, 1957, 493, 1944, 1958, 1136, 1782, 1400, 477,
	1941, 71, 1939, 769, 1915, 1782, 2017, 769, 1914, 89,
	1538, 1782, 1886, 1865, 1862, 1136, 1136, 1123, 1132, 1129,
	1854, 1803, 1802, 1136, 1136, 1136, 1089, 73, 1781, 1330,
	759, 1782, 304, 956, 434, 1692, 1624, 1619, 1136, 1092,
	1092, 1570, 947, 1086, 1571, 88, 88, 88, 88, 88,
	1568, 548, 1567, 1136, 308, 1136, 1566, 1494, 74, 1136,
	1529, 1492, 1136, 1086, 1136, 1448, 69, 1448, 1427, 946,
	1136, 769, 70, 1191, 1745, 1140, 769, 64, 1136, 1135,
	1545, 1122, 1136, 1695, 1123, 1089, 966, 1424, 1134, 1051,
	71, 68, 304, 1091, 1428, 1544, 1092, 468, 1274, 1050,
	1186, 486, 1049, 42, 790, 948, 949, 546, 790, 1148,
	632, 912, 43, 1539, 790, 797, 73, 1502, 798, 911,
	728, 858, 857, 769, 515, 561, 498, 75, 951, 948,
	949, 521, 1845, 1785, 44, 890, 71, 64, 582, 2111,
	1463, 2095, 2082, 2044, 2030, 1942, 1891, 74, 1887, 1879,
	1878, 950, 951, 1877, 967, 69, 1873, 1128, 541, 541,
	631, 70, 73, 42, 1872, 309, 1871, 1817, 1811, 1760,
	88, 1755, 43, 1754, 1753, 950, 1703, 1681, 533, 1127,
	1097, 1540, 1523, 1524, 525, 88, 1653, 1628, 88, 88,
	1575, 1572, 542, 74, 44, 1560, 1551, 1522, 1519, 1518,
	1516, 1523, 1524, 1508, 1507, 736, 1430, 956, 1005, 1426,
	68, 793, 1461, 1399, 1344, 788, 1295, 1294, 523, 631,
	1266, 915, 1012, 630, 922, 1711, 68, 88, 2056, 2014,
	88, 956, 88, 88, 88, 2000, 88, 961, 959, 960,
	952, 953, 954, 955, 957, 958, 1999, 71, 1998, 1626,
	1990, 88, 1988, 1005, 1979, 55, 1966, 946, 618, 1535,
	1536, 1537, 88, 1953, 1534, 1532, 1533, 1525, 1526, 1527,
	1528, 1530, 1531, 73, 1937, 548, 88, 1901, 1884, 1856,
	735, 1820, 307, 548, 1529, 88, 1808, 1788, 1687, 1668,
	88, 88, 88, 1646, 88, 1644, 1643, 1641, 1594, 1593,
	549, 1550, 1512, 1529, 74, 570, 1511, 71, 1488, 1810,
	1483, 617, 69, 88, 88, 55, 1259, 1267, 70, 1415,
	1373, 88, 1371, 88, 571, 1358, 1357, 1337, 88, 778,
	1293, 1190, 1039, 73, 1042, 548, 548, 68, 948, 949,
	1046, 1032, 610, 307, 613, 88, 88, 1031, 88, 88,
	88, 88, 88, 88, 88, 564, 566, 734, 1030, 88,
	88, 951, 1029, 609, 74, 1028, 1027, 88, 1026, 1025,
	1024, 1023, 69, 1022, 1021, 88, 607, 1020, 70, 1019,
	1018, 1017, 1016, 1009, 950, 605, 998, 68, 921, 916,
	873, 873, 640, 88, 503, 792, 88, 1670, 795, 635,
	1358, 763, 478, 568, 557, 627, 628, 521, 555, 2094,
	2066, 550, 770, 633, 952, 953, 954, 955, 957, 958,
	1961, 1867, 477, 533, 1846, 1842, 1816, 1815, 1409, 524,
	1408, 1523, 1524, 996, 736, 944, 768, 2004, 304, 753,
	954, 955, 957, 958, 1964, 1441, 799, 574, 779, 576,
	801, 782, 1814, 1401, 1843, 893, 1086, 751, 1463, 1044,
	1574, 926, 486, 1045, 914, 1573, 1467, 594, 577, 1014,
	920, 1383, 752, 891, 598, 1094, 850, 1832, 852, 851,
	1712, 1499, 1281, 64, 854, 1035, 575, 670, 886, 885,
	879, 1525, 1526, 1527, 1528, 1530, 1531, 1395, 1581, 88,
	2047, 2109, 730, 898, 1796, 2006, 2108, 88, 599, 42,
	1139, 88, 1527, 1528, 1530, 1531, 913, 475, 43, 88,
	88, 460, 461, 88, 549, 736, 466, 928, 465, 930,
	88, 308, 549, 929, 1421, 1925, 285, 1055, 478, 942,
	44, 478, 478, 1605, 88, 1011, 88, 88, 1063, 88,
	1924, 1923, 88, 1922, 88, 88, 1056, 88, 936, 548,
	1609, 937, 938, 746, 1608, 747, 1578, 1008, 1577, 1625,
	1470, 1074, 884, 883, 1077, 877, 874, 1414, 1413, 1412,
	281, 65, 1411, 1241, 549, 549, 65, 848, 1130, 1114,
	286, 1313, 308, 1137, 1055, 1083, 1082, 1079, 856, 1096,
	1054, 1096, 855, 78, 1067, 1069, 574, 1036, 1037, 606,
	514, 1066, 1807, 1040, 2005, 546, 1341, 1340, 1212, 1043,
	895, 1118, 1181, 899, 900, 901, 902, 903, 909, 282,
	910, 470, 1131, 906, 907, 550, 748, 1047, 1612, 1256,
	1256, 1088, 309, 550, 1072, 575, 746, 1059, 747, 1906,
	1614, 307, 958, 71, 887, 1080, 1084, 77, 88, 757,
	746, 55, 747, 1385, 1111, 541, 553, 541, 774, 88,
	88, 88, 1132, 1129, 756, 892, 88, 88, 1120, 73,
	484, 1001, 584, 88, 1119, 1109, 1281, 1121, 1100, 567,
	1596, 1110, 754, 1144, 756, 550, 550, 1115, 1112, 2108,
	1113, 471, 1065, 309, 1146, 2054, 783, 755, 88, 595,
	74, 307, 754, 842, 662, 1134, 2070, 2119, 69, 748,
	287, 1378, 476, 1147, 70, 483, 472, 755, 1040, 888,
	1043, 1238, 1142, 748, 1145, 473, 1393, 1633, 1389, 2071,
	1037, 1036, 1134, 290, 1192, 1531, 307, 85, 85, 279,
	1141, 1375, 2125, 1603, 288, 2079, 1420, 761, 908, 1480,
	406, 407, 408, 760, 1993, 425, 1203, 1210, 438, 596,
	1523, 1524, 485, 1422, 1478, 1389, 425, 438, 284, 283,
	1064, 1152, 1523, 1524, 492, 492, 1159, 76, 279, 2130,
	1777, 279, 279, 511, 279, 573, 552, 85, 518, 789,
	1263, 572, 948, 949, 1158, 1261, 1156, 1134, 549, 1160,
	1052, 1128, 778, 88, 88, 88, 2118, 597, 1033, 88,
	1176, 79, 88, 1778, 1630, 951, 1236, 1239, 88, 88,
	88, 88, 88, 1975, 1538, 749, 2080, 1475, 1193, 1597,
	88, 1211, 1907, 88, 88, 1369, 1343, 1476, 950, 1938,
	548, 1481, 1278, 88, 1235, 1184, 1185, 993, 88, 744,
	88, 573, 1510, 1664, 1631, 482, 1680, 88, 1351, 1472,
	1255, 1453, 1529, 485, 1613, 2078, 1264, 88, 1355, 2123,
	2107, 2105, 1268, 1265, 1529, 2081, 1825, 878, 875, 1178,
	1456, 587, 1370, 562, 560, 1372, 1308, 623, 88, 88,
	308, 1289, 1662, 1345, 956, 1741, 1882, 2117, 486, 548,
	1454, 622, 1381, 2136, 1773, 1917, 1774, 412, 749, 550,
	1916, 1391, 729, 1368, 1899, 1539, 1397, 1985, 1852, 1346,
	2124, 88, 749, 88, 1134, 88, 623, 1539, 1795, 88,
	1580, 1407, 1237, 88, 1776, 1794, 1252, 1477, 2126, 1792,
	1354, 1779, 1350, 1179, 1479, 1629, 927, 966, 918, 2040,
	308, 1250, 88, 415, 873, 622, 1403, 2131, 1404, 1405,
	1394, 1429, 1649, 1431, 65, 905, 1384, 790, 859, 1402,
	1840, 1455, 1355, 1827, 420, 1900, 1360, 1359, 1853, 416,
	1659, 1742, 1432, 1540, 1658, 308, 1435, 1743, 1883, 279,
	534, 279, 438, 438, 572, 1540, 2135, 531, 530, 1118,
	1406, 309, 486, 1419, 417, 483, 935, 863, 1417, 1418,
	1423, 614, 1775, 1639, 1246, 967, 1425, 1897, 1271, 1818,
	1262, 1466, 1247, 419, 1248, 1275, 1793, 1449, 1253, 1283,
	1791, 1380, 1655, 810, 1446, 1433, 1292, 1978, 1881, 1898,
	1300, 1300, 1311, 1554, 1322, 861, 1443, 1686, 836, 1611,
	1334, 1335, 1336, 1447, 1501, 889, 1120, 862, 1465, 1444,
	486, 309, 1119, 1517, 1482, 1121, 1534, 1532, 1533, 1525,
	1526, 1527, 1528, 1530, 1531, 1555, 1453, 1386, 1534, 1532,
	1533, 1525, 1526, 1527, 1528, 1530, 1531, 1138, 1090, 549,
	415, 1078, 1075, 1473, 1471, 1456, 309, 601, 961, 959,
	960, 952, 953, 954, 955, 957, 958, 1451, 600, 593,
	592, 420, 591, 1487, 558, 1454, 416, 590, 589, 486,
	588, 1449, 585, 418, 1249, 529, 522, 1015, 897, 563,
	1452, 1251, 438, 438, 1498, 1592, 1591, 1291, 2074, 2037,
	1766, 417, 1601, 1599, 1579, 1839, 1457, 1437, 549, 1182,
	88, 88, 1932, 682, 1174, 1116, 796, 794, 791, 786,
	419, 1590, 762, 758, 750, 1700, 1439, 1188, 625, 2109,
	1453, 425, 421, 881, 279, 88, 438, 612, 438, 88,
	615, 88, 1557, 1558, 1559, 1934, 1455, 1620, 88, 1456,
	1071, 548, 579, 496, 1576, 492, 528, 527, 1645, 88,
	550, 1451, 88, 81, 1583, 3, 279, 1618, 1617, 1454,
	1600, 307, 1602, 88, 1995, 1785, 1604, 583, 2032, 1610,
	85, 1642, 1656, 1671, 1452, 1055, 1189, 1055, 849, 279,
	629, 1070, 65, 1068, 279, 279, 279, 626, 784, 1622,
	1669, 1615, 1458, 1650, 1076, 1623, 1651, 1368, 1621, 1838,
	302, 25, 1073, 1689, 1632, 1634, 1635, 279, 279, 550,
	418, 88, 497, 301, 24, 85, 1640, 85, 1657, 948,
	949, 1660, 438, 580, 2018, 1705, 1706, 1707, 1652, 1486,
	1455, 504, 519, 520, 1661, 411, 516, 1489, 1823, 438,
	438, 1177, 85, 438, 438, 438, 438, 438, 904, 1665,
	1666, 300, 23, 438, 438, 1505, 1506, 298, 22, 421,
	1173, 425, 1099, 299, 11, 950, 303, 10, 943, 925,
	853, 802, 1203, 1716, 1696, 1125, 25, 2133, 88, 88,
	88, 1203, 1721, 1699, 2134, 422, 1713, 492, 1549, 24,
	518, 1672, 2067, 459, 732, 88, 2021, 1718, 1849, 1562,
	88, 731, 88, 1761, 88, 88, 88, 1715, 1636, 88,
	88, 1627, 548, 1748, 1752, 1569, 1720, 1523, 1524, 1786,
	1592, 1591, 1789, 1410, 293, 9, 1342, 23, 1869, 1765,
	1749, 948, 949, 22, 1790, 292, 7, 679, 1762, 11,
	1339, 1606, 10, 1607, 88, 88, 1590, 294, 4, 1150,
	1149, 548, 462, 463, 1338, 1288, 1314, 1151, 1002, 88,
	88, 2053, 1931, 88, 1708, 1434, 1012, 1010, 1592, 1591,
	1819, 548, 88, 1592, 1591, 1824, 810, 810, 1812, 88,
	469, 1848, 1905, 1821, 1806, 413, 1813, 896, 586, 1844,
	549, 836, 836, 279, 1590, 1857, 1667, 2069, 1874, 1590,
	9, 1060, 1509, 1828, 1949, 279, 1829, 1861, 1974, 1290,
	308, 7, 88, 279, 1081, 1013, 41, 279, 835, 1830,
	1822, 486, 1588, 4, 1087, 656, 1767, 546, 1835, 1836,
	1582, 1675, 1841, 1168, 1167, 1847, 948, 949, 279, 310,
	1107, 1108, 882, 279, 678, 867, 279, 876, 438, 438,
	1299, 438, 1204, 733, 680, 807, 681, 808, 1693, 951,
	1041, 668, 805, 1103, 1260, 1279, 1497, 88, 1006, 88,
	648, 307, 88, 660, 659, 1276, 554, 1850, 54, 1880,
	88, 569, 950, 432, 1392, 1809, 307, 1183, 810, 931,
	1598, 474, 1520, 556, 1320, 1312, 1309, 608, 739, 994,
	1104, 550, 1909, 836, 581, 1911, 1398, 1892, 1124, 1592,
	1591, 88, 634, 939, 495, 494, 1893, 1163, 578, 860,
	1746, 309, 1143, 987, 984, 1908, 88, 464, 778, 548,
	1987, 1756, 1175, 88, 1927, 1590, 1935, 1353, 2129, 1994,
	1595, 88, 2046, 72, 2003, 1929, 1379, 1592, 1591, 1940,
	1933, 810, 1154, 29, 1919, 26, 21, 88, 88, 19,
	1959, 549, 18, 279, 279, 279, 836, 28, 1965, 1968,
	279, 1164, 1948, 1590, 1952, 17, 1926, 518, 27, 1956,
	15, 1946, 1943, 14, 1947, 13, 12, 1314, 1314, 40,
	39, 1973, 810, 1920, 1921, 38, 1967, 37, 88, 36,
	549, 1895, 279, 35, 1980, 6, 5, 836, 1989, 2,
	1955, 1, 0, 0, 0, 0, 1910, 0, 0, 0,
	549, 0, 0, 88, 88, 0, 1834, 1983, 0, 0,
	0, 0, 0, 0, 1992, 88, 0, 0, 1984, 88,
	0, 0, 0, 1991, 0, 0, 2012, 548, 1314, 1314,
	1314, 0, 0, 0, 88, 0, 2010, 0, 0, 809,
	88, 2013, 1523, 1524, 0, 307, 88, 88, 0, 2022,
	2020, 0, 550, 638, 638, 2027, 0, 0, 2016, 1523,
	1524, 0, 741, 0, 65, 2024, 0, 0, 486, 88,
	0, 88, 2023, 2019, 88, 2031, 307, 0, 0, 2034,
	0, 0, 2015, 0, 0, 0, 2028, 279, 1348, 1349,
	2043, 550, 0, 1060, 2057, 0, 1356, 2059, 88, 0,
	308, 88, 1361, 1362, 1364, 1366, 1367, 2052, 2058, 2061,
	2042, 550, 2065, 2062, 1374, 308, 2063, 1376, 279, 0,
	0, 1592, 1591, 2060, 0, 0, 2055, 279, 0, 0,
	0, 0, 279, 0, 1396, 88, 0, 88, 1913, 0,
	2084, 279, 2091, 0, 1529, 2089, 0, 1590, 0, 0,
	0, 279, 2088, 0, 0, 88, 0, 0, 549, 2102,
	2093, 1529, 0, 0, 2106, 2104, 1484, 1485, 0, 0,
	2110, 0, 1154, 1154, 88, 2025, 2090, 0, 0, 0,
	2116, 932, 934, 2115, 1314, 1314, 652, 0, 941, 2114,
	0, 835, 835, 2128, 2127, 0, 0, 1539, 2132, 0,
	988, 989, 990, 991, 992, 925, 2048, 925, 2112, 438,
	1000, 309, 0, 279, 1539, 2137, 0, 1442, 0, 0,
	1007, 278, 0, 0, 0, 0, 309, 1546, 1547, 1548,
	838, 0, 0, 0, 0, 0, 279, 837, 1314, 1314,
	1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,
	1314, 1314, 1314, 1314, 1314, 1314, 1314, 0, 1314, 0,
	500, 948, 949, 507, 510, 1540, 500, 0, 0, 550,
	0, 0, 0, 806, 0, 0, 549, 0, 0, 0,
	0, 0, 1540, 0, 951, 0, 0, 0, 0, 0,
	0, 810, 0, 0, 308, 0, 0, 0, 0, 0,
	0, 0, 0, 835, 0, 0, 836, 950, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 810, 810, 0, 308, 0, 0, 0, 0,
	0, 810, 810, 0, 657, 52, 0, 836, 836, 0,
	0, 0, 0, 0, 0, 0, 836, 836, 2049, 2050,
	2051, 1525, 1526, 1527, 1528, 1530, 1531, 0, 0, 0,
	0, 0, 0, 956, 810, 0, 835, 1533, 1525, 1526,
	1527, 1528, 1530, 1531, 0, 0, 0, 0, 52, 836,
	0, 0, 2072, 1684, 1685, 0, 0, 550, 0, 0,
	0, 0, 0, 1587, 0, 0, 0, 0, 0, 0,
	479, 0, 0, 487, 0, 309, 0, 835, 0, 0,
	52, 0, 0, 0, 0, 0, 966, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 809, 809, 279, 279, 309, 1722, 1723, 1724,
	1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734,
	1735, 1736, 1737, 1738, 1739, 1740, 0, 1744, 0, 1637,
	0, 1523, 1524, 1060, 0, 925, 0, 0, 0, 0,
	0, 500, 1647, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 967, 0, 279, 0, 0, 0,
	0, 1314, 0, 0, 0, 810, 0, 1679, 0, 0,
	0, 0, 0, 0, 0, 638, 0, 0, 0, 0,
	836, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 0, 1240, 0, 1242, 1243, 1244, 1245,
	0, 0, 0, 0, 809, 1710, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1269, 0, 0, 0, 948,
	949, 0, 0, 1529, 0, 0, 0, 0, 959, 960,
	952, 953, 954, 955, 957, 958, 0, 1296, 1297, 0,
	0, 1310, 951, 1321, 1323, 1328, 1331, 1332, 1333, 0,
	0, 0, 0, 0, 1314, 0, 0, 1523, 1524, 0,
	1541, 1542, 1543, 0, 810, 950, 0, 809, 741, 0,
	0, 0, 1763, 1764, 1060, 0, 1539, 0, 0, 836,
	0, 0, 0, 838, 838, 487, 0, 0, 1587, 518,
	837, 837, 0, 0, 1797, 0, 1798, 0, 279, 1800,
	1801, 0, 0, 1804, 279, 0, 0, 0, 809, 1538,
	0, 0, 0, 1390, 0, 0, 500, 0, 0, 0,
	0, 956, 0, 0, 0, 0, 806, 806, 0, 0,
	0, 0, 0, 0, 0, 0, 1587, 0, 518, 1164,
	0, 1587, 0, 0, 1540, 0, 0, 0, 737, 0,
	1902, 1314, 810, 279, 279, 1416, 0, 279, 0, 1529,
	0, 0, 0, 0, 0, 0, 1679, 836, 0, 0,
	0, 777, 0, 1855, 966, 0, 500, 781, 781, 0,
	0, 0, 0, 0, 0, 0, 835, 0, 0, 0,
	0, 0, 0, 0, 1544, 838, 0, 0, 0, 507,
	510, 0, 837, 0, 0, 941, 1875, 0, 0, 0,
	0, 0, 1539, 0, 0, 0, 0, 835, 835, 0,
	0, 0, 0, 0, 0, 0, 835, 835, 1532, 1533,
	1525, 1526, 1527, 1528, 1530, 1531, 0, 0, 806, 0,
	0, 0, 967, 0, 0, 0, 0, 810, 0, 0,
	0, 0, 0, 1977, 1468, 1469, 0, 0, 838, 835,
	1474, 1060, 836, 1894, 0, 837, 1896, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 1587, 0, 0,
	1540, 0, 0, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 838,
	1500, 806, 1928, 1504, 0, 518, 837, 0, 0, 0,
	0, 0, 1513, 0, 0, 1587, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 1951, 952, 953,
	954, 955, 957, 958, 0, 279, 0, 1000, 0, 0,
	0, 0, 806, 1328, 1328, 1328, 0, 0, 0, 0,
	2033, 518, 1679, 0, 0, 0, 0, 0, 1535, 1536,
	1537, 0, 0, 1534, 1532, 1533, 1525, 1526, 1527, 1528,
	1530, 1531, 0, 0, 0, 0, 1584, 0, 1777, 0,
	0, 1770, 0, 0, 0, 1048, 0, 0, 0, 1768,
	835, 0, 925, 1772, 0, 0, 0, 500, 0, 0,
	0, 0, 0, 0, 0, 510, 0, 0, 638, 500,
	0, 1778, 0, 0, 0, 0, 0, 1996, 1997, 479,
	741, 0, 479, 479, 0, 0, 0, 809, 0, 2008,
	1105, 0, 1771, 2009, 0, 510, 0, 0, 510, 0,
	0, 0, 0, 0, 997, 0, 999, 0, 518, 0,
	0, 0, 0, 1003, 1679, 0, 0, 0, 809, 809,
	1679, 518, 0, 0, 0, 0, 0, 809, 809, 0,
	0, 0, 0, 0, 1523, 1524, 0, 1541, 1542, 1543,
	0, 0, 0, 2041, 0, 518, 1682, 0, 279, 1683,
	1859, 0, 0, 1523, 1524, 0, 1541, 1542, 1543, 835,
	809, 1688, 1773, 0, 1774, 0, 0, 0, 0, 1587,
	1697, 0, 1951, 0, 0, 1679, 0, 0, 1701, 0,
	0, 1416, 0, 0, 0, 0, 1538, 0, 0, 0,
	0, 0, 1776, 0, 0, 0, 1717, 0, 0, 1779,
	1719, 0, 0, 0, 0, 1538, 0, 52, 0, 279,
	52, 518, 0, 0, 0, 1155, 510, 1157, 0, 0,
	0, 0, 500, 0, 0, 0, 0, 0, 0, 2103,
	0, 0, 0, 1750, 1751, 52, 1529, 52, 0, 0,
	0, 0, 1757, 1758, 1759, 0, 0, 835, 1679, 0,
	0, 0, 52, 0, 1198, 1529, 0, 52, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1787, 0,
	1775, 1544, 0, 0, 0, 0, 0, 0, 838, 0,
	0, 0, 0, 0, 0, 837, 0, 0, 0, 1539,
	0, 809, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1539, 838,
	838, 0, 0, 0, 0, 0, 837, 837, 838, 838,
	0, 806, 0, 0, 0, 837, 837, 0, 0, 0,
	0, 0, 0, 0, 1833, 0, 0, 0, 0, 0,
	0, 0, 835, 0, 0, 0, 0, 0, 0, 0,
	0, 838, 806, 806, 0, 0, 0, 1540, 837, 1347,
	0, 806, 806, 0, 0, 1860, 0, 0, 0, 1863,
	1864, 0, 0, 0, 1866, 0, 1540, 0, 0, 0,
	0, 1868, 0, 1870, 0, 0, 0, 0, 948, 949,
	1377, 1876, 0, 0, 806, 0, 0, 0, 0, 1387,
	809, 0, 1199, 0, 777, 0, 0, 0, 0, 0,
	0, 951, 0, 777, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 500, 1885, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 950, 1535, 1536, 1537, 1258, 0,
	1534, 1532, 1533, 1525, 1526, 1527, 1528, 1530, 1531, 0,
	0, 0, 0, 0, 1535, 1536, 1537, 0, 0, 1534,
	1532, 1533, 1525, 1526, 1527, 1528, 1530, 1531, 0, 0,
	0, 0, 0, 1918, 0, 0, 0, 0, 0, 0,
	0, 0, 838, 0, 0, 1436, 0, 0, 809, 837,
	956, 0, 0, 948, 949, 0, 968, 969, 970, 978,
	979, 980, 0, 0, 0, 0, 0, 0, 1198, 971,
	0, 0, 0, 0, 0, 0, 951, 0, 1954, 982,
	0, 0, 0, 0, 0, 806, 0, 0, 52, 0,
	0, 52, 0, 0, 0, 0, 0, 1969, 1970, 950,
	0, 0, 0, 966, 0, 965, 0, 0, 0, 0,
	0, 0, 487, 0, 0, 948, 949, 0, 968, 969,
	970, 978, 979, 980, 0, 0, 0, 1982, 0, 0,
	0, 971, 0, 0, 0, 0, 0, 0, 951, 0,
	1986, 982, 0, 809, 0, 0, 0, 0, 0, 0,
	0, 838, 0, 0, 0, 956, 0, 0, 837, 0,
	0, 950, 0, 0, 0, 0, 0, 965, 0, 0,
	0, 967, 0, 0, 975, 983, 741, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 0,
	981, 0, 52, 0, 806, 0, 0, 0, 0, 0,
	0, 0, 973, 0, 0, 52, 0, 0, 966, 0,
	0, 0, 0, 0, 0, 0, 1464, 956, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 972, 0, 0, 975, 983, 0, 838,
	0, 0, 0, 0, 0, 0, 837, 0, 0, 0,
	0, 0, 981, 0, 1258, 0, 960, 952, 953, 954,
	955, 957, 958, 0, 973, 0, 1105, 1198, 0, 0,
	966, 0, 0, 0, 999, 0, 967, 0, 0, 0,
	0, 0, 806, 0, 0, 0, 2085, 0, 0, 0,
	976, 0, 0, 0, 0, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2101,
	2101, 0, 0, 0, 0, 1198, 0, 0, 1198, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 999, 838, 0, 0, 2101, 967, 0,
	0, 837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 974, 976, 0, 962, 963, 964, 977, 0, 961,
	959, 960, 952, 953, 954, 955, 957, 958, 0, 0,
	0, 0, 2101, 0, 0, 1888, 0, 806, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 974, 0, 1199, 962, 963, 964, 977,
	0, 961, 959, 960, 952, 953, 954, 955, 957, 958,
	0, 0, 0, 0, 0, 948, 949, 1565, 968, 969,
	970, 978, 979, 980, 0, 0, 0, 0, 0, 0,
	0, 971, 1523, 1524, 0, 1541, 1542, 1543, 951, 0,
	0, 982, 0, 1199, 0, 0, 1199, 0, 1858, 0,
	1799, 0, 0, 52, 0, 0, 1805, 0, 0, 0,
	0, 950, 0, 0, 0, 0, 0, 965, 0, 948,
	949, 0, 968, 969, 970, 978, 979, 980, 0, 31,
	0, 0, 0, 0, 1538, 971, 0, 0, 0, 0,
	32, 56, 951, 0, 0, 982, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1198, 1198, 0, 0, 1198,
	0, 0, 0, 0, 0, 950, 58, 956, 0, 0,
	0, 965, 34, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1529, 0, 975, 983, 0, 0,
	0, 0, 0, 47, 0, 0, 0, 0, 0, 0,
	42, 0, 981, 59, 0, 0, 0, 46, 0, 43,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 1544,
	966, 956, 0, 0, 0, 48, 0, 0, 0, 0,
	0, 44, 0, 0, 439, 0, 0, 1539, 0, 0,
	975, 983, 0, 0, 0, 972, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 0, 981, 0, 0, 0,
	0, 0, 0, 0, 52, 0, 0, 0, 973, 0,
	0, 0, 0, 0, 966, 0, 1903, 0, 0, 0,
	0, 0, 0, 0, 441, 0, 0, 0, 967, 444,
	0, 0, 0, 0, 449, 450, 0, 0, 455, 972,
	0, 0, 976, 1199, 1199, 1540, 0, 1199, 0, 0,
	443, 445, 45, 0, 0, 487, 0, 0, 0, 0,
	0, 0, 1945, 0, 0, 0, 0, 0, 61, 62,
	33, 0, 458, 49, 0, 60, 0, 1198, 0, 0,
	50, 0, 967, 0, 71, 0, 0, 0, 0, 53,
	446, 0, 55, 0, 0, 0, 976, 0, 0, 0,
	0, 57, 0, 974, 447, 448, 962, 963, 964, 977,
	73, 961, 959, 960, 952, 953, 954, 955, 957, 958,
	0, 451, 0, 1535, 1536, 1537, 63, 1564, 1534, 1532,
	1533, 1525, 1526, 1527, 1528, 1530, 1531, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 0, 0, 0, 70, 0, 974, 0, 0,
	962, 963, 964, 977, 0, 961, 959, 960, 952, 953,
	954, 955, 957, 958, 68, 0, 0, 0, 0, 0,
	0, 1563, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1936,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 0,
	0, 0, 442, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1199, 0, 0, 0, 0,
	2045, 0, 0, 0, 0, 452, 0, 457, 0, 0,
	0, 453, 0, 0, 0, 0, 454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 999, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 52, 90, 91, 325, 92,
	326, 327, 328, 329, 226, 330, 331, 332, 333, 93,
	94, 95, 227, 228, 229, 230, 96, 231, 232, 334,
	97, 233, 234, 98, 335, 336, 235, 236, 237, 337,
	99, 238, 338, 311, 339, 100, 101, 102, 0, 103,
	340, 104, 105, 106, 341, 312, 107, 108, 342, 343,
	344, 345, 346, 347, 109, 110, 280, 111, 239, 112,
	240, 241, 348, 113, 349, 114, 350, 351, 352, 115,
	116, 353, 117, 354, 0, 355, 242, 118, 119, 120,
	243, 244, 356, 357, 358, 121, 122, 245, 0, 123,
	359, 124, 360, 361, 313, 362, 125, 246, 363, 247,
	364, 126, 127, 128, 129, 248, 249, 315, 365, 133,
	366, 130, 367, 314, 131, 250, 132, 251, 252, 253,
	368, 254, 369, 316, 134, 317, 135, 136, 370, 138,
	137, 371, 255, 318, 139, 319, 372, 140, 373, 374,
	141, 0, 142, 143, 144, 146, 256, 145, 320, 147,
	148, 150, 149, 375, 376, 377, 257, 151, 258, 152,
	153, 378, 154, 379, 380, 155, 381, 382, 156, 259,
	321, 157, 322, 260, 158, 159, 160, 161, 383, 261,
	162, 262, 163, 384, 164, 165, 166, 263, 167, 168,
	385, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 386, 180, 323, 181, 182, 264, 183, 0,
	187, 188, 189, 190, 387, 265, 191, 192, 388, 193,
	184, 185, 194, 324, 195, 266, 267, 196, 389, 202,
	197, 198, 186, 199, 201, 268, 200, 269, 390, 203,
	391, 204, 205, 206, 207, 208, 392, 270, 271, 272,
	393, 394, 209, 273, 274, 395, 210, 211, 212, 213,
	396, 397, 214, 215, 216, 398, 217, 399, 218, 219,
	220, 275, 276, 400, 401, 221, 402, 403, 404, 405,
	222, 223, 224, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 1673, 0, 0, 0, 0, 0, 0, 0,
	1674, 90, 91, 325, 92, 326, 327, 328, 329, 226,
	330, 331, 332, 333, 93, 94, 95, 227, 228, 229,
	230, 96, 231, 232, 334, 97, 233, 234, 98, 335,
	336, 235, 236, 237, 337, 99, 238, 338, 311, 339,
	100, 101, 102, 0, 103, 340, 104, 105, 106, 341,
	312, 107, 108, 342, 343, 344, 345, 346, 347, 109,
	110, 280, 111, 239, 112, 240, 241, 348, 113, 349,
	114, 350, 351, 352, 115, 116, 353, 117, 354, 0,
	355, 242, 118, 119, 120, 243, 244, 356, 357, 358,
	121, 122, 245, 0, 123, 359, 124, 360, 361, 313,
	362, 125, 246, 363, 247, 364, 126, 127, 128, 129,
	248, 249, 315, 365, 133, 366, 130, 367, 314, 131,
	250, 132, 251, 252, 253, 368, 254, 369, 316, 134,
	317, 135, 136, 370, 138, 137, 371, 255, 318, 139,
	319, 372, 140, 373, 374, 141, 0, 142, 143, 144,
	146, 256, 145, 320, 147, 148, 150, 149, 375, 376,
	377, 257, 151, 258, 152, 153, 378, 154, 379, 380,
	155, 381, 382, 156, 259, 321, 157, 322, 260, 158,
	159, 160, 161, 383, 261, 162, 262, 163, 384, 164,
	165, 166, 263, 167, 168, 385, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 386, 180, 323,
	181, 182, 264, 183, 0, 187, 188, 189, 190, 387,
	265, 191, 192, 388, 193, 184, 185, 194, 324, 195,
	266, 267, 196, 389, 202, 197, 198, 186, 199, 201,
	268, 200, 269, 390, 203, 391, 204, 205, 206, 207,
	208, 392, 270, 271, 272, 393, 394, 209, 273, 274,
	395, 210, 211, 212, 213, 396, 397, 214, 215, 216,
	398, 217, 399, 218, 219, 220, 275, 276, 400, 401,
	221, 402, 403, 404, 405, 222, 223, 224, 225, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2026, 90, 91,
	325, 92, 326, 327, 328, 329, 226, 330, 331, 332,
	333, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 334, 97, 233, 234, 98, 335, 336, 235, 236,
	237, 337, 99, 238, 338, 311, 339, 100, 101, 102,
	0, 103, 340, 104, 105, 106, 341, 312, 107, 108,
	342, 343, 344, 345, 346, 347, 109, 110, 280, 111,
	239, 112, 240, 241, 348, 113, 349, 114, 350, 351,
	352, 115, 116, 353, 117, 354, 0, 355, 242, 118,
	119, 120, 243, 244, 356, 357, 358, 121, 122, 245,
	0, 123, 359, 124, 360, 361, 313, 362, 125, 246,
	363, 247, 364, 126, 127, 128, 129, 248, 249, 315,
	365, 133, 366, 130, 367, 314, 131, 250, 132, 251,
	252, 253, 368, 254, 369, 316, 134, 317, 135, 136,
	370, 138, 137, 371, 255, 318, 139, 319, 372, 140,
	373, 374, 141, 0, 142, 143, 144, 146, 256, 145,
	320, 147, 148, 150, 149, 375, 376, 377, 257, 151,
	258, 152, 153, 378, 154, 379, 380, 155, 381, 382,
	156, 259, 321, 157, 322, 260, 158, 159, 160, 161,
	383, 261, 162, 262, 163, 384, 164, 165, 166, 263,
	167, 168, 385, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 386, 180, 323, 181, 182, 264,
	183, 0, 187, 188, 189, 190, 387, 265, 191, 192,
	388, 193, 184, 185, 194, 324, 195, 266, 267, 196,
	389, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	390, 203, 391, 204, 205, 206, 207, 208, 392, 270,
	271, 272, 393, 394, 209, 273, 274, 395, 210, 211,
	212, 213, 396, 397, 214, 215, 216, 398, 217, 399,
	218, 219, 220, 275, 276, 400, 401, 221, 402, 403,
	404, 405, 222, 223, 224, 225, 306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 771,
	0, 0, 90, 91, 325, 92, 326, 327, 328, 329,
	226, 330, 331, 332, 333, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 334, 97, 233, 234, 98,
	335, 336, 235, 236, 237, 337, 99, 238, 338, 311,
	339, 100, 101, 102, 0, 103, 340, 104, 105, 106,
	341, 312, 107, 108, 342, 343, 344, 345, 346, 347,
	109, 110, 280, 111, 239, 112, 240, 241, 348, 113,
	349, 114, 350, 351, 352, 115, 116, 353, 117, 354,
	0, 355, 242, 118, 119, 120, 243, 244, 356, 357,
	358, 121, 122, 245, 0, 123, 359, 124, 360, 361,
	313, 362, 125, 246, 363, 247, 364, 126, 127, 128,
	129, 248, 249, 315, 365, 133, 366, 130, 367, 314,
	131, 250, 132, 251, 252, 253, 368, 254, 369, 316,
	134, 317, 135, 136, 370, 138, 137, 371, 255, 318,
	139, 319, 372, 140, 373, 374, 141, 0, 142, 143,
	144, 146, 256, 145, 320, 147, 148, 150, 149, 375,
	376, 377, 257, 151, 258, 152, 153, 378, 154, 379,
	380, 155, 381, 382, 156, 259, 321, 157, 322, 260,
	158, 159, 160, 161, 383, 261, 162, 262, 163, 384,
	164, 165, 166, 263, 167, 168, 385, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 386, 180,
	323, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	387, 265, 191, 192, 388, 193, 184, 185, 194, 324,
	195, 266, 267, 196, 389, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 390, 203, 391, 204, 205, 206,
	207, 208, 392, 270, 271, 272, 393, 394, 209, 273,
	274, 395, 210, 211, 212, 213, 396, 397, 214, 215,
	216, 398, 217, 399, 218, 219, 220, 275, 276, 400,
	401, 221, 402, 403, 404, 405, 222, 223, 224, 225,
	676, 665, 666, 663, 664, 655, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 692, 658, 0, 0, 0, 93,
	94, 95, 227, 707, 229, 708, 96, 709, 710, 0,
	97, 233, 234, 98, 661, 691, 711, 712, 237, 0,
	99, 703, 0, 684, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 312, 107, 108, 0, 685,
	687, 0, 686, 688, 109, 110, 280, 111, 713, 112,
	714, 715, 742, 113, 0, 114, 0, 0, 0, 706,
	116, 0, 117, 0, 0, 0, 649, 118, 119, 120,
	693, 694, 672, 0, 0, 121, 122, 716, 0, 123,
	0, 124, 0, 0, 313, 0, 125, 704, 0, 247,
	0, 126, 127, 128, 129, 700, 702, 315, 0, 133,
	0, 130, 0, 314, 131, 717, 132, 718, 719, 720,
	0, 683, 0, 316, 134, 317, 135, 136, 0, 138,
	137, 0, 705, 318, 139, 319, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 256, 145, 320, 147,
	148, 150, 149, 644, 0, 673, 701, 151, 721, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 259,
	321, 157, 322, 695, 158, 159, 160, 161, 0, 696,
	162, 262, 163, 0, 164, 165, 166, 722, 167, 168,
	0, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 0, 180, 323, 181, 182, 650, 183, 0,
	187, 188, 189, 190, 71, 265, 191, 192, 689, 193,
	184, 185, 194, 324, 195, 723, 267, 196, 0, 202,
	197, 198, 186, 199, 201, 724, 200, 697, 0, 203,
	73, 204, 205, 206, 207, 208, 0, 270, 725, 726,
	0, 0, 209, 698, 699, 671, 210, 211, 212, 213,
	0, 0, 214, 215, 216, 690, 217, 0, 218, 219,
	220, 551, 727, 0, 0, 221, 0, 0, 0, 69,
	222, 223, 224, 225, 645, 70, 0, 0, 0, 0,
	643, 0, 0, 0, 0, 641, 642, 676, 665, 666,
	663, 664, 655, 0, 651, 0, 0, 0, 0, 654,
	0, 0, 0, 90, 91, 1285, 92, 0, 0, 0,
	0, 692, 658, 0, 0, 0, 93, 94, 95, 227,
	707, 229, 708, 96, 709, 710, 0, 97, 233, 234,
	98, 661, 691, 711, 712, 237, 0, 99, 703, 0,
	684, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 312, 107, 108, 0, 685, 687, 0, 686,
	688, 109, 110, 280, 111, 713, 112, 714, 715, 0,
	113, 0, 114, 0, 1286, 0, 706, 116, 0, 117,
	0, 0, 0, 649, 118, 119, 120, 693, 694, 672,
	0, 0, 121, 122, 716, 0, 123, 0, 124, 0,
	0, 313, 0, 125, 704, 0, 247, 0, 126, 127,
	128, 129, 700, 702, 315, 0, 133, 0, 130, 0,
	314, 131, 717, 132, 718, 719, 720, 0, 683, 0,
	316, 134, 317, 135, 136, 0, 138, 137, 0, 705,
	318, 139, 319, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 320, 147, 148, 150, 149,
	644, 0, 673, 701, 151, 721, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 259, 321, 157, 322,
	695, 158, 159, 160, 161, 0, 696, 162, 262, 163,
	0, 164, 165, 166, 722, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 323, 181, 182, 650, 183, 0, 187, 188, 189,
	190, 0, 265, 191, 192, 689, 193, 184, 185, 194,
	324, 195, 723, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 724, 200, 697, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 725, 726, 0, 0, 209,
	698, 699, 671, 210, 211, 212, 213, 0, 0, 214,
	215, 216, 690, 217, 0, 218, 219, 220, 275, 727,
	1284, 0, 221, 0, 0, 0, 0, 222, 223, 224,
	225, 645, 0, 0, 0, 0, 0, 643, 0, 0,
	0, 0, 641, 642, 1287, 676, 665, 666, 663, 664,
	655, 651, 1282, 0, 0, 0, 654, 0, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 692,
	658, 0, 0, 0, 93, 94, 95, 227, 707, 229,
	708, 96, 709, 710, 0, 97, 233, 234, 98, 661,
	691, 711, 712, 237, 0, 99, 703, 0, 684, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	312, 107, 108, 0, 685, 687, 0, 686, 688, 109,
	110, 280, 111, 713, 112, 714, 715, 0, 113, 0,
	114, 0, 0, 0, 706, 116, 0, 117, 0, 0,
	0, 649, 118, 119, 120, 693, 694, 672, 0, 0,
	121, 122, 716, 0, 123, 0, 124, 0, 0, 313,
	0, 125, 704, 0, 247, 0, 126, 127, 128, 129,
	700, 702, 315, 0, 133, 0, 130, 0, 314, 131,
	717, 132, 718, 719, 720, 0, 683, 0, 316, 134,
	317, 135, 136, 0, 138, 137, 0, 705, 318, 139,
	319, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 320, 147, 148, 150, 149, 644, 0,
	673, 701, 151, 721, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 259, 321, 157, 322, 695, 158,
	159, 160, 161, 0, 696, 162, 262, 163, 0, 164,
	165, 166, 722, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 323,
	181, 182, 650, 183, 0, 187, 188, 189, 190, 71,
	265, 191, 192, 689, 193, 184, 185, 194, 324, 195,
	723, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	724, 200, 697, 0, 203, 73, 204, 205, 206, 207,
	208, 0, 270, 725, 726, 0, 0, 209, 698, 699,
	671, 210, 211, 212, 213, 0, 0, 214, 215, 216,
	690, 217, 0, 218, 219, 220, 551, 727, 0, 0,
	221, 0, 0, 0, 69, 222, 223, 224, 225, 645,
	70, 0, 0, 0, 0, 643, 0, 0, 0, 0,
	641, 642, 676, 665, 666, 663, 664, 655, 0, 651,
	0, 0, 0, 0, 654, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 692, 658, 0, 0,
	0, 93, 94, 95, 227, 707, 229, 708, 96, 709,
	710, 1324, 97, 233, 234, 98, 661, 691, 711, 712,
	237, 0, 99, 703, 0, 684, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 312, 107, 108,
	0, 685, 687, 0, 686, 688, 109, 110, 280, 111,
	713, 112, 714, 715, 0, 113, 0, 114, 0, 0,
	0, 706, 116, 0, 117, 0, 0, 0, 649, 118,
	119, 120, 693, 694, 672, 0, 0, 121, 122, 716,
	0, 123, 0, 124, 0, 1329, 313, 0, 125, 704,
	0, 247, 0, 126, 127, 128, 129, 700, 702, 315,
	0, 133, 0, 130, 0, 314, 131, 717, 132, 718,
	719, 720, 0, 683, 0, 316, 134, 317, 135, 136,
	0, 138, 137, 1325, 705, 318, 139, 319, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	320, 147, 148, 150, 149, 644, 0, 673, 701, 151,
	721, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 321, 157, 322, 695, 158, 159, 160, 161,
	0, 696, 162, 262, 163, 0, 164, 165, 166, 722,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 323, 181, 182, 650,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	689, 193, 184, 185, 194, 324, 195, 723, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 724, 200, 697,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	725, 726, 0, 1326, 209, 698, 699, 671, 210, 211,
	212, 213, 0, 0, 214, 215, 216, 690, 217, 0,
	218, 219, 220, 275, 727, 0, 0, 221, 0, 0,
	0, 0, 222, 223, 224, 225, 645, 0, 0, 0,
	0, 0, 643, 0, 0, 0, 0, 641, 642, 676,
	665, 666, 663, 664, 655, 0, 651, 0, 0, 0,
	0, 654, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 692, 658, 0, 0, 0, 93, 94,
	95, 227, 707, 229, 708, 96, 709, 710, 0, 97,
	233, 234, 98, 661, 691, 711, 712, 237, 0, 99,
	703, 0, 684, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 312, 107, 108, 0, 685, 687,
	0, 686, 688, 109, 110, 280, 111, 713, 112, 714,
	715, 0, 113, 0, 114, 0, 0, 0, 706, 116,
	0, 117, 0, 0, 0, 649, 118, 119, 120, 693,
	694, 672, 0, 0, 121, 122, 716, 0, 123, 0,
	124, 0, 0, 313, 0, 125, 704, 0, 247, 0,
	126, 127, 128, 129, 700, 702, 315, 0, 133, 0,
	130, 0, 314, 131, 717, 132, 718, 719, 720, 0,
	683, 0, 316, 134, 317, 135, 136, 0, 138, 137,
	0, 705, 318, 139, 319, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 256, 145, 320, 147, 148,
	150, 149, 644, 1616, 673, 701, 151, 721, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 259, 321,
	157, 322, 695, 158, 159, 160, 161, 0, 696, 162,
	262, 163, 0, 164, 165, 166, 722, 167, 168, 0,
	169, 170, 171, 172, 173, 175, 176, 174, 177, 178,
	179, 0, 180, 323, 181, 182, 650, 183, 0, 187,
	188, 189, 190, 0, 265, 191, 192, 689, 193, 184,
	185, 194, 324, 195, 723, 267, 196, 0, 202, 197,
	198, 186, 199, 201, 724, 200, 697, 0, 203, 0,
	204, 205, 206, 207, 208, 0, 270, 725, 726, 0,
	0, 209, 698, 699, 671, 210, 211, 212, 213, 0,
	0, 214, 215, 216, 690, 217, 0, 218, 219, 220,
	275, 727, 0, 0, 221, 0, 0, 0, 0, 222,
	223, 224, 225, 645, 0, 0, 0, 0, 0, 643,
	0, 0, 0, 0, 641, 642, 639, 676, 665, 666,
	663, 664, 655, 651, 0, 0, 0, 0, 654, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 692, 658, 0, 0, 0, 93, 94, 95, 227,
	707, 229, 708, 96, 709, 710, 0, 97, 233, 234,
	98, 661, 691, 711, 712, 237, 0, 99, 703, 0,
	684, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 312, 107, 108, 0, 685, 687, 0, 686,
	688, 109, 110, 280, 111, 713, 112, 714, 715, 0,
	113, 0, 114, 0, 0, 0, 706, 116, 0, 117,
	0, 0, 0, 649, 118, 119, 120, 693, 694, 672,
	0, 0, 121, 122, 716, 0, 123, 0, 124, 0,
	0, 313, 0, 125, 704, 0, 247, 0, 126, 127,
	128, 129, 700, 702, 315, 0, 133, 0, 130, 0,
	314, 131, 717, 132, 718, 719, 720, 0, 683, 0,
	316, 134, 317, 135, 136, 0, 138, 137, 0, 705,
	318, 139, 319, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 320, 147, 148, 150, 149,
	644, 0, 673, 701, 151, 721, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 259, 321, 157, 322,
	695, 158, 159, 160, 161, 0, 696, 162, 262, 163,
	0, 164, 165, 166, 722, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 323, 181, 182, 650, 183, 0, 187, 188, 189,
	190, 0, 265, 191, 192, 689, 193, 184, 185, 194,
	324, 195, 723, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 724, 200, 697, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 725, 726, 0, 0, 209,
	698, 699, 671, 210, 211, 212, 213, 0, 0, 214,
	215, 216, 690, 217, 0, 218, 219, 220, 275, 727,
	0, 0, 221, 0, 0, 0, 0, 222, 223, 224,
	225, 645, 0, 0, 0, 0, 0, 643, 0, 0,
	0, 0, 641, 642, 0, 0, 0, 0, 0, 1005,
	1277, 651, 0, 0, 0, 0, 654, 676, 665, 666,
	663, 664, 655, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 692, 658, 0, 0, 0, 93, 94, 95, 227,
	707, 229, 708, 96, 709, 710, 0, 97, 233, 234,
	98, 661, 691, 711, 712, 237, 0, 99, 703, 0,
	684, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 312, 107, 108, 0, 685, 687, 0, 686,
	688, 109, 110, 280, 111, 713, 112, 714, 715, 0,
	113, 0, 114, 0, 0, 0, 706, 116, 0, 117,
	0, 0, 0, 649, 118, 119, 120, 693, 694, 672,
	0, 0, 121, 122, 716, 0, 123, 0, 124, 0,
	0, 313, 0, 125, 704, 0, 247, 0, 126, 127,
	128, 129, 700, 702, 315, 0, 133, 0, 130, 0,
	314, 131, 717, 132, 718, 719, 720, 0, 683, 0,
	316, 134, 317, 135, 136, 0, 138, 137, 0, 705,
	318, 139, 319, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 320, 147, 148, 150, 149,
	644, 0, 673, 701, 151, 721, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 259, 321, 157, 322,
	695, 158, 159, 160, 161, 0, 696, 162, 262, 163,
	0, 164, 165, 166, 722, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 323, 181, 182, 650, 183, 0, 187, 188, 189,
	190, 0, 265, 191, 192, 689, 193, 184, 185, 194,
	324, 195, 723, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 724, 200, 697, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 725, 726, 0, 0, 209,
	698, 699, 671, 210, 211, 212, 213, 0, 0, 214,
	215, 216, 690, 217, 0, 218, 219, 220, 275, 727,
	0, 0, 221, 0, 0, 0, 0, 222, 223, 224,
	225, 645, 0, 0, 0, 0, 0, 643, 0, 0,
	0, 0, 641, 642, 676, 665, 666, 663, 664, 655,
	0, 651, 1747, 0, 0, 0, 654, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 692, 658,
	0, 0, 0, 93, 94, 95, 227, 707, 229, 708,
	96, 709, 710, 0, 97, 233, 234, 98, 661, 691,
	711, 712, 237, 0, 99, 703, 0, 684, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 312,
	107, 108, 0, 685, 687, 0, 686, 688, 109, 110,
	280, 111, 713, 112, 714, 715, 0, 113, 0, 114,
	0, 0, 0, 706, 116, 0, 117, 0, 0, 0,
	649, 118, 119, 120, 693, 694, 672, 0, 0, 121,
	122, 716, 0, 123, 0, 124, 0, 0, 313, 0,
	125, 704, 0, 247, 0, 126, 127, 128, 129, 700,
	702, 315, 0, 133, 0, 130, 0, 314, 131, 717,
	132, 718, 719, 720, 0, 683, 0, 316, 134, 317,
	135, 136, 0, 138, 137, 0, 705, 318, 139, 319,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	256, 145, 320, 147, 148, 150, 149, 644, 0, 673,
	701, 151, 721, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 259, 321, 157, 322, 695, 158, 159,
	160, 161, 0, 696, 162, 262, 163, 0, 164, 165,
	166, 722, 167, 168, 0, 169, 170, 171, 172, 173,
	175, 176, 174, 177, 178, 179, 0, 180, 323, 181,
	182, 650, 183, 0, 187, 188, 189, 190, 0, 265,
	191, 192, 689, 193, 184, 185, 194, 324, 195, 723,
	267, 196, 0, 202, 197, 198, 186, 199, 201, 724,
	200, 697, 0, 203, 0, 204, 205, 206, 207, 208,
	0, 270, 725, 726, 0, 0, 209, 698, 699, 671,
	210, 211, 212, 213, 0, 0, 214, 215, 216, 690,
	217, 0, 218, 219, 220, 275, 727, 1704, 0, 221,
	0, 0, 0, 0, 222, 223, 224, 225, 645, 0,
	0, 0, 0, 0, 643, 0, 0, 0, 0, 641,
	642, 676, 665, 666, 663, 664, 655, 0, 651, 0,
	0, 0, 0, 654, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 692, 658, 0, 0, 0,
	93, 94, 95, 227, 707, 229, 708, 96, 709, 710,
	0, 97, 233, 234, 98, 661, 691, 711, 712, 237,
	0, 99, 703, 0, 684, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 312, 107, 108, 0,
	685, 687, 0, 686, 688, 109, 110, 280, 111, 713,
	112, 714, 715, 0, 113, 0, 114, 0, 0, 0,
	706, 116, 0, 117, 0, 0, 0, 649, 118, 119,
	120, 693, 694, 672, 0, 0, 121, 122, 716, 0,
	123, 0, 124, 0, 0, 313, 0, 125, 704, 0,
	247, 0, 126, 127, 128, 129, 700, 702, 315, 0,
	133, 0, 130, 0, 314, 131, 717, 132, 718, 719,
	720, 0, 683, 0, 316, 134, 317, 135, 136, 0,
	138, 137, 0, 705, 318, 139, 319, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 256, 145, 320,
	147, 148, 150, 149, 644, 0, 673, 701, 151, 721,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	259, 321, 157, 322, 695, 158, 159, 160, 161, 0,
	696, 162, 262, 163, 0, 164, 165, 166, 722, 167,
	168, 0, 169, 170, 171, 172, 173, 175, 176, 174,
	177, 178, 179, 0, 180, 323, 181, 182, 650, 183,
	0, 187, 188, 189, 190, 0, 265, 191, 192, 689,
	193, 184, 185, 194, 324, 195, 723, 267, 196, 0,
	202, 197, 198, 186, 199, 201, 724, 200, 697, 0,
	203, 0, 204, 205, 206, 207, 208, 0, 270, 725,
	726, 0, 0, 209, 698, 699, 671, 210, 211, 212,
	213, 0, 0, 214, 215, 216, 690, 217, 0, 218,
	219, 220, 275, 727, 0, 0, 221, 0, 0, 0,
	0, 222, 223, 224, 225, 645, 0, 0, 0, 0,
	0, 643, 0, 0, 0, 0, 641, 642, 676, 665,
	666, 663, 664, 655, 0, 651, 1694, 0, 0, 0,
	654, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 692, 658, 0, 0, 0, 93, 94, 95,
	227, 707, 229, 708, 96, 709, 710, 0, 97, 233,
	234, 98, 661, 691, 711, 712, 237, 0, 99, 703,
	0, 684, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 312, 107, 108, 0, 685, 687, 0,
	686, 688, 109, 110, 280, 111, 713, 112, 714, 715,
	742, 113, 0, 114, 0, 0, 0, 706, 116, 0,
	117, 0, 0, 0, 649, 118, 119, 120, 693, 694,
	672, 0, 0, 121, 122, 716, 0, 123, 0, 124,
	0, 0, 313, 0, 125, 704, 0, 247, 0, 126,
	127, 128, 129, 700, 702, 315, 0, 133, 0, 130,
	0, 314, 131, 717, 132, 718, 719, 720, 0, 683,
	0, 316, 134, 317, 135, 136, 0, 138, 137, 0,
	705, 318, 139, 319, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 256, 145, 320, 147, 148, 150,
	149, 644, 0, 673, 701, 151, 721, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 259, 321, 157,
	322, 695, 158, 159, 160, 161, 0, 696, 162, 262,
	163, 0, 164, 165, 166, 722, 167, 168, 0, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	0, 180, 323, 181, 182, 650, 183, 0, 187, 188,
	189, 190, 0, 265, 191, 192, 689, 193, 184, 185,
	194, 324, 195, 723, 267, 196, 0, 202, 197, 198,
	186, 199, 201, 724, 200, 697, 0, 203, 0, 204,
	205, 206, 207, 208, 0, 270, 725, 726, 0, 0,
	209, 698, 699, 671, 210, 211, 212, 213, 0, 0,
	214, 215, 216, 690, 217, 0, 218, 219, 220, 275,
	727, 0, 0, 221, 0, 0, 0, 0, 222, 223,
	224, 225, 645, 0, 0, 0, 0, 0, 643, 0,
	0, 0, 0, 641, 642, 676, 665, 666, 663, 664,
	655, 0, 651, 0, 0, 0, 0, 654, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 692,
	658, 0, 0, 0, 93, 94, 95, 227, 707, 229,
	708, 96, 709, 710, 0, 97, 233, 234, 98, 661,
	691, 711, 712, 237, 0, 99, 703, 0, 684, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	312, 107, 108, 0, 685, 687, 0, 686, 688, 109,
	110, 280, 111, 713, 112, 714, 715, 0, 113, 0,
	114, 0, 0, 0, 706, 116, 0, 117, 0, 0,
	0, 649, 118, 119, 120, 693, 694, 672, 0, 0,
	121, 122, 716, 0, 123, 0, 124, 0, 1329, 313,
	0, 125, 704, 0, 247, 0, 126, 127, 128, 129,
	700, 702, 315, 0, 133, 0, 130, 0, 314, 131,
	717, 132, 718, 719, 720, 0, 683, 0, 316, 134,
	317, 135, 136, 0, 138, 137, 0, 705, 318, 139,
	319, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 320, 147, 148, 150, 149, 644, 0,
	673, 701, 151, 721, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 259, 321, 157, 322, 695, 158,
	159, 160, 161, 0, 696, 162, 262, 163, 0, 164,
	165, 166, 722, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 323,
	181, 182, 650, 183, 0, 187, 188, 189, 190, 0,
	265, 191, 192, 689, 193, 184, 185, 194, 324, 195,
	723, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	724, 200, 697, 0, 203, 0, 204, 205, 206, 207,
	208, 0, 270, 725, 726, 0, 0, 209, 698, 699,
	671, 210, 211, 212, 213, 0, 0, 214, 215, 216,
	690, 217, 0, 218, 219, 220, 275, 727, 0, 0,
	221, 0, 0, 0, 0, 222, 223, 224, 225, 645,
	0, 0, 0, 0, 0, 643, 0, 0, 0, 0,
	641, 642, 676, 665, 666, 663, 664, 655, 0, 651,
	0, 0, 0, 0, 654, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 692, 658, 0, 0,
	0, 93, 94, 95, 227, 707, 229, 708, 96, 709,
	710, 0, 97, 233, 234, 98, 661, 691, 711, 712,
	237, 0, 99, 703, 0, 684, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 312, 107, 108,
	0, 685, 687, 0, 686, 688, 109, 110, 280, 111,
	713, 112, 714, 715, 0, 113, 0, 114, 0, 0,
	0, 706, 116, 0, 117, 0, 0, 0, 649, 118,
	119, 120, 693, 694, 672, 0, 0, 121, 122, 716,
	0, 123, 0, 124, 0, 0, 313, 0, 125, 704,
	0, 247, 0, 126, 127, 128, 129, 700, 702, 315,
	0, 133, 0, 130, 0, 314, 131, 717, 132, 718,
	719, 720, 0, 683, 0, 316, 134, 317, 135, 136,
	0, 138, 137, 0, 705, 318, 139, 319, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	320, 147, 148, 150, 149, 644, 0, 673, 701, 151,
	721, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 321, 157, 322, 695, 158, 159, 160, 161,
	0, 696, 162, 262, 163, 0, 164, 165, 166, 722,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 323, 181, 182, 650,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	689, 193, 184, 185, 194, 324, 195, 723, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 724, 200, 697,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	725, 726, 0, 0, 209, 698, 699, 671, 210, 211,
	212, 213, 0, 0, 214, 215, 216, 690, 217, 0,
	218, 219, 220, 275, 727, 0, 0, 221, 0, 0,
	0, 0, 222, 223, 224, 225, 645, 0, 0, 0,
	0, 0, 643, 0, 0, 0, 0, 641, 642, 676,
	665, 666, 663, 664, 655, 0, 651, 1272, 0, 0,
	0, 654, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 692, 658, 0, 0, 0, 93, 94,
	95, 227, 707, 229, 708, 96, 709, 710, 0, 97,
	233, 234, 98, 661, 691, 711, 712, 237, 0, 99,
	703, 0, 684, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 312, 107, 108, 0, 685, 687,
	0, 686, 688, 109, 110, 280, 111, 713, 112, 714,
	715, 0, 113, 0, 114, 0, 0, 0, 706, 116,
	0, 117, 0, 0, 0, 649, 118, 119, 120, 693,
	694, 672, 0, 0, 121, 122, 716, 0, 123, 0,
	124, 0, 0, 313, 0, 125, 704, 0, 247, 0,
	126, 127, 128, 129, 700, 702, 315, 0, 133, 0,
	130, 0, 314, 131, 717, 132, 718, 719, 720, 0,
	683, 0, 316, 134, 317, 135, 136, 0, 138, 137,
	0, 705, 318, 139, 319, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 256, 145, 320, 147, 148,
	150, 149, 644, 0, 673, 701, 151, 721, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 259, 321,
	157, 322, 695, 158, 159, 160, 161, 0, 696, 162,
	262, 163, 0, 164, 165, 166, 722, 167, 168, 0,
	169, 170, 171, 172, 173, 175, 176, 174, 177, 178,
	179, 0, 180, 323, 181, 182, 650, 183, 0, 187,
	188, 189, 190, 0, 265, 191, 192, 689, 193, 184,
	185, 194, 324, 195, 723, 267, 196, 0, 202, 197,
	198, 186, 199, 201, 724, 200, 697, 0, 203, 0,
	204, 205, 206, 207, 208, 0, 270, 725, 726, 0,
	0, 209, 698, 699, 671, 210, 211, 212, 213, 0,
	0, 214, 215, 216, 690, 217, 0, 218, 219, 220,
	275, 727, 0, 0, 221, 0, 0, 0, 0, 222,
	223, 224, 225, 645, 0, 0, 0, 0, 0, 643,
	0, 0, 0, 0, 641, 642, 639, 676, 665, 666,
	663, 664, 655, 651, 0, 0, 0, 0, 654, 0,
	0, 0, 0, 90, 91, 933, 92, 0, 0, 0,
	0, 692, 658, 0, 0, 0, 93, 94, 95, 227,
	707, 229, 708, 96, 709, 710, 0, 97, 233, 234,
	98, 661, 691, 711, 712, 237, 0, 99, 703, 0,
	684, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 312, 107, 108, 0, 685, 687, 0, 686,
	688, 109, 110, 280, 111, 713, 112, 714, 715, 0,
	113, 0, 114, 0, 0, 0, 706, 116, 0, 117,
	0, 0, 0, 649, 118, 119, 120, 693, 694, 672,
	0, 0, 121, 122, 716, 0, 123, 0, 124, 0,
	0, 313, 0, 125, 704, 0, 247, 0, 126, 127,
	128, 129, 700, 702, 315, 0, 133, 0, 130, 0,
	314, 131, 717, 132, 718, 719, 720, 0, 683, 0,
	316, 134, 317, 135, 136, 0, 138, 137, 0, 705,
	318, 139, 319, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 320, 147, 148, 150, 149,
	644, 0, 673, 701, 151, 721, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 259, 321, 157, 322,
	695, 158, 159, 160, 161, 0, 696, 162, 262, 163,
	0, 164, 165, 166, 722, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 323, 181, 182, 650, 183, 0, 187, 188, 189,
	190, 0, 265, 191, 192, 689, 193, 184, 185, 194,
	324, 195, 723, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 724, 200, 697, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 725, 726, 0, 0, 209,
	698, 699, 671, 210, 211, 212, 213, 0, 0, 214,
	215, 216, 690, 217, 0, 218, 219, 220, 275, 727,
	0, 0, 221, 0, 0, 0, 0, 222, 223, 224,
	225, 645, 0, 0, 0, 0, 0, 643, 0, 0,
	0, 0, 641, 642, 676, 665, 666, 663, 664, 655,
	0, 651, 0, 0, 0, 0, 654, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 692, 658,
	0, 0, 0, 93, 94, 95, 227, 707, 229, 708,
	96, 709, 710, 0, 97, 233, 234, 98, 661, 691,
	711, 712, 237, 0, 99, 703, 0, 684, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 312,
	107, 2100, 0, 685, 687, 0, 686, 688, 109, 110,
	280, 111, 713, 112, 714, 715, 0, 113, 0, 114,
	0, 0, 0, 706, 116, 0, 117, 0, 0, 0,
	649, 118, 119, 120, 693, 694, 672, 0, 0, 121,
	122, 716, 0, 123, 0, 124, 0, 0, 313, 0,
	125, 704, 0, 247, 0, 126, 127, 128, 129, 700,
	702, 315, 0, 133, 0, 130, 0, 314, 131, 717,
	132, 718, 719, 720, 0, 683, 0, 316, 134, 317,
	135, 136, 0, 138, 137, 0, 705, 318, 139, 319,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	256, 145, 320, 147, 148, 150, 149, 644, 0, 673,
	701, 151, 721, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 259, 321, 157, 322, 695, 158, 159,
	160, 161, 0, 696, 162, 262, 163, 0, 164, 165,
	166, 722, 167, 168, 0, 169, 170, 171, 172, 173,
	175, 176, 174, 177, 178, 179, 0, 180, 323, 181,
	182, 650, 183, 0, 187, 188, 189, 190, 0, 265,
	191, 192, 689, 193, 184, 185, 194, 324, 195, 723,
	267, 196, 0, 202, 197, 198, 186, 199, 201, 724,
	200, 697, 0, 203, 0, 204, 205, 206, 207, 208,
	0, 270, 725, 726, 0, 0, 209, 698, 699, 671,
	210, 211, 2099, 213, 0, 0, 214, 215, 216, 690,
	217, 0, 218, 219, 220, 275, 727, 0, 0, 221,
	0, 0, 0, 0, 222, 223, 224, 225, 645, 0,
	0, 0, 0, 0, 643, 0, 0, 0, 0, 641,
	642, 676, 665, 666, 663, 664, 655, 0, 651, 0,
	0, 0, 0, 654, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 692, 658, 0, 0, 0,
	93, 94, 95, 2098, 707, 229, 708, 96, 709, 710,
	0, 97, 233, 234, 98, 661, 691, 711, 712, 237,
	0, 99, 703, 0, 684, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 312, 107, 2100, 0,
	685, 687, 0, 686, 688, 109, 110, 280, 111, 713,
	112, 714, 715, 0, 113, 0, 114, 0, 0, 0,
	706, 116, 0, 117, 0, 0, 0, 649, 118, 119,
	120, 693, 694, 672, 0, 0, 121, 122, 716, 0,
	123, 0, 124, 0, 0, 313, 0, 125, 704, 0,
	247, 0, 126, 127, 128, 129, 700, 702, 315, 0,
	133, 0, 130, 0, 314, 131, 717, 132, 718, 719,
	720, 0, 683, 0, 316, 134, 317, 135, 136, 0,
	138, 137, 0, 705, 318, 139, 319, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 256, 145, 320,
	147, 148, 150, 149, 644, 0, 673, 701, 151, 721,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	259, 321, 157, 322, 695, 158, 159, 160, 161, 0,
	696, 162, 262, 163, 0, 164, 165, 166, 722, 167,
	168, 0, 169, 170, 171, 172, 173, 175, 176, 174,
	177, 178, 179, 0, 180, 323, 181, 182, 650, 183,
	0, 187, 188, 189, 190, 0, 265, 191, 192, 689,
	193, 184, 185, 194, 324, 195, 723, 267, 196, 0,
	202, 197, 198, 186, 199, 201, 724, 200, 697, 0,
	203, 0, 204, 205, 206, 207, 208, 0, 270, 725,
	726, 0, 0, 209, 698, 699, 671, 210, 211, 2099,
	213, 0, 0, 214, 215, 216, 690, 217, 0, 218,
	219, 220, 275, 727, 0, 0, 221, 0, 0, 0,
	0, 222, 223, 224, 225, 645, 0, 0, 0, 0,
	0, 643, 0, 0, 0, 0, 641, 642, 676, 665,
	666, 663, 664, 655, 0, 651, 0, 0, 0, 0,
	654, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 692, 658, 0, 0, 0, 93, 94, 95,
	227, 707, 229, 708, 96, 709, 710, 0, 97, 233,
	234, 98, 661, 691, 711, 712, 237, 0, 99, 703,
	0, 684, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 312, 107, 108, 0, 685, 687, 0,
	686, 688, 109, 110, 280, 111, 713, 112, 714, 715,
	0, 113, 0, 114, 0, 0, 0, 706, 116, 0,
	117, 0, 0, 0, 649, 118, 119, 120, 693, 694,
	672, 0, 0, 121, 122, 716, 0, 123, 0, 124,
	0, 0, 313, 0, 125, 704, 0, 247, 0, 126,
	127, 128, 129, 700, 702, 315, 0, 133, 0, 130,
	0, 314, 131, 717, 132, 718, 719, 720, 0, 683,
	0, 316, 134, 317, 135, 136, 0, 138, 137, 0,
	705, 318, 139, 319, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 256, 145, 320, 147, 148, 150,
	149, 644, 0, 673, 701, 151, 721, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 259, 321, 157,
	322, 695, 158, 159, 160, 161, 0, 696, 162, 262,
	163, 0, 164, 165, 166, 722, 167, 168, 0, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	0, 180, 323, 181, 182, 650, 183, 0, 187, 188,
	189, 190, 0, 265, 191, 192, 689, 193, 184, 185,
	194, 324, 195, 723, 267, 196, 0, 202, 197, 198,
	186, 199, 201, 724, 200, 697, 0, 203, 0, 204,
	205, 206, 207, 208, 0, 270, 725, 726, 0, 0,
	209, 698, 699, 671, 210, 211, 212, 213, 0, 0,
	214, 215, 216, 690, 217, 0, 218, 219, 220, 275,
	727, 0, 0, 221, 0, 0, 0, 0, 222, 223,
	224, 225, 645, 0, 0, 0, 0, 0, 643, 0,
	0, 0, 0, 641, 642, 1301, 665, 666, 663, 664,
	655, 0, 651, 0, 0, 0, 0, 654, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 692,
	658, 0, 0, 0, 93, 94, 95, 227, 707, 229,
	708, 96, 709, 710, 0, 97, 233, 234, 98, 661,
	691, 711, 712, 237, 0, 99, 703, 0, 684, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	312, 107, 108, 0, 685, 687, 0, 686, 688, 109,
	110, 280, 111, 713, 1304, 714, 715, 0, 113, 0,
	114, 0, 0, 0, 706, 116, 0, 117, 0, 0,
	0, 649, 118, 119, 120, 693, 694, 672, 0, 0,
	121, 122, 716, 0, 123, 0, 124, 0, 0, 313,
	0, 125, 704, 0, 247, 0, 126, 127, 1305, 129,
	700, 702, 315, 0, 133, 0, 130, 0, 314, 131,
	717, 132, 718, 719, 720, 0, 683, 0, 316, 134,
	317, 135, 136, 0, 138, 137, 0, 705, 318, 139,
	319, 0, 140, 0, 0, 141, 0, 142, 1306, 1303,
	146, 256, 145, 320, 147, 148, 150, 149, 644, 0,
	673, 701, 151, 721, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 259, 321, 157, 322, 695, 158,
	159, 160, 161, 0, 696, 162, 262, 163, 0, 164,
	165, 166, 722, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 323,
	181, 182, 650, 183, 0, 187, 188, 189, 1307, 0,
	265, 191, 192, 689, 193, 184, 185, 194, 324, 195,
	723, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	724, 200, 697, 0, 203, 0, 204, 205, 206, 207,
	208, 0, 270, 725, 726, 0, 0, 209, 698, 699,
	671, 210, 211, 212, 213, 0, 0, 214, 215, 216,
	690, 217, 0, 218, 219, 220, 275, 727, 0, 0,
	221, 0, 0, 0, 0, 222, 223, 1302, 225, 645,
	0, 0, 0, 0, 0, 643, 0, 0, 0, 0,
	641, 642, 676, 665, 666, 663, 664, 655, 0, 651,
	0, 0, 0, 0, 654, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 692, 658, 0, 0,
	0, 93, 94, 95, 227, 707, 229, 708, 96, 709,
	710, 0, 97, 233, 234, 98, 661, 691, 711, 712,
	237, 0, 99, 703, 0, 684, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 312, 107, 108,
	0, 685, 687, 0, 686, 688, 109, 110, 280, 111,
	713, 112, 714, 715, 0, 113, 0, 114, 0, 0,
	0, 706, 116, 0, 117, 0, 0, 0, 649, 118,
	119, 120, 693, 694, 672, 0, 0, 121, 122, 716,
	0, 123, 0, 124, 0, 0, 313, 0, 125, 704,
	0, 247, 0, 126, 127, 128, 129, 700, 702, 315,
	0, 133, 0, 130, 0, 314, 131, 717, 132, 718,
	719, 720, 0, 683, 0, 316, 134, 317, 135, 136,
	0, 138, 137, 0, 705, 318, 139, 319, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	320, 147, 148, 150, 149, 0, 0, 673, 701, 151,
	721, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 321, 157, 322, 695, 158, 159, 160, 161,
	0, 696, 162, 262, 163, 0, 164, 165, 166, 722,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 323, 181, 182, 1319,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	689, 193, 184, 185, 194, 324, 195, 723, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 724, 200, 697,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	725, 726, 0, 0, 209, 698, 699, 671, 210, 211,
	212, 213, 0, 0, 214, 215, 216, 690, 217, 0,
	218, 219, 220, 275, 727, 0, 0, 221, 0, 0,
	0, 0, 222, 223, 224, 225, 0, 0, 0, 0,
	0, 0, 1317, 0, 0, 0, 0, 1315, 1316, 676,
	665, 666, 663, 664, 655, 0, 1318, 0, 0, 0,
	0, 654, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 692, 658, 0, 0, 0, 93, 94,
	95, 227, 707, 229, 708, 96, 709, 710, 0, 97,
	233, 234, 98, 0, 691, 711, 712, 237, 0, 99,
	703, 0, 684, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 312, 107, 108, 0, 685, 687,
	0, 686, 688, 109, 110, 280, 111, 713, 112, 714,
	715, 0, 113, 0, 114, 0, 0, 0, 706, 116,
	0, 117, 0, 0, 0, 242, 118, 119, 120, 693,
	694, 672, 0, 0, 121, 122, 716, 0, 123, 0,
	124, 0, 0, 313, 0, 125, 704, 0, 247, 0,
	126, 127, 128, 129, 700, 702, 315, 0, 133, 0,
	130, 0, 314, 131, 717, 132, 718, 719, 720, 0,
	683, 0, 316, 134, 317, 135, 136, 0, 138, 137,
	0, 705, 318, 139, 319, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 256, 145, 320, 147, 148,
	150, 149, 0, 0, 673, 701, 151, 721, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 259, 321,
	157, 322, 695, 158, 159, 160, 161, 0, 696, 162,
	262, 163, 0, 164, 165, 166, 722, 167, 168, 0,
	169, 170, 171, 172, 173, 175, 176, 174, 177, 178,
	179, 0, 180, 323, 181, 182, 1319, 183, 0, 187,
	188, 189, 190, 0, 265, 191, 192, 689, 193, 184,
	185, 194, 324, 195, 723, 267, 196, 0, 202, 197,
	198, 186, 199, 201, 724, 200, 697, 0, 203, 0,
	204, 205, 206, 207, 208, 0, 270, 725, 726, 0,
	0, 209, 698, 699, 671, 210, 211, 212, 213, 0,
	0, 214, 215, 216, 690, 217, 0, 218, 219, 220,
	275, 727, 0, 0, 221, 0, 0, 0, 0, 222,
	223, 224, 225, 0, 0, 676, 665, 666, 663, 664,
	655, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 91, 1318, 92, 0, 0, 0, 654, 692,
	658, 0, 0, 0, 93, 94, 95, 0, 707, 229,
	708, 96, 709, 710, 0, 97, 233, 234, 98, 661,
	691, 711, 712, 237, 0, 99, 703, 0, 684, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	312, 107, 2100, 0, 685, 687, 0, 686, 688, 109,
	110, 280, 111, 713, 112, 714, 715, 0, 113, 0,
	114, 0, 0, 0, 706, 116, 0, 117, 0, 0,
	0, 649, 118, 119, 120, 693, 694, 672, 0, 0,
	121, 122, 716, 0, 123, 0, 124, 0, 0, 313,
	0, 125, 704, 0, 247, 0, 126, 127, 128, 129,
	700, 702, 0, 0, 133, 0, 130, 0, 314, 131,
	717, 132, 718, 719, 720, 0, 683, 0, 0, 134,
	317, 135, 136, 0, 138, 137, 0, 705, 318, 139,
	0, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 320, 147, 148, 150, 149, 644, 0,
	673, 701, 151, 721, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 259, 321, 157, 322, 695, 158,
	159, 160, 161, 0, 696, 162, 262, 163, 0, 164,
	165, 166, 722, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 323,
	181, 182, 650, 183, 0, 187, 188, 189, 190, 0,
	265, 191, 192, 689, 193, 184, 185, 194, 0, 195,
	723, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	724, 200, 697, 0, 203, 0, 204, 205, 206, 207,
	208, 0, 270, 725, 726, 0, 0, 209, 698, 699,
	671, 210, 211, 2099, 213, 0, 0, 214, 215, 216,
	690, 217, 0, 218, 219, 220, 275, 727, 0, 0,
	221, 0, 0, 0, 0, 222, 223, 224, 225, 676,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	641, 642, 0, 0, 0, 90, 91, 0, 92, 651,
	0, 0, 0, 692, 654, 0, 0, 0, 93, 94,
	95, 227, 228, 229, 230, 96, 231, 232, 0, 97,
	233, 234, 98, 0, 691, 235, 236, 237, 0, 99,
	703, 0, 684, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 312, 107, 108, 0, 685, 687,
	0, 686, 688, 109, 110, 280, 111, 239, 112, 240,
	241, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 242, 118, 119, 120, 693,
	694, 0, 0, 0, 121, 122, 245, 0, 123, 0,
	124, 0, 0, 313, 0, 125, 704, 0, 247, 0,
	126, 127, 128, 129, 700, 702, 315, 0, 133, 0,
	130, 0, 314, 131, 250, 132, 251, 252, 253, 0,
	254, 0, 316, 134, 317, 135, 136, 0, 138, 137,
	0, 705, 318, 139, 319, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 256, 145, 320, 147, 148,
	150, 149, 0, 0, 0, 701, 151, 258, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 259, 321,
	157, 322, 695, 158, 159, 160, 161, 0, 696, 162,
	262, 163, 0, 164, 165, 166, 263, 167, 168, 0,
	169, 170, 171, 172, 173, 175, 176, 174, 177, 178,
	179, 0, 180, 323, 181, 182, 264, 183, 0, 187,
	188, 189, 190, 0, 265, 191, 192, 689, 193, 184,
	185, 194, 324, 195, 266, 267, 196, 0, 202, 197,
	198, 186, 199, 201, 268, 200, 697, 0, 203, 0,
	204, 205, 206, 207, 208, 0, 270, 271, 272, 0,
	0, 209, 698, 699, 0, 210, 211, 212, 213, 547,
	0, 214, 215, 216, 690, 217, 0, 218, 219, 220,
	275, 276, 0, 0, 221, 90, 91, 0, 92, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 93, 94,
	95, 227, 228, 229, 230, 96, 231, 232, 0, 97,
	233, 234, 98, 1589, 0, 235, 236, 237, 0, 99,
	238, 0, 311, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 312, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 280, 111, 239, 112, 240,
	241, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 242, 118, 119, 120, 243,
	244, 0, 0, 0, 121, 122, 245, 0, 123, 0,
	124, 0, 0, 313, 0, 125, 246, 0, 247, 0,
	126, 127, 128, 129, 248, 249, 315, 0, 133, 0,
	130, 0, 314, 131, 250, 132, 251, 252, 253, 0,
	254, 0, 316, 134, 317, 135, 136, 0, 138, 137,
	0, 255, 318, 139, 319, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 256, 145, 320, 147, 148,
	150, 149, 0, 0, 0, 257, 151, 258, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 259, 321,
	157, 322, 260, 158, 159, 160, 161, 0, 261, 162,
	262, 163, 0, 164, 165, 166, 263, 167, 168, 0,
	169, 170, 171, 172, 173, 175, 176, 174, 177, 178,
	179, 0, 180, 323, 181, 182, 264, 183, 0, 187,
	188, 189, 190, 71, 265, 191, 192, 0, 193, 184,
	185, 194, 324, 195, 266, 267, 196, 0, 202, 197,
	198, 186, 199, 201, 268, 200, 269, 0, 203, 73,
	204, 205, 206, 207, 208, 0, 270, 271, 272, 0,
	0, 209, 273, 274, 0, 210, 211, 212, 213, 0,
	0, 214, 215, 216, 0, 217, 0, 218, 219, 220,
	551, 276, 0, 0, 221, 0, 0, 0, 69, 222,
	223, 224, 225, 0, 70, 547, 767, 0, 877, 874,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 91, 68, 92, 0, 0, 0, 0, 226,
	0, 0, 0, 0, 93, 94, 95, 227, 228, 229,
	230, 96, 231, 232, 0, 97, 233, 234, 98, 0,
	0, 235, 236, 237, 0, 99, 238, 0, 311, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	312, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 280, 111, 239, 112, 240, 241, 880, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 242, 118, 119, 120, 243, 244, 871, 0, 0,
	121, 122, 245, 0, 123, 0, 124, 0, 0, 313,
	0, 125, 246, 0, 247, 0, 126, 127, 128, 129,
	248, 249, 315, 0, 133, 0, 130, 0, 314, 131,
	250, 132, 251, 252, 253, 0, 254, 0, 316, 134,
	317, 135, 136, 0, 138, 137, 0, 255, 318, 139,
	319, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 320, 147, 148, 150, 149, 0, 0,
	0, 257, 151, 258, 152, 153, 0, 154, 872, 0,
	155, 0, 0, 156, 259, 321, 157, 322, 260, 158,
	159, 160, 161, 0, 261, 162, 262, 163, 0, 164,
	165, 166, 263, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 323,
	181, 182, 264, 183, 0, 187, 188, 189, 190, 0,
	265, 191, 192, 0, 193, 184, 185, 194, 324, 195,
	266, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	268, 200, 269, 0, 203, 0, 204, 205, 206, 207,
	208, 0, 270, 271, 272, 0, 0, 209, 273, 274,
	870, 210, 211, 212, 213, 0, 0, 214, 215, 216,
	0, 217, 0, 218, 219, 220, 275, 276, 547, 767,
	221, 877, 874, 869, 0, 222, 223, 224, 225, 0,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	878, 875, 226, 0, 0, 0, 0, 93, 94, 95,
	227, 228, 229, 230, 96, 231, 232, 0, 97, 233,
	234, 98, 0, 0, 235, 236, 237, 0, 99, 238,
	0, 311, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 312, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 280, 111, 239, 112, 240, 241,
	865, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 242, 118, 119, 120, 243, 244,
	871, 0, 0, 121, 122, 245, 0, 123, 0, 124,
	0, 0, 313, 0, 125, 246, 0, 247, 0, 126,
	127, 128, 129, 248, 249, 315, 0, 133, 0, 130,
	0, 314, 131, 250, 132, 251, 252, 253, 0, 254,
	0, 316, 134, 317, 135, 136, 0, 138, 137, 0,
	255, 318, 139, 319, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 256, 145, 320, 147, 148, 150,
	149, 0, 0, 0, 257, 151, 258, 152, 153, 0,
	154, 872, 0, 155, 0, 0, 156, 259, 321, 157,
	322, 260, 158, 159, 160, 161, 0, 261, 162, 262,
	163, 0, 164, 165, 166, 263, 167, 168, 0, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	0, 180, 323, 181, 182, 264, 183, 0, 187, 188,
	189, 190, 0, 265, 191, 192, 0, 193, 184, 185,
	194, 324, 195, 266, 267, 196, 0, 202, 197, 198,
	186, 199, 201, 268, 200, 269, 0, 203, 0, 204,
	205, 206, 207, 208, 0, 270, 271, 272, 0, 0,
	209, 273, 274, 870, 210, 211, 212, 213, 0, 0,
	214, 215, 216, 0, 217, 0, 218, 219, 220, 275,
	276, 547, 767, 221, 877, 874, 869, 0, 222, 223,
	224, 225, 0, 0, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 878, 875, 226, 0, 0, 0, 0,
	93, 94, 95, 227, 228, 229, 230, 96, 231, 232,
	0, 97, 233, 234, 98, 0, 0, 235, 236, 237,
	0, 99, 238, 0, 311, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 312, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 280, 111, 239,
	112, 240, 241, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 242, 118, 119,
	120, 243, 244, 871, 0, 0, 121, 122, 245, 0,
	123, 0, 124, 0, 0, 313, 0, 125, 246, 0,
	247, 0, 126, 127, 128, 129, 248, 249, 315, 0,
	133, 0, 130, 0, 314, 131, 250, 132, 251, 252,
	253, 0, 254, 0, 316, 134, 317, 135, 136, 0,
	138, 137, 0, 255, 318, 139, 319, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 256, 145, 320,
	147, 148, 150, 149, 0, 0, 0, 257, 151, 258,
	152, 153, 0, 154, 872, 0, 155, 0, 0, 156,
	259, 321, 157, 322, 260, 158, 159, 160, 161, 0,
	261, 162, 262, 163, 0, 164, 165, 166, 263, 167,
	168, 0, 169, 170, 171, 172, 173, 175, 176, 174,
	177, 178, 179, 0, 180, 323, 181, 182, 264, 183,
	0, 187, 188, 189, 190, 0, 265, 191, 192, 0,
	193, 184, 185, 194, 324, 195, 266, 267, 196, 0,
	202, 197, 198, 186, 199, 201, 268, 200, 269, 0,
	203, 0, 204, 205, 206, 207, 208, 0, 270, 271,
	272, 0, 0, 209, 273, 274, 870, 210, 211, 212,
	213, 0, 0, 214, 215, 216, 0, 217, 0, 218,
	219, 220, 275, 276, 87, 0, 221, 0, 0, 0,
	0, 222, 223, 224, 225, 0, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 878, 875, 226, 0,
	0, 0, 0, 93, 94, 95, 227, 228, 229, 230,
	96, 231, 232, 0, 97, 233, 234, 98, 0, 0,
	235, 236, 237, 0, 99, 238, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	280, 111, 239, 112, 240, 241, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	242, 118, 119, 120, 243, 244, 0, 0, 0, 121,
	122, 245, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 246, 0, 247, 0, 126, 127, 128, 129, 248,
	249, 0, 0, 133, 0, 130, 0, 0, 131, 250,
	132, 251, 252, 253, 0, 254, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 255, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	256, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	257, 151, 258, 152, 153, 0, 154, 0, 501, 155,
	0, 0, 156, 259, 0, 157, 0, 260, 158, 159,
	160, 161, 0, 261, 162, 262, 163, 0, 164, 165,
	166, 263, 167, 168, 0, 169, 170, 171, 172, 173,
	175, 176, 174, 177, 178, 179, 0, 180, 0, 181,
	182, 264, 183, 0, 187, 188, 189, 190, 71, 265,
	191, 192, 0, 193, 184, 185, 194, 0, 195, 266,
	267, 196, 0, 202, 197, 198, 186, 199, 201, 268,
	200, 269, 0, 203, 73, 204, 205, 206, 207, 208,
	0, 270, 271, 272, 0, 0, 209, 273, 274, 0,
	210, 211, 212, 213, 0, 0, 214, 215, 216, 0,
	217, 0, 218, 219, 220, 551, 276, 0, 0, 221,
	87, 0, 0, 69, 222, 223, 224, 225, 0, 70,
	0, 0, 0, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 226, 0, 1196, 0, 1201, 93,
	94, 95, 227, 228, 229, 230, 96, 231, 232, 0,
	97, 233, 234, 98, 0, 0, 235, 236, 237, 0,
	99, 238, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 280, 111, 239, 112,
	240, 241, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 242, 118, 119, 120,
	243, 244, 0, 0, 0, 121, 122, 245, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 246, 0, 247,
	0, 126, 127, 128, 129, 248, 249, 0, 0, 133,
	0, 130, 0, 0, 131, 250, 132, 251, 252, 253,
	0, 254, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 255, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 256, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 257, 151, 258, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 259,
	0, 157, 0, 260, 158, 159, 160, 161, 0, 261,
	162, 262, 163, 0, 164, 165, 166, 263, 167, 168,
	0, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 0, 180, 0, 181, 182, 264, 183, 0,
	187, 188, 189, 190, 71, 265, 191, 192, 0, 193,
	184, 185, 194, 0, 195, 266, 267, 196, 0, 202,
	197, 198, 186, 199, 201, 268, 200, 269, 0, 203,
	73, 204, 205, 206, 207, 208, 0, 270, 271, 272,
	0, 0, 209, 273, 274, 0, 210, 211, 212, 213,
	0, 0, 214, 215, 216, 0, 217, 0, 218, 219,
	220, 551, 276, 0, 0, 221, 87, 0, 0, 69,
	222, 223, 224, 225, 0, 70, 0, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	226, 0, 0, 0, 68, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	501, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 0, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 87, 0, 0, 0, 222, 223, 224, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 226, 0, 1196, 0,
	1201, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 280, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 120, 243, 244, 0, 0, 0, 121, 122, 245,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 246,
	0, 247, 0, 126, 127, 128, 129, 248, 249, 0,
	0, 133, 0, 130, 0, 0, 131, 250, 132, 251,
	252, 253, 0, 254, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 255, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 257, 151,
	258, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 0, 157, 0, 260, 158, 159, 160, 161,
	0, 261, 162, 262, 163, 0, 164, 165, 166, 263,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 0, 181, 182, 264,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	0, 193, 184, 185, 194, 0, 195, 266, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	271, 272, 0, 0, 209, 273, 274, 0, 210, 211,
	212, 213, 87, 0, 214, 215, 216, 0, 217, 0,
	218, 219, 220, 275, 276, 0, 0, 221, 90, 91,
	0, 92, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 775, 235, 236,
	237, 0, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 280, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 120, 243, 244, 0, 0, 0, 121, 122, 245,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 246,
	0, 247, 0, 126, 127, 128, 129, 248, 249, 0,
	0, 133, 0, 130, 0, 0, 131, 250, 132, 251,
	252, 253, 0, 254, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 255, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 257, 151,
	258, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 0, 157, 0, 260, 158, 159, 160, 161,
	0, 261, 162, 262, 163, 0, 164, 165, 166, 263,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 0, 181, 182, 264,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	0, 193, 184, 185, 194, 0, 195, 266, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	271, 272, 0, 0, 209, 273, 274, 0, 210, 211,
	212, 213, 87, 0, 214, 215, 216, 0, 217, 0,
	218, 219, 220, 275, 276, 0, 0, 221, 90, 91,
	0, 92, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 1106, 0, 235, 236,
	237, 0, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 280, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 120, 243, 244, 0, 0, 0, 121, 122, 245,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 246,
	0, 247, 0, 126, 127, 128, 129, 248, 249, 0,
	0, 133, 0, 130, 0, 0, 131, 250, 132, 251,
	252, 253, 0, 254, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 255, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 257, 151,
	258, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 0, 157, 0, 260, 158, 159, 160, 161,
	0, 261, 162, 262, 163, 0, 164, 165, 166, 263,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 0, 181, 182, 264,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	0, 193, 184, 185, 194, 0, 195, 266, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	271, 272, 0, 0, 209, 273, 274, 0, 210, 211,
	212, 213, 87, 0, 214, 215, 216, 0, 217, 0,
	218, 219, 220, 275, 276, 0, 0, 221, 90, 91,
	0, 92, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 1711, 0, 235, 236,
	237, 0, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 280, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 120, 243, 244, 0, 0, 0, 121, 122, 245,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 246,
	0, 247, 0, 126, 127, 128, 129, 248, 249, 0,
	0, 133, 0, 130, 0, 0, 131, 250, 132, 251,
	252, 253, 0, 254, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 255, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 257, 151,
	258, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 0, 157, 0, 260, 158, 159, 160, 161,
	0, 261, 162, 262, 163, 0, 164, 165, 166, 263,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 0, 181, 182, 264,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	0, 193, 184, 185, 194, 0, 195, 266, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	271, 272, 0, 0, 209, 273, 274, 0, 210, 211,
	212, 213, 0, 0, 214, 215, 216, 0, 217, 0,
	218, 219, 220, 275, 276, 0, 0, 221, 0, 0,
	0, 0, 222, 223, 224, 225, 676, 665, 666, 663,
	664, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 738, 0, 0, 0,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 707,
	229, 708, 96, 709, 710, 0, 97, 233, 234, 98,
	0, 0, 711, 712, 237, 0, 99, 238, 0, 311,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 312, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 713, 112, 714, 715, 0, 113,
	0, 114, 0, 0, 0, 706, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 672, 0,
	0, 121, 122, 716, 0, 123, 0, 124, 0, 0,
	313, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 315, 0, 133, 0, 130, 0, 314,
	131, 717, 132, 718, 719, 720, 0, 683, 0, 316,
	134, 317, 135, 136, 0, 138, 137, 0, 255, 318,
	139, 319, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 320, 147, 148, 150, 149, 0,
	0, 673, 257, 151, 721, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 321, 157, 322, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 722, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	323, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 324,
	195, 723, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 724, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 725, 726, 0, 0, 209, 273,
	274, 671, 210, 211, 212, 213, 547, 767, 214, 215,
	216, 765, 217, 0, 218, 219, 220, 275, 727, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 311,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 312, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	313, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 315, 0, 133, 0, 130, 0, 314,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 316,
	134, 317, 135, 136, 0, 138, 137, 0, 255, 318,
	139, 319, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 320, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 321, 157, 322, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	323, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 324,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 83, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 82, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 0, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 547, 767, 0, 0, 222, 223, 224, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 86, 0, 0, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 311, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 312, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 280, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 120, 243, 244, 0, 0, 0, 121, 122, 245,
	0, 123, 0, 124, 0, 0, 313, 0, 125, 246,
	0, 247, 0, 126, 127, 128, 129, 248, 249, 315,
	0, 133, 0, 130, 0, 314, 131, 250, 132, 251,
	252, 253, 0, 254, 0, 316, 134, 317, 135, 136,
	0, 138, 137, 0, 255, 318, 139, 319, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	320, 147, 148, 150, 149, 0, 0, 0, 257, 151,
	258, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 321, 157, 322, 260, 158, 159, 160, 161,
	0, 261, 162, 262, 163, 0, 164, 165, 166, 263,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 323, 181, 182, 264,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	0, 193, 184, 185, 194, 324, 195, 266, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	271, 272, 0, 0, 209, 273, 274, 0, 210, 211,
	212, 213, 87, 0, 214, 215, 216, 0, 217, 0,
	218, 219, 220, 275, 276, 0, 0, 221, 90, 91,
	0, 92, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 280, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 120, 243, 244, 0, 0, 0, 121, 122, 245,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 246,
	0, 247, 0, 126, 127, 128, 129, 248, 249, 0,
	0, 133, 0, 130, 0, 0, 131, 250, 132, 251,
	252, 253, 0, 254, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 255, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 257, 151,
	258, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 0, 157, 0, 260, 158, 159, 160, 161,
	0, 261, 162, 262, 163, 0, 164, 165, 166, 263,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 0, 181, 182, 264,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	0, 193, 184, 185, 194, 0, 195, 266, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	271, 272, 0, 0, 209, 273, 274, 0, 210, 211,
	212, 213, 0, 0, 214, 215, 216, 0, 217, 0,
	218, 219, 220, 275, 276, 0, 547, 221, 0, 0,
	0, 0, 222, 223, 224, 225, 0, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 86,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 311,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 312, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	313, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 315, 0, 133, 0, 130, 0, 314,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 316,
	134, 317, 135, 136, 0, 138, 137, 0, 255, 318,
	139, 319, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 320, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 321, 157, 322, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	323, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 324,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 1063, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 1061, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 1172,
	0, 121, 122, 245, 0, 123, 0, 124, 1066, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 0, 0, 133, 1170, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 1065,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 1171, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 1063, 99, 238, 0, 0,
	1058, 100, 101, 102, 0, 103, 1061, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 1066, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 1057, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 1065,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 1064, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 1678, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	501, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 894, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 800, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	501, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 559, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 513, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	501, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 506, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	501, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 410, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 409, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 1365, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 1363, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 1352, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 924, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 424, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 785, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 0, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 616, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 611, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 565, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 436, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 435, 271, 272, 0, 0, 431, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 436, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 435, 271, 272, 0, 0, 431, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 543, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 540, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 537, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 535, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 509, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 490, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 429, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 427, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 436, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 430, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 428, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 435, 271, 272, 0, 0, 431, 273,
	274, 0, 210, 211, 212, 213, 87, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 0, 161, 0, 261, 162, 262, 163, 0,
	164, 0, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 0, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 0, 0, 214, 215,
	216, 0, 217, 0, 218, 219, 220, 275, 276, 0,
	0, 221, 0, 0, 0, 0, 222, 223, 224, 225,
	948, 949, 0, 968, 969, 970, 978, 979, 980, 0,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 951, 0, 0, 982, 0, 0, 0,
	0, 0, 948, 949, 0, 968, 969, 970, 978, 979,
	980, 0, 0, 0, 0, 0, 950, 0, 971, 0,
	0, 0, 965, 0, 0, 951, 0, 0, 982, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 950, 0,
	0, 0, 0, 0, 965, 0, 0, 0, 0, 0,
	0, 0, 948, 949, 0, 968, 969, 970, 978, 979,
	980, 0, 956, 0, 0, 0, 0, 0, 971, 0,
	0, 0, 0, 0, 0, 951, 0, 0, 982, 0,
	0, 975, 983, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 956, 0, 0, 981, 950, 0,
	0, 0, 0, 0, 965, 0, 0, 0, 0, 973,
	0, 0, 0, 975, 983, 966, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 981,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	972, 973, 0, 0, 0, 0, 0, 966, 0, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 975, 983, 0, 0, 0, 0, 0,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 981,
	0, 0, 0, 0, 0, 0, 0, 976, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 966, 0, 0,
	0, 0, 0, 0, 0, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 976,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 974, 0,
	0, 962, 963, 964, 977, 0, 961, 959, 960, 952,
	953, 954, 955, 957, 958, 967, 0, 0, 0, 0,
	0, 0, 1515, 0, 0, 0, 0, 0, 0, 976,
	974, 0, 0, 962, 963, 964, 977, 0, 961, 959,
	960, 952, 953, 954, 955, 957, 958, 0, 0, 0,
	0, 2038, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 948, 949, 0, 968, 969, 970, 978, 979, 980,
	0, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 0, 0, 951, 0, 0, 982, 0, 0,
	974, 0, 0, 962, 963, 964, 977, 0, 961, 959,
	960, 952, 953, 954, 955, 957, 958, 950, 0, 0,
	0, 2036, 0, 965, 0, 948, 949, 0, 968, 969,
	970, 978, 979, 980, 0, 0, 0, 0, 0, 0,
	0, 971, 0, 0, 0, 0, 0, 0, 951, 0,
	0, 982, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 950, 0, 956, 0, 0, 0, 965, 0, 948,
	949, 0, 968, 969, 970, 978, 979, 980, 0, 0,
	0, 0, 975, 983, 0, 971, 0, 0, 0, 0,
	0, 0, 951, 0, 0, 982, 0, 0, 981, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 0, 950, 966, 956, 0, 0,
	0, 965, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 975, 983, 0, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 981, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	966, 956, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	975, 983, 0, 0, 0, 972, 0, 0, 976, 0,
	0, 0, 0, 0, 0, 0, 981, 0, 0, 948,
	949, 0, 968, 969, 970, 978, 979, 980, 973, 0,
	0, 0, 0, 0, 966, 971, 0, 0, 0, 0,
	0, 0, 951, 0, 0, 982, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 972,
	0, 0, 976, 0, 0, 950, 0, 0, 0, 974,
	0, 965, 962, 963, 964, 977, 0, 961, 959, 960,
	952, 953, 954, 955, 957, 958, 0, 0, 0, 0,
	1981, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 967, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 976, 0, 0, 0,
	0, 956, 0, 974, 0, 0, 962, 963, 964, 977,
	0, 961, 959, 960, 952, 953, 954, 955, 957, 958,
	975, 983, 0, 0, 1976, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 981, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 973, 0,
	0, 0, 0, 0, 966, 0, 0, 974, 0, 0,
	962, 963, 964, 977, 0, 961, 959, 960, 952, 953,
	954, 955, 957, 958, 0, 0, 0, 0, 1972, 972,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 948, 949, 0, 968, 969, 970, 978,
	979, 980, 0, 0, 0, 0, 0, 0, 0, 971,
	0, 0, 0, 0, 0, 0, 951, 0, 0, 982,
	0, 0, 967, 0, 0, 948, 949, 0, 968, 969,
	970, 978, 979, 980, 0, 0, 976, 0, 0, 950,
	0, 971, 0, 0, 0, 965, 0, 0, 951, 0,
	0, 982, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 950, 0, 0, 0, 0, 0, 965, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 956, 0, 974, 0, 0,
	962, 963, 964, 977, 0, 961, 959, 960, 952, 953,
	954, 955, 957, 958, 975, 983, 0, 0, 1912, 0,
	0, 0, 0, 0, 0, 0, 0, 956, 0, 0,
	981, 0, 0, 948, 949, 0, 968, 969, 970, 978,
	979, 980, 973, 0, 0, 0, 975, 983, 966, 971,
	0, 0, 0, 0, 0, 0, 951, 0, 0, 982,
	0, 0, 981, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 972, 973, 0, 0, 0, 0, 950,
	966, 0, 0, 0, 0, 965, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	976, 0, 0, 0, 0, 956, 0, 0, 0, 0,
	1523, 1524, 0, 1541, 1542, 1543, 0, 0, 967, 0,
	0, 0, 0, 0, 975, 983, 1691, 0, 0, 0,
	0, 0, 976, 0, 0, 0, 0, 0, 0, 0,
	981, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 973, 0, 0, 0, 0, 0, 966, 0,
	0, 974, 1538, 0, 962, 963, 964, 977, 0, 961,
	959, 960, 952, 953, 954, 955, 957, 958, 0, 0,
	0, 0, 1890, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 974, 0, 0, 962, 963, 964, 977,
	0, 961, 959, 960, 952, 953, 954, 955, 957, 958,
	0, 0, 1529, 0, 1889, 0, 948, 949, 0, 968,
	969, 970, 978, 979, 980, 0, 967, 0, 0, 0,
	0, 0, 971, 0, 0, 0, 0, 0, 0, 951,
	976, 0, 982, 0, 0, 0, 0, 1544, 948, 949,
	0, 968, 969, 970, 978, 979, 980, 0, 0, 0,
	0, 0, 950, 0, 971, 1539, 0, 0, 965, 0,
	0, 951, 0, 0, 982, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 950, 0, 0, 0, 0, 0,
	965, 974, 0, 0, 962, 963, 964, 977, 0, 961,
	959, 960, 952, 953, 954, 955, 957, 958, 956, 0,
	0, 0, 1780, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1540, 0, 0, 0, 975, 983, 0,
	0, 948, 949, 0, 968, 969, 970, 978, 979, 980,
	956, 0, 0, 981, 0, 0, 0, 971, 0, 0,
	0, 0, 0, 0, 951, 973, 0, 982, 0, 975,
	983, 966, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 981, 0, 950, 0, 0,
	0, 0, 0, 965, 0, 0, 972, 973, 0, 0,
	0, 0, 0, 966, 0, 0, 0, 0, 0, 0,
	0, 1535, 1536, 1537, 0, 0, 1534, 1532, 1533, 1525,
	1526, 1527, 1528, 1530, 1531, 0, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 967,
	0, 0, 0, 956, 0, 0, 0, 0, 0, 0,
	0, 948, 949, 976, 968, 969, 970, 978, 979, 980,
	0, 0, 975, 983, 0, 0, 0, 971, 0, 0,
	0, 967, 0, 0, 951, 0, 0, 982, 981, 0,
	0, 0, 0, 0, 0, 976, 0, 0, 0, 0,
	973, 0, 0, 0, 0, 0, 966, 950, 0, 0,
	0, 0, 0, 965, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 974, 0, 0, 962, 963, 964,
	977, 972, 961, 959, 960, 952, 953, 954, 955, 957,
	958, 0, 0, 0, 0, 1714, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 974, 0, 0, 962,
	963, 964, 977, 956, 961, 959, 960, 952, 953, 954,
	955, 957, 958, 0, 967, 0, 0, 1698, 0, 0,
	0, 0, 975, 983, 0, 0, 948, 949, 976, 968,
	969, 970, 978, 979, 980, 0, 0, 0, 981, 0,
	0, 0, 971, 0, 0, 0, 0, 0, 0, 951,
	973, 0, 982, 0, 0, 0, 966, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 950, 0, 0, 0, 0, 0, 965, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 974,
	0, 0, 962, 963, 964, 977, 0, 961, 959, 960,
	952, 953, 954, 955, 957, 958, 0, 0, 0, 0,
	1273, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 956, 2121,
	0, 0, 0, 0, 0, 0, 948, 949, 976, 968,
	969, 970, 978, 979, 980, 0, 0, 975, 983, 0,
	0, 0, 971, 0, 0, 0, 0, 0, 0, 951,
	0, 0, 982, 981, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 973, 0, 0, 0, 0,
	0, 966, 950, 0, 0, 0, 0, 0, 965, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 974,
	0, 0, 962, 963, 964, 977, 972, 961, 959, 960,
	952, 953, 954, 955, 957, 958, 0, 0, 1490, 0,
	2120, 0, 0, 0, 0, 0, 0, 0, 0, 948,
	949, 0, 968, 969, 970, 978, 979, 980, 956, 0,
	1555, 0, 0, 1554, 0, 971, 0, 0, 0, 967,
	1188, 0, 951, 0, 0, 982, 0, 975, 983, 0,
	0, 0, 0, 976, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 981, 0, 950, 0, 0, 0, 0,
	0, 965, 0, 0, 0, 973, 0, 0, 0, 0,
	0, 966, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1189,
	0, 0, 0, 0, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 974, 0, 0, 962, 963, 964,
	977, 956, 961, 959, 960, 952, 953, 954, 955, 957,
	958, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 983, 0, 0, 0, 0, 0, 0, 0, 967,
	0, 0, 0, 0, 0, 0, 981, 0, 0, 0,
	0, 0, 0, 976, 0, 0, 0, 0, 973, 0,
	0, 0, 0, 0, 966, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 986, 0, 0, 0, 0, 0, 948, 949, 972,
	968, 969, 970, 978, 979, 980, 0, 0, 0, 0,
	0, 0, 0, 971, 0, 0, 0, 985, 0, 0,
	951, 0, 0, 982, 974, 0, 0, 962, 963, 964,
	977, 0, 961, 959, 960, 952, 953, 954, 955, 957,
	958, 0, 967, 950, 0, 0, 0, 0, 0, 965,
	0, 0, 0, 0, 0, 0, 976, 948, 949, 0,
	968, 969, 970, 978, 979, 980, 0, 0, 0, 0,
	0, 0, 0, 971, 0, 0, 0, 0, 0, 0,
	951, 0, 0, 982, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 956,
	0, 0, 0, 950, 0, 0, 0, 0, 0, 965,
	0, 0, 0, 0, 0, 0, 0, 974, 975, 983,
	962, 963, 964, 977, 0, 961, 959, 960, 952, 953,
	954, 955, 957, 958, 981, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 973, 0, 0, 0,
	0, 0, 966, 0, 0, 0, 0, 0, 0, 956,
	0, 0, 0, 0, 0, 948, 949, 0, 968, 969,
	970, 978, 979, 980, 0, 0, 0, 972, 975, 983,
	0, 971, 0, 0, 0, 0, 0, 0, 951, 0,
	0, 982, 0, 0, 981, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 973, 0, 0, 0,
	0, 950, 966, 0, 0, 0, 0, 965, 0, 0,
	967, 0, 0, 0, 0, 948, 949, 0, 968, 969,
	970, 978, 979, 980, 976, 0, 0, 972, 485, 0,
	0, 971, 0, 0, 0, 0, 0, 0, 951, 0,
	0, 982, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 956, 0, 0,
	0, 950, 0, 0, 0, 0, 0, 965, 0, 0,
	967, 0, 0, 0, 0, 0, 975, 983, 0, 0,
	0, 0, 0, 0, 976, 974, 0, 0, 962, 963,
	964, 977, 981, 961, 959, 960, 952, 953, 954, 955,
	957, 958, 0, 0, 973, 0, 0, 0, 0, 0,
	966, 0, 0, 0, 0, 0, 0, 956, 0, 0,
	0, 0, 1561, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 972, 975, 983, 0, 0,
	0, 0, 0, 0, 0, 974, 0, 0, 962, 963,
	964, 977, 981, 961, 959, 960, 952, 953, 954, 955,
	957, 958, 0, 0, 973, 0, 0, 0, 0, 0,
	966, 0, 0, 0, 0, 0, 0, 0, 967, 0,
	0, 0, 0, 948, 949, 0, 968, 969, 970, 978,
	979, 980, 976, 0, 0, 972, 0, 0, 0, 971,
	0, 0, 0, 1556, 0, 0, 951, 0, 0, 982,
	0, 0, 0, 0, 0, 1702, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 950,
	0, 0, 0, 0, 0, 965, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 976, 974, 0, 0, 962, 963, 964, 977,
	0, 961, 959, 960, 952, 953, 954, 955, 957, 958,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 975, 983, 0, 0, 0, 0,
	0, 0, 0, 974, 0, 0, 962, 963, 964, 977,
	981, 961, 959, 960, 952, 953, 954, 955, 957, 958,
	0, 0, 973, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 948, 949, 0, 968, 969, 970, 978, 979, 980,
	0, 0, 0, 972, 0, 0, 0, 971, 0, 0,
	0, 0, 0, 0, 951, 0, 0, 982, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 950, 0, 0,
	0, 0, 0, 965, 0, 0, 967, 0, 0, 0,
	0, 948, 949, 0, 968, 969, 970, 978, 979, 980,
	976, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 1514, 0, 0, 951, 0, 0, 982, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 956, 0, 0, 0, 950, 0, 0,
	0, 0, 0, 965, 0, 0, 0, 0, 0, 0,
	0, 0, 975, 983, 0, 0, 0, 0, 0, 0,
	0, 974, 0, 0, 962, 963, 964, 977, 981, 961,
	959, 960, 952, 953, 954, 955, 957, 958, 0, 0,
	973, 0, 0, 0, 0, 0, 966, 0, 0, 0,
	0, 0, 0, 956, 0, 0, 0, 0, 0, 948,
	949, 0, 968, 969, 970, 978, 979, 980, 0, 0,
	0, 972, 975, 983, 0, 971, 0, 0, 0, 0,
	0, 0, 951, 1521, 0, 982, 0, 0, 981, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 0, 950, 966, 0, 0, 0,
	0, 965, 0, 0, 967, 0, 0, 0, 0, 948,
	949, 0, 968, 969, 970, 978, 979, 980, 976, 0,
	0, 972, 0, 0, 0, 971, 0, 0, 0, 0,
	0, 0, 951, 0, 0, 982, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 956, 0, 0, 0, 950, 0, 0, 0, 0,
	0, 965, 0, 0, 967, 0, 0, 0, 0, 0,
	975, 983, 0, 0, 0, 0, 0, 0, 976, 974,
	0, 0, 962, 963, 964, 977, 981, 961, 959, 960,
	952, 953, 954, 955, 957, 958, 0, 0, 973, 0,
	0, 0, 0, 0, 966, 0, 0, 0, 0, 0,
	0, 956, 0, 0, 0, 948, 949, 0, 968, 969,
	970, 978, 979, 980, 0, 0, 0, 0, 0, 972,
	975, 983, 0, 0, 0, 0, 0, 0, 951, 974,
	0, 982, 962, 963, 964, 977, 981, 961, 959, 960,
	952, 953, 954, 955, 957, 958, 0, 0, 973, 0,
	0, 950, 0, 0, 966, 0, 0, 965, 0, 0,
	0, 0, 967, 0, 0, 0, 0, 948, 949, 0,
	968, 969, 970, 978, 979, 980, 976, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	951, 0, 0, 982, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 956, 0, 0,
	0, 0, 0, 950, 0, 0, 0, 0, 0, 965,
	0, 0, 967, 0, 0, 0, 975, 983, 0, 0,
	0, 0, 0, 0, 0, 0, 976, 974, 0, 0,
	962, 963, 964, 977, 0, 961, 959, 960, 952, 953,
	954, 955, 957, 958, 973, 0, 0, 0, 0, 0,
	966, 0, 0, 0, 0, 0, 0, 0, 0, 956,
	0, 0, 948, 949, 0, 0, 0, 0, 978, 979,
	980, 0, 0, 0, 0, 0, 0, 0, 975, 983,
	0, 0, 0, 0, 0, 951, 0, 974, 982, 0,
	962, 963, 964, 977, 981, 961, 959, 960, 952, 953,
	954, 955, 957, 958, 0, 0, 973, 0, 950, 0,
	0, 0, 966, 0, 965, 0, 0, 0, 967, 1523,
	1524, 0, 1541, 1542, 1543, 0, 0, 0, 0, 0,
	0, 0, 976, 0, 0, 1690, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	0, 1538, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 975, 983, 0, 0, 0, 0, 0,
	0, 0, 0, 974, 976, 0, 962, 963, 964, 977,
	0, 961, 959, 960, 952, 953, 954, 955, 957, 958,
	0, 973, 0, 0, 0, 0, 0, 966, 0, 0,
	0, 1529, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 826, 818, 843, 811, 834, 833, 0, 0,
	813, 812, 0, 0, 0, 845, 844, 0, 0, 0,
	0, 0, 0, 0, 0, 974, 1544, 0, 962, 963,
	964, 977, 0, 961, 959, 960, 952, 953, 954, 955,
	957, 958, 0, 0, 1539, 0, 0, 839, 0, 831,
	830, 0, 0, 0, 0, 967, 0, 0, 829, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 976,
	0, 0, 0, 0, 0, 0, 828, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 821, 820, 822, 823, 824, 0,
	842, 0, 1540, 0, 826, 818, 843, 811, 834, 833,
	0, 0, 813, 812, 0, 0, 0, 845, 844, 0,
	974, 0, 0, 0, 0, 815, 977, 0, 961, 959,
	960, 952, 953, 954, 955, 957, 958, 832, 0, 0,
	0, 819, 0, 0, 0, 0, 0, 0, 0, 839,
	0, 831, 830, 0, 0, 0, 0, 0, 0, 0,
	829, 0, 0, 0, 0, 0, 827, 0, 0, 0,
	1207, 1205, 1206, 1209, 1208, 0, 0, 0, 828, 0,
	1535, 1536, 1537, 0, 0, 1534, 1532, 1533, 1525, 1526,
	1527, 1528, 1530, 1531, 816, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 825, 817, 821, 820, 822, 823,
	824, 0, 842, 0, 847, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 814, 0, 0, 840, 841, 0,
	0, 0, 0, 0, 0, 0, 0, 815, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 846, 0, 819, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 825, 817, 0, 0,
	0, 0, 0, 0, 0, 0, 847, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 814, 0, 0, 840,
	841, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 846,
}
var sqlPact = [...]int{

	3716, -1000, 36, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 763, 16132, 16132, 20082, -1000, -1000, -1000, -1000, -1000,
	-1000, 731, 696, 655, 5122, 20082, 20082, 19802, 1135, 1135,
	21482, -1000, -1000, 24842, -1000, 3840, 485, 486, 485, 485,
	492, 21482, 20082, 607, 677, 138, -1000, 821, 3, 24562,
	20082, 1421, 34, 18122, 306, 3716, 19522, 24282, 20082, 19242,
	576, 32, 16708, 20082, -1000, 41, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1259, 341, 41,
	-1000, 1258, 1102, 1101, 18122, 24002, 23722, 23442, 23162, -1000,
	12355, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 772, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 320, 316, -1000, 18962,
	-1000, 947, -1000, 33, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 946, -1000, 20082, -1000, -1000, 22882, 22602, 685,
	315, 893, -1000, -1000, 572, 401, 1437, -1000, 48, -1000,
	1413, 678, -1000, -1000, 1255, -1000, 944, 1253, 1251, 1250,
	1245, 1243, 1242, 400, 801, 450, -1000, 1241, 1230, 893,
	-1000, 893, -1000, -1000, -1000, 575, 21482, -1000, -1000, 18122,
	-1000, 22322, 20082, 20082, 1127, 22042, -1000, 821, -1000, -1000,
	-1000, 991, 1396, 1396, 1396, 1436, 134, 130, 138, 18,
	20082, -1000, 311, 18, 9245, 9245, -1000, -1000, 306, -1000,
	353, 15268, -1000, 8294, -1000, 879, 1314, 444, 679, 1313,
	-63, 783, 777, 1312, 15852, 16708, 32, 31, -1000, -1000,
	-1000, 4818, 15852, 651, 14428, 41, -1000, -1000, -1000, 18122,
	20082, 20082, 703, 21762, -1000, 1309, 123, 1308, -1000, 119,
	1307, -1000, 119, 1306, 26, -1000, -1000, -1000, -1000, -1000,
	-1000, 306, 18682, 20082, 1541, 28637, -1000, 10514, -1000, -1000,
	16132, 1272, 16132, -1000, -1000, 1540, -1000, 20082, 10514, -1000,
	30, 29, 1060, 1131, 12954, 12661, 1352, 808, -1000, -1000,
	-1000, 45, 5122, 670, 18402, 20082, 1264, 16132, 20082, 20082,
	20082, 20082, 20082, 20082, -1000, 1057, -1000, -1000, 20082, 20082,
	734, 606, -1000, 27, 19, -1000, 21482, -1000, 129, -1000,
	301, 1021, 407, 136, 21202, 407, 1019, -1000, 991, -1000,
	952, 1045, 9563, 10514, 138, -1000, -1000, 138, 138, 10514,
	-1000, -1000, 20082, 18, 1538, 20082, 165, -1000, 27317, -1000,
	-1000, 10514, 10514, 10514, 10514, 10514, 901, 347, -1000, 299,
	298, 6061, -1000, -1000, 1651, -1000, -1000, -1000, 122, -1000,
	-1000, 10514, 41, -1000, -1000, -1000, -1000, 295, 1662, -1000,
	457, -1000, -1000, -1000, 405, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1263, 294, 293, -1000, -1000, -1000,
	-1000, 292, 291, 289, 286, 285, 283, 282, 281, 280,
	278, 277, 274, 270, 259, 253, 853, -1000, 426, -1000,
	-1000, 426, 426, -1000, 244, 244, 246, -1000, -1000, -1000,
	-1000, 244, -1000, -1000, -1000, 394, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 252, 165, -1000, -1000, -1000, 20082, 10,
	-1000, 28049, -1000, -3, 776, -1000, 17562, 1419, 1417, 1376,
	18122, 1469, 3, 1225, 1461, 3, 1224, 563, 20082, 20082,
	562, 561, 18122, 386, -1000, -1000, -1000, -1000, -1000, 20082,
	-1000, -1000, -7, -1000, -1000, 1221, 4, -1000, -1000, 414,
	92, 1532, 92, 14708, -1000, 20082, 20082, -1000, 20082, -1000,
	-1000, 20082, -1000, 20082, 20082, -1000, 20082, 249, 17002, 782,
	1305, 699, 3, -8, -1000, 1546, -1000, -1000, -1000, -1000,
	91, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 246, 853,
	244, 244, 244, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	394, -1000, -1000, 426, 426, 426, -1000, -1000, -10, 28049,
	559, -1000, 1220, 474, -1000, 413, -14, 827, 1096, 723,
	-1000, -1000, -1000, -1000, 17, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1642, -1000, -1000, 1650, 17,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1661,
	5122, -1000, -1000, -1000, -1000, -1000, -1000, 20082, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 20082, 20082,
	20082, 827, 1096, -1000, -1000, 18122, 17282, 1530, 1304, 859,
	-1000, 1511, 20082, 942, 1016, -1000, 596, 1299, -1000, -1000,
	-1000, -1000, 28049, -1000, 28049, 864, 1111, -1000, 1111, 8,
	-1000, 27139, -1000, 243, -16, 414, 9245, 14132, 28525, 28637,
	5122, 587, 10514, 10514, 10514, 10514, 10514, 10514, 10514, 10514,
	10514, 10514, 10514, 10514, 10514, 10514, 10514, 10514, 10514, 10514,
	10514, 10514, 10514, 10514, 935, 10514, 549, 10514, 10514, 10514,
	10514, 1095, 848, 228, 1018, 5122, -1000, -1000, 1621, 1621,
	1621, 28277, 28277, 229, 347, -1000, 10514, -1000, 8928, 130,
	26701, 6, -1000, -1000, -1000, 7013, 422, 28049, 41, 5743,
	-1000, 1648, 745, 1278, 1164, 242, 128, 127, 10514, 10514,
	10831, 10831, 10514, 11148, 10514, 10514, 6378, 10514, 10514, 10514,
	10514, 10514, 10514, -1000, 239, -1000, -1000, -1000, -1000, 1647,
	-1000, -1000, 1633, -1000, 586, 585, 1619, 414, 125, 8294,
	-1000, 782, 20082, 20082, 20082, -1000, -1000, 1015, 20922, 1013,
	28637, 20082, -1000, 238, 237, 1077, 1076, 20082, 20082, 20642,
	20362, 20082, 865, 3, -1000, 234, 3, -1000, 232, 20082,
	771, -1000, 20082, 20082, 741, 1153, 969, -1000, 408, 15852,
	646, 1210, 20082, 752, 10514, 789, -1000, 13836, 442, 20082,
	752, 121, -1000, -1000, -1000, 380, 20082, -1000, -1000, -1000,
	123, -1000, 119, 119, -1000, -1000, 18122, -1000, -1000, -1000,
	-1000, -1000, -1000, 28637, 344, 342, -1000, 1616, 548, -1000,
	545, 544, 543, -1000, 231, -1000, 10514, 20082, 20082, 1096,
	-1000, -1000, -1000, -1000, 713, -1000, 803, -1000, 13247, -1000,
	-1000, -1000, -1000, -5, -1000, -1000, -1000, 386, -1000, -1000,
	-1000, 120, -21, 2, 28637, -1000, -1000, -1000, -1000, -1000,
	20082, 312, 20082, 3, 20082, -1000, 1660, 3, 20082, 1297,
	1320, 372, 20082, -1000, -1000, -1000, 10514, -1000, -1000, -1000,
	3, -1000, 1162, -1000, -27, 1302, 1389, -129, 124, 389,
	-1000, 13540, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 399, 359, 359, 568, 568, 568, 568, 1726,
	3178, 2469, 2171, 28382, 28382, 28382, 1032, 335, 335, 28382,
	28382, 28382, 28277, 28109, 161, 10514, 10514, 536, 847, 228,
	161, 10514, 161, 161, 161, 161, -1000, 908, -1000, -1000,
	-1000, -1000, 1197, 222, 11148, 11148, -1000, -1000, -1000, 6061,
	11465, -1000, -1000, -1000, -1000, -1000, 220, 10514, -1000, 26811,
	-172, -28, -1000, -1000, 10514, -30, -112, -1000, -1000, 626,
	-1000, 10514, -1000, 25, 10514, 10514, 10514, 115, 114, -1000,
	907, 218, 214, 10514, -1000, -1000, 27941, 25420, 111, 1196,
	-96, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 110, 109,
	27881, -96, 108, 188, -1000, 11148, 11148, 11148, 6061, 213,
	107, 27046, -96, 27713, 8611, 8611, 8611, 106, 27545, 10514,
	-96, 3719, 3665, 3345, -33, -37, -39, 1608, -48, 102,
	398, 393, 101, 1162, -1000, -1000, -1000, -1000, 534, 532,
	1294, -1000, 1003, -1000, 446, -1000, 735, 10514, 12075, 211,
	210, 836, -1000, 1293, 992, 1292, 992, -1000, -3, 719,
	-1000, 10514, -1000, 10514, -1000, 530, -1000, -1000, 526, 408,
	1182, 615, -1000, 925, -1000, -1000, 633, -1000, -1000, 6695,
	28049, -1000, 752, 1394, -52, -1000, -1000, -1000, 414, 14708,
	14132, 8294, -53, -1000, -1000, -1000, 782, -1000, 482, 1604,
	98, 1027, 937, 810, 718, 1601, 28049, -5, -5, -1000,
	-1000, -1000, -1000, -1000, 20082, -1000, 1130, -1000, 17282, 209,
	20082, 208, -1000, 207, -1000, -1000, 205, 20082, 1058, 372,
	16428, -1000, 407, -1000, 97, 1158, 1428, -1000, 14132, 1085,
	1081, 14132, 993, 909, 909, 909, -1000, 201, 309, 389,
	4196, 10514, 17842, 914, 71, 88, 1302, 10514, 161, 161,
	10514, 11148, 11148, -1000, 161, -1000, -1000, -1000, -1000, -1000,
	1180, 200, 10514, 28637, 28439, 26470, -54, -1000, 7977, -9,
	-1000, 10514, -1000, 26608, -1000, -1000, 167, 1318, -1000, 10514,
	27485, 87, 7660, -1000, 27377, -22, -22, -1000, 1659, -1000,
	14988, 419, 922, 26576, 28525, 28637, -1000, 10514, -1000, -1000,
	1176, 10514, -1000, 28525, 28637, 11148, 11148, 11148, 11148, 11148,
	11148, 11148, 11148, 11148, 11148, 11148, 11148, 11148, 11148, 11148,
	11148, 11148, 11148, 11148, 1054, 11148, 1607, 1607, 1607, -18,
	7343, -1000, 1211, 1176, 10514, 10514, 28637, 85, 84, 82,
	-1000, 10514, -96, 10514, 10514, 10514, -1000, -1000, -1000, 80,
	-1000, 1596, -1000, -1000, -1000, -1000, 1158, 20082, 20082, 20082,
	1290, -1000, 2785, -1000, 26363, -61, -1000, 317, 1409, 10514,
	-1000, -1000, 199, 12075, 20082, -1000, 1103, 1099, 463, 20082,
	-1000, 20082, -1000, 20082, 20082, 20082, -67, -68, 20082, 20082,
	-1000, 15852, 581, 198, -1000, -23, -1000, -1000, 221, 3,
	752, -1000, -25, -1000, 379, -1000, 340, 339, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 78, -1000, -1000, 1137,
	-1000, 12075, 193, 20082, 17282, 1508, 12075, 939, 1070, 372,
	16428, -1000, 596, -1000, 415, 10514, 10514, 1302, 14132, 14132,
	1208, 1071, 14132, -1000, -1000, -1000, -1000, 338, 365, 337,
	12355, 17842, -1000, 1591, 1053, -69, -1000, -1000, 20082, 191,
	-1000, 389, 1509, 161, 3682, 2924, 10514, 28637, 28215, -75,
	10514, 10514, -1000, -76, -1000, 10514, 334, 28049, -1000, -1000,
	-1000, 28049, 10514, 1623, 10514, 77, 75, 67, -1000, -1000,
	-1000, 25122, 10514, 64, -1000, 61, 60, 28049, 1211, 28049,
	-1000, -1000, 431, 431, 661, 661, 661, 661, 1607, 1969,
	1952, 2371, 1012, 1012, 1012, 1000, 412, 412, 1012, 1012,
	1012, 1171, 1055, 190, 2507, 10514, -77, -1000, -1000, -1000,
	28049, 28049, 59, -1000, -1000, -1000, -96, 3283, 26255, 26223,
	-1000, 57, 415, -1000, -1000, -1000, 20082, -1000, 20082, -1000,
	5122, 20082, 1160, 985, -1000, -1000, 1075, 189, 11148, 20082,
	-1000, 822, 12075, 1386, 41, 5122, 1386, 26029, 5743, -81,
	-85, 981, -1000, 976, 10514, -1000, 28637, 992, 992, -1000,
	519, 517, 516, 501, -1000, -1000, -66, 15572, 1657, 1310,
	20082, 1371, -1000, -1000, 186, -1000, -1000, -1000, 891, -87,
	12075, -89, 56, 3, -95, 20082, -1000, 372, 16428, -1000,
	1320, -1000, 20082, 28049, -96, -1000, 1208, -1000, 175, 10514,
	14132, -1000, -129, -1000, -97, -1000, 389, -101, -1000, 333,
	-167, -1000, 371, -1000, 389, 168, 20082, 17842, 10514, 10514,
	28215, -102, -1000, 161, 161, -1000, 25889, -1000, 28049, -1000,
	27377, -1000, -1000, -1000, 873, -1000, 25835, -1000, -1000, -1000,
	-1000, 11148, 1170, 166, 28637, 25781, -1000, -1000, 10514, -1000,
	-1000, -1000, -1000, -1000, 977, -1000, -1000, 20082, 990, -1000,
	-1000, 10514, 2507, 164, 1130, 162, -1000, -1000, -1000, -1000,
	-1000, -1000, 1409, 25, -1000, 790, -1000, -1000, 28049, 1408,
	-1000, -1000, 20082, 20082, 160, 158, -1000, 147, 41, -103,
	-1000, 364, 567, -107, 20082, -1000, -1000, 5426, 20082, 822,
	-108, -1000, 1130, -1000, 822, 141, 16428, -1000, 1058, -86,
	-1000, 1494, -1000, 20082, 28049, -1000, 389, -1000, 1589, 17842,
	249, -1000, 1053, -1000, 4511, 17842, 20082, -120, -1000, 161,
	161, -1000, -1000, 55, 922, 1424, -1000, 2943, 11148, 28637,
	-124, -1000, 25512, -1000, -1000, 1289, 25452, 1033, 20082, -1000,
	20082, 1386, 54, 20082, 449, 5122, -1000, -1000, 10514, 10514,
	10514, 1657, -1000, -1000, 1656, 702, -1000, 414, -1000, 140,
	1130, 822, -1000, 1130, 12075, -1000, 1070, 20082, 137, -136,
	17842, -1000, -1000, 323, -1000, -1000, 1585, -1000, -137, -1000,
	-1000, 747, 10514, 2943, -142, -1000, -1000, 1281, -1000, 928,
	877, 53, -144, -1000, -1000, 136, -1000, 10514, -1000, -146,
	-148, -22, -1000, -1000, 14708, -1000, 20082, -1000, 1130, -1000,
	-150, -1000, -1000, -1000, -1000, -1000, 389, 322, -1000, 52,
	10197, 10197, -96, -1000, 20082, -1000, 934, 933, 652, -1000,
	-1000, -1000, -1000, -1000, 1033, 28049, -1000, -1000, 50, -126,
	-152, -1000, 822, 17842, -1000, -1000, -1000, -1000, 11771, 943,
	726, 26936, -1000, -1000, -1000, 1330, -1000, 459, 945, 945,
	928, 1623, -1000, 982, 1130, -1000, 1551, -1000, -1000, -1000,
	-1000, -1000, -1000, 1564, -1000, -1000, 1067, -1000, -1000, -1000,
	-1000, -1000, -1000, 9880, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1911, 1909, 1455, 1647, 1906, 1905, 1635, 1903, 1899,
	1897, 1895, 1890, 1889, 124, 1624, 1566, 31, 1563, 1886,
	118, 1885, 1883, 1880, 121, 1878, 1875, 1867, 1862, 58,
	1859, 1856, 1557, 1551, 1513, 1500, 1855, 1853, 115, 1846,
	25, 1845, 89, 1844, 50, 173, 2254, 153, 1843, 1842,
	1840, 18, 117, 90, 1839, 95, 1838, 1837, 66, 41,
	29, 12, 1832, 113, 132, 954, 40, 1830, 1827, 149,
	1824, 26, 30, 2106, 160, 159, 136, 139, 1823, 1822,
	1819, 1818, 75, 1817, 3, 1815, 1814, 14, 73, 20,
	1813, 28, 39, 1812, 1808, 142, 1806, 88, 112, 1453,
	110, 143, 269, 1804, 101, 10, 98, 1800, 1799, 144,
	43, 1798, 21, 100, 148, 1797, 65, 161, 94, 37,
	81, 114, 1796, 1795, 1794, 107, 1793, 128, 91, 1792,
	1791, 96, 1790, 147, 152, 1789, 1787, 145, 1785, 1784,
	156, 167, 1783, 1781, 163, 1778, 16, 49, 87, 38,
	1447, 1446, 127, 82, 36, 22, 1777, 1478, 831, 632,
	68, 102, 76, 60, 103, 61, 86, 151, 19, 1776,
	1775, 129, 1774, 1773, 1770, 1768, 1766, 104, 1765, 1764,
	93, 150, 11, 9, 13, 109, 42, 69, 106, 133,
	158, 131, 1763, 108, 138, 64, 57, 1762, 1761, 1637,
	137, 1760, 1757, 1756, 1601, 1594, 1403, 727, 1755, 1754,
	1162, 742, 1753, 1752, 92, 1750, 135, 1747, 1745, 154,
	274, 130, 1744, 56, 55, 111, 1742, 126, 72, 0,
	360, 249, 1739, 140, 97, 1734, 1733, 1730, 1726, 32,
	2, 8, 5, 6, 4, 52, 27, 1725, 1722, 146,
	23, 85, 1716, 162, 1715, 1709, 1708, 44, 1704, 15,
	1702, 17, 1698, 1697, 7, 1, 1696, 1689, 155, 1688,
	120, 1687, 1535, 1685, 157, 1682, 1680, 1593, 53, 105,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 53, 53, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 50, 50, 55, 55, 55, 57, 57, 54, 54,
	49, 49, 5, 5, 227, 227, 228, 228, 39, 39,
	43, 43, 40, 41, 41, 42, 42, 6, 6, 6,
	7, 7, 7, 7, 7, 7, 14, 15, 15, 15,
	15, 15, 15, 15, 15, 101, 101, 100, 100, 103,
	103, 16, 16, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 195, 195, 194, 19,
	169, 169, 20, 20, 20, 20, 21, 126, 126, 22,
	22, 22, 22, 23, 28, 268, 268, 268, 272, 272,
	273, 273, 274, 274, 274, 274, 274, 274, 274, 270,
	270, 27, 31, 31, 31, 31, 31, 31, 145, 141,
	141, 143, 143, 143, 143, 64, 140, 140, 140, 140,
	142, 142, 142, 142, 220, 219, 219, 225, 225, 225,
	79, 79, 79, 79, 79, 80, 80, 80, 218, 218,
	218, 218, 226, 226, 226, 226, 226, 226, 81, 81,
	81, 224, 224, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	18, 269, 269, 271, 271, 33, 33, 34, 34, 35,
	35, 35, 35, 10, 10, 11, 11, 82, 82, 83,
	83, 148, 148, 148, 148, 84, 84, 56, 56, 56,
	147, 237, 237, 238, 238, 238, 238, 238, 238, 239,
	239, 239, 239, 239, 239, 239, 235, 235, 236, 233,
	233, 234, 234, 234, 234, 275, 275, 146, 146, 87,
	87, 242, 242, 242, 242, 240, 240, 240, 240, 240,
	243, 241, 244, 244, 244, 244, 244, 181, 181, 181,
	37, 12, 62, 62, 13, 9, 9, 130, 130, 91,
	91, 186, 186, 186, 72, 72, 51, 51, 51, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	131, 131, 132, 132, 25, 30, 36, 36, 36, 36,
	36, 277, 277, 68, 68, 68, 68, 69, 69, 144,
	144, 144, 144, 144, 63, 8, 8, 58, 58, 59,
	59, 60, 60, 61, 61, 278, 278, 24, 24, 24,
	75, 75, 137, 137, 137, 139, 139, 138, 138, 138,
	116, 116, 116, 38, 96, 96, 105, 105, 106, 106,
	192, 107, 107, 29, 29, 46, 46, 44, 44, 44,
	44, 44, 44, 45, 45, 47, 47, 47, 47, 47,
	47, 47, 250, 250, 250, 253, 253, 249, 251, 251,
	252, 252, 276, 276, 117, 117, 117, 86, 85, 85,
	89, 89, 88, 90, 90, 185, 114, 114, 114, 114,
	133, 134, 134, 135, 135, 136, 136, 113, 113, 165,
	165, 48, 48, 95, 95, 97, 97, 155, 155, 155,
	156, 156, 154, 154, 154, 154, 187, 187, 187, 187,
	187, 187, 187, 187, 266, 266, 266, 267, 267, 184,
	184, 188, 188, 188, 188, 188, 188, 182, 182, 182,
	182, 183, 183, 193, 193, 120, 120, 120, 120, 118,
	118, 119, 119, 189, 189, 189, 189, 115, 115, 190,
	190, 190, 149, 149, 196, 196, 196, 214, 214, 94,
	94, 94, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 198, 198,
	198, 198, 200, 200, 200, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 213,
	213, 213, 213, 213, 201, 201, 208, 208, 209, 209,
	210, 211, 202, 202, 203, 203, 204, 205, 212, 212,
	212, 212, 216, 216, 206, 206, 206, 206, 206, 207,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 128, 128, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 159, 159,
	159, 159, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 245, 245, 245, 245, 245, 245, 245,
	247, 247, 248, 248, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 254, 254, 255, 255, 257, 257, 258, 258, 259,
	260, 260, 260, 261, 262, 262, 256, 256, 263, 263,
	263, 264, 264, 265, 265, 265, 265, 265, 171, 171,
	171, 172, 172, 173, 179, 179, 179, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 70, 70, 70, 70, 70, 102, 102,
	168, 168, 166, 166, 166, 170, 170, 121, 121, 215,
	215, 215, 215, 215, 215, 215, 122, 122, 122, 129,
	123, 123, 124, 124, 124, 124, 124, 124, 162, 163,
	125, 125, 125, 164, 164, 174, 178, 178, 177, 176,
	176, 175, 175, 152, 152, 153, 153, 151, 150, 110,
	110, 109, 109, 108, 108, 279, 279, 180, 180, 111,
	111, 112, 104, 104, 191, 191, 191, 191, 98, 98,
	77, 77, 99, 99, 73, 73, 76, 76, 74, 74,
	74, 74, 92, 92, 93, 93, 71, 71, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 217,
	217, 217, 167, 65, 65, 65, 66, 66, 67, 67,
	222, 222, 222, 223, 223, 223, 223, 221, 221, 221,
	221, 221, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	2, 0, 7, 6, 1, 1, 1, 3, 3, 0,
	2, 0, 2, 1, 3, 5, 0, 4, 6, 7,
	1, 1, 1, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 4, 6, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 5,
	3, 0, 1, 1, 1, 1, 3, 3, 0, 2,
	3, 2, 3, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 2, 3, 6, 3, 4, 1, 5, 2,
	1, 1, 1, 3, 3, 2, 3, 3, 3, 3,
	1, 3, 3, 2, 1, 1, 3, 1, 1, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 2, 2, 4, 4, 4, 2, 2,
	4, 2, 4, 4, 4, 4, 4, 4, 4, 2,
	3, 4, 3, 3, 4, 4, 2, 5, 5, 6,
	2, 2, 0, 2, 0, 6, 6, 5, 5, 4,
	12, 4, 12, 7, 10, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 1, 8, 0, 1, 1, 0,
	3, 2, 0, 3, 1, 2, 2, 3, 6, 2,
	1, 1, 2, 4, 2, 5, 7, 8, 5, 3,
	1, 4, 6, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 5, 2, 0, 6, 11, 14, 1, 0, 1,
	3, 3, 3, 5, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 6, 8, 8, 10, 8, 10,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	1, 3, 3, 0, 3, 8, 11, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 6,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 2, 0, 8, 2, 0, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 1, 1, 8, 8, 1, 2, 4,
	4, 4, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 2, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 3, 3, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 7, 4, 6, 3,
	1, 5, 6, 9, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	5, 2, 1, 1, 1, 1, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 3,
	4, 4, 5, 3, 3, 3, 3, 3, 4, 3,
	4, 3, 3, 4, 3, 4, 3, 4, 5, 6,
	6, 7, 6, 7, 6, 7, 3, 4, 4, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 2, 1, 3, 1, 1, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	4, 1, 1, 1, 5, 1, 3, 1, 3, 1,
	1, 1, 1, 6, 6, 4, 4, 4, 4, 4,
	6, 5, 5, 5, 4, 8, 6, 6, 4, 4,
	4, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 3,
	5, 4, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 3,
	1, 3, 3, 3, 2, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 0, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 1, 1,
	3, 3, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 2, 3, 1, 1, 1,
	2, 2, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -35, -36, -25, -27, -37,
	-38, 23, 34, 224, 66, -8, -9, -10, -11, -12,
	-13, -252, 94, 103, 125, 206, 101, 87, 119, 227,
	234, -44, -46, 243, -145, 246, 35, 255, 60, 97,
	229, 222, 223, 280, 68, -250, -47, -45, 328, 303,
	309, 238, -48, 264, 295, 331, 264, 134, 80, 298,
	-268, -99, 264, 80, -74, -65, 321, 4, -229, -231,
	20, 21, 23, 33, 34, 35, 40, 44, 47, 54,
	59, 60, 61, 63, 65, 66, 67, 70, 71, 78,
	79, 81, 83, 87, 89, 93, 94, 96, 101, 102,
	103, 109, 110, 113, 115, 120, 125, 126, 127, 128,
	135, 138, 140, 133, 148, 150, 151, 154, 153, 158,
	161, 164, 166, 167, 168, 171, 169, 173, 174, 176,
	175, 181, 183, 184, 186, 189, 192, 195, 198, 199,
	200, 201, 204, 206, 208, 209, 210, 212, 213, 215,
	216, 217, 218, 219, 222, 220, 221, 223, 224, 225,
	227, 229, 230, 232, 244, 245, 256, 234, 235, 236,
	237, 240, 241, 243, 246, 248, 251, 254, 255, 257,
	260, 258, 253, 263, 265, 266, 267, 268, 269, 276,
	280, 281, 282, 283, 286, 287, 288, 290, 292, 293,
	294, 299, 304, 305, 306, 307, 28, 36, 37, 38,
	39, 41, 42, 45, 46, 50, 51, 52, 55, 82,
	84, 85, 100, 104, 105, 111, 121, 123, 129, 130,
	139, 141, 142, 143, 145, 156, 170, 180, 182, 193,
	197, 203, 205, 211, 231, 239, 249, 250, 259, 261,
	271, 272, 273, 277, 278, 295, 296, -268, -73, -65,
	80, 89, 138, 288, 287, 80, 134, 264, 298, -17,
	328, -29, -7, -15, -4, -24, -38, -14, -32, -18,
	-33, -34, -35, -16, 23, -221, 4, -229, -231, -230,
	-232, 57, 69, 118, 137, 131, 147, 149, 157, 159,
	172, 194, 196, 228, 247, 22, 24, 25, 26, 27,
	29, 30, 31, 32, 43, 48, 49, 53, 56, 58,
	64, 68, 72, 73, 74, 75, 76, 77, 86, 88,
	90, 91, 92, 95, 97, 99, 106, 107, 108, 114,
	116, 117, 119, 122, 124, 132, 134, 136, 144, 146,
	152, 155, 160, 162, 163, 177, 178, 179, 185, 187,
	188, 190, 191, 202, 207, 214, 226, 238, 242, 252,
	262, 264, 270, 274, 275, 279, 284, 285, 289, 291,
	297, 298, 300, 301, 302, 303, -65, -65, -65, 206,
	22, -272, 22, -273, -274, 68, 94, 119, 238, 138,
	89, 287, -272, -69, 234, -65, -141, 161, 241, 54,
	231, 276, -142, -140, -220, 271, 171, -100, -65, 4,
	22, 54, 242, 80, 59, 81, 120, 134, 135, 64,
	65, 151, 265, 271, 276, 68, 290, 267, 102, -277,
	276, 276, -277, -277, -68, 276, 274, -69, -220, -276,
	264, 264, 289, 298, -130, 80, 285, -45, -47, -46,
	-88, -89, 284, 144, 99, 191, -44, -46, -250, -253,
	212, -249, -65, -253, -85, -86, 22, 91, 332, -189,
	-73, 188, -112, 328, -3, -189, 129, -73, -76, 129,
	-73, -65, -189, 129, 274, 332, -99, -92, -65, -151,
	-150, 330, 117, 117, 328, -109, -110, -150, -151, 117,
	146, 146, -190, -189, -65, 129, -77, 129, -76, -101,
	129, -100, -101, 129, -195, -194, -223, 4, -229, -231,
	-230, 295, 264, 134, -169, 328, -126, 328, -65, 22,
	187, 332, 187, -65, -141, 52, -141, 244, 328, -143,
	-63, -64, 148, 208, 274, 313, 117, 307, -81, 5,
	86, -103, 330, 54, 244, 117, -269, 187, 117, 117,
	117, 117, 117, 117, 307, 148, 208, 256, 264, 298,
	117, 117, -144, -63, -64, -144, 274, -69, -115, -189,
	-100, 129, -65, -100, 134, -65, 129, -88, -89, -114,
	-133, -134, 160, 185, -117, 22, 91, -117, -117, 44,
	329, 329, 332, -253, -93, 328, -104, -191, -157, 321,
	-159, 319, 320, 314, 177, 308, -171, -161, -174, 100,
	231, 328, -73, -160, 333, 9, -247, -46, 29, -172,
	-173, 48, -65, 7, 8, 5, 6, -71, -198, -167,
	-207, 279, 106, 179, -245, -246, 4, -229, -222, -199,
	-209, -203, -206, 145, 57, 73, 76, 74, 77, 242,
	289, 49, 28, 104, 105, 197, 203, 261, 277, 278,
	129, 180, 130, 55, 121, 156, 93, 37, 39, 41,
	42, 50, 51, 82, 84, 85, 111, 139, 141, 142,
	143, 182, 211, 249, 259, 272, 273, 296, -230, -210,
	-211, -204, -205, -212, -104, -112, 321, -73, 328, -111,
	-180, -157, 86, -53, 220, -52, 21, 23, 94, 293,
	100, 253, 268, 235, 253, 268, 235, 220, 100, 333,
	220, 220, 100, -227, -224, 9, -223, 5, -74, 332,
	-221, 321, -228, -227, 257, 329, -98, -73, -110, -190,
	-75, -73, -75, 243, -65, 30, 100, -55, 332, 47,
	225, 100, -55, 332, 100, -55, 100, 329, 332, -189,
	129, -76, 30, -168, -196, -197, -199, -208, -202, -206,
	-207, 40, 46, 45, 269, 170, 239, 250, 38, 186,
	140, 139, 141, 142, 143, 249, 37, 211, 111, 93,
	85, 84, 182, 42, 41, -210, -211, -204, -205, 82,
	272, 273, 145, 39, 51, 50, 296, 259, -102, -157,
	-268, -274, -268, 30, -140, -220, -102, 332, 332, 158,
	-80, 164, 176, 126, -219, 86, -225, -218, -181, 9,
	279, 106, 187, -224, 8, 320, -217, 7, 319, -219,
	86, 71, -226, 5, 4, -167, -181, 86, 161, -207,
	330, -221, 245, -100, 22, -220, -271, 114, -268, -220,
	-220, -220, -220, -220, -65, 158, -220, -220, 264, 134,
	264, 332, 332, -69, -55, 332, 328, -87, 177, -251,
	303, -87, 328, -66, 129, -65, -251, 177, -114, -134,
	-133, -135, -157, 22, -157, -159, -45, -45, -45, -90,
	-185, -157, -249, 30, -92, -95, 332, 117, 10, 11,
	56, 33, 319, 320, 321, 322, 112, 323, 324, 317,
	318, 316, 311, 312, 313, 62, 165, 233, 13, 14,
	15, 26, 190, 159, 308, 131, 247, 314, 16, 17,
	18, 147, 36, 132, -70, 30, 4, -78, -157, -157,
	-157, -157, -157, 196, -108, -152, 326, -46, 328, -46,
	-157, -102, 7, -46, -166, 326, -175, -157, -109, 328,
	5, 328, 5, -254, 304, 114, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 205, -216, 299, -216, -216, -200, 328,
	-200, -201, 328, -200, 305, 309, 328, -95, -73, 332,
	329, 332, 274, -131, 64, 58, -147, 129, 58, -233,
	-65, 64, -234, 53, 285, 207, 116, -131, 64, -131,
	64, 64, -189, 33, -29, 117, 33, -29, 117, 274,
	-76, -65, 274, 274, -189, -193, 310, -65, -193, 332,
	117, 329, 332, -149, 301, -137, -29, 328, 86, 30,
	-137, -105, -106, -192, -107, -73, 328, -65, -65, -76,
	-77, -100, -101, -101, -17, -194, 100, -20, -29, -24,
	-38, -14, 329, 332, -94, 29, -127, 328, 306, 168,
	83, 127, 167, -128, 237, 329, 332, 274, 117, 276,
	329, -64, -63, -79, 210, 251, 221, 240, 332, 8,
	7, 7, -221, -270, -65, -73, -76, -73, -64, -63,
	-189, -82, -92, -83, -65, -148, -147, -235, -236, -233,
	134, 285, 107, 30, 100, -62, 201, 30, 187, 177,
	-58, 266, 100, -136, 231, 232, 332, -51, 31, 90,
	328, 329, -149, -191, -97, -187, 326, -189, -73, -46,
	-188, 328, -214, -196, -213, 216, 217, 215, 219, 218,
	-196, -221, 271, -157, -157, -157, -157, -157, -157, -157,
	-157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
	-157, -157, -157, -157, -157, 159, 131, 247, 36, 132,
	-157, 274, -157, -157, -157, -157, 169, 177, 179, 279,
	106, 286, 91, 183, -279, 262, 32, -164, -46, 328,
	-179, 27, 252, 22, -221, -171, 231, 328, -152, -157,
	-153, -102, 329, 329, 332, -102, -170, 327, -166, -178,
	-177, 300, 329, -102, 297, 22, 91, 321, 7, -127,
	-255, 109, 122, 328, 329, 329, -157, -157, -121, -215,
	-102, 4, 306, 168, 83, 127, 167, 237, -121, -122,
	-157, -102, -123, -158, -159, 319, 320, 314, 328, 231,
	-124, -157, -102, -157, 43, 155, 275, -125, -157, 117,
	-102, -157, -157, -157, -102, -102, -102, 328, 7, 7,
	271, 271, 7, -149, 329, -180, -52, -73, -65, -65,
	177, -147, 129, -57, 177, -196, -65, 328, 328, 150,
	150, -65, -65, 129, -65, 129, -65, -65, -53, 220,
	-29, 328, -29, 328, -65, 220, -65, -73, 220, -39,
	128, 183, -42, 303, -227, 257, 117, -73, -116, 226,
	-157, -116, -139, 187, -98, 295, -65, -116, -96, 332,
	117, 313, -98, -55, -55, -55, -189, -196, 326, 326,
	7, 274, 274, 274, 274, 328, -157, -270, -270, -63,
	283, 61, 210, -225, 332, -193, 329, 329, 332, -66,
	134, -66, -29, -100, 5, -29, -73, 100, -59, 96,
	-278, 313, -65, -185, -20, -113, 122, -193, 332, 69,
	-120, 149, 172, 118, 157, 228, 137, 7, 103, -154,
	333, 328, -184, 309, -46, -188, -187, 307, -157, -157,
	274, -279, 262, -164, -157, 169, 179, 279, 106, 286,
	91, 183, 117, 328, -158, -158, -102, -161, 328, -102,
	327, 336, 329, -157, 327, 327, 332, -176, -177, 95,
	-157, -89, 332, -88, -157, -102, -102, 329, 329, -260,
	195, 328, 328, -157, 30, 332, 329, 117, 329, 329,
	-129, 202, 329, 10, 11, 319, 320, 321, 322, 112,
	323, 324, 317, 318, 316, 311, 312, 313, 62, 165,
	233, 13, 14, 15, 147, 132, -158, -158, -158, -102,
	328, 329, -162, -163, 117, 114, 30, -125, -125, -125,
	329, 117, -102, 332, 332, 332, 329, 329, 329, 7,
	329, 332, 329, 307, 307, 329, -113, 274, 274, 100,
	177, 292, -237, -234, -157, -91, -186, -65, -248, 328,
	-245, -246, -71, 328, 328, -50, 94, 243, -132, 100,
	-55, 100, -55, 274, -131, 64, -102, -102, 274, 274,
	-42, 117, 263, 189, 257, -104, 178, -116, 63, 329,
	-149, -106, -97, -180, 329, 327, 7, 7, 329, 168,
	127, 167, -128, 167, -128, -128, 7, -65, -84, 133,
	-148, 328, -66, 328, 328, -87, 328, -65, -60, 154,
	-278, -224, -251, 329, -165, 124, 44, -187, 149, 149,
	-187, -120, 149, -118, 194, -118, -118, -266, 328, -17,
	328, -184, -221, 326, 334, -102, -183, -182, 30, -65,
	192, 329, -157, -157, -158, -158, 117, 328, -157, -168,
	26, 26, 329, -102, 329, 332, -153, -157, 329, -166,
	97, -157, 270, 329, 297, -89, -89, -89, 5, -261,
	-65, 328, 301, -88, 329, -214, -196, -157, -162, -157,
	-214, -196, -158, -158, -158, -158, -158, -158, -158, -158,
	-158, -158, -158, -158, -158, -158, -158, -158, -158, -158,
	-158, 91, 177, 183, -158, 332, -102, 329, -163, -162,
	-157, -157, -196, 329, 329, 329, -102, -157, -157, -157,
	329, 7, -165, -65, -65, -147, 100, -238, 64, -239,
	56, 107, 68, 177, 179, 285, 207, 53, 86, 214,
	329, 329, 332, -72, -109, 56, -72, -157, 328, -91,
	-92, 177, 86, 177, 86, 79, 281, -65, -65, -73,
	-65, -65, 329, 329, -65, -73, -228, 271, 328, -138,
	328, 187, -29, -116, 313, 327, 327, 329, 132, -91,
	328, -92, -82, 30, -91, 187, -61, 153, -278, -224,
	-58, -257, 302, -157, -102, -187, -187, -119, 291, 187,
	149, -187, 327, 329, -267, 7, 327, -195, -183, 7,
	-156, -155, 115, 175, 329, -65, 328, -184, 26, 26,
	-157, -168, 329, -157, -157, 329, -157, 327, -157, 5,
	-157, 329, 329, 329, -262, -65, -157, 329, 329, 329,
	-163, 117, 91, 183, 328, -157, 329, 329, 332, 329,
	329, 329, -257, -147, -65, -221, -65, 107, 129, 179,
	150, 328, -158, -73, -146, -275, 67, 260, -186, -51,
	-221, -51, 329, -102, 329, 329, 179, 179, -157, -196,
	-55, -55, 274, 274, 274, 274, -160, -71, -65, -41,
	-40, 5, 92, -92, 64, -112, -46, 328, 198, 329,
	-91, 329, 329, -29, 329, -73, -278, -224, -59, -258,
	-259, -65, -119, 328, -157, -187, -154, 329, 332, -184,
	329, 327, 332, 335, 313, -184, 328, -92, -182, -157,
	-157, 329, 329, -89, -256, 200, 329, -158, 117, 328,
	-168, 329, -157, -239, -66, 177, -157, -67, 328, -84,
	328, -72, -89, 214, -54, 56, -65, -65, 328, 328,
	328, 332, 329, -43, 313, 287, 178, 329, -65, -65,
	-146, 329, -84, -146, 328, -224, -60, 332, 30, -92,
	-184, 7, -183, -17, -155, -221, 326, -183, -92, 329,
	329, -89, 44, -158, -168, 329, 329, 100, 329, -242,
	166, -65, -92, -51, 329, -73, -49, 291, -221, -102,
	-102, -102, -40, 5, 243, -149, 328, -84, -146, -84,
	-91, -61, -259, -261, 329, -182, 327, 7, 329, -263,
	209, 232, -102, 329, 107, -240, -243, -241, 187, 118,
	199, 248, 329, 329, -87, -157, 329, 329, -89, -105,
	-92, -84, 329, -184, 327, 329, -264, -265, 36, 282,
	71, -157, -264, -65, -241, 187, -243, 187, 287, 89,
	-242, 329, -149, 329, -146, -183, -265, 204, 113, 231,
	204, 113, -244, 174, 225, 47, 243, -244, -240, -56,
	47, 225, -84, 26, 20, 179, 86, -265,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 0, 0, 0, 0, 80, 81, 82, 83, 84,
	85, 0, 0, 431, 0, 0, 0, 0, 0, 0,
	0, 403, -2, 0, 157, 0, 352, 0, 352, 352,
	356, 0, 0, 433, 318, 430, -2, 441, 0, 0,
	0, 439, 417, 0, 0, -2, 0, 0, 0, 0,
	0, 135, 0, 963, 892, 898, 899, 923, 924, 925,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 964, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
	1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
	1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
	1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
	1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
	1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
	1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
	1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
	1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
	1123, 1124, 1125, 1126, 1127, 1128, 1129, 0, 0, 894,
	963, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 0, 230, 937, 938, 939, 940,
	941, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
	1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
	1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158,
	1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
	1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
	1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
	1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198,
	1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208,
	1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218,
	1219, 1220, 1221, 1222, 1223, 1224, 121, 128, 129, 1016,
	131, 0, 138, 139, 140, 142, 143, 144, 145, 146,
	147, 148, 0, 345, 1040, 358, 152, 993, 1045, 951,
	1117, 1062, 160, 170, 0, 1123, -2, 174, 97, 203,
	204, 0, 208, 209, 0, 211, 232, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 226, 0, 0, 363,
	351, 363, 348, 349, 350, 353, 0, 344, 151, 0,
	432, 0, 0, 0, 0, 0, 317, -2, 413, 414,
	-2, 0, 436, 436, 436, 0, 0, 414, 0, 422,
	1020, 425, 905, 423, 0, 0, 438, 437, 0, 418,
	513, 0, 461, 0, 2, 0, 1101, 513, 0, 1101,
	897, 0, 0, 1101, 0, 0, 136, 137, 902, 900,
	901, 0, 0, 0, 0, 895, 871, 869, 870, 0,
	0, 0, 0, 519, 87, 1101, 55, 1101, 890, 55,
	1101, 95, 55, 1101, 0, 116, 118, 933, 934, 935,
	936, 1128, 0, 0, 0, 0, 126, 0, 130, 132,
	0, 0, 0, 357, 153, 1090, 155, 0, 0, 159,
	161, 162, 0, 0, 0, 0, 0, 0, 173, 198,
	199, 98, 0, 0, 0, 0, 234, 0, 0, 0,
	0, 0, 0, 0, 220, 0, 222, 223, 0, 0,
	0, 0, 346, 359, 360, 347, 0, 355, 55, 517,
	290, 1101, 429, 290, 927, 429, 1101, -2, 0, 409,
	448, 449, 0, 0, 0, 434, 435, 0, 0, 0,
	405, 406, 0, 424, 0, 0, 464, 882, 886, 887,
	616, 0, 0, 0, 0, 0, 0, 708, 710, 1095,
	1117, 0, 712, 713, 0, 715, 717, 718, 0, 721,
	722, 862, 894, 908, 909, 910, 911, 0, 0, 914,
	0, 916, 917, 918, 762, 731, -2, -2, 906, 548,
	549, 550, 551, -2, 1130, 735, 737, 739, 740, 741,
	742, 0, 1079, 1096, 1097, 1113, 1114, 1122, 1126, 1127,
	1101, 1110, 1102, 1091, 1099, 1108, 968, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 932, 578,
	579, 584, 585, 587, 464, 462, 514, 515, 0, 0,
	879, 877, 878, 32, 341, 34, 0, 341, 341, 0,
	0, 0, 0, 239, 0, 0, 241, 0, 0, 0,
	0, 0, 0, 504, 64, 65, 201, 202, 893, 0,
	867, 868, 504, 66, 77, 0, 0, 888, 872, 523,
	0, 380, 0, 0, 520, 0, 0, 89, 0, 53,
	54, 0, 91, 0, 0, 93, 0, 431, 0, 0,
	1101, 0, 431, 0, 820, 531, 532, 533, 534, 535,
	613, 538, 539, 540, 541, 542, 543, 544, 545, 546,
	547, 555, 556, 557, 558, 559, 560, 561, 575, 0,
	554, 554, 554, 567, 568, 576, 577, 582, 583, 594,
	595, 597, 599, 593, 593, 593, 590, 591, 0, 818,
	0, 141, 0, 0, 156, 0, 0, 0, 0, 0,
	165, 185, 186, 187, 166, 168, 175, 177, 178, 179,
	188, 189, 190, 191, 307, 0, 309, 919, 0, 167,
	169, 171, 172, 192, 193, 194, 195, 196, 197, 0,
	0, 99, 207, 205, 206, 210, 212, 0, 231, 213,
	214, 215, 216, 217, 218, 221, 224, 225, 0, 0,
	0, 0, 0, 354, 310, 0, 248, 0, 0, 313,
	428, 0, 0, 0, 1101, 926, 368, 0, 412, 446,
	447, 450, 453, 454, 451, 616, 419, 420, 421, 442,
	443, 328, 426, 0, 0, 523, 0, 0, 0, 0,
	0, 0, 797, 798, 799, 800, 801, 802, 805, 806,
	803, 804, 807, 808, 809, 0, 0, 0, 810, 811,
	812, 0, 0, 814, 0, 816, 0, 0, 0, 0,
	0, 0, 876, 0, 0, 0, 885, 813, 621, 622,
	623, 645, 646, 0, 709, 873, 866, 711, 0, -2,
	818, 0, 714, 719, 720, 0, 0, 861, -2, 0,
	913, 0, 613, 764, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 841, 847, 0, 0, 0, 0, 0,
	0, 0, 0, 563, 581, 592, 589, 588, 565, 0,
	564, 562, 0, 566, 0, 0, 0, 523, 0, 0,
	881, 0, 0, 0, 0, 340, 36, 1101, 0, 57,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 237, 0, 0, 238, 0, 0,
	0, 896, 0, 0, 0, 69, 0, 903, 76, 0,
	0, 0, 0, 392, 0, 392, 382, 0, 0, 0,
	392, 395, 396, 398, 399, 0, 0, 521, 88, 891,
	55, 96, 55, 55, 102, 117, 0, 119, 122, 123,
	124, 125, 120, 0, 524, 526, 536, 0, 600, 601,
	602, 603, 604, 605, 614, 127, 0, 0, 0, 0,
	158, 163, 164, 364, 0, 182, 0, 184, 0, 308,
	921, 920, 100, 233, 149, 227, 228, 504, 361, 362,
	518, 0, 0, 247, 902, 249, 251, 252, 253, 254,
	927, 0, 927, 0, 0, 311, 0, 0, 0, 0,
	370, 376, 0, 452, 455, 456, 0, 445, 326, 327,
	431, 904, 458, 883, 504, 465, 0, 475, 513, 490,
	480, 0, 617, 527, 528, 569, 570, 571, 572, 573,
	618, 619, 0, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, -2, -2, -2, 637, 638, 639, -2,
	-2, -2, 643, 644, -2, 815, 817, 0, 876, 0,
	-2, 0, -2, -2, -2, -2, 657, 0, 659, 662,
	664, 666, 0, 0, 0, 0, 875, 676, 853, 0,
	0, 794, 795, 796, 884, 661, 0, 0, 874, 865,
	0, 0, -2, 716, 0, 0, 0, 824, 825, 860,
	856, 0, 723, 441, 0, 0, 0, 0, 0, 922,
	772, 0, 0, 0, 736, 738, 0, 0, 0, 0,
	828, -2, -2, -2, -2, -2, -2, -2, 0, 0,
	818, 838, 0, 0, 679, 0, 0, 0, 0, 1117,
	0, 818, 846, 0, 0, 0, 0, 0, 818, 0,
	852, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 458, 516, 880, 35, 330, 0, 0,
	0, 38, 1101, 46, 0, 262, 0, 0, 0, 0,
	0, 343, 47, 1101, 55, 1101, 55, 48, 33, 341,
	235, 0, 236, 0, 334, 0, 329, 332, 0, 76,
	0, 0, 63, 0, 67, 78, 0, 889, 86, 0,
	522, 377, 392, 0, 0, 384, 381, 379, 523, 0,
	0, 0, 0, 90, 92, 94, 0, 821, 0, 0,
	0, 0, 0, 0, 0, 0, 819, 133, 134, 154,
	180, 181, 183, 176, 0, 229, 256, 289, 0, 0,
	927, 0, 245, 290, 312, 314, 0, 0, 372, 376,
	0, 375, 429, 444, 0, 460, 0, 463, 0, 0,
	0, 0, 0, 510, 510, 510, 508, 484, 431, 490,
	0, 0, 502, 0, -2, 480, 0, 0, -2, -2,
	0, 0, 0, 677, -2, 658, 660, 663, 665, 667,
	0, 0, 0, 0, 0, 0, 0, 678, 0, 0,
	863, 866, -2, 819, 822, 823, 0, 0, 857, 0,
	0, 0, 0, 440, 441, 441, 441, 729, 0, 730,
	0, 0, 0, 0, 0, 0, 745, 0, 746, 747,
	0, 0, 748, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 682, 683, 684, 0,
	0, 749, 844, 845, 0, 0, 0, 0, 0, 0,
	754, 0, 851, 0, 0, 0, 758, 759, 760, 0,
	552, 0, 574, 596, 598, 586, 460, 0, 0, 0,
	0, 56, 260, 279, 0, 0, 319, 325, 325, 0,
	732, 733, 0, 0, 0, 40, 0, 0, 0, 0,
	44, 0, 50, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 79, 390, 391, 378, 389, 0,
	392, 397, 394, 400, 0, 529, 0, 0, 537, 606,
	607, 608, 609, 610, 611, 612, 0, 150, 243, 0,
	250, 0, 0, 0, 248, 0, 0, 0, 374, 376,
	0, 367, 368, 427, 766, 0, 0, 466, 0, 0,
	0, 0, 0, 505, 509, 506, 507, 0, 0, 0,
	0, 502, 472, 0, 0, 0, 479, 501, 0, 500,
	489, -2, 620, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 854, 0, 789, 0, 0, 865, -2, 826,
	855, 859, 0, 724, 0, 0, 0, 0, 915, 770,
	771, 775, 0, 0, 734, 0, 0, 827, 837, 839,
	680, 681, 685, 686, 687, 688, 689, 690, 691, 692,
	693, 694, -2, -2, -2, 698, 699, 700, -2, -2,
	-2, 0, 0, 0, 840, 0, 0, 792, 842, 843,
	848, 849, 0, 751, 752, 753, 850, 0, 0, 0,
	580, 0, 766, 336, 338, 37, 0, 261, 0, 264,
	0, 0, 0, 0, 270, 271, 0, 0, 0, 0,
	281, 288, 0, 328, 907, 0, 328, 0, 0, 0,
	0, 0, 52, 0, 0, 342, 0, 55, 55, 331,
	0, 0, 0, 0, 335, 333, 68, 0, 0, 0,
	0, 0, 383, 393, 0, 530, 525, 615, 0, 0,
	0, 0, 0, 0, 0, 0, 365, 376, 0, 369,
	370, 415, 0, 459, 457, 492, 0, 494, 0, 0,
	0, 496, 475, 485, 0, 487, 490, 0, 477, 0,
	0, 470, 0, 469, 490, 498, 0, 0, 0, 0,
	-2, 0, 670, -2, -2, 788, 819, 864, 858, 912,
	441, 725, 727, 728, 777, 774, 0, 761, 743, 744,
	836, 0, 0, 0, 0, 819, 791, 750, 0, 756,
	757, 553, 416, 39, 0, 265, 266, 927, 0, 269,
	272, 0, 274, 929, 256, 0, 285, 286, 320, 321,
	324, 322, 325, 441, 283, 0, 41, 42, 51, 59,
	43, 49, 0, 0, 0, 0, 503, 0, 0, 0,
	73, 71, 0, 0, 0, 401, 402, 0, 0, 288,
	0, 278, 256, 246, 288, 0, 0, 371, 372, 765,
	767, 0, 493, 0, 512, 495, 490, 486, 0, 502,
	431, 473, 0, 474, 0, 502, 0, 0, 481, -2,
	-2, 671, 790, 0, 441, 0, 763, -2, 0, 0,
	0, 793, 0, 263, 267, 0, 0, 294, 0, 282,
	0, 328, 0, 0, 61, 0, 337, 339, 0, 0,
	0, 0, 75, 72, 0, 0, 386, 523, 388, 0,
	256, 288, 244, 256, 0, 373, 374, 0, 0, 0,
	0, 488, 482, 0, 471, 467, 0, 478, 0, 499,
	726, 780, 0, -2, 0, 706, 755, 0, 273, 299,
	0, 0, 0, 323, 724, 290, 45, 0, 58, 0,
	0, 441, 74, 70, 0, 387, 0, 276, 256, 315,
	0, 366, 768, 769, 511, 476, 490, 0, 497, 0,
	0, 0, 776, 707, 0, 275, 295, 296, 0, 291,
	292, 293, 928, 287, 294, 60, 240, 242, 0, 523,
	0, 277, 288, 502, 468, 773, 778, 781, -2, 1065,
	960, 0, 779, 268, 297, 0, 298, 0, 0, 0,
	299, 0, 385, 259, 256, 483, 0, 783, 784, 785,
	786, 787, 300, 0, 303, 304, 0, 301, 284, 255,
	257, 258, 316, 0, 302, 305, 306, 782,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 317, 3, 323, 318, 3,
	328, 329, 321, 319, 332, 320, 330, 322, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 336, 331,
	311, 313, 312, 3, 333, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 326, 3, 327, 324, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 334, 316, 335, 314,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 315, 57654, 325,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:779
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:785
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:791
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:817
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:868
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:887
		{
			return unimplemented(sqllex)
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:910
		{
			return unimplemented(sqllex)
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:920
		{
			return unimplemented(sqllex)
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:939
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = nil
		}
	case 53:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = DropCascade
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = DropRestrict
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = DropDefault
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:982
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:983
		{
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			return unimplemented(sqllex)
		}
	case 61:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:987
		{
		}
	case 62:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 69:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 70:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 71:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.str = ""
		}
	case 72:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 75:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 76:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1060
		{
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{ /* SKIP DOC */
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[2].union.unresolvedName(), SetMode: SetModeReset}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1386
		{
			return unimplemented(sqllex)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1400
		{ /* SKIP DOC */
		}
	case 158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1463
		{
			return unimplemented(sqllex)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1466
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			return unimplemented(sqllex)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = Low
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = Normal
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = High
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1578
		{
			return unimplemented(sqllex)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1579
		{
			return unimplemented(sqllex)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1580
		{
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[4].union.unresolvedName().String(), ClusterSetting: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1608
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1612
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1656
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1660
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1664
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1668
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1684
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1688
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1692
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1735
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1739
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1745
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1749
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1753
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1757
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1828
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1832
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = DropDefault
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1842
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1934
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 290:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2047
		{
			return unimplemented(sqllex)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2048
		{
			return unimplemented(sqllex)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2049
		{
			return unimplemented(sqllex)
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2050
		{
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2056
		{
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2057
		{
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2058
		{
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2059
		{
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2060
		{
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2063
		{
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2066
		{
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2069
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2072
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2073
		{
			return unimplemented(sqllex)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2074
		{
			return unimplemented(sqllex)
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2075
		{
			return unimplemented(sqllex)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = true
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = false
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2182
		{
			return unimplemented(sqllex)
		}
	case 323:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2183
		{
			return unimplemented(sqllex)
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2186
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2187
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = Ascending
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = Descending
		}
	case 328:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2241
		{
			return unimplemented(sqllex)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2242
		{
			return unimplemented(sqllex)
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = true
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = false
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2255
		{
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2256
		{
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2285
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2289
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2298
		{
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2299
		{
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.str = ""
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.str = ""
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2359
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.str = ""
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.str = ""
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2402
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.str = ""
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.str = ""
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2421
		{
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2422
		{
		}
	case 377:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2452
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2462
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2486
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2490
		{
			return unimplemented(sqllex)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2498
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 393:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2520
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2521
		{
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2748
		{
			return unimplemented(sqllex)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2749
		{
			return unimplemented(sqllex)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2750
		{
			return unimplemented(sqllex)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2753
		{
			return unimplemented(sqllex)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2754
		{
			return unimplemented(sqllex)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2757
		{
			return unimplemented(sqllex)
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2760
		{
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2761
		{
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2764
		{
			return unimplemented(sqllex)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2765
		{
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2768
		{
		}
	case 433:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2769
		{
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = true
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = false
		}
	case 436:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = false
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = true
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2792
		{
		}
	case 439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2793
		{
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2831
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2851
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2892
		{
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2893
		{
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2951
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.union.val = &From{}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2987
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3005
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3032
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 476:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3049
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = nil
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3110
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3116
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = true
		}
	case 490:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = false
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.str = astFullJoin
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.str = astLeftJoin
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.str = astRightJoin
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.str = astInnerJoin
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3227
		{
		}
	case 510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3228
		{
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3314
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3327
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3328
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3342
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3351
		{
			return unimplemented(sqllex)
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3410
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3419
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = nil
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3468
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3564
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3580
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3596
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3635
		{
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3636
		{
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = year
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = month
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = day
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = hour
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = minute
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = month
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = hour
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = minute
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = minute
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3718
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = nil
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = second
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3731
		{
			return unimplemented(sqllex)
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3766
		{
			return unimplemented(sqllex)
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3934
		{
			return unimplemented(sqllex)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3936
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3940
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4000
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4173
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4226
		{
			return unimplemented(sqllex)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4227
		{
			return unimplemented(sqllex)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4250
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4266
		{
			return unimplemented(sqllex)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4267
		{
			return unimplemented(sqllex)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4271
		{
			return unimplemented(sqllex)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4288
		{
			return unimplemented(sqllex)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4289
		{
			return unimplemented(sqllex)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4290
		{
			return unimplemented(sqllex)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4291
		{
			return unimplemented(sqllex)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4320
		{
			return unimplemented(sqllex)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4364
		{
			return unimplemented(sqllex)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4365
		{
		}
	case 763:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = Window(nil)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4400
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4408
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.str = ""
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4462
		{
			return unimplemented(sqllex)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4463
		{
			return unimplemented(sqllex)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4464
		{
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4467
		{
			return unimplemented(sqllex)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4468
		{
			return unimplemented(sqllex)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4474
		{
			return unimplemented(sqllex)
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4475
		{
			return unimplemented(sqllex)
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4476
		{
			return unimplemented(sqllex)
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4477
		{
			return unimplemented(sqllex)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4478
		{
			return unimplemented(sqllex)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = Any
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = Some
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = All
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = Plus
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = Minus
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = Mult
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = Div
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = FloorDiv
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = Mod
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = Bitand
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = Bitor
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = Pow
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = Bitxor
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = LT
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = GT
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = EQ
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = LE
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = GE
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = NE
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = Like
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4552
		{
			sqlVAL.union.val = NotLike
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4553
		{
			sqlVAL.union.val = ILike
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = NotILike
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4593
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4599
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4677
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4681
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4719
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 858:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4761
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 862:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4784
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4788
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4807
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4842
		{
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4843
		{
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4896
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4912
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4961
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4986
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5005
		{
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5041
		{
			return unimplemented(sqllex)
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 915:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5050
		{
			return unimplemented(sqllex)
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = DNull
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5077
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 927:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.str = ""
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 929:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
