// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:464
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const CONTAINS = 57409
const COPY = 57410
const COVERING = 57411
const CREATE = 57412
const CROSS = 57413
const CSV = 57414
const CUBE = 57415
const CURRENT = 57416
const CURRENT_CATALOG = 57417
const CURRENT_DATE = 57418
const CURRENT_SCHEMA = 57419
const CURRENT_ROLE = 57420
const CURRENT_TIME = 57421
const CURRENT_TIMESTAMP = 57422
const CURRENT_USER = 57423
const CYCLE = 57424
const DATA = 57425
const DATABASE = 57426
const DATABASES = 57427
const DATE = 57428
const DAY = 57429
const DEC = 57430
const DECIMAL = 57431
const DEFAULT = 57432
const DEALLOCATE = 57433
const DEFERRABLE = 57434
const DELETE = 57435
const DESC = 57436
const DISCARD = 57437
const DISTINCT = 57438
const DO = 57439
const DOUBLE = 57440
const DROP = 57441
const ELSE = 57442
const ENCODING = 57443
const END = 57444
const ESCAPE = 57445
const EXCEPT = 57446
const EXISTS = 57447
const EXECUTE = 57448
const EXPERIMENTAL_FINGERPRINTS = 57449
const EXPERIMENTAL = 57450
const EXPLAIN = 57451
const EXTRACT = 57452
const EXTRACT_DURATION = 57453
const FALSE = 57454
const FAMILY = 57455
const FETCH = 57456
const FETCHVAL = 57457
const FETCHTEXT = 57458
const FETCHVAL_PATH = 57459
const FETCHTEXT_PATH = 57460
const FILTER = 57461
const FIRST = 57462
const FLOAT = 57463
const FLOAT4 = 57464
const FLOAT8 = 57465
const FLOORDIV = 57466
const FOLLOWING = 57467
const FOR = 57468
const FORCE_INDEX = 57469
const FOREIGN = 57470
const FROM = 57471
const FULL = 57472
const GRANT = 57473
const GRANTS = 57474
const GREATEST = 57475
const GROUP = 57476
const GROUPING = 57477
const HAVING = 57478
const HELP = 57479
const HIGH = 57480
const HOUR = 57481
const HAS_SOME = 57482
const HAS_ALL = 57483
const IMPORT = 57484
const INCREMENTAL = 57485
const IF = 57486
const IFNULL = 57487
const ILIKE = 57488
const IN = 57489
const INET = 57490
const INTERLEAVE = 57491
const INDEX = 57492
const INDEXES = 57493
const INITIALLY = 57494
const INNER = 57495
const INSERT = 57496
const INT = 57497
const INT2VECTOR = 57498
const INT2 = 57499
const INT4 = 57500
const INT8 = 57501
const INT64 = 57502
const INTEGER = 57503
const INTERSECT = 57504
const INTERVAL = 57505
const INTO = 57506
const IS = 57507
const ISOLATION = 57508
const JOB = 57509
const JOBS = 57510
const JOIN = 57511
const KEY = 57512
const KEYS = 57513
const KV = 57514
const LATERAL = 57515
const LC_CTYPE = 57516
const LC_COLLATE = 57517
const LEADING = 57518
const LEAST = 57519
const LEFT = 57520
const LEVEL = 57521
const LIKE = 57522
const LIMIT = 57523
const LOCAL = 57524
const LOCALTIME = 57525
const LOCALTIMESTAMP = 57526
const LOW = 57527
const LSHIFT = 57528
const MATCH = 57529
const MINUTE = 57530
const MONTH = 57531
const NAN = 57532
const NAME = 57533
const NAMES = 57534
const NATURAL = 57535
const NEXT = 57536
const NO = 57537
const NO_INDEX_JOIN = 57538
const NORMAL = 57539
const NOT = 57540
const NOTHING = 57541
const NULL = 57542
const NULLIF = 57543
const NULLS = 57544
const NUMERIC = 57545
const OF = 57546
const OFF = 57547
const OFFSET = 57548
const OID = 57549
const ON = 57550
const ONLY = 57551
const OPTIONS = 57552
const OR = 57553
const ORDER = 57554
const ORDINALITY = 57555
const OUT = 57556
const OUTER = 57557
const OVER = 57558
const OVERLAPS = 57559
const OVERLAY = 57560
const PARENT = 57561
const PARTIAL = 57562
const PARTITION = 57563
const PASSWORD = 57564
const PAUSE = 57565
const PLACING = 57566
const PLANS = 57567
const POSITION = 57568
const PRECEDING = 57569
const PRECISION = 57570
const PREPARE = 57571
const PRIMARY = 57572
const PRIORITY = 57573
const QUERIES = 57574
const QUERY = 57575
const RANGE = 57576
const READ = 57577
const REAL = 57578
const RECURSIVE = 57579
const REF = 57580
const REFERENCES = 57581
const REGCLASS = 57582
const REGPROC = 57583
const REGPROCEDURE = 57584
const REGNAMESPACE = 57585
const REGTYPE = 57586
const REMOVE_PATH = 57587
const RENAME = 57588
const REPEATABLE = 57589
const RELEASE = 57590
const RESET = 57591
const RESTORE = 57592
const RESTRICT = 57593
const RESUME = 57594
const RETURNING = 57595
const REVOKE = 57596
const RIGHT = 57597
const ROLLBACK = 57598
const ROLLUP = 57599
const ROW = 57600
const ROWS = 57601
const RSHIFT = 57602
const SAVEPOINT = 57603
const SCATTER = 57604
const SEARCH = 57605
const SECOND = 57606
const SELECT = 57607
const SEQUENCES = 57608
const SERIAL = 57609
const SERIALIZABLE = 57610
const SESSION = 57611
const SESSIONS = 57612
const SESSION_USER = 57613
const SET = 57614
const SETTING = 57615
const SETTINGS = 57616
const SHOW = 57617
const SIMILAR = 57618
const SIMPLE = 57619
const SMALLINT = 57620
const SMALLSERIAL = 57621
const SNAPSHOT = 57622
const SOME = 57623
const SPLIT = 57624
const SQL = 57625
const START = 57626
const STATUS = 57627
const STDIN = 57628
const STRICT = 57629
const STRING = 57630
const STORE = 57631
const STORING = 57632
const SUBSTRING = 57633
const SYMMETRIC = 57634
const SYSTEM = 57635
const TABLE = 57636
const TABLES = 57637
const TEMP = 57638
const TEMPLATE = 57639
const TEMPORARY = 57640
const TESTING_RANGES = 57641
const TESTING_RELOCATE = 57642
const TEXT = 57643
const THEN = 57644
const TIME = 57645
const TIMESTAMP = 57646
const TIMESTAMPTZ = 57647
const TO = 57648
const TRAILING = 57649
const TRACE = 57650
const TRANSACTION = 57651
const TREAT = 57652
const TRIM = 57653
const TRUE = 57654
const TRUNCATE = 57655
const TYPE = 57656
const UNBOUNDED = 57657
const UNCOMMITTED = 57658
const UNION = 57659
const UNIQUE = 57660
const UNKNOWN = 57661
const UPDATE = 57662
const UPSERT = 57663
const USE = 57664
const USER = 57665
const USERS = 57666
const USING = 57667
const UUID = 57668
const VALID = 57669
const VALIDATE = 57670
const VALUE = 57671
const VALUES = 57672
const VARCHAR = 57673
const VARIADIC = 57674
const VIEW = 57675
const VARYING = 57676
const WHEN = 57677
const WHERE = 57678
const WINDOW = 57679
const WITH = 57680
const WITHIN = 57681
const WITHOUT = 57682
const WRITE = 57683
const YEAR = 57684
const ZONE = 57685
const NOT_LA = 57686
const WITH_LA = 57687
const AS_LA = 57688
const CONTAINED_BY = 57689
const HAS_SOME_KEY = 57690
const HAS_ALL_KEYS = 57691
const POSTFIXOP = 57692
const UMINUS = 57693
const HELPTOKEN = 57694

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6583

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	372, 54,
	-2, 677,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	150, 529,
	-2, 0,
	-1, 64,
	93, 677,
	154, 677,
	320, 677,
	321, 677,
	-2, 0,
	-1, 74,
	104, 652,
	114, 652,
	162, 652,
	181, 652,
	206, 652,
	212, 652,
	317, 652,
	-2, 641,
	-1, 106,
	4, 679,
	20, 679,
	21, 679,
	23, 679,
	28, 679,
	33, 679,
	34, 679,
	35, 679,
	36, 679,
	37, 679,
	38, 679,
	39, 679,
	40, 679,
	41, 679,
	42, 679,
	44, 679,
	45, 679,
	46, 679,
	47, 679,
	48, 679,
	51, 679,
	52, 679,
	53, 679,
	55, 679,
	56, 679,
	60, 679,
	61, 679,
	62, 679,
	64, 679,
	66, 679,
	68, 679,
	69, 679,
	72, 679,
	73, 679,
	74, 679,
	82, 679,
	83, 679,
	84, 679,
	85, 679,
	86, 679,
	87, 679,
	88, 679,
	89, 679,
	91, 679,
	93, 679,
	95, 679,
	98, 679,
	99, 679,
	101, 679,
	105, 679,
	106, 679,
	107, 679,
	108, 679,
	109, 679,
	110, 679,
	111, 679,
	119, 679,
	120, 679,
	121, 679,
	122, 679,
	123, 679,
	125, 679,
	127, 679,
	132, 679,
	133, 679,
	135, 679,
	138, 679,
	139, 679,
	142, 679,
	143, 679,
	144, 679,
	145, 679,
	148, 679,
	149, 679,
	151, 679,
	154, 679,
	155, 679,
	156, 679,
	157, 679,
	158, 679,
	159, 679,
	160, 679,
	161, 679,
	163, 679,
	166, 679,
	167, 679,
	168, 679,
	170, 679,
	171, 679,
	172, 679,
	174, 679,
	175, 679,
	177, 679,
	179, 679,
	182, 679,
	185, 679,
	187, 679,
	188, 679,
	189, 679,
	190, 679,
	191, 679,
	192, 679,
	194, 679,
	195, 679,
	196, 679,
	197, 679,
	201, 679,
	202, 679,
	203, 679,
	204, 679,
	205, 679,
	207, 679,
	209, 679,
	210, 679,
	213, 679,
	214, 679,
	216, 679,
	218, 679,
	219, 679,
	220, 679,
	221, 679,
	222, 679,
	223, 679,
	225, 679,
	226, 679,
	227, 679,
	228, 679,
	229, 679,
	231, 679,
	232, 679,
	233, 679,
	234, 679,
	235, 679,
	236, 679,
	237, 679,
	238, 679,
	240, 679,
	241, 679,
	242, 679,
	243, 679,
	244, 679,
	246, 679,
	247, 679,
	248, 679,
	249, 679,
	250, 679,
	251, 679,
	252, 679,
	254, 679,
	256, 679,
	257, 679,
	258, 679,
	259, 679,
	261, 679,
	262, 679,
	263, 679,
	264, 679,
	266, 679,
	267, 679,
	268, 679,
	269, 679,
	270, 679,
	272, 679,
	273, 679,
	274, 679,
	275, 679,
	277, 679,
	278, 679,
	279, 679,
	280, 679,
	282, 679,
	283, 679,
	284, 679,
	285, 679,
	286, 679,
	287, 679,
	288, 679,
	289, 679,
	290, 679,
	291, 679,
	293, 679,
	295, 679,
	296, 679,
	297, 679,
	298, 679,
	299, 679,
	300, 679,
	301, 679,
	303, 679,
	304, 679,
	305, 679,
	308, 679,
	309, 679,
	310, 679,
	311, 679,
	313, 679,
	314, 679,
	315, 679,
	316, 679,
	319, 679,
	320, 679,
	321, 679,
	322, 679,
	324, 679,
	326, 679,
	327, 679,
	328, 679,
	329, 679,
	330, 679,
	331, 679,
	334, 679,
	339, 679,
	340, 679,
	341, 679,
	342, 679,
	343, 679,
	-2, 0,
	-1, 119,
	104, 651,
	114, 651,
	162, 651,
	181, 651,
	206, 651,
	212, 651,
	317, 651,
	-2, 644,
	-1, 124,
	1, 578,
	166, 578,
	231, 578,
	235, 578,
	371, 578,
	372, 578,
	-2, 0,
	-1, 126,
	1, 578,
	371, 578,
	372, 578,
	-2, 0,
	-1, 127,
	1, 578,
	371, 578,
	372, 578,
	-2, 0,
	-1, 128,
	1, 582,
	371, 582,
	372, 582,
	-2, 0,
	-1, 135,
	4, 685,
	5, 685,
	6, 685,
	7, 685,
	8, 685,
	9, 685,
	20, 685,
	21, 685,
	23, 685,
	28, 685,
	29, 685,
	33, 685,
	34, 685,
	35, 685,
	36, 685,
	37, 685,
	38, 685,
	39, 685,
	40, 685,
	41, 685,
	42, 685,
	44, 685,
	45, 685,
	46, 685,
	47, 685,
	48, 685,
	49, 685,
	50, 685,
	51, 685,
	52, 685,
	53, 685,
	55, 685,
	56, 685,
	58, 685,
	60, 685,
	61, 685,
	62, 685,
	64, 685,
	66, 685,
	68, 685,
	69, 685,
	71, 685,
	72, 685,
	73, 685,
	74, 685,
	76, 685,
	77, 685,
	78, 685,
	80, 685,
	81, 685,
	82, 685,
	83, 685,
	84, 685,
	85, 685,
	86, 685,
	87, 685,
	88, 685,
	89, 685,
	91, 685,
	93, 685,
	95, 685,
	98, 685,
	99, 685,
	101, 685,
	105, 685,
	106, 685,
	107, 685,
	108, 685,
	109, 685,
	110, 685,
	111, 685,
	112, 685,
	113, 685,
	119, 685,
	120, 685,
	121, 685,
	122, 685,
	123, 685,
	125, 685,
	127, 685,
	130, 685,
	132, 685,
	133, 685,
	135, 685,
	138, 685,
	139, 685,
	142, 685,
	143, 685,
	144, 685,
	145, 685,
	146, 685,
	148, 685,
	149, 685,
	151, 685,
	153, 685,
	154, 685,
	155, 685,
	156, 685,
	157, 685,
	158, 685,
	159, 685,
	160, 685,
	161, 685,
	163, 685,
	165, 685,
	166, 685,
	167, 685,
	168, 685,
	169, 685,
	170, 685,
	171, 685,
	172, 685,
	174, 685,
	175, 685,
	177, 685,
	178, 685,
	179, 685,
	180, 685,
	182, 685,
	185, 685,
	187, 685,
	188, 685,
	189, 685,
	190, 685,
	191, 685,
	192, 685,
	193, 685,
	194, 685,
	195, 685,
	196, 685,
	197, 685,
	198, 685,
	200, 685,
	201, 685,
	202, 685,
	203, 685,
	204, 685,
	205, 685,
	207, 685,
	210, 685,
	213, 685,
	214, 685,
	215, 685,
	216, 685,
	217, 685,
	218, 685,
	219, 685,
	220, 685,
	221, 685,
	222, 685,
	223, 685,
	225, 685,
	226, 685,
	227, 685,
	228, 685,
	229, 685,
	231, 685,
	232, 685,
	233, 685,
	234, 685,
	235, 685,
	236, 685,
	237, 685,
	238, 685,
	240, 685,
	241, 685,
	242, 685,
	243, 685,
	244, 685,
	246, 685,
	247, 685,
	248, 685,
	249, 685,
	250, 685,
	251, 685,
	252, 685,
	254, 685,
	255, 685,
	256, 685,
	257, 685,
	258, 685,
	259, 685,
	261, 685,
	262, 685,
	263, 685,
	264, 685,
	266, 685,
	267, 685,
	268, 685,
	269, 685,
	270, 685,
	271, 685,
	272, 685,
	273, 685,
	274, 685,
	275, 685,
	276, 685,
	277, 685,
	278, 685,
	279, 685,
	280, 685,
	282, 685,
	283, 685,
	284, 685,
	285, 685,
	286, 685,
	287, 685,
	288, 685,
	289, 685,
	290, 685,
	291, 685,
	293, 685,
	295, 685,
	296, 685,
	297, 685,
	298, 685,
	299, 685,
	300, 685,
	301, 685,
	303, 685,
	304, 685,
	305, 685,
	308, 685,
	309, 685,
	310, 685,
	311, 685,
	312, 685,
	313, 685,
	314, 685,
	315, 685,
	316, 685,
	319, 685,
	320, 685,
	321, 685,
	322, 685,
	323, 685,
	324, 685,
	326, 685,
	327, 685,
	328, 685,
	329, 685,
	330, 685,
	331, 685,
	334, 685,
	339, 685,
	340, 685,
	341, 685,
	342, 685,
	343, 685,
	344, 685,
	354, 685,
	359, 685,
	360, 685,
	361, 685,
	368, 685,
	374, 685,
	-2, 0,
	-1, 138,
	1, 54,
	372, 54,
	-2, 677,
	-1, 500,
	129, 1287,
	306, 1287,
	349, 1287,
	370, 1287,
	-2, 0,
	-1, 501,
	129, 1239,
	306, 1239,
	349, 1239,
	370, 1239,
	-2, 0,
	-1, 503,
	129, 1345,
	306, 1345,
	349, 1345,
	370, 1345,
	-2, 0,
	-1, 505,
	129, 1367,
	306, 1367,
	349, 1367,
	370, 1367,
	-2, 0,
	-1, 512,
	129, 1292,
	306, 1292,
	349, 1292,
	370, 1292,
	-2, 321,
	-1, 538,
	1, 398,
	367, 398,
	369, 398,
	371, 398,
	372, 398,
	-2, 0,
	-1, 539,
	1, 445,
	126, 445,
	367, 445,
	369, 445,
	371, 445,
	372, 445,
	-2, 0,
	-1, 545,
	1, 412,
	367, 412,
	369, 412,
	371, 412,
	372, 412,
	-2, 0,
	-1, 547,
	1, 416,
	367, 416,
	369, 416,
	371, 416,
	372, 416,
	-2, 0,
	-1, 550,
	1, 424,
	367, 424,
	369, 424,
	371, 424,
	372, 424,
	-2, 0,
	-1, 551,
	1, 429,
	367, 429,
	369, 429,
	371, 429,
	372, 429,
	-2, 0,
	-1, 554,
	1, 439,
	367, 439,
	369, 439,
	371, 439,
	372, 439,
	-2, 0,
	-1, 568,
	114, 687,
	181, 687,
	206, 687,
	-2, 647,
	-1, 571,
	114, 686,
	181, 686,
	206, 686,
	-2, 645,
	-1, 628,
	368, 1217,
	-2, 1210,
	-1, 629,
	368, 1218,
	-2, 1211,
	-1, 635,
	5, 864,
	368, 864,
	-2, 1419,
	-1, 660,
	5, 823,
	-2, 1388,
	-1, 661,
	5, 858,
	368, 858,
	-2, 1390,
	-1, 662,
	5, 833,
	-2, 1391,
	-1, 663,
	5, 832,
	-2, 1392,
	-1, 664,
	5, 858,
	368, 858,
	-2, 1395,
	-1, 665,
	5, 858,
	368, 858,
	-2, 1396,
	-1, 666,
	5, 859,
	-2, 1399,
	-1, 667,
	5, 815,
	-2, 1400,
	-1, 668,
	5, 815,
	-2, 1401,
	-1, 669,
	5, 840,
	-2, 1405,
	-1, 670,
	5, 825,
	-2, 1406,
	-1, 671,
	5, 826,
	-2, 1407,
	-1, 672,
	5, 816,
	-2, 1413,
	-1, 673,
	5, 817,
	-2, 1414,
	-1, 674,
	5, 818,
	-2, 1415,
	-1, 675,
	5, 819,
	-2, 1416,
	-1, 676,
	5, 820,
	-2, 1417,
	-1, 677,
	5, 821,
	-2, 1418,
	-1, 678,
	5, 815,
	-2, 1423,
	-1, 679,
	5, 824,
	-2, 1428,
	-1, 680,
	5, 822,
	-2, 1431,
	-1, 681,
	5, 856,
	368, 856,
	-2, 1433,
	-1, 682,
	5, 860,
	-2, 1436,
	-1, 683,
	5, 862,
	-2, 1437,
	-1, 684,
	5, 855,
	368, 855,
	-2, 1442,
	-1, 782,
	222, 675,
	-2, 522,
	-1, 786,
	208, 1214,
	-2, 0,
	-1, 821,
	1, 209,
	367, 209,
	369, 209,
	371, 209,
	372, 209,
	-2, 650,
	-1, 828,
	4, 1441,
	10, 1441,
	11, 1441,
	13, 1441,
	14, 1441,
	15, 1441,
	16, 1441,
	17, 1441,
	18, 1441,
	20, 1441,
	21, 1441,
	23, 1441,
	26, 1441,
	28, 1441,
	30, 1441,
	33, 1441,
	34, 1441,
	35, 1441,
	36, 1441,
	37, 1441,
	38, 1441,
	39, 1441,
	40, 1441,
	41, 1441,
	42, 1441,
	44, 1441,
	45, 1441,
	46, 1441,
	47, 1441,
	48, 1441,
	51, 1441,
	52, 1441,
	53, 1441,
	55, 1441,
	56, 1441,
	57, 1441,
	60, 1441,
	61, 1441,
	62, 1441,
	63, 1441,
	64, 1441,
	66, 1441,
	67, 1441,
	68, 1441,
	69, 1441,
	71, 1441,
	72, 1441,
	73, 1441,
	74, 1441,
	82, 1441,
	83, 1441,
	84, 1441,
	85, 1441,
	86, 1441,
	87, 1441,
	88, 1441,
	89, 1441,
	91, 1441,
	93, 1441,
	95, 1441,
	98, 1441,
	99, 1441,
	101, 1441,
	105, 1441,
	106, 1441,
	107, 1441,
	108, 1441,
	109, 1441,
	110, 1441,
	111, 1441,
	115, 1441,
	116, 1441,
	117, 1441,
	118, 1441,
	119, 1441,
	120, 1441,
	121, 1441,
	122, 1441,
	123, 1441,
	124, 1441,
	125, 1441,
	127, 1441,
	130, 1441,
	132, 1441,
	133, 1441,
	135, 1441,
	138, 1441,
	139, 1441,
	142, 1441,
	143, 1441,
	144, 1441,
	145, 1441,
	146, 1441,
	147, 1441,
	148, 1441,
	149, 1441,
	151, 1441,
	153, 1441,
	154, 1441,
	155, 1441,
	156, 1441,
	157, 1441,
	158, 1441,
	159, 1441,
	160, 1441,
	161, 1441,
	163, 1441,
	165, 1441,
	166, 1441,
	167, 1441,
	168, 1441,
	169, 1441,
	170, 1441,
	171, 1441,
	172, 1441,
	174, 1441,
	175, 1441,
	177, 1441,
	178, 1441,
	179, 1441,
	180, 1441,
	182, 1441,
	185, 1441,
	186, 1441,
	187, 1441,
	188, 1441,
	189, 1441,
	190, 1441,
	191, 1441,
	192, 1441,
	193, 1441,
	194, 1441,
	195, 1441,
	196, 1441,
	197, 1441,
	201, 1441,
	202, 1441,
	203, 1441,
	204, 1441,
	205, 1441,
	207, 1441,
	210, 1441,
	211, 1441,
	213, 1441,
	214, 1441,
	216, 1441,
	218, 1441,
	219, 1441,
	220, 1441,
	221, 1441,
	222, 1441,
	223, 1441,
	225, 1441,
	226, 1441,
	227, 1441,
	228, 1441,
	229, 1441,
	231, 1441,
	232, 1441,
	233, 1441,
	234, 1441,
	235, 1441,
	236, 1441,
	237, 1441,
	238, 1441,
	240, 1441,
	241, 1441,
	242, 1441,
	243, 1441,
	244, 1441,
	245, 1441,
	246, 1441,
	247, 1441,
	248, 1441,
	249, 1441,
	250, 1441,
	251, 1441,
	252, 1441,
	254, 1441,
	255, 1441,
	256, 1441,
	257, 1441,
	258, 1441,
	259, 1441,
	260, 1441,
	261, 1441,
	262, 1441,
	263, 1441,
	264, 1441,
	266, 1441,
	267, 1441,
	268, 1441,
	269, 1441,
	270, 1441,
	272, 1441,
	273, 1441,
	274, 1441,
	275, 1441,
	276, 1441,
	277, 1441,
	278, 1441,
	279, 1441,
	280, 1441,
	282, 1441,
	283, 1441,
	284, 1441,
	285, 1441,
	286, 1441,
	287, 1441,
	288, 1441,
	289, 1441,
	290, 1441,
	291, 1441,
	293, 1441,
	295, 1441,
	296, 1441,
	297, 1441,
	298, 1441,
	299, 1441,
	300, 1441,
	301, 1441,
	303, 1441,
	304, 1441,
	305, 1441,
	308, 1441,
	309, 1441,
	310, 1441,
	311, 1441,
	313, 1441,
	314, 1441,
	315, 1441,
	316, 1441,
	319, 1441,
	320, 1441,
	321, 1441,
	322, 1441,
	324, 1441,
	326, 1441,
	327, 1441,
	328, 1441,
	329, 1441,
	330, 1441,
	331, 1441,
	334, 1441,
	339, 1441,
	340, 1441,
	341, 1441,
	342, 1441,
	343, 1441,
	344, 1441,
	345, 1441,
	347, 1441,
	348, 1441,
	349, 1441,
	350, 1441,
	351, 1441,
	352, 1441,
	353, 1441,
	354, 1441,
	356, 1441,
	357, 1441,
	358, 1441,
	359, 1441,
	360, 1441,
	361, 1441,
	362, 1441,
	363, 1441,
	364, 1441,
	366, 1441,
	369, 1441,
	370, 1441,
	373, 1441,
	374, 1441,
	-2, 0,
	-1, 842,
	129, 1345,
	306, 1345,
	349, 1345,
	370, 1345,
	-2, 0,
	-1, 859,
	129, 1367,
	306, 1367,
	349, 1367,
	370, 1367,
	-2, 0,
	-1, 860,
	166, 590,
	231, 590,
	235, 590,
	-2, 309,
	-1, 929,
	114, 686,
	181, 686,
	206, 686,
	-2, 648,
	-1, 1008,
	104, 652,
	114, 652,
	162, 652,
	181, 652,
	206, 652,
	212, 652,
	317, 652,
	-2, 993,
	-1, 1018,
	368, 1194,
	-2, 1182,
	-1, 1036,
	369, 1106,
	-2, 0,
	-1, 1060,
	166, 590,
	231, 590,
	235, 590,
	-2, 585,
	-1, 1088,
	369, 1106,
	-2, 0,
	-1, 1092,
	104, 652,
	114, 652,
	162, 652,
	181, 652,
	206, 652,
	212, 652,
	317, 652,
	-2, 748,
	-1, 1316,
	166, 590,
	231, 590,
	235, 590,
	-2, 311,
	-1, 1414,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 899,
	-1, 1415,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 900,
	-1, 1416,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 901,
	-1, 1417,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 902,
	-1, 1418,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 903,
	-1, 1419,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 904,
	-1, 1420,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 905,
	-1, 1421,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 906,
	-1, 1430,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 915,
	-1, 1431,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 916,
	-1, 1432,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 917,
	-1, 1435,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 922,
	-1, 1441,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 924,
	-1, 1443,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 928,
	-1, 1444,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 929,
	-1, 1445,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 930,
	-1, 1446,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 931,
	-1, 1515,
	129, 1117,
	368, 1217,
	-2, 1210,
	-1, 1516,
	129, 1118,
	-2, 1384,
	-1, 1517,
	129, 1119,
	-2, 1291,
	-1, 1518,
	129, 1120,
	-2, 1254,
	-1, 1519,
	129, 1121,
	-2, 1271,
	-1, 1520,
	129, 1122,
	-2, 1290,
	-1, 1521,
	129, 1123,
	-2, 1342,
	-1, 1597,
	1, 749,
	71, 749,
	104, 749,
	114, 749,
	130, 749,
	134, 749,
	136, 749,
	153, 749,
	162, 749,
	169, 749,
	178, 749,
	181, 749,
	193, 749,
	206, 749,
	208, 749,
	212, 749,
	253, 749,
	255, 749,
	317, 749,
	325, 749,
	336, 749,
	337, 749,
	346, 749,
	367, 749,
	369, 749,
	371, 749,
	372, 749,
	373, 749,
	-2, 748,
	-1, 1737,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 923,
	-1, 1738,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 925,
	-1, 1743,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 926,
	-1, 1761,
	217, 1077,
	-2, 1079,
	-1, 1986,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 927,
	-1, 1991,
	165, 0,
	-2, 943,
	-1, 2000,
	217, 1078,
	-2, 1080,
	-1, 2042,
	13, 0,
	14, 0,
	15, 0,
	347, 0,
	348, 0,
	349, 0,
	-2, 970,
	-1, 2043,
	13, 0,
	14, 0,
	15, 0,
	347, 0,
	348, 0,
	349, 0,
	-2, 971,
	-1, 2044,
	13, 0,
	14, 0,
	15, 0,
	347, 0,
	348, 0,
	349, 0,
	-2, 972,
	-1, 2048,
	13, 0,
	14, 0,
	15, 0,
	347, 0,
	348, 0,
	349, 0,
	-2, 976,
	-1, 2049,
	13, 0,
	14, 0,
	15, 0,
	347, 0,
	348, 0,
	349, 0,
	-2, 977,
	-1, 2050,
	13, 0,
	14, 0,
	15, 0,
	347, 0,
	348, 0,
	349, 0,
	-2, 978,
	-1, 2174,
	165, 0,
	-2, 944,
	-1, 2177,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 947,
	-1, 2178,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 949,
	-1, 2294,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 948,
	-1, 2295,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 950,
	-1, 2302,
	165, 0,
	-2, 979,
	-1, 2379,
	165, 0,
	-2, 980,
	-1, 2456,
	36, 0,
	146, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 1387,
}

const sqlPrivate = 57344

const sqlLast = 42169

var sqlAct = [...]int{

	629, 2464, 2455, 2130, 2503, 2430, 1660, 2465, 572, 2328,
	2466, 1668, 2019, 1968, 2384, 1216, 1121, 619, 2454, 1640,
	1310, 2275, 2140, 588, 627, 626, 2228, 2162, 1731, 2164,
	605, 1223, 1311, 73, 1934, 2101, 1258, 2242, 880, 776,
	732, 176, 2308, 1936, 2102, 1657, 1942, 176, 1827, 1639,
	1644, 2156, 1875, 1259, 1854, 176, 1669, 458, 26, 1069,
	1219, 1610, 1086, 1592, 176, 1601, 1643, 1862, 1593, 176,
	176, 580, 118, 176, 1772, 2208, 176, 2072, 1826, 1393,
	1236, 1388, 1727, 1090, 176, 1633, 863, 1014, 443, 1471,
	932, 1715, 1544, 1341, 1470, 511, 1098, 1212, 1495, 599,
	1070, 1479, 1458, 1100, 1455, 1337, 1489, 440, 862, 811,
	1050, 1641, 1046, 738, 808, 801, 1662, 1579, 1647, 741,
	1566, 1077, 720, 822, 1511, 882, 1003, 933, 491, 598,
	176, 176, 119, 508, 622, 931, 118, 1340, 176, 1060,
	120, 167, 621, 504, 469, 1230, 798, 172, 718, 1059,
	2243, 532, 937, 2086, 1760, 577, 2087, 1238, 1238, 2499,
	1238, 1661, 39, 1120, 176, 176, 176, 176, 576, 576,
	1087, 176, 176, 40, 124, 2480, 1984, 2476, 2475, 2241,
	604, 1683, 1683, 2472, 2452, 2451, 43, 1120, 1698, 1698,
	1683, 762, 1117, 2425, 1095, 571, 26, 1691, 1951, 2420,
	126, 2416, 2408, 2289, 2381, 1120, 2241, 46, 1691, 51,
	118, 483, 2359, 2426, 1952, 2356, 2241, 586, 39, 1120,
	2354, 2339, 2338, 1698, 2241, 1120, 2241, 397, 2316, 40,
	54, 2313, 1120, 2296, 56, 1120, 2263, 1691, 62, 2261,
	1683, 127, 43, 1683, 1634, 63, 2240, 45, 64, 2221,
	2241, 569, 2176, 1120, 2155, 1568, 1691, 2150, 1638, 568,
	2082, 1638, 1995, 1962, 2083, 51, 1683, 1924, 1923, 1851,
	65, 2075, 1120, 1120, 581, 2289, 756, 746, 750, 722,
	1844, 66, 1842, 1841, 1845, 1840, 1683, 1683, 1702, 1683,
	1764, 1690, 1683, 1634, 62, 1691, 1765, 1665, 724, 135,
	725, 63, 948, 949, 64, 1682, 1637, 1573, 1251, 1683,
	1638, 1572, 1252, 2075, 1567, 1797, 1798, 1979, 739, 1599,
	1698, 2055, 1997, 1120, 1924, 951, 1730, 1713, 137, 1683,
	1771, 1319, 735, 1064, 1474, 760, 844, 66, 138, 841,
	840, 839, 838, 1338, 748, 752, 579, 758, 135, 950,
	837, 836, 835, 834, 833, 1472, 39, 2244, 832, 831,
	1239, 1239, 67, 1239, 136, 830, 726, 40, 68, 723,
	564, 563, 129, 562, 530, 529, 528, 137, 1492, 130,
	43, 527, 526, 525, 524, 523, 522, 75, 122, 69,
	521, 70, 520, 71, 519, 128, 518, 517, 1797, 1798,
	72, 516, 121, 51, 135, 176, 515, 176, 176, 514,
	176, 83, 499, 136, 102, 176, 956, 498, 67, 497,
	496, 176, 495, 125, 431, 430, 429, 428, 427, 1803,
	1493, 412, 62, 137, 176, 176, 176, 176, 176, 63,
	411, 403, 64, 825, 122, 69, 402, 70, 401, 400,
	392, 121, 106, 391, 1870, 161, 766, 815, 1951, 160,
	135, 123, 159, 158, 1717, 176, 157, 464, 156, 136,
	102, 155, 135, 948, 949, 66, 577, 129, 176, 1494,
	1491, 1344, 1244, 1237, 130, 1372, 154, 153, 152, 137,
	151, 1813, 150, 149, 176, 148, 951, 1091, 147, 1567,
	780, 137, 146, 784, 176, 145, 144, 121, 143, 142,
	4, 141, 1803, 140, 139, 875, 1508, 1506, 1797, 1798,
	950, 944, 2498, 2471, 1504, 136, 970, 1502, 2453, 804,
	804, 2435, 2376, 129, 800, 825, 2357, 136, 2282, 2207,
	130, 2206, 2202, 2201, 2194, 129, 2193, 2192, 2188, 775,
	805, 2187, 130, 2186, 2185, 1496, 67, 2179, 2161, 2069,
	2064, 2063, 2062, 121, 1926, 1814, 176, 878, 823, 2005,
	1922, 1882, 1878, 845, 1849, 1664, 1466, 930, 973, 974,
	975, 976, 122, 69, 1846, 70, 1834, 956, 1825, 1796,
	1793, 1792, 948, 949, 1790, 1084, 1777, 1776, 135, 1761,
	1597, 752, 1359, 944, 733, 464, 873, 1255, 102, 135,
	1089, 39, 943, 1022, 177, 951, 758, 1088, 1015, 1222,
	1006, 2021, 40, 2443, 2411, 773, 2405, 137, 2404, 2403,
	2395, 2393, 1803, 1490, 2371, 43, 2370, 577, 137, 950,
	2369, 2325, 2304, 929, 2290, 860, 2269, 857, 2247, 971,
	2199, 952, 953, 954, 955, 957, 958, 2138, 51, 1696,
	1693, 2136, 2135, 136, 1799, 1800, 1801, 1802, 1804, 1805,
	766, 129, 2133, 2387, 136, 2110, 2109, 2090, 130, 928,
	2078, 1990, 129, 1966, 1913, 876, 1467, 62, 1908, 130,
	1895, 1894, 1880, 1850, 63, 1339, 1726, 64, 2281, 1797,
	1798, 121, 1824, 1786, 1725, 1785, 956, 1782, 977, 1757,
	1752, 1460, 121, 569, 1051, 948, 949, 1054, 176, 1584,
	176, 568, 1556, 972, 1500, 1215, 734, 940, 941, 1067,
	66, 1058, 1044, 1043, 945, 1042, 1041, 1040, 951, 1039,
	1038, 1037, 1036, 176, 176, 1035, 752, 1799, 1800, 1801,
	1802, 1804, 1805, 1329, 1328, 1034, 1338, 1335, 1075, 1033,
	825, 176, 950, 1032, 1031, 1018, 1068, 1124, 1030, 1029,
	1028, 1027, 1026, 176, 1019, 176, 577, 1048, 1049, 1052,
	1007, 1006, 1895, 856, 848, 819, 2288, 176, 1073, 1055,
	2181, 2160, 1118, 176, 2085, 176, 2081, 176, 1763, 1585,
	1221, 176, 1015, 1964, 1004, 1797, 1798, 1089, 1701, 118,
	872, 67, 1634, 1803, 1937, 1214, 1868, 2292, 2291, 961,
	959, 960, 952, 953, 954, 955, 957, 958, 2285, 1108,
	2088, 1953, 1091, 926, 1848, 1847, 1736, 122, 69, 1332,
	70, 869, 1325, 176, 176, 1085, 1063, 1969, 1227, 1106,
	825, 1700, 176, 135, 2309, 176, 1056, 1024, 1061, 1220,
	464, 1057, 1093, 102, 774, 1661, 2022, 1107, 1065, 1801,
	1802, 1804, 1805, 1480, 1047, 1813, 1124, 1768, 1947, 1101,
	920, 1102, 137, 1507, 1505, 176, 1241, 2097, 2438, 1243,
	176, 1503, 1345, 1246, 1501, 176, 176, 1687, 176, 2495,
	176, 1976, 176, 2255, 176, 1256, 800, 2415, 1119, 2496,
	1703, 2349, 1304, 162, 713, 176, 432, 1492, 136, 921,
	1611, 176, 176, 739, 1096, 912, 129, 2348, 1089, 2347,
	1603, 1333, 711, 130, 2346, 2125, 2121, 2266, 2123, 1229,
	405, 2094, 1232, 954, 955, 957, 958, 176, 1101, 1814,
	1102, 1124, 2093, 1209, 417, 1213, 121, 1103, 1781, 1010,
	1780, 1797, 1798, 575, 1815, 1816, 1817, 1402, 1779, 1493,
	734, 1778, 1739, 752, 1326, 1231, 1021, 1231, 709, 1686,
	1346, 118, 706, 1265, 1630, 1253, 857, 870, 1313, 1254,
	1626, 1624, 1442, 1312, 1614, 165, 1062, 1694, 436, 1316,
	759, 1560, 1394, 1401, 1334, 1603, 1559, 1403, 1371, 1342,
	1658, 1602, 1330, 715, 1812, 418, 1370, 1360, 1494, 1491,
	685, 574, 409, 1350, 1375, 2128, 1103, 771, 2414, 1354,
	871, 1355, 566, 1356, 478, 1357, 1353, 1358, 2129, 1369,
	577, 2330, 1919, 1965, 1210, 577, 1806, 1807, 1799, 1800,
	1801, 1802, 1804, 1805, 1364, 1366, 1749, 826, 1214, 1349,
	1374, 166, 2449, 176, 435, 176, 1373, 1457, 176, 958,
	569, 576, 1747, 569, 569, 1803, 1233, 1706, 1384, 176,
	1392, 1385, 1386, 1265, 1265, 1464, 1496, 1565, 1124, 1708,
	1462, 176, 1457, 2487, 1496, 176, 1613, 2012, 176, 919,
	906, 470, 176, 1477, 1587, 1475, 176, 2422, 1339, 1336,
	1709, 176, 1480, 592, 947, 855, 1818, 176, 1124, 2015,
	2112, 176, 1707, 1944, 475, 1915, 1539, 2511, 577, 1468,
	471, 1465, 2423, 1910, 1632, 1529, 2495, 1813, 907, 1101,
	1439, 1102, 1728, 1729, 1111, 2468, 2013, 1945, 1109, 826,
	1744, 1977, 1604, 393, 2398, 1975, 948, 949, 1522, 1805,
	1745, 1045, 472, 885, 1750, 1622, 948, 949, 1615, 1617,
	1586, 1628, 1490, 1906, 925, 1249, 573, 2119, 1590, 951,
	2300, 420, 419, 1368, 1612, 474, 1104, 1563, 1238, 951,
	1653, 1562, 1944, 2353, 1571, 1496, 1001, 441, 1784, 1581,
	1582, 1577, 1580, 950, 1596, 163, 576, 2168, 434, 893,
	2467, 1814, 1314, 950, 1093, 2494, 176, 1103, 39, 1620,
	1607, 707, 1496, 176, 1625, 2492, 1631, 2274, 1655, 40,
	851, 911, 404, 1317, 176, 2469, 176, 437, 176, 707,
	936, 176, 43, 176, 164, 176, 176, 433, 176, 176,
	1437, 1440, 1600, 825, 843, 1104, 410, 176, 1918, 739,
	2486, 406, 2331, 916, 2341, 51, 2236, 2236, 1681, 2229,
	956, 407, 1746, 1576, 2506, 739, 2340, 2227, 1598, 1748,
	956, 2323, 2231, 2390, 1436, 708, 752, 2197, 1663, 707,
	1663, 752, 2470, 2113, 62, 861, 473, 758, 1809, 1810,
	1811, 63, 2237, 2237, 64, 2096, 1891, 1808, 1806, 1807,
	1799, 1800, 1801, 1802, 1804, 1805, 2011, 717, 394, 772,
	716, 1887, 2251, 118, 567, 2230, 477, 1741, 917, 118,
	2512, 1348, 971, 1675, 2254, 1656, 804, 66, 804, 866,
	2517, 2253, 971, 1228, 1463, 1124, 1689, 1115, 557, 1667,
	1076, 476, 1456, 176, 1678, 1217, 1676, 687, 1677, 1684,
	1679, 1714, 2485, 1114, 1099, 1380, 585, 1010, 1688, 176,
	176, 176, 1695, 176, 826, 1482, 1685, 2431, 823, 1363,
	1438, 1125, 918, 1112, 395, 946, 854, 1876, 1514, 1514,
	1527, 1239, 176, 886, 1547, 2198, 1697, 866, 1551, 1552,
	1554, 1113, 1320, 1052, 867, 1055, 972, 2276, 868, 1080,
	2232, 2232, 2233, 2233, 1672, 894, 972, 2141, 67, 1049,
	1048, 2504, 169, 778, 2051, 758, 758, 1704, 558, 935,
	2250, 887, 1083, 118, 884, 1080, 2324, 777, 1897, 1381,
	1076, 1324, 2235, 2235, 122, 69, 1104, 70, 1078, 2252,
	2516, 2238, 2238, 1896, 1734, 1865, 1877, 1081, 1083, 866,
	135, 1575, 867, 827, 826, 1574, 868, 464, 935, 1718,
	102, 797, 1079, 486, 1578, 480, 866, 2505, 574, 1720,
	795, 786, 2131, 1081, 2267, 1724, 1722, 1864, 1322, 137,
	1125, 1770, 2321, 1917, 577, 2209, 934, 2073, 2507, 1080,
	1323, 1499, 961, 959, 960, 952, 953, 954, 955, 957,
	958, 2303, 2196, 959, 960, 952, 953, 954, 955, 957,
	958, 936, 1083, 2322, 867, 136, 2052, 3, 868, 2127,
	2234, 2234, 2053, 129, 1082, 934, 559, 915, 1078, 1828,
	130, 1989, 1920, 1742, 1740, 1791, 904, 1081, 1751, 1719,
	758, 1721, 1699, 752, 1636, 827, 463, 34, 462, 33,
	1082, 1756, 1079, 442, 902, 1125, 461, 30, 577, 176,
	1124, 1629, 1735, 1852, 1623, 176, 176, 900, 1858, 176,
	1767, 924, 923, 849, 176, 1829, 1857, 176, 460, 79,
	459, 78, 426, 761, 1361, 176, 1859, 764, 456, 22,
	1352, 176, 176, 176, 1863, 457, 23, 176, 455, 28,
	176, 765, 421, 898, 1453, 560, 176, 176, 176, 176,
	176, 1025, 910, 896, 1082, 176, 1498, 176, 2463, 2428,
	1451, 176, 2225, 796, 1831, 1832, 1833, 614, 485, 176,
	479, 583, 794, 557, 2117, 890, 2115, 561, 2095, 176,
	1872, 176, 1867, 176, 454, 20, 176, 1888, 686, 1933,
	176, 585, 1892, 1659, 914, 176, 744, 176, 1853, 1871,
	793, 452, 19, 903, 176, 453, 18, 1652, 173, 1907,
	1925, 1881, 1927, 1248, 398, 1912, 1247, 176, 825, 447,
	15, 901, 413, 1245, 584, 34, 1892, 33, 577, 825,
	176, 438, 1125, 1883, 899, 30, 481, 173, 1447, 1928,
	489, 705, 1931, 494, 1949, 1242, 1448, 1905, 1449, 1240,
	1961, 513, 1454, 558, 634, 2496, 2002, 79, 1116, 78,
	1110, 1970, 1125, 1105, 1935, 176, 2287, 22, 2364, 2286,
	897, 1343, 2157, 1265, 23, 1963, 909, 28, 1929, 739,
	895, 1940, 2366, 448, 16, 739, 739, 1955, 1956, 739,
	1957, 1958, 1946, 1856, 446, 14, 488, 721, 721, 1860,
	1861, 1954, 889, 1866, 465, 398, 938, 1265, 1960, 1619,
	827, 1884, 2007, 2008, 2009, 176, 467, 1126, 689, 1992,
	1974, 1971, 1603, 20, 1972, 1973, 1732, 792, 1618, 451,
	12, 398, 398, 754, 398, 1909, 1980, 1978, 173, 763,
	19, 2149, 1982, 729, 18, 422, 1755, 445, 10, 1921,
	2400, 450, 7, 1758, 449, 6, 1265, 888, 15, 1603,
	1450, 559, 688, 730, 470, 1616, 1932, 1452, 710, 712,
	1774, 1775, 1394, 2026, 2244, 1213, 487, 1996, 444, 5,
	939, 1394, 2031, 2001, 1213, 1998, 423, 475, 396, 1733,
	2378, 2023, 631, 471, 1797, 1798, 176, 826, 2025, 2210,
	827, 942, 176, 2028, 1627, 2057, 1621, 2030, 2014, 2016,
	2017, 176, 176, 2427, 2061, 2272, 424, 1265, 425, 1666,
	1823, 877, 16, 557, 1654, 472, 1126, 1547, 1547, 1547,
	2091, 1651, 1836, 14, 948, 949, 2058, 731, 582, 1564,
	560, 585, 1315, 2108, 2056, 1983, 1257, 1812, 474, 2502,
	2107, 2106, 118, 1265, 1265, 176, 466, 176, 2515, 2077,
	2126, 2183, 1265, 1265, 176, 2084, 2076, 825, 12, 2071,
	2074, 2315, 561, 1797, 1798, 2137, 467, 948, 949, 2215,
	2092, 950, 176, 176, 2159, 2099, 10, 2151, 2134, 1125,
	7, 2070, 2089, 6, 2018, 1265, 948, 949, 1711, 1710,
	176, 1126, 2120, 558, 1711, 2143, 1967, 2154, 1803, 2142,
	176, 1873, 2116, 1843, 2118, 1124, 2145, 5, 1712, 951,
	2146, 2132, 1561, 1558, 470, 1557, 1488, 1012, 2010, 2144,
	1930, 2171, 1022, 1020, 2147, 922, 913, 2153, 2152, 908,
	905, 891, 2170, 950, 2158, 853, 1318, 475, 565, 2329,
	468, 1351, 176, 471, 892, 1869, 1583, 2175, 2421, 473,
	2189, 1783, 2383, 2299, 1497, 1023, 55, 2104, 608, 2226,
	1813, 2098, 513, 1646, 782, 513, 739, 787, 1645, 1127,
	1383, 1327, 790, 630, 1513, 472, 1395, 704, 398, 632,
	2080, 1262, 633, 1263, 1053, 620, 1260, 820, 1670, 1331,
	1461, 513, 513, 398, 812, 763, 176, 2195, 474, 176,
	1478, 559, 1766, 1016, 476, 600, 612, 611, 1476, 1124,
	176, 176, 847, 1874, 176, 176, 176, 1943, 2213, 2280,
	1250, 1379, 513, 1723, 1376, 2217, 1939, 2114, 1126, 408,
	2220, 176, 1794, 818, 1814, 513, 176, 1536, 176, 1528,
	176, 176, 176, 1524, 176, 1265, 176, 2108, 825, 927,
	2249, 852, 1672, 739, 2107, 2106, 176, 176, 1126, 2216,
	1074, 513, 2245, 825, 2214, 2248, 2224, 1856, 2265, 1530,
	1002, 2108, 2212, 2219, 1671, 2270, 2108, 874, 2107, 2106,
	560, 1950, 1692, 2107, 2106, 1066, 1797, 1798, 1387, 2268,
	728, 727, 1321, 1705, 2273, 995, 994, 714, 2392, 865,
	864, 2278, 1218, 1890, 1125, 2277, 2271, 2510, 2399, 473,
	2279, 2065, 561, 2298, 2111, 2437, 134, 131, 2284, 133,
	2293, 132, 1916, 398, 82, 32, 1298, 31, 2283, 101,
	1808, 1806, 1807, 1799, 1800, 1801, 1802, 1804, 1805, 100,
	99, 98, 97, 96, 590, 95, 176, 94, 176, 93,
	1124, 176, 92, 91, 90, 89, 2305, 88, 87, 176,
	86, 85, 84, 509, 476, 1124, 2319, 506, 81, 80,
	29, 25, 105, 24, 77, 2312, 739, 76, 27, 2108,
	17, 2334, 11, 21, 2122, 60, 2107, 2106, 61, 2124,
	2211, 2333, 59, 827, 2335, 176, 2317, 58, 825, 57,
	1803, 13, 176, 1214, 2351, 53, 2332, 2108, 52, 50,
	176, 176, 825, 825, 2107, 2106, 49, 2350, 2314, 48,
	2258, 2365, 826, 47, 2262, 2355, 1298, 1298, 2377, 2343,
	176, 9, 104, 826, 2363, 176, 2362, 44, 2373, 2372,
	2361, 8, 176, 42, 2374, 2375, 2367, 41, 103, 116,
	2358, 113, 2394, 115, 1265, 112, 114, 2344, 2345, 117,
	109, 2380, 1813, 110, 111, 2388, 2397, 176, 176, 108,
	107, 38, 37, 2389, 176, 494, 36, 721, 35, 2,
	1, 2409, 825, 0, 2407, 1126, 0, 176, 0, 2410,
	0, 825, 825, 0, 2396, 0, 0, 0, 2386, 0,
	398, 398, 0, 0, 0, 0, 2413, 0, 0, 0,
	1265, 2418, 2419, 1075, 176, 0, 176, 0, 173, 176,
	2412, 1124, 0, 577, 0, 0, 0, 0, 0, 0,
	398, 2444, 398, 0, 2446, 2433, 1814, 2439, 2445, 2327,
	0, 0, 0, 2450, 1226, 2434, 0, 176, 0, 2108,
	398, 0, 398, 0, 398, 2448, 2107, 2106, 1234, 1265,
	2462, 2461, 2460, 0, 176, 0, 0, 2447, 0, 2479,
	176, 2477, 2473, 0, 0, 2360, 0, 0, 0, 2484,
	0, 2481, 0, 2478, 176, 2482, 2483, 1797, 1798, 0,
	0, 0, 0, 0, 2493, 0, 2491, 0, 0, 2497,
	513, 173, 0, 0, 0, 0, 0, 0, 2501, 173,
	2500, 0, 513, 0, 0, 767, 769, 0, 0, 2509,
	0, 2508, 0, 0, 2513, 2514, 0, 1297, 0, 0,
	0, 0, 1808, 1806, 1807, 1799, 1800, 1801, 1802, 1804,
	1805, 0, 513, 0, 0, 0, 0, 513, 0, 0,
	0, 0, 173, 513, 2406, 513, 0, 513, 0, 513,
	0, 513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 826, 1362, 0, 0, 0, 0, 0, 513, 513,
	0, 0, 0, 0, 0, 0, 2311, 0, 0, 1530,
	1530, 0, 0, 1264, 0, 0, 0, 0, 0, 2436,
	846, 1803, 0, 0, 513, 0, 850, 0, 0, 0,
	1126, 1753, 1754, 0, 0, 0, 0, 0, 0, 1125,
	0, 0, 0, 2337, 0, 0, 0, 1297, 1297, 0,
	0, 0, 0, 590, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1672, 0, 0, 0, 0, 0, 0, 1300, 0, 0,
	0, 0, 0, 1813, 0, 1530, 1530, 1530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1820, 1821, 1822,
	0, 0, 0, 1264, 1264, 0, 0, 0, 0, 0,
	0, 1299, 0, 0, 0, 609, 74, 0, 0, 0,
	0, 0, 0, 0, 996, 997, 998, 999, 1000, 0,
	494, 0, 721, 1125, 1009, 763, 0, 0, 827, 0,
	0, 1261, 0, 0, 1017, 0, 398, 1814, 0, 827,
	0, 0, 0, 0, 0, 0, 0, 0, 1595, 0,
	0, 0, 398, 0, 2424, 398, 0, 1300, 1300, 1608,
	0, 0, 826, 398, 0, 0, 0, 0, 398, 0,
	74, 0, 0, 0, 398, 0, 0, 826, 1635, 2440,
	2441, 2442, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1299, 1299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 570, 0, 0, 578, 0, 0,
	0, 1261, 1261, 0, 0, 1807, 1799, 1800, 1801, 1802,
	1804, 1805, 0, 740, 74, 0, 0, 0, 1071, 1071,
	0, 0, 0, 0, 0, 590, 0, 0, 0, 0,
	0, 0, 0, 0, 1125, 0, 1797, 1798, 0, 1815,
	1816, 1817, 0, 1642, 1530, 1530, 0, 0, 0, 1125,
	763, 0, 2173, 0, 0, 0, 0, 0, 0, 0,
	0, 398, 0, 1674, 0, 513, 1987, 1988, 513, 0,
	513, 0, 398, 398, 0, 1680, 763, 0, 0, 0,
	0, 0, 826, 0, 1608, 0, 0, 0, 0, 1812,
	0, 0, 0, 0, 0, 0, 826, 826, 0, 0,
	0, 0, 0, 1530, 1530, 1530, 1530, 1530, 1530, 1530,
	1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530,
	1530, 1530, 0, 1530, 0, 2032, 2033, 2034, 2035, 2036,
	2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046,
	2047, 2048, 2049, 2050, 0, 2054, 0, 827, 0, 0,
	1803, 0, 0, 0, 0, 0, 1298, 0, 0, 0,
	0, 590, 590, 0, 0, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 826, 826, 0, 0, 0,
	1716, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1298, 1818, 0, 0, 0, 1126, 398, 398, 398, 0,
	398, 0, 0, 0, 0, 1125, 0, 0, 0, 0,
	0, 0, 1813, 0, 0, 0, 0, 0, 0, 398,
	0, 0, 0, 0, 0, 1377, 0, 1382, 0, 0,
	0, 0, 0, 1389, 0, 0, 0, 0, 0, 1298,
	0, 0, 0, 1404, 1405, 1406, 1407, 1408, 1409, 1410,
	1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420,
	1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430,
	1431, 1432, 1433, 1434, 1435, 0, 1441, 0, 1443, 1444,
	1445, 1446, 0, 0, 0, 0, 1814, 0, 0, 0,
	0, 0, 0, 0, 0, 1469, 0, 0, 0, 1126,
	1298, 0, 1009, 0, 0, 1797, 1798, 0, 1815, 1816,
	1817, 0, 0, 0, 0, 0, 0, 0, 578, 0,
	0, 1509, 1510, 0, 0, 1526, 0, 1538, 1540, 1545,
	1548, 1549, 1550, 0, 0, 0, 1298, 1298, 827, 0,
	0, 0, 0, 0, 0, 1298, 1298, 0, 0, 0,
	0, 0, 0, 827, 0, 0, 0, 0, 1812, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1809, 1810, 1811, 0, 0, 1298, 0,
	0, 0, 1808, 1806, 1807, 1799, 1800, 1801, 1802, 1804,
	1805, 0, 0, 0, 0, 0, 398, 0, 0, 0,
	0, 0, 398, 398, 0, 0, 398, 0, 0, 0,
	0, 1595, 0, 0, 1595, 0, 0, 0, 0, 1803,
	0, 0, 1879, 0, 0, 0, 0, 0, 398, 1885,
	1886, 0, 0, 0, 1608, 0, 0, 1893, 0, 0,
	1126, 0, 1819, 1898, 1899, 1901, 1903, 1904, 39, 0,
	0, 0, 398, 0, 1911, 1126, 570, 1297, 1914, 40,
	1818, 0, 0, 0, 0, 0, 398, 0, 0, 0,
	0, 0, 43, 0, 0, 0, 1226, 1005, 1226, 1008,
	513, 1813, 0, 398, 0, 0, 1013, 1938, 827, 0,
	0, 1297, 398, 0, 1948, 51, 0, 0, 0, 0,
	1530, 398, 827, 827, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1716, 0, 0, 0, 0, 0,
	0, 0, 2302, 1264, 62, 0, 0, 1716, 0, 0,
	0, 63, 0, 0, 64, 0, 0, 0, 1298, 0,
	1297, 1530, 0, 0, 0, 0, 948, 949, 0, 0,
	0, 0, 0, 0, 0, 1814, 0, 1264, 0, 0,
	0, 0, 398, 2326, 0, 0, 0, 66, 0, 951,
	0, 0, 827, 0, 0, 0, 0, 948, 949, 0,
	0, 827, 827, 0, 0, 0, 0, 1300, 0, 0,
	0, 0, 0, 950, 0, 0, 0, 0, 0, 0,
	951, 1297, 0, 0, 0, 0, 1264, 1530, 0, 0,
	0, 1126, 2020, 74, 0, 0, 0, 0, 1092, 0,
	0, 1300, 0, 0, 950, 0, 0, 0, 0, 2379,
	0, 1299, 0, 0, 0, 0, 0, 1297, 1297, 0,
	0, 0, 1809, 1810, 1811, 0, 1297, 1297, 67, 0,
	0, 1808, 1806, 1807, 1799, 1800, 1801, 1802, 1804, 1805,
	956, 1261, 0, 0, 0, 1299, 0, 1264, 0, 0,
	1300, 0, 0, 0, 122, 69, 0, 70, 0, 1297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 956, 0, 398, 0, 1261, 0, 464, 0, 1595,
	102, 0, 0, 1264, 1264, 0, 0, 0, 763, 1595,
	0, 0, 1264, 1264, 1299, 0, 0, 0, 0, 137,
	0, 0, 971, 2103, 0, 0, 0, 1737, 1738, 0,
	0, 1300, 0, 1743, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1261, 1264, 0, 1298, 0, 0,
	0, 0, 1608, 971, 1226, 136, 0, 0, 0, 0,
	0, 2139, 0, 129, 0, 1762, 0, 1300, 1300, 40,
	130, 1769, 0, 0, 1773, 1299, 1300, 1300, 0, 398,
	398, 0, 43, 0, 0, 74, 0, 0, 0, 0,
	0, 1787, 0, 121, 0, 0, 972, 2165, 0, 0,
	0, 0, 0, 1298, 0, 1261, 0, 2167, 0, 1300,
	0, 1299, 1299, 570, 0, 0, 570, 570, 0, 0,
	1299, 1299, 0, 0, 0, 1009, 0, 972, 0, 0,
	0, 0, 1545, 1545, 1545, 0, 0, 0, 0, 1297,
	0, 1261, 1261, 0, 0, 0, 0, 0, 0, 2190,
	1261, 1261, 1298, 1299, 0, 0, 0, 0, 1071, 0,
	0, 0, 0, 590, 0, 0, 0, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 66, 0, 0,
	0, 0, 578, 1261, 0, 0, 0, 1008, 0, 0,
	0, 0, 0, 0, 960, 952, 953, 954, 955, 957,
	958, 0, 0, 398, 0, 1264, 763, 0, 0, 1797,
	1798, 0, 1815, 1816, 1817, 0, 0, 1595, 763, 0,
	0, 2222, 2223, 1608, 0, 2172, 952, 953, 954, 955,
	957, 958, 0, 0, 0, 0, 0, 2103, 763, 0,
	0, 0, 0, 2256, 0, 2257, 0, 398, 2259, 2260,
	0, 398, 1941, 2264, 740, 0, 0, 0, 67, 0,
	0, 2103, 1812, 763, 1642, 0, 2103, 0, 0, 1300,
	1092, 0, 0, 0, 1959, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 122, 69, 0, 70, 0, 74,
	0, 590, 590, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 590, 0, 0, 464, 0, 0,
	102, 0, 0, 1299, 0, 0, 1981, 0, 0, 0,
	0, 1389, 0, 1803, 0, 0, 0, 1985, 0, 137,
	1986, 1797, 1798, 0, 1815, 1816, 1817, 0, 0, 0,
	0, 0, 1991, 1261, 0, 0, 0, 1994, 1297, 0,
	0, 1999, 0, 1608, 0, 2318, 0, 0, 2320, 2003,
	0, 0, 1959, 0, 1818, 136, 398, 0, 0, 2103,
	0, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	130, 0, 2027, 0, 1812, 1813, 2029, 0, 0, 0,
	0, 0, 0, 0, 2352, 0, 0, 2103, 0, 0,
	0, 0, 398, 121, 1297, 0, 74, 0, 74, 763,
	0, 0, 0, 0, 1264, 0, 0, 2165, 2165, 2059,
	2060, 0, 0, 0, 0, 0, 0, 74, 2066, 2067,
	2068, 0, 0, 74, 0, 0, 0, 2385, 0, 0,
	0, 0, 1595, 0, 0, 1803, 0, 0, 0, 1226,
	0, 0, 0, 1297, 0, 2079, 0, 0, 0, 1814,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1264, 0, 0, 0, 2401, 2402, 0, 0, 1300, 0,
	0, 398, 0, 0, 0, 2100, 1818, 0, 0, 0,
	0, 0, 0, 0, 2417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1813, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1264,
	0, 2432, 1299, 763, 0, 0, 398, 0, 0, 0,
	0, 0, 0, 0, 1300, 1071, 0, 74, 0, 2103,
	0, 0, 0, 0, 590, 0, 1809, 1810, 1811, 0,
	0, 0, 1261, 0, 2385, 1808, 1806, 1807, 1799, 1800,
	1801, 1802, 1804, 1805, 0, 0, 0, 0, 0, 0,
	0, 763, 0, 0, 0, 0, 0, 398, 1299, 0,
	2174, 1814, 0, 1300, 2177, 2178, 0, 0, 2180, 0,
	0, 2490, 0, 0, 0, 2182, 0, 2184, 948, 949,
	0, 978, 979, 980, 988, 989, 990, 0, 1261, 0,
	0, 0, 0, 2191, 981, 0, 1459, 0, 0, 0,
	0, 951, 0, 0, 992, 0, 0, 1299, 0, 0,
	0, 0, 0, 0, 0, 0, 1008, 0, 0, 0,
	0, 948, 949, 0, 0, 950, 2200, 988, 989, 990,
	0, 970, 0, 0, 0, 967, 0, 1261, 0, 0,
	0, 0, 0, 0, 951, 0, 0, 992, 1809, 1810,
	1811, 1797, 1798, 0, 1815, 1816, 1817, 1808, 1806, 1807,
	1799, 1800, 1801, 1802, 1804, 1805, 0, 1993, 950, 0,
	0, 0, 0, 0, 970, 0, 2246, 0, 0, 0,
	0, 0, 0, 973, 974, 975, 976, 0, 0, 0,
	1008, 0, 956, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1812, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 985, 993, 0, 0, 0, 0,
	0, 0, 0, 0, 740, 0, 973, 974, 975, 976,
	740, 740, 0, 991, 740, 956, 0, 0, 0, 0,
	0, 0, 0, 2294, 2295, 0, 0, 0, 983, 0,
	0, 0, 0, 0, 971, 0, 0, 985, 993, 0,
	0, 0, 0, 0, 0, 1803, 0, 0, 0, 0,
	0, 0, 0, 0, 2307, 0, 0, 74, 0, 982,
	2310, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 983, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 0, 0, 0, 0, 1818, 74, 0, 0,
	74, 0, 0, 977, 0, 0, 0, 0, 0, 0,
	578, 0, 0, 0, 2342, 0, 0, 1813, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 986, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 977, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 986, 0, 0,
	0, 0, 0, 0, 0, 0, 2391, 0, 0, 0,
	0, 1814, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 984, 0, 0, 962, 963, 969, 968, 964,
	965, 966, 987, 0, 961, 959, 960, 952, 953, 954,
	955, 957, 958, 0, 0, 0, 0, 0, 0, 0,
	590, 2203, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 984, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 987, 0, 961, 959, 960,
	952, 953, 954, 955, 957, 958, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1809, 1810,
	1811, 0, 0, 2459, 2459, 0, 0, 1808, 1806, 1807,
	1799, 1800, 1801, 1802, 1804, 1805, 74, 0, 0, 2474,
	0, 0, 0, 0, 0, 0, 579, 0, 175, 0,
	0, 740, 0, 0, 0, 0, 0, 2459, 0, 0,
	0, 0, 0, 0, 178, 179, 0, 180, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 181, 182, 183,
	335, 336, 337, 338, 184, 339, 340, 0, 185, 341,
	342, 186, 187, 0, 0, 343, 344, 345, 0, 188,
	346, 0, 0, 2459, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 0, 196, 197, 198, 0,
	0, 0, 0, 0, 0, 0, 199, 200, 399, 201,
	347, 202, 348, 349, 0, 203, 0, 204, 740, 205,
	0, 0, 206, 207, 0, 208, 0, 0, 0, 350,
	209, 211, 210, 212, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 353, 354, 355, 0, 215,
	0, 216, 0, 0, 0, 0, 217, 356, 0, 357,
	0, 0, 218, 219, 0, 0, 220, 221, 358, 359,
	0, 0, 360, 225, 0, 222, 0, 0, 223, 361,
	224, 362, 363, 364, 365, 366, 0, 367, 0, 0,
	226, 227, 228, 0, 229, 230, 231, 0, 233, 232,
	0, 368, 0, 234, 0, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 0, 242, 243,
	245, 244, 0, 0, 0, 370, 246, 371, 247, 248,
	0, 249, 0, 743, 250, 0, 0, 251, 372, 0,
	252, 740, 373, 253, 254, 255, 256, 257, 0, 258,
	374, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	376, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 0,
	281, 282, 377, 283, 0, 287, 288, 289, 290, 135,
	292, 378, 291, 293, 294, 0, 295, 284, 285, 296,
	0, 297, 379, 380, 298, 0, 305, 299, 300, 286,
	301, 304, 381, 302, 303, 382, 74, 306, 137, 307,
	308, 309, 310, 311, 312, 313, 0, 383, 384, 385,
	0, 0, 314, 315, 386, 387, 0, 316, 317, 318,
	319, 0, 0, 320, 321, 322, 323, 0, 324, 0,
	388, 325, 326, 327, 828, 390, 0, 0, 328, 0,
	0, 0, 129, 329, 330, 331, 332, 333, 0, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	737, 0, 1094, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1123, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2368, 178, 179, 1128, 180, 1129, 1130, 1131, 1132,
	334, 1133, 1134, 1135, 1136, 181, 182, 183, 335, 336,
	337, 338, 184, 339, 340, 1137, 185, 341, 342, 186,
	187, 1138, 1139, 343, 344, 345, 1140, 188, 346, 1141,
	829, 1142, 189, 190, 191, 0, 192, 1143, 193, 0,
	194, 195, 1144, 690, 196, 197, 198, 1145, 1146, 1148,
	1147, 1149, 1150, 1151, 199, 200, 399, 201, 347, 202,
	348, 349, 1152, 203, 1153, 204, 1154, 205, 1155, 1156,
	206, 207, 1157, 208, 1158, 1008, 1159, 350, 209, 211,
	210, 212, 351, 352, 1160, 691, 1161, 0, 0, 0,
	0, 213, 214, 353, 354, 355, 0, 215, 1162, 216,
	1163, 1164, 692, 1165, 217, 356, 1166, 357, 1167, 0,
	218, 219, 0, 0, 220, 221, 358, 359, 694, 1168,
	360, 225, 1169, 222, 1170, 693, 223, 361, 224, 362,
	363, 364, 365, 366, 1171, 367, 1172, 695, 226, 227,
	228, 696, 229, 230, 231, 1173, 233, 232, 1174, 368,
	697, 234, 698, 1175, 235, 1176, 1177, 236, 0, 237,
	238, 239, 241, 369, 240, 699, 242, 243, 245, 244,
	1178, 1179, 1180, 370, 246, 371, 247, 248, 1181, 249,
	1182, 1183, 250, 1184, 1185, 251, 372, 700, 252, 701,
	373, 253, 254, 255, 256, 257, 1186, 258, 374, 259,
	375, 260, 1187, 261, 262, 263, 264, 265, 376, 266,
	267, 1188, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 1189, 280, 702, 281, 282,
	377, 283, 0, 287, 288, 289, 290, 1190, 292, 378,
	291, 293, 294, 1191, 295, 284, 285, 296, 703, 297,
	379, 380, 298, 1192, 305, 299, 300, 286, 301, 304,
	381, 302, 303, 382, 1193, 306, 1194, 307, 308, 309,
	310, 311, 312, 313, 1195, 383, 384, 385, 1196, 1197,
	314, 315, 386, 387, 1198, 316, 317, 318, 319, 1199,
	1200, 320, 321, 322, 323, 1201, 324, 1202, 388, 325,
	326, 327, 389, 390, 1203, 1204, 328, 1205, 1206, 1207,
	1208, 329, 330, 331, 332, 333, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1123, 0, 0, 0, 0, 0, 1588, 0,
	0, 0, 0, 0, 0, 0, 0, 1589, 178, 179,
	1128, 180, 1129, 1130, 1131, 1132, 334, 1133, 1134, 1135,
	1136, 181, 182, 183, 335, 336, 337, 338, 184, 339,
	340, 1137, 185, 341, 342, 186, 187, 1138, 1139, 343,
	344, 345, 1140, 188, 346, 1141, 829, 1142, 189, 190,
	191, 0, 192, 1143, 193, 0, 194, 195, 1144, 690,
	196, 197, 198, 1145, 1146, 1148, 1147, 1149, 1150, 1151,
	199, 200, 399, 201, 347, 202, 348, 349, 1152, 203,
	1153, 204, 1154, 205, 1155, 1156, 206, 207, 1157, 208,
	1158, 0, 1159, 350, 209, 211, 210, 212, 351, 352,
	1160, 691, 1161, 0, 0, 0, 0, 213, 214, 353,
	354, 355, 0, 215, 1162, 216, 1163, 1164, 692, 1165,
	217, 356, 1166, 357, 1167, 0, 218, 219, 0, 0,
	220, 221, 358, 359, 694, 1168, 360, 225, 1169, 222,
	1170, 693, 223, 361, 224, 362, 363, 364, 365, 366,
	1171, 367, 1172, 695, 226, 227, 228, 696, 229, 230,
	231, 1173, 233, 232, 1174, 368, 697, 234, 698, 1175,
	235, 1176, 1177, 236, 0, 237, 238, 239, 241, 369,
	240, 699, 242, 243, 245, 244, 1178, 1179, 1180, 370,
	246, 371, 247, 248, 1181, 249, 1182, 1183, 250, 1184,
	1185, 251, 372, 700, 252, 701, 373, 253, 254, 255,
	256, 257, 1186, 258, 374, 259, 375, 260, 1187, 261,
	262, 263, 264, 265, 376, 266, 267, 1188, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 1189, 280, 702, 281, 282, 377, 283, 0, 287,
	288, 289, 290, 1190, 292, 378, 291, 293, 294, 1191,
	295, 284, 285, 296, 703, 297, 379, 380, 298, 1192,
	305, 299, 300, 286, 301, 304, 381, 302, 303, 382,
	1193, 306, 1194, 307, 308, 309, 310, 311, 312, 313,
	1195, 383, 384, 385, 1196, 1197, 314, 315, 386, 387,
	1198, 316, 317, 318, 319, 1199, 1200, 320, 321, 322,
	323, 1201, 324, 1202, 388, 325, 326, 327, 389, 390,
	1203, 1204, 328, 1205, 1206, 1207, 1208, 329, 330, 331,
	332, 333, 0, 0, 0, 0, 0, 0, 0, 1123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2218, 178, 179, 1128, 180, 1129,
	1130, 1131, 1132, 334, 1133, 1134, 1135, 1136, 181, 182,
	183, 335, 336, 337, 338, 184, 339, 340, 1137, 185,
	341, 342, 186, 187, 1138, 1139, 343, 344, 345, 1140,
	188, 346, 1141, 829, 1142, 189, 190, 191, 0, 192,
	1143, 193, 0, 194, 195, 1144, 690, 196, 197, 198,
	1145, 1146, 1148, 1147, 1149, 1150, 1151, 199, 200, 399,
	201, 347, 202, 348, 349, 1152, 203, 1153, 204, 1154,
	205, 1155, 1156, 206, 207, 1157, 208, 1158, 0, 1159,
	350, 209, 211, 210, 212, 351, 352, 1160, 691, 1161,
	0, 0, 0, 0, 213, 214, 353, 354, 355, 0,
	215, 1162, 216, 1163, 1164, 692, 1165, 217, 356, 1166,
	357, 1167, 0, 218, 219, 0, 0, 220, 221, 358,
	359, 694, 1168, 360, 225, 1169, 222, 1170, 693, 223,
	361, 224, 362, 363, 364, 365, 366, 1171, 367, 1172,
	695, 226, 227, 228, 696, 229, 230, 231, 1173, 233,
	232, 1174, 368, 697, 234, 698, 1175, 235, 1176, 1177,
	236, 0, 237, 238, 239, 241, 369, 240, 699, 242,
	243, 245, 244, 1178, 1179, 1180, 370, 246, 371, 247,
	248, 1181, 249, 1182, 1183, 250, 1184, 1185, 251, 372,
	700, 252, 701, 373, 253, 254, 255, 256, 257, 1186,
	258, 374, 259, 375, 260, 1187, 261, 262, 263, 264,
	265, 376, 266, 267, 1188, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 1189, 280,
	702, 281, 282, 377, 283, 0, 287, 288, 289, 290,
	1190, 292, 378, 291, 293, 294, 1191, 295, 284, 285,
	296, 703, 297, 379, 380, 298, 1192, 305, 299, 300,
	286, 301, 304, 381, 302, 303, 382, 1193, 306, 1194,
	307, 308, 309, 310, 311, 312, 313, 1195, 383, 384,
	385, 1196, 1197, 314, 315, 386, 387, 1198, 316, 317,
	318, 319, 1199, 1200, 320, 321, 322, 323, 1201, 324,
	1202, 388, 325, 326, 327, 389, 390, 1203, 1204, 328,
	1205, 1206, 1207, 1208, 329, 330, 331, 332, 333, 0,
	0, 1123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1122, 178, 179, 1128,
	180, 1129, 1130, 1131, 1132, 334, 1133, 1134, 1135, 1136,
	181, 182, 183, 335, 336, 337, 338, 184, 339, 340,
	1137, 185, 341, 342, 186, 187, 1138, 1139, 343, 344,
	345, 1140, 188, 346, 1141, 829, 1142, 189, 190, 191,
	0, 192, 1143, 193, 0, 194, 195, 1144, 690, 196,
	197, 198, 1145, 1146, 1148, 1147, 1149, 1150, 1151, 199,
	200, 399, 201, 347, 202, 348, 349, 1152, 203, 1153,
	204, 1154, 205, 1155, 1156, 206, 207, 1157, 208, 1158,
	0, 1159, 350, 209, 211, 210, 212, 351, 352, 1160,
	691, 1161, 0, 0, 0, 0, 213, 214, 353, 354,
	355, 0, 215, 1162, 216, 1163, 1164, 692, 1165, 217,
	356, 1166, 357, 1167, 0, 218, 219, 0, 0, 220,
	221, 358, 359, 694, 1168, 360, 225, 1169, 222, 1170,
	693, 223, 361, 224, 362, 363, 364, 365, 366, 1171,
	367, 1172, 695, 226, 227, 228, 696, 229, 230, 231,
	1173, 233, 232, 1174, 368, 697, 234, 698, 1175, 235,
	1176, 1177, 236, 0, 237, 238, 239, 241, 369, 240,
	699, 242, 243, 245, 244, 1178, 1179, 1180, 370, 246,
	371, 247, 248, 1181, 249, 1182, 1183, 250, 1184, 1185,
	251, 372, 700, 252, 701, 373, 253, 254, 255, 256,
	257, 1186, 258, 374, 259, 375, 260, 1187, 261, 262,
	263, 264, 265, 376, 266, 267, 1188, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	1189, 280, 702, 281, 282, 377, 283, 0, 287, 288,
	289, 290, 1190, 292, 378, 291, 293, 294, 1191, 295,
	284, 285, 296, 703, 297, 379, 380, 298, 1192, 305,
	299, 300, 286, 301, 304, 381, 302, 303, 382, 1193,
	306, 1194, 307, 308, 309, 310, 311, 312, 313, 1195,
	383, 384, 385, 1196, 1197, 314, 315, 386, 387, 1198,
	316, 317, 318, 319, 1199, 1200, 320, 321, 322, 323,
	1201, 324, 1202, 388, 325, 326, 327, 389, 390, 1203,
	1204, 328, 1205, 1206, 1207, 1208, 329, 330, 331, 332,
	333, 1487, 0, 628, 617, 618, 615, 616, 607, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 1484, 180, 0, 0, 0, 0, 645, 610, 0,
	0, 0, 181, 182, 183, 335, 660, 337, 661, 184,
	662, 663, 0, 185, 341, 342, 186, 187, 613, 644,
	664, 665, 345, 0, 188, 656, 0, 636, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	690, 196, 197, 198, 0, 637, 638, 640, 0, 639,
	641, 199, 200, 399, 201, 666, 202, 667, 668, 0,
	203, 0, 204, 0, 205, 1485, 0, 659, 207, 0,
	208, 0, 0, 0, 601, 209, 211, 210, 212, 646,
	647, 624, 691, 0, 0, 0, 0, 0, 213, 214,
	669, 670, 671, 0, 215, 0, 216, 0, 0, 692,
	0, 217, 657, 0, 357, 0, 0, 218, 219, 0,
	0, 220, 221, 653, 655, 694, 0, 360, 225, 0,
	222, 0, 693, 223, 672, 224, 673, 674, 675, 676,
	677, 0, 635, 0, 695, 226, 227, 228, 696, 229,
	230, 231, 0, 233, 232, 0, 658, 697, 234, 698,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 699, 242, 243, 245, 244, 596, 0, 625,
	654, 246, 678, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 700, 252, 701, 648, 253, 254,
	255, 256, 257, 0, 258, 649, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 679, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 702, 281, 282, 602, 283, 0,
	287, 288, 289, 290, 0, 292, 378, 291, 293, 294,
	642, 295, 284, 285, 296, 703, 297, 680, 380, 298,
	0, 305, 299, 300, 286, 301, 304, 681, 302, 303,
	650, 0, 306, 0, 307, 308, 309, 310, 311, 312,
	313, 0, 383, 682, 683, 0, 0, 314, 315, 651,
	652, 623, 316, 317, 318, 319, 0, 0, 320, 321,
	322, 323, 643, 324, 0, 388, 325, 326, 327, 389,
	684, 1483, 0, 328, 0, 0, 0, 0, 329, 330,
	331, 332, 333, 597, 0, 628, 617, 618, 615, 616,
	607, 0, 0, 595, 0, 0, 0, 0, 593, 594,
	1486, 178, 179, 0, 180, 0, 0, 603, 1481, 645,
	610, 0, 0, 606, 181, 182, 183, 335, 660, 337,
	661, 184, 662, 663, 0, 185, 341, 342, 186, 187,
	613, 644, 664, 665, 345, 0, 188, 656, 0, 636,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 690, 196, 197, 198, 0, 637, 638, 640,
	0, 639, 641, 199, 200, 399, 201, 666, 202, 667,
	668, 591, 203, 0, 204, 0, 205, 0, 0, 659,
	207, 0, 208, 0, 0, 0, 601, 209, 211, 210,
	212, 646, 647, 624, 691, 0, 0, 0, 0, 0,
	213, 214, 669, 670, 671, 0, 215, 0, 216, 0,
	0, 692, 0, 217, 657, 0, 357, 0, 0, 218,
	219, 0, 0, 220, 221, 653, 655, 694, 0, 360,
	225, 0, 222, 0, 693, 223, 672, 224, 673, 674,
	675, 676, 677, 0, 635, 0, 695, 226, 227, 228,
	696, 229, 230, 231, 0, 233, 232, 0, 658, 697,
	234, 698, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 699, 242, 243, 245, 244, 596,
	0, 625, 654, 246, 678, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 700, 252, 701, 648,
	253, 254, 255, 256, 257, 0, 258, 649, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 679, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 702, 281, 282, 602,
	283, 0, 287, 288, 289, 290, 135, 292, 378, 291,
	293, 294, 642, 295, 284, 285, 296, 703, 297, 680,
	380, 298, 0, 305, 299, 300, 286, 301, 304, 681,
	302, 303, 650, 0, 306, 137, 307, 308, 309, 310,
	311, 312, 313, 0, 383, 682, 683, 0, 0, 314,
	315, 651, 652, 623, 316, 317, 318, 319, 0, 0,
	320, 321, 322, 323, 643, 324, 0, 388, 325, 326,
	327, 828, 684, 0, 0, 328, 0, 0, 0, 129,
	329, 330, 331, 332, 333, 597, 130, 579, 0, 628,
	617, 618, 615, 616, 607, 595, 0, 0, 0, 0,
	593, 594, 0, 0, 0, 178, 179, 0, 180, 1011,
	0, 0, 0, 645, 610, 606, 0, 0, 181, 182,
	183, 335, 660, 337, 661, 184, 662, 663, 0, 185,
	341, 342, 186, 187, 613, 644, 664, 665, 345, 0,
	188, 656, 0, 636, 0, 189, 190, 191, 0, 192,
	0, 193, 0, 194, 195, 0, 690, 196, 197, 198,
	0, 637, 638, 640, 0, 639, 641, 199, 200, 399,
	201, 666, 202, 667, 668, 0, 203, 0, 204, 0,
	205, 0, 0, 659, 207, 0, 208, 0, 0, 0,
	601, 209, 211, 210, 212, 646, 647, 624, 691, 0,
	0, 0, 0, 0, 213, 214, 669, 670, 671, 0,
	215, 0, 216, 0, 0, 692, 0, 217, 657, 0,
	357, 0, 0, 218, 219, 0, 0, 220, 221, 653,
	655, 694, 0, 360, 225, 0, 222, 0, 693, 223,
	672, 224, 673, 674, 675, 676, 677, 0, 635, 0,
	695, 226, 227, 228, 696, 229, 230, 231, 0, 233,
	232, 0, 658, 697, 234, 698, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 369, 240, 699, 242,
	243, 245, 244, 596, 0, 625, 654, 246, 678, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 372,
	700, 252, 701, 648, 253, 254, 255, 256, 257, 0,
	258, 649, 259, 375, 260, 0, 261, 262, 263, 264,
	265, 679, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	702, 281, 282, 602, 283, 0, 287, 288, 289, 290,
	135, 292, 378, 291, 293, 294, 642, 295, 284, 285,
	296, 703, 297, 680, 380, 298, 0, 305, 299, 300,
	286, 301, 304, 681, 302, 303, 650, 0, 306, 137,
	307, 308, 309, 310, 311, 312, 313, 0, 383, 682,
	683, 0, 0, 314, 315, 651, 652, 623, 316, 317,
	318, 319, 0, 0, 320, 321, 322, 323, 643, 324,
	0, 388, 325, 326, 327, 828, 684, 0, 0, 328,
	0, 0, 0, 129, 329, 330, 331, 332, 333, 597,
	130, 628, 617, 618, 615, 616, 607, 0, 0, 595,
	0, 0, 0, 0, 593, 594, 0, 178, 179, 0,
	180, 0, 0, 1011, 0, 645, 610, 0, 0, 606,
	181, 182, 183, 335, 660, 337, 661, 184, 662, 663,
	0, 185, 341, 342, 186, 187, 613, 644, 664, 665,
	345, 0, 188, 656, 0, 636, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 690, 196,
	197, 198, 0, 637, 638, 640, 0, 639, 641, 199,
	200, 399, 201, 666, 202, 667, 668, 0, 203, 0,
	204, 0, 205, 0, 0, 659, 207, 0, 208, 0,
	0, 0, 601, 209, 211, 210, 212, 646, 647, 624,
	691, 0, 0, 0, 0, 0, 213, 214, 669, 670,
	671, 0, 215, 0, 216, 0, 0, 692, 0, 217,
	657, 0, 357, 0, 0, 218, 219, 0, 0, 220,
	221, 653, 655, 694, 0, 360, 225, 0, 222, 0,
	693, 223, 672, 224, 673, 674, 675, 676, 677, 0,
	635, 0, 695, 226, 227, 228, 696, 229, 230, 231,
	0, 233, 232, 0, 658, 697, 234, 698, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	699, 242, 243, 245, 244, 596, 0, 625, 654, 246,
	678, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 700, 252, 701, 648, 253, 254, 255, 256,
	257, 0, 258, 649, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 679, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 702, 281, 282, 602, 283, 0, 287, 288,
	289, 290, 135, 292, 378, 291, 293, 294, 642, 295,
	284, 285, 296, 703, 297, 680, 380, 298, 0, 305,
	299, 300, 286, 301, 304, 681, 302, 303, 650, 0,
	306, 137, 307, 308, 309, 310, 311, 312, 313, 0,
	383, 682, 683, 0, 0, 314, 315, 651, 652, 623,
	316, 317, 318, 319, 0, 0, 320, 321, 322, 323,
	643, 324, 0, 388, 325, 326, 327, 828, 684, 0,
	0, 328, 0, 0, 0, 129, 329, 330, 331, 332,
	333, 597, 130, 628, 617, 618, 615, 616, 607, 0,
	0, 595, 0, 0, 0, 0, 593, 594, 0, 178,
	179, 0, 180, 0, 0, 1011, 0, 645, 610, 0,
	0, 606, 181, 182, 183, 335, 660, 337, 661, 184,
	662, 663, 1541, 185, 341, 342, 186, 187, 613, 644,
	664, 665, 345, 0, 188, 656, 0, 636, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	690, 196, 197, 198, 0, 637, 638, 640, 0, 639,
	641, 199, 200, 399, 201, 666, 202, 667, 668, 0,
	203, 0, 204, 0, 205, 0, 0, 659, 207, 0,
	208, 0, 0, 0, 601, 209, 211, 210, 212, 646,
	647, 624, 691, 0, 0, 0, 0, 0, 213, 214,
	669, 670, 671, 0, 215, 0, 216, 0, 1546, 692,
	0, 217, 657, 0, 357, 0, 0, 218, 219, 0,
	0, 220, 221, 653, 655, 694, 0, 360, 225, 0,
	222, 0, 693, 223, 672, 224, 673, 674, 675, 676,
	677, 0, 635, 0, 695, 226, 227, 228, 696, 229,
	230, 231, 0, 233, 232, 1542, 658, 697, 234, 698,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 699, 242, 243, 245, 244, 596, 0, 625,
	654, 246, 678, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 700, 252, 701, 648, 253, 254,
	255, 256, 257, 0, 258, 649, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 679, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 702, 281, 282, 602, 283, 0,
	287, 288, 289, 290, 0, 292, 378, 291, 293, 294,
	642, 295, 284, 285, 296, 703, 297, 680, 380, 298,
	0, 305, 299, 300, 286, 301, 304, 681, 302, 303,
	650, 0, 306, 0, 307, 308, 309, 310, 311, 312,
	313, 0, 383, 682, 683, 0, 1543, 314, 315, 651,
	652, 623, 316, 317, 318, 319, 0, 0, 320, 321,
	322, 323, 643, 324, 0, 388, 325, 326, 327, 389,
	684, 0, 0, 328, 0, 0, 0, 0, 329, 330,
	331, 332, 333, 597, 587, 0, 628, 617, 618, 615,
	616, 607, 0, 595, 0, 0, 0, 0, 593, 594,
	0, 0, 178, 179, 0, 180, 0, 603, 0, 0,
	645, 610, 0, 606, 0, 181, 182, 183, 335, 660,
	337, 661, 184, 662, 663, 0, 185, 341, 342, 186,
	187, 613, 644, 664, 665, 345, 0, 188, 656, 0,
	636, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 690, 196, 197, 198, 0, 637, 638,
	640, 0, 639, 641, 199, 200, 399, 201, 666, 202,
	667, 668, 591, 203, 0, 204, 0, 205, 0, 0,
	659, 207, 0, 208, 0, 0, 0, 601, 209, 211,
	210, 212, 646, 647, 624, 691, 0, 0, 0, 0,
	0, 213, 214, 669, 670, 671, 0, 215, 0, 216,
	0, 0, 692, 0, 217, 657, 0, 357, 0, 0,
	218, 219, 0, 0, 220, 221, 653, 655, 694, 0,
	360, 225, 0, 222, 0, 693, 223, 672, 224, 673,
	674, 675, 676, 677, 0, 635, 0, 695, 226, 227,
	228, 696, 229, 230, 231, 0, 233, 232, 0, 658,
	697, 234, 698, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 699, 242, 243, 245, 244,
	596, 0, 625, 654, 246, 678, 247, 248, 0, 249,
	589, 0, 250, 0, 0, 251, 372, 700, 252, 701,
	648, 253, 254, 255, 256, 257, 0, 258, 649, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 679, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 702, 281, 282,
	602, 283, 0, 287, 288, 289, 290, 0, 292, 378,
	291, 293, 294, 642, 295, 284, 285, 296, 703, 297,
	680, 380, 298, 0, 305, 299, 300, 286, 301, 304,
	681, 302, 303, 650, 0, 306, 0, 307, 308, 309,
	310, 311, 312, 313, 0, 383, 682, 683, 0, 0,
	314, 315, 651, 652, 623, 316, 317, 318, 319, 0,
	0, 320, 321, 322, 323, 643, 324, 0, 388, 325,
	326, 327, 389, 684, 0, 0, 328, 0, 0, 0,
	0, 329, 330, 331, 332, 333, 597, 0, 628, 617,
	618, 615, 616, 607, 0, 0, 595, 0, 0, 0,
	0, 593, 594, 0, 178, 179, 0, 180, 0, 0,
	603, 0, 645, 610, 0, 0, 606, 181, 182, 183,
	335, 660, 337, 661, 184, 662, 663, 0, 185, 341,
	342, 186, 187, 613, 644, 664, 665, 345, 0, 188,
	656, 0, 636, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 690, 196, 197, 198, 0,
	637, 638, 640, 0, 639, 641, 199, 200, 399, 201,
	666, 202, 667, 668, 0, 203, 0, 204, 0, 205,
	0, 0, 659, 207, 0, 208, 0, 0, 0, 601,
	209, 211, 210, 212, 646, 647, 624, 691, 0, 0,
	0, 0, 0, 213, 214, 669, 670, 671, 0, 215,
	0, 216, 0, 0, 692, 0, 217, 657, 0, 357,
	0, 0, 218, 219, 0, 0, 220, 221, 653, 655,
	694, 0, 360, 225, 0, 222, 0, 693, 223, 672,
	224, 673, 674, 675, 676, 677, 0, 635, 0, 695,
	226, 227, 228, 696, 229, 230, 231, 0, 233, 232,
	0, 658, 697, 234, 698, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 699, 242, 243,
	245, 244, 596, 2148, 625, 654, 246, 678, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 700,
	252, 701, 648, 253, 254, 255, 256, 257, 0, 258,
	649, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	679, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 702,
	281, 282, 602, 283, 0, 287, 288, 289, 290, 0,
	292, 378, 291, 293, 294, 642, 295, 284, 285, 296,
	703, 297, 680, 380, 298, 0, 305, 299, 300, 286,
	301, 304, 681, 302, 303, 650, 0, 306, 0, 307,
	308, 309, 310, 311, 312, 313, 0, 383, 682, 683,
	0, 0, 314, 315, 651, 652, 623, 316, 317, 318,
	319, 0, 0, 320, 321, 322, 323, 643, 324, 0,
	388, 325, 326, 327, 389, 684, 0, 0, 328, 0,
	0, 0, 0, 329, 330, 331, 332, 333, 597, 0,
	628, 617, 618, 615, 616, 607, 0, 0, 595, 0,
	0, 0, 0, 593, 594, 1072, 178, 179, 0, 180,
	0, 0, 603, 0, 645, 610, 0, 0, 606, 181,
	182, 183, 335, 660, 337, 661, 184, 662, 663, 0,
	185, 341, 342, 186, 187, 613, 644, 664, 665, 345,
	0, 188, 656, 0, 636, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 690, 196, 197,
	198, 0, 637, 638, 640, 0, 639, 641, 199, 200,
	399, 201, 666, 202, 667, 668, 0, 203, 0, 204,
	0, 205, 0, 0, 659, 207, 0, 208, 0, 0,
	0, 601, 209, 211, 210, 212, 646, 647, 624, 691,
	0, 0, 0, 0, 0, 213, 214, 669, 670, 671,
	0, 215, 0, 216, 0, 0, 692, 0, 217, 657,
	0, 357, 0, 0, 218, 219, 0, 0, 220, 221,
	653, 655, 694, 0, 360, 225, 1391, 222, 0, 693,
	223, 672, 224, 673, 674, 675, 676, 677, 0, 635,
	0, 695, 226, 227, 228, 696, 229, 230, 231, 0,
	233, 232, 0, 658, 697, 234, 698, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 699,
	242, 243, 245, 244, 596, 0, 625, 654, 246, 678,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 700, 252, 701, 648, 253, 254, 255, 256, 257,
	0, 258, 649, 259, 375, 260, 1390, 261, 262, 263,
	264, 265, 679, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 702, 281, 282, 602, 283, 0, 287, 288, 289,
	290, 0, 292, 378, 291, 293, 294, 642, 295, 284,
	285, 296, 703, 297, 680, 380, 298, 0, 305, 299,
	300, 286, 301, 304, 681, 302, 303, 650, 0, 306,
	0, 307, 308, 309, 310, 311, 312, 313, 0, 383,
	682, 683, 0, 0, 314, 315, 651, 652, 623, 316,
	317, 318, 319, 0, 0, 320, 321, 322, 323, 643,
	324, 0, 388, 325, 326, 327, 389, 684, 0, 0,
	328, 0, 0, 0, 0, 329, 330, 331, 332, 333,
	597, 0, 628, 617, 618, 615, 616, 607, 0, 0,
	595, 0, 0, 0, 0, 593, 594, 0, 178, 179,
	0, 180, 0, 0, 603, 0, 645, 610, 0, 0,
	606, 181, 182, 183, 335, 660, 337, 661, 184, 662,
	663, 0, 185, 341, 342, 186, 187, 613, 644, 664,
	665, 345, 0, 188, 656, 0, 636, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 690,
	196, 197, 198, 0, 637, 638, 640, 0, 639, 641,
	199, 200, 399, 201, 666, 202, 667, 668, 591, 203,
	0, 204, 0, 205, 0, 0, 659, 207, 0, 208,
	0, 0, 0, 601, 209, 211, 210, 212, 646, 647,
	624, 691, 0, 0, 0, 0, 0, 213, 214, 669,
	670, 671, 0, 215, 0, 216, 0, 0, 692, 0,
	217, 657, 0, 357, 0, 0, 218, 219, 0, 0,
	220, 221, 653, 655, 694, 0, 360, 225, 0, 222,
	0, 693, 223, 672, 224, 673, 674, 675, 676, 677,
	0, 635, 0, 695, 226, 227, 228, 696, 229, 230,
	231, 0, 233, 232, 0, 658, 697, 234, 698, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	240, 699, 242, 243, 245, 244, 596, 0, 625, 654,
	246, 678, 247, 248, 0, 249, 589, 0, 250, 0,
	0, 251, 372, 700, 252, 701, 648, 253, 254, 255,
	256, 257, 0, 258, 649, 259, 375, 260, 0, 261,
	262, 263, 264, 265, 679, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 702, 281, 282, 602, 283, 0, 287,
	288, 289, 290, 0, 292, 378, 291, 293, 294, 642,
	295, 284, 285, 296, 703, 297, 680, 380, 298, 0,
	305, 299, 300, 286, 301, 304, 681, 302, 303, 650,
	0, 306, 0, 307, 308, 309, 310, 311, 312, 313,
	0, 383, 682, 683, 0, 0, 314, 315, 651, 652,
	623, 316, 317, 318, 319, 0, 0, 320, 321, 322,
	323, 643, 324, 0, 388, 325, 326, 327, 389, 684,
	0, 0, 328, 0, 0, 0, 0, 329, 330, 331,
	332, 333, 597, 0, 628, 617, 618, 615, 616, 607,
	0, 0, 595, 0, 0, 0, 0, 593, 594, 0,
	178, 179, 0, 180, 0, 0, 603, 0, 645, 610,
	0, 0, 606, 181, 182, 183, 335, 660, 337, 661,
	184, 662, 663, 0, 185, 341, 342, 186, 187, 613,
	644, 664, 665, 345, 0, 188, 656, 0, 636, 0,
	189, 190, 191, 0, 192, 0, 193, 0, 194, 195,
	0, 690, 196, 197, 198, 0, 637, 638, 640, 0,
	639, 641, 199, 200, 399, 201, 666, 202, 667, 668,
	591, 203, 0, 204, 0, 205, 0, 0, 659, 207,
	0, 208, 0, 0, 0, 601, 209, 211, 210, 212,
	646, 647, 624, 691, 0, 0, 0, 0, 0, 213,
	214, 669, 670, 671, 0, 215, 0, 216, 0, 0,
	692, 0, 217, 657, 0, 357, 0, 0, 218, 219,
	0, 0, 220, 221, 653, 655, 694, 0, 360, 225,
	0, 222, 0, 693, 223, 672, 224, 673, 674, 675,
	676, 677, 0, 635, 0, 695, 226, 227, 228, 696,
	229, 230, 231, 0, 233, 232, 0, 658, 697, 234,
	698, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 369, 240, 699, 242, 243, 245, 244, 596, 0,
	625, 654, 246, 678, 247, 248, 0, 249, 0, 0,
	250, 0, 0, 251, 372, 700, 252, 701, 648, 253,
	254, 255, 256, 257, 0, 258, 649, 259, 375, 260,
	0, 261, 262, 263, 264, 265, 679, 266, 267, 0,
	268, 269, 270, 271, 272, 0, 274, 275, 273, 276,
	277, 278, 279, 0, 280, 702, 281, 282, 602, 283,
	0, 287, 288, 289, 290, 0, 292, 378, 291, 293,
	294, 642, 295, 284, 285, 296, 703, 297, 680, 380,
	298, 0, 305, 299, 300, 286, 301, 304, 681, 302,
	303, 650, 0, 306, 0, 307, 308, 309, 310, 311,
	312, 313, 0, 383, 682, 683, 0, 0, 314, 315,
	651, 652, 623, 316, 317, 318, 319, 0, 0, 320,
	321, 322, 323, 643, 324, 0, 388, 325, 326, 327,
	389, 684, 0, 0, 328, 0, 0, 0, 0, 329,
	330, 331, 332, 333, 597, 0, 628, 617, 618, 615,
	616, 607, 0, 0, 595, 0, 0, 0, 0, 593,
	594, 0, 178, 179, 0, 180, 0, 0, 603, 0,
	645, 610, 0, 0, 606, 181, 182, 183, 335, 660,
	337, 661, 184, 662, 663, 0, 185, 341, 342, 186,
	187, 613, 644, 664, 665, 345, 0, 188, 656, 0,
	636, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 690, 196, 197, 198, 0, 637, 638,
	640, 0, 639, 641, 199, 200, 399, 201, 666, 202,
	667, 668, 0, 203, 0, 204, 0, 205, 0, 0,
	659, 207, 0, 208, 0, 0, 0, 601, 209, 211,
	210, 212, 646, 647, 624, 691, 0, 0, 0, 0,
	0, 213, 214, 669, 670, 671, 0, 215, 0, 216,
	0, 0, 692, 0, 217, 657, 0, 357, 0, 0,
	218, 219, 0, 0, 220, 221, 653, 655, 694, 0,
	360, 225, 0, 222, 0, 693, 223, 672, 224, 673,
	674, 675, 676, 677, 0, 635, 0, 695, 226, 227,
	228, 696, 229, 230, 231, 0, 233, 232, 0, 658,
	697, 234, 698, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 699, 242, 243, 245, 244,
	596, 0, 625, 654, 246, 678, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 372, 700, 252, 701,
	648, 253, 254, 255, 256, 257, 0, 258, 649, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 679, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 702, 281, 282,
	602, 283, 0, 287, 288, 289, 290, 0, 292, 378,
	291, 293, 294, 642, 295, 284, 285, 296, 703, 297,
	680, 380, 298, 0, 305, 299, 300, 286, 301, 304,
	681, 302, 303, 650, 0, 306, 0, 307, 308, 309,
	310, 311, 312, 313, 0, 383, 682, 683, 0, 0,
	314, 315, 651, 652, 623, 316, 317, 318, 319, 0,
	0, 320, 321, 322, 323, 643, 324, 0, 388, 325,
	326, 327, 389, 684, 2006, 0, 328, 0, 0, 0,
	0, 329, 330, 331, 332, 333, 597, 0, 628, 617,
	618, 615, 616, 607, 0, 0, 595, 0, 0, 0,
	0, 593, 594, 0, 178, 179, 0, 180, 0, 0,
	603, 0, 645, 610, 0, 0, 606, 181, 182, 183,
	335, 660, 337, 661, 184, 662, 663, 0, 185, 341,
	342, 186, 187, 613, 644, 664, 665, 345, 0, 188,
	656, 0, 636, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 690, 196, 197, 198, 0,
	637, 638, 640, 0, 639, 641, 199, 200, 399, 201,
	666, 202, 667, 668, 0, 203, 0, 204, 0, 205,
	0, 0, 659, 207, 0, 208, 0, 0, 0, 601,
	209, 211, 210, 212, 646, 647, 624, 691, 0, 0,
	0, 0, 0, 213, 214, 669, 670, 671, 0, 215,
	0, 216, 0, 0, 692, 0, 217, 657, 0, 357,
	0, 0, 218, 219, 0, 0, 220, 221, 653, 655,
	694, 0, 360, 225, 0, 222, 0, 693, 223, 672,
	224, 673, 674, 675, 676, 677, 0, 635, 0, 695,
	226, 227, 228, 696, 229, 230, 231, 0, 233, 232,
	0, 658, 697, 234, 698, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 699, 242, 243,
	245, 244, 596, 0, 625, 654, 246, 678, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 700,
	252, 701, 648, 253, 254, 255, 256, 257, 0, 258,
	649, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	679, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 702,
	281, 282, 602, 283, 0, 287, 288, 289, 290, 0,
	292, 378, 291, 293, 294, 642, 295, 284, 285, 296,
	703, 297, 680, 380, 298, 0, 305, 299, 300, 286,
	301, 304, 681, 302, 303, 650, 0, 306, 0, 307,
	308, 309, 310, 311, 312, 313, 0, 383, 682, 683,
	0, 0, 314, 315, 651, 652, 623, 316, 317, 318,
	319, 0, 0, 320, 321, 322, 323, 643, 324, 0,
	388, 325, 326, 327, 389, 684, 0, 0, 328, 0,
	0, 0, 0, 329, 330, 331, 332, 333, 597, 0,
	628, 617, 618, 615, 616, 607, 0, 0, 595, 0,
	0, 0, 0, 593, 594, 1072, 178, 179, 0, 180,
	0, 0, 603, 0, 645, 610, 0, 0, 606, 181,
	182, 183, 335, 660, 337, 661, 184, 662, 663, 0,
	185, 341, 342, 186, 187, 613, 644, 664, 665, 345,
	0, 188, 656, 0, 636, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 690, 196, 197,
	198, 0, 637, 638, 640, 0, 639, 641, 199, 200,
	399, 201, 666, 202, 667, 668, 0, 203, 0, 204,
	0, 205, 0, 0, 659, 207, 0, 208, 0, 0,
	0, 601, 209, 211, 210, 212, 646, 647, 624, 691,
	0, 0, 0, 0, 0, 213, 214, 669, 670, 671,
	0, 215, 0, 216, 0, 1546, 692, 0, 217, 657,
	0, 357, 0, 0, 218, 219, 0, 0, 220, 221,
	653, 655, 694, 0, 360, 225, 0, 222, 0, 693,
	223, 672, 224, 673, 674, 675, 676, 677, 0, 635,
	0, 695, 226, 227, 228, 696, 229, 230, 231, 0,
	233, 232, 0, 658, 697, 234, 698, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 699,
	242, 243, 245, 244, 596, 0, 625, 654, 246, 678,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 700, 252, 701, 648, 253, 254, 255, 256, 257,
	0, 258, 649, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 679, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 702, 281, 282, 602, 283, 0, 287, 288, 289,
	290, 0, 292, 378, 291, 293, 294, 642, 295, 284,
	285, 296, 703, 297, 680, 380, 298, 0, 305, 299,
	300, 286, 301, 304, 681, 302, 303, 650, 0, 306,
	0, 307, 308, 309, 310, 311, 312, 313, 0, 383,
	682, 683, 0, 0, 314, 315, 651, 652, 623, 316,
	317, 318, 319, 0, 0, 320, 321, 322, 323, 643,
	324, 0, 388, 325, 326, 327, 389, 684, 0, 0,
	328, 0, 0, 0, 0, 329, 330, 331, 332, 333,
	597, 1591, 0, 628, 617, 618, 615, 616, 607, 0,
	595, 0, 0, 0, 0, 593, 594, 0, 0, 178,
	179, 0, 180, 0, 603, 0, 0, 645, 610, 0,
	606, 0, 181, 182, 183, 335, 660, 337, 661, 184,
	662, 663, 0, 185, 341, 342, 186, 187, 613, 644,
	664, 665, 345, 0, 188, 656, 0, 636, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	690, 196, 197, 198, 0, 637, 638, 640, 0, 639,
	641, 199, 200, 399, 201, 666, 202, 667, 668, 0,
	203, 0, 204, 0, 205, 0, 0, 659, 207, 0,
	208, 0, 0, 0, 601, 209, 211, 210, 212, 646,
	647, 624, 691, 0, 0, 0, 0, 0, 213, 214,
	669, 670, 671, 0, 215, 0, 216, 0, 0, 692,
	0, 217, 657, 0, 357, 0, 0, 218, 219, 0,
	0, 220, 221, 653, 655, 694, 0, 360, 225, 0,
	222, 0, 693, 223, 672, 224, 673, 674, 675, 676,
	677, 0, 635, 0, 695, 226, 227, 228, 696, 229,
	230, 231, 0, 233, 232, 0, 658, 697, 234, 698,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 699, 242, 243, 245, 244, 596, 0, 625,
	654, 246, 678, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 700, 252, 701, 648, 253, 254,
	255, 256, 257, 0, 258, 649, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 679, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 702, 281, 282, 602, 283, 0,
	287, 288, 289, 290, 0, 292, 378, 291, 293, 294,
	642, 295, 284, 285, 296, 703, 297, 680, 380, 298,
	0, 305, 299, 300, 286, 301, 304, 681, 302, 303,
	650, 0, 306, 0, 307, 308, 309, 310, 311, 312,
	313, 0, 383, 682, 683, 0, 0, 314, 315, 651,
	652, 623, 316, 317, 318, 319, 0, 0, 320, 321,
	322, 323, 643, 324, 0, 388, 325, 326, 327, 389,
	684, 0, 0, 328, 0, 0, 0, 0, 329, 330,
	331, 332, 333, 597, 1555, 0, 628, 617, 618, 615,
	616, 607, 0, 595, 0, 0, 0, 0, 593, 594,
	0, 0, 178, 179, 0, 180, 0, 603, 0, 0,
	645, 610, 0, 606, 0, 181, 182, 183, 335, 660,
	337, 661, 184, 662, 663, 0, 185, 341, 342, 186,
	187, 613, 644, 664, 665, 345, 0, 188, 656, 0,
	636, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 690, 196, 197, 198, 0, 637, 638,
	640, 0, 639, 641, 199, 200, 399, 201, 666, 202,
	667, 668, 0, 203, 0, 204, 0, 205, 0, 0,
	659, 207, 0, 208, 0, 0, 0, 601, 209, 211,
	210, 212, 646, 647, 624, 691, 0, 0, 0, 0,
	0, 213, 214, 669, 670, 671, 0, 215, 0, 216,
	0, 0, 692, 0, 217, 657, 0, 357, 0, 0,
	218, 219, 0, 0, 220, 221, 653, 655, 694, 0,
	360, 225, 0, 222, 0, 693, 223, 672, 224, 673,
	674, 675, 676, 677, 0, 635, 0, 695, 226, 227,
	228, 696, 229, 230, 231, 0, 233, 232, 0, 658,
	697, 234, 698, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 699, 242, 243, 245, 244,
	596, 0, 625, 654, 246, 678, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 372, 700, 252, 701,
	648, 253, 254, 255, 256, 257, 0, 258, 649, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 679, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 702, 281, 282,
	602, 283, 0, 287, 288, 289, 290, 0, 292, 378,
	291, 293, 294, 642, 295, 284, 285, 296, 703, 297,
	680, 380, 298, 0, 305, 299, 300, 286, 301, 304,
	681, 302, 303, 650, 0, 306, 0, 307, 308, 309,
	310, 311, 312, 313, 0, 383, 682, 683, 0, 0,
	314, 315, 651, 652, 623, 316, 317, 318, 319, 0,
	0, 320, 321, 322, 323, 643, 324, 0, 388, 325,
	326, 327, 389, 684, 0, 0, 328, 0, 0, 0,
	0, 329, 330, 331, 332, 333, 597, 1553, 0, 628,
	617, 618, 615, 616, 607, 0, 595, 0, 0, 0,
	0, 593, 594, 0, 0, 178, 179, 0, 180, 0,
	603, 0, 0, 645, 610, 0, 606, 0, 181, 182,
	183, 335, 660, 337, 661, 184, 662, 663, 0, 185,
	341, 342, 186, 187, 613, 644, 664, 665, 345, 0,
	188, 656, 0, 636, 0, 189, 190, 191, 0, 192,
	0, 193, 0, 194, 195, 0, 690, 196, 197, 198,
	0, 637, 638, 640, 0, 639, 641, 199, 200, 399,
	201, 666, 202, 667, 668, 0, 203, 0, 204, 0,
	205, 0, 0, 659, 207, 0, 208, 0, 0, 0,
	601, 209, 211, 210, 212, 646, 647, 624, 691, 0,
	0, 0, 0, 0, 213, 214, 669, 670, 671, 0,
	215, 0, 216, 0, 0, 692, 0, 217, 657, 0,
	357, 0, 0, 218, 219, 0, 0, 220, 221, 653,
	655, 694, 0, 360, 225, 0, 222, 0, 693, 223,
	672, 224, 673, 674, 675, 676, 677, 0, 635, 0,
	695, 226, 227, 228, 696, 229, 230, 231, 0, 233,
	232, 0, 658, 697, 234, 698, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 369, 240, 699, 242,
	243, 245, 244, 596, 0, 625, 654, 246, 678, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 372,
	700, 252, 701, 648, 253, 254, 255, 256, 257, 0,
	258, 649, 259, 375, 260, 0, 261, 262, 263, 264,
	265, 679, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	702, 281, 282, 602, 283, 0, 287, 288, 289, 290,
	0, 292, 378, 291, 293, 294, 642, 295, 284, 285,
	296, 703, 297, 680, 380, 298, 0, 305, 299, 300,
	286, 301, 304, 681, 302, 303, 650, 0, 306, 0,
	307, 308, 309, 310, 311, 312, 313, 0, 383, 682,
	683, 0, 0, 314, 315, 651, 652, 623, 316, 317,
	318, 319, 0, 0, 320, 321, 322, 323, 643, 324,
	0, 388, 325, 326, 327, 389, 684, 0, 0, 328,
	0, 0, 0, 0, 329, 330, 331, 332, 333, 597,
	1537, 0, 628, 617, 618, 615, 616, 607, 0, 595,
	0, 0, 0, 0, 593, 594, 0, 0, 178, 179,
	0, 180, 0, 603, 0, 0, 645, 610, 0, 606,
	0, 181, 182, 183, 335, 660, 337, 661, 184, 662,
	663, 0, 185, 341, 342, 186, 187, 613, 644, 664,
	665, 345, 0, 188, 656, 0, 636, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 690,
	196, 197, 198, 0, 637, 638, 640, 0, 639, 641,
	199, 200, 399, 201, 666, 202, 667, 668, 0, 203,
	0, 204, 0, 205, 0, 0, 659, 207, 0, 208,
	0, 0, 0, 601, 209, 211, 210, 212, 646, 647,
	624, 691, 0, 0, 0, 0, 0, 213, 214, 669,
	670, 671, 0, 215, 0, 216, 0, 0, 692, 0,
	217, 657, 0, 357, 0, 0, 218, 219, 0, 0,
	220, 221, 653, 655, 694, 0, 360, 225, 0, 222,
	0, 693, 223, 672, 224, 673, 674, 675, 676, 677,
	0, 635, 0, 695, 226, 227, 228, 696, 229, 230,
	231, 0, 233, 232, 0, 658, 697, 234, 698, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	240, 699, 242, 243, 245, 244, 596, 0, 625, 654,
	246, 678, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 372, 700, 252, 701, 648, 253, 254, 255,
	256, 257, 0, 258, 649, 259, 375, 260, 0, 261,
	262, 263, 264, 265, 679, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 702, 281, 282, 602, 283, 0, 287,
	288, 289, 290, 0, 292, 378, 291, 293, 294, 642,
	295, 284, 285, 296, 703, 297, 680, 380, 298, 0,
	305, 299, 300, 286, 301, 304, 681, 302, 303, 650,
	0, 306, 0, 307, 308, 309, 310, 311, 312, 313,
	0, 383, 682, 683, 0, 0, 314, 315, 651, 652,
	623, 316, 317, 318, 319, 0, 0, 320, 321, 322,
	323, 643, 324, 0, 388, 325, 326, 327, 389, 684,
	0, 0, 328, 0, 0, 0, 0, 329, 330, 331,
	332, 333, 597, 1525, 0, 628, 617, 618, 615, 616,
	607, 0, 595, 0, 0, 0, 0, 593, 594, 0,
	0, 178, 179, 0, 180, 0, 603, 0, 0, 645,
	610, 0, 606, 0, 181, 182, 183, 335, 660, 337,
	661, 184, 662, 663, 0, 185, 341, 342, 186, 187,
	613, 644, 664, 665, 345, 0, 188, 656, 0, 636,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 690, 196, 197, 198, 0, 637, 638, 640,
	0, 639, 641, 199, 200, 399, 201, 666, 202, 667,
	668, 0, 203, 0, 204, 0, 205, 0, 0, 659,
	207, 0, 208, 0, 0, 0, 601, 209, 211, 210,
	212, 646, 647, 624, 691, 0, 0, 0, 0, 0,
	213, 214, 669, 670, 671, 0, 215, 0, 216, 0,
	0, 692, 0, 217, 657, 0, 357, 0, 0, 218,
	219, 0, 0, 220, 221, 653, 655, 694, 0, 360,
	225, 0, 222, 0, 693, 223, 672, 224, 673, 674,
	675, 676, 677, 0, 635, 0, 695, 226, 227, 228,
	696, 229, 230, 231, 0, 233, 232, 0, 658, 697,
	234, 698, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 699, 242, 243, 245, 244, 596,
	0, 625, 654, 246, 678, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 700, 252, 701, 648,
	253, 254, 255, 256, 257, 0, 258, 649, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 679, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 702, 281, 282, 602,
	283, 0, 287, 288, 289, 290, 0, 292, 378, 291,
	293, 294, 642, 295, 284, 285, 296, 703, 297, 680,
	380, 298, 0, 305, 299, 300, 286, 301, 304, 681,
	302, 303, 650, 0, 306, 0, 307, 308, 309, 310,
	311, 312, 313, 0, 383, 682, 683, 0, 0, 314,
	315, 651, 652, 623, 316, 317, 318, 319, 0, 0,
	320, 321, 322, 323, 643, 324, 0, 388, 325, 326,
	327, 389, 684, 0, 0, 328, 0, 0, 0, 0,
	329, 330, 331, 332, 333, 597, 1523, 0, 1515, 617,
	618, 615, 616, 607, 0, 595, 0, 0, 0, 0,
	593, 594, 0, 0, 178, 179, 0, 180, 0, 603,
	0, 0, 645, 610, 0, 606, 0, 181, 182, 183,
	335, 660, 337, 661, 184, 662, 663, 0, 185, 341,
	342, 186, 187, 613, 644, 664, 665, 345, 0, 188,
	656, 0, 636, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 690, 196, 197, 198, 0,
	637, 638, 640, 0, 639, 641, 199, 200, 399, 201,
	666, 1518, 667, 668, 0, 203, 0, 204, 0, 205,
	0, 0, 659, 207, 0, 208, 0, 0, 0, 601,
	209, 211, 210, 212, 646, 647, 624, 691, 0, 0,
	0, 0, 0, 213, 214, 669, 670, 671, 0, 215,
	0, 216, 0, 0, 692, 0, 217, 657, 0, 357,
	0, 0, 218, 1519, 0, 0, 220, 221, 653, 655,
	694, 0, 360, 225, 0, 222, 0, 693, 223, 672,
	224, 673, 674, 675, 676, 677, 0, 635, 0, 695,
	226, 227, 228, 696, 229, 230, 231, 0, 233, 232,
	0, 658, 697, 234, 698, 0, 235, 0, 0, 236,
	0, 237, 1520, 1517, 241, 369, 240, 699, 242, 243,
	245, 244, 596, 0, 625, 654, 246, 678, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 700,
	252, 701, 648, 253, 254, 255, 256, 257, 0, 258,
	649, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	679, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 702,
	281, 282, 602, 283, 0, 287, 288, 289, 1521, 0,
	292, 378, 291, 293, 294, 642, 295, 284, 285, 296,
	703, 297, 680, 380, 298, 0, 305, 299, 300, 286,
	301, 304, 681, 302, 303, 650, 0, 306, 0, 307,
	308, 309, 310, 311, 312, 313, 0, 383, 682, 683,
	0, 0, 314, 315, 651, 652, 623, 316, 317, 318,
	319, 0, 0, 320, 321, 322, 323, 643, 324, 0,
	388, 325, 326, 327, 389, 684, 0, 0, 328, 0,
	0, 0, 0, 329, 330, 331, 1516, 333, 597, 1512,
	0, 1515, 617, 618, 615, 616, 607, 0, 595, 0,
	0, 0, 0, 593, 594, 0, 0, 178, 179, 0,
	180, 0, 603, 0, 0, 645, 610, 0, 606, 0,
	181, 182, 183, 335, 660, 337, 661, 184, 662, 663,
	0, 185, 341, 342, 186, 187, 613, 644, 664, 665,
	345, 0, 188, 656, 0, 636, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 690, 196,
	197, 198, 0, 637, 638, 640, 0, 639, 641, 199,
	200, 399, 201, 666, 1518, 667, 668, 0, 203, 0,
	204, 0, 205, 0, 0, 659, 207, 0, 208, 0,
	0, 0, 601, 209, 211, 210, 212, 646, 647, 624,
	691, 0, 0, 0, 0, 0, 213, 214, 669, 670,
	671, 0, 215, 0, 216, 0, 0, 692, 0, 217,
	657, 0, 357, 0, 0, 218, 1519, 0, 0, 220,
	221, 653, 655, 694, 0, 360, 225, 0, 222, 0,
	693, 223, 672, 224, 673, 674, 675, 676, 677, 0,
	635, 0, 695, 226, 227, 228, 696, 229, 230, 231,
	0, 233, 232, 0, 658, 697, 234, 698, 0, 235,
	0, 0, 236, 0, 237, 1520, 1517, 241, 369, 240,
	699, 242, 243, 245, 244, 596, 0, 625, 654, 246,
	678, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 700, 252, 701, 648, 253, 254, 255, 256,
	257, 0, 258, 649, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 679, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 702, 281, 282, 602, 283, 0, 287, 288,
	289, 1521, 0, 292, 378, 291, 293, 294, 642, 295,
	284, 285, 296, 703, 297, 680, 380, 298, 0, 305,
	299, 300, 286, 301, 304, 681, 302, 303, 650, 0,
	306, 0, 307, 308, 309, 310, 311, 312, 313, 0,
	383, 682, 683, 0, 0, 314, 315, 651, 652, 623,
	316, 317, 318, 319, 0, 0, 320, 321, 322, 323,
	643, 324, 0, 388, 325, 326, 327, 389, 684, 0,
	0, 328, 0, 0, 0, 0, 329, 330, 331, 1516,
	333, 597, 0, 628, 617, 618, 615, 616, 607, 0,
	0, 595, 0, 0, 0, 0, 593, 594, 0, 178,
	179, 0, 180, 0, 0, 603, 0, 645, 610, 0,
	0, 606, 181, 182, 183, 335, 660, 337, 661, 184,
	662, 663, 0, 185, 341, 342, 186, 187, 613, 644,
	664, 665, 345, 0, 188, 656, 0, 636, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	690, 196, 197, 198, 0, 637, 638, 640, 0, 639,
	641, 199, 200, 399, 201, 666, 202, 667, 668, 0,
	203, 0, 204, 0, 205, 0, 0, 659, 207, 0,
	208, 0, 0, 0, 601, 209, 211, 210, 212, 646,
	647, 624, 691, 0, 0, 0, 0, 0, 213, 214,
	669, 670, 671, 0, 215, 0, 216, 0, 0, 692,
	0, 217, 657, 0, 357, 0, 0, 218, 219, 0,
	0, 220, 221, 653, 655, 694, 0, 360, 225, 0,
	222, 0, 693, 223, 672, 224, 673, 674, 675, 676,
	677, 0, 635, 0, 695, 226, 227, 228, 696, 229,
	230, 231, 0, 233, 232, 0, 658, 697, 234, 698,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 699, 242, 243, 245, 244, 596, 0, 625,
	654, 246, 678, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 700, 252, 701, 648, 253, 254,
	255, 256, 257, 0, 258, 649, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 679, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 702, 281, 282, 602, 283, 0,
	287, 288, 289, 290, 0, 292, 378, 291, 293, 294,
	642, 295, 284, 285, 296, 703, 297, 680, 380, 298,
	0, 305, 299, 300, 286, 301, 304, 681, 302, 303,
	650, 0, 306, 0, 307, 308, 309, 310, 311, 312,
	313, 0, 383, 682, 683, 0, 0, 314, 315, 651,
	652, 623, 316, 317, 318, 319, 0, 0, 320, 321,
	322, 323, 643, 324, 0, 388, 325, 326, 327, 389,
	684, 0, 0, 328, 0, 0, 0, 0, 329, 330,
	331, 332, 333, 597, 0, 628, 617, 618, 615, 616,
	607, 0, 0, 595, 0, 0, 0, 0, 593, 594,
	0, 178, 179, 1378, 180, 1015, 0, 603, 0, 645,
	610, 0, 0, 606, 181, 182, 183, 335, 660, 337,
	661, 184, 662, 663, 0, 185, 341, 342, 186, 187,
	613, 644, 664, 665, 345, 0, 188, 656, 0, 636,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 690, 196, 197, 198, 0, 637, 638, 640,
	0, 639, 641, 199, 200, 399, 201, 666, 202, 667,
	668, 0, 203, 0, 204, 0, 205, 0, 0, 659,
	207, 0, 208, 0, 0, 0, 601, 209, 211, 210,
	212, 646, 647, 624, 691, 0, 0, 0, 0, 0,
	213, 214, 669, 670, 671, 0, 215, 0, 216, 0,
	0, 692, 0, 217, 657, 0, 357, 0, 0, 218,
	219, 0, 0, 220, 221, 653, 655, 694, 0, 360,
	225, 0, 222, 0, 693, 223, 672, 224, 673, 674,
	675, 676, 677, 0, 635, 0, 695, 226, 227, 228,
	696, 229, 230, 231, 0, 233, 232, 0, 658, 697,
	234, 698, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 699, 242, 243, 245, 244, 596,
	0, 625, 654, 246, 678, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 700, 252, 701, 648,
	253, 254, 255, 256, 257, 0, 258, 649, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 679, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 702, 281, 282, 602,
	283, 0, 287, 288, 289, 290, 0, 292, 378, 291,
	293, 294, 642, 295, 284, 285, 296, 703, 297, 680,
	380, 298, 0, 305, 299, 300, 286, 301, 304, 681,
	302, 303, 650, 0, 306, 0, 307, 308, 309, 310,
	311, 312, 313, 0, 383, 682, 683, 0, 0, 314,
	315, 651, 652, 623, 316, 317, 318, 319, 0, 0,
	320, 321, 322, 323, 643, 324, 0, 388, 325, 326,
	327, 389, 684, 0, 0, 328, 0, 0, 0, 0,
	329, 330, 331, 332, 333, 597, 770, 0, 628, 617,
	618, 615, 616, 607, 0, 595, 0, 0, 0, 0,
	593, 594, 0, 0, 178, 179, 0, 180, 0, 603,
	0, 0, 645, 610, 0, 606, 0, 181, 182, 183,
	335, 660, 337, 661, 184, 662, 663, 0, 185, 341,
	342, 186, 187, 613, 644, 664, 665, 345, 0, 188,
	656, 0, 636, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 690, 196, 197, 198, 0,
	637, 638, 640, 0, 639, 641, 199, 200, 399, 201,
	666, 202, 667, 668, 0, 203, 0, 204, 0, 205,
	0, 0, 659, 207, 0, 208, 0, 0, 0, 601,
	209, 211, 210, 212, 646, 647, 624, 691, 0, 0,
	0, 0, 0, 213, 214, 669, 670, 671, 0, 215,
	0, 216, 0, 0, 692, 0, 217, 657, 0, 357,
	0, 0, 218, 219, 0, 0, 220, 221, 653, 655,
	694, 0, 360, 225, 0, 222, 0, 693, 223, 672,
	224, 673, 674, 675, 676, 677, 0, 635, 0, 695,
	226, 227, 228, 696, 229, 230, 231, 0, 233, 232,
	0, 658, 697, 234, 698, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 699, 242, 243,
	245, 244, 596, 0, 625, 654, 246, 678, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 700,
	252, 701, 648, 253, 254, 255, 256, 257, 0, 258,
	649, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	679, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 702,
	281, 282, 602, 283, 0, 287, 288, 289, 290, 0,
	292, 378, 291, 293, 294, 642, 295, 284, 285, 296,
	703, 297, 680, 380, 298, 0, 305, 299, 300, 286,
	301, 304, 681, 302, 303, 650, 0, 306, 0, 307,
	308, 309, 310, 311, 312, 313, 0, 383, 682, 683,
	0, 0, 314, 315, 651, 652, 623, 316, 317, 318,
	319, 0, 0, 320, 321, 322, 323, 643, 324, 0,
	388, 325, 326, 327, 389, 684, 0, 0, 328, 0,
	0, 0, 0, 329, 330, 331, 332, 333, 597, 768,
	0, 628, 617, 618, 615, 616, 607, 0, 595, 0,
	0, 0, 0, 593, 594, 0, 0, 178, 179, 0,
	180, 0, 603, 0, 0, 645, 610, 0, 606, 0,
	181, 182, 183, 335, 660, 337, 661, 184, 662, 663,
	0, 185, 341, 342, 186, 187, 613, 644, 664, 665,
	345, 0, 188, 656, 0, 636, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 690, 196,
	197, 198, 0, 637, 638, 640, 0, 639, 641, 199,
	200, 399, 201, 666, 202, 667, 668, 0, 203, 0,
	204, 0, 205, 0, 0, 659, 207, 0, 208, 0,
	0, 0, 601, 209, 211, 210, 212, 646, 647, 624,
	691, 0, 0, 0, 0, 0, 213, 214, 669, 670,
	671, 0, 215, 0, 216, 0, 0, 692, 0, 217,
	657, 0, 357, 0, 0, 218, 219, 0, 0, 220,
	221, 653, 655, 694, 0, 360, 225, 0, 222, 0,
	693, 223, 672, 224, 673, 674, 675, 676, 677, 0,
	635, 0, 695, 226, 227, 228, 696, 229, 230, 231,
	0, 233, 232, 0, 658, 697, 234, 698, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	699, 242, 243, 245, 244, 596, 0, 625, 654, 246,
	678, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 700, 252, 701, 648, 253, 254, 255, 256,
	257, 0, 258, 649, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 679, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 702, 281, 282, 602, 283, 0, 287, 288,
	289, 290, 0, 292, 378, 291, 293, 294, 642, 295,
	284, 285, 296, 703, 297, 680, 380, 298, 0, 305,
	299, 300, 286, 301, 304, 681, 302, 303, 650, 0,
	306, 0, 307, 308, 309, 310, 311, 312, 313, 0,
	383, 682, 683, 0, 0, 314, 315, 651, 652, 623,
	316, 317, 318, 319, 0, 0, 320, 321, 322, 323,
	643, 324, 0, 388, 325, 326, 327, 389, 684, 0,
	0, 328, 0, 0, 0, 0, 329, 330, 331, 332,
	333, 597, 0, 628, 617, 618, 615, 616, 607, 0,
	0, 595, 0, 0, 0, 0, 593, 594, 0, 178,
	179, 0, 180, 0, 0, 603, 0, 645, 610, 0,
	0, 606, 181, 182, 183, 335, 660, 337, 661, 184,
	662, 663, 0, 185, 341, 342, 186, 187, 613, 644,
	664, 665, 345, 0, 188, 656, 0, 636, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	690, 196, 197, 2458, 0, 637, 638, 640, 0, 639,
	641, 199, 200, 399, 201, 666, 202, 667, 668, 0,
	203, 0, 204, 0, 205, 0, 0, 659, 207, 0,
	208, 0, 0, 0, 601, 209, 211, 210, 212, 646,
	647, 624, 691, 0, 0, 0, 0, 0, 213, 214,
	669, 670, 671, 0, 215, 0, 216, 0, 0, 692,
	0, 217, 657, 0, 357, 0, 0, 218, 219, 0,
	0, 220, 221, 653, 655, 694, 0, 360, 225, 0,
	222, 0, 693, 223, 672, 224, 673, 674, 675, 676,
	677, 0, 635, 0, 695, 226, 227, 228, 696, 229,
	230, 231, 0, 233, 232, 0, 658, 697, 234, 698,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 699, 242, 243, 245, 244, 596, 0, 625,
	654, 246, 678, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 700, 252, 701, 648, 253, 254,
	255, 256, 257, 0, 258, 649, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 679, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 702, 281, 282, 602, 283, 0,
	287, 288, 289, 290, 0, 292, 378, 291, 293, 294,
	642, 295, 284, 285, 296, 703, 297, 680, 380, 298,
	0, 305, 299, 300, 286, 301, 304, 681, 302, 303,
	650, 0, 306, 0, 307, 308, 309, 310, 311, 312,
	313, 0, 383, 682, 683, 0, 0, 314, 315, 651,
	652, 623, 316, 317, 2457, 319, 0, 0, 320, 321,
	322, 323, 643, 324, 0, 388, 325, 326, 327, 389,
	684, 0, 0, 328, 0, 0, 0, 0, 329, 330,
	331, 332, 333, 597, 0, 628, 617, 618, 615, 616,
	607, 0, 0, 595, 0, 0, 0, 0, 593, 594,
	0, 178, 179, 0, 180, 0, 0, 603, 0, 645,
	610, 0, 0, 606, 181, 182, 183, 335, 660, 337,
	661, 184, 662, 663, 0, 185, 341, 342, 186, 187,
	613, 644, 664, 665, 345, 0, 188, 656, 0, 636,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 690, 196, 197, 198, 0, 637, 638, 640,
	0, 639, 641, 199, 200, 399, 201, 666, 202, 667,
	668, 0, 203, 0, 204, 0, 205, 0, 0, 659,
	207, 0, 208, 0, 0, 0, 601, 209, 211, 210,
	212, 646, 647, 624, 691, 0, 0, 0, 0, 0,
	213, 214, 669, 670, 671, 0, 215, 0, 216, 0,
	0, 692, 0, 217, 657, 0, 357, 0, 0, 218,
	219, 0, 0, 220, 221, 653, 655, 694, 0, 360,
	225, 0, 222, 0, 693, 223, 672, 224, 673, 674,
	675, 676, 677, 0, 635, 0, 695, 226, 227, 228,
	696, 229, 230, 231, 0, 233, 232, 0, 658, 697,
	234, 698, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 699, 242, 243, 245, 244, 596,
	0, 625, 654, 246, 678, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 700, 252, 701, 648,
	253, 254, 255, 256, 257, 0, 258, 649, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 679, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 702, 281, 282, 602,
	283, 0, 287, 288, 289, 290, 0, 292, 378, 291,
	293, 294, 642, 295, 284, 285, 296, 703, 297, 680,
	380, 298, 0, 305, 299, 300, 286, 301, 304, 681,
	302, 303, 650, 0, 306, 0, 307, 308, 309, 310,
	311, 312, 313, 0, 383, 682, 683, 0, 0, 314,
	315, 651, 652, 623, 316, 317, 318, 319, 0, 0,
	320, 321, 322, 323, 643, 324, 0, 388, 325, 326,
	327, 389, 684, 0, 0, 328, 0, 0, 0, 0,
	329, 330, 331, 332, 333, 597, 0, 628, 617, 618,
	615, 616, 607, 0, 0, 595, 0, 0, 0, 0,
	593, 594, 0, 178, 179, 0, 180, 0, 0, 603,
	0, 645, 610, 0, 0, 606, 181, 182, 183, 2456,
	660, 337, 661, 184, 662, 663, 0, 185, 341, 342,
	186, 187, 613, 644, 664, 665, 345, 0, 188, 656,
	0, 636, 0, 189, 190, 191, 0, 192, 0, 193,
	0, 194, 195, 0, 690, 196, 197, 2458, 0, 637,
	638, 640, 0, 639, 641, 199, 200, 399, 201, 666,
	202, 667, 668, 0, 203, 0, 204, 0, 205, 0,
	0, 659, 207, 0, 208, 0, 0, 0, 601, 209,
	211, 210, 212, 646, 647, 624, 691, 0, 0, 0,
	0, 0, 213, 214, 669, 670, 671, 0, 215, 0,
	216, 0, 0, 692, 0, 217, 657, 0, 357, 0,
	0, 218, 219, 0, 0, 220, 221, 653, 655, 694,
	0, 360, 225, 0, 222, 0, 693, 223, 672, 224,
	673, 674, 675, 676, 677, 0, 635, 0, 695, 226,
	227, 228, 696, 229, 230, 231, 0, 233, 232, 0,
	658, 697, 234, 698, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 369, 240, 699, 242, 243, 245,
	244, 596, 0, 625, 654, 246, 678, 247, 248, 0,
	249, 0, 0, 250, 0, 0, 251, 372, 700, 252,
	701, 648, 253, 254, 255, 256, 257, 0, 258, 649,
	259, 375, 260, 0, 261, 262, 263, 264, 265, 679,
	266, 267, 0, 268, 269, 270, 271, 272, 0, 274,
	275, 273, 276, 277, 278, 279, 0, 280, 702, 281,
	282, 602, 283, 0, 287, 288, 289, 290, 0, 292,
	378, 291, 293, 294, 642, 295, 284, 285, 296, 703,
	297, 680, 380, 298, 0, 305, 299, 300, 286, 301,
	304, 681, 302, 303, 650, 0, 306, 0, 307, 308,
	309, 310, 311, 312, 313, 0, 383, 682, 683, 0,
	0, 314, 315, 651, 652, 623, 316, 317, 2457, 319,
	0, 0, 320, 321, 322, 323, 643, 324, 0, 388,
	325, 326, 327, 389, 684, 0, 0, 328, 0, 0,
	0, 0, 329, 330, 331, 332, 333, 597, 0, 628,
	617, 618, 615, 616, 607, 0, 0, 595, 0, 0,
	0, 0, 593, 594, 0, 178, 179, 0, 180, 0,
	0, 603, 0, 645, 610, 0, 0, 606, 181, 182,
	183, 335, 660, 337, 661, 184, 662, 663, 0, 185,
	341, 342, 186, 187, 613, 644, 664, 665, 345, 0,
	188, 656, 0, 636, 0, 189, 190, 191, 0, 192,
	0, 193, 0, 194, 195, 0, 690, 196, 197, 198,
	0, 637, 638, 640, 0, 639, 641, 199, 200, 399,
	201, 666, 202, 667, 668, 0, 203, 0, 204, 0,
	205, 0, 0, 659, 207, 0, 208, 0, 0, 0,
	601, 209, 211, 210, 212, 646, 647, 624, 691, 0,
	0, 0, 0, 0, 213, 214, 669, 670, 671, 0,
	215, 0, 216, 0, 0, 692, 0, 217, 657, 0,
	357, 0, 0, 218, 219, 0, 0, 220, 221, 653,
	655, 694, 0, 360, 225, 0, 222, 0, 693, 223,
	672, 224, 673, 674, 675, 676, 677, 0, 635, 0,
	695, 226, 227, 228, 696, 229, 230, 231, 0, 233,
	232, 0, 658, 697, 234, 698, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 369, 240, 699, 242,
	243, 245, 244, 0, 0, 625, 654, 246, 678, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 372,
	700, 252, 701, 648, 253, 254, 255, 256, 257, 0,
	258, 649, 259, 375, 260, 0, 261, 262, 263, 264,
	265, 679, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	702, 281, 282, 1535, 283, 0, 287, 288, 289, 290,
	0, 292, 378, 291, 293, 294, 642, 295, 284, 285,
	296, 703, 297, 680, 380, 298, 0, 305, 299, 300,
	286, 301, 304, 681, 302, 303, 650, 0, 306, 0,
	307, 308, 309, 310, 311, 312, 313, 0, 383, 682,
	683, 0, 0, 314, 315, 651, 652, 623, 316, 317,
	318, 319, 0, 0, 320, 321, 322, 323, 643, 324,
	0, 388, 325, 326, 327, 389, 684, 0, 0, 328,
	0, 0, 0, 0, 329, 330, 331, 332, 333, 0,
	0, 628, 617, 618, 615, 616, 607, 0, 0, 1533,
	0, 0, 0, 0, 1531, 1532, 0, 178, 179, 0,
	180, 0, 0, 1534, 0, 645, 610, 0, 0, 606,
	181, 182, 183, 335, 660, 337, 661, 184, 662, 663,
	0, 185, 341, 342, 186, 187, 0, 644, 664, 665,
	345, 0, 188, 656, 0, 636, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 690, 196,
	197, 198, 0, 637, 638, 640, 0, 639, 641, 199,
	200, 399, 201, 666, 202, 667, 668, 0, 203, 0,
	204, 0, 205, 0, 0, 659, 207, 0, 208, 0,
	0, 0, 350, 209, 211, 210, 212, 646, 647, 624,
	691, 0, 0, 0, 0, 0, 213, 214, 669, 670,
	671, 0, 215, 0, 216, 0, 0, 692, 0, 217,
	657, 0, 357, 0, 0, 218, 219, 0, 0, 220,
	221, 653, 655, 694, 0, 360, 225, 0, 222, 0,
	693, 223, 672, 224, 673, 674, 675, 676, 677, 0,
	635, 0, 695, 226, 227, 228, 696, 229, 230, 231,
	0, 233, 232, 0, 658, 697, 234, 698, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	699, 242, 243, 245, 244, 0, 0, 625, 654, 246,
	678, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 700, 252, 701, 648, 253, 254, 255, 256,
	257, 0, 258, 649, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 679, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 702, 281, 282, 1535, 283, 0, 287, 288,
	289, 290, 0, 292, 378, 291, 293, 294, 642, 295,
	284, 285, 296, 703, 297, 680, 380, 298, 0, 305,
	299, 300, 286, 301, 304, 681, 302, 303, 650, 0,
	306, 0, 307, 308, 309, 310, 311, 312, 313, 0,
	383, 682, 683, 0, 0, 314, 315, 651, 652, 623,
	316, 317, 318, 319, 0, 0, 320, 321, 322, 323,
	643, 324, 0, 388, 325, 326, 327, 389, 684, 0,
	0, 328, 0, 0, 0, 0, 329, 330, 331, 332,
	333, 0, 0, 628, 617, 618, 615, 616, 607, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 1534, 0, 645, 610, 0,
	0, 606, 181, 182, 183, 0, 660, 337, 661, 184,
	662, 663, 0, 185, 341, 342, 186, 187, 613, 644,
	664, 665, 345, 0, 188, 656, 0, 636, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	690, 196, 197, 2458, 0, 637, 638, 640, 0, 639,
	641, 199, 200, 399, 201, 666, 202, 667, 668, 0,
	203, 0, 204, 0, 205, 0, 0, 659, 207, 0,
	208, 0, 0, 0, 601, 209, 211, 210, 212, 646,
	647, 624, 691, 0, 0, 0, 0, 0, 213, 214,
	669, 670, 671, 0, 215, 0, 216, 0, 0, 692,
	0, 217, 657, 0, 357, 0, 0, 218, 219, 0,
	0, 220, 221, 653, 655, 0, 0, 360, 225, 0,
	222, 0, 693, 223, 672, 224, 673, 674, 675, 676,
	677, 0, 635, 0, 0, 226, 227, 228, 696, 229,
	230, 231, 0, 233, 232, 0, 658, 697, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 699, 242, 243, 245, 244, 596, 0, 625,
	654, 246, 678, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 700, 252, 701, 648, 253, 254,
	255, 256, 257, 0, 258, 649, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 679, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 702, 281, 282, 602, 283, 0,
	287, 288, 289, 290, 0, 292, 378, 291, 293, 294,
	642, 295, 284, 285, 296, 0, 297, 680, 380, 298,
	0, 305, 299, 300, 286, 301, 304, 681, 302, 303,
	650, 0, 306, 0, 307, 308, 309, 310, 311, 312,
	313, 0, 383, 682, 683, 0, 0, 314, 315, 651,
	652, 623, 316, 317, 2457, 319, 0, 0, 320, 321,
	322, 323, 643, 324, 0, 388, 325, 326, 327, 389,
	684, 0, 0, 328, 0, 0, 0, 0, 329, 330,
	331, 332, 333, 0, 0, 628, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 593, 594,
	0, 178, 179, 0, 180, 0, 0, 603, 0, 645,
	0, 0, 0, 606, 181, 182, 183, 335, 336, 337,
	338, 184, 339, 340, 0, 185, 341, 342, 186, 187,
	0, 644, 343, 344, 345, 0, 188, 656, 0, 636,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 690, 196, 197, 198, 0, 637, 638, 640,
	0, 639, 641, 199, 200, 399, 201, 347, 202, 348,
	349, 0, 203, 0, 204, 0, 205, 0, 0, 206,
	207, 0, 208, 0, 0, 0, 350, 209, 211, 210,
	212, 646, 647, 0, 691, 0, 0, 0, 0, 0,
	213, 214, 353, 354, 355, 0, 215, 0, 216, 0,
	0, 692, 0, 217, 657, 0, 357, 0, 0, 218,
	219, 0, 0, 220, 221, 653, 655, 694, 0, 360,
	225, 0, 222, 0, 693, 223, 361, 224, 362, 363,
	364, 365, 366, 0, 367, 0, 695, 226, 227, 228,
	696, 229, 230, 231, 0, 233, 232, 0, 658, 697,
	234, 698, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 699, 242, 243, 245, 244, 0,
	0, 0, 654, 246, 371, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 700, 252, 701, 648,
	253, 254, 255, 256, 257, 0, 258, 649, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 376, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 702, 281, 282, 377,
	283, 0, 287, 288, 289, 290, 0, 292, 378, 291,
	293, 294, 642, 295, 284, 285, 296, 703, 297, 379,
	380, 298, 0, 305, 299, 300, 286, 301, 304, 381,
	302, 303, 650, 0, 306, 0, 307, 308, 309, 310,
	311, 312, 313, 0, 383, 384, 385, 0, 0, 314,
	315, 651, 652, 0, 316, 317, 318, 319, 0, 0,
	320, 321, 322, 323, 643, 324, 0, 388, 325, 326,
	327, 389, 390, 0, 0, 328, 0, 0, 0, 0,
	329, 330, 331, 332, 333, 821, 0, 824, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 0, 180, 0, 0, 2105,
	0, 334, 0, 0, 0, 0, 181, 182, 183, 335,
	336, 337, 338, 184, 339, 340, 0, 185, 341, 342,
	186, 187, 0, 0, 343, 344, 345, 0, 188, 346,
	0, 829, 0, 189, 190, 191, 0, 192, 0, 193,
	0, 194, 195, 0, 690, 196, 197, 198, 0, 0,
	0, 0, 0, 0, 0, 199, 200, 399, 201, 347,
	202, 348, 349, 0, 203, 0, 204, 0, 205, 0,
	0, 206, 207, 0, 208, 0, 0, 0, 350, 209,
	211, 210, 212, 351, 352, 0, 691, 0, 0, 0,
	0, 0, 213, 214, 353, 354, 355, 0, 215, 0,
	216, 0, 0, 692, 0, 217, 356, 0, 357, 0,
	0, 218, 219, 0, 0, 220, 221, 358, 359, 694,
	0, 360, 225, 0, 222, 0, 693, 223, 361, 224,
	362, 363, 364, 365, 366, 0, 367, 0, 695, 226,
	227, 228, 696, 229, 230, 231, 0, 233, 232, 0,
	368, 697, 234, 698, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 369, 240, 699, 242, 243, 245,
	244, 0, 0, 0, 370, 246, 371, 247, 248, 0,
	249, 0, 0, 250, 0, 0, 251, 372, 700, 252,
	701, 373, 253, 254, 255, 256, 257, 0, 258, 374,
	259, 375, 260, 0, 261, 262, 263, 264, 265, 376,
	266, 267, 0, 268, 269, 270, 271, 272, 0, 274,
	275, 273, 276, 277, 278, 279, 0, 280, 702, 281,
	282, 377, 283, 0, 287, 288, 289, 290, 135, 292,
	378, 291, 293, 294, 0, 295, 284, 285, 296, 703,
	297, 379, 380, 298, 0, 305, 299, 300, 286, 301,
	304, 381, 302, 303, 382, 0, 306, 137, 307, 308,
	309, 310, 311, 312, 313, 0, 383, 384, 385, 0,
	0, 314, 315, 386, 387, 0, 316, 317, 318, 319,
	0, 0, 320, 321, 322, 323, 0, 324, 0, 388,
	325, 326, 327, 828, 390, 0, 0, 328, 0, 0,
	0, 129, 329, 330, 331, 332, 333, 0, 130, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 0, 180, 0,
	0, 121, 0, 334, 0, 0, 0, 0, 181, 182,
	183, 335, 336, 337, 338, 184, 339, 340, 0, 185,
	341, 342, 186, 187, 0, 0, 343, 344, 345, 0,
	188, 346, 0, 0, 0, 189, 190, 191, 0, 192,
	0, 193, 0, 194, 195, 0, 0, 196, 197, 198,
	0, 0, 0, 0, 0, 0, 0, 199, 200, 399,
	201, 347, 202, 348, 349, 0, 203, 0, 204, 0,
	205, 0, 0, 206, 207, 0, 208, 0, 0, 0,
	350, 209, 211, 210, 212, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 353, 354, 355, 0,
	215, 0, 216, 0, 0, 0, 0, 217, 356, 0,
	357, 0, 0, 218, 219, 0, 0, 220, 221, 358,
	359, 0, 0, 360, 225, 0, 222, 0, 0, 223,
	361, 224, 362, 363, 364, 365, 366, 0, 367, 0,
	0, 226, 227, 228, 0, 229, 230, 231, 0, 233,
	232, 0, 368, 0, 234, 0, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 369, 240, 0, 242,
	243, 245, 244, 0, 0, 0, 370, 246, 371, 247,
	248, 0, 249, 0, 743, 250, 0, 0, 251, 372,
	0, 252, 0, 373, 253, 254, 255, 256, 257, 0,
	258, 374, 259, 375, 260, 0, 261, 262, 263, 264,
	265, 376, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	0, 281, 282, 377, 283, 0, 287, 288, 289, 290,
	135, 292, 378, 291, 293, 294, 0, 295, 284, 285,
	296, 0, 297, 379, 380, 298, 0, 305, 299, 300,
	286, 301, 304, 381, 302, 303, 382, 0, 306, 137,
	307, 308, 309, 310, 311, 312, 313, 0, 383, 384,
	385, 0, 0, 314, 315, 386, 387, 0, 316, 317,
	318, 319, 0, 0, 320, 321, 322, 323, 0, 324,
	0, 388, 325, 326, 327, 828, 390, 0, 0, 328,
	0, 0, 0, 129, 329, 330, 331, 332, 333, 579,
	130, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 0,
	180, 737, 0, 1094, 0, 334, 0, 0, 0, 0,
	181, 182, 183, 335, 336, 337, 338, 184, 339, 340,
	0, 185, 341, 342, 186, 187, 0, 0, 343, 344,
	345, 0, 188, 346, 0, 0, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 0, 196,
	197, 198, 0, 0, 0, 0, 0, 0, 0, 199,
	200, 399, 201, 347, 202, 348, 349, 0, 203, 0,
	204, 0, 205, 0, 0, 206, 207, 0, 208, 0,
	0, 0, 350, 209, 211, 210, 212, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 353, 354,
	355, 0, 215, 0, 216, 0, 0, 0, 0, 217,
	356, 0, 357, 0, 0, 218, 219, 0, 0, 220,
	221, 358, 359, 0, 0, 360, 225, 0, 222, 0,
	0, 223, 361, 224, 362, 363, 364, 365, 366, 0,
	367, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 368, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	0, 242, 243, 245, 244, 0, 0, 0, 370, 246,
	371, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 0, 252, 0, 373, 253, 254, 255, 256,
	257, 0, 258, 374, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 376, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 0, 281, 282, 377, 283, 0, 287, 288,
	289, 290, 135, 292, 378, 291, 293, 294, 0, 295,
	284, 285, 296, 0, 297, 379, 380, 298, 0, 305,
	299, 300, 286, 301, 304, 381, 302, 303, 382, 0,
	306, 137, 307, 308, 309, 310, 311, 312, 313, 0,
	383, 384, 385, 0, 0, 314, 315, 386, 387, 0,
	316, 317, 318, 319, 0, 0, 320, 321, 322, 323,
	0, 324, 0, 388, 325, 326, 327, 828, 390, 0,
	0, 328, 0, 0, 0, 129, 329, 330, 331, 332,
	333, 1855, 130, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 121, 0, 334, 0, 0,
	0, 0, 181, 182, 183, 335, 336, 337, 338, 184,
	339, 340, 0, 185, 341, 342, 186, 187, 0, 0,
	343, 344, 345, 0, 188, 346, 0, 0, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	0, 196, 197, 198, 0, 0, 0, 0, 0, 0,
	0, 199, 200, 399, 201, 347, 202, 348, 349, 0,
	203, 0, 204, 0, 205, 0, 0, 206, 207, 0,
	208, 0, 0, 0, 350, 209, 211, 210, 212, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	353, 354, 355, 0, 215, 0, 216, 0, 0, 0,
	0, 217, 356, 0, 357, 0, 0, 218, 219, 0,
	0, 220, 221, 358, 359, 0, 0, 360, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 743, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 376, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 0, 281, 282, 377, 283, 0,
	287, 288, 289, 290, 0, 292, 378, 291, 293, 294,
	0, 295, 284, 285, 296, 0, 297, 379, 380, 298,
	0, 305, 299, 300, 286, 301, 304, 381, 302, 303,
	382, 0, 306, 0, 307, 308, 309, 310, 311, 312,
	313, 0, 383, 384, 385, 0, 0, 314, 315, 386,
	387, 0, 316, 317, 318, 319, 0, 0, 320, 321,
	322, 323, 0, 324, 0, 388, 325, 326, 327, 389,
	390, 0, 0, 328, 0, 0, 0, 0, 329, 330,
	331, 332, 333, 736, 0, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 0, 180, 737, 0, 742, 0, 334,
	0, 0, 0, 0, 181, 182, 183, 335, 336, 337,
	338, 184, 339, 340, 0, 185, 341, 342, 186, 187,
	0, 0, 343, 344, 345, 0, 188, 346, 0, 0,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 0, 196, 197, 198, 0, 0, 0, 0,
	0, 0, 0, 199, 200, 399, 201, 347, 202, 348,
	349, 0, 203, 0, 204, 0, 205, 0, 0, 206,
	207, 0, 208, 0, 0, 0, 350, 209, 211, 210,
	212, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 353, 354, 355, 0, 215, 0, 216, 0,
	0, 0, 0, 217, 356, 0, 357, 0, 0, 218,
	219, 0, 0, 220, 221, 358, 359, 0, 0, 360,
	225, 0, 222, 0, 0, 223, 361, 224, 362, 363,
	364, 365, 366, 0, 367, 0, 0, 226, 227, 228,
	0, 229, 230, 231, 0, 233, 232, 0, 368, 0,
	234, 0, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 0, 242, 243, 245, 244, 0,
	0, 0, 370, 246, 371, 247, 248, 0, 249, 0,
	743, 250, 0, 0, 251, 372, 0, 252, 0, 373,
	253, 254, 255, 256, 257, 0, 258, 374, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 376, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 0, 281, 282, 377,
	283, 0, 287, 288, 289, 290, 0, 292, 378, 291,
	293, 294, 0, 295, 284, 285, 296, 0, 297, 379,
	380, 298, 0, 305, 299, 300, 286, 301, 304, 381,
	302, 303, 382, 0, 306, 0, 307, 308, 309, 310,
	311, 312, 313, 0, 383, 384, 385, 0, 0, 314,
	315, 386, 387, 0, 316, 317, 318, 319, 0, 0,
	320, 321, 322, 323, 0, 324, 0, 388, 325, 326,
	327, 389, 390, 0, 0, 328, 0, 0, 0, 0,
	329, 330, 331, 332, 333, 0, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 0, 180, 0, 737, 0, 742,
	334, 0, 0, 0, 0, 181, 182, 183, 335, 336,
	337, 338, 184, 339, 340, 0, 185, 341, 342, 186,
	187, 0, 0, 343, 344, 345, 0, 188, 346, 0,
	0, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 0, 196, 197, 198, 0, 0, 0,
	0, 0, 0, 0, 199, 200, 399, 201, 347, 202,
	348, 349, 0, 203, 0, 204, 0, 205, 0, 0,
	206, 207, 0, 208, 0, 0, 0, 350, 209, 211,
	210, 212, 351, 352, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 353, 354, 355, 0, 215, 0, 216,
	0, 0, 0, 0, 217, 356, 0, 357, 0, 0,
	218, 219, 0, 0, 220, 221, 358, 359, 0, 0,
	360, 225, 0, 222, 0, 0, 223, 361, 224, 362,
	363, 364, 365, 366, 0, 367, 0, 0, 226, 227,
	228, 0, 229, 230, 231, 0, 233, 232, 0, 368,
	0, 234, 0, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 0, 242, 243, 245, 244,
	0, 0, 0, 370, 246, 371, 247, 248, 0, 249,
	0, 743, 250, 0, 0, 251, 372, 0, 252, 0,
	373, 253, 254, 255, 256, 257, 0, 258, 374, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 376, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 0, 281, 282,
	377, 283, 0, 287, 288, 289, 290, 0, 292, 378,
	291, 293, 294, 0, 295, 284, 285, 296, 0, 297,
	379, 380, 298, 0, 305, 299, 300, 286, 301, 304,
	381, 302, 303, 382, 0, 306, 0, 307, 308, 309,
	310, 311, 312, 313, 0, 383, 384, 385, 0, 0,
	314, 315, 386, 387, 0, 316, 317, 318, 319, 0,
	0, 320, 321, 322, 323, 0, 324, 0, 388, 325,
	326, 327, 389, 390, 0, 0, 328, 0, 0, 0,
	0, 329, 330, 331, 332, 333, 0, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 0, 180, 0, 737, 0,
	742, 334, 0, 0, 0, 0, 181, 182, 183, 335,
	336, 337, 338, 184, 339, 340, 0, 185, 341, 342,
	186, 187, 0, 0, 343, 344, 345, 0, 188, 346,
	0, 0, 0, 189, 190, 191, 0, 192, 0, 193,
	0, 194, 195, 0, 0, 196, 197, 198, 0, 0,
	0, 0, 0, 0, 0, 199, 200, 399, 201, 347,
	202, 348, 349, 0, 203, 0, 204, 0, 205, 0,
	0, 206, 207, 0, 208, 0, 0, 0, 350, 209,
	211, 210, 212, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 353, 354, 355, 0, 215, 0,
	216, 0, 0, 0, 0, 217, 356, 0, 357, 0,
	0, 218, 219, 0, 0, 220, 221, 358, 359, 0,
	0, 360, 225, 0, 222, 0, 0, 223, 361, 224,
	362, 363, 364, 365, 366, 0, 367, 0, 0, 226,
	227, 228, 0, 229, 230, 231, 0, 233, 232, 0,
	368, 0, 234, 0, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 369, 240, 0, 242, 243, 245,
	244, 0, 0, 0, 370, 246, 371, 247, 248, 0,
	249, 0, 0, 250, 0, 0, 251, 372, 0, 252,
	0, 373, 253, 254, 255, 256, 257, 0, 258, 374,
	259, 375, 260, 0, 261, 262, 263, 264, 265, 376,
	266, 267, 0, 268, 269, 270, 271, 272, 0, 274,
	275, 273, 276, 277, 278, 279, 0, 280, 0, 281,
	282, 377, 283, 0, 287, 288, 289, 290, 0, 292,
	378, 291, 293, 294, 0, 295, 284, 285, 296, 0,
	297, 379, 380, 298, 0, 305, 299, 300, 286, 301,
	304, 381, 302, 303, 382, 0, 306, 0, 307, 308,
	309, 310, 311, 312, 313, 0, 383, 384, 385, 0,
	0, 314, 315, 386, 387, 0, 316, 317, 318, 319,
	0, 0, 320, 321, 322, 323, 0, 324, 0, 388,
	325, 326, 327, 389, 390, 0, 0, 328, 0, 0,
	0, 0, 329, 330, 331, 332, 333, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 0, 180, 0, 0, 0,
	0, 334, 1211, 0, 0, 0, 181, 182, 183, 335,
	336, 337, 338, 184, 339, 340, 0, 185, 341, 342,
	186, 187, 0, 0, 343, 344, 345, 0, 188, 346,
	0, 0, 0, 189, 190, 191, 0, 192, 0, 193,
	0, 194, 195, 0, 0, 196, 197, 198, 0, 0,
	0, 0, 0, 0, 0, 199, 200, 399, 201, 347,
	202, 348, 349, 0, 203, 0, 204, 0, 205, 0,
	0, 206, 207, 0, 208, 0, 0, 0, 350, 209,
	211, 210, 212, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 353, 354, 355, 0, 215, 0,
	216, 0, 0, 0, 0, 217, 356, 0, 357, 0,
	0, 218, 219, 0, 0, 220, 221, 358, 359, 0,
	0, 360, 225, 0, 222, 0, 0, 223, 361, 224,
	362, 363, 364, 365, 366, 0, 367, 0, 0, 226,
	227, 228, 0, 229, 230, 231, 0, 233, 232, 0,
	368, 0, 234, 0, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 369, 240, 0, 242, 243, 245,
	244, 0, 0, 0, 370, 246, 371, 247, 248, 0,
	249, 0, 0, 250, 0, 0, 251, 372, 0, 252,
	0, 373, 253, 254, 255, 256, 257, 0, 258, 374,
	259, 375, 260, 0, 261, 262, 263, 264, 265, 376,
	266, 267, 0, 268, 269, 270, 271, 272, 0, 274,
	275, 273, 276, 277, 278, 279, 0, 280, 0, 281,
	282, 377, 283, 0, 287, 288, 289, 290, 0, 292,
	378, 291, 293, 294, 0, 295, 284, 285, 296, 0,
	297, 379, 380, 298, 0, 305, 299, 300, 286, 301,
	304, 381, 302, 303, 382, 0, 306, 0, 307, 308,
	309, 310, 311, 312, 313, 0, 383, 384, 385, 0,
	0, 314, 315, 386, 387, 0, 316, 317, 318, 319,
	0, 0, 320, 321, 322, 323, 0, 324, 0, 388,
	325, 326, 327, 389, 390, 0, 0, 328, 0, 0,
	0, 0, 329, 330, 331, 332, 333, 0, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 0, 180, 0, 0,
	0, 1673, 334, 0, 0, 0, 0, 181, 182, 183,
	335, 336, 337, 338, 184, 339, 340, 0, 185, 341,
	342, 186, 187, 0, 0, 343, 344, 345, 0, 188,
	346, 0, 0, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 0, 196, 197, 198, 0,
	0, 0, 0, 0, 0, 0, 199, 200, 399, 201,
	347, 202, 348, 349, 0, 203, 0, 204, 0, 205,
	0, 0, 206, 207, 0, 208, 0, 0, 0, 350,
	209, 211, 210, 212, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 353, 354, 355, 0, 215,
	0, 216, 0, 0, 0, 0, 217, 356, 0, 357,
	0, 0, 218, 219, 0, 0, 220, 221, 358, 359,
	0, 0, 360, 225, 0, 222, 0, 0, 223, 361,
	224, 362, 363, 364, 365, 366, 0, 367, 0, 0,
	226, 227, 228, 0, 229, 230, 231, 0, 233, 232,
	0, 368, 0, 234, 0, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 0, 242, 243,
	245, 244, 0, 0, 0, 370, 246, 371, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 0,
	252, 0, 373, 253, 254, 255, 256, 257, 0, 258,
	374, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	376, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 0,
	281, 282, 377, 283, 0, 287, 288, 289, 290, 0,
	292, 378, 291, 293, 294, 0, 295, 284, 285, 296,
	0, 297, 379, 380, 298, 0, 305, 299, 300, 286,
	301, 304, 381, 302, 303, 382, 0, 306, 0, 307,
	308, 309, 310, 311, 312, 313, 0, 383, 384, 385,
	0, 0, 314, 315, 386, 387, 0, 316, 317, 318,
	319, 0, 0, 320, 321, 322, 323, 0, 324, 0,
	388, 325, 326, 327, 389, 390, 0, 0, 328, 0,
	0, 0, 0, 329, 330, 331, 332, 333, 0, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 0, 180, 0,
	0, 0, 2021, 334, 0, 0, 0, 0, 181, 182,
	183, 335, 336, 337, 338, 184, 339, 340, 0, 185,
	341, 342, 186, 187, 0, 0, 343, 344, 345, 0,
	188, 346, 0, 0, 0, 189, 190, 191, 0, 192,
	0, 193, 0, 194, 195, 0, 0, 196, 197, 198,
	0, 0, 0, 0, 0, 0, 0, 199, 200, 399,
	201, 347, 202, 348, 349, 0, 203, 0, 204, 0,
	205, 0, 0, 206, 207, 0, 208, 0, 0, 0,
	350, 209, 211, 210, 212, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 353, 354, 355, 0,
	215, 0, 216, 0, 0, 0, 0, 217, 356, 0,
	357, 0, 0, 218, 219, 0, 0, 220, 221, 358,
	359, 0, 0, 360, 225, 0, 222, 0, 0, 223,
	361, 224, 362, 363, 364, 365, 366, 0, 367, 0,
	0, 226, 227, 228, 0, 229, 230, 231, 0, 233,
	232, 0, 368, 0, 234, 0, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 369, 240, 0, 242,
	243, 245, 244, 0, 0, 0, 370, 246, 371, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 372,
	0, 252, 0, 373, 253, 254, 255, 256, 257, 0,
	258, 374, 259, 375, 260, 0, 261, 262, 263, 264,
	265, 376, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	0, 281, 282, 377, 283, 0, 287, 288, 289, 290,
	0, 292, 378, 291, 293, 294, 0, 295, 284, 285,
	296, 0, 297, 379, 380, 298, 0, 305, 299, 300,
	286, 301, 304, 381, 302, 303, 382, 0, 306, 0,
	307, 308, 309, 310, 311, 312, 313, 0, 383, 384,
	385, 0, 0, 314, 315, 386, 387, 0, 316, 317,
	318, 319, 0, 0, 320, 321, 322, 323, 0, 324,
	0, 388, 325, 326, 327, 389, 390, 0, 0, 328,
	0, 0, 0, 0, 329, 330, 331, 332, 333, 0,
	628, 617, 618, 615, 616, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 1097, 334, 0, 0, 0, 0, 181,
	182, 183, 335, 660, 337, 661, 184, 662, 663, 0,
	185, 341, 342, 186, 187, 0, 0, 664, 665, 345,
	0, 188, 346, 0, 829, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 690, 196, 197,
	198, 0, 0, 0, 0, 0, 0, 0, 199, 200,
	399, 201, 666, 202, 667, 668, 0, 203, 0, 204,
	0, 205, 0, 0, 659, 207, 0, 208, 0, 0,
	0, 350, 209, 211, 210, 212, 351, 352, 624, 691,
	0, 0, 0, 0, 0, 213, 214, 669, 670, 671,
	0, 215, 0, 216, 0, 0, 692, 0, 217, 356,
	0, 357, 0, 0, 218, 219, 0, 0, 220, 221,
	358, 359, 694, 0, 360, 225, 0, 222, 0, 693,
	223, 672, 224, 673, 674, 675, 676, 677, 0, 635,
	0, 695, 226, 227, 228, 696, 229, 230, 231, 0,
	233, 232, 0, 368, 697, 234, 698, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 699,
	242, 243, 245, 244, 0, 0, 625, 370, 246, 678,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 700, 252, 701, 373, 253, 254, 255, 256, 257,
	0, 258, 374, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 679, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 702, 281, 282, 377, 283, 0, 287, 288, 289,
	290, 0, 292, 378, 291, 293, 294, 0, 295, 284,
	285, 296, 703, 297, 680, 380, 298, 0, 305, 299,
	300, 286, 301, 304, 681, 302, 303, 382, 0, 306,
	0, 307, 308, 309, 310, 311, 312, 313, 0, 383,
	682, 683, 0, 0, 314, 315, 386, 387, 623, 316,
	317, 318, 319, 0, 0, 320, 321, 322, 323, 0,
	324, 0, 388, 325, 326, 327, 389, 684, 0, 484,
	328, 175, 0, 0, 0, 329, 330, 331, 332, 333,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 0, 334, 0, 0, 0, 0,
	181, 182, 183, 335, 336, 337, 338, 184, 339, 340,
	0, 185, 341, 342, 186, 187, 0, 0, 343, 344,
	345, 0, 188, 346, 0, 0, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 0, 196,
	197, 198, 0, 0, 0, 0, 0, 0, 0, 199,
	200, 171, 201, 347, 202, 348, 349, 0, 203, 0,
	204, 0, 205, 0, 0, 206, 207, 0, 208, 0,
	0, 0, 350, 209, 211, 210, 212, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 353, 354,
	355, 0, 215, 0, 216, 0, 0, 0, 0, 217,
	356, 0, 357, 0, 0, 218, 219, 0, 0, 220,
	221, 358, 359, 0, 0, 360, 225, 0, 222, 0,
	0, 223, 361, 224, 362, 363, 364, 365, 366, 0,
	367, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 368, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	0, 242, 243, 245, 244, 0, 0, 0, 370, 246,
	371, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 0, 252, 0, 373, 253, 254, 255, 256,
	257, 0, 258, 374, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 376, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 0, 281, 282, 377, 283, 0, 287, 288,
	289, 290, 0, 292, 378, 291, 293, 294, 0, 295,
	284, 285, 296, 0, 297, 379, 380, 298, 0, 305,
	299, 300, 286, 301, 304, 381, 302, 303, 382, 0,
	306, 170, 307, 308, 309, 310, 311, 312, 313, 0,
	383, 384, 385, 0, 0, 314, 315, 386, 387, 0,
	316, 317, 318, 319, 0, 0, 320, 321, 322, 323,
	0, 324, 0, 388, 325, 326, 327, 389, 390, 0,
	168, 328, 175, 0, 0, 0, 329, 330, 331, 332,
	333, 0, 0, 0, 0, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 0, 334, 0, 174, 0,
	0, 181, 182, 183, 335, 336, 337, 338, 184, 339,
	340, 0, 185, 341, 342, 186, 187, 0, 0, 343,
	344, 345, 0, 188, 346, 0, 0, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 0,
	196, 197, 198, 0, 0, 0, 0, 0, 0, 0,
	199, 200, 171, 201, 347, 202, 348, 349, 0, 203,
	0, 204, 0, 205, 0, 0, 206, 207, 0, 208,
	0, 0, 0, 350, 209, 211, 210, 212, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 353,
	354, 355, 0, 215, 0, 216, 0, 0, 0, 0,
	217, 356, 0, 357, 0, 0, 218, 219, 0, 0,
	220, 221, 358, 359, 0, 0, 360, 225, 0, 222,
	0, 0, 223, 361, 224, 362, 363, 364, 365, 366,
	0, 367, 0, 0, 226, 227, 228, 0, 229, 230,
	231, 0, 233, 232, 0, 368, 0, 234, 0, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	240, 0, 242, 243, 245, 244, 0, 0, 0, 370,
	246, 371, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 372, 0, 252, 0, 373, 253, 254, 255,
	256, 257, 0, 258, 374, 259, 375, 260, 0, 261,
	262, 263, 264, 265, 376, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 0, 281, 282, 377, 283, 0, 287,
	288, 289, 290, 0, 292, 378, 291, 293, 294, 0,
	295, 284, 285, 296, 0, 297, 379, 380, 298, 0,
	305, 299, 300, 286, 301, 304, 381, 302, 303, 382,
	0, 306, 170, 307, 308, 309, 310, 311, 312, 313,
	0, 383, 384, 385, 0, 0, 314, 315, 386, 387,
	0, 316, 317, 318, 319, 0, 0, 320, 321, 322,
	323, 0, 324, 0, 388, 325, 326, 327, 389, 390,
	0, 175, 328, 0, 0, 0, 0, 329, 330, 331,
	332, 333, 0, 0, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 0, 334, 0, 0, 0, 174,
	181, 182, 183, 335, 336, 337, 338, 184, 339, 340,
	0, 185, 341, 342, 186, 187, 0, 0, 343, 344,
	345, 0, 188, 346, 0, 0, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 0, 196,
	197, 198, 0, 0, 0, 0, 0, 0, 0, 199,
	200, 171, 201, 347, 202, 348, 349, 0, 203, 0,
	204, 0, 205, 0, 0, 206, 207, 0, 208, 0,
	0, 0, 350, 209, 211, 210, 212, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 353, 354,
	355, 0, 215, 0, 216, 0, 0, 0, 0, 217,
	356, 0, 357, 0, 0, 218, 219, 0, 0, 220,
	221, 358, 359, 0, 0, 360, 225, 0, 222, 0,
	0, 223, 361, 224, 362, 363, 364, 365, 366, 0,
	367, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 368, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	0, 242, 243, 245, 244, 0, 0, 0, 370, 246,
	371, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 0, 252, 0, 373, 253, 254, 255, 256,
	257, 0, 258, 374, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 376, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 0, 281, 282, 377, 283, 0, 287, 288,
	289, 290, 0, 292, 378, 291, 293, 294, 0, 295,
	284, 285, 296, 0, 297, 379, 380, 298, 0, 305,
	299, 300, 286, 301, 304, 381, 302, 303, 382, 0,
	306, 170, 307, 308, 309, 310, 311, 312, 313, 0,
	383, 384, 385, 0, 0, 314, 315, 386, 387, 0,
	316, 317, 318, 319, 0, 0, 320, 321, 322, 323,
	0, 324, 0, 388, 325, 326, 327, 389, 390, 0,
	175, 328, 0, 0, 0, 0, 329, 330, 331, 332,
	333, 0, 0, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 0, 334, 0, 0, 0, 174, 181,
	182, 183, 335, 336, 337, 338, 184, 339, 340, 0,
	185, 341, 342, 186, 187, 0, 0, 343, 344, 345,
	0, 188, 346, 0, 0, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 0, 196, 197,
	198, 0, 0, 0, 0, 0, 0, 0, 199, 200,
	399, 201, 347, 202, 348, 349, 0, 203, 0, 204,
	0, 205, 0, 0, 206, 207, 0, 208, 0, 0,
	0, 350, 209, 211, 210, 212, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 353, 354, 355,
	0, 215, 0, 216, 0, 0, 0, 0, 217, 356,
	0, 357, 0, 0, 218, 219, 0, 0, 220, 221,
	358, 359, 0, 0, 360, 225, 0, 222, 0, 0,
	223, 361, 224, 362, 363, 364, 365, 366, 0, 367,
	0, 0, 226, 227, 228, 0, 229, 230, 231, 0,
	233, 232, 0, 368, 0, 234, 0, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 0,
	242, 243, 245, 244, 0, 0, 0, 370, 246, 371,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 0, 252, 0, 373, 253, 254, 255, 256, 257,
	0, 258, 374, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 376, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 0, 281, 282, 377, 283, 0, 287, 288, 289,
	290, 0, 292, 378, 291, 293, 294, 0, 295, 284,
	285, 296, 0, 297, 379, 380, 298, 0, 305, 299,
	300, 286, 301, 304, 381, 302, 303, 382, 0, 306,
	0, 307, 308, 309, 310, 311, 312, 313, 0, 383,
	384, 385, 0, 0, 314, 315, 386, 387, 0, 316,
	317, 318, 319, 0, 0, 320, 321, 322, 323, 0,
	324, 0, 388, 325, 326, 327, 389, 390, 0, 0,
	328, 0, 0, 0, 0, 329, 330, 331, 332, 333,
	879, 0, 824, 883, 0, 0, 0, 881, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 178, 179,
	0, 180, 0, 0, 0, 0, 334, 0, 0, 0,
	0, 181, 182, 183, 335, 336, 337, 338, 184, 339,
	340, 0, 185, 341, 342, 186, 187, 0, 0, 343,
	344, 345, 0, 188, 346, 0, 829, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 690,
	196, 197, 198, 0, 0, 0, 0, 0, 0, 0,
	199, 200, 399, 201, 347, 202, 348, 349, 0, 203,
	0, 204, 0, 205, 0, 0, 206, 207, 0, 208,
	0, 0, 0, 350, 209, 211, 210, 212, 351, 352,
	0, 691, 0, 0, 0, 0, 0, 213, 214, 353,
	354, 355, 0, 215, 0, 216, 0, 0, 692, 0,
	217, 356, 0, 357, 0, 0, 218, 219, 0, 0,
	220, 221, 358, 359, 694, 0, 360, 225, 0, 222,
	0, 693, 223, 361, 224, 362, 363, 364, 365, 366,
	0, 367, 0, 695, 226, 227, 228, 696, 229, 230,
	231, 0, 233, 232, 0, 368, 697, 234, 698, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	240, 699, 242, 243, 245, 244, 0, 0, 0, 370,
	246, 371, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 372, 700, 252, 701, 373, 253, 254, 255,
	256, 257, 0, 258, 374, 259, 375, 260, 0, 261,
	262, 263, 264, 265, 376, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 702, 281, 282, 377, 283, 0, 287,
	288, 289, 290, 0, 292, 378, 291, 293, 294, 0,
	295, 284, 285, 296, 703, 297, 379, 380, 298, 0,
	305, 299, 300, 286, 301, 304, 381, 302, 303, 382,
	0, 306, 0, 307, 308, 309, 310, 311, 312, 313,
	0, 383, 384, 385, 0, 0, 314, 315, 386, 387,
	0, 316, 317, 318, 319, 0, 0, 320, 321, 322,
	323, 0, 324, 0, 388, 325, 326, 327, 389, 390,
	824, 883, 328, 0, 0, 881, 0, 329, 330, 331,
	332, 333, 0, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 181,
	182, 183, 335, 336, 337, 338, 184, 339, 340, 0,
	185, 341, 342, 186, 187, 0, 0, 343, 344, 345,
	0, 188, 346, 0, 829, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 690, 196, 197,
	198, 0, 0, 0, 0, 0, 0, 0, 199, 200,
	399, 201, 347, 202, 348, 349, 0, 203, 0, 204,
	0, 205, 0, 0, 206, 207, 0, 208, 0, 0,
	0, 350, 209, 211, 210, 212, 351, 352, 0, 691,
	0, 0, 0, 0, 0, 213, 214, 353, 354, 355,
	0, 215, 0, 216, 0, 0, 692, 0, 217, 356,
	0, 357, 0, 0, 218, 219, 0, 0, 220, 221,
	358, 359, 694, 0, 360, 225, 0, 222, 0, 693,
	223, 361, 224, 362, 363, 364, 365, 366, 0, 367,
	0, 695, 226, 227, 228, 696, 229, 230, 231, 0,
	233, 232, 0, 368, 697, 234, 698, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 699,
	242, 243, 245, 244, 0, 0, 0, 370, 246, 371,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 700, 252, 701, 373, 253, 254, 255, 256, 257,
	0, 258, 374, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 376, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 702, 281, 282, 377, 283, 0, 287, 288, 289,
	290, 0, 292, 378, 291, 293, 294, 0, 295, 284,
	285, 296, 703, 297, 379, 380, 298, 0, 305, 299,
	300, 286, 301, 304, 381, 302, 303, 382, 0, 306,
	0, 307, 308, 309, 310, 311, 312, 313, 0, 383,
	384, 385, 0, 0, 314, 315, 386, 387, 0, 316,
	317, 318, 319, 0, 0, 320, 321, 322, 323, 0,
	324, 0, 388, 325, 326, 327, 389, 390, 824, 883,
	328, 0, 0, 0, 0, 329, 330, 331, 332, 333,
	0, 0, 0, 0, 178, 179, 0, 180, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 181, 182, 183,
	335, 336, 337, 338, 184, 339, 340, 0, 185, 341,
	342, 186, 187, 0, 0, 343, 344, 345, 0, 188,
	346, 0, 829, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 690, 196, 197, 198, 0,
	0, 0, 0, 0, 0, 0, 199, 200, 399, 201,
	347, 202, 348, 349, 0, 203, 0, 204, 0, 205,
	0, 0, 206, 207, 0, 208, 0, 0, 0, 350,
	209, 211, 210, 212, 351, 352, 0, 691, 0, 0,
	0, 0, 0, 213, 214, 353, 354, 355, 0, 215,
	0, 216, 0, 0, 692, 0, 217, 356, 0, 357,
	0, 0, 218, 219, 0, 0, 220, 221, 358, 359,
	694, 0, 360, 225, 0, 222, 0, 693, 223, 361,
	224, 362, 363, 364, 365, 366, 0, 367, 0, 695,
	226, 227, 228, 696, 229, 230, 231, 0, 233, 232,
	0, 368, 697, 234, 698, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 699, 242, 243,
	245, 244, 0, 0, 0, 370, 246, 371, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 700,
	252, 701, 373, 253, 254, 255, 256, 257, 0, 258,
	374, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	376, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 702,
	281, 282, 377, 283, 0, 287, 288, 289, 290, 0,
	292, 378, 291, 293, 294, 0, 295, 284, 285, 296,
	703, 297, 379, 380, 298, 0, 305, 299, 300, 286,
	301, 304, 381, 302, 303, 382, 0, 306, 0, 307,
	308, 309, 310, 311, 312, 313, 0, 383, 384, 385,
	0, 0, 314, 315, 386, 387, 0, 316, 317, 318,
	319, 0, 0, 320, 321, 322, 323, 0, 324, 0,
	388, 325, 326, 327, 389, 390, 824, 0, 328, 0,
	0, 0, 0, 329, 330, 331, 332, 333, 0, 0,
	0, 0, 178, 179, 0, 180, 0, 0, 0, 0,
	334, 0, 0, 0, 0, 181, 182, 183, 335, 336,
	337, 338, 184, 339, 340, 0, 185, 341, 342, 186,
	187, 0, 0, 343, 344, 345, 0, 188, 346, 0,
	829, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 690, 196, 197, 198, 0, 0, 0,
	0, 0, 0, 0, 199, 200, 399, 201, 347, 202,
	348, 349, 0, 203, 0, 204, 0, 205, 0, 0,
	206, 207, 0, 208, 0, 0, 0, 350, 209, 211,
	210, 212, 351, 352, 0, 691, 0, 0, 0, 0,
	0, 213, 214, 353, 354, 355, 0, 215, 0, 216,
	0, 0, 692, 0, 217, 356, 0, 357, 0, 0,
	218, 219, 0, 0, 220, 221, 358, 359, 694, 0,
	360, 225, 0, 222, 0, 693, 223, 361, 224, 362,
	363, 364, 365, 366, 0, 367, 0, 695, 226, 227,
	228, 696, 229, 230, 231, 0, 233, 232, 0, 368,
	697, 234, 698, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 699, 242, 243, 245, 244,
	0, 0, 0, 370, 246, 371, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 372, 700, 252, 701,
	373, 253, 254, 255, 256, 257, 0, 258, 374, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 376, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 702, 281, 282,
	377, 283, 0, 287, 288, 289, 290, 0, 292, 378,
	291, 293, 294, 0, 295, 284, 285, 296, 703, 297,
	379, 380, 298, 0, 305, 299, 300, 286, 301, 304,
	381, 302, 303, 382, 0, 306, 0, 307, 308, 309,
	310, 311, 312, 313, 0, 383, 384, 385, 0, 0,
	314, 315, 386, 387, 0, 316, 317, 318, 319, 0,
	0, 320, 321, 322, 323, 0, 324, 0, 388, 325,
	326, 327, 389, 390, 175, 0, 328, 0, 0, 0,
	0, 329, 330, 331, 332, 333, 0, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 0, 0, 334, 0,
	0, 0, 0, 181, 182, 183, 335, 336, 337, 338,
	184, 339, 340, 0, 185, 341, 342, 186, 187, 0,
	0, 343, 344, 345, 1611, 188, 346, 0, 0, 0,
	189, 190, 191, 0, 192, 1609, 193, 0, 194, 195,
	0, 0, 196, 197, 198, 0, 0, 0, 0, 0,
	0, 0, 199, 200, 399, 201, 347, 202, 348, 349,
	0, 203, 0, 204, 0, 205, 0, 0, 206, 207,
	0, 208, 0, 0, 0, 350, 209, 211, 210, 212,
	351, 352, 0, 1650, 0, 0, 0, 0, 0, 213,
	214, 353, 354, 355, 0, 215, 0, 216, 1614, 0,
	0, 0, 217, 356, 0, 357, 0, 0, 218, 219,
	0, 0, 220, 221, 358, 359, 0, 0, 360, 225,
	1648, 222, 0, 0, 223, 361, 224, 362, 363, 364,
	365, 366, 0, 367, 0, 0, 226, 227, 228, 0,
	229, 230, 231, 0, 233, 232, 0, 368, 0, 234,
	0, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 369, 240, 0, 242, 243, 245, 244, 0, 0,
	0, 370, 246, 371, 247, 248, 0, 249, 0, 0,
	250, 0, 0, 251, 372, 0, 252, 0, 373, 253,
	254, 255, 256, 257, 0, 258, 374, 259, 375, 260,
	1613, 261, 262, 263, 264, 265, 376, 266, 267, 0,
	268, 269, 270, 271, 272, 0, 274, 275, 273, 276,
	277, 278, 279, 0, 280, 0, 281, 282, 377, 283,
	0, 287, 288, 289, 290, 0, 292, 378, 291, 293,
	294, 0, 295, 284, 285, 296, 0, 297, 379, 380,
	298, 0, 305, 299, 300, 286, 301, 304, 381, 302,
	303, 382, 0, 306, 0, 307, 308, 309, 310, 311,
	312, 313, 0, 383, 384, 385, 0, 0, 314, 315,
	386, 387, 0, 316, 317, 318, 319, 0, 1649, 320,
	321, 322, 323, 0, 324, 0, 388, 325, 326, 327,
	389, 390, 175, 0, 328, 0, 0, 0, 0, 329,
	330, 331, 332, 333, 0, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 0, 334, 0, 0, 0,
	0, 181, 182, 183, 335, 336, 337, 338, 184, 339,
	340, 0, 185, 341, 342, 186, 187, 0, 0, 343,
	344, 345, 1611, 188, 346, 0, 0, 1606, 189, 190,
	191, 0, 192, 1609, 193, 0, 194, 195, 0, 0,
	196, 197, 198, 0, 0, 0, 0, 0, 0, 0,
	199, 200, 399, 201, 347, 202, 348, 349, 0, 203,
	0, 204, 0, 205, 0, 0, 206, 207, 0, 208,
	0, 0, 0, 350, 209, 211, 210, 212, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 353,
	354, 355, 0, 215, 0, 216, 1614, 0, 0, 0,
	217, 356, 0, 357, 0, 0, 218, 219, 0, 0,
	220, 221, 1605, 359, 0, 0, 360, 225, 0, 222,
	0, 0, 223, 361, 224, 362, 363, 364, 365, 366,
	0, 367, 0, 0, 226, 227, 228, 0, 229, 230,
	231, 0, 233, 232, 0, 368, 0, 234, 0, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	240, 0, 242, 243, 245, 244, 0, 0, 0, 370,
	246, 371, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 372, 0, 252, 0, 373, 253, 254, 255,
	256, 257, 0, 258, 374, 259, 375, 260, 1613, 261,
	262, 263, 264, 265, 376, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 0, 281, 282, 377, 283, 0, 287,
	288, 289, 290, 0, 292, 378, 291, 293, 294, 0,
	295, 284, 285, 296, 0, 297, 379, 380, 298, 0,
	305, 299, 300, 286, 301, 304, 381, 302, 303, 382,
	0, 306, 0, 307, 308, 309, 310, 311, 312, 313,
	0, 383, 384, 385, 0, 0, 314, 315, 386, 387,
	0, 316, 317, 318, 319, 0, 1612, 320, 321, 322,
	323, 0, 324, 0, 388, 325, 326, 327, 389, 390,
	0, 799, 328, 175, 0, 0, 0, 329, 330, 331,
	332, 333, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 181, 182, 183, 335, 336, 337, 338, 184,
	339, 340, 0, 185, 341, 342, 186, 187, 0, 0,
	343, 344, 345, 0, 188, 346, 0, 0, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	0, 196, 197, 198, 0, 0, 0, 0, 0, 0,
	0, 199, 200, 399, 201, 347, 202, 348, 349, 0,
	203, 0, 204, 0, 205, 0, 0, 206, 207, 0,
	208, 0, 0, 0, 350, 209, 211, 210, 212, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	353, 354, 355, 0, 215, 0, 216, 0, 0, 0,
	0, 217, 356, 0, 357, 0, 0, 218, 219, 0,
	0, 220, 221, 358, 359, 0, 0, 360, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 743, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 376, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 0, 281, 282, 377, 283, 0,
	287, 288, 289, 290, 0, 292, 378, 291, 293, 294,
	0, 295, 284, 285, 296, 0, 297, 379, 380, 298,
	0, 305, 299, 300, 286, 301, 304, 381, 302, 303,
	382, 0, 306, 0, 307, 308, 309, 310, 311, 312,
	313, 0, 383, 384, 385, 0, 0, 314, 315, 386,
	387, 0, 316, 317, 318, 319, 0, 0, 320, 321,
	322, 323, 0, 324, 0, 388, 325, 326, 327, 389,
	390, 0, 749, 328, 175, 0, 0, 0, 329, 330,
	331, 332, 333, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 0, 0, 334, 0,
	0, 0, 0, 181, 182, 183, 335, 336, 337, 338,
	184, 339, 340, 0, 185, 341, 342, 186, 187, 0,
	0, 343, 344, 345, 0, 188, 346, 0, 0, 0,
	189, 190, 191, 0, 192, 0, 193, 0, 194, 195,
	0, 0, 196, 197, 198, 0, 0, 0, 0, 0,
	0, 0, 199, 200, 399, 201, 347, 202, 348, 349,
	0, 203, 0, 204, 0, 205, 0, 0, 206, 207,
	0, 208, 0, 0, 0, 350, 209, 211, 210, 212,
	351, 352, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 353, 354, 355, 0, 215, 0, 216, 0, 0,
	0, 0, 217, 356, 0, 357, 0, 0, 218, 219,
	0, 0, 220, 221, 751, 359, 0, 0, 360, 225,
	0, 222, 0, 0, 223, 361, 224, 362, 363, 364,
	365, 366, 0, 367, 0, 0, 226, 227, 228, 0,
	229, 230, 231, 0, 233, 232, 0, 368, 0, 234,
	0, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 369, 240, 0, 242, 243, 245, 244, 0, 0,
	0, 370, 246, 371, 247, 248, 0, 249, 0, 743,
	250, 0, 0, 251, 372, 0, 252, 0, 373, 253,
	254, 255, 256, 257, 0, 258, 374, 259, 375, 260,
	0, 261, 262, 263, 264, 265, 376, 266, 267, 0,
	268, 269, 270, 271, 272, 0, 274, 275, 273, 276,
	277, 278, 279, 0, 280, 0, 281, 282, 377, 283,
	0, 287, 288, 289, 290, 0, 292, 378, 291, 293,
	294, 0, 295, 284, 285, 296, 0, 297, 379, 380,
	298, 0, 305, 299, 300, 286, 301, 304, 381, 302,
	303, 382, 0, 306, 0, 307, 308, 309, 310, 311,
	312, 313, 0, 383, 384, 385, 0, 0, 314, 315,
	386, 387, 0, 316, 317, 318, 319, 0, 0, 320,
	321, 322, 323, 0, 324, 0, 388, 325, 326, 327,
	389, 390, 0, 745, 328, 175, 0, 0, 0, 329,
	330, 331, 332, 333, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 0, 180, 0, 0, 0, 0, 334,
	0, 0, 0, 0, 181, 182, 183, 335, 336, 337,
	338, 184, 339, 340, 0, 185, 341, 342, 186, 187,
	0, 0, 343, 344, 345, 0, 188, 346, 0, 0,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 0, 196, 197, 198, 0, 0, 0, 0,
	0, 0, 0, 199, 200, 399, 201, 347, 202, 348,
	349, 0, 203, 0, 204, 0, 205, 0, 0, 206,
	207, 0, 208, 0, 0, 0, 350, 209, 211, 210,
	212, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 353, 354, 355, 0, 215, 0, 216, 0,
	0, 0, 0, 217, 356, 0, 357, 0, 0, 218,
	219, 0, 0, 220, 221, 747, 359, 0, 0, 360,
	225, 0, 222, 0, 0, 223, 361, 224, 362, 363,
	364, 365, 366, 0, 367, 0, 0, 226, 227, 228,
	0, 229, 230, 231, 0, 233, 232, 0, 368, 0,
	234, 0, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 0, 242, 243, 245, 244, 0,
	0, 0, 370, 246, 371, 247, 248, 0, 249, 0,
	743, 250, 0, 0, 251, 372, 0, 252, 0, 373,
	253, 254, 255, 256, 257, 0, 258, 374, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 376, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 0, 281, 282, 377,
	283, 0, 287, 288, 289, 290, 0, 292, 378, 291,
	293, 294, 0, 295, 284, 285, 296, 0, 297, 379,
	380, 298, 0, 305, 299, 300, 286, 301, 304, 381,
	302, 303, 382, 0, 306, 0, 307, 308, 309, 310,
	311, 312, 313, 0, 383, 384, 385, 0, 0, 314,
	315, 386, 387, 0, 316, 317, 318, 319, 0, 0,
	320, 321, 322, 323, 0, 324, 0, 388, 325, 326,
	327, 389, 390, 0, 416, 328, 175, 0, 0, 0,
	329, 330, 331, 332, 333, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 415, 180, 0, 0, 0, 0,
	334, 0, 0, 0, 0, 181, 182, 183, 335, 336,
	337, 338, 184, 339, 340, 0, 185, 341, 342, 186,
	187, 0, 0, 343, 344, 345, 0, 188, 346, 0,
	0, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 0, 196, 197, 198, 0, 0, 0,
	0, 0, 0, 0, 199, 200, 399, 201, 347, 202,
	348, 349, 0, 203, 0, 204, 0, 205, 0, 0,
	206, 207, 0, 208, 0, 0, 0, 350, 209, 211,
	210, 212, 351, 352, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 353, 354, 355, 0, 215, 0, 216,
	0, 0, 0, 0, 217, 356, 0, 357, 0, 0,
	218, 219, 0, 0, 220, 221, 358, 359, 0, 0,
	360, 225, 0, 222, 0, 0, 223, 361, 224, 362,
	363, 364, 365, 366, 0, 367, 0, 0, 226, 227,
	228, 0, 229, 230, 231, 0, 233, 232, 0, 368,
	0, 234, 0, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 0, 242, 243, 245, 244,
	0, 0, 0, 370, 246, 371, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 372, 0, 252, 0,
	373, 253, 254, 255, 256, 257, 0, 258, 374, 259,
	375, 414, 0, 261, 262, 263, 264, 265, 376, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 0, 281, 282,
	377, 283, 0, 287, 288, 289, 290, 0, 292, 378,
	291, 293, 294, 0, 295, 284, 285, 296, 0, 297,
	379, 380, 298, 0, 305, 299, 300, 286, 301, 304,
	381, 302, 303, 382, 0, 306, 0, 307, 308, 309,
	310, 311, 312, 313, 0, 383, 384, 385, 0, 0,
	314, 315, 386, 387, 0, 316, 317, 318, 319, 0,
	0, 320, 321, 322, 323, 0, 324, 0, 388, 325,
	326, 327, 389, 390, 175, 0, 328, 0, 0, 0,
	0, 329, 330, 331, 332, 333, 0, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 0, 0, 334, 0,
	1594, 0, 0, 181, 182, 183, 335, 336, 337, 338,
	184, 339, 340, 0, 185, 341, 342, 186, 187, 0,
	0, 343, 344, 345, 0, 188, 346, 0, 0, 0,
	189, 190, 191, 0, 192, 0, 193, 0, 194, 195,
	0, 0, 196, 197, 198, 0, 0, 0, 0, 0,
	0, 0, 199, 200, 399, 201, 347, 202, 348, 349,
	0, 203, 0, 204, 0, 205, 0, 0, 206, 207,
	0, 208, 0, 0, 0, 350, 209, 211, 210, 212,
	351, 352, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 353, 354, 355, 0, 215, 0, 216, 0, 0,
	0, 0, 217, 356, 0, 357, 0, 0, 218, 219,
	0, 0, 220, 221, 358, 359, 0, 0, 360, 225,
	0, 222, 0, 0, 223, 361, 224, 362, 363, 364,
	365, 366, 0, 367, 0, 0, 226, 227, 228, 0,
	229, 230, 231, 0, 233, 232, 0, 368, 0, 234,
	0, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 369, 240, 0, 242, 243, 245, 244, 0, 0,
	0, 370, 246, 371, 247, 248, 0, 249, 0, 0,
	250, 0, 0, 251, 372, 0, 252, 0, 373, 253,
	254, 255, 256, 257, 0, 258, 374, 259, 375, 260,
	0, 261, 262, 263, 264, 265, 376, 266, 267, 0,
	268, 269, 270, 271, 272, 0, 274, 275, 273, 276,
	277, 278, 279, 0, 280, 0, 281, 282, 377, 283,
	0, 287, 288, 289, 290, 0, 292, 378, 291, 293,
	294, 0, 295, 284, 285, 296, 0, 297, 379, 380,
	298, 0, 305, 299, 300, 286, 301, 304, 381, 302,
	303, 382, 0, 306, 0, 307, 308, 309, 310, 311,
	312, 313, 0, 383, 384, 385, 0, 0, 314, 315,
	386, 387, 0, 316, 317, 318, 319, 0, 0, 320,
	321, 322, 323, 0, 324, 0, 388, 325, 326, 327,
	389, 390, 175, 2166, 328, 0, 0, 0, 0, 329,
	330, 331, 332, 333, 0, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 0, 334, 0, 0, 0,
	0, 181, 182, 183, 335, 336, 337, 338, 184, 339,
	340, 0, 185, 341, 342, 186, 187, 0, 0, 343,
	344, 345, 0, 188, 346, 0, 0, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 0,
	196, 197, 198, 0, 0, 0, 0, 0, 0, 0,
	199, 200, 399, 201, 347, 202, 348, 349, 0, 203,
	0, 204, 0, 205, 0, 0, 206, 207, 0, 208,
	0, 0, 0, 350, 209, 211, 210, 212, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 353,
	354, 355, 0, 215, 0, 216, 0, 0, 0, 0,
	217, 356, 0, 357, 0, 0, 218, 219, 0, 0,
	220, 221, 358, 359, 0, 0, 360, 225, 0, 222,
	0, 0, 223, 361, 224, 362, 363, 364, 365, 366,
	0, 367, 0, 0, 226, 227, 228, 0, 229, 230,
	231, 0, 233, 232, 0, 368, 0, 234, 0, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	240, 0, 242, 243, 245, 244, 0, 0, 0, 370,
	246, 371, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 372, 0, 252, 0, 373, 253, 254, 255,
	256, 257, 0, 258, 374, 259, 375, 260, 0, 261,
	262, 263, 264, 265, 376, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 0, 281, 282, 377, 283, 0, 287,
	288, 289, 290, 0, 292, 378, 291, 293, 294, 0,
	295, 284, 285, 296, 0, 297, 379, 380, 298, 0,
	305, 299, 300, 286, 301, 304, 381, 302, 303, 382,
	0, 306, 0, 307, 308, 309, 310, 311, 312, 313,
	0, 383, 384, 385, 0, 0, 314, 315, 386, 387,
	0, 316, 317, 318, 319, 0, 0, 320, 321, 322,
	323, 0, 324, 0, 388, 325, 326, 327, 389, 390,
	175, 2166, 328, 0, 0, 0, 0, 329, 330, 331,
	332, 333, 0, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 181,
	182, 183, 335, 336, 337, 338, 184, 339, 340, 0,
	185, 341, 342, 186, 187, 0, 0, 343, 344, 345,
	0, 188, 346, 0, 0, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 0, 196, 197,
	198, 0, 0, 0, 0, 0, 0, 0, 199, 200,
	399, 201, 347, 202, 348, 349, 0, 203, 0, 204,
	0, 205, 0, 0, 206, 207, 0, 208, 0, 0,
	0, 350, 209, 211, 210, 212, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 353, 354, 355,
	0, 215, 0, 216, 0, 0, 0, 0, 217, 356,
	0, 357, 0, 0, 218, 219, 0, 0, 220, 221,
	358, 359, 0, 0, 360, 225, 0, 222, 0, 0,
	223, 361, 224, 362, 363, 364, 365, 366, 0, 367,
	0, 0, 226, 227, 228, 0, 229, 230, 231, 0,
	233, 232, 0, 368, 0, 234, 0, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 0,
	242, 243, 245, 244, 0, 0, 0, 370, 246, 371,
	247, 248, 0, 249, 0, 0, 2163, 0, 0, 251,
	372, 0, 252, 0, 373, 253, 254, 255, 256, 257,
	0, 258, 374, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 376, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 0, 281, 282, 377, 283, 0, 287, 288, 289,
	290, 0, 292, 378, 291, 293, 294, 0, 295, 284,
	285, 296, 0, 297, 379, 380, 298, 0, 305, 299,
	300, 286, 301, 304, 381, 302, 303, 382, 0, 306,
	0, 307, 308, 309, 310, 311, 312, 313, 0, 383,
	384, 385, 0, 0, 314, 315, 386, 387, 0, 316,
	317, 318, 319, 0, 0, 320, 321, 322, 323, 0,
	324, 0, 388, 325, 326, 327, 389, 390, 175, 0,
	328, 0, 0, 0, 0, 329, 330, 331, 332, 333,
	0, 0, 0, 0, 178, 179, 0, 180, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 181, 182, 183,
	335, 336, 337, 338, 184, 339, 340, 0, 185, 341,
	342, 186, 187, 0, 0, 343, 344, 345, 0, 188,
	346, 0, 0, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 0, 196, 197, 198, 0,
	0, 0, 0, 0, 0, 0, 199, 200, 399, 201,
	347, 202, 348, 349, 0, 203, 0, 204, 0, 205,
	0, 0, 206, 207, 0, 208, 0, 0, 0, 350,
	209, 211, 210, 212, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 353, 354, 355, 0, 215,
	0, 216, 0, 0, 0, 0, 217, 356, 0, 357,
	0, 0, 218, 219, 0, 0, 220, 221, 358, 359,
	0, 0, 360, 225, 0, 222, 0, 0, 223, 361,
	224, 362, 363, 364, 365, 366, 0, 367, 0, 0,
	226, 227, 228, 0, 229, 230, 231, 0, 233, 232,
	0, 368, 0, 234, 0, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 0, 242, 243,
	245, 244, 0, 0, 0, 370, 246, 371, 247, 248,
	0, 249, 0, 743, 250, 0, 0, 251, 372, 0,
	252, 0, 373, 253, 254, 255, 256, 257, 0, 258,
	374, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	376, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 0,
	281, 282, 377, 283, 0, 287, 288, 289, 290, 0,
	292, 378, 291, 293, 294, 0, 295, 284, 285, 296,
	0, 297, 379, 380, 298, 0, 305, 299, 300, 286,
	301, 304, 381, 302, 303, 382, 0, 306, 0, 307,
	308, 309, 310, 311, 312, 313, 0, 383, 384, 385,
	0, 0, 314, 315, 386, 387, 0, 316, 317, 318,
	319, 0, 0, 320, 321, 322, 323, 0, 324, 0,
	388, 325, 326, 327, 389, 390, 0, 1367, 328, 175,
	0, 0, 0, 329, 330, 331, 332, 333, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 0, 180, 0,
	0, 0, 0, 334, 0, 0, 0, 0, 181, 182,
	183, 335, 336, 337, 338, 184, 339, 340, 0, 185,
	341, 342, 186, 187, 0, 0, 343, 344, 345, 0,
	188, 346, 0, 0, 0, 189, 190, 191, 0, 192,
	0, 193, 0, 194, 195, 0, 0, 196, 197, 198,
	0, 0, 0, 0, 0, 0, 0, 199, 200, 399,
	201, 347, 202, 348, 349, 0, 203, 0, 204, 0,
	205, 0, 0, 206, 207, 0, 208, 0, 0, 0,
	350, 209, 211, 210, 212, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 353, 354, 355, 0,
	215, 0, 216, 0, 0, 0, 0, 217, 356, 0,
	357, 0, 0, 218, 219, 0, 0, 220, 221, 358,
	359, 0, 0, 360, 225, 0, 222, 0, 0, 223,
	361, 224, 362, 363, 364, 365, 366, 0, 367, 0,
	0, 226, 227, 228, 0, 229, 230, 231, 0, 233,
	232, 0, 368, 0, 234, 0, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 369, 240, 0, 242,
	243, 245, 244, 0, 0, 0, 370, 246, 371, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 372,
	0, 252, 0, 373, 253, 254, 255, 256, 257, 0,
	258, 374, 259, 375, 260, 0, 261, 262, 263, 264,
	265, 376, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	0, 281, 282, 377, 283, 0, 287, 288, 289, 290,
	0, 292, 378, 291, 293, 294, 0, 295, 284, 285,
	296, 0, 297, 379, 380, 298, 0, 305, 299, 300,
	286, 301, 304, 381, 302, 303, 382, 0, 306, 0,
	307, 308, 309, 310, 311, 312, 313, 0, 383, 384,
	385, 0, 0, 314, 315, 386, 387, 0, 316, 317,
	318, 319, 0, 0, 320, 321, 322, 323, 0, 324,
	0, 388, 325, 326, 327, 389, 390, 0, 1365, 328,
	175, 0, 0, 0, 329, 330, 331, 332, 333, 0,
	0, 0, 0, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 181,
	182, 183, 335, 336, 337, 338, 184, 339, 340, 0,
	185, 341, 342, 186, 187, 0, 0, 343, 344, 345,
	0, 188, 346, 0, 0, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 0, 196, 197,
	198, 0, 0, 0, 0, 0, 0, 0, 199, 200,
	399, 201, 347, 202, 348, 349, 0, 203, 0, 204,
	0, 205, 0, 0, 206, 207, 0, 208, 0, 0,
	0, 350, 209, 211, 210, 212, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 353, 354, 355,
	0, 215, 0, 216, 0, 0, 0, 0, 217, 356,
	0, 357, 0, 0, 218, 219, 0, 0, 220, 221,
	358, 359, 0, 0, 360, 225, 0, 222, 0, 0,
	223, 361, 224, 362, 363, 364, 365, 366, 0, 367,
	0, 0, 226, 227, 228, 0, 229, 230, 231, 0,
	233, 232, 0, 368, 0, 234, 0, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 0,
	242, 243, 245, 244, 0, 0, 0, 370, 246, 371,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 0, 252, 0, 373, 253, 254, 255, 256, 257,
	0, 258, 374, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 376, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 0, 281, 282, 377, 283, 0, 287, 288, 289,
	290, 0, 292, 378, 291, 293, 294, 0, 295, 284,
	285, 296, 0, 297, 379, 380, 298, 0, 305, 299,
	300, 286, 301, 304, 381, 302, 303, 382, 0, 306,
	0, 307, 308, 309, 310, 311, 312, 313, 0, 383,
	384, 385, 0, 0, 314, 315, 386, 387, 0, 316,
	317, 318, 319, 0, 0, 320, 321, 322, 323, 0,
	324, 0, 388, 325, 326, 327, 389, 390, 175, 0,
	328, 0, 0, 0, 0, 329, 330, 331, 332, 333,
	0, 0, 0, 0, 178, 179, 1347, 180, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 181, 182, 183,
	335, 336, 337, 338, 184, 339, 340, 0, 185, 341,
	342, 186, 187, 0, 0, 343, 344, 345, 0, 188,
	346, 0, 0, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 0, 196, 197, 198, 0,
	0, 0, 0, 0, 0, 0, 199, 200, 399, 201,
	347, 202, 348, 349, 0, 203, 0, 204, 0, 205,
	0, 0, 206, 207, 0, 208, 0, 0, 0, 350,
	209, 211, 210, 212, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 353, 354, 355, 0, 215,
	0, 216, 0, 0, 0, 0, 217, 356, 0, 357,
	0, 0, 218, 219, 0, 0, 220, 221, 358, 359,
	0, 0, 360, 225, 0, 222, 0, 0, 223, 361,
	224, 362, 363, 364, 365, 366, 0, 367, 0, 0,
	226, 227, 228, 0, 229, 230, 231, 0, 233, 232,
	0, 368, 0, 234, 0, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 0, 242, 243,
	245, 244, 0, 0, 0, 370, 246, 371, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 0,
	252, 0, 373, 253, 254, 255, 256, 257, 0, 258,
	374, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	376, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 0,
	281, 282, 377, 283, 0, 287, 288, 289, 290, 0,
	292, 378, 291, 293, 294, 0, 295, 284, 285, 296,
	0, 297, 379, 380, 298, 0, 305, 299, 300, 286,
	301, 304, 381, 302, 303, 382, 0, 306, 0, 307,
	308, 309, 310, 311, 312, 313, 0, 383, 384, 385,
	0, 0, 314, 315, 386, 387, 0, 316, 317, 318,
	319, 0, 0, 320, 321, 322, 323, 0, 324, 0,
	388, 325, 326, 327, 389, 390, 0, 510, 328, 175,
	0, 0, 0, 329, 330, 331, 332, 333, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 0, 180, 0,
	0, 0, 0, 334, 0, 0, 0, 0, 181, 182,
	183, 335, 336, 337, 338, 184, 339, 340, 0, 185,
	341, 342, 186, 187, 0, 0, 343, 344, 858, 0,
	188, 346, 0, 0, 0, 189, 190, 191, 0, 192,
	0, 193, 0, 194, 195, 0, 0, 196, 197, 198,
	0, 0, 0, 0, 0, 0, 0, 199, 200, 399,
	201, 347, 202, 348, 349, 0, 203, 0, 204, 0,
	205, 0, 0, 206, 207, 0, 208, 0, 0, 0,
	350, 209, 211, 210, 212, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 353, 354, 355, 0,
	215, 0, 216, 0, 0, 0, 0, 217, 356, 0,
	357, 0, 0, 218, 219, 0, 0, 220, 221, 358,
	359, 0, 0, 360, 225, 0, 222, 0, 0, 223,
	361, 224, 362, 363, 364, 365, 366, 0, 367, 0,
	0, 226, 227, 228, 0, 229, 230, 231, 0, 233,
	232, 0, 368, 0, 234, 0, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 369, 512, 0, 242,
	243, 245, 244, 0, 0, 0, 370, 246, 371, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 372,
	0, 252, 0, 373, 253, 254, 255, 256, 257, 0,
	258, 374, 259, 375, 260, 0, 261, 262, 263, 264,
	265, 376, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	0, 281, 282, 377, 283, 0, 287, 288, 289, 290,
	0, 292, 378, 291, 293, 294, 0, 295, 284, 285,
	296, 0, 297, 379, 380, 298, 0, 305, 299, 300,
	286, 301, 304, 381, 302, 303, 382, 0, 306, 0,
	307, 308, 309, 310, 311, 312, 313, 0, 507, 384,
	385, 0, 0, 314, 315, 386, 387, 0, 316, 317,
	318, 319, 0, 0, 320, 321, 322, 323, 0, 324,
	0, 388, 325, 326, 327, 389, 390, 0, 1225, 328,
	175, 0, 0, 0, 329, 330, 331, 332, 333, 0,
	0, 0, 0, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 181,
	182, 183, 335, 336, 337, 338, 184, 339, 340, 0,
	185, 341, 342, 186, 187, 0, 0, 343, 344, 345,
	0, 188, 346, 0, 0, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 0, 196, 197,
	198, 0, 0, 0, 0, 0, 0, 0, 199, 200,
	399, 201, 347, 202, 348, 349, 0, 203, 0, 204,
	0, 205, 0, 0, 206, 207, 0, 208, 0, 0,
	0, 350, 209, 211, 210, 212, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 353, 354, 355,
	0, 215, 0, 216, 0, 0, 0, 0, 217, 356,
	0, 357, 0, 0, 218, 219, 0, 0, 220, 221,
	1224, 359, 0, 0, 360, 225, 0, 222, 0, 0,
	223, 361, 224, 362, 363, 364, 365, 366, 0, 367,
	0, 0, 226, 227, 228, 0, 229, 230, 231, 0,
	233, 232, 0, 368, 0, 234, 0, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 0,
	242, 243, 245, 244, 0, 0, 0, 370, 246, 371,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 0, 252, 0, 373, 253, 254, 255, 256, 257,
	0, 258, 374, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 376, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 0, 281, 282, 377, 283, 0, 287, 288, 289,
	290, 0, 292, 378, 291, 293, 294, 0, 295, 284,
	285, 296, 0, 297, 379, 380, 298, 0, 305, 299,
	300, 286, 301, 304, 381, 302, 303, 382, 0, 306,
	0, 307, 308, 309, 310, 311, 312, 313, 0, 383,
	384, 385, 0, 0, 314, 315, 386, 387, 0, 316,
	317, 318, 319, 0, 0, 320, 321, 322, 323, 0,
	324, 0, 388, 325, 326, 327, 389, 390, 0, 510,
	328, 175, 0, 0, 0, 329, 330, 331, 332, 333,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 0, 334, 0, 0, 0, 0,
	181, 182, 183, 335, 336, 337, 338, 184, 339, 340,
	0, 185, 341, 342, 186, 187, 0, 0, 343, 344,
	858, 0, 188, 346, 0, 0, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 0, 196,
	197, 198, 0, 0, 0, 0, 0, 0, 0, 199,
	200, 399, 201, 347, 202, 348, 349, 0, 203, 0,
	204, 0, 205, 0, 0, 206, 207, 0, 208, 0,
	0, 0, 350, 209, 211, 210, 212, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 353, 354,
	355, 0, 215, 0, 216, 0, 0, 0, 0, 217,
	356, 0, 357, 0, 0, 218, 219, 0, 0, 220,
	221, 358, 359, 0, 0, 360, 225, 0, 222, 0,
	0, 223, 361, 224, 362, 363, 364, 365, 366, 0,
	367, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 368, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 512,
	0, 242, 243, 245, 244, 0, 0, 0, 370, 246,
	371, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 0, 252, 0, 373, 253, 254, 255, 256,
	257, 0, 258, 374, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 376, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 0, 281, 282, 377, 283, 0, 287, 288,
	289, 290, 0, 292, 378, 291, 293, 294, 0, 295,
	284, 285, 296, 0, 297, 379, 380, 298, 0, 305,
	299, 300, 286, 301, 304, 381, 302, 303, 382, 0,
	306, 0, 307, 308, 309, 310, 311, 312, 313, 0,
	507, 384, 385, 0, 0, 314, 859, 386, 387, 0,
	316, 317, 318, 319, 0, 0, 320, 321, 322, 323,
	0, 324, 0, 388, 325, 326, 327, 389, 390, 0,
	510, 328, 175, 0, 0, 0, 329, 330, 331, 332,
	333, 0, 0, 0, 0, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 0, 334, 0, 0, 0,
	0, 181, 182, 183, 335, 336, 337, 338, 184, 339,
	340, 0, 185, 341, 342, 186, 187, 0, 0, 343,
	344, 345, 0, 501, 346, 0, 0, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 0,
	196, 197, 198, 0, 0, 0, 0, 0, 0, 0,
	199, 200, 399, 201, 347, 202, 348, 349, 0, 203,
	0, 204, 0, 205, 0, 0, 206, 207, 0, 208,
	0, 0, 0, 350, 209, 211, 210, 212, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 353,
	354, 355, 0, 215, 0, 216, 0, 0, 0, 0,
	217, 356, 0, 357, 0, 0, 218, 219, 0, 0,
	220, 221, 358, 359, 0, 0, 360, 225, 0, 222,
	0, 0, 223, 361, 224, 362, 363, 364, 365, 366,
	0, 367, 0, 0, 226, 227, 228, 0, 229, 230,
	231, 0, 233, 232, 0, 368, 0, 234, 0, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	512, 0, 242, 243, 245, 244, 0, 0, 0, 370,
	246, 371, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 372, 0, 252, 0, 373, 253, 254, 255,
	256, 257, 0, 258, 374, 259, 375, 260, 0, 261,
	262, 263, 264, 265, 376, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 0, 281, 282, 377, 283, 0, 287,
	288, 289, 290, 0, 292, 378, 291, 842, 294, 0,
	295, 284, 285, 296, 0, 297, 379, 380, 298, 0,
	305, 299, 300, 286, 301, 304, 381, 302, 303, 382,
	0, 306, 0, 307, 308, 309, 310, 311, 312, 313,
	0, 507, 384, 385, 0, 0, 314, 315, 386, 387,
	0, 316, 317, 318, 319, 0, 0, 320, 321, 322,
	323, 0, 324, 0, 388, 325, 326, 327, 389, 390,
	0, 817, 328, 175, 0, 0, 0, 329, 330, 331,
	332, 333, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 181, 182, 183, 335, 336, 337, 338, 184,
	339, 340, 0, 185, 341, 342, 186, 187, 0, 0,
	343, 344, 345, 0, 188, 346, 0, 0, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	0, 196, 197, 198, 0, 0, 0, 0, 0, 0,
	0, 199, 200, 399, 201, 347, 202, 348, 349, 0,
	203, 0, 204, 0, 205, 0, 0, 206, 207, 0,
	208, 0, 0, 0, 350, 209, 211, 210, 212, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	353, 354, 355, 0, 215, 0, 216, 0, 0, 0,
	0, 217, 356, 0, 357, 0, 0, 218, 219, 0,
	0, 220, 221, 816, 359, 0, 0, 360, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 376, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 0, 281, 282, 377, 283, 0,
	287, 288, 289, 290, 0, 292, 378, 291, 293, 294,
	0, 295, 284, 285, 296, 0, 297, 379, 380, 298,
	0, 305, 299, 300, 286, 301, 304, 381, 302, 303,
	382, 0, 306, 0, 307, 308, 309, 310, 311, 312,
	313, 0, 383, 384, 385, 0, 0, 314, 315, 386,
	387, 0, 316, 317, 318, 319, 0, 0, 320, 321,
	322, 323, 0, 324, 0, 388, 325, 326, 327, 389,
	390, 0, 814, 328, 175, 0, 0, 0, 329, 330,
	331, 332, 333, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 0, 0, 334, 0,
	0, 0, 0, 181, 182, 183, 335, 336, 337, 338,
	184, 339, 340, 0, 185, 341, 342, 186, 187, 0,
	0, 343, 344, 345, 0, 188, 346, 0, 0, 0,
	189, 190, 191, 0, 192, 0, 193, 0, 194, 195,
	0, 0, 196, 197, 198, 0, 0, 0, 0, 0,
	0, 0, 199, 200, 399, 201, 347, 202, 348, 349,
	0, 203, 0, 204, 0, 205, 0, 0, 206, 207,
	0, 208, 0, 0, 0, 350, 209, 211, 210, 212,
	351, 352, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 353, 354, 355, 0, 215, 0, 216, 0, 0,
	0, 0, 217, 356, 0, 357, 0, 0, 218, 219,
	0, 0, 220, 221, 813, 359, 0, 0, 360, 225,
	0, 222, 0, 0, 223, 361, 224, 362, 363, 364,
	365, 366, 0, 367, 0, 0, 226, 227, 228, 0,
	229, 230, 231, 0, 233, 232, 0, 368, 0, 234,
	0, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 369, 240, 0, 242, 243, 245, 244, 0, 0,
	0, 370, 246, 371, 247, 248, 0, 249, 0, 0,
	250, 0, 0, 251, 372, 0, 252, 0, 373, 253,
	254, 255, 256, 257, 0, 258, 374, 259, 375, 260,
	0, 261, 262, 263, 264, 265, 376, 266, 267, 0,
	268, 269, 270, 271, 272, 0, 274, 275, 273, 276,
	277, 278, 279, 0, 280, 0, 281, 282, 377, 283,
	0, 287, 288, 289, 290, 0, 292, 378, 291, 293,
	294, 0, 295, 284, 285, 296, 0, 297, 379, 380,
	298, 0, 305, 299, 300, 286, 301, 304, 381, 302,
	303, 382, 0, 306, 0, 307, 308, 309, 310, 311,
	312, 313, 0, 383, 384, 385, 0, 0, 314, 315,
	386, 387, 0, 316, 317, 318, 319, 0, 0, 320,
	321, 322, 323, 0, 324, 0, 388, 325, 326, 327,
	389, 390, 0, 810, 328, 175, 0, 0, 0, 329,
	330, 331, 332, 333, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 0, 180, 0, 0, 0, 0, 334,
	0, 0, 0, 0, 181, 182, 183, 335, 336, 337,
	338, 184, 339, 340, 0, 185, 341, 342, 186, 187,
	0, 0, 343, 344, 345, 0, 188, 346, 0, 0,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 0, 196, 197, 198, 0, 0, 0, 0,
	0, 0, 0, 199, 200, 399, 201, 347, 202, 348,
	349, 0, 203, 0, 204, 0, 205, 0, 0, 206,
	207, 0, 208, 0, 0, 0, 350, 209, 211, 210,
	212, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 353, 354, 355, 0, 215, 0, 216, 0,
	0, 0, 0, 217, 356, 0, 357, 0, 0, 218,
	219, 0, 0, 220, 221, 809, 359, 0, 0, 360,
	225, 0, 222, 0, 0, 223, 361, 224, 362, 363,
	364, 365, 366, 0, 367, 0, 0, 226, 227, 228,
	0, 229, 230, 231, 0, 233, 232, 0, 368, 0,
	234, 0, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 0, 242, 243, 245, 244, 0,
	0, 0, 370, 246, 371, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 0, 252, 0, 373,
	253, 254, 255, 256, 257, 0, 258, 374, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 376, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 0, 281, 282, 377,
	283, 0, 287, 288, 289, 290, 0, 292, 378, 291,
	293, 294, 0, 295, 284, 285, 296, 0, 297, 379,
	380, 298, 0, 305, 299, 300, 286, 301, 304, 381,
	302, 303, 382, 0, 306, 0, 307, 308, 309, 310,
	311, 312, 313, 0, 383, 384, 385, 0, 0, 314,
	315, 386, 387, 0, 316, 317, 318, 319, 0, 0,
	320, 321, 322, 323, 0, 324, 0, 388, 325, 326,
	327, 389, 390, 0, 807, 328, 175, 0, 0, 0,
	329, 330, 331, 332, 333, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 0, 180, 0, 0, 0, 0,
	334, 0, 0, 0, 0, 181, 182, 183, 335, 336,
	337, 338, 184, 339, 340, 0, 185, 341, 342, 186,
	187, 0, 0, 343, 344, 345, 0, 188, 346, 0,
	0, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 0, 196, 197, 198, 0, 0, 0,
	0, 0, 0, 0, 199, 200, 399, 201, 347, 202,
	348, 349, 0, 203, 0, 204, 0, 205, 0, 0,
	206, 207, 0, 208, 0, 0, 0, 350, 209, 211,
	210, 212, 351, 352, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 353, 354, 355, 0, 215, 0, 216,
	0, 0, 0, 0, 217, 356, 0, 357, 0, 0,
	218, 219, 0, 0, 220, 221, 806, 359, 0, 0,
	360, 225, 0, 222, 0, 0, 223, 361, 224, 362,
	363, 364, 365, 366, 0, 367, 0, 0, 226, 227,
	228, 0, 229, 230, 231, 0, 233, 232, 0, 368,
	0, 234, 0, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 0, 242, 243, 245, 244,
	0, 0, 0, 370, 246, 371, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 372, 0, 252, 0,
	373, 253, 254, 255, 256, 257, 0, 258, 374, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 376, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 0, 281, 282,
	377, 283, 0, 287, 288, 289, 290, 0, 292, 378,
	291, 293, 294, 0, 295, 284, 285, 296, 0, 297,
	379, 380, 298, 0, 305, 299, 300, 286, 301, 304,
	381, 302, 303, 382, 0, 306, 0, 307, 308, 309,
	310, 311, 312, 313, 0, 383, 384, 385, 0, 0,
	314, 315, 386, 387, 0, 316, 317, 318, 319, 0,
	0, 320, 321, 322, 323, 0, 324, 0, 388, 325,
	326, 327, 389, 390, 0, 803, 328, 175, 0, 0,
	0, 329, 330, 331, 332, 333, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 0, 180, 0, 0, 0,
	0, 334, 0, 0, 0, 0, 181, 182, 183, 335,
	336, 337, 338, 184, 339, 340, 0, 185, 341, 342,
	186, 187, 0, 0, 343, 344, 345, 0, 188, 346,
	0, 0, 0, 189, 190, 191, 0, 192, 0, 193,
	0, 194, 195, 0, 0, 196, 197, 198, 0, 0,
	0, 0, 0, 0, 0, 199, 200, 399, 201, 347,
	202, 348, 349, 0, 203, 0, 204, 0, 205, 0,
	0, 206, 207, 0, 208, 0, 0, 0, 350, 209,
	211, 210, 212, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 353, 354, 355, 0, 215, 0,
	216, 0, 0, 0, 0, 217, 356, 0, 357, 0,
	0, 218, 219, 0, 0, 220, 221, 802, 359, 0,
	0, 360, 225, 0, 222, 0, 0, 223, 361, 224,
	362, 363, 364, 365, 366, 0, 367, 0, 0, 226,
	227, 228, 0, 229, 230, 231, 0, 233, 232, 0,
	368, 0, 234, 0, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 369, 240, 0, 242, 243, 245,
	244, 0, 0, 0, 370, 246, 371, 247, 248, 0,
	249, 0, 0, 250, 0, 0, 251, 372, 0, 252,
	0, 373, 253, 254, 255, 256, 257, 0, 258, 374,
	259, 375, 260, 0, 261, 262, 263, 264, 265, 376,
	266, 267, 0, 268, 269, 270, 271, 272, 0, 274,
	275, 273, 276, 277, 278, 279, 0, 280, 0, 281,
	282, 377, 283, 0, 287, 288, 289, 290, 0, 292,
	378, 291, 293, 294, 0, 295, 284, 285, 296, 0,
	297, 379, 380, 298, 0, 305, 299, 300, 286, 301,
	304, 381, 302, 303, 382, 0, 306, 0, 307, 308,
	309, 310, 311, 312, 313, 0, 383, 384, 385, 0,
	0, 314, 315, 386, 387, 0, 316, 317, 318, 319,
	0, 0, 320, 321, 322, 323, 0, 324, 0, 388,
	325, 326, 327, 389, 390, 175, 0, 328, 0, 0,
	0, 0, 329, 330, 331, 332, 333, 0, 0, 0,
	0, 178, 179, 791, 180, 0, 0, 0, 0, 334,
	0, 0, 0, 0, 181, 182, 183, 335, 336, 337,
	338, 184, 339, 340, 0, 185, 341, 342, 186, 187,
	0, 0, 343, 344, 345, 0, 188, 346, 0, 0,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 0, 196, 197, 198, 0, 0, 0, 0,
	0, 0, 0, 199, 200, 399, 201, 347, 202, 348,
	349, 0, 203, 0, 204, 0, 205, 0, 0, 206,
	207, 0, 208, 0, 0, 0, 350, 209, 211, 210,
	212, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 353, 354, 355, 0, 215, 0, 216, 0,
	0, 0, 0, 217, 356, 0, 357, 0, 0, 218,
	219, 0, 0, 220, 221, 358, 359, 0, 0, 360,
	225, 0, 222, 0, 0, 223, 361, 224, 362, 363,
	364, 365, 366, 0, 367, 0, 0, 226, 227, 228,
	0, 229, 230, 231, 0, 233, 232, 0, 368, 0,
	234, 0, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 0, 242, 243, 245, 244, 0,
	0, 0, 370, 246, 371, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 0, 252, 0, 373,
	253, 254, 255, 256, 257, 0, 258, 374, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 376, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 0, 281, 282, 377,
	283, 0, 287, 288, 289, 290, 0, 292, 378, 291,
	293, 294, 0, 295, 284, 285, 296, 0, 297, 379,
	380, 298, 0, 305, 299, 300, 286, 301, 304, 381,
	302, 303, 382, 0, 306, 0, 307, 308, 309, 310,
	311, 312, 313, 0, 383, 384, 385, 0, 0, 314,
	315, 386, 387, 0, 316, 317, 318, 319, 0, 0,
	320, 321, 322, 323, 0, 324, 0, 388, 325, 326,
	327, 389, 390, 0, 789, 328, 175, 0, 0, 0,
	329, 330, 331, 332, 333, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 0, 180, 0, 0, 0, 0,
	334, 0, 0, 0, 0, 181, 182, 183, 335, 336,
	337, 338, 184, 339, 340, 0, 185, 341, 342, 186,
	187, 0, 0, 343, 344, 345, 0, 188, 346, 0,
	0, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 0, 196, 197, 198, 0, 0, 0,
	0, 0, 0, 0, 199, 200, 399, 201, 347, 202,
	348, 349, 0, 203, 0, 204, 0, 205, 0, 0,
	206, 207, 0, 208, 0, 0, 0, 350, 209, 211,
	210, 212, 351, 352, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 353, 354, 355, 0, 215, 0, 216,
	0, 0, 0, 0, 217, 356, 0, 357, 0, 0,
	218, 219, 0, 0, 220, 221, 788, 359, 0, 0,
	360, 225, 0, 222, 0, 0, 223, 361, 224, 362,
	363, 364, 365, 366, 0, 367, 0, 0, 226, 227,
	228, 0, 229, 230, 231, 0, 233, 232, 0, 368,
	0, 234, 0, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 0, 242, 243, 245, 244,
	0, 0, 0, 370, 246, 371, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 372, 0, 252, 0,
	373, 253, 254, 255, 256, 257, 0, 258, 374, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 376, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 0, 281, 282,
	377, 283, 0, 287, 288, 289, 290, 0, 292, 378,
	291, 293, 294, 0, 295, 284, 285, 296, 0, 297,
	379, 380, 298, 0, 305, 299, 300, 286, 301, 304,
	381, 302, 303, 382, 0, 306, 0, 307, 308, 309,
	310, 311, 312, 313, 0, 383, 384, 385, 0, 0,
	314, 315, 386, 387, 0, 316, 317, 318, 319, 0,
	0, 320, 321, 322, 323, 0, 324, 0, 388, 325,
	326, 327, 389, 390, 0, 785, 328, 175, 0, 0,
	0, 329, 330, 331, 332, 333, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 0, 180, 0, 0, 0,
	0, 334, 0, 0, 0, 0, 181, 182, 183, 335,
	336, 337, 338, 184, 339, 340, 0, 185, 341, 342,
	186, 187, 0, 0, 343, 344, 345, 0, 188, 346,
	0, 0, 0, 189, 190, 191, 0, 192, 0, 193,
	0, 194, 195, 0, 0, 196, 197, 198, 0, 0,
	0, 0, 0, 0, 0, 199, 200, 399, 201, 347,
	202, 348, 349, 0, 203, 0, 204, 0, 205, 0,
	0, 206, 207, 0, 208, 0, 0, 0, 350, 209,
	211, 210, 212, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 353, 354, 355, 0, 215, 0,
	216, 0, 0, 0, 0, 217, 356, 0, 357, 0,
	0, 218, 219, 0, 0, 220, 221, 358, 359, 0,
	0, 360, 225, 0, 222, 0, 0, 223, 361, 224,
	362, 363, 364, 365, 366, 0, 367, 0, 0, 226,
	227, 228, 0, 229, 230, 231, 0, 233, 232, 0,
	368, 0, 234, 0, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 369, 240, 0, 242, 243, 245,
	244, 0, 0, 0, 370, 246, 371, 247, 248, 0,
	249, 0, 0, 250, 0, 0, 251, 372, 0, 252,
	0, 373, 253, 254, 255, 256, 257, 0, 258, 374,
	259, 375, 260, 0, 261, 262, 263, 264, 265, 376,
	266, 267, 0, 268, 269, 270, 271, 272, 0, 274,
	275, 273, 276, 277, 278, 279, 0, 280, 0, 281,
	282, 377, 283, 0, 287, 288, 289, 290, 0, 292,
	378, 291, 293, 294, 0, 295, 284, 285, 296, 0,
	297, 379, 380, 298, 0, 305, 299, 300, 286, 301,
	304, 381, 302, 303, 382, 0, 306, 0, 307, 308,
	309, 310, 311, 312, 313, 0, 383, 384, 385, 0,
	0, 314, 315, 386, 387, 0, 316, 317, 318, 319,
	0, 0, 320, 321, 322, 323, 0, 324, 0, 388,
	325, 326, 327, 389, 390, 0, 783, 328, 175, 0,
	0, 0, 329, 330, 331, 332, 333, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 0, 180, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 181, 182, 183,
	335, 336, 337, 338, 184, 339, 340, 0, 185, 341,
	342, 186, 187, 0, 0, 343, 344, 345, 0, 188,
	346, 0, 0, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 0, 196, 197, 198, 0,
	0, 0, 0, 0, 0, 0, 199, 200, 399, 201,
	347, 202, 348, 349, 0, 203, 0, 204, 0, 205,
	0, 0, 206, 207, 0, 208, 0, 0, 0, 350,
	209, 211, 210, 212, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 353, 354, 355, 0, 215,
	0, 216, 0, 0, 0, 0, 217, 356, 0, 357,
	0, 0, 218, 219, 0, 0, 220, 221, 358, 359,
	0, 0, 360, 225, 0, 222, 0, 0, 223, 361,
	224, 362, 363, 364, 365, 366, 0, 367, 0, 0,
	226, 227, 228, 0, 229, 230, 231, 0, 233, 232,
	0, 368, 0, 234, 0, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 0, 242, 243,
	245, 244, 0, 0, 0, 370, 246, 371, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 0,
	252, 0, 373, 253, 254, 255, 256, 257, 0, 258,
	374, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	376, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 0,
	281, 282, 377, 283, 0, 287, 288, 289, 290, 0,
	292, 378, 291, 293, 294, 0, 295, 284, 285, 296,
	0, 297, 379, 380, 298, 0, 305, 299, 300, 286,
	301, 304, 381, 302, 303, 382, 0, 306, 0, 307,
	308, 309, 310, 311, 312, 313, 0, 383, 384, 385,
	0, 0, 314, 315, 386, 387, 0, 316, 317, 318,
	319, 0, 0, 320, 321, 322, 323, 0, 324, 0,
	388, 325, 326, 327, 389, 390, 0, 779, 328, 175,
	0, 0, 0, 329, 330, 331, 332, 333, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 0, 180, 0,
	0, 0, 0, 334, 0, 0, 0, 0, 181, 182,
	183, 335, 336, 337, 338, 184, 339, 340, 0, 185,
	341, 342, 186, 187, 0, 0, 343, 344, 345, 0,
	188, 346, 0, 0, 0, 189, 190, 191, 0, 192,
	0, 193, 0, 194, 195, 0, 0, 196, 197, 198,
	0, 0, 0, 0, 0, 0, 0, 199, 200, 399,
	201, 347, 202, 348, 349, 0, 203, 0, 204, 0,
	205, 0, 0, 206, 207, 0, 208, 0, 0, 0,
	350, 209, 211, 210, 212, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 353, 354, 355, 0,
	215, 0, 216, 0, 0, 0, 0, 217, 356, 0,
	357, 0, 0, 218, 219, 0, 0, 220, 221, 781,
	359, 0, 0, 360, 225, 0, 222, 0, 0, 223,
	361, 224, 362, 363, 364, 365, 366, 0, 367, 0,
	0, 226, 227, 228, 0, 229, 230, 231, 0, 233,
	232, 0, 368, 0, 234, 0, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 369, 240, 0, 242,
	243, 245, 244, 0, 0, 0, 370, 246, 371, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 372,
	0, 252, 0, 373, 253, 254, 255, 256, 257, 0,
	258, 374, 259, 375, 260, 0, 261, 262, 263, 264,
	265, 376, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	0, 281, 282, 377, 283, 0, 287, 288, 289, 290,
	0, 292, 378, 291, 293, 294, 0, 295, 284, 285,
	296, 0, 297, 379, 380, 298, 0, 305, 299, 300,
	286, 301, 304, 381, 302, 303, 382, 0, 306, 0,
	307, 308, 309, 310, 311, 312, 313, 0, 383, 384,
	385, 0, 0, 314, 315, 386, 387, 0, 316, 317,
	318, 319, 0, 0, 320, 321, 322, 323, 0, 324,
	0, 388, 325, 326, 327, 389, 390, 0, 755, 328,
	175, 0, 0, 0, 329, 330, 331, 332, 333, 0,
	0, 0, 0, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 181,
	182, 183, 335, 336, 337, 338, 184, 339, 340, 0,
	185, 341, 342, 186, 187, 0, 0, 343, 344, 345,
	0, 188, 346, 0, 0, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 0, 196, 197,
	198, 0, 0, 0, 0, 0, 0, 0, 199, 200,
	399, 201, 347, 202, 348, 349, 0, 203, 0, 204,
	0, 205, 0, 0, 206, 207, 0, 208, 0, 0,
	0, 350, 209, 211, 210, 212, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 353, 354, 355,
	0, 215, 0, 216, 0, 0, 0, 0, 217, 356,
	0, 357, 0, 0, 218, 219, 0, 0, 220, 221,
	757, 359, 0, 0, 360, 225, 0, 222, 0, 0,
	223, 361, 224, 362, 363, 364, 365, 366, 0, 367,
	0, 0, 226, 227, 228, 0, 229, 230, 231, 0,
	233, 232, 0, 368, 0, 234, 0, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 0,
	242, 243, 245, 244, 0, 0, 0, 370, 246, 371,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 0, 252, 0, 373, 253, 254, 255, 256, 257,
	0, 258, 374, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 376, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 0, 281, 282, 377, 283, 0, 287, 288, 289,
	290, 0, 292, 378, 291, 293, 294, 0, 295, 284,
	285, 296, 0, 297, 379, 380, 298, 0, 305, 299,
	300, 286, 301, 304, 381, 302, 303, 382, 0, 306,
	0, 307, 308, 309, 310, 311, 312, 313, 0, 383,
	384, 385, 0, 0, 314, 315, 386, 387, 0, 316,
	317, 318, 319, 0, 0, 320, 321, 322, 323, 0,
	324, 0, 388, 325, 326, 327, 389, 390, 0, 753,
	328, 175, 0, 0, 0, 329, 330, 331, 332, 333,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 0, 334, 0, 0, 0, 0,
	181, 182, 183, 335, 336, 337, 338, 184, 339, 340,
	0, 185, 341, 342, 186, 187, 0, 0, 343, 344,
	345, 0, 188, 346, 0, 0, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 0, 196,
	197, 198, 0, 0, 0, 0, 0, 0, 0, 199,
	200, 399, 201, 347, 202, 348, 349, 0, 203, 0,
	204, 0, 205, 0, 0, 206, 207, 0, 208, 0,
	0, 0, 350, 209, 211, 210, 212, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 353, 354,
	355, 0, 215, 0, 216, 0, 0, 0, 0, 217,
	356, 0, 357, 0, 0, 218, 219, 0, 0, 220,
	221, 358, 359, 0, 0, 360, 225, 0, 222, 0,
	0, 223, 361, 224, 362, 363, 364, 365, 366, 0,
	367, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 368, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	0, 242, 243, 245, 244, 0, 0, 0, 370, 246,
	371, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 0, 252, 0, 373, 253, 254, 255, 256,
	257, 0, 258, 374, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 376, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 0, 281, 282, 377, 283, 0, 287, 288,
	289, 290, 0, 292, 378, 291, 293, 294, 0, 295,
	284, 285, 296, 0, 297, 379, 380, 298, 0, 305,
	299, 300, 286, 301, 304, 381, 302, 303, 382, 0,
	306, 0, 307, 308, 309, 310, 311, 312, 313, 0,
	383, 384, 385, 0, 0, 314, 315, 386, 387, 0,
	316, 317, 318, 319, 0, 0, 320, 321, 322, 323,
	0, 324, 0, 388, 325, 326, 327, 389, 390, 0,
	510, 328, 175, 0, 0, 0, 329, 330, 331, 332,
	333, 0, 0, 0, 0, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 0, 334, 0, 0, 0,
	0, 181, 182, 183, 335, 336, 337, 338, 184, 339,
	340, 0, 185, 341, 342, 186, 187, 0, 0, 343,
	344, 345, 0, 501, 346, 0, 0, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 0,
	196, 197, 198, 0, 0, 0, 0, 0, 0, 0,
	199, 200, 399, 201, 347, 202, 348, 349, 0, 203,
	0, 204, 0, 205, 0, 0, 206, 207, 0, 208,
	0, 0, 0, 350, 209, 211, 210, 212, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 353,
	354, 355, 0, 215, 0, 216, 0, 0, 0, 0,
	217, 356, 0, 357, 0, 0, 218, 219, 0, 0,
	220, 221, 358, 359, 0, 0, 360, 225, 0, 222,
	0, 0, 223, 361, 224, 362, 363, 364, 365, 366,
	0, 367, 0, 0, 226, 227, 228, 0, 229, 230,
	231, 0, 233, 232, 0, 368, 0, 234, 0, 0,
	500, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	512, 0, 242, 243, 245, 244, 0, 0, 0, 370,
	246, 371, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 372, 0, 252, 0, 373, 253, 254, 255,
	256, 257, 0, 258, 374, 259, 375, 260, 0, 261,
	262, 263, 264, 265, 376, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 0, 281, 282, 502, 283, 0, 287,
	288, 289, 290, 0, 292, 378, 291, 503, 294, 0,
	295, 284, 285, 296, 0, 297, 379, 380, 298, 0,
	305, 299, 300, 286, 301, 304, 381, 302, 303, 382,
	0, 306, 0, 307, 308, 309, 310, 311, 312, 313,
	0, 507, 384, 385, 0, 0, 314, 505, 386, 387,
	0, 316, 317, 318, 319, 0, 0, 320, 321, 322,
	323, 0, 324, 0, 388, 325, 326, 327, 389, 390,
	0, 492, 328, 175, 0, 0, 0, 329, 330, 331,
	332, 333, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 181, 182, 183, 335, 336, 337, 338, 184,
	339, 340, 0, 185, 341, 342, 186, 187, 0, 0,
	343, 344, 345, 0, 188, 346, 0, 0, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	0, 196, 197, 198, 0, 0, 0, 0, 0, 0,
	0, 199, 200, 399, 201, 347, 202, 348, 349, 0,
	203, 0, 204, 0, 205, 0, 0, 206, 207, 0,
	208, 0, 0, 0, 350, 209, 211, 210, 212, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	353, 354, 355, 0, 215, 0, 216, 0, 0, 0,
	0, 217, 356, 0, 357, 0, 0, 218, 219, 0,
	0, 220, 221, 358, 359, 0, 0, 360, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 376, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 0, 281, 282, 377, 283, 0,
	493, 288, 289, 290, 0, 292, 378, 291, 293, 294,
	0, 295, 284, 285, 296, 0, 297, 379, 380, 298,
	0, 305, 299, 300, 286, 301, 304, 381, 302, 303,
	382, 0, 306, 0, 307, 308, 309, 310, 311, 312,
	313, 0, 383, 384, 385, 0, 0, 314, 315, 386,
	387, 0, 316, 317, 318, 319, 0, 0, 320, 321,
	322, 323, 0, 324, 0, 388, 325, 326, 327, 389,
	390, 0, 490, 328, 175, 0, 0, 0, 329, 330,
	331, 332, 333, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 0, 0, 334, 0,
	0, 0, 0, 181, 182, 183, 335, 336, 337, 338,
	184, 339, 340, 0, 185, 341, 342, 186, 187, 0,
	0, 343, 344, 345, 0, 188, 346, 0, 0, 0,
	189, 190, 191, 0, 192, 0, 193, 0, 194, 195,
	0, 0, 196, 197, 198, 0, 0, 0, 0, 0,
	0, 0, 199, 200, 399, 201, 347, 202, 348, 349,
	0, 203, 0, 204, 0, 205, 0, 0, 206, 207,
	0, 208, 0, 0, 0, 350, 209, 211, 210, 212,
	351, 352, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 353, 354, 355, 0, 215, 0, 216, 0, 0,
	0, 0, 217, 356, 0, 357, 0, 0, 218, 219,
	0, 0, 220, 221, 358, 359, 0, 0, 360, 225,
	0, 222, 0, 0, 223, 361, 224, 362, 363, 364,
	365, 366, 0, 367, 0, 0, 226, 227, 228, 0,
	229, 230, 231, 0, 233, 232, 0, 368, 0, 234,
	0, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 369, 240, 0, 242, 243, 245, 244, 0, 0,
	0, 370, 246, 371, 247, 248, 0, 249, 0, 0,
	250, 0, 0, 251, 372, 0, 252, 0, 373, 253,
	254, 255, 256, 257, 0, 258, 374, 259, 375, 260,
	0, 261, 262, 263, 264, 265, 376, 266, 267, 0,
	268, 269, 270, 271, 272, 0, 274, 275, 273, 276,
	277, 278, 279, 0, 280, 0, 281, 282, 377, 283,
	0, 287, 288, 289, 290, 0, 292, 378, 291, 293,
	294, 0, 295, 284, 285, 296, 0, 297, 379, 380,
	298, 0, 305, 299, 300, 286, 301, 304, 381, 302,
	303, 382, 0, 306, 0, 307, 308, 309, 310, 311,
	312, 313, 0, 383, 384, 385, 0, 0, 314, 315,
	386, 387, 0, 316, 317, 318, 319, 0, 0, 320,
	321, 322, 323, 0, 324, 0, 388, 325, 326, 327,
	389, 390, 0, 482, 328, 175, 0, 0, 0, 329,
	330, 331, 332, 333, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 0, 180, 0, 0, 0, 0, 334,
	0, 0, 0, 0, 181, 182, 183, 335, 336, 337,
	338, 184, 339, 340, 0, 185, 341, 342, 186, 187,
	0, 0, 343, 344, 345, 0, 188, 346, 0, 0,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 0, 196, 197, 198, 0, 0, 0, 0,
	0, 0, 0, 199, 200, 399, 201, 347, 202, 348,
	349, 0, 203, 0, 204, 0, 205, 0, 0, 206,
	207, 0, 208, 0, 0, 0, 350, 209, 211, 210,
	212, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 353, 354, 355, 0, 215, 0, 216, 0,
	0, 0, 0, 217, 356, 0, 357, 0, 0, 218,
	219, 0, 0, 220, 221, 358, 359, 0, 0, 360,
	225, 0, 222, 0, 0, 223, 361, 224, 362, 363,
	364, 365, 366, 0, 367, 0, 0, 226, 227, 228,
	0, 229, 230, 231, 0, 233, 232, 0, 368, 0,
	234, 0, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 0, 242, 243, 245, 244, 0,
	0, 0, 370, 246, 371, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 0, 252, 0, 373,
	253, 254, 255, 256, 257, 0, 258, 374, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 376, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 0, 281, 282, 377,
	283, 0, 287, 288, 289, 290, 0, 292, 378, 291,
	293, 294, 0, 295, 284, 285, 296, 0, 297, 379,
	380, 298, 0, 305, 299, 300, 286, 301, 304, 381,
	302, 303, 382, 0, 306, 0, 307, 308, 309, 310,
	311, 312, 313, 0, 383, 384, 385, 0, 0, 314,
	315, 386, 387, 0, 316, 317, 318, 319, 0, 0,
	320, 321, 322, 323, 0, 324, 0, 388, 325, 326,
	327, 389, 390, 0, 439, 328, 175, 0, 0, 0,
	329, 330, 331, 332, 333, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 0, 180, 0, 0, 0, 0,
	334, 0, 0, 0, 0, 181, 182, 183, 335, 336,
	337, 338, 184, 339, 340, 0, 185, 341, 342, 186,
	187, 0, 0, 343, 344, 345, 0, 188, 346, 0,
	0, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 0, 196, 197, 198, 0, 0, 0,
	0, 0, 0, 0, 199, 200, 399, 201, 347, 202,
	348, 349, 0, 203, 0, 204, 0, 205, 0, 0,
	206, 207, 0, 208, 0, 0, 0, 350, 209, 211,
	210, 212, 351, 352, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 353, 354, 355, 0, 215, 0, 216,
	0, 0, 0, 0, 217, 356, 0, 357, 0, 0,
	218, 219, 0, 0, 220, 221, 358, 359, 0, 0,
	360, 225, 0, 222, 0, 0, 223, 361, 224, 362,
	363, 364, 365, 366, 0, 367, 0, 0, 226, 227,
	228, 0, 229, 230, 231, 0, 233, 232, 0, 368,
	0, 234, 0, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 0, 242, 243, 245, 244,
	0, 0, 0, 370, 246, 371, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 372, 0, 252, 0,
	373, 253, 254, 255, 256, 257, 0, 258, 374, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 376, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 0, 281, 282,
	377, 283, 0, 287, 288, 289, 290, 0, 292, 378,
	291, 293, 294, 0, 295, 284, 285, 296, 0, 297,
	379, 380, 298, 0, 305, 299, 300, 286, 301, 304,
	381, 302, 303, 382, 0, 306, 0, 307, 308, 309,
	310, 311, 312, 313, 0, 383, 384, 385, 0, 0,
	314, 315, 386, 387, 0, 316, 317, 318, 319, 0,
	0, 320, 321, 322, 323, 0, 324, 0, 388, 325,
	326, 327, 389, 390, 175, 0, 328, 0, 0, 0,
	0, 329, 330, 331, 332, 333, 0, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 0, 0, 334, 0,
	0, 0, 0, 181, 182, 183, 335, 336, 337, 338,
	184, 339, 340, 0, 185, 341, 342, 186, 187, 0,
	0, 343, 344, 345, 0, 188, 346, 0, 0, 0,
	189, 190, 191, 0, 192, 0, 193, 0, 194, 195,
	0, 0, 196, 197, 198, 0, 0, 0, 0, 0,
	0, 0, 199, 200, 399, 201, 347, 202, 348, 349,
	0, 203, 0, 204, 0, 205, 0, 0, 206, 207,
	0, 208, 0, 0, 0, 350, 209, 211, 210, 212,
	351, 352, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 353, 354, 355, 0, 215, 0, 216, 0, 0,
	0, 0, 217, 356, 0, 357, 0, 0, 218, 219,
	0, 0, 220, 221, 358, 359, 0, 0, 360, 225,
	0, 222, 0, 0, 223, 361, 224, 362, 363, 364,
	365, 366, 0, 367, 0, 0, 226, 227, 228, 0,
	229, 230, 231, 0, 233, 232, 0, 368, 0, 234,
	0, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 369, 240, 0, 242, 243, 245, 244, 0, 0,
	0, 370, 246, 371, 247, 248, 0, 249, 0, 0,
	250, 0, 0, 251, 372, 0, 252, 0, 373, 253,
	254, 255, 256, 257, 0, 258, 374, 259, 375, 260,
	0, 261, 262, 263, 264, 265, 376, 266, 267, 0,
	268, 269, 270, 271, 272, 0, 274, 275, 273, 276,
	277, 278, 279, 0, 280, 0, 281, 282, 377, 283,
	0, 287, 288, 289, 290, 0, 292, 378, 291, 293,
	294, 0, 295, 284, 285, 296, 0, 297, 379, 380,
	298, 0, 305, 299, 300, 286, 301, 304, 381, 302,
	303, 382, 0, 306, 0, 307, 308, 309, 310, 311,
	312, 313, 0, 383, 384, 385, 0, 0, 314, 315,
	386, 387, 0, 316, 317, 318, 319, 0, 0, 320,
	321, 322, 323, 0, 324, 0, 388, 325, 326, 327,
	389, 390, 175, 0, 328, 0, 0, 0, 0, 329,
	330, 331, 332, 333, 0, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 0, 334, 0, 0, 0,
	0, 181, 182, 183, 335, 336, 337, 338, 184, 339,
	340, 0, 185, 341, 342, 186, 187, 0, 0, 343,
	344, 345, 0, 188, 346, 0, 0, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 0,
	196, 197, 198, 0, 0, 0, 0, 0, 0, 0,
	199, 200, 399, 201, 347, 202, 348, 349, 0, 203,
	0, 204, 0, 205, 0, 0, 206, 207, 0, 208,
	0, 0, 0, 350, 209, 211, 210, 212, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 353,
	354, 355, 0, 215, 0, 216, 0, 0, 0, 0,
	217, 356, 0, 357, 0, 0, 218, 219, 0, 0,
	220, 221, 1902, 359, 0, 0, 360, 225, 0, 222,
	0, 0, 223, 361, 224, 362, 363, 364, 365, 366,
	0, 367, 0, 0, 226, 227, 228, 0, 229, 230,
	231, 0, 233, 232, 0, 368, 0, 234, 0, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	240, 0, 242, 243, 245, 244, 0, 0, 0, 370,
	246, 371, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 372, 0, 252, 0, 373, 253, 254, 255,
	256, 257, 0, 258, 374, 259, 375, 260, 0, 261,
	262, 263, 264, 265, 376, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 0, 281, 282, 377, 283, 0, 287,
	288, 289, 290, 0, 292, 378, 291, 293, 294, 0,
	295, 284, 285, 296, 0, 297, 379, 380, 298, 0,
	305, 299, 300, 286, 301, 304, 381, 302, 303, 382,
	0, 306, 0, 307, 308, 309, 310, 311, 312, 313,
	0, 383, 384, 385, 0, 0, 314, 315, 386, 387,
	0, 316, 317, 318, 319, 0, 0, 320, 321, 322,
	323, 0, 324, 0, 388, 325, 326, 327, 389, 390,
	175, 0, 328, 0, 0, 0, 0, 329, 330, 331,
	332, 333, 0, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 181,
	182, 183, 335, 336, 337, 338, 184, 339, 340, 0,
	185, 341, 342, 186, 187, 0, 0, 343, 344, 345,
	0, 188, 346, 0, 0, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 0, 196, 197,
	198, 0, 0, 0, 0, 0, 0, 0, 199, 200,
	399, 201, 347, 202, 348, 349, 0, 203, 0, 204,
	0, 205, 0, 0, 206, 207, 0, 208, 0, 0,
	0, 350, 209, 211, 210, 212, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 353, 354, 355,
	0, 215, 0, 216, 0, 0, 0, 0, 217, 356,
	0, 357, 0, 0, 218, 219, 0, 0, 220, 221,
	1900, 359, 0, 0, 360, 225, 0, 222, 0, 0,
	223, 361, 224, 362, 363, 364, 365, 366, 0, 367,
	0, 0, 226, 227, 228, 0, 229, 230, 231, 0,
	233, 232, 0, 368, 0, 234, 0, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 0,
	242, 243, 245, 244, 0, 0, 0, 370, 246, 371,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 0, 252, 0, 373, 253, 254, 255, 256, 257,
	0, 258, 374, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 376, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 0, 281, 282, 377, 283, 0, 287, 288, 289,
	290, 0, 292, 378, 291, 293, 294, 0, 295, 284,
	285, 296, 0, 297, 379, 380, 298, 0, 305, 299,
	300, 286, 301, 304, 381, 302, 303, 382, 0, 306,
	0, 307, 308, 309, 310, 311, 312, 313, 0, 383,
	384, 385, 0, 0, 314, 315, 386, 387, 0, 316,
	317, 318, 319, 0, 0, 320, 321, 322, 323, 0,
	324, 0, 388, 325, 326, 327, 389, 390, 175, 0,
	328, 0, 0, 0, 0, 329, 330, 331, 332, 333,
	0, 0, 0, 0, 178, 179, 0, 180, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 181, 182, 183,
	335, 336, 337, 338, 184, 339, 340, 0, 185, 341,
	342, 186, 187, 0, 0, 343, 344, 345, 0, 188,
	346, 0, 0, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 0, 196, 197, 198, 0,
	0, 0, 0, 0, 0, 0, 199, 200, 399, 201,
	347, 202, 348, 349, 0, 203, 0, 204, 0, 205,
	0, 0, 206, 207, 0, 208, 0, 0, 0, 350,
	209, 211, 210, 212, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 353, 354, 355, 0, 215,
	0, 216, 0, 0, 0, 0, 217, 356, 0, 357,
	0, 0, 218, 219, 0, 0, 220, 221, 1889, 359,
	0, 0, 360, 225, 0, 222, 0, 0, 223, 361,
	224, 362, 363, 364, 365, 366, 0, 367, 0, 0,
	226, 227, 228, 0, 229, 230, 231, 0, 233, 232,
	0, 368, 0, 234, 0, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 0, 242, 243,
	245, 244, 0, 0, 0, 370, 246, 371, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 0,
	252, 0, 373, 253, 254, 255, 256, 257, 0, 258,
	374, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	376, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 0,
	281, 282, 377, 283, 0, 287, 288, 289, 290, 0,
	292, 378, 291, 293, 294, 0, 295, 284, 285, 296,
	0, 297, 379, 380, 298, 0, 305, 299, 300, 286,
	301, 304, 381, 302, 303, 382, 0, 306, 0, 307,
	308, 309, 310, 311, 312, 313, 0, 383, 384, 385,
	0, 0, 314, 315, 386, 387, 0, 316, 317, 318,
	319, 0, 0, 320, 321, 322, 323, 0, 324, 0,
	388, 325, 326, 327, 389, 390, 175, 0, 328, 0,
	0, 0, 0, 329, 330, 331, 332, 333, 0, 0,
	0, 0, 178, 179, 0, 180, 0, 0, 0, 0,
	334, 0, 0, 0, 0, 181, 182, 183, 335, 336,
	337, 338, 184, 339, 340, 0, 185, 341, 342, 186,
	187, 0, 0, 343, 344, 345, 0, 188, 346, 0,
	0, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 0, 196, 197, 198, 0, 0, 0,
	0, 0, 0, 0, 199, 200, 399, 201, 347, 202,
	348, 349, 0, 203, 0, 204, 0, 205, 0, 0,
	206, 207, 0, 208, 0, 0, 0, 350, 209, 211,
	210, 212, 351, 352, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 353, 354, 355, 0, 215, 0, 216,
	0, 0, 0, 0, 217, 356, 0, 357, 0, 0,
	218, 219, 0, 0, 220, 221, 358, 359, 0, 0,
	360, 225, 0, 222, 0, 0, 223, 361, 224, 362,
	363, 364, 365, 366, 0, 367, 0, 0, 226, 227,
	228, 0, 229, 230, 231, 0, 233, 232, 0, 368,
	0, 234, 0, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 0, 242, 243, 245, 244,
	0, 0, 0, 370, 246, 371, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 372, 0, 252, 0,
	373, 253, 254, 255, 256, 257, 0, 258, 374, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 376, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 0, 281, 282,
	377, 283, 0, 493, 288, 289, 290, 0, 292, 378,
	291, 293, 294, 0, 295, 284, 285, 296, 0, 297,
	379, 380, 298, 0, 305, 299, 300, 286, 301, 304,
	381, 302, 303, 382, 0, 306, 0, 307, 308, 309,
	310, 311, 312, 313, 0, 383, 384, 385, 0, 0,
	314, 315, 386, 387, 0, 316, 317, 318, 319, 0,
	0, 320, 321, 322, 323, 0, 324, 0, 388, 325,
	326, 327, 389, 390, 175, 0, 328, 0, 0, 0,
	0, 329, 330, 331, 332, 333, 0, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 0, 0, 334, 0,
	1235, 0, 0, 181, 182, 183, 335, 336, 337, 338,
	184, 339, 340, 0, 185, 341, 342, 186, 187, 0,
	0, 343, 344, 345, 0, 188, 346, 0, 0, 0,
	189, 190, 191, 0, 192, 0, 193, 0, 194, 195,
	0, 0, 196, 197, 198, 0, 0, 0, 0, 0,
	0, 0, 199, 200, 399, 201, 347, 202, 348, 349,
	0, 203, 0, 204, 0, 205, 0, 0, 206, 207,
	0, 208, 0, 0, 0, 350, 209, 211, 210, 212,
	351, 352, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 353, 354, 355, 0, 215, 0, 216, 0, 0,
	0, 0, 217, 356, 0, 357, 0, 0, 218, 219,
	0, 0, 220, 221, 358, 359, 0, 0, 360, 225,
	0, 222, 0, 0, 223, 361, 224, 362, 363, 364,
	365, 366, 0, 367, 0, 0, 226, 227, 228, 0,
	229, 230, 231, 0, 233, 232, 0, 368, 0, 234,
	0, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 369, 240, 0, 242, 243, 245, 244, 0, 0,
	0, 370, 246, 371, 247, 248, 0, 249, 0, 0,
	250, 0, 0, 251, 372, 0, 252, 0, 373, 253,
	254, 255, 256, 257, 0, 258, 374, 259, 375, 260,
	0, 261, 262, 263, 264, 265, 376, 266, 267, 0,
	268, 269, 270, 271, 272, 0, 274, 275, 273, 276,
	277, 278, 279, 0, 280, 0, 281, 282, 377, 283,
	0, 287, 288, 289, 290, 0, 292, 378, 291, 293,
	294, 0, 0, 284, 285, 296, 0, 297, 379, 380,
	298, 0, 305, 299, 300, 286, 301, 304, 381, 302,
	303, 382, 0, 306, 0, 307, 308, 309, 310, 311,
	312, 313, 0, 383, 384, 385, 0, 0, 314, 315,
	386, 387, 0, 316, 317, 318, 319, 0, 0, 320,
	321, 322, 323, 0, 324, 0, 388, 325, 326, 327,
	389, 390, 175, 0, 328, 0, 0, 0, 0, 329,
	330, 331, 332, 333, 0, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 0, 334, 0, 0, 0,
	0, 181, 182, 183, 335, 336, 337, 338, 184, 339,
	340, 0, 185, 341, 342, 186, 187, 0, 0, 343,
	344, 345, 0, 188, 346, 0, 0, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 0,
	196, 197, 198, 0, 0, 0, 0, 0, 0, 0,
	199, 200, 399, 201, 347, 202, 348, 349, 0, 203,
	0, 204, 0, 205, 0, 0, 206, 207, 0, 208,
	0, 0, 0, 350, 209, 211, 210, 212, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 353,
	354, 355, 0, 215, 0, 216, 0, 0, 0, 0,
	217, 356, 0, 357, 0, 0, 218, 219, 0, 0,
	220, 221, 358, 359, 0, 0, 360, 225, 0, 222,
	0, 0, 223, 361, 224, 362, 363, 364, 365, 366,
	0, 367, 0, 0, 226, 227, 228, 0, 229, 230,
	231, 0, 233, 232, 0, 368, 0, 234, 0, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	240, 0, 242, 243, 245, 244, 0, 0, 0, 370,
	246, 371, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 372, 0, 252, 0, 373, 253, 254, 255,
	256, 257, 0, 258, 374, 259, 375, 260, 0, 261,
	262, 263, 264, 265, 376, 719, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 0, 281, 282, 377, 283, 0, 287,
	288, 289, 290, 0, 292, 378, 291, 293, 294, 0,
	295, 284, 285, 296, 0, 297, 379, 380, 298, 0,
	305, 299, 300, 286, 301, 304, 381, 302, 303, 382,
	0, 306, 0, 307, 308, 309, 310, 311, 312, 313,
	0, 383, 384, 385, 0, 0, 314, 315, 386, 387,
	0, 316, 317, 318, 319, 0, 0, 320, 321, 322,
	323, 0, 324, 0, 388, 325, 326, 327, 389, 390,
	175, 0, 328, 0, 0, 0, 0, 329, 330, 331,
	332, 333, 0, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 181,
	182, 183, 335, 336, 337, 338, 184, 339, 340, 0,
	185, 341, 342, 186, 187, 0, 0, 343, 344, 345,
	0, 188, 346, 0, 0, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 0, 196, 197,
	198, 0, 0, 0, 0, 0, 0, 0, 199, 200,
	399, 201, 347, 202, 348, 349, 0, 203, 0, 204,
	0, 205, 0, 0, 206, 207, 0, 208, 0, 0,
	0, 350, 209, 211, 210, 212, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 353, 354, 355,
	0, 215, 0, 216, 0, 0, 0, 0, 217, 356,
	0, 357, 0, 0, 218, 219, 0, 0, 220, 221,
	358, 359, 0, 0, 360, 225, 0, 222, 0, 0,
	223, 361, 224, 362, 363, 364, 365, 366, 0, 367,
	0, 0, 226, 227, 228, 0, 229, 230, 231, 0,
	233, 232, 0, 368, 0, 234, 0, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 0,
	242, 243, 245, 244, 0, 0, 0, 370, 246, 371,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 0, 252, 0, 373, 253, 254, 0, 256, 257,
	0, 258, 374, 259, 375, 260, 0, 261, 262, 263,
	0, 265, 376, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 0, 281, 282, 377, 0, 0, 287, 288, 289,
	290, 0, 292, 378, 291, 293, 294, 0, 295, 284,
	285, 296, 0, 297, 379, 380, 298, 0, 305, 299,
	300, 286, 301, 304, 381, 302, 303, 382, 0, 306,
	0, 307, 308, 309, 310, 311, 312, 313, 0, 383,
	384, 385, 0, 0, 314, 315, 386, 387, 0, 316,
	317, 318, 319, 0, 0, 320, 321, 322, 323, 0,
	324, 0, 388, 325, 326, 327, 389, 390, 0, 0,
	328, 0, 0, 0, 0, 329, 330, 331, 332, 333,
	948, 949, 0, 978, 979, 980, 988, 989, 990, 0,
	0, 0, 0, 0, 0, 0, 981, 0, 0, 0,
	0, 0, 0, 951, 0, 0, 992, 0, 0, 0,
	0, 0, 0, 0, 0, 948, 949, 0, 978, 979,
	980, 988, 989, 990, 0, 0, 0, 950, 0, 0,
	0, 981, 0, 970, 0, 0, 0, 967, 951, 0,
	0, 992, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 950, 0, 0, 0, 0, 0, 970, 0,
	0, 0, 967, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 973, 974, 975, 976, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 985, 993, 0, 0,
	973, 974, 975, 976, 0, 0, 0, 0, 0, 956,
	0, 0, 0, 0, 0, 991, 0, 948, 949, 0,
	978, 979, 980, 988, 989, 990, 0, 0, 0, 0,
	983, 985, 993, 981, 0, 0, 971, 0, 0, 0,
	951, 0, 0, 992, 0, 0, 0, 0, 0, 0,
	991, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 982, 0, 0, 950, 983, 0, 0, 0, 0,
	970, 971, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 977, 982, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 973, 974, 975, 976, 986, 0, 0, 0,
	977, 956, 0, 0, 0, 0, 0, 1797, 1798, 0,
	1815, 1816, 1817, 0, 0, 972, 0, 0, 0, 0,
	0, 0, 0, 985, 993, 0, 0, 0, 0, 0,
	0, 986, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 991, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 983, 0, 0,
	1812, 0, 0, 971, 984, 0, 0, 962, 963, 969,
	968, 964, 965, 966, 987, 0, 961, 959, 960, 952,
	953, 954, 955, 957, 958, 0, 0, 0, 982, 0,
	0, 0, 0, 1839, 0, 0, 0, 0, 0, 984,
	0, 0, 962, 963, 969, 968, 964, 965, 966, 987,
	0, 961, 959, 960, 952, 953, 954, 955, 957, 958,
	0, 1803, 977, 0, 0, 0, 0, 0, 1838, 0,
	0, 0, 0, 0, 0, 0, 0, 972, 948, 949,
	0, 978, 979, 980, 988, 989, 990, 0, 0, 0,
	0, 0, 0, 986, 981, 0, 0, 0, 0, 0,
	0, 951, 0, 0, 992, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1813, 0, 950, 0, 0, 0, 0,
	0, 970, 0, 0, 0, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 984, 0, 0, 962, 963, 969, 968, 964, 965,
	966, 987, 0, 961, 959, 960, 952, 953, 954, 955,
	957, 958, 0, 973, 974, 975, 976, 0, 0, 0,
	1837, 0, 956, 0, 0, 0, 0, 1814, 0, 0,
	948, 949, 0, 978, 979, 980, 988, 989, 990, 0,
	0, 0, 0, 0, 985, 993, 981, 0, 0, 0,
	0, 0, 0, 951, 0, 0, 992, 0, 0, 0,
	0, 0, 0, 991, 0, 948, 949, 0, 978, 979,
	980, 988, 989, 990, 0, 0, 0, 950, 983, 0,
	0, 981, 0, 970, 971, 0, 0, 967, 951, 0,
	0, 992, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 950, 0, 1809, 1810, 1811, 0, 970, 0,
	0, 0, 967, 1808, 1806, 1807, 1799, 1800, 1801, 1802,
	1804, 1805, 0, 0, 0, 973, 974, 975, 976, 0,
	0, 0, 0, 977, 956, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 985, 993, 0, 0,
	973, 974, 975, 976, 986, 0, 0, 0, 0, 956,
	0, 0, 0, 0, 0, 991, 0, 948, 949, 0,
	978, 979, 980, 988, 989, 990, 0, 0, 0, 0,
	983, 985, 993, 981, 0, 0, 971, 0, 0, 0,
	951, 0, 0, 992, 0, 0, 0, 0, 0, 0,
	991, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 982, 0, 0, 950, 983, 0, 0, 0, 0,
	970, 971, 984, 0, 967, 962, 963, 969, 968, 964,
	965, 966, 987, 0, 961, 959, 960, 952, 953, 954,
	955, 957, 958, 0, 0, 977, 982, 0, 0, 0,
	0, 1789, 0, 0, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 973, 974, 975, 976, 986, 0, 0, 0,
	977, 956, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 972, 0, 0, 0, 0,
	0, 0, 0, 985, 993, 0, 0, 0, 0, 0,
	0, 986, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 991, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 983, 0, 0,
	0, 0, 0, 971, 984, 0, 0, 962, 963, 969,
	968, 964, 965, 966, 987, 0, 961, 959, 960, 952,
	953, 954, 955, 957, 958, 0, 0, 0, 982, 2429,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 984,
	0, 0, 962, 963, 969, 968, 964, 965, 966, 987,
	0, 961, 959, 960, 952, 953, 954, 955, 957, 958,
	0, 0, 977, 0, 2382, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 972, 0, 0,
	0, 0, 948, 949, 0, 978, 979, 980, 988, 989,
	990, 0, 0, 986, 0, 0, 0, 0, 981, 0,
	0, 0, 0, 0, 0, 951, 0, 0, 992, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 950,
	0, 0, 0, 0, 0, 970, 0, 0, 0, 967,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 984, 0, 0, 962, 963, 969, 968, 964, 965,
	966, 987, 0, 961, 959, 960, 952, 953, 954, 955,
	957, 958, 0, 0, 0, 0, 2336, 973, 974, 975,
	976, 0, 0, 0, 0, 0, 956, 0, 0, 0,
	0, 0, 0, 0, 948, 949, 0, 978, 979, 980,
	988, 989, 990, 0, 0, 0, 0, 0, 985, 993,
	981, 0, 0, 0, 0, 0, 0, 951, 0, 0,
	992, 0, 0, 0, 0, 0, 0, 991, 0, 948,
	949, 0, 978, 979, 980, 988, 989, 990, 0, 0,
	0, 950, 983, 0, 0, 981, 0, 970, 971, 0,
	0, 967, 951, 0, 0, 992, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 982, 0, 0, 950, 0, 0, 0,
	0, 0, 970, 0, 0, 0, 967, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 973,
	974, 975, 976, 0, 0, 0, 0, 977, 956, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	985, 993, 0, 0, 973, 974, 975, 976, 986, 0,
	0, 0, 0, 956, 0, 0, 0, 0, 0, 991,
	0, 948, 949, 0, 978, 979, 980, 988, 989, 990,
	0, 0, 0, 0, 983, 985, 993, 981, 0, 0,
	971, 0, 0, 0, 951, 0, 0, 992, 0, 0,
	0, 0, 0, 0, 991, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 982, 0, 0, 950, 983,
	0, 0, 0, 0, 970, 971, 984, 0, 967, 962,
	963, 969, 968, 964, 965, 966, 987, 0, 961, 959,
	960, 952, 953, 954, 955, 957, 958, 0, 0, 977,
	982, 2306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 973, 974, 975, 976,
	986, 0, 0, 0, 977, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 972,
	0, 0, 0, 0, 0, 0, 0, 985, 993, 0,
	0, 0, 0, 0, 0, 986, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 991, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 983, 0, 0, 0, 0, 0, 971, 984, 0,
	0, 962, 963, 969, 968, 964, 965, 966, 987, 0,
	961, 959, 960, 952, 953, 954, 955, 957, 958, 0,
	0, 0, 982, 2301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 984, 0, 0, 962, 963, 969, 968,
	964, 965, 966, 987, 0, 961, 959, 960, 952, 953,
	954, 955, 957, 958, 0, 0, 977, 0, 2297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 0, 948, 949, 0, 978,
	979, 980, 988, 989, 990, 0, 0, 986, 0, 0,
	0, 0, 981, 0, 0, 0, 0, 0, 0, 951,
	0, 0, 992, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 950, 0, 0, 0, 0, 0, 970,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 984, 0, 0, 962, 963,
	969, 968, 964, 965, 966, 987, 0, 961, 959, 960,
	952, 953, 954, 955, 957, 958, 0, 0, 0, 0,
	2239, 973, 974, 975, 976, 0, 0, 0, 0, 0,
	956, 0, 0, 0, 0, 0, 0, 0, 948, 949,
	0, 978, 979, 980, 988, 989, 990, 0, 0, 0,
	0, 0, 985, 993, 981, 0, 0, 0, 0, 0,
	0, 951, 0, 0, 992, 0, 0, 0, 0, 0,
	0, 991, 0, 948, 949, 0, 978, 979, 980, 988,
	989, 990, 0, 0, 0, 950, 983, 0, 0, 981,
	0, 970, 971, 0, 0, 967, 951, 0, 0, 992,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 982, 0, 0,
	950, 0, 0, 0, 0, 0, 970, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 973, 974, 975, 976, 0, 0, 0,
	0, 977, 956, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 985, 993, 0, 0, 973, 974,
	975, 976, 986, 0, 0, 0, 0, 956, 0, 0,
	0, 0, 0, 991, 0, 948, 949, 0, 978, 979,
	980, 988, 989, 990, 0, 0, 0, 0, 983, 985,
	993, 981, 0, 0, 971, 0, 0, 0, 951, 0,
	0, 992, 0, 0, 0, 0, 0, 0, 991, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 950, 983, 0, 0, 0, 0, 970, 971,
	984, 0, 967, 962, 963, 969, 968, 964, 965, 966,
	987, 0, 961, 959, 960, 952, 953, 954, 955, 957,
	958, 0, 0, 977, 982, 2205, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	973, 974, 975, 976, 986, 0, 0, 0, 977, 956,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 972, 0, 0, 0, 0, 0, 0,
	0, 985, 993, 0, 0, 0, 0, 0, 0, 986,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	991, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 983, 0, 0, 0, 0,
	0, 971, 984, 0, 0, 962, 963, 969, 968, 964,
	965, 966, 987, 0, 961, 959, 960, 952, 953, 954,
	955, 957, 958, 0, 0, 0, 982, 2204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 984, 0, 0,
	962, 963, 969, 968, 964, 965, 966, 987, 0, 961,
	959, 960, 952, 953, 954, 955, 957, 958, 0, 0,
	977, 0, 2169, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 972, 0, 0, 0, 0,
	948, 949, 0, 978, 979, 980, 988, 989, 990, 0,
	0, 986, 0, 0, 0, 0, 981, 0, 0, 0,
	0, 0, 0, 951, 0, 0, 992, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 950, 0, 0,
	0, 0, 0, 970, 0, 0, 0, 967, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 984,
	0, 0, 962, 963, 969, 968, 964, 965, 966, 987,
	0, 961, 959, 960, 952, 953, 954, 955, 957, 958,
	0, 0, 0, 0, 2024, 973, 974, 975, 976, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	0, 0, 948, 949, 0, 978, 979, 980, 988, 989,
	990, 0, 0, 0, 0, 0, 985, 993, 981, 0,
	0, 0, 0, 0, 0, 951, 0, 0, 992, 0,
	0, 0, 0, 0, 0, 991, 0, 948, 949, 0,
	978, 979, 980, 988, 989, 990, 0, 0, 0, 950,
	983, 0, 0, 981, 0, 970, 971, 0, 0, 967,
	951, 0, 0, 992, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 982, 0, 0, 950, 0, 0, 0, 0, 0,
	970, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 973, 974, 975,
	976, 0, 0, 0, 0, 977, 956, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 985, 993,
	0, 0, 973, 974, 975, 976, 986, 0, 0, 0,
	0, 956, 0, 0, 0, 0, 0, 991, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 983, 985, 993, 0, 0, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 991, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 982, 0, 0, 0, 983, 0, 0,
	0, 0, 0, 971, 984, 0, 0, 962, 963, 969,
	968, 964, 965, 966, 987, 0, 961, 959, 960, 952,
	953, 954, 955, 957, 958, 0, 0, 977, 982, 2000,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 986, 0,
	0, 0, 977, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 986, 0, 0, 0, 0, 0, 0,
	0, 948, 949, 0, 978, 979, 980, 988, 989, 990,
	0, 0, 0, 0, 0, 0, 0, 981, 0, 0,
	0, 0, 0, 0, 951, 0, 984, 992, 0, 962,
	963, 969, 968, 964, 965, 966, 987, 0, 961, 959,
	960, 952, 953, 954, 955, 957, 958, 0, 950, 0,
	0, 1473, 0, 0, 970, 0, 0, 0, 967, 0,
	0, 984, 0, 0, 962, 963, 969, 968, 964, 965,
	966, 987, 0, 961, 959, 960, 952, 953, 954, 955,
	957, 958, 0, 0, 1759, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 973, 974, 975, 976,
	0, 0, 0, 0, 0, 956, 2489, 0, 0, 0,
	0, 0, 0, 948, 949, 0, 978, 979, 980, 988,
	989, 990, 0, 0, 0, 0, 0, 985, 993, 981,
	0, 0, 0, 0, 0, 0, 951, 0, 0, 992,
	0, 0, 0, 0, 0, 0, 991, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	950, 983, 0, 0, 0, 0, 970, 971, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 982, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 973, 974,
	975, 976, 0, 0, 0, 0, 977, 956, 0, 1829,
	0, 0, 1828, 0, 0, 0, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 985,
	993, 0, 0, 0, 0, 0, 0, 986, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 991, 948,
	949, 0, 978, 979, 980, 988, 989, 990, 0, 0,
	0, 0, 0, 983, 0, 981, 0, 0, 0, 971,
	1732, 0, 951, 0, 0, 992, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 982, 0, 950, 0, 0, 0,
	0, 0, 970, 0, 0, 984, 967, 0, 962, 963,
	969, 968, 964, 965, 966, 987, 0, 961, 959, 960,
	952, 953, 954, 955, 957, 958, 0, 0, 977, 0,
	0, 0, 0, 1733, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 973, 974, 975, 976, 0, 986,
	0, 0, 0, 956, 0, 1570, 0, 0, 0, 0,
	0, 948, 949, 0, 978, 979, 980, 988, 989, 990,
	0, 0, 0, 0, 0, 985, 993, 981, 0, 0,
	0, 1569, 0, 0, 951, 0, 0, 992, 0, 0,
	0, 0, 0, 0, 991, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 950, 983,
	0, 0, 0, 0, 970, 971, 0, 984, 967, 0,
	962, 963, 969, 968, 964, 965, 966, 987, 0, 961,
	959, 960, 952, 953, 954, 955, 957, 958, 0, 0,
	982, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 973, 974, 975, 976,
	0, 0, 0, 0, 977, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 972,
	0, 0, 0, 0, 0, 0, 0, 985, 993, 0,
	0, 0, 0, 0, 0, 986, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 991, 948, 949, 0,
	978, 979, 980, 988, 989, 990, 0, 0, 0, 0,
	0, 983, 0, 981, 0, 0, 0, 971, 0, 0,
	951, 0, 0, 992, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 982, 0, 950, 0, 0, 0, 0, 0,
	970, 0, 0, 984, 967, 0, 962, 963, 969, 968,
	964, 965, 966, 987, 0, 961, 959, 960, 952, 953,
	954, 955, 957, 958, 0, 0, 977, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 973, 974, 975, 976, 0, 986, 0, 0,
	0, 956, 0, 0, 0, 0, 0, 0, 0, 948,
	949, 0, 978, 979, 980, 988, 989, 990, 0, 0,
	0, 0, 0, 985, 993, 981, 0, 0, 0, 0,
	0, 0, 951, 0, 0, 992, 0, 0, 0, 0,
	0, 0, 991, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 950, 983, 0, 0,
	0, 0, 970, 971, 0, 984, 967, 0, 962, 963,
	969, 968, 964, 965, 966, 987, 0, 961, 959, 960,
	952, 953, 954, 955, 957, 958, 0, 0, 982, 576,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 973, 974, 975, 976, 0, 0,
	0, 0, 977, 956, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 972, 0, 0,
	0, 0, 0, 0, 0, 985, 993, 0, 0, 0,
	0, 0, 0, 986, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 991, 0, 948, 949, 0, 978,
	979, 980, 988, 989, 990, 0, 0, 0, 0, 983,
	0, 0, 981, 0, 0, 971, 0, 0, 0, 951,
	0, 0, 992, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	982, 0, 0, 950, 0, 0, 0, 0, 0, 970,
	0, 984, 0, 967, 962, 963, 969, 968, 964, 965,
	966, 987, 0, 961, 959, 960, 952, 953, 954, 955,
	957, 958, 0, 0, 977, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 972,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 973, 974, 975, 976, 986, 0, 0, 0, 0,
	956, 0, 0, 0, 0, 1835, 0, 0, 948, 949,
	0, 978, 979, 980, 988, 989, 990, 0, 0, 0,
	0, 2004, 985, 993, 981, 0, 0, 0, 1830, 0,
	0, 951, 0, 0, 992, 0, 0, 0, 0, 0,
	0, 991, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 950, 983, 0, 0, 0,
	0, 970, 971, 984, 0, 967, 962, 963, 969, 968,
	964, 965, 966, 987, 0, 961, 959, 960, 952, 953,
	954, 955, 957, 958, 0, 0, 0, 982, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 973, 974, 975, 976, 0, 0, 0,
	0, 977, 956, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 985, 993, 0, 0, 0, 0,
	0, 0, 986, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 991, 948, 949, 0, 978, 979, 980,
	988, 989, 990, 0, 0, 0, 0, 0, 983, 0,
	981, 0, 0, 0, 971, 0, 0, 951, 0, 0,
	992, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 950, 0, 0, 0, 0, 0, 970, 0, 0,
	984, 967, 0, 962, 963, 969, 968, 964, 965, 966,
	987, 0, 961, 959, 960, 952, 953, 954, 955, 957,
	958, 0, 0, 977, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 973,
	974, 975, 976, 0, 986, 0, 0, 0, 956, 0,
	0, 0, 0, 0, 0, 0, 948, 949, 0, 978,
	979, 980, 988, 989, 990, 0, 0, 0, 0, 0,
	985, 993, 981, 0, 0, 0, 1788, 0, 0, 951,
	0, 0, 992, 0, 0, 0, 0, 0, 0, 991,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 950, 983, 0, 0, 0, 0, 970,
	971, 0, 984, 967, 0, 962, 963, 969, 968, 964,
	965, 966, 987, 0, 961, 959, 960, 952, 953, 954,
	955, 957, 958, 0, 0, 982, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1795, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 973, 974, 975, 976, 0, 0, 0, 0, 977,
	956, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 972, 0, 0, 0, 0, 0,
	0, 0, 985, 993, 0, 0, 0, 0, 0, 0,
	986, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 991, 948, 949, 0, 978, 979, 980, 988, 989,
	990, 0, 0, 0, 0, 0, 983, 0, 981, 0,
	0, 0, 971, 0, 0, 951, 0, 0, 992, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 982, 0, 950,
	0, 0, 0, 0, 0, 970, 0, 0, 984, 967,
	0, 962, 963, 969, 968, 964, 965, 966, 987, 0,
	961, 959, 960, 952, 953, 954, 955, 957, 958, 0,
	0, 977, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 973, 974, 975,
	976, 0, 986, 0, 0, 0, 956, 0, 0, 0,
	0, 0, 0, 0, 948, 949, 0, 978, 979, 980,
	988, 989, 990, 0, 0, 0, 0, 0, 985, 993,
	981, 0, 0, 0, 0, 0, 0, 951, 0, 0,
	992, 0, 0, 0, 0, 0, 0, 991, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 950, 983, 0, 0, 0, 0, 970, 971, 0,
	984, 967, 0, 962, 963, 969, 968, 964, 965, 966,
	987, 0, 961, 959, 960, 952, 953, 954, 955, 957,
	958, 0, 0, 982, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 973,
	974, 975, 976, 0, 0, 0, 0, 977, 956, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	985, 993, 0, 0, 0, 0, 0, 0, 986, 0,
	948, 949, 0, 978, 979, 980, 988, 989, 990, 991,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 951, 983, 0, 992, 0, 0, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 950, 0, 0,
	0, 0, 0, 970, 0, 0, 0, 967, 0, 0,
	0, 0, 0, 0, 0, 0, 984, 0, 0, 962,
	963, 969, 968, 964, 965, 966, 987, 0, 961, 959,
	960, 952, 953, 954, 955, 957, 958, 0, 0, 977,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 972, 973, 974, 975, 976, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	986, 0, 948, 949, 0, 978, 979, 980, 988, 989,
	990, 0, 0, 0, 0, 0, 985, 993, 0, 0,
	0, 0, 0, 0, 0, 951, 0, 0, 992, 0,
	0, 0, 0, 0, 0, 991, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 950,
	983, 0, 0, 0, 0, 970, 971, 0, 0, 967,
	0, 0, 0, 0, 0, 0, 0, 0, 984, 0,
	0, 962, 963, 969, 968, 964, 965, 966, 987, 0,
	961, 959, 960, 952, 953, 954, 955, 957, 958, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 973, 974, 975,
	976, 0, 0, 0, 0, 977, 956, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 985, 993,
	0, 0, 0, 0, 0, 0, 986, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1278, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 983, 0, 0, 0, 0, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1286, 1275, 1305, 1266, 1296, 1295, 0,
	0, 1268, 1267, 0, 0, 0, 0, 1307, 1306, 0,
	0, 0, 0, 0, 984, 0, 0, 962, 963, 969,
	968, 964, 965, 966, 987, 0, 961, 959, 960, 952,
	953, 954, 955, 957, 958, 0, 0, 977, 0, 0,
	0, 0, 1301, 0, 1293, 1292, 0, 0, 0, 0,
	0, 0, 972, 0, 1291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 986, 0,
	0, 0, 0, 0, 0, 0, 0, 1290, 1288, 1289,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1274, 0, 0, 0, 0, 0,
	0, 1279, 1277, 1280, 1281, 1282, 1283, 1284, 0, 1304,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 984, 1278, 0, 962,
	963, 969, 968, 964, 965, 966, 987, 1270, 961, 959,
	960, 952, 953, 954, 955, 957, 958, 0, 0, 1294,
	0, 0, 0, 1276, 0, 0, 0, 0, 0, 0,
	1286, 1275, 1305, 1266, 1296, 1295, 0, 0, 1268, 1267,
	0, 0, 0, 0, 1307, 1306, 0, 0, 0, 0,
	0, 0, 1287, 0, 0, 0, 1398, 1396, 1397, 1400,
	1399, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 531, 0, 557, 1301,
	0, 1293, 1292, 1271, 0, 0, 0, 0, 0, 0,
	0, 1291, 0, 0, 1285, 1272, 536, 0, 0, 0,
	0, 0, 0, 0, 1309, 0, 0, 0, 534, 0,
	0, 0, 0, 0, 1290, 1288, 1289, 1269, 0, 0,
	1302, 1303, 0, 0, 0, 0, 0, 0, 0, 535,
	0, 0, 0, 0, 537, 0, 0, 0, 0, 543,
	544, 1274, 1273, 0, 553, 0, 0, 1308, 1279, 1277,
	1280, 1281, 1282, 1283, 1284, 0, 1304, 0, 558, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 556, 0, 0, 1270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1294, 0, 0, 0,
	1276, 0, 0, 0, 0, 0, 539, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 0, 0, 0, 1287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 547, 0, 0, 542, 549, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 546, 0, 0, 0,
	1271, 0, 0, 0, 0, 0, 559, 0, 0, 0,
	0, 1285, 1272, 0, 0, 0, 0, 0, 0, 0,
	0, 1309, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1269, 0, 0, 1302, 1303, 0,
	0, 0, 0, 0, 0, 0, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1273,
	0, 0, 0, 0, 1308, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 533, 550, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 551,
	0, 0, 0, 555, 0, 0, 0, 561, 0, 0,
	0, 0, 548, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 554,
}
var sqlPact = [...]int{

	139, -1000, -34, -1000, -1000, -1000, 143, -1000, -1000, -1000,
	-1000, 142, 140, 138, -1000, 137, 135, 134, 131, 127,
	124, 122, 121, 119, 117, 116, -1000, 115, -1000, -1000,
	-1000, -1000, 100, 97, 95, 92, 91, 88, 84, 911,
	21028, 82, 79, 1151, -1000, 1804, 34570, 78, 77, 75,
	70, 938, 69, 60, 24992, 861, 1590, 57, 56, 55,
	54, 53, 914, 34242, 1195, 1924, 1032, 1473, 33911, 20697,
	1471, 1764, 33580, -1000, -1000, 33249, 51, 49, 48, 46,
	41, -1000, -1000, 32918, 38, 35, 30, 26, 25, 23,
	21, 19, 15, 14, 13, 12, 11, 10, -1000, 5,
	4, 3, 41844, 2, 0, -1, 1030, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 83, -1000,
	859, 344, 1639, 8052, 980, 976, 930, 912, 1011, 36538,
	34570, -2, -73, -5, -1000, 1811, 602, 18321, 139, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 24661, 24330, 32587, 32256, 694, -1000, -38,
	21686, 34570, -1000, 86, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14217, 13874, 1025, 496, 86, -1000,
	-1000, -1000, -1000, -1000, 31925, -1000, 31594, 31263, 1331, 30932,
	-1000, -1000, -1000, -1000, 30601, -1000, -1000, 1668, 1478, 1469,
	23999, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 30273, 29942, 29611, 29280, 28949, 417, -1000,
	-1000, -1000, 16953, -1000, -1000, -1000, -1000, -6, -1000, -12,
	-1000, -13, -17, -18, -19, -1000, -20, -21, -1000, -29,
	-30, -1000, -31, -32, 28618, 1046, -1000, -1000, -37, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 34570, -1000, 14901,
	-1000, 416, -1000, 1454, -1000, 14901, -1000, 1022, -1000, -1000,
	-1000, -1000, -1000, 34570, -1000, -1000, -1000, -1000, -1000, -1000,
	2013, 1113, 415, 28287, -1000, 1293, -1000, 498, 681, -1000,
	-1000, -1000, 9078, 145, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1889, 22028, 1161, 1772, 1643, 2009, 1207,
	1621, 1611, 1575, 1562, 1544, 2008, 868, 2007, 1620, 923,
	2004, 1535, 1097, 586, 2003, 1453, 1452, -1000, -1000, -1000,
	-1000, 831, -1000, -1000, -1000, 26304, -1000, -1000, 859, -1000,
	-1000, -1000, 1315, 1754, 1754, 1754, 1827, 243, 234, -1000,
	83, -1000, 1344, -1000, 1112, -1000, -1000, -1000, -1000, -1000,
	41032, -1000, -1000, 14901, 14901, 14901, 14901, 14901, 979, 438,
	-1000, 413, 412, 7367, -1000, -1000, 1990, -1000, -1000, -1000,
	252, -1000, -1000, 14901, 86, -1000, -1000, -1000, -1000, 406,
	1998, -1000, 608, -1000, -1000, -1000, 518, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1495, 404, 403, 402,
	-1000, 401, -1000, -1000, 400, 396, 395, 391, 387, 377,
	374, 373, 372, 371, 369, 368, 367, 365, 364, 933,
	-1000, 540, -1000, -1000, 540, 540, -1000, 346, 346, 349,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 346, -1000,
	-1000, -1000, 516, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 363, 1173, -1000, -1000, 1173, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 690, 35882, -40, 34570,
	-1000, 361, -40, -1000, -1000, 358, -1000, 10104, 10104, -1000,
	-1000, -1000, -1000, -1000, 9420, 1369, -1000, 588, -204, 249,
	487, -1000, 17295, 20025, -1000, -1000, 1118, 1628, 567, -1000,
	902, 1625, 446, -1000, 898, -1000, 1101, 1623, -182, 22356,
	21686, -38, -50, -1000, -1000, -1000, 5655, 41032, -1000, 41032,
	-1000, -1000, 34570, 758, 19003, 86, -1000, -1000, -1000, -1000,
	357, 1157, 521, -1000, 251, -1000, 27956, 521, 1145, -1000,
	-1000, -1000, 26304, -1000, 34570, -1000, 34570, -1000, 804, -1000,
	36210, 110, 1614, -1000, -1000, 110, 1610, -1000, 109, 1588,
	-1000, -1000, 1140, 1581, -1000, -50, 1578, -1000, -1000, 14901,
	-61, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 602, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 27625, 21357, 1031, 537, 41032, 1886, 41763, 22356,
	41032, 21357, -1000, -1000, 34570, -1000, 14901, -1000, 1882, 1231,
	-42, -1000, -1000, -1000, -1000, -1000, 1223, 1303, 633, 749,
	9078, 9078, 1667, -1000, 111, 5997, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 27294, -1000, -1000, -1000, 1057, 34570,
	-1000, -1000, 1474, -1000, 21357, 34570, -1000, 34570, -1000, 34570,
	-1000, 34570, -1000, 34570, -1000, -1000, -1000, -1000, -1000, 333,
	-1000, 1468, -1000, -1000, 34570, -1000, 1200, -1000, -1000, -1000,
	26966, 26635, -1000, 889, 722, -1000, -1000, 112, -1000, -1000,
	1315, -1000, 1034, 1354, 13531, 1245, 14901, 83, -1000, -1000,
	83, 83, 8736, -1000, -1000, -1000, 34570, -1000, 41586, 41763,
	5997, 704, 14901, 14901, 14901, 14901, 14901, 14901, 14901, 14901,
	14901, 14901, 14901, 14901, 14901, 14901, 14901, 14901, 14901, 14901,
	14901, 14901, 14901, 14901, 14901, 14901, 14901, 14901, 14901, 14901,
	14901, 14901, 14901, 14901, 1104, 14901, 686, 14901, 14901, 14901,
	14901, 1518, 1060, 343, 1063, -1000, 1937, 1937, 1937, 41300,
	41300, 318, 438, -1000, 14901, -1000, 34, 14901, 234, 39332,
	-39, 7025, -1000, -1000, -1000, 13189, 538, 41032, 86, 6339,
	-1000, 1989, 830, 1507, 1367, 356, 525, 522, 515, 514,
	14901, 14901, 12847, 12504, 12161, 15585, 11818, 14901, 7709, 14901,
	14901, 14901, 14901, 11475, 11132, -1000, 354, -1000, -1000, -1000,
	-1000, 1988, -1000, -1000, 1986, -1000, 703, 698, 1985, -1000,
	-42, -1000, 35882, -1000, 34570, -40, 1879, 34570, -1000, 126,
	-1000, 40041, -1000, 126, -62, -1000, 1296, 1292, 18662, 1305,
	987, 987, 987, -1000, 351, 432, 487, 4952, 10789, -1000,
	25320, 991, 152, 231, 4544, 1369, -1000, 34570, -54, 946,
	-1000, 23668, 1770, 1733, 1714, 26304, 1843, 34, 1445, 685,
	26304, 684, 1841, 34, 1442, 678, 34570, 5997, 466, -1000,
	34570, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1425, -63, -1000, -1000, 23340, 1871, 1572, -1000, 968,
	-1000, 1864, 34570, 1020, 1137, -1000, -1000, 713, 1558, 529,
	207, 1859, 207, 19343, -1000, 34570, -1000, 34570, -1000, -1000,
	34570, -1000, 34570, -1000, 34570, 34570, -1000, 34570, 34570, -64,
	41032, 3235, 23012, 673, -1000, 572, 23340, 3545, -78, -1000,
	631, -1000, -1000, -1000, -1000, 291, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	349, 933, 346, 346, 346, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 516, -1000, -1000, 540, 540, 540, -1000, -1000,
	-53, -1000, 1423, 502, -81, 601, -42, -1000, 1173, -1000,
	842, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1997, -1000, 1961, -1000, -1000, 1981,
	-46, -1000, -46, -1000, 5997, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 34570, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 195, -1000, -1000, -1000, -1000, -1000, -1000, 34570, 34570,
	34570, -1000, 26304, -1000, -1000, -1000, -1000, 41032, -1000, 336,
	-1000, -1000, 41032, 884, 1316, -1000, 1316, -47, -1000, 39919,
	1284, 34570, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 493, 582, 582, 705, 705, 705, 705,
	1956, 3346, 3377, 1156, 4141, 4141, 4141, 4141, 4141, 4141,
	4141, 4141, 1146, 292, 292, 1146, 1146, 1146, 1146, 1146,
	4141, 4141, 4141, 41300, 41154, 463, 14901, 14901, 666, 1035,
	343, 463, 14901, 463, 463, 463, 463, -1000, 960, -1000,
	-1000, -1000, -1000, 1419, 342, 15585, 15585, -1000, -1000, -1000,
	7367, 15927, -1000, -1000, -1000, -1000, 341, 14901, -1000, 39367,
	-223, 230, -183, -1000, 14901, 431, -77, -1000, 777, -1000,
	14901, -1000, -43, 14901, 14901, 14901, 228, -1000, 227, -1000,
	665, -1000, 662, 654, 652, -1000, 339, 982, 337, 335,
	14901, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 40876,
	37608, 225, -1000, 1416, -183, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 222, -1000, 221, -1000, 40754, -183, 220, 3105,
	-1000, 15585, 15585, 15585, 7367, 334, 219, -1000, 39763, -1000,
	40598, 10446, 10446, 10446, 217, 40476, 14901, -183, 37357, 37235,
	37200, -84, -86, -1000, -87, -1000, 1976, -89, 215, 492,
	491, 205, -1000, -1000, 325, -100, 529, 10104, 17979, 5997,
	-1000, 529, 9420, -1000, 18662, 18662, 1279, 1286, 18662, -1000,
	-1000, -1000, -1000, 25320, 447, 487, 25320, -1000, 1974, 1260,
	203, -1000, -1000, -1000, 34570, 324, -1000, 487, 202, 858,
	34570, 34570, 34570, -1000, -1000, 1123, 35554, 1108, 41763, 34570,
	-1000, 323, 322, 1283, 1268, 34570, 34570, 35226, 34898, 34570,
	927, 34, -1000, 320, 34570, 887, 34570, 34, -1000, 316,
	34570, 879, -1000, 1350, 1054, -1000, 756, 1413, 34570, 201,
	-101, -49, 41763, -1000, -1000, -1000, -1000, -1000, 34570, 414,
	34570, 34, 34570, 1995, 34, 34570, 1554, 1633, 465, 34570,
	1354, 14901, 939, -1000, 17637, 548, 34570, 870, 85, -1000,
	-1000, -1000, 482, 34570, -1000, -1000, 110, 110, -1000, 109,
	1140, -50, -1000, 14901, -1000, -1000, 34570, 22356, -106, -1000,
	-1000, 41763, -1000, 437, 676, -1000, 1969, 509, 22356, 34570,
	9078, 9078, -1000, 1310, -1000, -1000, 839, -1000, 916, -1000,
	-1000, -1000, -1000, 9078, -1000, -56, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 884, -1000, 14901, 1967, -1000, -1000, -1000,
	8736, -1000, -1000, -1000, 34570, -198, 14901, 463, 463, 14901,
	15585, 15585, -1000, 463, -1000, -1000, -1000, -1000, -1000, 1412,
	313, 14901, 41763, 4171, 3831, -107, -1000, 14901, -51, -1000,
	14901, -1000, 39210, -1000, -1000, 436, 1624, -1000, 14901, 40319,
	200, 9762, -1000, 40197, -44, -44, -1000, 1993, 1127, 958,
	931, 822, 1957, -1000, 19684, 530, 994, 38955, 41586, 41763,
	-1000, 14901, -1000, -1000, 1410, 14901, -1000, 41586, 41763, 15585,
	15585, 15585, 15585, 15585, 15585, 15585, 15585, 15585, 15585, 15585,
	15585, 15585, 15585, 15585, 15585, 15585, 15585, 15585, 1328, 15585,
	1933, 1933, 1933, -52, 14901, -1000, 1459, 1410, 14901, 14901,
	41763, 193, 192, 191, -1000, 14901, -183, 14901, 14901, 14901,
	-1000, -1000, -1000, 190, -1000, 1954, -1000, -1000, -1000, -1000,
	3545, -1000, 1363, -1000, -102, -1000, 1369, -1000, 1363, -1000,
	-1000, 1279, -1000, 312, 14901, 18662, -1000, 429, -1000, -109,
	-1000, 25320, -1000, 427, -220, -1000, 481, -1000, 487, 309,
	34570, 25320, -1000, -1000, -1000, 646, 635, 1543, -1000, 1107,
	-1000, 560, -1000, 866, 14901, 16611, 308, 307, 1021, -1000,
	1541, 1140, 1539, 1140, -1000, -54, 871, -1000, 14901, -1000,
	632, -1000, -1000, 14901, -1000, 629, 509, 1400, 732, -1000,
	752, -1000, 1333, -1000, 23340, 304, 34570, 294, -1000, 293,
	-1000, -1000, 289, 34570, 1242, 465, 22684, -1000, 521, 870,
	-1000, 41032, -1000, 870, 8394, 1747, -112, -1000, -1000, -1000,
	529, 19343, 18662, 9420, -115, -1000, -1000, -1000, -1000, 41032,
	-56, 1670, 1670, -1000, 1947, -1000, 424, 189, -1000, 25976,
	-1000, -56, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 34570,
	998, 38833, -1000, 1765, 5997, 1894, 463, 3709, 2836, 14901,
	41763, 41422, -117, 14901, 14901, -1000, 188, 14901, 423, 41032,
	-1000, -1000, -1000, 41032, 14901, 1926, 14901, 185, 184, 182,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 179, -1000,
	-1000, 36866, 14901, 178, -1000, 177, 175, 41032, 1459, 41032,
	-1000, -1000, 508, 508, 795, 795, 795, 795, 1933, 2457,
	305, 689, 1854, 1854, 1854, 2156, 388, 388, 1854, 1854,
	1854, 1383, 1191, 282, 951, 14901, 174, -1000, -1000, 41032,
	41032, 173, -1000, -1000, -1000, -183, 4098, 38798, 38676, -1000,
	172, 170, 1359, 1825, -1000, 18662, 1359, -1000, 34570, 41032,
	-1000, -204, -1000, 1942, -1000, -1000, 1260, -1000, 5308, 25320,
	34570, -120, -1000, 34570, 34570, 34570, 1527, -1000, 1212, -1000,
	38421, -123, -1000, 300, 1787, 14901, -1000, -1000, 280, 16611,
	34570, -1000, 1232, 1251, 589, 34570, -1000, 34570, -1000, 34570,
	34570, 34570, -130, 34570, -133, 34570, -1000, 22356, 634, -1000,
	-1000, 1337, -1000, 16611, 278, 34570, 23340, 1855, 16611, 1019,
	1233, 465, 22684, -1000, 713, -1000, -1000, -59, -1000, 330,
	34, 870, -1000, -60, -1000, 479, 1656, -1000, 1653, 419,
	-1000, -1000, -98, 276, -1000, 469, 468, -1000, -1000, -1000,
	-1000, 1765, 14901, 14901, 41422, -136, -1000, 463, 463, -1000,
	38299, -1000, 41032, -1000, 40197, -1000, -1000, -1000, -1000, 959,
	-1000, 38264, -1000, -1000, -1000, -1000, 15585, 1382, 274, 41763,
	38142, -1000, -1000, 14901, -1000, -1000, -1000, -1000, 517, 14901,
	14901, 1369, 517, -138, 487, -1000, -1000, -1000, 1934, -1000,
	-141, -1000, -1000, -1000, -1000, 34570, -1000, 34570, -1000, 5997,
	34570, 1379, 1081, -1000, -1000, 1266, 273, 15585, 34570, -1000,
	972, 16611, 1765, 86, 5997, 1765, 37887, 6339, -147, -148,
	1076, -1000, 1064, 14901, -1000, 41763, 1140, 1140, -1000, 628,
	623, 621, -1000, 605, -1000, -150, 20366, 974, -149, 16611,
	-154, 167, 34, -157, 34570, -1000, 465, 22684, -1000, 1633,
	1641, 34570, 1687, -1000, -1000, 272, 268, 266, -1000, 25648,
	25648, 22356, 22356, -1000, 463, 463, -1000, -1000, 163, 994,
	1816, -1000, 37477, 15585, 41763, -165, -1000, 37765, -1000, 34570,
	41032, -183, -1000, -1000, 25320, 306, -1000, -1000, 1213, -1000,
	-1000, 34570, 1085, -1000, -1000, 14901, 951, 263, 1333, 262,
	-1000, -1000, -1000, -1000, -1000, -1000, 1787, -43, -1000, 915,
	-1000, -1000, 41032, 1763, -1000, -1000, 34570, 34570, 261, 260,
	-1000, 258, 86, 34570, 972, -167, -1000, 1333, -1000, 972,
	256, 22684, -1000, 1242, 708, -168, 34570, -1000, -1000, 6681,
	22356, 22356, -1000, -170, -1000, -1000, -1000, 873, 14901, 37477,
	-176, -1000, -1000, -160, -1000, 1853, -1000, -1000, -1000, -1000,
	1524, 37730, 1190, 34570, -1000, 34570, 1765, 162, 34570, 563,
	5997, -1000, -1000, 14901, 14901, 14901, 255, 1333, 972, -1000,
	1333, 16611, -1000, 1233, 790, -1000, 529, -1000, -184, -185,
	-1000, 159, 15243, 15243, -183, -1000, 34570, 253, 1515, -1000,
	1002, 1015, 154, -186, -1000, -1000, 251, -1000, 14901, -1000,
	-191, -192, -44, 34570, -1000, 1333, -1000, -194, -1000, 19343,
	-1000, 509, 509, -1000, -1000, -1000, 16269, 1135, 835, 39641,
	-1000, -1000, -1000, 34570, -1000, 1017, 1007, 816, -1000, -1000,
	-1000, -1000, -1000, 1190, 41032, -1000, -1000, 153, -210, -1000,
	972, -175, -1000, -1000, 1893, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1632, -1000, 579, 1226, 1226, 1002, 1926, 1079,
	1333, -1000, 14559, -1000, 1908, -1000, -1000, 1250, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2360, 2359, 1527, 1848, 2358, 2356, 2352, 2351, 2350,
	2349, 2344, 2343, 2340, 2339, 2336, 2335, 2333, 2331, 2329,
	1824, 2328, 1821, 2327, 2323, 2321, 2317, 2312, 2311, 1817,
	2303, 2299, 2296, 2289, 2288, 2285, 1799, 2281, 1764, 2279,
	2277, 2272, 2268, 2265, 1753, 2263, 88, 107, 1689, 2262,
	2260, 1675, 1671, 1654, 2258, 1608, 2257, 2254, 1605, 1598,
	2253, 57, 2252, 2251, 2250, 1590, 1588, 2249, 2248, 2247,
	143, 2243, 1566, 2242, 2241, 2240, 2238, 2237, 2235, 2234,
	2233, 2232, 2229, 2227, 2225, 2223, 2222, 2221, 2220, 2219,
	2209, 151, 2207, 2205, 1558, 1556, 2204, 2202, 29, 27,
	13, 51, 33, 140, 2685, 132, 2201, 2199, 2197, 2196,
	2195, 2194, 28, 103, 96, 2188, 80, 2187, 2183, 45,
	34, 22, 21, 2182, 86, 2180, 2179, 1637, 31, 2178,
	2177, 128, 2176, 17, 37, 180, 147, 145, 109, 114,
	2175, 2173, 2172, 49, 111, 3, 2171, 2170, 15, 74,
	8, 2168, 35, 19, 2165, 2162, 120, 2161, 54, 97,
	1422, 95, 115, 355, 89, 2157, 59, 11, 56, 2154,
	2150, 150, 39, 2140, 40, 77, 135, 2129, 46, 152,
	117, 67, 121, 124, 2123, 2119, 2117, 92, 2113, 106,
	98, 2112, 2109, 65, 2107, 90, 127, 2106, 2104, 2103,
	82, 2101, 116, 2099, 2097, 149, 139, 108, 9, 50,
	66, 6, 1437, 1423, 126, 94, 62, 52, 2093, 2100,
	1135, 1113, 30, 99, 78, 48, 102, 75, 87, 142,
	36, 2092, 2088, 129, 2087, 2086, 2085, 2083, 2082, 101,
	2080, 2070, 23, 2069, 68, 63, 83, 81, 44, 194,
	119, 113, 146, 100, 2068, 85, 123, 2067, 53, 2066,
	2065, 1862, 110, 2064, 2063, 2062, 1832, 1788, 1724, 134,
	2061, 2059, 1658, 1357, 2057, 2056, 79, 2054, 112, 105,
	93, 137, 133, 16, 2053, 125, 38, 2051, 32, 20,
	0, 1020, 614, 2049, 118, 61, 2048, 2043, 2041, 2039,
	26, 1, 10, 5, 7, 4, 25, 24, 2038, 2037,
	122, 71, 60, 2036, 148, 2035, 2034, 2033, 42, 2032,
	14, 2031, 12, 2030, 2028, 18, 2, 2026, 2025, 141,
	2024, 91, 2021, 1774, 2020, 144, 2019, 2018, 1711, 2016,
	43, 104,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 5, 5, 5, 5, 5, 5,
	7, 7, 8, 8, 6, 6, 6, 6, 6, 9,
	9, 10, 16, 13, 18, 12, 12, 15, 15, 114,
	114, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 111, 111, 116, 116,
	116, 118, 118, 115, 115, 110, 110, 20, 20, 59,
	59, 101, 52, 52, 52, 288, 288, 289, 289, 97,
	97, 98, 98, 98, 98, 99, 99, 100, 100, 100,
	28, 28, 28, 22, 22, 22, 22, 22, 23, 23,
	24, 24, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 36, 36, 37, 37,
	37, 37, 37, 37, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 43, 43, 43, 41, 41,
	41, 40, 40, 40, 39, 39, 39, 42, 42, 42,
	162, 162, 161, 161, 165, 165, 44, 44, 44, 44,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 47, 47, 47, 47,
	47, 47, 47, 257, 257, 256, 45, 45, 231, 231,
	48, 48, 188, 188, 49, 49, 49, 49, 49, 50,
	50, 60, 60, 329, 329, 329, 333, 333, 334, 334,
	335, 335, 335, 335, 335, 335, 335, 331, 331, 55,
	55, 55, 55, 56, 56, 56, 57, 57, 96, 96,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 25,
	25, 26, 66, 66, 66, 68, 65, 65, 65, 67,
	67, 67, 67, 69, 69, 70, 70, 70, 70, 70,
	71, 71, 282, 280, 280, 281, 281, 141, 141, 141,
	141, 141, 142, 142, 142, 287, 287, 287, 287, 287,
	287, 286, 286, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 84,
	84, 84, 91, 91, 91, 91, 91, 91, 91, 73,
	73, 78, 78, 78, 78, 78, 74, 74, 79, 79,
	80, 80, 81, 81, 81, 81, 81, 81, 75, 75,
	75, 75, 83, 83, 83, 83, 82, 82, 88, 88,
	88, 88, 88, 88, 85, 85, 85, 85, 86, 86,
	86, 89, 89, 89, 89, 76, 76, 77, 77, 90,
	90, 87, 87, 87, 330, 330, 332, 332, 53, 53,
	32, 32, 33, 33, 143, 143, 144, 144, 210, 210,
	210, 210, 145, 145, 117, 117, 117, 209, 298, 298,
	299, 299, 299, 299, 299, 299, 300, 300, 300, 300,
	300, 300, 300, 296, 296, 297, 294, 294, 295, 295,
	295, 295, 336, 336, 208, 208, 148, 148, 303, 303,
	303, 303, 301, 301, 301, 301, 301, 304, 302, 305,
	305, 305, 305, 305, 243, 243, 243, 93, 93, 34,
	34, 123, 123, 35, 35, 31, 31, 31, 192, 192,
	152, 152, 248, 248, 248, 134, 134, 112, 112, 112,
	14, 11, 11, 11, 11, 11, 11, 19, 19, 17,
	17, 193, 193, 194, 194, 54, 54, 58, 58, 63,
	63, 92, 92, 92, 92, 92, 92, 21, 21, 21,
	21, 27, 27, 27, 27, 62, 62, 338, 338, 130,
	130, 130, 130, 131, 131, 205, 205, 206, 206, 339,
	339, 207, 207, 207, 125, 124, 126, 126, 30, 30,
	30, 119, 119, 120, 120, 121, 121, 122, 122, 340,
	340, 51, 51, 51, 95, 95, 137, 137, 202, 202,
	202, 204, 204, 203, 203, 203, 178, 178, 178, 94,
	94, 157, 157, 167, 167, 168, 168, 254, 169, 169,
	61, 61, 104, 104, 102, 102, 102, 102, 102, 102,
	103, 103, 103, 105, 105, 105, 105, 105, 105, 105,
	108, 108, 108, 109, 109, 109, 107, 107, 311, 311,
	311, 314, 314, 310, 312, 312, 313, 313, 337, 337,
	179, 179, 179, 147, 146, 146, 150, 150, 149, 151,
	151, 247, 247, 247, 176, 176, 176, 176, 197, 197,
	195, 195, 196, 196, 198, 198, 199, 199, 199, 200,
	200, 201, 201, 175, 175, 227, 227, 106, 106, 106,
	156, 156, 156, 158, 158, 217, 217, 217, 218, 218,
	216, 216, 216, 216, 249, 249, 249, 249, 249, 249,
	249, 249, 327, 327, 327, 328, 328, 246, 246, 250,
	250, 250, 250, 250, 250, 244, 244, 244, 244, 245,
	245, 255, 255, 182, 182, 182, 182, 180, 180, 181,
	181, 251, 251, 251, 251, 177, 177, 252, 252, 252,
	211, 211, 258, 258, 258, 276, 276, 155, 155, 155,
	259, 259, 259, 259, 259, 259, 259, 259, 259, 259,
	259, 259, 259, 259, 259, 259, 259, 259, 259, 260,
	260, 260, 260, 262, 262, 262, 261, 261, 261, 261,
	261, 261, 261, 261, 261, 261, 261, 261, 261, 261,
	261, 261, 261, 261, 275, 275, 275, 275, 275, 263,
	263, 270, 270, 271, 271, 272, 273, 264, 264, 265,
	265, 266, 267, 274, 274, 274, 274, 278, 278, 268,
	268, 268, 268, 268, 269, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 190,
	190, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 221, 221, 221, 221, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 306, 306,
	306, 306, 306, 306, 306, 306, 308, 308, 309, 309,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	315, 315, 316, 316, 318, 318, 319, 319, 320, 321,
	321, 321, 322, 323, 323, 317, 317, 324, 324, 324,
	325, 325, 326, 326, 326, 326, 326, 233, 233, 234,
	235, 241, 241, 241, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	132, 132, 132, 132, 132, 164, 164, 163, 163, 230,
	230, 228, 228, 232, 232, 183, 183, 277, 277, 277,
	277, 277, 277, 277, 184, 184, 184, 191, 185, 185,
	186, 186, 186, 186, 186, 224, 225, 187, 187, 187,
	226, 226, 236, 240, 240, 239, 238, 238, 237, 237,
	214, 214, 215, 215, 213, 212, 172, 172, 171, 171,
	170, 170, 341, 341, 242, 242, 173, 173, 174, 166,
	166, 253, 253, 253, 253, 159, 159, 139, 139, 160,
	160, 135, 135, 138, 138, 136, 136, 136, 136, 153,
	153, 154, 154, 133, 133, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 279, 279, 279, 229,
	127, 127, 127, 128, 128, 129, 129, 284, 284, 284,
	285, 285, 285, 285, 283, 283, 283, 283, 283, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 1, 1, 1, 3, 4,
	6, 6, 6, 5, 5, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 7, 2, 6,
	2, 1, 12, 12, 2, 1, 1, 1, 3, 3,
	0, 3, 1, 3, 1, 1, 3, 2, 5, 0,
	4, 6, 7, 1, 2, 1, 2, 2, 3, 3,
	3, 3, 1, 2, 1, 2, 1, 2, 1, 2,
	3, 1, 2, 1, 2, 2, 7, 3, 2, 2,
	2, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 2, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 3, 5, 3,
	1, 3, 1, 2, 2, 3, 2, 2, 5, 3,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 1, 1, 3, 1, 5, 2, 3, 0,
	3, 2, 3, 0, 2, 3, 2, 3, 2, 6,
	2, 6, 2, 1, 2, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	2, 1, 2, 2, 3, 2, 4, 3, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 3, 1,
	3, 4, 6, 6, 3, 5, 3, 2, 6, 3,
	3, 4, 4, 3, 3, 1, 3, 3, 1, 1,
	2, 1, 1, 1, 1, 1, 3, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 2, 2,
	3, 3, 1, 1, 1, 1, 1, 2, 2, 3,
	3, 4, 4, 3, 4, 4, 4, 3, 2, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 2, 3, 3, 3, 2, 3, 4, 3,
	5, 3, 4, 5, 2, 3, 3, 3, 4, 2,
	3, 4, 3, 3, 3, 4, 4, 4, 4, 2,
	3, 5, 5, 5, 2, 0, 2, 0, 3, 2,
	7, 10, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 8, 0, 1, 1, 0, 3, 2, 0,
	3, 1, 2, 2, 3, 6, 2, 1, 1, 2,
	4, 2, 5, 7, 8, 5, 3, 1, 4, 6,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 2, 4,
	3, 3, 0, 6, 3, 11, 14, 4, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 1, 1, 0,
	6, 6, 8, 8, 10, 8, 10, 6, 8, 6,
	8, 1, 0, 2, 0, 2, 2, 3, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 2, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 0, 1, 3, 1,
	0, 1, 1, 1, 2, 3, 2, 2, 8, 11,
	3, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 3, 6, 3, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 2, 0, 8,
	3, 2, 0, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	2, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	8, 8, 2, 4, 4, 4, 2, 2, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 1,
	3, 2, 4, 5, 2, 2, 1, 1, 1, 0,
	2, 5, 2, 3, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 3, 0, 2, 0, 2, 2, 3,
	3, 2, 0, 1, 3, 3, 5, 1, 1, 3,
	2, 4, 4, 0, 8, 4, 6, 3, 3, 1,
	5, 5, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 5, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 1, 1, 2, 3, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 5, 2, 1, 1, 1,
	1, 4, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 3, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 4, 3, 4, 4, 5, 3, 3,
	3, 3, 3, 4, 3, 4, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 4, 1, 3, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 2, 1, 2, 1, 1, 2,
	1, 3, 1, 1, 2, 2, 1, 1, 3, 5,
	6, 8, 6, 6, 4, 3, 4, 1, 1, 1,
	5, 1, 3, 3, 1, 3, 3, 1, 3, 3,
	1, 1, 3, 3, 1, 1, 6, 6, 4, 3,
	4, 3, 4, 3, 4, 4, 3, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 3, 4, 3,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 5, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 3, 1,
	3, 3, 3, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	3, 5, 1, 0, 2, 2, 1, 1, 1, 2,
	1, 2, 1, 0, 1, 1, 1, 3, 3, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 1, 2, 3, 1, 1, 1, 2, 2, 1,
	3, 3, 0, 1, 2, 1, 1, 1, 1, 6,
	2, 1, 5, 1, 1, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 371, -4, -20, -22, -25, -28,
	-29, -49, -36, -37, -38, -48, -44, -50, -51, -52,
	-53, -45, -59, -58, -60, -63, -61, -54, -55, -64,
	-72, -92, -93, -94, -95, -5, -6, -7, -8, 23,
	34, -23, -24, 47, -26, 108, 68, -30, -31, -32,
	-33, 70, -34, -35, 91, -313, 95, -39, -40, -41,
	-43, -42, 99, 106, 109, 131, 142, 223, 229, 250,
	252, 254, 261, -102, -104, 248, -56, -57, -65, -66,
	-67, -68, -96, 272, -73, -74, -75, -76, -77, -78,
	-79, -80, -81, -82, -83, -84, -85, -86, -87, -88,
	-89, -90, 275, -21, -27, -62, 313, -9, -10, -13,
	-12, -11, -16, -18, -15, -17, -19, -14, -311, -105,
	-103, 368, 249, 322, 35, 284, 61, 102, 256, 338,
	345, -108, -106, -107, -109, 265, 330, 294, 372, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 2, 294, 333, 84, 150, -329, 2, -160,
	294, 84, -136, -127, 361, 4, -290, -292, 20, 21,
	23, 33, 34, 35, 40, 44, 47, 48, 55, 60,
	61, 62, 64, 66, 68, 69, 72, 73, 74, 82,
	83, 85, 87, 91, 93, 95, 98, 99, 101, 106,
	108, 107, 109, 119, 120, 125, 127, 132, 138, 139,
	142, 143, 151, 154, 156, 149, 166, 167, 168, 170,
	171, 172, 175, 174, 179, 182, 185, 187, 188, 189,
	192, 190, 194, 195, 197, 196, 202, 204, 205, 207,
	210, 213, 216, 219, 220, 221, 222, 223, 225, 227,
	229, 231, 232, 233, 234, 235, 237, 238, 240, 241,
	242, 243, 244, 248, 246, 247, 249, 250, 251, 252,
	254, 256, 257, 259, 273, 274, 285, 261, 262, 263,
	264, 268, 266, 269, 270, 272, 275, 277, 280, 283,
	284, 286, 289, 290, 287, 282, 293, 295, 296, 297,
	298, 299, 300, 301, 308, 309, 313, 314, 315, 316,
	319, 320, 321, 322, 324, 327, 328, 329, 334, 339,
	340, 341, 342, 343, 28, 36, 37, 38, 39, 41,
	42, 45, 46, 51, 52, 53, 56, 86, 88, 89,
	105, 110, 111, 121, 122, 123, 133, 135, 144, 145,
	148, 155, 157, 158, 159, 160, 161, 163, 177, 191,
	201, 203, 214, 218, 226, 228, 236, 258, 267, 278,
	279, 288, 291, 303, 304, 305, 310, 311, 326, 330,
	331, 371, 371, 2, 167, 233, 54, -135, -127, 84,
	371, 371, 371, 371, 294, 2, 323, 333, -192, 84,
	318, 371, 371, -127, 229, 22, 2, 93, 154, 321,
	320, 22, 225, 266, 296, 298, 2, 371, 371, 371,
	371, 371, 2, 333, 294, 150, 84, 323, -127, 2,
	-47, 2, 368, -46, -4, -29, -38, -48, -44, -20,
	-22, -36, -52, -51, -53, -55, -59, -58, -61, -65,
	-66, -72, -94, -95, 272, -333, 2, 22, -334, -335,
	70, 99, 131, 265, 154, 93, 320, 294, 2, 167,
	2, -127, 2, -329, 2, 167, 2, -333, 2, -127,
	2, -131, 2, 261, -127, 371, 371, 371, 371, 371,
	182, 55, 258, 269, -70, 309, -69, 303, -282, -71,
	2, -161, 192, -127, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 2, -91, 269, 34, 55, 22, 60, 85, 132,
	150, 151, 171, 65, 66, 232, 182, 168, 308, 172,
	270, 295, 309, 70, 324, 299, 107, 4, 84, 192,
	271, 303, 371, 371, 371, -337, 2, 294, -103, -105,
	-104, -149, -150, 317, 162, 104, 212, -102, -104, 2,
	-311, -91, 269, 2, 55, 22, -280, 2, -242, 208,
	-219, 90, -221, 359, 360, 354, 198, 344, -233, -223,
	-236, 105, 258, 368, -135, -222, 374, 9, -308, -104,
	29, -234, -235, 49, -127, 7, 8, 5, 6, -133,
	-260, -229, -269, 312, 112, 200, -306, -307, 4, -290,
	-284, -261, -271, -265, -268, 163, 58, 76, 77, 80,
	78, 81, 271, 323, 50, 28, 110, 111, 218, 226,
	291, 310, 311, 144, 201, 145, 56, 133, 177, 98,
	37, 39, 41, 42, 51, 52, 86, 88, 89, 121,
	122, 123, 155, 157, 158, 159, 160, 161, 203, 236,
	278, 288, 304, 305, 331, -291, -272, -273, -266, -267,
	71, 113, 130, 153, 146, 165, 169, 178, 180, 193,
	215, 217, 255, 276, -274, -338, 2, 309, 309, 2,
	-338, 2, -338, 2, -130, 2, 309, 306, -314, 237,
	-310, -127, -314, 371, 371, 373, 371, -146, -147, 2,
	22, 96, -174, 2, 368, -249, 2, 366, -251, -135,
	-104, -250, 368, 209, -3, 2, -251, 144, -135, 2,
	-251, 144, -135, 2, -127, 2, -138, 144, -135, 306,
	373, -160, -153, -127, -213, -212, 370, -219, 2, -219,
	2, 2, 294, 129, 368, -171, -172, -212, -213, 2,
	-161, 144, -127, 2, -161, 2, 150, -127, 144, 2,
	-127, 22, 129, 2, 164, 2, 164, 2, -252, 2,
	-251, -162, 144, 2, -161, -162, 144, 2, -139, 144,
	2, -138, -127, 144, 2, -153, 144, 2, -188, 368,
	-257, 2, -256, -285, 4, -290, -292, -291, 330, 58,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 269, 208, 373, -161, -219, -231, 368, 129,
	-219, 208, -127, 2, 273, 2, 368, -70, 53, 309,
	-206, 2, -207, -124, -125, -126, 166, 231, 235, 343,
	306, 349, 129, -280, -165, 370, -91, 2, -288, 2,
	-286, 9, -285, 5, 273, 2, 232, 270, 55, 129,
	2, 2, -330, 2, 208, 129, 2, 129, 2, 129,
	2, 129, 2, 129, 2, 2, 232, 270, 2, 126,
	2, 308, 2, 2, 129, 2, 166, 231, 285, 2,
	294, 333, 2, 129, 129, 343, 2, -177, -251, -149,
	-150, -176, -195, -196, 181, 114, 206, -179, 22, 96,
	-179, -179, 44, 369, 369, -91, 273, 2, 10, 11,
	57, 33, 359, 360, 361, 362, 124, 363, 364, 357,
	358, 356, 347, 348, 351, 352, 353, 67, 350, 349,
	63, 186, 260, 115, 116, 117, 118, 245, 13, 14,
	15, 26, 211, 180, 344, 146, 276, 354, 16, 17,
	18, 165, 36, 147, -132, -140, -219, -219, -219, -219,
	-219, 217, -170, -214, 366, -104, 368, 368, -104, -219,
	-163, 368, 7, -104, -228, 366, -237, -219, -171, 368,
	5, 368, 5, -315, 339, 126, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 228, -278, 334, -278, -278,
	-262, 368, -262, -263, 368, -262, 340, 345, 368, -205,
	-206, -205, 306, -131, 373, -314, -154, 368, -174, -166,
	-253, -219, 361, -166, -173, -242, 71, -182, 169, 193,
	130, 178, 255, 153, 7, -47, -216, 374, 368, 361,
	-246, 345, -104, -250, 368, -249, -135, 368, -114, 246,
	-113, 21, 23, 99, 328, 105, 282, 300, 262, 246,
	105, 246, 282, 300, 262, 246, 105, 374, -288, -136,
	373, -283, 361, 4, -290, -292, -291, -293, 22, 24,
	25, 26, 27, 29, 30, 31, 32, 43, 49, 50,
	54, 57, 59, 65, 70, 75, 76, 78, 77, 79,
	80, 81, 90, 92, 94, 96, 97, 100, 102, 104,
	112, 114, 126, 128, 129, 131, 134, 136, 147, 150,
	152, 162, 164, 173, 176, 181, 183, 184, 198, 199,
	200, 206, 208, 209, 211, 212, 224, 230, 239, 253,
	265, 271, 281, 292, 294, 302, 306, 307, 312, 317,
	318, 323, 325, 332, 333, 335, 336, 337, 338, -135,
	286, 369, -159, -135, -172, 368, -148, 198, -123, -312,
	338, -148, 368, -128, 144, 2, -127, -312, 198, -252,
	-137, -135, -137, 272, -127, 30, -116, 373, 48, 251,
	105, -116, 105, -116, 373, 105, -116, 105, 105, -163,
	-219, 369, 373, -329, -335, 70, 368, 30, -230, -258,
	-259, -261, -270, -264, -268, -269, 40, 46, 45, 301,
	191, 267, 279, 326, 148, 38, 207, 156, 4, 155,
	157, 158, 159, 160, 161, 278, 37, 236, 122, 123,
	121, 98, 89, 88, 203, 42, 41, -272, -273, -266,
	-267, 86, 304, 305, 163, 39, 52, 51, 331, 288,
	-289, -288, -329, -282, -163, 30, -206, 2, -339, 373,
	179, -142, 185, 197, 138, 209, 341, -287, 5, 4,
	-229, -243, 90, 182, -269, 8, 360, -279, 7, 359,
	-281, -280, -281, 74, 370, -283, -161, 22, 274, 2,
	-282, -332, 126, -329, -282, -282, -282, -282, -282, 269,
	-47, 126, -127, 179, -282, 2, -282, 2, 294, 150,
	294, -116, 373, -176, -196, -195, -198, -219, 22, -201,
	120, 194, -219, -221, -103, -103, -103, -151, -247, -219,
	230, 150, -282, -276, -258, -275, 241, 242, 240, 244,
	243, -258, -283, 303, -219, -219, -219, -219, -219, -219,
	-219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
	-219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
	-219, -219, -219, -219, -219, -219, 180, 146, 276, 36,
	147, -219, 306, -219, -219, -219, -219, 190, 198, 200,
	312, 112, 319, 96, 204, -341, 292, 32, -226, -104,
	368, -241, 27, 281, 22, -233, 258, 368, -214, -219,
	-215, -164, -163, 369, 373, -164, -232, -228, -240, -239,
	335, 369, -163, 332, 22, 96, 361, 2, 7, -189,
	342, 189, 87, 139, 188, -190, 264, -316, 119, 134,
	368, 369, 2, 369, 2, 369, 2, 369, 2, -219,
	-219, -183, 2, -277, -163, 4, 342, 189, 87, 139,
	188, 264, -183, 2, -184, 2, -219, -163, -185, -220,
	-221, 359, 360, 354, 368, 258, -186, 2, -219, -164,
	-219, 43, 176, 307, -187, -219, 129, -163, -219, -219,
	-219, -163, -163, 2, -163, 2, 368, 7, 7, 303,
	303, 7, -131, -310, 30, -153, -156, 373, 129, 30,
	4, -156, 373, 369, 169, 169, -249, -182, 169, -180,
	215, -180, -180, -327, 368, 367, -246, -283, 366, 375,
	-164, 2, -245, -244, 30, -127, 213, 369, -135, 373,
	306, -193, 65, 59, -209, 144, 59, -294, -127, 65,
	-295, 54, 318, 230, 128, -193, 65, -193, 65, 65,
	-251, 33, -61, 129, 306, -251, 306, 33, -61, 129,
	306, -138, -283, -255, 346, -127, 129, 369, 373, -143,
	-153, -144, -127, -210, -209, -296, -297, -294, 150, 318,
	113, 30, 105, 222, 30, 208, 198, -119, 297, 105,
	-211, 336, -202, -61, 368, 90, 30, -202, -167, -168,
	-254, -169, -135, 368, -127, -161, -162, -162, -138, -139,
	-127, -153, 369, 373, -47, -256, 306, 325, -144, -46,
	369, 373, -155, 29, 366, -189, 368, -255, 373, 129,
	349, 306, 369, 309, -207, -141, 235, 280, 247, 268,
	8, 7, 7, 373, -283, -331, -127, 269, -47, -135,
	-138, -135, -251, -199, -279, 368, 360, -200, 258, 259,
	373, -112, 31, 94, 170, -135, 343, -219, -219, 306,
	-341, 292, -226, -219, 190, 200, 312, 112, 319, 96,
	204, 129, 368, -220, -220, -163, -223, 368, -163, 367,
	377, 369, -219, 367, 367, 373, -238, -239, 100, -219,
	-150, 373, -149, -219, -163, -163, 369, 369, 306, 306,
	306, 306, 368, -321, 216, 368, 368, -219, 30, 373,
	369, 129, 369, 369, -191, 224, 369, 10, 11, 359,
	360, 361, 362, 124, 363, 364, 357, 358, 356, 347,
	348, 349, 63, 186, 260, 13, 14, 15, 165, 147,
	-220, -220, -220, -163, 368, 369, -224, -225, 129, 126,
	30, -187, -187, -187, 369, 129, -163, 373, 373, 373,
	369, 369, 369, 7, 369, 373, 369, 343, 343, 369,
	368, 369, -211, -253, -158, 2, -249, -283, -211, -242,
	-249, -249, -181, 325, 208, 169, -249, -244, 369, -328,
	7, -246, -245, 7, -218, -217, 127, 196, 369, -127,
	368, -246, 369, -113, -135, -127, -127, 198, -209, 144,
	-118, 198, -258, -127, 368, 368, 170, 170, -127, -127,
	144, -127, 144, -127, -127, -114, 246, -61, 368, -135,
	246, -127, -61, 368, -127, 246, -97, 143, 204, 286,
	129, -135, 369, 369, 373, -128, 150, -128, -61, -161,
	5, -61, -135, 105, -120, 101, -340, 349, -127, -197,
	-195, -219, -178, -204, 253, 208, -159, 330, -127, -178,
	-157, 373, 129, 349, -159, -116, -116, -116, -116, -219,
	-331, -288, 369, -258, 366, 367, 7, 7, -100, 338,
	-288, -331, -280, -280, -124, 316, 62, 235, -280, 373,
	-200, -219, -247, -135, 374, -219, -219, -220, -220, 129,
	368, -219, -230, 26, 26, 369, -164, 373, -215, -219,
	369, -228, 102, -219, 302, 369, 332, -150, -150, -150,
	5, 189, 139, 188, -190, 188, -190, -190, 7, -322,
	-127, 368, 336, -149, 369, -276, -258, -219, -224, -219,
	-276, -258, -220, -220, -220, -220, -220, -220, -220, -220,
	-220, -220, -220, -220, -220, -220, -220, -220, -220, -220,
	-220, 96, 198, 204, -220, 373, -164, -225, -224, -219,
	-219, -258, 369, 369, 369, -163, -219, -219, -219, 369,
	7, -46, -175, 134, -255, 373, -175, -181, 368, -219,
	-249, 367, 369, 373, -245, 367, 373, 376, 349, -246,
	368, -153, -244, 306, 306, 105, 198, 327, -298, -295,
	-219, -152, -248, -127, -309, 368, -306, -307, -133, 368,
	368, -111, 99, 272, -194, 105, -116, 105, -116, 306,
	-193, 65, -163, 306, -163, 306, -100, 129, 293, 286,
	-145, 149, -210, 368, -128, 368, 368, -148, 368, -127,
	-121, 175, -340, -286, -312, -178, -178, -166, 199, 64,
	369, -211, -168, -158, -242, 369, -101, 72, -101, 7,
	367, 369, -99, 210, -98, -127, 5, -127, 209, 369,
	-112, -283, 26, 26, -219, -230, 369, -219, -219, 369,
	-219, 367, -219, 5, -219, 369, 369, 369, 369, -323,
	-127, -219, 369, 369, 369, -225, 129, 96, 204, 368,
	-219, 369, 369, 373, 369, 369, 369, 369, -227, 136,
	44, -249, -227, -153, -216, 7, -217, -283, 366, -245,
	-153, 369, -127, -127, -209, 105, -299, 65, -300, 57,
	113, 70, 198, 200, 318, 230, 54, 90, 239, 369,
	369, 373, -134, -171, 57, -134, -219, 368, -152, -153,
	198, 90, 198, 90, 83, 314, -127, -127, -135, -127,
	-127, 369, -135, 369, -127, -289, 303, 147, -152, 368,
	-153, -143, 30, -152, 208, -122, 174, -340, -286, -119,
	-203, 368, 208, -61, -178, 349, 83, 83, 367, 373,
	368, 349, 349, -112, -219, -219, 369, 369, -150, -317,
	221, 369, -220, 129, 368, -230, 369, -219, -318, 337,
	-219, -163, -318, 369, -246, 7, 369, -209, -127, -283,
	-127, 113, 144, 200, 170, 368, -220, -135, -208, -336,
	69, 290, -248, -112, -283, -112, 369, -163, 369, 369,
	200, 200, -219, -258, -116, -116, 306, 306, 306, 306,
	-222, -133, -127, 219, 369, -152, 369, 369, -61, 369,
	-135, -340, -286, -120, 97, -153, 65, -174, -104, 368,
	368, 368, -98, -99, -288, -288, 369, -150, 44, -220,
	-230, 369, 369, -319, -320, -127, -245, 367, -300, -128,
	198, -219, -129, 368, -145, 368, -134, -150, 239, -115,
	57, -127, -127, 368, 368, 368, -135, -208, 369, -145,
	-208, 368, -286, -121, 320, 199, 369, -127, -289, -289,
	369, -324, 234, 259, -163, 369, 373, 30, 105, 369,
	-303, 187, -127, -153, -112, 369, -135, -110, 325, -283,
	-163, -163, -163, 368, -145, -208, -145, -152, -122, 272,
	-211, 369, 369, 369, -325, -326, 36, 315, 74, -219,
	-325, -320, -322, 113, -301, -304, -302, 208, 130, 220,
	277, 369, 369, -148, -219, 369, 369, -150, -153, -145,
	369, -167, -100, -100, -326, 227, 125, 258, 227, 125,
	-127, -302, 208, -304, 208, 320, 93, -303, 369, 369,
	-208, -211, 26, -305, 195, 251, 48, 272, -305, -301,
	-117, 48, 251, -145, -326, 20, 200, 90,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 0,
	0, 143, 145, 0, 299, 0, 0, 152, 154, 156,
	158, -2, 161, 163, 0, 0, 0, 174, 176, 178,
	180, 182, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 640, -2, 0, 279, 281, 290, 292,
	294, 296, 297, 0, 343, 345, 347, 349, 351, 353,
	355, 357, 359, 361, 363, 365, 367, 369, 371, 372,
	374, 376, 0, 561, 563, 565, -2, 64, 65, 66,
	67, 68, 74, 75, 76, 77, 70, 72, 676, -2,
	687, 0, 0, 0, -2, 0, -2, -2, -2, 0,
	0, 653, 655, 657, 659, -2, 0, 0, -2, 7,
	13, 15, 17, 20, 22, 24, 26, 28, 30, 32,
	34, 36, 38, 40, 43, 49, 51, 53, 56, 58,
	60, 62, 63, 0, 0, 0, 0, 0, 118, 263,
	0, 1252, 1179, 1185, 1186, 1210, 1211, 1212, 1229, 1230,
	1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240,
	1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250,
	1251, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261,
	1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271,
	1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281,
	1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
	1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301,
	1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311,
	1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321,
	1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331,
	1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341,
	1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351,
	1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361,
	1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371,
	1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381,
	1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391,
	1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401,
	1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411,
	1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421,
	1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431,
	1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441,
	1442, 144, 146, 147, 0, 0, 0, 0, 1181, 1252,
	153, 155, 157, 159, 0, 165, 0, 0, 0, 0,
	528, 162, 164, 254, 1312, 256, 258, 0, 0, 0,
	0, 168, 169, 170, 171, 172, 173, 175, 177, 179,
	181, 183, 184, 0, 0, 0, 0, 0, 253, 251,
	206, 207, 0, 236, 237, 238, 239, 240, 242, 210,
	212, 213, 215, 217, 219, 221, 222, 224, 226, 227,
	229, 231, 232, 234, 0, 0, 260, 266, 267, 268,
	270, 271, 272, 273, 274, 275, 276, 0, 124, 0,
	449, 249, 247, 0, 120, 0, 558, 0, 262, 559,
	560, 555, 556, 1339, 584, 280, 282, 291, 293, 295,
	-2, -2, 1429, -2, 307, -2, 315, 1435, 0, 318,
	319, 322, -2, 202, 344, 346, 348, 350, 352, 354,
	356, 358, 360, 362, 364, 366, 368, 370, 373, 375,
	377, 378, 379, 0, 0, 0, 383, 0, -2, -2,
	0, 0, 0, 0, 0, -2, 0, -2, 0, 0,
	-2, -2, 0, 0, -2, 0, 0, 382, 384, 385,
	386, 0, 562, 564, 566, 0, 518, 678, -2, 651,
	652, -2, 0, 682, 682, 682, 0, 0, 652, 650,
	0, 283, 0, 285, 0, 383, 288, 289, 323, 324,
	1164, 1165, 881, 0, 0, 0, 0, 0, 0, 983,
	985, 1402, 1429, 0, 987, 988, 0, 990, 992, 993,
	0, 996, 997, 1149, 1181, 1195, 1196, 1197, 1198, 0,
	0, 1201, 0, 1203, 1204, 1205, 1051, 1007, -2, -2,
	1193, 809, 810, 811, 812, -2, 1443, 1011, 1014, 1017,
	1020, 1021, 1024, 1025, 0, 1386, 1403, 1404, 1425, 1426,
	1434, 1438, 1439, 1410, 1422, 1411, 1398, 1408, 1420, 1258,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1219, 843, 844, 849, 850,
	1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453,
	1454, 1455, 1456, 1457, 852, 586, 568, 577, 586, 570,
	571, 572, 573, 574, 575, 576, 579, 0, 668, 1318,
	671, 1192, 669, 654, 656, 0, 658, 0, 0, 662,
	684, 683, 717, 718, 0, 666, 667, 677, 733, 771,
	748, 739, 0, 0, 2, 69, 0, 1410, 771, 71,
	0, 1410, 771, 73, 0, 78, 0, 1410, 1184, 0,
	0, 264, 265, 1189, 1187, 1188, 0, 148, 149, 150,
	151, 300, 0, 0, 0, 1182, 1158, 1156, 1157, 160,
	497, 1410, -2, 520, 497, 524, -2, 675, 1410, 600,
	255, 257, 0, 167, 0, 613, 0, 615, 0, 630,
	777, 110, 1410, 187, 200, 110, 1410, 190, 110, 1410,
	193, 1177, 110, 1410, 196, 197, 1410, 199, 250, 0,
	0, -2, 243, 245, 1220, 1221, 1222, 1223, -2, 1443,
	241, 211, 214, 216, 218, 220, 223, 225, 228, 230,
	233, 235, -2, 0, 0, 0, 448, 0, 0, 0,
	557, 0, 583, 298, 0, 304, 0, 306, 1397, -2,
	-2, 310, 587, 591, 592, 593, 0, 0, 0, 0,
	0, 0, 0, 320, 203, 0, 380, 381, 389, 390,
	125, 126, 341, 342, 0, 393, 414, 426, 0, 0,
	397, 399, 447, 401, 0, 0, 403, 0, 405, 0,
	407, 0, 409, 0, 411, 413, 415, 427, 417, 677,
	419, 0, 421, 425, 0, 430, 0, 432, 433, 434,
	0, 0, 440, 0, 0, 387, 388, 110, 775, -2,
	0, 646, 696, 697, 0, 0, 0, 0, 680, 681,
	0, 0, 0, 642, 643, 284, 0, 287, 0, 0,
	0, 0, 1084, 1085, 1086, 1087, 1088, 1089, 1092, 1093,
	1090, 1091, 1094, 1095, 0, 0, 0, 0, 0, 1096,
	0, 0, 0, 0, 0, 0, 0, 0, 1097, 1098,
	1099, 0, 0, 1101, 0, 1103, 0, 0, 0, 0,
	0, 0, 1163, 0, 0, 1100, 886, 887, 888, 920,
	921, 0, 984, 1160, 1153, 986, 0, 1106, -2, 1107,
	0, 0, 989, 994, 995, 1106, 0, 1148, -2, 0,
	1200, 0, 878, 1053, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1129, -2, 0, 0, 0,
	0, 0, 0, 0, 0, 828, 846, 857, 854, 853,
	830, 0, 829, 827, 0, 831, 0, 0, 0, 567,
	-2, 569, 0, 581, 0, 670, 0, 0, 719, 722,
	1169, 1173, 1174, 722, 0, 1166, 0, 0, 0, 0,
	768, 768, 768, 766, 742, 0, 748, 0, -2, 772,
	760, 0, -2, 739, 0, 0, 773, 0, 79, 552,
	89, 0, 552, 552, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 762, 1180,
	0, 1154, 1155, 1224, 1225, 1226, 1227, 1228, 1458, 1459,
	1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
	1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479,
	1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489,
	1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
	1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
	1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519,
	1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529,
	1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 301,
	140, 0, 0, 1175, 1159, 455, 0, 0, 519, 0,
	674, 0, 0, 0, 1410, 527, 1213, 602, 0, 781,
	0, 616, 0, 0, 778, 0, 185, 0, 108, 109,
	0, 188, 0, 191, 0, 0, 194, 0, 0, 0,
	1107, 677, 0, 0, 269, 0, 0, 677, 0, 1109,
	789, 790, 791, 792, 793, 878, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	840, 0, 815, 815, 815, 832, 833, 841, 842, 847,
	848, 859, 860, 862, 864, 858, 858, 858, 855, 856,
	762, 127, 0, 0, 0, 0, -2, 312, 0, 589,
	0, 594, 332, 333, 334, 596, 597, 316, 335, 336,
	337, 338, 339, 340, 0, 514, 0, 516, 1206, 0,
	313, 325, 314, 317, 0, 204, 391, 392, 394, 395,
	396, 400, 0, 444, 402, 404, 406, 408, 410, 418,
	422, 677, 428, 431, 435, 436, 437, 438, 0, 0,
	0, 517, 0, 649, 694, 695, 700, 704, 705, 708,
	711, 712, 702, 881, 663, 664, 665, 688, 689, 539,
	0, 0, 286, 882, 785, 786, 834, 835, 836, 837,
	838, 883, 884, 0, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, -2, -2, -2, -2, -2, -2,
	-2, -2, 907, 908, 909, 910, 911, 912, 913, 914,
	-2, -2, -2, 918, 919, -2, 1102, 1104, 0, 1163,
	0, -2, 0, -2, -2, -2, -2, 932, 0, 934,
	937, 939, 941, 0, 0, 0, 0, 1162, 951, 1140,
	0, 0, 1081, 1082, 1083, 936, 0, 0, 1161, 1152,
	0, 0, 1105, 991, 0, 0, 0, 1113, 1147, 1143,
	0, 998, 687, 0, 0, 0, 0, 1005, 0, 1209,
	865, 866, 867, 868, 869, 870, 879, 1061, 0, 0,
	0, 1012, 1013, 1015, 1016, 1018, 1019, 1022, 1023, 0,
	0, 0, 1029, 0, 1116, -2, -2, -2, -2, -2,
	-2, -2, 0, 1031, 0, 1033, 1107, 1126, 0, 0,
	954, 0, 0, 0, 0, 1429, 0, 1036, 1107, 1134,
	0, 0, 0, 0, 0, 1107, 0, 1139, 0, 0,
	0, 0, 0, 1047, 0, 1049, 0, 0, 0, 0,
	0, 0, 580, 672, 0, 0, 781, 0, 0, 0,
	1172, 781, 0, 1168, 0, 0, 0, 0, 0, 763,
	767, 764, 765, 0, 0, 748, 760, 730, 0, 0,
	0, 737, 738, 759, 0, 758, 747, -2, 0, 0,
	0, 0, 0, 551, 91, 1410, 0, 112, 0, 0,
	487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 1183, 130, 0, 1190, 0, 0, 0, 0,
	0, 454, 1189, 456, 458, 459, 460, 461, 1214, 0,
	1214, 0, 0, 0, 0, 0, 0, 604, 610, 0,
	699, 0, 628, 618, 0, 0, 0, 628, 632, 633,
	635, 636, 0, 0, 779, 201, 110, 110, 1178, 110,
	110, 198, 252, 0, 208, 244, 0, 0, 0, 246,
	248, 0, 782, 784, 0, 794, 0, 139, 0, 0,
	0, 0, 305, 0, 588, 595, 0, 329, 0, 331,
	515, 1208, 1207, 0, 205, 446, 277, 420, 423, 441,
	442, 443, 776, 0, 706, 0, 0, 703, 709, 710,
	0, 691, 537, 538, 0, 0, 0, -2, -2, 0,
	0, 0, 952, -2, 933, 935, 938, 940, 942, 0,
	0, 0, 0, 0, 0, 0, 953, 1106, 0, 1150,
	1153, -2, 1108, 1111, 1112, 0, 0, 1144, 0, 0,
	0, 0, 686, 687, 687, 687, 1004, 0, 0, 0,
	0, 0, 0, 1006, 0, 0, 0, 0, 0, 0,
	1028, 0, 1030, 1032, 0, 0, 1034, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	957, 958, 959, 0, 1106, 1035, 1132, 1133, 0, 0,
	0, 0, 0, 0, 1041, 0, 1138, 0, 0, 0,
	1045, 1046, 1048, 0, 813, 0, 839, 861, 863, 851,
	677, 1191, 714, 1170, 762, 721, 723, 1171, 714, 1167,
	750, 0, 752, 0, 0, 0, 754, 0, 743, 0,
	745, 760, 735, 0, 0, 728, 0, 727, 748, 756,
	0, 0, 774, 90, 541, 0, 0, 0, 93, 1410,
	101, 0, 469, 0, 0, 0, 0, 0, 554, 102,
	1410, 110, 1410, 110, 103, 80, 552, 81, 0, 547,
	0, 540, 82, 0, 549, 0, 139, 0, 0, 141,
	0, 1176, 463, 496, 0, 0, 1214, 0, 452, 497,
	521, 523, 0, 0, 606, 610, 0, 609, 675, 628,
	698, 780, 611, 628, 0, 0, 0, 620, 617, 614,
	781, 0, 0, 0, 0, 186, 189, 192, 195, 1108,
	259, 0, 0, 1110, 0, 787, 0, 0, 119, 0,
	128, 261, 302, 303, 308, 327, 328, 330, 326, 0,
	0, 0, 690, 539, 0, 885, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 1141, 0, 0, 0, 1152,
	-2, 1114, 1142, 1146, 0, 999, 0, 0, 0, 0,
	1202, 871, 872, 873, 874, 875, 876, 877, 0, 1059,
	1060, 1064, 0, 0, 1010, 0, 0, 1115, 1125, 1127,
	955, 956, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, -2, -2, -2, 973, 974, 975, -2, -2,
	-2, 0, 0, 0, 1128, 0, 0, 1130, 1131, 1135,
	1136, 0, 1038, 1039, 1040, 1137, 0, 0, 0, 845,
	0, 0, 716, 0, 720, 0, 716, 751, 0, 770,
	753, 733, 744, 0, 741, 731, 0, 732, 0, 760,
	0, 0, 740, 0, 0, 0, 0, 111, 467, 486,
	0, 0, 530, 536, 536, 0, 1008, 1009, 0, 0,
	0, 95, 0, 0, 0, 0, 99, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 142,
	450, 0, 457, 0, 0, 0, 455, 0, 0, 0,
	608, 610, 0, 601, 602, 166, 612, 626, 627, 625,
	0, 628, 634, 631, 637, 0, 0, 121, 0, 0,
	788, 795, 137, 1302, 135, 132, 134, 278, 701, 707,
	692, 539, 0, 0, -2, 0, 945, -2, -2, 1077,
	1108, 1151, 1145, 1199, 687, 1000, 1002, 1003, 880, 1066,
	1063, 0, 1050, 1026, 1027, 1124, 0, 0, 0, 0,
	1108, 1079, 1037, 0, 1043, 1044, 814, 673, 1055, 0,
	0, 724, 1055, 0, 748, 746, 729, 725, 0, 736,
	0, 757, 543, 545, 92, 0, 468, 0, 471, 0,
	0, 0, 0, 477, 478, 0, 0, 0, 0, 488,
	495, 0, 539, 1194, 0, 539, 0, 0, 0, 0,
	0, 107, 0, 0, 553, 0, 110, 110, 542, 0,
	0, 0, 548, 0, 550, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 610, 0, 603, 604,
	0, 0, 0, 619, 629, 0, 0, 0, 783, 0,
	0, 0, 0, 693, -2, -2, 946, 1078, 0, 687,
	0, 1052, -2, 0, 0, 0, 1080, 0, 660, 0,
	715, 713, 661, 769, 760, 0, 755, 94, 0, 472,
	473, 1214, 0, 476, 479, 0, 481, 1216, 463, 0,
	492, 493, 531, 532, 535, 533, 536, 687, 490, 0,
	96, 97, 106, 114, 98, 104, 0, 0, 0, 0,
	761, 0, 0, 0, 495, 0, 485, 463, 453, 495,
	0, 0, 605, 606, 0, 0, 0, 638, 639, 0,
	0, 0, 136, 0, 131, 133, 1001, 1069, 0, -2,
	0, 981, 1042, 1054, 1056, 0, 734, 726, 470, 474,
	0, 0, 501, 0, 489, 0, 539, 0, 0, 116,
	0, 544, 546, 0, 0, 0, 0, 463, 495, 451,
	463, 0, 607, 608, 0, 622, 781, 624, 0, 0,
	138, 0, 0, 0, 1065, 982, 0, 0, 0, 480,
	506, 0, 0, 0, 534, 999, 497, 100, 0, 113,
	0, 0, 687, 0, 483, 463, 525, 0, 599, 0,
	623, 139, 139, 1062, 1067, 1070, -2, 1370, 1249, 0,
	1068, 1057, 1058, 0, 482, 502, 503, 0, 498, 499,
	500, 1215, 494, 501, 115, 86, 88, 0, 0, 484,
	495, 781, 122, 123, 0, 1072, 1073, 1074, 1075, 1076,
	475, 504, 0, 505, 0, 0, 0, 506, 0, 466,
	463, 621, 0, 507, 0, 510, 511, 0, 508, 491,
	462, 464, 465, 526, 1071, 509, 512, 513,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 357, 3, 363, 358, 3,
	368, 369, 361, 359, 373, 360, 370, 362, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 377, 372,
	347, 349, 348, 351, 374, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 366, 3, 367, 364, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 375, 356, 376, 354,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 350,
	57690, 352, 57691, 353, 57692, 355, 57693, 365, 57694, 371,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:863
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:869
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:875
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:884
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:886
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:891
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:903
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:904
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:905
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:910
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:915
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:916
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:917
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:919
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:930
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:931
		{
			return helpWith(sqllex, "ALTER")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:966
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:977
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:988
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1008
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1034
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1040
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1050
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1106
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1129
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1132
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1139
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = nil
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = DropCascade
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = DropRestrict
		}
	case 110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = DropDefault
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1201
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1202
		{
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1205
		{
			return unimplemented(sqllex, "alter using")
		}
	case 116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1206
		{
		}
	case 117:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1233
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1259
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.str = "CSV"
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1297
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1366
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1386
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1387
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1388
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1399
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1410
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1419
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1423
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1425
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1426
		{
			return helpWith(sqllex, "CREATE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1444
		{
			return helpWith(sqllex, "DELETE")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1454
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1466
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1468
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			return helpWith(sqllex, "DROP")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1484
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1499
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1522
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1545
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1560
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1611
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1620
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1623
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1625
		{
			return helpWith(sqllex, "DELETE")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1626
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1627
		{
			return helpWith(sqllex, "INSERT")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1628
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1630
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1631
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1636
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1637
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1639
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1640
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1647
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1648
		{ /* SKIP DOC */
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1676
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1700
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1735
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1755
		{
			return helpWith(sqllex, "GRANT")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1775
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1797
		{
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1853
		{
			return helpWith(sqllex, "RESET")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1854
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			return helpWith(sqllex, "RESET")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1880
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1885
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1888
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1892
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1893
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1894
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1895
		{ /* SKIP DOC */
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1896
		{ /* SKIP DOC */
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1897
		{
			return unimplemented(sqllex, "set local")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1901
		{
			return helpWith(sqllex, "CHECK")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1905
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CheckConsistency{Table: sqlDollar[4].union.newNormalizableTableName()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1924
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1974
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1979
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1996
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1999
		{
			return unimplemented(sqllex, "set from current")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2001
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2007
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2011
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = Low
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = Normal
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = High
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2113
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2114
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2116
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2117
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2118
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2120
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2121
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2122
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2125
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2126
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2127
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2128
		{
			return helpWith(sqllex, "SHOW")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2137
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2148
		{
			sqlVAL.str = "client_encoding"
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2152
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2163
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2185
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2196
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2207
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2218
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2229
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2239
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2250
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2255
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2266
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2285
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2298
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2303
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2321
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2352
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2356
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2360
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2363
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2374
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2385
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2396
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2400
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2404
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2408
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2414
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2442
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2526
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2541
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2545
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = DropDefault
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2555
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2760
		{
			return unimplemented(sqllex, "match full")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2761
		{
			return unimplemented(sqllex, "match partial")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2762
		{
			return unimplemented(sqllex, "match simple")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2763
		{
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2769
		{
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2770
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2771
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2772
		{
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2773
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2776
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2779
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2782
		{
			return unimplemented(sqllex, "no action")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2785
		{
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2786
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2787
		{
			return unimplemented(sqllex, "action set null")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2788
		{
			return unimplemented(sqllex, "action set default")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2813
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2824
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2828
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2832
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 523:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2849
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2889
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = true
		}
	case 529:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = false
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2919
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2920
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2923
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2924
		{
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = Ascending
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = Descending
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 540:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2964
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2966
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = true
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = false
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2999
		{
		}
	case 554:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3000
		{
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3011
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3022
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3033
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3037
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3038
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3039
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3057
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3062
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3075
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3080
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3088
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3095
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3098
		{
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3099
		{
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.str = ""
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.str = ""
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3145
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3158
		{
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3160
		{
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = ReadOnly
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = ReadWrite
		}
	case 598:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3224
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.str = ""
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.str = ""
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.str = ""
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.str = ""
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3267
		{
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3268
		{
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3292
		{
			return helpWith(sqllex, "INSERT")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3309
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3351
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3355
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3363
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 629:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3386
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3390
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3391
		{
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3520
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3555
		{
			return helpWith(sqllex, "SELECT")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3556
		{
			return helpWith(sqllex, "VALUES")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3557
		{
			return helpWith(sqllex, "TABLE")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3603
		{
			return helpWith(sqllex, "SELECT")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3647
		{
			return helpWith(sqllex, "TABLE")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3658
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3659
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3660
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3663
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3664
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3667
		{
			return unimplemented(sqllex, "cte")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3670
		{
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3671
		{
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3674
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3675
		{
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3678
		{
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3679
		{
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = true
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = false
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = false
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = true
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3702
		{
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3703
		{
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3750
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3774
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3826
		{
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3827
		{
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3830
		{
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3831
		{
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3889
		{
			return helpWith(sqllex, "VALUES")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3891
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3906
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &From{}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3928
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3946
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3973
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4010
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4035
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = nil
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4076
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4082
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = true
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = false
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.str = astFullJoin
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.str = astLeftJoin
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.str = astRightJoin
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.str = astInnerJoin
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4193
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4194
		{
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4280
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4294
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4302
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4326
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 795:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4337
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4379
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4383
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4387
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4418
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4427
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = nil
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4492
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4552
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4560
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 840:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4588
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4604
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 851:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4620
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4642
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4659
		{
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4660
		{
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 861:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4677
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 863:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4681
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = year
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = month
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = day
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = hour
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = minute
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = month
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = hour
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = minute
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = minute
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = nil
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = second
		}
	case 880:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4755
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4790
		{
			return unimplemented(sqllex, "at tz")
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4807
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4815
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4843
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4963
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4991
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4995
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4998
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5012
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5016
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5020
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5024
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5064
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5116
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5128
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5132
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5136
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5148
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5152
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5156
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5160
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5168
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5172
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5180
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5184
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5188
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5192
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5196
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5200
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5232
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5237
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5290
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5291
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5293
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5304
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5315
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5322
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5331
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5332
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5336
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5338
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5342
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5345
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5354
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5356
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5360
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5363
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5364
		{
			return unimplemented(sqllex, "current role")
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5366
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5370
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5373
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5375
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5379
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5383
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5387
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5391
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5394
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5399
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5401
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5404
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5406
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5410
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5413
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5414
		{
			return unimplemented(sqllex, "treat")
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5420
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5432
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5436
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5440
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5444
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5451
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5453
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5456
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5460
		{
			return unimplemented(sqllex, "within group")
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5461
		{
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5465
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5469
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5476
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5480
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5486
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5490
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5496
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5504
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5508
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5512
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5519
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.str = ""
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5544
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5548
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5558
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5559
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5560
		{
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5563
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5564
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5570
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5571
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5572
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5573
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5574
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5585
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5589
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5595
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5601
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5607
		{
			sqlVAL.union.val = Any
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5611
		{
			sqlVAL.union.val = Some
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5615
		{
			sqlVAL.union.val = All
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5620
		{
			sqlVAL.union.val = Plus
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5621
		{
			sqlVAL.union.val = Minus
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5622
		{
			sqlVAL.union.val = Mult
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5623
		{
			sqlVAL.union.val = Div
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5624
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5625
		{
			sqlVAL.union.val = Mod
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5626
		{
			sqlVAL.union.val = Bitand
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5627
		{
			sqlVAL.union.val = Bitor
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5628
		{
			sqlVAL.union.val = Pow
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5629
		{
			sqlVAL.union.val = Bitxor
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5630
		{
			sqlVAL.union.val = LT
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5631
		{
			sqlVAL.union.val = GT
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5632
		{
			sqlVAL.union.val = EQ
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5633
		{
			sqlVAL.union.val = LE
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5634
		{
			sqlVAL.union.val = GE
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5635
		{
			sqlVAL.union.val = NE
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5639
		{
			sqlVAL.union.val = Like
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5640
		{
			sqlVAL.union.val = NotLike
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5641
		{
			sqlVAL.union.val = ILike
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5642
		{
			sqlVAL.union.val = NotILike
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5654
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5660
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5664
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5680
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5684
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5694
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5700
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5726
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5730
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5734
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5740
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5747
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5751
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5768
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5772
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5776
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5780
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5790
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5802
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5806
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5810
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5816
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5820
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5831
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5838
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5842
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5848
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5854
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5858
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5865
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5871
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5875
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5882
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5888
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5894
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5900
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5904
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5910
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5914
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5920
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5924
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5929
		{
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5930
		{
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5939
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5945
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5949
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5958
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5964
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5968
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5974
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5983
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5987
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5991
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5999
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6003
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6009
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6013
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6019
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6023
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6034
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6044
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6048
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6061
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6065
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6069
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6073
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6079
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6083
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6089
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6092
		{
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6102
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6106
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6113
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6117
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6121
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6125
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6128
		{
			return unimplemented(sqllex, "func const")
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6130
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6134
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6137
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6139
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6143
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6147
		{
			sqlVAL.union.val = DNull
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6154
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6158
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6164
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6199
		{
			sqlVAL.str = ""
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6205
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6209
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
