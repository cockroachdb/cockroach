// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:350
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const COALESCE = 57396
const COLLATE = 57397
const COLLATION = 57398
const COLUMN = 57399
const COLUMNS = 57400
const COMMIT = 57401
const COMMITTED = 57402
const CONCAT = 57403
const CONFLICT = 57404
const CONSTRAINT = 57405
const CONSTRAINTS = 57406
const COPY = 57407
const COVERING = 57408
const CREATE = 57409
const CROSS = 57410
const CUBE = 57411
const CURRENT = 57412
const CURRENT_CATALOG = 57413
const CURRENT_DATE = 57414
const CURRENT_ROLE = 57415
const CURRENT_TIME = 57416
const CURRENT_TIMESTAMP = 57417
const CURRENT_USER = 57418
const CYCLE = 57419
const DATA = 57420
const DATABASE = 57421
const DATABASES = 57422
const DATE = 57423
const DAY = 57424
const DEC = 57425
const DECIMAL = 57426
const DEFAULT = 57427
const DEALLOCATE = 57428
const DEFERRABLE = 57429
const DELETE = 57430
const DESC = 57431
const DISTINCT = 57432
const DO = 57433
const DOUBLE = 57434
const DROP = 57435
const ELSE = 57436
const ENCODING = 57437
const END = 57438
const ESCAPE = 57439
const EXCEPT = 57440
const EXISTS = 57441
const EXECUTE = 57442
const EXPLAIN = 57443
const EXTRACT = 57444
const EXTRACT_DURATION = 57445
const FALSE = 57446
const FAMILY = 57447
const FETCH = 57448
const FILTER = 57449
const FIRST = 57450
const FLOAT = 57451
const FLOORDIV = 57452
const FOLLOWING = 57453
const FOR = 57454
const FORCE_INDEX = 57455
const FOREIGN = 57456
const FROM = 57457
const FULL = 57458
const GRANT = 57459
const GRANTS = 57460
const GREATEST = 57461
const GROUP = 57462
const GROUPING = 57463
const HAVING = 57464
const HELP = 57465
const HIGH = 57466
const HOUR = 57467
const INCREMENTAL = 57468
const IF = 57469
const IFNULL = 57470
const ILIKE = 57471
const IN = 57472
const INTERLEAVE = 57473
const INDEX = 57474
const INDEXES = 57475
const INITIALLY = 57476
const INNER = 57477
const INSERT = 57478
const INT = 57479
const INT2VECTOR = 57480
const INT8 = 57481
const INT64 = 57482
const INTEGER = 57483
const INTERSECT = 57484
const INTERVAL = 57485
const INTO = 57486
const IS = 57487
const ISOLATION = 57488
const JOIN = 57489
const KEY = 57490
const KEYS = 57491
const LATERAL = 57492
const LC_CTYPE = 57493
const LC_COLLATE = 57494
const LEADING = 57495
const LEAST = 57496
const LEFT = 57497
const LEVEL = 57498
const LIKE = 57499
const LIMIT = 57500
const LOCAL = 57501
const LOCALTIME = 57502
const LOCALTIMESTAMP = 57503
const LOW = 57504
const LSHIFT = 57505
const MATCH = 57506
const MINUTE = 57507
const MONTH = 57508
const NAN = 57509
const NAME = 57510
const NAMES = 57511
const NATURAL = 57512
const NEXT = 57513
const NO = 57514
const NO_INDEX_JOIN = 57515
const NORMAL = 57516
const NOT = 57517
const NOTHING = 57518
const NULL = 57519
const NULLIF = 57520
const NULLS = 57521
const NUMERIC = 57522
const OF = 57523
const OFF = 57524
const OFFSET = 57525
const OID = 57526
const ON = 57527
const ONLY = 57528
const OPTIONS = 57529
const OR = 57530
const ORDER = 57531
const ORDINALITY = 57532
const OUT = 57533
const OUTER = 57534
const OVER = 57535
const OVERLAPS = 57536
const OVERLAY = 57537
const PARENT = 57538
const PARTIAL = 57539
const PARTITION = 57540
const PASSWORD = 57541
const PLACING = 57542
const POSITION = 57543
const PRECEDING = 57544
const PRECISION = 57545
const PREPARE = 57546
const PRIMARY = 57547
const PRIORITY = 57548
const RANGE = 57549
const READ = 57550
const REAL = 57551
const RECURSIVE = 57552
const REF = 57553
const REFERENCES = 57554
const REGCLASS = 57555
const REGPROC = 57556
const REGPROCEDURE = 57557
const REGNAMESPACE = 57558
const REGTYPE = 57559
const RENAME = 57560
const REPEATABLE = 57561
const RELEASE = 57562
const RESET = 57563
const RESTORE = 57564
const RESTRICT = 57565
const RETURNING = 57566
const REVOKE = 57567
const RIGHT = 57568
const ROLLBACK = 57569
const ROLLUP = 57570
const ROW = 57571
const ROWS = 57572
const RSHIFT = 57573
const SAVEPOINT = 57574
const SCATTER = 57575
const SEARCH = 57576
const SECOND = 57577
const SELECT = 57578
const SERIAL = 57579
const SERIALIZABLE = 57580
const SESSION = 57581
const SESSION_USER = 57582
const SET = 57583
const SHOW = 57584
const SIMILAR = 57585
const SIMPLE = 57586
const SMALLINT = 57587
const SMALLSERIAL = 57588
const SNAPSHOT = 57589
const SOME = 57590
const SPLIT = 57591
const SQL = 57592
const START = 57593
const STATUS = 57594
const STDIN = 57595
const STRICT = 57596
const STRING = 57597
const STORING = 57598
const SUBSTRING = 57599
const SYMMETRIC = 57600
const SYSTEM = 57601
const TABLE = 57602
const TABLES = 57603
const TEMPLATE = 57604
const TESTING_RANGES = 57605
const TESTING_RELOCATE = 57606
const TEXT = 57607
const THEN = 57608
const TIME = 57609
const TIMESTAMP = 57610
const TIMESTAMPTZ = 57611
const TO = 57612
const TRAILING = 57613
const TRANSACTION = 57614
const TREAT = 57615
const TRIM = 57616
const TRUE = 57617
const TRUNCATE = 57618
const TYPE = 57619
const UNBOUNDED = 57620
const UNCOMMITTED = 57621
const UNION = 57622
const UNIQUE = 57623
const UNKNOWN = 57624
const UPDATE = 57625
const UPSERT = 57626
const USER = 57627
const USERS = 57628
const USING = 57629
const VALID = 57630
const VALIDATE = 57631
const VALUE = 57632
const VALUES = 57633
const VARCHAR = 57634
const VARIADIC = 57635
const VIEW = 57636
const VARYING = 57637
const WHEN = 57638
const WHERE = 57639
const WINDOW = 57640
const WITH = 57641
const WITHIN = 57642
const WITHOUT = 57643
const YEAR = 57644
const ZONE = 57645
const NOT_LA = 57646
const WITH_LA = 57647
const AS_LA = 57648
const POSTFIXOP = 57649
const UMINUS = 57650

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5452

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 31,
	327, 31,
	-2, 425,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 52,
	98, 408,
	142, 408,
	158, 408,
	183, 408,
	189, 408,
	280, 408,
	-2, 398,
	-1, 66,
	98, 407,
	142, 407,
	158, 407,
	183, 407,
	189, 407,
	280, 407,
	-2, 401,
	-1, 75,
	1, 31,
	327, 31,
	-2, 425,
	-1, 431,
	1, 199,
	327, 199,
	-2, 990,
	-1, 469,
	158, 435,
	183, 435,
	-2, 404,
	-1, 472,
	158, 434,
	183, 434,
	-2, 402,
	-1, 605,
	158, 434,
	183, 434,
	-2, 405,
	-1, 664,
	324, 924,
	-2, 917,
	-1, 665,
	324, 925,
	-2, 918,
	-1, 671,
	5, 593,
	324, 593,
	-2, 1097,
	-1, 695,
	5, 554,
	-2, 1071,
	-1, 696,
	5, 587,
	324, 587,
	-2, 1073,
	-1, 697,
	5, 562,
	-2, 1074,
	-1, 698,
	5, 561,
	-2, 1075,
	-1, 699,
	5, 587,
	324, 587,
	-2, 1078,
	-1, 700,
	5, 587,
	324, 587,
	-2, 1079,
	-1, 701,
	5, 588,
	-2, 1082,
	-1, 702,
	5, 548,
	-2, 1083,
	-1, 703,
	5, 548,
	-2, 1084,
	-1, 704,
	5, 569,
	-2, 1088,
	-1, 705,
	5, 549,
	-2, 1093,
	-1, 706,
	5, 550,
	-2, 1094,
	-1, 707,
	5, 551,
	-2, 1095,
	-1, 708,
	5, 552,
	-2, 1096,
	-1, 709,
	5, 548,
	-2, 1101,
	-1, 710,
	5, 555,
	-2, 1106,
	-1, 711,
	5, 553,
	-2, 1109,
	-1, 712,
	5, 585,
	324, 585,
	-2, 1111,
	-1, 713,
	5, 589,
	-2, 1114,
	-1, 714,
	5, 591,
	-2, 1115,
	-1, 715,
	5, 584,
	324, 584,
	-2, 1119,
	-1, 981,
	98, 408,
	142, 408,
	158, 408,
	183, 408,
	189, 408,
	280, 408,
	-2, 712,
	-1, 990,
	324, 901,
	-2, 889,
	-1, 1204,
	13, 0,
	14, 0,
	15, 0,
	307, 0,
	308, 0,
	309, 0,
	-2, 628,
	-1, 1205,
	13, 0,
	14, 0,
	15, 0,
	307, 0,
	308, 0,
	309, 0,
	-2, 629,
	-1, 1206,
	13, 0,
	14, 0,
	15, 0,
	307, 0,
	308, 0,
	309, 0,
	-2, 630,
	-1, 1210,
	13, 0,
	14, 0,
	15, 0,
	307, 0,
	308, 0,
	309, 0,
	-2, 634,
	-1, 1211,
	13, 0,
	14, 0,
	15, 0,
	307, 0,
	308, 0,
	309, 0,
	-2, 635,
	-1, 1212,
	13, 0,
	14, 0,
	15, 0,
	307, 0,
	308, 0,
	309, 0,
	-2, 636,
	-1, 1215,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	304, 0,
	-2, 641,
	-1, 1221,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	304, 0,
	-2, 643,
	-1, 1224,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	304, 0,
	-2, 648,
	-1, 1225,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	304, 0,
	-2, 649,
	-1, 1226,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	304, 0,
	-2, 650,
	-1, 1253,
	194, 783,
	-2, 786,
	-1, 1282,
	115, 823,
	324, 924,
	-2, 917,
	-1, 1283,
	115, 824,
	-2, 1067,
	-1, 1284,
	115, 825,
	-2, 989,
	-1, 1285,
	115, 826,
	-2, 958,
	-1, 1286,
	115, 827,
	-2, 973,
	-1, 1287,
	115, 828,
	-2, 988,
	-1, 1288,
	115, 829,
	-2, 1033,
	-1, 1444,
	98, 408,
	142, 408,
	158, 408,
	183, 408,
	189, 408,
	280, 408,
	-2, 484,
	-1, 1448,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	304, 0,
	-2, 642,
	-1, 1449,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	304, 0,
	-2, 644,
	-1, 1454,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	304, 0,
	-2, 645,
	-1, 1472,
	194, 782,
	-2, 785,
	-1, 1661,
	1, 485,
	68, 485,
	98, 485,
	116, 485,
	120, 485,
	122, 485,
	135, 485,
	142, 485,
	147, 485,
	155, 485,
	158, 485,
	170, 485,
	183, 485,
	185, 485,
	189, 485,
	224, 485,
	226, 485,
	280, 485,
	287, 485,
	297, 485,
	298, 485,
	306, 485,
	323, 485,
	325, 485,
	327, 485,
	328, 485,
	-2, 484,
	-1, 1663,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	304, 0,
	-2, 646,
	-1, 1668,
	145, 0,
	-2, 662,
	-1, 1678,
	194, 784,
	-2, 787,
	-1, 1712,
	13, 0,
	14, 0,
	15, 0,
	307, 0,
	308, 0,
	309, 0,
	-2, 689,
	-1, 1713,
	13, 0,
	14, 0,
	15, 0,
	307, 0,
	308, 0,
	309, 0,
	-2, 690,
	-1, 1714,
	13, 0,
	14, 0,
	15, 0,
	307, 0,
	308, 0,
	309, 0,
	-2, 691,
	-1, 1718,
	13, 0,
	14, 0,
	15, 0,
	307, 0,
	308, 0,
	309, 0,
	-2, 695,
	-1, 1719,
	13, 0,
	14, 0,
	15, 0,
	307, 0,
	308, 0,
	309, 0,
	-2, 696,
	-1, 1720,
	13, 0,
	14, 0,
	15, 0,
	307, 0,
	308, 0,
	309, 0,
	-2, 697,
	-1, 1840,
	145, 0,
	-2, 663,
	-1, 1843,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	304, 0,
	-2, 666,
	-1, 1844,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	304, 0,
	-2, 668,
	-1, 1949,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	304, 0,
	-2, 667,
	-1, 1950,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	304, 0,
	-2, 669,
	-1, 1957,
	145, 0,
	-2, 698,
	-1, 2013,
	145, 0,
	-2, 699,
	-1, 2078,
	36, 0,
	129, 0,
	157, 0,
	243, 0,
	304, 0,
	-2, 1070,
}

const sqlPrivate = 57344

const sqlLast = 28449

var sqlAct = [...]int{

	665, 2077, 2055, 1656, 2102, 2019, 2056, 2076, 1618, 2057,
	1083, 1689, 1075, 1884, 899, 1806, 1657, 1930, 1442, 655,
	1168, 1910, 285, 1143, 480, 65, 663, 662, 1763, 791,
	1831, 473, 1628, 88, 88, 88, 905, 1749, 1565, 1418,
	1439, 1817, 1566, 518, 1420, 303, 88, 88, 88, 494,
	1811, 88, 641, 754, 88, 1251, 1147, 1161, 536, 1142,
	1483, 51, 88, 88, 760, 432, 1533, 1183, 65, 1634,
	88, 88, 1532, 986, 88, 1369, 901, 88, 88, 88,
	88, 1146, 1430, 88, 88, 728, 1643, 1115, 1175, 1363,
	731, 287, 20, 1035, 1308, 1044, 1261, 1425, 1084, 301,
	65, 635, 1238, 1176, 752, 1181, 1235, 509, 1067, 292,
	30, 291, 16, 1099, 624, 293, 8, 852, 1108, 1311,
	1135, 922, 764, 89, 977, 591, 716, 775, 472, 761,
	478, 733, 792, 1279, 634, 537, 528, 530, 1016, 625,
	1077, 1020, 531, 1150, 592, 927, 1764, 483, 66, 419,
	1178, 609, 608, 67, 80, 850, 607, 854, 410, 657,
	768, 481, 422, 524, 590, 1471, 84, 20, 304, 612,
	777, 305, 300, 930, 931, 1942, 1076, 777, 1943, 777,
	2093, 1080, 477, 757, 477, 30, 2072, 16, 273, 1762,
	2067, 8, 2066, 1118, 1112, 1118, 933, 2063, 2053, 2048,
	757, 1105, 757, 2044, 1440, 2015, 757, 1380, 1105, 2009,
	1991, 459, 757, 1762, 470, 500, 64, 1068, 932, 469,
	300, 1381, 1987, 429, 491, 757, 1982, 497, 1951, 1981,
	504, 1105, 485, 1940, 71, 1937, 786, 1113, 1938, 1428,
	1924, 1921, 42, 1762, 757, 1919, 1895, 747, 1762, 757,
	43, 930, 931, 1894, 1866, 1118, 1762, 1118, 73, 1845,
	1842, 1997, 1118, 1105, 64, 1834, 1783, 1782, 1118, 1118,
	1118, 1071, 44, 938, 933, 1475, 1761, 1114, 1111, 1762,
	1476, 88, 88, 88, 88, 88, 460, 540, 1672, 74,
	42, 1118, 1503, 1504, 1428, 1474, 932, 69, 43, 1604,
	1118, 1599, 1074, 70, 1074, 1550, 1548, 1547, 1551, 1118,
	1118, 1546, 1472, 1407, 1118, 1118, 757, 1068, 928, 929,
	44, 1118, 68, 1482, 1172, 1122, 948, 757, 1118, 1725,
	1117, 1104, 71, 1118, 1105, 1073, 1675, 1405, 1074, 1071,
	538, 1033, 1408, 1255, 930, 931, 778, 1116, 478, 533,
	533, 938, 1167, 778, 1032, 778, 73, 1031, 1130, 785,
	620, 718, 786, 894, 893, 844, 843, 933, 757, 507,
	553, 490, 75, 71, 513, 876, 1825, 573, 1443, 2091,
	2075, 2062, 2024, 1765, 2010, 71, 1922, 74, 1871, 932,
	1867, 55, 1509, 1859, 949, 69, 1858, 73, 619, 1857,
	1853, 70, 1852, 1851, 948, 1797, 88, 1740, 1791, 73,
	541, 1735, 1734, 542, 1110, 1733, 1683, 1661, 1633, 1608,
	1079, 88, 517, 1555, 88, 88, 1552, 534, 74, 1540,
	1531, 525, 1502, 71, 1380, 1499, 1109, 1606, 1498, 55,
	74, 1496, 1488, 1487, 938, 1519, 930, 931, 69, 1406,
	1325, 781, 1276, 1275, 70, 1247, 724, 73, 776, 88,
	897, 68, 88, 1441, 88, 88, 88, 619, 88, 933,
	994, 1410, 949, 68, 943, 940, 941, 942, 934, 935,
	936, 937, 939, 88, 959, 618, 904, 987, 74, 68,
	515, 932, 1691, 2036, 88, 1994, 69, 948, 1980, 1979,
	1978, 606, 70, 1970, 1968, 1959, 1946, 540, 88, 1933,
	1917, 1881, 1864, 1520, 303, 540, 1836, 88, 1800, 1503,
	1504, 1650, 88, 88, 88, 1788, 88, 1768, 2074, 598,
	605, 601, 928, 1667, 1648, 1503, 1504, 1626, 1624, 1623,
	723, 1621, 1574, 1573, 1530, 88, 88, 1790, 930, 931,
	1248, 1492, 561, 88, 1491, 88, 934, 935, 936, 937,
	939, 766, 959, 1468, 1463, 949, 540, 540, 1240, 1396,
	1354, 562, 1352, 1339, 303, 88, 1338, 88, 88, 88,
	88, 88, 88, 88, 1318, 1274, 556, 558, 88, 88,
	1171, 1021, 1024, 932, 1028, 88, 1513, 1505, 1506, 1507,
	1508, 1510, 722, 88, 1014, 1013, 987, 1012, 595, 1011,
	1010, 1009, 597, 758, 1008, 1007, 903, 1006, 593, 1509,
	1005, 88, 1004, 1003, 88, 1002, 1001, 1000, 999, 470,
	541, 998, 991, 542, 469, 1509, 751, 304, 541, 980,
	305, 542, 930, 931, 621, 615, 616, 926, 942, 934,
	935, 936, 937, 939, 513, 959, 68, 898, 2046, 780,
	495, 623, 783, 1339, 559, 933, 549, 547, 1941, 836,
	859, 859, 525, 877, 756, 1847, 1826, 1822, 1796, 842,
	908, 1795, 1390, 789, 770, 767, 1389, 932, 978, 541,
	541, 724, 542, 542, 1823, 787, 1984, 304, 1944, 516,
	305, 478, 930, 931, 1421, 1794, 1382, 838, 1068, 840,
	567, 1026, 839, 1443, 1554, 1027, 1553, 1447, 583, 568,
	1503, 1504, 865, 996, 896, 902, 872, 88, 871, 1076,
	1364, 881, 1812, 1479, 1692, 88, 1262, 467, 1017, 88,
	281, 1376, 938, 78, 895, 587, 1561, 88, 88, 2027,
	1986, 88, 2088, 1605, 1776, 1045, 658, 959, 88, 983,
	911, 470, 912, 910, 470, 470, 918, 1402, 924, 919,
	920, 1518, 88, 1121, 88, 88, 452, 88, 2089, 588,
	88, 1905, 88, 88, 458, 88, 457, 540, 453, 993,
	717, 1038, 734, 282, 735, 948, 77, 990, 878, 1904,
	1903, 882, 883, 884, 885, 886, 741, 1902, 1096, 1589,
	65, 889, 890, 1588, 1558, 65, 1048, 476, 1557, 734,
	1509, 735, 739, 1450, 1505, 1506, 1507, 1508, 1510, 1049,
	1051, 1395, 1056, 1394, 1393, 1059, 1112, 740, 1018, 1019,
	538, 1392, 1507, 1508, 1510, 1022, 1037, 1093, 533, 1222,
	533, 1025, 1585, 1119, 1065, 1064, 1061, 1985, 594, 959,
	1078, 475, 1078, 949, 736, 565, 506, 1787, 1029, 1070,
	1322, 1321, 1294, 1519, 1193, 1162, 462, 303, 1041, 1113,
	1037, 88, 1100, 1592, 1062, 1576, 1036, 1886, 277, 1054,
	724, 736, 88, 88, 1594, 1366, 762, 2034, 88, 88,
	1102, 1066, 1101, 2059, 566, 88, 1103, 1047, 477, 824,
	541, 1082, 1237, 542, 1091, 892, 1092, 545, 463, 1114,
	1111, 283, 1097, 745, 76, 1094, 744, 1095, 771, 1237,
	88, 650, 734, 88, 735, 1262, 278, 2099, 744, 468,
	1173, 1520, 742, 464, 940, 941, 942, 934, 935, 936,
	937, 939, 465, 959, 742, 284, 1244, 743, 79, 1116,
	1022, 1242, 1025, 1370, 85, 85, 275, 2110, 303, 743,
	1124, 1019, 1018, 2088, 2050, 1359, 1134, 402, 403, 404,
	1165, 1166, 421, 1046, 2060, 433, 1401, 777, 1123, 1116,
	2105, 1356, 749, 421, 433, 748, 1973, 2051, 1192, 474,
	304, 484, 484, 305, 736, 275, 1503, 1504, 275, 275,
	503, 275, 1403, 959, 85, 510, 1350, 564, 1233, 584,
	1140, 1514, 1511, 1512, 1513, 1505, 1506, 1507, 1508, 1510,
	1138, 2061, 1231, 1577, 766, 88, 88, 88, 1139, 1503,
	1504, 88, 1324, 891, 88, 544, 1126, 1374, 1141, 1613,
	88, 88, 88, 88, 88, 1219, 1110, 1128, 1610, 1583,
	737, 1259, 88, 1184, 1191, 88, 88, 1245, 1174, 930,
	931, 1015, 540, 1157, 1955, 88, 1129, 1887, 1918, 585,
	88, 2098, 88, 280, 279, 1127, 1370, 737, 975, 88,
	1644, 304, 933, 1034, 305, 1227, 1490, 1332, 1611, 88,
	1252, 1249, 563, 1228, 1660, 1229, 1509, 1256, 477, 1234,
	1246, 1264, 1593, 1270, 932, 2103, 2058, 1326, 611, 1116,
	88, 88, 1281, 1281, 1292, 586, 1303, 2087, 628, 732,
	2085, 540, 1315, 1316, 1317, 1805, 1159, 1289, 1452, 1509,
	576, 478, 554, 2111, 552, 1349, 610, 1351, 1217, 1220,
	1353, 1721, 88, 1372, 88, 1236, 88, 1362, 1378, 1519,
	88, 1897, 564, 778, 88, 1327, 2104, 2116, 1116, 938,
	1862, 611, 2097, 1965, 1896, 1336, 1216, 870, 869, 1460,
	863, 860, 1243, 88, 2106, 1879, 1772, 1433, 1409, 1560,
	1411, 1335, 1519, 1458, 1609, 541, 65, 1775, 542, 1331,
	737, 1365, 1375, 1230, 1774, 849, 1436, 1160, 909, 900,
	1232, 1383, 275, 526, 275, 433, 433, 1832, 1642, 2020,
	1384, 1413, 1385, 1386, 610, 888, 1434, 1520, 845, 1629,
	930, 931, 1880, 1341, 1807, 859, 1722, 837, 1388, 1340,
	1398, 1399, 1723, 847, 478, 1820, 1412, 1400, 1404, 1387,
	1415, 563, 1429, 933, 541, 848, 1455, 542, 873, 2115,
	1520, 1863, 1218, 1100, 1639, 1638, 1456, 523, 522, 475,
	1461, 602, 1619, 1798, 1361, 932, 1771, 1833, 1336, 1877,
	1635, 1102, 1426, 1101, 1427, 1424, 1446, 1103, 1445, 1423,
	1273, 1958, 824, 824, 1773, 1861, 1481, 1435, 1534, 1535,
	1433, 1878, 478, 1666, 798, 1591, 1497, 1514, 1511, 1512,
	1513, 1505, 1506, 1507, 1508, 1510, 830, 408, 1462, 1436,
	1367, 1120, 1072, 1453, 1060, 875, 1451, 1057, 589, 582,
	938, 1431, 874, 670, 581, 997, 1429, 550, 823, 1434,
	580, 579, 578, 1467, 1505, 1506, 1507, 1508, 1510, 577,
	574, 521, 555, 514, 1432, 433, 433, 1478, 880, 1572,
	1466, 478, 411, 1272, 1457, 2054, 1571, 1570, 1469, 1819,
	2017, 1459, 1437, 1746, 934, 935, 936, 937, 939, 1581,
	959, 88, 88, 416, 1433, 1579, 1485, 1486, 412, 1559,
	421, 1417, 1600, 275, 1680, 433, 600, 433, 1163, 603,
	1537, 1538, 1539, 1436, 824, 1155, 88, 1098, 784, 88,
	1435, 88, 413, 782, 484, 1431, 779, 774, 88, 1529,
	750, 540, 1556, 1434, 746, 275, 738, 1419, 1625, 88,
	1542, 415, 88, 1563, 1912, 613, 488, 1169, 1432, 85,
	2089, 303, 520, 88, 1584, 867, 81, 1622, 275, 1597,
	1590, 1914, 1053, 275, 275, 275, 570, 772, 1651, 519,
	1598, 1649, 1975, 65, 1630, 1765, 1438, 824, 1603, 2012,
	1602, 1818, 1586, 1580, 1587, 1582, 275, 275, 1349, 1601,
	720, 1612, 1614, 1615, 85, 1595, 85, 3, 864, 861,
	1620, 88, 1037, 1669, 1435, 1170, 298, 25, 1052, 1632,
	297, 24, 1636, 614, 489, 617, 433, 824, 85, 433,
	433, 433, 433, 433, 887, 1641, 1685, 1686, 1687, 433,
	433, 1645, 1646, 1058, 1037, 1631, 421, 1676, 511, 508,
	1050, 414, 1637, 407, 907, 1640, 571, 936, 937, 939,
	1652, 959, 296, 23, 541, 512, 1055, 542, 1998, 1803,
	1679, 1158, 484, 1693, 451, 510, 719, 1107, 88, 88,
	88, 1655, 1695, 496, 304, 1154, 1081, 305, 925, 841,
	790, 1700, 25, 1698, 2113, 88, 24, 2114, 417, 2047,
	88, 2001, 88, 418, 88, 88, 88, 1829, 1673, 88,
	88, 1741, 540, 1572, 411, 294, 22, 1766, 1770, 1728,
	1571, 1570, 1616, 1503, 1504, 1607, 1729, 295, 11, 299,
	10, 1549, 1769, 454, 455, 416, 1745, 667, 23, 1391,
	412, 1323, 289, 9, 88, 88, 1742, 1184, 1696, 930,
	931, 540, 1132, 1131, 288, 7, 1184, 1701, 1320, 88,
	88, 1572, 1319, 88, 413, 1757, 1572, 1801, 1571, 1570,
	1726, 540, 88, 1571, 1570, 1828, 1786, 1269, 275, 88,
	1799, 1736, 1133, 415, 984, 1804, 1042, 1849, 2033, 1732,
	275, 22, 290, 4, 1808, 1911, 1793, 1758, 275, 1063,
	1837, 1688, 275, 11, 1802, 10, 1414, 798, 798, 1069,
	1810, 1792, 88, 994, 992, 461, 1885, 1841, 9, 409,
	879, 575, 1824, 275, 538, 1089, 1090, 1647, 275, 1827,
	7, 275, 478, 433, 433, 541, 433, 2049, 542, 1854,
	1489, 823, 823, 1929, 626, 626, 1954, 1271, 995, 41,
	1568, 644, 1747, 729, 1562, 1809, 1149, 1148, 306, 868,
	917, 666, 1815, 1816, 853, 862, 1821, 88, 4, 88,
	1280, 88, 88, 1185, 541, 721, 1814, 542, 668, 795,
	88, 669, 796, 414, 1023, 1860, 88, 1753, 656, 1754,
	793, 1085, 1241, 1260, 541, 1477, 988, 542, 636, 648,
	647, 1257, 1572, 546, 1889, 1830, 54, 1891, 560, 1571,
	1570, 88, 427, 1872, 428, 1373, 1789, 1756, 1164, 798,
	913, 1578, 466, 1873, 1759, 1888, 88, 1907, 766, 540,
	417, 1500, 1136, 88, 1913, 548, 1875, 1301, 1293, 1290,
	1572, 88, 596, 275, 275, 824, 727, 1571, 1570, 275,
	1145, 1890, 976, 823, 1086, 572, 510, 88, 88, 1920,
	1906, 1379, 1106, 622, 1915, 1939, 921, 487, 914, 916,
	1928, 486, 1926, 1945, 1948, 923, 824, 824, 1932, 1144,
	1947, 275, 798, 1936, 433, 824, 824, 970, 971, 972,
	973, 974, 569, 1755, 846, 1125, 969, 982, 88, 966,
	456, 797, 1953, 1967, 1156, 1334, 2109, 989, 1893, 1974,
	1575, 2026, 72, 1969, 1960, 1923, 823, 1983, 824, 1909,
	1360, 29, 798, 88, 88, 1900, 1901, 26, 21, 1899,
	19, 18, 1963, 1927, 1964, 88, 28, 17, 27, 88,
	15, 1971, 14, 13, 1935, 1972, 12, 540, 40, 39,
	38, 1992, 541, 1990, 88, 542, 823, 37, 1993, 36,
	88, 35, 6, 2002, 5, 303, 88, 88, 2, 2007,
	1, 0, 0, 0, 0, 2000, 0, 1999, 0, 0,
	0, 1996, 0, 2003, 0, 65, 275, 1329, 1330, 88,
	2008, 88, 1042, 2004, 88, 1337, 88, 0, 0, 478,
	0, 1342, 1343, 1345, 1347, 1348, 2011, 0, 0, 2014,
	0, 0, 2023, 1355, 2022, 0, 1357, 275, 88, 2037,
	2035, 88, 2039, 2032, 0, 2038, 275, 0, 0, 0,
	2043, 275, 2041, 1377, 1572, 2042, 0, 2045, 0, 0,
	275, 1571, 1570, 0, 0, 0, 0, 0, 826, 824,
	275, 1995, 0, 2040, 0, 88, 0, 88, 0, 0,
	2064, 2028, 0, 0, 2005, 2069, 0, 2071, 0, 0,
	541, 1136, 1136, 542, 0, 88, 0, 0, 0, 2082,
	2070, 0, 0, 2068, 2086, 2073, 2084, 0, 304, 0,
	2090, 305, 640, 0, 88, 0, 0, 2095, 0, 0,
	2096, 0, 2092, 907, 0, 907, 2094, 433, 0, 0,
	0, 275, 0, 2108, 2107, 1422, 0, 0, 2029, 2030,
	2031, 0, 0, 2112, 825, 0, 0, 274, 1464, 1465,
	0, 1757, 0, 1750, 275, 2117, 0, 0, 0, 0,
	0, 1748, 0, 0, 0, 1752, 0, 1503, 1504, 0,
	0, 0, 2052, 0, 1295, 0, 0, 0, 824, 0,
	0, 0, 0, 1758, 0, 0, 492, 0, 0, 499,
	502, 0, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1751, 0, 794, 626, 0, 0, 1526,
	1527, 1528, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
	1212, 1213, 1214, 1215, 0, 1221, 0, 1223, 1224, 1225,
	1226, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1250, 0, 0, 0,
	798, 0, 0, 0, 0, 0, 824, 1509, 300, 0,
	0, 0, 0, 1753, 0, 1754, 0, 0, 1277, 1278,
	0, 0, 1291, 0, 1302, 1304, 1309, 1312, 1313, 1314,
	0, 798, 798, 0, 823, 0, 0, 0, 0, 0,
	798, 798, 0, 1756, 797, 797, 0, 0, 0, 729,
	1759, 1567, 64, 0, 0, 0, 0, 0, 0, 0,
	1519, 0, 0, 0, 0, 823, 823, 0, 0, 0,
	0, 0, 0, 798, 823, 823, 0, 0, 42, 0,
	0, 0, 0, 0, 0, 0, 43, 0, 0, 0,
	0, 0, 275, 275, 1371, 0, 0, 0, 0, 0,
	0, 824, 0, 0, 1664, 1665, 0, 823, 44, 0,
	0, 0, 0, 0, 0, 0, 0, 1617, 0, 1755,
	1042, 0, 907, 0, 0, 0, 0, 0, 1520, 1627,
	0, 0, 0, 492, 0, 502, 1397, 0, 0, 0,
	275, 0, 0, 275, 1295, 1295, 1503, 1504, 0, 1521,
	1522, 1523, 0, 0, 1659, 0, 797, 0, 1702, 1703,
	1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713,
	1714, 1715, 1716, 1717, 1718, 1719, 1720, 0, 1724, 0,
	0, 0, 0, 0, 0, 923, 0, 0, 0, 645,
	52, 826, 826, 0, 0, 0, 0, 1518, 0, 0,
	0, 0, 1690, 0, 798, 1295, 1295, 1295, 0, 1511,
	1512, 1513, 1505, 1506, 1507, 1508, 1510, 0, 0, 797,
	0, 71, 0, 0, 0, 0, 0, 55, 0, 0,
	0, 0, 0, 52, 1448, 1449, 0, 0, 823, 0,
	1454, 0, 0, 0, 0, 73, 1509, 0, 0, 0,
	0, 0, 0, 0, 0, 471, 0, 0, 479, 797,
	0, 0, 0, 0, 0, 52, 1525, 825, 825, 1743,
	1744, 1042, 0, 1473, 0, 0, 74, 0, 0, 0,
	1480, 1524, 0, 1484, 69, 1567, 510, 0, 0, 0,
	70, 1777, 1493, 1778, 0, 275, 1780, 1781, 0, 1519,
	1784, 275, 0, 826, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 798, 492, 0, 0, 982, 0, 0,
	0, 0, 0, 1309, 1309, 1309, 0, 0, 794, 794,
	0, 0, 0, 1567, 0, 510, 1145, 0, 1567, 0,
	0, 0, 0, 0, 0, 0, 725, 823, 0, 0,
	275, 275, 0, 0, 275, 0, 1564, 0, 0, 0,
	1295, 1295, 0, 1659, 0, 0, 826, 1520, 0, 765,
	1835, 0, 0, 0, 492, 769, 769, 0, 0, 825,
	0, 0, 0, 0, 0, 0, 0, 0, 626, 0,
	0, 0, 0, 0, 0, 0, 0, 499, 502, 0,
	729, 798, 0, 1855, 0, 0, 826, 0, 0, 0,
	0, 1882, 0, 0, 1295, 1295, 1295, 1295, 1295, 1295,
	1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295,
	1295, 1295, 1295, 0, 1295, 823, 0, 0, 0, 0,
	794, 0, 825, 1515, 1516, 1517, 0, 1514, 1511, 1512,
	1513, 1505, 1506, 1507, 1508, 1510, 0, 0, 1042, 0,
	1874, 0, 433, 1876, 0, 1662, 0, 0, 1663, 0,
	0, 275, 0, 0, 1567, 0, 479, 433, 0, 0,
	1668, 0, 825, 0, 0, 0, 0, 0, 0, 1677,
	0, 0, 0, 0, 0, 0, 798, 1681, 0, 1908,
	1397, 0, 510, 794, 0, 0, 0, 0, 0, 0,
	0, 0, 1567, 0, 1957, 1697, 0, 275, 0, 1699,
	0, 0, 0, 0, 1931, 0, 0, 0, 0, 0,
	823, 0, 275, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 794, 0, 0, 0, 0, 510, 1659,
	0, 0, 1730, 1731, 0, 0, 0, 0, 0, 0,
	0, 1737, 1738, 1739, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 930, 931, 0, 797, 0, 1030,
	0, 0, 0, 0, 0, 0, 0, 1767, 0, 907,
	0, 492, 0, 0, 0, 0, 0, 933, 0, 502,
	0, 0, 0, 492, 0, 0, 0, 0, 797, 797,
	0, 2013, 0, 0, 1976, 1977, 0, 797, 797, 932,
	0, 0, 0, 0, 1087, 947, 1988, 0, 0, 502,
	1989, 0, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 510, 0, 0, 0, 0,
	797, 1659, 0, 1813, 0, 0, 0, 1659, 510, 0,
	0, 0, 0, 0, 0, 0, 0, 1295, 0, 0,
	471, 0, 0, 0, 938, 0, 0, 0, 0, 0,
	2021, 0, 510, 0, 1840, 275, 0, 433, 1843, 1844,
	0, 930, 931, 1846, 950, 951, 952, 960, 961, 962,
	1848, 0, 1850, 0, 0, 0, 1567, 953, 0, 1931,
	1856, 0, 1659, 0, 933, 0, 0, 964, 0, 0,
	0, 0, 0, 0, 826, 0, 0, 948, 0, 0,
	0, 0, 0, 0, 0, 0, 932, 0, 0, 0,
	0, 0, 947, 1865, 1137, 502, 275, 0, 510, 0,
	492, 0, 0, 0, 0, 826, 826, 0, 0, 0,
	0, 0, 0, 0, 826, 826, 2083, 0, 0, 0,
	1295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 797, 1179, 0, 0, 1659, 0, 0, 0, 0,
	0, 938, 1898, 0, 0, 949, 0, 826, 0, 0,
	825, 0, 471, 0, 0, 471, 471, 0, 0, 0,
	957, 965, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 979, 0, 981,
	0, 825, 825, 0, 0, 0, 985, 1934, 955, 0,
	825, 825, 0, 0, 948, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1949, 1950, 0, 0,
	0, 794, 0, 0, 0, 0, 0, 1295, 0, 954,
	0, 0, 0, 825, 0, 943, 940, 941, 942, 934,
	935, 936, 937, 939, 0, 959, 1962, 1328, 0, 0,
	797, 0, 794, 794, 0, 0, 0, 0, 0, 1966,
	0, 794, 794, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 949, 0, 0, 0, 0, 0, 1358, 0,
	0, 0, 0, 0, 958, 0, 0, 1368, 826, 0,
	52, 0, 765, 52, 794, 729, 0, 0, 0, 0,
	0, 765, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 0, 0, 52, 0,
	52, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 52, 0, 0, 797, 0,
	52, 0, 0, 0, 0, 956, 0, 0, 944, 945,
	946, 0, 943, 940, 941, 942, 934, 935, 936, 937,
	939, 0, 959, 0, 825, 0, 0, 0, 0, 1868,
	930, 931, 1416, 950, 951, 952, 960, 961, 962, 0,
	0, 0, 0, 0, 0, 0, 953, 0, 0, 0,
	0, 0, 0, 933, 0, 1179, 964, 826, 0, 0,
	0, 0, 0, 0, 0, 2065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 932, 0, 0, 0, 0,
	0, 947, 0, 0, 0, 794, 0, 0, 2081, 2081,
	0, 0, 0, 797, 0, 0, 0, 930, 931, 0,
	950, 951, 952, 960, 961, 962, 0, 0, 0, 0,
	0, 0, 0, 953, 0, 0, 2081, 0, 0, 0,
	933, 0, 0, 964, 0, 0, 0, 0, 0, 0,
	938, 0, 0, 825, 0, 0, 0, 0, 0, 1180,
	0, 0, 932, 0, 0, 826, 0, 0, 947, 957,
	965, 2081, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 963, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1239, 0, 955, 0, 0,
	0, 0, 0, 948, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 794, 0, 0, 938, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 954, 0,
	0, 0, 0, 0, 0, 0, 957, 965, 0, 0,
	0, 825, 0, 0, 0, 1503, 1504, 0, 1521, 1522,
	1523, 0, 963, 0, 0, 0, 0, 0, 0, 0,
	826, 1839, 0, 0, 955, 0, 0, 0, 0, 0,
	948, 949, 0, 1087, 1179, 0, 0, 0, 0, 0,
	0, 0, 0, 958, 0, 52, 0, 0, 52, 0,
	0, 0, 0, 0, 0, 954, 1518, 0, 0, 0,
	0, 0, 794, 0, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1179, 0, 0, 1179, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 825, 0, 949, 0,
	0, 0, 0, 0, 956, 1509, 0, 944, 945, 946,
	958, 943, 940, 941, 942, 934, 935, 936, 937, 939,
	0, 959, 0, 0, 0, 0, 0, 0, 1545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1524, 0, 0, 0, 52, 0, 0, 0, 52, 0,
	0, 0, 0, 0, 0, 0, 0, 794, 1519, 0,
	0, 52, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 956, 1444, 0, 944, 945, 946, 0, 943, 940,
	941, 942, 934, 935, 936, 937, 939, 0, 959, 0,
	0, 0, 0, 0, 0, 1544, 930, 931, 0, 950,
	951, 952, 960, 961, 962, 0, 0, 0, 0, 0,
	1239, 0, 953, 0, 0, 0, 0, 930, 931, 933,
	0, 0, 964, 960, 961, 962, 1520, 0, 0, 0,
	981, 0, 0, 0, 0, 0, 1779, 0, 0, 0,
	933, 932, 1785, 964, 0, 0, 0, 947, 930, 931,
	0, 950, 951, 952, 960, 961, 962, 0, 0, 0,
	0, 0, 932, 0, 953, 0, 0, 0, 947, 0,
	0, 933, 0, 0, 964, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 981,
	0, 1179, 1179, 932, 0, 1179, 938, 0, 0, 947,
	0, 0, 1515, 1516, 1517, 0, 1514, 1511, 1512, 1513,
	1505, 1506, 1507, 1508, 1510, 957, 965, 938, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 963, 0, 0, 0, 0, 957, 965, 0, 0,
	0, 0, 0, 955, 0, 0, 0, 0, 938, 948,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 955, 0, 0, 957, 965, 0,
	948, 1180, 0, 0, 954, 0, 0, 0, 0, 0,
	0, 0, 0, 963, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 955, 0, 0, 0, 0,
	0, 948, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1883, 0, 0, 0, 0, 949, 1180, 0,
	0, 1180, 0, 0, 0, 0, 954, 0, 52, 958,
	0, 0, 0, 0, 0, 0, 0, 0, 949, 0,
	0, 930, 931, 0, 950, 951, 952, 960, 961, 962,
	958, 0, 0, 0, 0, 0, 0, 953, 1925, 0,
	0, 0, 0, 0, 933, 0, 0, 964, 0, 949,
	0, 0, 0, 1179, 0, 0, 0, 0, 0, 0,
	0, 958, 0, 0, 0, 0, 932, 0, 0, 0,
	956, 0, 947, 944, 945, 946, 0, 943, 940, 941,
	942, 934, 935, 936, 937, 939, 0, 959, 0, 0,
	0, 956, 0, 0, 1543, 0, 0, 0, 943, 940,
	941, 942, 934, 935, 936, 937, 939, 0, 959, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 938, 956, 0, 0, 944, 945, 946, 0, 943,
	940, 941, 942, 934, 935, 936, 937, 939, 0, 959,
	957, 965, 0, 0, 0, 0, 1495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 0, 0, 930,
	931, 0, 950, 951, 952, 960, 961, 962, 955, 52,
	0, 0, 434, 0, 948, 953, 0, 0, 0, 0,
	0, 0, 933, 0, 0, 964, 0, 0, 0, 0,
	435, 0, 0, 0, 0, 0, 0, 0, 0, 954,
	0, 0, 0, 0, 932, 0, 2025, 0, 1180, 1180,
	947, 0, 1180, 0, 0, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 0, 437, 0, 0, 0,
	0, 442, 443, 0, 0, 448, 0, 0, 0, 0,
	0, 0, 949, 0, 0, 0, 0, 436, 438, 0,
	0, 0, 0, 0, 958, 0, 0, 0, 0, 938,
	0, 0, 0, 0, 0, 0, 0, 1087, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 957, 965,
	0, 0, 0, 0, 0, 0, 439, 0, 0, 0,
	0, 0, 0, 0, 963, 0, 0, 0, 0, 0,
	440, 441, 0, 0, 0, 0, 955, 0, 0, 0,
	0, 0, 948, 0, 0, 956, 0, 444, 944, 945,
	946, 0, 943, 940, 941, 942, 934, 935, 936, 937,
	939, 0, 959, 0, 0, 0, 2018, 954, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1916, 0, 0, 0, 0, 0,
	0, 0, 0, 52, 0, 0, 0, 0, 0, 0,
	949, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1180, 0, 958, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 445,
	0, 450, 0, 0, 0, 446, 0, 0, 0, 0,
	447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 956, 449, 0, 944, 945, 946, 0,
	943, 940, 941, 942, 934, 935, 936, 937, 939, 0,
	959, 0, 0, 0, 2016, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 981, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	52, 90, 91, 321, 92, 322, 323, 324, 325, 222,
	326, 327, 328, 329, 93, 94, 95, 223, 224, 225,
	226, 96, 227, 228, 330, 97, 229, 230, 98, 331,
	332, 231, 232, 233, 333, 234, 334, 307, 335, 99,
	100, 101, 0, 102, 336, 103, 104, 105, 337, 308,
	106, 107, 338, 339, 340, 341, 342, 343, 108, 109,
	276, 110, 235, 111, 236, 237, 344, 112, 345, 113,
	346, 347, 348, 114, 115, 349, 116, 350, 0, 351,
	238, 117, 118, 239, 240, 352, 353, 354, 119, 120,
	241, 0, 121, 355, 122, 356, 357, 309, 358, 123,
	242, 359, 243, 360, 124, 125, 126, 127, 244, 245,
	311, 361, 131, 362, 128, 363, 310, 129, 246, 130,
	247, 248, 249, 364, 250, 365, 312, 132, 313, 133,
	134, 366, 136, 135, 367, 251, 314, 137, 315, 368,
	138, 369, 370, 139, 0, 140, 141, 142, 144, 252,
	143, 316, 145, 146, 148, 147, 371, 372, 373, 253,
	149, 254, 150, 151, 374, 152, 375, 376, 153, 377,
	378, 154, 255, 317, 155, 318, 256, 156, 157, 158,
	159, 379, 257, 160, 258, 161, 380, 162, 163, 164,
	259, 165, 166, 381, 167, 168, 169, 170, 171, 173,
	174, 172, 175, 176, 177, 382, 178, 319, 179, 180,
	260, 181, 0, 183, 184, 185, 186, 383, 261, 187,
	188, 384, 189, 190, 320, 191, 262, 263, 192, 385,
	198, 193, 194, 182, 195, 197, 264, 196, 265, 386,
	199, 387, 200, 201, 202, 203, 204, 388, 266, 267,
	268, 389, 390, 205, 269, 270, 391, 206, 207, 208,
	209, 392, 393, 210, 211, 212, 394, 213, 395, 214,
	215, 216, 271, 272, 396, 397, 217, 398, 399, 400,
	401, 218, 219, 220, 221, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 1653, 0, 0, 0, 0, 0, 0,
	0, 1654, 90, 91, 321, 92, 322, 323, 324, 325,
	222, 326, 327, 328, 329, 93, 94, 95, 223, 224,
	225, 226, 96, 227, 228, 330, 97, 229, 230, 98,
	331, 332, 231, 232, 233, 333, 234, 334, 307, 335,
	99, 100, 101, 0, 102, 336, 103, 104, 105, 337,
	308, 106, 107, 338, 339, 340, 341, 342, 343, 108,
	109, 276, 110, 235, 111, 236, 237, 344, 112, 345,
	113, 346, 347, 348, 114, 115, 349, 116, 350, 0,
	351, 238, 117, 118, 239, 240, 352, 353, 354, 119,
	120, 241, 0, 121, 355, 122, 356, 357, 309, 358,
	123, 242, 359, 243, 360, 124, 125, 126, 127, 244,
	245, 311, 361, 131, 362, 128, 363, 310, 129, 246,
	130, 247, 248, 249, 364, 250, 365, 312, 132, 313,
	133, 134, 366, 136, 135, 367, 251, 314, 137, 315,
	368, 138, 369, 370, 139, 0, 140, 141, 142, 144,
	252, 143, 316, 145, 146, 148, 147, 371, 372, 373,
	253, 149, 254, 150, 151, 374, 152, 375, 376, 153,
	377, 378, 154, 255, 317, 155, 318, 256, 156, 157,
	158, 159, 379, 257, 160, 258, 161, 380, 162, 163,
	164, 259, 165, 166, 381, 167, 168, 169, 170, 171,
	173, 174, 172, 175, 176, 177, 382, 178, 319, 179,
	180, 260, 181, 0, 183, 184, 185, 186, 383, 261,
	187, 188, 384, 189, 190, 320, 191, 262, 263, 192,
	385, 198, 193, 194, 182, 195, 197, 264, 196, 265,
	386, 199, 387, 200, 201, 202, 203, 204, 388, 266,
	267, 268, 389, 390, 205, 269, 270, 391, 206, 207,
	208, 209, 392, 393, 210, 211, 212, 394, 213, 395,
	214, 215, 216, 271, 272, 396, 397, 217, 398, 399,
	400, 401, 218, 219, 220, 221, 0, 0, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2006, 90, 91, 321, 92, 322,
	323, 324, 325, 222, 326, 327, 328, 329, 93, 94,
	95, 223, 224, 225, 226, 96, 227, 228, 330, 97,
	229, 230, 98, 331, 332, 231, 232, 233, 333, 234,
	334, 307, 335, 99, 100, 101, 0, 102, 336, 103,
	104, 105, 337, 308, 106, 107, 338, 339, 340, 341,
	342, 343, 108, 109, 276, 110, 235, 111, 236, 237,
	344, 112, 345, 113, 346, 347, 348, 114, 115, 349,
	116, 350, 0, 351, 238, 117, 118, 239, 240, 352,
	353, 354, 119, 120, 241, 0, 121, 355, 122, 356,
	357, 309, 358, 123, 242, 359, 243, 360, 124, 125,
	126, 127, 244, 245, 311, 361, 131, 362, 128, 363,
	310, 129, 246, 130, 247, 248, 249, 364, 250, 365,
	312, 132, 313, 133, 134, 366, 136, 135, 367, 251,
	314, 137, 315, 368, 138, 369, 370, 139, 0, 140,
	141, 142, 144, 252, 143, 316, 145, 146, 148, 147,
	371, 372, 373, 253, 149, 254, 150, 151, 374, 152,
	375, 376, 153, 377, 378, 154, 255, 317, 155, 318,
	256, 156, 157, 158, 159, 379, 257, 160, 258, 161,
	380, 162, 163, 164, 259, 165, 166, 381, 167, 168,
	169, 170, 171, 173, 174, 172, 175, 176, 177, 382,
	178, 319, 179, 180, 260, 181, 0, 183, 184, 185,
	186, 383, 261, 187, 188, 384, 189, 190, 320, 191,
	262, 263, 192, 385, 198, 193, 194, 182, 195, 197,
	264, 196, 265, 386, 199, 387, 200, 201, 202, 203,
	204, 388, 266, 267, 268, 389, 390, 205, 269, 270,
	391, 206, 207, 208, 209, 392, 393, 210, 211, 212,
	394, 213, 395, 214, 215, 216, 271, 272, 396, 397,
	217, 398, 399, 400, 401, 218, 219, 220, 221, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 759, 0, 0, 90, 91, 321, 92, 322,
	323, 324, 325, 222, 326, 327, 328, 329, 93, 94,
	95, 223, 224, 225, 226, 96, 227, 228, 330, 97,
	229, 230, 98, 331, 332, 231, 232, 233, 333, 234,
	334, 307, 335, 99, 100, 101, 0, 102, 336, 103,
	104, 105, 337, 308, 106, 107, 338, 339, 340, 341,
	342, 343, 108, 109, 276, 110, 235, 111, 236, 237,
	344, 112, 345, 113, 346, 347, 348, 114, 115, 349,
	116, 350, 0, 351, 238, 117, 118, 239, 240, 352,
	353, 354, 119, 120, 241, 0, 121, 355, 122, 356,
	357, 309, 358, 123, 242, 359, 243, 360, 124, 125,
	126, 127, 244, 245, 311, 361, 131, 362, 128, 363,
	310, 129, 246, 130, 247, 248, 249, 364, 250, 365,
	312, 132, 313, 133, 134, 366, 136, 135, 367, 251,
	314, 137, 315, 368, 138, 369, 370, 139, 0, 140,
	141, 142, 144, 252, 143, 316, 145, 146, 148, 147,
	371, 372, 373, 253, 149, 254, 150, 151, 374, 152,
	375, 376, 153, 377, 378, 154, 255, 317, 155, 318,
	256, 156, 157, 158, 159, 379, 257, 160, 258, 161,
	380, 162, 163, 164, 259, 165, 166, 381, 167, 168,
	169, 170, 171, 173, 174, 172, 175, 176, 177, 382,
	178, 319, 179, 180, 260, 181, 0, 183, 184, 185,
	186, 383, 261, 187, 188, 384, 189, 190, 320, 191,
	262, 263, 192, 385, 198, 193, 194, 182, 195, 197,
	264, 196, 265, 386, 199, 387, 200, 201, 202, 203,
	204, 388, 266, 267, 268, 389, 390, 205, 269, 270,
	391, 206, 207, 208, 209, 392, 393, 210, 211, 212,
	394, 213, 395, 214, 215, 216, 271, 272, 396, 397,
	217, 398, 399, 400, 401, 218, 219, 220, 221, 664,
	653, 654, 651, 652, 643, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 680, 646, 0, 0, 0, 93, 94,
	95, 223, 695, 225, 696, 96, 697, 698, 0, 97,
	229, 230, 98, 649, 679, 699, 700, 233, 0, 691,
	0, 672, 0, 99, 100, 101, 0, 102, 0, 103,
	104, 105, 0, 308, 106, 107, 0, 673, 675, 0,
	674, 676, 108, 109, 276, 110, 701, 111, 702, 703,
	730, 112, 0, 113, 0, 0, 0, 694, 115, 0,
	116, 0, 0, 0, 637, 117, 118, 681, 682, 660,
	0, 0, 119, 120, 704, 0, 121, 0, 122, 0,
	0, 309, 0, 123, 692, 0, 243, 0, 124, 125,
	126, 127, 688, 690, 311, 0, 131, 0, 128, 0,
	310, 129, 705, 130, 706, 707, 708, 0, 671, 0,
	312, 132, 313, 133, 134, 0, 136, 135, 0, 693,
	314, 137, 315, 0, 138, 0, 0, 139, 0, 140,
	141, 142, 144, 252, 143, 316, 145, 146, 148, 147,
	632, 0, 661, 689, 149, 709, 150, 151, 0, 152,
	0, 0, 153, 0, 0, 154, 255, 317, 155, 318,
	683, 156, 157, 158, 159, 0, 684, 160, 258, 161,
	0, 162, 163, 164, 710, 165, 166, 0, 167, 168,
	169, 170, 171, 173, 174, 172, 175, 176, 177, 0,
	178, 319, 179, 180, 638, 181, 0, 183, 184, 185,
	186, 71, 261, 187, 188, 677, 189, 190, 320, 191,
	711, 263, 192, 0, 198, 193, 194, 182, 195, 197,
	712, 196, 685, 0, 199, 73, 200, 201, 202, 203,
	204, 0, 266, 713, 714, 0, 0, 205, 686, 687,
	659, 206, 207, 208, 209, 0, 0, 210, 211, 212,
	678, 213, 0, 214, 215, 216, 543, 715, 0, 0,
	217, 0, 0, 0, 69, 218, 219, 220, 221, 633,
	70, 0, 0, 0, 664, 653, 654, 651, 652, 643,
	629, 630, 0, 0, 0, 0, 631, 0, 0, 639,
	90, 91, 1266, 92, 642, 0, 0, 0, 680, 646,
	0, 0, 0, 93, 94, 95, 223, 695, 225, 696,
	96, 697, 698, 0, 97, 229, 230, 98, 649, 679,
	699, 700, 233, 0, 691, 0, 672, 0, 99, 100,
	101, 0, 102, 0, 103, 104, 105, 0, 308, 106,
	107, 0, 673, 675, 0, 674, 676, 108, 109, 276,
	110, 701, 111, 702, 703, 0, 112, 0, 113, 0,
	1267, 0, 694, 115, 0, 116, 0, 0, 0, 637,
	117, 118, 681, 682, 660, 0, 0, 119, 120, 704,
	0, 121, 0, 122, 0, 0, 309, 0, 123, 692,
	0, 243, 0, 124, 125, 126, 127, 688, 690, 311,
	0, 131, 0, 128, 0, 310, 129, 705, 130, 706,
	707, 708, 0, 671, 0, 312, 132, 313, 133, 134,
	0, 136, 135, 0, 693, 314, 137, 315, 0, 138,
	0, 0, 139, 0, 140, 141, 142, 144, 252, 143,
	316, 145, 146, 148, 147, 632, 0, 661, 689, 149,
	709, 150, 151, 0, 152, 0, 0, 153, 0, 0,
	154, 255, 317, 155, 318, 683, 156, 157, 158, 159,
	0, 684, 160, 258, 161, 0, 162, 163, 164, 710,
	165, 166, 0, 167, 168, 169, 170, 171, 173, 174,
	172, 175, 176, 177, 0, 178, 319, 179, 180, 638,
	181, 0, 183, 184, 185, 186, 0, 261, 187, 188,
	677, 189, 190, 320, 191, 711, 263, 192, 0, 198,
	193, 194, 182, 195, 197, 712, 196, 685, 0, 199,
	0, 200, 201, 202, 203, 204, 0, 266, 713, 714,
	0, 0, 205, 686, 687, 659, 206, 207, 208, 209,
	0, 0, 210, 211, 212, 678, 213, 0, 214, 215,
	216, 271, 715, 1265, 0, 217, 0, 0, 0, 0,
	218, 219, 220, 221, 633, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 629, 630, 1268, 0, 0,
	0, 631, 0, 0, 639, 1263, 0, 0, 0, 642,
	664, 653, 654, 651, 652, 643, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 680, 646, 0, 0, 0, 93,
	94, 95, 223, 695, 225, 696, 96, 697, 698, 0,
	97, 229, 230, 98, 649, 679, 699, 700, 233, 0,
	691, 0, 672, 0, 99, 100, 101, 0, 102, 0,
	103, 104, 105, 0, 308, 106, 107, 0, 673, 675,
	0, 674, 676, 108, 109, 276, 110, 701, 111, 702,
	703, 0, 112, 0, 113, 0, 0, 0, 694, 115,
	0, 116, 0, 0, 0, 637, 117, 118, 681, 682,
	660, 0, 0, 119, 120, 704, 0, 121, 0, 122,
	0, 0, 309, 0, 123, 692, 0, 243, 0, 124,
	125, 126, 127, 688, 690, 311, 0, 131, 0, 128,
	0, 310, 129, 705, 130, 706, 707, 708, 0, 671,
	0, 312, 132, 313, 133, 134, 0, 136, 135, 0,
	693, 314, 137, 315, 0, 138, 0, 0, 139, 0,
	140, 141, 142, 144, 252, 143, 316, 145, 146, 148,
	147, 632, 0, 661, 689, 149, 709, 150, 151, 0,
	152, 0, 0, 153, 0, 0, 154, 255, 317, 155,
	318, 683, 156, 157, 158, 159, 0, 684, 160, 258,
	161, 0, 162, 163, 164, 710, 165, 166, 0, 167,
	168, 169, 170, 171, 173, 174, 172, 175, 176, 177,
	0, 178, 319, 179, 180, 638, 181, 0, 183, 184,
	185, 186, 71, 261, 187, 188, 677, 189, 190, 320,
	191, 711, 263, 192, 0, 198, 193, 194, 182, 195,
	197, 712, 196, 685, 0, 199, 73, 200, 201, 202,
	203, 204, 0, 266, 713, 714, 0, 0, 205, 686,
	687, 659, 206, 207, 208, 209, 0, 0, 210, 211,
	212, 678, 213, 0, 214, 215, 216, 543, 715, 0,
	0, 217, 0, 0, 0, 69, 218, 219, 220, 221,
	633, 70, 664, 653, 654, 651, 652, 643, 0, 0,
	0, 629, 630, 0, 0, 0, 0, 631, 90, 91,
	639, 92, 0, 0, 0, 642, 680, 646, 0, 0,
	0, 93, 94, 95, 223, 695, 225, 696, 96, 697,
	698, 1305, 97, 229, 230, 98, 649, 679, 699, 700,
	233, 0, 691, 0, 672, 0, 99, 100, 101, 0,
	102, 0, 103, 104, 105, 0, 308, 106, 107, 0,
	673, 675, 0, 674, 676, 108, 109, 276, 110, 701,
	111, 702, 703, 0, 112, 0, 113, 0, 0, 0,
	694, 115, 0, 116, 0, 0, 0, 637, 117, 118,
	681, 682, 660, 0, 0, 119, 120, 704, 0, 121,
	0, 122, 0, 1310, 309, 0, 123, 692, 0, 243,
	0, 124, 125, 126, 127, 688, 690, 311, 0, 131,
	0, 128, 0, 310, 129, 705, 130, 706, 707, 708,
	0, 671, 0, 312, 132, 313, 133, 134, 0, 136,
	135, 1306, 693, 314, 137, 315, 0, 138, 0, 0,
	139, 0, 140, 141, 142, 144, 252, 143, 316, 145,
	146, 148, 147, 632, 0, 661, 689, 149, 709, 150,
	151, 0, 152, 0, 0, 153, 0, 0, 154, 255,
	317, 155, 318, 683, 156, 157, 158, 159, 0, 684,
	160, 258, 161, 0, 162, 163, 164, 710, 165, 166,
	0, 167, 168, 169, 170, 171, 173, 174, 172, 175,
	176, 177, 0, 178, 319, 179, 180, 638, 181, 0,
	183, 184, 185, 186, 0, 261, 187, 188, 677, 189,
	190, 320, 191, 711, 263, 192, 0, 198, 193, 194,
	182, 195, 197, 712, 196, 685, 0, 199, 0, 200,
	201, 202, 203, 204, 0, 266, 713, 714, 0, 1307,
	205, 686, 687, 659, 206, 207, 208, 209, 0, 0,
	210, 211, 212, 678, 213, 0, 214, 215, 216, 271,
	715, 0, 0, 217, 0, 0, 0, 0, 218, 219,
	220, 221, 633, 0, 664, 653, 654, 651, 652, 643,
	0, 0, 0, 629, 630, 0, 0, 0, 0, 631,
	90, 91, 639, 92, 0, 0, 0, 642, 680, 646,
	0, 0, 0, 93, 94, 95, 223, 695, 225, 696,
	96, 697, 698, 0, 97, 229, 230, 98, 649, 679,
	699, 700, 233, 0, 691, 0, 672, 0, 99, 100,
	101, 0, 102, 0, 103, 104, 105, 0, 308, 106,
	107, 0, 673, 675, 0, 674, 676, 108, 109, 276,
	110, 701, 111, 702, 703, 0, 112, 0, 113, 0,
	0, 0, 694, 115, 0, 116, 0, 0, 0, 637,
	117, 118, 681, 682, 660, 0, 0, 119, 120, 704,
	0, 121, 0, 122, 0, 0, 309, 0, 123, 692,
	0, 243, 0, 124, 125, 126, 127, 688, 690, 311,
	0, 131, 0, 128, 0, 310, 129, 705, 130, 706,
	707, 708, 0, 671, 0, 312, 132, 313, 133, 134,
	0, 136, 135, 0, 693, 314, 137, 315, 0, 138,
	0, 0, 139, 0, 140, 141, 142, 144, 252, 143,
	316, 145, 146, 148, 147, 632, 1596, 661, 689, 149,
	709, 150, 151, 0, 152, 0, 0, 153, 0, 0,
	154, 255, 317, 155, 318, 683, 156, 157, 158, 159,
	0, 684, 160, 258, 161, 0, 162, 163, 164, 710,
	165, 166, 0, 167, 168, 169, 170, 171, 173, 174,
	172, 175, 176, 177, 0, 178, 319, 179, 180, 638,
	181, 0, 183, 184, 185, 186, 0, 261, 187, 188,
	677, 189, 190, 320, 191, 711, 263, 192, 0, 198,
	193, 194, 182, 195, 197, 712, 196, 685, 0, 199,
	0, 200, 201, 202, 203, 204, 0, 266, 713, 714,
	0, 0, 205, 686, 687, 659, 206, 207, 208, 209,
	0, 0, 210, 211, 212, 678, 213, 0, 214, 215,
	216, 271, 715, 0, 0, 217, 0, 0, 0, 0,
	218, 219, 220, 221, 633, 0, 664, 653, 654, 651,
	652, 643, 0, 0, 0, 629, 630, 627, 0, 0,
	0, 631, 90, 91, 639, 92, 0, 0, 0, 642,
	680, 646, 0, 0, 0, 93, 94, 95, 223, 695,
	225, 696, 96, 697, 698, 0, 97, 229, 230, 98,
	649, 679, 699, 700, 233, 0, 691, 0, 672, 0,
	99, 100, 101, 0, 102, 0, 103, 104, 105, 0,
	308, 106, 107, 0, 673, 675, 0, 674, 676, 108,
	109, 276, 110, 701, 111, 702, 703, 0, 112, 0,
	113, 0, 0, 0, 694, 115, 0, 116, 0, 0,
	0, 637, 117, 118, 681, 682, 660, 0, 0, 119,
	120, 704, 0, 121, 0, 122, 0, 0, 309, 0,
	123, 692, 0, 243, 0, 124, 125, 126, 127, 688,
	690, 311, 0, 131, 0, 128, 0, 310, 129, 705,
	130, 706, 707, 708, 0, 671, 0, 312, 132, 313,
	133, 134, 0, 136, 135, 0, 693, 314, 137, 315,
	0, 138, 0, 0, 139, 0, 140, 141, 142, 144,
	252, 143, 316, 145, 146, 148, 147, 632, 0, 661,
	689, 149, 709, 150, 151, 0, 152, 0, 0, 153,
	0, 0, 154, 255, 317, 155, 318, 683, 156, 157,
	158, 159, 0, 684, 160, 258, 161, 0, 162, 163,
	164, 710, 165, 166, 0, 167, 168, 169, 170, 171,
	173, 174, 172, 175, 176, 177, 0, 178, 319, 179,
	180, 638, 181, 0, 183, 184, 185, 186, 0, 261,
	187, 188, 677, 189, 190, 320, 191, 711, 263, 192,
	0, 198, 193, 194, 182, 195, 197, 712, 196, 685,
	0, 199, 0, 200, 201, 202, 203, 204, 0, 266,
	713, 714, 0, 0, 205, 686, 687, 659, 206, 207,
	208, 209, 0, 0, 210, 211, 212, 678, 213, 0,
	214, 215, 216, 271, 715, 0, 0, 217, 0, 0,
	0, 0, 218, 219, 220, 221, 633, 0, 0, 0,
	0, 664, 653, 654, 651, 652, 643, 629, 630, 0,
	0, 0, 0, 631, 987, 1258, 639, 90, 91, 0,
	92, 642, 0, 0, 0, 680, 646, 0, 0, 0,
	93, 94, 95, 223, 695, 225, 696, 96, 697, 698,
	0, 97, 229, 230, 98, 649, 679, 699, 700, 233,
	0, 691, 0, 672, 0, 99, 100, 101, 0, 102,
	0, 103, 104, 105, 0, 308, 106, 107, 0, 673,
	675, 0, 674, 676, 108, 109, 276, 110, 701, 111,
	702, 703, 0, 112, 0, 113, 0, 0, 0, 694,
	115, 0, 116, 0, 0, 0, 637, 117, 118, 681,
	682, 660, 0, 0, 119, 120, 704, 0, 121, 0,
	122, 0, 0, 309, 0, 123, 692, 0, 243, 0,
	124, 125, 126, 127, 688, 690, 311, 0, 131, 0,
	128, 0, 310, 129, 705, 130, 706, 707, 708, 0,
	671, 0, 312, 132, 313, 133, 134, 0, 136, 135,
	0, 693, 314, 137, 315, 0, 138, 0, 0, 139,
	0, 140, 141, 142, 144, 252, 143, 316, 145, 146,
	148, 147, 632, 0, 661, 689, 149, 709, 150, 151,
	0, 152, 0, 0, 153, 0, 0, 154, 255, 317,
	155, 318, 683, 156, 157, 158, 159, 0, 684, 160,
	258, 161, 0, 162, 163, 164, 710, 165, 166, 0,
	167, 168, 169, 170, 171, 173, 174, 172, 175, 176,
	177, 0, 178, 319, 179, 180, 638, 181, 0, 183,
	184, 185, 186, 0, 261, 187, 188, 677, 189, 190,
	320, 191, 711, 263, 192, 0, 198, 193, 194, 182,
	195, 197, 712, 196, 685, 0, 199, 0, 200, 201,
	202, 203, 204, 0, 266, 713, 714, 0, 0, 205,
	686, 687, 659, 206, 207, 208, 209, 0, 0, 210,
	211, 212, 678, 213, 0, 214, 215, 216, 271, 715,
	0, 0, 217, 0, 0, 0, 0, 218, 219, 220,
	221, 633, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 630, 0, 0, 0, 0, 631, 0,
	0, 639, 1727, 0, 0, 0, 642, 664, 653, 654,
	651, 652, 643, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 680, 646, 0, 0, 0, 93, 94, 95, 223,
	695, 225, 696, 96, 697, 698, 0, 97, 229, 230,
	98, 649, 679, 699, 700, 233, 0, 691, 0, 672,
	0, 99, 100, 101, 0, 102, 0, 103, 104, 105,
	0, 308, 106, 107, 0, 673, 675, 0, 674, 676,
	108, 109, 276, 110, 701, 111, 702, 703, 0, 112,
	0, 113, 0, 0, 0, 694, 115, 0, 116, 0,
	0, 0, 637, 117, 118, 681, 682, 660, 0, 0,
	119, 120, 704, 0, 121, 0, 122, 0, 0, 309,
	0, 123, 692, 0, 243, 0, 124, 125, 126, 127,
	688, 690, 311, 0, 131, 0, 128, 0, 310, 129,
	705, 130, 706, 707, 708, 0, 671, 0, 312, 132,
	313, 133, 134, 0, 136, 135, 0, 693, 314, 137,
	315, 0, 138, 0, 0, 139, 0, 140, 141, 142,
	144, 252, 143, 316, 145, 146, 148, 147, 632, 0,
	661, 689, 149, 709, 150, 151, 0, 152, 0, 0,
	153, 0, 0, 154, 255, 317, 155, 318, 683, 156,
	157, 158, 159, 0, 684, 160, 258, 161, 0, 162,
	163, 164, 710, 165, 166, 0, 167, 168, 169, 170,
	171, 173, 174, 172, 175, 176, 177, 0, 178, 319,
	179, 180, 638, 181, 0, 183, 184, 185, 186, 0,
	261, 187, 188, 677, 189, 190, 320, 191, 711, 263,
	192, 0, 198, 193, 194, 182, 195, 197, 712, 196,
	685, 0, 199, 0, 200, 201, 202, 203, 204, 0,
	266, 713, 714, 0, 0, 205, 686, 687, 659, 206,
	207, 208, 209, 0, 0, 210, 211, 212, 678, 213,
	0, 214, 215, 216, 271, 715, 1684, 0, 217, 0,
	0, 0, 0, 218, 219, 220, 221, 633, 0, 664,
	653, 654, 651, 652, 643, 0, 0, 0, 629, 630,
	0, 0, 0, 0, 631, 90, 91, 639, 92, 0,
	0, 0, 642, 680, 646, 0, 0, 0, 93, 94,
	95, 223, 695, 225, 696, 96, 697, 698, 0, 97,
	229, 230, 98, 649, 679, 699, 700, 233, 0, 691,
	0, 672, 0, 99, 100, 101, 0, 102, 0, 103,
	104, 105, 0, 308, 106, 107, 0, 673, 675, 0,
	674, 676, 108, 109, 276, 110, 701, 111, 702, 703,
	0, 112, 0, 113, 0, 0, 0, 694, 115, 0,
	116, 0, 0, 0, 637, 117, 118, 681, 682, 660,
	0, 0, 119, 120, 704, 0, 121, 0, 122, 0,
	0, 309, 0, 123, 692, 0, 243, 0, 124, 125,
	126, 127, 688, 690, 311, 0, 131, 0, 128, 0,
	310, 129, 705, 130, 706, 707, 708, 0, 671, 0,
	312, 132, 313, 133, 134, 0, 136, 135, 0, 693,
	314, 137, 315, 0, 138, 0, 0, 139, 0, 140,
	141, 142, 144, 252, 143, 316, 145, 146, 148, 147,
	632, 0, 661, 689, 149, 709, 150, 151, 0, 152,
	0, 0, 153, 0, 0, 154, 255, 317, 155, 318,
	683, 156, 157, 158, 159, 0, 684, 160, 258, 161,
	0, 162, 163, 164, 710, 165, 166, 0, 167, 168,
	169, 170, 171, 173, 174, 172, 175, 176, 177, 0,
	178, 319, 179, 180, 638, 181, 0, 183, 184, 185,
	186, 0, 261, 187, 188, 677, 189, 190, 320, 191,
	711, 263, 192, 0, 198, 193, 194, 182, 195, 197,
	712, 196, 685, 0, 199, 0, 200, 201, 202, 203,
	204, 0, 266, 713, 714, 0, 0, 205, 686, 687,
	659, 206, 207, 208, 209, 0, 0, 210, 211, 212,
	678, 213, 0, 214, 215, 216, 271, 715, 0, 0,
	217, 0, 0, 0, 0, 218, 219, 220, 221, 633,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 630, 0, 0, 0, 0, 631, 0, 0, 639,
	1674, 0, 0, 0, 642, 664, 653, 654, 651, 652,
	643, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 680,
	646, 0, 0, 0, 93, 94, 95, 223, 695, 225,
	696, 96, 697, 698, 0, 97, 229, 230, 98, 649,
	679, 699, 700, 233, 0, 691, 0, 672, 0, 99,
	100, 101, 0, 102, 0, 103, 104, 105, 0, 308,
	106, 107, 0, 673, 675, 0, 674, 676, 108, 109,
	276, 110, 701, 111, 702, 703, 730, 112, 0, 113,
	0, 0, 0, 694, 115, 0, 116, 0, 0, 0,
	637, 117, 118, 681, 682, 660, 0, 0, 119, 120,
	704, 0, 121, 0, 122, 0, 0, 309, 0, 123,
	692, 0, 243, 0, 124, 125, 126, 127, 688, 690,
	311, 0, 131, 0, 128, 0, 310, 129, 705, 130,
	706, 707, 708, 0, 671, 0, 312, 132, 313, 133,
	134, 0, 136, 135, 0, 693, 314, 137, 315, 0,
	138, 0, 0, 139, 0, 140, 141, 142, 144, 252,
	143, 316, 145, 146, 148, 147, 632, 0, 661, 689,
	149, 709, 150, 151, 0, 152, 0, 0, 153, 0,
	0, 154, 255, 317, 155, 318, 683, 156, 157, 158,
	159, 0, 684, 160, 258, 161, 0, 162, 163, 164,
	710, 165, 166, 0, 167, 168, 169, 170, 171, 173,
	174, 172, 175, 176, 177, 0, 178, 319, 179, 180,
	638, 181, 0, 183, 184, 185, 186, 0, 261, 187,
	188, 677, 189, 190, 320, 191, 711, 263, 192, 0,
	198, 193, 194, 182, 195, 197, 712, 196, 685, 0,
	199, 0, 200, 201, 202, 203, 204, 0, 266, 713,
	714, 0, 0, 205, 686, 687, 659, 206, 207, 208,
	209, 0, 0, 210, 211, 212, 678, 213, 0, 214,
	215, 216, 271, 715, 0, 0, 217, 0, 0, 0,
	0, 218, 219, 220, 221, 633, 0, 664, 653, 654,
	651, 652, 643, 0, 0, 0, 629, 630, 0, 0,
	0, 0, 631, 90, 91, 639, 92, 0, 0, 0,
	642, 680, 646, 0, 0, 0, 93, 94, 95, 223,
	695, 225, 696, 96, 697, 698, 0, 97, 229, 230,
	98, 649, 679, 699, 700, 233, 0, 691, 0, 672,
	0, 99, 100, 101, 0, 102, 0, 103, 104, 105,
	0, 308, 106, 107, 0, 673, 675, 0, 674, 676,
	108, 109, 276, 110, 701, 111, 702, 703, 0, 112,
	0, 113, 0, 0, 0, 694, 115, 0, 116, 0,
	0, 0, 637, 117, 118, 681, 682, 660, 0, 0,
	119, 120, 704, 0, 121, 0, 122, 0, 1310, 309,
	0, 123, 692, 0, 243, 0, 124, 125, 126, 127,
	688, 690, 311, 0, 131, 0, 128, 0, 310, 129,
	705, 130, 706, 707, 708, 0, 671, 0, 312, 132,
	313, 133, 134, 0, 136, 135, 0, 693, 314, 137,
	315, 0, 138, 0, 0, 139, 0, 140, 141, 142,
	144, 252, 143, 316, 145, 146, 148, 147, 632, 0,
	661, 689, 149, 709, 150, 151, 0, 152, 0, 0,
	153, 0, 0, 154, 255, 317, 155, 318, 683, 156,
	157, 158, 159, 0, 684, 160, 258, 161, 0, 162,
	163, 164, 710, 165, 166, 0, 167, 168, 169, 170,
	171, 173, 174, 172, 175, 176, 177, 0, 178, 319,
	179, 180, 638, 181, 0, 183, 184, 185, 186, 0,
	261, 187, 188, 677, 189, 190, 320, 191, 711, 263,
	192, 0, 198, 193, 194, 182, 195, 197, 712, 196,
	685, 0, 199, 0, 200, 201, 202, 203, 204, 0,
	266, 713, 714, 0, 0, 205, 686, 687, 659, 206,
	207, 208, 209, 0, 0, 210, 211, 212, 678, 213,
	0, 214, 215, 216, 271, 715, 0, 0, 217, 0,
	0, 0, 0, 218, 219, 220, 221, 633, 0, 664,
	653, 654, 651, 652, 643, 0, 0, 0, 629, 630,
	0, 0, 0, 0, 631, 90, 91, 639, 92, 0,
	0, 0, 642, 680, 646, 0, 0, 0, 93, 94,
	95, 223, 695, 225, 696, 96, 697, 698, 0, 97,
	229, 230, 98, 649, 679, 699, 700, 233, 0, 691,
	0, 672, 0, 99, 100, 101, 0, 102, 0, 103,
	104, 105, 0, 308, 106, 107, 0, 673, 675, 0,
	674, 676, 108, 109, 276, 110, 701, 111, 702, 703,
	0, 112, 0, 113, 0, 0, 0, 694, 115, 0,
	116, 0, 0, 0, 637, 117, 118, 681, 682, 660,
	0, 0, 119, 120, 704, 0, 121, 0, 122, 0,
	0, 309, 0, 123, 692, 0, 243, 0, 124, 125,
	126, 127, 688, 690, 311, 0, 131, 0, 128, 0,
	310, 129, 705, 130, 706, 707, 708, 0, 671, 0,
	312, 132, 313, 133, 134, 0, 136, 135, 0, 693,
	314, 137, 315, 0, 138, 0, 0, 139, 0, 140,
	141, 142, 144, 252, 143, 316, 145, 146, 148, 147,
	632, 0, 661, 689, 149, 709, 150, 151, 0, 152,
	0, 0, 153, 0, 0, 154, 255, 317, 155, 318,
	683, 156, 157, 158, 159, 0, 684, 160, 258, 161,
	0, 162, 163, 164, 710, 165, 166, 0, 167, 168,
	169, 170, 171, 173, 174, 172, 175, 176, 177, 0,
	178, 319, 179, 180, 638, 181, 0, 183, 184, 185,
	186, 0, 261, 187, 188, 677, 189, 190, 320, 191,
	711, 263, 192, 0, 198, 193, 194, 182, 195, 197,
	712, 196, 685, 0, 199, 0, 200, 201, 202, 203,
	204, 0, 266, 713, 714, 0, 0, 205, 686, 687,
	659, 206, 207, 208, 209, 0, 0, 210, 211, 212,
	678, 213, 0, 214, 215, 216, 271, 715, 0, 0,
	217, 0, 0, 0, 0, 218, 219, 220, 221, 633,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 630, 0, 0, 0, 0, 631, 0, 0, 639,
	1253, 0, 0, 0, 642, 664, 653, 654, 651, 652,
	643, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 680,
	646, 0, 0, 0, 93, 94, 95, 223, 695, 225,
	696, 96, 697, 698, 0, 97, 229, 230, 98, 649,
	679, 699, 700, 233, 0, 691, 0, 672, 0, 99,
	100, 101, 0, 102, 0, 103, 104, 105, 0, 308,
	106, 107, 0, 673, 675, 0, 674, 676, 108, 109,
	276, 110, 701, 111, 702, 703, 0, 112, 0, 113,
	0, 0, 0, 694, 115, 0, 116, 0, 0, 0,
	637, 117, 118, 681, 682, 660, 0, 0, 119, 120,
	704, 0, 121, 0, 122, 0, 0, 309, 0, 123,
	692, 0, 243, 0, 124, 125, 126, 127, 688, 690,
	311, 0, 131, 0, 128, 0, 310, 129, 705, 130,
	706, 707, 708, 0, 671, 0, 312, 132, 313, 133,
	134, 0, 136, 135, 0, 693, 314, 137, 315, 0,
	138, 0, 0, 139, 0, 140, 141, 142, 144, 252,
	143, 316, 145, 146, 148, 147, 632, 0, 661, 689,
	149, 709, 150, 151, 0, 152, 0, 0, 153, 0,
	0, 154, 255, 317, 155, 318, 683, 156, 157, 158,
	159, 0, 684, 160, 258, 161, 0, 162, 163, 164,
	710, 165, 166, 0, 167, 168, 169, 170, 171, 173,
	174, 172, 175, 176, 177, 0, 178, 319, 179, 180,
	638, 181, 0, 183, 184, 185, 186, 0, 261, 187,
	188, 677, 189, 190, 320, 191, 711, 263, 192, 0,
	198, 193, 194, 182, 195, 197, 712, 196, 685, 0,
	199, 0, 200, 201, 202, 203, 204, 0, 266, 713,
	714, 0, 0, 205, 686, 687, 659, 206, 207, 208,
	209, 0, 0, 210, 211, 212, 678, 213, 0, 214,
	215, 216, 271, 715, 0, 0, 217, 0, 0, 0,
	0, 218, 219, 220, 221, 633, 0, 0, 0, 0,
	664, 653, 654, 651, 652, 643, 629, 630, 627, 0,
	0, 0, 631, 0, 0, 639, 90, 91, 915, 92,
	642, 0, 0, 0, 680, 646, 0, 0, 0, 93,
	94, 95, 223, 695, 225, 696, 96, 697, 698, 0,
	97, 229, 230, 98, 649, 679, 699, 700, 233, 0,
	691, 0, 672, 0, 99, 100, 101, 0, 102, 0,
	103, 104, 105, 0, 308, 106, 107, 0, 673, 675,
	0, 674, 676, 108, 109, 276, 110, 701, 111, 702,
	703, 0, 112, 0, 113, 0, 0, 0, 694, 115,
	0, 116, 0, 0, 0, 637, 117, 118, 681, 682,
	660, 0, 0, 119, 120, 704, 0, 121, 0, 122,
	0, 0, 309, 0, 123, 692, 0, 243, 0, 124,
	125, 126, 127, 688, 690, 311, 0, 131, 0, 128,
	0, 310, 129, 705, 130, 706, 707, 708, 0, 671,
	0, 312, 132, 313, 133, 134, 0, 136, 135, 0,
	693, 314, 137, 315, 0, 138, 0, 0, 139, 0,
	140, 141, 142, 144, 252, 143, 316, 145, 146, 148,
	147, 632, 0, 661, 689, 149, 709, 150, 151, 0,
	152, 0, 0, 153, 0, 0, 154, 255, 317, 155,
	318, 683, 156, 157, 158, 159, 0, 684, 160, 258,
	161, 0, 162, 163, 164, 710, 165, 166, 0, 167,
	168, 169, 170, 171, 173, 174, 172, 175, 176, 177,
	0, 178, 319, 179, 180, 638, 181, 0, 183, 184,
	185, 186, 0, 261, 187, 188, 677, 189, 190, 320,
	191, 711, 263, 192, 0, 198, 193, 194, 182, 195,
	197, 712, 196, 685, 0, 199, 0, 200, 201, 202,
	203, 204, 0, 266, 713, 714, 0, 0, 205, 686,
	687, 659, 206, 207, 208, 209, 0, 0, 210, 211,
	212, 678, 213, 0, 214, 215, 216, 271, 715, 0,
	0, 217, 0, 0, 0, 0, 218, 219, 220, 221,
	633, 0, 664, 653, 654, 651, 652, 643, 0, 0,
	0, 629, 630, 0, 0, 0, 0, 631, 90, 91,
	639, 92, 0, 0, 0, 642, 680, 646, 0, 0,
	0, 93, 94, 95, 223, 695, 225, 696, 96, 697,
	698, 0, 97, 229, 230, 98, 649, 679, 699, 700,
	233, 0, 691, 0, 672, 0, 99, 100, 101, 0,
	102, 0, 103, 104, 105, 0, 308, 106, 2080, 0,
	673, 675, 0, 674, 676, 108, 109, 276, 110, 701,
	111, 702, 703, 0, 112, 0, 113, 0, 0, 0,
	694, 115, 0, 116, 0, 0, 0, 637, 117, 118,
	681, 682, 660, 0, 0, 119, 120, 704, 0, 121,
	0, 122, 0, 0, 309, 0, 123, 692, 0, 243,
	0, 124, 125, 126, 127, 688, 690, 311, 0, 131,
	0, 128, 0, 310, 129, 705, 130, 706, 707, 708,
	0, 671, 0, 312, 132, 313, 133, 134, 0, 136,
	135, 0, 693, 314, 137, 315, 0, 138, 0, 0,
	139, 0, 140, 141, 142, 144, 252, 143, 316, 145,
	146, 148, 147, 632, 0, 661, 689, 149, 709, 150,
	151, 0, 152, 0, 0, 153, 0, 0, 154, 255,
	317, 155, 318, 683, 156, 157, 158, 159, 0, 684,
	160, 258, 161, 0, 162, 163, 164, 710, 165, 166,
	0, 167, 168, 169, 170, 171, 173, 174, 172, 175,
	176, 177, 0, 178, 319, 179, 180, 638, 181, 0,
	183, 184, 185, 186, 0, 261, 187, 188, 677, 189,
	190, 320, 191, 711, 263, 192, 0, 198, 193, 194,
	182, 195, 197, 712, 196, 685, 0, 199, 0, 200,
	201, 202, 203, 204, 0, 266, 713, 714, 0, 0,
	205, 686, 687, 659, 206, 207, 2079, 209, 0, 0,
	210, 211, 212, 678, 213, 0, 214, 215, 216, 271,
	715, 0, 0, 217, 0, 0, 0, 0, 218, 219,
	220, 221, 633, 0, 664, 653, 654, 651, 652, 643,
	0, 0, 0, 629, 630, 0, 0, 0, 0, 631,
	90, 91, 639, 92, 0, 0, 0, 642, 680, 646,
	0, 0, 0, 93, 94, 95, 2078, 695, 225, 696,
	96, 697, 698, 0, 97, 229, 230, 98, 649, 679,
	699, 700, 233, 0, 691, 0, 672, 0, 99, 100,
	101, 0, 102, 0, 103, 104, 105, 0, 308, 106,
	2080, 0, 673, 675, 0, 674, 676, 108, 109, 276,
	110, 701, 111, 702, 703, 0, 112, 0, 113, 0,
	0, 0, 694, 115, 0, 116, 0, 0, 0, 637,
	117, 118, 681, 682, 660, 0, 0, 119, 120, 704,
	0, 121, 0, 122, 0, 0, 309, 0, 123, 692,
	0, 243, 0, 124, 125, 126, 127, 688, 690, 311,
	0, 131, 0, 128, 0, 310, 129, 705, 130, 706,
	707, 708, 0, 671, 0, 312, 132, 313, 133, 134,
	0, 136, 135, 0, 693, 314, 137, 315, 0, 138,
	0, 0, 139, 0, 140, 141, 142, 144, 252, 143,
	316, 145, 146, 148, 147, 632, 0, 661, 689, 149,
	709, 150, 151, 0, 152, 0, 0, 153, 0, 0,
	154, 255, 317, 155, 318, 683, 156, 157, 158, 159,
	0, 684, 160, 258, 161, 0, 162, 163, 164, 710,
	165, 166, 0, 167, 168, 169, 170, 171, 173, 174,
	172, 175, 176, 177, 0, 178, 319, 179, 180, 638,
	181, 0, 183, 184, 185, 186, 0, 261, 187, 188,
	677, 189, 190, 320, 191, 711, 263, 192, 0, 198,
	193, 194, 182, 195, 197, 712, 196, 685, 0, 199,
	0, 200, 201, 202, 203, 204, 0, 266, 713, 714,
	0, 0, 205, 686, 687, 659, 206, 207, 2079, 209,
	0, 0, 210, 211, 212, 678, 213, 0, 214, 215,
	216, 271, 715, 0, 0, 217, 0, 0, 0, 0,
	218, 219, 220, 221, 633, 0, 664, 653, 654, 651,
	652, 643, 0, 0, 0, 629, 630, 0, 0, 0,
	0, 631, 90, 91, 639, 92, 0, 0, 0, 642,
	680, 646, 0, 0, 0, 93, 94, 95, 223, 695,
	225, 696, 96, 697, 698, 0, 97, 229, 230, 98,
	649, 679, 699, 700, 233, 0, 691, 0, 672, 0,
	99, 100, 101, 0, 102, 0, 103, 104, 105, 0,
	308, 106, 107, 0, 673, 675, 0, 674, 676, 108,
	109, 276, 110, 701, 111, 702, 703, 0, 112, 0,
	113, 0, 0, 0, 694, 115, 0, 116, 0, 0,
	0, 637, 117, 118, 681, 682, 660, 0, 0, 119,
	120, 704, 0, 121, 0, 122, 0, 0, 309, 0,
	123, 692, 0, 243, 0, 124, 125, 126, 127, 688,
	690, 311, 0, 131, 0, 128, 0, 310, 129, 705,
	130, 706, 707, 708, 0, 671, 0, 312, 132, 313,
	133, 134, 0, 136, 135, 0, 693, 314, 137, 315,
	0, 138, 0, 0, 139, 0, 140, 141, 142, 144,
	252, 143, 316, 145, 146, 148, 147, 632, 0, 661,
	689, 149, 709, 150, 151, 0, 152, 0, 0, 153,
	0, 0, 154, 255, 317, 155, 318, 683, 156, 157,
	158, 159, 0, 684, 160, 258, 161, 0, 162, 163,
	164, 710, 165, 166, 0, 167, 168, 169, 170, 171,
	173, 174, 172, 175, 176, 177, 0, 178, 319, 179,
	180, 638, 181, 0, 183, 184, 185, 186, 0, 261,
	187, 188, 677, 189, 190, 320, 191, 711, 263, 192,
	0, 198, 193, 194, 182, 195, 197, 712, 196, 685,
	0, 199, 0, 200, 201, 202, 203, 204, 0, 266,
	713, 714, 0, 0, 205, 686, 687, 659, 206, 207,
	208, 209, 0, 0, 210, 211, 212, 678, 213, 0,
	214, 215, 216, 271, 715, 0, 0, 217, 0, 0,
	0, 0, 218, 219, 220, 221, 633, 0, 1282, 653,
	654, 651, 652, 643, 0, 0, 0, 629, 630, 0,
	0, 0, 0, 631, 90, 91, 639, 92, 0, 0,
	0, 642, 680, 646, 0, 0, 0, 93, 94, 95,
	223, 695, 225, 696, 96, 697, 698, 0, 97, 229,
	230, 98, 649, 679, 699, 700, 233, 0, 691, 0,
	672, 0, 99, 100, 101, 0, 102, 0, 103, 104,
	105, 0, 308, 106, 107, 0, 673, 675, 0, 674,
	676, 108, 109, 276, 110, 701, 1285, 702, 703, 0,
	112, 0, 113, 0, 0, 0, 694, 115, 0, 116,
	0, 0, 0, 637, 117, 118, 681, 682, 660, 0,
	0, 119, 120, 704, 0, 121, 0, 122, 0, 0,
	309, 0, 123, 692, 0, 243, 0, 124, 125, 1286,
	127, 688, 690, 311, 0, 131, 0, 128, 0, 310,
	129, 705, 130, 706, 707, 708, 0, 671, 0, 312,
	132, 313, 133, 134, 0, 136, 135, 0, 693, 314,
	137, 315, 0, 138, 0, 0, 139, 0, 140, 1287,
	1284, 144, 252, 143, 316, 145, 146, 148, 147, 632,
	0, 661, 689, 149, 709, 150, 151, 0, 152, 0,
	0, 153, 0, 0, 154, 255, 317, 155, 318, 683,
	156, 157, 158, 159, 0, 684, 160, 258, 161, 0,
	162, 163, 164, 710, 165, 166, 0, 167, 168, 169,
	170, 171, 173, 174, 172, 175, 176, 177, 0, 178,
	319, 179, 180, 638, 181, 0, 183, 184, 185, 1288,
	0, 261, 187, 188, 677, 189, 190, 320, 191, 711,
	263, 192, 0, 198, 193, 194, 182, 195, 197, 712,
	196, 685, 0, 199, 0, 200, 201, 202, 203, 204,
	0, 266, 713, 714, 0, 0, 205, 686, 687, 659,
	206, 207, 208, 209, 0, 0, 210, 211, 212, 678,
	213, 0, 214, 215, 216, 271, 715, 0, 0, 217,
	0, 0, 0, 0, 218, 219, 1283, 221, 633, 0,
	664, 653, 654, 651, 652, 643, 0, 0, 0, 629,
	630, 0, 0, 0, 0, 631, 90, 91, 639, 92,
	0, 0, 0, 642, 680, 646, 0, 0, 0, 93,
	94, 95, 223, 695, 225, 696, 96, 697, 698, 0,
	97, 229, 230, 98, 649, 679, 699, 700, 233, 0,
	691, 0, 672, 0, 99, 100, 101, 0, 102, 0,
	103, 104, 105, 0, 308, 106, 107, 0, 673, 675,
	0, 674, 676, 108, 109, 276, 110, 701, 111, 702,
	703, 0, 112, 0, 113, 0, 0, 0, 694, 115,
	0, 116, 0, 0, 0, 637, 117, 118, 681, 682,
	660, 0, 0, 119, 120, 704, 0, 121, 0, 122,
	0, 0, 309, 0, 123, 692, 0, 243, 0, 124,
	125, 126, 127, 688, 690, 311, 0, 131, 0, 128,
	0, 310, 129, 705, 130, 706, 707, 708, 0, 671,
	0, 312, 132, 313, 133, 134, 0, 136, 135, 0,
	693, 314, 137, 315, 0, 138, 0, 0, 139, 0,
	140, 141, 142, 144, 252, 143, 316, 145, 146, 148,
	147, 0, 0, 661, 689, 149, 709, 150, 151, 0,
	152, 0, 0, 153, 0, 0, 154, 255, 317, 155,
	318, 683, 156, 157, 158, 159, 0, 684, 160, 258,
	161, 0, 162, 163, 164, 710, 165, 166, 0, 167,
	168, 169, 170, 171, 173, 174, 172, 175, 176, 177,
	0, 178, 319, 179, 180, 1300, 181, 0, 183, 184,
	185, 186, 0, 261, 187, 188, 677, 189, 190, 320,
	191, 711, 263, 192, 0, 198, 193, 194, 182, 195,
	197, 712, 196, 685, 0, 199, 0, 200, 201, 202,
	203, 204, 0, 266, 713, 714, 0, 0, 205, 686,
	687, 659, 206, 207, 208, 209, 0, 0, 210, 211,
	212, 678, 213, 0, 214, 215, 216, 271, 715, 0,
	0, 217, 0, 0, 0, 0, 218, 219, 220, 221,
	0, 0, 664, 653, 654, 651, 652, 643, 0, 0,
	0, 1296, 1297, 0, 0, 0, 0, 1298, 90, 91,
	1299, 92, 0, 0, 0, 642, 680, 646, 0, 0,
	0, 93, 94, 95, 0, 695, 225, 696, 96, 697,
	698, 0, 97, 229, 230, 98, 649, 679, 699, 700,
	233, 0, 691, 0, 672, 0, 99, 100, 101, 0,
	102, 0, 103, 104, 105, 0, 308, 106, 2080, 0,
	673, 675, 0, 674, 676, 108, 109, 276, 110, 701,
	111, 702, 703, 0, 112, 0, 113, 0, 0, 0,
	694, 115, 0, 116, 0, 0, 0, 637, 117, 118,
	681, 682, 660, 0, 0, 119, 120, 704, 0, 121,
	0, 122, 0, 0, 309, 0, 123, 692, 0, 243,
	0, 124, 125, 126, 127, 688, 690, 0, 0, 131,
	0, 128, 0, 310, 129, 705, 130, 706, 707, 708,
	0, 671, 0, 0, 132, 313, 133, 134, 0, 136,
	135, 0, 693, 314, 137, 0, 0, 138, 0, 0,
	139, 0, 140, 141, 142, 144, 252, 143, 316, 145,
	146, 148, 147, 632, 0, 661, 689, 149, 709, 150,
	151, 0, 152, 0, 0, 153, 0, 0, 154, 255,
	317, 155, 318, 683, 156, 157, 158, 159, 0, 684,
	160, 258, 161, 0, 162, 163, 164, 710, 165, 166,
	0, 167, 168, 169, 170, 171, 173, 174, 172, 175,
	176, 177, 0, 178, 319, 179, 180, 638, 181, 0,
	183, 184, 185, 186, 0, 261, 187, 188, 677, 189,
	190, 0, 191, 711, 263, 192, 0, 198, 193, 194,
	182, 195, 197, 712, 196, 685, 0, 199, 0, 200,
	201, 202, 203, 204, 0, 266, 713, 714, 0, 0,
	205, 686, 687, 659, 206, 207, 2079, 209, 0, 0,
	210, 211, 212, 678, 213, 0, 214, 215, 216, 271,
	715, 0, 0, 217, 0, 0, 0, 0, 218, 219,
	220, 221, 0, 0, 664, 653, 654, 651, 652, 643,
	0, 0, 0, 629, 630, 0, 0, 0, 0, 631,
	90, 91, 639, 92, 0, 0, 0, 642, 680, 646,
	0, 0, 0, 93, 94, 95, 223, 695, 225, 696,
	96, 697, 698, 0, 97, 229, 230, 98, 0, 679,
	699, 700, 233, 0, 691, 0, 672, 0, 99, 100,
	101, 0, 102, 0, 103, 104, 105, 0, 308, 106,
	107, 0, 673, 675, 0, 674, 676, 108, 109, 276,
	110, 701, 111, 702, 703, 0, 112, 0, 113, 0,
	0, 0, 694, 115, 0, 116, 0, 0, 0, 238,
	117, 118, 681, 682, 660, 0, 0, 119, 120, 704,
	0, 121, 0, 122, 0, 0, 309, 0, 123, 692,
	0, 243, 0, 124, 125, 126, 127, 688, 690, 311,
	0, 131, 0, 128, 0, 310, 129, 705, 130, 706,
	707, 708, 0, 671, 0, 312, 132, 313, 133, 134,
	0, 136, 135, 0, 693, 314, 137, 315, 0, 138,
	0, 0, 139, 0, 140, 141, 142, 144, 252, 143,
	316, 145, 146, 148, 147, 0, 0, 661, 689, 149,
	709, 150, 151, 0, 152, 0, 0, 153, 0, 0,
	154, 255, 317, 155, 318, 683, 156, 157, 158, 159,
	0, 684, 160, 258, 161, 0, 162, 163, 164, 710,
	165, 166, 0, 167, 168, 169, 170, 171, 173, 174,
	172, 175, 176, 177, 0, 178, 319, 179, 180, 1300,
	181, 0, 183, 184, 185, 186, 0, 261, 187, 188,
	677, 189, 190, 320, 191, 711, 263, 192, 0, 198,
	193, 194, 182, 195, 197, 712, 196, 685, 0, 199,
	0, 200, 201, 202, 203, 204, 0, 266, 713, 714,
	0, 0, 205, 686, 687, 659, 206, 207, 208, 209,
	664, 0, 210, 211, 212, 678, 213, 0, 214, 215,
	216, 271, 715, 0, 0, 217, 90, 91, 0, 92,
	218, 219, 220, 221, 680, 0, 0, 0, 0, 93,
	94, 95, 223, 224, 225, 226, 96, 227, 228, 0,
	97, 229, 230, 98, 1299, 679, 231, 232, 233, 642,
	691, 0, 672, 0, 99, 100, 101, 0, 102, 0,
	103, 104, 105, 0, 308, 106, 107, 0, 673, 675,
	0, 674, 676, 108, 109, 276, 110, 235, 111, 236,
	237, 0, 112, 0, 113, 0, 0, 0, 114, 115,
	0, 116, 0, 0, 0, 238, 117, 118, 681, 682,
	0, 0, 0, 119, 120, 241, 0, 121, 0, 122,
	0, 0, 309, 0, 123, 692, 0, 243, 0, 124,
	125, 126, 127, 688, 690, 311, 0, 131, 0, 128,
	0, 310, 129, 246, 130, 247, 248, 249, 0, 250,
	0, 312, 132, 313, 133, 134, 0, 136, 135, 0,
	693, 314, 137, 315, 0, 138, 0, 0, 139, 0,
	140, 141, 142, 144, 252, 143, 316, 145, 146, 148,
	147, 0, 0, 0, 689, 149, 254, 150, 151, 0,
	152, 0, 0, 153, 0, 0, 154, 255, 317, 155,
	318, 683, 156, 157, 158, 159, 0, 684, 160, 258,
	161, 0, 162, 163, 164, 259, 165, 166, 0, 167,
	168, 169, 170, 171, 173, 174, 172, 175, 176, 177,
	0, 178, 319, 179, 180, 260, 181, 0, 183, 184,
	185, 186, 0, 261, 187, 188, 677, 189, 190, 320,
	191, 262, 263, 192, 0, 198, 193, 194, 182, 195,
	197, 264, 196, 685, 0, 199, 0, 200, 201, 202,
	203, 204, 0, 266, 267, 268, 0, 0, 205, 686,
	687, 0, 206, 207, 208, 209, 539, 0, 210, 211,
	212, 678, 213, 0, 214, 215, 216, 271, 272, 0,
	0, 217, 90, 91, 0, 92, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 93, 94, 95, 223, 224,
	225, 226, 96, 227, 228, 0, 97, 229, 230, 98,
	1569, 0, 231, 232, 233, 0, 234, 0, 307, 0,
	99, 100, 101, 0, 102, 0, 103, 104, 105, 0,
	308, 106, 107, 0, 0, 0, 0, 0, 0, 108,
	109, 276, 110, 235, 111, 236, 237, 0, 112, 0,
	113, 0, 0, 0, 114, 115, 0, 116, 0, 0,
	0, 238, 117, 118, 239, 240, 0, 0, 0, 119,
	120, 241, 0, 121, 0, 122, 0, 0, 309, 0,
	123, 242, 0, 243, 0, 124, 125, 126, 127, 244,
	245, 311, 0, 131, 0, 128, 0, 310, 129, 246,
	130, 247, 248, 249, 0, 250, 0, 312, 132, 313,
	133, 134, 0, 136, 135, 0, 251, 314, 137, 315,
	0, 138, 0, 0, 139, 0, 140, 141, 142, 144,
	252, 143, 316, 145, 146, 148, 147, 0, 0, 0,
	253, 149, 254, 150, 151, 0, 152, 0, 0, 153,
	0, 0, 154, 255, 317, 155, 318, 256, 156, 157,
	158, 159, 0, 257, 160, 258, 161, 0, 162, 163,
	164, 259, 165, 166, 0, 167, 168, 169, 170, 171,
	173, 174, 172, 175, 176, 177, 0, 178, 319, 179,
	180, 260, 181, 0, 183, 184, 185, 186, 71, 261,
	187, 188, 0, 189, 190, 320, 191, 262, 263, 192,
	0, 198, 193, 194, 182, 195, 197, 264, 196, 265,
	0, 199, 73, 200, 201, 202, 203, 204, 0, 266,
	267, 268, 0, 0, 205, 269, 270, 0, 206, 207,
	208, 209, 0, 0, 210, 211, 212, 0, 213, 0,
	214, 215, 216, 543, 272, 0, 0, 217, 0, 0,
	0, 69, 218, 219, 220, 221, 0, 70, 539, 755,
	0, 863, 860, 855, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 91, 68, 92, 0, 0,
	0, 0, 222, 0, 0, 0, 0, 93, 94, 95,
	223, 224, 225, 226, 96, 227, 228, 0, 97, 229,
	230, 98, 0, 0, 231, 232, 233, 0, 234, 0,
	307, 0, 99, 100, 101, 0, 102, 0, 103, 104,
	105, 0, 308, 106, 107, 0, 0, 0, 0, 0,
	0, 108, 109, 276, 110, 235, 111, 236, 237, 866,
	112, 0, 113, 0, 0, 0, 114, 115, 0, 116,
	0, 0, 0, 238, 117, 118, 239, 240, 857, 0,
	0, 119, 120, 241, 0, 121, 0, 122, 0, 0,
	309, 0, 123, 242, 0, 243, 0, 124, 125, 126,
	127, 244, 245, 311, 0, 131, 0, 128, 0, 310,
	129, 246, 130, 247, 248, 249, 0, 250, 0, 312,
	132, 313, 133, 134, 0, 136, 135, 0, 251, 314,
	137, 315, 0, 138, 0, 0, 139, 0, 140, 141,
	142, 144, 252, 143, 316, 145, 146, 148, 147, 0,
	0, 0, 253, 149, 254, 150, 151, 0, 152, 858,
	0, 153, 0, 0, 154, 255, 317, 155, 318, 256,
	156, 157, 158, 159, 0, 257, 160, 258, 161, 0,
	162, 163, 164, 259, 165, 166, 0, 167, 168, 169,
	170, 171, 173, 174, 172, 175, 176, 177, 0, 178,
	319, 179, 180, 260, 181, 0, 183, 184, 185, 186,
	0, 261, 187, 188, 0, 189, 190, 320, 191, 262,
	263, 192, 0, 198, 193, 194, 182, 195, 197, 264,
	196, 265, 0, 199, 0, 200, 201, 202, 203, 204,
	0, 266, 267, 268, 0, 0, 205, 269, 270, 856,
	206, 207, 208, 209, 0, 0, 210, 211, 212, 0,
	213, 0, 214, 215, 216, 271, 272, 539, 755, 217,
	863, 860, 855, 0, 218, 219, 220, 221, 0, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 864,
	861, 222, 0, 0, 0, 0, 93, 94, 95, 223,
	224, 225, 226, 96, 227, 228, 0, 97, 229, 230,
	98, 0, 0, 231, 232, 233, 0, 234, 0, 307,
	0, 99, 100, 101, 0, 102, 0, 103, 104, 105,
	0, 308, 106, 107, 0, 0, 0, 0, 0, 0,
	108, 109, 276, 110, 235, 111, 236, 237, 851, 112,
	0, 113, 0, 0, 0, 114, 115, 0, 116, 0,
	0, 0, 238, 117, 118, 239, 240, 857, 0, 0,
	119, 120, 241, 0, 121, 0, 122, 0, 0, 309,
	0, 123, 242, 0, 243, 0, 124, 125, 126, 127,
	244, 245, 311, 0, 131, 0, 128, 0, 310, 129,
	246, 130, 247, 248, 249, 0, 250, 0, 312, 132,
	313, 133, 134, 0, 136, 135, 0, 251, 314, 137,
	315, 0, 138, 0, 0, 139, 0, 140, 141, 142,
	144, 252, 143, 316, 145, 146, 148, 147, 0, 0,
	0, 253, 149, 254, 150, 151, 0, 152, 858, 0,
	153, 0, 0, 154, 255, 317, 155, 318, 256, 156,
	157, 158, 159, 0, 257, 160, 258, 161, 0, 162,
	163, 164, 259, 165, 166, 0, 167, 168, 169, 170,
	171, 173, 174, 172, 175, 176, 177, 0, 178, 319,
	179, 180, 260, 181, 0, 183, 184, 185, 186, 0,
	261, 187, 188, 0, 189, 190, 320, 191, 262, 263,
	192, 0, 198, 193, 194, 182, 195, 197, 264, 196,
	265, 0, 199, 0, 200, 201, 202, 203, 204, 0,
	266, 267, 268, 0, 0, 205, 269, 270, 856, 206,
	207, 208, 209, 0, 0, 210, 211, 212, 0, 213,
	0, 214, 215, 216, 271, 272, 539, 755, 217, 863,
	860, 855, 0, 218, 219, 220, 221, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 864, 861,
	222, 0, 0, 0, 0, 93, 94, 95, 223, 224,
	225, 226, 96, 227, 228, 0, 97, 229, 230, 98,
	0, 0, 231, 232, 233, 0, 234, 0, 307, 0,
	99, 100, 101, 0, 102, 0, 103, 104, 105, 0,
	308, 106, 107, 0, 0, 0, 0, 0, 0, 108,
	109, 276, 110, 235, 111, 236, 237, 0, 112, 0,
	113, 0, 0, 0, 114, 115, 0, 116, 0, 0,
	0, 238, 117, 118, 239, 240, 857, 0, 0, 119,
	120, 241, 0, 121, 0, 122, 0, 0, 309, 0,
	123, 242, 0, 243, 0, 124, 125, 126, 127, 244,
	245, 311, 0, 131, 0, 128, 0, 310, 129, 246,
	130, 247, 248, 249, 0, 250, 0, 312, 132, 313,
	133, 134, 0, 136, 135, 0, 251, 314, 137, 315,
	0, 138, 0, 0, 139, 0, 140, 141, 142, 144,
	252, 143, 316, 145, 146, 148, 147, 0, 0, 0,
	253, 149, 254, 150, 151, 0, 152, 858, 0, 153,
	0, 0, 154, 255, 317, 155, 318, 256, 156, 157,
	158, 159, 0, 257, 160, 258, 161, 0, 162, 163,
	164, 259, 165, 166, 0, 167, 168, 169, 170, 171,
	173, 174, 172, 175, 176, 177, 0, 178, 319, 179,
	180, 260, 181, 0, 183, 184, 185, 186, 0, 261,
	187, 188, 0, 189, 190, 320, 191, 262, 263, 192,
	0, 198, 193, 194, 182, 195, 197, 264, 196, 265,
	0, 199, 0, 200, 201, 202, 203, 204, 0, 266,
	267, 268, 0, 0, 205, 269, 270, 856, 206, 207,
	208, 209, 0, 0, 210, 211, 212, 0, 213, 0,
	214, 215, 216, 271, 272, 87, 0, 217, 0, 0,
	0, 0, 218, 219, 220, 221, 0, 0, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 864, 861, 222,
	0, 0, 0, 0, 93, 94, 95, 223, 224, 225,
	226, 96, 227, 228, 0, 97, 229, 230, 98, 0,
	0, 231, 232, 233, 0, 234, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 104, 105, 0, 0,
	106, 107, 0, 0, 0, 0, 0, 0, 108, 109,
	276, 110, 235, 111, 236, 237, 0, 112, 0, 113,
	0, 0, 0, 114, 115, 0, 116, 0, 0, 0,
	238, 117, 118, 239, 240, 0, 0, 0, 119, 120,
	241, 0, 121, 0, 122, 0, 0, 0, 0, 123,
	242, 0, 243, 0, 124, 125, 126, 127, 244, 245,
	0, 0, 131, 0, 128, 0, 0, 129, 246, 130,
	247, 248, 249, 0, 250, 0, 0, 132, 0, 133,
	134, 0, 136, 135, 0, 251, 0, 137, 0, 0,
	138, 0, 0, 139, 0, 140, 141, 142, 144, 252,
	143, 0, 145, 146, 148, 147, 0, 0, 0, 253,
	149, 254, 150, 151, 0, 152, 0, 493, 153, 0,
	0, 154, 255, 0, 155, 0, 256, 156, 157, 158,
	159, 0, 257, 160, 258, 161, 0, 162, 163, 164,
	259, 165, 166, 0, 167, 168, 169, 170, 171, 173,
	174, 172, 175, 176, 177, 0, 178, 0, 179, 180,
	260, 181, 0, 183, 184, 185, 186, 71, 261, 187,
	188, 0, 189, 190, 0, 191, 262, 263, 192, 0,
	198, 193, 194, 182, 195, 197, 264, 196, 265, 0,
	199, 73, 200, 201, 202, 203, 204, 0, 266, 267,
	268, 0, 0, 205, 269, 270, 0, 206, 207, 208,
	209, 0, 0, 210, 211, 212, 0, 213, 0, 214,
	215, 216, 543, 272, 0, 0, 217, 87, 0, 0,
	69, 218, 219, 220, 221, 0, 70, 0, 0, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 222, 0, 1177, 0, 1182, 93, 94, 95, 223,
	224, 225, 226, 96, 227, 228, 0, 97, 229, 230,
	98, 0, 0, 231, 232, 233, 0, 234, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 104, 105,
	0, 0, 106, 107, 0, 0, 0, 0, 0, 0,
	108, 109, 276, 110, 235, 111, 236, 237, 0, 112,
	0, 113, 0, 0, 0, 114, 115, 0, 116, 0,
	0, 0, 238, 117, 118, 239, 240, 0, 0, 0,
	119, 120, 241, 0, 121, 0, 122, 0, 0, 0,
	0, 123, 242, 0, 243, 0, 124, 125, 126, 127,
	244, 245, 0, 0, 131, 0, 128, 0, 0, 129,
	246, 130, 247, 248, 249, 0, 250, 0, 0, 132,
	0, 133, 134, 0, 136, 135, 0, 251, 0, 137,
	0, 0, 138, 0, 0, 139, 0, 140, 141, 142,
	144, 252, 143, 0, 145, 146, 148, 147, 0, 0,
	0, 253, 149, 254, 150, 151, 0, 152, 0, 0,
	153, 0, 0, 154, 255, 0, 155, 0, 256, 156,
	157, 158, 159, 0, 257, 160, 258, 161, 0, 162,
	163, 164, 259, 165, 166, 0, 167, 168, 169, 170,
	171, 173, 174, 172, 175, 176, 177, 0, 178, 0,
	179, 180, 260, 181, 0, 183, 184, 185, 186, 71,
	261, 187, 188, 0, 189, 190, 0, 191, 262, 263,
	192, 0, 198, 193, 194, 182, 195, 197, 264, 196,
	265, 0, 199, 73, 200, 201, 202, 203, 204, 0,
	266, 267, 268, 0, 0, 205, 269, 270, 0, 206,
	207, 208, 209, 0, 0, 210, 211, 212, 0, 213,
	0, 214, 215, 216, 543, 272, 0, 0, 217, 87,
	0, 0, 69, 218, 219, 220, 221, 0, 70, 0,
	0, 0, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 222, 0, 0, 0, 68, 93, 94,
	95, 223, 224, 225, 226, 96, 227, 228, 0, 97,
	229, 230, 98, 0, 0, 231, 232, 233, 0, 234,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	104, 105, 0, 0, 106, 107, 0, 0, 0, 0,
	0, 0, 108, 109, 276, 110, 235, 111, 236, 237,
	0, 112, 0, 113, 0, 0, 0, 114, 115, 0,
	116, 0, 0, 0, 238, 117, 118, 239, 240, 0,
	0, 0, 119, 120, 241, 0, 121, 0, 122, 0,
	0, 0, 0, 123, 242, 0, 243, 0, 124, 125,
	126, 127, 244, 245, 0, 0, 131, 0, 128, 0,
	0, 129, 246, 130, 247, 248, 249, 0, 250, 0,
	0, 132, 0, 133, 134, 0, 136, 135, 0, 251,
	0, 137, 0, 0, 138, 0, 0, 139, 0, 140,
	141, 142, 144, 252, 143, 0, 145, 146, 148, 147,
	0, 0, 0, 253, 149, 254, 150, 151, 0, 152,
	0, 493, 153, 0, 0, 154, 255, 0, 155, 0,
	256, 156, 157, 158, 159, 0, 257, 160, 258, 161,
	0, 162, 163, 164, 259, 165, 166, 0, 167, 168,
	169, 170, 171, 173, 174, 172, 175, 176, 177, 0,
	178, 0, 179, 180, 260, 181, 0, 183, 184, 185,
	186, 0, 261, 187, 188, 0, 189, 190, 0, 191,
	262, 263, 192, 0, 198, 193, 194, 182, 195, 197,
	264, 196, 265, 0, 199, 0, 200, 201, 202, 203,
	204, 0, 266, 267, 268, 0, 0, 205, 269, 270,
	0, 206, 207, 208, 209, 0, 0, 210, 211, 212,
	0, 213, 0, 214, 215, 216, 271, 272, 0, 0,
	217, 87, 0, 0, 0, 218, 219, 220, 221, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 222, 0, 1177, 0, 1182,
	93, 94, 95, 223, 224, 225, 226, 96, 227, 228,
	0, 97, 229, 230, 98, 0, 0, 231, 232, 233,
	0, 234, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 104, 105, 0, 0, 106, 107, 0, 0,
	0, 0, 0, 0, 108, 109, 276, 110, 235, 111,
	236, 237, 0, 112, 0, 113, 0, 0, 0, 114,
	115, 0, 116, 0, 0, 0, 238, 117, 118, 239,
	240, 0, 0, 0, 119, 120, 241, 0, 121, 0,
	122, 0, 0, 0, 0, 123, 242, 0, 243, 0,
	124, 125, 126, 127, 244, 245, 0, 0, 131, 0,
	128, 0, 0, 129, 246, 130, 247, 248, 249, 0,
	250, 0, 0, 132, 0, 133, 134, 0, 136, 135,
	0, 251, 0, 137, 0, 0, 138, 0, 0, 139,
	0, 140, 141, 142, 144, 252, 143, 0, 145, 146,
	148, 147, 0, 0, 0, 253, 149, 254, 150, 151,
	0, 152, 0, 0, 153, 0, 0, 154, 255, 0,
	155, 0, 256, 156, 157, 158, 159, 0, 257, 160,
	258, 161, 0, 162, 163, 164, 259, 165, 166, 0,
	167, 168, 169, 170, 171, 173, 174, 172, 175, 176,
	177, 0, 178, 0, 179, 180, 260, 181, 0, 183,
	184, 185, 186, 0, 261, 187, 188, 0, 189, 190,
	0, 191, 262, 263, 192, 0, 198, 193, 194, 182,
	195, 197, 264, 196, 265, 0, 199, 0, 200, 201,
	202, 203, 204, 0, 266, 267, 268, 0, 0, 205,
	269, 270, 0, 206, 207, 208, 209, 87, 0, 210,
	211, 212, 0, 213, 0, 214, 215, 216, 271, 272,
	0, 0, 217, 90, 91, 0, 92, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 93, 94, 95, 223,
	224, 225, 226, 96, 227, 228, 0, 97, 229, 230,
	98, 0, 763, 231, 232, 233, 0, 234, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 104, 105,
	0, 0, 106, 107, 0, 0, 0, 0, 0, 0,
	108, 109, 276, 110, 235, 111, 236, 237, 0, 112,
	0, 113, 0, 0, 0, 114, 115, 0, 116, 0,
	0, 0, 238, 117, 118, 239, 240, 0, 0, 0,
	119, 120, 241, 0, 121, 0, 122, 0, 0, 0,
	0, 123, 242, 0, 243, 0, 124, 125, 126, 127,
	244, 245, 0, 0, 131, 0, 128, 0, 0, 129,
	246, 130, 247, 248, 249, 0, 250, 0, 0, 132,
	0, 133, 134, 0, 136, 135, 0, 251, 0, 137,
	0, 0, 138, 0, 0, 139, 0, 140, 141, 142,
	144, 252, 143, 0, 145, 146, 148, 147, 0, 0,
	0, 253, 149, 254, 150, 151, 0, 152, 0, 0,
	153, 0, 0, 154, 255, 0, 155, 0, 256, 156,
	157, 158, 159, 0, 257, 160, 258, 161, 0, 162,
	163, 164, 259, 165, 166, 0, 167, 168, 169, 170,
	171, 173, 174, 172, 175, 176, 177, 0, 178, 0,
	179, 180, 260, 181, 0, 183, 184, 185, 186, 0,
	261, 187, 188, 0, 189, 190, 0, 191, 262, 263,
	192, 0, 198, 193, 194, 182, 195, 197, 264, 196,
	265, 0, 199, 0, 200, 201, 202, 203, 204, 0,
	266, 267, 268, 0, 0, 205, 269, 270, 0, 206,
	207, 208, 209, 87, 0, 210, 211, 212, 0, 213,
	0, 214, 215, 216, 271, 272, 0, 0, 217, 90,
	91, 0, 92, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 93, 94, 95, 223, 224, 225, 226, 96,
	227, 228, 0, 97, 229, 230, 98, 1088, 0, 231,
	232, 233, 0, 234, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 104, 105, 0, 0, 106, 107,
	0, 0, 0, 0, 0, 0, 108, 109, 276, 110,
	235, 111, 236, 237, 0, 112, 0, 113, 0, 0,
	0, 114, 115, 0, 116, 0, 0, 0, 238, 117,
	118, 239, 240, 0, 0, 0, 119, 120, 241, 0,
	121, 0, 122, 0, 0, 0, 0, 123, 242, 0,
	243, 0, 124, 125, 126, 127, 244, 245, 0, 0,
	131, 0, 128, 0, 0, 129, 246, 130, 247, 248,
	249, 0, 250, 0, 0, 132, 0, 133, 134, 0,
	136, 135, 0, 251, 0, 137, 0, 0, 138, 0,
	0, 139, 0, 140, 141, 142, 144, 252, 143, 0,
	145, 146, 148, 147, 0, 0, 0, 253, 149, 254,
	150, 151, 0, 152, 0, 0, 153, 0, 0, 154,
	255, 0, 155, 0, 256, 156, 157, 158, 159, 0,
	257, 160, 258, 161, 0, 162, 163, 164, 259, 165,
	166, 0, 167, 168, 169, 170, 171, 173, 174, 172,
	175, 176, 177, 0, 178, 0, 179, 180, 260, 181,
	0, 183, 184, 185, 186, 0, 261, 187, 188, 0,
	189, 190, 0, 191, 262, 263, 192, 0, 198, 193,
	194, 182, 195, 197, 264, 196, 265, 0, 199, 0,
	200, 201, 202, 203, 204, 0, 266, 267, 268, 0,
	0, 205, 269, 270, 0, 206, 207, 208, 209, 87,
	0, 210, 211, 212, 0, 213, 0, 214, 215, 216,
	271, 272, 0, 0, 217, 90, 91, 0, 92, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 93, 94,
	95, 223, 224, 225, 226, 96, 227, 228, 0, 97,
	229, 230, 98, 1691, 0, 231, 232, 233, 0, 234,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	104, 105, 0, 0, 106, 107, 0, 0, 0, 0,
	0, 0, 108, 109, 276, 110, 235, 111, 236, 237,
	0, 112, 0, 113, 0, 0, 0, 114, 115, 0,
	116, 0, 0, 0, 238, 117, 118, 239, 240, 0,
	0, 0, 119, 120, 241, 0, 121, 0, 122, 0,
	0, 0, 0, 123, 242, 0, 243, 0, 124, 125,
	126, 127, 244, 245, 0, 0, 131, 0, 128, 0,
	0, 129, 246, 130, 247, 248, 249, 0, 250, 0,
	0, 132, 0, 133, 134, 0, 136, 135, 0, 251,
	0, 137, 0, 0, 138, 0, 0, 139, 0, 140,
	141, 142, 144, 252, 143, 0, 145, 146, 148, 147,
	0, 0, 0, 253, 149, 254, 150, 151, 0, 152,
	0, 0, 153, 0, 0, 154, 255, 0, 155, 0,
	256, 156, 157, 158, 159, 0, 257, 160, 258, 161,
	0, 162, 163, 164, 259, 165, 166, 0, 167, 168,
	169, 170, 171, 173, 174, 172, 175, 176, 177, 0,
	178, 0, 179, 180, 260, 181, 0, 183, 184, 185,
	186, 0, 261, 187, 188, 0, 189, 190, 0, 191,
	262, 263, 192, 0, 198, 193, 194, 182, 195, 197,
	264, 196, 265, 0, 199, 0, 200, 201, 202, 203,
	204, 0, 266, 267, 268, 0, 0, 205, 269, 270,
	0, 206, 207, 208, 209, 0, 0, 210, 211, 212,
	0, 213, 0, 214, 215, 216, 271, 272, 0, 0,
	217, 0, 0, 0, 0, 218, 219, 220, 221, 664,
	653, 654, 651, 652, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 91, 0, 92, 726,
	0, 0, 0, 222, 0, 0, 0, 0, 93, 94,
	95, 223, 695, 225, 696, 96, 697, 698, 0, 97,
	229, 230, 98, 0, 0, 699, 700, 233, 0, 234,
	0, 307, 0, 99, 100, 101, 0, 102, 0, 103,
	104, 105, 0, 308, 106, 107, 0, 0, 0, 0,
	0, 0, 108, 109, 276, 110, 701, 111, 702, 703,
	0, 112, 0, 113, 0, 0, 0, 694, 115, 0,
	116, 0, 0, 0, 238, 117, 118, 239, 240, 660,
	0, 0, 119, 120, 704, 0, 121, 0, 122, 0,
	0, 309, 0, 123, 242, 0, 243, 0, 124, 125,
	126, 127, 244, 245, 311, 0, 131, 0, 128, 0,
	310, 129, 705, 130, 706, 707, 708, 0, 671, 0,
	312, 132, 313, 133, 134, 0, 136, 135, 0, 251,
	314, 137, 315, 0, 138, 0, 0, 139, 0, 140,
	141, 142, 144, 252, 143, 316, 145, 146, 148, 147,
	0, 0, 661, 253, 149, 709, 150, 151, 0, 152,
	0, 0, 153, 0, 0, 154, 255, 317, 155, 318,
	256, 156, 157, 158, 159, 0, 257, 160, 258, 161,
	0, 162, 163, 164, 710, 165, 166, 0, 167, 168,
	169, 170, 171, 173, 174, 172, 175, 176, 177, 0,
	178, 319, 179, 180, 260, 181, 0, 183, 184, 185,
	186, 0, 261, 187, 188, 0, 189, 190, 320, 191,
	711, 263, 192, 0, 198, 193, 194, 182, 195, 197,
	712, 196, 265, 0, 199, 0, 200, 201, 202, 203,
	204, 0, 266, 713, 714, 0, 0, 205, 269, 270,
	659, 206, 207, 208, 209, 539, 755, 210, 211, 212,
	753, 213, 0, 214, 215, 216, 271, 715, 0, 0,
	217, 90, 91, 0, 92, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 93, 94, 95, 223, 224, 225,
	226, 96, 227, 228, 0, 97, 229, 230, 98, 0,
	0, 231, 232, 233, 0, 234, 0, 307, 0, 99,
	100, 101, 0, 102, 0, 103, 104, 105, 0, 308,
	106, 107, 0, 0, 0, 0, 0, 0, 108, 109,
	276, 110, 235, 111, 236, 237, 0, 112, 0, 113,
	0, 0, 0, 114, 115, 0, 116, 0, 0, 0,
	238, 117, 118, 239, 240, 0, 0, 0, 119, 120,
	241, 0, 121, 0, 122, 0, 0, 309, 0, 123,
	242, 0, 243, 0, 124, 125, 126, 127, 244, 245,
	311, 0, 131, 0, 128, 0, 310, 129, 246, 130,
	247, 248, 249, 0, 250, 0, 312, 132, 313, 133,
	134, 0, 136, 135, 0, 251, 314, 137, 315, 0,
	138, 0, 0, 139, 0, 140, 141, 142, 144, 252,
	143, 316, 145, 146, 148, 147, 0, 0, 0, 253,
	149, 254, 150, 151, 0, 152, 0, 0, 153, 0,
	0, 154, 255, 317, 155, 318, 256, 156, 157, 158,
	159, 0, 257, 160, 258, 161, 0, 162, 163, 164,
	259, 165, 166, 0, 167, 168, 169, 170, 171, 173,
	174, 172, 175, 176, 177, 0, 178, 319, 179, 180,
	260, 181, 0, 183, 184, 185, 186, 0, 261, 187,
	188, 0, 189, 190, 320, 191, 262, 263, 192, 0,
	198, 193, 194, 182, 195, 197, 264, 196, 265, 0,
	199, 0, 200, 201, 202, 203, 204, 0, 266, 267,
	268, 0, 0, 205, 269, 270, 0, 206, 207, 208,
	209, 87, 0, 210, 211, 212, 0, 213, 0, 214,
	215, 216, 271, 272, 0, 0, 217, 90, 91, 0,
	92, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 94, 95, 223, 224, 225, 226, 96, 227, 228,
	0, 97, 229, 230, 98, 0, 0, 231, 232, 233,
	0, 234, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 104, 105, 0, 0, 106, 107, 0, 0,
	0, 0, 0, 0, 108, 109, 83, 110, 235, 111,
	236, 237, 0, 112, 0, 113, 0, 0, 0, 114,
	115, 0, 116, 0, 0, 0, 238, 117, 118, 239,
	240, 0, 0, 0, 119, 120, 241, 0, 121, 0,
	122, 0, 0, 0, 0, 123, 242, 0, 243, 0,
	124, 125, 126, 127, 244, 245, 0, 0, 131, 0,
	128, 0, 0, 129, 246, 130, 247, 248, 249, 0,
	250, 0, 0, 132, 0, 133, 134, 0, 136, 135,
	0, 251, 0, 137, 0, 0, 138, 0, 0, 139,
	0, 140, 141, 142, 144, 252, 143, 0, 145, 146,
	148, 147, 0, 0, 0, 253, 149, 254, 150, 151,
	0, 152, 0, 0, 153, 0, 0, 154, 255, 0,
	155, 0, 256, 156, 157, 158, 159, 0, 257, 160,
	258, 161, 0, 162, 163, 164, 259, 165, 166, 0,
	167, 168, 169, 170, 171, 173, 174, 172, 175, 176,
	177, 0, 178, 0, 179, 180, 260, 181, 0, 183,
	184, 185, 186, 0, 261, 187, 188, 0, 189, 190,
	0, 191, 262, 263, 192, 0, 198, 193, 194, 182,
	195, 197, 264, 196, 265, 0, 199, 82, 200, 201,
	202, 203, 204, 0, 266, 267, 268, 0, 0, 205,
	269, 270, 0, 206, 207, 208, 209, 0, 0, 210,
	211, 212, 0, 213, 0, 214, 215, 216, 271, 272,
	0, 0, 217, 539, 755, 0, 0, 218, 219, 220,
	221, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	91, 0, 92, 0, 86, 0, 0, 222, 0, 0,
	0, 0, 93, 94, 95, 223, 224, 225, 226, 96,
	227, 228, 0, 97, 229, 230, 98, 0, 0, 231,
	232, 233, 0, 234, 0, 307, 0, 99, 100, 101,
	0, 102, 0, 103, 104, 105, 0, 308, 106, 107,
	0, 0, 0, 0, 0, 0, 108, 109, 276, 110,
	235, 111, 236, 237, 0, 112, 0, 113, 0, 0,
	0, 114, 115, 0, 116, 0, 0, 0, 238, 117,
	118, 239, 240, 0, 0, 0, 119, 120, 241, 0,
	121, 0, 122, 0, 0, 309, 0, 123, 242, 0,
	243, 0, 124, 125, 126, 127, 244, 245, 311, 0,
	131, 0, 128, 0, 310, 129, 246, 130, 247, 248,
	249, 0, 250, 0, 312, 132, 313, 133, 134, 0,
	136, 135, 0, 251, 314, 137, 315, 0, 138, 0,
	0, 139, 0, 140, 141, 142, 144, 252, 143, 316,
	145, 146, 148, 147, 0, 0, 0, 253, 149, 254,
	150, 151, 0, 152, 0, 0, 153, 0, 0, 154,
	255, 317, 155, 318, 256, 156, 157, 158, 159, 0,
	257, 160, 258, 161, 0, 162, 163, 164, 259, 165,
	166, 0, 167, 168, 169, 170, 171, 173, 174, 172,
	175, 176, 177, 0, 178, 319, 179, 180, 260, 181,
	0, 183, 184, 185, 186, 0, 261, 187, 188, 0,
	189, 190, 320, 191, 262, 263, 192, 0, 198, 193,
	194, 182, 195, 197, 264, 196, 265, 0, 199, 0,
	200, 201, 202, 203, 204, 0, 266, 267, 268, 0,
	0, 205, 269, 270, 0, 206, 207, 208, 209, 87,
	0, 210, 211, 212, 0, 213, 0, 214, 215, 216,
	271, 272, 0, 0, 217, 90, 91, 0, 92, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 93, 94,
	95, 223, 224, 225, 226, 96, 227, 228, 0, 97,
	229, 230, 98, 0, 0, 231, 232, 233, 0, 234,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	104, 105, 0, 0, 106, 107, 0, 0, 0, 0,
	0, 0, 108, 109, 276, 110, 235, 111, 236, 237,
	0, 112, 0, 113, 0, 0, 0, 114, 115, 0,
	116, 0, 0, 0, 238, 117, 118, 239, 240, 0,
	0, 0, 119, 120, 241, 0, 121, 0, 122, 0,
	0, 0, 0, 123, 242, 0, 243, 0, 124, 125,
	126, 127, 244, 245, 0, 0, 131, 0, 128, 0,
	0, 129, 246, 130, 247, 248, 249, 0, 250, 0,
	0, 132, 0, 133, 134, 0, 136, 135, 0, 251,
	0, 137, 0, 0, 138, 0, 0, 139, 0, 140,
	141, 142, 144, 252, 143, 0, 145, 146, 148, 147,
	0, 0, 0, 253, 149, 254, 150, 151, 0, 152,
	0, 0, 153, 0, 0, 154, 255, 0, 155, 0,
	256, 156, 157, 158, 159, 0, 257, 160, 258, 161,
	0, 162, 163, 164, 259, 165, 166, 0, 167, 168,
	169, 170, 171, 173, 174, 172, 175, 176, 177, 0,
	178, 0, 179, 180, 260, 181, 0, 183, 184, 185,
	186, 0, 261, 187, 188, 0, 189, 190, 0, 191,
	262, 263, 192, 0, 198, 193, 194, 182, 195, 197,
	264, 196, 265, 0, 199, 0, 200, 201, 202, 203,
	204, 0, 266, 267, 268, 0, 0, 205, 269, 270,
	0, 206, 207, 208, 209, 0, 0, 210, 211, 212,
	0, 213, 0, 214, 215, 216, 271, 272, 0, 539,
	217, 0, 0, 0, 0, 218, 219, 220, 221, 0,
	0, 0, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 86, 222, 0, 0, 0, 0, 93, 94,
	95, 223, 224, 225, 226, 96, 227, 228, 0, 97,
	229, 230, 98, 0, 0, 231, 232, 233, 0, 234,
	0, 307, 0, 99, 100, 101, 0, 102, 0, 103,
	104, 105, 0, 308, 106, 107, 0, 0, 0, 0,
	0, 0, 108, 109, 276, 110, 235, 111, 236, 237,
	0, 112, 0, 113, 0, 0, 0, 114, 115, 0,
	116, 0, 0, 0, 238, 117, 118, 239, 240, 0,
	0, 0, 119, 120, 241, 0, 121, 0, 122, 0,
	0, 309, 0, 123, 242, 0, 243, 0, 124, 125,
	126, 127, 244, 245, 311, 0, 131, 0, 128, 0,
	310, 129, 246, 130, 247, 248, 249, 0, 250, 0,
	312, 132, 313, 133, 134, 0, 136, 135, 0, 251,
	314, 137, 315, 0, 138, 0, 0, 139, 0, 140,
	141, 142, 144, 252, 143, 316, 145, 146, 148, 147,
	0, 0, 0, 253, 149, 254, 150, 151, 0, 152,
	0, 0, 153, 0, 0, 154, 255, 317, 155, 318,
	256, 156, 157, 158, 159, 0, 257, 160, 258, 161,
	0, 162, 163, 164, 259, 165, 166, 0, 167, 168,
	169, 170, 171, 173, 174, 172, 175, 176, 177, 0,
	178, 319, 179, 180, 260, 181, 0, 183, 184, 185,
	186, 0, 261, 187, 188, 0, 189, 190, 320, 191,
	262, 263, 192, 0, 198, 193, 194, 182, 195, 197,
	264, 196, 265, 0, 199, 0, 200, 201, 202, 203,
	204, 0, 266, 267, 268, 0, 0, 205, 269, 270,
	0, 206, 207, 208, 209, 87, 0, 210, 211, 212,
	0, 213, 0, 214, 215, 216, 271, 272, 0, 0,
	217, 90, 91, 0, 92, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 93, 94, 95, 223, 224, 225,
	226, 96, 227, 228, 0, 97, 229, 230, 98, 0,
	0, 231, 232, 233, 1045, 234, 0, 0, 0, 99,
	100, 101, 0, 102, 1043, 103, 104, 105, 0, 0,
	106, 107, 0, 0, 0, 0, 0, 0, 108, 109,
	276, 110, 235, 111, 236, 237, 0, 112, 0, 113,
	0, 0, 0, 114, 115, 0, 116, 0, 0, 0,
	238, 117, 118, 239, 240, 0, 1153, 0, 119, 120,
	241, 0, 121, 0, 122, 1048, 0, 0, 0, 123,
	242, 0, 243, 0, 124, 125, 126, 127, 244, 245,
	0, 0, 131, 1151, 128, 0, 0, 129, 246, 130,
	247, 248, 249, 0, 250, 0, 0, 132, 0, 133,
	134, 0, 136, 135, 0, 251, 0, 137, 0, 0,
	138, 0, 0, 139, 0, 140, 141, 142, 144, 252,
	143, 0, 145, 146, 148, 147, 0, 0, 0, 253,
	149, 254, 150, 151, 0, 152, 0, 0, 153, 0,
	0, 154, 255, 0, 155, 0, 256, 156, 157, 158,
	159, 0, 257, 160, 258, 161, 1047, 162, 163, 164,
	259, 165, 166, 0, 167, 168, 169, 170, 171, 173,
	174, 172, 175, 176, 177, 0, 178, 0, 179, 180,
	260, 181, 0, 183, 184, 185, 186, 0, 261, 187,
	188, 0, 189, 190, 0, 191, 262, 263, 192, 0,
	198, 193, 194, 182, 195, 197, 264, 196, 265, 0,
	199, 0, 200, 201, 202, 203, 204, 0, 266, 267,
	268, 0, 0, 205, 269, 270, 0, 206, 207, 208,
	209, 87, 1152, 210, 211, 212, 0, 213, 0, 214,
	215, 216, 271, 272, 0, 0, 217, 90, 91, 0,
	92, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 94, 95, 223, 224, 225, 226, 96, 227, 228,
	0, 97, 229, 230, 98, 0, 0, 231, 232, 233,
	1045, 234, 0, 0, 1040, 99, 100, 101, 0, 102,
	1043, 103, 104, 105, 0, 0, 106, 107, 0, 0,
	0, 0, 0, 0, 108, 109, 276, 110, 235, 111,
	236, 237, 0, 112, 0, 113, 0, 0, 0, 114,
	115, 0, 116, 0, 0, 0, 238, 117, 118, 239,
	240, 0, 0, 0, 119, 120, 241, 0, 121, 0,
	122, 1048, 0, 0, 0, 123, 242, 0, 243, 0,
	124, 125, 126, 127, 1039, 245, 0, 0, 131, 0,
	128, 0, 0, 129, 246, 130, 247, 248, 249, 0,
	250, 0, 0, 132, 0, 133, 134, 0, 136, 135,
	0, 251, 0, 137, 0, 0, 138, 0, 0, 139,
	0, 140, 141, 142, 144, 252, 143, 0, 145, 146,
	148, 147, 0, 0, 0, 253, 149, 254, 150, 151,
	0, 152, 0, 0, 153, 0, 0, 154, 255, 0,
	155, 0, 256, 156, 157, 158, 159, 0, 257, 160,
	258, 161, 1047, 162, 163, 164, 259, 165, 166, 0,
	167, 168, 169, 170, 171, 173, 174, 172, 175, 176,
	177, 0, 178, 0, 179, 180, 260, 181, 0, 183,
	184, 185, 186, 0, 261, 187, 188, 0, 189, 190,
	0, 191, 262, 263, 192, 0, 198, 193, 194, 182,
	195, 197, 264, 196, 265, 0, 199, 0, 200, 201,
	202, 203, 204, 0, 266, 267, 268, 0, 0, 205,
	269, 270, 0, 206, 207, 208, 209, 87, 1046, 210,
	211, 212, 0, 213, 0, 214, 215, 216, 271, 272,
	0, 0, 217, 90, 91, 0, 92, 218, 219, 220,
	221, 222, 0, 1658, 0, 0, 93, 94, 95, 223,
	224, 225, 226, 96, 227, 228, 0, 97, 229, 230,
	98, 0, 0, 231, 232, 233, 0, 234, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 104, 105,
	0, 0, 106, 107, 0, 0, 0, 0, 0, 0,
	108, 109, 276, 110, 235, 111, 236, 237, 0, 112,
	0, 113, 0, 0, 0, 114, 115, 0, 116, 0,
	0, 0, 238, 117, 118, 239, 240, 0, 0, 0,
	119, 120, 241, 0, 121, 0, 122, 0, 0, 0,
	0, 123, 242, 0, 243, 0, 124, 125, 126, 127,
	244, 245, 0, 0, 131, 0, 128, 0, 0, 129,
	246, 130, 247, 248, 249, 0, 250, 0, 0, 132,
	0, 133, 134, 0, 136, 135, 0, 251, 0, 137,
	0, 0, 138, 0, 0, 139, 0, 140, 141, 142,
	144, 252, 143, 0, 145, 146, 148, 147, 0, 0,
	0, 253, 149, 254, 150, 151, 0, 152, 0, 0,
	153, 0, 0, 154, 255, 0, 155, 0, 256, 156,
	157, 158, 159, 0, 257, 160, 258, 161, 0, 162,
	163, 164, 259, 165, 166, 0, 167, 168, 169, 170,
	171, 173, 174, 172, 175, 176, 177, 0, 178, 0,
	179, 180, 260, 181, 0, 183, 184, 185, 186, 0,
	261, 187, 188, 0, 189, 190, 0, 191, 262, 263,
	192, 0, 198, 193, 194, 182, 195, 197, 264, 196,
	265, 0, 199, 0, 200, 201, 202, 203, 204, 0,
	266, 267, 268, 0, 0, 205, 269, 270, 0, 206,
	207, 208, 209, 87, 0, 210, 211, 212, 0, 213,
	0, 214, 215, 216, 271, 272, 0, 0, 217, 90,
	91, 0, 92, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 93, 94, 95, 223, 224, 225, 226, 96,
	227, 228, 0, 97, 229, 230, 98, 0, 0, 231,
	232, 233, 0, 234, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 104, 105, 0, 0, 106, 107,
	0, 0, 0, 0, 0, 0, 108, 109, 276, 110,
	235, 111, 236, 237, 0, 112, 0, 113, 0, 0,
	0, 114, 115, 0, 116, 0, 0, 0, 238, 117,
	118, 239, 240, 0, 0, 0, 119, 120, 241, 0,
	121, 0, 122, 0, 0, 0, 0, 123, 242, 0,
	243, 0, 124, 125, 126, 127, 244, 245, 0, 0,
	131, 0, 128, 0, 0, 129, 246, 130, 247, 248,
	249, 0, 250, 0, 0, 132, 0, 133, 134, 0,
	136, 135, 0, 251, 0, 137, 0, 0, 138, 0,
	0, 139, 0, 140, 141, 142, 144, 252, 143, 0,
	145, 146, 148, 147, 0, 0, 0, 253, 149, 254,
	150, 151, 0, 152, 0, 493, 153, 0, 0, 154,
	255, 0, 155, 0, 256, 156, 157, 158, 159, 0,
	257, 160, 258, 161, 0, 162, 163, 164, 259, 165,
	166, 0, 167, 168, 169, 170, 171, 173, 174, 172,
	175, 176, 177, 0, 178, 0, 179, 180, 260, 181,
	0, 183, 184, 185, 186, 0, 261, 187, 188, 0,
	189, 190, 0, 191, 262, 263, 192, 0, 198, 193,
	194, 182, 195, 197, 264, 196, 265, 0, 199, 0,
	200, 201, 202, 203, 204, 0, 266, 267, 268, 0,
	0, 205, 269, 270, 0, 206, 207, 208, 209, 87,
	0, 210, 211, 212, 0, 213, 0, 214, 215, 216,
	271, 272, 0, 0, 217, 90, 91, 0, 92, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 93, 94,
	95, 223, 224, 225, 226, 96, 227, 228, 0, 97,
	229, 230, 98, 0, 0, 231, 232, 233, 0, 234,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	104, 105, 0, 0, 106, 107, 0, 0, 0, 0,
	0, 0, 108, 109, 276, 110, 235, 111, 236, 237,
	0, 112, 0, 113, 0, 0, 0, 114, 115, 0,
	116, 0, 0, 0, 238, 117, 118, 239, 240, 0,
	0, 0, 119, 120, 241, 0, 121, 0, 122, 0,
	0, 0, 0, 123, 242, 0, 243, 0, 124, 125,
	126, 127, 788, 245, 0, 0, 131, 0, 128, 0,
	0, 129, 246, 130, 247, 248, 249, 0, 250, 0,
	0, 132, 0, 133, 134, 0, 136, 135, 0, 251,
	0, 137, 0, 0, 138, 0, 0, 139, 0, 140,
	141, 142, 144, 252, 143, 0, 145, 146, 148, 147,
	0, 0, 0, 253, 149, 254, 150, 151, 0, 152,
	0, 493, 153, 0, 0, 154, 255, 0, 155, 0,
	256, 156, 157, 158, 159, 0, 257, 160, 258, 161,
	0, 162, 163, 164, 259, 165, 166, 0, 167, 168,
	169, 170, 171, 173, 174, 172, 175, 176, 177, 0,
	178, 0, 179, 180, 260, 181, 0, 183, 184, 185,
	186, 0, 261, 187, 188, 0, 189, 190, 0, 191,
	262, 263, 192, 0, 198, 193, 194, 182, 195, 197,
	264, 196, 265, 0, 199, 0, 200, 201, 202, 203,
	204, 0, 266, 267, 268, 0, 0, 205, 269, 270,
	0, 206, 207, 208, 209, 87, 0, 210, 211, 212,
	0, 213, 0, 214, 215, 216, 271, 272, 0, 0,
	217, 90, 91, 551, 92, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 93, 94, 95, 223, 224, 225,
	226, 96, 227, 228, 0, 97, 229, 230, 98, 0,
	0, 231, 232, 233, 0, 234, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 104, 105, 0, 0,
	106, 107, 0, 0, 0, 0, 0, 0, 108, 109,
	276, 110, 235, 111, 236, 237, 0, 112, 0, 113,
	0, 0, 0, 114, 115, 0, 116, 0, 0, 0,
	238, 117, 118, 239, 240, 0, 0, 0, 119, 120,
	241, 0, 121, 0, 122, 0, 0, 0, 0, 123,
	242, 0, 243, 0, 124, 125, 126, 127, 244, 245,
	0, 0, 131, 0, 128, 0, 0, 129, 246, 130,
	247, 248, 249, 0, 250, 0, 0, 132, 0, 133,
	134, 0, 136, 135, 0, 251, 0, 137, 0, 0,
	138, 0, 0, 139, 0, 140, 141, 142, 144, 252,
	143, 0, 145, 146, 148, 147, 0, 0, 0, 253,
	149, 254, 150, 151, 0, 152, 0, 0, 153, 0,
	0, 154, 255, 0, 155, 0, 256, 156, 157, 158,
	159, 0, 257, 160, 258, 161, 0, 162, 163, 164,
	259, 165, 166, 0, 167, 168, 169, 170, 171, 173,
	174, 172, 175, 176, 177, 0, 178, 0, 179, 180,
	260, 181, 0, 183, 184, 185, 186, 0, 261, 187,
	188, 0, 189, 190, 0, 191, 262, 263, 192, 0,
	198, 193, 194, 182, 195, 197, 264, 196, 265, 0,
	199, 0, 200, 201, 202, 203, 204, 0, 266, 267,
	268, 0, 0, 205, 269, 270, 0, 206, 207, 208,
	209, 87, 0, 210, 211, 212, 0, 213, 0, 214,
	215, 216, 271, 272, 0, 0, 217, 90, 91, 0,
	92, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 94, 95, 223, 224, 225, 226, 96, 227, 228,
	0, 97, 229, 230, 98, 0, 0, 231, 232, 233,
	0, 234, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 104, 105, 0, 0, 106, 107, 0, 0,
	0, 0, 0, 0, 108, 109, 276, 110, 235, 111,
	236, 237, 0, 112, 0, 113, 0, 0, 0, 114,
	115, 0, 116, 0, 0, 0, 238, 117, 118, 239,
	240, 0, 0, 0, 119, 120, 241, 0, 121, 0,
	122, 0, 0, 0, 0, 123, 242, 0, 243, 0,
	124, 125, 126, 127, 505, 245, 0, 0, 131, 0,
	128, 0, 0, 129, 246, 130, 247, 248, 249, 0,
	250, 0, 0, 132, 0, 133, 134, 0, 136, 135,
	0, 251, 0, 137, 0, 0, 138, 0, 0, 139,
	0, 140, 141, 142, 144, 252, 143, 0, 145, 146,
	148, 147, 0, 0, 0, 253, 149, 254, 150, 151,
	0, 152, 0, 493, 153, 0, 0, 154, 255, 0,
	155, 0, 256, 156, 157, 158, 159, 0, 257, 160,
	258, 161, 0, 162, 163, 164, 259, 165, 166, 0,
	167, 168, 169, 170, 171, 173, 174, 172, 175, 176,
	177, 0, 178, 0, 179, 180, 260, 181, 0, 183,
	184, 185, 186, 0, 261, 187, 188, 0, 189, 190,
	0, 191, 262, 263, 192, 0, 198, 193, 194, 182,
	195, 197, 264, 196, 265, 0, 199, 0, 200, 201,
	202, 203, 204, 0, 266, 267, 268, 0, 0, 205,
	269, 270, 0, 206, 207, 208, 209, 87, 0, 210,
	211, 212, 0, 213, 0, 214, 215, 216, 271, 272,
	0, 0, 217, 90, 91, 0, 92, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 93, 94, 95, 223,
	224, 225, 226, 96, 227, 228, 0, 97, 229, 230,
	98, 0, 0, 231, 232, 233, 0, 234, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 104, 105,
	0, 0, 106, 107, 0, 0, 0, 0, 0, 0,
	108, 109, 276, 110, 235, 111, 236, 237, 0, 112,
	0, 113, 0, 0, 0, 114, 115, 0, 116, 0,
	0, 0, 238, 117, 118, 239, 240, 0, 0, 0,
	119, 120, 241, 0, 121, 0, 122, 0, 0, 0,
	0, 123, 242, 0, 243, 0, 124, 125, 126, 127,
	498, 245, 0, 0, 131, 0, 128, 0, 0, 129,
	246, 130, 247, 248, 249, 0, 250, 0, 0, 132,
	0, 133, 134, 0, 136, 135, 0, 251, 0, 137,
	0, 0, 138, 0, 0, 139, 0, 140, 141, 142,
	144, 252, 143, 0, 145, 146, 148, 147, 0, 0,
	0, 253, 149, 254, 150, 151, 0, 152, 0, 493,
	153, 0, 0, 154, 255, 0, 155, 0, 256, 156,
	157, 158, 159, 0, 257, 160, 258, 161, 0, 162,
	163, 164, 259, 165, 166, 0, 167, 168, 169, 170,
	171, 173, 174, 172, 175, 176, 177, 0, 178, 0,
	179, 180, 260, 181, 0, 183, 184, 185, 186, 0,
	261, 187, 188, 0, 189, 190, 0, 191, 262, 263,
	192, 0, 198, 193, 194, 182, 195, 197, 264, 196,
	265, 0, 199, 0, 200, 201, 202, 203, 204, 0,
	266, 267, 268, 0, 0, 205, 269, 270, 0, 206,
	207, 208, 209, 87, 0, 210, 211, 212, 0, 213,
	0, 214, 215, 216, 271, 272, 0, 0, 217, 90,
	91, 406, 92, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 93, 94, 95, 223, 224, 225, 226, 96,
	227, 228, 0, 97, 229, 230, 98, 0, 0, 231,
	232, 233, 0, 234, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 104, 105, 0, 0, 106, 107,
	0, 0, 0, 0, 0, 0, 108, 109, 276, 110,
	235, 111, 236, 237, 0, 112, 0, 113, 0, 0,
	0, 114, 115, 0, 116, 0, 0, 0, 238, 117,
	118, 239, 240, 0, 0, 0, 119, 120, 241, 0,
	121, 0, 122, 0, 0, 0, 0, 123, 242, 0,
	243, 0, 124, 125, 126, 127, 244, 245, 0, 0,
	131, 0, 128, 0, 0, 129, 246, 130, 247, 248,
	249, 0, 250, 0, 0, 132, 0, 133, 134, 0,
	136, 135, 0, 251, 0, 137, 0, 0, 138, 0,
	0, 139, 0, 140, 141, 142, 144, 252, 143, 0,
	145, 146, 148, 147, 0, 0, 0, 253, 149, 254,
	150, 151, 0, 152, 0, 0, 153, 0, 0, 154,
	255, 0, 155, 0, 256, 156, 157, 158, 159, 0,
	257, 160, 258, 405, 0, 162, 163, 164, 259, 165,
	166, 0, 167, 168, 169, 170, 171, 173, 174, 172,
	175, 176, 177, 0, 178, 0, 179, 180, 260, 181,
	0, 183, 184, 185, 186, 0, 261, 187, 188, 0,
	189, 190, 0, 191, 262, 263, 192, 0, 198, 193,
	194, 182, 195, 197, 264, 196, 265, 0, 199, 0,
	200, 201, 202, 203, 204, 0, 266, 267, 268, 0,
	0, 205, 269, 270, 0, 206, 207, 208, 209, 87,
	0, 210, 211, 212, 0, 213, 0, 214, 215, 216,
	271, 272, 0, 0, 217, 90, 91, 0, 92, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 93, 94,
	95, 223, 224, 225, 226, 96, 227, 228, 0, 97,
	229, 230, 98, 0, 0, 231, 232, 233, 0, 234,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	104, 105, 0, 0, 106, 107, 0, 0, 0, 0,
	0, 0, 108, 109, 276, 110, 235, 111, 236, 237,
	0, 112, 0, 113, 0, 0, 0, 114, 115, 0,
	116, 0, 0, 0, 238, 117, 118, 239, 240, 0,
	0, 0, 119, 120, 241, 0, 121, 0, 122, 0,
	0, 0, 0, 123, 242, 0, 243, 0, 124, 125,
	126, 127, 244, 245, 0, 0, 131, 0, 128, 0,
	0, 129, 246, 130, 247, 248, 249, 0, 250, 0,
	0, 132, 0, 133, 134, 0, 136, 135, 0, 251,
	0, 137, 0, 0, 138, 0, 0, 139, 0, 140,
	141, 142, 144, 252, 143, 0, 145, 146, 148, 147,
	0, 0, 0, 253, 149, 254, 150, 151, 0, 152,
	0, 0, 153, 0, 0, 154, 255, 0, 155, 0,
	256, 156, 157, 158, 159, 0, 257, 160, 258, 161,
	0, 162, 163, 164, 259, 165, 166, 0, 167, 168,
	169, 170, 171, 173, 174, 172, 175, 176, 177, 0,
	178, 0, 179, 180, 260, 181, 0, 183, 184, 185,
	186, 0, 261, 187, 188, 0, 189, 190, 0, 191,
	262, 263, 192, 0, 198, 193, 194, 182, 195, 197,
	264, 196, 265, 0, 199, 0, 200, 201, 202, 203,
	204, 0, 266, 267, 268, 0, 0, 205, 269, 270,
	0, 206, 207, 208, 209, 87, 0, 210, 211, 212,
	0, 213, 0, 214, 215, 216, 271, 272, 0, 0,
	217, 90, 91, 0, 92, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 93, 94, 95, 223, 224, 225,
	226, 96, 227, 228, 0, 97, 229, 230, 98, 0,
	0, 231, 232, 233, 0, 234, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 104, 105, 0, 0,
	106, 107, 0, 0, 0, 0, 0, 0, 108, 109,
	276, 110, 235, 111, 236, 237, 0, 112, 0, 113,
	0, 0, 0, 114, 115, 0, 116, 0, 0, 0,
	238, 117, 118, 239, 240, 0, 0, 0, 119, 120,
	241, 0, 121, 0, 122, 0, 0, 0, 0, 123,
	242, 0, 243, 0, 124, 125, 126, 127, 1346, 245,
	0, 0, 131, 0, 128, 0, 0, 129, 246, 130,
	247, 248, 249, 0, 250, 0, 0, 132, 0, 133,
	134, 0, 136, 135, 0, 251, 0, 137, 0, 0,
	138, 0, 0, 139, 0, 140, 141, 142, 144, 252,
	143, 0, 145, 146, 148, 147, 0, 0, 0, 253,
	149, 254, 150, 151, 0, 152, 0, 0, 153, 0,
	0, 154, 255, 0, 155, 0, 256, 156, 157, 158,
	159, 0, 257, 160, 258, 161, 0, 162, 163, 164,
	259, 165, 166, 0, 167, 168, 169, 170, 171, 173,
	174, 172, 175, 176, 177, 0, 178, 0, 179, 180,
	260, 181, 0, 183, 184, 185, 186, 0, 261, 187,
	188, 0, 189, 190, 0, 191, 262, 263, 192, 0,
	198, 193, 194, 182, 195, 197, 264, 196, 265, 0,
	199, 0, 200, 201, 202, 203, 204, 0, 266, 267,
	268, 0, 0, 205, 269, 270, 0, 206, 207, 208,
	209, 87, 0, 210, 211, 212, 0, 213, 0, 214,
	215, 216, 271, 272, 0, 0, 217, 90, 91, 0,
	92, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 94, 95, 223, 224, 225, 226, 96, 227, 228,
	0, 97, 229, 230, 98, 0, 0, 231, 232, 233,
	0, 234, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 104, 105, 0, 0, 106, 107, 0, 0,
	0, 0, 0, 0, 108, 109, 276, 110, 235, 111,
	236, 237, 0, 112, 0, 113, 0, 0, 0, 114,
	115, 0, 116, 0, 0, 0, 238, 117, 118, 239,
	240, 0, 0, 0, 119, 120, 241, 0, 121, 0,
	122, 0, 0, 0, 0, 123, 242, 0, 243, 0,
	124, 125, 126, 127, 1344, 245, 0, 0, 131, 0,
	128, 0, 0, 129, 246, 130, 247, 248, 249, 0,
	250, 0, 0, 132, 0, 133, 134, 0, 136, 135,
	0, 251, 0, 137, 0, 0, 138, 0, 0, 139,
	0, 140, 141, 142, 144, 252, 143, 0, 145, 146,
	148, 147, 0, 0, 0, 253, 149, 254, 150, 151,
	0, 152, 0, 0, 153, 0, 0, 154, 255, 0,
	155, 0, 256, 156, 157, 158, 159, 0, 257, 160,
	258, 161, 0, 162, 163, 164, 259, 165, 166, 0,
	167, 168, 169, 170, 171, 173, 174, 172, 175, 176,
	177, 0, 178, 0, 179, 180, 260, 181, 0, 183,
	184, 185, 186, 0, 261, 187, 188, 0, 189, 190,
	0, 191, 262, 263, 192, 0, 198, 193, 194, 182,
	195, 197, 264, 196, 265, 0, 199, 0, 200, 201,
	202, 203, 204, 0, 266, 267, 268, 0, 0, 205,
	269, 270, 0, 206, 207, 208, 209, 87, 0, 210,
	211, 212, 0, 213, 0, 214, 215, 216, 271, 272,
	0, 0, 217, 90, 91, 0, 92, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 93, 94, 95, 223,
	224, 225, 226, 96, 227, 228, 0, 97, 229, 230,
	98, 0, 0, 231, 232, 233, 0, 234, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 104, 105,
	0, 0, 106, 107, 0, 0, 0, 0, 0, 0,
	108, 109, 276, 110, 235, 111, 236, 237, 0, 112,
	0, 113, 0, 0, 0, 114, 115, 0, 116, 0,
	0, 0, 238, 117, 118, 239, 240, 0, 0, 0,
	119, 120, 241, 0, 121, 0, 122, 0, 0, 0,
	0, 123, 242, 0, 243, 0, 124, 125, 126, 127,
	1333, 245, 0, 0, 131, 0, 128, 0, 0, 129,
	246, 130, 247, 248, 249, 0, 250, 0, 0, 132,
	0, 133, 134, 0, 136, 135, 0, 251, 0, 137,
	0, 0, 138, 0, 0, 139, 0, 140, 141, 142,
	144, 252, 143, 0, 145, 146, 148, 147, 0, 0,
	0, 253, 149, 254, 150, 151, 0, 152, 0, 0,
	153, 0, 0, 154, 255, 0, 155, 0, 256, 156,
	157, 158, 159, 0, 257, 160, 258, 161, 0, 162,
	163, 164, 259, 165, 166, 0, 167, 168, 169, 170,
	171, 173, 174, 172, 175, 176, 177, 0, 178, 0,
	179, 180, 260, 181, 0, 183, 184, 185, 186, 0,
	261, 187, 188, 0, 189, 190, 0, 191, 262, 263,
	192, 0, 198, 193, 194, 182, 195, 197, 264, 196,
	265, 0, 199, 0, 200, 201, 202, 203, 204, 0,
	266, 267, 268, 0, 0, 205, 269, 270, 0, 206,
	207, 208, 209, 87, 0, 210, 211, 212, 0, 213,
	0, 214, 215, 216, 271, 272, 0, 0, 217, 90,
	91, 0, 92, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 93, 94, 95, 223, 224, 225, 226, 96,
	227, 228, 0, 97, 229, 230, 98, 0, 0, 231,
	232, 233, 0, 234, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 104, 105, 0, 0, 106, 107,
	0, 0, 0, 0, 0, 0, 108, 109, 276, 110,
	235, 111, 236, 237, 0, 112, 0, 113, 0, 0,
	0, 114, 115, 0, 116, 0, 0, 0, 238, 117,
	118, 239, 240, 0, 0, 0, 119, 120, 241, 0,
	121, 0, 122, 0, 0, 0, 0, 123, 242, 0,
	243, 0, 124, 125, 126, 127, 906, 245, 0, 0,
	131, 0, 128, 0, 0, 129, 246, 130, 247, 248,
	249, 0, 250, 0, 0, 132, 0, 133, 134, 0,
	136, 135, 0, 251, 0, 137, 0, 0, 138, 0,
	0, 139, 0, 140, 141, 142, 144, 252, 143, 0,
	145, 146, 148, 147, 0, 0, 0, 253, 149, 254,
	150, 151, 0, 152, 0, 0, 153, 0, 0, 154,
	255, 0, 155, 0, 256, 156, 157, 158, 159, 0,
	257, 160, 258, 161, 0, 162, 163, 164, 259, 165,
	166, 0, 167, 168, 169, 170, 171, 173, 174, 172,
	175, 176, 177, 0, 178, 0, 179, 180, 260, 181,
	0, 183, 184, 185, 186, 0, 261, 187, 188, 0,
	189, 190, 0, 191, 262, 263, 192, 0, 198, 193,
	194, 182, 195, 197, 264, 196, 265, 0, 199, 0,
	200, 201, 202, 203, 204, 0, 266, 267, 268, 0,
	0, 205, 269, 270, 0, 206, 207, 208, 209, 87,
	0, 210, 211, 212, 0, 213, 0, 214, 215, 216,
	271, 272, 0, 0, 217, 90, 91, 0, 92, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 93, 94,
	95, 223, 224, 225, 226, 96, 227, 228, 0, 97,
	229, 230, 98, 0, 0, 231, 232, 233, 0, 234,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	104, 105, 0, 0, 106, 107, 0, 0, 0, 0,
	0, 0, 108, 109, 276, 110, 235, 111, 236, 237,
	0, 112, 0, 113, 0, 0, 0, 114, 115, 0,
	116, 0, 0, 0, 238, 117, 118, 239, 240, 0,
	0, 0, 119, 120, 241, 0, 121, 0, 122, 0,
	0, 0, 0, 123, 242, 0, 243, 0, 124, 125,
	126, 127, 244, 245, 0, 0, 131, 0, 128, 0,
	0, 129, 246, 130, 247, 248, 249, 0, 250, 0,
	0, 132, 0, 133, 134, 0, 136, 135, 0, 251,
	0, 137, 0, 0, 138, 0, 0, 139, 0, 140,
	141, 142, 144, 252, 143, 0, 145, 146, 148, 147,
	0, 0, 0, 253, 149, 254, 150, 151, 0, 152,
	0, 0, 153, 0, 0, 154, 255, 0, 155, 0,
	256, 156, 157, 158, 159, 0, 257, 160, 258, 161,
	0, 162, 163, 164, 259, 165, 166, 0, 167, 168,
	169, 170, 171, 173, 174, 172, 175, 176, 177, 0,
	178, 0, 179, 180, 260, 181, 0, 420, 184, 185,
	186, 0, 261, 187, 188, 0, 189, 190, 0, 191,
	262, 263, 192, 0, 198, 193, 194, 182, 195, 197,
	264, 196, 265, 0, 199, 0, 200, 201, 202, 203,
	204, 0, 266, 267, 268, 0, 0, 205, 269, 270,
	0, 206, 207, 208, 209, 87, 0, 210, 211, 212,
	0, 213, 0, 214, 215, 216, 271, 272, 0, 0,
	217, 90, 91, 0, 92, 218, 219, 220, 221, 222,
	0, 773, 0, 0, 93, 94, 95, 223, 224, 225,
	226, 96, 227, 228, 0, 97, 229, 230, 98, 0,
	0, 231, 232, 233, 0, 234, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 104, 105, 0, 0,
	106, 107, 0, 0, 0, 0, 0, 0, 108, 109,
	276, 110, 235, 111, 236, 237, 0, 112, 0, 113,
	0, 0, 0, 114, 115, 0, 116, 0, 0, 0,
	238, 117, 118, 239, 240, 0, 0, 0, 119, 120,
	241, 0, 121, 0, 122, 0, 0, 0, 0, 123,
	242, 0, 243, 0, 124, 125, 126, 127, 244, 245,
	0, 0, 131, 0, 128, 0, 0, 129, 246, 130,
	247, 248, 249, 0, 250, 0, 0, 132, 0, 133,
	134, 0, 136, 135, 0, 251, 0, 137, 0, 0,
	138, 0, 0, 139, 0, 140, 141, 142, 144, 252,
	143, 0, 145, 146, 148, 147, 0, 0, 0, 253,
	149, 254, 150, 151, 0, 152, 0, 0, 153, 0,
	0, 154, 255, 0, 155, 0, 256, 156, 157, 158,
	159, 0, 257, 160, 258, 161, 0, 162, 163, 164,
	259, 165, 166, 0, 167, 168, 169, 170, 171, 173,
	174, 172, 175, 176, 177, 0, 178, 0, 179, 180,
	260, 181, 0, 183, 184, 185, 186, 0, 261, 187,
	188, 0, 0, 190, 0, 191, 262, 263, 192, 0,
	198, 193, 194, 182, 195, 197, 264, 196, 265, 0,
	199, 0, 200, 201, 202, 203, 204, 0, 266, 267,
	268, 0, 0, 205, 269, 270, 0, 206, 207, 208,
	209, 87, 0, 210, 211, 212, 0, 213, 0, 214,
	215, 216, 271, 272, 0, 0, 217, 90, 91, 0,
	92, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 94, 95, 223, 224, 225, 226, 96, 227, 228,
	0, 97, 229, 230, 98, 0, 0, 231, 232, 233,
	0, 234, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 104, 105, 0, 0, 106, 107, 0, 0,
	0, 0, 0, 0, 108, 109, 276, 110, 235, 111,
	236, 237, 0, 112, 0, 113, 0, 0, 0, 114,
	115, 0, 116, 0, 0, 0, 238, 117, 118, 239,
	240, 0, 0, 0, 119, 120, 241, 0, 121, 0,
	122, 0, 0, 0, 0, 123, 242, 0, 243, 0,
	124, 125, 126, 127, 604, 245, 0, 0, 131, 0,
	128, 0, 0, 129, 246, 130, 247, 248, 249, 0,
	250, 0, 0, 132, 0, 133, 134, 0, 136, 135,
	0, 251, 0, 137, 0, 0, 138, 0, 0, 139,
	0, 140, 141, 142, 144, 252, 143, 0, 145, 146,
	148, 147, 0, 0, 0, 253, 149, 254, 150, 151,
	0, 152, 0, 0, 153, 0, 0, 154, 255, 0,
	155, 0, 256, 156, 157, 158, 159, 0, 257, 160,
	258, 161, 0, 162, 163, 164, 259, 165, 166, 0,
	167, 168, 169, 170, 171, 173, 174, 172, 175, 176,
	177, 0, 178, 0, 179, 180, 260, 181, 0, 183,
	184, 185, 186, 0, 261, 187, 188, 0, 189, 190,
	0, 191, 262, 263, 192, 0, 198, 193, 194, 182,
	195, 197, 264, 196, 265, 0, 199, 0, 200, 201,
	202, 203, 204, 0, 266, 267, 268, 0, 0, 205,
	269, 270, 0, 206, 207, 208, 209, 87, 0, 210,
	211, 212, 0, 213, 0, 214, 215, 216, 271, 272,
	0, 0, 217, 90, 91, 0, 92, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 93, 94, 95, 223,
	224, 225, 226, 96, 227, 228, 0, 97, 229, 230,
	98, 0, 0, 231, 232, 233, 0, 234, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 104, 105,
	0, 0, 106, 107, 0, 0, 0, 0, 0, 0,
	108, 109, 276, 110, 235, 111, 236, 237, 0, 112,
	0, 113, 0, 0, 0, 114, 115, 0, 116, 0,
	0, 0, 238, 117, 118, 239, 240, 0, 0, 0,
	119, 120, 241, 0, 121, 0, 122, 0, 0, 0,
	0, 123, 242, 0, 243, 0, 124, 125, 126, 127,
	599, 245, 0, 0, 131, 0, 128, 0, 0, 129,
	246, 130, 247, 248, 249, 0, 250, 0, 0, 132,
	0, 133, 134, 0, 136, 135, 0, 251, 0, 137,
	0, 0, 138, 0, 0, 139, 0, 140, 141, 142,
	144, 252, 143, 0, 145, 146, 148, 147, 0, 0,
	0, 253, 149, 254, 150, 151, 0, 152, 0, 0,
	153, 0, 0, 154, 255, 0, 155, 0, 256, 156,
	157, 158, 159, 0, 257, 160, 258, 161, 0, 162,
	163, 164, 259, 165, 166, 0, 167, 168, 169, 170,
	171, 173, 174, 172, 175, 176, 177, 0, 178, 0,
	179, 180, 260, 181, 0, 183, 184, 185, 186, 0,
	261, 187, 188, 0, 189, 190, 0, 191, 262, 263,
	192, 0, 198, 193, 194, 182, 195, 197, 264, 196,
	265, 0, 199, 0, 200, 201, 202, 203, 204, 0,
	266, 267, 268, 0, 0, 205, 269, 270, 0, 206,
	207, 208, 209, 87, 0, 210, 211, 212, 0, 213,
	0, 214, 215, 216, 271, 272, 0, 0, 217, 90,
	91, 0, 92, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 93, 94, 95, 223, 224, 225, 226, 96,
	227, 228, 0, 97, 229, 230, 98, 0, 0, 231,
	232, 557, 0, 234, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 104, 105, 0, 0, 106, 107,
	0, 0, 0, 0, 0, 0, 108, 109, 276, 110,
	235, 111, 236, 237, 0, 112, 0, 113, 0, 0,
	0, 114, 115, 0, 116, 0, 0, 0, 238, 117,
	118, 239, 240, 0, 0, 0, 119, 120, 241, 0,
	121, 0, 122, 0, 0, 0, 0, 123, 242, 0,
	243, 0, 124, 125, 126, 127, 244, 245, 0, 0,
	131, 0, 128, 0, 0, 129, 246, 130, 247, 248,
	249, 0, 250, 0, 0, 132, 0, 133, 134, 0,
	136, 135, 0, 251, 0, 137, 0, 0, 138, 0,
	0, 139, 0, 140, 141, 142, 144, 252, 431, 0,
	145, 146, 148, 147, 0, 0, 0, 253, 149, 254,
	150, 151, 0, 152, 0, 0, 153, 0, 0, 154,
	255, 0, 155, 0, 256, 156, 157, 158, 159, 0,
	257, 160, 258, 161, 0, 162, 163, 164, 259, 165,
	166, 0, 167, 168, 169, 170, 171, 173, 174, 172,
	175, 176, 177, 0, 178, 0, 179, 180, 260, 181,
	0, 183, 184, 185, 186, 0, 261, 187, 188, 0,
	189, 190, 0, 191, 262, 263, 192, 0, 198, 193,
	194, 182, 195, 197, 264, 196, 265, 0, 199, 0,
	200, 201, 202, 203, 204, 0, 430, 267, 268, 0,
	0, 426, 269, 270, 0, 206, 207, 208, 209, 87,
	0, 210, 211, 212, 0, 213, 0, 214, 215, 216,
	271, 272, 0, 0, 217, 90, 91, 0, 92, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 93, 94,
	95, 223, 224, 225, 226, 96, 227, 228, 0, 97,
	229, 230, 98, 0, 0, 231, 232, 233, 0, 234,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	104, 105, 0, 0, 106, 107, 0, 0, 0, 0,
	0, 0, 108, 109, 276, 110, 235, 111, 236, 237,
	0, 112, 0, 113, 0, 0, 0, 114, 115, 0,
	116, 0, 0, 0, 238, 117, 118, 239, 240, 0,
	0, 0, 119, 120, 241, 0, 121, 0, 122, 0,
	0, 0, 0, 123, 242, 0, 243, 0, 124, 125,
	126, 127, 244, 245, 0, 0, 131, 0, 128, 0,
	0, 129, 246, 130, 247, 248, 249, 0, 250, 0,
	0, 132, 0, 133, 134, 0, 136, 135, 0, 251,
	0, 137, 0, 0, 138, 0, 0, 139, 0, 140,
	141, 142, 144, 252, 431, 0, 145, 146, 148, 147,
	0, 0, 0, 253, 149, 254, 150, 151, 0, 152,
	0, 0, 153, 0, 0, 154, 255, 0, 155, 0,
	256, 156, 157, 158, 159, 0, 257, 160, 258, 161,
	0, 162, 163, 164, 259, 165, 166, 0, 167, 168,
	169, 170, 171, 173, 174, 172, 175, 176, 177, 0,
	178, 0, 179, 180, 260, 181, 0, 183, 184, 185,
	186, 0, 261, 187, 188, 0, 189, 190, 0, 191,
	262, 263, 192, 0, 198, 193, 194, 182, 195, 197,
	264, 196, 265, 0, 199, 0, 200, 201, 202, 203,
	204, 0, 430, 267, 268, 0, 0, 426, 269, 270,
	0, 206, 207, 208, 209, 87, 0, 210, 211, 212,
	0, 213, 0, 214, 215, 216, 271, 272, 0, 0,
	217, 90, 91, 0, 92, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 93, 94, 95, 223, 224, 225,
	226, 96, 227, 228, 0, 97, 229, 230, 98, 0,
	0, 231, 232, 233, 0, 234, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 104, 105, 0, 0,
	106, 107, 0, 0, 0, 0, 0, 0, 108, 109,
	276, 110, 235, 111, 236, 237, 0, 112, 0, 113,
	0, 0, 0, 114, 115, 0, 116, 0, 0, 0,
	238, 117, 118, 239, 240, 0, 0, 0, 119, 120,
	241, 0, 121, 0, 122, 0, 0, 0, 0, 123,
	242, 0, 243, 0, 124, 125, 126, 127, 535, 245,
	0, 0, 131, 0, 128, 0, 0, 129, 246, 130,
	247, 248, 249, 0, 250, 0, 0, 132, 0, 133,
	134, 0, 136, 135, 0, 251, 0, 137, 0, 0,
	138, 0, 0, 139, 0, 140, 141, 142, 144, 252,
	143, 0, 145, 146, 148, 147, 0, 0, 0, 253,
	149, 254, 150, 151, 0, 152, 0, 0, 153, 0,
	0, 154, 255, 0, 155, 0, 256, 156, 157, 158,
	159, 0, 257, 160, 258, 161, 0, 162, 163, 164,
	259, 165, 166, 0, 167, 168, 169, 170, 171, 173,
	174, 172, 175, 176, 177, 0, 178, 0, 179, 180,
	260, 181, 0, 183, 184, 185, 186, 0, 261, 187,
	188, 0, 189, 190, 0, 191, 262, 263, 192, 0,
	198, 193, 194, 182, 195, 197, 264, 196, 265, 0,
	199, 0, 200, 201, 202, 203, 204, 0, 266, 267,
	268, 0, 0, 205, 269, 270, 0, 206, 207, 208,
	209, 87, 0, 210, 211, 212, 0, 213, 0, 214,
	215, 216, 271, 272, 0, 0, 217, 90, 91, 0,
	92, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 94, 95, 223, 224, 225, 226, 96, 227, 228,
	0, 97, 229, 230, 98, 0, 0, 231, 232, 233,
	0, 234, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 104, 105, 0, 0, 106, 107, 0, 0,
	0, 0, 0, 0, 108, 109, 276, 110, 235, 111,
	236, 237, 0, 112, 0, 113, 0, 0, 0, 114,
	115, 0, 116, 0, 0, 0, 238, 117, 118, 239,
	240, 0, 0, 0, 119, 120, 241, 0, 121, 0,
	122, 0, 0, 0, 0, 123, 242, 0, 243, 0,
	124, 125, 126, 127, 532, 245, 0, 0, 131, 0,
	128, 0, 0, 129, 246, 130, 247, 248, 249, 0,
	250, 0, 0, 132, 0, 133, 134, 0, 136, 135,
	0, 251, 0, 137, 0, 0, 138, 0, 0, 139,
	0, 140, 141, 142, 144, 252, 143, 0, 145, 146,
	148, 147, 0, 0, 0, 253, 149, 254, 150, 151,
	0, 152, 0, 0, 153, 0, 0, 154, 255, 0,
	155, 0, 256, 156, 157, 158, 159, 0, 257, 160,
	258, 161, 0, 162, 163, 164, 259, 165, 166, 0,
	167, 168, 169, 170, 171, 173, 174, 172, 175, 176,
	177, 0, 178, 0, 179, 180, 260, 181, 0, 183,
	184, 185, 186, 0, 261, 187, 188, 0, 189, 190,
	0, 191, 262, 263, 192, 0, 198, 193, 194, 182,
	195, 197, 264, 196, 265, 0, 199, 0, 200, 201,
	202, 203, 204, 0, 266, 267, 268, 0, 0, 205,
	269, 270, 0, 206, 207, 208, 209, 87, 0, 210,
	211, 212, 0, 213, 0, 214, 215, 216, 271, 272,
	0, 0, 217, 90, 91, 0, 92, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 93, 94, 95, 223,
	224, 225, 226, 96, 227, 228, 0, 97, 229, 230,
	98, 0, 0, 231, 232, 233, 0, 234, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 104, 105,
	0, 0, 106, 107, 0, 0, 0, 0, 0, 0,
	108, 109, 276, 110, 235, 111, 236, 237, 0, 112,
	0, 113, 0, 0, 0, 114, 115, 0, 116, 0,
	0, 0, 238, 117, 118, 239, 240, 0, 0, 0,
	119, 120, 241, 0, 121, 0, 122, 0, 0, 0,
	0, 123, 242, 0, 243, 0, 124, 125, 126, 127,
	529, 245, 0, 0, 131, 0, 128, 0, 0, 129,
	246, 130, 247, 248, 249, 0, 250, 0, 0, 132,
	0, 133, 134, 0, 136, 135, 0, 251, 0, 137,
	0, 0, 138, 0, 0, 139, 0, 140, 141, 142,
	144, 252, 143, 0, 145, 146, 148, 147, 0, 0,
	0, 253, 149, 254, 150, 151, 0, 152, 0, 0,
	153, 0, 0, 154, 255, 0, 155, 0, 256, 156,
	157, 158, 159, 0, 257, 160, 258, 161, 0, 162,
	163, 164, 259, 165, 166, 0, 167, 168, 169, 170,
	171, 173, 174, 172, 175, 176, 177, 0, 178, 0,
	179, 180, 260, 181, 0, 183, 184, 185, 186, 0,
	261, 187, 188, 0, 189, 190, 0, 191, 262, 263,
	192, 0, 198, 193, 194, 182, 195, 197, 264, 196,
	265, 0, 199, 0, 200, 201, 202, 203, 204, 0,
	266, 267, 268, 0, 0, 205, 269, 270, 0, 206,
	207, 208, 209, 87, 0, 210, 211, 212, 0, 213,
	0, 214, 215, 216, 271, 272, 0, 0, 217, 90,
	91, 0, 92, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 93, 94, 95, 223, 224, 225, 226, 96,
	227, 228, 0, 97, 229, 230, 98, 0, 0, 231,
	232, 233, 0, 234, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 104, 105, 0, 0, 106, 107,
	0, 0, 0, 0, 0, 0, 108, 109, 276, 110,
	235, 111, 236, 237, 0, 112, 0, 113, 0, 0,
	0, 114, 115, 0, 116, 0, 0, 0, 238, 117,
	118, 239, 240, 0, 0, 0, 119, 120, 241, 0,
	121, 0, 122, 0, 0, 0, 0, 123, 242, 0,
	243, 0, 124, 125, 126, 127, 527, 245, 0, 0,
	131, 0, 128, 0, 0, 129, 246, 130, 247, 248,
	249, 0, 250, 0, 0, 132, 0, 133, 134, 0,
	136, 135, 0, 251, 0, 137, 0, 0, 138, 0,
	0, 139, 0, 140, 141, 142, 144, 252, 143, 0,
	145, 146, 148, 147, 0, 0, 0, 253, 149, 254,
	150, 151, 0, 152, 0, 0, 153, 0, 0, 154,
	255, 0, 155, 0, 256, 156, 157, 158, 159, 0,
	257, 160, 258, 161, 0, 162, 163, 164, 259, 165,
	166, 0, 167, 168, 169, 170, 171, 173, 174, 172,
	175, 176, 177, 0, 178, 0, 179, 180, 260, 181,
	0, 183, 184, 185, 186, 0, 261, 187, 188, 0,
	189, 190, 0, 191, 262, 263, 192, 0, 198, 193,
	194, 182, 195, 197, 264, 196, 265, 0, 199, 0,
	200, 201, 202, 203, 204, 0, 266, 267, 268, 0,
	0, 205, 269, 270, 0, 206, 207, 208, 209, 87,
	0, 210, 211, 212, 0, 213, 0, 214, 215, 216,
	271, 272, 0, 0, 217, 90, 91, 0, 92, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 93, 94,
	95, 223, 224, 225, 226, 96, 227, 228, 0, 97,
	229, 230, 98, 0, 0, 231, 232, 233, 0, 234,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	104, 105, 0, 0, 106, 107, 0, 0, 0, 0,
	0, 0, 108, 109, 276, 110, 235, 111, 236, 237,
	0, 112, 0, 113, 0, 0, 0, 114, 115, 0,
	116, 0, 0, 0, 238, 117, 118, 239, 240, 0,
	0, 0, 119, 120, 241, 0, 121, 0, 122, 0,
	0, 0, 0, 123, 242, 0, 243, 0, 124, 125,
	126, 127, 501, 245, 0, 0, 131, 0, 128, 0,
	0, 129, 246, 130, 247, 248, 249, 0, 250, 0,
	0, 132, 0, 133, 134, 0, 136, 135, 0, 251,
	0, 137, 0, 0, 138, 0, 0, 139, 0, 140,
	141, 142, 144, 252, 143, 0, 145, 146, 148, 147,
	0, 0, 0, 253, 149, 254, 150, 151, 0, 152,
	0, 0, 153, 0, 0, 154, 255, 0, 155, 0,
	256, 156, 157, 158, 159, 0, 257, 160, 258, 161,
	0, 162, 163, 164, 259, 165, 166, 0, 167, 168,
	169, 170, 171, 173, 174, 172, 175, 176, 177, 0,
	178, 0, 179, 180, 260, 181, 0, 183, 184, 185,
	186, 0, 261, 187, 188, 0, 189, 190, 0, 191,
	262, 263, 192, 0, 198, 193, 194, 182, 195, 197,
	264, 196, 265, 0, 199, 0, 200, 201, 202, 203,
	204, 0, 266, 267, 268, 0, 0, 205, 269, 270,
	0, 206, 207, 208, 209, 87, 0, 210, 211, 212,
	0, 213, 0, 214, 215, 216, 271, 272, 0, 0,
	217, 90, 91, 0, 92, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 93, 94, 95, 223, 224, 225,
	226, 96, 227, 228, 0, 97, 229, 230, 98, 0,
	0, 231, 232, 233, 0, 234, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 104, 105, 0, 0,
	106, 107, 0, 0, 0, 0, 0, 0, 108, 109,
	276, 110, 235, 111, 236, 237, 0, 112, 0, 113,
	0, 0, 0, 114, 115, 0, 116, 0, 0, 0,
	238, 117, 118, 239, 240, 0, 0, 0, 119, 120,
	241, 0, 121, 0, 122, 0, 0, 0, 0, 123,
	242, 0, 243, 0, 124, 125, 126, 127, 244, 245,
	0, 0, 131, 0, 128, 0, 0, 129, 246, 130,
	247, 248, 249, 0, 250, 0, 0, 132, 0, 133,
	134, 0, 136, 135, 0, 251, 0, 137, 0, 0,
	138, 0, 0, 139, 0, 140, 141, 142, 144, 252,
	143, 0, 145, 146, 148, 147, 0, 0, 0, 253,
	149, 254, 150, 151, 0, 152, 0, 0, 153, 0,
	0, 154, 255, 0, 155, 0, 256, 156, 157, 158,
	159, 0, 257, 160, 258, 161, 0, 162, 163, 164,
	259, 482, 166, 0, 167, 168, 169, 170, 171, 173,
	174, 172, 175, 176, 177, 0, 178, 0, 179, 180,
	260, 181, 0, 183, 184, 185, 186, 0, 261, 187,
	188, 0, 189, 190, 0, 191, 262, 263, 192, 0,
	198, 193, 194, 182, 195, 197, 264, 196, 265, 0,
	199, 0, 200, 201, 202, 203, 204, 0, 266, 267,
	268, 0, 0, 205, 269, 270, 0, 206, 207, 208,
	209, 87, 0, 210, 211, 212, 0, 213, 0, 214,
	215, 216, 271, 272, 0, 0, 217, 90, 91, 0,
	92, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 94, 95, 223, 224, 225, 226, 96, 227, 228,
	0, 97, 229, 230, 98, 0, 0, 231, 232, 233,
	0, 234, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 104, 105, 0, 0, 106, 107, 0, 0,
	0, 0, 0, 0, 108, 109, 276, 110, 235, 111,
	236, 237, 0, 112, 0, 113, 0, 0, 0, 114,
	115, 0, 116, 0, 0, 0, 238, 117, 118, 239,
	240, 0, 0, 0, 119, 120, 241, 0, 121, 0,
	122, 0, 0, 0, 0, 123, 242, 0, 243, 0,
	124, 125, 126, 127, 244, 245, 0, 0, 131, 0,
	128, 0, 0, 129, 246, 130, 247, 248, 249, 0,
	250, 0, 0, 132, 0, 133, 134, 0, 136, 135,
	0, 251, 0, 137, 0, 0, 423, 0, 0, 139,
	0, 140, 141, 142, 144, 252, 431, 0, 145, 146,
	148, 147, 0, 0, 0, 253, 149, 254, 150, 151,
	0, 152, 0, 0, 153, 0, 0, 154, 255, 0,
	155, 0, 256, 156, 157, 158, 159, 0, 257, 160,
	258, 161, 0, 162, 163, 164, 259, 165, 166, 0,
	167, 168, 169, 170, 171, 173, 174, 172, 175, 176,
	177, 0, 178, 0, 179, 180, 425, 181, 0, 183,
	184, 185, 186, 0, 261, 187, 424, 0, 189, 190,
	0, 191, 262, 263, 192, 0, 198, 193, 194, 182,
	195, 197, 264, 196, 265, 0, 199, 0, 200, 201,
	202, 203, 204, 0, 430, 267, 268, 0, 0, 426,
	269, 270, 0, 206, 207, 208, 209, 87, 0, 210,
	211, 212, 0, 213, 0, 214, 215, 216, 271, 272,
	0, 0, 217, 90, 91, 0, 92, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 93, 94, 95, 223,
	224, 225, 226, 96, 227, 228, 0, 97, 229, 230,
	98, 0, 0, 231, 232, 233, 0, 234, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 104, 105,
	0, 0, 106, 107, 0, 0, 0, 0, 0, 0,
	108, 109, 276, 110, 235, 111, 236, 237, 0, 112,
	0, 113, 0, 0, 0, 114, 115, 0, 116, 0,
	0, 0, 238, 117, 118, 239, 240, 0, 0, 0,
	119, 120, 241, 0, 121, 0, 122, 0, 0, 0,
	0, 123, 242, 0, 243, 0, 124, 125, 126, 127,
	244, 245, 0, 0, 131, 0, 128, 0, 0, 129,
	246, 130, 247, 248, 249, 0, 250, 0, 0, 132,
	0, 133, 134, 0, 136, 135, 0, 251, 0, 137,
	0, 0, 138, 0, 0, 139, 0, 140, 141, 142,
	144, 252, 143, 0, 145, 146, 148, 147, 0, 0,
	0, 253, 149, 254, 150, 151, 0, 152, 0, 0,
	153, 0, 0, 154, 255, 0, 155, 0, 256, 156,
	157, 0, 159, 0, 257, 160, 258, 161, 0, 162,
	0, 164, 259, 165, 166, 0, 167, 168, 169, 170,
	171, 173, 174, 172, 175, 176, 177, 0, 178, 0,
	179, 180, 260, 0, 0, 183, 184, 185, 186, 0,
	261, 187, 188, 0, 189, 190, 0, 191, 262, 263,
	192, 0, 198, 193, 194, 182, 195, 197, 264, 196,
	265, 0, 199, 0, 200, 201, 202, 203, 204, 0,
	266, 267, 268, 0, 0, 205, 269, 270, 0, 206,
	207, 208, 209, 0, 0, 210, 211, 212, 0, 213,
	0, 214, 215, 216, 271, 272, 0, 0, 217, 0,
	0, 0, 0, 218, 219, 220, 221, 930, 931, 0,
	950, 951, 952, 960, 961, 962, 0, 0, 0, 0,
	0, 0, 0, 953, 0, 0, 0, 0, 0, 0,
	933, 930, 931, 964, 950, 951, 952, 960, 961, 962,
	0, 0, 0, 0, 0, 0, 0, 953, 0, 0,
	0, 0, 932, 0, 933, 0, 0, 964, 947, 0,
	0, 930, 931, 0, 950, 951, 952, 960, 961, 962,
	0, 0, 0, 0, 0, 0, 932, 953, 0, 0,
	0, 0, 947, 0, 933, 0, 0, 964, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 932, 938, 0, 0,
	0, 0, 947, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 957, 965, 0, 0,
	0, 938, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 963, 0, 0, 0, 0, 0, 0, 0,
	957, 965, 0, 0, 955, 0, 0, 0, 0, 0,
	948, 938, 0, 0, 0, 0, 963, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 955, 0,
	957, 965, 0, 0, 948, 954, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 955, 954,
	0, 0, 0, 0, 948, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 949, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 954,
	958, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 949, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 958, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 949, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 958, 0, 0, 0, 0, 0,
	0, 956, 0, 0, 944, 945, 946, 0, 943, 940,
	941, 942, 934, 935, 936, 937, 939, 0, 959, 0,
	0, 0, 1961, 0, 0, 956, 0, 0, 944, 945,
	946, 0, 943, 940, 941, 942, 934, 935, 936, 937,
	939, 0, 959, 0, 0, 0, 1956, 0, 0, 0,
	0, 0, 0, 0, 0, 956, 0, 0, 944, 945,
	946, 0, 943, 940, 941, 942, 934, 935, 936, 937,
	939, 0, 959, 0, 930, 931, 1952, 950, 951, 952,
	960, 961, 962, 0, 0, 0, 0, 0, 0, 0,
	953, 0, 0, 0, 0, 0, 0, 933, 930, 931,
	964, 950, 951, 952, 960, 961, 962, 0, 0, 0,
	0, 0, 0, 0, 953, 0, 0, 0, 0, 932,
	0, 933, 0, 0, 964, 947, 0, 0, 930, 931,
	0, 950, 951, 952, 960, 961, 962, 0, 0, 0,
	0, 0, 0, 932, 953, 0, 0, 0, 0, 947,
	0, 933, 0, 0, 964, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 932, 938, 0, 0, 0, 0, 947,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 957, 965, 0, 0, 0, 938, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 963,
	0, 0, 0, 0, 0, 0, 0, 957, 965, 0,
	0, 955, 0, 0, 0, 0, 0, 948, 938, 0,
	0, 0, 0, 963, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 955, 0, 957, 965, 0,
	0, 948, 954, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 963, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 955, 954, 0, 0, 0,
	0, 948, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 949, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 954, 958, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 949,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 958, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 949,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 958, 0, 0, 0, 0, 0, 0, 956, 0,
	0, 944, 945, 946, 0, 943, 940, 941, 942, 934,
	935, 936, 937, 939, 0, 959, 0, 0, 0, 1892,
	0, 0, 956, 0, 0, 944, 945, 946, 0, 943,
	940, 941, 942, 934, 935, 936, 937, 939, 0, 959,
	0, 0, 0, 1870, 0, 0, 0, 0, 0, 0,
	0, 0, 956, 0, 0, 944, 945, 946, 0, 943,
	940, 941, 942, 934, 935, 936, 937, 939, 0, 959,
	0, 930, 931, 1869, 950, 951, 952, 960, 961, 962,
	0, 0, 0, 0, 0, 0, 0, 953, 0, 0,
	0, 0, 0, 0, 933, 930, 931, 964, 950, 951,
	952, 960, 961, 962, 0, 0, 0, 0, 0, 0,
	0, 953, 0, 0, 0, 0, 932, 0, 933, 0,
	0, 964, 947, 0, 0, 930, 931, 0, 950, 951,
	952, 960, 961, 962, 0, 0, 0, 0, 0, 0,
	932, 953, 0, 0, 0, 0, 947, 0, 933, 0,
	0, 964, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	932, 938, 0, 0, 0, 0, 947, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	957, 965, 0, 0, 0, 938, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 0, 0, 0,
	0, 0, 0, 0, 957, 965, 0, 0, 955, 0,
	0, 0, 0, 0, 948, 938, 0, 0, 0, 0,
	963, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 955, 0, 957, 965, 0, 0, 948, 954,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	963, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 955, 954, 0, 0, 0, 0, 948, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 949, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 954, 958, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 949, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 958, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 949, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 958, 0,
	0, 0, 0, 0, 0, 956, 0, 0, 944, 945,
	946, 0, 943, 940, 941, 942, 934, 935, 936, 937,
	939, 0, 959, 0, 0, 0, 1760, 0, 0, 956,
	0, 0, 944, 945, 946, 0, 943, 940, 941, 942,
	934, 935, 936, 937, 939, 0, 959, 0, 0, 0,
	1694, 0, 0, 0, 0, 0, 0, 0, 0, 956,
	0, 0, 944, 945, 946, 0, 943, 940, 941, 942,
	934, 935, 936, 937, 939, 0, 959, 0, 930, 931,
	1678, 950, 951, 952, 960, 961, 962, 0, 0, 0,
	0, 0, 0, 0, 953, 0, 0, 0, 0, 0,
	0, 933, 930, 931, 964, 950, 951, 952, 960, 961,
	962, 0, 0, 0, 0, 0, 0, 0, 953, 0,
	0, 0, 0, 932, 0, 933, 0, 0, 964, 947,
	0, 0, 930, 931, 0, 950, 951, 952, 960, 961,
	962, 0, 0, 0, 0, 0, 0, 932, 953, 0,
	0, 0, 0, 947, 0, 933, 0, 0, 964, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 932, 938, 0,
	0, 0, 0, 947, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 957, 965, 0,
	0, 0, 938, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 963, 0, 0, 0, 0, 0, 0,
	0, 957, 965, 0, 0, 955, 0, 0, 0, 0,
	0, 948, 938, 2101, 0, 0, 0, 963, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 955,
	0, 957, 965, 0, 0, 948, 954, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 963, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 955,
	954, 0, 0, 0, 0, 948, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 949,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	954, 958, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 949, 2100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 958, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 949, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 958, 0, 0, 0, 0,
	0, 0, 956, 0, 0, 944, 945, 946, 0, 943,
	940, 941, 942, 934, 935, 936, 937, 939, 0, 959,
	0, 0, 0, 1254, 0, 0, 956, 0, 0, 944,
	945, 946, 0, 943, 940, 941, 942, 934, 935, 936,
	937, 939, 0, 959, 0, 1470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 956, 0, 0, 944,
	945, 946, 0, 943, 940, 941, 942, 934, 935, 936,
	937, 939, 0, 959, 930, 931, 0, 950, 951, 952,
	960, 961, 962, 0, 0, 0, 0, 0, 0, 0,
	953, 0, 0, 0, 0, 0, 0, 933, 0, 0,
	964, 0, 0, 0, 0, 0, 930, 931, 0, 950,
	951, 952, 960, 961, 962, 0, 0, 0, 0, 932,
	0, 0, 953, 0, 968, 947, 0, 1169, 0, 933,
	930, 931, 964, 950, 951, 952, 960, 961, 962, 0,
	0, 0, 0, 0, 0, 0, 953, 0, 0, 0,
	967, 932, 0, 933, 0, 0, 964, 947, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 938, 932, 1535, 0, 0, 1534,
	0, 947, 0, 0, 0, 1170, 0, 0, 0, 0,
	0, 0, 0, 957, 965, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 938, 0, 0, 963,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 955, 0, 0, 0, 957, 965, 948, 0, 0,
	938, 1503, 1504, 0, 1521, 1522, 1523, 0, 0, 0,
	0, 963, 0, 0, 0, 0, 0, 1838, 0, 957,
	965, 0, 954, 955, 0, 0, 0, 0, 0, 948,
	0, 0, 0, 0, 0, 963, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 955, 0, 0,
	0, 0, 1518, 948, 954, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 949, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 958, 954, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 949, 0, 0,
	0, 1509, 0, 0, 0, 0, 0, 0, 0, 958,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 949, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 958, 0, 0, 1524, 0, 956, 0,
	0, 944, 945, 946, 0, 943, 940, 941, 942, 934,
	935, 936, 937, 939, 1519, 959, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	956, 0, 0, 944, 945, 946, 0, 943, 940, 941,
	942, 934, 935, 936, 937, 939, 0, 959, 0, 0,
	0, 0, 0, 0, 956, 0, 0, 944, 945, 946,
	0, 943, 940, 941, 942, 934, 935, 936, 937, 939,
	0, 959, 930, 931, 0, 950, 951, 952, 960, 961,
	962, 0, 1520, 0, 0, 0, 0, 0, 953, 0,
	0, 0, 0, 0, 0, 933, 930, 931, 964, 950,
	951, 952, 960, 961, 962, 0, 0, 0, 0, 0,
	0, 0, 953, 0, 0, 0, 0, 932, 0, 933,
	0, 0, 964, 947, 0, 0, 0, 0, 930, 931,
	0, 950, 951, 952, 960, 961, 962, 0, 0, 0,
	0, 932, 0, 0, 953, 0, 0, 947, 0, 0,
	0, 933, 0, 0, 964, 0, 0, 0, 1515, 1516,
	1517, 0, 1514, 1511, 1512, 1513, 1505, 1506, 1507, 1508,
	1510, 0, 938, 932, 0, 0, 0, 0, 0, 947,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 957, 965, 0, 0, 0, 938, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 963, 0, 0,
	0, 0, 0, 0, 0, 957, 965, 0, 0, 955,
	0, 0, 0, 0, 0, 948, 0, 0, 938, 0,
	0, 963, 0, 1541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 955, 0, 0, 0, 957, 965, 948,
	954, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 963, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 954, 955, 0, 0, 0, 0,
	0, 948, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 949, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 958, 954, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 949, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 958,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 949,
	0, 0, 1682, 0, 0, 0, 0, 0, 0, 0,
	0, 958, 0, 0, 0, 0, 956, 0, 0, 944,
	945, 946, 0, 943, 940, 941, 942, 934, 935, 936,
	937, 939, 0, 959, 0, 0, 0, 0, 0, 0,
	956, 0, 0, 944, 945, 946, 0, 943, 940, 941,
	942, 934, 935, 936, 937, 939, 0, 959, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 956, 0, 0, 944, 945, 946, 0, 943,
	940, 941, 942, 934, 935, 936, 937, 939, 0, 959,
	930, 931, 0, 950, 951, 952, 960, 961, 962, 0,
	0, 0, 0, 0, 0, 0, 953, 0, 0, 0,
	1536, 0, 0, 933, 930, 931, 964, 950, 951, 952,
	960, 961, 962, 0, 0, 0, 0, 0, 0, 0,
	953, 0, 0, 0, 0, 932, 0, 933, 0, 0,
	964, 947, 0, 0, 930, 931, 0, 950, 951, 952,
	960, 961, 962, 0, 0, 0, 0, 0, 0, 932,
	953, 0, 0, 0, 1494, 947, 0, 933, 0, 0,
	964, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 932,
	938, 0, 0, 0, 0, 947, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 957,
	965, 0, 0, 0, 938, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 963, 0, 0, 0, 0,
	0, 0, 0, 957, 965, 0, 0, 955, 0, 0,
	0, 0, 0, 948, 938, 0, 0, 0, 0, 963,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 955, 0, 957, 965, 0, 0, 948, 954, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 963,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 955, 954, 0, 0, 0, 0, 948, 0, 0,
	0, 0, 0, 0, 1501, 0, 0, 0, 0, 0,
	0, 949, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 954, 958, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 949, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 958, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 949, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 958, 0, 0,
	0, 0, 0, 0, 956, 0, 0, 944, 945, 946,
	0, 943, 940, 941, 942, 934, 935, 936, 937, 939,
	0, 959, 0, 0, 0, 0, 0, 0, 956, 0,
	0, 944, 945, 946, 0, 943, 940, 941, 942, 934,
	935, 936, 937, 939, 0, 959, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 956, 0,
	0, 944, 945, 946, 0, 943, 940, 941, 942, 934,
	935, 936, 937, 939, 0, 959, 930, 931, 0, 950,
	951, 952, 960, 961, 962, 0, 0, 0, 0, 0,
	0, 0, 953, 0, 0, 0, 0, 0, 0, 933,
	930, 931, 964, 950, 951, 952, 960, 961, 962, 0,
	0, 0, 0, 0, 0, 0, 953, 0, 0, 0,
	0, 932, 0, 933, 0, 0, 964, 947, 0, 0,
	930, 931, 0, 950, 951, 952, 960, 961, 962, 0,
	0, 0, 0, 0, 0, 932, 0, 0, 0, 0,
	0, 947, 0, 933, 0, 0, 964, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 932, 938, 0, 0, 0,
	0, 947, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 957, 965, 0, 0, 0,
	938, 0, 0, 0, 0, 1503, 1504, 0, 1521, 1522,
	1523, 963, 0, 0, 0, 0, 0, 0, 0, 957,
	965, 1671, 0, 955, 0, 0, 0, 0, 0, 948,
	938, 0, 0, 0, 0, 963, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 955, 0, 957,
	965, 0, 0, 948, 954, 0, 1518, 0, 0, 0,
	0, 0, 0, 0, 0, 963, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 955, 0, 0,
	0, 0, 0, 948, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 949, 0, 0,
	0, 0, 0, 0, 0, 1509, 0, 0, 0, 958,
	1503, 1504, 0, 1521, 1522, 1523, 0, 0, 0, 0,
	0, 949, 0, 0, 0, 1503, 1504, 0, 1521, 1522,
	1523, 0, 0, 958, 0, 0, 0, 0, 0, 0,
	1524, 1670, 0, 0, 1503, 1504, 0, 1521, 1522, 1523,
	0, 949, 0, 0, 0, 0, 0, 0, 1519, 0,
	0, 1518, 0, 958, 0, 0, 0, 0, 0, 0,
	956, 0, 0, 944, 945, 946, 1518, 943, 940, 941,
	942, 934, 935, 936, 937, 939, 0, 959, 0, 0,
	0, 0, 0, 0, 956, 1518, 0, 944, 945, 946,
	0, 943, 940, 941, 942, 934, 935, 936, 937, 939,
	1509, 959, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 956, 1509, 1520, 944, 945, 946,
	0, 943, 940, 941, 942, 934, 935, 936, 937, 939,
	0, 959, 930, 931, 1509, 950, 951, 952, 960, 961,
	962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1524, 0, 0, 1519, 0, 933, 0, 0, 964, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1519, 1524,
	0, 0, 0, 0, 0, 0, 0, 932, 0, 0,
	0, 0, 0, 947, 0, 0, 0, 1519, 0, 0,
	0, 0, 1515, 1516, 1517, 31, 1514, 1511, 1512, 1513,
	1505, 1506, 1507, 1508, 1510, 0, 32, 56, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 938, 0, 0, 0, 1520, 34, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 957, 965, 0, 0, 1520, 0, 0, 47, 0,
	0, 0, 0, 0, 0, 42, 0, 0, 59, 0,
	0, 0, 46, 43, 0, 0, 0, 0, 0, 955,
	0, 0, 0, 0, 0, 948, 0, 0, 0, 48,
	0, 0, 0, 0, 0, 44, 0, 1515, 1516, 1517,
	0, 1514, 1511, 1512, 1513, 1505, 1506, 1507, 1508, 1510,
	0, 0, 1515, 1516, 1517, 0, 1514, 1511, 1512, 1513,
	1505, 1506, 1507, 1508, 1510, 0, 0, 0, 0, 0,
	0, 1515, 1516, 1517, 0, 1514, 1511, 1512, 1513, 1505,
	1506, 1507, 1508, 1510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 949, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 958, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 45, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 62, 33, 0, 0, 49, 0, 60,
	0, 0, 0, 0, 50, 0, 0, 0, 71, 0,
	0, 0, 0, 53, 55, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 0, 0, 956, 0, 0, 944,
	945, 946, 73, 943, 940, 941, 942, 934, 935, 936,
	937, 939, 0, 959, 0, 0, 0, 0, 63, 0,
	0, 814, 806, 831, 799, 822, 821, 0, 0, 801,
	800, 0, 0, 74, 833, 832, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 0, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 827, 68, 819, 818, 0,
	0, 0, 0, 0, 0, 0, 817, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 816, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 814, 806, 831, 799, 822, 821, 0,
	0, 801, 800, 0, 0, 0, 833, 832, 0, 0,
	0, 809, 808, 810, 811, 812, 0, 830, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 827, 0, 819,
	818, 0, 803, 0, 0, 0, 0, 0, 817, 0,
	0, 0, 0, 0, 820, 0, 0, 0, 807, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 815, 0, 0, 0, 1188, 1186, 1187,
	1190, 1189, 0, 809, 808, 810, 811, 812, 0, 830,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 804, 0, 0, 0, 0, 0, 0, 0, 813,
	805, 0, 0, 0, 803, 0, 0, 0, 0, 835,
	0, 0, 0, 0, 0, 0, 820, 0, 0, 802,
	807, 0, 828, 829, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 815, 834, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 804, 0, 0, 0, 0, 0, 0,
	0, 813, 805, 0, 0, 0, 0, 0, 0, 0,
	0, 835, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 802, 0, 0, 828, 829, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 834,
}
var sqlPact = [...]int{

	27832, -1000, 45, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 664, 15967, 15967, 19585, -1000, -1000, -1000, -1000, -1000,
	-1000, 800, 661, 2205, 5245, 19585, 19585, 19309, 1295, 1295,
	20965, -1000, -1000, 24277, -1000, 4008, 504, 516, 504, 504,
	514, 20965, 19585, 616, 658, 137, -1000, 719, -2, 24001,
	19585, 1414, 43, 17929, 336, 27832, 19033, 23725, 19585, 18757,
	596, 41, 16535, 19585, -1000, 48, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1238, 375, 48, -1000, 1236, 1124, 1123,
	17929, 23449, 23173, 22897, 22621, -1000, 12242, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	785, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 343, 342, -1000, 18481, -1000, 959, -1000, 42,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 957, -1000,
	19585, -1000, -1000, 22345, 22069, 340, 956, -1000, -1000, 595,
	416, 1451, -1000, 51, -1000, -1000, -1000, 1235, -1000, 955,
	1234, 1227, 1226, 1225, 1219, 1214, 415, 873, 485, -1000,
	1213, 956, -1000, 956, -1000, -1000, -1000, 588, 20965, -1000,
	-1000, 17929, -1000, 21793, 19585, 19585, 1139, 21517, -1000, 719,
	-1000, -1000, -1000, 988, 1413, 1413, 1413, 1461, 160, 142,
	137, 32, 19585, -1000, 337, 32, 9271, 9271, -1000, -1000,
	336, -1000, 374, 15115, -1000, 8341, -1000, 911, 1327, 573,
	705, 1325, -82, 777, 774, 1321, 15691, 16535, 41, 40,
	-1000, -1000, -1000, 4945, 15691, 643, 14287, 48, -1000, -1000,
	-1000, 17929, 19585, 19585, 687, 21241, -1000, 1318, 130, 1317,
	-1000, 123, 1314, -1000, 123, 1309, 34, -1000, -1000, -1000,
	-1000, -1000, -1000, 336, 18205, 19585, 1540, 28156, -1000, 10482,
	-1000, -1000, 15967, 1527, 15967, -1000, -1000, 1539, -1000, 10482,
	-1000, 38, 37, 1072, 1081, 12833, 12544, 1375, 1173, -1000,
	-1000, -1000, 49, 5245, 19585, 1246, 15967, 19585, 19585, 19585,
	19585, 19585, 19585, -1000, 1069, -1000, -1000, 19585, 19585, 783,
	-1000, 36, 35, -1000, 20965, -1000, 132, -1000, 333, 1034,
	426, 162, 20689, 426, 1033, -1000, 988, -1000, 935, 1066,
	9576, 10482, 137, -1000, -1000, 137, 137, 10482, -1000, -1000,
	19585, 32, 1538, 19585, 204, -1000, 26370, -1000, -1000, 10482,
	10482, 10482, 10482, 10482, 894, 366, -1000, 332, 315, 6176,
	-1000, -1000, 1657, -1000, -1000, -1000, 165, -1000, -1000, 10482,
	48, -1000, -1000, -1000, -1000, 308, 1689, -1000, 465, -1000,
	-1000, -1000, 423, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1223, 307, 304, -1000, -1000, -1000, -1000, 303,
	302, 301, 299, 298, 296, 293, 291, 290, 287, 286,
	285, 283, 281, 280, 868, -1000, 443, -1000, -1000, 443,
	443, -1000, 267, 267, 268, -1000, -1000, -1000, -1000, 267,
	-1000, -1000, -1000, 410, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 270, 204, -1000, -1000, -1000, 19585, 29, -1000, 27416,
	-1000, 13, 823, -1000, 17377, 1467, 1435, 1389, 17929, 1513,
	-2, 1212, 1490, -2, 1209, 586, 19585, 19585, 585, 584,
	17929, 402, -1000, -1000, -1000, -1000, -1000, 19585, -1000, -1000,
	11, -1000, -1000, 1207, 10, -1000, -1000, 432, 96, 1536,
	96, 14563, -1000, 19585, 19585, -1000, 19585, -1000, -1000, 19585,
	-1000, 19585, 19585, -1000, 19585, 149, 16825, 771, 1308, 693,
	-2, 6, -1000, 1528, -1000, -1000, -1000, -1000, 112, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 268, 868, 267, 267,
	267, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 410, -1000,
	-1000, 443, 443, 443, -1000, -1000, 5, 27416, 583, -1000,
	1206, 501, 0, 811, 1105, 838, -1000, -1000, -1000, -1000,
	30, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1625, -1000, -1000, 1655, 30, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1688, 5245, -1000, -1000, -1000,
	19585, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 19585, 19585, 811, 1105, -1000, -1000, 17929, 17101, 1535,
	1306, 874, -1000, 1521, 19585, 951, 1032, -1000, 613, 1299,
	-1000, -1000, -1000, -1000, 27416, -1000, 27416, 751, 1127, -1000,
	1127, 24, -1000, 26346, -1000, 266, -1, 432, 9271, 13995,
	28074, 28156, 19585, 607, 10482, 10482, 10482, 10482, 10482, 10482,
	10482, 10482, 10482, 10482, 10482, 10482, 10482, 10482, 10482, 10482,
	10482, 10482, 10482, 10482, 10482, 10482, 1019, 10482, 579, 10482,
	10482, 10482, 10482, 928, 897, 244, 934, 5245, -1000, -1000,
	692, 692, 692, 27470, 27470, 226, 366, -1000, 10482, -1000,
	8945, 142, 25948, 15, -1000, -1000, -1000, 7082, 440, 27416,
	48, 5850, -1000, 1650, 754, 1256, 1170, 261, 128, 127,
	10482, 10482, 10784, 10784, 10482, 11086, 10482, 10482, 6478, 10482,
	10482, 10482, 10482, 10482, 10482, -1000, 260, -1000, -1000, -1000,
	-1000, 1635, -1000, -1000, 1631, -1000, 604, 603, 1614, 432,
	125, 8341, -1000, 771, 19585, 19585, 19585, -1000, -1000, 1024,
	20413, 1016, 28156, 19585, -1000, 252, 249, 1091, 1085, 19585,
	19585, 20137, 19861, 19585, 798, -2, -1000, 248, -2, -1000,
	246, 19585, 773, -1000, 19585, 19585, 757, 1148, 976, -1000,
	431, 15691, 642, 1205, 19585, 739, 10482, 862, -1000, 13703,
	450, 19585, 739, 106, -1000, -1000, -1000, 397, 19585, -1000,
	-1000, -1000, 130, -1000, 123, 123, -1000, -1000, 17929, -1000,
	-1000, -1000, -1000, -1000, -1000, 28156, 364, 360, -1000, 1612,
	571, -1000, 564, 563, 561, -1000, 245, -1000, 10482, 19585,
	19585, 1105, -1000, -1000, -1000, -1000, 707, -1000, 804, -1000,
	13122, -1000, -1000, -1000, -1000, 9, -1000, -1000, -1000, -1000,
	-1000, -1000, 124, -12, 14, 28156, -1000, -1000, -1000, -1000,
	-1000, 19585, 339, 19585, -2, 19585, -1000, 1681, -2, 19585,
	1292, 1332, 395, 19585, -1000, -1000, -1000, 10482, -1000, -1000,
	-1000, -2, -1000, 1162, -1000, -89, 1268, 1365, -125, 139,
	408, -1000, 13411, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 414, 1220, 1220, 436, 436, 436, 436,
	334, 334, 241, 632, 3627, 3627, 3627, 163, 1059, 1059,
	3627, 3627, 3627, 27470, 27440, 2784, 10482, 10482, 553, 880,
	244, 2784, 10482, 1619, 2784, 2784, 2784, -1000, 1089, -1000,
	-1000, -1000, -1000, 1203, 240, 11086, 11086, -1000, -1000, -1000,
	6176, 11690, -1000, -1000, -1000, -1000, -1000, 239, 10482, -1000,
	25972, -167, -13, -1000, -1000, 10482, -28, -48, -1000, -1000,
	639, -1000, 10482, -1000, -5, 10482, 10482, 10482, 118, 117,
	-1000, 903, 230, 227, 10482, -1000, -1000, 27104, 3658, 116,
	1191, -73, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 113,
	110, 27074, -73, 107, 2356, -1000, 11086, 11086, 11086, 6176,
	220, 105, 26314, -73, 27050, 8643, 8643, 8643, 104, 26738,
	10482, -73, 3606, 3287, 3220, -14, -18, -19, 1604, -20,
	101, 413, 411, 98, 1162, -1000, -1000, -1000, -1000, 548,
	544, 1290, -1000, 1014, -1000, 458, -1000, 702, 10482, 11966,
	219, 218, 792, -1000, 1286, 940, 1280, 940, -1000, 13,
	789, -1000, 10482, -1000, 10482, -1000, 543, -1000, -1000, 539,
	431, 1190, 624, -1000, 925, -1000, -1000, 641, -1000, -1000,
	6780, 27416, -1000, 739, 1398, -24, -1000, -1000, -1000, 432,
	14563, 13995, 8341, -26, -1000, -1000, -1000, 771, -1000, 430,
	1598, 94, 1028, 933, 884, 724, 1595, 27416, 9, 9,
	-1000, -1000, -1000, -1000, -1000, 19585, 1141, -1000, 17101, 217,
	19585, 215, -1000, 214, -1000, -1000, 213, 19585, 1077, 395,
	16259, -1000, 426, -1000, 93, 1158, 1458, -1000, 13995, 1118,
	1117, 13995, 1071, 898, 898, 898, -1000, 210, 197, 408,
	4331, 10482, 17653, 914, 73, 92, 1268, 10482, 2784, 2784,
	10482, 11086, 11086, -1000, 2784, -1000, -1000, -1000, -1000, -1000,
	1188, 209, 10482, 28156, 27665, 27545, -37, -1000, 8015, 8,
	-1000, 10482, -1000, 25635, -1000, -1000, 284, 1298, -1000, 10482,
	26706, 91, 7713, -1000, 26682, -7, -7, -1000, 1676, -1000,
	14839, 437, 919, 25605, 28074, 28156, -1000, 10482, -1000, -1000,
	1183, 10482, -1000, 28074, 28156, 11086, 11086, 11086, 11086, 11086,
	11086, 11086, 11086, 11086, 11086, 11086, 11086, 11086, 11086, 11086,
	11086, 11086, 11086, 11086, 1061, 11086, 1593, 1593, 1593, 1,
	7387, -1000, 1187, 1183, 10482, 10482, 28156, 90, 87, 86,
	-1000, 10482, -73, 10482, 10482, 10482, -1000, -1000, -1000, 82,
	-1000, 1584, -1000, -1000, -1000, -1000, 1158, 19585, 19585, 19585,
	1274, -1000, 2058, -1000, 25581, -49, -1000, 328, 1410, 10482,
	-1000, -1000, 203, 11966, 19585, -1000, 1101, 1119, 477, 19585,
	-1000, 19585, -1000, 19585, 19585, 19585, -58, -59, 19585, 19585,
	-1000, 15691, 600, 201, -1000, -10, -1000, -1000, 223, -2,
	739, -1000, -34, -1000, 396, -1000, 358, 355, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 80, -1000, -1000, 1143,
	-1000, 11966, 194, 19585, 17101, 1519, 11966, 950, 1083, 395,
	16259, -1000, 613, -1000, 434, 10482, 10482, 1268, 13995, 13995,
	1184, 1098, 13995, -1000, -1000, -1000, -1000, 354, 369, 353,
	12242, 17653, -1000, 1580, 1104, -60, -1000, -1000, 19585, 192,
	-1000, 408, 538, 2784, 26471, 3415, 10482, 28156, 27782, -65,
	10482, 10482, -1000, -66, -1000, 10482, 352, 27416, -1000, -1000,
	-1000, 27416, 10482, 1662, 10482, 78, 77, 75, -1000, -1000,
	-1000, 24553, 10482, 74, -1000, 71, 68, 27416, 1187, 27416,
	-1000, -1000, 525, 525, 1593, 1593, 1593, 1593, 282, 282,
	1029, 2117, 710, 710, 710, 996, 509, 509, 710, 710,
	710, 1180, 1080, 188, 27684, 10482, -71, -1000, -1000, -1000,
	27416, 27416, 65, -1000, -1000, -1000, -73, 2901, 25268, 25238,
	-1000, 63, 434, -1000, -1000, -1000, 19585, -1000, 19585, -1000,
	19585, 19585, 1174, 1008, -1000, -1000, 1084, 187, 11086, 19585,
	-1000, 821, 11966, 1406, 48, 19585, 1406, 25214, 5850, -72,
	-79, 997, -1000, 984, 10482, -1000, 28156, 940, 940, -1000,
	537, 530, 529, 511, -1000, -1000, -57, 15415, 1670, 1343,
	19585, 1388, -1000, -1000, 186, -1000, -1000, -1000, 882, -80,
	11966, -84, 61, -2, -85, 19585, -1000, 395, 16259, -1000,
	1332, -1000, 19585, 27416, -73, -1000, 1184, -1000, 185, 10482,
	13995, -1000, -125, -1000, -90, -1000, 408, -92, -1000, 345,
	-153, -1000, 389, -1000, 408, 182, 19585, 17653, 10482, 10482,
	27782, -97, -1000, 2784, 2784, -1000, 24901, -1000, 27416, -1000,
	26682, -1000, -1000, -1000, 876, -1000, 24871, -1000, -1000, -1000,
	-1000, 11086, 1176, 181, 28156, 24847, -1000, -1000, 10482, -1000,
	-1000, -1000, -1000, -1000, 1592, -1000, -1000, 19585, 998, -1000,
	-1000, 10482, 27684, 180, 1141, 179, -1000, -1000, -1000, -1000,
	-1000, -1000, 1410, -5, -1000, 784, -1000, -1000, 27416, 1407,
	-1000, -1000, 19585, 19585, 176, 175, -1000, 174, 48, -99,
	-1000, 387, 574, -103, 19585, -1000, -1000, 5545, 19585, 821,
	-115, -1000, 1141, -1000, 821, 171, 16259, -1000, 1077, -67,
	-1000, 1518, -1000, 19585, 27416, -1000, 408, -1000, 1574, 17653,
	149, -1000, 1104, -1000, 4642, 17653, 19585, -116, -1000, 2784,
	2784, -1000, -1000, 59, 919, 1425, -1000, 27650, 11086, 28156,
	-120, -1000, 3989, -1000, -1000, 1271, 3851, 1055, 19585, -1000,
	19585, 1406, 57, 19585, 462, 19585, -1000, -1000, 10482, 10482,
	10482, 1670, -1000, -1000, 1663, 656, -1000, 432, -1000, 169,
	1141, 821, -1000, 1141, 11966, -1000, 1083, 19585, 168, -122,
	17653, -1000, -1000, 335, -1000, -1000, 1572, -1000, -126, -1000,
	-1000, 767, 10482, 27650, -127, -1000, -1000, 1260, -1000, 931,
	787, 56, -128, -1000, -1000, 162, -1000, 10482, -1000, -133,
	-135, -7, -1000, -1000, 14563, -1000, 19585, -1000, 1141, -1000,
	-139, -1000, -1000, -1000, -1000, -1000, 408, 205, -1000, 55,
	10180, 10180, -73, -1000, 19585, -1000, 945, 942, 690, -1000,
	-1000, -1000, -1000, -1000, 1055, 27416, -1000, -1000, 54, -121,
	-145, -1000, 821, 17653, -1000, -1000, -1000, -1000, 11388, 970,
	708, 26002, -1000, -1000, -1000, 1352, -1000, 469, 943, 943,
	931, 1662, -1000, 920, 1141, -1000, 1548, -1000, -1000, -1000,
	-1000, -1000, -1000, 1557, -1000, -1000, 1082, -1000, -1000, -1000,
	-1000, -1000, -1000, 9878, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1950, 1948, 1487, 1672, 1944, 1942, 1634, 1941, 1939,
	1937, 1930, 1929, 1928, 115, 1622, 1609, 22, 1607, 1926,
	113, 1923, 1922, 1920, 111, 1918, 1917, 1916, 1911, 91,
	1910, 1908, 1595, 1542, 1500, 1496, 1907, 1901, 109, 1900,
	21, 1899, 89, 1897, 61, 153, 2409, 148, 1892, 1891,
	1890, 20, 131, 90, 1889, 127, 1886, 1885, 57, 39,
	32, 15, 1884, 125, 144, 931, 36, 1883, 1880, 149,
	1879, 19, 28, 2072, 166, 160, 137, 136, 1876, 1875,
	1874, 1872, 59, 1859, 8, 1851, 1847, 14, 60, 31,
	1846, 38, 23, 1843, 1842, 145, 1841, 88, 122, 1446,
	65, 142, 119, 1835, 114, 10, 98, 1834, 1832, 146,
	43, 1826, 49, 97, 156, 1822, 75, 169, 86, 41,
	82, 133, 1819, 1818, 1817, 94, 1815, 118, 87, 1811,
	1802, 93, 1801, 152, 151, 1800, 1798, 140, 1796, 1795,
	1794, 162, 1792, 1788, 164, 1786, 13, 56, 81, 12,
	1459, 1442, 124, 55, 40, 30, 1785, 1237, 872, 1128,
	52, 101, 72, 66, 102, 69, 73, 159, 29, 1783,
	1781, 134, 1780, 1779, 1778, 1776, 1775, 96, 1773, 1772,
	85, 157, 16, 3, 18, 121, 42, 103, 105, 150,
	163, 139, 1771, 108, 135, 58, 132, 1770, 1768, 1617,
	141, 1764, 1762, 1761, 1556, 1480, 1333, 756, 1759, 1758,
	790, 361, 1755, 1753, 67, 1750, 138, 1745, 1744, 155,
	223, 99, 1741, 53, 104, 117, 1739, 129, 64, 0,
	126, 123, 1738, 143, 95, 1737, 1736, 1734, 1732, 37,
	2, 9, 5, 6, 4, 27, 26, 1731, 1730, 147,
	24, 76, 1729, 161, 1728, 1727, 1726, 50, 1723, 17,
	1720, 11, 1719, 1717, 7, 1, 1707, 1702, 154, 1701,
	120, 1700, 1533, 1699, 158, 1696, 1695, 1554, 44, 106,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 53, 53, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 50, 50, 55, 55, 55, 57, 57, 54, 54,
	49, 49, 5, 5, 227, 227, 228, 228, 39, 39,
	43, 43, 40, 41, 41, 42, 42, 6, 6, 6,
	7, 7, 7, 7, 7, 7, 14, 15, 15, 15,
	15, 15, 15, 15, 15, 101, 101, 100, 100, 103,
	103, 16, 16, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 195, 195, 194, 19,
	169, 169, 20, 20, 20, 20, 21, 126, 126, 22,
	22, 22, 22, 23, 28, 268, 268, 268, 272, 272,
	273, 273, 274, 274, 274, 274, 274, 274, 274, 270,
	270, 27, 31, 31, 31, 31, 31, 145, 141, 141,
	143, 143, 143, 143, 64, 140, 140, 140, 140, 142,
	142, 142, 142, 220, 219, 219, 225, 225, 225, 79,
	79, 79, 79, 79, 80, 80, 80, 218, 218, 218,
	218, 226, 226, 226, 226, 226, 226, 81, 81, 81,
	224, 224, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 18, 269, 269, 271, 271, 33,
	33, 34, 34, 35, 35, 35, 35, 10, 10, 11,
	11, 82, 82, 83, 83, 148, 148, 148, 148, 84,
	84, 56, 56, 56, 147, 237, 237, 238, 238, 238,
	238, 238, 238, 239, 239, 239, 239, 239, 239, 239,
	235, 235, 236, 233, 233, 234, 234, 234, 234, 275,
	275, 146, 146, 87, 87, 242, 242, 242, 242, 240,
	240, 240, 240, 240, 243, 241, 244, 244, 244, 244,
	244, 181, 181, 181, 37, 12, 62, 62, 13, 9,
	9, 130, 130, 91, 91, 186, 186, 186, 72, 72,
	51, 51, 51, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 131, 131, 132, 132, 25, 30,
	36, 36, 36, 36, 36, 277, 277, 68, 68, 68,
	68, 69, 69, 144, 144, 144, 144, 144, 63, 8,
	8, 58, 58, 59, 59, 60, 60, 61, 61, 278,
	278, 24, 24, 24, 75, 75, 137, 137, 137, 139,
	139, 138, 138, 138, 116, 116, 116, 38, 96, 96,
	105, 105, 106, 106, 192, 107, 107, 29, 29, 46,
	46, 44, 44, 44, 44, 44, 44, 45, 45, 47,
	47, 47, 47, 47, 47, 47, 250, 250, 250, 253,
	253, 249, 251, 251, 252, 252, 276, 276, 117, 117,
	117, 86, 85, 85, 89, 89, 88, 90, 90, 185,
	114, 114, 114, 114, 133, 134, 134, 135, 135, 136,
	136, 113, 113, 165, 165, 48, 48, 95, 95, 97,
	97, 155, 155, 155, 156, 156, 154, 154, 154, 154,
	187, 187, 187, 187, 187, 187, 187, 187, 266, 266,
	266, 267, 267, 184, 184, 188, 188, 188, 188, 188,
	188, 182, 182, 182, 182, 183, 183, 193, 193, 120,
	120, 120, 120, 118, 118, 119, 119, 189, 189, 189,
	189, 115, 115, 190, 190, 190, 149, 149, 196, 196,
	196, 214, 214, 94, 94, 94, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 198, 198, 198, 198, 200, 200, 200, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 213, 213, 213, 213, 213, 201, 201,
	208, 208, 209, 209, 210, 211, 202, 202, 203, 203,
	204, 205, 212, 212, 212, 212, 216, 216, 206, 206,
	206, 206, 206, 207, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 128, 128,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 159, 159, 159, 159, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 245, 245, 245,
	245, 245, 245, 245, 247, 247, 248, 248, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 254, 254, 255, 255, 257,
	257, 258, 258, 259, 260, 260, 260, 261, 262, 262,
	256, 256, 263, 263, 263, 264, 264, 265, 265, 265,
	265, 265, 171, 171, 171, 172, 172, 173, 179, 179,
	179, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 70, 70, 70,
	70, 70, 102, 102, 168, 168, 166, 166, 166, 170,
	170, 121, 121, 215, 215, 215, 215, 215, 215, 215,
	122, 122, 122, 129, 123, 123, 124, 124, 124, 124,
	124, 124, 162, 163, 125, 125, 125, 164, 164, 174,
	178, 178, 177, 176, 176, 175, 175, 152, 152, 153,
	153, 151, 150, 110, 110, 109, 109, 108, 108, 279,
	279, 180, 180, 111, 111, 112, 104, 104, 191, 191,
	191, 191, 98, 98, 77, 77, 99, 99, 73, 73,
	76, 76, 74, 74, 74, 74, 92, 92, 93, 93,
	71, 71, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 217, 217, 217, 167, 65, 65, 65,
	66, 66, 67, 67, 222, 222, 222, 223, 223, 223,
	223, 221, 221, 221, 221, 221, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	2, 0, 7, 6, 1, 1, 1, 3, 3, 0,
	2, 0, 2, 1, 3, 5, 0, 4, 6, 7,
	1, 1, 1, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 4, 6, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 5,
	3, 0, 1, 1, 1, 1, 3, 3, 0, 2,
	3, 2, 3, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 2, 3, 6, 3, 1, 5, 2, 1,
	1, 1, 3, 3, 2, 3, 3, 3, 3, 1,
	3, 3, 2, 1, 1, 3, 1, 1, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 2, 2, 2, 4, 2, 4, 4, 4,
	4, 4, 4, 4, 2, 3, 4, 3, 3, 4,
	4, 2, 5, 5, 2, 2, 0, 2, 0, 6,
	6, 5, 5, 4, 12, 4, 12, 7, 10, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 3, 2, 0, 3, 1, 2,
	2, 3, 6, 2, 1, 1, 2, 4, 2, 5,
	7, 8, 5, 3, 1, 4, 6, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 5, 2, 0, 6, 11,
	14, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 6, 8,
	8, 10, 8, 10, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 1, 3, 3, 0, 3, 8,
	11, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 6, 1, 3, 1, 4, 2, 8,
	5, 4, 3, 0, 2, 2, 0, 8, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 1, 1, 8,
	8, 1, 2, 4, 4, 4, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 3, 1, 3, 2,
	2, 2, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 3, 0, 2, 0, 2, 3, 3, 0, 1,
	3, 3, 5, 1, 1, 3, 2, 4, 4, 0,
	7, 4, 6, 3, 1, 5, 6, 9, 0, 2,
	3, 1, 3, 2, 0, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 1, 1, 3, 4, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 4, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 2, 1,
	3, 1, 1, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 4, 1, 1, 1, 5, 1,
	3, 1, 3, 1, 1, 1, 1, 6, 6, 4,
	4, 4, 4, 4, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 4, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 3, 5, 4, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 3, 1, 3, 3, 3, 2, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 0, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 2, 2, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 1, 1, 2, 2, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -35, -36, -25, -27, -37,
	-38, 23, 34, 222, 65, -8, -9, -10, -11, -12,
	-13, -252, 93, 101, 123, 204, 100, 86, 117, 225,
	232, -44, -46, 241, -145, 242, 35, 251, 59, 96,
	227, 220, 221, 276, 67, -250, -47, -45, 324, 299,
	305, 236, -48, 260, 291, 327, 260, 132, 79, 294,
	-268, -99, 260, 79, -74, -65, 317, 4, -229, -231,
	20, 21, 23, 33, 34, 35, 40, 44, 47, 58,
	59, 60, 62, 64, 65, 66, 69, 70, 77, 78,
	80, 82, 86, 88, 92, 93, 95, 100, 101, 107,
	108, 111, 113, 118, 123, 124, 125, 126, 133, 136,
	138, 131, 146, 148, 149, 152, 151, 156, 159, 162,
	164, 165, 166, 169, 167, 171, 172, 174, 173, 179,
	181, 182, 184, 187, 190, 193, 196, 197, 198, 199,
	202, 204, 206, 207, 208, 210, 211, 213, 214, 215,
	216, 217, 220, 218, 219, 221, 222, 223, 225, 227,
	228, 230, 252, 232, 233, 234, 235, 238, 239, 241,
	242, 244, 247, 250, 251, 253, 256, 254, 249, 259,
	261, 262, 263, 264, 265, 272, 276, 277, 278, 279,
	282, 283, 284, 286, 288, 289, 290, 295, 300, 301,
	302, 303, 28, 36, 37, 38, 39, 41, 42, 45,
	46, 50, 51, 52, 54, 81, 83, 84, 99, 102,
	103, 109, 119, 121, 127, 128, 137, 139, 140, 141,
	143, 154, 168, 178, 180, 191, 195, 201, 203, 209,
	229, 237, 245, 246, 255, 257, 267, 268, 269, 273,
	274, 291, 292, -268, -73, -65, 79, 88, 136, 284,
	283, 79, 132, 260, 294, -17, 324, -29, -7, -15,
	-4, -24, -38, -14, -32, -18, -33, -34, -35, -16,
	23, -221, 4, -229, -231, -230, -232, 56, 68, 116,
	135, 129, 145, 147, 155, 157, 170, 192, 194, 226,
	243, 22, 24, 25, 26, 27, 29, 30, 31, 32,
	43, 48, 49, 53, 55, 57, 63, 67, 71, 72,
	73, 74, 75, 76, 85, 87, 89, 90, 91, 94,
	96, 98, 104, 105, 106, 112, 114, 115, 117, 120,
	122, 130, 132, 134, 142, 144, 150, 153, 158, 160,
	161, 175, 176, 177, 183, 185, 186, 188, 189, 200,
	205, 212, 224, 236, 240, 248, 258, 260, 266, 270,
	271, 275, 280, 281, 285, 287, 293, 294, 296, 297,
	298, 299, -65, -65, -65, 204, 22, -272, 22, -273,
	-274, 67, 93, 117, 236, 136, 88, 283, -272, -69,
	232, -65, -141, 159, 239, 229, 272, -142, -140, -220,
	267, 169, -100, -65, 4, 22, 79, 58, 80, 118,
	132, 133, 63, 64, 149, 261, 267, 272, 67, 286,
	263, -277, 272, 272, -277, -277, -68, 272, 270, -69,
	-220, -276, 260, 260, 285, 294, -130, 79, 281, -45,
	-47, -46, -88, -89, 280, 142, 98, 189, -44, -46,
	-250, -253, 210, -249, -65, -253, -85, -86, 22, 90,
	328, -189, -73, 186, -112, 324, -3, -189, 127, -73,
	-76, 127, -73, -65, -189, 127, 270, 328, -99, -92,
	-65, -151, -150, 326, 115, 115, 324, -109, -110, -150,
	-151, 115, 144, 144, -190, -189, -65, 127, -77, 127,
	-76, -101, 127, -100, -101, 127, -195, -194, -223, 4,
	-229, -231, -230, 291, 260, 132, -169, 324, -126, 324,
	-65, 22, 185, 328, 185, -65, -141, 52, -141, 324,
	-143, -63, -64, 146, 206, 270, 309, 115, 303, -81,
	5, 85, -103, 326, 115, -269, 185, 115, 115, 115,
	115, 115, 115, 303, 146, 206, 252, 260, 294, 115,
	-144, -63, -64, -144, 270, -69, -115, -189, -100, 127,
	-65, -100, 132, -65, 127, -88, -89, -114, -133, -134,
	158, 183, -117, 22, 90, -117, -117, 44, 325, 325,
	328, -253, -93, 324, -104, -191, -157, 317, -159, 315,
	316, 321, 175, 304, -171, -161, -174, 99, 229, 324,
	-73, -160, 329, 9, -247, -46, 29, -172, -173, 48,
	-65, 7, 8, 5, 6, -71, -198, -167, -207, 275,
	104, 177, -245, -246, 4, -229, -222, -199, -209, -203,
	-206, 143, 56, 72, 75, 73, 76, 240, 285, 49,
	28, 102, 103, 195, 201, 257, 273, 274, 127, 178,
	128, 54, 119, 154, 92, 37, 39, 41, 42, 50,
	51, 81, 83, 84, 109, 137, 139, 140, 141, 180,
	209, 245, 255, 268, 269, 292, -230, -210, -211, -204,
	-205, -212, -104, -112, 317, -73, 324, -111, -180, -157,
	85, -53, 218, -52, 21, 23, 93, 289, 99, 249,
	264, 233, 249, 264, 233, 218, 99, 329, 218, 218,
	99, -227, -224, 9, -223, 5, -74, 328, -221, 317,
	-228, -227, 253, 325, -98, -73, -110, -190, -75, -73,
	-75, 241, -65, 30, 99, -55, 328, 47, 223, 99,
	-55, 328, 99, -55, 99, 325, 328, -189, 127, -76,
	30, -168, -196, -197, -199, -208, -202, -206, -207, 40,
	46, 45, 265, 168, 237, 246, 38, 184, 138, 137,
	139, 140, 141, 245, 37, 209, 109, 92, 84, 83,
	180, 42, 41, -210, -211, -204, -205, 81, 268, 269,
	143, 39, 51, 50, 292, 255, -102, -157, -268, -274,
	-268, 30, -102, 328, 328, 156, -80, 162, 174, 124,
	-219, 85, -225, -218, -181, 9, 275, 104, 185, -224,
	8, 316, -217, 7, 315, -219, 85, 70, -226, 5,
	4, -167, -181, 85, 159, -207, 326, -221, -220, -271,
	112, -268, -220, -220, -220, -220, -220, -65, 156, -220,
	-220, 260, 132, 328, 328, -69, -55, 328, 324, -87,
	175, -251, 299, -87, 324, -66, 127, -65, -251, 175,
	-114, -134, -133, -135, -157, 22, -157, -159, -45, -45,
	-45, -90, -185, -157, -249, 30, -92, -95, 328, 115,
	10, 11, 55, 33, 315, 316, 317, 318, 110, 319,
	312, 313, 314, 311, 307, 308, 309, 61, 163, 231,
	13, 14, 15, 26, 188, 157, 304, 129, 243, 321,
	16, 17, 18, 145, 36, 130, -70, 30, 4, -78,
	-157, -157, -157, -157, -157, 194, -108, -152, 322, -46,
	324, -46, -157, -102, 7, -46, -166, 322, -175, -157,
	-109, 324, 5, 324, 5, -254, 300, 112, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 203, -216, 295, -216, -216,
	-200, 324, -200, -201, 324, -200, 301, 305, 324, -95,
	-73, 328, 325, 328, 270, -131, 63, 57, -147, 127,
	57, -233, -65, 63, -234, 53, 281, 205, 114, -131,
	63, -131, 63, 63, -189, 33, -29, 115, 33, -29,
	115, 270, -76, -65, 270, 270, -189, -193, 306, -65,
	-193, 328, 115, 325, 328, -149, 297, -137, -29, 324,
	85, 30, -137, -105, -106, -192, -107, -73, 324, -65,
	-65, -76, -77, -100, -101, -101, -17, -194, 99, -20,
	-29, -24, -38, -14, 325, 328, -94, 29, -127, 324,
	302, 166, 82, 125, 165, -128, 235, 325, 328, 270,
	115, 272, 325, -64, -63, -79, 208, 247, 219, 238,
	328, 8, 7, 7, -221, -270, -65, -73, -76, -64,
	-63, -189, -82, -92, -83, -65, -148, -147, -235, -236,
	-233, 132, 281, 105, 30, 99, -62, 199, 30, 185,
	175, -58, 262, 99, -136, 229, 230, 328, -51, 31,
	89, 324, 325, -149, -191, -97, -187, 322, -189, -73,
	-46, -188, 324, -214, -196, -213, 214, 215, 213, 217,
	216, -196, -100, 267, -157, -157, -157, -157, -157, -157,
	-157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
	-157, -157, -157, -157, -157, -157, 157, 129, 243, 36,
	130, -157, 270, -157, -157, -157, -157, 167, 175, 177,
	275, 104, 282, 90, 181, -279, 258, 32, -164, -46,
	324, -179, 27, 248, 22, -221, -171, 229, 324, -152,
	-157, -153, -102, 325, 325, 328, -102, -170, 323, -166,
	-178, -177, 296, 325, -102, 293, 22, 90, 317, 7,
	-127, -255, 107, 120, 324, 325, 325, -157, -157, -121,
	-215, -102, 4, 302, 166, 82, 125, 165, 235, -121,
	-122, -157, -102, -123, -158, -159, 315, 316, 321, 324,
	229, -124, -157, -102, -157, 43, 153, 271, -125, -157,
	115, -102, -157, -157, -157, -102, -102, -102, 324, 7,
	7, 267, 267, 7, -149, 325, -180, -52, -73, -65,
	-65, 175, -147, 127, -57, 175, -196, -65, 324, 324,
	148, 148, -65, -65, 127, -65, 127, -65, -65, -53,
	218, -29, 324, -29, 324, -65, 218, -65, -73, 218,
	-39, 126, 181, -42, 299, -227, 253, 115, -73, -116,
	224, -157, -116, -139, 185, -98, 291, -65, -116, -96,
	328, 115, 309, -98, -55, -55, -55, -189, -196, 322,
	322, 7, 270, 270, 270, 270, 324, -157, -270, -270,
	-63, 279, 60, 208, -225, 328, 325, 325, 328, -66,
	132, -66, -29, -100, 5, -29, -73, 99, -59, 95,
	-278, 309, -65, -185, -20, -113, 120, -193, 328, 68,
	-120, 147, 170, 116, 155, 226, 135, 7, 101, -154,
	329, 324, -184, 305, -46, -188, -187, 303, -157, -157,
	270, -279, 258, -164, -157, 167, 177, 275, 104, 282,
	90, 181, 115, 324, -158, -158, -102, -161, 324, -102,
	323, 332, 325, -157, 323, 323, 328, -176, -177, 94,
	-157, -89, 328, -88, -157, -102, -102, 325, 325, -260,
	193, 324, 324, -157, 30, 328, 325, 115, 325, 325,
	-129, 200, 325, 10, 11, 315, 316, 317, 318, 110,
	319, 312, 313, 314, 311, 307, 308, 309, 61, 163,
	231, 13, 14, 15, 145, 130, -158, -158, -158, -102,
	324, 325, -162, -163, 115, 112, 30, -125, -125, -125,
	325, 115, -102, 328, 328, 328, 325, 325, 325, 7,
	325, 328, 325, 303, 303, 325, -113, 270, 270, 99,
	175, 288, -237, -234, -157, -91, -186, -65, -248, 324,
	-245, -246, -71, 324, 324, -50, 93, 241, -132, 99,
	-55, 99, -55, 270, -131, 63, -102, -102, 270, 270,
	-42, 115, 259, 187, 253, -104, 176, -116, 62, 325,
	-149, -106, -97, -180, 325, 323, 7, 7, 325, 166,
	125, 165, -128, 165, -128, -128, 7, -65, -84, 131,
	-148, 324, -66, 324, 324, -87, 324, -65, -60, 152,
	-278, -224, -251, 325, -165, 122, 44, -187, 147, 147,
	-187, -120, 147, -118, 192, -118, -118, -266, 324, -17,
	324, -184, -221, 322, 330, -102, -183, -182, 30, -65,
	190, 325, -157, -157, -158, -158, 115, 324, -157, -168,
	26, 26, 325, -102, 325, 328, -153, -157, 325, -166,
	96, -157, 266, 325, 293, -89, -89, -89, 5, -261,
	-65, 324, 297, -88, 325, -214, -196, -157, -162, -157,
	-214, -196, -158, -158, -158, -158, -158, -158, -158, -158,
	-158, -158, -158, -158, -158, -158, -158, -158, -158, -158,
	-158, 90, 175, 181, -158, 328, -102, 325, -163, -162,
	-157, -157, -196, 325, 325, 325, -102, -157, -157, -157,
	325, 7, -165, -65, -65, -147, 99, -238, 63, -239,
	55, 105, 67, 175, 177, 281, 205, 53, 85, 212,
	325, 325, 328, -72, -109, 55, -72, -157, 324, -91,
	-92, 175, 85, 175, 85, 78, 277, -65, -65, -73,
	-65, -65, 325, 325, -65, -73, -228, 267, 324, -138,
	324, 185, -29, -116, 309, 323, 323, 325, 130, -91,
	324, -92, -82, 30, -91, 185, -61, 151, -278, -224,
	-58, -257, 298, -157, -102, -187, -187, -119, 287, 185,
	147, -187, 323, 325, -267, 7, 323, -195, -183, 7,
	-156, -155, 113, 173, 325, -65, 324, -184, 26, 26,
	-157, -168, 325, -157, -157, 325, -157, 323, -157, 5,
	-157, 325, 325, 325, -262, -65, -157, 325, 325, 325,
	-163, 115, 90, 181, 324, -157, 325, 325, 328, 325,
	325, 325, -257, -147, -65, -100, -65, 105, 127, 177,
	148, 324, -158, -73, -146, -275, 66, 256, -186, -51,
	-100, -51, 325, -102, 325, 325, 177, 177, -157, -196,
	-55, -55, 270, 270, 270, 270, -160, -71, -65, -41,
	-40, 5, 91, -92, 63, -112, -46, 324, 196, 325,
	-91, 325, 325, -29, 325, -73, -278, -224, -59, -258,
	-259, -65, -119, 324, -157, -187, -154, 325, 328, -184,
	325, 323, 328, 331, 309, -184, 324, -92, -182, -157,
	-157, 325, 325, -89, -256, 198, 325, -158, 115, 324,
	-168, 325, -157, -239, -66, 175, -157, -67, 324, -84,
	324, -72, -89, 212, -54, 55, -65, -65, 324, 324,
	324, 328, 325, -43, 309, 283, 176, 325, -65, -65,
	-146, 325, -84, -146, 324, -224, -60, 328, 30, -92,
	-184, 7, -183, -17, -155, -221, 322, -183, -92, 325,
	325, -89, 44, -158, -168, 325, 325, 99, 325, -242,
	164, -65, -92, -51, 325, -73, -49, 287, -100, -102,
	-102, -102, -40, 5, 241, -149, 324, -84, -146, -84,
	-91, -61, -259, -261, 325, -182, 323, 7, 325, -263,
	207, 230, -102, 325, 105, -240, -243, -241, 185, 116,
	197, 244, 325, 325, -87, -157, 325, 325, -89, -105,
	-92, -84, 325, -184, 323, 325, -264, -265, 36, 278,
	70, -157, -264, -65, -241, 185, -243, 185, 283, 88,
	-242, 325, -149, 325, -146, -183, -265, 202, 111, 229,
	202, 111, -244, 172, 223, 47, 241, -244, -240, -56,
	47, 223, -84, 26, 20, 177, 85, -265,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 0, 0, 0, 0, 80, 81, 82, 83, 84,
	85, 0, 0, 425, 0, 0, 0, 0, 0, 0,
	0, 397, -2, 0, 156, 0, 346, 0, 346, 346,
	350, 0, 0, 427, 312, 424, -2, 435, 0, 0,
	0, 433, 411, 0, 0, -2, 0, 0, 0, 0,
	0, 135, 0, 956, 886, 892, 893, 917, 918, 919,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
	1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
	1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
	1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
	1117, 1118, 1119, 0, 0, 888, 956, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	0, 224, 931, 932, 933, 934, 935, 1120, 1121, 1122,
	1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
	1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142,
	1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152,
	1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162,
	1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172,
	1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
	1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
	1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
	1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
	1213, 1214, 121, 128, 129, 1008, 131, 0, 138, 139,
	140, 142, 143, 144, 145, 146, 147, 148, 0, 339,
	1030, 352, 152, 985, 1035, 1107, 1052, 159, 169, 0,
	1113, -2, 173, 97, 202, 203, 204, 0, 206, 226,
	0, 0, 0, 0, 0, 214, 0, 0, 0, 221,
	0, 357, 345, 357, 342, 343, 344, 347, 0, 338,
	151, 0, 426, 0, 0, 0, 0, 0, 311, -2,
	407, 408, -2, 0, 430, 430, 430, 0, 0, 408,
	0, 416, 1012, 419, 899, 417, 0, 0, 432, 431,
	0, 412, 507, 0, 455, 0, 2, 0, 1091, 507,
	0, 1091, 891, 0, 0, 1091, 0, 0, 136, 137,
	896, 894, 895, 0, 0, 0, 0, 889, 865, 863,
	864, 0, 0, 0, 0, 513, 87, 1091, 55, 1091,
	884, 55, 1091, 95, 55, 1091, 0, 116, 118, 927,
	928, 929, 930, 1118, 0, 0, 0, 0, 126, 0,
	130, 132, 0, 0, 0, 351, 153, 1080, 155, 0,
	158, 160, 161, 0, 0, 0, 0, 0, 0, 172,
	197, 198, 98, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 217, 218, 0, 0, 0,
	340, 353, 354, 341, 0, 349, 55, 511, 284, 1091,
	423, 284, 921, 423, 1091, -2, 0, 403, 442, 443,
	0, 0, 0, 428, 429, 0, 0, 0, 399, 400,
	0, 418, 0, 0, 458, 876, 880, 881, 610, 0,
	0, 0, 0, 0, 0, 702, 704, 1085, 1107, 0,
	706, 707, 0, 709, 711, 712, 0, 715, 716, 856,
	888, 902, 903, 904, 905, 0, 0, 908, 0, 910,
	911, 912, 756, 725, -2, -2, 900, 542, 543, 544,
	545, -2, 1120, 729, 731, 733, 734, 735, 736, 0,
	1069, 1086, 1087, 1103, 1104, 1112, 1116, 1117, 1091, 1100,
	1092, 1081, 1089, 1098, 961, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 926, 572, 573, 578,
	579, 581, 458, 456, 508, 509, 0, 0, 873, 871,
	872, 32, 335, 34, 0, 335, 335, 0, 0, 0,
	0, 233, 0, 0, 235, 0, 0, 0, 0, 0,
	0, 498, 64, 65, 200, 201, 887, 0, 861, 862,
	498, 66, 77, 0, 0, 882, 866, 517, 0, 374,
	0, 0, 514, 0, 0, 89, 0, 53, 54, 0,
	91, 0, 0, 93, 0, 425, 0, 0, 1091, 0,
	425, 0, 814, 525, 526, 527, 528, 529, 607, 532,
	533, 534, 535, 536, 537, 538, 539, 540, 541, 549,
	550, 551, 552, 553, 554, 555, 569, 0, 548, 548,
	548, 561, 562, 570, 571, 576, 577, 588, 589, 591,
	593, 587, 587, 587, 584, 585, 0, 812, 0, 141,
	0, 0, 0, 0, 0, 0, 164, 184, 185, 186,
	165, 167, 174, 176, 177, 178, 187, 188, 189, 190,
	301, 0, 303, 913, 0, 166, 168, 170, 171, 191,
	192, 193, 194, 195, 196, 0, 0, 99, 205, 207,
	0, 225, 208, 209, 210, 211, 212, 213, 216, 219,
	220, 0, 0, 0, 0, 348, 304, 0, 242, 0,
	0, 307, 422, 0, 0, 0, 1091, 920, 362, 0,
	406, 440, 441, 444, 447, 448, 445, 610, 413, 414,
	415, 436, 437, 322, 420, 0, 0, 517, 0, 0,
	0, 0, 0, 0, 791, 792, 793, 794, 795, 796,
	799, 800, 797, 798, 801, 802, 803, 0, 0, 0,
	804, 805, 806, 0, 0, 808, 0, 810, 0, 0,
	0, 0, 0, 0, 870, 0, 0, 0, 879, 807,
	615, 616, 617, 639, 640, 0, 703, 867, 860, 705,
	0, -2, 812, 0, 708, 713, 714, 0, 0, 855,
	-2, 0, 907, 0, 607, 758, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 835, 841, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 575, 586, 583, 582,
	559, 0, 558, 556, 0, 560, 0, 0, 0, 517,
	0, 0, 875, 0, 0, 0, 0, 334, 36, 1091,
	0, 57, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 231, 0, 0, 232,
	0, 0, 0, 890, 0, 0, 0, 69, 0, 897,
	76, 0, 0, 0, 0, 386, 0, 386, 376, 0,
	0, 0, 386, 389, 390, 392, 393, 0, 0, 515,
	88, 885, 55, 96, 55, 55, 102, 117, 0, 119,
	122, 123, 124, 125, 120, 0, 518, 520, 530, 0,
	594, 595, 596, 597, 598, 599, 608, 127, 0, 0,
	0, 0, 157, 162, 163, 358, 0, 181, 0, 183,
	0, 302, 915, 914, 100, 227, 149, 222, 223, 355,
	356, 512, 0, 0, 241, 896, 243, 245, 246, 247,
	248, 921, 0, 921, 0, 0, 305, 0, 0, 0,
	0, 364, 370, 0, 446, 449, 450, 0, 439, 320,
	321, 425, 898, 452, 877, 498, 459, 0, 469, 507,
	484, 474, 0, 611, 521, 522, 563, 564, 565, 566,
	567, 612, 613, 0, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, -2, -2, -2, 631, 632, 633,
	-2, -2, -2, 637, 638, -2, 809, 811, 0, 870,
	0, -2, 0, 647, -2, -2, -2, 651, 0, 653,
	656, 658, 660, 0, 0, 0, 0, 869, 670, 847,
	0, 0, 788, 789, 790, 878, 655, 0, 0, 868,
	859, 0, 0, -2, 710, 0, 0, 0, 818, 819,
	854, 850, 0, 717, 435, 0, 0, 0, 0, 0,
	916, 766, 0, 0, 0, 730, 732, 0, 0, 0,
	0, 822, -2, -2, -2, -2, -2, -2, -2, 0,
	0, 812, 832, 0, 0, 673, 0, 0, 0, 0,
	1107, 0, 812, 840, 0, 0, 0, 0, 0, 812,
	0, 846, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 452, 510, 874, 35, 324, 0,
	0, 0, 38, 1091, 46, 0, 256, 0, 0, 0,
	0, 0, 337, 47, 1091, 55, 1091, 55, 48, 33,
	335, 229, 0, 230, 0, 328, 0, 323, 326, 0,
	76, 0, 0, 63, 0, 67, 78, 0, 883, 86,
	0, 516, 371, 386, 0, 0, 378, 375, 373, 517,
	0, 0, 0, 0, 90, 92, 94, 0, 815, 0,
	0, 0, 0, 0, 0, 0, 0, 813, 133, 134,
	154, 179, 180, 182, 175, 0, 250, 283, 0, 0,
	921, 0, 239, 284, 306, 308, 0, 0, 366, 370,
	0, 369, 423, 438, 0, 454, 0, 457, 0, 0,
	0, 0, 0, 504, 504, 504, 502, 478, 425, 484,
	0, 0, 496, 0, -2, 474, 0, 0, -2, -2,
	0, 0, 0, 671, -2, 652, 654, 657, 659, 661,
	0, 0, 0, 0, 0, 0, 0, 672, 0, 0,
	857, 860, -2, 813, 816, 817, 0, 0, 851, 0,
	0, 0, 0, 434, 435, 435, 435, 723, 0, 724,
	0, 0, 0, 0, 0, 0, 739, 0, 740, 741,
	0, 0, 742, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 676, 677, 678, 0,
	0, 743, 838, 839, 0, 0, 0, 0, 0, 0,
	748, 0, 845, 0, 0, 0, 752, 753, 754, 0,
	546, 0, 568, 590, 592, 580, 454, 0, 0, 0,
	0, 56, 254, 273, 0, 0, 313, 319, 319, 0,
	726, 727, 0, 0, 0, 40, 0, 0, 0, 0,
	44, 0, 50, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 79, 384, 385, 372, 383, 0,
	386, 391, 388, 394, 0, 523, 0, 0, 531, 600,
	601, 602, 603, 604, 605, 606, 0, 150, 237, 0,
	244, 0, 0, 0, 242, 0, 0, 0, 368, 370,
	0, 361, 362, 421, 760, 0, 0, 460, 0, 0,
	0, 0, 0, 499, 503, 500, 501, 0, 0, 0,
	0, 496, 466, 0, 0, 0, 473, 495, 0, 494,
	483, -2, 614, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 848, 0, 783, 0, 0, 859, -2, 820,
	849, 853, 0, 718, 0, 0, 0, 0, 909, 764,
	765, 769, 0, 0, 728, 0, 0, 821, 831, 833,
	674, 675, 679, 680, 681, 682, 683, 684, 685, 686,
	687, 688, -2, -2, -2, 692, 693, 694, -2, -2,
	-2, 0, 0, 0, 834, 0, 0, 786, 836, 837,
	842, 843, 0, 745, 746, 747, 844, 0, 0, 0,
	574, 0, 760, 330, 332, 37, 0, 255, 0, 258,
	0, 0, 0, 0, 264, 265, 0, 0, 0, 0,
	275, 282, 0, 322, 901, 0, 322, 0, 0, 0,
	0, 0, 52, 0, 0, 336, 0, 55, 55, 325,
	0, 0, 0, 0, 329, 327, 68, 0, 0, 0,
	0, 0, 377, 387, 0, 524, 519, 609, 0, 0,
	0, 0, 0, 0, 0, 0, 359, 370, 0, 363,
	364, 409, 0, 453, 451, 486, 0, 488, 0, 0,
	0, 490, 469, 479, 0, 481, 484, 0, 471, 0,
	0, 464, 0, 463, 484, 492, 0, 0, 0, 0,
	-2, 0, 664, -2, -2, 782, 813, 858, 852, 906,
	435, 719, 721, 722, 771, 768, 0, 755, 737, 738,
	830, 0, 0, 0, 0, 813, 785, 744, 0, 750,
	751, 547, 410, 39, 0, 259, 260, 921, 0, 263,
	266, 0, 268, 923, 250, 0, 279, 280, 314, 315,
	318, 316, 319, 435, 277, 0, 41, 42, 51, 59,
	43, 49, 0, 0, 0, 0, 497, 0, 0, 0,
	73, 71, 0, 0, 0, 395, 396, 0, 0, 282,
	0, 272, 250, 240, 282, 0, 0, 365, 366, 759,
	761, 0, 487, 0, 506, 489, 484, 480, 0, 496,
	425, 467, 0, 468, 0, 496, 0, 0, 475, -2,
	-2, 665, 784, 0, 435, 0, 757, -2, 0, 0,
	0, 787, 0, 257, 261, 0, 0, 288, 0, 276,
	0, 322, 0, 0, 61, 0, 331, 333, 0, 0,
	0, 0, 75, 72, 0, 0, 380, 517, 382, 0,
	250, 282, 238, 250, 0, 367, 368, 0, 0, 0,
	0, 482, 476, 0, 465, 461, 0, 472, 0, 493,
	720, 774, 0, -2, 0, 700, 749, 0, 267, 293,
	0, 0, 0, 317, 718, 284, 45, 0, 58, 0,
	0, 435, 74, 70, 0, 381, 0, 270, 250, 309,
	0, 360, 762, 763, 505, 470, 484, 0, 491, 0,
	0, 0, 770, 701, 0, 269, 289, 290, 0, 285,
	286, 287, 922, 281, 288, 60, 234, 236, 0, 517,
	0, 271, 282, 496, 462, 767, 772, 775, -2, 1055,
	953, 0, 773, 262, 291, 0, 292, 0, 0, 0,
	293, 0, 379, 253, 250, 477, 0, 777, 778, 779,
	780, 781, 294, 0, 297, 298, 0, 295, 278, 249,
	251, 252, 310, 0, 296, 299, 300, 776,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 313, 3, 319, 314, 3,
	324, 325, 317, 315, 328, 316, 326, 318, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 332, 327,
	307, 309, 308, 3, 329, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 322, 3, 323, 312, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 330, 311, 331, 321,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 310,
	57650, 320, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:785
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:791
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:797
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:823
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:843
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:857
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:864
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:869
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:893
		{
			return unimplemented(sqllex)
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:916
		{
			return unimplemented(sqllex)
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:919
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:926
		{
			return unimplemented(sqllex)
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:929
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:945
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = nil
		}
	case 53:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = DropCascade
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = DropRestrict
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = DropDefault
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:983
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:988
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:989
		{
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:992
		{
			return unimplemented(sqllex)
		}
	case 61:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:993
		{
		}
	case 62:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:997
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1001
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 69:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 70:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 71:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.str = ""
		}
	case 72:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 75:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 76:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1066
		{
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{ /* SKIP DOC */
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1323
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[2].union.unresolvedName(), SetMode: SetModeReset}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1392
		{
			return unimplemented(sqllex)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1401
		{ /* SKIP DOC */
		}
	case 157:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1464
		{
			return unimplemented(sqllex)
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1470
		{
			return unimplemented(sqllex)
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = Low
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = Normal
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = High
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1579
		{
			return unimplemented(sqllex)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1580
		{
			return unimplemented(sqllex)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1581
		{
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1601
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1669
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1673
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1685
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 229:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1716
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1720
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1726
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1730
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1734
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1738
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1755
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1809
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1813
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = DropDefault
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1823
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].union.unresolvedName().String())}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 284:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2023
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2028
		{
			return unimplemented(sqllex)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2029
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2030
		{
			return unimplemented(sqllex)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2031
		{
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2038
		{
			return unimplemented(sqllex)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2039
		{
			return unimplemented(sqllex)
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2040
		{
			return unimplemented(sqllex)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2041
		{
			return unimplemented(sqllex)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2042
		{
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2045
		{
			return unimplemented(sqllex)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2048
		{
			return unimplemented(sqllex)
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2051
		{
			return unimplemented(sqllex)
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2052
		{
			return unimplemented(sqllex)
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2053
		{
			return unimplemented(sqllex)
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2054
		{
			return unimplemented(sqllex)
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2055
		{
			return unimplemented(sqllex)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2087
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = true
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2140
		{
			sqlVAL.union.val = false
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2162
		{
			return unimplemented(sqllex)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2163
		{
			return unimplemented(sqllex)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2166
		{
			return unimplemented(sqllex)
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2167
		{
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = Ascending
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = Descending
		}
	case 322:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 323:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2221
		{
			return unimplemented(sqllex)
		}
	case 333:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2222
		{
			return unimplemented(sqllex)
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = true
		}
	case 335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = false
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2235
		{
		}
	case 337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2236
		{
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2253
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2269
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2278
		{
		}
	case 346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2279
		{
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.str = ""
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 350:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.str = ""
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2301
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.str = ""
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.str = ""
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.str = ""
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.str = ""
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2401
		{
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2402
		{
		}
	case 371:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2442
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2466
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2470
		{
			return unimplemented(sqllex)
		}
	case 383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2478
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 387:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2500
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2501
		{
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2589
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2728
		{
			return unimplemented(sqllex)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2729
		{
			return unimplemented(sqllex)
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2730
		{
			return unimplemented(sqllex)
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2733
		{
			return unimplemented(sqllex)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2734
		{
			return unimplemented(sqllex)
		}
	case 421:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2737
		{
			return unimplemented(sqllex)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2740
		{
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2741
		{
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2744
		{
			return unimplemented(sqllex)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2745
		{
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2748
		{
		}
	case 427:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2749
		{
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = true
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = false
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = false
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = true
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2772
		{
		}
	case 433:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2773
		{
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2811
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2831
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2872
		{
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2873
		{
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2931
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = &From{}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2967
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2985
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3012
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 470:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3029
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = nil
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3090
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3096
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = true
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = false
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.str = astFullJoin
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.str = astLeftJoin
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.str = astRightJoin
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.str = astInnerJoin
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3207
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3208
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3294
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3307
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3308
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3322
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3331
		{
			return unimplemented(sqllex)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3390
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3399
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = nil
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3448
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 569:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3544
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3576
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3615
		{
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3616
		{
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = year
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = month
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = day
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = hour
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = minute
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = month
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = hour
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = minute
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = minute
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = nil
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = second
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3711
		{
			return unimplemented(sqllex)
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3746
		{
			return unimplemented(sqllex)
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3914
		{
			return unimplemented(sqllex)
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3928
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3936
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3940
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3980
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4153
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4206
		{
			return unimplemented(sqllex)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4207
		{
			return unimplemented(sqllex)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4230
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4246
		{
			return unimplemented(sqllex)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4247
		{
			return unimplemented(sqllex)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4251
		{
			return unimplemented(sqllex)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4268
		{
			return unimplemented(sqllex)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4269
		{
			return unimplemented(sqllex)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4270
		{
			return unimplemented(sqllex)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4271
		{
			return unimplemented(sqllex)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4300
		{
			return unimplemented(sqllex)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4344
		{
			return unimplemented(sqllex)
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4345
		{
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = Window(nil)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4380
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.str = ""
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4442
		{
			return unimplemented(sqllex)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4443
		{
			return unimplemented(sqllex)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4444
		{
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4447
		{
			return unimplemented(sqllex)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4448
		{
			return unimplemented(sqllex)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4454
		{
			return unimplemented(sqllex)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4455
		{
			return unimplemented(sqllex)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4456
		{
			return unimplemented(sqllex)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4457
		{
			return unimplemented(sqllex)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4458
		{
			return unimplemented(sqllex)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = Any
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = Some
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = All
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = Plus
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.union.val = Minus
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = Mult
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = Div
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = FloorDiv
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = Mod
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = Bitand
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = Bitor
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4520
		{
			sqlVAL.union.val = Bitxor
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = Bitxor
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = LT
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = GT
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.union.val = EQ
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = LE
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = GE
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = NE
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = Like
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = NotLike
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = ILike
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = NotILike
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4549
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4573
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4583
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4593
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 841:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4677
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 852:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 854:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4758
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4764
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4768
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4781
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4807
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4822
		{
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4823
		{
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4861
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4896
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4912
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4941
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4985
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4995
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4999
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5006
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5021
		{
			return unimplemented(sqllex)
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 909:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = DNull
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5060
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 921:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.str = ""
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5101
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 923:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5105
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
