// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_SCHEMA = 57417
const CURRENT_ROLE = 57418
const CURRENT_TIME = 57419
const CURRENT_TIMESTAMP = 57420
const CURRENT_USER = 57421
const CYCLE = 57422
const DATA = 57423
const DATABASE = 57424
const DATABASES = 57425
const DATE = 57426
const DAY = 57427
const DEC = 57428
const DECIMAL = 57429
const DEFAULT = 57430
const DEALLOCATE = 57431
const DEFERRABLE = 57432
const DELETE = 57433
const DESC = 57434
const DISCARD = 57435
const DISTINCT = 57436
const DO = 57437
const DOUBLE = 57438
const DROP = 57439
const ELSE = 57440
const ENCODING = 57441
const END = 57442
const ESCAPE = 57443
const EXCEPT = 57444
const EXISTS = 57445
const EXECUTE = 57446
const EXPERIMENTAL_FINGERPRINTS = 57447
const EXPLAIN = 57448
const EXTRACT = 57449
const EXTRACT_DURATION = 57450
const FALSE = 57451
const FAMILY = 57452
const FETCH = 57453
const FILTER = 57454
const FIRST = 57455
const FLOAT = 57456
const FLOAT4 = 57457
const FLOAT8 = 57458
const FLOORDIV = 57459
const FOLLOWING = 57460
const FOR = 57461
const FORCE_INDEX = 57462
const FOREIGN = 57463
const FROM = 57464
const FULL = 57465
const GRANT = 57466
const GRANTS = 57467
const GREATEST = 57468
const GROUP = 57469
const GROUPING = 57470
const HAVING = 57471
const HELP = 57472
const HIGH = 57473
const HOUR = 57474
const INCREMENTAL = 57475
const IF = 57476
const IFNULL = 57477
const ILIKE = 57478
const IN = 57479
const INTERLEAVE = 57480
const INDEX = 57481
const INDEXES = 57482
const INITIALLY = 57483
const INNER = 57484
const INSERT = 57485
const INT = 57486
const INT2VECTOR = 57487
const INT2 = 57488
const INT4 = 57489
const INT8 = 57490
const INT64 = 57491
const INTEGER = 57492
const INTERSECT = 57493
const INTERVAL = 57494
const INTO = 57495
const IS = 57496
const ISOLATION = 57497
const JOB = 57498
const JOBS = 57499
const JOIN = 57500
const KEY = 57501
const KEYS = 57502
const KV = 57503
const LATERAL = 57504
const LC_CTYPE = 57505
const LC_COLLATE = 57506
const LEADING = 57507
const LEAST = 57508
const LEFT = 57509
const LEVEL = 57510
const LIKE = 57511
const LIMIT = 57512
const LOAD = 57513
const LOCAL = 57514
const LOCALTIME = 57515
const LOCALTIMESTAMP = 57516
const LOW = 57517
const LSHIFT = 57518
const MATCH = 57519
const MINUTE = 57520
const MONTH = 57521
const NAN = 57522
const NAME = 57523
const NAMES = 57524
const NATURAL = 57525
const NEXT = 57526
const NO = 57527
const NO_INDEX_JOIN = 57528
const NORMAL = 57529
const NOT = 57530
const NOTHING = 57531
const NULL = 57532
const NULLIF = 57533
const NULLS = 57534
const NUMERIC = 57535
const OF = 57536
const OFF = 57537
const OFFSET = 57538
const OID = 57539
const ON = 57540
const ONLY = 57541
const OPTIONS = 57542
const OR = 57543
const ORDER = 57544
const ORDINALITY = 57545
const OUT = 57546
const OUTER = 57547
const OVER = 57548
const OVERLAPS = 57549
const OVERLAY = 57550
const PARENT = 57551
const PARTIAL = 57552
const PARTITION = 57553
const PASSWORD = 57554
const PAUSE = 57555
const PLACING = 57556
const PLANS = 57557
const POSITION = 57558
const PRECEDING = 57559
const PRECISION = 57560
const PREPARE = 57561
const PRIMARY = 57562
const PRIORITY = 57563
const QUERIES = 57564
const QUERY = 57565
const RANGE = 57566
const READ = 57567
const REAL = 57568
const RECURSIVE = 57569
const REF = 57570
const REFERENCES = 57571
const REGCLASS = 57572
const REGPROC = 57573
const REGPROCEDURE = 57574
const REGNAMESPACE = 57575
const REGTYPE = 57576
const RENAME = 57577
const REPEATABLE = 57578
const RELEASE = 57579
const RESET = 57580
const RESTORE = 57581
const RESTRICT = 57582
const RESUME = 57583
const RETURNING = 57584
const REVOKE = 57585
const RIGHT = 57586
const ROLLBACK = 57587
const ROLLUP = 57588
const ROW = 57589
const ROWS = 57590
const RSHIFT = 57591
const SAVEPOINT = 57592
const SCATTER = 57593
const SEARCH = 57594
const SECOND = 57595
const SELECT = 57596
const SEQUENCES = 57597
const SERIAL = 57598
const SERIALIZABLE = 57599
const SESSION = 57600
const SESSIONS = 57601
const SESSION_USER = 57602
const SET = 57603
const SETTING = 57604
const SETTINGS = 57605
const SHOW = 57606
const SIMILAR = 57607
const SIMPLE = 57608
const SMALLINT = 57609
const SMALLSERIAL = 57610
const SNAPSHOT = 57611
const SOME = 57612
const SPLIT = 57613
const SQL = 57614
const START = 57615
const STATUS = 57616
const STDIN = 57617
const STRICT = 57618
const STRING = 57619
const STORING = 57620
const SUBSTRING = 57621
const SYMMETRIC = 57622
const SYSTEM = 57623
const TABLE = 57624
const TABLES = 57625
const TEMP = 57626
const TEMPLATE = 57627
const TEMPORARY = 57628
const TESTING_RANGES = 57629
const TESTING_RELOCATE = 57630
const TEXT = 57631
const THEN = 57632
const TIME = 57633
const TIMESTAMP = 57634
const TIMESTAMPTZ = 57635
const TO = 57636
const TRAILING = 57637
const TRACE = 57638
const TRANSACTION = 57639
const TREAT = 57640
const TRIM = 57641
const TRUE = 57642
const TRUNCATE = 57643
const TYPE = 57644
const UNBOUNDED = 57645
const UNCOMMITTED = 57646
const UNION = 57647
const UNIQUE = 57648
const UNKNOWN = 57649
const UPDATE = 57650
const UPSERT = 57651
const USE = 57652
const USER = 57653
const USERS = 57654
const USING = 57655
const UUID = 57656
const VALID = 57657
const VALIDATE = 57658
const VALUE = 57659
const VALUES = 57660
const VARCHAR = 57661
const VARIADIC = 57662
const VIEW = 57663
const VARYING = 57664
const WHEN = 57665
const WHERE = 57666
const WINDOW = 57667
const WITH = 57668
const WITHIN = 57669
const WITHOUT = 57670
const WRITE = 57671
const YEAR = 57672
const ZONE = 57673
const NOT_LA = 57674
const WITH_LA = 57675
const AS_LA = 57676
const POSTFIXOP = 57677
const UMINUS = 57678
const HELPTOKEN = 57679

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOAD",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6439

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	356, 53,
	-2, 654,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	139, 508,
	-2, 0,
	-1, 61,
	91, 654,
	143, 654,
	308, 654,
	309, 654,
	-2, 0,
	-1, 72,
	102, 629,
	111, 629,
	151, 629,
	170, 629,
	196, 629,
	202, 629,
	305, 629,
	-2, 618,
	-1, 103,
	4, 656,
	20, 656,
	21, 656,
	23, 656,
	28, 656,
	33, 656,
	34, 656,
	35, 656,
	36, 656,
	37, 656,
	38, 656,
	39, 656,
	40, 656,
	41, 656,
	42, 656,
	44, 656,
	45, 656,
	46, 656,
	47, 656,
	48, 656,
	51, 656,
	52, 656,
	53, 656,
	55, 656,
	56, 656,
	60, 656,
	61, 656,
	62, 656,
	64, 656,
	66, 656,
	67, 656,
	68, 656,
	71, 656,
	72, 656,
	80, 656,
	81, 656,
	82, 656,
	83, 656,
	84, 656,
	85, 656,
	86, 656,
	87, 656,
	89, 656,
	91, 656,
	93, 656,
	96, 656,
	97, 656,
	99, 656,
	103, 656,
	104, 656,
	105, 656,
	106, 656,
	107, 656,
	108, 656,
	112, 656,
	113, 656,
	114, 656,
	115, 656,
	116, 656,
	118, 656,
	120, 656,
	125, 656,
	126, 656,
	128, 656,
	130, 656,
	131, 656,
	132, 656,
	133, 656,
	134, 656,
	135, 656,
	138, 656,
	140, 656,
	143, 656,
	144, 656,
	145, 656,
	146, 656,
	147, 656,
	148, 656,
	149, 656,
	150, 656,
	152, 656,
	155, 656,
	156, 656,
	157, 656,
	159, 656,
	160, 656,
	161, 656,
	163, 656,
	164, 656,
	166, 656,
	168, 656,
	171, 656,
	172, 656,
	175, 656,
	177, 656,
	178, 656,
	179, 656,
	180, 656,
	181, 656,
	182, 656,
	184, 656,
	185, 656,
	186, 656,
	187, 656,
	191, 656,
	192, 656,
	193, 656,
	194, 656,
	195, 656,
	197, 656,
	199, 656,
	200, 656,
	203, 656,
	204, 656,
	206, 656,
	208, 656,
	209, 656,
	210, 656,
	211, 656,
	212, 656,
	213, 656,
	215, 656,
	216, 656,
	217, 656,
	218, 656,
	219, 656,
	221, 656,
	222, 656,
	223, 656,
	224, 656,
	225, 656,
	226, 656,
	227, 656,
	228, 656,
	230, 656,
	231, 656,
	232, 656,
	233, 656,
	234, 656,
	235, 656,
	236, 656,
	237, 656,
	238, 656,
	239, 656,
	240, 656,
	241, 656,
	243, 656,
	245, 656,
	246, 656,
	247, 656,
	248, 656,
	250, 656,
	251, 656,
	252, 656,
	253, 656,
	255, 656,
	256, 656,
	257, 656,
	258, 656,
	259, 656,
	261, 656,
	262, 656,
	263, 656,
	264, 656,
	266, 656,
	267, 656,
	268, 656,
	269, 656,
	271, 656,
	272, 656,
	273, 656,
	274, 656,
	275, 656,
	276, 656,
	277, 656,
	278, 656,
	279, 656,
	281, 656,
	283, 656,
	284, 656,
	285, 656,
	286, 656,
	287, 656,
	288, 656,
	289, 656,
	291, 656,
	292, 656,
	293, 656,
	296, 656,
	297, 656,
	298, 656,
	299, 656,
	301, 656,
	302, 656,
	303, 656,
	304, 656,
	307, 656,
	308, 656,
	309, 656,
	310, 656,
	312, 656,
	314, 656,
	315, 656,
	316, 656,
	317, 656,
	318, 656,
	319, 656,
	322, 656,
	327, 656,
	328, 656,
	329, 656,
	330, 656,
	331, 656,
	-2, 0,
	-1, 116,
	102, 628,
	111, 628,
	151, 628,
	170, 628,
	196, 628,
	202, 628,
	305, 628,
	-2, 621,
	-1, 120,
	1, 557,
	155, 557,
	221, 557,
	225, 557,
	355, 557,
	356, 557,
	-2, 0,
	-1, 122,
	1, 557,
	355, 557,
	356, 557,
	-2, 0,
	-1, 123,
	1, 557,
	355, 557,
	356, 557,
	-2, 0,
	-1, 124,
	1, 561,
	355, 561,
	356, 561,
	-2, 0,
	-1, 131,
	4, 662,
	5, 662,
	6, 662,
	7, 662,
	8, 662,
	9, 662,
	20, 662,
	21, 662,
	23, 662,
	28, 662,
	29, 662,
	33, 662,
	34, 662,
	35, 662,
	36, 662,
	37, 662,
	38, 662,
	39, 662,
	40, 662,
	41, 662,
	42, 662,
	44, 662,
	45, 662,
	46, 662,
	47, 662,
	48, 662,
	49, 662,
	50, 662,
	51, 662,
	52, 662,
	53, 662,
	55, 662,
	56, 662,
	58, 662,
	60, 662,
	61, 662,
	62, 662,
	64, 662,
	66, 662,
	67, 662,
	68, 662,
	70, 662,
	71, 662,
	72, 662,
	74, 662,
	75, 662,
	76, 662,
	78, 662,
	79, 662,
	80, 662,
	81, 662,
	82, 662,
	83, 662,
	84, 662,
	85, 662,
	86, 662,
	87, 662,
	89, 662,
	91, 662,
	93, 662,
	96, 662,
	97, 662,
	99, 662,
	103, 662,
	104, 662,
	105, 662,
	106, 662,
	107, 662,
	108, 662,
	109, 662,
	112, 662,
	113, 662,
	114, 662,
	115, 662,
	116, 662,
	118, 662,
	120, 662,
	123, 662,
	125, 662,
	126, 662,
	128, 662,
	130, 662,
	131, 662,
	132, 662,
	133, 662,
	134, 662,
	135, 662,
	136, 662,
	138, 662,
	140, 662,
	142, 662,
	143, 662,
	144, 662,
	145, 662,
	146, 662,
	147, 662,
	148, 662,
	149, 662,
	150, 662,
	152, 662,
	154, 662,
	155, 662,
	156, 662,
	157, 662,
	158, 662,
	159, 662,
	160, 662,
	161, 662,
	163, 662,
	164, 662,
	166, 662,
	167, 662,
	168, 662,
	169, 662,
	171, 662,
	172, 662,
	175, 662,
	177, 662,
	178, 662,
	179, 662,
	180, 662,
	181, 662,
	182, 662,
	183, 662,
	184, 662,
	185, 662,
	186, 662,
	187, 662,
	188, 662,
	190, 662,
	191, 662,
	192, 662,
	193, 662,
	194, 662,
	195, 662,
	197, 662,
	200, 662,
	203, 662,
	204, 662,
	205, 662,
	206, 662,
	207, 662,
	208, 662,
	209, 662,
	210, 662,
	211, 662,
	212, 662,
	213, 662,
	215, 662,
	216, 662,
	217, 662,
	218, 662,
	219, 662,
	221, 662,
	222, 662,
	223, 662,
	224, 662,
	225, 662,
	226, 662,
	227, 662,
	228, 662,
	230, 662,
	231, 662,
	232, 662,
	233, 662,
	234, 662,
	235, 662,
	236, 662,
	237, 662,
	238, 662,
	239, 662,
	240, 662,
	241, 662,
	243, 662,
	244, 662,
	245, 662,
	246, 662,
	247, 662,
	248, 662,
	250, 662,
	251, 662,
	252, 662,
	253, 662,
	255, 662,
	256, 662,
	257, 662,
	258, 662,
	259, 662,
	260, 662,
	261, 662,
	262, 662,
	263, 662,
	264, 662,
	265, 662,
	266, 662,
	267, 662,
	268, 662,
	269, 662,
	271, 662,
	272, 662,
	273, 662,
	274, 662,
	275, 662,
	276, 662,
	277, 662,
	278, 662,
	279, 662,
	281, 662,
	283, 662,
	284, 662,
	285, 662,
	286, 662,
	287, 662,
	288, 662,
	289, 662,
	291, 662,
	292, 662,
	293, 662,
	296, 662,
	297, 662,
	298, 662,
	299, 662,
	300, 662,
	301, 662,
	302, 662,
	303, 662,
	304, 662,
	307, 662,
	308, 662,
	309, 662,
	310, 662,
	311, 662,
	312, 662,
	314, 662,
	315, 662,
	316, 662,
	317, 662,
	318, 662,
	319, 662,
	322, 662,
	327, 662,
	328, 662,
	329, 662,
	330, 662,
	331, 662,
	332, 662,
	338, 662,
	343, 662,
	344, 662,
	345, 662,
	352, 662,
	358, 662,
	-2, 0,
	-1, 134,
	1, 53,
	356, 53,
	-2, 654,
	-1, 590,
	122, 1249,
	294, 1249,
	337, 1249,
	354, 1249,
	-2, 0,
	-1, 591,
	122, 1202,
	294, 1202,
	337, 1202,
	354, 1202,
	-2, 0,
	-1, 593,
	122, 1307,
	294, 1307,
	337, 1307,
	354, 1307,
	-2, 0,
	-1, 595,
	122, 1328,
	294, 1328,
	337, 1328,
	354, 1328,
	-2, 0,
	-1, 602,
	1, 294,
	355, 294,
	356, 294,
	-2, 1254,
	-1, 628,
	1, 376,
	351, 376,
	353, 376,
	355, 376,
	356, 376,
	-2, 0,
	-1, 629,
	1, 424,
	119, 424,
	351, 424,
	353, 424,
	355, 424,
	356, 424,
	-2, 0,
	-1, 635,
	1, 390,
	351, 390,
	353, 390,
	355, 390,
	356, 390,
	-2, 0,
	-1, 637,
	1, 394,
	351, 394,
	353, 394,
	355, 394,
	356, 394,
	-2, 0,
	-1, 640,
	1, 402,
	351, 402,
	353, 402,
	355, 402,
	356, 402,
	-2, 0,
	-1, 641,
	1, 407,
	351, 407,
	353, 407,
	355, 407,
	356, 407,
	-2, 0,
	-1, 644,
	1, 417,
	351, 417,
	353, 417,
	355, 417,
	356, 417,
	-2, 0,
	-1, 653,
	111, 664,
	170, 664,
	196, 664,
	-2, 624,
	-1, 656,
	111, 663,
	170, 663,
	196, 663,
	-2, 622,
	-1, 786,
	352, 1180,
	-2, 1173,
	-1, 787,
	352, 1181,
	-2, 1174,
	-1, 793,
	5, 837,
	352, 837,
	-2, 1379,
	-1, 818,
	5, 796,
	-2, 1349,
	-1, 819,
	5, 831,
	352, 831,
	-2, 1351,
	-1, 820,
	5, 806,
	-2, 1352,
	-1, 821,
	5, 805,
	-2, 1353,
	-1, 822,
	5, 831,
	352, 831,
	-2, 1356,
	-1, 823,
	5, 831,
	352, 831,
	-2, 1357,
	-1, 824,
	5, 832,
	-2, 1360,
	-1, 825,
	5, 788,
	-2, 1361,
	-1, 826,
	5, 788,
	-2, 1362,
	-1, 827,
	5, 813,
	-2, 1366,
	-1, 828,
	5, 798,
	-2, 1367,
	-1, 829,
	5, 799,
	-2, 1368,
	-1, 830,
	5, 789,
	-2, 1373,
	-1, 831,
	5, 790,
	-2, 1374,
	-1, 832,
	5, 791,
	-2, 1375,
	-1, 833,
	5, 792,
	-2, 1376,
	-1, 834,
	5, 793,
	-2, 1377,
	-1, 835,
	5, 794,
	-2, 1378,
	-1, 836,
	5, 788,
	-2, 1383,
	-1, 837,
	5, 797,
	-2, 1388,
	-1, 838,
	5, 795,
	-2, 1391,
	-1, 839,
	5, 829,
	352, 829,
	-2, 1393,
	-1, 840,
	5, 833,
	-2, 1396,
	-1, 841,
	5, 835,
	-2, 1397,
	-1, 842,
	5, 828,
	352, 828,
	-2, 1402,
	-1, 860,
	212, 652,
	-2, 501,
	-1, 864,
	198, 1177,
	-2, 0,
	-1, 899,
	1, 203,
	351, 203,
	353, 203,
	355, 203,
	356, 203,
	-2, 627,
	-1, 902,
	4, 1401,
	10, 1401,
	11, 1401,
	13, 1401,
	14, 1401,
	15, 1401,
	16, 1401,
	17, 1401,
	18, 1401,
	20, 1401,
	21, 1401,
	23, 1401,
	26, 1401,
	28, 1401,
	30, 1401,
	33, 1401,
	34, 1401,
	35, 1401,
	36, 1401,
	37, 1401,
	38, 1401,
	39, 1401,
	40, 1401,
	41, 1401,
	42, 1401,
	44, 1401,
	45, 1401,
	46, 1401,
	47, 1401,
	48, 1401,
	51, 1401,
	52, 1401,
	53, 1401,
	55, 1401,
	56, 1401,
	57, 1401,
	60, 1401,
	61, 1401,
	62, 1401,
	63, 1401,
	64, 1401,
	66, 1401,
	67, 1401,
	68, 1401,
	70, 1401,
	71, 1401,
	72, 1401,
	80, 1401,
	81, 1401,
	82, 1401,
	83, 1401,
	84, 1401,
	85, 1401,
	86, 1401,
	87, 1401,
	89, 1401,
	91, 1401,
	93, 1401,
	96, 1401,
	97, 1401,
	99, 1401,
	103, 1401,
	104, 1401,
	105, 1401,
	106, 1401,
	107, 1401,
	108, 1401,
	112, 1401,
	113, 1401,
	114, 1401,
	115, 1401,
	116, 1401,
	117, 1401,
	118, 1401,
	120, 1401,
	123, 1401,
	125, 1401,
	126, 1401,
	128, 1401,
	130, 1401,
	131, 1401,
	132, 1401,
	133, 1401,
	134, 1401,
	135, 1401,
	136, 1401,
	137, 1401,
	138, 1401,
	140, 1401,
	142, 1401,
	143, 1401,
	144, 1401,
	145, 1401,
	146, 1401,
	147, 1401,
	148, 1401,
	149, 1401,
	150, 1401,
	152, 1401,
	154, 1401,
	155, 1401,
	156, 1401,
	157, 1401,
	158, 1401,
	159, 1401,
	160, 1401,
	161, 1401,
	163, 1401,
	164, 1401,
	166, 1401,
	167, 1401,
	168, 1401,
	169, 1401,
	171, 1401,
	172, 1401,
	175, 1401,
	176, 1401,
	177, 1401,
	178, 1401,
	179, 1401,
	180, 1401,
	181, 1401,
	182, 1401,
	183, 1401,
	184, 1401,
	185, 1401,
	186, 1401,
	187, 1401,
	191, 1401,
	192, 1401,
	193, 1401,
	194, 1401,
	195, 1401,
	197, 1401,
	200, 1401,
	201, 1401,
	203, 1401,
	204, 1401,
	206, 1401,
	208, 1401,
	209, 1401,
	210, 1401,
	211, 1401,
	212, 1401,
	213, 1401,
	215, 1401,
	216, 1401,
	217, 1401,
	218, 1401,
	219, 1401,
	221, 1401,
	222, 1401,
	223, 1401,
	224, 1401,
	225, 1401,
	226, 1401,
	227, 1401,
	228, 1401,
	230, 1401,
	231, 1401,
	232, 1401,
	233, 1401,
	234, 1401,
	235, 1401,
	236, 1401,
	237, 1401,
	238, 1401,
	239, 1401,
	240, 1401,
	241, 1401,
	243, 1401,
	244, 1401,
	245, 1401,
	246, 1401,
	247, 1401,
	248, 1401,
	249, 1401,
	250, 1401,
	251, 1401,
	252, 1401,
	253, 1401,
	255, 1401,
	256, 1401,
	257, 1401,
	258, 1401,
	259, 1401,
	261, 1401,
	262, 1401,
	263, 1401,
	264, 1401,
	265, 1401,
	266, 1401,
	267, 1401,
	268, 1401,
	269, 1401,
	271, 1401,
	272, 1401,
	273, 1401,
	274, 1401,
	275, 1401,
	276, 1401,
	277, 1401,
	278, 1401,
	279, 1401,
	281, 1401,
	283, 1401,
	284, 1401,
	285, 1401,
	286, 1401,
	287, 1401,
	288, 1401,
	289, 1401,
	291, 1401,
	292, 1401,
	293, 1401,
	296, 1401,
	297, 1401,
	298, 1401,
	299, 1401,
	301, 1401,
	302, 1401,
	303, 1401,
	304, 1401,
	307, 1401,
	308, 1401,
	309, 1401,
	310, 1401,
	312, 1401,
	314, 1401,
	315, 1401,
	316, 1401,
	317, 1401,
	318, 1401,
	319, 1401,
	322, 1401,
	327, 1401,
	328, 1401,
	329, 1401,
	330, 1401,
	331, 1401,
	332, 1401,
	333, 1401,
	335, 1401,
	336, 1401,
	337, 1401,
	338, 1401,
	340, 1401,
	341, 1401,
	342, 1401,
	343, 1401,
	344, 1401,
	345, 1401,
	346, 1401,
	347, 1401,
	348, 1401,
	350, 1401,
	353, 1401,
	354, 1401,
	357, 1401,
	358, 1401,
	-2, 0,
	-1, 926,
	122, 1328,
	294, 1328,
	337, 1328,
	354, 1328,
	-2, 0,
	-1, 994,
	111, 663,
	170, 663,
	196, 663,
	-2, 625,
	-1, 1048,
	102, 629,
	111, 629,
	151, 629,
	170, 629,
	196, 629,
	202, 629,
	305, 629,
	-2, 723,
	-1, 1129,
	102, 629,
	111, 629,
	151, 629,
	170, 629,
	196, 629,
	202, 629,
	305, 629,
	-2, 956,
	-1, 1139,
	352, 1157,
	-2, 1145,
	-1, 1156,
	353, 1097,
	-2, 0,
	-1, 1388,
	1, 724,
	70, 724,
	102, 724,
	111, 724,
	123, 724,
	127, 724,
	129, 724,
	142, 724,
	151, 724,
	158, 724,
	167, 724,
	170, 724,
	183, 724,
	196, 724,
	198, 724,
	202, 724,
	242, 724,
	244, 724,
	305, 724,
	313, 724,
	324, 724,
	325, 724,
	334, 724,
	351, 724,
	353, 724,
	355, 724,
	356, 724,
	357, 724,
	-2, 723,
	-1, 1448,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 872,
	-1, 1449,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 873,
	-1, 1450,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 874,
	-1, 1454,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 878,
	-1, 1455,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 879,
	-1, 1456,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 880,
	-1, 1459,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 885,
	-1, 1465,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 887,
	-1, 1467,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 891,
	-1, 1468,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 892,
	-1, 1469,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 893,
	-1, 1470,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 894,
	-1, 1496,
	207, 1039,
	-2, 1042,
	-1, 1538,
	122, 1079,
	352, 1180,
	-2, 1173,
	-1, 1539,
	122, 1080,
	-2, 1345,
	-1, 1540,
	122, 1081,
	-2, 1253,
	-1, 1541,
	122, 1082,
	-2, 1216,
	-1, 1542,
	122, 1083,
	-2, 1233,
	-1, 1543,
	122, 1084,
	-2, 1252,
	-1, 1544,
	122, 1085,
	-2, 1304,
	-1, 1748,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 886,
	-1, 1749,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 888,
	-1, 1754,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 889,
	-1, 1772,
	207, 1038,
	-2, 1041,
	-1, 1981,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 890,
	-1, 1986,
	154, 0,
	-2, 906,
	-1, 1996,
	207, 1040,
	-2, 1043,
	-1, 2038,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 933,
	-1, 2039,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 934,
	-1, 2040,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 935,
	-1, 2044,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 939,
	-1, 2045,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 940,
	-1, 2046,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 941,
	-1, 2165,
	154, 0,
	-2, 907,
	-1, 2168,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 910,
	-1, 2169,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 912,
	-1, 2265,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 911,
	-1, 2266,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 913,
	-1, 2273,
	154, 0,
	-2, 942,
	-1, 2325,
	154, 0,
	-2, 943,
	-1, 2397,
	36, 0,
	136, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 1348,
}

const sqlPrivate = 57344

const sqlLast = 40885

var sqlAct = [...]int{

	787, 2396, 2380, 2069, 2424, 2349, 2381, 1617, 2382, 2240,
	2395, 1185, 2015, 1609, 2300, 2297, 1673, 2206, 2079, 1192,
	71, 657, 713, 1952, 1383, 2124, 2138, 1876, 1224, 763,
	777, 1205, 1878, 2220, 1953, 1225, 785, 854, 1593, 1606,
	172, 442, 25, 1046, 172, 1588, 1838, 1881, 1703, 1274,
	1589, 1618, 172, 1023, 1042, 2104, 1682, 1592, 1837, 1427,
	1029, 172, 1188, 1051, 462, 1520, 784, 172, 172, 1135,
	1906, 172, 1690, 1783, 172, 1494, 1401, 1923, 1384, 1392,
	1349, 172, 674, 1669, 1424, 930, 1301, 435, 1181, 173,
	1275, 843, 1504, 1657, 757, 1482, 1567, 1479, 1054, 1056,
	1024, 677, 1166, 665, 115, 929, 1170, 1514, 879, 1534,
	886, 1611, 601, 1124, 889, 678, 756, 432, 1596, 900,
	683, 719, 1033, 722, 1357, 701, 172, 172, 1370, 998,
	574, 997, 669, 996, 172, 596, 1299, 1199, 452, 662,
	163, 779, 876, 598, 168, 699, 2139, 1002, 116, 1014,
	1013, 578, 594, 463, 1937, 464, 1771, 1938, 661, 1610,
	172, 172, 172, 172, 661, 115, 1207, 172, 172, 1207,
	1043, 2421, 117, 1921, 1207, 1076, 25, 1040, 2404, 2392,
	2391, 2388, 2137, 1632, 1632, 1076, 2366, 1073, 1893, 1632,
	1638, 656, 1892, 38, 2342, 2339, 2331, 716, 2341, 1076,
	2137, 2327, 2345, 2285, 1359, 1638, 666, 2137, 566, 684,
	2282, 685, 2280, 2267, 1076, 2251, 2137, 1638, 743, 1076,
	1645, 2250, 1425, 1926, 780, 2137, 1079, 1080, 1358, 1099,
	1100, 1101, 1109, 1110, 1111, 1915, 2228, 2225, 115, 48,
	1076, 1076, 1102, 2192, 2170, 1926, 2167, 1632, 1632, 1082,
	1638, 622, 1113, 2159, 2157, 1425, 2136, 1632, 1632, 460,
	2137, 2117, 2093, 1775, 654, 1076, 1587, 59, 2051, 1776,
	131, 2088, 703, 1081, 60, 1587, 61, 737, 1645, 1096,
	99, 727, 731, 1990, 1570, 1933, 1865, 1632, 653, 1934,
	1076, 1855, 1853, 1852, 1993, 1856, 1632, 1632, 133, 1851,
	63, 1772, 1706, 1632, 1390, 1632, 1632, 1808, 1809, 1774,
	1826, 1827, 1828, 1632, 1679, 1632, 1647, 1637, 1076, 1782,
	1632, 1638, 1631, 2164, 1586, 1364, 1632, 1219, 1587, 1363,
	705, 1220, 706, 1087, 132, 1808, 1809, 1076, 1826, 1827,
	1828, 1866, 125, 1517, 1672, 1655, 131, 1283, 1498, 126,
	1018, 741, 1106, 1114, 909, 1614, 134, 907, 1208, 906,
	1823, 1208, 905, 904, 903, 707, 1208, 2140, 118, 704,
	1112, 747, 664, 649, 133, 1079, 1080, 648, 647, 620,
	619, 618, 617, 680, 616, 1104, 615, 614, 1823, 613,
	1518, 612, 1097, 611, 610, 609, 608, 172, 1082, 172,
	172, 607, 172, 606, 605, 604, 589, 172, 588, 587,
	132, 423, 422, 172, 1814, 421, 420, 1103, 125, 419,
	1808, 1809, 1081, 1892, 131, 126, 172, 172, 172, 172,
	172, 131, 404, 403, 99, 683, 1519, 1516, 395, 1358,
	394, 393, 1814, 392, 118, 385, 384, 2213, 157, 156,
	155, 1829, 133, 154, 153, 662, 152, 151, 150, 133,
	149, 148, 147, 1079, 1080, 1098, 1099, 1100, 1101, 1109,
	1110, 1111, 146, 1824, 145, 1213, 1531, 144, 1206, 1102,
	893, 1107, 1087, 1333, 143, 142, 1082, 141, 132, 1113,
	140, 139, 138, 137, 136, 132, 125, 135, 1047, 1698,
	1529, 1824, 1305, 126, 944, 2414, 1808, 1809, 1527, 858,
	1081, 1521, 862, 2394, 2387, 2354, 1096, 2322, 1009, 1079,
	1080, 131, 118, 1868, 684, 2283, 685, 1814, 2197, 118,
	1490, 2193, 2185, 2184, 878, 883, 2183, 853, 882, 882,
	2179, 1097, 1082, 2178, 2177, 2176, 1825, 2103, 1105, 133,
	901, 1093, 1094, 1095, 1108, 2096, 1092, 1090, 1091, 1083,
	1084, 1085, 1086, 1088, 1089, 2066, 1081, 2061, 2060, 1191,
	1087, 2059, 2001, 2194, 1825, 38, 1864, 172, 1860, 1857,
	1845, 1836, 1807, 1804, 1803, 132, 1824, 1801, 1515, 1106,
	1114, 1788, 1787, 125, 172, 1710, 1009, 1388, 714, 1143,
	126, 2212, 1136, 683, 1127, 1045, 1008, 1112, 2017, 2367,
	1643, 2334, 1044, 1814, 1098, 2321, 2320, 2319, 2311, 1613,
	2309, 48, 1104, 2295, 131, 683, 1087, 2275, 2237, 1097,
	851, 2218, 1820, 1821, 1822, 1491, 2200, 1819, 1817, 1818,
	1810, 1811, 1812, 1813, 1815, 1816, 2190, 2143, 2077, 59,
	2075, 172, 133, 2074, 1103, 2072, 60, 1985, 61, 1825,
	1820, 1821, 1822, 845, 747, 1819, 1817, 1818, 1810, 1811,
	1812, 1813, 1815, 1816, 1961, 995, 1960, 1904, 1941, 1929,
	1835, 1797, 63, 1796, 1793, 1768, 1763, 1484, 132, 940,
	1741, 1736, 684, 1723, 685, 1722, 125, 1708, 1678, 172,
	1171, 172, 1098, 126, 1174, 1579, 1525, 949, 1083, 1084,
	1085, 1086, 1088, 1089, 684, 947, 685, 2303, 1107, 681,
	1668, 1375, 118, 1184, 172, 172, 1178, 994, 1667, 1022,
	1164, 917, 1163, 1162, 1161, 1160, 1723, 1159, 1158, 1157,
	1156, 683, 172, 1155, 662, 927, 924, 1154, 462, 1153,
	1819, 1817, 1818, 1810, 1811, 1812, 1813, 1815, 1816, 1152,
	1151, 1150, 2217, 1027, 1293, 1292, 1149, 680, 675, 1148,
	1147, 1140, 993, 1128, 1127, 945, 715, 1021, 923, 1079,
	1080, 912, 662, 897, 2172, 1105, 1079, 1080, 1093, 1094,
	1095, 1108, 2095, 1092, 1090, 1091, 1083, 1084, 1085, 1086,
	1088, 1089, 1082, 1936, 1640, 1932, 131, 1005, 1006, 1082,
	1850, 1376, 1136, 1902, 654, 1125, 99, 1045, 1808, 1809,
	937, 2344, 115, 949, 1879, 939, 1081, 1530, 844, 1017,
	684, 1074, 685, 1081, 133, 1425, 1041, 463, 653, 464,
	1015, 1812, 1813, 1815, 1816, 1696, 1019, 1049, 1296, 2216,
	1939, 1528, 1894, 172, 1085, 1086, 1088, 1089, 792, 1526,
	852, 1176, 1064, 938, 1047, 172, 1177, 1859, 1552, 919,
	132, 172, 1858, 172, 1190, 172, 1747, 936, 125, 172,
	1145, 1189, 1062, 1907, 1289, 126, 1075, 2221, 1610, 2018,
	1505, 1183, 1167, 1087, 1888, 987, 1948, 1808, 1809, 1063,
	1826, 1827, 1828, 2357, 118, 2411, 2338, 2151, 2162, 172,
	2261, 1648, 1268, 2163, 683, 1210, 172, 1517, 1212, 1139,
	1779, 2260, 172, 694, 692, 1168, 1169, 1912, 1196, 2412,
	2259, 690, 1297, 1172, 988, 1808, 1809, 660, 683, 683,
	2258, 687, 409, 1175, 979, 462, 1142, 1057, 715, 1058,
	1823, 1976, 172, 1974, 1945, 1394, 1045, 172, 1944, 1792,
	1791, 1972, 172, 172, 1518, 172, 1394, 172, 1790, 172,
	1789, 172, 1393, 397, 1750, 1635, 1466, 1421, 1417, 1583,
	1415, 158, 172, 1057, 696, 1058, 659, 1016, 172, 172,
	740, 1582, 878, 1437, 410, 1607, 949, 937, 1331, 1979,
	1330, 651, 1071, 684, 1814, 685, 2068, 1077, 1861, 1481,
	1519, 1516, 1201, 1198, 1290, 1179, 2373, 172, 1070, 172,
	1202, 1903, 172, 1059, 1332, 2337, 1481, 684, 684, 685,
	685, 1057, 1521, 1058, 463, 172, 464, 661, 1068, 922,
	938, 1829, 1814, 2418, 462, 1488, 1131, 172, 1222, 1221,
	1486, 172, 973, 401, 172, 1069, 1276, 1277, 172, 1059,
	2363, 161, 172, 1824, 1307, 1278, 1882, 172, 2433, 1295,
	2242, 662, 1356, 172, 462, 1302, 1281, 172, 1294, 1743,
	115, 1310, 462, 1963, 2364, 1521, 1377, 1738, 952, 974,
	1670, 1671, 1067, 1207, 1321, 2011, 1395, 1065, 1367, 2314,
	1311, 1913, 1314, 681, 676, 1413, 1315, 1059, 1316, 1165,
	1317, 1419, 1318, 1886, 1319, 1428, 1435, 1089, 162, 1083,
	1084, 1085, 1086, 1088, 1089, 1641, 1602, 1335, 772, 1334,
	1336, 1325, 1327, 463, 2271, 464, 1825, 1231, 1406, 1408,
	658, 1808, 1809, 1329, 1354, 1505, 2411, 1353, 662, 1808,
	1809, 654, 1362, 662, 654, 654, 1816, 1882, 1368, 412,
	411, 1298, 1515, 463, 2279, 464, 1372, 1373, 169, 1911,
	1521, 463, 390, 464, 1049, 1345, 1398, 1183, 1346, 1347,
	405, 847, 1217, 1411, 424, 172, 1795, 1422, 1416, 430,
	1970, 1402, 172, 386, 1823, 564, 169, 1734, 918, 572,
	2384, 1391, 577, 172, 1306, 172, 1502, 172, 1279, 603,
	172, 1122, 172, 1371, 172, 172, 172, 172, 688, 688,
	1387, 683, 1820, 1821, 1822, 846, 689, 1819, 1817, 1818,
	1810, 1811, 1812, 1813, 1815, 1816, 688, 1492, 978, 1489,
	661, 1612, 1060, 1612, 2097, 1055, 986, 1964, 1814, 1808,
	1809, 2008, 2099, 396, 702, 702, 1814, 1752, 1405, 2417,
	2434, 159, 390, 1545, 428, 2383, 581, 1630, 1810, 1811,
	1812, 1813, 1815, 1816, 1480, 1746, 698, 402, 1060, 697,
	2243, 652, 398, 1477, 582, 1208, 2410, 2385, 390, 390,
	735, 390, 399, 1487, 2408, 169, 744, 2009, 1475, 921,
	160, 750, 2205, 1378, 1231, 1231, 462, 1824, 953, 1604,
	684, 1636, 685, 1616, 172, 1824, 915, 960, 1625, 1624,
	1626, 427, 882, 115, 882, 1628, 1060, 115, 1627, 1381,
	172, 172, 172, 1423, 172, 2253, 901, 1633, 908, 1642,
	1634, 1436, 1309, 2386, 583, 954, 1000, 387, 951, 1282,
	1001, 928, 2252, 172, 1808, 1809, 1814, 1404, 2416, 1644,
	172, 462, 1463, 1172, 2438, 1175, 172, 172, 2188, 1471,
	172, 1680, 1521, 1169, 1168, 172, 1686, 1472, 172, 1473,
	1825, 2306, 2235, 1478, 1947, 1719, 172, 1715, 1825, 1649,
	1605, 1197, 172, 172, 172, 463, 1186, 464, 172, 983,
	2132, 172, 1700, 2007, 1704, 999, 2350, 172, 172, 172,
	172, 172, 1760, 1495, 388, 1824, 172, 1131, 172, 856,
	1699, 1499, 172, 1684, 1687, 1507, 115, 1758, 1324, 1688,
	1689, 1001, 1709, 1694, 2133, 1720, 1716, 1537, 1537, 1550,
	1660, 1562, 1666, 1403, 584, 1662, 2047, 1574, 1575, 1577,
	463, 933, 464, 1695, 1735, 1664, 1000, 2427, 1284, 1681,
	1740, 1814, 1461, 1464, 426, 984, 2437, 2147, 2189, 453,
	1705, 1819, 1817, 1818, 1810, 1811, 1812, 1813, 1815, 1816,
	1817, 1818, 1810, 1811, 1812, 1813, 1815, 1816, 1825, 1474,
	1711, 458, 2080, 429, 2150, 1460, 1476, 454, 1755, 418,
	1651, 2149, 933, 425, 933, 662, 1288, 1036, 1756, 855,
	1733, 1653, 1761, 961, 165, 999, 2207, 934, 985, 413,
	1824, 935, 585, 2236, 455, 603, 1039, 860, 603, 1781,
	865, 1725, 1654, 1341, 2128, 868, 2129, 1724, 933, 1676,
	2048, 390, 1369, 457, 1652, 1693, 2049, 1366, 1365, 569,
	1286, 1037, 563, 586, 603, 603, 390, 890, 744, 659,
	1753, 1751, 1287, 864, 2070, 1656, 2131, 2146, 934, 875,
	934, 433, 935, 2198, 935, 2134, 1262, 1745, 662, 873,
	1767, 1818, 1810, 1811, 1812, 1813, 1815, 1816, 172, 745,
	2105, 1462, 38, 1825, 2425, 1924, 1778, 1524, 172, 982,
	172, 2148, 172, 3, 1342, 172, 2274, 2187, 2233, 172,
	1839, 447, 33, 971, 172, 1984, 172, 1867, 1757, 1869,
	1685, 446, 32, 172, 1231, 1759, 1978, 1720, 1038, 1862,
	443, 29, 2234, 1802, 662, 969, 172, 1762, 48, 445,
	17, 1646, 1870, 1585, 1420, 1873, 683, 172, 1414, 2426,
	439, 13, 2130, 967, 456, 965, 683, 1896, 1897, 1884,
	1898, 1842, 1843, 1844, 1890, 991, 59, 441, 16, 963,
	2428, 957, 1840, 60, 1901, 61, 990, 172, 913, 746,
	1322, 742, 440, 14, 871, 789, 686, 1810, 1811, 1812,
	1813, 1815, 1816, 1313, 172, 438, 12, 444, 10, 63,
	172, 977, 1887, 568, 1146, 916, 562, 1523, 459, 172,
	172, 1895, 414, 2379, 1871, 1032, 2347, 2121, 1968, 981,
	874, 1966, 603, 1946, 1935, 1032, 437, 8, 949, 1900,
	872, 436, 4, 970, 1910, 684, 1908, 685, 725, 1875,
	1909, 1261, 1914, 1262, 1262, 684, 33, 685, 1916, 1917,
	1940, 1608, 415, 1919, 1959, 968, 32, 1931, 1998, 1942,
	1958, 1967, 1928, 1969, 1927, 29, 1922, 1925, 1036, 1766,
	1877, 1230, 1304, 966, 17, 964, 1769, 1601, 1036, 390,
	1216, 416, 115, 417, 1215, 13, 1214, 1039, 1943, 962,
	1957, 956, 1987, 1211, 1785, 1786, 172, 1039, 1950, 1209,
	1218, 1072, 16, 1034, 870, 1066, 2003, 2004, 2005, 691,
	693, 1061, 1037, 1034, 1971, 1977, 1231, 14, 976, 710,
	2290, 1674, 1037, 131, 1003, 2412, 2292, 577, 1035, 702,
	12, 448, 10, 99, 1394, 1428, 2022, 1410, 1035, 711,
	1409, 2087, 1834, 1692, 1428, 2027, 1997, 1994, 2316, 2140,
	955, 133, 390, 390, 1847, 2324, 2010, 2012, 2013, 2021,
	2106, 8, 1007, 1231, 2024, 1418, 4, 172, 2026, 172,
	169, 2019, 1394, 1079, 1080, 1412, 172, 2058, 1407, 683,
	2346, 2203, 1675, 2076, 2054, 1615, 1603, 132, 2073, 1038,
	1600, 1355, 1280, 172, 172, 125, 1004, 2055, 1223, 1038,
	2431, 570, 126, 2436, 2227, 2089, 1079, 1080, 1261, 1261,
	2081, 712, 1808, 1809, 1079, 1080, 172, 1011, 1010, 2111,
	1081, 434, 462, 2094, 2071, 2067, 2014, 172, 1011, 1082,
	172, 1905, 1854, 2086, 1701, 1584, 2084, 2101, 1230, 1230,
	462, 172, 172, 2083, 2090, 172, 172, 172, 1581, 1580,
	2091, 1513, 1133, 1081, 1012, 2092, 2174, 1684, 1691, 2376,
	2298, 2082, 172, 2006, 1872, 2115, 1143, 172, 684, 172,
	685, 172, 172, 172, 1141, 172, 989, 172, 980, 683,
	2109, 390, 2141, 2108, 2144, 2120, 2112, 2110, 1231, 975,
	2107, 1959, 2116, 1195, 972, 958, 920, 1958, 650, 390,
	2241, 390, 451, 390, 1312, 959, 1697, 1203, 1374, 2362,
	2180, 463, 2145, 464, 2166, 1794, 2299, 2270, 172, 1522,
	580, 1973, 581, 1144, 1231, 1231, 1975, 1957, 2161, 463,
	52, 464, 1955, 1231, 1231, 766, 2122, 169, 1949, 1595,
	582, 1594, 465, 1291, 169, 788, 668, 1536, 1429, 848,
	603, 790, 1228, 1991, 791, 1229, 1173, 778, 1226, 898,
	1619, 949, 1485, 1262, 1503, 1777, 1231, 1137, 684, 758,
	685, 2186, 946, 770, 581, 172, 172, 769, 1500, 911,
	603, 1702, 683, 1885, 2211, 603, 1340, 1665, 1337, 1965,
	169, 603, 582, 603, 1264, 603, 2199, 603, 400, 603,
	583, 2204, 1805, 1959, 896, 1559, 1551, 1547, 1959, 1958,
	1323, 992, 1028, 2208, 1958, 1123, 603, 603, 1620, 2219,
	2052, 2202, 172, 2210, 172, 2201, 462, 172, 943, 1891,
	2214, 2062, 1639, 1020, 1348, 172, 709, 2215, 1263, 1957,
	708, 462, 2224, 1590, 1957, 577, 941, 702, 1285, 1650,
	744, 1116, 583, 1115, 2226, 2245, 695, 2308, 2247, 932,
	2229, 931, 1187, 390, 2209, 1718, 2432, 2315, 1959, 1962,
	2356, 684, 2244, 685, 1958, 1386, 130, 1183, 127, 390,
	129, 2102, 390, 128, 2256, 2257, 1399, 2255, 748, 849,
	390, 2343, 2262, 2263, 2296, 390, 1744, 2269, 79, 2113,
	584, 390, 31, 30, 1957, 1426, 172, 98, 97, 683,
	1231, 96, 95, 172, 94, 463, 93, 464, 92, 2276,
	91, 90, 172, 89, 2281, 88, 87, 172, 1261, 86,
	463, 1959, 464, 85, 172, 84, 83, 1958, 2289, 2293,
	2287, 82, 81, 599, 2310, 2284, 78, 77, 76, 75,
	28, 2302, 584, 2305, 24, 1262, 2304, 102, 1230, 172,
	172, 1264, 1264, 2291, 23, 21, 22, 1957, 27, 26,
	19, 2313, 18, 15, 9, 2312, 579, 20, 585, 57,
	172, 58, 56, 55, 54, 11, 50, 2332, 683, 49,
	2330, 2288, 2323, 172, 47, 2333, 46, 45, 684, 44,
	685, 7, 1262, 1344, 2326, 1263, 1263, 101, 2336, 586,
	172, 41, 172, 1591, 40, 172, 662, 462, 6, 100,
	744, 5, 762, 113, 110, 112, 109, 111, 114, 2353,
	585, 390, 106, 1623, 2368, 603, 107, 2370, 603, 108,
	603, 2369, 390, 390, 1629, 744, 172, 105, 1764, 1765,
	104, 37, 36, 2374, 2372, 35, 34, 2375, 2371, 2378,
	2377, 586, 2352, 910, 2, 1959, 389, 2389, 172, 914,
	2335, 1958, 1, 2403, 172, 2401, 1231, 684, 0, 685,
	172, 2405, 0, 2393, 0, 2231, 0, 0, 0, 2409,
	2407, 2223, 0, 0, 0, 2413, 0, 0, 0, 2415,
	2246, 1957, 0, 0, 0, 0, 463, 0, 464, 0,
	0, 0, 0, 0, 2422, 1231, 2430, 2429, 2402, 2423,
	1261, 0, 0, 1831, 1832, 1833, 2435, 1262, 2249, 0,
	0, 0, 0, 2439, 0, 0, 0, 0, 0, 0,
	0, 0, 1658, 0, 0, 0, 0, 0, 0, 0,
	1230, 0, 0, 0, 0, 0, 720, 1553, 390, 390,
	390, 0, 390, 1262, 1262, 0, 0, 1261, 0, 0,
	0, 0, 1262, 1262, 0, 0, 0, 38, 0, 0,
	0, 390, 729, 733, 0, 739, 0, 0, 390, 0,
	0, 0, 0, 0, 390, 390, 0, 1230, 390, 0,
	1231, 0, 0, 1386, 0, 1262, 1386, 0, 0, 1025,
	1025, 767, 72, 0, 1707, 0, 1030, 0, 0, 0,
	390, 1713, 1714, 48, 0, 0, 1399, 0, 0, 1721,
	0, 0, 0, 0, 0, 1726, 1727, 1729, 1731, 1732,
	1079, 1080, 0, 0, 390, 0, 1739, 0, 0, 0,
	1742, 59, 1117, 1118, 1119, 1120, 1121, 0, 60, 0,
	61, 0, 1130, 1082, 0, 0, 0, 0, 0, 0,
	0, 0, 1138, 72, 0, 0, 2358, 0, 0, 2132,
	0, 1264, 2125, 0, 63, 0, 0, 1081, 0, 0,
	2123, 0, 1261, 1096, 2127, 0, 0, 0, 1227, 0,
	0, 0, 0, 0, 2359, 2360, 2361, 0, 0, 2365,
	0, 0, 0, 2133, 0, 0, 0, 0, 0, 0,
	1982, 1983, 1230, 0, 0, 1263, 0, 655, 1261, 1261,
	663, 0, 0, 0, 0, 2126, 0, 1261, 1261, 0,
	0, 0, 0, 0, 0, 721, 72, 1087, 0, 1262,
	0, 0, 0, 0, 0, 0, 0, 0, 1230, 1230,
	0, 0, 0, 0, 0, 0, 0, 1230, 1230, 0,
	1261, 0, 0, 0, 0, 0, 0, 0, 0, 2028,
	2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038,
	2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 0, 2050,
	1230, 0, 571, 0, 0, 0, 1097, 0, 131, 0,
	0, 0, 1659, 2128, 0, 2129, 390, 0, 99, 0,
	0, 0, 450, 0, 0, 0, 1195, 0, 1195, 0,
	603, 0, 0, 390, 0, 733, 133, 1880, 0, 0,
	0, 0, 390, 0, 1889, 2131, 0, 0, 0, 0,
	739, 390, 0, 0, 2134, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1658, 1227, 1227, 0, 0, 453,
	0, 0, 132, 1264, 0, 1658, 0, 0, 0, 1098,
	125, 1553, 1553, 0, 0, 0, 0, 126, 0, 0,
	0, 458, 0, 0, 0, 0, 0, 454, 0, 0,
	1338, 0, 1343, 0, 0, 390, 118, 0, 1350, 0,
	0, 0, 0, 0, 1261, 1262, 0, 1263, 0, 0,
	1264, 0, 390, 0, 455, 0, 0, 0, 1386, 0,
	0, 2130, 0, 0, 0, 0, 0, 744, 1386, 0,
	0, 0, 0, 457, 1230, 0, 0, 0, 0, 0,
	0, 0, 1954, 0, 1262, 0, 1553, 1553, 1553, 0,
	0, 0, 0, 0, 1263, 0, 0, 0, 0, 0,
	1092, 1090, 1091, 1083, 1084, 1085, 1086, 1088, 1089, 0,
	0, 0, 0, 0, 1438, 1439, 1440, 1441, 1442, 1443,
	1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453,
	1454, 1455, 1456, 1457, 1458, 1459, 0, 1465, 0, 1467,
	1468, 1469, 1470, 0, 0, 0, 0, 0, 0, 0,
	449, 0, 38, 0, 2016, 0, 1493, 0, 0, 0,
	0, 0, 0, 1130, 0, 0, 0, 0, 0, 1262,
	450, 0, 0, 0, 0, 1264, 663, 0, 0, 0,
	0, 1532, 1533, 0, 456, 1549, 0, 1561, 1563, 1568,
	1571, 1572, 1573, 0, 0, 0, 0, 0, 48, 0,
	0, 0, 0, 733, 0, 0, 0, 0, 0, 0,
	1261, 1264, 1264, 0, 1079, 1080, 0, 453, 0, 1263,
	1264, 1264, 0, 0, 0, 1399, 59, 1195, 0, 0,
	0, 0, 2238, 60, 2078, 61, 0, 1082, 459, 458,
	1230, 0, 0, 0, 0, 454, 0, 0, 0, 1261,
	0, 390, 390, 1264, 0, 1263, 1263, 0, 0, 63,
	0, 1081, 0, 0, 1263, 1263, 0, 0, 0, 0,
	0, 0, 455, 0, 2098, 0, 720, 1052, 0, 1230,
	0, 0, 0, 1553, 1553, 390, 2273, 0, 744, 0,
	0, 457, 0, 0, 0, 0, 0, 1263, 0, 1386,
	744, 0, 0, 2118, 2119, 1399, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1227, 0, 0, 0, 1954,
	744, 1087, 0, 0, 0, 2152, 0, 2153, 0, 390,
	2155, 2156, 0, 390, 1261, 2160, 0, 0, 0, 0,
	0, 0, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553,
	1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553,
	1553, 0, 1553, 0, 1230, 0, 0, 0, 0, 0,
	0, 0, 0, 2325, 0, 0, 2181, 0, 0, 0,
	1097, 0, 0, 131, 0, 0, 0, 1320, 0, 1025,
	0, 0, 0, 99, 1030, 0, 0, 1264, 0, 0,
	0, 0, 456, 0, 0, 1182, 0, 655, 0, 0,
	0, 133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 733, 0, 1200, 0, 1200, 0, 0,
	0, 1954, 0, 744, 1591, 0, 1954, 0, 0, 0,
	0, 1263, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 0, 0, 1098, 0, 125, 459, 0, 0, 0,
	72, 0, 126, 0, 0, 1048, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1399, 118, 2230, 1079, 1080, 2232, 0, 0, 0, 0,
	0, 1748, 1749, 390, 1079, 1080, 1954, 1754, 0, 0,
	0, 1126, 0, 1129, 0, 0, 1082, 1227, 0, 0,
	1134, 0, 0, 0, 0, 1808, 1809, 1082, 1826, 1827,
	1828, 2264, 0, 0, 0, 0, 0, 0, 0, 1773,
	1081, 1989, 0, 0, 0, 0, 1780, 0, 0, 1784,
	0, 1081, 0, 0, 1092, 1090, 1091, 1083, 1084, 1085,
	1086, 1088, 1089, 0, 1227, 0, 1798, 0, 0, 1954,
	0, 0, 0, 1264, 390, 0, 0, 0, 1823, 0,
	0, 744, 0, 0, 0, 0, 0, 0, 0, 0,
	2301, 0, 0, 0, 0, 1386, 0, 720, 1130, 0,
	1087, 0, 1195, 0, 0, 1568, 1568, 1568, 0, 0,
	0, 1087, 1264, 720, 0, 0, 1389, 1263, 0, 0,
	0, 0, 0, 0, 733, 0, 0, 2317, 2318, 733,
	0, 0, 1814, 0, 0, 739, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 390, 0,
	0, 1883, 0, 0, 0, 0, 1263, 0, 0, 1097,
	0, 2340, 0, 0, 0, 0, 0, 0, 0, 1829,
	1097, 0, 0, 1899, 0, 1553, 0, 0, 2351, 0,
	744, 0, 0, 390, 0, 0, 0, 0, 0, 1227,
	0, 1824, 0, 0, 0, 0, 0, 1264, 0, 0,
	0, 0, 0, 1954, 0, 0, 0, 0, 1918, 0,
	0, 0, 0, 1350, 2301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1227, 1227, 0, 72, 1553,
	0, 0, 1098, 1930, 1227, 1227, 744, 0, 0, 0,
	0, 1263, 390, 1098, 0, 0, 0, 0, 2406, 0,
	0, 0, 0, 0, 655, 0, 0, 655, 655, 0,
	0, 0, 0, 1951, 1825, 1621, 0, 1227, 0, 0,
	0, 0, 0, 0, 0, 0, 739, 739, 0, 0,
	0, 0, 0, 0, 0, 0, 721, 0, 1980, 0,
	0, 1981, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1048, 1986, 0, 0, 0, 0, 0, 0,
	0, 0, 1995, 0, 0, 72, 1553, 0, 0, 0,
	1999, 72, 0, 1899, 1090, 1091, 1083, 1084, 1085, 1086,
	1088, 1089, 0, 0, 0, 0, 1091, 1083, 1084, 1085,
	1086, 1088, 1089, 2023, 0, 0, 0, 2025, 0, 0,
	1820, 1821, 1822, 0, 0, 1819, 1817, 1818, 1810, 1811,
	1812, 1813, 1815, 1816, 0, 0, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 663,
	2056, 2057, 0, 0, 1129, 0, 0, 0, 0, 2063,
	2064, 2065, 1661, 739, 1663, 0, 733, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1227, 0, 0, 0, 1677, 0, 0, 0, 0,
	0, 0, 720, 1025, 0, 0, 0, 0, 720, 720,
	0, 0, 720, 0, 0, 1030, 0, 0, 0, 1079,
	1080, 0, 1099, 1100, 1101, 1109, 1110, 1111, 0, 0,
	0, 72, 0, 72, 1712, 1102, 0, 0, 0, 0,
	0, 0, 1082, 0, 0, 1113, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 72, 0, 0, 1737, 0,
	0, 0, 0, 0, 0, 0, 1081, 0, 0, 0,
	0, 0, 1096, 0, 0, 0, 0, 2142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1808, 1809, 0,
	1826, 1827, 1828, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1988, 0, 2165, 0, 0, 0, 2168,
	2169, 0, 0, 0, 2171, 0, 0, 0, 0, 0,
	0, 2173, 0, 2175, 0, 0, 1087, 0, 0, 0,
	0, 0, 0, 0, 0, 1079, 1080, 0, 0, 2182,
	1823, 1109, 1110, 1111, 0, 1106, 1114, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 1227, 1082, 0,
	0, 1113, 0, 1112, 1808, 1809, 0, 1826, 1827, 1828,
	0, 0, 2191, 0, 0, 0, 0, 0, 1104, 0,
	0, 0, 1081, 0, 0, 1097, 0, 0, 1096, 0,
	0, 721, 0, 0, 1814, 0, 1227, 721, 721, 0,
	0, 721, 0, 0, 0, 0, 0, 0, 0, 0,
	1103, 0, 0, 0, 0, 0, 0, 1823, 0, 0,
	0, 0, 0, 0, 0, 0, 2222, 0, 0, 0,
	1863, 1829, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1087, 0, 72, 0, 0, 1874, 0, 0,
	72, 0, 0, 1824, 0, 0, 1182, 0, 1098, 0,
	0, 1106, 1114, 0, 0, 1182, 0, 0, 0, 0,
	2254, 1814, 0, 0, 1107, 0, 0, 0, 0, 0,
	0, 1227, 0, 0, 2265, 2266, 0, 0, 0, 0,
	0, 1830, 0, 0, 1104, 0, 1483, 0, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 1829, 0,
	0, 0, 0, 0, 0, 2278, 1129, 0, 0, 1920,
	0, 0, 0, 0, 0, 0, 1825, 0, 0, 0,
	1824, 0, 0, 0, 0, 0, 720, 0, 0, 0,
	0, 1105, 0, 0, 1093, 1094, 1095, 1108, 0, 1092,
	1090, 1091, 1083, 1084, 1085, 1086, 1088, 1089, 2307, 0,
	0, 0, 0, 0, 0, 0, 1849, 0, 0, 0,
	0, 0, 0, 0, 1098, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1129,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1825, 0, 0, 0, 0, 0, 0,
	0, 0, 1820, 1821, 1822, 0, 1030, 1819, 1817, 1818,
	1810, 1811, 1812, 1813, 1815, 1816, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 663, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1105, 0, 0,
	0, 0, 0, 1108, 0, 1092, 1090, 1091, 1083, 1084,
	1085, 1086, 1088, 1089, 0, 0, 0, 0, 2390, 0,
	0, 0, 0, 0, 2400, 2400, 0, 0, 0, 1820,
	1821, 1822, 0, 0, 1819, 1817, 1818, 1810, 1811, 1812,
	1813, 1815, 1816, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 2400, 0,
	0, 0, 0, 0, 0, 721, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1621, 720, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2400, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 720,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	899, 0, 682, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 2154, 0, 0, 328, 2158, 0, 0,
	0, 177, 178, 179, 329, 330, 331, 332, 180, 333,
	334, 0, 181, 335, 336, 182, 183, 0, 0, 337,
	338, 339, 0, 184, 340, 0, 466, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 467, 192,
	193, 0, 0, 0, 0, 0, 0, 0, 194, 195,
	391, 196, 341, 197, 342, 343, 0, 198, 0, 199,
	0, 200, 0, 0, 201, 202, 0, 203, 0, 0,
	0, 344, 204, 205, 206, 345, 346, 0, 0, 0,
	207, 208, 347, 348, 349, 0, 209, 0, 210, 0,
	0, 468, 0, 211, 350, 0, 351, 0, 212, 213,
	214, 215, 352, 353, 470, 721, 219, 0, 216, 0,
	469, 217, 354, 218, 355, 356, 357, 358, 359, 0,
	360, 0, 471, 220, 221, 222, 472, 223, 224, 225,
	0, 227, 226, 0, 361, 473, 228, 474, 721, 229,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 362,
	235, 475, 237, 238, 240, 239, 0, 2239, 0, 363,
	241, 364, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 365, 476, 247, 477, 366, 248, 249, 250,
	251, 252, 0, 253, 367, 254, 368, 255, 0, 256,
	257, 258, 259, 260, 369, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 478, 276, 277, 370, 278, 0, 282, 283,
	284, 285, 131, 287, 371, 286, 288, 289, 2286, 290,
	279, 280, 291, 479, 292, 372, 373, 293, 0, 299,
	294, 295, 281, 296, 298, 374, 297, 375, 0, 300,
	133, 301, 302, 303, 304, 305, 306, 307, 0, 376,
	377, 378, 0, 0, 308, 309, 379, 380, 0, 310,
	311, 312, 313, 0, 0, 314, 315, 316, 317, 0,
	318, 0, 381, 319, 320, 321, 902, 383, 0, 0,
	322, 0, 0, 0, 125, 323, 324, 325, 326, 327,
	72, 126, 2329, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1621, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 480, 176, 481, 482,
	483, 484, 328, 485, 486, 487, 488, 177, 178, 179,
	329, 330, 331, 332, 180, 333, 334, 489, 181, 335,
	336, 182, 183, 490, 491, 337, 338, 339, 492, 184,
	340, 493, 466, 494, 185, 186, 187, 1129, 188, 495,
	189, 190, 191, 496, 467, 192, 193, 497, 498, 500,
	499, 501, 502, 503, 194, 195, 391, 196, 341, 197,
	342, 343, 504, 198, 505, 199, 506, 200, 507, 508,
	201, 202, 509, 203, 510, 0, 511, 344, 204, 205,
	206, 345, 346, 512, 513, 514, 207, 208, 347, 348,
	349, 0, 209, 515, 210, 516, 517, 468, 518, 211,
	350, 519, 351, 520, 212, 213, 214, 215, 352, 353,
	470, 521, 219, 522, 216, 523, 469, 217, 354, 218,
	355, 356, 357, 358, 359, 524, 360, 525, 471, 220,
	221, 222, 472, 223, 224, 225, 526, 227, 226, 527,
	361, 473, 228, 474, 528, 229, 230, 529, 530, 231,
	0, 232, 233, 234, 236, 362, 235, 475, 237, 238,
	240, 239, 531, 532, 533, 363, 241, 364, 242, 243,
	534, 244, 535, 536, 245, 537, 538, 246, 365, 476,
	247, 477, 366, 248, 249, 250, 251, 252, 539, 253,
	367, 254, 368, 255, 540, 256, 257, 258, 259, 260,
	369, 261, 262, 541, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 542, 275, 478, 276,
	277, 370, 278, 0, 282, 283, 284, 285, 543, 287,
	371, 286, 288, 289, 544, 290, 279, 280, 291, 479,
	292, 372, 373, 293, 545, 299, 294, 295, 281, 296,
	298, 374, 297, 375, 546, 300, 547, 301, 302, 303,
	304, 305, 306, 307, 548, 376, 377, 378, 549, 550,
	308, 309, 379, 380, 551, 310, 311, 312, 313, 552,
	553, 314, 315, 316, 317, 554, 318, 555, 381, 319,
	320, 321, 382, 383, 556, 557, 322, 558, 559, 560,
	561, 323, 324, 325, 326, 327, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 461, 0,
	0, 0, 0, 0, 1379, 0, 0, 0, 0, 0,
	0, 0, 0, 1380, 174, 175, 480, 176, 481, 482,
	483, 484, 328, 485, 486, 487, 488, 177, 178, 179,
	329, 330, 331, 332, 180, 333, 334, 489, 181, 335,
	336, 182, 183, 490, 491, 337, 338, 339, 492, 184,
	340, 493, 466, 494, 185, 186, 187, 0, 188, 495,
	189, 190, 191, 496, 467, 192, 193, 497, 498, 500,
	499, 501, 502, 503, 194, 195, 391, 196, 341, 197,
	342, 343, 504, 198, 505, 199, 506, 200, 507, 508,
	201, 202, 509, 203, 510, 0, 511, 344, 204, 205,
	206, 345, 346, 512, 513, 514, 207, 208, 347, 348,
	349, 0, 209, 515, 210, 516, 517, 468, 518, 211,
	350, 519, 351, 520, 212, 213, 214, 215, 352, 353,
	470, 521, 219, 522, 216, 523, 469, 217, 354, 218,
	355, 356, 357, 358, 359, 524, 360, 525, 471, 220,
	221, 222, 472, 223, 224, 225, 526, 227, 226, 527,
	361, 473, 228, 474, 528, 229, 230, 529, 530, 231,
	0, 232, 233, 234, 236, 362, 235, 475, 237, 238,
	240, 239, 531, 532, 533, 363, 241, 364, 242, 243,
	534, 244, 535, 536, 245, 537, 538, 246, 365, 476,
	247, 477, 366, 248, 249, 250, 251, 252, 539, 253,
	367, 254, 368, 255, 540, 256, 257, 258, 259, 260,
	369, 261, 262, 541, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 542, 275, 478, 276,
	277, 370, 278, 0, 282, 283, 284, 285, 543, 287,
	371, 286, 288, 289, 544, 290, 279, 280, 291, 479,
	292, 372, 373, 293, 545, 299, 294, 295, 281, 296,
	298, 374, 297, 375, 546, 300, 547, 301, 302, 303,
	304, 305, 306, 307, 548, 376, 377, 378, 549, 550,
	308, 309, 379, 380, 551, 310, 311, 312, 313, 552,
	553, 314, 315, 316, 317, 554, 318, 555, 381, 319,
	320, 321, 382, 383, 556, 557, 322, 558, 559, 560,
	561, 323, 324, 325, 326, 327, 0, 0, 0, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2114, 174, 175, 480, 176, 481,
	482, 483, 484, 328, 485, 486, 487, 488, 177, 178,
	179, 329, 330, 331, 332, 180, 333, 334, 489, 181,
	335, 336, 182, 183, 490, 491, 337, 338, 339, 492,
	184, 340, 493, 466, 494, 185, 186, 187, 0, 188,
	495, 189, 190, 191, 496, 467, 192, 193, 497, 498,
	500, 499, 501, 502, 503, 194, 195, 391, 196, 341,
	197, 342, 343, 504, 198, 505, 199, 506, 200, 507,
	508, 201, 202, 509, 203, 510, 0, 511, 344, 204,
	205, 206, 345, 346, 512, 513, 514, 207, 208, 347,
	348, 349, 0, 209, 515, 210, 516, 517, 468, 518,
	211, 350, 519, 351, 520, 212, 213, 214, 215, 352,
	353, 470, 521, 219, 522, 216, 523, 469, 217, 354,
	218, 355, 356, 357, 358, 359, 524, 360, 525, 471,
	220, 221, 222, 472, 223, 224, 225, 526, 227, 226,
	527, 361, 473, 228, 474, 528, 229, 230, 529, 530,
	231, 0, 232, 233, 234, 236, 362, 235, 475, 237,
	238, 240, 239, 531, 532, 533, 363, 241, 364, 242,
	243, 534, 244, 535, 536, 245, 537, 538, 246, 365,
	476, 247, 477, 366, 248, 249, 250, 251, 252, 539,
	253, 367, 254, 368, 255, 540, 256, 257, 258, 259,
	260, 369, 261, 262, 541, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 542, 275, 478,
	276, 277, 370, 278, 0, 282, 283, 284, 285, 543,
	287, 371, 286, 288, 289, 544, 290, 279, 280, 291,
	479, 292, 372, 373, 293, 545, 299, 294, 295, 281,
	296, 298, 374, 297, 375, 546, 300, 547, 301, 302,
	303, 304, 305, 306, 307, 548, 376, 377, 378, 549,
	550, 308, 309, 379, 380, 551, 310, 311, 312, 313,
	552, 553, 314, 315, 316, 317, 554, 318, 555, 381,
	319, 320, 321, 382, 383, 556, 557, 322, 558, 559,
	560, 561, 323, 324, 325, 326, 327, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 0, 0, 174, 175, 480, 176, 481, 482, 483,
	484, 328, 485, 486, 487, 488, 177, 178, 179, 329,
	330, 331, 332, 180, 333, 334, 489, 181, 335, 336,
	182, 183, 490, 491, 337, 338, 339, 492, 184, 340,
	493, 466, 494, 185, 186, 187, 0, 188, 495, 189,
	190, 191, 496, 467, 192, 193, 497, 498, 500, 499,
	501, 502, 503, 194, 195, 391, 196, 341, 197, 342,
	343, 504, 198, 505, 199, 506, 200, 507, 508, 201,
	202, 509, 203, 510, 0, 511, 344, 204, 205, 206,
	345, 346, 512, 513, 514, 207, 208, 347, 348, 349,
	0, 209, 515, 210, 516, 517, 468, 518, 211, 350,
	519, 351, 520, 212, 213, 214, 215, 352, 353, 470,
	521, 219, 522, 216, 523, 469, 217, 354, 218, 355,
	356, 357, 358, 359, 524, 360, 525, 471, 220, 221,
	222, 472, 223, 224, 225, 526, 227, 226, 527, 361,
	473, 228, 474, 528, 229, 230, 529, 530, 231, 0,
	232, 233, 234, 236, 362, 235, 475, 237, 238, 240,
	239, 531, 532, 533, 363, 241, 364, 242, 243, 534,
	244, 535, 536, 245, 537, 538, 246, 365, 476, 247,
	477, 366, 248, 249, 250, 251, 252, 539, 253, 367,
	254, 368, 255, 540, 256, 257, 258, 259, 260, 369,
	261, 262, 541, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 542, 275, 478, 276, 277,
	370, 278, 0, 282, 283, 284, 285, 543, 287, 371,
	286, 288, 289, 544, 290, 279, 280, 291, 479, 292,
	372, 373, 293, 545, 299, 294, 295, 281, 296, 298,
	374, 297, 375, 546, 300, 547, 301, 302, 303, 304,
	305, 306, 307, 548, 376, 377, 378, 549, 550, 308,
	309, 379, 380, 551, 310, 311, 312, 313, 552, 553,
	314, 315, 316, 317, 554, 318, 555, 381, 319, 320,
	321, 382, 383, 556, 557, 322, 558, 559, 560, 561,
	323, 324, 325, 326, 327, 1512, 0, 786, 775, 776,
	773, 774, 765, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 1509, 176, 0, 0, 0,
	0, 803, 768, 0, 0, 0, 177, 178, 179, 329,
	818, 331, 819, 180, 820, 821, 0, 181, 335, 336,
	182, 183, 771, 802, 822, 823, 339, 0, 184, 814,
	0, 794, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 467, 192, 193, 0, 795, 796, 798,
	0, 797, 799, 194, 195, 391, 196, 824, 197, 825,
	826, 0, 198, 0, 199, 0, 200, 1510, 0, 817,
	202, 0, 203, 0, 0, 0, 759, 204, 205, 206,
	804, 805, 782, 0, 0, 207, 208, 827, 828, 829,
	0, 209, 0, 210, 0, 0, 468, 0, 211, 815,
	0, 351, 0, 212, 213, 214, 215, 811, 813, 470,
	0, 219, 0, 216, 0, 469, 217, 830, 218, 831,
	832, 833, 834, 835, 0, 793, 0, 471, 220, 221,
	222, 472, 223, 224, 225, 0, 227, 226, 0, 816,
	473, 228, 474, 0, 229, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 362, 235, 475, 237, 238, 240,
	239, 754, 0, 783, 812, 241, 836, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 365, 476, 247,
	477, 806, 248, 249, 250, 251, 252, 0, 253, 807,
	254, 368, 255, 0, 256, 257, 258, 259, 260, 837,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 478, 276, 277,
	760, 278, 0, 282, 283, 284, 285, 0, 287, 371,
	286, 288, 289, 800, 290, 279, 280, 291, 479, 292,
	838, 373, 293, 0, 299, 294, 295, 281, 296, 298,
	839, 297, 808, 0, 300, 0, 301, 302, 303, 304,
	305, 306, 307, 0, 376, 840, 841, 0, 0, 308,
	309, 809, 810, 781, 310, 311, 312, 313, 0, 0,
	314, 315, 316, 317, 801, 318, 0, 381, 319, 320,
	321, 382, 842, 1508, 0, 322, 0, 0, 0, 0,
	323, 324, 325, 326, 327, 755, 0, 0, 0, 0,
	0, 753, 0, 0, 0, 0, 751, 752, 1511, 786,
	775, 776, 773, 774, 765, 761, 1506, 0, 0, 0,
	0, 764, 0, 0, 0, 174, 175, 0, 176, 0,
	0, 0, 0, 803, 768, 0, 0, 0, 177, 178,
	179, 329, 818, 331, 819, 180, 820, 821, 0, 181,
	335, 336, 182, 183, 771, 802, 822, 823, 339, 0,
	184, 814, 0, 794, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 467, 192, 193, 0, 795,
	796, 798, 0, 797, 799, 194, 195, 391, 196, 824,
	197, 825, 826, 1031, 198, 0, 199, 0, 200, 0,
	0, 817, 202, 0, 203, 0, 0, 0, 759, 204,
	205, 206, 804, 805, 782, 0, 0, 207, 208, 827,
	828, 829, 0, 209, 0, 210, 0, 0, 468, 0,
	211, 815, 0, 351, 0, 212, 213, 214, 215, 811,
	813, 470, 0, 219, 0, 216, 0, 469, 217, 830,
	218, 831, 832, 833, 834, 835, 0, 793, 0, 471,
	220, 221, 222, 472, 223, 224, 225, 0, 227, 226,
	0, 816, 473, 228, 474, 0, 229, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 362, 235, 475, 237,
	238, 240, 239, 754, 0, 783, 812, 241, 836, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 365,
	476, 247, 477, 806, 248, 249, 250, 251, 252, 0,
	253, 807, 254, 368, 255, 0, 256, 257, 258, 259,
	260, 837, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 478,
	276, 277, 760, 278, 0, 282, 283, 284, 285, 131,
	287, 371, 286, 288, 289, 800, 290, 279, 280, 291,
	479, 292, 838, 373, 293, 0, 299, 294, 295, 281,
	296, 298, 839, 297, 808, 0, 300, 133, 301, 302,
	303, 304, 305, 306, 307, 0, 376, 840, 841, 0,
	0, 308, 309, 809, 810, 781, 310, 311, 312, 313,
	0, 0, 314, 315, 316, 317, 801, 318, 0, 381,
	319, 320, 321, 902, 842, 0, 0, 322, 0, 0,
	0, 125, 323, 324, 325, 326, 327, 755, 126, 0,
	0, 0, 0, 753, 0, 0, 0, 0, 751, 752,
	0, 0, 0, 0, 0, 0, 0, 1132, 0, 0,
	0, 0, 664, 764, 786, 775, 776, 773, 774, 765,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 803, 768,
	0, 0, 0, 177, 178, 179, 329, 818, 331, 819,
	180, 820, 821, 0, 181, 335, 336, 182, 183, 771,
	802, 822, 823, 339, 0, 184, 814, 0, 794, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	467, 192, 193, 0, 795, 796, 798, 0, 797, 799,
	194, 195, 391, 196, 824, 197, 825, 826, 0, 198,
	0, 199, 0, 200, 0, 0, 817, 202, 0, 203,
	0, 0, 0, 759, 204, 205, 206, 804, 805, 782,
	0, 0, 207, 208, 827, 828, 829, 0, 209, 0,
	210, 0, 0, 468, 0, 211, 815, 0, 351, 0,
	212, 213, 214, 215, 811, 813, 470, 0, 219, 0,
	216, 0, 469, 217, 830, 218, 831, 832, 833, 834,
	835, 0, 793, 0, 471, 220, 221, 222, 472, 223,
	224, 225, 0, 227, 226, 0, 816, 473, 228, 474,
	0, 229, 230, 0, 0, 231, 0, 232, 233, 234,
	236, 362, 235, 475, 237, 238, 240, 239, 754, 0,
	783, 812, 241, 836, 242, 243, 0, 244, 0, 0,
	245, 0, 0, 246, 365, 476, 247, 477, 806, 248,
	249, 250, 251, 252, 0, 253, 807, 254, 368, 255,
	0, 256, 257, 258, 259, 260, 837, 261, 262, 0,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 0, 275, 478, 276, 277, 760, 278, 0,
	282, 283, 284, 285, 131, 287, 371, 286, 288, 289,
	800, 290, 279, 280, 291, 479, 292, 838, 373, 293,
	0, 299, 294, 295, 281, 296, 298, 839, 297, 808,
	0, 300, 133, 301, 302, 303, 304, 305, 306, 307,
	0, 376, 840, 841, 0, 0, 308, 309, 809, 810,
	781, 310, 311, 312, 313, 0, 0, 314, 315, 316,
	317, 801, 318, 0, 381, 319, 320, 321, 902, 842,
	0, 0, 322, 0, 0, 0, 125, 323, 324, 325,
	326, 327, 755, 126, 0, 0, 0, 0, 753, 0,
	0, 0, 0, 751, 752, 786, 775, 776, 773, 774,
	765, 0, 1132, 0, 0, 0, 0, 0, 764, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 803,
	768, 0, 0, 0, 177, 178, 179, 329, 818, 331,
	819, 180, 820, 821, 0, 181, 335, 336, 182, 183,
	771, 802, 822, 823, 339, 0, 184, 814, 0, 794,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 467, 192, 193, 0, 795, 796, 798, 0, 797,
	799, 194, 195, 391, 196, 824, 197, 825, 826, 0,
	198, 0, 199, 0, 200, 0, 0, 817, 202, 0,
	203, 0, 0, 0, 759, 204, 205, 206, 804, 805,
	782, 0, 0, 207, 208, 827, 828, 829, 0, 209,
	0, 210, 0, 0, 468, 0, 211, 815, 0, 351,
	0, 212, 213, 214, 215, 811, 813, 470, 0, 219,
	0, 216, 0, 469, 217, 830, 218, 831, 832, 833,
	834, 835, 0, 793, 0, 471, 220, 221, 222, 472,
	223, 224, 225, 0, 227, 226, 0, 816, 473, 228,
	474, 0, 229, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 362, 235, 475, 237, 238, 240, 239, 754,
	0, 783, 812, 241, 836, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 365, 476, 247, 477, 806,
	248, 249, 250, 251, 252, 0, 253, 807, 254, 368,
	255, 0, 256, 257, 258, 259, 260, 837, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 478, 276, 277, 760, 278,
	0, 282, 283, 284, 285, 131, 287, 371, 286, 288,
	289, 800, 290, 279, 280, 291, 479, 292, 838, 373,
	293, 0, 299, 294, 295, 281, 296, 298, 839, 297,
	808, 0, 300, 133, 301, 302, 303, 304, 305, 306,
	307, 0, 376, 840, 841, 0, 0, 308, 309, 809,
	810, 781, 310, 311, 312, 313, 0, 0, 314, 315,
	316, 317, 801, 318, 0, 381, 319, 320, 321, 902,
	842, 0, 0, 322, 0, 0, 0, 125, 323, 324,
	325, 326, 327, 755, 126, 0, 0, 0, 0, 753,
	0, 0, 0, 0, 751, 752, 786, 775, 776, 773,
	774, 765, 0, 1132, 0, 0, 0, 0, 0, 764,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	803, 768, 0, 0, 0, 177, 178, 179, 329, 818,
	331, 819, 180, 820, 821, 1564, 181, 335, 336, 182,
	183, 771, 802, 822, 823, 339, 0, 184, 814, 0,
	794, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 467, 192, 193, 0, 795, 796, 798, 0,
	797, 799, 194, 195, 391, 196, 824, 197, 825, 826,
	0, 198, 0, 199, 0, 200, 0, 0, 817, 202,
	0, 203, 0, 0, 0, 759, 204, 205, 206, 804,
	805, 782, 0, 0, 207, 208, 827, 828, 829, 0,
	209, 0, 210, 0, 1569, 468, 0, 211, 815, 0,
	351, 0, 212, 213, 214, 215, 811, 813, 470, 0,
	219, 0, 216, 0, 469, 217, 830, 218, 831, 832,
	833, 834, 835, 0, 793, 0, 471, 220, 221, 222,
	472, 223, 224, 225, 0, 227, 226, 1565, 816, 473,
	228, 474, 0, 229, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 362, 235, 475, 237, 238, 240, 239,
	754, 0, 783, 812, 241, 836, 242, 243, 0, 244,
	0, 0, 245, 0, 0, 246, 365, 476, 247, 477,
	806, 248, 249, 250, 251, 252, 0, 253, 807, 254,
	368, 255, 0, 256, 257, 258, 259, 260, 837, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 478, 276, 277, 760,
	278, 0, 282, 283, 284, 285, 0, 287, 371, 286,
	288, 289, 800, 290, 279, 280, 291, 479, 292, 838,
	373, 293, 0, 299, 294, 295, 281, 296, 298, 839,
	297, 808, 0, 300, 0, 301, 302, 303, 304, 305,
	306, 307, 0, 376, 840, 841, 0, 1566, 308, 309,
	809, 810, 781, 310, 311, 312, 313, 0, 0, 314,
	315, 316, 317, 801, 318, 0, 381, 319, 320, 321,
	382, 842, 0, 0, 322, 0, 0, 0, 0, 323,
	324, 325, 326, 327, 755, 0, 0, 0, 0, 0,
	753, 0, 0, 0, 0, 751, 752, 786, 775, 776,
	773, 774, 765, 0, 761, 0, 0, 0, 0, 0,
	764, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 803, 768, 0, 0, 0, 177, 178, 179, 329,
	818, 331, 819, 180, 820, 821, 0, 181, 335, 336,
	182, 183, 771, 802, 822, 823, 339, 0, 184, 814,
	0, 794, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 467, 192, 193, 0, 795, 796, 798,
	0, 797, 799, 194, 195, 391, 196, 824, 197, 825,
	826, 0, 198, 0, 199, 0, 200, 0, 0, 817,
	202, 0, 203, 0, 0, 0, 759, 204, 205, 206,
	804, 805, 782, 0, 0, 207, 208, 827, 828, 829,
	0, 209, 0, 210, 0, 0, 468, 0, 211, 815,
	0, 351, 0, 212, 213, 214, 215, 811, 813, 470,
	0, 219, 0, 216, 0, 469, 217, 830, 218, 831,
	832, 833, 834, 835, 0, 793, 0, 471, 220, 221,
	222, 472, 223, 224, 225, 0, 227, 226, 0, 816,
	473, 228, 474, 0, 229, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 362, 235, 475, 237, 238, 240,
	239, 754, 2085, 783, 812, 241, 836, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 365, 476, 247,
	477, 806, 248, 249, 250, 251, 252, 0, 253, 807,
	254, 368, 255, 0, 256, 257, 258, 259, 260, 837,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 478, 276, 277,
	760, 278, 0, 282, 283, 284, 285, 0, 287, 371,
	286, 288, 289, 800, 290, 279, 280, 291, 479, 292,
	838, 373, 293, 0, 299, 294, 295, 281, 296, 298,
	839, 297, 808, 0, 300, 0, 301, 302, 303, 304,
	305, 306, 307, 0, 376, 840, 841, 0, 0, 308,
	309, 809, 810, 781, 310, 311, 312, 313, 0, 0,
	314, 315, 316, 317, 801, 318, 0, 381, 319, 320,
	321, 382, 842, 0, 0, 322, 0, 0, 0, 0,
	323, 324, 325, 326, 327, 755, 0, 0, 0, 0,
	0, 753, 0, 0, 0, 0, 751, 752, 1026, 786,
	775, 776, 773, 774, 765, 761, 0, 0, 0, 0,
	0, 764, 0, 0, 0, 174, 175, 0, 176, 0,
	0, 0, 0, 803, 768, 0, 0, 0, 177, 178,
	179, 329, 818, 331, 819, 180, 820, 821, 0, 181,
	335, 336, 182, 183, 771, 802, 822, 823, 339, 0,
	184, 814, 0, 794, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 467, 192, 193, 0, 795,
	796, 798, 0, 797, 799, 194, 195, 391, 196, 824,
	197, 825, 826, 0, 198, 0, 199, 0, 200, 0,
	0, 817, 202, 0, 203, 0, 0, 0, 759, 204,
	205, 206, 804, 805, 782, 0, 0, 207, 208, 827,
	828, 829, 0, 209, 0, 210, 0, 0, 468, 0,
	211, 815, 0, 351, 0, 212, 213, 214, 215, 811,
	813, 470, 0, 219, 1352, 216, 0, 469, 217, 830,
	218, 831, 832, 833, 834, 835, 0, 793, 0, 471,
	220, 221, 222, 472, 223, 224, 225, 0, 227, 226,
	0, 816, 473, 228, 474, 0, 229, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 362, 235, 475, 237,
	238, 240, 239, 754, 0, 783, 812, 241, 836, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 365,
	476, 247, 477, 806, 248, 249, 250, 251, 252, 0,
	253, 807, 254, 368, 255, 1351, 256, 257, 258, 259,
	260, 837, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 478,
	276, 277, 760, 278, 0, 282, 283, 284, 285, 0,
	287, 371, 286, 288, 289, 800, 290, 279, 280, 291,
	479, 292, 838, 373, 293, 0, 299, 294, 295, 281,
	296, 298, 839, 297, 808, 0, 300, 0, 301, 302,
	303, 304, 305, 306, 307, 0, 376, 840, 841, 0,
	0, 308, 309, 809, 810, 781, 310, 311, 312, 313,
	0, 0, 314, 315, 316, 317, 801, 318, 0, 381,
	319, 320, 321, 382, 842, 0, 0, 322, 0, 0,
	0, 0, 323, 324, 325, 326, 327, 755, 0, 0,
	0, 0, 0, 753, 0, 0, 0, 0, 751, 752,
	786, 775, 776, 773, 774, 765, 0, 761, 0, 0,
	0, 0, 0, 764, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 803, 768, 0, 0, 0, 177,
	178, 179, 329, 818, 331, 819, 180, 820, 821, 0,
	181, 335, 336, 182, 183, 771, 802, 822, 823, 339,
	0, 184, 814, 0, 794, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 467, 192, 193, 0,
	795, 796, 798, 0, 797, 799, 194, 195, 391, 196,
	824, 197, 825, 826, 0, 198, 0, 199, 0, 200,
	0, 0, 817, 202, 0, 203, 0, 0, 0, 759,
	204, 205, 206, 804, 805, 782, 0, 0, 207, 208,
	827, 828, 829, 0, 209, 0, 210, 0, 0, 468,
	0, 211, 815, 0, 351, 0, 212, 213, 214, 215,
	811, 813, 470, 0, 219, 0, 216, 0, 469, 217,
	830, 218, 831, 832, 833, 834, 835, 0, 793, 0,
	471, 220, 221, 222, 472, 223, 224, 225, 0, 227,
	226, 0, 816, 473, 228, 474, 0, 229, 230, 0,
	0, 231, 0, 232, 233, 234, 236, 362, 235, 475,
	237, 238, 240, 239, 754, 0, 783, 812, 241, 836,
	242, 243, 0, 244, 0, 0, 245, 0, 0, 246,
	365, 476, 247, 477, 806, 248, 249, 250, 251, 252,
	0, 253, 807, 254, 368, 255, 0, 256, 257, 258,
	259, 260, 837, 261, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	478, 276, 277, 760, 278, 0, 282, 283, 284, 285,
	0, 287, 371, 286, 288, 289, 800, 290, 279, 280,
	291, 479, 292, 838, 373, 293, 0, 299, 294, 295,
	281, 296, 298, 839, 297, 808, 0, 300, 0, 301,
	302, 303, 304, 305, 306, 307, 0, 376, 840, 841,
	0, 0, 308, 309, 809, 810, 781, 310, 311, 312,
	313, 0, 0, 314, 315, 316, 317, 801, 318, 0,
	381, 319, 320, 321, 382, 842, 0, 0, 322, 0,
	0, 0, 0, 323, 324, 325, 326, 327, 755, 0,
	0, 0, 0, 0, 753, 0, 0, 0, 0, 751,
	752, 0, 0, 0, 0, 0, 1136, 1501, 761, 0,
	0, 0, 0, 0, 764, 786, 775, 776, 773, 774,
	765, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 803,
	768, 0, 0, 0, 177, 178, 179, 329, 818, 331,
	819, 180, 820, 821, 0, 181, 335, 336, 182, 183,
	771, 802, 822, 823, 339, 0, 184, 814, 0, 794,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 467, 192, 193, 0, 795, 796, 798, 0, 797,
	799, 194, 195, 391, 196, 824, 197, 825, 826, 1031,
	198, 0, 199, 0, 200, 0, 0, 817, 202, 0,
	203, 0, 0, 0, 759, 204, 205, 206, 804, 805,
	782, 0, 0, 207, 208, 827, 828, 829, 0, 209,
	0, 210, 0, 0, 468, 0, 211, 815, 0, 351,
	0, 212, 213, 214, 215, 811, 813, 470, 0, 219,
	0, 216, 0, 469, 217, 830, 218, 831, 832, 833,
	834, 835, 0, 793, 0, 471, 220, 221, 222, 472,
	223, 224, 225, 0, 227, 226, 0, 816, 473, 228,
	474, 0, 229, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 362, 235, 475, 237, 238, 240, 239, 754,
	0, 783, 812, 241, 836, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 365, 476, 247, 477, 806,
	248, 249, 250, 251, 252, 0, 253, 807, 254, 368,
	255, 0, 256, 257, 258, 259, 260, 837, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 478, 276, 277, 760, 278,
	0, 282, 283, 284, 285, 0, 287, 371, 286, 288,
	289, 800, 290, 279, 280, 291, 479, 292, 838, 373,
	293, 0, 299, 294, 295, 281, 296, 298, 839, 297,
	808, 0, 300, 0, 301, 302, 303, 304, 305, 306,
	307, 0, 376, 840, 841, 0, 0, 308, 309, 809,
	810, 781, 310, 311, 312, 313, 0, 0, 314, 315,
	316, 317, 801, 318, 0, 381, 319, 320, 321, 382,
	842, 0, 0, 322, 0, 0, 0, 0, 323, 324,
	325, 326, 327, 755, 0, 0, 0, 0, 0, 753,
	0, 0, 0, 0, 751, 752, 786, 775, 776, 773,
	774, 765, 0, 761, 0, 0, 0, 0, 0, 764,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	803, 768, 0, 0, 0, 177, 178, 179, 329, 818,
	331, 819, 180, 820, 821, 0, 181, 335, 336, 182,
	183, 771, 802, 822, 823, 339, 0, 184, 814, 0,
	794, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 467, 192, 193, 0, 795, 796, 798, 0,
	797, 799, 194, 195, 391, 196, 824, 197, 825, 826,
	0, 198, 0, 199, 0, 200, 0, 0, 817, 202,
	0, 203, 0, 0, 0, 759, 204, 205, 206, 804,
	805, 782, 0, 0, 207, 208, 827, 828, 829, 0,
	209, 0, 210, 0, 0, 468, 0, 211, 815, 0,
	351, 0, 212, 213, 214, 215, 811, 813, 470, 0,
	219, 0, 216, 0, 469, 217, 830, 218, 831, 832,
	833, 834, 835, 0, 793, 0, 471, 220, 221, 222,
	472, 223, 224, 225, 0, 227, 226, 0, 816, 473,
	228, 474, 0, 229, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 362, 235, 475, 237, 238, 240, 239,
	754, 0, 783, 812, 241, 836, 242, 243, 0, 244,
	0, 0, 245, 0, 0, 246, 365, 476, 247, 477,
	806, 248, 249, 250, 251, 252, 0, 253, 807, 254,
	368, 255, 0, 256, 257, 258, 259, 260, 837, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 478, 276, 277, 760,
	278, 0, 282, 283, 284, 285, 0, 287, 371, 286,
	288, 289, 800, 290, 279, 280, 291, 479, 292, 838,
	373, 293, 0, 299, 294, 295, 281, 296, 298, 839,
	297, 808, 0, 300, 0, 301, 302, 303, 304, 305,
	306, 307, 0, 376, 840, 841, 0, 0, 308, 309,
	809, 810, 781, 310, 311, 312, 313, 0, 0, 314,
	315, 316, 317, 801, 318, 0, 381, 319, 320, 321,
	382, 842, 0, 0, 322, 0, 0, 0, 0, 323,
	324, 325, 326, 327, 755, 0, 0, 0, 0, 0,
	753, 0, 0, 0, 0, 751, 752, 786, 775, 776,
	773, 774, 765, 0, 761, 2053, 0, 0, 0, 0,
	764, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 803, 768, 0, 0, 0, 177, 178, 179, 329,
	818, 331, 819, 180, 820, 821, 0, 181, 335, 336,
	182, 183, 771, 802, 822, 823, 339, 0, 184, 814,
	0, 794, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 467, 192, 193, 0, 795, 796, 798,
	0, 797, 799, 194, 195, 391, 196, 824, 197, 825,
	826, 0, 198, 0, 199, 0, 200, 0, 0, 817,
	202, 0, 203, 0, 0, 0, 759, 204, 205, 206,
	804, 805, 782, 0, 0, 207, 208, 827, 828, 829,
	0, 209, 0, 210, 0, 0, 468, 0, 211, 815,
	0, 351, 0, 212, 213, 214, 215, 811, 813, 470,
	0, 219, 0, 216, 0, 469, 217, 830, 218, 831,
	832, 833, 834, 835, 0, 793, 0, 471, 220, 221,
	222, 472, 223, 224, 225, 0, 227, 226, 0, 816,
	473, 228, 474, 0, 229, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 362, 235, 475, 237, 238, 240,
	239, 754, 0, 783, 812, 241, 836, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 365, 476, 247,
	477, 806, 248, 249, 250, 251, 252, 0, 253, 807,
	254, 368, 255, 0, 256, 257, 258, 259, 260, 837,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 478, 276, 277,
	760, 278, 0, 282, 283, 284, 285, 0, 287, 371,
	286, 288, 289, 800, 290, 279, 280, 291, 479, 292,
	838, 373, 293, 0, 299, 294, 295, 281, 296, 298,
	839, 297, 808, 0, 300, 0, 301, 302, 303, 304,
	305, 306, 307, 0, 376, 840, 841, 0, 0, 308,
	309, 809, 810, 781, 310, 311, 312, 313, 0, 0,
	314, 315, 316, 317, 801, 318, 0, 381, 319, 320,
	321, 382, 842, 2002, 0, 322, 0, 0, 0, 0,
	323, 324, 325, 326, 327, 755, 0, 0, 0, 0,
	0, 753, 0, 0, 0, 0, 751, 752, 786, 775,
	776, 773, 774, 765, 0, 761, 0, 0, 0, 0,
	0, 764, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 803, 768, 0, 0, 0, 177, 178, 179,
	329, 818, 331, 819, 180, 820, 821, 0, 181, 335,
	336, 182, 183, 771, 802, 822, 823, 339, 0, 184,
	814, 0, 794, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 467, 192, 193, 0, 795, 796,
	798, 0, 797, 799, 194, 195, 391, 196, 824, 197,
	825, 826, 0, 198, 0, 199, 0, 200, 0, 0,
	817, 202, 0, 203, 0, 0, 0, 759, 204, 205,
	206, 804, 805, 782, 0, 0, 207, 208, 827, 828,
	829, 0, 209, 0, 210, 0, 0, 468, 0, 211,
	815, 0, 351, 0, 212, 213, 214, 215, 811, 813,
	470, 0, 219, 0, 216, 0, 469, 217, 830, 218,
	831, 832, 833, 834, 835, 0, 793, 0, 471, 220,
	221, 222, 472, 223, 224, 225, 0, 227, 226, 0,
	816, 473, 228, 474, 0, 229, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 362, 235, 475, 237, 238,
	240, 239, 754, 0, 783, 812, 241, 836, 242, 243,
	0, 244, 0, 0, 245, 0, 0, 246, 365, 476,
	247, 477, 806, 248, 249, 250, 251, 252, 0, 253,
	807, 254, 368, 255, 0, 256, 257, 258, 259, 260,
	837, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 478, 276,
	277, 760, 278, 0, 282, 283, 284, 285, 0, 287,
	371, 286, 288, 289, 800, 290, 279, 280, 291, 479,
	292, 838, 373, 293, 0, 299, 294, 295, 281, 296,
	298, 839, 297, 808, 0, 300, 0, 301, 302, 303,
	304, 305, 306, 307, 0, 376, 840, 841, 0, 0,
	308, 309, 809, 810, 781, 310, 311, 312, 313, 0,
	0, 314, 315, 316, 317, 801, 318, 0, 381, 319,
	320, 321, 382, 842, 0, 0, 322, 0, 0, 0,
	0, 323, 324, 325, 326, 327, 755, 0, 0, 0,
	0, 0, 753, 0, 0, 0, 0, 751, 752, 786,
	775, 776, 773, 774, 765, 0, 761, 1992, 0, 0,
	0, 0, 764, 0, 0, 174, 175, 0, 176, 0,
	0, 0, 0, 803, 768, 0, 0, 0, 177, 178,
	179, 329, 818, 331, 819, 180, 820, 821, 0, 181,
	335, 336, 182, 183, 771, 802, 822, 823, 339, 0,
	184, 814, 0, 794, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 467, 192, 193, 0, 795,
	796, 798, 0, 797, 799, 194, 195, 391, 196, 824,
	197, 825, 826, 0, 198, 0, 199, 0, 200, 0,
	0, 817, 202, 0, 203, 0, 0, 0, 759, 204,
	205, 206, 804, 805, 782, 0, 0, 207, 208, 827,
	828, 829, 0, 209, 0, 210, 0, 1569, 468, 0,
	211, 815, 0, 351, 0, 212, 213, 214, 215, 811,
	813, 470, 0, 219, 0, 216, 0, 469, 217, 830,
	218, 831, 832, 833, 834, 835, 0, 793, 0, 471,
	220, 221, 222, 472, 223, 224, 225, 0, 227, 226,
	0, 816, 473, 228, 474, 0, 229, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 362, 235, 475, 237,
	238, 240, 239, 754, 0, 783, 812, 241, 836, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 365,
	476, 247, 477, 806, 248, 249, 250, 251, 252, 0,
	253, 807, 254, 368, 255, 0, 256, 257, 258, 259,
	260, 837, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 478,
	276, 277, 760, 278, 0, 282, 283, 284, 285, 0,
	287, 371, 286, 288, 289, 800, 290, 279, 280, 291,
	479, 292, 838, 373, 293, 0, 299, 294, 295, 281,
	296, 298, 839, 297, 808, 0, 300, 0, 301, 302,
	303, 304, 305, 306, 307, 0, 376, 840, 841, 0,
	0, 308, 309, 809, 810, 781, 310, 311, 312, 313,
	0, 0, 314, 315, 316, 317, 801, 318, 0, 381,
	319, 320, 321, 382, 842, 0, 0, 322, 0, 0,
	0, 0, 323, 324, 325, 326, 327, 755, 0, 0,
	0, 0, 0, 753, 0, 0, 0, 0, 751, 752,
	786, 775, 776, 773, 774, 765, 0, 761, 0, 0,
	0, 0, 0, 764, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 803, 768, 0, 0, 0, 177,
	178, 179, 329, 818, 331, 819, 180, 820, 821, 0,
	181, 335, 336, 182, 183, 771, 802, 822, 823, 339,
	0, 184, 814, 0, 794, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 467, 192, 193, 0,
	795, 796, 798, 0, 797, 799, 194, 195, 391, 196,
	824, 197, 825, 826, 0, 198, 0, 199, 0, 200,
	0, 0, 817, 202, 0, 203, 0, 0, 0, 759,
	204, 205, 206, 804, 805, 782, 0, 0, 207, 208,
	827, 828, 829, 0, 209, 0, 210, 0, 0, 468,
	0, 211, 815, 0, 351, 0, 212, 213, 214, 215,
	811, 813, 470, 0, 219, 0, 216, 0, 469, 217,
	830, 218, 831, 832, 833, 834, 835, 0, 793, 0,
	471, 220, 221, 222, 472, 223, 224, 225, 0, 227,
	226, 0, 816, 473, 228, 474, 0, 229, 230, 0,
	0, 231, 0, 232, 233, 234, 236, 362, 235, 475,
	237, 238, 240, 239, 754, 0, 783, 812, 241, 836,
	242, 243, 0, 244, 0, 0, 245, 0, 0, 246,
	365, 476, 247, 477, 806, 248, 249, 250, 251, 252,
	0, 253, 807, 254, 368, 255, 0, 256, 257, 258,
	259, 260, 837, 261, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	478, 276, 277, 760, 278, 0, 282, 283, 284, 285,
	0, 287, 371, 286, 288, 289, 800, 290, 279, 280,
	291, 479, 292, 838, 373, 293, 0, 299, 294, 295,
	281, 296, 298, 839, 297, 808, 0, 300, 0, 301,
	302, 303, 304, 305, 306, 307, 0, 376, 840, 841,
	0, 0, 308, 309, 809, 810, 781, 310, 311, 312,
	313, 0, 0, 314, 315, 316, 317, 801, 318, 0,
	381, 319, 320, 321, 382, 842, 0, 0, 322, 0,
	0, 0, 0, 323, 324, 325, 326, 327, 755, 0,
	0, 0, 0, 0, 753, 0, 0, 0, 0, 751,
	752, 1026, 0, 0, 0, 0, 0, 0, 761, 0,
	0, 0, 0, 1578, 764, 786, 775, 776, 773, 774,
	765, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 803,
	768, 0, 0, 0, 177, 178, 179, 329, 818, 331,
	819, 180, 820, 821, 0, 181, 335, 336, 182, 183,
	771, 802, 822, 823, 339, 0, 184, 814, 0, 794,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 467, 192, 193, 0, 795, 796, 798, 0, 797,
	799, 194, 195, 391, 196, 824, 197, 825, 826, 0,
	198, 0, 199, 0, 200, 0, 0, 817, 202, 0,
	203, 0, 0, 0, 759, 204, 205, 206, 804, 805,
	782, 0, 0, 207, 208, 827, 828, 829, 0, 209,
	0, 210, 0, 0, 468, 0, 211, 815, 0, 351,
	0, 212, 213, 214, 215, 811, 813, 470, 0, 219,
	0, 216, 0, 469, 217, 830, 218, 831, 832, 833,
	834, 835, 0, 793, 0, 471, 220, 221, 222, 472,
	223, 224, 225, 0, 227, 226, 0, 816, 473, 228,
	474, 0, 229, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 362, 235, 475, 237, 238, 240, 239, 754,
	0, 783, 812, 241, 836, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 365, 476, 247, 477, 806,
	248, 249, 250, 251, 252, 0, 253, 807, 254, 368,
	255, 0, 256, 257, 258, 259, 260, 837, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 478, 276, 277, 760, 278,
	0, 282, 283, 284, 285, 0, 287, 371, 286, 288,
	289, 800, 290, 279, 280, 291, 479, 292, 838, 373,
	293, 0, 299, 294, 295, 281, 296, 298, 839, 297,
	808, 0, 300, 0, 301, 302, 303, 304, 305, 306,
	307, 0, 376, 840, 841, 0, 0, 308, 309, 809,
	810, 781, 310, 311, 312, 313, 0, 0, 314, 315,
	316, 317, 801, 318, 0, 381, 319, 320, 321, 382,
	842, 0, 0, 322, 0, 0, 0, 0, 323, 324,
	325, 326, 327, 755, 0, 0, 0, 0, 0, 753,
	0, 0, 0, 0, 751, 752, 0, 0, 0, 0,
	0, 0, 0, 761, 0, 0, 0, 0, 1576, 764,
	786, 775, 776, 773, 774, 765, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 803, 768, 0, 0, 0, 177,
	178, 179, 329, 818, 331, 819, 180, 820, 821, 0,
	181, 335, 336, 182, 183, 771, 802, 822, 823, 339,
	0, 184, 814, 0, 794, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 467, 192, 193, 0,
	795, 796, 798, 0, 797, 799, 194, 195, 391, 196,
	824, 197, 825, 826, 0, 198, 0, 199, 0, 200,
	0, 0, 817, 202, 0, 203, 0, 0, 0, 759,
	204, 205, 206, 804, 805, 782, 0, 0, 207, 208,
	827, 828, 829, 0, 209, 0, 210, 0, 0, 468,
	0, 211, 815, 0, 351, 0, 212, 213, 214, 215,
	811, 813, 470, 0, 219, 0, 216, 0, 469, 217,
	830, 218, 831, 832, 833, 834, 835, 0, 793, 0,
	471, 220, 221, 222, 472, 223, 224, 225, 0, 227,
	226, 0, 816, 473, 228, 474, 0, 229, 230, 0,
	0, 231, 0, 232, 233, 234, 236, 362, 235, 475,
	237, 238, 240, 239, 754, 0, 783, 812, 241, 836,
	242, 243, 0, 244, 0, 0, 245, 0, 0, 246,
	365, 476, 247, 477, 806, 248, 249, 250, 251, 252,
	0, 253, 807, 254, 368, 255, 0, 256, 257, 258,
	259, 260, 837, 261, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	478, 276, 277, 760, 278, 0, 282, 283, 284, 285,
	0, 287, 371, 286, 288, 289, 800, 290, 279, 280,
	291, 479, 292, 838, 373, 293, 0, 299, 294, 295,
	281, 296, 298, 839, 297, 808, 0, 300, 0, 301,
	302, 303, 304, 305, 306, 307, 0, 376, 840, 841,
	0, 0, 308, 309, 809, 810, 781, 310, 311, 312,
	313, 0, 0, 314, 315, 316, 317, 801, 318, 0,
	381, 319, 320, 321, 382, 842, 0, 0, 322, 0,
	0, 0, 0, 323, 324, 325, 326, 327, 755, 0,
	0, 0, 0, 0, 753, 0, 0, 0, 0, 751,
	752, 0, 0, 0, 0, 0, 0, 0, 761, 0,
	0, 0, 0, 1560, 764, 786, 775, 776, 773, 774,
	765, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 803,
	768, 0, 0, 0, 177, 178, 179, 329, 818, 331,
	819, 180, 820, 821, 0, 181, 335, 336, 182, 183,
	771, 802, 822, 823, 339, 0, 184, 814, 0, 794,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 467, 192, 193, 0, 795, 796, 798, 0, 797,
	799, 194, 195, 391, 196, 824, 197, 825, 826, 0,
	198, 0, 199, 0, 200, 0, 0, 817, 202, 0,
	203, 0, 0, 0, 759, 204, 205, 206, 804, 805,
	782, 0, 0, 207, 208, 827, 828, 829, 0, 209,
	0, 210, 0, 0, 468, 0, 211, 815, 0, 351,
	0, 212, 213, 214, 215, 811, 813, 470, 0, 219,
	0, 216, 0, 469, 217, 830, 218, 831, 832, 833,
	834, 835, 0, 793, 0, 471, 220, 221, 222, 472,
	223, 224, 225, 0, 227, 226, 0, 816, 473, 228,
	474, 0, 229, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 362, 235, 475, 237, 238, 240, 239, 754,
	0, 783, 812, 241, 836, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 365, 476, 247, 477, 806,
	248, 249, 250, 251, 252, 0, 253, 807, 254, 368,
	255, 0, 256, 257, 258, 259, 260, 837, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 478, 276, 277, 760, 278,
	0, 282, 283, 284, 285, 0, 287, 371, 286, 288,
	289, 800, 290, 279, 280, 291, 479, 292, 838, 373,
	293, 0, 299, 294, 295, 281, 296, 298, 839, 297,
	808, 0, 300, 0, 301, 302, 303, 304, 305, 306,
	307, 0, 376, 840, 841, 0, 0, 308, 309, 809,
	810, 781, 310, 311, 312, 313, 0, 0, 314, 315,
	316, 317, 801, 318, 0, 381, 319, 320, 321, 382,
	842, 0, 0, 322, 0, 0, 0, 0, 323, 324,
	325, 326, 327, 755, 0, 0, 0, 0, 0, 753,
	0, 0, 0, 0, 751, 752, 0, 0, 0, 0,
	0, 0, 0, 761, 0, 0, 0, 0, 1548, 764,
	786, 775, 776, 773, 774, 765, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 803, 768, 0, 0, 0, 177,
	178, 179, 329, 818, 331, 819, 180, 820, 821, 0,
	181, 335, 336, 182, 183, 771, 802, 822, 823, 339,
	0, 184, 814, 0, 794, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 467, 192, 193, 0,
	795, 796, 798, 0, 797, 799, 194, 195, 391, 196,
	824, 197, 825, 826, 0, 198, 0, 199, 0, 200,
	0, 0, 817, 202, 0, 203, 0, 0, 0, 759,
	204, 205, 206, 804, 805, 782, 0, 0, 207, 208,
	827, 828, 829, 0, 209, 0, 210, 0, 0, 468,
	0, 211, 815, 0, 351, 0, 212, 213, 214, 215,
	811, 813, 470, 0, 219, 0, 216, 0, 469, 217,
	830, 218, 831, 832, 833, 834, 835, 0, 793, 0,
	471, 220, 221, 222, 472, 223, 224, 225, 0, 227,
	226, 0, 816, 473, 228, 474, 0, 229, 230, 0,
	0, 231, 0, 232, 233, 234, 236, 362, 235, 475,
	237, 238, 240, 239, 754, 0, 783, 812, 241, 836,
	242, 243, 0, 244, 0, 0, 245, 0, 0, 246,
	365, 476, 247, 477, 806, 248, 249, 250, 251, 252,
	0, 253, 807, 254, 368, 255, 0, 256, 257, 258,
	259, 260, 837, 261, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	478, 276, 277, 760, 278, 0, 282, 283, 284, 285,
	0, 287, 371, 286, 288, 289, 800, 290, 279, 280,
	291, 479, 292, 838, 373, 293, 0, 299, 294, 295,
	281, 296, 298, 839, 297, 808, 0, 300, 0, 301,
	302, 303, 304, 305, 306, 307, 0, 376, 840, 841,
	0, 0, 308, 309, 809, 810, 781, 310, 311, 312,
	313, 0, 0, 314, 315, 316, 317, 801, 318, 0,
	381, 319, 320, 321, 382, 842, 0, 0, 322, 0,
	0, 0, 0, 323, 324, 325, 326, 327, 755, 0,
	0, 0, 0, 0, 753, 0, 0, 0, 0, 751,
	752, 0, 0, 0, 0, 0, 0, 0, 761, 0,
	0, 0, 0, 1546, 764, 1538, 775, 776, 773, 774,
	765, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 803,
	768, 0, 0, 0, 177, 178, 179, 329, 818, 331,
	819, 180, 820, 821, 0, 181, 335, 336, 182, 183,
	771, 802, 822, 823, 339, 0, 184, 814, 0, 794,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 467, 192, 193, 0, 795, 796, 798, 0, 797,
	799, 194, 195, 391, 196, 824, 1541, 825, 826, 0,
	198, 0, 199, 0, 200, 0, 0, 817, 202, 0,
	203, 0, 0, 0, 759, 204, 205, 206, 804, 805,
	782, 0, 0, 207, 208, 827, 828, 829, 0, 209,
	0, 210, 0, 0, 468, 0, 211, 815, 0, 351,
	0, 212, 213, 1542, 215, 811, 813, 470, 0, 219,
	0, 216, 0, 469, 217, 830, 218, 831, 832, 833,
	834, 835, 0, 793, 0, 471, 220, 221, 222, 472,
	223, 224, 225, 0, 227, 226, 0, 816, 473, 228,
	474, 0, 229, 230, 0, 0, 231, 0, 232, 1543,
	1540, 236, 362, 235, 475, 237, 238, 240, 239, 754,
	0, 783, 812, 241, 836, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 365, 476, 247, 477, 806,
	248, 249, 250, 251, 252, 0, 253, 807, 254, 368,
	255, 0, 256, 257, 258, 259, 260, 837, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 478, 276, 277, 760, 278,
	0, 282, 283, 284, 1544, 0, 287, 371, 286, 288,
	289, 800, 290, 279, 280, 291, 479, 292, 838, 373,
	293, 0, 299, 294, 295, 281, 296, 298, 839, 297,
	808, 0, 300, 0, 301, 302, 303, 304, 305, 306,
	307, 0, 376, 840, 841, 0, 0, 308, 309, 809,
	810, 781, 310, 311, 312, 313, 0, 0, 314, 315,
	316, 317, 801, 318, 0, 381, 319, 320, 321, 382,
	842, 0, 0, 322, 0, 0, 0, 0, 323, 324,
	325, 1539, 327, 755, 0, 0, 0, 0, 0, 753,
	0, 0, 0, 0, 751, 752, 0, 0, 0, 0,
	0, 0, 0, 761, 0, 0, 0, 0, 1535, 764,
	1538, 775, 776, 773, 774, 765, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 803, 768, 0, 0, 0, 177,
	178, 179, 329, 818, 331, 819, 180, 820, 821, 0,
	181, 335, 336, 182, 183, 771, 802, 822, 823, 339,
	0, 184, 814, 0, 794, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 467, 192, 193, 0,
	795, 796, 798, 0, 797, 799, 194, 195, 391, 196,
	824, 1541, 825, 826, 0, 198, 0, 199, 0, 200,
	0, 0, 817, 202, 0, 203, 0, 0, 0, 759,
	204, 205, 206, 804, 805, 782, 0, 0, 207, 208,
	827, 828, 829, 0, 209, 0, 210, 0, 0, 468,
	0, 211, 815, 0, 351, 0, 212, 213, 1542, 215,
	811, 813, 470, 0, 219, 0, 216, 0, 469, 217,
	830, 218, 831, 832, 833, 834, 835, 0, 793, 0,
	471, 220, 221, 222, 472, 223, 224, 225, 0, 227,
	226, 0, 816, 473, 228, 474, 0, 229, 230, 0,
	0, 231, 0, 232, 1543, 1540, 236, 362, 235, 475,
	237, 238, 240, 239, 754, 0, 783, 812, 241, 836,
	242, 243, 0, 244, 0, 0, 245, 0, 0, 246,
	365, 476, 247, 477, 806, 248, 249, 250, 251, 252,
	0, 253, 807, 254, 368, 255, 0, 256, 257, 258,
	259, 260, 837, 261, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	478, 276, 277, 760, 278, 0, 282, 283, 284, 1544,
	0, 287, 371, 286, 288, 289, 800, 290, 279, 280,
	291, 479, 292, 838, 373, 293, 0, 299, 294, 295,
	281, 296, 298, 839, 297, 808, 0, 300, 0, 301,
	302, 303, 304, 305, 306, 307, 0, 376, 840, 841,
	0, 0, 308, 309, 809, 810, 781, 310, 311, 312,
	313, 0, 0, 314, 315, 316, 317, 801, 318, 0,
	381, 319, 320, 321, 382, 842, 0, 0, 322, 0,
	0, 0, 0, 323, 324, 325, 1539, 327, 755, 0,
	0, 0, 0, 0, 753, 0, 0, 0, 0, 751,
	752, 786, 775, 776, 773, 774, 765, 0, 761, 0,
	0, 0, 0, 0, 764, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 803, 768, 0, 0, 0,
	177, 178, 179, 329, 818, 331, 819, 180, 820, 821,
	0, 181, 335, 336, 182, 183, 771, 802, 822, 823,
	339, 0, 184, 814, 0, 794, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 467, 192, 193,
	0, 795, 796, 798, 0, 797, 799, 194, 195, 391,
	196, 824, 197, 825, 826, 0, 198, 0, 199, 0,
	200, 0, 0, 817, 202, 0, 203, 0, 0, 0,
	759, 204, 205, 206, 804, 805, 782, 0, 0, 207,
	208, 827, 828, 829, 0, 209, 0, 210, 0, 0,
	468, 0, 211, 815, 0, 351, 0, 212, 213, 214,
	215, 811, 813, 470, 0, 219, 0, 216, 0, 469,
	217, 830, 218, 831, 832, 833, 834, 835, 0, 793,
	0, 471, 220, 221, 222, 472, 223, 224, 225, 0,
	227, 226, 0, 816, 473, 228, 474, 0, 229, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 362, 235,
	475, 237, 238, 240, 239, 754, 0, 783, 812, 241,
	836, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 365, 476, 247, 477, 806, 248, 249, 250, 251,
	252, 0, 253, 807, 254, 368, 255, 0, 256, 257,
	258, 259, 260, 837, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 478, 276, 277, 760, 278, 0, 282, 283, 284,
	285, 0, 287, 371, 286, 288, 289, 800, 290, 279,
	280, 291, 479, 292, 838, 373, 293, 0, 299, 294,
	295, 281, 296, 298, 839, 297, 808, 0, 300, 0,
	301, 302, 303, 304, 305, 306, 307, 0, 376, 840,
	841, 0, 0, 308, 309, 809, 810, 781, 310, 311,
	312, 313, 0, 0, 314, 315, 316, 317, 801, 318,
	0, 381, 319, 320, 321, 382, 842, 0, 0, 322,
	0, 0, 0, 0, 323, 324, 325, 326, 327, 755,
	0, 0, 0, 0, 0, 753, 0, 0, 0, 0,
	751, 752, 0, 0, 0, 0, 0, 0, 0, 761,
	1496, 0, 0, 0, 1382, 764, 786, 775, 776, 773,
	774, 765, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	803, 768, 0, 0, 0, 177, 178, 179, 329, 818,
	331, 819, 180, 820, 821, 0, 181, 335, 336, 182,
	183, 771, 802, 822, 823, 339, 0, 184, 814, 0,
	794, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 467, 192, 193, 0, 795, 796, 798, 0,
	797, 799, 194, 195, 391, 196, 824, 197, 825, 826,
	0, 198, 0, 199, 0, 200, 0, 0, 817, 202,
	0, 203, 0, 0, 0, 759, 204, 205, 206, 804,
	805, 782, 0, 0, 207, 208, 827, 828, 829, 0,
	209, 0, 210, 0, 0, 468, 0, 211, 815, 0,
	351, 0, 212, 213, 214, 215, 811, 813, 470, 0,
	219, 0, 216, 0, 469, 217, 830, 218, 831, 832,
	833, 834, 835, 0, 793, 0, 471, 220, 221, 222,
	472, 223, 224, 225, 0, 227, 226, 0, 816, 473,
	228, 474, 0, 229, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 362, 235, 475, 237, 238, 240, 239,
	754, 0, 783, 812, 241, 836, 242, 243, 0, 244,
	0, 0, 245, 0, 0, 246, 365, 476, 247, 477,
	806, 248, 249, 250, 251, 252, 0, 253, 807, 254,
	368, 255, 0, 256, 257, 258, 259, 260, 837, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 478, 276, 277, 760,
	278, 0, 282, 283, 284, 285, 0, 287, 371, 286,
	288, 289, 800, 290, 279, 280, 291, 479, 292, 838,
	373, 293, 0, 299, 294, 295, 281, 296, 298, 839,
	297, 808, 0, 300, 0, 301, 302, 303, 304, 305,
	306, 307, 0, 376, 840, 841, 0, 0, 308, 309,
	809, 810, 781, 310, 311, 312, 313, 0, 0, 314,
	315, 316, 317, 801, 318, 0, 381, 319, 320, 321,
	382, 842, 0, 0, 322, 0, 0, 0, 0, 323,
	324, 325, 326, 327, 755, 0, 0, 0, 0, 0,
	753, 0, 0, 0, 0, 751, 752, 786, 775, 776,
	773, 774, 765, 0, 761, 0, 0, 0, 0, 0,
	764, 0, 0, 174, 175, 1339, 176, 0, 0, 0,
	0, 803, 768, 0, 0, 0, 177, 178, 179, 329,
	818, 331, 819, 180, 820, 821, 0, 181, 335, 336,
	182, 183, 771, 802, 822, 823, 339, 0, 184, 814,
	0, 794, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 467, 192, 193, 0, 795, 796, 798,
	0, 797, 799, 194, 195, 391, 196, 824, 197, 825,
	826, 0, 198, 0, 199, 0, 200, 0, 0, 817,
	202, 0, 203, 0, 0, 0, 759, 204, 205, 206,
	804, 805, 782, 0, 0, 207, 208, 827, 828, 829,
	0, 209, 0, 210, 0, 0, 468, 0, 211, 815,
	0, 351, 0, 212, 213, 214, 215, 811, 813, 470,
	0, 219, 0, 216, 0, 469, 217, 830, 218, 831,
	832, 833, 834, 835, 0, 793, 0, 471, 220, 221,
	222, 472, 223, 224, 225, 0, 227, 226, 0, 816,
	473, 228, 474, 0, 229, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 362, 235, 475, 237, 238, 240,
	239, 754, 0, 783, 812, 241, 836, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 365, 476, 247,
	477, 806, 248, 249, 250, 251, 252, 0, 253, 807,
	254, 368, 255, 0, 256, 257, 258, 259, 260, 837,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 478, 276, 277,
	760, 278, 0, 282, 283, 284, 285, 0, 287, 371,
	286, 288, 289, 800, 290, 279, 280, 291, 479, 292,
	838, 373, 293, 0, 299, 294, 295, 281, 296, 298,
	839, 297, 808, 0, 300, 0, 301, 302, 303, 304,
	305, 306, 307, 0, 376, 840, 841, 0, 0, 308,
	309, 809, 810, 781, 310, 311, 312, 313, 0, 0,
	314, 315, 316, 317, 801, 318, 0, 381, 319, 320,
	321, 382, 842, 0, 0, 322, 0, 0, 0, 0,
	323, 324, 325, 326, 327, 755, 0, 0, 0, 0,
	0, 753, 0, 0, 0, 0, 751, 752, 0, 0,
	0, 0, 0, 0, 0, 761, 0, 0, 0, 0,
	850, 764, 786, 775, 776, 773, 774, 765, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 803, 768, 0, 0,
	0, 177, 178, 179, 329, 818, 331, 819, 180, 820,
	821, 0, 181, 335, 336, 182, 183, 771, 802, 822,
	823, 339, 0, 184, 814, 0, 794, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 467, 192,
	193, 0, 795, 796, 798, 0, 797, 799, 194, 195,
	391, 196, 824, 197, 825, 826, 0, 198, 0, 199,
	0, 200, 0, 0, 817, 202, 0, 203, 0, 0,
	0, 759, 204, 205, 206, 804, 805, 782, 0, 0,
	207, 208, 827, 828, 829, 0, 209, 0, 210, 0,
	0, 468, 0, 211, 815, 0, 351, 0, 212, 213,
	214, 215, 811, 813, 470, 0, 219, 0, 216, 0,
	469, 217, 830, 218, 831, 832, 833, 834, 835, 0,
	793, 0, 471, 220, 221, 222, 472, 223, 224, 225,
	0, 227, 226, 0, 816, 473, 228, 474, 0, 229,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 362,
	235, 475, 237, 238, 240, 239, 754, 0, 783, 812,
	241, 836, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 365, 476, 247, 477, 806, 248, 249, 250,
	251, 252, 0, 253, 807, 254, 368, 255, 0, 256,
	257, 258, 259, 260, 837, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 478, 276, 277, 760, 278, 0, 282, 283,
	284, 285, 0, 287, 371, 286, 288, 289, 800, 290,
	279, 280, 291, 479, 292, 838, 373, 293, 0, 299,
	294, 295, 281, 296, 298, 839, 297, 808, 0, 300,
	0, 301, 302, 303, 304, 305, 306, 307, 0, 376,
	840, 841, 0, 0, 308, 309, 809, 810, 781, 310,
	311, 312, 313, 0, 0, 314, 315, 316, 317, 801,
	318, 0, 381, 319, 320, 321, 382, 842, 0, 0,
	322, 0, 0, 0, 0, 323, 324, 325, 326, 327,
	755, 0, 0, 0, 0, 0, 753, 0, 0, 0,
	0, 751, 752, 0, 0, 0, 0, 0, 0, 0,
	761, 0, 0, 0, 0, 749, 764, 786, 775, 776,
	773, 774, 765, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 803, 768, 0, 0, 0, 177, 178, 179, 329,
	818, 331, 819, 180, 820, 821, 0, 181, 335, 336,
	182, 183, 771, 802, 822, 823, 339, 0, 184, 814,
	0, 794, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 467, 192, 193, 0, 795, 796, 798,
	0, 797, 799, 194, 195, 391, 196, 824, 197, 825,
	826, 0, 198, 0, 199, 0, 200, 0, 0, 817,
	202, 0, 203, 0, 0, 0, 759, 204, 205, 206,
	804, 805, 782, 0, 0, 207, 208, 827, 828, 829,
	0, 209, 0, 210, 0, 0, 468, 0, 211, 815,
	0, 351, 0, 212, 213, 214, 215, 811, 813, 470,
	0, 219, 0, 216, 0, 469, 217, 830, 218, 831,
	832, 833, 834, 835, 0, 793, 0, 471, 220, 221,
	222, 472, 223, 224, 225, 0, 227, 226, 0, 816,
	473, 228, 474, 0, 229, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 362, 235, 475, 237, 238, 240,
	239, 754, 0, 783, 812, 241, 836, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 365, 476, 247,
	477, 806, 248, 249, 250, 251, 252, 0, 253, 807,
	254, 368, 255, 0, 256, 257, 258, 259, 260, 837,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 478, 276, 277,
	760, 278, 0, 282, 283, 284, 285, 0, 287, 371,
	286, 288, 289, 800, 290, 279, 280, 291, 479, 292,
	838, 373, 293, 0, 299, 294, 295, 281, 296, 298,
	839, 297, 808, 0, 300, 0, 301, 302, 303, 304,
	305, 306, 307, 0, 376, 840, 841, 0, 0, 308,
	309, 809, 810, 781, 310, 311, 312, 313, 0, 0,
	314, 315, 316, 317, 801, 318, 0, 381, 319, 320,
	321, 382, 842, 0, 0, 322, 0, 0, 0, 0,
	323, 324, 325, 326, 327, 755, 0, 0, 0, 0,
	0, 753, 0, 0, 0, 0, 751, 752, 786, 775,
	776, 773, 774, 765, 0, 761, 0, 0, 0, 0,
	0, 764, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 803, 768, 0, 0, 0, 177, 178, 179,
	329, 818, 331, 819, 180, 820, 821, 0, 181, 335,
	336, 182, 183, 771, 802, 822, 823, 339, 0, 184,
	814, 0, 794, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 467, 192, 2399, 0, 795, 796,
	798, 0, 797, 799, 194, 195, 391, 196, 824, 197,
	825, 826, 0, 198, 0, 199, 0, 200, 0, 0,
	817, 202, 0, 203, 0, 0, 0, 759, 204, 205,
	206, 804, 805, 782, 0, 0, 207, 208, 827, 828,
	829, 0, 209, 0, 210, 0, 0, 468, 0, 211,
	815, 0, 351, 0, 212, 213, 214, 215, 811, 813,
	470, 0, 219, 0, 216, 0, 469, 217, 830, 218,
	831, 832, 833, 834, 835, 0, 793, 0, 471, 220,
	221, 222, 472, 223, 224, 225, 0, 227, 226, 0,
	816, 473, 228, 474, 0, 229, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 362, 235, 475, 237, 238,
	240, 239, 754, 0, 783, 812, 241, 836, 242, 243,
	0, 244, 0, 0, 245, 0, 0, 246, 365, 476,
	247, 477, 806, 248, 249, 250, 251, 252, 0, 253,
	807, 254, 368, 255, 0, 256, 257, 258, 259, 260,
	837, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 478, 276,
	277, 760, 278, 0, 282, 283, 284, 285, 0, 287,
	371, 286, 288, 289, 800, 290, 279, 280, 291, 479,
	292, 838, 373, 293, 0, 299, 294, 295, 281, 296,
	298, 839, 297, 808, 0, 300, 0, 301, 302, 303,
	304, 305, 306, 307, 0, 376, 840, 841, 0, 0,
	308, 309, 809, 810, 781, 310, 311, 2398, 313, 0,
	0, 314, 315, 316, 317, 801, 318, 0, 381, 319,
	320, 321, 382, 842, 0, 0, 322, 0, 0, 0,
	0, 323, 324, 325, 326, 327, 755, 0, 0, 0,
	0, 0, 753, 0, 0, 0, 0, 751, 752, 786,
	775, 776, 773, 774, 765, 0, 761, 0, 0, 0,
	0, 0, 764, 0, 0, 174, 175, 0, 176, 0,
	0, 0, 0, 803, 768, 0, 0, 0, 177, 178,
	179, 2397, 818, 331, 819, 180, 820, 821, 0, 181,
	335, 336, 182, 183, 771, 802, 822, 823, 339, 0,
	184, 814, 0, 794, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 467, 192, 2399, 0, 795,
	796, 798, 0, 797, 799, 194, 195, 391, 196, 824,
	197, 825, 826, 0, 198, 0, 199, 0, 200, 0,
	0, 817, 202, 0, 203, 0, 0, 0, 759, 204,
	205, 206, 804, 805, 782, 0, 0, 207, 208, 827,
	828, 829, 0, 209, 0, 210, 0, 0, 468, 0,
	211, 815, 0, 351, 0, 212, 213, 214, 215, 811,
	813, 470, 0, 219, 0, 216, 0, 469, 217, 830,
	218, 831, 832, 833, 834, 835, 0, 793, 0, 471,
	220, 221, 222, 472, 223, 224, 225, 0, 227, 226,
	0, 816, 473, 228, 474, 0, 229, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 362, 235, 475, 237,
	238, 240, 239, 754, 0, 783, 812, 241, 836, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 365,
	476, 247, 477, 806, 248, 249, 250, 251, 252, 0,
	253, 807, 254, 368, 255, 0, 256, 257, 258, 259,
	260, 837, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 478,
	276, 277, 760, 278, 0, 282, 283, 284, 285, 0,
	287, 371, 286, 288, 289, 800, 290, 279, 280, 291,
	479, 292, 838, 373, 293, 0, 299, 294, 295, 281,
	296, 298, 839, 297, 808, 0, 300, 0, 301, 302,
	303, 304, 305, 306, 307, 0, 376, 840, 841, 0,
	0, 308, 309, 809, 810, 781, 310, 311, 2398, 313,
	0, 0, 314, 315, 316, 317, 801, 318, 0, 381,
	319, 320, 321, 382, 842, 0, 0, 322, 0, 0,
	0, 0, 323, 324, 325, 326, 327, 755, 0, 0,
	0, 0, 0, 753, 0, 0, 0, 0, 751, 752,
	786, 775, 776, 773, 774, 765, 0, 761, 0, 0,
	0, 0, 0, 764, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 803, 768, 0, 0, 0, 177,
	178, 179, 329, 818, 331, 819, 180, 820, 821, 0,
	181, 335, 336, 182, 183, 771, 802, 822, 823, 339,
	0, 184, 814, 0, 794, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 467, 192, 193, 0,
	795, 796, 798, 0, 797, 799, 194, 195, 391, 196,
	824, 197, 825, 826, 0, 198, 0, 199, 0, 200,
	0, 0, 817, 202, 0, 203, 0, 0, 0, 759,
	204, 205, 206, 804, 805, 782, 0, 0, 207, 208,
	827, 828, 829, 0, 209, 0, 210, 0, 0, 468,
	0, 211, 815, 0, 351, 0, 212, 213, 214, 215,
	811, 813, 470, 0, 219, 0, 216, 0, 469, 217,
	830, 218, 831, 832, 833, 834, 835, 0, 793, 0,
	471, 220, 221, 222, 472, 223, 224, 225, 0, 227,
	226, 0, 816, 473, 228, 474, 0, 229, 230, 0,
	0, 231, 0, 232, 233, 234, 236, 362, 235, 475,
	237, 238, 240, 239, 754, 0, 783, 812, 241, 836,
	242, 243, 0, 244, 0, 0, 245, 0, 0, 246,
	365, 476, 247, 477, 806, 248, 249, 250, 251, 252,
	0, 253, 807, 254, 368, 255, 0, 256, 257, 258,
	259, 260, 837, 261, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	478, 276, 277, 760, 278, 0, 282, 283, 284, 285,
	0, 287, 371, 286, 288, 289, 800, 290, 279, 280,
	291, 479, 292, 838, 373, 293, 0, 299, 294, 295,
	281, 296, 298, 839, 297, 808, 0, 300, 0, 301,
	302, 303, 304, 305, 306, 307, 0, 376, 840, 841,
	0, 0, 308, 309, 809, 810, 781, 310, 311, 312,
	313, 0, 0, 314, 315, 316, 317, 801, 318, 0,
	381, 319, 320, 321, 382, 842, 0, 0, 322, 0,
	0, 0, 0, 323, 324, 325, 326, 327, 755, 0,
	0, 0, 0, 0, 753, 0, 0, 0, 0, 751,
	752, 786, 775, 776, 773, 774, 765, 0, 761, 0,
	0, 0, 0, 0, 764, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 803, 768, 0, 0, 0,
	177, 178, 179, 329, 818, 331, 819, 180, 820, 821,
	0, 181, 335, 336, 182, 183, 771, 802, 822, 823,
	339, 0, 184, 814, 0, 794, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 467, 192, 193,
	0, 795, 796, 798, 0, 797, 799, 194, 195, 391,
	196, 824, 197, 825, 826, 0, 198, 0, 199, 0,
	200, 0, 0, 817, 202, 0, 203, 0, 0, 0,
	759, 204, 205, 206, 804, 805, 782, 0, 0, 207,
	208, 827, 828, 829, 0, 209, 0, 210, 0, 0,
	468, 0, 211, 815, 0, 351, 0, 212, 213, 214,
	215, 811, 813, 470, 0, 219, 0, 216, 0, 469,
	217, 830, 218, 831, 832, 833, 834, 835, 0, 793,
	0, 471, 220, 221, 222, 472, 223, 224, 225, 0,
	227, 226, 0, 816, 473, 228, 474, 0, 229, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 362, 235,
	475, 237, 238, 240, 239, 0, 0, 783, 812, 241,
	836, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 365, 476, 247, 477, 806, 248, 249, 250, 251,
	252, 0, 253, 807, 254, 368, 255, 0, 256, 257,
	258, 259, 260, 837, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 478, 276, 277, 1558, 278, 0, 282, 283, 284,
	285, 0, 287, 371, 286, 288, 289, 800, 290, 279,
	280, 291, 479, 292, 838, 373, 293, 0, 299, 294,
	295, 281, 296, 298, 839, 297, 808, 0, 300, 0,
	301, 302, 303, 304, 305, 306, 307, 0, 376, 840,
	841, 0, 0, 308, 309, 809, 810, 781, 310, 311,
	312, 313, 0, 0, 314, 315, 316, 317, 801, 318,
	0, 381, 319, 320, 321, 382, 842, 0, 0, 322,
	0, 0, 0, 0, 323, 324, 325, 326, 327, 786,
	775, 776, 773, 774, 765, 1556, 0, 0, 0, 0,
	1554, 1555, 0, 0, 0, 174, 175, 0, 176, 1557,
	0, 0, 0, 803, 768, 764, 0, 0, 177, 178,
	179, 329, 818, 331, 819, 180, 820, 821, 0, 181,
	335, 336, 182, 183, 0, 802, 822, 823, 339, 0,
	184, 814, 0, 794, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 467, 192, 193, 0, 795,
	796, 798, 0, 797, 799, 194, 195, 391, 196, 824,
	197, 825, 826, 0, 198, 0, 199, 0, 200, 0,
	0, 817, 202, 0, 203, 0, 0, 0, 344, 204,
	205, 206, 804, 805, 782, 0, 0, 207, 208, 827,
	828, 829, 0, 209, 0, 210, 0, 0, 468, 0,
	211, 815, 0, 351, 0, 212, 213, 214, 215, 811,
	813, 470, 0, 219, 0, 216, 0, 469, 217, 830,
	218, 831, 832, 833, 834, 835, 0, 793, 0, 471,
	220, 221, 222, 472, 223, 224, 225, 0, 227, 226,
	0, 816, 473, 228, 474, 0, 229, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 362, 235, 475, 237,
	238, 240, 239, 0, 0, 783, 812, 241, 836, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 365,
	476, 247, 477, 806, 248, 249, 250, 251, 252, 0,
	253, 807, 254, 368, 255, 0, 256, 257, 258, 259,
	260, 837, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 478,
	276, 277, 1558, 278, 0, 282, 283, 284, 285, 0,
	287, 371, 286, 288, 289, 800, 290, 279, 280, 291,
	479, 292, 838, 373, 293, 0, 299, 294, 295, 281,
	296, 298, 839, 297, 808, 0, 300, 0, 301, 302,
	303, 304, 305, 306, 307, 0, 376, 840, 841, 0,
	0, 308, 309, 809, 810, 781, 310, 311, 312, 313,
	0, 0, 314, 315, 316, 317, 801, 318, 0, 381,
	319, 320, 321, 382, 842, 0, 0, 322, 0, 0,
	0, 0, 323, 324, 325, 326, 327, 786, 775, 776,
	773, 774, 765, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 1557, 0, 0,
	0, 803, 768, 764, 0, 0, 177, 178, 179, 0,
	818, 331, 819, 180, 820, 821, 0, 181, 335, 336,
	182, 183, 771, 802, 822, 823, 339, 0, 184, 814,
	0, 794, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 467, 192, 2399, 0, 795, 796, 798,
	0, 797, 799, 194, 195, 391, 196, 824, 197, 825,
	826, 0, 198, 0, 199, 0, 200, 0, 0, 817,
	202, 0, 203, 0, 0, 0, 759, 204, 205, 206,
	804, 805, 782, 0, 0, 207, 208, 827, 828, 829,
	0, 209, 0, 210, 0, 0, 468, 0, 211, 815,
	0, 351, 0, 212, 213, 214, 215, 811, 813, 0,
	0, 219, 0, 216, 0, 469, 217, 830, 218, 831,
	832, 833, 834, 835, 0, 793, 0, 0, 220, 221,
	222, 472, 223, 224, 225, 0, 227, 226, 0, 816,
	473, 228, 0, 0, 229, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 362, 235, 475, 237, 238, 240,
	239, 754, 0, 783, 812, 241, 836, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 365, 476, 247,
	477, 806, 248, 249, 250, 251, 252, 0, 253, 807,
	254, 368, 255, 0, 256, 257, 258, 259, 260, 837,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 478, 276, 277,
	760, 278, 0, 282, 283, 284, 285, 0, 287, 371,
	286, 288, 289, 800, 290, 279, 280, 291, 0, 292,
	838, 373, 293, 0, 299, 294, 295, 281, 296, 298,
	839, 297, 808, 0, 300, 0, 301, 302, 303, 304,
	305, 306, 307, 0, 376, 840, 841, 0, 0, 308,
	309, 809, 810, 781, 310, 311, 2398, 313, 0, 0,
	314, 315, 316, 317, 801, 318, 0, 381, 319, 320,
	321, 382, 842, 0, 0, 322, 0, 0, 0, 0,
	323, 324, 325, 326, 327, 786, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 751, 752, 0, 0,
	0, 174, 175, 0, 176, 761, 0, 0, 0, 803,
	0, 764, 0, 0, 177, 178, 179, 329, 330, 331,
	332, 180, 333, 334, 0, 181, 335, 336, 182, 183,
	0, 802, 337, 338, 339, 0, 184, 814, 0, 794,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 467, 192, 193, 0, 795, 796, 798, 0, 797,
	799, 194, 195, 391, 196, 341, 197, 342, 343, 0,
	198, 0, 199, 0, 200, 0, 0, 201, 202, 0,
	203, 0, 0, 0, 344, 204, 205, 206, 804, 805,
	0, 0, 0, 207, 208, 347, 348, 349, 0, 209,
	0, 210, 0, 0, 468, 0, 211, 815, 0, 351,
	0, 212, 213, 214, 215, 811, 813, 470, 0, 219,
	0, 216, 0, 469, 217, 354, 218, 355, 356, 357,
	358, 359, 0, 360, 0, 471, 220, 221, 222, 472,
	223, 224, 225, 0, 227, 226, 0, 816, 473, 228,
	474, 0, 229, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 362, 235, 475, 237, 238, 240, 239, 0,
	0, 0, 812, 241, 364, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 365, 476, 247, 477, 806,
	248, 249, 250, 251, 252, 0, 253, 807, 254, 368,
	255, 0, 256, 257, 258, 259, 260, 369, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 478, 276, 277, 370, 278,
	0, 282, 283, 284, 285, 0, 287, 371, 286, 288,
	289, 800, 290, 279, 280, 291, 479, 292, 372, 373,
	293, 0, 299, 294, 295, 281, 296, 298, 374, 297,
	808, 0, 300, 0, 301, 302, 303, 304, 305, 306,
	307, 0, 376, 377, 378, 0, 0, 308, 309, 809,
	810, 0, 310, 311, 312, 313, 0, 0, 314, 315,
	316, 317, 801, 318, 0, 381, 319, 320, 321, 382,
	383, 0, 0, 322, 0, 0, 0, 0, 323, 324,
	325, 326, 327, 682, 679, 0, 680, 675, 670, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	175, 0, 176, 1956, 0, 0, 0, 328, 0, 0,
	0, 0, 177, 178, 179, 329, 330, 331, 332, 180,
	333, 334, 0, 181, 335, 336, 182, 183, 0, 0,
	337, 338, 339, 0, 184, 340, 0, 466, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 0, 467,
	192, 193, 0, 0, 0, 0, 0, 0, 0, 194,
	195, 391, 196, 341, 197, 342, 343, 1303, 198, 0,
	199, 0, 200, 0, 0, 201, 202, 0, 203, 0,
	0, 0, 344, 204, 205, 206, 345, 346, 672, 0,
	0, 207, 208, 347, 348, 349, 0, 209, 0, 210,
	0, 0, 468, 0, 211, 350, 0, 351, 0, 212,
	213, 214, 215, 352, 353, 470, 0, 219, 0, 216,
	0, 469, 217, 354, 218, 355, 356, 357, 358, 359,
	0, 360, 0, 471, 220, 221, 222, 472, 223, 224,
	225, 0, 227, 226, 0, 361, 473, 228, 474, 0,
	229, 230, 0, 0, 231, 0, 232, 233, 234, 236,
	362, 235, 475, 237, 238, 240, 239, 0, 0, 0,
	363, 241, 364, 242, 243, 0, 244, 673, 0, 245,
	0, 0, 246, 365, 476, 247, 477, 366, 248, 249,
	250, 251, 252, 0, 253, 367, 254, 368, 255, 0,
	256, 257, 258, 259, 260, 369, 261, 262, 0, 263,
	264, 265, 266, 267, 269, 270, 268, 271, 272, 273,
	274, 0, 275, 478, 276, 277, 370, 278, 0, 282,
	283, 284, 285, 0, 287, 371, 286, 288, 289, 0,
	290, 279, 280, 291, 479, 292, 372, 373, 293, 0,
	299, 294, 295, 281, 296, 298, 374, 297, 375, 0,
	300, 0, 301, 302, 303, 304, 305, 306, 307, 0,
	376, 377, 378, 0, 0, 308, 309, 379, 380, 671,
	310, 311, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 318, 0, 381, 319, 320, 321, 382, 383, 0,
	0, 322, 0, 0, 0, 0, 323, 324, 325, 326,
	327, 682, 679, 0, 680, 675, 670, 0, 0, 0,
	0, 0, 681, 676, 0, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 328, 0, 0, 0, 0,
	177, 178, 179, 329, 330, 331, 332, 180, 333, 334,
	0, 181, 335, 336, 182, 183, 0, 0, 337, 338,
	339, 0, 184, 340, 0, 466, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 467, 192, 193,
	0, 0, 0, 0, 0, 0, 0, 194, 195, 391,
	196, 341, 197, 342, 343, 1300, 198, 0, 199, 0,
	200, 0, 0, 201, 202, 0, 203, 0, 0, 0,
	344, 204, 205, 206, 345, 346, 672, 0, 0, 207,
	208, 347, 348, 349, 0, 209, 0, 210, 0, 0,
	468, 0, 211, 350, 0, 351, 0, 212, 213, 214,
	215, 352, 353, 470, 0, 219, 0, 216, 0, 469,
	217, 354, 218, 355, 356, 357, 358, 359, 0, 360,
	0, 471, 220, 221, 222, 472, 223, 224, 225, 0,
	227, 226, 0, 361, 473, 228, 474, 0, 229, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 362, 235,
	475, 237, 238, 240, 239, 0, 0, 0, 363, 241,
	364, 242, 243, 0, 244, 673, 0, 245, 0, 0,
	246, 365, 476, 247, 477, 366, 248, 249, 250, 251,
	252, 0, 253, 367, 254, 368, 255, 0, 256, 257,
	258, 259, 260, 369, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 478, 276, 277, 370, 278, 0, 282, 283, 284,
	285, 0, 287, 371, 286, 288, 289, 0, 290, 279,
	280, 291, 479, 292, 372, 373, 293, 0, 299, 294,
	295, 281, 296, 298, 374, 297, 375, 0, 300, 0,
	301, 302, 303, 304, 305, 306, 307, 0, 376, 377,
	378, 0, 0, 308, 309, 379, 380, 671, 310, 311,
	312, 313, 0, 0, 314, 315, 316, 317, 0, 318,
	0, 381, 319, 320, 321, 382, 383, 0, 0, 322,
	0, 0, 0, 0, 323, 324, 325, 326, 327, 682,
	679, 0, 680, 675, 670, 0, 0, 0, 0, 0,
	681, 676, 0, 0, 0, 174, 175, 0, 176, 0,
	0, 0, 0, 328, 0, 0, 0, 0, 177, 178,
	179, 329, 330, 331, 332, 180, 333, 334, 0, 181,
	335, 336, 182, 183, 0, 0, 337, 338, 339, 0,
	184, 340, 0, 466, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 467, 192, 193, 0, 0,
	0, 0, 0, 0, 0, 194, 195, 391, 196, 341,
	197, 342, 343, 942, 198, 0, 199, 0, 200, 0,
	0, 201, 202, 0, 203, 0, 0, 0, 344, 204,
	205, 206, 345, 346, 672, 0, 0, 207, 208, 347,
	348, 349, 0, 209, 0, 210, 0, 0, 468, 0,
	211, 350, 0, 351, 0, 212, 213, 214, 215, 352,
	353, 470, 0, 219, 0, 216, 0, 469, 217, 354,
	218, 355, 356, 357, 358, 359, 0, 360, 0, 471,
	220, 221, 222, 472, 223, 224, 225, 0, 227, 226,
	0, 361, 473, 228, 474, 0, 229, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 362, 235, 475, 237,
	238, 240, 239, 0, 0, 0, 363, 241, 364, 242,
	243, 0, 244, 673, 0, 245, 0, 0, 246, 365,
	476, 247, 477, 366, 248, 249, 250, 251, 252, 0,
	253, 367, 254, 368, 255, 0, 256, 257, 258, 259,
	260, 369, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 478,
	276, 277, 370, 278, 0, 282, 283, 284, 285, 0,
	287, 371, 286, 288, 289, 0, 290, 279, 280, 291,
	479, 292, 372, 373, 293, 0, 299, 294, 295, 281,
	296, 298, 374, 297, 375, 0, 300, 0, 301, 302,
	303, 304, 305, 306, 307, 0, 376, 377, 378, 0,
	0, 308, 309, 379, 380, 671, 310, 311, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 318, 0, 381,
	319, 320, 321, 382, 383, 0, 0, 322, 0, 0,
	0, 0, 323, 324, 325, 326, 327, 667, 0, 682,
	679, 0, 680, 675, 670, 0, 0, 0, 681, 676,
	0, 0, 0, 0, 0, 174, 175, 0, 176, 0,
	0, 0, 0, 328, 0, 0, 0, 0, 177, 178,
	179, 329, 330, 331, 332, 180, 333, 334, 0, 181,
	335, 336, 182, 183, 0, 0, 337, 338, 339, 0,
	184, 340, 0, 466, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 467, 192, 193, 0, 0,
	0, 0, 0, 0, 0, 194, 195, 391, 196, 341,
	197, 342, 343, 0, 198, 0, 199, 0, 200, 0,
	0, 201, 202, 0, 203, 0, 0, 0, 344, 204,
	205, 206, 345, 346, 672, 0, 0, 207, 208, 347,
	348, 349, 0, 209, 0, 210, 0, 0, 468, 0,
	211, 350, 0, 351, 0, 212, 213, 214, 215, 352,
	353, 470, 0, 219, 0, 216, 0, 469, 217, 354,
	218, 355, 356, 357, 358, 359, 0, 360, 0, 471,
	220, 221, 222, 472, 223, 224, 225, 0, 227, 226,
	0, 361, 473, 228, 474, 0, 229, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 362, 235, 475, 237,
	238, 240, 239, 0, 0, 0, 363, 241, 364, 242,
	243, 0, 244, 673, 0, 245, 0, 0, 246, 365,
	476, 247, 477, 366, 248, 249, 250, 251, 252, 0,
	253, 367, 254, 368, 255, 0, 256, 257, 258, 259,
	260, 369, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 478,
	276, 277, 370, 278, 0, 282, 283, 284, 285, 0,
	287, 371, 286, 288, 289, 0, 290, 279, 280, 291,
	479, 292, 372, 373, 293, 0, 299, 294, 295, 281,
	296, 298, 374, 297, 375, 0, 300, 0, 301, 302,
	303, 304, 305, 306, 307, 0, 376, 377, 378, 0,
	0, 308, 309, 379, 380, 671, 310, 311, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 318, 0, 381,
	319, 320, 321, 382, 383, 0, 0, 322, 0, 0,
	0, 0, 323, 324, 325, 326, 327, 682, 679, 0,
	680, 675, 670, 0, 0, 0, 0, 0, 681, 676,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 328, 0, 0, 0, 0, 177, 178, 179, 329,
	330, 331, 332, 180, 333, 334, 0, 181, 335, 336,
	182, 183, 0, 0, 337, 338, 339, 0, 184, 340,
	0, 466, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 467, 192, 193, 0, 0, 0, 0,
	0, 0, 0, 194, 195, 391, 196, 341, 197, 342,
	343, 0, 198, 0, 199, 0, 200, 0, 0, 201,
	202, 0, 203, 0, 0, 0, 344, 204, 205, 206,
	345, 346, 672, 0, 0, 207, 208, 347, 348, 349,
	0, 209, 0, 210, 0, 0, 468, 0, 211, 350,
	0, 351, 0, 212, 213, 214, 215, 352, 353, 470,
	0, 219, 0, 216, 0, 469, 217, 354, 218, 355,
	356, 357, 358, 359, 0, 360, 0, 471, 220, 221,
	222, 472, 223, 224, 225, 0, 227, 226, 0, 361,
	473, 228, 474, 0, 229, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 362, 235, 475, 237, 238, 240,
	239, 0, 0, 0, 363, 241, 364, 242, 243, 0,
	244, 673, 0, 245, 0, 0, 246, 365, 476, 247,
	477, 366, 248, 249, 250, 251, 252, 0, 253, 367,
	254, 368, 255, 0, 256, 257, 258, 259, 260, 369,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 478, 276, 277,
	370, 278, 0, 282, 283, 284, 285, 0, 287, 371,
	286, 288, 289, 0, 290, 279, 280, 291, 479, 292,
	372, 373, 293, 0, 299, 294, 295, 281, 296, 298,
	374, 297, 375, 0, 300, 0, 301, 302, 303, 304,
	305, 306, 307, 0, 376, 377, 378, 0, 0, 308,
	309, 379, 380, 671, 310, 311, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 318, 0, 381, 319, 320,
	321, 382, 383, 0, 664, 322, 171, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 681, 676, 0, 0,
	328, 0, 0, 0, 0, 177, 178, 179, 329, 330,
	331, 332, 180, 333, 334, 0, 181, 335, 336, 182,
	183, 0, 0, 337, 338, 339, 0, 184, 340, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 192, 193, 0, 0, 0, 0, 0,
	0, 0, 194, 195, 391, 196, 341, 197, 342, 343,
	0, 198, 0, 199, 0, 200, 0, 0, 201, 202,
	0, 203, 0, 0, 0, 344, 204, 205, 206, 345,
	346, 0, 0, 0, 207, 208, 347, 348, 349, 0,
	209, 0, 210, 0, 0, 0, 0, 211, 350, 0,
	351, 0, 212, 213, 214, 215, 352, 353, 0, 0,
	219, 0, 216, 0, 0, 217, 354, 218, 355, 356,
	357, 358, 359, 0, 360, 0, 0, 220, 221, 222,
	0, 223, 224, 225, 0, 227, 226, 0, 361, 0,
	228, 0, 0, 229, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 362, 235, 0, 237, 238, 240, 239,
	0, 0, 0, 363, 241, 364, 242, 243, 0, 244,
	0, 724, 245, 0, 0, 246, 365, 0, 247, 0,
	366, 248, 249, 250, 251, 252, 0, 253, 367, 254,
	368, 255, 0, 256, 257, 258, 259, 260, 369, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 0, 276, 277, 370,
	278, 0, 282, 283, 284, 285, 131, 287, 371, 286,
	288, 289, 0, 290, 279, 280, 291, 0, 292, 372,
	373, 293, 0, 299, 294, 295, 281, 296, 298, 374,
	297, 375, 0, 300, 133, 301, 302, 303, 304, 305,
	306, 307, 0, 376, 377, 378, 0, 0, 308, 309,
	379, 380, 0, 310, 311, 312, 313, 0, 0, 314,
	315, 316, 317, 0, 318, 0, 381, 319, 320, 321,
	902, 383, 0, 0, 322, 0, 171, 0, 125, 323,
	324, 325, 326, 327, 0, 126, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	328, 0, 718, 0, 1050, 177, 178, 179, 329, 330,
	331, 332, 180, 333, 334, 0, 181, 335, 336, 182,
	183, 0, 0, 337, 338, 339, 0, 184, 340, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 192, 193, 0, 0, 0, 0, 0,
	0, 0, 194, 195, 391, 196, 341, 197, 342, 343,
	0, 198, 0, 199, 0, 200, 0, 0, 201, 202,
	0, 203, 0, 0, 0, 344, 204, 205, 206, 345,
	346, 0, 0, 0, 207, 208, 347, 348, 349, 0,
	209, 0, 210, 0, 0, 0, 0, 211, 350, 0,
	351, 0, 212, 213, 214, 215, 352, 353, 0, 0,
	219, 0, 216, 0, 0, 217, 354, 218, 355, 356,
	357, 358, 359, 0, 360, 0, 0, 220, 221, 222,
	0, 223, 224, 225, 0, 227, 226, 0, 361, 0,
	228, 0, 0, 229, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 362, 235, 0, 237, 238, 240, 239,
	0, 0, 0, 363, 241, 364, 242, 243, 0, 244,
	0, 724, 245, 0, 0, 246, 365, 0, 247, 0,
	366, 248, 249, 250, 251, 252, 0, 253, 367, 254,
	368, 255, 0, 256, 257, 258, 259, 260, 369, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 0, 276, 277, 370,
	278, 0, 282, 283, 284, 285, 131, 287, 371, 286,
	288, 289, 0, 290, 279, 280, 291, 0, 292, 372,
	373, 293, 0, 299, 294, 295, 281, 296, 298, 374,
	297, 375, 0, 300, 133, 301, 302, 303, 304, 305,
	306, 307, 0, 376, 377, 378, 0, 0, 308, 309,
	379, 380, 0, 310, 311, 312, 313, 0, 0, 314,
	315, 316, 317, 0, 318, 0, 381, 319, 320, 321,
	902, 383, 0, 0, 322, 664, 0, 171, 125, 323,
	324, 325, 326, 327, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 328, 718, 0, 1050, 0, 177, 178, 179, 329,
	330, 331, 332, 180, 333, 334, 0, 181, 335, 336,
	182, 183, 0, 0, 337, 338, 339, 0, 184, 340,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 192, 193, 0, 0, 0, 0,
	0, 0, 0, 194, 195, 391, 196, 341, 197, 342,
	343, 0, 198, 0, 199, 0, 200, 0, 0, 201,
	202, 0, 203, 0, 0, 0, 344, 204, 205, 206,
	345, 346, 0, 0, 0, 207, 208, 347, 348, 349,
	0, 209, 0, 210, 0, 0, 0, 0, 211, 350,
	0, 351, 0, 212, 213, 214, 215, 352, 353, 0,
	0, 219, 0, 216, 0, 0, 217, 354, 218, 355,
	356, 357, 358, 359, 0, 360, 0, 0, 220, 221,
	222, 0, 223, 224, 225, 0, 227, 226, 0, 361,
	0, 228, 0, 0, 229, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 362, 235, 0, 237, 238, 240,
	239, 0, 0, 0, 363, 241, 364, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 365, 0, 247,
	0, 366, 248, 249, 250, 251, 252, 0, 253, 367,
	254, 368, 255, 0, 256, 257, 258, 259, 260, 369,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 0, 276, 277,
	370, 278, 0, 282, 283, 284, 285, 131, 287, 371,
	286, 288, 289, 0, 290, 279, 280, 291, 0, 292,
	372, 373, 293, 0, 299, 294, 295, 281, 296, 298,
	374, 297, 375, 0, 300, 133, 301, 302, 303, 304,
	305, 306, 307, 0, 376, 377, 378, 0, 0, 308,
	309, 379, 380, 0, 310, 311, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 318, 0, 381, 319, 320,
	321, 902, 383, 0, 0, 322, 1683, 0, 171, 125,
	323, 324, 325, 326, 327, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 328, 0, 0, 118, 0, 177, 178, 179,
	329, 330, 331, 332, 180, 333, 334, 0, 181, 335,
	336, 182, 183, 0, 0, 337, 338, 339, 0, 184,
	340, 0, 0, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 0, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 194, 195, 391, 196, 341, 197,
	342, 343, 0, 198, 0, 199, 0, 200, 0, 0,
	201, 202, 0, 203, 0, 0, 0, 344, 204, 205,
	206, 345, 346, 0, 0, 0, 207, 208, 347, 348,
	349, 0, 209, 0, 210, 0, 0, 0, 0, 211,
	350, 0, 351, 0, 212, 213, 214, 215, 352, 353,
	0, 0, 219, 0, 216, 0, 0, 217, 354, 218,
	355, 356, 357, 358, 359, 0, 360, 0, 0, 220,
	221, 222, 0, 223, 224, 225, 0, 227, 226, 0,
	361, 0, 228, 0, 0, 229, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 362, 235, 0, 237, 238,
	240, 239, 0, 0, 0, 363, 241, 364, 242, 243,
	0, 244, 0, 724, 245, 0, 0, 246, 365, 0,
	247, 0, 366, 248, 249, 250, 251, 252, 0, 253,
	367, 254, 368, 255, 0, 256, 257, 258, 259, 260,
	369, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 0, 276,
	277, 370, 278, 0, 282, 283, 284, 285, 0, 287,
	371, 286, 288, 289, 0, 290, 279, 280, 291, 0,
	292, 372, 373, 293, 0, 299, 294, 295, 281, 296,
	298, 374, 297, 375, 0, 300, 0, 301, 302, 303,
	304, 305, 306, 307, 0, 376, 377, 378, 0, 0,
	308, 309, 379, 380, 0, 310, 311, 312, 313, 0,
	0, 314, 315, 316, 317, 0, 318, 0, 381, 319,
	320, 321, 382, 383, 0, 0, 322, 717, 0, 171,
	0, 323, 324, 325, 326, 327, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 175, 0, 176, 0,
	0, 0, 0, 328, 718, 0, 723, 0, 177, 178,
	179, 329, 330, 331, 332, 180, 333, 334, 0, 181,
	335, 336, 182, 183, 0, 0, 337, 338, 339, 0,
	184, 340, 0, 0, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 0, 192, 193, 0, 0,
	0, 0, 0, 0, 0, 194, 195, 391, 196, 341,
	197, 342, 343, 0, 198, 0, 199, 0, 200, 0,
	0, 201, 202, 0, 203, 0, 0, 0, 344, 204,
	205, 206, 345, 346, 0, 0, 0, 207, 208, 347,
	348, 349, 0, 209, 0, 210, 0, 0, 0, 0,
	211, 350, 0, 351, 0, 212, 213, 214, 215, 352,
	353, 0, 0, 219, 0, 216, 0, 0, 217, 354,
	218, 355, 356, 357, 358, 359, 0, 360, 0, 0,
	220, 221, 222, 0, 223, 224, 225, 0, 227, 226,
	0, 361, 0, 228, 0, 0, 229, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 362, 235, 0, 237,
	238, 240, 239, 0, 0, 0, 363, 241, 364, 242,
	243, 0, 244, 0, 724, 245, 0, 0, 246, 365,
	0, 247, 0, 366, 248, 249, 250, 251, 252, 0,
	253, 367, 254, 368, 255, 0, 256, 257, 258, 259,
	260, 369, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 0,
	276, 277, 370, 278, 0, 282, 283, 284, 285, 0,
	287, 371, 286, 288, 289, 0, 290, 279, 280, 291,
	0, 292, 372, 373, 293, 0, 299, 294, 295, 281,
	296, 298, 374, 297, 375, 0, 300, 0, 301, 302,
	303, 304, 305, 306, 307, 0, 376, 377, 378, 0,
	0, 308, 309, 379, 380, 0, 310, 311, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 318, 0, 381,
	319, 320, 321, 382, 383, 0, 0, 322, 0, 171,
	0, 0, 323, 324, 325, 326, 327, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 175, 0, 176, 0,
	0, 0, 0, 328, 0, 718, 0, 723, 177, 178,
	179, 329, 330, 331, 332, 180, 333, 334, 0, 181,
	335, 336, 182, 183, 0, 0, 337, 338, 339, 0,
	184, 340, 0, 0, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 0, 192, 193, 0, 0,
	0, 0, 0, 0, 0, 194, 195, 391, 196, 341,
	197, 342, 343, 0, 198, 0, 199, 0, 200, 0,
	0, 201, 202, 0, 203, 0, 0, 0, 344, 204,
	205, 206, 345, 346, 0, 0, 0, 207, 208, 347,
	348, 349, 0, 209, 0, 210, 0, 0, 0, 0,
	211, 350, 0, 351, 0, 212, 213, 214, 215, 352,
	353, 0, 0, 219, 0, 216, 0, 0, 217, 354,
	218, 355, 356, 357, 358, 359, 0, 360, 0, 0,
	220, 221, 222, 0, 223, 224, 225, 0, 227, 226,
	0, 361, 0, 228, 0, 0, 229, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 362, 235, 0, 237,
	238, 240, 239, 0, 0, 0, 363, 241, 364, 242,
	243, 0, 244, 0, 724, 245, 0, 0, 246, 365,
	0, 247, 0, 366, 248, 249, 250, 251, 252, 0,
	253, 367, 254, 368, 255, 0, 256, 257, 258, 259,
	260, 369, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 0,
	276, 277, 370, 278, 0, 282, 283, 284, 285, 0,
	287, 371, 286, 288, 289, 0, 290, 279, 280, 291,
	0, 292, 372, 373, 293, 0, 299, 294, 295, 281,
	296, 298, 374, 297, 375, 0, 300, 0, 301, 302,
	303, 304, 305, 306, 307, 0, 376, 377, 378, 0,
	0, 308, 309, 379, 380, 0, 310, 311, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 318, 0, 381,
	319, 320, 321, 382, 383, 0, 0, 322, 0, 171,
	0, 0, 323, 324, 325, 326, 327, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 175, 0, 176, 0,
	0, 0, 0, 328, 0, 718, 0, 723, 177, 178,
	179, 329, 330, 331, 332, 180, 333, 334, 0, 181,
	335, 336, 182, 183, 0, 0, 337, 338, 339, 0,
	184, 340, 0, 0, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 0, 192, 193, 0, 0,
	0, 0, 0, 0, 0, 194, 195, 391, 196, 341,
	197, 342, 343, 0, 198, 0, 199, 0, 200, 0,
	0, 201, 202, 0, 203, 0, 0, 0, 344, 204,
	205, 206, 345, 346, 0, 0, 0, 207, 208, 347,
	348, 349, 0, 209, 0, 210, 0, 0, 0, 0,
	211, 350, 0, 351, 0, 212, 213, 214, 215, 352,
	353, 0, 0, 219, 0, 216, 0, 0, 217, 354,
	218, 355, 356, 357, 358, 359, 0, 360, 0, 0,
	220, 221, 222, 0, 223, 224, 225, 0, 227, 226,
	0, 361, 0, 228, 0, 0, 229, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 362, 235, 0, 237,
	238, 240, 239, 0, 0, 0, 363, 241, 364, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 365,
	0, 247, 0, 366, 248, 249, 250, 251, 252, 0,
	253, 367, 254, 368, 255, 0, 256, 257, 258, 259,
	260, 369, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 0,
	276, 277, 370, 278, 0, 282, 283, 284, 285, 0,
	287, 371, 286, 288, 289, 0, 290, 279, 280, 291,
	0, 292, 372, 373, 293, 0, 299, 294, 295, 281,
	296, 298, 374, 297, 375, 0, 300, 0, 301, 302,
	303, 304, 305, 306, 307, 0, 376, 377, 378, 0,
	0, 308, 309, 379, 380, 0, 310, 311, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 318, 0, 381,
	319, 320, 321, 382, 383, 0, 0, 322, 0, 0,
	171, 0, 323, 324, 325, 326, 327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 328, 0, 0, 0, 1180, 177,
	178, 179, 329, 330, 331, 332, 180, 333, 334, 0,
	181, 335, 336, 182, 183, 0, 0, 337, 338, 339,
	0, 184, 340, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 192, 193, 0,
	0, 0, 0, 0, 0, 0, 194, 195, 391, 196,
	341, 197, 342, 343, 0, 198, 0, 199, 0, 200,
	0, 0, 201, 202, 0, 203, 0, 0, 0, 344,
	204, 205, 206, 345, 346, 0, 0, 0, 207, 208,
	347, 348, 349, 0, 209, 0, 210, 0, 0, 0,
	0, 211, 350, 0, 351, 0, 212, 213, 214, 215,
	352, 353, 0, 0, 219, 0, 216, 0, 0, 217,
	354, 218, 355, 356, 357, 358, 359, 0, 360, 0,
	0, 220, 221, 222, 0, 223, 224, 225, 0, 227,
	226, 0, 361, 0, 228, 0, 0, 229, 230, 0,
	0, 231, 0, 232, 233, 234, 236, 362, 235, 0,
	237, 238, 240, 239, 0, 0, 0, 363, 241, 364,
	242, 243, 0, 244, 0, 0, 245, 0, 0, 246,
	365, 0, 247, 0, 366, 248, 249, 250, 251, 252,
	0, 253, 367, 254, 368, 255, 0, 256, 257, 258,
	259, 260, 369, 261, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	0, 276, 277, 370, 278, 0, 282, 283, 284, 285,
	0, 287, 371, 286, 288, 289, 0, 290, 279, 280,
	291, 0, 292, 372, 373, 293, 0, 299, 294, 295,
	281, 296, 298, 374, 297, 375, 0, 300, 0, 301,
	302, 303, 304, 305, 306, 307, 0, 376, 377, 378,
	0, 0, 308, 309, 379, 380, 0, 310, 311, 312,
	313, 0, 0, 314, 315, 316, 317, 0, 318, 0,
	381, 319, 320, 321, 382, 383, 0, 0, 322, 0,
	171, 0, 0, 323, 324, 325, 326, 327, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 328, 0, 0, 0, 1622, 177,
	178, 179, 329, 330, 331, 332, 180, 333, 334, 0,
	181, 335, 336, 182, 183, 0, 0, 337, 338, 339,
	0, 184, 340, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 192, 193, 0,
	0, 0, 0, 0, 0, 0, 194, 195, 391, 196,
	341, 197, 342, 343, 0, 198, 0, 199, 0, 200,
	0, 0, 201, 202, 0, 203, 0, 0, 0, 344,
	204, 205, 206, 345, 346, 0, 0, 0, 207, 208,
	347, 348, 349, 0, 209, 0, 210, 0, 0, 0,
	0, 211, 350, 0, 351, 0, 212, 213, 214, 215,
	352, 353, 0, 0, 219, 0, 216, 0, 0, 217,
	354, 218, 355, 356, 357, 358, 359, 0, 360, 0,
	0, 220, 221, 222, 0, 223, 224, 225, 0, 227,
	226, 0, 361, 0, 228, 0, 0, 229, 230, 0,
	0, 231, 0, 232, 233, 234, 236, 362, 235, 0,
	237, 238, 240, 239, 0, 0, 0, 363, 241, 364,
	242, 243, 0, 244, 0, 0, 245, 0, 0, 246,
	365, 0, 247, 0, 366, 248, 249, 250, 251, 252,
	0, 253, 367, 254, 368, 255, 0, 256, 257, 258,
	259, 260, 369, 261, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	0, 276, 277, 370, 278, 0, 282, 283, 284, 285,
	0, 287, 371, 286, 288, 289, 0, 290, 279, 280,
	291, 0, 292, 372, 373, 293, 0, 299, 294, 295,
	281, 296, 298, 374, 297, 375, 0, 300, 0, 301,
	302, 303, 304, 305, 306, 307, 0, 376, 377, 378,
	0, 0, 308, 309, 379, 380, 0, 310, 311, 312,
	313, 0, 0, 314, 315, 316, 317, 0, 318, 0,
	381, 319, 320, 321, 382, 383, 0, 0, 322, 0,
	171, 0, 0, 323, 324, 325, 326, 327, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 328, 0, 0, 0, 2017, 177,
	178, 179, 329, 330, 331, 332, 180, 333, 334, 0,
	181, 335, 336, 182, 183, 0, 0, 337, 338, 339,
	0, 184, 340, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 192, 193, 0,
	0, 0, 0, 0, 0, 0, 194, 195, 391, 196,
	341, 197, 342, 343, 0, 198, 0, 199, 0, 200,
	0, 0, 201, 202, 0, 203, 0, 0, 0, 344,
	204, 205, 206, 345, 346, 0, 0, 0, 207, 208,
	347, 348, 349, 0, 209, 0, 210, 0, 0, 0,
	0, 211, 350, 0, 351, 0, 212, 213, 214, 215,
	352, 353, 0, 0, 219, 0, 216, 0, 0, 217,
	354, 218, 355, 356, 357, 358, 359, 0, 360, 0,
	0, 220, 221, 222, 0, 223, 224, 225, 0, 227,
	226, 0, 361, 0, 228, 0, 0, 229, 230, 0,
	0, 231, 0, 232, 233, 234, 236, 362, 235, 0,
	237, 238, 240, 239, 0, 0, 0, 363, 241, 364,
	242, 243, 0, 244, 0, 0, 245, 0, 0, 246,
	365, 0, 247, 0, 366, 248, 249, 250, 251, 252,
	0, 253, 367, 254, 368, 255, 0, 256, 257, 258,
	259, 260, 369, 261, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	0, 276, 277, 370, 278, 0, 282, 283, 284, 285,
	0, 287, 371, 286, 288, 289, 0, 290, 279, 280,
	291, 0, 292, 372, 373, 293, 0, 299, 294, 295,
	281, 296, 298, 374, 297, 375, 0, 300, 0, 301,
	302, 303, 304, 305, 306, 307, 0, 376, 377, 378,
	0, 0, 308, 309, 379, 380, 0, 310, 311, 312,
	313, 0, 0, 314, 315, 316, 317, 0, 318, 0,
	381, 319, 320, 321, 382, 383, 0, 0, 322, 0,
	0, 0, 0, 323, 324, 325, 326, 327, 786, 775,
	776, 773, 774, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 0, 176, 1053, 0,
	0, 0, 328, 0, 0, 0, 0, 177, 178, 179,
	329, 818, 331, 819, 180, 820, 821, 0, 181, 335,
	336, 182, 183, 0, 0, 822, 823, 339, 0, 184,
	340, 0, 466, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 467, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 194, 195, 391, 196, 824, 197,
	825, 826, 0, 198, 0, 199, 0, 200, 0, 0,
	817, 202, 0, 203, 0, 0, 0, 344, 204, 205,
	206, 345, 346, 782, 0, 0, 207, 208, 827, 828,
	829, 0, 209, 0, 210, 0, 0, 468, 0, 211,
	350, 0, 351, 0, 212, 213, 214, 215, 352, 353,
	470, 0, 219, 0, 216, 0, 469, 217, 830, 218,
	831, 832, 833, 834, 835, 0, 793, 0, 471, 220,
	221, 222, 472, 223, 224, 225, 0, 227, 226, 0,
	361, 473, 228, 474, 0, 229, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 362, 235, 475, 237, 238,
	240, 239, 0, 0, 783, 363, 241, 836, 242, 243,
	0, 244, 0, 0, 245, 0, 0, 246, 365, 476,
	247, 477, 366, 248, 249, 250, 251, 252, 0, 253,
	367, 254, 368, 255, 0, 256, 257, 258, 259, 260,
	837, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 478, 276,
	277, 370, 278, 0, 282, 283, 284, 285, 0, 287,
	371, 286, 288, 289, 0, 290, 279, 280, 291, 479,
	292, 838, 373, 293, 0, 299, 294, 295, 281, 296,
	298, 839, 297, 375, 0, 300, 0, 301, 302, 303,
	304, 305, 306, 307, 0, 376, 840, 841, 0, 0,
	308, 309, 379, 380, 781, 310, 311, 312, 313, 0,
	0, 314, 315, 316, 317, 0, 318, 0, 381, 319,
	320, 321, 382, 842, 0, 0, 322, 0, 0, 0,
	0, 323, 324, 325, 326, 327, 948, 0, 682, 679,
	0, 0, 0, 950, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 328, 0, 0, 0, 0, 177, 178, 179,
	329, 330, 331, 332, 180, 333, 334, 0, 181, 335,
	336, 182, 183, 0, 0, 337, 338, 339, 0, 184,
	340, 0, 466, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 467, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 194, 195, 391, 196, 341, 197,
	342, 343, 0, 198, 0, 199, 0, 200, 0, 0,
	201, 202, 0, 203, 0, 0, 0, 344, 204, 205,
	206, 345, 346, 0, 0, 0, 207, 208, 347, 348,
	349, 0, 209, 0, 210, 0, 0, 468, 0, 211,
	350, 0, 351, 0, 212, 213, 214, 215, 352, 353,
	470, 0, 219, 0, 216, 0, 469, 217, 354, 218,
	355, 356, 357, 358, 359, 0, 360, 0, 471, 220,
	221, 222, 472, 223, 224, 225, 0, 227, 226, 0,
	361, 473, 228, 474, 0, 229, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 362, 235, 475, 237, 238,
	240, 239, 0, 0, 0, 363, 241, 364, 242, 243,
	0, 244, 0, 0, 245, 0, 0, 246, 365, 476,
	247, 477, 366, 248, 249, 250, 251, 252, 0, 253,
	367, 254, 368, 255, 0, 256, 257, 258, 259, 260,
	369, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 478, 276,
	277, 370, 278, 0, 282, 283, 284, 285, 0, 287,
	371, 286, 288, 289, 0, 290, 279, 280, 291, 479,
	292, 372, 373, 293, 0, 299, 294, 295, 281, 296,
	298, 374, 297, 375, 0, 300, 0, 301, 302, 303,
	304, 305, 306, 307, 0, 376, 377, 378, 0, 0,
	308, 309, 379, 380, 0, 310, 311, 312, 313, 0,
	0, 314, 315, 316, 317, 0, 318, 0, 381, 319,
	320, 321, 382, 383, 0, 567, 322, 171, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 328, 0, 0, 0, 0, 177, 178, 179, 329,
	330, 331, 332, 180, 333, 334, 0, 181, 335, 336,
	182, 183, 0, 0, 337, 338, 339, 0, 184, 340,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 192, 193, 0, 0, 0, 0,
	0, 0, 0, 194, 195, 167, 196, 341, 197, 342,
	343, 0, 198, 0, 199, 0, 200, 0, 0, 201,
	202, 0, 203, 0, 0, 0, 344, 204, 205, 206,
	345, 346, 0, 0, 0, 207, 208, 347, 348, 349,
	0, 209, 0, 210, 0, 0, 0, 0, 211, 350,
	0, 351, 0, 212, 213, 214, 215, 352, 353, 0,
	0, 219, 0, 216, 0, 0, 217, 354, 218, 355,
	356, 357, 358, 359, 0, 360, 0, 0, 220, 221,
	222, 0, 223, 224, 225, 0, 227, 226, 0, 361,
	0, 228, 0, 0, 229, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 362, 235, 0, 237, 238, 240,
	239, 0, 0, 0, 363, 241, 364, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 365, 0, 247,
	0, 366, 248, 249, 250, 251, 252, 0, 253, 367,
	254, 368, 255, 0, 256, 257, 258, 259, 260, 369,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 0, 276, 277,
	370, 278, 0, 282, 283, 284, 285, 0, 287, 371,
	286, 288, 289, 0, 290, 279, 280, 291, 0, 292,
	372, 373, 293, 0, 299, 294, 295, 281, 296, 298,
	374, 297, 375, 0, 300, 166, 301, 302, 303, 304,
	305, 306, 307, 0, 376, 377, 378, 0, 0, 308,
	309, 379, 380, 0, 310, 311, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 318, 0, 381, 319, 320,
	321, 382, 383, 0, 164, 322, 171, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 170, 0,
	328, 0, 0, 0, 0, 177, 178, 179, 329, 330,
	331, 332, 180, 333, 334, 0, 181, 335, 336, 182,
	183, 0, 0, 337, 338, 339, 0, 184, 340, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 192, 193, 0, 0, 0, 0, 0,
	0, 0, 194, 195, 167, 196, 341, 197, 342, 343,
	0, 198, 0, 199, 0, 200, 0, 0, 201, 202,
	0, 203, 0, 0, 0, 344, 204, 205, 206, 345,
	346, 0, 0, 0, 207, 208, 347, 348, 349, 0,
	209, 0, 210, 0, 0, 0, 0, 211, 350, 0,
	351, 0, 212, 213, 214, 215, 352, 353, 0, 0,
	219, 0, 216, 0, 0, 217, 354, 218, 355, 356,
	357, 358, 359, 0, 360, 0, 0, 220, 221, 222,
	0, 223, 224, 225, 0, 227, 226, 0, 361, 0,
	228, 0, 0, 229, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 362, 235, 0, 237, 238, 240, 239,
	0, 0, 0, 363, 241, 364, 242, 243, 0, 244,
	0, 0, 245, 0, 0, 246, 365, 0, 247, 0,
	366, 248, 249, 250, 251, 252, 0, 253, 367, 254,
	368, 255, 0, 256, 257, 258, 259, 260, 369, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 0, 276, 277, 370,
	278, 0, 282, 283, 284, 285, 0, 287, 371, 286,
	288, 289, 0, 290, 279, 280, 291, 0, 292, 372,
	373, 293, 0, 299, 294, 295, 281, 296, 298, 374,
	297, 375, 0, 300, 166, 301, 302, 303, 304, 305,
	306, 307, 0, 376, 377, 378, 0, 0, 308, 309,
	379, 380, 0, 310, 311, 312, 313, 0, 0, 314,
	315, 316, 317, 0, 318, 0, 381, 319, 320, 321,
	382, 383, 682, 679, 322, 0, 0, 950, 0, 323,
	324, 325, 326, 327, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 328, 170, 0, 0,
	0, 177, 178, 179, 329, 330, 331, 332, 180, 333,
	334, 0, 181, 335, 336, 182, 183, 0, 0, 337,
	338, 339, 0, 184, 340, 0, 466, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 467, 192,
	193, 0, 0, 0, 0, 0, 0, 0, 194, 195,
	391, 196, 341, 197, 342, 343, 0, 198, 0, 199,
	0, 200, 0, 0, 201, 202, 0, 203, 0, 0,
	0, 344, 204, 205, 206, 345, 346, 0, 0, 0,
	207, 208, 347, 348, 349, 0, 209, 0, 210, 0,
	0, 468, 0, 211, 350, 0, 351, 0, 212, 213,
	214, 215, 352, 353, 470, 0, 219, 0, 216, 0,
	469, 217, 354, 218, 355, 356, 357, 358, 359, 0,
	360, 0, 471, 220, 221, 222, 472, 223, 224, 225,
	0, 227, 226, 0, 361, 473, 228, 474, 0, 229,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 362,
	235, 475, 237, 238, 240, 239, 0, 0, 0, 363,
	241, 364, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 365, 476, 247, 477, 366, 248, 249, 250,
	251, 252, 0, 253, 367, 254, 368, 255, 0, 256,
	257, 258, 259, 260, 369, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 478, 276, 277, 370, 278, 0, 282, 283,
	284, 285, 0, 287, 371, 286, 288, 289, 0, 290,
	279, 280, 291, 479, 292, 372, 373, 293, 0, 299,
	294, 295, 281, 296, 298, 374, 297, 375, 0, 300,
	0, 301, 302, 303, 304, 305, 306, 307, 0, 376,
	377, 378, 0, 0, 308, 309, 379, 380, 0, 310,
	311, 312, 313, 0, 0, 314, 315, 316, 317, 0,
	318, 0, 381, 319, 320, 321, 382, 383, 171, 0,
	322, 0, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 328, 0, 0, 0, 0, 177, 178, 179,
	329, 330, 331, 332, 180, 333, 334, 0, 181, 335,
	336, 182, 183, 0, 0, 337, 338, 339, 0, 184,
	340, 0, 0, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 0, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 194, 195, 167, 196, 341, 197,
	342, 343, 0, 198, 0, 199, 0, 200, 0, 0,
	201, 202, 0, 203, 0, 0, 0, 344, 204, 205,
	206, 345, 346, 0, 0, 0, 207, 208, 347, 348,
	349, 0, 209, 0, 210, 0, 0, 0, 0, 211,
	350, 0, 351, 0, 212, 213, 214, 215, 352, 353,
	0, 0, 219, 0, 216, 0, 0, 217, 354, 218,
	355, 356, 357, 358, 359, 0, 360, 0, 0, 220,
	221, 222, 0, 223, 224, 225, 0, 227, 226, 0,
	361, 0, 228, 0, 0, 229, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 362, 235, 0, 237, 238,
	240, 239, 0, 0, 0, 363, 241, 364, 242, 243,
	0, 244, 0, 0, 245, 0, 0, 246, 365, 0,
	247, 0, 366, 248, 249, 250, 251, 252, 0, 253,
	367, 254, 368, 255, 0, 256, 257, 258, 259, 260,
	369, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 0, 276,
	277, 370, 278, 0, 282, 283, 284, 285, 0, 287,
	371, 286, 288, 289, 0, 290, 279, 280, 291, 0,
	292, 372, 373, 293, 0, 299, 294, 295, 281, 296,
	298, 374, 297, 375, 0, 300, 166, 301, 302, 303,
	304, 305, 306, 307, 0, 376, 377, 378, 0, 0,
	308, 309, 379, 380, 0, 310, 311, 312, 313, 0,
	0, 314, 315, 316, 317, 0, 318, 0, 381, 319,
	320, 321, 382, 383, 682, 679, 322, 0, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 328, 170,
	0, 0, 0, 177, 178, 179, 329, 330, 331, 332,
	180, 333, 334, 0, 181, 335, 336, 182, 183, 0,
	0, 337, 338, 339, 0, 184, 340, 0, 466, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	467, 192, 193, 0, 0, 0, 0, 0, 0, 0,
	194, 195, 391, 196, 341, 197, 342, 343, 0, 198,
	0, 199, 0, 200, 0, 0, 201, 202, 0, 203,
	0, 0, 0, 344, 204, 205, 206, 345, 346, 0,
	0, 0, 207, 208, 347, 348, 349, 0, 209, 0,
	210, 0, 0, 468, 0, 211, 350, 0, 351, 0,
	212, 213, 214, 215, 352, 353, 470, 0, 219, 0,
	216, 0, 469, 217, 354, 218, 355, 356, 357, 358,
	359, 0, 360, 0, 471, 220, 221, 222, 472, 223,
	224, 225, 0, 227, 226, 0, 361, 473, 228, 474,
	0, 229, 230, 0, 0, 231, 0, 232, 233, 234,
	236, 362, 235, 475, 237, 238, 240, 239, 0, 0,
	0, 363, 241, 364, 242, 243, 0, 244, 0, 0,
	245, 0, 0, 246, 365, 476, 247, 477, 366, 248,
	249, 250, 251, 252, 0, 253, 367, 254, 368, 255,
	0, 256, 257, 258, 259, 260, 369, 261, 262, 0,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 0, 275, 478, 276, 277, 370, 278, 0,
	282, 283, 284, 285, 0, 287, 371, 286, 288, 289,
	0, 290, 279, 280, 291, 479, 292, 372, 373, 293,
	0, 299, 294, 295, 281, 296, 298, 374, 297, 375,
	0, 300, 0, 301, 302, 303, 304, 305, 306, 307,
	0, 376, 377, 378, 0, 0, 308, 309, 379, 380,
	0, 310, 311, 312, 313, 0, 0, 314, 315, 316,
	317, 0, 318, 0, 381, 319, 320, 321, 382, 383,
	171, 0, 322, 0, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 328, 0, 0, 0, 0, 177,
	178, 179, 329, 330, 331, 332, 180, 333, 334, 0,
	181, 335, 336, 182, 183, 0, 0, 337, 338, 339,
	0, 184, 340, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 192, 193, 0,
	0, 0, 0, 0, 0, 0, 194, 195, 391, 196,
	341, 197, 342, 343, 0, 198, 0, 199, 0, 200,
	0, 0, 201, 202, 0, 203, 0, 0, 0, 344,
	204, 205, 206, 345, 346, 0, 0, 0, 207, 208,
	347, 348, 349, 0, 209, 0, 210, 0, 0, 0,
	0, 211, 350, 0, 351, 0, 212, 213, 214, 215,
	352, 353, 0, 0, 219, 0, 216, 0, 0, 217,
	354, 218, 355, 356, 357, 358, 359, 0, 360, 0,
	0, 220, 221, 222, 0, 223, 224, 225, 0, 227,
	226, 0, 361, 0, 228, 0, 0, 229, 230, 0,
	0, 231, 0, 232, 233, 234, 236, 362, 235, 0,
	237, 238, 240, 239, 0, 0, 0, 363, 241, 364,
	242, 243, 0, 244, 0, 0, 245, 0, 0, 246,
	365, 0, 247, 0, 366, 248, 249, 250, 251, 252,
	0, 253, 367, 254, 368, 255, 0, 256, 257, 258,
	259, 260, 369, 261, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	0, 276, 277, 370, 278, 0, 282, 283, 284, 285,
	0, 287, 371, 286, 288, 289, 0, 290, 279, 280,
	291, 0, 292, 372, 373, 293, 0, 299, 294, 295,
	281, 296, 298, 374, 297, 375, 0, 300, 0, 301,
	302, 303, 304, 305, 306, 307, 0, 376, 377, 378,
	0, 0, 308, 309, 379, 380, 0, 310, 311, 312,
	313, 0, 0, 314, 315, 316, 317, 0, 318, 0,
	381, 319, 320, 321, 382, 383, 682, 0, 322, 0,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	328, 170, 0, 0, 0, 177, 178, 179, 329, 330,
	331, 332, 180, 333, 334, 0, 181, 335, 336, 182,
	183, 0, 0, 337, 338, 339, 0, 184, 340, 0,
	466, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 467, 192, 193, 0, 0, 0, 0, 0,
	0, 0, 194, 195, 391, 196, 341, 197, 342, 343,
	0, 198, 0, 199, 0, 200, 0, 0, 201, 202,
	0, 203, 0, 0, 0, 344, 204, 205, 206, 345,
	346, 0, 0, 0, 207, 208, 347, 348, 349, 0,
	209, 0, 210, 0, 0, 468, 0, 211, 350, 0,
	351, 0, 212, 213, 214, 215, 352, 353, 470, 0,
	219, 0, 216, 0, 469, 217, 354, 218, 355, 356,
	357, 358, 359, 0, 360, 0, 471, 220, 221, 222,
	472, 223, 224, 225, 0, 227, 226, 0, 361, 473,
	228, 474, 0, 229, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 362, 235, 475, 237, 238, 240, 239,
	0, 0, 0, 363, 241, 364, 242, 243, 0, 244,
	0, 0, 245, 0, 0, 246, 365, 476, 247, 477,
	366, 248, 249, 250, 251, 252, 0, 253, 367, 254,
	368, 255, 0, 256, 257, 258, 259, 260, 369, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 478, 276, 277, 370,
	278, 0, 282, 283, 284, 285, 0, 287, 371, 286,
	288, 289, 0, 290, 279, 280, 291, 479, 292, 372,
	373, 293, 0, 299, 294, 295, 281, 296, 298, 374,
	297, 375, 0, 300, 0, 301, 302, 303, 304, 305,
	306, 307, 0, 376, 377, 378, 0, 0, 308, 309,
	379, 380, 0, 310, 311, 312, 313, 0, 0, 314,
	315, 316, 317, 0, 318, 0, 381, 319, 320, 321,
	382, 383, 171, 0, 322, 0, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 328, 0, 0, 0,
	0, 177, 178, 179, 329, 330, 331, 332, 180, 333,
	334, 0, 181, 335, 336, 182, 183, 0, 0, 337,
	338, 339, 1402, 184, 340, 0, 0, 0, 185, 186,
	187, 0, 188, 1400, 189, 190, 191, 0, 0, 192,
	193, 0, 0, 0, 0, 0, 0, 0, 194, 195,
	391, 196, 341, 197, 342, 343, 0, 198, 0, 199,
	0, 200, 0, 0, 201, 202, 0, 203, 0, 0,
	0, 344, 204, 205, 206, 345, 346, 0, 1599, 0,
	207, 208, 347, 348, 349, 0, 209, 0, 210, 1405,
	0, 0, 0, 211, 350, 0, 351, 0, 212, 213,
	214, 215, 352, 353, 0, 0, 219, 1597, 216, 0,
	0, 217, 354, 218, 355, 356, 357, 358, 359, 0,
	360, 0, 0, 220, 221, 222, 0, 223, 224, 225,
	0, 227, 226, 0, 361, 0, 228, 0, 0, 229,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 362,
	235, 0, 237, 238, 240, 239, 0, 0, 0, 363,
	241, 364, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 365, 0, 247, 0, 366, 248, 249, 250,
	251, 252, 0, 253, 367, 254, 368, 255, 1404, 256,
	257, 258, 259, 260, 369, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 0, 276, 277, 370, 278, 0, 282, 283,
	284, 285, 0, 287, 371, 286, 288, 289, 0, 290,
	279, 280, 291, 0, 292, 372, 373, 293, 0, 299,
	294, 295, 281, 296, 298, 374, 297, 375, 0, 300,
	0, 301, 302, 303, 304, 305, 306, 307, 0, 376,
	377, 378, 0, 0, 308, 309, 379, 380, 0, 310,
	311, 312, 313, 0, 1598, 314, 315, 316, 317, 0,
	318, 0, 381, 319, 320, 321, 382, 383, 171, 0,
	322, 0, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 328, 0, 0, 0, 0, 177, 178, 179,
	329, 330, 331, 332, 180, 333, 334, 0, 181, 335,
	336, 182, 183, 0, 0, 337, 338, 339, 1402, 184,
	340, 0, 0, 1397, 185, 186, 187, 0, 188, 1400,
	189, 190, 191, 0, 0, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 194, 195, 391, 196, 341, 197,
	342, 343, 0, 198, 0, 199, 0, 200, 0, 0,
	201, 202, 0, 203, 0, 0, 0, 344, 204, 205,
	206, 345, 346, 0, 0, 0, 207, 208, 347, 348,
	349, 0, 209, 0, 210, 1405, 0, 0, 0, 211,
	350, 0, 351, 0, 212, 213, 214, 215, 1396, 353,
	0, 0, 219, 0, 216, 0, 0, 217, 354, 218,
	355, 356, 357, 358, 359, 0, 360, 0, 0, 220,
	221, 222, 0, 223, 224, 225, 0, 227, 226, 0,
	361, 0, 228, 0, 0, 229, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 362, 235, 0, 237, 238,
	240, 239, 0, 0, 0, 363, 241, 364, 242, 243,
	0, 244, 0, 0, 245, 0, 0, 246, 365, 0,
	247, 0, 366, 248, 249, 250, 251, 252, 0, 253,
	367, 254, 368, 255, 1404, 256, 257, 258, 259, 260,
	369, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 0, 276,
	277, 370, 278, 0, 282, 283, 284, 285, 0, 287,
	371, 286, 288, 289, 0, 290, 279, 280, 291, 0,
	292, 372, 373, 293, 0, 299, 294, 295, 281, 296,
	298, 374, 297, 375, 0, 300, 0, 301, 302, 303,
	304, 305, 306, 307, 0, 376, 377, 378, 0, 0,
	308, 309, 379, 380, 0, 310, 311, 312, 313, 0,
	1403, 314, 315, 316, 317, 0, 318, 0, 381, 319,
	320, 321, 382, 383, 0, 877, 322, 171, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 328, 0, 0, 0, 0, 177, 178, 179, 329,
	330, 331, 332, 180, 333, 334, 0, 181, 335, 336,
	182, 183, 0, 0, 337, 338, 339, 0, 184, 340,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 192, 193, 0, 0, 0, 0,
	0, 0, 0, 194, 195, 391, 196, 341, 197, 342,
	343, 0, 198, 0, 199, 0, 200, 0, 0, 201,
	202, 0, 203, 0, 0, 0, 344, 204, 205, 206,
	345, 346, 0, 0, 0, 207, 208, 347, 348, 349,
	0, 209, 0, 210, 0, 0, 0, 0, 211, 350,
	0, 351, 0, 212, 213, 214, 215, 352, 353, 0,
	0, 219, 0, 216, 0, 0, 217, 354, 218, 355,
	356, 357, 358, 359, 0, 360, 0, 0, 220, 221,
	222, 0, 223, 224, 225, 0, 227, 226, 0, 361,
	0, 228, 0, 0, 229, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 362, 235, 0, 237, 238, 240,
	239, 0, 0, 0, 363, 241, 364, 242, 243, 0,
	244, 0, 724, 245, 0, 0, 246, 365, 0, 247,
	0, 366, 248, 249, 250, 251, 252, 0, 253, 367,
	254, 368, 255, 0, 256, 257, 258, 259, 260, 369,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 0, 276, 277,
	370, 278, 0, 282, 283, 284, 285, 0, 287, 371,
	286, 288, 289, 0, 290, 279, 280, 291, 0, 292,
	372, 373, 293, 0, 299, 294, 295, 281, 296, 298,
	374, 297, 375, 0, 300, 0, 301, 302, 303, 304,
	305, 306, 307, 0, 376, 377, 378, 0, 0, 308,
	309, 379, 380, 0, 310, 311, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 318, 0, 381, 319, 320,
	321, 382, 383, 0, 730, 322, 171, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	328, 0, 0, 0, 0, 177, 178, 179, 329, 330,
	331, 332, 180, 333, 334, 0, 181, 335, 336, 182,
	183, 0, 0, 337, 338, 339, 0, 184, 340, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 192, 193, 0, 0, 0, 0, 0,
	0, 0, 194, 195, 391, 196, 341, 197, 342, 343,
	0, 198, 0, 199, 0, 200, 0, 0, 201, 202,
	0, 203, 0, 0, 0, 344, 204, 205, 206, 345,
	346, 0, 0, 0, 207, 208, 347, 348, 349, 0,
	209, 0, 210, 0, 0, 0, 0, 211, 350, 0,
	351, 0, 212, 213, 214, 215, 732, 353, 0, 0,
	219, 0, 216, 0, 0, 217, 354, 218, 355, 356,
	357, 358, 359, 0, 360, 0, 0, 220, 221, 222,
	0, 223, 224, 225, 0, 227, 226, 0, 361, 0,
	228, 0, 0, 229, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 362, 235, 0, 237, 238, 240, 239,
	0, 0, 0, 363, 241, 364, 242, 243, 0, 244,
	0, 724, 245, 0, 0, 246, 365, 0, 247, 0,
	366, 248, 249, 250, 251, 252, 0, 253, 367, 254,
	368, 255, 0, 256, 257, 258, 259, 260, 369, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 0, 276, 277, 370,
	278, 0, 282, 283, 284, 285, 0, 287, 371, 286,
	288, 289, 0, 290, 279, 280, 291, 0, 292, 372,
	373, 293, 0, 299, 294, 295, 281, 296, 298, 374,
	297, 375, 0, 300, 0, 301, 302, 303, 304, 305,
	306, 307, 0, 376, 377, 378, 0, 0, 308, 309,
	379, 380, 0, 310, 311, 312, 313, 0, 0, 314,
	315, 316, 317, 0, 318, 0, 381, 319, 320, 321,
	382, 383, 0, 726, 322, 171, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 0, 0, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 328,
	0, 0, 0, 0, 177, 178, 179, 329, 330, 331,
	332, 180, 333, 334, 0, 181, 335, 336, 182, 183,
	0, 0, 337, 338, 339, 0, 184, 340, 0, 0,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 0, 192, 193, 0, 0, 0, 0, 0, 0,
	0, 194, 195, 391, 196, 341, 197, 342, 343, 0,
	198, 0, 199, 0, 200, 0, 0, 201, 202, 0,
	203, 0, 0, 0, 344, 204, 205, 206, 345, 346,
	0, 0, 0, 207, 208, 347, 348, 349, 0, 209,
	0, 210, 0, 0, 0, 0, 211, 350, 0, 351,
	0, 212, 213, 214, 215, 728, 353, 0, 0, 219,
	0, 216, 0, 0, 217, 354, 218, 355, 356, 357,
	358, 359, 0, 360, 0, 0, 220, 221, 222, 0,
	223, 224, 225, 0, 227, 226, 0, 361, 0, 228,
	0, 0, 229, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 362, 235, 0, 237, 238, 240, 239, 0,
	0, 0, 363, 241, 364, 242, 243, 0, 244, 0,
	724, 245, 0, 0, 246, 365, 0, 247, 0, 366,
	248, 249, 250, 251, 252, 0, 253, 367, 254, 368,
	255, 0, 256, 257, 258, 259, 260, 369, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 0, 276, 277, 370, 278,
	0, 282, 283, 284, 285, 0, 287, 371, 286, 288,
	289, 0, 290, 279, 280, 291, 0, 292, 372, 373,
	293, 0, 299, 294, 295, 281, 296, 298, 374, 297,
	375, 0, 300, 0, 301, 302, 303, 304, 305, 306,
	307, 0, 376, 377, 378, 0, 0, 308, 309, 379,
	380, 0, 310, 311, 312, 313, 0, 0, 314, 315,
	316, 317, 0, 318, 0, 381, 319, 320, 321, 382,
	383, 0, 408, 322, 171, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 407, 176, 0, 0, 0, 0, 328, 0,
	0, 0, 0, 177, 178, 179, 329, 330, 331, 332,
	180, 333, 334, 0, 181, 335, 336, 182, 183, 0,
	0, 337, 338, 339, 0, 184, 340, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 192, 193, 0, 0, 0, 0, 0, 0, 0,
	194, 195, 391, 196, 341, 197, 342, 343, 0, 198,
	0, 199, 0, 200, 0, 0, 201, 202, 0, 203,
	0, 0, 0, 344, 204, 205, 206, 345, 346, 0,
	0, 0, 207, 208, 347, 348, 349, 0, 209, 0,
	210, 0, 0, 0, 0, 211, 350, 0, 351, 0,
	212, 213, 214, 215, 352, 353, 0, 0, 219, 0,
	216, 0, 0, 217, 354, 218, 355, 356, 357, 358,
	359, 0, 360, 0, 0, 220, 221, 222, 0, 223,
	224, 225, 0, 227, 226, 0, 361, 0, 228, 0,
	0, 229, 230, 0, 0, 231, 0, 232, 233, 234,
	236, 362, 235, 0, 237, 238, 240, 239, 0, 0,
	0, 363, 241, 364, 242, 243, 0, 244, 0, 0,
	245, 0, 0, 246, 365, 0, 247, 0, 366, 248,
	249, 250, 251, 252, 0, 253, 367, 254, 368, 406,
	0, 256, 257, 258, 259, 260, 369, 261, 262, 0,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 0, 275, 0, 276, 277, 370, 278, 0,
	282, 283, 284, 285, 0, 287, 371, 286, 288, 289,
	0, 290, 279, 280, 291, 0, 292, 372, 373, 293,
	0, 299, 294, 295, 281, 296, 298, 374, 297, 375,
	0, 300, 0, 301, 302, 303, 304, 305, 306, 307,
	0, 376, 377, 378, 0, 0, 308, 309, 379, 380,
	0, 310, 311, 312, 313, 0, 0, 314, 315, 316,
	317, 0, 318, 0, 381, 319, 320, 321, 382, 383,
	171, 0, 322, 0, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 328, 0, 1385, 0, 0, 177,
	178, 179, 329, 330, 331, 332, 180, 333, 334, 0,
	181, 335, 336, 182, 183, 0, 0, 337, 338, 339,
	0, 184, 340, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 192, 193, 0,
	0, 0, 0, 0, 0, 0, 194, 195, 391, 196,
	341, 197, 342, 343, 0, 198, 0, 199, 0, 200,
	0, 0, 201, 202, 0, 203, 0, 0, 0, 344,
	204, 205, 206, 345, 346, 0, 0, 0, 207, 208,
	347, 348, 349, 0, 209, 0, 210, 0, 0, 0,
	0, 211, 350, 0, 351, 0, 212, 213, 214, 215,
	352, 353, 0, 0, 219, 0, 216, 0, 0, 217,
	354, 218, 355, 356, 357, 358, 359, 0, 360, 0,
	0, 220, 221, 222, 0, 223, 224, 225, 0, 227,
	226, 0, 361, 0, 228, 0, 0, 229, 230, 0,
	0, 231, 0, 232, 233, 234, 236, 362, 235, 0,
	237, 238, 240, 239, 0, 0, 0, 363, 241, 364,
	242, 243, 0, 244, 0, 0, 245, 0, 0, 246,
	365, 0, 247, 0, 366, 248, 249, 250, 251, 252,
	0, 253, 367, 254, 368, 255, 0, 256, 257, 258,
	259, 260, 369, 261, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	0, 276, 277, 370, 278, 0, 282, 283, 284, 285,
	0, 287, 371, 286, 288, 289, 0, 290, 279, 280,
	291, 0, 292, 372, 373, 293, 0, 299, 294, 295,
	281, 296, 298, 374, 297, 375, 0, 300, 0, 301,
	302, 303, 304, 305, 306, 307, 0, 376, 377, 378,
	0, 0, 308, 309, 379, 380, 0, 310, 311, 312,
	313, 0, 0, 314, 315, 316, 317, 0, 318, 0,
	381, 319, 320, 321, 382, 383, 171, 0, 322, 0,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	328, 0, 0, 0, 0, 177, 178, 179, 329, 330,
	331, 332, 180, 333, 334, 0, 181, 335, 336, 182,
	183, 0, 0, 337, 338, 339, 0, 184, 340, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 192, 193, 0, 0, 0, 0, 0,
	0, 0, 194, 195, 391, 196, 341, 197, 342, 343,
	0, 198, 0, 199, 0, 200, 0, 0, 201, 202,
	0, 203, 0, 0, 0, 344, 204, 205, 206, 345,
	346, 0, 0, 0, 207, 208, 347, 348, 349, 0,
	209, 0, 210, 0, 0, 0, 0, 211, 350, 0,
	351, 0, 212, 213, 214, 215, 352, 353, 0, 0,
	219, 0, 216, 0, 0, 217, 354, 218, 355, 356,
	357, 358, 359, 0, 360, 0, 0, 220, 221, 222,
	0, 223, 224, 225, 0, 227, 226, 0, 361, 0,
	228, 0, 0, 229, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 362, 235, 0, 237, 238, 240, 239,
	0, 0, 0, 363, 241, 364, 242, 243, 0, 244,
	0, 724, 245, 0, 0, 246, 365, 0, 247, 0,
	366, 248, 249, 250, 251, 252, 0, 253, 367, 254,
	368, 255, 0, 256, 257, 258, 259, 260, 369, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 0, 276, 277, 370,
	278, 0, 282, 283, 284, 285, 0, 287, 371, 286,
	288, 289, 0, 290, 279, 280, 291, 0, 292, 372,
	373, 293, 0, 299, 294, 295, 281, 296, 298, 374,
	297, 375, 0, 300, 0, 301, 302, 303, 304, 305,
	306, 307, 0, 376, 377, 378, 0, 0, 308, 309,
	379, 380, 0, 310, 311, 312, 313, 0, 0, 314,
	315, 316, 317, 0, 318, 0, 381, 319, 320, 321,
	382, 383, 0, 1328, 322, 171, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 0, 0, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 328,
	0, 0, 0, 0, 177, 178, 179, 329, 330, 331,
	332, 180, 333, 334, 0, 181, 335, 336, 182, 183,
	0, 0, 337, 338, 339, 0, 184, 340, 0, 0,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 0, 192, 193, 0, 0, 0, 0, 0, 0,
	0, 194, 195, 391, 196, 341, 197, 342, 343, 0,
	198, 0, 199, 0, 200, 0, 0, 201, 202, 0,
	203, 0, 0, 0, 344, 204, 205, 206, 345, 346,
	0, 0, 0, 207, 208, 347, 348, 349, 0, 209,
	0, 210, 0, 0, 0, 0, 211, 350, 0, 351,
	0, 212, 213, 214, 215, 352, 353, 0, 0, 219,
	0, 216, 0, 0, 217, 354, 218, 355, 356, 357,
	358, 359, 0, 360, 0, 0, 220, 221, 222, 0,
	223, 224, 225, 0, 227, 226, 0, 361, 0, 228,
	0, 0, 229, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 362, 235, 0, 237, 238, 240, 239, 0,
	0, 0, 363, 241, 364, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 365, 0, 247, 0, 366,
	248, 249, 250, 251, 252, 0, 253, 367, 254, 368,
	255, 0, 256, 257, 258, 259, 260, 369, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 0, 276, 277, 370, 278,
	0, 282, 283, 284, 285, 0, 287, 371, 286, 288,
	289, 0, 290, 279, 280, 291, 0, 292, 372, 373,
	293, 0, 299, 294, 295, 281, 296, 298, 374, 297,
	375, 0, 300, 0, 301, 302, 303, 304, 305, 306,
	307, 0, 376, 377, 378, 0, 0, 308, 309, 379,
	380, 0, 310, 311, 312, 313, 0, 0, 314, 315,
	316, 317, 0, 318, 0, 381, 319, 320, 321, 382,
	383, 0, 1326, 322, 171, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 328, 0,
	0, 0, 0, 177, 178, 179, 329, 330, 331, 332,
	180, 333, 334, 0, 181, 335, 336, 182, 183, 0,
	0, 337, 338, 339, 0, 184, 340, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 192, 193, 0, 0, 0, 0, 0, 0, 0,
	194, 195, 391, 196, 341, 197, 342, 343, 0, 198,
	0, 199, 0, 200, 0, 0, 201, 202, 0, 203,
	0, 0, 0, 344, 204, 205, 206, 345, 346, 0,
	0, 0, 207, 208, 347, 348, 349, 0, 209, 0,
	210, 0, 0, 0, 0, 211, 350, 0, 351, 0,
	212, 213, 214, 215, 352, 353, 0, 0, 219, 0,
	216, 0, 0, 217, 354, 218, 355, 356, 357, 358,
	359, 0, 360, 0, 0, 220, 221, 222, 0, 223,
	224, 225, 0, 227, 226, 0, 361, 0, 228, 0,
	0, 229, 230, 0, 0, 231, 0, 232, 233, 234,
	236, 362, 235, 0, 237, 238, 240, 239, 0, 0,
	0, 363, 241, 364, 242, 243, 0, 244, 0, 0,
	245, 0, 0, 246, 365, 0, 247, 0, 366, 248,
	249, 250, 251, 252, 0, 253, 367, 254, 368, 255,
	0, 256, 257, 258, 259, 260, 369, 261, 262, 0,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 0, 275, 0, 276, 277, 370, 278, 0,
	282, 283, 284, 285, 0, 287, 371, 286, 288, 289,
	0, 290, 279, 280, 291, 0, 292, 372, 373, 293,
	0, 299, 294, 295, 281, 296, 298, 374, 297, 375,
	0, 300, 0, 301, 302, 303, 304, 305, 306, 307,
	0, 376, 377, 378, 0, 0, 308, 309, 379, 380,
	0, 310, 311, 312, 313, 0, 0, 314, 315, 316,
	317, 0, 318, 0, 381, 319, 320, 321, 382, 383,
	171, 0, 322, 0, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 0, 0, 0, 174, 175, 1308, 176,
	0, 0, 0, 0, 328, 0, 0, 0, 0, 177,
	178, 179, 329, 330, 331, 332, 180, 333, 334, 0,
	181, 335, 336, 182, 183, 0, 0, 337, 338, 339,
	0, 184, 340, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 192, 193, 0,
	0, 0, 0, 0, 0, 0, 194, 195, 391, 196,
	341, 197, 342, 343, 0, 198, 0, 199, 0, 200,
	0, 0, 201, 202, 0, 203, 0, 0, 0, 344,
	204, 205, 206, 345, 346, 0, 0, 0, 207, 208,
	347, 348, 349, 0, 209, 0, 210, 0, 0, 0,
	0, 211, 350, 0, 351, 0, 212, 213, 214, 215,
	352, 353, 0, 0, 219, 0, 216, 0, 0, 217,
	354, 218, 355, 356, 357, 358, 359, 0, 360, 0,
	0, 220, 221, 222, 0, 223, 224, 225, 0, 227,
	226, 0, 361, 0, 228, 0, 0, 229, 230, 0,
	0, 231, 0, 232, 233, 234, 236, 362, 235, 0,
	237, 238, 240, 239, 0, 0, 0, 363, 241, 364,
	242, 243, 0, 244, 0, 0, 245, 0, 0, 246,
	365, 0, 247, 0, 366, 248, 249, 250, 251, 252,
	0, 253, 367, 254, 368, 255, 0, 256, 257, 258,
	259, 260, 369, 261, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	0, 276, 277, 370, 278, 0, 282, 283, 284, 285,
	0, 287, 371, 286, 288, 289, 0, 290, 279, 280,
	291, 0, 292, 372, 373, 293, 0, 299, 294, 295,
	281, 296, 298, 374, 297, 375, 0, 300, 0, 301,
	302, 303, 304, 305, 306, 307, 0, 376, 377, 378,
	0, 0, 308, 309, 379, 380, 0, 310, 311, 312,
	313, 0, 0, 314, 315, 316, 317, 0, 318, 0,
	381, 319, 320, 321, 382, 383, 0, 1194, 322, 171,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 0,
	0, 0, 0, 0, 0, 174, 175, 0, 176, 0,
	0, 0, 0, 328, 0, 0, 0, 0, 177, 178,
	179, 329, 330, 331, 332, 180, 333, 334, 0, 181,
	335, 336, 182, 183, 0, 0, 337, 338, 339, 0,
	184, 340, 0, 0, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 0, 192, 193, 0, 0,
	0, 0, 0, 0, 0, 194, 195, 391, 196, 341,
	197, 342, 343, 0, 198, 0, 199, 0, 200, 0,
	0, 201, 202, 0, 203, 0, 0, 0, 344, 204,
	205, 206, 345, 346, 0, 0, 0, 207, 208, 347,
	348, 349, 0, 209, 0, 210, 0, 0, 0, 0,
	211, 350, 0, 351, 0, 212, 213, 214, 215, 1193,
	353, 0, 0, 219, 0, 216, 0, 0, 217, 354,
	218, 355, 356, 357, 358, 359, 0, 360, 0, 0,
	220, 221, 222, 0, 223, 224, 225, 0, 227, 226,
	0, 361, 0, 228, 0, 0, 229, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 362, 235, 0, 237,
	238, 240, 239, 0, 0, 0, 363, 241, 364, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 365,
	0, 247, 0, 366, 248, 249, 250, 251, 252, 0,
	253, 367, 254, 368, 255, 0, 256, 257, 258, 259,
	260, 369, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 0,
	276, 277, 370, 278, 0, 282, 283, 284, 285, 0,
	287, 371, 286, 288, 289, 0, 290, 279, 280, 291,
	0, 292, 372, 373, 293, 0, 299, 294, 295, 281,
	296, 298, 374, 297, 375, 0, 300, 0, 301, 302,
	303, 304, 305, 306, 307, 0, 376, 377, 378, 0,
	0, 308, 309, 379, 380, 0, 310, 311, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 318, 0, 381,
	319, 320, 321, 382, 383, 0, 600, 322, 171, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 328, 0, 0, 0, 0, 177, 178, 179,
	329, 330, 331, 332, 180, 333, 334, 0, 181, 335,
	336, 182, 183, 0, 0, 337, 338, 925, 0, 184,
	340, 0, 0, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 0, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 194, 195, 391, 196, 341, 197,
	342, 343, 0, 198, 0, 199, 0, 200, 0, 0,
	201, 202, 0, 203, 0, 0, 0, 344, 204, 205,
	206, 345, 346, 0, 0, 0, 207, 208, 347, 348,
	349, 0, 209, 0, 210, 0, 0, 0, 0, 211,
	350, 0, 351, 0, 212, 213, 214, 215, 352, 353,
	0, 0, 219, 0, 216, 0, 0, 217, 354, 218,
	355, 356, 357, 358, 359, 0, 360, 0, 0, 220,
	221, 222, 0, 223, 224, 225, 0, 227, 226, 0,
	361, 0, 228, 0, 0, 229, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 362, 602, 0, 237, 238,
	240, 239, 0, 0, 0, 363, 241, 364, 242, 243,
	0, 244, 0, 0, 245, 0, 0, 246, 365, 0,
	247, 0, 366, 248, 249, 250, 251, 252, 0, 253,
	367, 254, 368, 255, 0, 256, 257, 258, 259, 260,
	369, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 0, 276,
	277, 370, 278, 0, 282, 283, 284, 285, 0, 287,
	371, 286, 288, 289, 0, 290, 279, 280, 291, 0,
	292, 372, 373, 293, 0, 299, 294, 295, 281, 296,
	298, 374, 297, 375, 0, 300, 0, 301, 302, 303,
	304, 305, 306, 307, 0, 597, 377, 378, 0, 0,
	308, 926, 379, 380, 0, 310, 311, 312, 313, 0,
	0, 314, 315, 316, 317, 0, 318, 0, 381, 319,
	320, 321, 382, 383, 0, 895, 322, 171, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 328, 0, 0, 0, 0, 177, 178, 179, 329,
	330, 331, 332, 180, 333, 334, 0, 181, 335, 336,
	182, 183, 0, 0, 337, 338, 339, 0, 184, 340,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 192, 193, 0, 0, 0, 0,
	0, 0, 0, 194, 195, 391, 196, 341, 197, 342,
	343, 0, 198, 0, 199, 0, 200, 0, 0, 201,
	202, 0, 203, 0, 0, 0, 344, 204, 205, 206,
	345, 346, 0, 0, 0, 207, 208, 347, 348, 349,
	0, 209, 0, 210, 0, 0, 0, 0, 211, 350,
	0, 351, 0, 212, 213, 214, 215, 894, 353, 0,
	0, 219, 0, 216, 0, 0, 217, 354, 218, 355,
	356, 357, 358, 359, 0, 360, 0, 0, 220, 221,
	222, 0, 223, 224, 225, 0, 227, 226, 0, 361,
	0, 228, 0, 0, 229, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 362, 235, 0, 237, 238, 240,
	239, 0, 0, 0, 363, 241, 364, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 365, 0, 247,
	0, 366, 248, 249, 250, 251, 252, 0, 253, 367,
	254, 368, 255, 0, 256, 257, 258, 259, 260, 369,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 0, 276, 277,
	370, 278, 0, 282, 283, 284, 285, 0, 287, 371,
	286, 288, 289, 0, 290, 279, 280, 291, 0, 292,
	372, 373, 293, 0, 299, 294, 295, 281, 296, 298,
	374, 297, 375, 0, 300, 0, 301, 302, 303, 304,
	305, 306, 307, 0, 376, 377, 378, 0, 0, 308,
	309, 379, 380, 0, 310, 311, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 318, 0, 381, 319, 320,
	321, 382, 383, 0, 892, 322, 171, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	328, 0, 0, 0, 0, 177, 178, 179, 329, 330,
	331, 332, 180, 333, 334, 0, 181, 335, 336, 182,
	183, 0, 0, 337, 338, 339, 0, 184, 340, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 192, 193, 0, 0, 0, 0, 0,
	0, 0, 194, 195, 391, 196, 341, 197, 342, 343,
	0, 198, 0, 199, 0, 200, 0, 0, 201, 202,
	0, 203, 0, 0, 0, 344, 204, 205, 206, 345,
	346, 0, 0, 0, 207, 208, 347, 348, 349, 0,
	209, 0, 210, 0, 0, 0, 0, 211, 350, 0,
	351, 0, 212, 213, 214, 215, 891, 353, 0, 0,
	219, 0, 216, 0, 0, 217, 354, 218, 355, 356,
	357, 358, 359, 0, 360, 0, 0, 220, 221, 222,
	0, 223, 224, 225, 0, 227, 226, 0, 361, 0,
	228, 0, 0, 229, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 362, 235, 0, 237, 238, 240, 239,
	0, 0, 0, 363, 241, 364, 242, 243, 0, 244,
	0, 0, 245, 0, 0, 246, 365, 0, 247, 0,
	366, 248, 249, 250, 251, 252, 0, 253, 367, 254,
	368, 255, 0, 256, 257, 258, 259, 260, 369, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 0, 276, 277, 370,
	278, 0, 282, 283, 284, 285, 0, 287, 371, 286,
	288, 289, 0, 290, 279, 280, 291, 0, 292, 372,
	373, 293, 0, 299, 294, 295, 281, 296, 298, 374,
	297, 375, 0, 300, 0, 301, 302, 303, 304, 305,
	306, 307, 0, 376, 377, 378, 0, 0, 308, 309,
	379, 380, 0, 310, 311, 312, 313, 0, 0, 314,
	315, 316, 317, 0, 318, 0, 381, 319, 320, 321,
	382, 383, 0, 888, 322, 171, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 0, 0, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 328,
	0, 0, 0, 0, 177, 178, 179, 329, 330, 331,
	332, 180, 333, 334, 0, 181, 335, 336, 182, 183,
	0, 0, 337, 338, 339, 0, 184, 340, 0, 0,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 0, 192, 193, 0, 0, 0, 0, 0, 0,
	0, 194, 195, 391, 196, 341, 197, 342, 343, 0,
	198, 0, 199, 0, 200, 0, 0, 201, 202, 0,
	203, 0, 0, 0, 344, 204, 205, 206, 345, 346,
	0, 0, 0, 207, 208, 347, 348, 349, 0, 209,
	0, 210, 0, 0, 0, 0, 211, 350, 0, 351,
	0, 212, 213, 214, 215, 887, 353, 0, 0, 219,
	0, 216, 0, 0, 217, 354, 218, 355, 356, 357,
	358, 359, 0, 360, 0, 0, 220, 221, 222, 0,
	223, 224, 225, 0, 227, 226, 0, 361, 0, 228,
	0, 0, 229, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 362, 235, 0, 237, 238, 240, 239, 0,
	0, 0, 363, 241, 364, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 365, 0, 247, 0, 366,
	248, 249, 250, 251, 252, 0, 253, 367, 254, 368,
	255, 0, 256, 257, 258, 259, 260, 369, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 0, 276, 277, 370, 278,
	0, 282, 283, 284, 285, 0, 287, 371, 286, 288,
	289, 0, 290, 279, 280, 291, 0, 292, 372, 373,
	293, 0, 299, 294, 295, 281, 296, 298, 374, 297,
	375, 0, 300, 0, 301, 302, 303, 304, 305, 306,
	307, 0, 376, 377, 378, 0, 0, 308, 309, 379,
	380, 0, 310, 311, 312, 313, 0, 0, 314, 315,
	316, 317, 0, 318, 0, 381, 319, 320, 321, 382,
	383, 0, 885, 322, 171, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 328, 0,
	0, 0, 0, 177, 178, 179, 329, 330, 331, 332,
	180, 333, 334, 0, 181, 335, 336, 182, 183, 0,
	0, 337, 338, 339, 0, 184, 340, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 192, 193, 0, 0, 0, 0, 0, 0, 0,
	194, 195, 391, 196, 341, 197, 342, 343, 0, 198,
	0, 199, 0, 200, 0, 0, 201, 202, 0, 203,
	0, 0, 0, 344, 204, 205, 206, 345, 346, 0,
	0, 0, 207, 208, 347, 348, 349, 0, 209, 0,
	210, 0, 0, 0, 0, 211, 350, 0, 351, 0,
	212, 213, 214, 215, 884, 353, 0, 0, 219, 0,
	216, 0, 0, 217, 354, 218, 355, 356, 357, 358,
	359, 0, 360, 0, 0, 220, 221, 222, 0, 223,
	224, 225, 0, 227, 226, 0, 361, 0, 228, 0,
	0, 229, 230, 0, 0, 231, 0, 232, 233, 234,
	236, 362, 235, 0, 237, 238, 240, 239, 0, 0,
	0, 363, 241, 364, 242, 243, 0, 244, 0, 0,
	245, 0, 0, 246, 365, 0, 247, 0, 366, 248,
	249, 250, 251, 252, 0, 253, 367, 254, 368, 255,
	0, 256, 257, 258, 259, 260, 369, 261, 262, 0,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 0, 275, 0, 276, 277, 370, 278, 0,
	282, 283, 284, 285, 0, 287, 371, 286, 288, 289,
	0, 290, 279, 280, 291, 0, 292, 372, 373, 293,
	0, 299, 294, 295, 281, 296, 298, 374, 297, 375,
	0, 300, 0, 301, 302, 303, 304, 305, 306, 307,
	0, 376, 377, 378, 0, 0, 308, 309, 379, 380,
	0, 310, 311, 312, 313, 0, 0, 314, 315, 316,
	317, 0, 318, 0, 381, 319, 320, 321, 382, 383,
	0, 881, 322, 171, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 0, 0, 0, 0, 0, 0, 174,
	175, 0, 176, 0, 0, 0, 0, 328, 0, 0,
	0, 0, 177, 178, 179, 329, 330, 331, 332, 180,
	333, 334, 0, 181, 335, 336, 182, 183, 0, 0,
	337, 338, 339, 0, 184, 340, 0, 0, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 0, 0,
	192, 193, 0, 0, 0, 0, 0, 0, 0, 194,
	195, 391, 196, 341, 197, 342, 343, 0, 198, 0,
	199, 0, 200, 0, 0, 201, 202, 0, 203, 0,
	0, 0, 344, 204, 205, 206, 345, 346, 0, 0,
	0, 207, 208, 347, 348, 349, 0, 209, 0, 210,
	0, 0, 0, 0, 211, 350, 0, 351, 0, 212,
	213, 214, 215, 880, 353, 0, 0, 219, 0, 216,
	0, 0, 217, 354, 218, 355, 356, 357, 358, 359,
	0, 360, 0, 0, 220, 221, 222, 0, 223, 224,
	225, 0, 227, 226, 0, 361, 0, 228, 0, 0,
	229, 230, 0, 0, 231, 0, 232, 233, 234, 236,
	362, 235, 0, 237, 238, 240, 239, 0, 0, 0,
	363, 241, 364, 242, 243, 0, 244, 0, 0, 245,
	0, 0, 246, 365, 0, 247, 0, 366, 248, 249,
	250, 251, 252, 0, 253, 367, 254, 368, 255, 0,
	256, 257, 258, 259, 260, 369, 261, 262, 0, 263,
	264, 265, 266, 267, 269, 270, 268, 271, 272, 273,
	274, 0, 275, 0, 276, 277, 370, 278, 0, 282,
	283, 284, 285, 0, 287, 371, 286, 288, 289, 0,
	290, 279, 280, 291, 0, 292, 372, 373, 293, 0,
	299, 294, 295, 281, 296, 298, 374, 297, 375, 0,
	300, 0, 301, 302, 303, 304, 305, 306, 307, 0,
	376, 377, 378, 0, 0, 308, 309, 379, 380, 0,
	310, 311, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 318, 0, 381, 319, 320, 321, 382, 383, 171,
	0, 322, 0, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 0, 0, 0, 174, 175, 869, 176, 0,
	0, 0, 0, 328, 0, 0, 0, 0, 177, 178,
	179, 329, 330, 331, 332, 180, 333, 334, 0, 181,
	335, 336, 182, 183, 0, 0, 337, 338, 339, 0,
	184, 340, 0, 0, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 0, 192, 193, 0, 0,
	0, 0, 0, 0, 0, 194, 195, 391, 196, 341,
	197, 342, 343, 0, 198, 0, 199, 0, 200, 0,
	0, 201, 202, 0, 203, 0, 0, 0, 344, 204,
	205, 206, 345, 346, 0, 0, 0, 207, 208, 347,
	348, 349, 0, 209, 0, 210, 0, 0, 0, 0,
	211, 350, 0, 351, 0, 212, 213, 214, 215, 352,
	353, 0, 0, 219, 0, 216, 0, 0, 217, 354,
	218, 355, 356, 357, 358, 359, 0, 360, 0, 0,
	220, 221, 222, 0, 223, 224, 225, 0, 227, 226,
	0, 361, 0, 228, 0, 0, 229, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 362, 235, 0, 237,
	238, 240, 239, 0, 0, 0, 363, 241, 364, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 365,
	0, 247, 0, 366, 248, 249, 250, 251, 252, 0,
	253, 367, 254, 368, 255, 0, 256, 257, 258, 259,
	260, 369, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 0,
	276, 277, 370, 278, 0, 282, 283, 284, 285, 0,
	287, 371, 286, 288, 289, 0, 290, 279, 280, 291,
	0, 292, 372, 373, 293, 0, 299, 294, 295, 281,
	296, 298, 374, 297, 375, 0, 300, 0, 301, 302,
	303, 304, 305, 306, 307, 0, 376, 377, 378, 0,
	0, 308, 309, 379, 380, 0, 310, 311, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 318, 0, 381,
	319, 320, 321, 382, 383, 0, 867, 322, 171, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 328, 0, 0, 0, 0, 177, 178, 179,
	329, 330, 331, 332, 180, 333, 334, 0, 181, 335,
	336, 182, 183, 0, 0, 337, 338, 339, 0, 184,
	340, 0, 0, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 0, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 194, 195, 391, 196, 341, 197,
	342, 343, 0, 198, 0, 199, 0, 200, 0, 0,
	201, 202, 0, 203, 0, 0, 0, 344, 204, 205,
	206, 345, 346, 0, 0, 0, 207, 208, 347, 348,
	349, 0, 209, 0, 210, 0, 0, 0, 0, 211,
	350, 0, 351, 0, 212, 213, 214, 215, 866, 353,
	0, 0, 219, 0, 216, 0, 0, 217, 354, 218,
	355, 356, 357, 358, 359, 0, 360, 0, 0, 220,
	221, 222, 0, 223, 224, 225, 0, 227, 226, 0,
	361, 0, 228, 0, 0, 229, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 362, 235, 0, 237, 238,
	240, 239, 0, 0, 0, 363, 241, 364, 242, 243,
	0, 244, 0, 0, 245, 0, 0, 246, 365, 0,
	247, 0, 366, 248, 249, 250, 251, 252, 0, 253,
	367, 254, 368, 255, 0, 256, 257, 258, 259, 260,
	369, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 0, 276,
	277, 370, 278, 0, 282, 283, 284, 285, 0, 287,
	371, 286, 288, 289, 0, 290, 279, 280, 291, 0,
	292, 372, 373, 293, 0, 299, 294, 295, 281, 296,
	298, 374, 297, 375, 0, 300, 0, 301, 302, 303,
	304, 305, 306, 307, 0, 376, 377, 378, 0, 0,
	308, 309, 379, 380, 0, 310, 311, 312, 313, 0,
	0, 314, 315, 316, 317, 0, 318, 0, 381, 319,
	320, 321, 382, 383, 0, 863, 322, 171, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 328, 0, 0, 0, 0, 177, 178, 179, 329,
	330, 331, 332, 180, 333, 334, 0, 181, 335, 336,
	182, 183, 0, 0, 337, 338, 339, 0, 184, 340,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 192, 193, 0, 0, 0, 0,
	0, 0, 0, 194, 195, 391, 196, 341, 197, 342,
	343, 0, 198, 0, 199, 0, 200, 0, 0, 201,
	202, 0, 203, 0, 0, 0, 344, 204, 205, 206,
	345, 346, 0, 0, 0, 207, 208, 347, 348, 349,
	0, 209, 0, 210, 0, 0, 0, 0, 211, 350,
	0, 351, 0, 212, 213, 214, 215, 352, 353, 0,
	0, 219, 0, 216, 0, 0, 217, 354, 218, 355,
	356, 357, 358, 359, 0, 360, 0, 0, 220, 221,
	222, 0, 223, 224, 225, 0, 227, 226, 0, 361,
	0, 228, 0, 0, 229, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 362, 235, 0, 237, 238, 240,
	239, 0, 0, 0, 363, 241, 364, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 365, 0, 247,
	0, 366, 248, 249, 250, 251, 252, 0, 253, 367,
	254, 368, 255, 0, 256, 257, 258, 259, 260, 369,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 0, 276, 277,
	370, 278, 0, 282, 283, 284, 285, 0, 287, 371,
	286, 288, 289, 0, 290, 279, 280, 291, 0, 292,
	372, 373, 293, 0, 299, 294, 295, 281, 296, 298,
	374, 297, 375, 0, 300, 0, 301, 302, 303, 304,
	305, 306, 307, 0, 376, 377, 378, 0, 0, 308,
	309, 379, 380, 0, 310, 311, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 318, 0, 381, 319, 320,
	321, 382, 383, 0, 861, 322, 171, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	328, 0, 0, 0, 0, 177, 178, 179, 329, 330,
	331, 332, 180, 333, 334, 0, 181, 335, 336, 182,
	183, 0, 0, 337, 338, 339, 0, 184, 340, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 192, 193, 0, 0, 0, 0, 0,
	0, 0, 194, 195, 391, 196, 341, 197, 342, 343,
	0, 198, 0, 199, 0, 200, 0, 0, 201, 202,
	0, 203, 0, 0, 0, 344, 204, 205, 206, 345,
	346, 0, 0, 0, 207, 208, 347, 348, 349, 0,
	209, 0, 210, 0, 0, 0, 0, 211, 350, 0,
	351, 0, 212, 213, 214, 215, 352, 353, 0, 0,
	219, 0, 216, 0, 0, 217, 354, 218, 355, 356,
	357, 358, 359, 0, 360, 0, 0, 220, 221, 222,
	0, 223, 224, 225, 0, 227, 226, 0, 361, 0,
	228, 0, 0, 229, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 362, 235, 0, 237, 238, 240, 239,
	0, 0, 0, 363, 241, 364, 242, 243, 0, 244,
	0, 0, 245, 0, 0, 246, 365, 0, 247, 0,
	366, 248, 249, 250, 251, 252, 0, 253, 367, 254,
	368, 255, 0, 256, 257, 258, 259, 260, 369, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 0, 276, 277, 370,
	278, 0, 282, 283, 284, 285, 0, 287, 371, 286,
	288, 289, 0, 290, 279, 280, 291, 0, 292, 372,
	373, 293, 0, 299, 294, 295, 281, 296, 298, 374,
	297, 375, 0, 300, 0, 301, 302, 303, 304, 305,
	306, 307, 0, 376, 377, 378, 0, 0, 308, 309,
	379, 380, 0, 310, 311, 312, 313, 0, 0, 314,
	315, 316, 317, 0, 318, 0, 381, 319, 320, 321,
	382, 383, 0, 857, 322, 171, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 0, 0, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 328,
	0, 0, 0, 0, 177, 178, 179, 329, 330, 331,
	332, 180, 333, 334, 0, 181, 335, 336, 182, 183,
	0, 0, 337, 338, 339, 0, 184, 340, 0, 0,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 0, 192, 193, 0, 0, 0, 0, 0, 0,
	0, 194, 195, 391, 196, 341, 197, 342, 343, 0,
	198, 0, 199, 0, 200, 0, 0, 201, 202, 0,
	203, 0, 0, 0, 344, 204, 205, 206, 345, 346,
	0, 0, 0, 207, 208, 347, 348, 349, 0, 209,
	0, 210, 0, 0, 0, 0, 211, 350, 0, 351,
	0, 212, 213, 214, 215, 859, 353, 0, 0, 219,
	0, 216, 0, 0, 217, 354, 218, 355, 356, 357,
	358, 359, 0, 360, 0, 0, 220, 221, 222, 0,
	223, 224, 225, 0, 227, 226, 0, 361, 0, 228,
	0, 0, 229, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 362, 235, 0, 237, 238, 240, 239, 0,
	0, 0, 363, 241, 364, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 365, 0, 247, 0, 366,
	248, 249, 250, 251, 252, 0, 253, 367, 254, 368,
	255, 0, 256, 257, 258, 259, 260, 369, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 0, 276, 277, 370, 278,
	0, 282, 283, 284, 285, 0, 287, 371, 286, 288,
	289, 0, 290, 279, 280, 291, 0, 292, 372, 373,
	293, 0, 299, 294, 295, 281, 296, 298, 374, 297,
	375, 0, 300, 0, 301, 302, 303, 304, 305, 306,
	307, 0, 376, 377, 378, 0, 0, 308, 309, 379,
	380, 0, 310, 311, 312, 313, 0, 0, 314, 315,
	316, 317, 0, 318, 0, 381, 319, 320, 321, 382,
	383, 0, 736, 322, 171, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 328, 0,
	0, 0, 0, 177, 178, 179, 329, 330, 331, 332,
	180, 333, 334, 0, 181, 335, 336, 182, 183, 0,
	0, 337, 338, 339, 0, 184, 340, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 192, 193, 0, 0, 0, 0, 0, 0, 0,
	194, 195, 391, 196, 341, 197, 342, 343, 0, 198,
	0, 199, 0, 200, 0, 0, 201, 202, 0, 203,
	0, 0, 0, 344, 204, 205, 206, 345, 346, 0,
	0, 0, 207, 208, 347, 348, 349, 0, 209, 0,
	210, 0, 0, 0, 0, 211, 350, 0, 351, 0,
	212, 213, 214, 215, 738, 353, 0, 0, 219, 0,
	216, 0, 0, 217, 354, 218, 355, 356, 357, 358,
	359, 0, 360, 0, 0, 220, 221, 222, 0, 223,
	224, 225, 0, 227, 226, 0, 361, 0, 228, 0,
	0, 229, 230, 0, 0, 231, 0, 232, 233, 234,
	236, 362, 235, 0, 237, 238, 240, 239, 0, 0,
	0, 363, 241, 364, 242, 243, 0, 244, 0, 0,
	245, 0, 0, 246, 365, 0, 247, 0, 366, 248,
	249, 250, 251, 252, 0, 253, 367, 254, 368, 255,
	0, 256, 257, 258, 259, 260, 369, 261, 262, 0,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 0, 275, 0, 276, 277, 370, 278, 0,
	282, 283, 284, 285, 0, 287, 371, 286, 288, 289,
	0, 290, 279, 280, 291, 0, 292, 372, 373, 293,
	0, 299, 294, 295, 281, 296, 298, 374, 297, 375,
	0, 300, 0, 301, 302, 303, 304, 305, 306, 307,
	0, 376, 377, 378, 0, 0, 308, 309, 379, 380,
	0, 310, 311, 312, 313, 0, 0, 314, 315, 316,
	317, 0, 318, 0, 381, 319, 320, 321, 382, 383,
	0, 734, 322, 171, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 0, 0, 0, 0, 0, 0, 174,
	175, 0, 176, 0, 0, 0, 0, 328, 0, 0,
	0, 0, 177, 178, 179, 329, 330, 331, 332, 180,
	333, 334, 0, 181, 335, 336, 182, 183, 0, 0,
	337, 338, 339, 0, 184, 340, 0, 0, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 0, 0,
	192, 193, 0, 0, 0, 0, 0, 0, 0, 194,
	195, 391, 196, 341, 197, 342, 343, 0, 198, 0,
	199, 0, 200, 0, 0, 201, 202, 0, 203, 0,
	0, 0, 344, 204, 205, 206, 345, 346, 0, 0,
	0, 207, 208, 347, 348, 349, 0, 209, 0, 210,
	0, 0, 0, 0, 211, 350, 0, 351, 0, 212,
	213, 214, 215, 352, 353, 0, 0, 219, 0, 216,
	0, 0, 217, 354, 218, 355, 356, 357, 358, 359,
	0, 360, 0, 0, 220, 221, 222, 0, 223, 224,
	225, 0, 227, 226, 0, 361, 0, 228, 0, 0,
	229, 230, 0, 0, 231, 0, 232, 233, 234, 236,
	362, 235, 0, 237, 238, 240, 239, 0, 0, 0,
	363, 241, 364, 242, 243, 0, 244, 0, 0, 245,
	0, 0, 246, 365, 0, 247, 0, 366, 248, 249,
	250, 251, 252, 0, 253, 367, 254, 368, 255, 0,
	256, 257, 258, 259, 260, 369, 261, 262, 0, 263,
	264, 265, 266, 267, 269, 270, 268, 271, 272, 273,
	274, 0, 275, 0, 276, 277, 370, 278, 0, 282,
	283, 284, 285, 0, 287, 371, 286, 288, 289, 0,
	290, 279, 280, 291, 0, 292, 372, 373, 293, 0,
	299, 294, 295, 281, 296, 298, 374, 297, 375, 0,
	300, 0, 301, 302, 303, 304, 305, 306, 307, 0,
	376, 377, 378, 0, 0, 308, 309, 379, 380, 0,
	310, 311, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 318, 0, 381, 319, 320, 321, 382, 383, 0,
	600, 322, 171, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 0, 0, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 328, 0, 0, 0,
	0, 177, 178, 179, 329, 330, 331, 332, 180, 333,
	334, 0, 181, 335, 336, 182, 183, 0, 0, 337,
	338, 339, 0, 591, 340, 0, 0, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 0, 192,
	193, 0, 0, 0, 0, 0, 0, 0, 194, 195,
	391, 196, 341, 197, 342, 343, 0, 198, 0, 199,
	0, 200, 0, 0, 201, 202, 0, 203, 0, 0,
	0, 344, 204, 205, 206, 345, 346, 0, 0, 0,
	207, 208, 347, 348, 349, 0, 209, 0, 210, 0,
	0, 0, 0, 211, 350, 0, 351, 0, 212, 213,
	214, 215, 352, 353, 0, 0, 219, 0, 216, 0,
	0, 217, 354, 218, 355, 356, 357, 358, 359, 0,
	360, 0, 0, 220, 221, 222, 0, 223, 224, 225,
	0, 227, 226, 0, 361, 0, 228, 0, 0, 229,
	590, 0, 0, 231, 0, 232, 233, 234, 236, 362,
	602, 0, 237, 238, 240, 239, 0, 0, 0, 363,
	241, 364, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 365, 0, 247, 0, 366, 248, 249, 250,
	251, 252, 0, 253, 367, 254, 368, 255, 0, 256,
	257, 258, 259, 260, 369, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 0, 276, 277, 592, 278, 0, 282, 283,
	284, 285, 0, 287, 371, 286, 593, 289, 0, 290,
	279, 280, 291, 0, 292, 372, 373, 293, 0, 299,
	294, 295, 281, 296, 298, 374, 297, 375, 0, 300,
	0, 301, 302, 303, 304, 305, 306, 307, 0, 597,
	377, 378, 0, 0, 308, 595, 379, 380, 0, 310,
	311, 312, 313, 0, 0, 314, 315, 316, 317, 0,
	318, 0, 381, 319, 320, 321, 382, 383, 0, 575,
	322, 171, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 0, 0, 0, 0, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 328, 0, 0, 0, 0,
	177, 178, 179, 329, 330, 331, 332, 180, 333, 334,
	0, 181, 335, 336, 182, 183, 0, 0, 337, 338,
	339, 0, 184, 340, 0, 0, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 0, 192, 193,
	0, 0, 0, 0, 0, 0, 0, 194, 195, 391,
	196, 341, 197, 342, 343, 0, 198, 0, 199, 0,
	200, 0, 0, 201, 202, 0, 203, 0, 0, 0,
	344, 204, 205, 206, 345, 346, 0, 0, 0, 207,
	208, 347, 348, 349, 0, 209, 0, 210, 0, 0,
	0, 0, 211, 350, 0, 351, 0, 212, 213, 214,
	215, 352, 353, 0, 0, 219, 0, 216, 0, 0,
	217, 354, 218, 355, 356, 357, 358, 359, 0, 360,
	0, 0, 220, 221, 222, 0, 223, 224, 225, 0,
	227, 226, 0, 361, 0, 228, 0, 0, 229, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 362, 235,
	0, 237, 238, 240, 239, 0, 0, 0, 363, 241,
	364, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 365, 0, 247, 0, 366, 248, 249, 250, 251,
	252, 0, 253, 367, 254, 368, 255, 0, 256, 257,
	258, 259, 260, 369, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 0, 276, 277, 370, 278, 0, 576, 283, 284,
	285, 0, 287, 371, 286, 288, 289, 0, 290, 279,
	280, 291, 0, 292, 372, 373, 293, 0, 299, 294,
	295, 281, 296, 298, 374, 297, 375, 0, 300, 0,
	301, 302, 303, 304, 305, 306, 307, 0, 376, 377,
	378, 0, 0, 308, 309, 379, 380, 0, 310, 311,
	312, 313, 0, 0, 314, 315, 316, 317, 0, 318,
	0, 381, 319, 320, 321, 382, 383, 0, 573, 322,
	171, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 328, 0, 0, 0, 0, 177,
	178, 179, 329, 330, 331, 332, 180, 333, 334, 0,
	181, 335, 336, 182, 183, 0, 0, 337, 338, 339,
	0, 184, 340, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 192, 193, 0,
	0, 0, 0, 0, 0, 0, 194, 195, 391, 196,
	341, 197, 342, 343, 0, 198, 0, 199, 0, 200,
	0, 0, 201, 202, 0, 203, 0, 0, 0, 344,
	204, 205, 206, 345, 346, 0, 0, 0, 207, 208,
	347, 348, 349, 0, 209, 0, 210, 0, 0, 0,
	0, 211, 350, 0, 351, 0, 212, 213, 214, 215,
	352, 353, 0, 0, 219, 0, 216, 0, 0, 217,
	354, 218, 355, 356, 357, 358, 359, 0, 360, 0,
	0, 220, 221, 222, 0, 223, 224, 225, 0, 227,
	226, 0, 361, 0, 228, 0, 0, 229, 230, 0,
	0, 231, 0, 232, 233, 234, 236, 362, 235, 0,
	237, 238, 240, 239, 0, 0, 0, 363, 241, 364,
	242, 243, 0, 244, 0, 0, 245, 0, 0, 246,
	365, 0, 247, 0, 366, 248, 249, 250, 251, 252,
	0, 253, 367, 254, 368, 255, 0, 256, 257, 258,
	259, 260, 369, 261, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	0, 276, 277, 370, 278, 0, 282, 283, 284, 285,
	0, 287, 371, 286, 288, 289, 0, 290, 279, 280,
	291, 0, 292, 372, 373, 293, 0, 299, 294, 295,
	281, 296, 298, 374, 297, 375, 0, 300, 0, 301,
	302, 303, 304, 305, 306, 307, 0, 376, 377, 378,
	0, 0, 308, 309, 379, 380, 0, 310, 311, 312,
	313, 0, 0, 314, 315, 316, 317, 0, 318, 0,
	381, 319, 320, 321, 382, 383, 0, 565, 322, 171,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 0,
	0, 0, 0, 0, 0, 174, 175, 0, 176, 0,
	0, 0, 0, 328, 0, 0, 0, 0, 177, 178,
	179, 329, 330, 331, 332, 180, 333, 334, 0, 181,
	335, 336, 182, 183, 0, 0, 337, 338, 339, 0,
	184, 340, 0, 0, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 0, 192, 193, 0, 0,
	0, 0, 0, 0, 0, 194, 195, 391, 196, 341,
	197, 342, 343, 0, 198, 0, 199, 0, 200, 0,
	0, 201, 202, 0, 203, 0, 0, 0, 344, 204,
	205, 206, 345, 346, 0, 0, 0, 207, 208, 347,
	348, 349, 0, 209, 0, 210, 0, 0, 0, 0,
	211, 350, 0, 351, 0, 212, 213, 214, 215, 352,
	353, 0, 0, 219, 0, 216, 0, 0, 217, 354,
	218, 355, 356, 357, 358, 359, 0, 360, 0, 0,
	220, 221, 222, 0, 223, 224, 225, 0, 227, 226,
	0, 361, 0, 228, 0, 0, 229, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 362, 235, 0, 237,
	238, 240, 239, 0, 0, 0, 363, 241, 364, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 365,
	0, 247, 0, 366, 248, 249, 250, 251, 252, 0,
	253, 367, 254, 368, 255, 0, 256, 257, 258, 259,
	260, 369, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 0,
	276, 277, 370, 278, 0, 282, 283, 284, 285, 0,
	287, 371, 286, 288, 289, 0, 290, 279, 280, 291,
	0, 292, 372, 373, 293, 0, 299, 294, 295, 281,
	296, 298, 374, 297, 375, 0, 300, 0, 301, 302,
	303, 304, 305, 306, 307, 0, 376, 377, 378, 0,
	0, 308, 309, 379, 380, 0, 310, 311, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 318, 0, 381,
	319, 320, 321, 382, 383, 0, 431, 322, 171, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 328, 0, 0, 0, 0, 177, 178, 179,
	329, 330, 331, 332, 180, 333, 334, 0, 181, 335,
	336, 182, 183, 0, 0, 337, 338, 339, 0, 184,
	340, 0, 0, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 0, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 194, 195, 391, 196, 341, 197,
	342, 343, 0, 198, 0, 199, 0, 200, 0, 0,
	201, 202, 0, 203, 0, 0, 0, 344, 204, 205,
	206, 345, 346, 0, 0, 0, 207, 208, 347, 348,
	349, 0, 209, 0, 210, 0, 0, 0, 0, 211,
	350, 0, 351, 0, 212, 213, 214, 215, 352, 353,
	0, 0, 219, 0, 216, 0, 0, 217, 354, 218,
	355, 356, 357, 358, 359, 0, 360, 0, 0, 220,
	221, 222, 0, 223, 224, 225, 0, 227, 226, 0,
	361, 0, 228, 0, 0, 229, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 362, 235, 0, 237, 238,
	240, 239, 0, 0, 0, 363, 241, 364, 242, 243,
	0, 244, 0, 0, 245, 0, 0, 246, 365, 0,
	247, 0, 366, 248, 249, 250, 251, 252, 0, 253,
	367, 254, 368, 255, 0, 256, 257, 258, 259, 260,
	369, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 0, 276,
	277, 370, 278, 0, 282, 283, 284, 285, 0, 287,
	371, 286, 288, 289, 0, 290, 279, 280, 291, 0,
	292, 372, 373, 293, 0, 299, 294, 295, 281, 296,
	298, 374, 297, 375, 0, 300, 0, 301, 302, 303,
	304, 305, 306, 307, 0, 376, 377, 378, 0, 0,
	308, 309, 379, 380, 0, 310, 311, 312, 313, 0,
	0, 314, 315, 316, 317, 0, 318, 0, 381, 319,
	320, 321, 382, 383, 171, 0, 322, 0, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 328, 0,
	0, 0, 0, 177, 178, 179, 329, 330, 331, 332,
	180, 333, 334, 0, 181, 335, 336, 182, 183, 0,
	0, 337, 338, 339, 0, 184, 340, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 192, 193, 0, 0, 0, 0, 0, 0, 0,
	194, 195, 391, 196, 341, 197, 342, 343, 0, 198,
	0, 199, 0, 200, 0, 0, 201, 202, 0, 203,
	0, 0, 0, 344, 204, 205, 206, 345, 346, 0,
	0, 0, 207, 208, 347, 348, 349, 0, 209, 0,
	210, 0, 0, 0, 0, 211, 350, 0, 351, 0,
	212, 213, 214, 215, 352, 353, 0, 0, 219, 0,
	216, 0, 0, 217, 354, 218, 355, 356, 357, 358,
	359, 0, 360, 0, 0, 220, 221, 222, 0, 223,
	224, 225, 0, 227, 226, 0, 361, 0, 228, 0,
	0, 229, 230, 0, 0, 231, 0, 232, 233, 234,
	236, 362, 235, 0, 237, 238, 240, 239, 0, 0,
	0, 363, 241, 364, 242, 243, 0, 244, 0, 0,
	245, 0, 0, 246, 365, 0, 247, 0, 366, 248,
	249, 250, 251, 252, 0, 253, 367, 254, 368, 255,
	0, 256, 257, 258, 259, 260, 369, 261, 262, 0,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 0, 275, 0, 276, 277, 370, 278, 0,
	282, 283, 284, 285, 0, 287, 371, 286, 288, 289,
	0, 290, 279, 280, 291, 0, 292, 372, 373, 293,
	0, 299, 294, 295, 281, 296, 298, 374, 297, 375,
	0, 300, 0, 301, 302, 303, 304, 305, 306, 307,
	0, 376, 377, 378, 0, 0, 308, 309, 379, 380,
	0, 310, 311, 312, 313, 0, 0, 314, 315, 316,
	317, 0, 318, 0, 381, 319, 320, 321, 382, 383,
	171, 0, 322, 0, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 328, 0, 0, 0, 0, 177,
	178, 179, 329, 330, 331, 332, 180, 333, 334, 0,
	181, 335, 336, 182, 183, 0, 0, 337, 338, 339,
	0, 184, 340, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 192, 193, 0,
	0, 0, 0, 0, 0, 0, 194, 195, 391, 196,
	341, 197, 342, 343, 0, 198, 0, 199, 0, 200,
	0, 0, 201, 202, 0, 203, 0, 0, 0, 344,
	204, 205, 206, 345, 346, 0, 0, 0, 207, 208,
	347, 348, 349, 0, 209, 0, 210, 0, 0, 0,
	0, 211, 350, 0, 351, 0, 212, 213, 214, 215,
	1730, 353, 0, 0, 219, 0, 216, 0, 0, 217,
	354, 218, 355, 356, 357, 358, 359, 0, 360, 0,
	0, 220, 221, 222, 0, 223, 224, 225, 0, 227,
	226, 0, 361, 0, 228, 0, 0, 229, 230, 0,
	0, 231, 0, 232, 233, 234, 236, 362, 235, 0,
	237, 238, 240, 239, 0, 0, 0, 363, 241, 364,
	242, 243, 0, 244, 0, 0, 245, 0, 0, 246,
	365, 0, 247, 0, 366, 248, 249, 250, 251, 252,
	0, 253, 367, 254, 368, 255, 0, 256, 257, 258,
	259, 260, 369, 261, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	0, 276, 277, 370, 278, 0, 282, 283, 284, 285,
	0, 287, 371, 286, 288, 289, 0, 290, 279, 280,
	291, 0, 292, 372, 373, 293, 0, 299, 294, 295,
	281, 296, 298, 374, 297, 375, 0, 300, 0, 301,
	302, 303, 304, 305, 306, 307, 0, 376, 377, 378,
	0, 0, 308, 309, 379, 380, 0, 310, 311, 312,
	313, 0, 0, 314, 315, 316, 317, 0, 318, 0,
	381, 319, 320, 321, 382, 383, 171, 0, 322, 0,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	328, 0, 0, 0, 0, 177, 178, 179, 329, 330,
	331, 332, 180, 333, 334, 0, 181, 335, 336, 182,
	183, 0, 0, 337, 338, 339, 0, 184, 340, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 192, 193, 0, 0, 0, 0, 0,
	0, 0, 194, 195, 391, 196, 341, 197, 342, 343,
	0, 198, 0, 199, 0, 200, 0, 0, 201, 202,
	0, 203, 0, 0, 0, 344, 204, 205, 206, 345,
	346, 0, 0, 0, 207, 208, 347, 348, 349, 0,
	209, 0, 210, 0, 0, 0, 0, 211, 350, 0,
	351, 0, 212, 213, 214, 215, 1728, 353, 0, 0,
	219, 0, 216, 0, 0, 217, 354, 218, 355, 356,
	357, 358, 359, 0, 360, 0, 0, 220, 221, 222,
	0, 223, 224, 225, 0, 227, 226, 0, 361, 0,
	228, 0, 0, 229, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 362, 235, 0, 237, 238, 240, 239,
	0, 0, 0, 363, 241, 364, 242, 243, 0, 244,
	0, 0, 245, 0, 0, 246, 365, 0, 247, 0,
	366, 248, 249, 250, 251, 252, 0, 253, 367, 254,
	368, 255, 0, 256, 257, 258, 259, 260, 369, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 0, 276, 277, 370,
	278, 0, 282, 283, 284, 285, 0, 287, 371, 286,
	288, 289, 0, 290, 279, 280, 291, 0, 292, 372,
	373, 293, 0, 299, 294, 295, 281, 296, 298, 374,
	297, 375, 0, 300, 0, 301, 302, 303, 304, 305,
	306, 307, 0, 376, 377, 378, 0, 0, 308, 309,
	379, 380, 0, 310, 311, 312, 313, 0, 0, 314,
	315, 316, 317, 0, 318, 0, 381, 319, 320, 321,
	382, 383, 171, 0, 322, 0, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 328, 0, 0, 0,
	0, 177, 178, 179, 329, 330, 331, 332, 180, 333,
	334, 0, 181, 335, 336, 182, 183, 0, 0, 337,
	338, 339, 0, 184, 340, 0, 0, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 0, 192,
	193, 0, 0, 0, 0, 0, 0, 0, 194, 195,
	391, 196, 341, 197, 342, 343, 0, 198, 0, 199,
	0, 200, 0, 0, 201, 202, 0, 203, 0, 0,
	0, 344, 204, 205, 206, 345, 346, 0, 0, 0,
	207, 208, 347, 348, 349, 0, 209, 0, 210, 0,
	0, 0, 0, 211, 350, 0, 351, 0, 212, 213,
	214, 215, 1717, 353, 0, 0, 219, 0, 216, 0,
	0, 217, 354, 218, 355, 356, 357, 358, 359, 0,
	360, 0, 0, 220, 221, 222, 0, 223, 224, 225,
	0, 227, 226, 0, 361, 0, 228, 0, 0, 229,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 362,
	235, 0, 237, 238, 240, 239, 0, 0, 0, 363,
	241, 364, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 365, 0, 247, 0, 366, 248, 249, 250,
	251, 252, 0, 253, 367, 254, 368, 255, 0, 256,
	257, 258, 259, 260, 369, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 0, 276, 277, 370, 278, 0, 282, 283,
	284, 285, 0, 287, 371, 286, 288, 289, 0, 290,
	279, 280, 291, 0, 292, 372, 373, 293, 0, 299,
	294, 295, 281, 296, 298, 374, 297, 375, 0, 300,
	0, 301, 302, 303, 304, 305, 306, 307, 0, 376,
	377, 378, 0, 0, 308, 309, 379, 380, 0, 310,
	311, 312, 313, 0, 0, 314, 315, 316, 317, 0,
	318, 0, 381, 319, 320, 321, 382, 383, 171, 0,
	322, 0, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 328, 0, 0, 0, 0, 177, 178, 179,
	329, 330, 331, 332, 180, 333, 334, 0, 181, 335,
	336, 182, 183, 0, 0, 337, 338, 339, 0, 184,
	340, 0, 0, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 0, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 194, 195, 391, 196, 341, 197,
	342, 343, 0, 198, 0, 199, 0, 200, 0, 0,
	201, 202, 0, 203, 0, 0, 0, 344, 204, 205,
	206, 345, 346, 0, 0, 0, 207, 208, 347, 348,
	349, 0, 209, 0, 210, 0, 0, 0, 0, 211,
	350, 0, 351, 0, 212, 213, 214, 215, 352, 353,
	0, 0, 219, 0, 216, 0, 0, 217, 354, 218,
	355, 356, 357, 358, 359, 0, 360, 0, 0, 220,
	221, 222, 0, 223, 224, 225, 0, 227, 226, 0,
	361, 0, 228, 0, 0, 229, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 362, 235, 0, 237, 238,
	240, 239, 0, 0, 0, 363, 241, 364, 242, 243,
	0, 244, 0, 0, 245, 0, 0, 246, 365, 0,
	247, 0, 366, 248, 249, 250, 251, 252, 0, 253,
	367, 254, 368, 255, 0, 256, 257, 258, 259, 260,
	369, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 0, 276,
	277, 370, 278, 0, 576, 283, 284, 285, 0, 287,
	371, 286, 288, 289, 0, 290, 279, 280, 291, 0,
	292, 372, 373, 293, 0, 299, 294, 295, 281, 296,
	298, 374, 297, 375, 0, 300, 0, 301, 302, 303,
	304, 305, 306, 307, 0, 376, 377, 378, 0, 0,
	308, 309, 379, 380, 0, 310, 311, 312, 313, 0,
	0, 314, 315, 316, 317, 0, 318, 0, 381, 319,
	320, 321, 382, 383, 171, 0, 322, 0, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 328, 0,
	1204, 0, 0, 177, 178, 179, 329, 330, 331, 332,
	180, 333, 334, 0, 181, 335, 336, 182, 183, 0,
	0, 337, 338, 339, 0, 184, 340, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 192, 193, 0, 0, 0, 0, 0, 0, 0,
	194, 195, 391, 196, 341, 197, 342, 343, 0, 198,
	0, 199, 0, 200, 0, 0, 201, 202, 0, 203,
	0, 0, 0, 344, 204, 205, 206, 345, 346, 0,
	0, 0, 207, 208, 347, 348, 349, 0, 209, 0,
	210, 0, 0, 0, 0, 211, 350, 0, 351, 0,
	212, 213, 214, 215, 352, 353, 0, 0, 219, 0,
	216, 0, 0, 217, 354, 218, 355, 356, 357, 358,
	359, 0, 360, 0, 0, 220, 221, 222, 0, 223,
	224, 225, 0, 227, 226, 0, 361, 0, 228, 0,
	0, 229, 230, 0, 0, 231, 0, 232, 233, 234,
	236, 362, 235, 0, 237, 238, 240, 239, 0, 0,
	0, 363, 241, 364, 242, 243, 0, 244, 0, 0,
	245, 0, 0, 246, 365, 0, 247, 0, 366, 248,
	249, 250, 251, 252, 0, 253, 367, 254, 368, 255,
	0, 256, 257, 258, 259, 260, 369, 261, 262, 0,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 0, 275, 0, 276, 277, 370, 278, 0,
	282, 283, 284, 285, 0, 287, 371, 286, 288, 289,
	0, 0, 279, 280, 291, 0, 292, 372, 373, 293,
	0, 299, 294, 295, 281, 296, 298, 374, 297, 375,
	0, 300, 0, 301, 302, 303, 304, 305, 306, 307,
	0, 376, 377, 378, 0, 0, 308, 309, 379, 380,
	0, 310, 311, 312, 313, 0, 0, 314, 315, 316,
	317, 0, 318, 0, 381, 319, 320, 321, 382, 383,
	171, 0, 322, 0, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 328, 0, 0, 0, 0, 177,
	178, 179, 329, 330, 331, 332, 180, 333, 334, 0,
	181, 335, 336, 182, 183, 0, 0, 337, 338, 339,
	0, 184, 340, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 192, 193, 0,
	0, 0, 0, 0, 0, 0, 194, 195, 391, 196,
	341, 197, 342, 343, 0, 198, 0, 199, 0, 200,
	0, 0, 201, 202, 0, 203, 0, 0, 0, 344,
	204, 205, 206, 345, 346, 0, 0, 0, 207, 208,
	347, 348, 349, 0, 209, 0, 210, 0, 0, 0,
	0, 211, 350, 0, 351, 0, 212, 213, 214, 215,
	352, 353, 0, 0, 219, 0, 216, 0, 0, 217,
	354, 218, 355, 356, 357, 358, 359, 0, 360, 0,
	0, 220, 221, 222, 0, 223, 224, 225, 0, 227,
	226, 0, 361, 0, 228, 0, 0, 229, 230, 0,
	0, 231, 0, 232, 233, 234, 236, 362, 235, 0,
	237, 238, 240, 239, 0, 0, 0, 363, 241, 364,
	242, 243, 0, 244, 0, 0, 245, 0, 0, 246,
	365, 0, 247, 0, 366, 248, 249, 250, 251, 252,
	0, 253, 367, 254, 368, 255, 0, 256, 257, 258,
	259, 260, 369, 700, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	0, 276, 277, 370, 278, 0, 282, 283, 284, 285,
	0, 287, 371, 286, 288, 289, 0, 290, 279, 280,
	291, 0, 292, 372, 373, 293, 0, 299, 294, 295,
	281, 296, 298, 374, 297, 375, 0, 300, 0, 301,
	302, 303, 304, 305, 306, 307, 0, 376, 377, 378,
	0, 0, 308, 309, 379, 380, 0, 310, 311, 312,
	313, 0, 0, 314, 315, 316, 317, 0, 318, 0,
	381, 319, 320, 321, 382, 383, 171, 0, 322, 0,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	328, 0, 0, 0, 0, 177, 178, 179, 329, 330,
	331, 332, 180, 333, 334, 0, 181, 335, 336, 182,
	183, 0, 0, 337, 338, 339, 0, 184, 340, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 192, 193, 0, 0, 0, 0, 0,
	0, 0, 194, 195, 391, 196, 341, 197, 342, 343,
	0, 198, 0, 199, 0, 200, 0, 0, 201, 202,
	0, 203, 0, 0, 0, 344, 204, 205, 206, 345,
	346, 0, 0, 0, 207, 208, 347, 348, 349, 0,
	209, 0, 210, 0, 0, 0, 0, 211, 350, 0,
	351, 0, 212, 213, 214, 215, 352, 353, 0, 0,
	219, 0, 216, 0, 0, 217, 354, 218, 355, 356,
	357, 358, 359, 0, 360, 0, 0, 220, 221, 222,
	0, 223, 224, 225, 0, 227, 226, 0, 361, 0,
	228, 0, 0, 229, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 362, 235, 0, 237, 238, 240, 239,
	0, 0, 0, 363, 241, 364, 242, 243, 0, 244,
	0, 0, 245, 0, 0, 246, 365, 0, 247, 0,
	366, 248, 249, 0, 251, 252, 0, 253, 367, 254,
	368, 255, 0, 256, 257, 258, 0, 260, 369, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 0, 276, 277, 370,
	0, 0, 282, 283, 284, 285, 0, 287, 371, 286,
	288, 289, 0, 290, 279, 280, 291, 0, 292, 372,
	373, 293, 0, 299, 294, 295, 281, 296, 298, 374,
	297, 375, 0, 300, 0, 301, 302, 303, 304, 305,
	306, 307, 0, 376, 377, 378, 0, 0, 308, 309,
	379, 380, 0, 310, 311, 312, 313, 0, 0, 314,
	315, 316, 317, 0, 318, 0, 381, 319, 320, 321,
	382, 383, 0, 0, 322, 0, 0, 0, 0, 323,
	324, 325, 326, 327, 1079, 1080, 0, 1099, 1100, 1101,
	1109, 1110, 1111, 0, 0, 0, 0, 0, 0, 0,
	1102, 0, 0, 0, 0, 0, 0, 1082, 0, 0,
	1113, 0, 1079, 1080, 0, 1099, 1100, 1101, 1109, 1110,
	1111, 0, 0, 0, 0, 0, 0, 0, 1102, 0,
	0, 1081, 0, 0, 0, 1082, 0, 1096, 1113, 0,
	1079, 1080, 0, 1099, 1100, 1101, 1109, 1110, 1111, 0,
	0, 0, 0, 0, 0, 0, 1102, 0, 0, 1081,
	0, 0, 0, 1082, 0, 1096, 1113, 0, 0, 1079,
	1080, 0, 1099, 1100, 1101, 1109, 1110, 1111, 0, 0,
	0, 0, 0, 0, 0, 1102, 0, 1081, 0, 0,
	0, 1087, 1082, 1096, 0, 1113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1106, 1114, 0, 0, 0, 0, 1081, 0, 0, 1087,
	0, 0, 1096, 0, 0, 0, 0, 0, 1112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1106, 1114,
	0, 0, 0, 1104, 0, 0, 0, 1087, 0, 0,
	1097, 0, 0, 0, 0, 0, 1112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1106, 1114, 0, 0,
	0, 1104, 0, 0, 0, 1103, 1087, 0, 1097, 0,
	0, 0, 0, 0, 1112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1106, 1114, 0, 0, 1104,
	0, 0, 0, 1103, 0, 0, 1097, 0, 0, 0,
	0, 0, 0, 1112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1098, 0, 0, 0, 0, 1104, 0,
	0, 1103, 0, 0, 0, 1097, 0, 0, 0, 1107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1098, 0, 0, 0, 0, 0, 0, 0, 0,
	1103, 0, 0, 0, 0, 0, 0, 1107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1098,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1105, 0, 1098, 1093,
	1094, 1095, 1108, 0, 1092, 1090, 1091, 1083, 1084, 1085,
	1086, 1088, 1089, 0, 1107, 0, 0, 0, 0, 0,
	0, 1848, 0, 0, 1105, 0, 0, 1093, 1094, 1095,
	1108, 0, 1092, 1090, 1091, 1083, 1084, 1085, 1086, 1088,
	1089, 0, 0, 0, 0, 0, 0, 0, 0, 1800,
	0, 0, 1105, 0, 0, 1093, 1094, 1095, 1108, 0,
	1092, 1090, 1091, 1083, 1084, 1085, 1086, 1088, 1089, 0,
	0, 1808, 1809, 2348, 1826, 1827, 1828, 0, 0, 0,
	0, 1105, 0, 0, 1093, 1094, 1095, 1108, 0, 1092,
	1090, 1091, 1083, 1084, 1085, 1086, 1088, 1089, 0, 0,
	1079, 1080, 2328, 1099, 1100, 1101, 1109, 1110, 1111, 0,
	0, 0, 0, 0, 0, 0, 1102, 0, 0, 0,
	0, 0, 0, 1082, 1823, 0, 1113, 0, 1079, 1080,
	0, 1099, 1100, 1101, 1109, 1110, 1111, 0, 0, 0,
	0, 0, 0, 0, 1102, 0, 0, 1081, 0, 0,
	0, 1082, 0, 1096, 1113, 0, 1079, 1080, 0, 1099,
	1100, 1101, 1109, 1110, 1111, 0, 0, 0, 0, 0,
	0, 0, 1102, 0, 0, 1081, 0, 0, 1814, 1082,
	0, 1096, 1113, 0, 0, 1079, 1080, 0, 1099, 1100,
	1101, 1109, 1110, 1111, 0, 0, 0, 0, 0, 0,
	0, 1102, 0, 1081, 0, 0, 0, 1087, 1082, 1096,
	0, 1113, 0, 0, 0, 1829, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1106, 1114, 0, 0,
	0, 0, 1081, 0, 0, 1087, 0, 1824, 1096, 0,
	0, 0, 0, 0, 1112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1106, 1114, 0, 0, 0, 1104,
	0, 0, 0, 1087, 0, 0, 1097, 0, 0, 0,
	0, 0, 1112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1106, 1114, 0, 0, 0, 1104, 0, 0,
	0, 1103, 1087, 0, 1097, 0, 0, 0, 0, 0,
	1112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1825, 1106, 1114, 0, 0, 1104, 0, 0, 0, 1103,
	0, 0, 1097, 0, 0, 0, 0, 0, 0, 1112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1098,
	0, 0, 0, 0, 1104, 0, 0, 1103, 0, 0,
	0, 1097, 0, 0, 0, 1107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1098, 0, 0,
	0, 0, 0, 0, 0, 0, 1103, 0, 0, 0,
	0, 0, 0, 1107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1098, 1820, 1821, 1822, 0,
	0, 1819, 1817, 1818, 1810, 1811, 1812, 1813, 1815, 1816,
	0, 1107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1105, 0, 1098, 1093, 1094, 1095, 1108, 0,
	1092, 1090, 1091, 1083, 1084, 1085, 1086, 1088, 1089, 0,
	1107, 0, 0, 2277, 0, 0, 0, 0, 0, 0,
	1105, 0, 0, 1093, 1094, 1095, 1108, 0, 1092, 1090,
	1091, 1083, 1084, 1085, 1086, 1088, 1089, 0, 0, 0,
	0, 2272, 0, 0, 0, 0, 0, 0, 1105, 0,
	0, 1093, 1094, 1095, 1108, 0, 1092, 1090, 1091, 1083,
	1084, 1085, 1086, 1088, 1089, 0, 0, 0, 0, 2268,
	0, 0, 0, 0, 0, 0, 0, 1105, 0, 0,
	1093, 1094, 1095, 1108, 0, 1092, 1090, 1091, 1083, 1084,
	1085, 1086, 1088, 1089, 0, 0, 1079, 1080, 2248, 1099,
	1100, 1101, 1109, 1110, 1111, 0, 0, 0, 0, 0,
	0, 0, 1102, 0, 0, 0, 0, 0, 0, 1082,
	0, 0, 1113, 0, 1079, 1080, 0, 1099, 1100, 1101,
	1109, 1110, 1111, 0, 0, 0, 0, 0, 0, 0,
	1102, 0, 0, 1081, 0, 0, 0, 1082, 0, 1096,
	1113, 0, 1079, 1080, 0, 1099, 1100, 1101, 1109, 1110,
	1111, 0, 0, 0, 0, 0, 0, 0, 1102, 0,
	0, 1081, 0, 0, 0, 1082, 0, 1096, 1113, 0,
	0, 1079, 1080, 0, 1099, 1100, 1101, 1109, 1110, 1111,
	0, 0, 0, 0, 0, 0, 0, 1102, 0, 1081,
	0, 0, 0, 1087, 1082, 1096, 0, 1113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1106, 1114, 0, 0, 0, 0, 1081, 0,
	0, 1087, 0, 0, 1096, 0, 0, 0, 0, 0,
	1112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1106, 1114, 0, 0, 0, 1104, 0, 0, 0, 1087,
	0, 0, 1097, 0, 0, 0, 0, 0, 1112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1106, 1114,
	0, 0, 0, 1104, 0, 0, 0, 1103, 1087, 0,
	1097, 0, 0, 0, 0, 0, 1112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1106, 1114, 0,
	0, 1104, 0, 0, 0, 1103, 0, 0, 1097, 0,
	0, 0, 0, 0, 0, 1112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	1104, 0, 0, 1103, 0, 0, 0, 1097, 0, 0,
	0, 1107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1098, 0, 0, 0, 0, 0, 0,
	0, 0, 1103, 0, 0, 0, 0, 0, 0, 1107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1098, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1105, 0,
	1098, 1093, 1094, 1095, 1108, 0, 1092, 1090, 1091, 1083,
	1084, 1085, 1086, 1088, 1089, 0, 1107, 0, 0, 2196,
	0, 0, 0, 0, 0, 0, 1105, 0, 0, 1093,
	1094, 1095, 1108, 0, 1092, 1090, 1091, 1083, 1084, 1085,
	1086, 1088, 1089, 0, 0, 0, 0, 2195, 0, 0,
	0, 0, 0, 0, 1105, 0, 0, 1093, 1094, 1095,
	1108, 0, 1092, 1090, 1091, 1083, 1084, 1085, 1086, 1088,
	1089, 0, 0, 0, 0, 2135, 0, 0, 0, 0,
	0, 0, 0, 1105, 0, 0, 1093, 1094, 1095, 1108,
	0, 1092, 1090, 1091, 1083, 1084, 1085, 1086, 1088, 1089,
	0, 0, 1079, 1080, 2100, 1099, 1100, 1101, 1109, 1110,
	1111, 0, 0, 0, 0, 0, 0, 0, 1102, 0,
	0, 0, 0, 0, 0, 1082, 0, 0, 1113, 0,
	1079, 1080, 0, 1099, 1100, 1101, 1109, 1110, 1111, 0,
	0, 0, 0, 0, 0, 0, 1102, 0, 0, 1081,
	0, 0, 0, 1082, 0, 1096, 1113, 0, 1079, 1080,
	0, 1099, 1100, 1101, 1109, 1110, 1111, 0, 0, 0,
	0, 0, 0, 0, 1102, 0, 0, 1081, 0, 0,
	0, 1082, 0, 1096, 1113, 0, 0, 1079, 1080, 0,
	1099, 1100, 1101, 1109, 1110, 1111, 0, 0, 0, 0,
	0, 0, 0, 1102, 0, 1081, 0, 0, 0, 1087,
	1082, 1096, 0, 1113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1106, 1114,
	0, 0, 0, 0, 1081, 0, 0, 1087, 0, 0,
	1096, 0, 0, 0, 0, 0, 1112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1106, 1114, 0, 0,
	0, 1104, 0, 0, 0, 1087, 0, 0, 1097, 0,
	0, 0, 0, 0, 1112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1106, 1114, 0, 0, 0, 1104,
	0, 0, 0, 1103, 1087, 0, 1097, 0, 0, 0,
	0, 0, 1112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1106, 1114, 0, 0, 1104, 0, 0,
	0, 1103, 0, 0, 1097, 0, 0, 0, 0, 0,
	0, 1112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1098, 0, 0, 0, 0, 1104, 0, 0, 1103,
	0, 0, 0, 1097, 0, 0, 0, 1107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1098,
	0, 0, 0, 0, 0, 0, 0, 0, 1103, 0,
	0, 0, 0, 0, 0, 1107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1098, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1105, 0, 1098, 1093, 1094, 1095,
	1108, 0, 1092, 1090, 1091, 1083, 1084, 1085, 1086, 1088,
	1089, 0, 1107, 0, 0, 2020, 0, 0, 0, 0,
	0, 0, 1105, 0, 0, 1093, 1094, 1095, 1108, 0,
	1092, 1090, 1091, 1083, 1084, 1085, 1086, 1088, 1089, 0,
	0, 0, 0, 1996, 0, 0, 0, 0, 0, 0,
	1105, 0, 0, 1093, 1094, 1095, 1108, 0, 1092, 1090,
	1091, 1083, 1084, 1085, 1086, 1088, 1089, 0, 0, 0,
	0, 1497, 0, 0, 0, 0, 0, 0, 0, 1105,
	0, 0, 1093, 1094, 1095, 1108, 0, 1092, 1090, 1091,
	1083, 1084, 1085, 1086, 1088, 1089, 38, 0, 1770, 0,
	0, 0, 0, 0, 0, 0, 0, 39, 120, 0,
	1079, 1080, 0, 1099, 1100, 1101, 1109, 1110, 1111, 0,
	42, 0, 0, 0, 0, 0, 1102, 0, 0, 0,
	0, 0, 0, 1082, 122, 0, 1113, 0, 0, 0,
	43, 0, 48, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1081, 0, 0,
	0, 0, 51, 1096, 0, 0, 53, 0, 0, 0,
	59, 0, 0, 123, 0, 0, 0, 60, 0, 61,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 0,
	0, 0, 0, 63, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1087, 2420, 0,
	0, 0, 0, 0, 0, 0, 1079, 1080, 0, 1099,
	1100, 1101, 1109, 1110, 1111, 0, 1106, 1114, 0, 0,
	0, 0, 1102, 0, 64, 0, 0, 0, 0, 1082,
	0, 0, 1113, 0, 1112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1104,
	0, 0, 0, 1081, 0, 0, 1097, 0, 0, 1096,
	0, 0, 0, 0, 0, 0, 65, 0, 0, 0,
	0, 0, 66, 0, 0, 0, 0, 0, 0, 0,
	0, 1103, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 74, 67, 0, 68, 0, 69, 2419, 124, 0,
	0, 0, 0, 70, 0, 0, 0, 131, 0, 0,
	0, 0, 0, 1087, 80, 1840, 0, 99, 1839, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 0, 1098,
	0, 0, 1106, 1114, 0, 133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1107, 0, 0, 0, 0,
	1112, 0, 0, 0, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 1104, 0, 0, 0, 0,
	0, 132, 1097, 0, 0, 0, 0, 0, 0, 125,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1103, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 0, 1105, 0, 0, 1093, 1094, 1095, 1108, 0,
	1092, 1090, 1091, 1083, 1084, 1085, 1086, 1088, 1089, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1079, 1080, 1098, 1099, 1100, 1101, 1109,
	1110, 1111, 0, 0, 0, 0, 0, 0, 0, 1102,
	0, 1107, 0, 0, 1674, 1361, 1082, 0, 0, 1113,
	0, 1079, 1080, 0, 1099, 1100, 1101, 1109, 1110, 1111,
	0, 0, 0, 0, 0, 0, 0, 1102, 0, 0,
	1081, 1360, 0, 0, 1082, 0, 1096, 1113, 0, 0,
	1079, 1080, 0, 1099, 1100, 1101, 1109, 1110, 1111, 0,
	0, 0, 0, 0, 0, 0, 1102, 0, 1081, 0,
	0, 0, 0, 1082, 1096, 1675, 1113, 0, 1105, 0,
	0, 1093, 1094, 1095, 1108, 0, 1092, 1090, 1091, 1083,
	1084, 1085, 1086, 1088, 1089, 0, 0, 1081, 0, 0,
	1087, 0, 0, 1096, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1106,
	1114, 0, 0, 0, 0, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 1112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1106, 1114, 0,
	0, 0, 1104, 0, 0, 0, 0, 1087, 0, 1097,
	0, 0, 0, 0, 0, 1112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1106, 1114, 0, 0,
	1104, 0, 0, 0, 1103, 0, 0, 1097, 0, 0,
	0, 0, 0, 0, 1112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1104,
	0, 0, 1103, 0, 0, 0, 1097, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 1103, 661, 0, 0, 0, 0, 0, 1107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 1079, 1080, 0, 1099, 1100, 1101,
	1109, 1110, 1111, 0, 0, 0, 1107, 0, 0, 0,
	1102, 0, 0, 0, 0, 0, 0, 1082, 0, 1098,
	1113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1107, 0, 0, 0, 0,
	0, 1081, 0, 0, 0, 1105, 0, 1096, 1093, 1094,
	1095, 1108, 0, 1092, 1090, 1091, 1083, 1084, 1085, 1086,
	1088, 1089, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1105, 0, 0, 1093, 1094, 1095, 1108,
	0, 1092, 1090, 1091, 1083, 1084, 1085, 1086, 1088, 1089,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1087, 1105, 0, 0, 1093, 1094, 1095, 1108, 0,
	1092, 1090, 1091, 1083, 1084, 1085, 1086, 1088, 1089, 0,
	1106, 1114, 0, 0, 1079, 1080, 0, 1099, 1100, 1101,
	1109, 1110, 1111, 0, 0, 0, 0, 0, 1112, 0,
	1102, 0, 0, 0, 0, 0, 0, 1082, 0, 0,
	1113, 0, 0, 1104, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 0, 0, 0, 0, 0, 1096, 0, 0,
	0, 0, 0, 0, 0, 1103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1087, 0, 1098, 0, 0, 1846, 0, 1079, 1080,
	0, 1099, 1100, 1101, 1109, 1110, 1111, 0, 0, 1107,
	1106, 1114, 0, 0, 1102, 0, 0, 0, 1841, 0,
	0, 1082, 0, 0, 1113, 0, 0, 0, 1112, 0,
	0, 0, 0, 0, 2000, 0, 0, 0, 0, 0,
	0, 0, 0, 1104, 0, 1081, 0, 0, 0, 0,
	1097, 1096, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1103, 1105, 0, 0, 1093,
	1094, 1095, 1108, 0, 1092, 1090, 1091, 1083, 1084, 1085,
	1086, 1088, 1089, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1087, 1079, 1080, 0, 1099,
	1100, 1101, 1109, 1110, 1111, 0, 0, 0, 0, 0,
	0, 0, 1102, 1098, 1106, 1114, 0, 0, 0, 1082,
	0, 0, 1113, 0, 0, 0, 0, 0, 0, 1107,
	0, 0, 1112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 0, 1104, 0, 1096,
	0, 0, 0, 0, 1097, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1105, 0, 0, 1093,
	1094, 1095, 1108, 1087, 1092, 1090, 1091, 1083, 1084, 1085,
	1086, 1088, 1089, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1106, 1114, 0, 0, 0, 1098, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1112, 0, 0, 1107, 0, 1079, 1080, 0, 1099, 1100,
	1101, 1109, 1110, 1111, 0, 1104, 0, 0, 0, 0,
	0, 1102, 1097, 0, 0, 1799, 0, 0, 1082, 0,
	0, 1113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1103, 0, 0,
	0, 0, 1081, 0, 0, 0, 0, 0, 1096, 0,
	1806, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1105, 0, 0, 1093, 1094, 1095, 1108, 0, 1092, 1090,
	1091, 1083, 1084, 1085, 1086, 1088, 1089, 0, 0, 0,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1107, 1087, 1079, 1080, 0, 1099, 1100, 1101, 1109,
	1110, 1111, 0, 0, 0, 0, 0, 0, 0, 1102,
	0, 1106, 1114, 0, 0, 0, 1082, 0, 0, 1113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	0, 1079, 1080, 0, 1099, 1100, 1101, 1109, 1110, 1111,
	1081, 0, 0, 0, 1104, 0, 1096, 1102, 0, 0,
	0, 1097, 0, 0, 1082, 0, 0, 1113, 1105, 0,
	0, 1093, 1094, 1095, 1108, 0, 1092, 1090, 1091, 1083,
	1084, 1085, 1086, 1088, 1089, 0, 1103, 0, 1081, 0,
	0, 0, 0, 0, 1096, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1106,
	1114, 0, 0, 0, 1098, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1112, 1087, 0,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1104, 0, 0, 0, 0, 1106, 1114, 1097,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1112, 0, 0, 0, 0,
	0, 0, 0, 0, 1103, 0, 0, 0, 0, 0,
	1104, 0, 0, 0, 0, 0, 0, 1097, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1105, 0, 0,
	1093, 1094, 1095, 1108, 0, 1092, 1090, 1091, 1083, 1084,
	1085, 1086, 1088, 1089, 0, 0, 0, 0, 0, 0,
	0, 0, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1107, 0,
	0, 0, 0, 1079, 1080, 0, 1099, 1100, 1101, 1109,
	1110, 1111, 0, 0, 0, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 1082, 0, 0, 1113,
	0, 0, 0, 0, 0, 0, 1107, 1079, 1080, 0,
	1099, 1100, 1101, 1109, 1110, 1111, 0, 0, 0, 0,
	1081, 0, 0, 0, 0, 0, 1096, 0, 0, 0,
	1082, 0, 0, 1113, 0, 1105, 0, 0, 1093, 1094,
	1095, 1108, 0, 1092, 1090, 1091, 1083, 1084, 1085, 1086,
	1088, 1089, 0, 0, 1081, 0, 0, 0, 0, 0,
	1096, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1105, 0, 0, 1093, 1094, 1095, 1108,
	1087, 1092, 1090, 1091, 1083, 1084, 1085, 1086, 1088, 1089,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1106,
	1114, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1087, 0, 0, 1112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1104, 1106, 1114, 0, 0, 0, 0, 1097,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 0,
	0, 0, 0, 1097, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1250, 1240, 1269, 1232, 1260,
	1259, 0, 1098, 1234, 1233, 0, 0, 0, 0, 1271,
	1270, 0, 0, 0, 0, 0, 0, 0, 1107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1098, 0, 0, 0,
	0, 0, 1265, 0, 1257, 1256, 0, 0, 0, 0,
	0, 0, 1107, 0, 1255, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1254, 1252, 1253, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1105, 0, 0, 1093, 1094,
	1095, 1108, 0, 1092, 1090, 1091, 1083, 1084, 1085, 1086,
	1088, 1089, 1243, 1242, 1244, 1245, 1246, 1247, 1248, 0,
	1268, 0, 0, 0, 0, 0, 0, 0, 0, 1105,
	0, 0, 1093, 1094, 1095, 1108, 0, 1092, 1090, 1091,
	1083, 1084, 1085, 1086, 1088, 1089, 0, 0, 0, 1236,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1258, 0, 0, 0, 1241, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1251, 0, 0, 0, 1432, 1430,
	1431, 1434, 1433, 0, 0, 0, 1250, 1240, 1269, 1232,
	1260, 1259, 0, 0, 1234, 1233, 0, 0, 0, 0,
	1271, 1270, 0, 0, 1237, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1249, 1238, 0, 0, 0,
	0, 0, 0, 0, 621, 1273, 581, 0, 0, 0,
	0, 0, 0, 1265, 0, 1257, 1256, 1235, 0, 0,
	1266, 1267, 0, 0, 626, 1255, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 624, 0, 0, 0,
	0, 0, 1239, 1254, 1252, 1253, 0, 1272, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 625, 0, 0,
	0, 0, 627, 0, 0, 0, 0, 633, 634, 0,
	0, 643, 0, 1243, 1242, 1244, 1245, 1246, 1247, 1248,
	0, 1268, 0, 0, 583, 628, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 646, 0, 0,
	1236, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1258, 0, 0, 0, 1241, 629, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 630, 631, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1251, 0, 0, 0, 637,
	0, 0, 632, 639, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 636, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 1237, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1249, 1238, 0, 0,
	0, 0, 0, 0, 0, 0, 1273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1235, 0,
	0, 1266, 1267, 0, 635, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1239, 0, 0, 0, 0, 1272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	623, 640, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 641, 0, 0, 0, 645,
	0, 0, 0, 586, 0, 0, 0, 0, 638, 642,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 644,
}
var sqlPact = [...]int{

	38573, -1000, 0, -1000, -1000, 142, -1000, -1000, -1000, 139,
	138, 137, -1000, 136, 135, 132, -1000, 130, -1000, 129,
	122, 119, 117, 107, 106, -1000, 105, 103, -1000, -1000,
	-1000, 102, 101, 99, 98, 95, 94, 93, 979, 22902,
	91, 90, 1191, 34350, 88, 86, 85, 83, 971, 78,
	77, 26390, 851, 1497, 64, 61, 60, 57, 56, 1182,
	34034, 1569, 2918, 5743, -1000, 1550, 33715, 22583, 1547, 2700,
	33396, -1000, -1000, 33077, 2018, 54, 53, 51, -1000, -1000,
	32758, 50, 49, 48, 46, 41, 40, 39, 38, 36,
	34, 32, 31, 29, 27, -1000, 26, 25, 24, 40572,
	23, 22, 18, 999, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 177, -1000, 835, 370, 18075,
	939, 929, 922, 921, 982, 36246, 34350, 14, -25, 10,
	-1000, 1817, 596, 20005, 38573, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26071,
	25752, 32439, 32120, 696, -1000, -6, 24166, 34350, -1000, 17,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 14413, 14058, 508,
	17, -1000, -1000, -1000, -1000, -1000, 31801, -1000, 31482, 31163,
	1424, 30844, -1000, -1000, -1000, -1000, 30525, -1000, -1000, 1682,
	1577, 1567, 25433, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 30209, 29890, 29571, 29252, 28933,
	431, -1000, -1000, -1000, 4268, -1000, -1000, -1000, -1000, 9,
	-1000, -1000, -1000, -1000, 8, 7, 4, 2, 1140, -1000,
	-1000, -3, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 15436, -1000, 429, -1000, 1556, -1000, 15436, -1000,
	1118, -1000, -1000, -1000, -1000, -1000, 34350, -1000, -1000, 1262,
	-1000, -1000, -1000, -1000, -1000, -1000, 867, -1000, -1000, -1000,
	1994, 1037, 426, 28614, -1000, 1349, -1000, 546, 703, -1000,
	-1000, -1000, 17745, 150, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2070, 22264, 1086, 1795, 1669, 1993, 1315,
	1667, 1653, 1651, 1633, 1611, 1992, 830, 1987, 1699, 942,
	1976, 1597, 1244, 613, 1974, 1554, 1543, -1000, -1000, -1000,
	27022, -1000, -1000, 835, -1000, -1000, -1000, 1235, 1802, 1802,
	1802, 1818, 253, 243, -1000, 177, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1910, -1000, -1000, -1000,
	-1000, 1947, -1000, -1000, -1000, -1000, 1296, -1000, -1000, 1296,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 693, 35614, -7,
	34350, -1000, 425, -7, -1000, -1000, 424, -1000, 10536, 10536,
	-1000, -1000, -1000, -1000, -1000, 8831, 1655, -1000, 170, -188,
	260, 531, -1000, 19042, 21606, -1000, -1000, 1010, 1708, 611,
	-1000, 862, 1702, 472, -1000, 857, -1000, 767, 1698, -171,
	23218, 24166, -6, -20, -1000, -1000, -1000, 5415, 39833, -1000,
	-1000, 15436, 15436, 15436, 15436, 15436, 1004, 465, -1000, 422,
	421, 7111, -1000, -1000, 1945, -1000, -1000, -1000, 252, -1000,
	-1000, 15436, 17, -1000, -1000, -1000, -1000, 419, 1969, -1000,
	594, -1000, -1000, -1000, 553, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1585, 418, 417, 414, -1000, -1000,
	-1000, -1000, 409, 408, 407, 397, 395, 391, 388, 387,
	386, 385, 383, 382, 381, 380, 378, 891, -1000, 570,
	-1000, -1000, 570, 570, -1000, 348, 348, 352, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 348, -1000, -1000, -1000,
	533, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 374, 39833,
	-1000, 740, 20645, 17, -1000, -1000, -1000, -1000, 371, 1208,
	555, -1000, 217, -1000, 28295, 555, 1203, -1000, -1000, -1000,
	27022, -1000, 34350, -1000, 34350, -1000, 759, -1000, 35930, 121,
	1696, -1000, -1000, 121, 1690, -1000, 118, 1683, -1000, -1000,
	-1000, 1681, -1000, -20, 1677, -1000, -1000, 15436, -26, -1000,
	-1000, -1000, 596, -1000, -1000, -1000, -1000, -1000, 23534, 1400,
	39833, 1868, 40499, 23218, 39833, 23534, -1000, -1000, -1000, -1000,
	-1000, 34350, -1000, 15436, -1000, 1862, 1347, -10, -1000, -1000,
	-1000, -1000, -1000, 1290, 1375, 685, 760, 17417, 17089, 1700,
	-1000, -1000, -1000, 148, 5743, -1000, -1000, -1000, -1000, -1000,
	-1000, 27976, -1000, -1000, -1000, 1079, 34350, -1000, -1000, 1574,
	-1000, 23534, 34350, -1000, 34350, -1000, 34350, -1000, 34350, -1000,
	34350, -1000, -1000, -1000, -1000, -1000, 2899, -1000, 1561, -1000,
	-1000, 34350, -1000, 1260, -1000, -1000, -1000, 27660, 27341, -1000,
	861, 716, 126, -1000, -1000, 1235, -1000, 1154, 1345, 13703,
	1420, 15436, 177, -1000, -1000, 177, 177, 8135, -1000, -1000,
	-1000, -1000, -1000, -1000, -10, -1000, 35614, -1000, 34350, -7,
	1861, 34350, -1000, 82, -1000, 38981, -1000, 82, -28, -1000,
	39833, -1000, 1390, 1389, 20325, 1384, 1008, 1008, 1008, -1000,
	369, 460, 531, 4744, 13362, -1000, 26706, 1017, 165, 244,
	18722, 1655, -1000, 34350, -53, 907, -1000, 25114, 1813, 1775,
	1772, 27022, 1842, 92, 1526, 686, 27022, 684, 1832, 92,
	1522, 683, 34350, 5743, 501, -1000, 34350, -1000, -1000, 40298,
	40499, 5743, 702, 15436, 15436, 15436, 15436, 15436, 15436, 15436,
	15436, 15436, 15436, 15436, 15436, 15436, 15436, 15436, 15436, 15436,
	15436, 15436, 15436, 15436, 15436, 1326, 15436, 682, 15436, 15436,
	15436, 15436, 1189, 994, 335, 1023, -1000, 1904, 1904, 1904,
	40093, 40093, 283, 465, -1000, 15436, -1000, 92, 13007, 243,
	38218, -9, 6770, -1000, -1000, -1000, 8476, 567, 39833, 17,
	6073, -1000, 1944, 832, 1595, 1470, 354, 506, 498, 474,
	15436, 15436, 12666, 12311, 11956, 15777, 11601, 15436, 7452, 15436,
	15436, 15436, 15436, 11246, 10891, -1000, 353, -1000, -1000, -1000,
	-1000, 1942, -1000, -1000, 1941, -1000, 700, 688, 1928, -1000,
	1521, -29, -1000, -1000, 24798, 1860, 1674, -1000, 914, -1000,
	1856, 34350, 1111, 1202, -1000, -1000, 710, 1648, 564, 267,
	1855, 267, 20966, -1000, 34350, -1000, 34350, -1000, -1000, 34350,
	-1000, 34350, -1000, 34350, 34350, 34350, 34350, -31, 39833, 552,
	24482, 681, -1000, 16, -36, -1000, 775, -1000, -1000, -1000,
	-1000, 258, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 352, 891, 348, 348, 348, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 533, -1000, -1000, 570,
	570, 570, -1000, -1000, -79, -1000, 1519, -1000, 526, -37,
	614, -10, -1000, 1296, 1275, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1961, -12,
	-1000, -1000, -12, -1000, -1000, 5743, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 34350, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2454, -1000, -1000, -1000, -1000, -1000, -1000, 34350,
	34350, 34350, -1000, 27022, -1000, -1000, -1000, -1000, 39833, -1000,
	376, -1000, -1000, 39833, 843, 1408, -1000, 1408, -13, -1000,
	38953, 1380, 34350, -1000, -1000, 346, -39, 564, 10536, 19684,
	5743, -1000, 564, 8831, -1000, 20325, 20325, 1645, 1387, 20325,
	-1000, -1000, -1000, -1000, 26706, 492, 531, 26706, -1000, 1927,
	1284, -51, -1000, -1000, -1000, 34350, 345, -1000, 531, 242,
	926, 34350, 34350, 34350, -1000, -1000, 1199, 35298, 1197, 40499,
	34350, -1000, 343, 341, 1378, 1372, 34350, 34350, 34982, 34666,
	34350, 962, 92, -1000, 339, 34350, 852, 34350, 92, -1000,
	338, 34350, 844, -1000, 1444, 1081, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 545, 509, 509,
	769, 769, 769, 769, 1896, 3254, 365, 3243, 3805, 3805,
	3805, 2974, 776, 776, 3805, 3805, 3805, 40093, 39871, 2530,
	15436, 15436, 680, 977, 335, 2530, 15436, 2530, 2530, 2530,
	2530, -1000, 1318, -1000, -1000, -1000, -1000, 1515, 334, 15777,
	15777, -1000, -1000, -1000, 7111, 16105, -1000, -1000, -1000, -1000,
	333, 15436, -1000, 38247, -205, -52, -1000, -1000, 15436, -42,
	-88, -1000, -1000, 822, -1000, 15436, -1000, -38, 15436, 15436,
	15436, 239, -1000, 238, -1000, 676, -1000, 674, 666, 665,
	-1000, 332, 980, 331, 329, 15436, -1000, -1000, -1000, -1000,
	-1000, -1000, 39725, 36912, 234, -1000, 1511, -168, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 231, -1000, 230, -1000, 39576,
	-168, 229, 3834, -1000, 15777, 15777, 15777, 7111, 328, 228,
	-1000, 38716, -168, 39468, 10195, 10195, 10195, 227, 39354, 15436,
	-168, 36884, 3689, 453, -54, -60, -1000, -61, -1000, 1925,
	-62, 226, 541, 536, 225, 733, 1507, 34350, 223, -67,
	-16, 40499, -1000, -1000, -1000, -1000, -1000, 34350, 384, 34350,
	92, 34350, 1959, 92, 34350, 1636, 1671, 487, 34350, 824,
	15436, 915, -1000, 19363, 576, 34350, 824, 66, -1000, -1000,
	-1000, 515, 34350, -1000, -1000, 121, 121, -1000, 118, -1000,
	-20, -1000, 15436, -1000, -1000, 34350, -1000, -1000, 40499, -1000,
	463, 670, -1000, 1924, 557, 23218, 34350, -1000, 1383, -1000,
	-1000, 865, -1000, 876, -1000, 18403, -1000, -122, -1000, -1000,
	-1000, -1000, -1000, 501, -1000, 843, -1000, 15436, 1921, -1000,
	-1000, -1000, 8135, -1000, -1000, -1000, 34350, -185, 16, -1000,
	1468, -1000, -112, -1000, 1655, -1000, 1468, -1000, -1000, 1645,
	-1000, 327, 15436, 20325, -1000, 454, -1000, -68, -1000, 26706,
	-1000, 452, -203, -1000, 513, -1000, 531, 326, 34350, 26706,
	-1000, -1000, -1000, 664, 660, 1620, -1000, 1196, -1000, 581,
	-1000, 1137, 15436, 16761, 324, 322, 986, -1000, 1618, 1045,
	1615, 1045, -1000, -53, 896, -1000, 15436, -1000, 659, -1000,
	-1000, 15436, -1000, 657, 557, 1504, 718, 15436, 2530, 2530,
	15436, 15777, 15777, -1000, 2530, -1000, -1000, -1000, -1000, -1000,
	1493, 305, 15436, 40499, 3757, 3275, -70, -1000, 9854, -63,
	-1000, 15436, -1000, 38190, -1000, -1000, 462, 1658, -1000, 15436,
	39224, 219, 9513, -1000, 39010, -44, -44, -1000, 1958, 1224,
	1119, 917, 779, 1919, -1000, 21286, 565, 1038, 38162, 40298,
	40499, -1000, 15436, -1000, -1000, 1488, 15436, -1000, 40298, 40499,
	15777, 15777, 15777, 15777, 15777, 15777, 15777, 15777, 15777, 15777,
	15777, 15777, 15777, 15777, 15777, 15777, 15777, 15777, 15777, 1352,
	15777, 1902, 1902, 1902, -89, 9172, -1000, 1553, 1488, 15436,
	15436, 40499, 218, 215, 214, -1000, 15436, -168, 15436, 15436,
	15436, -1000, -1000, -1000, 212, -1000, 1918, -1000, -1000, -1000,
	-1000, -1000, 731, -1000, 1426, -1000, 24798, 303, 34350, 301,
	-1000, 298, -1000, -1000, 296, 34350, 1328, 487, 23850, -1000,
	555, -1000, 7793, 39833, -1000, 824, 1777, -82, -1000, -1000,
	-1000, 564, 20966, 20325, 8831, -91, -1000, -1000, -1000, 39833,
	-122, -1000, 1916, -1000, 441, 202, -1000, 1044, -1000, -122,
	-1000, -1000, -1000, -1000, -1000, 34350, -1000, 1053, 37821, -1000,
	1790, 5743, 194, 1461, 1816, -1000, 20325, 1461, -1000, 34350,
	39833, -1000, -188, -1000, 1912, -1000, -1000, 1284, -1000, 5084,
	26706, 34350, -92, -1000, 34350, 34350, 34350, 1614, -1000, 2525,
	-1000, 37792, -97, -1000, 310, 1792, 15436, -1000, -1000, 295,
	16761, 34350, -1000, 1379, 1413, 605, 34350, -1000, 34350, -1000,
	34350, 34350, 34350, -99, 34350, -100, 34350, -1000, 23218, 617,
	1863, 2530, 887, 297, 15436, 40499, 40127, -107, 15436, 15436,
	-1000, -109, -1000, 15436, 433, 39833, -1000, -1000, -1000, 39833,
	15436, 1951, 15436, 192, 191, 190, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 187, -1000, -1000, 36562, 15436, 183,
	-1000, 180, 179, 39833, 1553, 39833, -1000, -1000, 496, 496,
	808, 808, 808, 808, 1902, 1239, 1344, 1139, 1131, 1131,
	1131, 410, 925, 925, 1131, 1131, 1131, 1485, 1274, 294,
	37281, 15436, -110, -1000, -1000, -1000, 39833, 39833, 178, -1000,
	-1000, -1000, -168, 216, 37764, 37736, -1000, 175, -1000, -1000,
	1436, -1000, 16761, 284, 34350, 24798, 1851, 16761, 1104, 1353,
	487, 23850, -1000, 710, -129, -1000, -1000, 249, 92, 824,
	-1000, -134, -1000, 512, 411, -1000, -1000, 279, -1000, -1000,
	-1000, -1000, 1790, -1000, 562, 15436, 15436, 1655, 562, -116,
	531, -1000, -1000, -1000, 1897, -1000, -117, -1000, -1000, -1000,
	-1000, 34350, -1000, 34350, -1000, 5743, 34350, 1498, 1192, -1000,
	-1000, 1364, 276, 15777, 34350, -1000, 1002, 16761, 1790, 17,
	5743, 1790, 37395, 6073, -132, -138, 1162, -1000, 1145, 15436,
	-1000, 40499, 1045, 1045, -1000, 646, 636, 627, -1000, 616,
	-1000, -137, 21934, 15436, 15436, 40127, -140, -1000, 2530, 2530,
	-1000, 37366, -1000, 39833, -1000, 39010, -1000, -1000, -1000, -1000,
	923, -1000, 37338, -1000, -1000, -1000, -1000, 15777, 1484, 275,
	40499, 37310, -1000, -1000, 15436, -1000, -1000, -1000, 955, -141,
	16761, -143, 172, 92, -150, 34350, -1000, 487, 23850, -1000,
	1671, 1725, 34350, 1761, -1000, -1000, 271, -1000, 1955, -1000,
	-1000, 34350, 39833, -168, -1000, -1000, 26706, 366, -1000, -1000,
	1346, -1000, -1000, 34350, 1193, -1000, -1000, 15436, 37281, 268,
	1426, 266, -1000, -1000, -1000, -1000, -1000, -1000, 1792, -38,
	-1000, 870, -1000, -1000, 39833, 1791, -1000, -1000, 34350, 34350,
	265, 264, -1000, 263, 17, 2530, 2530, -1000, -1000, 164,
	1038, 1811, -1000, 325, 15777, 40499, -152, -1000, 36969, 34350,
	1002, -157, -1000, 1426, -1000, 1002, 259, 23850, -1000, 1328,
	717, -158, 34350, -1000, -1000, 6415, -159, -1000, 484, -155,
	-1000, 1850, -1000, -1000, -1000, -1000, 1613, 36940, 1229, 34350,
	-1000, 34350, 1790, 162, 34350, 590, 5743, -1000, -1000, 15436,
	15436, 15436, -1000, 836, 15436, 325, -167, -1000, -1000, 257,
	1426, 1002, -1000, 1426, 16761, -1000, 1353, 755, -1000, 564,
	-1000, 1955, -1000, -1000, 1954, 34350, 256, 1603, -1000, 1067,
	1077, 161, -172, -1000, -1000, 217, -1000, 15436, -1000, -173,
	-174, -44, 160, 15095, 15095, -168, -1000, 34350, -1000, 1426,
	-1000, -175, -1000, 20966, -1000, -1000, -1000, -1000, -1000, 34350,
	-1000, 1096, 1088, 838, -1000, -1000, -1000, -1000, -1000, 1229,
	39833, -1000, -1000, 152, -1000, -1000, -1000, 16433, 1141, 796,
	38600, -1000, -182, -1000, 1002, -165, -1000, -1000, 1734, -1000,
	597, 1409, 1409, 1067, 1951, 1874, -1000, -1000, -1000, -1000,
	-1000, 1020, 1426, -1000, -1000, 1883, -1000, -1000, 1276, -1000,
	-1000, 14754, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2372, 2364, 1603, 1731, 2356, 2355, 2352, 2351, 2350,
	2347, 2339, 2336, 2332, 2328, 2327, 2326, 2325, 2324, 2323,
	2321, 2319, 2318, 2314, 2311, 2307, 2301, 1726, 2299, 2297,
	2296, 2294, 2289, 2286, 1697, 2285, 1695, 2284, 2283, 2282,
	2281, 2279, 1682, 1667, 2277, 87, 117, 1650, 2274, 2273,
	1639, 2272, 2270, 2269, 2268, 2266, 2265, 2264, 41, 2257,
	2254, 2250, 2249, 2248, 2247, 2246, 135, 152, 2243, 1630,
	2242, 2241, 2236, 2235, 2233, 2229, 2226, 2225, 2223, 2221,
	2220, 2218, 2216, 2214, 2212, 2211, 2208, 2207, 151, 2203,
	2202, 1621, 1611, 2198, 2196, 15, 2194, 70, 2191, 20,
	172, 2511, 148, 2183, 2180, 2178, 2176, 2170, 2169, 16,
	99, 98, 2167, 31, 2166, 2165, 39, 27, 18, 17,
	2162, 85, 2161, 2159, 1128, 19, 2157, 2156, 130, 2153,
	30, 26, 2322, 144, 137, 114, 110, 2151, 2149, 2148,
	2146, 45, 2143, 3, 2140, 2136, 11, 73, 21, 2134,
	23, 50, 2133, 2132, 124, 2129, 56, 88, 1514, 112,
	108, 284, 2128, 53, 7, 51, 2118, 2115, 146, 37,
	2112, 22, 77, 133, 2111, 47, 147, 128, 72, 122,
	109, 2107, 2106, 2105, 96, 2104, 107, 65, 2102, 2098,
	79, 2089, 131, 129, 2088, 2087, 83, 2086, 111, 2084,
	2083, 150, 149, 105, 9, 38, 57, 13, 1509, 1419,
	113, 75, 54, 48, 2081, 1800, 868, 1301, 29, 94,
	58, 46, 95, 55, 69, 141, 28, 2079, 2078, 116,
	2077, 2073, 2069, 2067, 2065, 92, 2064, 2062, 60, 132,
	78, 24, 43, 80, 34, 63, 123, 121, 142, 100,
	2060, 84, 119, 2059, 35, 2058, 2057, 1685, 106, 2056,
	2055, 2054, 1225, 1181, 858, 224, 2052, 2051, 828, 663,
	2049, 2048, 59, 2047, 102, 101, 2046, 136, 143, 259,
	2045, 115, 82, 86, 2043, 90, 49, 0, 91, 89,
	2042, 118, 76, 2041, 2039, 2038, 2036, 25, 2, 8,
	5, 6, 4, 66, 36, 2035, 2032, 125, 103, 62,
	2030, 145, 2023, 2019, 2017, 33, 2016, 14, 2015, 12,
	2010, 2009, 10, 1, 2008, 2006, 140, 2005, 93, 2004,
	1831, 2002, 138, 2000, 1998, 1686, 32, 97,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 7,
	7, 8, 8, 6, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 111, 111,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 108, 108, 113, 113, 113,
	115, 115, 112, 112, 107, 107, 20, 20, 56, 56,
	51, 285, 285, 286, 286, 94, 94, 98, 98, 95,
	96, 96, 97, 97, 26, 26, 26, 22, 22, 22,
	22, 22, 23, 23, 24, 24, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	34, 34, 35, 35, 35, 35, 35, 35, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 41,
	41, 41, 39, 39, 39, 38, 38, 38, 37, 37,
	37, 40, 40, 40, 160, 160, 159, 159, 162, 162,
	42, 42, 42, 42, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 46, 46, 46, 46, 46, 46,
	46, 46, 253, 253, 252, 44, 44, 227, 227, 47,
	47, 185, 185, 48, 48, 48, 48, 48, 49, 49,
	57, 57, 326, 326, 326, 330, 330, 331, 331, 332,
	332, 332, 332, 332, 332, 332, 328, 328, 54, 54,
	54, 93, 93, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 63, 63, 65, 62, 62, 62, 64, 64,
	64, 64, 66, 66, 66, 66, 67, 67, 67, 67,
	67, 68, 68, 140, 140, 278, 277, 277, 283, 283,
	283, 138, 138, 138, 138, 138, 139, 139, 139, 276,
	276, 276, 276, 284, 284, 284, 284, 284, 284, 282,
	282, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 81, 81, 81,
	88, 88, 88, 88, 88, 88, 88, 70, 70, 75,
	75, 75, 75, 75, 71, 71, 76, 76, 77, 77,
	78, 78, 78, 78, 78, 78, 72, 72, 72, 72,
	80, 80, 80, 80, 79, 79, 85, 85, 85, 85,
	85, 85, 82, 82, 82, 82, 83, 83, 83, 86,
	86, 86, 86, 73, 73, 74, 74, 87, 87, 84,
	84, 84, 43, 327, 327, 329, 329, 52, 52, 30,
	30, 31, 31, 141, 141, 142, 142, 206, 206, 206,
	206, 143, 143, 114, 114, 114, 205, 295, 295, 296,
	296, 296, 296, 296, 296, 297, 297, 297, 297, 297,
	297, 297, 293, 293, 294, 291, 291, 292, 292, 292,
	292, 333, 333, 204, 204, 146, 146, 300, 300, 300,
	300, 298, 298, 298, 298, 298, 301, 299, 302, 302,
	302, 302, 302, 239, 239, 239, 90, 90, 32, 32,
	120, 120, 33, 33, 29, 29, 29, 189, 189, 150,
	150, 244, 244, 244, 131, 131, 109, 109, 109, 14,
	11, 11, 11, 11, 11, 11, 19, 19, 17, 17,
	190, 190, 191, 191, 53, 53, 55, 55, 60, 60,
	89, 89, 89, 89, 89, 89, 21, 21, 21, 21,
	25, 25, 25, 25, 59, 59, 335, 335, 127, 127,
	127, 127, 128, 128, 201, 201, 202, 202, 203, 203,
	203, 122, 121, 123, 123, 28, 28, 28, 116, 116,
	117, 117, 118, 118, 119, 119, 336, 336, 50, 50,
	50, 92, 92, 134, 134, 198, 198, 198, 200, 200,
	199, 199, 199, 175, 175, 175, 91, 91, 155, 155,
	164, 164, 165, 165, 250, 166, 166, 58, 58, 101,
	101, 99, 99, 99, 99, 99, 99, 100, 100, 100,
	102, 102, 102, 102, 102, 102, 102, 105, 105, 105,
	106, 106, 106, 104, 104, 308, 308, 308, 311, 311,
	307, 309, 309, 310, 310, 334, 334, 176, 176, 176,
	145, 144, 144, 148, 148, 147, 149, 149, 243, 243,
	243, 173, 173, 173, 173, 192, 192, 193, 193, 194,
	194, 195, 195, 195, 196, 196, 197, 197, 172, 172,
	223, 223, 103, 103, 103, 154, 154, 154, 156, 156,
	213, 213, 213, 214, 214, 212, 212, 212, 212, 245,
	245, 245, 245, 245, 245, 245, 245, 324, 324, 324,
	325, 325, 242, 242, 246, 246, 246, 246, 246, 246,
	240, 240, 240, 240, 241, 241, 251, 251, 179, 179,
	179, 179, 177, 177, 178, 178, 247, 247, 247, 247,
	174, 174, 248, 248, 248, 207, 207, 254, 254, 254,
	272, 272, 153, 153, 153, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 256, 256, 256, 256, 258, 258, 258, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 271, 271, 271,
	271, 271, 259, 259, 266, 266, 267, 267, 268, 269,
	260, 260, 261, 261, 262, 263, 270, 270, 270, 270,
	274, 274, 264, 264, 264, 264, 264, 265, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 187, 187, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 217, 217, 217, 217,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 303, 303, 303, 303, 303, 303, 303, 303, 305,
	305, 306, 306, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 312, 312, 313, 313, 315, 315, 316, 316, 317,
	318, 318, 318, 319, 320, 320, 314, 314, 321, 321,
	321, 322, 322, 323, 323, 323, 323, 323, 229, 229,
	229, 230, 230, 231, 237, 237, 237, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 129, 129, 129, 129, 129, 161, 161,
	226, 226, 224, 224, 224, 228, 228, 180, 180, 273,
	273, 273, 273, 273, 273, 273, 181, 181, 181, 188,
	182, 182, 183, 183, 183, 183, 183, 183, 220, 221,
	184, 184, 184, 222, 222, 232, 236, 236, 235, 234,
	234, 233, 233, 210, 210, 211, 211, 209, 208, 169,
	169, 168, 168, 167, 167, 337, 337, 238, 238, 170,
	170, 171, 163, 163, 249, 249, 249, 249, 157, 157,
	136, 136, 158, 158, 132, 132, 135, 135, 133, 133,
	133, 133, 151, 151, 152, 152, 130, 130, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 275,
	275, 275, 225, 124, 124, 124, 125, 125, 126, 126,
	280, 280, 280, 281, 281, 281, 281, 279, 279, 279,
	279, 279, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 2, 6, 2,
	1, 1, 1, 1, 3, 3, 0, 2, 0, 2,
	1, 3, 5, 0, 4, 6, 7, 1, 2, 1,
	2, 2, 3, 3, 3, 3, 1, 2, 1, 2,
	1, 2, 1, 2, 3, 1, 2, 1, 2, 2,
	6, 3, 2, 2, 2, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 2, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 3, 5,
	3, 3, 5, 3, 1, 3, 1, 2, 2, 3,
	2, 2, 5, 3, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 3, 1, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 2,
	6, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 3,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 3, 4, 3, 5, 3, 2, 6, 3, 3,
	4, 4, 3, 3, 3, 3, 1, 3, 3, 1,
	1, 2, 2, 1, 0, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 2, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 3, 3, 4,
	4, 3, 4, 4, 4, 3, 2, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	2, 3, 3, 3, 2, 3, 4, 3, 5, 3,
	4, 5, 2, 3, 3, 3, 4, 2, 3, 4,
	3, 3, 3, 4, 4, 4, 4, 2, 3, 5,
	5, 6, 2, 2, 0, 2, 0, 3, 2, 7,
	10, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 3, 2, 0, 3,
	1, 2, 2, 3, 6, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 2, 4, 3,
	3, 0, 6, 3, 11, 14, 4, 1, 0, 1,
	3, 3, 3, 5, 2, 0, 1, 1, 0, 6,
	6, 8, 8, 10, 8, 10, 6, 8, 6, 8,
	1, 0, 2, 0, 2, 2, 3, 2, 2, 2,
	1, 2, 1, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	3, 6, 3, 1, 3, 1, 4, 2, 8, 5,
	4, 3, 0, 2, 2, 0, 8, 3, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 2, 2, 1, 1, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 2, 2, 3, 3, 2, 0, 1, 3,
	3, 5, 1, 1, 3, 2, 4, 4, 0, 8,
	4, 6, 3, 3, 1, 5, 5, 0, 2, 3,
	1, 3, 2, 0, 3, 4, 5, 4, 5, 4,
	5, 2, 4, 1, 1, 0, 5, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	1, 1, 2, 3, 0, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 3, 4, 4,
	5, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 2, 1, 3, 1, 1, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 3, 4,
	1, 1, 1, 5, 1, 3, 3, 1, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 6, 6, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 3, 4,
	3, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 3,
	5, 4, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 3,
	1, 3, 3, 3, 2, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 0, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 1, 1,
	3, 3, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 2, 3, 1, 1, 1,
	2, 2, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -26, -27, -48,
	-34, -35, -36, -47, -42, -49, -43, -50, -51, -52,
	-44, -56, -55, -57, -60, -58, -53, -54, -61, -69,
	-89, -90, -91, -92, -5, -6, -7, -8, 23, 34,
	-23, -24, 47, 67, -28, -29, -30, -31, 69, -32,
	-33, 89, -310, 93, -37, -38, -39, -41, -40, 97,
	104, 106, 124, 130, 171, 213, 219, 239, 241, 243,
	250, -99, -101, 237, 238, -62, -63, -64, -65, -93,
	261, -70, -71, -72, -73, -74, -75, -76, -77, -78,
	-79, -80, -81, -82, -83, -84, -85, -86, -87, 264,
	-21, -25, -59, 301, -9, -10, -13, -12, -11, -16,
	-18, -15, -17, -19, -14, -308, -102, -100, 352, 310,
	35, 273, 61, 100, 245, 326, 333, -105, -103, -104,
	-106, 254, 318, 282, 356, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 2, 282,
	321, 82, 139, -326, 2, -158, 282, 82, -133, -124,
	345, 4, -287, -289, 20, 21, 23, 33, 34, 35,
	40, 44, 47, 48, 55, 60, 61, 62, 64, 66,
	67, 68, 71, 72, 80, 81, 83, 85, 89, 91,
	93, 96, 97, 99, 104, 105, 106, 112, 113, 118,
	120, 125, 130, 131, 132, 133, 140, 143, 145, 138,
	155, 156, 157, 159, 160, 161, 164, 163, 168, 171,
	172, 175, 177, 178, 179, 182, 180, 184, 185, 187,
	186, 192, 194, 195, 197, 200, 203, 206, 209, 210,
	211, 212, 213, 215, 217, 219, 221, 222, 223, 224,
	225, 227, 228, 230, 231, 232, 233, 234, 237, 235,
	236, 238, 239, 240, 241, 243, 245, 246, 248, 262,
	263, 274, 250, 251, 252, 253, 257, 255, 258, 259,
	261, 264, 266, 269, 272, 273, 275, 278, 276, 271,
	281, 283, 284, 285, 286, 287, 288, 289, 296, 297,
	301, 302, 303, 304, 307, 308, 309, 310, 312, 315,
	316, 317, 322, 327, 328, 329, 330, 331, 28, 36,
	37, 38, 39, 41, 42, 45, 46, 51, 52, 53,
	56, 84, 86, 87, 103, 107, 108, 114, 115, 116,
	126, 128, 134, 135, 144, 146, 147, 148, 149, 150,
	152, 166, 181, 191, 193, 204, 208, 216, 218, 226,
	247, 256, 267, 268, 277, 279, 291, 292, 293, 298,
	299, 314, 318, 319, 355, 355, 2, 156, 223, -132,
	-124, 82, 355, 355, 355, 355, 282, 2, 311, 321,
	-189, 82, 306, 355, 355, -124, 219, 22, 2, 91,
	143, 309, 308, 22, 215, 255, 284, 286, 2, 355,
	355, 355, 355, 355, 2, 321, 282, 139, 82, 311,
	-124, 2, -46, 2, 352, -45, -4, -27, -36, -47,
	-42, -43, -58, -69, -34, -50, -91, -92, -330, 2,
	22, -331, -332, 69, 97, 124, 254, 143, 91, 308,
	-279, 4, -287, -289, -288, -290, 58, 70, 123, 142,
	136, 154, 158, 167, 169, 183, 205, 207, 244, 265,
	22, 24, 25, 26, 27, 29, 30, 31, 32, 43,
	49, 50, 54, 57, 59, 65, 69, 73, 74, 76,
	75, 77, 78, 79, 88, 90, 92, 94, 95, 98,
	100, 102, 109, 110, 111, 119, 121, 122, 124, 127,
	129, 137, 139, 141, 151, 153, 162, 165, 170, 173,
	174, 188, 189, 190, 196, 198, 199, 201, 202, 214,
	220, 229, 242, 254, 260, 270, 280, 282, 290, 294,
	295, 300, 305, 306, 311, 313, 320, 321, 323, 324,
	325, 326, 156, 2, -124, 2, -326, 2, 156, 2,
	-330, 2, -124, 2, -128, 2, 250, -124, -88, 258,
	2, 4, 22, 82, 182, 260, 291, 355, 355, 355,
	172, 55, 247, 258, -67, 297, -66, 291, -278, -68,
	2, -159, 182, -124, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 2, -88, 258, 34, 55, 22, 60, 83, 125,
	139, 140, 160, 65, 66, 222, 172, 157, 296, 161,
	259, 283, 297, 69, 312, 287, 105, 355, 355, 355,
	-334, 2, 282, -100, -102, -101, -147, -148, 305, 151,
	102, 202, -99, -101, 2, -308, -283, 2, -276, -239,
	9, 300, 109, 198, -282, 8, 344, -275, -281, 5,
	7, 343, 4, -287, -289, -288, -335, 2, 297, 297,
	2, -335, 2, -335, 2, -127, 2, 297, 294, -311,
	227, -307, -124, -311, 355, 355, 357, 355, -144, -145,
	2, 22, 94, -171, 2, 352, -245, 2, 350, -247,
	-132, -101, -246, 352, 199, -3, 2, -247, 134, -132,
	2, -247, 134, -132, 2, -124, 2, -135, 134, -132,
	294, 357, -158, -151, -124, -209, -208, 354, -215, 2,
	-217, 343, 344, 338, 188, 332, -229, -219, -232, 103,
	247, 352, -132, -218, 358, 9, -305, -101, 29, -230,
	-231, 49, -124, 7, 8, 5, 6, -130, -256, -225,
	-265, 300, 109, 190, -303, -304, 4, -287, -280, -257,
	-267, -261, -264, 152, 58, 74, 75, 78, 76, 79,
	260, 311, 50, 28, 107, 108, 208, 216, 279, 298,
	299, 134, 191, 135, 56, 126, 166, 96, 37, 39,
	41, 42, 51, 52, 84, 86, 87, 114, 115, 116,
	144, 146, 147, 148, 149, 150, 193, 226, 267, 277,
	292, 293, 319, -288, -268, -269, -262, -263, -270, -215,
	2, 122, 352, -168, -169, -208, -209, 2, -159, 134,
	-124, 2, -159, 2, 139, -124, 134, 2, -124, 22,
	122, 2, 153, 2, 153, 2, -248, 2, -247, -160,
	134, 2, -159, -160, 134, 2, -136, 134, 2, -135,
	-124, 134, 2, -151, 134, 2, -185, 352, -253, 2,
	-252, -281, 318, 355, 355, 355, 355, 355, 198, 357,
	-215, -227, 352, 122, -215, 198, -124, -88, 331, 2,
	2, 262, 2, 352, -67, 53, 297, -202, 2, -203,
	-121, -122, -123, 155, 221, 225, 331, 294, 337, 122,
	-283, -140, 88, -162, 354, -88, 2, -285, 2, -282,
	9, 262, 2, 222, 259, 55, 122, 2, 2, -327,
	2, 198, 122, 2, 122, 2, 122, 2, 122, 2,
	122, 2, 2, 222, 259, 2, 119, 2, 296, 2,
	2, 122, 2, 155, 221, 274, 2, 282, 321, 2,
	122, 122, -174, -247, -147, -148, -173, -192, -193, 170,
	111, 196, -176, 22, 94, -176, -176, 44, 353, 353,
	8, 7, 7, -201, -202, -201, 294, -128, 357, -311,
	-152, 352, -171, -163, -249, -215, 345, -163, -170, -238,
	-215, 88, 70, -179, 158, 183, 123, 167, 244, 142,
	7, -46, -212, 358, 352, 345, -242, 333, -101, -246,
	352, -245, -132, 352, -111, 235, -110, 21, 23, 97,
	316, 103, 271, 288, 251, 235, 103, 235, 271, 288,
	251, 235, 103, 358, -285, -133, 357, -279, 345, 10,
	11, 57, 33, 343, 344, 345, 346, 117, 347, 348,
	341, 342, 340, 335, 336, 337, 63, 176, 249, 13,
	14, 15, 26, 201, 169, 332, 136, 265, 338, 16,
	17, 18, 154, 36, 137, -129, -137, -215, -215, -215,
	-215, -215, 207, -167, -210, 350, -101, 352, 352, -101,
	-215, -161, 352, 7, -101, -224, 350, -233, -215, -168,
	352, 5, 352, 5, -312, 327, 119, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 218, -274, 322, -274, -274,
	-258, 352, -258, -259, 352, -258, 328, 333, 352, 275,
	353, -157, -132, -169, 352, -146, 188, -120, -309, 326,
	-146, 352, -125, 134, 2, -124, -309, 188, -248, -134,
	-132, -134, 261, -124, 30, -113, 357, 48, 240, 103,
	-113, 103, -113, 357, 103, 103, 103, -161, -215, 353,
	357, -326, -332, 30, -226, -254, -255, -257, -266, -260,
	-264, -265, 40, 46, 45, 289, 181, 256, 268, 314,
	38, 197, 145, 144, 146, 147, 148, 149, 150, 267,
	37, 226, 115, 116, 114, 96, 87, 86, 193, 42,
	41, -268, -269, -262, -263, 84, 292, 293, 152, 39,
	52, 51, 319, 277, -286, -285, -326, -66, -278, -161,
	30, -202, 2, 357, 168, -139, 175, 187, 131, 199,
	329, -284, 5, 4, -225, -239, 88, 172, -265, -277,
	88, -283, -277, 88, 72, 354, -279, -159, 22, 263,
	2, -278, -329, 119, -326, -278, -278, -278, -278, -278,
	258, -46, 119, -124, 168, -278, 2, -278, 2, 282,
	139, 282, -113, 357, -173, -193, -192, -194, -215, 22,
	-197, 113, 184, -215, -217, -100, -100, -100, -149, -243,
	-215, 220, 139, -128, -307, 30, -151, -154, 357, 122,
	30, 4, -154, 357, 353, 158, 158, -245, -179, 158,
	-177, 205, -177, -177, -324, 352, 351, -242, -279, 350,
	359, -161, 2, -241, -240, 30, -124, 203, 353, -132,
	357, 294, -190, 65, 59, -205, 134, 59, -291, -124,
	65, -292, 54, 306, 220, 121, -190, 65, -190, 65,
	65, -247, 33, -58, 122, 294, -247, 294, 33, -58,
	122, 294, -135, -279, -251, 334, -124, -272, -254, -271,
	231, 232, 230, 234, 233, -254, -279, 291, -215, -215,
	-215, -215, -215, -215, -215, -215, -215, -215, -215, -215,
	-215, -215, -215, -215, -215, -215, -215, -215, -215, -215,
	169, 136, 265, 36, 137, -215, 294, -215, -215, -215,
	-215, 180, 188, 190, 300, 109, 307, 94, 194, -337,
	280, 32, -222, -101, 352, -237, 27, 270, 22, -229,
	247, 352, -210, -215, -211, -161, 353, 353, 357, -161,
	-228, 351, -224, -236, -235, 323, 353, -161, 320, 22,
	94, 345, 2, 7, -186, 330, 179, 85, 132, 178,
	-187, 253, -313, 112, 127, 352, 353, 2, 353, 2,
	353, 2, -215, -215, -180, 2, -273, -161, 4, 330,
	179, 85, 132, 178, 253, -180, 2, -181, 2, -215,
	-161, -182, -216, -217, 343, 344, 338, 352, 247, -183,
	2, -215, -161, -215, 43, 165, 295, -184, -215, 122,
	-161, -215, -215, -215, -161, -161, 2, -161, 2, 352,
	7, 7, 291, 291, 7, 122, 353, 357, -141, -151,
	-142, -124, -206, -205, -293, -294, -291, 139, 306, 110,
	30, 103, 212, 30, 198, 188, -116, 285, 103, -207,
	324, -198, -58, 352, 88, 30, -198, -164, -165, -250,
	-166, -132, 352, -124, -159, -160, -160, -135, -136, -124,
	-151, 353, 357, -46, -252, 294, -45, 353, 357, -153,
	29, 350, -186, 352, -251, 357, 122, 353, 297, -203,
	-138, 225, 269, 236, 257, 357, -279, -328, -124, 258,
	-46, -132, -135, -132, -247, -195, -275, 352, 344, -196,
	247, 248, 357, -109, 31, 92, 159, -132, 352, 353,
	-207, -249, -156, 2, -245, -279, -207, -238, -245, -245,
	-178, 313, 198, 158, -245, -240, 353, -325, 7, -242,
	-241, 7, -214, -213, 120, 186, 353, -124, 352, -242,
	353, -110, -132, -124, -124, 188, -205, 134, -115, 188,
	-254, -124, 352, 352, 159, 159, -124, -124, 134, -124,
	134, -124, -124, -111, 235, -58, 352, -132, 235, -124,
	-58, 352, -124, 235, -94, 133, 194, 331, -215, -215,
	294, -337, 280, -222, -215, 180, 190, 300, 109, 307,
	94, 194, 122, 352, -216, -216, -161, -219, 352, -161,
	351, 361, 353, -215, 351, 351, 357, -234, -235, 98,
	-215, -148, 357, -147, -215, -161, -161, 353, 353, 294,
	294, 294, 294, 352, -318, 206, 352, 352, -215, 30,
	357, 353, 122, 353, 353, -188, 214, 353, 10, 11,
	343, 344, 345, 346, 117, 347, 348, 341, 342, 340,
	335, 336, 337, 63, 176, 249, 13, 14, 15, 154,
	137, -216, -216, -216, -161, 352, 353, -220, -221, 122,
	119, 30, -184, -184, -184, 353, 122, -161, 357, 357,
	357, 353, 353, 353, 7, 353, 357, 353, 331, 331,
	353, 275, 122, -132, 353, 353, 357, -125, 139, -125,
	-58, -159, 5, -58, -132, 103, -117, 99, -336, 337,
	-124, -175, 242, -215, -175, -200, 198, -157, 318, -124,
	-175, -155, 357, 122, 337, -157, -113, -113, -113, -215,
	-328, -254, 350, 351, 7, 7, -97, 326, -285, -328,
	-121, 304, 62, 225, -283, 357, -251, -196, -215, -243,
	-132, 358, -45, -172, 127, -251, 357, -172, -178, 352,
	-215, -245, 351, 353, 357, -241, 351, 357, 360, 337,
	-242, 352, -151, -240, 294, 294, 103, 188, 315, -295,
	-292, -215, -150, -244, -124, -306, 352, -303, -304, -130,
	352, 352, -108, 97, 261, -191, 103, -113, 103, -113,
	294, -190, 65, -161, 294, -161, 294, -97, 122, 281,
	-215, -215, -216, -216, 122, 352, -215, -226, 26, 26,
	353, -161, 353, 357, -211, -215, 353, -224, 100, -215,
	290, 353, 320, -148, -148, -148, 5, 179, 132, 178,
	-187, 178, -187, -187, 7, -319, -124, 352, 324, -147,
	353, -272, -254, -215, -220, -215, -272, -254, -216, -216,
	-216, -216, -216, -216, -216, -216, -216, -216, -216, -216,
	-216, -216, -216, -216, -216, -216, -216, 94, 188, 194,
	-216, 357, -161, 353, -221, -220, -215, -215, -254, 353,
	353, 353, -161, -215, -215, -215, 353, 7, 275, -143,
	138, -206, 352, -125, 352, 352, -146, 352, -124, -118,
	164, -336, -282, -309, -163, 189, -175, 64, 353, -207,
	-165, -156, -238, 353, 7, 351, 353, 200, -124, 199,
	353, -109, -279, 353, -223, 129, 44, -245, -223, -151,
	-212, 7, -213, -279, 350, -241, -151, 353, -124, -124,
	-205, 103, -296, 65, -297, 57, 110, 69, 188, 190,
	306, 220, 54, 88, 229, 353, 353, 357, -131, -168,
	57, -131, -215, 352, -150, -151, 188, 88, 188, 88,
	81, 302, -124, -124, -132, -124, -124, 353, -132, 353,
	-124, -286, 291, 26, 26, -215, -226, 353, -215, -215,
	353, -215, 351, -215, 5, -215, 353, 353, 353, 353,
	-320, -124, -215, 353, 353, 353, -221, 122, 94, 194,
	352, -215, 353, 353, 357, 353, 353, 353, 137, -150,
	352, -151, -141, 30, -150, 198, -119, 163, -336, -282,
	-116, -199, 352, 198, -58, -175, 337, 351, 352, -109,
	-315, 325, -215, -161, -315, 353, -242, 7, 353, -205,
	-124, -279, -124, 110, 134, 190, 159, 352, -216, -132,
	-204, -333, 68, 278, -244, -109, -279, -109, 353, -161,
	353, 353, 190, 190, -215, -254, -113, -113, 294, 294,
	294, 294, -218, -130, -124, -215, -215, 353, 353, -148,
	-314, 211, 353, -216, 122, 352, -226, 353, -215, 209,
	353, -150, 353, 353, -58, 353, -132, -336, -282, -117,
	95, -151, 65, -171, -101, 352, -96, -95, 5, -316,
	-317, -124, -241, 351, -297, -125, 188, -215, -126, 352,
	-143, 352, -131, -148, 229, -112, 57, -124, -124, 352,
	352, 352, 353, -148, 44, -216, -226, 353, 353, -132,
	-204, 353, -143, -204, 352, -282, -118, 308, 189, 353,
	-124, 357, 353, -98, 337, 357, 30, 103, 353, -300,
	177, -124, -151, -109, 353, -132, -107, 313, -279, -161,
	-161, -161, -321, 224, 248, -161, 353, 352, -143, -204,
	-143, -150, -119, 261, -207, -95, 5, -317, -319, 110,
	-298, -301, -299, 198, 123, 210, 266, 353, 353, -146,
	-215, 353, 353, -148, 353, -322, -323, 36, 303, 72,
	-215, -322, -151, -143, 353, -164, -124, -299, 198, -301,
	198, 308, 91, -300, 353, -323, 217, 118, 247, 217,
	118, 353, -204, -207, -302, 185, 240, 48, 261, -302,
	-298, 26, -114, 48, 240, -143, 20, 190, 88, -323,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 7, 8, 9, 10,
	12, 14, 16, 17, 19, 21, 23, 24, 26, 27,
	29, 31, 33, 35, 37, 39, 40, 42, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 0, 0,
	137, 139, 0, 0, 146, 148, 150, 152, -2, 155,
	157, 0, 0, 0, 168, 170, 172, 174, 176, 0,
	0, -2, 0, 0, 120, 0, 0, 0, 0, 0,
	0, 617, -2, 0, 0, 263, 265, 267, 269, 270,
	0, 321, 323, 325, 327, 329, 331, 333, 335, 337,
	339, 341, 343, 345, 347, 349, 350, 352, 354, 0,
	540, 542, 544, -2, 63, 64, 65, 66, 67, 73,
	74, 75, 76, 69, 71, 653, -2, 664, 0, 0,
	-2, 0, -2, -2, -2, 0, 0, 630, 632, 634,
	636, -2, 0, 0, -2, 6, 11, 13, 15, 18,
	20, 22, 25, 28, 30, 32, 34, 36, 38, 41,
	43, 48, 50, 52, 55, 57, 59, 61, 62, 0,
	0, 0, 0, 0, 117, 242, 0, 1214, 1142, 1148,
	1149, 1173, 1174, 1175, 1192, 1193, 1194, 1195, 1196, 1197,
	1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207,
	1208, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1217, 1218,
	1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228,
	1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238,
	1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248,
	1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
	1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268,
	1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278,
	1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288,
	1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298,
	1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
	1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
	1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
	1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,
	1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
	1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358,
	1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368,
	1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378,
	1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
	1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
	1399, 1400, 1401, 1402, 138, 140, 141, 0, 0, 0,
	1144, 1214, 147, 149, 151, 153, 0, 159, 0, 0,
	0, 0, 507, 156, 158, 233, 1274, 235, 237, 0,
	0, 0, 0, 162, 163, 164, 165, 166, 167, 169,
	171, 173, 175, 177, 178, 0, 0, 0, 0, 0,
	232, 230, 200, 201, 0, 214, 215, 216, 217, 218,
	220, 221, 204, 205, 206, 208, 210, 212, 0, 239,
	245, 246, 247, 249, 250, 251, 252, 253, 254, 255,
	422, 1187, 1188, 1189, 1190, 1191, 1403, 1404, 1405, 1406,
	1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416,
	1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426,
	1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436,
	1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446,
	1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456,
	1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466,
	1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
	1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486,
	1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496,
	1497, 1498, 0, 428, 228, 226, 0, 119, 0, 537,
	0, 241, 538, 539, 534, 535, 1301, 563, 258, 0,
	260, 360, 361, 362, 363, 364, 0, 264, 266, 268,
	-2, -2, 1389, -2, 276, -2, 286, 1395, 0, 289,
	290, 295, -2, 196, 322, 324, 326, 328, 330, 332,
	334, 336, 338, 340, 342, 344, 346, 348, 351, 353,
	355, 356, 357, 0, 0, 0, 361, 0, -2, -2,
	0, 0, 0, 0, 0, -2, 0, -2, 0, 0,
	-2, -2, 0, 0, -2, 0, 0, 541, 543, 545,
	0, 497, 655, -2, 628, 629, -2, 0, 659, 659,
	659, 0, 0, 629, 627, 0, 261, 262, 298, 299,
	300, 309, 310, 311, 312, 493, 0, 495, 319, 320,
	1169, 0, 1183, 1184, 1185, 1186, 565, 547, 556, 565,
	549, 550, 551, 552, 553, 554, 555, 558, 0, 645,
	1280, 648, 1155, 646, 631, 633, 0, 635, 0, 0,
	639, 661, 660, 692, 693, 0, 643, 644, 654, 708,
	746, 723, 714, 0, 0, 2, 68, 0, 1371, 746,
	70, 0, 1371, 746, 72, 0, 77, 0, 1371, 1147,
	0, 0, 243, 244, 1152, 1150, 1151, 0, 142, 143,
	854, 0, 0, 0, 0, 0, 0, 946, 948, 1363,
	1389, 0, 950, 951, 0, 953, 955, 956, 0, 959,
	960, 1112, 1144, 1158, 1159, 1160, 1161, 0, 0, 1164,
	0, 1166, 1167, 1168, 1012, 970, -2, -2, 1156, 782,
	783, 784, 785, -2, 1403, 974, 977, 980, 983, 984,
	985, 986, 0, 1347, 1364, 1365, 1385, 1386, 1394, 1398,
	1399, 1371, 1382, 1372, 1359, 1369, 1380, 1220, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1182, 816, 817, 822, 823, 825, 144,
	145, 0, 0, 1145, 1121, 1119, 1120, 154, 476, 1371,
	-2, 499, 476, 503, -2, 652, 1371, 577, 234, 236,
	0, 161, 0, 590, 0, 592, 0, 607, 752, 109,
	1371, 181, 194, 109, 1371, 184, 109, 1371, 187, 1140,
	188, 1371, 190, 191, 1371, 193, 229, 0, 0, -2,
	222, 224, -2, 219, 207, 209, 211, 213, 0, 0,
	427, 0, 0, 0, 536, 0, 562, 259, 365, 366,
	271, 0, 273, 0, 275, 1358, -2, 278, 279, 566,
	568, 569, 570, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 293, 197, 0, 358, 359, 367, 368, 121,
	122, 0, 371, 392, 404, 0, 0, 375, 377, 426,
	379, 0, 0, 381, 0, 383, 0, 385, 0, 387,
	0, 389, 391, 393, 405, 395, 654, 397, 0, 399,
	403, 0, 408, 0, 410, 411, 412, 0, 0, 418,
	0, 0, 109, 750, -2, 0, 623, 673, 674, 0,
	0, 0, 0, 657, 658, 0, 0, 0, 619, 620,
	494, 1171, 1170, 546, 564, 548, 0, 560, 0, 647,
	0, 0, 694, 697, 1132, 1136, 1137, 697, 0, 1129,
	1127, 1128, 0, 0, 0, 0, 743, 743, 743, 741,
	717, 0, 723, 0, 0, 747, 735, 0, -2, 714,
	0, 0, 748, 0, 78, 531, 88, 0, 531, 531,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 737, 1143, 0, 1117, 1118, 0,
	0, 0, 0, 1047, 1048, 1049, 1050, 1051, 1052, 1055,
	1056, 1053, 1054, 1057, 1058, 1059, 0, 0, 0, 1060,
	1061, 1062, 0, 0, 1064, 0, 1066, 0, 0, 0,
	0, 0, 0, 1126, 0, 0, 1063, 859, 860, 861,
	883, 884, 0, 947, 1123, 1116, 949, 0, 0, -2,
	1068, 0, 0, 952, 957, 958, 0, 0, 1111, -2,
	0, 1163, 0, 851, 1014, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1091, -2, 0, 0, 0,
	0, 0, 0, 0, 0, 801, 819, 830, 827, 826,
	803, 0, 802, 800, 0, 804, 0, 0, 0, 134,
	0, 0, 1138, 1122, 434, 0, 0, 498, 0, 651,
	0, 0, 0, 1371, 506, 1176, 579, 0, 756, 0,
	593, 0, 0, 753, 0, 179, 0, 107, 108, 0,
	182, 0, 185, 0, 0, 0, 0, 0, 1068, 654,
	0, 0, 248, 654, 0, 1070, 764, 765, 766, 767,
	768, 851, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 813, 0, 788, 788, 788, 805,
	806, 814, 815, 820, 821, 832, 833, 835, 837, 831,
	831, 831, 828, 829, 737, 123, 0, 272, 0, 0,
	0, 280, 281, 0, 0, 571, 306, 307, 308, 573,
	574, 287, 313, 314, 315, 316, 317, 318, 0, 282,
	284, 296, 283, 285, 288, 0, 198, 369, 370, 372,
	373, 374, 378, 0, 423, 380, 382, 384, 386, 388,
	396, 400, 654, 406, 409, 413, 414, 415, 416, 0,
	0, 0, 496, 0, 626, 671, 672, 675, 679, 680,
	683, 686, 687, 677, 854, 640, 641, 642, 665, 666,
	518, 0, 0, 559, 649, 0, 0, 756, 0, 0,
	0, 1135, 756, 0, 1131, 0, 0, 0, 0, 0,
	738, 742, 739, 740, 0, 0, 723, 735, 705, 0,
	0, 0, 712, 713, 734, 0, 733, 722, -2, 0,
	0, 0, 0, 0, 530, 90, 1371, 0, 111, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 83,
	0, 0, 0, 1146, 126, 0, 1153, 855, 760, 761,
	807, 808, 809, 810, 811, 856, 857, 0, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, -2, -2,
	-2, 875, 876, 877, -2, -2, -2, 881, 882, -2,
	1065, 1067, 0, 1126, 0, -2, 0, -2, -2, -2,
	-2, 895, 0, 897, 900, 902, 904, 0, 0, 0,
	0, 1125, 914, 1103, 0, 0, 1044, 1045, 1046, 899,
	0, 0, 1124, 1115, 0, 0, -2, 954, 0, 0,
	0, 1074, 1075, 1110, 1106, 0, 961, 664, 0, 0,
	0, 0, 968, 0, 1172, 838, 839, 840, 841, 842,
	843, 852, 1022, 0, 0, 0, 975, 976, 978, 979,
	981, 982, 0, 0, 0, 990, 0, 1078, -2, -2,
	-2, -2, -2, -2, -2, 0, 992, 0, 994, 1068,
	1088, 0, 0, 917, 0, 0, 0, 0, 1389, 0,
	997, 1068, 1096, 0, 0, 0, 0, 0, 1068, 0,
	1102, 0, 0, 0, 0, 0, 1008, 0, 1010, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	433, 1152, 435, 437, 438, 439, 440, 1177, 0, 1177,
	0, 0, 0, 0, 0, 0, 581, 587, 0, 605,
	0, 605, 595, 0, 0, 0, 605, 609, 610, 612,
	613, 0, 0, 754, 195, 109, 109, 1141, 109, 189,
	192, 231, 0, 202, 223, 0, 225, 227, 0, 757,
	759, 0, 769, 0, 133, 0, 0, 274, 0, 567,
	572, 0, 303, 0, 305, 0, 199, 425, 256, 398,
	401, 419, 420, 737, 751, 0, 681, 0, 0, 678,
	684, 685, 0, 668, 516, 517, 0, 0, 654, 1154,
	689, 1133, 737, 696, 698, 1134, 689, 1130, 725, 0,
	727, 0, 0, 0, 729, 0, 718, 0, 720, 735,
	710, 0, 0, 703, 0, 702, 723, 731, 0, 0,
	749, 89, 520, 0, 0, 0, 92, 1371, 100, 0,
	448, 0, 0, 0, 0, 0, 533, 101, 1371, 109,
	1371, 109, 102, 79, 531, 80, 0, 526, 0, 519,
	81, 0, 528, 0, 133, 0, 0, 0, -2, -2,
	0, 0, 0, 915, -2, 896, 898, 901, 903, 905,
	0, 0, 0, 0, 0, 0, 0, 916, 0, 0,
	1113, 1116, -2, 1069, 1072, 1073, 0, 0, 1107, 0,
	0, 0, 0, 663, 664, 664, 664, 967, 0, 0,
	0, 0, 0, 0, 969, 0, 0, 0, 0, 0,
	0, 989, 0, 991, 993, 0, 0, 995, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 920, 921, 922, 0, 0, 996, 1094, 1095, 0,
	0, 0, 0, 0, 0, 1002, 0, 1101, 0, 0,
	0, 1006, 1007, 1009, 0, 786, 0, 812, 834, 836,
	824, 135, 0, 1139, 442, 475, 0, 0, 1177, 0,
	431, 476, 500, 502, 0, 0, 583, 587, 0, 586,
	652, 160, 0, 755, 588, 605, 0, 0, 597, 594,
	591, 756, 0, 0, 0, 0, 180, 183, 186, 1069,
	238, 1071, 0, 762, 0, 0, 118, 0, 124, 240,
	277, 301, 302, 304, 297, 0, 421, 0, 0, 667,
	518, 0, 0, 691, 0, 695, 0, 691, 726, 0,
	745, 728, 708, 719, 0, 716, 706, 0, 707, 0,
	735, 0, 0, 715, 0, 0, 0, 0, 110, 446,
	465, 0, 0, 509, 515, 515, 0, 971, 972, 0,
	0, 0, 94, 0, 0, 0, 0, 98, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	858, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	1104, 0, 1039, 0, 0, 1115, -2, 1076, 1105, 1109,
	0, 962, 0, 0, 0, 0, 1165, 844, 845, 846,
	847, 848, 849, 850, 0, 1020, 1021, 1025, 0, 0,
	973, 0, 0, 1077, 1087, 1089, 918, 919, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, -2, -2,
	-2, 936, 937, 938, -2, -2, -2, 0, 0, 0,
	1090, 0, 0, 1042, 1092, 1093, 1098, 1099, 0, 999,
	1000, 1001, 1100, 0, 0, 0, 818, 0, 136, 429,
	0, 436, 0, 0, 0, 434, 0, 0, 0, 585,
	587, 0, 578, 579, 603, 604, 589, 602, 0, 605,
	611, 608, 614, 0, 0, 763, 770, 0, 257, 676,
	682, 669, 518, 650, 1016, 0, 0, 699, 1016, 0,
	723, 721, 704, 700, 0, 711, 0, 732, 522, 524,
	91, 0, 447, 0, 450, 0, 0, 0, 0, 456,
	457, 0, 0, 0, 0, 467, 474, 0, 518, 1157,
	0, 518, 0, 0, 0, 0, 0, 106, 0, 0,
	532, 0, 109, 109, 521, 0, 0, 0, 527, 0,
	529, 125, 0, 0, 0, -2, 0, 908, -2, -2,
	1038, 1069, 1114, 1108, 1162, 664, 963, 965, 966, 853,
	1027, 1024, 0, 1011, 987, 988, 1086, 0, 0, 0,
	0, 1069, 1041, 998, 0, 1004, 1005, 787, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 587, 0, 580,
	581, 0, 0, 0, 596, 606, 0, 758, 0, 670,
	637, 0, 690, 688, 638, 744, 735, 0, 730, 93,
	0, 451, 452, 1177, 0, 455, 458, 0, 460, 1179,
	442, 0, 471, 472, 510, 511, 514, 512, 515, 664,
	469, 0, 95, 96, 105, 113, 97, 103, 0, 0,
	0, 0, 736, 0, 0, -2, -2, 909, 1040, 0,
	664, 0, 1013, -2, 0, 0, 0, 1043, 0, 0,
	474, 0, 464, 442, 432, 474, 0, 0, 582, 583,
	0, 0, 0, 615, 616, 0, 0, 130, 128, 1015,
	1017, 0, 709, 701, 449, 453, 0, 0, 480, 0,
	468, 0, 518, 0, 0, 115, 0, 523, 525, 0,
	0, 0, 964, 1030, 0, -2, 0, 944, 1003, 0,
	442, 474, 430, 442, 0, 584, 585, 0, 599, 756,
	601, 0, 132, 129, 0, 0, 0, 0, 459, 485,
	0, 0, 0, 513, 962, 476, 99, 0, 112, 0,
	0, 664, 0, 0, 0, 1026, 945, 0, 462, 442,
	504, 0, 576, 0, 600, 131, 127, 1018, 1019, 0,
	461, 481, 482, 0, 477, 478, 479, 1178, 473, 480,
	114, 85, 87, 0, 1023, 1028, 1031, -2, 1331, 1211,
	0, 1029, 0, 463, 474, 756, 454, 483, 0, 484,
	0, 0, 0, 485, 0, 0, 1033, 1034, 1035, 1036,
	1037, 445, 442, 598, 486, 0, 489, 490, 0, 487,
	470, 0, 441, 443, 444, 505, 488, 491, 492, 1032,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 341, 3, 347, 342, 3,
	352, 353, 345, 343, 357, 344, 354, 346, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 361, 356,
	335, 337, 336, 3, 358, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 350, 3, 351, 348, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 359, 340, 360, 338,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 339, 57678, 349, 57679, 355,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:862
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:868
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:874
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 6:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:884
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:889
		{
			return helpWith(sqllex, "DELETE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 18:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:903
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:905
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:908
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:909
		{
			return helpWith(sqllex, "RESET")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:913
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:915
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "ALTER")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:965
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:976
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:987
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1008
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1022
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1028
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1034
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1040
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1046
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1050
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1056
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1060
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 90:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1106
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1129
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1132
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1139
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = nil
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = DropCascade
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = DropRestrict
		}
	case 109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = DropDefault
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1201
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1202
		{
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1205
		{
			return unimplemented(sqllex, "alter using")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1206
		{
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1233
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1259
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1264
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Load{}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.str = ""
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 132:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1329
		{
		}
	case 134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1349
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1350
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1351
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1359
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1362
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1370
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1373
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1381
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1382
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1384
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1386
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1387
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1388
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1389
		{
			return helpWith(sqllex, "CREATE")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1400
		{
			return helpWith(sqllex, "DELETE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1410
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1411
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1412
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1413
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1414
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1422
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1423
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1425
		{
			return helpWith(sqllex, "DROP")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1440
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1455
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1478
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1493
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1508
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1559
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1568
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1576
		{
			return helpWith(sqllex, "DELETE")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1577
		{
			return helpWith(sqllex, "INSERT")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1586
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1587
		{ /* SKIP DOC */
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1616
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1640
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1675
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1695
		{
			return helpWith(sqllex, "GRANT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1737
		{
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1805
		{
			return helpWith(sqllex, "RESET")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1810
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1813
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1817
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1818
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1819
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1820
		{ /* SKIP DOC */
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1821
		{ /* SKIP DOC */
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1822
		{
			return unimplemented(sqllex, "set local")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1835
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1885
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1890
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1918
		{
			return unimplemented(sqllex, "set from current")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1920
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1926
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1930
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1936
		{
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1938
		{
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1963
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = Low
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = Normal
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = High
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2057
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2058
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2059
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2060
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2061
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2062
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2063
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2064
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2065
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2066
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2067
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2068
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2069
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2070
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2072
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2073
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2074
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2075
		{
			return helpWith(sqllex, "SHOW")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2084
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.str = "client_encoding"
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2099
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2127
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2132
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2140
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2143
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2154
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2165
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2176
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2181
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2186
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2197
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2202
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2213
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2232
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2245
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2250
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2268
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2291
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2299
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2303
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2307
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2310
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2321
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2332
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2343
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2347
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2351
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2355
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2367
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 424:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2392
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2395
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2494
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2498
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = DropDefault
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2508
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2713
		{
			return unimplemented(sqllex, "match full")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2714
		{
			return unimplemented(sqllex, "match partial")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2715
		{
			return unimplemented(sqllex, "match simple")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2716
		{
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2722
		{
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2723
		{
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2724
		{
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2725
		{
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2726
		{
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2729
		{
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2732
		{
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2735
		{
			return unimplemented(sqllex, "no action")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2738
		{
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2739
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2740
		{
			return unimplemented(sqllex, "action set null")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2741
		{
			return unimplemented(sqllex, "action set default")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2766
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2777
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2781
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 501:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 502:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2802
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2842
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = true
		}
	case 508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2850
		{
			sqlVAL.union.val = false
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2872
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2873
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2876
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2877
		{
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = Ascending
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = Descending
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 519:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2917
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2919
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = true
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = false
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2952
		{
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2953
		{
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2961
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2964
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2972
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2975
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2986
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2990
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2991
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2992
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3010
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3015
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3025
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3028
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3033
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3041
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3048
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3051
		{
		}
	case 557:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3052
		{
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.str = ""
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 561:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.str = ""
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3098
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = ReadOnly
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = ReadWrite
		}
	case 575:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3168
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.str = ""
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 581:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.str = ""
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3192
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3196
		{
			sqlVAL.str = ""
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.str = ""
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3211
		{
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3212
		{
		}
	case 588:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3236
		{
			return helpWith(sqllex, "INSERT")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3253
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3295
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3299
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3307
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 606:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3330
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3334
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3335
		{
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3464
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3499
		{
			return helpWith(sqllex, "SELECT")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3500
		{
			return helpWith(sqllex, "VALUES")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3501
		{
			return helpWith(sqllex, "TABLE")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3547
		{
			return helpWith(sqllex, "SELECT")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3591
		{
			return helpWith(sqllex, "TABLE")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3602
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3603
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3604
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3607
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3608
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3611
		{
			return unimplemented(sqllex, "cte")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3614
		{
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3615
		{
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3618
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3619
		{
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3622
		{
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3623
		{
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = true
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = false
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = false
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = true
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3646
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3647
		{
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3685
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3694
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3714
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3766
		{
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3767
		{
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3770
		{
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3771
		{
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3829
		{
			return helpWith(sqllex, "VALUES")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3831
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3846
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = &From{}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3868
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3886
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3913
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3950
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3975
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4005
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = nil
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4016
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4022
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = true
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = false
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.str = astFullJoin
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.str = astLeftJoin
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.str = astRightJoin
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.str = astInnerJoin
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4133
		{
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4134
		{
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4220
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4233
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4234
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4250
		{
			return unimplementedWithIssue(sqllex, 17156)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4259
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4322
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4331
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = nil
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4396
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4406
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4410
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4492
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 824:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4524
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4563
		{
		}
	case 831:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4564
		{
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4573
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4581
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4590
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = year
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4600
		{
			sqlVAL.union.val = month
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4604
		{
			sqlVAL.union.val = day
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = hour
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = minute
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4616
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4622
		{
			sqlVAL.union.val = month
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4626
		{
			sqlVAL.union.val = hour
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = minute
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4638
		{
			sqlVAL.union.val = minute
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4642
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = nil
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = second
		}
	case 853:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4659
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4694
		{
			return unimplemented(sqllex, "at tz")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4719
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4791
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4807
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4815
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4843
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4862
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4896
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4908
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4912
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4920
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4928
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5012
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5016
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5020
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5024
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5077
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5101
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5135
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5139
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5154
		{
			return unimplemented(sqllex, "variadic")
		}
	case 964:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5155
		{
			return unimplemented(sqllex, "variadic")
		}
	case 965:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5157
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5161
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5165
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5168
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 969:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5179
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5195
		{
			return unimplemented(sqllex, "func_application")
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5196
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 973:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5200
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5206
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5209
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5218
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5224
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5227
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5228
		{
			return unimplemented(sqllex, "current role")
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5229
		{
			return unimplemented(sqllex, "current user")
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5230
		{
			return unimplemented(sqllex, "session user")
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5231
		{
			return unimplemented(sqllex, "user")
		}
	case 987:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5233
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5237
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5244
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 991:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5246
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5249
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 993:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5254
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 995:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5256
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5260
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5263
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 998:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5264
		{
			return unimplemented(sqllex, "treat")
		}
	case 999:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5270
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5274
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5278
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5282
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5286
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5290
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5294
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5298
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5301
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5303
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5306
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5310
		{
			return unimplemented(sqllex, "within group")
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5311
		{
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5326
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5330
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5336
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5346
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5354
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5358
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5362
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5369
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5388
		{
			sqlVAL.str = ""
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5398
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5408
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5409
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5410
		{
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5413
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5414
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5420
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5421
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5422
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5423
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5424
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5435
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5443
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5449
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5453
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5459
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5465
		{
			sqlVAL.union.val = Any
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5469
		{
			sqlVAL.union.val = Some
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5473
		{
			sqlVAL.union.val = All
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = Plus
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5479
		{
			sqlVAL.union.val = Minus
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5480
		{
			sqlVAL.union.val = Mult
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5481
		{
			sqlVAL.union.val = Div
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5482
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5483
		{
			sqlVAL.union.val = Mod
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5484
		{
			sqlVAL.union.val = Bitand
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5485
		{
			sqlVAL.union.val = Bitor
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5486
		{
			sqlVAL.union.val = Pow
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5487
		{
			sqlVAL.union.val = Bitxor
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5488
		{
			sqlVAL.union.val = LT
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5489
		{
			sqlVAL.union.val = GT
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5490
		{
			sqlVAL.union.val = EQ
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5491
		{
			sqlVAL.union.val = LE
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5492
		{
			sqlVAL.union.val = GE
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5493
		{
			sqlVAL.union.val = NE
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5497
		{
			sqlVAL.union.val = Like
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5498
		{
			sqlVAL.union.val = NotLike
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5499
		{
			sqlVAL.union.val = ILike
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5500
		{
			sqlVAL.union.val = NotILike
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5511
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5515
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5521
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5525
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5531
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5535
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5539
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5545
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5549
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5555
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5559
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5581
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5585
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5589
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5595
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5602
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5606
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5623
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5627
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5631
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5635
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5639
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5643
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5649
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5655
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5661
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5665
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5669
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5675
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5679
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5697
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5701
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5707
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5713
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5717
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5724
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5730
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5734
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5741
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5747
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5753
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5759
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5763
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5769
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5773
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5779
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5783
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5788
		{
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5789
		{
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5798
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5804
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5808
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5817
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5823
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5827
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5833
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5842
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5846
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5850
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5858
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5862
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5868
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5872
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5878
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5882
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5893
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5897
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5903
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5907
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5920
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5924
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5928
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5932
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5951
		{
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5961
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5965
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5972
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5976
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5980
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5984
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5987
		{
			return unimplemented(sqllex, "func const")
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5989
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5993
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5996
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6006
		{
			sqlVAL.union.val = DNull
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6013
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6017
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6023
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6058
		{
			sqlVAL.str = ""
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6064
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6068
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
