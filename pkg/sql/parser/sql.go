// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:464
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFIGURATION = 57406
const CONFIGURATIONS = 57407
const CONFIGURE = 57408
const CONFLICT = 57409
const CONSTRAINT = 57410
const CONSTRAINTS = 57411
const CONTAINS = 57412
const COPY = 57413
const COVERING = 57414
const CREATE = 57415
const CROSS = 57416
const CSV = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPERIMENTAL = 57453
const EXPLAIN = 57454
const EXTRACT = 57455
const EXTRACT_DURATION = 57456
const FALSE = 57457
const FAMILY = 57458
const FETCH = 57459
const FETCHVAL = 57460
const FETCHTEXT = 57461
const FETCHVAL_PATH = 57462
const FETCHTEXT_PATH = 57463
const FILTER = 57464
const FIRST = 57465
const FLOAT = 57466
const FLOAT4 = 57467
const FLOAT8 = 57468
const FLOORDIV = 57469
const FOLLOWING = 57470
const FOR = 57471
const FORCE_INDEX = 57472
const FOREIGN = 57473
const FROM = 57474
const FULL = 57475
const GRANT = 57476
const GRANTS = 57477
const GREATEST = 57478
const GROUP = 57479
const GROUPING = 57480
const HAVING = 57481
const HELP = 57482
const HIGH = 57483
const HOUR = 57484
const HAS_SOME = 57485
const HAS_ALL = 57486
const IMPORT = 57487
const INCREMENTAL = 57488
const IF = 57489
const IFNULL = 57490
const ILIKE = 57491
const IN = 57492
const INET = 57493
const INTERLEAVE = 57494
const INDEX = 57495
const INDEXES = 57496
const INITIALLY = 57497
const INNER = 57498
const INSERT = 57499
const INT = 57500
const INT2VECTOR = 57501
const INT2 = 57502
const INT4 = 57503
const INT8 = 57504
const INT64 = 57505
const INTEGER = 57506
const INTERSECT = 57507
const INTERVAL = 57508
const INTO = 57509
const IS = 57510
const ISOLATION = 57511
const JOB = 57512
const JOBS = 57513
const JOIN = 57514
const KEY = 57515
const KEYS = 57516
const KV = 57517
const LATERAL = 57518
const LC_CTYPE = 57519
const LC_COLLATE = 57520
const LEADING = 57521
const LEAST = 57522
const LEFT = 57523
const LEVEL = 57524
const LIKE = 57525
const LIMIT = 57526
const LOCAL = 57527
const LOCALTIME = 57528
const LOCALTIMESTAMP = 57529
const LOW = 57530
const LSHIFT = 57531
const MATCH = 57532
const MINUTE = 57533
const MONTH = 57534
const NAN = 57535
const NAME = 57536
const NAMES = 57537
const NATURAL = 57538
const NEXT = 57539
const NO = 57540
const NO_INDEX_JOIN = 57541
const NORMAL = 57542
const NOT = 57543
const NOTHING = 57544
const NULL = 57545
const NULLIF = 57546
const NULLS = 57547
const NUMERIC = 57548
const OF = 57549
const OFF = 57550
const OFFSET = 57551
const OID = 57552
const ON = 57553
const ONLY = 57554
const OPTIONS = 57555
const OR = 57556
const ORDER = 57557
const ORDINALITY = 57558
const OUT = 57559
const OUTER = 57560
const OVER = 57561
const OVERLAPS = 57562
const OVERLAY = 57563
const PARENT = 57564
const PARTIAL = 57565
const PARTITION = 57566
const PASSWORD = 57567
const PAUSE = 57568
const PLACING = 57569
const PLANS = 57570
const POSITION = 57571
const PRECEDING = 57572
const PRECISION = 57573
const PREPARE = 57574
const PRIMARY = 57575
const PRIORITY = 57576
const QUERIES = 57577
const QUERY = 57578
const RANGE = 57579
const READ = 57580
const REAL = 57581
const RECURSIVE = 57582
const REF = 57583
const REFERENCES = 57584
const REGCLASS = 57585
const REGPROC = 57586
const REGPROCEDURE = 57587
const REGNAMESPACE = 57588
const REGTYPE = 57589
const REMOVE_PATH = 57590
const RENAME = 57591
const REPEATABLE = 57592
const RELEASE = 57593
const RESET = 57594
const RESTORE = 57595
const RESTRICT = 57596
const RESUME = 57597
const RETURNING = 57598
const REVOKE = 57599
const RIGHT = 57600
const ROLLBACK = 57601
const ROLLUP = 57602
const ROW = 57603
const ROWS = 57604
const RSHIFT = 57605
const SAVEPOINT = 57606
const SCATTER = 57607
const SEARCH = 57608
const SECOND = 57609
const SELECT = 57610
const SEQUENCES = 57611
const SERIAL = 57612
const SERIALIZABLE = 57613
const SESSION = 57614
const SESSIONS = 57615
const SESSION_USER = 57616
const SET = 57617
const SETTING = 57618
const SETTINGS = 57619
const SHOW = 57620
const SIMILAR = 57621
const SIMPLE = 57622
const SMALLINT = 57623
const SMALLSERIAL = 57624
const SNAPSHOT = 57625
const SOME = 57626
const SPLIT = 57627
const SQL = 57628
const START = 57629
const STATUS = 57630
const STDIN = 57631
const STRICT = 57632
const STRING = 57633
const STORE = 57634
const STORING = 57635
const SUBSTRING = 57636
const SYMMETRIC = 57637
const SYSTEM = 57638
const TABLE = 57639
const TABLES = 57640
const TEMP = 57641
const TEMPLATE = 57642
const TEMPORARY = 57643
const TESTING_RANGES = 57644
const TESTING_RELOCATE = 57645
const TEXT = 57646
const THEN = 57647
const TIME = 57648
const TIMESTAMP = 57649
const TIMESTAMPTZ = 57650
const TO = 57651
const TRAILING = 57652
const TRACE = 57653
const TRANSACTION = 57654
const TREAT = 57655
const TRIM = 57656
const TRUE = 57657
const TRUNCATE = 57658
const TYPE = 57659
const UNBOUNDED = 57660
const UNCOMMITTED = 57661
const UNION = 57662
const UNIQUE = 57663
const UNKNOWN = 57664
const UPDATE = 57665
const UPSERT = 57666
const USE = 57667
const USER = 57668
const USERS = 57669
const USING = 57670
const UUID = 57671
const VALID = 57672
const VALIDATE = 57673
const VALUE = 57674
const VALUES = 57675
const VARCHAR = 57676
const VARIADIC = 57677
const VIEW = 57678
const VARYING = 57679
const WHEN = 57680
const WHERE = 57681
const WINDOW = 57682
const WITH = 57683
const WITHIN = 57684
const WITHOUT = 57685
const WRITE = 57686
const YEAR = 57687
const ZONE = 57688
const NOT_LA = 57689
const WITH_LA = 57690
const AS_LA = 57691
const CONTAINED_BY = 57692
const HAS_SOME_KEY = 57693
const HAS_ALL_KEYS = 57694
const POSTFIXOP = 57695
const UMINUS = 57696
const HELPTOKEN = 57697

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6644

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	375, 53,
	-2, 690,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 47,
	153, 542,
	-2, 0,
	-1, 58,
	96, 690,
	157, 690,
	323, 690,
	324, 690,
	-2, 0,
	-1, 68,
	107, 665,
	117, 665,
	165, 665,
	184, 665,
	209, 665,
	215, 665,
	320, 665,
	-2, 654,
	-1, 101,
	4, 692,
	20, 692,
	21, 692,
	23, 692,
	28, 692,
	33, 692,
	34, 692,
	35, 692,
	36, 692,
	37, 692,
	38, 692,
	39, 692,
	40, 692,
	41, 692,
	42, 692,
	44, 692,
	45, 692,
	46, 692,
	47, 692,
	48, 692,
	51, 692,
	52, 692,
	53, 692,
	55, 692,
	56, 692,
	60, 692,
	61, 692,
	62, 692,
	64, 692,
	65, 692,
	66, 692,
	67, 692,
	69, 692,
	71, 692,
	72, 692,
	75, 692,
	76, 692,
	77, 692,
	85, 692,
	86, 692,
	87, 692,
	88, 692,
	89, 692,
	90, 692,
	91, 692,
	92, 692,
	94, 692,
	96, 692,
	98, 692,
	101, 692,
	102, 692,
	104, 692,
	108, 692,
	109, 692,
	110, 692,
	111, 692,
	112, 692,
	113, 692,
	114, 692,
	122, 692,
	123, 692,
	124, 692,
	125, 692,
	126, 692,
	128, 692,
	130, 692,
	135, 692,
	136, 692,
	138, 692,
	141, 692,
	142, 692,
	145, 692,
	146, 692,
	147, 692,
	148, 692,
	151, 692,
	152, 692,
	154, 692,
	157, 692,
	158, 692,
	159, 692,
	160, 692,
	161, 692,
	162, 692,
	163, 692,
	164, 692,
	166, 692,
	169, 692,
	170, 692,
	171, 692,
	173, 692,
	174, 692,
	175, 692,
	177, 692,
	178, 692,
	180, 692,
	182, 692,
	185, 692,
	188, 692,
	190, 692,
	191, 692,
	192, 692,
	193, 692,
	194, 692,
	195, 692,
	197, 692,
	198, 692,
	199, 692,
	200, 692,
	204, 692,
	205, 692,
	206, 692,
	207, 692,
	208, 692,
	210, 692,
	212, 692,
	213, 692,
	216, 692,
	217, 692,
	219, 692,
	221, 692,
	222, 692,
	223, 692,
	224, 692,
	225, 692,
	226, 692,
	228, 692,
	229, 692,
	230, 692,
	231, 692,
	232, 692,
	234, 692,
	235, 692,
	236, 692,
	237, 692,
	238, 692,
	239, 692,
	240, 692,
	241, 692,
	243, 692,
	244, 692,
	245, 692,
	246, 692,
	247, 692,
	249, 692,
	250, 692,
	251, 692,
	252, 692,
	253, 692,
	254, 692,
	255, 692,
	257, 692,
	259, 692,
	260, 692,
	261, 692,
	262, 692,
	264, 692,
	265, 692,
	266, 692,
	267, 692,
	269, 692,
	270, 692,
	271, 692,
	272, 692,
	273, 692,
	275, 692,
	276, 692,
	277, 692,
	278, 692,
	280, 692,
	281, 692,
	282, 692,
	283, 692,
	285, 692,
	286, 692,
	287, 692,
	288, 692,
	289, 692,
	290, 692,
	291, 692,
	292, 692,
	293, 692,
	294, 692,
	296, 692,
	298, 692,
	299, 692,
	300, 692,
	301, 692,
	302, 692,
	303, 692,
	304, 692,
	306, 692,
	307, 692,
	308, 692,
	311, 692,
	312, 692,
	313, 692,
	314, 692,
	316, 692,
	317, 692,
	318, 692,
	319, 692,
	322, 692,
	323, 692,
	324, 692,
	325, 692,
	327, 692,
	329, 692,
	330, 692,
	331, 692,
	332, 692,
	333, 692,
	334, 692,
	337, 692,
	342, 692,
	343, 692,
	344, 692,
	345, 692,
	346, 692,
	-2, 0,
	-1, 122,
	107, 664,
	117, 664,
	165, 664,
	184, 664,
	209, 664,
	215, 664,
	320, 664,
	-2, 657,
	-1, 128,
	1, 591,
	169, 591,
	234, 591,
	238, 591,
	374, 591,
	375, 591,
	-2, 0,
	-1, 130,
	1, 591,
	374, 591,
	375, 591,
	-2, 0,
	-1, 131,
	1, 591,
	374, 591,
	375, 591,
	-2, 0,
	-1, 132,
	1, 595,
	374, 595,
	375, 595,
	-2, 0,
	-1, 139,
	4, 698,
	5, 698,
	6, 698,
	7, 698,
	8, 698,
	9, 698,
	20, 698,
	21, 698,
	23, 698,
	28, 698,
	29, 698,
	33, 698,
	34, 698,
	35, 698,
	36, 698,
	37, 698,
	38, 698,
	39, 698,
	40, 698,
	41, 698,
	42, 698,
	44, 698,
	45, 698,
	46, 698,
	47, 698,
	48, 698,
	49, 698,
	50, 698,
	51, 698,
	52, 698,
	53, 698,
	55, 698,
	56, 698,
	58, 698,
	60, 698,
	61, 698,
	62, 698,
	64, 698,
	65, 698,
	66, 698,
	67, 698,
	69, 698,
	71, 698,
	72, 698,
	74, 698,
	75, 698,
	76, 698,
	77, 698,
	79, 698,
	80, 698,
	81, 698,
	83, 698,
	84, 698,
	85, 698,
	86, 698,
	87, 698,
	88, 698,
	89, 698,
	90, 698,
	91, 698,
	92, 698,
	94, 698,
	96, 698,
	98, 698,
	101, 698,
	102, 698,
	104, 698,
	108, 698,
	109, 698,
	110, 698,
	111, 698,
	112, 698,
	113, 698,
	114, 698,
	115, 698,
	116, 698,
	122, 698,
	123, 698,
	124, 698,
	125, 698,
	126, 698,
	128, 698,
	130, 698,
	133, 698,
	135, 698,
	136, 698,
	138, 698,
	141, 698,
	142, 698,
	145, 698,
	146, 698,
	147, 698,
	148, 698,
	149, 698,
	151, 698,
	152, 698,
	154, 698,
	156, 698,
	157, 698,
	158, 698,
	159, 698,
	160, 698,
	161, 698,
	162, 698,
	163, 698,
	164, 698,
	166, 698,
	168, 698,
	169, 698,
	170, 698,
	171, 698,
	172, 698,
	173, 698,
	174, 698,
	175, 698,
	177, 698,
	178, 698,
	180, 698,
	181, 698,
	182, 698,
	183, 698,
	185, 698,
	188, 698,
	190, 698,
	191, 698,
	192, 698,
	193, 698,
	194, 698,
	195, 698,
	196, 698,
	197, 698,
	198, 698,
	199, 698,
	200, 698,
	201, 698,
	203, 698,
	204, 698,
	205, 698,
	206, 698,
	207, 698,
	208, 698,
	210, 698,
	213, 698,
	216, 698,
	217, 698,
	218, 698,
	219, 698,
	220, 698,
	221, 698,
	222, 698,
	223, 698,
	224, 698,
	225, 698,
	226, 698,
	228, 698,
	229, 698,
	230, 698,
	231, 698,
	232, 698,
	234, 698,
	235, 698,
	236, 698,
	237, 698,
	238, 698,
	239, 698,
	240, 698,
	241, 698,
	243, 698,
	244, 698,
	245, 698,
	246, 698,
	247, 698,
	249, 698,
	250, 698,
	251, 698,
	252, 698,
	253, 698,
	254, 698,
	255, 698,
	257, 698,
	258, 698,
	259, 698,
	260, 698,
	261, 698,
	262, 698,
	264, 698,
	265, 698,
	266, 698,
	267, 698,
	269, 698,
	270, 698,
	271, 698,
	272, 698,
	273, 698,
	274, 698,
	275, 698,
	276, 698,
	277, 698,
	278, 698,
	279, 698,
	280, 698,
	281, 698,
	282, 698,
	283, 698,
	285, 698,
	286, 698,
	287, 698,
	288, 698,
	289, 698,
	290, 698,
	291, 698,
	292, 698,
	293, 698,
	294, 698,
	296, 698,
	298, 698,
	299, 698,
	300, 698,
	301, 698,
	302, 698,
	303, 698,
	304, 698,
	306, 698,
	307, 698,
	308, 698,
	311, 698,
	312, 698,
	313, 698,
	314, 698,
	315, 698,
	316, 698,
	317, 698,
	318, 698,
	319, 698,
	322, 698,
	323, 698,
	324, 698,
	325, 698,
	326, 698,
	327, 698,
	329, 698,
	330, 698,
	331, 698,
	332, 698,
	333, 698,
	334, 698,
	337, 698,
	342, 698,
	343, 698,
	344, 698,
	345, 698,
	346, 698,
	347, 698,
	357, 698,
	362, 698,
	363, 698,
	364, 698,
	371, 698,
	377, 698,
	-2, 0,
	-1, 142,
	1, 53,
	375, 53,
	-2, 690,
	-1, 504,
	132, 1303,
	309, 1303,
	352, 1303,
	373, 1303,
	-2, 0,
	-1, 505,
	132, 1252,
	309, 1252,
	352, 1252,
	373, 1252,
	-2, 0,
	-1, 507,
	132, 1361,
	309, 1361,
	352, 1361,
	373, 1361,
	-2, 0,
	-1, 509,
	132, 1383,
	309, 1383,
	352, 1383,
	373, 1383,
	-2, 0,
	-1, 516,
	132, 1308,
	309, 1308,
	352, 1308,
	373, 1308,
	-2, 327,
	-1, 542,
	1, 405,
	370, 405,
	372, 405,
	374, 405,
	375, 405,
	-2, 0,
	-1, 543,
	1, 457,
	129, 457,
	370, 457,
	372, 457,
	374, 457,
	375, 457,
	-2, 0,
	-1, 549,
	1, 419,
	370, 419,
	372, 419,
	374, 419,
	375, 419,
	-2, 0,
	-1, 551,
	1, 423,
	370, 423,
	372, 423,
	374, 423,
	375, 423,
	-2, 0,
	-1, 554,
	1, 431,
	370, 431,
	372, 431,
	374, 431,
	375, 431,
	-2, 0,
	-1, 555,
	1, 436,
	370, 436,
	372, 436,
	374, 436,
	375, 436,
	-2, 0,
	-1, 558,
	1, 446,
	370, 446,
	372, 446,
	374, 446,
	375, 446,
	-2, 0,
	-1, 577,
	117, 700,
	184, 700,
	209, 700,
	-2, 660,
	-1, 580,
	117, 699,
	184, 699,
	209, 699,
	-2, 658,
	-1, 637,
	371, 1230,
	-2, 1223,
	-1, 638,
	371, 1231,
	-2, 1224,
	-1, 644,
	5, 877,
	371, 877,
	-2, 1435,
	-1, 669,
	5, 836,
	-2, 1404,
	-1, 670,
	5, 871,
	371, 871,
	-2, 1406,
	-1, 671,
	5, 846,
	-2, 1407,
	-1, 672,
	5, 845,
	-2, 1408,
	-1, 673,
	5, 871,
	371, 871,
	-2, 1411,
	-1, 674,
	5, 871,
	371, 871,
	-2, 1412,
	-1, 675,
	5, 872,
	-2, 1415,
	-1, 676,
	5, 828,
	-2, 1416,
	-1, 677,
	5, 828,
	-2, 1417,
	-1, 678,
	5, 853,
	-2, 1421,
	-1, 679,
	5, 838,
	-2, 1422,
	-1, 680,
	5, 839,
	-2, 1423,
	-1, 681,
	5, 829,
	-2, 1429,
	-1, 682,
	5, 830,
	-2, 1430,
	-1, 683,
	5, 831,
	-2, 1431,
	-1, 684,
	5, 832,
	-2, 1432,
	-1, 685,
	5, 833,
	-2, 1433,
	-1, 686,
	5, 834,
	-2, 1434,
	-1, 687,
	5, 828,
	-2, 1439,
	-1, 688,
	5, 837,
	-2, 1444,
	-1, 689,
	5, 835,
	-2, 1447,
	-1, 690,
	5, 869,
	371, 869,
	-2, 1449,
	-1, 691,
	5, 873,
	-2, 1452,
	-1, 692,
	5, 875,
	-2, 1453,
	-1, 693,
	5, 868,
	371, 868,
	-2, 1458,
	-1, 878,
	225, 688,
	-2, 535,
	-1, 891,
	211, 1227,
	-2, 0,
	-1, 926,
	1, 216,
	370, 216,
	372, 216,
	374, 216,
	375, 216,
	-2, 663,
	-1, 929,
	4, 1457,
	10, 1457,
	11, 1457,
	13, 1457,
	14, 1457,
	15, 1457,
	16, 1457,
	17, 1457,
	18, 1457,
	20, 1457,
	21, 1457,
	23, 1457,
	26, 1457,
	28, 1457,
	30, 1457,
	33, 1457,
	34, 1457,
	35, 1457,
	36, 1457,
	37, 1457,
	38, 1457,
	39, 1457,
	40, 1457,
	41, 1457,
	42, 1457,
	44, 1457,
	45, 1457,
	46, 1457,
	47, 1457,
	48, 1457,
	51, 1457,
	52, 1457,
	53, 1457,
	55, 1457,
	56, 1457,
	57, 1457,
	60, 1457,
	61, 1457,
	62, 1457,
	63, 1457,
	64, 1457,
	65, 1457,
	66, 1457,
	67, 1457,
	69, 1457,
	70, 1457,
	71, 1457,
	72, 1457,
	74, 1457,
	75, 1457,
	76, 1457,
	77, 1457,
	85, 1457,
	86, 1457,
	87, 1457,
	88, 1457,
	89, 1457,
	90, 1457,
	91, 1457,
	92, 1457,
	94, 1457,
	96, 1457,
	98, 1457,
	101, 1457,
	102, 1457,
	104, 1457,
	108, 1457,
	109, 1457,
	110, 1457,
	111, 1457,
	112, 1457,
	113, 1457,
	114, 1457,
	118, 1457,
	119, 1457,
	120, 1457,
	121, 1457,
	122, 1457,
	123, 1457,
	124, 1457,
	125, 1457,
	126, 1457,
	127, 1457,
	128, 1457,
	130, 1457,
	133, 1457,
	135, 1457,
	136, 1457,
	138, 1457,
	141, 1457,
	142, 1457,
	145, 1457,
	146, 1457,
	147, 1457,
	148, 1457,
	149, 1457,
	150, 1457,
	151, 1457,
	152, 1457,
	154, 1457,
	156, 1457,
	157, 1457,
	158, 1457,
	159, 1457,
	160, 1457,
	161, 1457,
	162, 1457,
	163, 1457,
	164, 1457,
	166, 1457,
	168, 1457,
	169, 1457,
	170, 1457,
	171, 1457,
	172, 1457,
	173, 1457,
	174, 1457,
	175, 1457,
	177, 1457,
	178, 1457,
	180, 1457,
	181, 1457,
	182, 1457,
	183, 1457,
	185, 1457,
	188, 1457,
	189, 1457,
	190, 1457,
	191, 1457,
	192, 1457,
	193, 1457,
	194, 1457,
	195, 1457,
	196, 1457,
	197, 1457,
	198, 1457,
	199, 1457,
	200, 1457,
	204, 1457,
	205, 1457,
	206, 1457,
	207, 1457,
	208, 1457,
	210, 1457,
	213, 1457,
	214, 1457,
	216, 1457,
	217, 1457,
	219, 1457,
	221, 1457,
	222, 1457,
	223, 1457,
	224, 1457,
	225, 1457,
	226, 1457,
	228, 1457,
	229, 1457,
	230, 1457,
	231, 1457,
	232, 1457,
	234, 1457,
	235, 1457,
	236, 1457,
	237, 1457,
	238, 1457,
	239, 1457,
	240, 1457,
	241, 1457,
	243, 1457,
	244, 1457,
	245, 1457,
	246, 1457,
	247, 1457,
	248, 1457,
	249, 1457,
	250, 1457,
	251, 1457,
	252, 1457,
	253, 1457,
	254, 1457,
	255, 1457,
	257, 1457,
	258, 1457,
	259, 1457,
	260, 1457,
	261, 1457,
	262, 1457,
	263, 1457,
	264, 1457,
	265, 1457,
	266, 1457,
	267, 1457,
	269, 1457,
	270, 1457,
	271, 1457,
	272, 1457,
	273, 1457,
	275, 1457,
	276, 1457,
	277, 1457,
	278, 1457,
	279, 1457,
	280, 1457,
	281, 1457,
	282, 1457,
	283, 1457,
	285, 1457,
	286, 1457,
	287, 1457,
	288, 1457,
	289, 1457,
	290, 1457,
	291, 1457,
	292, 1457,
	293, 1457,
	294, 1457,
	296, 1457,
	298, 1457,
	299, 1457,
	300, 1457,
	301, 1457,
	302, 1457,
	303, 1457,
	304, 1457,
	306, 1457,
	307, 1457,
	308, 1457,
	311, 1457,
	312, 1457,
	313, 1457,
	314, 1457,
	316, 1457,
	317, 1457,
	318, 1457,
	319, 1457,
	322, 1457,
	323, 1457,
	324, 1457,
	325, 1457,
	327, 1457,
	329, 1457,
	330, 1457,
	331, 1457,
	332, 1457,
	333, 1457,
	334, 1457,
	337, 1457,
	342, 1457,
	343, 1457,
	344, 1457,
	345, 1457,
	346, 1457,
	347, 1457,
	348, 1457,
	350, 1457,
	351, 1457,
	352, 1457,
	353, 1457,
	354, 1457,
	355, 1457,
	356, 1457,
	357, 1457,
	359, 1457,
	360, 1457,
	361, 1457,
	362, 1457,
	363, 1457,
	364, 1457,
	365, 1457,
	366, 1457,
	367, 1457,
	369, 1457,
	372, 1457,
	373, 1457,
	376, 1457,
	377, 1457,
	-2, 0,
	-1, 943,
	132, 1361,
	309, 1361,
	352, 1361,
	373, 1361,
	-2, 0,
	-1, 960,
	132, 1383,
	309, 1383,
	352, 1383,
	373, 1383,
	-2, 0,
	-1, 961,
	169, 603,
	234, 603,
	238, 603,
	-2, 315,
	-1, 1026,
	117, 699,
	184, 699,
	209, 699,
	-2, 661,
	-1, 1105,
	107, 665,
	117, 665,
	165, 665,
	184, 665,
	209, 665,
	215, 665,
	320, 665,
	-2, 1006,
	-1, 1115,
	371, 1207,
	-2, 1195,
	-1, 1133,
	372, 1119,
	-2, 0,
	-1, 1159,
	169, 603,
	234, 603,
	238, 603,
	-2, 598,
	-1, 1187,
	372, 1119,
	-2, 0,
	-1, 1191,
	107, 665,
	117, 665,
	165, 665,
	184, 665,
	209, 665,
	215, 665,
	320, 665,
	-2, 761,
	-1, 1332,
	169, 603,
	234, 603,
	238, 603,
	-2, 317,
	-1, 1430,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 912,
	-1, 1431,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 913,
	-1, 1432,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 914,
	-1, 1433,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 915,
	-1, 1434,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 916,
	-1, 1435,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 917,
	-1, 1436,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 918,
	-1, 1437,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 919,
	-1, 1446,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 928,
	-1, 1447,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 929,
	-1, 1448,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 930,
	-1, 1451,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 935,
	-1, 1457,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 937,
	-1, 1459,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 941,
	-1, 1460,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 942,
	-1, 1461,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 943,
	-1, 1462,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 944,
	-1, 1531,
	132, 1130,
	371, 1230,
	-2, 1223,
	-1, 1532,
	132, 1131,
	-2, 1400,
	-1, 1533,
	132, 1132,
	-2, 1307,
	-1, 1534,
	132, 1133,
	-2, 1270,
	-1, 1535,
	132, 1134,
	-2, 1287,
	-1, 1536,
	132, 1135,
	-2, 1306,
	-1, 1537,
	132, 1136,
	-2, 1358,
	-1, 1616,
	1, 762,
	74, 762,
	107, 762,
	117, 762,
	133, 762,
	137, 762,
	139, 762,
	156, 762,
	165, 762,
	172, 762,
	181, 762,
	184, 762,
	196, 762,
	209, 762,
	211, 762,
	215, 762,
	256, 762,
	258, 762,
	320, 762,
	328, 762,
	339, 762,
	340, 762,
	349, 762,
	370, 762,
	372, 762,
	374, 762,
	375, 762,
	376, 762,
	-2, 761,
	-1, 1761,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 936,
	-1, 1762,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 938,
	-1, 1767,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 939,
	-1, 1785,
	220, 1090,
	-2, 1092,
	-1, 1960,
	225, 688,
	-2, 535,
	-1, 2016,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 940,
	-1, 2021,
	168, 0,
	-2, 956,
	-1, 2030,
	220, 1091,
	-2, 1093,
	-1, 2072,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 983,
	-1, 2073,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 984,
	-1, 2074,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 985,
	-1, 2078,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 989,
	-1, 2079,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 990,
	-1, 2080,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 991,
	-1, 2213,
	168, 0,
	-2, 957,
	-1, 2216,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 960,
	-1, 2217,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 962,
	-1, 2337,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 961,
	-1, 2338,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 963,
	-1, 2345,
	168, 0,
	-2, 992,
	-1, 2421,
	168, 0,
	-2, 993,
	-1, 2498,
	36, 0,
	149, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 1403,
}

const sqlPrivate = 57344

const sqlLast = 42858

var sqlAct = [...]int{

	638, 2497, 2543, 2472, 2508, 2168, 2506, 1998, 2507, 2371,
	2049, 1691, 2426, 1683, 2318, 1231, 2496, 2270, 67, 769,
	1326, 2284, 2179, 1274, 2134, 597, 1755, 2201, 742, 636,
	1239, 2203, 1327, 614, 1611, 881, 1964, 872, 2135, 2351,
	1666, 181, 1189, 1972, 1901, 181, 1661, 1185, 2250, 181,
	1966, 1680, 1880, 2195, 1234, 1692, 1194, 1233, 181, 1629,
	1665, 1612, 1888, 181, 181, 445, 1168, 181, 1620, 1850,
	181, 1655, 1409, 2105, 1404, 1796, 635, 1511, 181, 1851,
	589, 121, 1111, 1751, 461, 25, 964, 1357, 1227, 1275,
	1029, 1739, 1486, 515, 1199, 1197, 1487, 1169, 608, 1474,
	1353, 1662, 1495, 1471, 748, 442, 581, 963, 1143, 1560,
	1663, 916, 1147, 883, 628, 1505, 913, 906, 1685, 927,
	1669, 1598, 751, 1585, 730, 1176, 1100, 495, 607, 1527,
	122, 1030, 1252, 512, 181, 181, 123, 172, 1028, 121,
	630, 1356, 181, 586, 1159, 473, 177, 1246, 508, 903,
	728, 1158, 1034, 2285, 536, 2119, 1784, 1684, 2120, 1254,
	1254, 1254, 2539, 2521, 585, 585, 1222, 2283, 181, 181,
	181, 181, 771, 1186, 2518, 2517, 181, 181, 1706, 1706,
	2514, 2494, 2493, 2467, 1222, 1722, 1722, 1715, 2462, 2458,
	2014, 2450, 2332, 1222, 1981, 2283, 2423, 1982, 745, 580,
	1715, 487, 2401, 2398, 2396, 2382, 2283, 1222, 2283, 1222,
	1656, 1821, 1822, 2381, 595, 2359, 2356, 2283, 2339, 1222,
	1222, 1587, 1715, 121, 2306, 39, 2304, 25, 1706, 2282,
	1706, 2263, 1656, 2283, 2215, 1222, 40, 2108, 1715, 1706,
	1045, 1046, 1218, 1075, 1076, 1077, 1085, 1086, 1087, 43,
	2194, 2189, 578, 2115, 1660, 1660, 1078, 2116, 577, 1722,
	2468, 2025, 1788, 1048, 1836, 1706, 1089, 1992, 1789, 1722,
	1952, 1953, 756, 760, 1222, 467, 2332, 1877, 860, 1868,
	590, 1222, 766, 1869, 1866, 732, 1865, 1047, 1706, 139,
	1706, 1864, 1726, 1067, 1714, 1706, 1706, 1705, 1715, 1659,
	1064, 1706, 1592, 1660, 56, 1267, 1591, 2108, 734, 1268,
	735, 57, 1586, 127, 58, 2009, 1618, 2085, 141, 2027,
	1222, 1953, 1754, 1737, 1508, 1706, 1795, 1335, 1827, 1163,
	1490, 858, 945, 142, 2286, 942, 941, 940, 939, 938,
	937, 936, 935, 934, 933, 932, 931, 60, 1070, 1071,
	1072, 1073, 930, 736, 140, 1354, 588, 1053, 733, 139,
	576, 575, 133, 574, 573, 1255, 1255, 1255, 572, 134,
	568, 567, 566, 534, 533, 532, 1509, 531, 530, 1082,
	1090, 529, 528, 527, 526, 525, 524, 523, 141, 522,
	1837, 521, 124, 520, 519, 1045, 1046, 39, 1088, 518,
	503, 502, 501, 500, 499, 433, 432, 431, 40, 430,
	181, 886, 181, 1080, 181, 429, 407, 181, 1048, 1068,
	400, 43, 399, 181, 140, 1510, 1507, 165, 61, 164,
	163, 162, 161, 160, 159, 1688, 181, 181, 181, 181,
	181, 1981, 1047, 878, 1079, 886, 158, 467, 157, 156,
	155, 154, 153, 152, 125, 63, 151, 64, 150, 149,
	148, 147, 124, 586, 1838, 1586, 146, 145, 144, 181,
	139, 143, 864, 1190, 1741, 1896, 56, 468, 1074, 1360,
	97, 1524, 181, 57, 1522, 127, 58, 1260, 1253, 1388,
	976, 1520, 2513, 1069, 2495, 2482, 1518, 1041, 181, 141,
	2477, 1512, 2418, 876, 2399, 889, 2325, 2249, 181, 1083,
	2245, 2241, 1053, 2240, 2233, 2232, 2231, 2227, 2226, 60,
	2225, 2224, 2218, 2200, 2099, 2094, 2093, 905, 2092, 909,
	909, 2035, 1951, 1908, 1904, 140, 1873, 1870, 1858, 886,
	1955, 920, 1849, 133, 1820, 1817, 1816, 1814, 1801, 1800,
	134, 1785, 1616, 1041, 910, 1482, 1821, 1822, 928, 871,
	1832, 1830, 1831, 1823, 1824, 1825, 1826, 1828, 1829, 743,
	181, 979, 1040, 124, 1068, 946, 1271, 1081, 1238, 1506,
	1059, 1060, 1066, 1065, 1061, 1062, 1063, 1084, 1119, 1058,
	1056, 1057, 1049, 1050, 1051, 1052, 1054, 1055, 869, 2051,
	61, 1183, 1188, 2485, 974, 1720, 2242, 2453, 2447, 1187,
	139, 1112, 39, 1103, 2446, 1821, 1822, 39, 2437, 2435,
	2413, 2412, 139, 40, 2411, 2368, 125, 63, 40, 64,
	2347, 586, 2333, 2312, 2303, 2289, 43, 2238, 2177, 141,
	2174, 43, 139, 2173, 2171, 2143, 1375, 2142, 1069, 468,
	864, 141, 97, 1026, 961, 2123, 958, 2111, 2020, 1996,
	1941, 1935, 467, 1921, 1920, 1483, 2324, 467, 1906, 1876,
	1848, 141, 1810, 1827, 1025, 140, 1809, 1806, 1781, 1776,
	1476, 1821, 1822, 133, 1027, 1148, 1151, 140, 1603, 1572,
	134, 56, 977, 1516, 1230, 133, 56, 744, 57, 1166,
	127, 58, 134, 57, 1155, 127, 58, 140, 1045, 1046,
	1355, 1750, 1141, 1687, 1140, 133, 1139, 1138, 1137, 1749,
	578, 1136, 134, 1135, 1134, 124, 577, 1133, 181, 1132,
	181, 1048, 1827, 1131, 60, 1130, 1037, 1038, 1129, 60,
	1128, 1127, 1126, 1125, 1124, 124, 1042, 1049, 1050, 1051,
	1052, 1054, 1055, 181, 181, 1047, 1188, 1123, 1921, 1345,
	1344, 1067, 1354, 1351, 1167, 1116, 1045, 1046, 1104, 1103,
	1174, 586, 957, 949, 924, 2429, 2331, 1115, 2220, 2199,
	2118, 2114, 1145, 1146, 1787, 1604, 1045, 1046, 1266, 1048,
	1149, 1045, 1046, 1717, 1837, 1112, 1994, 1101, 1827, 1967,
	1152, 1821, 1822, 2335, 2334, 1172, 2328, 973, 2121, 1048,
	1983, 1656, 1190, 1047, 1048, 61, 1070, 1071, 1072, 1073,
	61, 1153, 1944, 1938, 1999, 1053, 1154, 1934, 121, 1023,
	1725, 1508, 1207, 1047, 1872, 1157, 1871, 870, 1047, 1760,
	1894, 125, 63, 1580, 64, 970, 125, 63, 1348, 64,
	1121, 1523, 1235, 1184, 1521, 1162, 1341, 139, 886, 181,
	1837, 1519, 139, 2352, 468, 771, 1517, 97, 1838, 468,
	1160, 181, 97, 1724, 1272, 1192, 1684, 2052, 1496, 1144,
	1164, 1017, 1977, 1509, 1223, 2130, 141, 1068, 2480, 1792,
	1220, 141, 181, 1200, 1710, 1201, 410, 2536, 181, 2457,
	181, 2393, 181, 1053, 2297, 1237, 181, 1727, 1053, 1229,
	1825, 1826, 1828, 1829, 1630, 599, 1009, 2537, 2392, 434,
	1018, 1320, 140, 2006, 2390, 723, 1200, 140, 1201, 2389,
	133, 2162, 1510, 1507, 1838, 133, 721, 134, 744, 2159,
	1349, 2127, 134, 1622, 181, 181, 1074, 1243, 1200, 1622,
	1201, 886, 2154, 181, 1118, 419, 181, 719, 1621, 182,
	124, 1069, 2126, 1805, 716, 124, 1831, 1823, 1824, 1825,
	1826, 1828, 1829, 725, 1202, 1804, 1803, 771, 631, 1802,
	1681, 1763, 181, 1709, 971, 1651, 1208, 181, 1342, 1821,
	1822, 1633, 181, 181, 584, 181, 1361, 181, 408, 181,
	1647, 181, 905, 1644, 438, 1221, 1205, 1202, 1512, 1458,
	1161, 857, 181, 2309, 1576, 1575, 420, 1419, 181, 181,
	2456, 696, 1995, 1386, 1206, 570, 695, 972, 1385, 1202,
	1832, 1830, 1831, 1823, 1824, 1825, 1826, 1828, 1829, 482,
	2166, 2167, 2373, 1257, 181, 1473, 1259, 1245, 771, 1248,
	1262, 1473, 583, 714, 1948, 1225, 428, 1058, 1056, 1057,
	1049, 1050, 1051, 1052, 1054, 1055, 1044, 1418, 2491, 1249,
	437, 2102, 1821, 1822, 1488, 1362, 423, 1512, 2528, 2546,
	1752, 1753, 1269, 413, 956, 1188, 1506, 121, 1974, 1329,
	1328, 1270, 958, 1632, 2045, 2551, 1821, 1822, 1943, 1839,
	1840, 1841, 585, 1480, 1254, 1332, 1827, 1937, 1478, 2440,
	1211, 1346, 1376, 601, 1358, 1821, 1822, 1355, 1352, 2145,
	1366, 1391, 586, 1055, 1496, 166, 1370, 586, 1371, 1369,
	1372, 772, 1373, 1718, 1374, 1410, 1417, 561, 1049, 1050,
	1051, 1052, 1054, 1055, 2536, 1051, 1052, 1054, 1055, 1836,
	1209, 1380, 1382, 1229, 1932, 594, 474, 1387, 1829, 1156,
	1003, 1390, 181, 1975, 181, 578, 1389, 181, 578, 578,
	1512, 1400, 1384, 1022, 1401, 1402, 1198, 1408, 181, 479,
	2005, 1631, 422, 421, 2007, 475, 982, 771, 1365, 1827,
	181, 865, 867, 2152, 181, 1493, 2527, 181, 1004, 1619,
	1142, 181, 1675, 1203, 2343, 181, 1606, 582, 1974, 1491,
	169, 181, 586, 1827, 436, 2395, 1808, 476, 181, 771,
	562, 2101, 2464, 181, 492, 1008, 1484, 1481, 1605, 2544,
	1555, 181, 1827, 1599, 1595, 717, 1203, 2042, 1653, 181,
	478, 1623, 1016, 439, 471, 413, 717, 2465, 1212, 643,
	181, 1837, 181, 435, 181, 1098, 1615, 181, 1203, 181,
	1538, 181, 181, 2374, 181, 181, 585, 718, 1584, 886,
	1634, 1636, 947, 181, 717, 1837, 170, 1175, 951, 2207,
	727, 2103, 424, 726, 1609, 2545, 2043, 2510, 1582, 1581,
	990, 1641, 2146, 409, 1837, 474, 1590, 1033, 2526, 1649,
	2509, 2552, 1600, 1601, 1596, 599, 2547, 2535, 1765, 1639,
	1255, 2533, 2317, 1678, 1472, 1645, 1192, 414, 479, 952,
	571, 1626, 410, 425, 475, 1838, 944, 1947, 563, 1652,
	1455, 1686, 411, 1686, 481, 2384, 1179, 2383, 1032, 1712,
	1043, 1823, 1824, 1825, 1826, 1828, 1829, 1698, 121, 1838,
	909, 477, 909, 426, 121, 427, 476, 401, 955, 1182,
	171, 771, 1512, 2557, 2278, 1479, 1704, 1690, 1838, 181,
	887, 2366, 1701, 1707, 1699, 1177, 1700, 2511, 1702, 478,
	1738, 2236, 928, 1711, 1180, 181, 181, 181, 1708, 181,
	2432, 1093, 1094, 1095, 1096, 1097, 2129, 1719, 1721, 1178,
	1917, 1106, 2081, 2279, 887, 1031, 480, 564, 181, 1013,
	1333, 1114, 1913, 1679, 1890, 470, 967, 1244, 1236, 983,
	167, 1149, 2041, 1152, 1823, 1824, 1825, 1826, 1828, 1829,
	1033, 1146, 1145, 2293, 2512, 471, 1833, 1834, 1835, 565,
	1469, 2473, 1728, 1453, 1456, 1832, 1830, 1831, 1823, 1824,
	1825, 1826, 1828, 1829, 1232, 409, 1467, 984, 121, 168,
	981, 1181, 1396, 1364, 1216, 1830, 1831, 1823, 1824, 1825,
	1826, 1828, 1829, 2556, 1014, 1730, 874, 1452, 1379, 414,
	1215, 968, 1179, 1742, 410, 969, 474, 1732, 1902, 2237,
	477, 1340, 2180, 1746, 411, 586, 1748, 1744, 887, 991,
	1213, 1336, 1175, 873, 2082, 1182, 2319, 1032, 1733, 479,
	2083, 2274, 2296, 2275, 1891, 475, 2367, 1923, 1214, 2295,
	1731, 1597, 174, 623, 1773, 402, 1170, 1170, 1015, 1922,
	1180, 1889, 1758, 599, 1463, 962, 1397, 1594, 1338, 1593,
	1771, 2292, 1464, 2277, 1465, 480, 490, 476, 1470, 967,
	1339, 484, 2280, 902, 583, 900, 1766, 1903, 891, 1764,
	1946, 1179, 2169, 2251, 178, 2310, 2106, 1515, 405, 586,
	478, 2364, 415, 1454, 1031, 1012, 1780, 967, 466, 33,
	2346, 440, 1001, 3, 1182, 999, 485, 178, 181, 771,
	493, 403, 997, 498, 181, 181, 2235, 1791, 181, 1878,
	1177, 517, 2365, 181, 1884, 1794, 181, 1181, 1883, 1180,
	465, 32, 2165, 1852, 181, 2019, 995, 1885, 1768, 1949,
	181, 181, 181, 1815, 1178, 1775, 181, 2294, 1769, 181,
	1723, 2276, 1774, 993, 987, 181, 181, 181, 181, 181,
	1898, 1658, 968, 1650, 1882, 181, 969, 1897, 181, 898,
	1886, 1887, 181, 1643, 1892, 862, 1466, 731, 731, 1907,
	1021, 181, 715, 1468, 1893, 405, 1914, 1855, 1856, 1857,
	1020, 181, 950, 181, 1853, 181, 886, 886, 2505, 181,
	1007, 477, 863, 181, 1879, 1874, 1181, 1107, 181, 1377,
	181, 405, 405, 764, 405, 1368, 1122, 181, 859, 178,
	861, 1954, 967, 1956, 1514, 1011, 586, 1219, 1959, 1960,
	181, 886, 1000, 1909, 489, 998, 2470, 1918, 901, 483,
	899, 33, 996, 886, 181, 1933, 754, 464, 29, 2267,
	2150, 2148, 2128, 1940, 1979, 1931, 480, 463, 73, 2032,
	1770, 462, 72, 1991, 459, 21, 994, 1772, 460, 22,
	458, 27, 1545, 32, 1918, 2000, 457, 19, 1957, 181,
	599, 599, 1961, 992, 986, 1963, 1682, 968, 1958, 1676,
	1674, 969, 455, 18, 1970, 1264, 1976, 1263, 1261, 897,
	1258, 1256, 1217, 1210, 1204, 1984, 456, 17, 449, 14,
	1965, 450, 15, 720, 722, 448, 13, 2406, 454, 11,
	2022, 1990, 1035, 2537, 2330, 1993, 2329, 1006, 1359, 181,
	2196, 2408, 2002, 2003, 2004, 2001, 694, 887, 1622, 1638,
	1393, 1622, 1398, 1756, 772, 2008, 1654, 1637, 1405, 2012,
	1635, 2010, 1985, 1986, 2188, 1987, 1988, 1646, 1420, 1421,
	1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431,
	1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441,
	1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451,
	29, 1457, 2031, 1459, 1460, 1461, 1462, 2028, 2026, 1036,
	73, 2044, 2046, 2047, 72, 2055, 2053, 21, 2058, 1757,
	1485, 22, 181, 27, 2060, 453, 45, 1106, 181, 19,
	447, 46, 1410, 2056, 2037, 2038, 2039, 181, 181, 1642,
	887, 1410, 2061, 452, 7, 18, 1525, 1526, 1578, 1579,
	1542, 2088, 1554, 1556, 1561, 1564, 1565, 1566, 1281, 17,
	2087, 14, 2117, 517, 15, 517, 772, 892, 13, 1875,
	895, 11, 2104, 2442, 2091, 2086, 405, 2122, 2113, 1350,
	2110, 2140, 2107, 2164, 181, 2286, 181, 121, 2109, 517,
	517, 405, 917, 861, 181, 451, 6, 886, 2155, 2125,
	985, 1314, 2160, 739, 2175, 2420, 1313, 2252, 2163, 2132,
	1039, 469, 181, 181, 1648, 1640, 2172, 2469, 773, 446,
	5, 2315, 517, 740, 2190, 1045, 1046, 1689, 2139, 1265,
	181, 2153, 2182, 1045, 1046, 517, 1677, 772, 2124, 2193,
	181, 1673, 1583, 2184, 2170, 771, 2181, 2185, 2176, 1331,
	1273, 953, 2542, 2183, 1281, 1281, 1048, 2555, 2358, 698,
	2257, 517, 1330, 2198, 2210, 2192, 2141, 2191, 45, 1882,
	2209, 2186, 1047, 46, 2214, 697, 2197, 491, 2100, 2156,
	1047, 2222, 181, 2156, 1821, 1822, 7, 1045, 1046, 2156,
	2149, 613, 2151, 1735, 1734, 2048, 1735, 1314, 1314, 1997,
	741, 2278, 1313, 1313, 2271, 1899, 1867, 1736, 1577, 1574,
	1573, 1504, 1109, 2040, 1119, 2269, 1117, 1019, 1010, 640,
	2273, 1005, 1002, 405, 988, 954, 1334, 569, 2372, 472,
	1367, 989, 771, 181, 181, 1895, 404, 1602, 6, 181,
	2279, 2463, 181, 2228, 1807, 2425, 2342, 1513, 1120, 49,
	2137, 2246, 771, 181, 181, 617, 2268, 181, 181, 181,
	2131, 1668, 5, 2272, 1667, 774, 1343, 639, 2234, 1529,
	1411, 2259, 713, 641, 181, 1278, 772, 1399, 978, 181,
	561, 181, 642, 181, 181, 181, 1279, 2261, 2254, 2287,
	181, 1150, 2256, 181, 2258, 2253, 886, 2290, 594, 2266,
	629, 1276, 2140, 925, 181, 181, 1693, 1347, 772, 1477,
	1494, 1790, 886, 1107, 1113, 609, 2308, 621, 620, 1492,
	948, 1498, 1900, 1973, 2323, 1395, 2311, 1747, 1392, 1280,
	1969, 2140, 2316, 749, 1530, 1530, 1543, 2140, 2147, 412,
	1563, 1818, 923, 2255, 1567, 1568, 1570, 2321, 2274, 2139,
	2275, 2314, 1552, 1544, 1540, 2262, 1024, 888, 887, 758,
	762, 2320, 768, 562, 2327, 2322, 1173, 2336, 1099, 1694,
	975, 1761, 1762, 1980, 1716, 2291, 1546, 1767, 2139, 1165,
	2277, 498, 1403, 731, 2139, 738, 737, 2141, 1337, 2280,
	1729, 888, 2348, 1092, 1091, 724, 2434, 966, 181, 965,
	181, 1916, 771, 181, 2326, 2313, 405, 405, 2550, 1786,
	2441, 181, 2144, 2479, 138, 1793, 2141, 771, 1797, 135,
	137, 2362, 2141, 136, 2355, 1280, 1280, 1945, 76, 2357,
	31, 30, 96, 95, 94, 1811, 2377, 93, 2360, 92,
	91, 2376, 90, 2140, 2378, 89, 88, 87, 181, 86,
	772, 886, 2375, 1229, 85, 181, 84, 83, 82, 81,
	2341, 80, 79, 181, 181, 886, 886, 2397, 2276, 1106,
	78, 563, 2140, 2394, 513, 510, 1561, 1561, 1561, 75,
	74, 28, 24, 181, 100, 888, 2404, 2409, 181, 2405,
	2139, 2415, 23, 71, 2414, 181, 70, 2416, 2417, 26,
	2403, 2422, 16, 10, 20, 1170, 54, 2436, 55, 2430,
	599, 53, 178, 52, 51, 12, 120, 2386, 119, 2139,
	181, 181, 2428, 118, 405, 2431, 181, 117, 2141, 116,
	2400, 2438, 9, 8, 886, 2451, 2449, 99, 42, 181,
	41, 2452, 98, 886, 886, 1242, 112, 109, 111, 108,
	564, 405, 110, 405, 2156, 405, 2407, 2141, 2455, 1250,
	586, 2387, 2388, 2460, 2461, 114, 181, 1174, 181, 2454,
	113, 181, 106, 771, 104, 105, 107, 103, 102, 2419,
	115, 38, 565, 37, 36, 2486, 35, 34, 2488, 2,
	2487, 1, 2481, 0, 0, 2476, 0, 517, 178, 181,
	2490, 0, 2492, 1971, 0, 0, 178, 0, 2489, 517,
	2504, 2503, 2502, 2140, 762, 0, 181, 2439, 0, 0,
	0, 0, 181, 2520, 2515, 1989, 0, 0, 2445, 768,
	2525, 2523, 2524, 2522, 0, 517, 181, 0, 0, 0,
	517, 0, 2532, 599, 599, 178, 517, 2534, 517, 2538,
	517, 0, 517, 0, 517, 0, 599, 0, 0, 0,
	2139, 2540, 0, 0, 0, 1378, 2541, 0, 2011, 2475,
	2548, 517, 517, 1405, 2554, 2549, 2553, 0, 772, 2015,
	0, 1779, 2016, 0, 592, 0, 561, 0, 1782, 0,
	0, 0, 0, 0, 2021, 0, 0, 517, 2141, 0,
	0, 0, 0, 2029, 594, 1798, 1799, 0, 0, 0,
	0, 2033, 0, 0, 1989, 1546, 1546, 2519, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2057, 0, 1281, 593, 2059, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1847, 0, 0, 0, 0,
	0, 762, 1563, 1563, 1563, 887, 887, 1860, 0, 562,
	0, 2089, 2090, 1281, 0, 0, 0, 0, 0, 1314,
	2096, 2097, 2098, 0, 1313, 0, 0, 0, 0, 0,
	0, 1546, 1546, 1546, 0, 0, 0, 0, 0, 0,
	887, 0, 0, 0, 888, 0, 0, 0, 0, 2112,
	0, 773, 887, 0, 0, 498, 1314, 731, 0, 0,
	861, 1313, 0, 0, 1281, 0, 0, 0, 0, 0,
	0, 405, 0, 1821, 1822, 0, 1839, 1840, 1841, 2133,
	0, 0, 0, 1614, 0, 0, 0, 405, 0, 2212,
	405, 0, 0, 0, 1627, 0, 0, 0, 405, 0,
	0, 0, 0, 0, 405, 0, 0, 1314, 0, 0,
	0, 405, 1313, 1045, 1046, 0, 1657, 563, 0, 0,
	0, 0, 0, 0, 1664, 1281, 1836, 0, 0, 0,
	0, 0, 861, 1170, 0, 0, 1048, 888, 0, 0,
	0, 0, 599, 405, 0, 1697, 0, 517, 618, 68,
	517, 0, 517, 0, 405, 405, 0, 1703, 861, 0,
	1047, 1281, 1281, 773, 0, 0, 1627, 0, 1314, 0,
	1281, 1281, 0, 1313, 0, 0, 0, 0, 2213, 0,
	0, 0, 2216, 2217, 749, 1195, 2219, 0, 0, 0,
	1827, 0, 0, 2221, 591, 2223, 564, 0, 0, 0,
	0, 0, 0, 1281, 1314, 1314, 0, 68, 0, 1313,
	1313, 2230, 0, 1314, 1314, 0, 0, 0, 1313, 1313,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 0,
	1053, 1842, 0, 0, 773, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2239, 0, 1314, 1280, 1546, 1546,
	0, 1313, 1837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1740, 0, 0, 0, 0, 0, 0, 0,
	579, 0, 0, 587, 0, 0, 0, 0, 405, 405,
	405, 0, 405, 0, 1280, 0, 0, 0, 0, 0,
	750, 68, 1068, 0, 0, 0, 887, 2288, 0, 0,
	0, 405, 1228, 0, 2095, 0, 0, 1546, 1546, 1546,
	1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
	1546, 1546, 1546, 1546, 1546, 1546, 1838, 1546, 0, 762,
	0, 1247, 0, 1247, 0, 1280, 0, 0, 0, 0,
	0, 0, 0, 0, 772, 0, 0, 0, 0, 1316,
	0, 0, 0, 0, 0, 1045, 1046, 0, 0, 0,
	0, 0, 0, 0, 0, 1315, 1069, 0, 0, 1281,
	2337, 2338, 0, 773, 0, 0, 0, 0, 1048, 0,
	2158, 0, 0, 0, 0, 0, 2161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1280, 0, 0, 0,
	0, 2350, 1047, 0, 0, 773, 0, 0, 0, 1277,
	2353, 0, 1314, 1833, 1834, 1835, 0, 1313, 0, 0,
	0, 0, 1832, 1830, 1831, 1823, 1824, 1825, 1826, 1828,
	1829, 772, 1280, 1280, 0, 0, 0, 0, 0, 0,
	0, 1280, 1280, 0, 0, 1316, 1316, 0, 0, 0,
	0, 772, 0, 0, 2385, 888, 0, 0, 0, 0,
	0, 1315, 1315, 1056, 1057, 1049, 1050, 1051, 1052, 1054,
	1055, 0, 1053, 0, 1280, 0, 0, 0, 0, 0,
	0, 405, 0, 0, 0, 0, 0, 405, 405, 0,
	0, 405, 0, 0, 0, 887, 1614, 0, 0, 1614,
	0, 0, 0, 0, 443, 1277, 1277, 1905, 0, 0,
	0, 887, 0, 405, 1911, 1912, 0, 0, 0, 1627,
	0, 0, 1919, 0, 0, 39, 0, 2433, 1924, 1925,
	1927, 1929, 1930, 0, 1068, 0, 40, 0, 405, 0,
	0, 1939, 0, 0, 0, 1942, 0, 773, 0, 43,
	0, 0, 0, 0, 405, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1242, 0, 1242, 0, 517, 0,
	599, 0, 405, 1045, 1046, 467, 1968, 0, 0, 0,
	0, 405, 0, 1978, 0, 0, 0, 1281, 0, 0,
	405, 0, 0, 587, 1777, 1778, 1048, 0, 0, 0,
	0, 772, 0, 1740, 56, 0, 0, 0, 1069, 749,
	0, 57, 0, 127, 58, 0, 772, 1740, 0, 0,
	1047, 0, 0, 2501, 2501, 749, 0, 0, 1617, 0,
	1314, 0, 0, 0, 0, 1313, 762, 0, 0, 2516,
	1280, 0, 762, 0, 0, 0, 1281, 60, 0, 768,
	887, 0, 405, 0, 0, 0, 0, 2501, 0, 0,
	0, 0, 0, 0, 887, 887, 0, 0, 0, 0,
	1844, 1845, 1846, 0, 0, 0, 0, 0, 0, 0,
	0, 1695, 0, 0, 0, 0, 0, 0, 0, 1314,
	1053, 0, 768, 768, 1313, 0, 1281, 2354, 0, 0,
	0, 2501, 2050, 0, 1058, 1056, 1057, 1049, 1050, 1051,
	1052, 1054, 1055, 0, 0, 0, 0, 0, 0, 1546,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 0, 0, 887, 2380, 0, 0, 0, 579, 1314,
	0, 0, 887, 887, 1313, 0, 0, 0, 2391, 0,
	0, 0, 1068, 0, 125, 63, 0, 64, 0, 1102,
	0, 1105, 0, 1546, 0, 0, 0, 0, 1110, 0,
	139, 0, 772, 0, 0, 773, 0, 468, 0, 0,
	97, 0, 0, 0, 0, 405, 0, 0, 0, 0,
	0, 1614, 0, 0, 0, 0, 0, 0, 0, 141,
	861, 1614, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2136, 1743, 768, 1745, 0,
	762, 0, 0, 0, 0, 0, 1069, 0, 2157, 0,
	1546, 0, 2157, 0, 0, 140, 0, 0, 2157, 1759,
	0, 0, 0, 133, 0, 0, 0, 1627, 0, 1242,
	134, 0, 0, 0, 0, 0, 0, 2178, 1280, 0,
	0, 0, 888, 888, 0, 2466, 0, 0, 0, 0,
	0, 0, 0, 444, 0, 405, 405, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2017, 2018, 0,
	0, 2483, 2484, 2204, 0, 0, 68, 888, 0, 0,
	0, 1191, 0, 2206, 0, 0, 0, 0, 0, 888,
	0, 0, 0, 0, 0, 0, 0, 1280, 0, 0,
	0, 0, 0, 0, 1057, 1049, 1050, 1051, 1052, 1054,
	1055, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2229, 2062, 2063, 2064, 2065,
	2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075,
	2076, 2077, 2078, 2079, 2080, 0, 2084, 1280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2247, 405, 0, 0,
	0, 0, 405, 0, 0, 861, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1614, 861, 0, 749,
	2264, 2265, 1627, 0, 0, 749, 749, 1316, 0, 749,
	0, 0, 0, 0, 0, 0, 2136, 861, 0, 0,
	0, 0, 2298, 1315, 2299, 0, 405, 2301, 2302, 0,
	0, 1910, 0, 405, 0, 0, 2307, 40, 0, 0,
	0, 0, 0, 0, 1316, 2136, 0, 861, 1664, 0,
	43, 2136, 0, 0, 0, 0, 1936, 0, 0, 0,
	1315, 0, 0, 0, 0, 0, 0, 1277, 0, 0,
	1821, 1822, 1950, 1839, 1840, 1841, 1713, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2211, 0, 0, 0,
	1962, 0, 0, 0, 0, 1316, 0, 0, 0, 1228,
	0, 0, 0, 0, 1277, 0, 0, 0, 1228, 0,
	0, 1315, 0, 0, 127, 0, 1821, 1822, 0, 1839,
	1840, 1841, 0, 1836, 0, 0, 0, 0, 0, 0,
	0, 0, 2024, 888, 0, 68, 0, 0, 0, 0,
	0, 1627, 0, 2361, 0, 0, 2363, 0, 60, 0,
	0, 0, 0, 0, 405, 1277, 1316, 2136, 0, 0,
	0, 0, 0, 579, 0, 0, 579, 579, 0, 1836,
	2013, 0, 1315, 0, 0, 0, 0, 0, 0, 0,
	0, 773, 0, 2157, 0, 0, 2136, 1827, 0, 0,
	0, 405, 1316, 1316, 0, 0, 0, 0, 861, 0,
	0, 1316, 1316, 0, 0, 0, 2204, 2204, 1315, 1315,
	0, 0, 0, 0, 0, 0, 1277, 1315, 1315, 1475,
	0, 0, 0, 0, 0, 0, 2427, 0, 1842, 61,
	0, 1614, 587, 1827, 1316, 0, 0, 1105, 1242, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1837,
	1315, 0, 1277, 1277, 0, 125, 63, 0, 64, 0,
	0, 1277, 1277, 2443, 2444, 0, 0, 0, 773, 405,
	0, 139, 0, 0, 1842, 0, 0, 0, 468, 0,
	0, 97, 2459, 0, 0, 0, 0, 0, 773, 0,
	0, 0, 0, 0, 1277, 1837, 0, 0, 0, 0,
	141, 0, 0, 749, 0, 0, 750, 0, 0, 2474,
	0, 861, 0, 0, 405, 0, 0, 0, 0, 0,
	0, 0, 1191, 1838, 0, 0, 0, 2136, 0, 0,
	0, 0, 888, 0, 0, 68, 140, 0, 2345, 0,
	0, 0, 2427, 68, 133, 0, 0, 0, 888, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 861,
	0, 0, 0, 0, 0, 405, 0, 0, 0, 1838,
	0, 0, 0, 0, 124, 68, 0, 68, 0, 2531,
	0, 0, 2369, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1695, 749, 0, 68, 0, 0, 0,
	1316, 0, 68, 0, 0, 0, 0, 0, 0, 0,
	1833, 1834, 1835, 0, 0, 0, 1315, 0, 0, 1832,
	1830, 1831, 1823, 1824, 1825, 1826, 1828, 1829, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 773, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2421,
	0, 0, 0, 773, 0, 0, 1833, 1834, 1835, 0,
	1277, 0, 0, 0, 0, 1832, 1830, 1831, 1823, 1824,
	1825, 1826, 1828, 1829, 0, 0, 0, 1821, 1822, 0,
	1839, 1840, 1841, 0, 0, 0, 0, 888, 0, 0,
	0, 0, 0, 2023, 0, 0, 0, 0, 0, 0,
	0, 888, 888, 0, 1821, 1822, 68, 1839, 1840, 1841,
	0, 0, 0, 0, 0, 2248, 0, 0, 0, 0,
	749, 0, 0, 0, 0, 0, 0, 0, 1045, 1046,
	1836, 1075, 1076, 1077, 1085, 1086, 1087, 0, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	0, 1048, 0, 0, 1089, 1821, 1822, 1836, 1839, 1840,
	1841, 0, 0, 0, 2300, 0, 0, 0, 0, 0,
	888, 2305, 0, 0, 0, 1047, 0, 0, 0, 888,
	888, 1067, 0, 0, 0, 1475, 0, 0, 1064, 0,
	0, 0, 0, 0, 1827, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1105, 0, 0, 1836, 773,
	0, 0, 0, 0, 0, 0, 0, 0, 1316, 0,
	0, 1827, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1315, 1842, 1070, 1071, 1072, 1073,
	0, 0, 0, 0, 1843, 1053, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1837, 0, 0, 0,
	0, 0, 1842, 0, 0, 0, 0, 1082, 1090, 0,
	0, 0, 1827, 0, 0, 0, 0, 1316, 1277, 1105,
	0, 0, 0, 1837, 0, 0, 1088, 0, 0, 0,
	0, 0, 2370, 1315, 0, 0, 0, 0, 0, 0,
	0, 1080, 0, 0, 0, 0, 0, 1068, 0, 0,
	0, 0, 0, 1842, 0, 0, 750, 0, 0, 0,
	0, 0, 750, 750, 0, 0, 750, 1316, 0, 2402,
	1838, 0, 1079, 0, 1837, 0, 0, 1277, 0, 0,
	0, 0, 0, 1315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1838, 0, 0,
	0, 0, 0, 0, 0, 0, 1074, 0, 0, 68,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	0, 1069, 0, 0, 0, 0, 0, 1277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 68, 0, 0, 0, 68, 2448, 1838, 0,
	0, 0, 0, 0, 0, 0, 587, 1833, 1834, 1835,
	0, 0, 0, 0, 0, 0, 1832, 1830, 1831, 1823,
	1824, 1825, 1826, 1828, 1829, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1833, 1834, 1835, 0, 0, 0,
	0, 0, 2478, 1832, 1830, 1831, 1823, 1824, 1825, 1826,
	1828, 1829, 0, 0, 0, 1081, 0, 0, 1059, 1060,
	1066, 1065, 1061, 1062, 1063, 1084, 0, 1058, 1056, 1057,
	1049, 1050, 1051, 1052, 1054, 1055, 0, 0, 0, 0,
	0, 0, 0, 0, 1863, 1833, 1834, 1835, 0, 0,
	0, 0, 0, 1695, 1832, 1830, 1831, 1823, 1824, 1825,
	1826, 1828, 1829, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1503,
	0, 637, 626, 627, 624, 625, 616, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 183, 184, 1500,
	185, 0, 0, 0, 0, 654, 619, 0, 0, 0,
	186, 187, 188, 343, 669, 345, 670, 189, 671, 672,
	0, 190, 349, 350, 191, 192, 622, 653, 673, 674,
	353, 0, 193, 665, 0, 645, 0, 194, 195, 196,
	0, 198, 199, 200, 197, 0, 201, 0, 202, 203,
	0, 699, 204, 205, 206, 68, 646, 647, 649, 0,
	648, 650, 207, 208, 406, 209, 675, 210, 676, 677,
	750, 211, 0, 212, 0, 213, 1501, 0, 668, 215,
	0, 216, 0, 0, 0, 610, 217, 219, 218, 220,
	655, 656, 633, 700, 0, 0, 0, 0, 0, 221,
	222, 678, 679, 680, 0, 223, 0, 224, 0, 0,
	701, 0, 225, 666, 0, 365, 0, 0, 226, 227,
	0, 0, 228, 229, 662, 664, 703, 0, 368, 233,
	0, 230, 0, 702, 231, 681, 232, 682, 683, 684,
	685, 686, 0, 644, 0, 704, 234, 235, 236, 705,
	237, 238, 239, 0, 241, 240, 0, 667, 706, 242,
	707, 750, 243, 0, 0, 244, 0, 245, 246, 247,
	249, 377, 248, 708, 250, 251, 253, 252, 605, 0,
	634, 663, 254, 687, 255, 256, 0, 257, 0, 0,
	258, 0, 0, 259, 380, 709, 260, 710, 657, 261,
	262, 263, 264, 265, 0, 266, 658, 267, 383, 268,
	0, 269, 270, 271, 272, 273, 688, 274, 275, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 281, 284,
	285, 286, 287, 0, 288, 711, 289, 290, 611, 291,
	0, 295, 296, 297, 298, 0, 300, 386, 299, 301,
	302, 651, 303, 292, 293, 304, 712, 305, 689, 388,
	306, 0, 313, 307, 308, 294, 309, 312, 690, 310,
	311, 659, 0, 314, 0, 315, 316, 317, 318, 319,
	320, 321, 0, 391, 691, 692, 0, 750, 322, 323,
	660, 661, 632, 324, 325, 326, 327, 0, 0, 328,
	329, 330, 331, 652, 332, 0, 396, 333, 334, 335,
	397, 693, 1499, 0, 336, 0, 0, 0, 0, 337,
	338, 339, 340, 341, 606, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 0, 0, 0, 0, 602,
	603, 1502, 0, 0, 0, 0, 0, 0, 612, 1497,
	0, 0, 0, 0, 615, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2410, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 770, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	183, 184, 776, 185, 777, 778, 779, 780, 342, 781,
	782, 783, 784, 186, 187, 188, 343, 344, 345, 346,
	189, 347, 348, 785, 190, 349, 350, 191, 192, 786,
	787, 351, 352, 353, 788, 193, 354, 789, 775, 790,
	194, 195, 196, 0, 198, 199, 200, 197, 791, 201,
	1105, 202, 203, 792, 699, 204, 205, 206, 793, 794,
	796, 795, 797, 798, 799, 207, 208, 406, 209, 355,
	210, 356, 357, 800, 211, 801, 212, 802, 213, 803,
	804, 214, 215, 805, 216, 806, 0, 807, 358, 217,
	219, 218, 220, 359, 360, 808, 700, 809, 0, 0,
	0, 0, 221, 222, 361, 362, 363, 0, 223, 810,
	224, 811, 812, 701, 813, 225, 364, 814, 365, 815,
	0, 226, 227, 0, 0, 228, 229, 366, 367, 703,
	816, 368, 233, 817, 230, 818, 702, 231, 369, 232,
	370, 371, 372, 373, 374, 819, 375, 820, 704, 234,
	235, 236, 705, 237, 238, 239, 821, 241, 240, 822,
	376, 706, 242, 707, 823, 243, 824, 825, 244, 0,
	245, 246, 247, 249, 377, 248, 708, 250, 251, 253,
	252, 826, 827, 828, 378, 254, 379, 255, 256, 829,
	257, 830, 831, 258, 832, 833, 259, 380, 709, 260,
	710, 381, 261, 262, 263, 264, 265, 834, 266, 382,
	267, 383, 268, 835, 269, 270, 271, 272, 273, 384,
	274, 275, 836, 276, 277, 278, 279, 280, 0, 282,
	283, 281, 284, 285, 286, 287, 837, 288, 711, 289,
	290, 385, 291, 0, 295, 296, 297, 298, 838, 300,
	386, 299, 301, 302, 839, 303, 292, 293, 304, 712,
	305, 387, 388, 306, 840, 313, 307, 308, 294, 309,
	312, 389, 310, 311, 390, 841, 314, 842, 315, 316,
	317, 318, 319, 320, 321, 843, 391, 392, 393, 844,
	845, 322, 323, 394, 395, 846, 324, 325, 326, 327,
	847, 848, 328, 329, 330, 331, 849, 332, 850, 396,
	333, 334, 335, 397, 398, 851, 852, 336, 853, 854,
	855, 856, 337, 338, 339, 340, 341, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 770, 0, 0, 0, 0, 0, 1607,
	0, 0, 0, 0, 0, 0, 0, 0, 1608, 183,
	184, 776, 185, 777, 778, 779, 780, 342, 781, 782,
	783, 784, 186, 187, 188, 343, 344, 345, 346, 189,
	347, 348, 785, 190, 349, 350, 191, 192, 786, 787,
	351, 352, 353, 788, 193, 354, 789, 775, 790, 194,
	195, 196, 0, 198, 199, 200, 197, 791, 201, 0,
	202, 203, 792, 699, 204, 205, 206, 793, 794, 796,
	795, 797, 798, 799, 207, 208, 406, 209, 355, 210,
	356, 357, 800, 211, 801, 212, 802, 213, 803, 804,
	214, 215, 805, 216, 806, 0, 807, 358, 217, 219,
	218, 220, 359, 360, 808, 700, 809, 0, 0, 0,
	0, 221, 222, 361, 362, 363, 0, 223, 810, 224,
	811, 812, 701, 813, 225, 364, 814, 365, 815, 0,
	226, 227, 0, 0, 228, 229, 366, 367, 703, 816,
	368, 233, 817, 230, 818, 702, 231, 369, 232, 370,
	371, 372, 373, 374, 819, 375, 820, 704, 234, 235,
	236, 705, 237, 238, 239, 821, 241, 240, 822, 376,
	706, 242, 707, 823, 243, 824, 825, 244, 0, 245,
	246, 247, 249, 377, 248, 708, 250, 251, 253, 252,
	826, 827, 828, 378, 254, 379, 255, 256, 829, 257,
	830, 831, 258, 832, 833, 259, 380, 709, 260, 710,
	381, 261, 262, 263, 264, 265, 834, 266, 382, 267,
	383, 268, 835, 269, 270, 271, 272, 273, 384, 274,
	275, 836, 276, 277, 278, 279, 280, 0, 282, 283,
	281, 284, 285, 286, 287, 837, 288, 711, 289, 290,
	385, 291, 0, 295, 296, 297, 298, 838, 300, 386,
	299, 301, 302, 839, 303, 292, 293, 304, 712, 305,
	387, 388, 306, 840, 313, 307, 308, 294, 309, 312,
	389, 310, 311, 390, 841, 314, 842, 315, 316, 317,
	318, 319, 320, 321, 843, 391, 392, 393, 844, 845,
	322, 323, 394, 395, 846, 324, 325, 326, 327, 847,
	848, 328, 329, 330, 331, 849, 332, 850, 396, 333,
	334, 335, 397, 398, 851, 852, 336, 853, 854, 855,
	856, 337, 338, 339, 340, 341, 0, 0, 0, 0,
	0, 0, 0, 770, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2260, 183,
	184, 776, 185, 777, 778, 779, 780, 342, 781, 782,
	783, 784, 186, 187, 188, 343, 344, 345, 346, 189,
	347, 348, 785, 190, 349, 350, 191, 192, 786, 787,
	351, 352, 353, 788, 193, 354, 789, 775, 790, 194,
	195, 196, 0, 198, 199, 200, 197, 791, 201, 0,
	202, 203, 792, 699, 204, 205, 206, 793, 794, 796,
	795, 797, 798, 799, 207, 208, 406, 209, 355, 210,
	356, 357, 800, 211, 801, 212, 802, 213, 803, 804,
	214, 215, 805, 216, 806, 0, 807, 358, 217, 219,
	218, 220, 359, 360, 808, 700, 809, 0, 0, 0,
	0, 221, 222, 361, 362, 363, 0, 223, 810, 224,
	811, 812, 701, 813, 225, 364, 814, 365, 815, 0,
	226, 227, 0, 0, 228, 229, 366, 367, 703, 816,
	368, 233, 817, 230, 818, 702, 231, 369, 232, 370,
	371, 372, 373, 374, 819, 375, 820, 704, 234, 235,
	236, 705, 237, 238, 239, 821, 241, 240, 822, 376,
	706, 242, 707, 823, 243, 824, 825, 244, 0, 245,
	246, 247, 249, 377, 248, 708, 250, 251, 253, 252,
	826, 827, 828, 378, 254, 379, 255, 256, 829, 257,
	830, 831, 258, 832, 833, 259, 380, 709, 260, 710,
	381, 261, 262, 263, 264, 265, 834, 266, 382, 267,
	383, 268, 835, 269, 270, 271, 272, 273, 384, 274,
	275, 836, 276, 277, 278, 279, 280, 0, 282, 283,
	281, 284, 285, 286, 287, 837, 288, 711, 289, 290,
	385, 291, 0, 295, 296, 297, 298, 838, 300, 386,
	299, 301, 302, 839, 303, 292, 293, 304, 712, 305,
	387, 388, 306, 840, 313, 307, 308, 294, 309, 312,
	389, 310, 311, 390, 841, 314, 842, 315, 316, 317,
	318, 319, 320, 321, 843, 391, 392, 393, 844, 845,
	322, 323, 394, 395, 846, 324, 325, 326, 327, 847,
	848, 328, 329, 330, 331, 849, 332, 850, 396, 333,
	334, 335, 397, 398, 851, 852, 336, 853, 854, 855,
	856, 337, 338, 339, 340, 341, 0, 0, 770, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1224, 183, 184, 776, 185, 777, 778,
	779, 780, 342, 781, 782, 783, 784, 186, 187, 188,
	343, 344, 345, 346, 189, 347, 348, 785, 190, 349,
	350, 191, 192, 786, 787, 351, 352, 353, 788, 193,
	354, 789, 775, 790, 194, 195, 196, 0, 198, 199,
	200, 197, 791, 201, 0, 202, 203, 792, 699, 204,
	205, 206, 793, 794, 796, 795, 797, 798, 799, 207,
	208, 406, 209, 355, 210, 356, 357, 800, 211, 801,
	212, 802, 213, 803, 804, 214, 215, 805, 216, 806,
	0, 807, 358, 217, 219, 218, 220, 359, 360, 808,
	700, 809, 0, 0, 0, 0, 221, 222, 361, 362,
	363, 0, 223, 810, 224, 811, 812, 701, 813, 225,
	364, 814, 365, 815, 0, 226, 227, 0, 0, 228,
	229, 366, 367, 703, 816, 368, 233, 817, 230, 818,
	702, 231, 369, 232, 370, 371, 372, 373, 374, 819,
	375, 820, 704, 234, 235, 236, 705, 237, 238, 239,
	821, 241, 240, 822, 376, 706, 242, 707, 823, 243,
	824, 825, 244, 0, 245, 246, 247, 249, 377, 248,
	708, 250, 251, 253, 252, 826, 827, 828, 378, 254,
	379, 255, 256, 829, 257, 830, 831, 258, 832, 833,
	259, 380, 709, 260, 710, 381, 261, 262, 263, 264,
	265, 834, 266, 382, 267, 383, 268, 835, 269, 270,
	271, 272, 273, 384, 274, 275, 836, 276, 277, 278,
	279, 280, 0, 282, 283, 281, 284, 285, 286, 287,
	837, 288, 711, 289, 290, 385, 291, 0, 295, 296,
	297, 298, 838, 300, 386, 299, 301, 302, 839, 303,
	292, 293, 304, 712, 305, 387, 388, 306, 840, 313,
	307, 308, 294, 309, 312, 389, 310, 311, 390, 841,
	314, 842, 315, 316, 317, 318, 319, 320, 321, 843,
	391, 392, 393, 844, 845, 322, 323, 394, 395, 846,
	324, 325, 326, 327, 847, 848, 328, 329, 330, 331,
	849, 332, 850, 396, 333, 334, 335, 397, 398, 851,
	852, 336, 853, 854, 855, 856, 337, 338, 339, 340,
	341, 637, 626, 627, 624, 625, 616, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 183, 184, 0,
	185, 0, 0, 0, 0, 654, 619, 0, 0, 0,
	186, 187, 188, 343, 669, 345, 670, 189, 671, 672,
	0, 190, 349, 350, 191, 192, 622, 653, 673, 674,
	353, 0, 193, 665, 0, 645, 0, 194, 195, 196,
	0, 198, 199, 200, 197, 0, 201, 0, 202, 203,
	0, 699, 204, 205, 206, 0, 646, 647, 649, 0,
	648, 650, 207, 208, 406, 209, 675, 210, 676, 677,
	600, 211, 0, 212, 0, 213, 0, 0, 668, 215,
	0, 216, 0, 0, 0, 610, 217, 219, 218, 220,
	655, 656, 633, 700, 0, 0, 0, 0, 0, 221,
	222, 678, 679, 680, 0, 223, 0, 224, 0, 0,
	701, 0, 225, 666, 0, 365, 0, 0, 226, 227,
	0, 0, 228, 229, 662, 664, 703, 0, 368, 233,
	0, 230, 0, 702, 231, 681, 232, 682, 683, 684,
	685, 686, 0, 644, 0, 704, 234, 235, 236, 705,
	237, 238, 239, 0, 241, 240, 0, 667, 706, 242,
	707, 0, 243, 0, 0, 244, 0, 245, 246, 247,
	249, 377, 248, 708, 250, 251, 253, 252, 605, 0,
	634, 663, 254, 687, 255, 256, 0, 257, 0, 0,
	258, 0, 0, 259, 380, 709, 260, 710, 657, 261,
	262, 263, 264, 265, 0, 266, 658, 267, 383, 268,
	0, 269, 270, 271, 272, 273, 688, 274, 275, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 281, 284,
	285, 286, 287, 0, 288, 711, 289, 290, 611, 291,
	0, 295, 296, 297, 298, 139, 300, 386, 299, 301,
	302, 651, 303, 292, 293, 304, 712, 305, 689, 388,
	306, 0, 313, 307, 308, 294, 309, 312, 690, 310,
	311, 659, 0, 314, 141, 315, 316, 317, 318, 319,
	320, 321, 0, 391, 691, 692, 0, 0, 322, 323,
	660, 661, 632, 324, 325, 326, 327, 0, 0, 328,
	329, 330, 331, 652, 332, 0, 396, 333, 334, 335,
	929, 693, 0, 0, 336, 0, 0, 0, 133, 337,
	338, 339, 340, 341, 606, 134, 588, 0, 637, 626,
	627, 624, 625, 616, 604, 0, 0, 0, 0, 602,
	603, 0, 0, 0, 183, 184, 0, 185, 1108, 0,
	0, 0, 654, 619, 615, 0, 0, 186, 187, 188,
	343, 669, 345, 670, 189, 671, 672, 0, 190, 349,
	350, 191, 192, 622, 653, 673, 674, 353, 0, 193,
	665, 0, 645, 0, 194, 195, 196, 0, 198, 199,
	200, 197, 0, 201, 0, 202, 203, 0, 699, 204,
	205, 206, 0, 646, 647, 649, 0, 648, 650, 207,
	208, 406, 209, 675, 210, 676, 677, 0, 211, 0,
	212, 0, 213, 0, 0, 668, 215, 0, 216, 0,
	0, 0, 610, 217, 219, 218, 220, 655, 656, 633,
	700, 0, 0, 0, 0, 0, 221, 222, 678, 679,
	680, 0, 223, 0, 224, 0, 0, 701, 0, 225,
	666, 0, 365, 0, 0, 226, 227, 0, 0, 228,
	229, 662, 664, 703, 0, 368, 233, 0, 230, 0,
	702, 231, 681, 232, 682, 683, 684, 685, 686, 0,
	644, 0, 704, 234, 235, 236, 705, 237, 238, 239,
	0, 241, 240, 0, 667, 706, 242, 707, 0, 243,
	0, 0, 244, 0, 245, 246, 247, 249, 377, 248,
	708, 250, 251, 253, 252, 605, 0, 634, 663, 254,
	687, 255, 256, 0, 257, 0, 0, 258, 0, 0,
	259, 380, 709, 260, 710, 657, 261, 262, 263, 264,
	265, 0, 266, 658, 267, 383, 268, 0, 269, 270,
	271, 272, 273, 688, 274, 275, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 281, 284, 285, 286, 287,
	0, 288, 711, 289, 290, 611, 291, 0, 295, 296,
	297, 298, 139, 300, 386, 299, 301, 302, 651, 303,
	292, 293, 304, 712, 305, 689, 388, 306, 0, 313,
	307, 308, 294, 309, 312, 690, 310, 311, 659, 0,
	314, 141, 315, 316, 317, 318, 319, 320, 321, 0,
	391, 691, 692, 0, 0, 322, 323, 660, 661, 632,
	324, 325, 326, 327, 0, 0, 328, 329, 330, 331,
	652, 332, 0, 396, 333, 334, 335, 929, 693, 0,
	0, 336, 0, 0, 0, 133, 337, 338, 339, 340,
	341, 606, 134, 637, 626, 627, 624, 625, 616, 0,
	0, 604, 0, 0, 0, 0, 602, 603, 0, 183,
	184, 0, 185, 0, 0, 1108, 0, 654, 619, 0,
	0, 615, 186, 187, 188, 343, 669, 345, 670, 189,
	671, 672, 0, 190, 349, 350, 191, 192, 622, 653,
	673, 674, 353, 0, 193, 665, 0, 645, 0, 194,
	195, 196, 0, 198, 199, 200, 197, 0, 201, 0,
	202, 203, 0, 699, 204, 205, 206, 0, 646, 647,
	649, 0, 648, 650, 207, 208, 406, 209, 675, 210,
	676, 677, 0, 211, 0, 212, 0, 213, 0, 0,
	668, 215, 0, 216, 0, 0, 0, 610, 217, 219,
	218, 220, 655, 656, 633, 700, 0, 0, 0, 0,
	0, 221, 222, 678, 679, 680, 0, 223, 0, 224,
	0, 0, 701, 0, 225, 666, 0, 365, 0, 0,
	226, 227, 0, 0, 228, 229, 662, 664, 703, 0,
	368, 233, 0, 230, 0, 702, 231, 681, 232, 682,
	683, 684, 685, 686, 0, 644, 0, 704, 234, 235,
	236, 705, 237, 238, 239, 0, 241, 240, 0, 667,
	706, 242, 707, 0, 243, 0, 0, 244, 0, 245,
	246, 247, 249, 377, 248, 708, 250, 251, 253, 252,
	605, 0, 634, 663, 254, 687, 255, 256, 0, 257,
	0, 0, 258, 0, 0, 259, 380, 709, 260, 710,
	657, 261, 262, 263, 264, 265, 0, 266, 658, 267,
	383, 268, 0, 269, 270, 271, 272, 273, 688, 274,
	275, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	281, 284, 285, 286, 287, 0, 288, 711, 289, 290,
	611, 291, 0, 295, 296, 297, 298, 139, 300, 386,
	299, 301, 302, 651, 303, 292, 293, 304, 712, 305,
	689, 388, 306, 0, 313, 307, 308, 294, 309, 312,
	690, 310, 311, 659, 0, 314, 141, 315, 316, 317,
	318, 319, 320, 321, 0, 391, 691, 692, 0, 0,
	322, 323, 660, 661, 632, 324, 325, 326, 327, 0,
	0, 328, 329, 330, 331, 652, 332, 0, 396, 333,
	334, 335, 929, 693, 0, 0, 336, 0, 0, 0,
	133, 337, 338, 339, 340, 341, 606, 134, 637, 626,
	627, 624, 625, 616, 0, 0, 604, 0, 0, 0,
	0, 602, 603, 0, 183, 184, 0, 185, 0, 0,
	1108, 0, 654, 619, 0, 0, 615, 186, 187, 188,
	343, 669, 345, 670, 189, 671, 672, 1557, 190, 349,
	350, 191, 192, 622, 653, 673, 674, 353, 0, 193,
	665, 0, 645, 0, 194, 195, 196, 0, 198, 199,
	200, 197, 0, 201, 0, 202, 203, 0, 699, 204,
	205, 206, 0, 646, 647, 649, 0, 648, 650, 207,
	208, 406, 209, 675, 210, 676, 677, 0, 211, 0,
	212, 0, 213, 0, 0, 668, 215, 0, 216, 0,
	0, 0, 610, 217, 219, 218, 220, 655, 656, 633,
	700, 0, 0, 0, 0, 0, 221, 222, 678, 679,
	680, 0, 223, 0, 224, 0, 1562, 701, 0, 225,
	666, 0, 365, 0, 0, 226, 227, 0, 0, 228,
	229, 662, 664, 703, 0, 368, 233, 0, 230, 0,
	702, 231, 681, 232, 682, 683, 684, 685, 686, 0,
	644, 0, 704, 234, 235, 236, 705, 237, 238, 239,
	0, 241, 240, 1558, 667, 706, 242, 707, 0, 243,
	0, 0, 244, 0, 245, 246, 247, 249, 377, 248,
	708, 250, 251, 253, 252, 605, 0, 634, 663, 254,
	687, 255, 256, 0, 257, 0, 0, 258, 0, 0,
	259, 380, 709, 260, 710, 657, 261, 262, 263, 264,
	265, 0, 266, 658, 267, 383, 268, 0, 269, 270,
	271, 272, 273, 688, 274, 275, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 281, 284, 285, 286, 287,
	0, 288, 711, 289, 290, 611, 291, 0, 295, 296,
	297, 298, 0, 300, 386, 299, 301, 302, 651, 303,
	292, 293, 304, 712, 305, 689, 388, 306, 0, 313,
	307, 308, 294, 309, 312, 690, 310, 311, 659, 0,
	314, 0, 315, 316, 317, 318, 319, 320, 321, 0,
	391, 691, 692, 0, 1559, 322, 323, 660, 661, 632,
	324, 325, 326, 327, 0, 0, 328, 329, 330, 331,
	652, 332, 0, 396, 333, 334, 335, 397, 693, 0,
	0, 336, 0, 0, 0, 0, 337, 338, 339, 340,
	341, 606, 596, 0, 637, 626, 627, 624, 625, 616,
	0, 604, 0, 0, 0, 0, 602, 603, 0, 0,
	183, 184, 0, 185, 0, 612, 0, 0, 654, 619,
	0, 615, 0, 186, 187, 188, 343, 669, 345, 670,
	189, 671, 672, 0, 190, 349, 350, 191, 192, 622,
	653, 673, 674, 353, 0, 193, 665, 0, 645, 0,
	194, 195, 196, 0, 198, 199, 200, 197, 0, 201,
	0, 202, 203, 0, 699, 204, 205, 206, 0, 646,
	647, 649, 0, 648, 650, 207, 208, 406, 209, 675,
	210, 676, 677, 600, 211, 0, 212, 0, 213, 0,
	0, 668, 215, 0, 216, 0, 0, 0, 610, 217,
	219, 218, 220, 655, 656, 633, 700, 0, 0, 0,
	0, 0, 221, 222, 678, 679, 680, 0, 223, 0,
	224, 0, 0, 701, 0, 225, 666, 0, 365, 0,
	0, 226, 227, 0, 0, 228, 229, 662, 664, 703,
	0, 368, 233, 0, 230, 0, 702, 231, 681, 232,
	682, 683, 684, 685, 686, 0, 644, 0, 704, 234,
	235, 236, 705, 237, 238, 239, 0, 241, 240, 0,
	667, 706, 242, 707, 0, 243, 0, 0, 244, 0,
	245, 246, 247, 249, 377, 248, 708, 250, 251, 253,
	252, 605, 0, 634, 663, 254, 687, 255, 256, 0,
	257, 598, 0, 258, 0, 0, 259, 380, 709, 260,
	710, 657, 261, 262, 263, 264, 265, 0, 266, 658,
	267, 383, 268, 0, 269, 270, 271, 272, 273, 688,
	274, 275, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 281, 284, 285, 286, 287, 0, 288, 711, 289,
	290, 611, 291, 0, 295, 296, 297, 298, 0, 300,
	386, 299, 301, 302, 651, 303, 292, 293, 304, 712,
	305, 689, 388, 306, 0, 313, 307, 308, 294, 309,
	312, 690, 310, 311, 659, 0, 314, 0, 315, 316,
	317, 318, 319, 320, 321, 0, 391, 691, 692, 0,
	0, 322, 323, 660, 661, 632, 324, 325, 326, 327,
	0, 0, 328, 329, 330, 331, 652, 332, 0, 396,
	333, 334, 335, 397, 693, 0, 0, 336, 0, 0,
	0, 0, 337, 338, 339, 340, 341, 606, 0, 637,
	626, 627, 624, 625, 616, 0, 0, 604, 0, 0,
	0, 0, 602, 603, 0, 183, 184, 0, 185, 0,
	0, 612, 0, 654, 619, 0, 0, 615, 186, 187,
	188, 343, 669, 345, 670, 189, 671, 672, 0, 190,
	349, 350, 191, 192, 622, 653, 673, 674, 353, 0,
	193, 665, 0, 645, 0, 194, 195, 196, 0, 198,
	199, 200, 197, 0, 201, 0, 202, 203, 0, 699,
	204, 205, 206, 0, 646, 647, 649, 0, 648, 650,
	207, 208, 406, 209, 675, 210, 676, 677, 0, 211,
	0, 212, 0, 213, 0, 0, 668, 215, 0, 216,
	0, 0, 0, 610, 217, 219, 218, 220, 655, 656,
	633, 700, 0, 0, 0, 0, 0, 221, 222, 678,
	679, 680, 0, 223, 0, 224, 0, 0, 701, 0,
	225, 666, 0, 365, 0, 0, 226, 227, 0, 0,
	228, 229, 662, 664, 703, 0, 368, 233, 0, 230,
	0, 702, 231, 681, 232, 682, 683, 684, 685, 686,
	0, 644, 0, 704, 234, 235, 236, 705, 237, 238,
	239, 0, 241, 240, 0, 667, 706, 242, 707, 0,
	243, 0, 0, 244, 0, 245, 246, 247, 249, 377,
	248, 708, 250, 251, 253, 252, 605, 2187, 634, 663,
	254, 687, 255, 256, 0, 257, 0, 0, 258, 0,
	0, 259, 380, 709, 260, 710, 657, 261, 262, 263,
	264, 265, 0, 266, 658, 267, 383, 268, 0, 269,
	270, 271, 272, 273, 688, 274, 275, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 281, 284, 285, 286,
	287, 0, 288, 711, 289, 290, 611, 291, 0, 295,
	296, 297, 298, 0, 300, 386, 299, 301, 302, 651,
	303, 292, 293, 304, 712, 305, 689, 388, 306, 0,
	313, 307, 308, 294, 309, 312, 690, 310, 311, 659,
	0, 314, 0, 315, 316, 317, 318, 319, 320, 321,
	0, 391, 691, 692, 0, 0, 322, 323, 660, 661,
	632, 324, 325, 326, 327, 0, 0, 328, 329, 330,
	331, 652, 332, 0, 396, 333, 334, 335, 397, 693,
	0, 0, 336, 0, 0, 0, 0, 337, 338, 339,
	340, 341, 606, 0, 637, 626, 627, 624, 625, 616,
	0, 0, 604, 0, 0, 0, 0, 602, 603, 1171,
	183, 184, 0, 185, 0, 0, 612, 0, 654, 619,
	0, 0, 615, 186, 187, 188, 343, 669, 345, 670,
	189, 671, 672, 0, 190, 349, 350, 191, 192, 622,
	653, 673, 674, 353, 0, 193, 665, 0, 645, 0,
	194, 195, 196, 0, 198, 199, 200, 197, 0, 201,
	0, 202, 203, 0, 699, 204, 205, 206, 0, 646,
	647, 649, 0, 648, 650, 207, 208, 406, 209, 675,
	210, 676, 677, 0, 211, 0, 212, 0, 213, 0,
	0, 668, 215, 0, 216, 0, 0, 0, 610, 217,
	219, 218, 220, 655, 656, 633, 700, 0, 0, 0,
	0, 0, 221, 222, 678, 679, 680, 0, 223, 0,
	224, 0, 0, 701, 0, 225, 666, 0, 365, 0,
	0, 226, 227, 0, 0, 228, 229, 662, 664, 703,
	0, 368, 233, 1407, 230, 0, 702, 231, 681, 232,
	682, 683, 684, 685, 686, 0, 644, 0, 704, 234,
	235, 236, 705, 237, 238, 239, 0, 241, 240, 0,
	667, 706, 242, 707, 0, 243, 0, 0, 244, 0,
	245, 246, 247, 249, 377, 248, 708, 250, 251, 253,
	252, 605, 0, 634, 663, 254, 687, 255, 256, 0,
	257, 0, 0, 258, 0, 0, 259, 380, 709, 260,
	710, 657, 261, 262, 263, 264, 265, 0, 266, 658,
	267, 383, 268, 1406, 269, 270, 271, 272, 273, 688,
	274, 275, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 281, 284, 285, 286, 287, 0, 288, 711, 289,
	290, 611, 291, 0, 295, 296, 297, 298, 0, 300,
	386, 299, 301, 302, 651, 303, 292, 293, 304, 712,
	305, 689, 388, 306, 0, 313, 307, 308, 294, 309,
	312, 690, 310, 311, 659, 0, 314, 0, 315, 316,
	317, 318, 319, 320, 321, 0, 391, 691, 692, 0,
	0, 322, 323, 660, 661, 632, 324, 325, 326, 327,
	0, 0, 328, 329, 330, 331, 652, 332, 0, 396,
	333, 334, 335, 397, 693, 0, 0, 336, 0, 0,
	0, 0, 337, 338, 339, 340, 341, 606, 0, 637,
	626, 627, 624, 625, 616, 0, 0, 604, 0, 0,
	0, 0, 602, 603, 0, 183, 184, 0, 185, 0,
	0, 612, 0, 654, 619, 0, 0, 615, 186, 187,
	188, 343, 669, 345, 670, 189, 671, 672, 0, 190,
	349, 350, 191, 192, 622, 653, 673, 674, 353, 0,
	193, 665, 0, 645, 0, 194, 195, 196, 0, 198,
	199, 200, 197, 0, 201, 0, 202, 203, 0, 699,
	204, 205, 206, 0, 646, 647, 649, 0, 648, 650,
	207, 208, 406, 209, 675, 210, 676, 677, 600, 211,
	0, 212, 0, 213, 0, 0, 668, 215, 0, 216,
	0, 0, 0, 610, 217, 219, 218, 220, 655, 656,
	633, 700, 0, 0, 0, 0, 0, 221, 222, 678,
	679, 680, 0, 223, 0, 224, 0, 0, 701, 0,
	225, 666, 0, 365, 0, 0, 226, 227, 0, 0,
	228, 229, 662, 664, 703, 0, 368, 233, 0, 230,
	0, 702, 231, 681, 232, 682, 683, 684, 685, 686,
	0, 644, 0, 704, 234, 235, 236, 705, 237, 238,
	239, 0, 241, 240, 0, 667, 706, 242, 707, 0,
	243, 0, 0, 244, 0, 245, 246, 247, 249, 377,
	248, 708, 250, 251, 253, 252, 605, 0, 634, 663,
	254, 687, 255, 256, 0, 257, 598, 0, 258, 0,
	0, 259, 380, 709, 260, 710, 657, 261, 262, 263,
	264, 265, 0, 266, 658, 267, 383, 268, 0, 269,
	270, 271, 272, 273, 688, 274, 275, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 281, 284, 285, 286,
	287, 0, 288, 711, 289, 290, 611, 291, 0, 295,
	296, 297, 298, 0, 300, 386, 299, 301, 302, 651,
	303, 292, 293, 304, 712, 305, 689, 388, 306, 0,
	313, 307, 308, 294, 309, 312, 690, 310, 311, 659,
	0, 314, 0, 315, 316, 317, 318, 319, 320, 321,
	0, 391, 691, 692, 0, 0, 322, 323, 660, 661,
	632, 324, 325, 326, 327, 0, 0, 328, 329, 330,
	331, 652, 332, 0, 396, 333, 334, 335, 397, 693,
	0, 0, 336, 0, 0, 0, 0, 337, 338, 339,
	340, 341, 606, 0, 637, 626, 627, 624, 625, 616,
	0, 0, 604, 0, 0, 0, 0, 602, 603, 0,
	183, 184, 0, 185, 0, 0, 612, 0, 654, 619,
	0, 0, 615, 186, 187, 188, 343, 669, 345, 670,
	189, 671, 672, 0, 190, 349, 350, 191, 192, 622,
	653, 673, 674, 353, 0, 193, 665, 0, 645, 0,
	194, 195, 196, 0, 198, 199, 200, 197, 0, 201,
	0, 202, 203, 0, 699, 204, 205, 206, 0, 646,
	647, 649, 0, 648, 650, 207, 208, 406, 209, 675,
	210, 676, 677, 600, 211, 0, 212, 0, 213, 0,
	0, 668, 215, 0, 216, 0, 0, 0, 610, 217,
	219, 218, 220, 655, 656, 633, 700, 0, 0, 0,
	0, 0, 221, 222, 678, 679, 680, 0, 223, 0,
	224, 0, 0, 701, 0, 225, 666, 0, 365, 0,
	0, 226, 227, 0, 0, 228, 229, 662, 664, 703,
	0, 368, 233, 0, 230, 0, 702, 231, 681, 232,
	682, 683, 684, 685, 686, 0, 644, 0, 704, 234,
	235, 236, 705, 237, 238, 239, 0, 241, 240, 0,
	667, 706, 242, 707, 0, 243, 0, 0, 244, 0,
	245, 246, 247, 249, 377, 248, 708, 250, 251, 253,
	252, 605, 0, 634, 663, 254, 687, 255, 256, 0,
	257, 0, 0, 258, 0, 0, 259, 380, 709, 260,
	710, 657, 261, 262, 263, 264, 265, 0, 266, 658,
	267, 383, 268, 0, 269, 270, 271, 272, 273, 688,
	274, 275, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 281, 284, 285, 286, 287, 0, 288, 711, 289,
	290, 611, 291, 0, 295, 296, 297, 298, 0, 300,
	386, 299, 301, 302, 651, 303, 292, 293, 304, 712,
	305, 689, 388, 306, 0, 313, 307, 308, 294, 309,
	312, 690, 310, 311, 659, 0, 314, 0, 315, 316,
	317, 318, 319, 320, 321, 0, 391, 691, 692, 0,
	0, 322, 323, 660, 661, 632, 324, 325, 326, 327,
	0, 0, 328, 329, 330, 331, 652, 332, 0, 396,
	333, 334, 335, 397, 693, 0, 0, 336, 0, 0,
	0, 0, 337, 338, 339, 340, 341, 606, 0, 637,
	626, 627, 624, 625, 616, 0, 0, 604, 0, 0,
	0, 0, 602, 603, 0, 183, 184, 0, 185, 0,
	0, 612, 0, 654, 619, 0, 0, 615, 186, 187,
	188, 343, 669, 345, 670, 189, 671, 672, 0, 190,
	349, 350, 191, 192, 622, 653, 673, 674, 353, 0,
	193, 665, 0, 645, 0, 194, 195, 196, 0, 198,
	199, 200, 197, 0, 201, 0, 202, 203, 0, 699,
	204, 205, 206, 0, 646, 647, 649, 0, 648, 650,
	207, 208, 406, 209, 675, 210, 676, 677, 0, 211,
	0, 212, 0, 213, 0, 0, 668, 215, 0, 216,
	0, 0, 0, 610, 217, 219, 218, 220, 655, 656,
	633, 700, 0, 0, 0, 0, 0, 221, 222, 678,
	679, 680, 0, 223, 0, 224, 0, 0, 701, 0,
	225, 666, 0, 365, 0, 0, 226, 227, 0, 0,
	228, 229, 662, 664, 703, 0, 368, 233, 0, 230,
	0, 702, 231, 681, 232, 682, 683, 684, 685, 686,
	0, 644, 0, 704, 234, 235, 236, 705, 237, 238,
	239, 0, 241, 240, 0, 667, 706, 242, 707, 0,
	243, 0, 0, 244, 0, 245, 246, 247, 249, 377,
	248, 708, 250, 251, 253, 252, 605, 0, 634, 663,
	254, 687, 255, 256, 0, 257, 0, 0, 258, 0,
	0, 259, 380, 709, 260, 710, 657, 261, 262, 263,
	264, 265, 0, 266, 658, 267, 383, 268, 0, 269,
	270, 271, 272, 273, 688, 274, 275, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 281, 284, 285, 286,
	287, 0, 288, 711, 289, 290, 611, 291, 0, 295,
	296, 297, 298, 0, 300, 386, 299, 301, 302, 651,
	303, 292, 293, 304, 712, 305, 689, 388, 306, 0,
	313, 307, 308, 294, 309, 312, 690, 310, 311, 659,
	0, 314, 0, 315, 316, 317, 318, 319, 320, 321,
	0, 391, 691, 692, 0, 0, 322, 323, 660, 661,
	632, 324, 325, 326, 327, 0, 0, 328, 329, 330,
	331, 652, 332, 0, 396, 333, 334, 335, 397, 693,
	2036, 0, 336, 0, 0, 0, 0, 337, 338, 339,
	340, 341, 606, 0, 637, 626, 627, 624, 625, 616,
	0, 0, 604, 0, 0, 0, 0, 602, 603, 0,
	183, 184, 0, 185, 0, 0, 612, 0, 654, 619,
	0, 0, 615, 186, 187, 188, 343, 669, 345, 670,
	189, 671, 672, 0, 190, 349, 350, 191, 192, 622,
	653, 673, 674, 353, 0, 193, 665, 0, 645, 0,
	194, 195, 196, 0, 198, 199, 200, 197, 0, 201,
	0, 202, 203, 0, 699, 204, 205, 206, 0, 646,
	647, 649, 0, 648, 650, 207, 208, 406, 209, 675,
	210, 676, 677, 0, 211, 0, 212, 0, 213, 0,
	0, 668, 215, 0, 216, 0, 0, 0, 610, 217,
	219, 218, 220, 655, 656, 633, 700, 0, 0, 0,
	0, 0, 221, 222, 678, 679, 680, 0, 223, 0,
	224, 0, 0, 701, 0, 225, 666, 0, 365, 0,
	0, 226, 227, 0, 0, 228, 229, 662, 664, 703,
	0, 368, 233, 0, 230, 0, 702, 231, 681, 232,
	682, 683, 684, 685, 686, 0, 644, 0, 704, 234,
	235, 236, 705, 237, 238, 239, 0, 241, 240, 0,
	667, 706, 242, 707, 0, 243, 0, 0, 244, 0,
	245, 246, 247, 249, 377, 248, 708, 250, 251, 253,
	252, 605, 0, 634, 663, 254, 687, 255, 256, 0,
	257, 0, 0, 258, 0, 0, 259, 380, 709, 260,
	710, 657, 261, 262, 263, 264, 265, 0, 266, 658,
	267, 383, 268, 0, 269, 270, 271, 272, 273, 688,
	274, 275, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 281, 284, 285, 286, 287, 0, 288, 711, 289,
	290, 611, 291, 0, 295, 296, 297, 298, 0, 300,
	386, 299, 301, 302, 651, 303, 292, 293, 304, 712,
	305, 689, 388, 306, 0, 313, 307, 308, 294, 309,
	312, 690, 310, 311, 659, 0, 314, 0, 315, 316,
	317, 318, 319, 320, 321, 0, 391, 691, 692, 0,
	0, 322, 323, 660, 661, 632, 324, 325, 326, 327,
	0, 0, 328, 329, 330, 331, 652, 332, 0, 396,
	333, 334, 335, 397, 693, 0, 0, 336, 0, 0,
	0, 0, 337, 338, 339, 340, 341, 606, 0, 637,
	626, 627, 624, 625, 616, 0, 0, 604, 0, 0,
	0, 0, 602, 603, 1171, 183, 184, 0, 185, 0,
	0, 612, 0, 654, 619, 0, 0, 615, 186, 187,
	188, 343, 669, 345, 670, 189, 671, 672, 0, 190,
	349, 350, 191, 192, 622, 653, 673, 674, 353, 0,
	193, 665, 0, 645, 0, 194, 195, 196, 0, 198,
	199, 200, 197, 0, 201, 0, 202, 203, 0, 699,
	204, 205, 206, 0, 646, 647, 649, 0, 648, 650,
	207, 208, 406, 209, 675, 210, 676, 677, 0, 211,
	0, 212, 0, 213, 0, 0, 668, 215, 0, 216,
	0, 0, 0, 610, 217, 219, 218, 220, 655, 656,
	633, 700, 0, 0, 0, 0, 0, 221, 222, 678,
	679, 680, 0, 223, 0, 224, 0, 1562, 701, 0,
	225, 666, 0, 365, 0, 0, 226, 227, 0, 0,
	228, 229, 662, 664, 703, 0, 368, 233, 0, 230,
	0, 702, 231, 681, 232, 682, 683, 684, 685, 686,
	0, 644, 0, 704, 234, 235, 236, 705, 237, 238,
	239, 0, 241, 240, 0, 667, 706, 242, 707, 0,
	243, 0, 0, 244, 0, 245, 246, 247, 249, 377,
	248, 708, 250, 251, 253, 252, 605, 0, 634, 663,
	254, 687, 255, 256, 0, 257, 0, 0, 258, 0,
	0, 259, 380, 709, 260, 710, 657, 261, 262, 263,
	264, 265, 0, 266, 658, 267, 383, 268, 0, 269,
	270, 271, 272, 273, 688, 274, 275, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 281, 284, 285, 286,
	287, 0, 288, 711, 289, 290, 611, 291, 0, 295,
	296, 297, 298, 0, 300, 386, 299, 301, 302, 651,
	303, 292, 293, 304, 712, 305, 689, 388, 306, 0,
	313, 307, 308, 294, 309, 312, 690, 310, 311, 659,
	0, 314, 0, 315, 316, 317, 318, 319, 320, 321,
	0, 391, 691, 692, 0, 0, 322, 323, 660, 661,
	632, 324, 325, 326, 327, 0, 0, 328, 329, 330,
	331, 652, 332, 0, 396, 333, 334, 335, 397, 693,
	0, 0, 336, 0, 0, 0, 0, 337, 338, 339,
	340, 341, 606, 1610, 0, 637, 626, 627, 624, 625,
	616, 0, 604, 0, 0, 0, 0, 602, 603, 0,
	0, 183, 184, 0, 185, 0, 612, 0, 0, 654,
	619, 0, 615, 0, 186, 187, 188, 343, 669, 345,
	670, 189, 671, 672, 0, 190, 349, 350, 191, 192,
	622, 653, 673, 674, 353, 0, 193, 665, 0, 645,
	0, 194, 195, 196, 0, 198, 199, 200, 197, 0,
	201, 0, 202, 203, 0, 699, 204, 205, 206, 0,
	646, 647, 649, 0, 648, 650, 207, 208, 406, 209,
	675, 210, 676, 677, 0, 211, 0, 212, 0, 213,
	0, 0, 668, 215, 0, 216, 0, 0, 0, 610,
	217, 219, 218, 220, 655, 656, 633, 700, 0, 0,
	0, 0, 0, 221, 222, 678, 679, 680, 0, 223,
	0, 224, 0, 0, 701, 0, 225, 666, 0, 365,
	0, 0, 226, 227, 0, 0, 228, 229, 662, 664,
	703, 0, 368, 233, 0, 230, 0, 702, 231, 681,
	232, 682, 683, 684, 685, 686, 0, 644, 0, 704,
	234, 235, 236, 705, 237, 238, 239, 0, 241, 240,
	0, 667, 706, 242, 707, 0, 243, 0, 0, 244,
	0, 245, 246, 247, 249, 377, 248, 708, 250, 251,
	253, 252, 605, 0, 634, 663, 254, 687, 255, 256,
	0, 257, 0, 0, 258, 0, 0, 259, 380, 709,
	260, 710, 657, 261, 262, 263, 264, 265, 0, 266,
	658, 267, 383, 268, 0, 269, 270, 271, 272, 273,
	688, 274, 275, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 281, 284, 285, 286, 287, 0, 288, 711,
	289, 290, 611, 291, 0, 295, 296, 297, 298, 0,
	300, 386, 299, 301, 302, 651, 303, 292, 293, 304,
	712, 305, 689, 388, 306, 0, 313, 307, 308, 294,
	309, 312, 690, 310, 311, 659, 0, 314, 0, 315,
	316, 317, 318, 319, 320, 321, 0, 391, 691, 692,
	0, 0, 322, 323, 660, 661, 632, 324, 325, 326,
	327, 0, 0, 328, 329, 330, 331, 652, 332, 0,
	396, 333, 334, 335, 397, 693, 0, 0, 336, 0,
	0, 0, 0, 337, 338, 339, 340, 341, 606, 1571,
	0, 637, 626, 627, 624, 625, 616, 0, 604, 0,
	0, 0, 0, 602, 603, 0, 0, 183, 184, 0,
	185, 0, 612, 0, 0, 654, 619, 0, 615, 0,
	186, 187, 188, 343, 669, 345, 670, 189, 671, 672,
	0, 190, 349, 350, 191, 192, 622, 653, 673, 674,
	353, 0, 193, 665, 0, 645, 0, 194, 195, 196,
	0, 198, 199, 200, 197, 0, 201, 0, 202, 203,
	0, 699, 204, 205, 206, 0, 646, 647, 649, 0,
	648, 650, 207, 208, 406, 209, 675, 210, 676, 677,
	0, 211, 0, 212, 0, 213, 0, 0, 668, 215,
	0, 216, 0, 0, 0, 610, 217, 219, 218, 220,
	655, 656, 633, 700, 0, 0, 0, 0, 0, 221,
	222, 678, 679, 680, 0, 223, 0, 224, 0, 0,
	701, 0, 225, 666, 0, 365, 0, 0, 226, 227,
	0, 0, 228, 229, 662, 664, 703, 0, 368, 233,
	0, 230, 0, 702, 231, 681, 232, 682, 683, 684,
	685, 686, 0, 644, 0, 704, 234, 235, 236, 705,
	237, 238, 239, 0, 241, 240, 0, 667, 706, 242,
	707, 0, 243, 0, 0, 244, 0, 245, 246, 247,
	249, 377, 248, 708, 250, 251, 253, 252, 605, 0,
	634, 663, 254, 687, 255, 256, 0, 257, 0, 0,
	258, 0, 0, 259, 380, 709, 260, 710, 657, 261,
	262, 263, 264, 265, 0, 266, 658, 267, 383, 268,
	0, 269, 270, 271, 272, 273, 688, 274, 275, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 281, 284,
	285, 286, 287, 0, 288, 711, 289, 290, 611, 291,
	0, 295, 296, 297, 298, 0, 300, 386, 299, 301,
	302, 651, 303, 292, 293, 304, 712, 305, 689, 388,
	306, 0, 313, 307, 308, 294, 309, 312, 690, 310,
	311, 659, 0, 314, 0, 315, 316, 317, 318, 319,
	320, 321, 0, 391, 691, 692, 0, 0, 322, 323,
	660, 661, 632, 324, 325, 326, 327, 0, 0, 328,
	329, 330, 331, 652, 332, 0, 396, 333, 334, 335,
	397, 693, 0, 0, 336, 0, 0, 0, 0, 337,
	338, 339, 340, 341, 606, 1569, 0, 637, 626, 627,
	624, 625, 616, 0, 604, 0, 0, 0, 0, 602,
	603, 0, 0, 183, 184, 0, 185, 0, 612, 0,
	0, 654, 619, 0, 615, 0, 186, 187, 188, 343,
	669, 345, 670, 189, 671, 672, 0, 190, 349, 350,
	191, 192, 622, 653, 673, 674, 353, 0, 193, 665,
	0, 645, 0, 194, 195, 196, 0, 198, 199, 200,
	197, 0, 201, 0, 202, 203, 0, 699, 204, 205,
	206, 0, 646, 647, 649, 0, 648, 650, 207, 208,
	406, 209, 675, 210, 676, 677, 0, 211, 0, 212,
	0, 213, 0, 0, 668, 215, 0, 216, 0, 0,
	0, 610, 217, 219, 218, 220, 655, 656, 633, 700,
	0, 0, 0, 0, 0, 221, 222, 678, 679, 680,
	0, 223, 0, 224, 0, 0, 701, 0, 225, 666,
	0, 365, 0, 0, 226, 227, 0, 0, 228, 229,
	662, 664, 703, 0, 368, 233, 0, 230, 0, 702,
	231, 681, 232, 682, 683, 684, 685, 686, 0, 644,
	0, 704, 234, 235, 236, 705, 237, 238, 239, 0,
	241, 240, 0, 667, 706, 242, 707, 0, 243, 0,
	0, 244, 0, 245, 246, 247, 249, 377, 248, 708,
	250, 251, 253, 252, 605, 0, 634, 663, 254, 687,
	255, 256, 0, 257, 0, 0, 258, 0, 0, 259,
	380, 709, 260, 710, 657, 261, 262, 263, 264, 265,
	0, 266, 658, 267, 383, 268, 0, 269, 270, 271,
	272, 273, 688, 274, 275, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 281, 284, 285, 286, 287, 0,
	288, 711, 289, 290, 611, 291, 0, 295, 296, 297,
	298, 0, 300, 386, 299, 301, 302, 651, 303, 292,
	293, 304, 712, 305, 689, 388, 306, 0, 313, 307,
	308, 294, 309, 312, 690, 310, 311, 659, 0, 314,
	0, 315, 316, 317, 318, 319, 320, 321, 0, 391,
	691, 692, 0, 0, 322, 323, 660, 661, 632, 324,
	325, 326, 327, 0, 0, 328, 329, 330, 331, 652,
	332, 0, 396, 333, 334, 335, 397, 693, 0, 0,
	336, 0, 0, 0, 0, 337, 338, 339, 340, 341,
	606, 1553, 0, 637, 626, 627, 624, 625, 616, 0,
	604, 0, 0, 0, 0, 602, 603, 0, 0, 183,
	184, 0, 185, 0, 612, 0, 0, 654, 619, 0,
	615, 0, 186, 187, 188, 343, 669, 345, 670, 189,
	671, 672, 0, 190, 349, 350, 191, 192, 622, 653,
	673, 674, 353, 0, 193, 665, 0, 645, 0, 194,
	195, 196, 0, 198, 199, 200, 197, 0, 201, 0,
	202, 203, 0, 699, 204, 205, 206, 0, 646, 647,
	649, 0, 648, 650, 207, 208, 406, 209, 675, 210,
	676, 677, 0, 211, 0, 212, 0, 213, 0, 0,
	668, 215, 0, 216, 0, 0, 0, 610, 217, 219,
	218, 220, 655, 656, 633, 700, 0, 0, 0, 0,
	0, 221, 222, 678, 679, 680, 0, 223, 0, 224,
	0, 0, 701, 0, 225, 666, 0, 365, 0, 0,
	226, 227, 0, 0, 228, 229, 662, 664, 703, 0,
	368, 233, 0, 230, 0, 702, 231, 681, 232, 682,
	683, 684, 685, 686, 0, 644, 0, 704, 234, 235,
	236, 705, 237, 238, 239, 0, 241, 240, 0, 667,
	706, 242, 707, 0, 243, 0, 0, 244, 0, 245,
	246, 247, 249, 377, 248, 708, 250, 251, 253, 252,
	605, 0, 634, 663, 254, 687, 255, 256, 0, 257,
	0, 0, 258, 0, 0, 259, 380, 709, 260, 710,
	657, 261, 262, 263, 264, 265, 0, 266, 658, 267,
	383, 268, 0, 269, 270, 271, 272, 273, 688, 274,
	275, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	281, 284, 285, 286, 287, 0, 288, 711, 289, 290,
	611, 291, 0, 295, 296, 297, 298, 0, 300, 386,
	299, 301, 302, 651, 303, 292, 293, 304, 712, 305,
	689, 388, 306, 0, 313, 307, 308, 294, 309, 312,
	690, 310, 311, 659, 0, 314, 0, 315, 316, 317,
	318, 319, 320, 321, 0, 391, 691, 692, 0, 0,
	322, 323, 660, 661, 632, 324, 325, 326, 327, 0,
	0, 328, 329, 330, 331, 652, 332, 0, 396, 333,
	334, 335, 397, 693, 0, 0, 336, 0, 0, 0,
	0, 337, 338, 339, 340, 341, 606, 1541, 0, 637,
	626, 627, 624, 625, 616, 0, 604, 0, 0, 0,
	0, 602, 603, 0, 0, 183, 184, 0, 185, 0,
	612, 0, 0, 654, 619, 0, 615, 0, 186, 187,
	188, 343, 669, 345, 670, 189, 671, 672, 0, 190,
	349, 350, 191, 192, 622, 653, 673, 674, 353, 0,
	193, 665, 0, 645, 0, 194, 195, 196, 0, 198,
	199, 200, 197, 0, 201, 0, 202, 203, 0, 699,
	204, 205, 206, 0, 646, 647, 649, 0, 648, 650,
	207, 208, 406, 209, 675, 210, 676, 677, 0, 211,
	0, 212, 0, 213, 0, 0, 668, 215, 0, 216,
	0, 0, 0, 610, 217, 219, 218, 220, 655, 656,
	633, 700, 0, 0, 0, 0, 0, 221, 222, 678,
	679, 680, 0, 223, 0, 224, 0, 0, 701, 0,
	225, 666, 0, 365, 0, 0, 226, 227, 0, 0,
	228, 229, 662, 664, 703, 0, 368, 233, 0, 230,
	0, 702, 231, 681, 232, 682, 683, 684, 685, 686,
	0, 644, 0, 704, 234, 235, 236, 705, 237, 238,
	239, 0, 241, 240, 0, 667, 706, 242, 707, 0,
	243, 0, 0, 244, 0, 245, 246, 247, 249, 377,
	248, 708, 250, 251, 253, 252, 605, 0, 634, 663,
	254, 687, 255, 256, 0, 257, 0, 0, 258, 0,
	0, 259, 380, 709, 260, 710, 657, 261, 262, 263,
	264, 265, 0, 266, 658, 267, 383, 268, 0, 269,
	270, 271, 272, 273, 688, 274, 275, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 281, 284, 285, 286,
	287, 0, 288, 711, 289, 290, 611, 291, 0, 295,
	296, 297, 298, 0, 300, 386, 299, 301, 302, 651,
	303, 292, 293, 304, 712, 305, 689, 388, 306, 0,
	313, 307, 308, 294, 309, 312, 690, 310, 311, 659,
	0, 314, 0, 315, 316, 317, 318, 319, 320, 321,
	0, 391, 691, 692, 0, 0, 322, 323, 660, 661,
	632, 324, 325, 326, 327, 0, 0, 328, 329, 330,
	331, 652, 332, 0, 396, 333, 334, 335, 397, 693,
	0, 0, 336, 0, 0, 0, 0, 337, 338, 339,
	340, 341, 606, 1539, 0, 1531, 626, 627, 624, 625,
	616, 0, 604, 0, 0, 0, 0, 602, 603, 0,
	0, 183, 184, 0, 185, 0, 612, 0, 0, 654,
	619, 0, 615, 0, 186, 187, 188, 343, 669, 345,
	670, 189, 671, 672, 0, 190, 349, 350, 191, 192,
	622, 653, 673, 674, 353, 0, 193, 665, 0, 645,
	0, 194, 195, 196, 0, 198, 199, 200, 197, 0,
	201, 0, 202, 203, 0, 699, 204, 205, 206, 0,
	646, 647, 649, 0, 648, 650, 207, 208, 406, 209,
	675, 1534, 676, 677, 0, 211, 0, 212, 0, 213,
	0, 0, 668, 215, 0, 216, 0, 0, 0, 610,
	217, 219, 218, 220, 655, 656, 633, 700, 0, 0,
	0, 0, 0, 221, 222, 678, 679, 680, 0, 223,
	0, 224, 0, 0, 701, 0, 225, 666, 0, 365,
	0, 0, 226, 1535, 0, 0, 228, 229, 662, 664,
	703, 0, 368, 233, 0, 230, 0, 702, 231, 681,
	232, 682, 683, 684, 685, 686, 0, 644, 0, 704,
	234, 235, 236, 705, 237, 238, 239, 0, 241, 240,
	0, 667, 706, 242, 707, 0, 243, 0, 0, 244,
	0, 245, 1536, 1533, 249, 377, 248, 708, 250, 251,
	253, 252, 605, 0, 634, 663, 254, 687, 255, 256,
	0, 257, 0, 0, 258, 0, 0, 259, 380, 709,
	260, 710, 657, 261, 262, 263, 264, 265, 0, 266,
	658, 267, 383, 268, 0, 269, 270, 271, 272, 273,
	688, 274, 275, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 281, 284, 285, 286, 287, 0, 288, 711,
	289, 290, 611, 291, 0, 295, 296, 297, 1537, 0,
	300, 386, 299, 301, 302, 651, 303, 292, 293, 304,
	712, 305, 689, 388, 306, 0, 313, 307, 308, 294,
	309, 312, 690, 310, 311, 659, 0, 314, 0, 315,
	316, 317, 318, 319, 320, 321, 0, 391, 691, 692,
	0, 0, 322, 323, 660, 661, 632, 324, 325, 326,
	327, 0, 0, 328, 329, 330, 331, 652, 332, 0,
	396, 333, 334, 335, 397, 693, 0, 0, 336, 0,
	0, 0, 0, 337, 338, 339, 1532, 341, 606, 1528,
	0, 1531, 626, 627, 624, 625, 616, 0, 604, 0,
	0, 0, 0, 602, 603, 0, 0, 183, 184, 0,
	185, 0, 612, 0, 0, 654, 619, 0, 615, 0,
	186, 187, 188, 343, 669, 345, 670, 189, 671, 672,
	0, 190, 349, 350, 191, 192, 622, 653, 673, 674,
	353, 0, 193, 665, 0, 645, 0, 194, 195, 196,
	0, 198, 199, 200, 197, 0, 201, 0, 202, 203,
	0, 699, 204, 205, 206, 0, 646, 647, 649, 0,
	648, 650, 207, 208, 406, 209, 675, 1534, 676, 677,
	0, 211, 0, 212, 0, 213, 0, 0, 668, 215,
	0, 216, 0, 0, 0, 610, 217, 219, 218, 220,
	655, 656, 633, 700, 0, 0, 0, 0, 0, 221,
	222, 678, 679, 680, 0, 223, 0, 224, 0, 0,
	701, 0, 225, 666, 0, 365, 0, 0, 226, 1535,
	0, 0, 228, 229, 662, 664, 703, 0, 368, 233,
	0, 230, 0, 702, 231, 681, 232, 682, 683, 684,
	685, 686, 0, 644, 0, 704, 234, 235, 236, 705,
	237, 238, 239, 0, 241, 240, 0, 667, 706, 242,
	707, 0, 243, 0, 0, 244, 0, 245, 1536, 1533,
	249, 377, 248, 708, 250, 251, 253, 252, 605, 0,
	634, 663, 254, 687, 255, 256, 0, 257, 0, 0,
	258, 0, 0, 259, 380, 709, 260, 710, 657, 261,
	262, 263, 264, 265, 0, 266, 658, 267, 383, 268,
	0, 269, 270, 271, 272, 273, 688, 274, 275, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 281, 284,
	285, 286, 287, 0, 288, 711, 289, 290, 611, 291,
	0, 295, 296, 297, 1537, 0, 300, 386, 299, 301,
	302, 651, 303, 292, 293, 304, 712, 305, 689, 388,
	306, 0, 313, 307, 308, 294, 309, 312, 690, 310,
	311, 659, 0, 314, 0, 315, 316, 317, 318, 319,
	320, 321, 0, 391, 691, 692, 0, 0, 322, 323,
	660, 661, 632, 324, 325, 326, 327, 0, 0, 328,
	329, 330, 331, 652, 332, 0, 396, 333, 334, 335,
	397, 693, 0, 0, 336, 0, 0, 0, 0, 337,
	338, 339, 1532, 341, 606, 0, 637, 626, 627, 624,
	625, 616, 0, 0, 604, 0, 0, 0, 0, 602,
	603, 0, 183, 184, 0, 185, 0, 0, 612, 0,
	654, 619, 0, 0, 615, 186, 187, 188, 343, 669,
	345, 670, 189, 671, 672, 0, 190, 349, 350, 191,
	192, 622, 653, 673, 674, 353, 0, 193, 665, 0,
	645, 0, 194, 195, 196, 0, 198, 199, 200, 197,
	0, 201, 0, 202, 203, 0, 699, 204, 205, 206,
	0, 646, 647, 649, 0, 648, 650, 207, 208, 406,
	209, 675, 210, 676, 677, 0, 211, 0, 212, 0,
	213, 0, 0, 668, 215, 0, 216, 0, 0, 0,
	610, 217, 219, 218, 220, 655, 656, 633, 700, 0,
	0, 0, 0, 0, 221, 222, 678, 679, 680, 0,
	223, 0, 224, 0, 0, 701, 0, 225, 666, 0,
	365, 0, 0, 226, 227, 0, 0, 228, 229, 662,
	664, 703, 0, 368, 233, 0, 230, 0, 702, 231,
	681, 232, 682, 683, 684, 685, 686, 0, 644, 0,
	704, 234, 235, 236, 705, 237, 238, 239, 0, 241,
	240, 0, 667, 706, 242, 707, 0, 243, 0, 0,
	244, 0, 245, 246, 247, 249, 377, 248, 708, 250,
	251, 253, 252, 605, 0, 634, 663, 254, 687, 255,
	256, 0, 257, 0, 0, 258, 0, 0, 259, 380,
	709, 260, 710, 657, 261, 262, 263, 264, 265, 0,
	266, 658, 267, 383, 268, 0, 269, 270, 271, 272,
	273, 688, 274, 275, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 281, 284, 285, 286, 287, 0, 288,
	711, 289, 290, 611, 291, 0, 295, 296, 297, 298,
	0, 300, 386, 299, 301, 302, 651, 303, 292, 293,
	304, 712, 305, 689, 388, 306, 0, 313, 307, 308,
	294, 309, 312, 690, 310, 311, 659, 0, 314, 0,
	315, 316, 317, 318, 319, 320, 321, 0, 391, 691,
	692, 0, 0, 322, 323, 660, 661, 632, 324, 325,
	326, 327, 0, 0, 328, 329, 330, 331, 652, 332,
	0, 396, 333, 334, 335, 397, 693, 0, 0, 336,
	0, 0, 0, 0, 337, 338, 339, 340, 341, 606,
	0, 637, 626, 627, 624, 625, 616, 0, 0, 604,
	0, 0, 0, 0, 602, 603, 0, 183, 184, 1394,
	185, 1112, 0, 612, 0, 654, 619, 0, 0, 615,
	186, 187, 188, 343, 669, 345, 670, 189, 671, 672,
	0, 190, 349, 350, 191, 192, 622, 653, 673, 674,
	353, 0, 193, 665, 0, 645, 0, 194, 195, 196,
	0, 198, 199, 200, 197, 0, 201, 0, 202, 203,
	0, 699, 204, 205, 206, 0, 646, 647, 649, 0,
	648, 650, 207, 208, 406, 209, 675, 210, 676, 677,
	0, 211, 0, 212, 0, 213, 0, 0, 668, 215,
	0, 216, 0, 0, 0, 610, 217, 219, 218, 220,
	655, 656, 633, 700, 0, 0, 0, 0, 0, 221,
	222, 678, 679, 680, 0, 223, 0, 224, 0, 0,
	701, 0, 225, 666, 0, 365, 0, 0, 226, 227,
	0, 0, 228, 229, 662, 664, 703, 0, 368, 233,
	0, 230, 0, 702, 231, 681, 232, 682, 683, 684,
	685, 686, 0, 644, 0, 704, 234, 235, 236, 705,
	237, 238, 239, 0, 241, 240, 0, 667, 706, 242,
	707, 0, 243, 0, 0, 244, 0, 245, 246, 247,
	249, 377, 248, 708, 250, 251, 253, 252, 605, 0,
	634, 663, 254, 687, 255, 256, 0, 257, 0, 0,
	258, 0, 0, 259, 380, 709, 260, 710, 657, 261,
	262, 263, 264, 265, 0, 266, 658, 267, 383, 268,
	0, 269, 270, 271, 272, 273, 688, 274, 275, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 281, 284,
	285, 286, 287, 0, 288, 711, 289, 290, 611, 291,
	0, 295, 296, 297, 298, 0, 300, 386, 299, 301,
	302, 651, 303, 292, 293, 304, 712, 305, 689, 388,
	306, 0, 313, 307, 308, 294, 309, 312, 690, 310,
	311, 659, 0, 314, 0, 315, 316, 317, 318, 319,
	320, 321, 0, 391, 691, 692, 0, 0, 322, 323,
	660, 661, 632, 324, 325, 326, 327, 0, 0, 328,
	329, 330, 331, 652, 332, 0, 396, 333, 334, 335,
	397, 693, 0, 0, 336, 0, 0, 0, 0, 337,
	338, 339, 340, 341, 606, 868, 0, 637, 626, 627,
	624, 625, 616, 0, 604, 0, 0, 0, 0, 602,
	603, 0, 0, 183, 184, 0, 185, 0, 612, 0,
	0, 654, 619, 0, 615, 0, 186, 187, 188, 343,
	669, 345, 670, 189, 671, 672, 0, 190, 349, 350,
	191, 192, 622, 653, 673, 674, 353, 0, 193, 665,
	0, 645, 0, 194, 195, 196, 0, 198, 199, 200,
	197, 0, 201, 0, 202, 203, 0, 699, 204, 205,
	206, 0, 646, 647, 649, 0, 648, 650, 207, 208,
	406, 209, 675, 210, 676, 677, 0, 211, 0, 212,
	0, 213, 0, 0, 668, 215, 0, 216, 0, 0,
	0, 610, 217, 219, 218, 220, 655, 656, 633, 700,
	0, 0, 0, 0, 0, 221, 222, 678, 679, 680,
	0, 223, 0, 224, 0, 0, 701, 0, 225, 666,
	0, 365, 0, 0, 226, 227, 0, 0, 228, 229,
	662, 664, 703, 0, 368, 233, 0, 230, 0, 702,
	231, 681, 232, 682, 683, 684, 685, 686, 0, 644,
	0, 704, 234, 235, 236, 705, 237, 238, 239, 0,
	241, 240, 0, 667, 706, 242, 707, 0, 243, 0,
	0, 244, 0, 245, 246, 247, 249, 377, 248, 708,
	250, 251, 253, 252, 605, 0, 634, 663, 254, 687,
	255, 256, 0, 257, 0, 0, 258, 0, 0, 259,
	380, 709, 260, 710, 657, 261, 262, 263, 264, 265,
	0, 266, 658, 267, 383, 268, 0, 269, 270, 271,
	272, 273, 688, 274, 275, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 281, 284, 285, 286, 287, 0,
	288, 711, 289, 290, 611, 291, 0, 295, 296, 297,
	298, 0, 300, 386, 299, 301, 302, 651, 303, 292,
	293, 304, 712, 305, 689, 388, 306, 0, 313, 307,
	308, 294, 309, 312, 690, 310, 311, 659, 0, 314,
	0, 315, 316, 317, 318, 319, 320, 321, 0, 391,
	691, 692, 0, 0, 322, 323, 660, 661, 632, 324,
	325, 326, 327, 0, 0, 328, 329, 330, 331, 652,
	332, 0, 396, 333, 334, 335, 397, 693, 0, 0,
	336, 0, 0, 0, 0, 337, 338, 339, 340, 341,
	606, 866, 0, 637, 626, 627, 624, 625, 616, 0,
	604, 0, 0, 0, 0, 602, 603, 0, 0, 183,
	184, 0, 185, 0, 612, 0, 0, 654, 619, 0,
	615, 0, 186, 187, 188, 343, 669, 345, 670, 189,
	671, 672, 0, 190, 349, 350, 191, 192, 622, 653,
	673, 674, 353, 0, 193, 665, 0, 645, 0, 194,
	195, 196, 0, 198, 199, 200, 197, 0, 201, 0,
	202, 203, 0, 699, 204, 205, 206, 0, 646, 647,
	649, 0, 648, 650, 207, 208, 406, 209, 675, 210,
	676, 677, 0, 211, 0, 212, 0, 213, 0, 0,
	668, 215, 0, 216, 0, 0, 0, 610, 217, 219,
	218, 220, 655, 656, 633, 700, 0, 0, 0, 0,
	0, 221, 222, 678, 679, 680, 0, 223, 0, 224,
	0, 0, 701, 0, 225, 666, 0, 365, 0, 0,
	226, 227, 0, 0, 228, 229, 662, 664, 703, 0,
	368, 233, 0, 230, 0, 702, 231, 681, 232, 682,
	683, 684, 685, 686, 0, 644, 0, 704, 234, 235,
	236, 705, 237, 238, 239, 0, 241, 240, 0, 667,
	706, 242, 707, 0, 243, 0, 0, 244, 0, 245,
	246, 247, 249, 377, 248, 708, 250, 251, 253, 252,
	605, 0, 634, 663, 254, 687, 255, 256, 0, 257,
	0, 0, 258, 0, 0, 259, 380, 709, 260, 710,
	657, 261, 262, 263, 264, 265, 0, 266, 658, 267,
	383, 268, 0, 269, 270, 271, 272, 273, 688, 274,
	275, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	281, 284, 285, 286, 287, 0, 288, 711, 289, 290,
	611, 291, 0, 295, 296, 297, 298, 0, 300, 386,
	299, 301, 302, 651, 303, 292, 293, 304, 712, 305,
	689, 388, 306, 0, 313, 307, 308, 294, 309, 312,
	690, 310, 311, 659, 0, 314, 0, 315, 316, 317,
	318, 319, 320, 321, 0, 391, 691, 692, 0, 0,
	322, 323, 660, 661, 632, 324, 325, 326, 327, 0,
	0, 328, 329, 330, 331, 652, 332, 0, 396, 333,
	334, 335, 397, 693, 0, 0, 336, 0, 0, 0,
	0, 337, 338, 339, 340, 341, 606, 0, 637, 626,
	627, 624, 625, 616, 0, 0, 604, 0, 0, 0,
	0, 602, 603, 0, 183, 184, 0, 185, 0, 0,
	612, 0, 654, 619, 0, 0, 615, 186, 187, 188,
	343, 669, 345, 670, 189, 671, 672, 0, 190, 349,
	350, 191, 192, 622, 653, 673, 674, 353, 0, 193,
	665, 0, 645, 0, 194, 195, 196, 0, 198, 199,
	200, 197, 0, 201, 0, 202, 203, 0, 699, 204,
	205, 2500, 0, 646, 647, 649, 0, 648, 650, 207,
	208, 406, 209, 675, 210, 676, 677, 0, 211, 0,
	212, 0, 213, 0, 0, 668, 215, 0, 216, 0,
	0, 0, 610, 217, 219, 218, 220, 655, 656, 633,
	700, 0, 0, 0, 0, 0, 221, 222, 678, 679,
	680, 0, 223, 0, 224, 0, 0, 701, 0, 225,
	666, 0, 365, 0, 0, 226, 227, 0, 0, 228,
	229, 662, 664, 703, 0, 368, 233, 0, 230, 0,
	702, 231, 681, 232, 682, 683, 684, 685, 686, 0,
	644, 0, 704, 234, 235, 236, 705, 237, 238, 239,
	0, 241, 240, 0, 667, 706, 242, 707, 0, 243,
	0, 0, 244, 0, 245, 246, 247, 249, 377, 248,
	708, 250, 251, 253, 252, 605, 0, 634, 663, 254,
	687, 255, 256, 0, 257, 0, 0, 258, 0, 0,
	259, 380, 709, 260, 710, 657, 261, 262, 263, 264,
	265, 0, 266, 658, 267, 383, 268, 0, 269, 270,
	271, 272, 273, 688, 274, 275, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 281, 284, 285, 286, 287,
	0, 288, 711, 289, 290, 611, 291, 0, 295, 296,
	297, 298, 0, 300, 386, 299, 301, 302, 651, 303,
	292, 293, 304, 712, 305, 689, 388, 306, 0, 313,
	307, 308, 294, 309, 312, 690, 310, 311, 659, 0,
	314, 0, 315, 316, 317, 318, 319, 320, 321, 0,
	391, 691, 692, 0, 0, 322, 323, 660, 661, 632,
	324, 325, 2499, 327, 0, 0, 328, 329, 330, 331,
	652, 332, 0, 396, 333, 334, 335, 397, 693, 0,
	0, 336, 0, 0, 0, 0, 337, 338, 339, 340,
	341, 606, 0, 637, 626, 627, 624, 625, 616, 0,
	0, 604, 0, 0, 0, 0, 602, 603, 0, 183,
	184, 0, 185, 0, 0, 612, 0, 654, 619, 0,
	0, 615, 186, 187, 188, 343, 669, 345, 670, 189,
	671, 672, 0, 190, 349, 350, 191, 192, 622, 653,
	673, 674, 353, 0, 193, 665, 0, 645, 0, 194,
	195, 196, 0, 198, 199, 200, 197, 0, 201, 0,
	202, 203, 0, 699, 204, 205, 206, 0, 646, 647,
	649, 0, 648, 650, 207, 208, 406, 209, 675, 210,
	676, 677, 0, 211, 0, 212, 0, 213, 0, 0,
	668, 215, 0, 216, 0, 0, 0, 610, 217, 219,
	218, 220, 655, 656, 633, 700, 0, 0, 0, 0,
	0, 221, 222, 678, 679, 680, 0, 223, 0, 224,
	0, 0, 701, 0, 225, 666, 0, 365, 0, 0,
	226, 227, 0, 0, 228, 229, 662, 664, 703, 0,
	368, 233, 0, 230, 0, 702, 231, 681, 232, 682,
	683, 684, 685, 686, 0, 644, 0, 704, 234, 235,
	236, 705, 237, 238, 239, 0, 241, 240, 0, 667,
	706, 242, 707, 0, 243, 0, 0, 244, 0, 245,
	246, 247, 249, 377, 248, 708, 250, 251, 253, 252,
	605, 0, 634, 663, 254, 687, 255, 256, 0, 257,
	0, 0, 258, 0, 0, 259, 380, 709, 260, 710,
	657, 261, 262, 263, 264, 265, 0, 266, 658, 267,
	383, 268, 0, 269, 270, 271, 272, 273, 688, 274,
	275, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	281, 284, 285, 286, 287, 0, 288, 711, 289, 290,
	611, 291, 0, 295, 296, 297, 298, 0, 300, 386,
	299, 301, 302, 651, 303, 292, 293, 304, 712, 305,
	689, 388, 306, 0, 313, 307, 308, 294, 309, 312,
	690, 310, 311, 659, 0, 314, 0, 315, 316, 317,
	318, 319, 320, 321, 0, 391, 691, 692, 0, 0,
	322, 323, 660, 661, 632, 324, 325, 326, 327, 0,
	0, 328, 329, 330, 331, 652, 332, 0, 396, 333,
	334, 335, 397, 693, 0, 0, 336, 0, 0, 0,
	0, 337, 338, 339, 340, 341, 606, 0, 637, 626,
	627, 624, 625, 616, 0, 0, 604, 0, 0, 0,
	0, 602, 603, 0, 183, 184, 0, 185, 0, 0,
	612, 0, 654, 619, 0, 0, 615, 186, 187, 188,
	2498, 669, 345, 670, 189, 671, 672, 0, 190, 349,
	350, 191, 192, 622, 653, 673, 674, 353, 0, 193,
	665, 0, 645, 0, 194, 195, 196, 0, 198, 199,
	200, 197, 0, 201, 0, 202, 203, 0, 699, 204,
	205, 2500, 0, 646, 647, 649, 0, 648, 650, 207,
	208, 406, 209, 675, 210, 676, 677, 0, 211, 0,
	212, 0, 213, 0, 0, 668, 215, 0, 216, 0,
	0, 0, 610, 217, 219, 218, 220, 655, 656, 633,
	700, 0, 0, 0, 0, 0, 221, 222, 678, 679,
	680, 0, 223, 0, 224, 0, 0, 701, 0, 225,
	666, 0, 365, 0, 0, 226, 227, 0, 0, 228,
	229, 662, 664, 703, 0, 368, 233, 0, 230, 0,
	702, 231, 681, 232, 682, 683, 684, 685, 686, 0,
	644, 0, 704, 234, 235, 236, 705, 237, 238, 239,
	0, 241, 240, 0, 667, 706, 242, 707, 0, 243,
	0, 0, 244, 0, 245, 246, 247, 249, 377, 248,
	708, 250, 251, 253, 252, 605, 0, 634, 663, 254,
	687, 255, 256, 0, 257, 0, 0, 258, 0, 0,
	259, 380, 709, 260, 710, 657, 261, 262, 263, 264,
	265, 0, 266, 658, 267, 383, 268, 0, 269, 270,
	271, 272, 273, 688, 274, 275, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 281, 284, 285, 286, 287,
	0, 288, 711, 289, 290, 611, 291, 0, 295, 296,
	297, 298, 0, 300, 386, 299, 301, 302, 651, 303,
	292, 293, 304, 712, 305, 689, 388, 306, 0, 313,
	307, 308, 294, 309, 312, 690, 310, 311, 659, 0,
	314, 0, 315, 316, 317, 318, 319, 320, 321, 0,
	391, 691, 692, 0, 0, 322, 323, 660, 661, 632,
	324, 325, 2499, 327, 0, 0, 328, 329, 330, 331,
	652, 332, 0, 396, 333, 334, 335, 397, 693, 0,
	0, 336, 0, 0, 0, 0, 337, 338, 339, 340,
	341, 606, 0, 637, 626, 627, 624, 625, 616, 0,
	0, 604, 0, 0, 0, 0, 602, 603, 0, 183,
	184, 0, 185, 0, 0, 612, 0, 654, 619, 0,
	0, 615, 186, 187, 188, 343, 669, 345, 670, 189,
	671, 672, 0, 190, 349, 350, 191, 192, 622, 653,
	673, 674, 353, 0, 193, 665, 0, 645, 0, 194,
	195, 196, 0, 198, 199, 200, 197, 0, 201, 0,
	202, 203, 0, 699, 204, 205, 206, 0, 646, 647,
	649, 0, 648, 650, 207, 208, 406, 209, 675, 210,
	676, 677, 0, 211, 0, 212, 0, 213, 0, 0,
	668, 215, 0, 216, 0, 0, 0, 610, 217, 219,
	218, 220, 655, 656, 633, 700, 0, 0, 0, 0,
	0, 221, 222, 678, 679, 680, 0, 223, 0, 224,
	0, 0, 701, 0, 225, 666, 0, 365, 0, 0,
	226, 227, 0, 0, 228, 229, 662, 664, 703, 0,
	368, 233, 0, 230, 0, 702, 231, 681, 232, 682,
	683, 684, 685, 686, 0, 644, 0, 704, 234, 235,
	236, 705, 237, 238, 239, 0, 241, 240, 0, 667,
	706, 242, 707, 0, 243, 0, 0, 244, 0, 245,
	246, 247, 249, 377, 248, 708, 250, 251, 253, 252,
	0, 0, 634, 663, 254, 687, 255, 256, 0, 257,
	0, 0, 258, 0, 0, 259, 380, 709, 260, 710,
	657, 261, 262, 263, 264, 265, 0, 266, 658, 267,
	383, 268, 0, 269, 270, 271, 272, 273, 688, 274,
	275, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	281, 284, 285, 286, 287, 0, 288, 711, 289, 290,
	1551, 291, 0, 295, 296, 297, 298, 0, 300, 386,
	299, 301, 302, 651, 303, 292, 293, 304, 712, 305,
	689, 388, 306, 0, 313, 307, 308, 294, 309, 312,
	690, 310, 311, 659, 0, 314, 0, 315, 316, 317,
	318, 319, 320, 321, 0, 391, 691, 692, 0, 0,
	322, 323, 660, 661, 632, 324, 325, 326, 327, 0,
	0, 328, 329, 330, 331, 652, 332, 0, 396, 333,
	334, 335, 397, 693, 0, 0, 336, 0, 0, 0,
	0, 337, 338, 339, 340, 341, 0, 0, 637, 626,
	627, 624, 625, 616, 0, 0, 1549, 0, 0, 0,
	0, 1547, 1548, 0, 183, 184, 0, 185, 0, 0,
	1550, 0, 654, 619, 0, 0, 615, 186, 187, 188,
	343, 669, 345, 670, 189, 671, 672, 0, 190, 349,
	350, 191, 192, 0, 653, 673, 674, 353, 0, 193,
	665, 0, 645, 0, 194, 195, 196, 0, 198, 199,
	200, 197, 0, 201, 0, 202, 203, 0, 699, 204,
	205, 206, 0, 646, 647, 649, 0, 648, 650, 207,
	208, 406, 209, 675, 210, 676, 677, 0, 211, 0,
	212, 0, 213, 0, 0, 668, 215, 0, 216, 0,
	0, 0, 358, 217, 219, 218, 220, 655, 656, 633,
	700, 0, 0, 0, 0, 0, 221, 222, 678, 679,
	680, 0, 223, 0, 224, 0, 0, 701, 0, 225,
	666, 0, 365, 0, 0, 226, 227, 0, 0, 228,
	229, 662, 664, 703, 0, 368, 233, 0, 230, 0,
	702, 231, 681, 232, 682, 683, 684, 685, 686, 0,
	644, 0, 704, 234, 235, 236, 705, 237, 238, 239,
	0, 241, 240, 0, 667, 706, 242, 707, 0, 243,
	0, 0, 244, 0, 245, 246, 247, 249, 377, 248,
	708, 250, 251, 253, 252, 0, 0, 634, 663, 254,
	687, 255, 256, 0, 257, 0, 0, 258, 0, 0,
	259, 380, 709, 260, 710, 657, 261, 262, 263, 264,
	265, 0, 266, 658, 267, 383, 268, 0, 269, 270,
	271, 272, 273, 688, 274, 275, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 281, 284, 285, 286, 287,
	0, 288, 711, 289, 290, 1551, 291, 0, 295, 296,
	297, 298, 0, 300, 386, 299, 301, 302, 651, 303,
	292, 293, 304, 712, 305, 689, 388, 306, 0, 313,
	307, 308, 294, 309, 312, 690, 310, 311, 659, 0,
	314, 0, 315, 316, 317, 318, 319, 320, 321, 0,
	391, 691, 692, 0, 0, 322, 323, 660, 661, 632,
	324, 325, 326, 327, 0, 0, 328, 329, 330, 331,
	652, 332, 0, 396, 333, 334, 335, 397, 693, 0,
	0, 336, 0, 0, 0, 0, 337, 338, 339, 340,
	341, 0, 0, 637, 626, 627, 624, 625, 616, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 183,
	184, 0, 185, 0, 0, 1550, 0, 654, 619, 0,
	0, 615, 186, 187, 188, 0, 669, 345, 670, 189,
	671, 672, 0, 190, 349, 350, 191, 192, 622, 653,
	673, 674, 353, 0, 193, 665, 0, 645, 0, 194,
	195, 196, 0, 198, 199, 200, 197, 0, 201, 0,
	202, 203, 0, 699, 204, 205, 2500, 0, 646, 647,
	649, 0, 648, 650, 207, 208, 406, 209, 675, 210,
	676, 677, 0, 211, 0, 212, 0, 213, 0, 0,
	668, 215, 0, 216, 0, 0, 0, 610, 217, 219,
	218, 220, 655, 656, 633, 700, 0, 0, 0, 0,
	0, 221, 222, 678, 679, 680, 0, 223, 0, 224,
	0, 0, 701, 0, 225, 666, 0, 365, 0, 0,
	226, 227, 0, 0, 228, 229, 662, 664, 0, 0,
	368, 233, 0, 230, 0, 702, 231, 681, 232, 682,
	683, 684, 685, 686, 0, 644, 0, 0, 234, 235,
	236, 705, 237, 238, 239, 0, 241, 240, 0, 667,
	706, 242, 0, 0, 243, 0, 0, 244, 0, 245,
	246, 247, 249, 377, 248, 708, 250, 251, 253, 252,
	605, 0, 634, 663, 254, 687, 255, 256, 0, 257,
	0, 0, 258, 0, 0, 259, 380, 709, 260, 710,
	657, 261, 262, 263, 264, 265, 0, 266, 658, 267,
	383, 268, 0, 269, 270, 271, 272, 273, 688, 274,
	275, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	281, 284, 285, 286, 287, 0, 288, 711, 289, 290,
	611, 291, 0, 295, 296, 297, 298, 0, 300, 386,
	299, 301, 302, 651, 303, 292, 293, 304, 0, 305,
	689, 388, 306, 0, 313, 307, 308, 294, 309, 312,
	690, 310, 311, 659, 0, 314, 0, 315, 316, 317,
	318, 319, 320, 321, 0, 391, 691, 692, 0, 0,
	322, 323, 660, 661, 632, 324, 325, 2499, 327, 0,
	0, 328, 329, 330, 331, 652, 332, 0, 396, 333,
	334, 335, 397, 693, 0, 0, 336, 0, 0, 0,
	0, 337, 338, 339, 340, 341, 0, 0, 637, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 602, 603, 0, 183, 184, 0, 185, 0, 0,
	612, 0, 654, 0, 0, 0, 615, 186, 187, 188,
	343, 344, 345, 346, 189, 347, 348, 0, 190, 349,
	350, 191, 192, 0, 653, 351, 352, 353, 0, 193,
	665, 0, 645, 0, 194, 195, 196, 0, 198, 199,
	200, 197, 0, 201, 0, 202, 203, 0, 699, 204,
	205, 206, 0, 646, 647, 649, 0, 648, 650, 207,
	208, 406, 209, 355, 210, 356, 357, 0, 211, 0,
	212, 0, 213, 0, 0, 214, 215, 0, 216, 0,
	0, 0, 358, 217, 219, 218, 220, 655, 656, 0,
	700, 0, 0, 0, 0, 0, 221, 222, 361, 362,
	363, 0, 223, 0, 224, 0, 0, 701, 0, 225,
	666, 0, 365, 0, 0, 226, 227, 0, 0, 228,
	229, 662, 664, 703, 0, 368, 233, 0, 230, 0,
	702, 231, 369, 232, 370, 371, 372, 373, 374, 0,
	375, 0, 704, 234, 235, 236, 705, 237, 238, 239,
	0, 241, 240, 0, 667, 706, 242, 707, 0, 243,
	0, 0, 244, 0, 245, 246, 247, 249, 377, 248,
	708, 250, 251, 253, 252, 0, 0, 0, 663, 254,
	379, 255, 256, 0, 257, 0, 0, 258, 0, 0,
	259, 380, 709, 260, 710, 657, 261, 262, 263, 264,
	265, 0, 266, 658, 267, 383, 268, 0, 269, 270,
	271, 272, 273, 384, 274, 275, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 281, 284, 285, 286, 287,
	0, 288, 711, 289, 290, 385, 291, 0, 295, 296,
	297, 298, 0, 300, 386, 299, 301, 302, 651, 303,
	292, 293, 304, 712, 305, 387, 388, 306, 0, 313,
	307, 308, 294, 309, 312, 389, 310, 311, 659, 0,
	314, 0, 315, 316, 317, 318, 319, 320, 321, 0,
	391, 392, 393, 0, 0, 322, 323, 660, 661, 0,
	324, 325, 326, 327, 0, 0, 328, 329, 330, 331,
	652, 332, 0, 396, 333, 334, 335, 397, 398, 0,
	0, 336, 0, 0, 0, 0, 337, 338, 339, 340,
	341, 926, 0, 885, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 183,
	184, 0, 185, 0, 0, 2138, 0, 342, 0, 0,
	0, 0, 186, 187, 188, 343, 344, 345, 346, 189,
	347, 348, 0, 190, 349, 350, 191, 192, 0, 0,
	351, 352, 353, 0, 193, 354, 0, 775, 0, 194,
	195, 196, 0, 198, 199, 200, 197, 0, 201, 0,
	202, 203, 0, 699, 204, 205, 206, 0, 0, 0,
	0, 0, 0, 0, 207, 208, 406, 209, 355, 210,
	356, 357, 0, 211, 0, 212, 0, 213, 0, 0,
	214, 215, 0, 216, 0, 0, 0, 358, 217, 219,
	218, 220, 359, 360, 0, 700, 0, 0, 0, 0,
	0, 221, 222, 361, 362, 363, 0, 223, 0, 224,
	0, 0, 701, 0, 225, 364, 0, 365, 0, 0,
	226, 227, 0, 0, 228, 229, 366, 367, 703, 0,
	368, 233, 0, 230, 0, 702, 231, 369, 232, 370,
	371, 372, 373, 374, 0, 375, 0, 704, 234, 235,
	236, 705, 237, 238, 239, 0, 241, 240, 0, 376,
	706, 242, 707, 0, 243, 0, 0, 244, 0, 245,
	246, 247, 249, 377, 248, 708, 250, 251, 253, 252,
	0, 0, 0, 378, 254, 379, 255, 256, 0, 257,
	0, 0, 258, 0, 0, 259, 380, 709, 260, 710,
	381, 261, 262, 263, 264, 265, 0, 266, 382, 267,
	383, 268, 0, 269, 270, 271, 272, 273, 384, 274,
	275, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	281, 284, 285, 286, 287, 0, 288, 711, 289, 290,
	385, 291, 0, 295, 296, 297, 298, 139, 300, 386,
	299, 301, 302, 0, 303, 292, 293, 304, 712, 305,
	387, 388, 306, 0, 313, 307, 308, 294, 309, 312,
	389, 310, 311, 390, 0, 314, 141, 315, 316, 317,
	318, 319, 320, 321, 0, 391, 392, 393, 0, 0,
	322, 323, 394, 395, 0, 324, 325, 326, 327, 0,
	0, 328, 329, 330, 331, 0, 332, 0, 396, 333,
	334, 335, 929, 398, 0, 0, 336, 0, 0, 0,
	133, 337, 338, 339, 340, 341, 588, 134, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 183, 184, 0, 185, 0, 0,
	124, 0, 342, 0, 0, 0, 0, 186, 187, 188,
	343, 344, 345, 346, 189, 347, 348, 0, 190, 349,
	350, 191, 192, 0, 0, 351, 352, 353, 0, 193,
	354, 0, 0, 0, 194, 195, 196, 0, 198, 199,
	200, 197, 0, 201, 0, 202, 203, 0, 0, 204,
	205, 206, 0, 0, 0, 0, 0, 0, 0, 207,
	208, 406, 209, 355, 210, 356, 357, 0, 211, 0,
	212, 0, 213, 0, 0, 214, 215, 0, 216, 0,
	0, 0, 358, 217, 219, 218, 220, 359, 360, 0,
	0, 0, 0, 0, 0, 0, 221, 222, 361, 362,
	363, 0, 223, 0, 224, 0, 0, 0, 0, 225,
	364, 0, 365, 0, 0, 226, 227, 0, 0, 228,
	229, 366, 367, 0, 0, 368, 233, 0, 230, 0,
	0, 231, 369, 232, 370, 371, 372, 373, 374, 0,
	375, 0, 0, 234, 235, 236, 0, 237, 238, 239,
	0, 241, 240, 0, 376, 0, 242, 0, 0, 243,
	0, 0, 244, 0, 245, 246, 247, 249, 377, 248,
	0, 250, 251, 253, 252, 0, 0, 0, 378, 254,
	379, 255, 256, 0, 257, 0, 753, 258, 0, 0,
	259, 380, 0, 260, 0, 381, 261, 262, 263, 264,
	265, 0, 266, 382, 267, 383, 268, 0, 269, 270,
	271, 272, 273, 384, 274, 275, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 281, 284, 285, 286, 287,
	0, 288, 0, 289, 290, 385, 291, 0, 295, 296,
	297, 298, 139, 300, 386, 299, 301, 302, 0, 303,
	292, 293, 304, 0, 305, 387, 388, 306, 0, 313,
	307, 308, 294, 309, 312, 389, 310, 311, 390, 0,
	314, 141, 315, 316, 317, 318, 319, 320, 321, 0,
	391, 392, 393, 0, 0, 322, 323, 394, 395, 0,
	324, 325, 326, 327, 0, 0, 328, 329, 330, 331,
	0, 332, 0, 396, 333, 334, 335, 929, 398, 0,
	0, 336, 0, 0, 0, 133, 337, 338, 339, 340,
	341, 0, 134, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 183,
	184, 0, 185, 747, 0, 1193, 0, 342, 0, 0,
	0, 0, 186, 187, 188, 343, 344, 345, 346, 189,
	347, 348, 0, 190, 349, 350, 191, 192, 0, 0,
	351, 352, 353, 0, 193, 354, 0, 0, 0, 194,
	195, 196, 0, 198, 199, 200, 197, 0, 201, 0,
	202, 203, 0, 0, 204, 205, 206, 0, 0, 0,
	0, 0, 0, 0, 207, 208, 406, 209, 355, 210,
	356, 357, 0, 211, 0, 212, 0, 213, 0, 0,
	214, 215, 0, 216, 0, 0, 0, 358, 217, 219,
	218, 220, 359, 360, 0, 0, 0, 0, 0, 0,
	0, 221, 222, 361, 362, 363, 0, 223, 0, 224,
	0, 0, 0, 0, 225, 364, 0, 365, 0, 0,
	226, 227, 0, 0, 228, 229, 366, 367, 0, 0,
	368, 233, 0, 230, 0, 0, 231, 369, 232, 370,
	371, 372, 373, 374, 0, 375, 0, 0, 234, 235,
	236, 0, 237, 238, 239, 0, 241, 240, 0, 376,
	0, 242, 0, 0, 243, 0, 0, 244, 0, 245,
	246, 247, 249, 377, 248, 0, 250, 251, 253, 252,
	0, 0, 0, 378, 254, 379, 255, 256, 0, 257,
	0, 753, 258, 0, 0, 259, 380, 0, 260, 0,
	381, 261, 262, 263, 264, 265, 0, 266, 382, 267,
	383, 268, 0, 269, 270, 271, 272, 273, 384, 274,
	275, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	281, 284, 285, 286, 287, 0, 288, 0, 289, 290,
	385, 291, 0, 295, 296, 297, 298, 139, 300, 386,
	299, 301, 302, 0, 303, 292, 293, 304, 0, 305,
	387, 388, 306, 0, 313, 307, 308, 294, 309, 312,
	389, 310, 311, 390, 0, 314, 141, 315, 316, 317,
	318, 319, 320, 321, 0, 391, 392, 393, 0, 0,
	322, 323, 394, 395, 0, 324, 325, 326, 327, 0,
	0, 328, 329, 330, 331, 0, 332, 0, 396, 333,
	334, 335, 929, 398, 0, 0, 336, 0, 0, 0,
	133, 337, 338, 339, 340, 341, 588, 134, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 183, 184, 0, 185, 747, 0,
	1193, 0, 342, 0, 0, 0, 0, 186, 187, 188,
	343, 344, 345, 346, 189, 347, 348, 0, 190, 349,
	350, 191, 192, 0, 0, 351, 352, 353, 0, 193,
	354, 0, 0, 0, 194, 195, 196, 0, 198, 199,
	200, 197, 0, 201, 0, 202, 203, 0, 0, 204,
	205, 206, 0, 0, 0, 0, 0, 0, 0, 207,
	208, 406, 209, 355, 210, 356, 357, 0, 211, 0,
	212, 0, 213, 0, 0, 214, 215, 0, 216, 0,
	0, 0, 358, 217, 219, 218, 220, 359, 360, 0,
	0, 0, 0, 0, 0, 0, 221, 222, 361, 362,
	363, 0, 223, 0, 224, 0, 0, 0, 0, 225,
	364, 0, 365, 0, 0, 226, 227, 0, 0, 228,
	229, 366, 367, 0, 0, 368, 233, 0, 230, 0,
	0, 231, 369, 232, 370, 371, 372, 373, 374, 0,
	375, 0, 0, 234, 235, 236, 0, 237, 238, 239,
	0, 241, 240, 0, 376, 0, 242, 0, 0, 243,
	0, 0, 244, 0, 245, 246, 247, 249, 377, 248,
	0, 250, 251, 253, 252, 0, 0, 0, 378, 254,
	379, 255, 256, 0, 257, 0, 0, 258, 0, 0,
	259, 380, 0, 260, 0, 381, 261, 262, 263, 264,
	265, 0, 266, 382, 267, 383, 268, 0, 269, 270,
	271, 272, 273, 384, 274, 275, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 281, 284, 285, 286, 287,
	0, 288, 0, 289, 290, 385, 291, 0, 295, 296,
	297, 298, 139, 300, 386, 299, 301, 302, 0, 303,
	292, 293, 304, 0, 305, 387, 388, 306, 0, 313,
	307, 308, 294, 309, 312, 389, 310, 311, 390, 0,
	314, 141, 315, 316, 317, 318, 319, 320, 321, 0,
	391, 392, 393, 0, 0, 322, 323, 394, 395, 0,
	324, 325, 326, 327, 0, 0, 328, 329, 330, 331,
	0, 332, 0, 396, 333, 334, 335, 929, 398, 0,
	0, 336, 0, 0, 0, 133, 337, 338, 339, 340,
	341, 1881, 134, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 183,
	184, 0, 185, 0, 0, 124, 0, 342, 0, 0,
	0, 0, 186, 187, 188, 343, 344, 345, 346, 189,
	347, 348, 0, 190, 349, 350, 191, 192, 0, 0,
	351, 352, 353, 0, 193, 354, 0, 0, 0, 194,
	195, 196, 0, 198, 199, 200, 197, 0, 201, 0,
	202, 203, 0, 0, 204, 205, 206, 0, 0, 0,
	0, 0, 0, 0, 207, 208, 406, 209, 355, 210,
	356, 357, 0, 211, 0, 212, 0, 213, 0, 0,
	214, 215, 0, 216, 0, 0, 0, 358, 217, 219,
	218, 220, 359, 360, 0, 0, 0, 0, 0, 0,
	0, 221, 222, 361, 362, 363, 0, 223, 0, 224,
	0, 0, 0, 0, 225, 364, 0, 365, 0, 0,
	226, 227, 0, 0, 228, 229, 366, 367, 0, 0,
	368, 233, 0, 230, 0, 0, 231, 369, 232, 370,
	371, 372, 373, 374, 0, 375, 0, 0, 234, 235,
	236, 0, 237, 238, 239, 0, 241, 240, 0, 376,
	0, 242, 0, 0, 243, 0, 0, 244, 0, 245,
	246, 247, 249, 377, 248, 0, 250, 251, 253, 252,
	0, 0, 0, 378, 254, 379, 255, 256, 0, 257,
	0, 753, 258, 0, 0, 259, 380, 0, 260, 0,
	381, 261, 262, 263, 264, 265, 0, 266, 382, 267,
	383, 268, 0, 269, 270, 271, 272, 273, 384, 274,
	275, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	281, 284, 285, 286, 287, 0, 288, 0, 289, 290,
	385, 291, 0, 295, 296, 297, 298, 0, 300, 386,
	299, 301, 302, 0, 303, 292, 293, 304, 0, 305,
	387, 388, 306, 0, 313, 307, 308, 294, 309, 312,
	389, 310, 311, 390, 0, 314, 0, 315, 316, 317,
	318, 319, 320, 321, 0, 391, 392, 393, 0, 0,
	322, 323, 394, 395, 0, 324, 325, 326, 327, 0,
	0, 328, 329, 330, 331, 0, 332, 0, 396, 333,
	334, 335, 397, 398, 0, 0, 336, 0, 0, 0,
	0, 337, 338, 339, 340, 341, 746, 0, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 183, 184, 0, 185, 747, 0,
	752, 0, 342, 0, 0, 0, 0, 186, 187, 188,
	343, 344, 345, 346, 189, 347, 348, 0, 190, 349,
	350, 191, 192, 0, 0, 351, 352, 353, 0, 193,
	354, 0, 0, 0, 194, 195, 196, 0, 198, 199,
	200, 197, 0, 201, 0, 202, 203, 0, 0, 204,
	205, 206, 0, 0, 0, 0, 0, 0, 0, 207,
	208, 406, 209, 355, 210, 356, 357, 0, 211, 0,
	212, 0, 213, 0, 0, 214, 215, 0, 216, 0,
	0, 0, 358, 217, 219, 218, 220, 359, 360, 0,
	0, 0, 0, 0, 0, 0, 221, 222, 361, 362,
	363, 0, 223, 0, 224, 0, 0, 0, 0, 225,
	364, 0, 365, 0, 0, 226, 227, 0, 0, 228,
	229, 366, 367, 0, 0, 368, 233, 0, 230, 0,
	0, 231, 369, 232, 370, 371, 372, 373, 374, 0,
	375, 0, 0, 234, 235, 236, 0, 237, 238, 239,
	0, 241, 240, 0, 376, 0, 242, 0, 0, 243,
	0, 0, 244, 0, 245, 246, 247, 249, 377, 248,
	0, 250, 251, 253, 252, 0, 0, 0, 378, 254,
	379, 255, 256, 0, 257, 0, 753, 258, 0, 0,
	259, 380, 0, 260, 0, 381, 261, 262, 263, 264,
	265, 0, 266, 382, 267, 383, 268, 0, 269, 270,
	271, 272, 273, 384, 274, 275, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 281, 284, 285, 286, 287,
	0, 288, 0, 289, 290, 385, 291, 0, 295, 296,
	297, 298, 0, 300, 386, 299, 301, 302, 0, 303,
	292, 293, 304, 0, 305, 387, 388, 306, 0, 313,
	307, 308, 294, 309, 312, 389, 310, 311, 390, 0,
	314, 0, 315, 316, 317, 318, 319, 320, 321, 0,
	391, 392, 393, 0, 0, 322, 323, 394, 395, 0,
	324, 325, 326, 327, 0, 0, 328, 329, 330, 331,
	0, 332, 0, 396, 333, 334, 335, 397, 398, 0,
	0, 336, 0, 0, 0, 0, 337, 338, 339, 340,
	341, 0, 180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 183, 184,
	0, 185, 0, 747, 0, 752, 342, 0, 0, 0,
	0, 186, 187, 188, 343, 344, 345, 346, 189, 347,
	348, 0, 190, 349, 350, 191, 192, 0, 0, 351,
	352, 353, 0, 193, 354, 0, 0, 0, 194, 195,
	196, 0, 198, 199, 200, 197, 0, 201, 0, 202,
	203, 0, 0, 204, 205, 206, 0, 0, 0, 0,
	0, 0, 0, 207, 208, 406, 209, 355, 210, 356,
	357, 0, 211, 0, 212, 0, 213, 0, 0, 214,
	215, 0, 216, 0, 0, 0, 358, 217, 219, 218,
	220, 359, 360, 0, 0, 0, 0, 0, 0, 0,
	221, 222, 361, 362, 363, 0, 223, 0, 224, 0,
	0, 0, 0, 225, 364, 0, 365, 0, 0, 226,
	227, 0, 0, 228, 229, 366, 367, 0, 0, 368,
	233, 0, 230, 0, 0, 231, 369, 232, 370, 371,
	372, 373, 374, 0, 375, 0, 0, 234, 235, 236,
	0, 237, 238, 239, 0, 241, 240, 0, 376, 0,
	242, 0, 0, 243, 0, 0, 244, 0, 245, 246,
	247, 249, 377, 248, 0, 250, 251, 253, 252, 0,
	0, 0, 378, 254, 379, 255, 256, 0, 257, 0,
	753, 258, 0, 0, 259, 380, 0, 260, 0, 381,
	261, 262, 263, 264, 265, 0, 266, 382, 267, 383,
	268, 0, 269, 270, 271, 272, 273, 384, 274, 275,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 281,
	284, 285, 286, 287, 0, 288, 0, 289, 290, 385,
	291, 0, 295, 296, 297, 298, 0, 300, 386, 299,
	301, 302, 0, 303, 292, 293, 304, 0, 305, 387,
	388, 306, 0, 313, 307, 308, 294, 309, 312, 389,
	310, 311, 390, 0, 314, 0, 315, 316, 317, 318,
	319, 320, 321, 0, 391, 392, 393, 0, 0, 322,
	323, 394, 395, 0, 324, 325, 326, 327, 0, 0,
	328, 329, 330, 331, 0, 332, 0, 396, 333, 334,
	335, 397, 398, 0, 0, 336, 0, 0, 0, 0,
	337, 338, 339, 340, 341, 0, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 183, 184, 0, 185, 0, 747, 0, 752,
	342, 0, 0, 0, 0, 186, 187, 188, 343, 344,
	345, 346, 189, 347, 348, 0, 190, 349, 350, 191,
	192, 0, 0, 351, 352, 353, 0, 193, 354, 0,
	0, 0, 194, 195, 196, 0, 198, 199, 200, 197,
	0, 201, 0, 202, 203, 0, 0, 204, 205, 206,
	0, 0, 0, 0, 0, 0, 0, 207, 208, 406,
	209, 355, 210, 356, 357, 0, 211, 0, 212, 0,
	213, 0, 0, 214, 215, 0, 216, 0, 0, 0,
	358, 217, 219, 218, 220, 359, 360, 0, 0, 0,
	0, 0, 0, 0, 221, 222, 361, 362, 363, 0,
	223, 0, 224, 0, 0, 0, 0, 225, 364, 0,
	365, 0, 0, 226, 227, 0, 0, 228, 229, 366,
	367, 0, 0, 368, 233, 0, 230, 0, 0, 231,
	369, 232, 370, 371, 372, 373, 374, 0, 375, 0,
	0, 234, 235, 236, 0, 237, 238, 239, 0, 241,
	240, 0, 376, 0, 242, 0, 0, 243, 0, 0,
	244, 0, 245, 246, 247, 249, 377, 248, 0, 250,
	251, 253, 252, 0, 0, 0, 378, 254, 379, 255,
	256, 0, 257, 0, 0, 258, 0, 0, 259, 380,
	0, 260, 0, 381, 261, 262, 263, 264, 265, 0,
	266, 382, 267, 383, 268, 0, 269, 270, 271, 272,
	273, 384, 274, 275, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 281, 284, 285, 286, 287, 0, 288,
	0, 289, 290, 385, 291, 0, 295, 296, 297, 298,
	0, 300, 386, 299, 301, 302, 0, 303, 292, 293,
	304, 0, 305, 387, 388, 306, 0, 313, 307, 308,
	294, 309, 312, 389, 310, 311, 390, 0, 314, 0,
	315, 316, 317, 318, 319, 320, 321, 0, 391, 392,
	393, 0, 0, 322, 323, 394, 395, 0, 324, 325,
	326, 327, 0, 0, 328, 329, 330, 331, 0, 332,
	0, 396, 333, 334, 335, 397, 398, 0, 0, 336,
	0, 0, 0, 0, 337, 338, 339, 340, 341, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 183, 184, 0, 185, 0,
	0, 0, 0, 342, 1226, 0, 0, 0, 186, 187,
	188, 343, 344, 345, 346, 189, 347, 348, 0, 190,
	349, 350, 191, 192, 0, 0, 351, 352, 353, 0,
	193, 354, 0, 0, 0, 194, 195, 196, 0, 198,
	199, 200, 197, 0, 201, 0, 202, 203, 0, 0,
	204, 205, 206, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 406, 209, 355, 210, 356, 357, 0, 211,
	0, 212, 0, 213, 0, 0, 214, 215, 0, 216,
	0, 0, 0, 358, 217, 219, 218, 220, 359, 360,
	0, 0, 0, 0, 0, 0, 0, 221, 222, 361,
	362, 363, 0, 223, 0, 224, 0, 0, 0, 0,
	225, 364, 0, 365, 0, 0, 226, 227, 0, 0,
	228, 229, 366, 367, 0, 0, 368, 233, 0, 230,
	0, 0, 231, 369, 232, 370, 371, 372, 373, 374,
	0, 375, 0, 0, 234, 235, 236, 0, 237, 238,
	239, 0, 241, 240, 0, 376, 0, 242, 0, 0,
	243, 0, 0, 244, 0, 245, 246, 247, 249, 377,
	248, 0, 250, 251, 253, 252, 0, 0, 0, 378,
	254, 379, 255, 256, 0, 257, 0, 0, 258, 0,
	0, 259, 380, 0, 260, 0, 381, 261, 262, 263,
	264, 265, 0, 266, 382, 267, 383, 268, 0, 269,
	270, 271, 272, 273, 384, 274, 275, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 281, 284, 285, 286,
	287, 0, 288, 0, 289, 290, 385, 291, 0, 295,
	296, 297, 298, 0, 300, 386, 299, 301, 302, 0,
	303, 292, 293, 304, 0, 305, 387, 388, 306, 0,
	313, 307, 308, 294, 309, 312, 389, 310, 311, 390,
	0, 314, 0, 315, 316, 317, 318, 319, 320, 321,
	0, 391, 392, 393, 0, 0, 322, 323, 394, 395,
	0, 324, 325, 326, 327, 0, 0, 328, 329, 330,
	331, 0, 332, 0, 396, 333, 334, 335, 397, 398,
	0, 0, 336, 0, 0, 0, 0, 337, 338, 339,
	340, 341, 0, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 183,
	184, 0, 185, 0, 0, 0, 1696, 342, 0, 0,
	0, 0, 186, 187, 188, 343, 344, 345, 346, 189,
	347, 348, 0, 190, 349, 350, 191, 192, 0, 0,
	351, 352, 353, 0, 193, 354, 0, 0, 0, 194,
	195, 196, 0, 198, 199, 200, 197, 0, 201, 0,
	202, 203, 0, 0, 204, 205, 206, 0, 0, 0,
	0, 0, 0, 0, 207, 208, 406, 209, 355, 210,
	356, 357, 0, 211, 0, 212, 0, 213, 0, 0,
	214, 215, 0, 216, 0, 0, 0, 358, 217, 219,
	218, 220, 359, 360, 0, 0, 0, 0, 0, 0,
	0, 221, 222, 361, 362, 363, 0, 223, 0, 224,
	0, 0, 0, 0, 225, 364, 0, 365, 0, 0,
	226, 227, 0, 0, 228, 229, 366, 367, 0, 0,
	368, 233, 0, 230, 0, 0, 231, 369, 232, 370,
	371, 372, 373, 374, 0, 375, 0, 0, 234, 235,
	236, 0, 237, 238, 239, 0, 241, 240, 0, 376,
	0, 242, 0, 0, 243, 0, 0, 244, 0, 245,
	246, 247, 249, 377, 248, 0, 250, 251, 253, 252,
	0, 0, 0, 378, 254, 379, 255, 256, 0, 257,
	0, 0, 258, 0, 0, 259, 380, 0, 260, 0,
	381, 261, 262, 263, 264, 265, 0, 266, 382, 267,
	383, 268, 0, 269, 270, 271, 272, 273, 384, 274,
	275, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	281, 284, 285, 286, 287, 0, 288, 0, 289, 290,
	385, 291, 0, 295, 296, 297, 298, 0, 300, 386,
	299, 301, 302, 0, 303, 292, 293, 304, 0, 305,
	387, 388, 306, 0, 313, 307, 308, 294, 309, 312,
	389, 310, 311, 390, 0, 314, 0, 315, 316, 317,
	318, 319, 320, 321, 0, 391, 392, 393, 0, 0,
	322, 323, 394, 395, 0, 324, 325, 326, 327, 0,
	0, 328, 329, 330, 331, 0, 332, 0, 396, 333,
	334, 335, 397, 398, 0, 0, 336, 0, 0, 0,
	0, 337, 338, 339, 340, 341, 0, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 183, 184, 0, 185, 0, 0, 0,
	2051, 342, 0, 0, 0, 0, 186, 187, 188, 343,
	344, 345, 346, 189, 347, 348, 0, 190, 349, 350,
	191, 192, 0, 0, 351, 352, 353, 0, 193, 354,
	0, 0, 0, 194, 195, 196, 0, 198, 199, 200,
	197, 0, 201, 0, 202, 203, 0, 0, 204, 205,
	206, 0, 0, 0, 0, 0, 0, 0, 207, 208,
	406, 209, 355, 210, 356, 357, 0, 211, 0, 212,
	0, 213, 0, 0, 214, 215, 0, 216, 0, 0,
	0, 358, 217, 219, 218, 220, 359, 360, 0, 0,
	0, 0, 0, 0, 0, 221, 222, 361, 362, 363,
	0, 223, 0, 224, 0, 0, 0, 0, 225, 364,
	0, 365, 0, 0, 226, 227, 0, 0, 228, 229,
	366, 367, 0, 0, 368, 233, 0, 230, 0, 0,
	231, 369, 232, 370, 371, 372, 373, 374, 0, 375,
	0, 0, 234, 235, 236, 0, 237, 238, 239, 0,
	241, 240, 0, 376, 0, 242, 0, 0, 243, 0,
	0, 244, 0, 245, 246, 247, 249, 377, 248, 0,
	250, 251, 253, 252, 0, 0, 0, 378, 254, 379,
	255, 256, 0, 257, 0, 0, 258, 0, 0, 259,
	380, 0, 260, 0, 381, 261, 262, 263, 264, 265,
	0, 266, 382, 267, 383, 268, 0, 269, 270, 271,
	272, 273, 384, 274, 275, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 281, 284, 285, 286, 287, 0,
	288, 0, 289, 290, 385, 291, 0, 295, 296, 297,
	298, 0, 300, 386, 299, 301, 302, 0, 303, 292,
	293, 304, 0, 305, 387, 388, 306, 0, 313, 307,
	308, 294, 309, 312, 389, 310, 311, 390, 0, 314,
	0, 315, 316, 317, 318, 319, 320, 321, 0, 391,
	392, 393, 0, 0, 322, 323, 394, 395, 0, 324,
	325, 326, 327, 0, 0, 328, 329, 330, 331, 0,
	332, 0, 396, 333, 334, 335, 397, 398, 0, 0,
	336, 0, 0, 0, 0, 337, 338, 339, 340, 341,
	0, 637, 626, 627, 624, 625, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 183, 184, 0,
	185, 0, 0, 0, 1196, 342, 0, 0, 0, 0,
	186, 187, 188, 343, 669, 345, 670, 189, 671, 672,
	0, 190, 349, 350, 191, 192, 0, 0, 673, 674,
	353, 0, 193, 354, 0, 775, 0, 194, 195, 196,
	0, 198, 199, 200, 197, 0, 201, 0, 202, 203,
	0, 699, 204, 205, 206, 0, 0, 0, 0, 0,
	0, 0, 207, 208, 406, 209, 675, 210, 676, 677,
	0, 211, 0, 212, 0, 213, 0, 0, 668, 215,
	0, 216, 0, 0, 0, 358, 217, 219, 218, 220,
	359, 360, 633, 700, 0, 0, 0, 0, 0, 221,
	222, 678, 679, 680, 0, 223, 0, 224, 0, 0,
	701, 0, 225, 364, 0, 365, 0, 0, 226, 227,
	0, 0, 228, 229, 366, 367, 703, 0, 368, 233,
	0, 230, 0, 702, 231, 681, 232, 682, 683, 684,
	685, 686, 0, 644, 0, 704, 234, 235, 236, 705,
	237, 238, 239, 0, 241, 240, 0, 376, 706, 242,
	707, 0, 243, 0, 0, 244, 0, 245, 246, 247,
	249, 377, 248, 708, 250, 251, 253, 252, 0, 0,
	634, 378, 254, 687, 255, 256, 0, 257, 0, 0,
	258, 0, 0, 259, 380, 709, 260, 710, 381, 261,
	262, 263, 264, 265, 0, 266, 382, 267, 383, 268,
	0, 269, 270, 271, 272, 273, 688, 274, 275, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 281, 284,
	285, 286, 287, 0, 288, 711, 289, 290, 385, 291,
	0, 295, 296, 297, 298, 0, 300, 386, 299, 301,
	302, 0, 303, 292, 293, 304, 712, 305, 689, 388,
	306, 0, 313, 307, 308, 294, 309, 312, 690, 310,
	311, 390, 0, 314, 0, 315, 316, 317, 318, 319,
	320, 321, 0, 391, 691, 692, 0, 0, 322, 323,
	394, 395, 632, 324, 325, 326, 327, 0, 0, 328,
	329, 330, 331, 0, 332, 0, 396, 333, 334, 335,
	397, 693, 0, 488, 336, 180, 0, 0, 0, 337,
	338, 339, 340, 341, 0, 0, 0, 0, 0, 0,
	0, 183, 184, 0, 185, 0, 0, 0, 0, 342,
	0, 0, 0, 0, 186, 187, 188, 343, 344, 345,
	346, 189, 347, 348, 0, 190, 349, 350, 191, 192,
	0, 0, 351, 352, 353, 0, 193, 354, 0, 0,
	0, 194, 195, 196, 0, 198, 199, 200, 197, 0,
	201, 0, 202, 203, 0, 0, 204, 205, 206, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 176, 209,
	355, 210, 356, 357, 0, 211, 0, 212, 0, 213,
	0, 0, 214, 215, 0, 216, 0, 0, 0, 358,
	217, 219, 218, 220, 359, 360, 0, 0, 0, 0,
	0, 0, 0, 221, 222, 361, 362, 363, 0, 223,
	0, 224, 0, 0, 0, 0, 225, 364, 0, 365,
	0, 0, 226, 227, 0, 0, 228, 229, 366, 367,
	0, 0, 368, 233, 0, 230, 0, 0, 231, 369,
	232, 370, 371, 372, 373, 374, 0, 375, 0, 0,
	234, 235, 236, 0, 237, 238, 239, 0, 241, 240,
	0, 376, 0, 242, 0, 0, 243, 0, 0, 244,
	0, 245, 246, 247, 249, 377, 248, 0, 250, 251,
	253, 252, 0, 0, 0, 378, 254, 379, 255, 256,
	0, 257, 0, 0, 258, 0, 0, 259, 380, 0,
	260, 0, 381, 261, 262, 263, 264, 265, 0, 266,
	382, 267, 383, 268, 0, 269, 270, 271, 272, 273,
	384, 274, 275, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 281, 284, 285, 286, 287, 0, 288, 0,
	289, 290, 385, 291, 0, 295, 296, 297, 298, 0,
	300, 386, 299, 301, 302, 0, 303, 292, 293, 304,
	0, 305, 387, 388, 306, 0, 313, 307, 308, 294,
	309, 312, 389, 310, 311, 390, 0, 314, 175, 315,
	316, 317, 318, 319, 320, 321, 0, 391, 392, 393,
	0, 0, 322, 323, 394, 395, 0, 324, 325, 326,
	327, 0, 0, 328, 329, 330, 331, 0, 332, 0,
	396, 333, 334, 335, 397, 398, 0, 173, 336, 180,
	0, 0, 0, 337, 338, 339, 340, 341, 0, 0,
	0, 0, 0, 0, 0, 183, 184, 0, 185, 0,
	0, 0, 0, 342, 0, 179, 0, 0, 186, 187,
	188, 343, 344, 345, 346, 189, 347, 348, 0, 190,
	349, 350, 191, 192, 0, 0, 351, 352, 353, 0,
	193, 354, 0, 0, 0, 194, 195, 196, 0, 198,
	199, 200, 197, 0, 201, 0, 202, 203, 0, 0,
	204, 205, 206, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 176, 209, 355, 210, 356, 357, 0, 211,
	0, 212, 0, 213, 0, 0, 214, 215, 0, 216,
	0, 0, 0, 358, 217, 219, 218, 220, 359, 360,
	0, 0, 0, 0, 0, 0, 0, 221, 222, 361,
	362, 363, 0, 223, 0, 224, 0, 0, 0, 0,
	225, 364, 0, 365, 0, 0, 226, 227, 0, 0,
	228, 229, 366, 367, 0, 0, 368, 233, 0, 230,
	0, 0, 231, 369, 232, 370, 371, 372, 373, 374,
	0, 375, 0, 0, 234, 235, 236, 0, 237, 238,
	239, 0, 241, 240, 0, 376, 0, 242, 0, 0,
	243, 0, 0, 244, 0, 245, 246, 247, 249, 377,
	248, 0, 250, 251, 253, 252, 0, 0, 0, 378,
	254, 379, 255, 256, 0, 257, 0, 0, 258, 0,
	0, 259, 380, 0, 260, 0, 381, 261, 262, 263,
	264, 265, 0, 266, 382, 267, 383, 268, 0, 269,
	270, 271, 272, 273, 384, 274, 275, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 281, 284, 285, 286,
	287, 0, 288, 0, 289, 290, 385, 291, 0, 295,
	296, 297, 298, 0, 300, 386, 299, 301, 302, 0,
	303, 292, 293, 304, 0, 305, 387, 388, 306, 0,
	313, 307, 308, 294, 309, 312, 389, 310, 311, 390,
	0, 314, 175, 315, 316, 317, 318, 319, 320, 321,
	0, 391, 392, 393, 0, 0, 322, 323, 394, 395,
	0, 324, 325, 326, 327, 0, 0, 328, 329, 330,
	331, 0, 332, 0, 396, 333, 334, 335, 397, 398,
	0, 180, 336, 0, 0, 0, 0, 337, 338, 339,
	340, 341, 0, 0, 0, 0, 0, 183, 184, 0,
	185, 0, 0, 0, 0, 342, 0, 0, 0, 179,
	186, 187, 188, 343, 344, 345, 346, 189, 347, 348,
	0, 190, 349, 350, 191, 192, 0, 0, 351, 352,
	353, 0, 193, 354, 0, 0, 0, 194, 195, 196,
	0, 198, 199, 200, 197, 0, 201, 0, 202, 203,
	0, 0, 204, 205, 206, 0, 0, 0, 0, 0,
	0, 0, 207, 208, 176, 209, 355, 210, 356, 357,
	0, 211, 0, 212, 0, 213, 0, 0, 214, 215,
	0, 216, 0, 0, 0, 358, 217, 219, 218, 220,
	359, 360, 0, 0, 0, 0, 0, 0, 0, 221,
	222, 361, 362, 363, 0, 223, 0, 224, 0, 0,
	0, 0, 225, 364, 0, 365, 0, 0, 226, 227,
	0, 0, 228, 229, 366, 367, 0, 0, 368, 233,
	0, 230, 0, 0, 231, 369, 232, 370, 371, 372,
	373, 374, 0, 375, 0, 0, 234, 235, 236, 0,
	237, 238, 239, 0, 241, 240, 0, 376, 0, 242,
	0, 0, 243, 0, 0, 244, 0, 245, 246, 247,
	249, 377, 248, 0, 250, 251, 253, 252, 0, 0,
	0, 378, 254, 379, 255, 256, 0, 257, 0, 0,
	258, 0, 0, 259, 380, 0, 260, 0, 381, 261,
	262, 263, 264, 265, 0, 266, 382, 267, 383, 268,
	0, 269, 270, 271, 272, 273, 384, 274, 275, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 281, 284,
	285, 286, 287, 0, 288, 0, 289, 290, 385, 291,
	0, 295, 296, 297, 298, 0, 300, 386, 299, 301,
	302, 0, 303, 292, 293, 304, 0, 305, 387, 388,
	306, 0, 313, 307, 308, 294, 309, 312, 389, 310,
	311, 390, 0, 314, 175, 315, 316, 317, 318, 319,
	320, 321, 0, 391, 392, 393, 0, 0, 322, 323,
	394, 395, 0, 324, 325, 326, 327, 0, 0, 328,
	329, 330, 331, 0, 332, 0, 396, 333, 334, 335,
	397, 398, 0, 180, 336, 0, 0, 0, 0, 337,
	338, 339, 340, 341, 0, 0, 0, 0, 0, 183,
	184, 0, 185, 0, 0, 0, 0, 342, 0, 0,
	0, 179, 186, 187, 188, 343, 344, 345, 346, 189,
	347, 348, 0, 190, 349, 350, 191, 192, 0, 0,
	351, 352, 353, 0, 193, 354, 0, 0, 0, 194,
	195, 196, 0, 198, 199, 200, 197, 0, 201, 0,
	202, 203, 0, 0, 204, 205, 206, 0, 0, 0,
	0, 0, 0, 0, 207, 208, 406, 209, 355, 210,
	356, 357, 0, 211, 0, 212, 0, 213, 0, 0,
	214, 215, 0, 216, 0, 0, 0, 358, 217, 219,
	218, 220, 359, 360, 0, 0, 0, 0, 0, 0,
	0, 221, 222, 361, 362, 363, 0, 223, 0, 224,
	0, 0, 0, 0, 225, 364, 0, 365, 0, 0,
	226, 227, 0, 0, 228, 229, 366, 367, 0, 0,
	368, 233, 0, 230, 0, 0, 231, 369, 232, 370,
	371, 372, 373, 374, 0, 375, 0, 0, 234, 235,
	236, 0, 237, 238, 239, 0, 241, 240, 0, 376,
	0, 242, 0, 0, 243, 0, 0, 244, 0, 245,
	246, 247, 249, 377, 248, 0, 250, 251, 253, 252,
	0, 0, 0, 378, 254, 379, 255, 256, 0, 257,
	0, 0, 258, 0, 0, 259, 380, 0, 260, 0,
	381, 261, 262, 263, 264, 265, 0, 266, 382, 267,
	383, 268, 0, 269, 270, 271, 272, 273, 384, 274,
	275, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	281, 284, 285, 286, 287, 0, 288, 0, 289, 290,
	385, 291, 0, 295, 296, 297, 298, 0, 300, 386,
	299, 301, 302, 0, 303, 292, 293, 304, 0, 305,
	387, 388, 306, 0, 313, 307, 308, 294, 309, 312,
	389, 310, 311, 390, 0, 314, 0, 315, 316, 317,
	318, 319, 320, 321, 0, 391, 392, 393, 0, 0,
	322, 323, 394, 395, 0, 324, 325, 326, 327, 0,
	0, 328, 329, 330, 331, 0, 332, 0, 396, 333,
	334, 335, 397, 398, 0, 0, 336, 0, 0, 0,
	0, 337, 338, 339, 340, 341, 980, 0, 885, 884,
	0, 0, 0, 882, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 183, 184, 0, 185, 0, 0,
	0, 0, 342, 0, 0, 0, 0, 186, 187, 188,
	343, 344, 345, 346, 189, 347, 348, 0, 190, 349,
	350, 191, 192, 0, 0, 351, 352, 353, 0, 193,
	354, 0, 775, 0, 194, 195, 196, 0, 198, 199,
	200, 197, 0, 201, 0, 202, 203, 0, 699, 204,
	205, 206, 0, 0, 0, 0, 0, 0, 0, 207,
	208, 406, 209, 355, 210, 356, 357, 0, 211, 0,
	212, 0, 213, 0, 0, 214, 215, 0, 216, 0,
	0, 0, 358, 217, 219, 218, 220, 359, 360, 0,
	700, 0, 0, 0, 0, 0, 221, 222, 361, 362,
	363, 0, 223, 0, 224, 0, 0, 701, 0, 225,
	364, 0, 365, 0, 0, 226, 227, 0, 0, 228,
	229, 366, 367, 703, 0, 368, 233, 0, 230, 0,
	702, 231, 369, 232, 370, 371, 372, 373, 374, 0,
	375, 0, 704, 234, 235, 236, 705, 237, 238, 239,
	0, 241, 240, 0, 376, 706, 242, 707, 0, 243,
	0, 0, 244, 0, 245, 246, 247, 249, 377, 248,
	708, 250, 251, 253, 252, 0, 0, 0, 378, 254,
	379, 255, 256, 0, 257, 0, 0, 258, 0, 0,
	259, 380, 709, 260, 710, 381, 261, 262, 263, 264,
	265, 0, 266, 382, 267, 383, 268, 0, 269, 270,
	271, 272, 273, 384, 274, 275, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 281, 284, 285, 286, 287,
	0, 288, 711, 289, 290, 385, 291, 0, 295, 296,
	297, 298, 0, 300, 386, 299, 301, 302, 0, 303,
	292, 293, 304, 712, 305, 387, 388, 306, 0, 313,
	307, 308, 294, 309, 312, 389, 310, 311, 390, 0,
	314, 0, 315, 316, 317, 318, 319, 320, 321, 0,
	391, 392, 393, 0, 0, 322, 323, 394, 395, 0,
	324, 325, 326, 327, 0, 0, 328, 329, 330, 331,
	0, 332, 0, 396, 333, 334, 335, 397, 398, 0,
	0, 336, 0, 0, 0, 0, 337, 338, 339, 340,
	341, 880, 0, 885, 884, 0, 0, 0, 882, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 183,
	184, 0, 185, 0, 0, 0, 0, 342, 0, 0,
	0, 0, 186, 187, 188, 343, 344, 345, 346, 189,
	347, 348, 0, 190, 349, 350, 191, 192, 0, 0,
	351, 352, 353, 0, 193, 354, 0, 775, 0, 194,
	195, 196, 0, 198, 199, 200, 197, 0, 201, 0,
	202, 203, 0, 699, 204, 205, 206, 0, 0, 0,
	0, 0, 0, 0, 207, 208, 406, 209, 355, 210,
	356, 357, 0, 211, 0, 212, 0, 213, 0, 0,
	214, 215, 0, 216, 0, 0, 0, 358, 217, 219,
	218, 220, 359, 360, 0, 700, 0, 0, 0, 0,
	0, 221, 222, 361, 362, 363, 0, 223, 0, 224,
	0, 0, 701, 0, 225, 364, 0, 365, 0, 0,
	226, 227, 0, 0, 228, 229, 879, 367, 703, 0,
	368, 233, 0, 230, 0, 702, 231, 369, 232, 370,
	371, 372, 373, 374, 0, 375, 0, 704, 234, 235,
	236, 705, 237, 238, 239, 0, 241, 240, 0, 376,
	706, 242, 707, 0, 243, 0, 0, 244, 0, 245,
	246, 247, 249, 377, 248, 708, 250, 251, 253, 252,
	0, 0, 0, 378, 254, 379, 255, 256, 0, 257,
	0, 0, 258, 0, 0, 259, 380, 709, 260, 710,
	381, 261, 262, 263, 264, 265, 0, 266, 382, 267,
	383, 268, 0, 269, 270, 271, 272, 273, 384, 274,
	275, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	281, 284, 285, 286, 287, 0, 288, 711, 289, 290,
	385, 291, 0, 295, 296, 297, 298, 0, 300, 386,
	299, 301, 302, 0, 303, 292, 293, 304, 712, 305,
	387, 388, 306, 0, 313, 307, 308, 294, 309, 312,
	389, 310, 311, 390, 0, 314, 0, 315, 316, 317,
	318, 319, 320, 321, 0, 391, 392, 393, 0, 0,
	322, 323, 394, 395, 0, 324, 325, 326, 327, 0,
	0, 328, 329, 330, 331, 0, 332, 0, 396, 333,
	334, 335, 397, 398, 885, 884, 336, 0, 0, 882,
	0, 337, 338, 339, 340, 341, 0, 0, 0, 0,
	183, 184, 0, 185, 0, 0, 0, 0, 342, 0,
	0, 0, 0, 186, 187, 188, 343, 344, 345, 346,
	189, 347, 348, 0, 190, 349, 350, 191, 192, 0,
	0, 351, 352, 353, 0, 193, 354, 0, 775, 0,
	194, 195, 196, 0, 198, 199, 200, 197, 0, 201,
	0, 202, 203, 0, 699, 204, 205, 206, 0, 0,
	0, 0, 0, 0, 0, 207, 208, 406, 209, 355,
	210, 356, 357, 0, 211, 0, 212, 0, 213, 0,
	0, 214, 215, 0, 216, 0, 0, 0, 358, 217,
	219, 218, 220, 359, 360, 0, 700, 0, 0, 0,
	0, 0, 221, 222, 361, 362, 363, 0, 223, 0,
	224, 0, 0, 701, 0, 225, 364, 0, 365, 0,
	0, 226, 227, 0, 0, 228, 229, 366, 367, 703,
	0, 368, 233, 0, 230, 0, 702, 231, 369, 232,
	370, 371, 372, 373, 374, 0, 375, 0, 704, 234,
	235, 236, 705, 237, 238, 239, 0, 241, 240, 0,
	376, 706, 242, 707, 0, 243, 0, 0, 244, 0,
	245, 246, 247, 249, 377, 248, 708, 250, 251, 253,
	252, 0, 0, 0, 378, 254, 379, 255, 256, 0,
	257, 0, 0, 258, 0, 0, 259, 380, 709, 260,
	710, 381, 261, 262, 263, 264, 265, 0, 266, 382,
	267, 383, 268, 0, 269, 270, 271, 272, 273, 384,
	274, 275, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 281, 284, 285, 286, 287, 0, 288, 711, 289,
	290, 385, 291, 0, 295, 296, 297, 298, 0, 300,
	386, 299, 301, 302, 0, 303, 292, 293, 304, 712,
	305, 387, 388, 306, 0, 313, 307, 308, 294, 309,
	312, 389, 310, 311, 390, 0, 314, 0, 315, 316,
	317, 318, 319, 320, 321, 0, 391, 392, 393, 0,
	0, 322, 323, 394, 395, 0, 324, 325, 326, 327,
	0, 0, 328, 329, 330, 331, 0, 332, 0, 396,
	333, 334, 335, 397, 398, 885, 884, 336, 0, 0,
	0, 0, 337, 338, 339, 340, 341, 0, 0, 0,
	0, 183, 184, 0, 185, 0, 0, 0, 0, 342,
	0, 0, 0, 0, 186, 187, 188, 343, 344, 345,
	346, 189, 347, 348, 0, 190, 349, 350, 191, 192,
	0, 0, 351, 352, 353, 0, 193, 354, 0, 775,
	0, 194, 195, 196, 0, 198, 199, 200, 197, 0,
	201, 0, 202, 203, 0, 699, 204, 205, 206, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 406, 209,
	355, 210, 356, 357, 0, 211, 0, 212, 0, 213,
	0, 0, 214, 215, 0, 216, 0, 0, 0, 358,
	217, 219, 218, 220, 359, 360, 0, 700, 0, 0,
	0, 0, 0, 221, 222, 361, 362, 363, 0, 223,
	0, 224, 0, 0, 701, 0, 225, 364, 0, 365,
	0, 0, 226, 227, 0, 0, 228, 229, 366, 367,
	703, 0, 368, 233, 0, 230, 0, 702, 231, 369,
	232, 370, 371, 372, 373, 374, 0, 375, 0, 704,
	234, 235, 236, 705, 237, 238, 239, 0, 241, 240,
	0, 376, 706, 242, 707, 0, 243, 0, 0, 244,
	0, 245, 246, 247, 249, 377, 248, 708, 250, 251,
	253, 252, 0, 0, 0, 378, 254, 379, 255, 256,
	0, 257, 0, 0, 258, 0, 0, 259, 380, 709,
	260, 710, 381, 261, 262, 263, 264, 265, 0, 266,
	382, 267, 383, 268, 0, 269, 270, 271, 272, 273,
	384, 274, 275, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 281, 284, 285, 286, 287, 0, 288, 711,
	289, 290, 385, 291, 0, 295, 296, 297, 298, 0,
	300, 386, 299, 301, 302, 0, 303, 292, 293, 304,
	712, 305, 387, 388, 306, 0, 313, 307, 308, 294,
	309, 312, 389, 310, 311, 390, 0, 314, 0, 315,
	316, 317, 318, 319, 320, 321, 0, 391, 392, 393,
	0, 0, 322, 323, 394, 395, 0, 324, 325, 326,
	327, 0, 0, 328, 329, 330, 331, 0, 332, 0,
	396, 333, 334, 335, 397, 398, 885, 0, 336, 0,
	0, 0, 0, 337, 338, 339, 340, 341, 0, 0,
	0, 0, 183, 184, 0, 185, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 186, 187, 188, 343, 344,
	345, 346, 189, 347, 348, 0, 190, 349, 350, 191,
	192, 0, 0, 351, 352, 353, 0, 193, 354, 0,
	775, 0, 194, 195, 196, 0, 198, 199, 200, 197,
	0, 201, 0, 202, 203, 0, 699, 204, 205, 206,
	0, 0, 0, 0, 0, 0, 0, 207, 208, 406,
	209, 355, 210, 356, 357, 0, 211, 0, 212, 0,
	213, 0, 0, 214, 215, 0, 216, 0, 0, 0,
	358, 217, 219, 218, 220, 359, 360, 0, 700, 0,
	0, 0, 0, 0, 221, 222, 361, 362, 363, 0,
	223, 0, 224, 0, 0, 701, 0, 225, 364, 0,
	365, 0, 0, 226, 227, 0, 0, 228, 229, 366,
	367, 703, 0, 368, 233, 0, 230, 0, 702, 231,
	369, 232, 370, 371, 372, 373, 374, 0, 375, 0,
	704, 234, 235, 236, 705, 237, 238, 239, 0, 241,
	240, 0, 376, 706, 242, 707, 0, 243, 0, 0,
	244, 0, 245, 246, 247, 249, 377, 248, 708, 250,
	251, 253, 252, 0, 0, 0, 378, 254, 379, 255,
	256, 0, 257, 0, 0, 258, 0, 0, 259, 380,
	709, 260, 710, 381, 261, 262, 263, 264, 265, 0,
	266, 382, 267, 383, 268, 0, 269, 270, 271, 272,
	273, 384, 274, 275, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 281, 284, 285, 286, 287, 0, 288,
	711, 289, 290, 385, 291, 0, 295, 296, 297, 298,
	0, 300, 386, 299, 301, 302, 0, 303, 292, 293,
	304, 712, 305, 387, 388, 306, 0, 313, 307, 308,
	294, 309, 312, 389, 310, 311, 390, 0, 314, 0,
	315, 316, 317, 318, 319, 320, 321, 0, 391, 392,
	393, 0, 0, 322, 323, 394, 395, 0, 324, 325,
	326, 327, 0, 0, 328, 329, 330, 331, 0, 332,
	0, 396, 333, 334, 335, 397, 398, 180, 0, 336,
	0, 0, 0, 0, 337, 338, 339, 340, 341, 0,
	0, 0, 0, 183, 184, 0, 185, 0, 0, 0,
	0, 342, 0, 0, 0, 0, 186, 187, 188, 343,
	344, 345, 346, 189, 347, 348, 0, 190, 349, 350,
	191, 192, 0, 0, 351, 352, 353, 1630, 193, 354,
	0, 0, 0, 194, 195, 196, 0, 198, 199, 200,
	197, 1628, 201, 0, 202, 203, 0, 0, 204, 205,
	206, 0, 0, 0, 0, 0, 0, 0, 207, 208,
	406, 209, 355, 210, 356, 357, 0, 211, 0, 212,
	0, 213, 0, 0, 214, 215, 0, 216, 0, 0,
	0, 358, 217, 219, 218, 220, 359, 360, 0, 1672,
	0, 0, 0, 0, 0, 221, 222, 361, 362, 363,
	0, 223, 0, 224, 1633, 0, 0, 0, 225, 364,
	0, 365, 0, 0, 226, 227, 0, 0, 228, 229,
	366, 367, 0, 0, 368, 233, 1670, 230, 0, 0,
	231, 369, 232, 370, 371, 372, 373, 374, 0, 375,
	0, 0, 234, 235, 236, 0, 237, 238, 239, 0,
	241, 240, 0, 376, 0, 242, 0, 0, 243, 0,
	0, 244, 0, 245, 246, 247, 249, 377, 248, 0,
	250, 251, 253, 252, 0, 0, 0, 378, 254, 379,
	255, 256, 0, 257, 0, 0, 258, 0, 0, 259,
	380, 0, 260, 0, 381, 261, 262, 263, 264, 265,
	0, 266, 382, 267, 383, 268, 1632, 269, 270, 271,
	272, 273, 384, 274, 275, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 281, 284, 285, 286, 287, 0,
	288, 0, 289, 290, 385, 291, 0, 295, 296, 297,
	298, 0, 300, 386, 299, 301, 302, 0, 303, 292,
	293, 304, 0, 305, 387, 388, 306, 0, 313, 307,
	308, 294, 309, 312, 389, 310, 311, 390, 0, 314,
	0, 315, 316, 317, 318, 319, 320, 321, 0, 391,
	392, 393, 0, 0, 322, 323, 394, 395, 0, 324,
	325, 326, 327, 0, 1671, 328, 329, 330, 331, 0,
	332, 0, 396, 333, 334, 335, 397, 398, 180, 0,
	336, 0, 0, 0, 0, 337, 338, 339, 340, 341,
	0, 0, 0, 0, 183, 184, 0, 185, 0, 0,
	0, 0, 342, 0, 0, 0, 0, 186, 187, 188,
	343, 344, 345, 346, 189, 347, 348, 0, 190, 349,
	350, 191, 192, 0, 0, 351, 352, 353, 1630, 193,
	354, 0, 0, 1625, 194, 195, 196, 0, 198, 199,
	200, 197, 1628, 201, 0, 202, 203, 0, 0, 204,
	205, 206, 0, 0, 0, 0, 0, 0, 0, 207,
	208, 406, 209, 355, 210, 356, 357, 0, 211, 0,
	212, 0, 213, 0, 0, 214, 215, 0, 216, 0,
	0, 0, 358, 217, 219, 218, 220, 359, 360, 0,
	0, 0, 0, 0, 0, 0, 221, 222, 361, 362,
	363, 0, 223, 0, 224, 1633, 0, 0, 0, 225,
	364, 0, 365, 0, 0, 226, 227, 0, 0, 228,
	229, 1624, 367, 0, 0, 368, 233, 0, 230, 0,
	0, 231, 369, 232, 370, 371, 372, 373, 374, 0,
	375, 0, 0, 234, 235, 236, 0, 237, 238, 239,
	0, 241, 240, 0, 376, 0, 242, 0, 0, 243,
	0, 0, 244, 0, 245, 246, 247, 249, 377, 248,
	0, 250, 251, 253, 252, 0, 0, 0, 378, 254,
	379, 255, 256, 0, 257, 0, 0, 258, 0, 0,
	259, 380, 0, 260, 0, 381, 261, 262, 263, 264,
	265, 0, 266, 382, 267, 383, 268, 1632, 269, 270,
	271, 272, 273, 384, 274, 275, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 281, 284, 285, 286, 287,
	0, 288, 0, 289, 290, 385, 291, 0, 295, 296,
	297, 298, 0, 300, 386, 299, 301, 302, 0, 303,
	292, 293, 304, 0, 305, 387, 388, 306, 0, 313,
	307, 308, 294, 309, 312, 389, 310, 311, 390, 0,
	314, 0, 315, 316, 317, 318, 319, 320, 321, 0,
	391, 392, 393, 0, 0, 322, 323, 394, 395, 0,
	324, 325, 326, 327, 0, 1631, 328, 329, 330, 331,
	0, 332, 0, 396, 333, 334, 335, 397, 398, 0,
	904, 336, 180, 0, 0, 0, 337, 338, 339, 340,
	341, 0, 0, 0, 0, 0, 0, 0, 183, 184,
	0, 185, 0, 0, 0, 0, 342, 0, 0, 0,
	0, 186, 187, 188, 343, 344, 345, 346, 189, 347,
	348, 0, 190, 349, 350, 191, 192, 0, 0, 351,
	352, 353, 0, 193, 354, 0, 0, 0, 194, 195,
	196, 0, 198, 199, 200, 197, 0, 201, 0, 202,
	203, 0, 0, 204, 205, 206, 0, 0, 0, 0,
	0, 0, 0, 207, 208, 406, 209, 355, 210, 356,
	357, 0, 211, 0, 212, 0, 213, 0, 0, 214,
	215, 0, 216, 0, 0, 0, 358, 217, 219, 218,
	220, 359, 360, 0, 0, 0, 0, 0, 0, 0,
	221, 222, 361, 362, 363, 0, 223, 0, 224, 0,
	0, 0, 0, 225, 364, 0, 365, 0, 0, 226,
	227, 0, 0, 228, 229, 366, 367, 0, 0, 368,
	233, 0, 230, 0, 0, 231, 369, 232, 370, 371,
	372, 373, 374, 0, 375, 0, 0, 234, 235, 236,
	0, 237, 238, 239, 0, 241, 240, 0, 376, 0,
	242, 0, 0, 243, 0, 0, 244, 0, 245, 246,
	247, 249, 377, 248, 0, 250, 251, 253, 252, 0,
	0, 0, 378, 254, 379, 255, 256, 0, 257, 0,
	753, 258, 0, 0, 259, 380, 0, 260, 0, 381,
	261, 262, 263, 264, 265, 0, 266, 382, 267, 383,
	268, 0, 269, 270, 271, 272, 273, 384, 274, 275,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 281,
	284, 285, 286, 287, 0, 288, 0, 289, 290, 385,
	291, 0, 295, 296, 297, 298, 0, 300, 386, 299,
	301, 302, 0, 303, 292, 293, 304, 0, 305, 387,
	388, 306, 0, 313, 307, 308, 294, 309, 312, 389,
	310, 311, 390, 0, 314, 0, 315, 316, 317, 318,
	319, 320, 321, 0, 391, 392, 393, 0, 0, 322,
	323, 394, 395, 0, 324, 325, 326, 327, 0, 0,
	328, 329, 330, 331, 0, 332, 0, 396, 333, 334,
	335, 397, 398, 0, 759, 336, 180, 0, 0, 0,
	337, 338, 339, 340, 341, 0, 0, 0, 0, 0,
	0, 0, 183, 184, 0, 185, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 186, 187, 188, 343, 344,
	345, 346, 189, 347, 348, 0, 190, 349, 350, 191,
	192, 0, 0, 351, 352, 353, 0, 193, 354, 0,
	0, 0, 194, 195, 196, 0, 198, 199, 200, 197,
	0, 201, 0, 202, 203, 0, 0, 204, 205, 206,
	0, 0, 0, 0, 0, 0, 0, 207, 208, 406,
	209, 355, 210, 356, 357, 0, 211, 0, 212, 0,
	213, 0, 0, 214, 215, 0, 216, 0, 0, 0,
	358, 217, 219, 218, 220, 359, 360, 0, 0, 0,
	0, 0, 0, 0, 221, 222, 361, 362, 363, 0,
	223, 0, 224, 0, 0, 0, 0, 225, 364, 0,
	365, 0, 0, 226, 227, 0, 0, 228, 229, 761,
	367, 0, 0, 368, 233, 0, 230, 0, 0, 231,
	369, 232, 370, 371, 372, 373, 374, 0, 375, 0,
	0, 234, 235, 236, 0, 237, 238, 239, 0, 241,
	240, 0, 376, 0, 242, 0, 0, 243, 0, 0,
	244, 0, 245, 246, 247, 249, 377, 248, 0, 250,
	251, 253, 252, 0, 0, 0, 378, 254, 379, 255,
	256, 0, 257, 0, 753, 258, 0, 0, 259, 380,
	0, 260, 0, 381, 261, 262, 263, 264, 265, 0,
	266, 382, 267, 383, 268, 0, 269, 270, 271, 272,
	273, 384, 274, 275, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 281, 284, 285, 286, 287, 0, 288,
	0, 289, 290, 385, 291, 0, 295, 296, 297, 298,
	0, 300, 386, 299, 301, 302, 0, 303, 292, 293,
	304, 0, 305, 387, 388, 306, 0, 313, 307, 308,
	294, 309, 312, 389, 310, 311, 390, 0, 314, 0,
	315, 316, 317, 318, 319, 320, 321, 0, 391, 392,
	393, 0, 0, 322, 323, 394, 395, 0, 324, 325,
	326, 327, 0, 0, 328, 329, 330, 331, 0, 332,
	0, 396, 333, 334, 335, 397, 398, 0, 755, 336,
	180, 0, 0, 0, 337, 338, 339, 340, 341, 0,
	0, 0, 0, 0, 0, 0, 183, 184, 0, 185,
	0, 0, 0, 0, 342, 0, 0, 0, 0, 186,
	187, 188, 343, 344, 345, 346, 189, 347, 348, 0,
	190, 349, 350, 191, 192, 0, 0, 351, 352, 353,
	0, 193, 354, 0, 0, 0, 194, 195, 196, 0,
	198, 199, 200, 197, 0, 201, 0, 202, 203, 0,
	0, 204, 205, 206, 0, 0, 0, 0, 0, 0,
	0, 207, 208, 406, 209, 355, 210, 356, 357, 0,
	211, 0, 212, 0, 213, 0, 0, 214, 215, 0,
	216, 0, 0, 0, 358, 217, 219, 218, 220, 359,
	360, 0, 0, 0, 0, 0, 0, 0, 221, 222,
	361, 362, 363, 0, 223, 0, 224, 0, 0, 0,
	0, 225, 364, 0, 365, 0, 0, 226, 227, 0,
	0, 228, 229, 757, 367, 0, 0, 368, 233, 0,
	230, 0, 0, 231, 369, 232, 370, 371, 372, 373,
	374, 0, 375, 0, 0, 234, 235, 236, 0, 237,
	238, 239, 0, 241, 240, 0, 376, 0, 242, 0,
	0, 243, 0, 0, 244, 0, 245, 246, 247, 249,
	377, 248, 0, 250, 251, 253, 252, 0, 0, 0,
	378, 254, 379, 255, 256, 0, 257, 0, 753, 258,
	0, 0, 259, 380, 0, 260, 0, 381, 261, 262,
	263, 264, 265, 0, 266, 382, 267, 383, 268, 0,
	269, 270, 271, 272, 273, 384, 274, 275, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 281, 284, 285,
	286, 287, 0, 288, 0, 289, 290, 385, 291, 0,
	295, 296, 297, 298, 0, 300, 386, 299, 301, 302,
	0, 303, 292, 293, 304, 0, 305, 387, 388, 306,
	0, 313, 307, 308, 294, 309, 312, 389, 310, 311,
	390, 0, 314, 0, 315, 316, 317, 318, 319, 320,
	321, 0, 391, 392, 393, 0, 0, 322, 323, 394,
	395, 0, 324, 325, 326, 327, 0, 0, 328, 329,
	330, 331, 0, 332, 0, 396, 333, 334, 335, 397,
	398, 0, 418, 336, 180, 0, 0, 0, 337, 338,
	339, 340, 341, 0, 0, 0, 0, 0, 0, 0,
	183, 184, 417, 185, 0, 0, 0, 0, 342, 0,
	0, 0, 0, 186, 187, 188, 343, 344, 345, 346,
	189, 347, 348, 0, 190, 349, 350, 191, 192, 0,
	0, 351, 352, 353, 0, 193, 354, 0, 0, 0,
	194, 195, 196, 0, 198, 199, 200, 197, 0, 201,
	0, 202, 203, 0, 0, 204, 205, 206, 0, 0,
	0, 0, 0, 0, 0, 207, 208, 406, 209, 355,
	210, 356, 357, 0, 211, 0, 212, 0, 213, 0,
	0, 214, 215, 0, 216, 0, 0, 0, 358, 217,
	219, 218, 220, 359, 360, 0, 0, 0, 0, 0,
	0, 0, 221, 222, 361, 362, 363, 0, 223, 0,
	224, 0, 0, 0, 0, 225, 364, 0, 365, 0,
	0, 226, 227, 0, 0, 228, 229, 366, 367, 0,
	0, 368, 233, 0, 230, 0, 0, 231, 369, 232,
	370, 371, 372, 373, 374, 0, 375, 0, 0, 234,
	235, 236, 0, 237, 238, 239, 0, 241, 240, 0,
	376, 0, 242, 0, 0, 243, 0, 0, 244, 0,
	245, 246, 247, 249, 377, 248, 0, 250, 251, 253,
	252, 0, 0, 0, 378, 254, 379, 255, 256, 0,
	257, 0, 0, 258, 0, 0, 259, 380, 0, 260,
	0, 381, 261, 262, 263, 264, 265, 0, 266, 382,
	267, 383, 416, 0, 269, 270, 271, 272, 273, 384,
	274, 275, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 281, 284, 285, 286, 287, 0, 288, 0, 289,
	290, 385, 291, 0, 295, 296, 297, 298, 0, 300,
	386, 299, 301, 302, 0, 303, 292, 293, 304, 0,
	305, 387, 388, 306, 0, 313, 307, 308, 294, 309,
	312, 389, 310, 311, 390, 0, 314, 0, 315, 316,
	317, 318, 319, 320, 321, 0, 391, 392, 393, 0,
	0, 322, 323, 394, 395, 0, 324, 325, 326, 327,
	0, 0, 328, 329, 330, 331, 0, 332, 0, 396,
	333, 334, 335, 397, 398, 180, 0, 336, 0, 0,
	0, 0, 337, 338, 339, 340, 341, 0, 0, 0,
	0, 183, 184, 0, 185, 0, 0, 0, 0, 342,
	0, 1613, 0, 0, 186, 187, 188, 343, 344, 345,
	346, 189, 347, 348, 0, 190, 349, 350, 191, 192,
	0, 0, 351, 352, 353, 0, 193, 354, 0, 0,
	0, 194, 195, 196, 0, 198, 199, 200, 197, 0,
	201, 0, 202, 203, 0, 0, 204, 205, 206, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 406, 209,
	355, 210, 356, 357, 0, 211, 0, 212, 0, 213,
	0, 0, 214, 215, 0, 216, 0, 0, 0, 358,
	217, 219, 218, 220, 359, 360, 0, 0, 0, 0,
	0, 0, 0, 221, 222, 361, 362, 363, 0, 223,
	0, 224, 0, 0, 0, 0, 225, 364, 0, 365,
	0, 0, 226, 227, 0, 0, 228, 229, 366, 367,
	0, 0, 368, 233, 0, 230, 0, 0, 231, 369,
	232, 370, 371, 372, 373, 374, 0, 375, 0, 0,
	234, 235, 236, 0, 237, 238, 239, 0, 241, 240,
	0, 376, 0, 242, 0, 0, 243, 0, 0, 244,
	0, 245, 246, 247, 249, 377, 248, 0, 250, 251,
	253, 252, 0, 0, 0, 378, 254, 379, 255, 256,
	0, 257, 0, 0, 258, 0, 0, 259, 380, 0,
	260, 0, 381, 261, 262, 263, 264, 265, 0, 266,
	382, 267, 383, 268, 0, 269, 270, 271, 272, 273,
	384, 274, 275, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 281, 284, 285, 286, 287, 0, 288, 0,
	289, 290, 385, 291, 0, 295, 296, 297, 298, 0,
	300, 386, 299, 301, 302, 0, 303, 292, 293, 304,
	0, 305, 387, 388, 306, 0, 313, 307, 308, 294,
	309, 312, 389, 310, 311, 390, 0, 314, 0, 315,
	316, 317, 318, 319, 320, 321, 0, 391, 392, 393,
	0, 0, 322, 323, 394, 395, 0, 324, 325, 326,
	327, 0, 0, 328, 329, 330, 331, 0, 332, 0,
	396, 333, 334, 335, 397, 398, 180, 2205, 336, 0,
	0, 0, 0, 337, 338, 339, 340, 341, 0, 0,
	0, 0, 183, 184, 0, 185, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 186, 187, 188, 343, 344,
	345, 346, 189, 347, 348, 0, 190, 349, 350, 191,
	192, 0, 0, 351, 352, 353, 0, 193, 354, 0,
	0, 0, 194, 195, 196, 0, 198, 199, 200, 197,
	0, 201, 0, 202, 203, 0, 0, 204, 205, 206,
	0, 0, 0, 0, 0, 0, 0, 207, 208, 406,
	209, 355, 210, 356, 357, 0, 211, 0, 212, 0,
	213, 0, 0, 214, 215, 0, 216, 0, 0, 0,
	358, 217, 219, 218, 220, 359, 360, 0, 0, 0,
	0, 0, 0, 0, 221, 222, 361, 362, 363, 0,
	223, 0, 224, 0, 0, 0, 0, 225, 364, 0,
	365, 0, 0, 226, 227, 0, 0, 228, 229, 366,
	367, 0, 0, 368, 233, 0, 230, 0, 0, 231,
	369, 232, 370, 371, 372, 373, 374, 0, 375, 0,
	0, 234, 235, 236, 0, 237, 238, 239, 0, 241,
	240, 0, 376, 0, 242, 0, 0, 243, 0, 0,
	244, 0, 245, 246, 247, 249, 377, 248, 0, 250,
	251, 253, 252, 0, 0, 0, 378, 254, 379, 255,
	256, 0, 257, 0, 0, 258, 0, 0, 259, 380,
	0, 260, 0, 381, 261, 262, 263, 264, 265, 0,
	266, 382, 267, 383, 268, 0, 269, 270, 271, 272,
	273, 384, 274, 275, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 281, 284, 285, 286, 287, 0, 288,
	0, 289, 290, 385, 291, 0, 295, 296, 297, 298,
	0, 300, 386, 299, 301, 302, 0, 303, 292, 293,
	304, 0, 305, 387, 388, 306, 0, 313, 307, 308,
	294, 309, 312, 389, 310, 311, 390, 0, 314, 0,
	315, 316, 317, 318, 319, 320, 321, 0, 391, 392,
	393, 0, 0, 322, 323, 394, 395, 0, 324, 325,
	326, 327, 0, 0, 328, 329, 330, 331, 0, 332,
	0, 396, 333, 334, 335, 397, 398, 180, 2205, 336,
	0, 0, 0, 0, 337, 338, 339, 340, 341, 0,
	0, 0, 0, 183, 184, 0, 185, 0, 0, 0,
	0, 342, 0, 0, 0, 0, 186, 187, 188, 343,
	344, 345, 346, 189, 347, 348, 0, 190, 349, 350,
	191, 192, 0, 0, 351, 352, 353, 0, 193, 354,
	0, 0, 0, 194, 195, 196, 0, 198, 199, 200,
	197, 0, 201, 0, 202, 203, 0, 0, 204, 205,
	206, 0, 0, 0, 0, 0, 0, 0, 207, 208,
	406, 209, 355, 210, 356, 357, 0, 211, 0, 212,
	0, 213, 0, 0, 214, 215, 0, 216, 0, 0,
	0, 358, 217, 219, 218, 220, 359, 360, 0, 0,
	0, 0, 0, 0, 0, 221, 222, 361, 362, 363,
	0, 223, 0, 224, 0, 0, 0, 0, 225, 364,
	0, 365, 0, 0, 226, 227, 0, 0, 228, 229,
	366, 367, 0, 0, 368, 233, 0, 230, 0, 0,
	231, 369, 232, 370, 371, 372, 373, 374, 0, 375,
	0, 0, 234, 235, 236, 0, 237, 238, 239, 0,
	241, 240, 0, 376, 0, 242, 0, 0, 243, 0,
	0, 244, 0, 245, 246, 247, 249, 377, 248, 0,
	250, 251, 253, 252, 0, 0, 0, 378, 254, 379,
	255, 256, 0, 257, 0, 0, 2202, 0, 0, 259,
	380, 0, 260, 0, 381, 261, 262, 263, 264, 265,
	0, 266, 382, 267, 383, 268, 0, 269, 270, 271,
	272, 273, 384, 274, 275, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 281, 284, 285, 286, 287, 0,
	288, 0, 289, 290, 385, 291, 0, 295, 296, 297,
	298, 0, 300, 386, 299, 301, 302, 0, 303, 292,
	293, 304, 0, 305, 387, 388, 306, 0, 313, 307,
	308, 294, 309, 312, 389, 310, 311, 390, 0, 314,
	0, 315, 316, 317, 318, 319, 320, 321, 0, 391,
	392, 393, 0, 0, 322, 323, 394, 395, 0, 324,
	325, 326, 327, 0, 0, 328, 329, 330, 331, 0,
	332, 0, 396, 333, 334, 335, 397, 398, 180, 0,
	336, 0, 0, 0, 0, 337, 338, 339, 340, 341,
	0, 0, 0, 0, 183, 184, 0, 185, 0, 0,
	0, 0, 342, 0, 0, 0, 0, 186, 187, 188,
	343, 344, 345, 346, 189, 347, 348, 0, 190, 349,
	350, 191, 192, 0, 0, 351, 352, 353, 0, 193,
	354, 0, 0, 0, 194, 195, 196, 0, 198, 199,
	200, 197, 0, 201, 0, 202, 203, 0, 0, 204,
	205, 206, 0, 0, 0, 0, 0, 0, 0, 207,
	208, 406, 209, 355, 210, 356, 357, 0, 211, 0,
	212, 0, 213, 0, 0, 214, 215, 0, 216, 0,
	0, 0, 358, 217, 219, 218, 220, 359, 360, 0,
	0, 0, 0, 0, 0, 0, 221, 222, 361, 362,
	363, 0, 223, 0, 224, 0, 0, 0, 0, 225,
	364, 0, 365, 0, 0, 226, 227, 0, 0, 228,
	229, 366, 367, 0, 0, 368, 233, 0, 230, 0,
	0, 231, 369, 232, 370, 371, 372, 373, 374, 0,
	375, 0, 0, 234, 235, 236, 0, 237, 238, 239,
	0, 241, 240, 0, 376, 0, 242, 0, 0, 243,
	0, 0, 244, 0, 245, 246, 247, 249, 377, 248,
	0, 250, 251, 253, 252, 0, 0, 0, 378, 254,
	379, 255, 256, 0, 257, 0, 753, 258, 0, 0,
	259, 380, 0, 260, 0, 381, 261, 262, 263, 264,
	265, 0, 266, 382, 267, 383, 268, 0, 269, 270,
	271, 272, 273, 384, 274, 275, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 281, 284, 285, 286, 287,
	0, 288, 0, 289, 290, 385, 291, 0, 295, 296,
	297, 298, 0, 300, 386, 299, 301, 302, 0, 303,
	292, 293, 304, 0, 305, 387, 388, 306, 0, 313,
	307, 308, 294, 309, 312, 389, 310, 311, 390, 0,
	314, 0, 315, 316, 317, 318, 319, 320, 321, 0,
	391, 392, 393, 0, 0, 322, 323, 394, 395, 0,
	324, 325, 326, 327, 0, 0, 328, 329, 330, 331,
	0, 332, 0, 396, 333, 334, 335, 397, 398, 0,
	1383, 336, 180, 0, 0, 0, 337, 338, 339, 340,
	341, 0, 0, 0, 0, 0, 0, 0, 183, 184,
	0, 185, 0, 0, 0, 0, 342, 0, 0, 0,
	0, 186, 187, 188, 343, 344, 345, 346, 189, 347,
	348, 0, 190, 349, 350, 191, 192, 0, 0, 351,
	352, 353, 0, 193, 354, 0, 0, 0, 194, 195,
	196, 0, 198, 199, 200, 197, 0, 201, 0, 202,
	203, 0, 0, 204, 205, 206, 0, 0, 0, 0,
	0, 0, 0, 207, 208, 406, 209, 355, 210, 356,
	357, 0, 211, 0, 212, 0, 213, 0, 0, 214,
	215, 0, 216, 0, 0, 0, 358, 217, 219, 218,
	220, 359, 360, 0, 0, 0, 0, 0, 0, 0,
	221, 222, 361, 362, 363, 0, 223, 0, 224, 0,
	0, 0, 0, 225, 364, 0, 365, 0, 0, 226,
	227, 0, 0, 228, 229, 366, 367, 0, 0, 368,
	233, 0, 230, 0, 0, 231, 369, 232, 370, 371,
	372, 373, 374, 0, 375, 0, 0, 234, 235, 236,
	0, 237, 238, 239, 0, 241, 240, 0, 376, 0,
	242, 0, 0, 243, 0, 0, 244, 0, 245, 246,
	247, 249, 377, 248, 0, 250, 251, 253, 252, 0,
	0, 0, 378, 254, 379, 255, 256, 0, 257, 0,
	0, 258, 0, 0, 259, 380, 0, 260, 0, 381,
	261, 262, 263, 264, 265, 0, 266, 382, 267, 383,
	268, 0, 269, 270, 271, 272, 273, 384, 274, 275,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 281,
	284, 285, 286, 287, 0, 288, 0, 289, 290, 385,
	291, 0, 295, 296, 297, 298, 0, 300, 386, 299,
	301, 302, 0, 303, 292, 293, 304, 0, 305, 387,
	388, 306, 0, 313, 307, 308, 294, 309, 312, 389,
	310, 311, 390, 0, 314, 0, 315, 316, 317, 318,
	319, 320, 321, 0, 391, 392, 393, 0, 0, 322,
	323, 394, 395, 0, 324, 325, 326, 327, 0, 0,
	328, 329, 330, 331, 0, 332, 0, 396, 333, 334,
	335, 397, 398, 0, 1381, 336, 180, 0, 0, 0,
	337, 338, 339, 340, 341, 0, 0, 0, 0, 0,
	0, 0, 183, 184, 0, 185, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 186, 187, 188, 343, 344,
	345, 346, 189, 347, 348, 0, 190, 349, 350, 191,
	192, 0, 0, 351, 352, 353, 0, 193, 354, 0,
	0, 0, 194, 195, 196, 0, 198, 199, 200, 197,
	0, 201, 0, 202, 203, 0, 0, 204, 205, 206,
	0, 0, 0, 0, 0, 0, 0, 207, 208, 406,
	209, 355, 210, 356, 357, 0, 211, 0, 212, 0,
	213, 0, 0, 214, 215, 0, 216, 0, 0, 0,
	358, 217, 219, 218, 220, 359, 360, 0, 0, 0,
	0, 0, 0, 0, 221, 222, 361, 362, 363, 0,
	223, 0, 224, 0, 0, 0, 0, 225, 364, 0,
	365, 0, 0, 226, 227, 0, 0, 228, 229, 366,
	367, 0, 0, 368, 233, 0, 230, 0, 0, 231,
	369, 232, 370, 371, 372, 373, 374, 0, 375, 0,
	0, 234, 235, 236, 0, 237, 238, 239, 0, 241,
	240, 0, 376, 0, 242, 0, 0, 243, 0, 0,
	244, 0, 245, 246, 247, 249, 377, 248, 0, 250,
	251, 253, 252, 0, 0, 0, 378, 254, 379, 255,
	256, 0, 257, 0, 0, 258, 0, 0, 259, 380,
	0, 260, 0, 381, 261, 262, 263, 264, 265, 0,
	266, 382, 267, 383, 268, 0, 269, 270, 271, 272,
	273, 384, 274, 275, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 281, 284, 285, 286, 287, 0, 288,
	0, 289, 290, 385, 291, 0, 295, 296, 297, 298,
	0, 300, 386, 299, 301, 302, 0, 303, 292, 293,
	304, 0, 305, 387, 388, 306, 0, 313, 307, 308,
	294, 309, 312, 389, 310, 311, 390, 0, 314, 0,
	315, 316, 317, 318, 319, 320, 321, 0, 391, 392,
	393, 0, 0, 322, 323, 394, 395, 0, 324, 325,
	326, 327, 0, 0, 328, 329, 330, 331, 0, 332,
	0, 396, 333, 334, 335, 397, 398, 180, 0, 336,
	0, 0, 0, 0, 337, 338, 339, 340, 341, 0,
	0, 0, 0, 183, 184, 1363, 185, 0, 0, 0,
	0, 342, 0, 0, 0, 0, 186, 187, 188, 343,
	344, 345, 346, 189, 347, 348, 0, 190, 349, 350,
	191, 192, 0, 0, 351, 352, 353, 0, 193, 354,
	0, 0, 0, 194, 195, 196, 0, 198, 199, 200,
	197, 0, 201, 0, 202, 203, 0, 0, 204, 205,
	206, 0, 0, 0, 0, 0, 0, 0, 207, 208,
	406, 209, 355, 210, 356, 357, 0, 211, 0, 212,
	0, 213, 0, 0, 214, 215, 0, 216, 0, 0,
	0, 358, 217, 219, 218, 220, 359, 360, 0, 0,
	0, 0, 0, 0, 0, 221, 222, 361, 362, 363,
	0, 223, 0, 224, 0, 0, 0, 0, 225, 364,
	0, 365, 0, 0, 226, 227, 0, 0, 228, 229,
	366, 367, 0, 0, 368, 233, 0, 230, 0, 0,
	231, 369, 232, 370, 371, 372, 373, 374, 0, 375,
	0, 0, 234, 235, 236, 0, 237, 238, 239, 0,
	241, 240, 0, 376, 0, 242, 0, 0, 243, 0,
	0, 244, 0, 245, 246, 247, 249, 377, 248, 0,
	250, 251, 253, 252, 0, 0, 0, 378, 254, 379,
	255, 256, 0, 257, 0, 0, 258, 0, 0, 259,
	380, 0, 260, 0, 381, 261, 262, 263, 264, 265,
	0, 266, 382, 267, 383, 268, 0, 269, 270, 271,
	272, 273, 384, 274, 275, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 281, 284, 285, 286, 287, 0,
	288, 0, 289, 290, 385, 291, 0, 295, 296, 297,
	298, 0, 300, 386, 299, 301, 302, 0, 303, 292,
	293, 304, 0, 305, 387, 388, 306, 0, 313, 307,
	308, 294, 309, 312, 389, 310, 311, 390, 0, 314,
	0, 315, 316, 317, 318, 319, 320, 321, 0, 391,
	392, 393, 0, 0, 322, 323, 394, 395, 0, 324,
	325, 326, 327, 0, 0, 328, 329, 330, 331, 0,
	332, 0, 396, 333, 334, 335, 397, 398, 0, 514,
	336, 180, 0, 0, 0, 337, 338, 339, 340, 341,
	0, 0, 0, 0, 0, 0, 0, 183, 184, 0,
	185, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	186, 187, 188, 343, 344, 345, 346, 189, 347, 348,
	0, 190, 349, 350, 191, 192, 0, 0, 351, 352,
	959, 0, 193, 354, 0, 0, 0, 194, 195, 196,
	0, 198, 199, 200, 197, 0, 201, 0, 202, 203,
	0, 0, 204, 205, 206, 0, 0, 0, 0, 0,
	0, 0, 207, 208, 406, 209, 355, 210, 356, 357,
	0, 211, 0, 212, 0, 213, 0, 0, 214, 215,
	0, 216, 0, 0, 0, 358, 217, 219, 218, 220,
	359, 360, 0, 0, 0, 0, 0, 0, 0, 221,
	222, 361, 362, 363, 0, 223, 0, 224, 0, 0,
	0, 0, 225, 364, 0, 365, 0, 0, 226, 227,
	0, 0, 228, 229, 366, 367, 0, 0, 368, 233,
	0, 230, 0, 0, 231, 369, 232, 370, 371, 372,
	373, 374, 0, 375, 0, 0, 234, 235, 236, 0,
	237, 238, 239, 0, 241, 240, 0, 376, 0, 242,
	0, 0, 243, 0, 0, 244, 0, 245, 246, 247,
	249, 377, 516, 0, 250, 251, 253, 252, 0, 0,
	0, 378, 254, 379, 255, 256, 0, 257, 0, 0,
	258, 0, 0, 259, 380, 0, 260, 0, 381, 261,
	262, 263, 264, 265, 0, 266, 382, 267, 383, 268,
	0, 269, 270, 271, 272, 273, 384, 274, 275, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 281, 284,
	285, 286, 287, 0, 288, 0, 289, 290, 385, 291,
	0, 295, 296, 297, 298, 0, 300, 386, 299, 301,
	302, 0, 303, 292, 293, 304, 0, 305, 387, 388,
	306, 0, 313, 307, 308, 294, 309, 312, 389, 310,
	311, 390, 0, 314, 0, 315, 316, 317, 318, 319,
	320, 321, 0, 511, 392, 393, 0, 0, 322, 323,
	394, 395, 0, 324, 325, 326, 327, 0, 0, 328,
	329, 330, 331, 0, 332, 0, 396, 333, 334, 335,
	397, 398, 0, 1241, 336, 180, 0, 0, 0, 337,
	338, 339, 340, 341, 0, 0, 0, 0, 0, 0,
	0, 183, 184, 0, 185, 0, 0, 0, 0, 342,
	0, 0, 0, 0, 186, 187, 188, 343, 344, 345,
	346, 189, 347, 348, 0, 190, 349, 350, 191, 192,
	0, 0, 351, 352, 353, 0, 193, 354, 0, 0,
	0, 194, 195, 196, 0, 198, 199, 200, 197, 0,
	201, 0, 202, 203, 0, 0, 204, 205, 206, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 406, 209,
	355, 210, 356, 357, 0, 211, 0, 212, 0, 213,
	0, 0, 214, 215, 0, 216, 0, 0, 0, 358,
	217, 219, 218, 220, 359, 360, 0, 0, 0, 0,
	0, 0, 0, 221, 222, 361, 362, 363, 0, 223,
	0, 224, 0, 0, 0, 0, 225, 364, 0, 365,
	0, 0, 226, 227, 0, 0, 228, 229, 1240, 367,
	0, 0, 368, 233, 0, 230, 0, 0, 231, 369,
	232, 370, 371, 372, 373, 374, 0, 375, 0, 0,
	234, 235, 236, 0, 237, 238, 239, 0, 241, 240,
	0, 376, 0, 242, 0, 0, 243, 0, 0, 244,
	0, 245, 246, 247, 249, 377, 248, 0, 250, 251,
	253, 252, 0, 0, 0, 378, 254, 379, 255, 256,
	0, 257, 0, 0, 258, 0, 0, 259, 380, 0,
	260, 0, 381, 261, 262, 263, 264, 265, 0, 266,
	382, 267, 383, 268, 0, 269, 270, 271, 272, 273,
	384, 274, 275, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 281, 284, 285, 286, 287, 0, 288, 0,
	289, 290, 385, 291, 0, 295, 296, 297, 298, 0,
	300, 386, 299, 301, 302, 0, 303, 292, 293, 304,
	0, 305, 387, 388, 306, 0, 313, 307, 308, 294,
	309, 312, 389, 310, 311, 390, 0, 314, 0, 315,
	316, 317, 318, 319, 320, 321, 0, 391, 392, 393,
	0, 0, 322, 323, 394, 395, 0, 324, 325, 326,
	327, 0, 0, 328, 329, 330, 331, 0, 332, 0,
	396, 333, 334, 335, 397, 398, 0, 514, 336, 180,
	0, 0, 0, 337, 338, 339, 340, 341, 0, 0,
	0, 0, 0, 0, 0, 183, 184, 0, 185, 0,
	0, 0, 0, 342, 0, 0, 0, 0, 186, 187,
	188, 343, 344, 345, 346, 189, 347, 348, 0, 190,
	349, 350, 191, 192, 0, 0, 351, 352, 959, 0,
	193, 354, 0, 0, 0, 194, 195, 196, 0, 198,
	199, 200, 197, 0, 201, 0, 202, 203, 0, 0,
	204, 205, 206, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 406, 209, 355, 210, 356, 357, 0, 211,
	0, 212, 0, 213, 0, 0, 214, 215, 0, 216,
	0, 0, 0, 358, 217, 219, 218, 220, 359, 360,
	0, 0, 0, 0, 0, 0, 0, 221, 222, 361,
	362, 363, 0, 223, 0, 224, 0, 0, 0, 0,
	225, 364, 0, 365, 0, 0, 226, 227, 0, 0,
	228, 229, 366, 367, 0, 0, 368, 233, 0, 230,
	0, 0, 231, 369, 232, 370, 371, 372, 373, 374,
	0, 375, 0, 0, 234, 235, 236, 0, 237, 238,
	239, 0, 241, 240, 0, 376, 0, 242, 0, 0,
	243, 0, 0, 244, 0, 245, 246, 247, 249, 377,
	516, 0, 250, 251, 253, 252, 0, 0, 0, 378,
	254, 379, 255, 256, 0, 257, 0, 0, 258, 0,
	0, 259, 380, 0, 260, 0, 381, 261, 262, 263,
	264, 265, 0, 266, 382, 267, 383, 268, 0, 269,
	270, 271, 272, 273, 384, 274, 275, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 281, 284, 285, 286,
	287, 0, 288, 0, 289, 290, 385, 291, 0, 295,
	296, 297, 298, 0, 300, 386, 299, 301, 302, 0,
	303, 292, 293, 304, 0, 305, 387, 388, 306, 0,
	313, 307, 308, 294, 309, 312, 389, 310, 311, 390,
	0, 314, 0, 315, 316, 317, 318, 319, 320, 321,
	0, 511, 392, 393, 0, 0, 322, 960, 394, 395,
	0, 324, 325, 326, 327, 0, 0, 328, 329, 330,
	331, 0, 332, 0, 396, 333, 334, 335, 397, 398,
	0, 514, 336, 180, 0, 0, 0, 337, 338, 339,
	340, 341, 0, 0, 0, 0, 0, 0, 0, 183,
	184, 0, 185, 0, 0, 0, 0, 342, 0, 0,
	0, 0, 186, 187, 188, 343, 344, 345, 346, 189,
	347, 348, 0, 190, 349, 350, 191, 192, 0, 0,
	351, 352, 353, 0, 505, 354, 0, 0, 0, 194,
	195, 196, 0, 198, 199, 200, 197, 0, 201, 0,
	202, 203, 0, 0, 204, 205, 206, 0, 0, 0,
	0, 0, 0, 0, 207, 208, 406, 209, 355, 210,
	356, 357, 0, 211, 0, 212, 0, 213, 0, 0,
	214, 215, 0, 216, 0, 0, 0, 358, 217, 219,
	218, 220, 359, 360, 0, 0, 0, 0, 0, 0,
	0, 221, 222, 361, 362, 363, 0, 223, 0, 224,
	0, 0, 0, 0, 225, 364, 0, 365, 0, 0,
	226, 227, 0, 0, 228, 229, 366, 367, 0, 0,
	368, 233, 0, 230, 0, 0, 231, 369, 232, 370,
	371, 372, 373, 374, 0, 375, 0, 0, 234, 235,
	236, 0, 237, 238, 239, 0, 241, 240, 0, 376,
	0, 242, 0, 0, 243, 0, 0, 244, 0, 245,
	246, 247, 249, 377, 516, 0, 250, 251, 253, 252,
	0, 0, 0, 378, 254, 379, 255, 256, 0, 257,
	0, 0, 258, 0, 0, 259, 380, 0, 260, 0,
	381, 261, 262, 263, 264, 265, 0, 266, 382, 267,
	383, 268, 0, 269, 270, 271, 272, 273, 384, 274,
	275, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	281, 284, 285, 286, 287, 0, 288, 0, 289, 290,
	385, 291, 0, 295, 296, 297, 298, 0, 300, 386,
	299, 943, 302, 0, 303, 292, 293, 304, 0, 305,
	387, 388, 306, 0, 313, 307, 308, 294, 309, 312,
	389, 310, 311, 390, 0, 314, 0, 315, 316, 317,
	318, 319, 320, 321, 0, 511, 392, 393, 0, 0,
	322, 323, 394, 395, 0, 324, 325, 326, 327, 0,
	0, 328, 329, 330, 331, 0, 332, 0, 396, 333,
	334, 335, 397, 398, 0, 922, 336, 180, 0, 0,
	0, 337, 338, 339, 340, 341, 0, 0, 0, 0,
	0, 0, 0, 183, 184, 0, 185, 0, 0, 0,
	0, 342, 0, 0, 0, 0, 186, 187, 188, 343,
	344, 345, 346, 189, 347, 348, 0, 190, 349, 350,
	191, 192, 0, 0, 351, 352, 353, 0, 193, 354,
	0, 0, 0, 194, 195, 196, 0, 198, 199, 200,
	197, 0, 201, 0, 202, 203, 0, 0, 204, 205,
	206, 0, 0, 0, 0, 0, 0, 0, 207, 208,
	406, 209, 355, 210, 356, 357, 0, 211, 0, 212,
	0, 213, 0, 0, 214, 215, 0, 216, 0, 0,
	0, 358, 217, 219, 218, 220, 359, 360, 0, 0,
	0, 0, 0, 0, 0, 221, 222, 361, 362, 363,
	0, 223, 0, 224, 0, 0, 0, 0, 225, 364,
	0, 365, 0, 0, 226, 227, 0, 0, 228, 229,
	921, 367, 0, 0, 368, 233, 0, 230, 0, 0,
	231, 369, 232, 370, 371, 372, 373, 374, 0, 375,
	0, 0, 234, 235, 236, 0, 237, 238, 239, 0,
	241, 240, 0, 376, 0, 242, 0, 0, 243, 0,
	0, 244, 0, 245, 246, 247, 249, 377, 248, 0,
	250, 251, 253, 252, 0, 0, 0, 378, 254, 379,
	255, 256, 0, 257, 0, 0, 258, 0, 0, 259,
	380, 0, 260, 0, 381, 261, 262, 263, 264, 265,
	0, 266, 382, 267, 383, 268, 0, 269, 270, 271,
	272, 273, 384, 274, 275, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 281, 284, 285, 286, 287, 0,
	288, 0, 289, 290, 385, 291, 0, 295, 296, 297,
	298, 0, 300, 386, 299, 301, 302, 0, 303, 292,
	293, 304, 0, 305, 387, 388, 306, 0, 313, 307,
	308, 294, 309, 312, 389, 310, 311, 390, 0, 314,
	0, 315, 316, 317, 318, 319, 320, 321, 0, 391,
	392, 393, 0, 0, 322, 323, 394, 395, 0, 324,
	325, 326, 327, 0, 0, 328, 329, 330, 331, 0,
	332, 0, 396, 333, 334, 335, 397, 398, 0, 919,
	336, 180, 0, 0, 0, 337, 338, 339, 340, 341,
	0, 0, 0, 0, 0, 0, 0, 183, 184, 0,
	185, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	186, 187, 188, 343, 344, 345, 346, 189, 347, 348,
	0, 190, 349, 350, 191, 192, 0, 0, 351, 352,
	353, 0, 193, 354, 0, 0, 0, 194, 195, 196,
	0, 198, 199, 200, 197, 0, 201, 0, 202, 203,
	0, 0, 204, 205, 206, 0, 0, 0, 0, 0,
	0, 0, 207, 208, 406, 209, 355, 210, 356, 357,
	0, 211, 0, 212, 0, 213, 0, 0, 214, 215,
	0, 216, 0, 0, 0, 358, 217, 219, 218, 220,
	359, 360, 0, 0, 0, 0, 0, 0, 0, 221,
	222, 361, 362, 363, 0, 223, 0, 224, 0, 0,
	0, 0, 225, 364, 0, 365, 0, 0, 226, 227,
	0, 0, 228, 229, 918, 367, 0, 0, 368, 233,
	0, 230, 0, 0, 231, 369, 232, 370, 371, 372,
	373, 374, 0, 375, 0, 0, 234, 235, 236, 0,
	237, 238, 239, 0, 241, 240, 0, 376, 0, 242,
	0, 0, 243, 0, 0, 244, 0, 245, 246, 247,
	249, 377, 248, 0, 250, 251, 253, 252, 0, 0,
	0, 378, 254, 379, 255, 256, 0, 257, 0, 0,
	258, 0, 0, 259, 380, 0, 260, 0, 381, 261,
	262, 263, 264, 265, 0, 266, 382, 267, 383, 268,
	0, 269, 270, 271, 272, 273, 384, 274, 275, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 281, 284,
	285, 286, 287, 0, 288, 0, 289, 290, 385, 291,
	0, 295, 296, 297, 298, 0, 300, 386, 299, 301,
	302, 0, 303, 292, 293, 304, 0, 305, 387, 388,
	306, 0, 313, 307, 308, 294, 309, 312, 389, 310,
	311, 390, 0, 314, 0, 315, 316, 317, 318, 319,
	320, 321, 0, 391, 392, 393, 0, 0, 322, 323,
	394, 395, 0, 324, 325, 326, 327, 0, 0, 328,
	329, 330, 331, 0, 332, 0, 396, 333, 334, 335,
	397, 398, 0, 915, 336, 180, 0, 0, 0, 337,
	338, 339, 340, 341, 0, 0, 0, 0, 0, 0,
	0, 183, 184, 0, 185, 0, 0, 0, 0, 342,
	0, 0, 0, 0, 186, 187, 188, 343, 344, 345,
	346, 189, 347, 348, 0, 190, 349, 350, 191, 192,
	0, 0, 351, 352, 353, 0, 193, 354, 0, 0,
	0, 194, 195, 196, 0, 198, 199, 200, 197, 0,
	201, 0, 202, 203, 0, 0, 204, 205, 206, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 406, 209,
	355, 210, 356, 357, 0, 211, 0, 212, 0, 213,
	0, 0, 214, 215, 0, 216, 0, 0, 0, 358,
	217, 219, 218, 220, 359, 360, 0, 0, 0, 0,
	0, 0, 0, 221, 222, 361, 362, 363, 0, 223,
	0, 224, 0, 0, 0, 0, 225, 364, 0, 365,
	0, 0, 226, 227, 0, 0, 228, 229, 914, 367,
	0, 0, 368, 233, 0, 230, 0, 0, 231, 369,
	232, 370, 371, 372, 373, 374, 0, 375, 0, 0,
	234, 235, 236, 0, 237, 238, 239, 0, 241, 240,
	0, 376, 0, 242, 0, 0, 243, 0, 0, 244,
	0, 245, 246, 247, 249, 377, 248, 0, 250, 251,
	253, 252, 0, 0, 0, 378, 254, 379, 255, 256,
	0, 257, 0, 0, 258, 0, 0, 259, 380, 0,
	260, 0, 381, 261, 262, 263, 264, 265, 0, 266,
	382, 267, 383, 268, 0, 269, 270, 271, 272, 273,
	384, 274, 275, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 281, 284, 285, 286, 287, 0, 288, 0,
	289, 290, 385, 291, 0, 295, 296, 297, 298, 0,
	300, 386, 299, 301, 302, 0, 303, 292, 293, 304,
	0, 305, 387, 388, 306, 0, 313, 307, 308, 294,
	309, 312, 389, 310, 311, 390, 0, 314, 0, 315,
	316, 317, 318, 319, 320, 321, 0, 391, 392, 393,
	0, 0, 322, 323, 394, 395, 0, 324, 325, 326,
	327, 0, 0, 328, 329, 330, 331, 0, 332, 0,
	396, 333, 334, 335, 397, 398, 0, 912, 336, 180,
	0, 0, 0, 337, 338, 339, 340, 341, 0, 0,
	0, 0, 0, 0, 0, 183, 184, 0, 185, 0,
	0, 0, 0, 342, 0, 0, 0, 0, 186, 187,
	188, 343, 344, 345, 346, 189, 347, 348, 0, 190,
	349, 350, 191, 192, 0, 0, 351, 352, 353, 0,
	193, 354, 0, 0, 0, 194, 195, 196, 0, 198,
	199, 200, 197, 0, 201, 0, 202, 203, 0, 0,
	204, 205, 206, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 406, 209, 355, 210, 356, 357, 0, 211,
	0, 212, 0, 213, 0, 0, 214, 215, 0, 216,
	0, 0, 0, 358, 217, 219, 218, 220, 359, 360,
	0, 0, 0, 0, 0, 0, 0, 221, 222, 361,
	362, 363, 0, 223, 0, 224, 0, 0, 0, 0,
	225, 364, 0, 365, 0, 0, 226, 227, 0, 0,
	228, 229, 911, 367, 0, 0, 368, 233, 0, 230,
	0, 0, 231, 369, 232, 370, 371, 372, 373, 374,
	0, 375, 0, 0, 234, 235, 236, 0, 237, 238,
	239, 0, 241, 240, 0, 376, 0, 242, 0, 0,
	243, 0, 0, 244, 0, 245, 246, 247, 249, 377,
	248, 0, 250, 251, 253, 252, 0, 0, 0, 378,
	254, 379, 255, 256, 0, 257, 0, 0, 258, 0,
	0, 259, 380, 0, 260, 0, 381, 261, 262, 263,
	264, 265, 0, 266, 382, 267, 383, 268, 0, 269,
	270, 271, 272, 273, 384, 274, 275, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 281, 284, 285, 286,
	287, 0, 288, 0, 289, 290, 385, 291, 0, 295,
	296, 297, 298, 0, 300, 386, 299, 301, 302, 0,
	303, 292, 293, 304, 0, 305, 387, 388, 306, 0,
	313, 307, 308, 294, 309, 312, 389, 310, 311, 390,
	0, 314, 0, 315, 316, 317, 318, 319, 320, 321,
	0, 391, 392, 393, 0, 0, 322, 323, 394, 395,
	0, 324, 325, 326, 327, 0, 0, 328, 329, 330,
	331, 0, 332, 0, 396, 333, 334, 335, 397, 398,
	0, 908, 336, 180, 0, 0, 0, 337, 338, 339,
	340, 341, 0, 0, 0, 0, 0, 0, 0, 183,
	184, 0, 185, 0, 0, 0, 0, 342, 0, 0,
	0, 0, 186, 187, 188, 343, 344, 345, 346, 189,
	347, 348, 0, 190, 349, 350, 191, 192, 0, 0,
	351, 352, 353, 0, 193, 354, 0, 0, 0, 194,
	195, 196, 0, 198, 199, 200, 197, 0, 201, 0,
	202, 203, 0, 0, 204, 205, 206, 0, 0, 0,
	0, 0, 0, 0, 207, 208, 406, 209, 355, 210,
	356, 357, 0, 211, 0, 212, 0, 213, 0, 0,
	214, 215, 0, 216, 0, 0, 0, 358, 217, 219,
	218, 220, 359, 360, 0, 0, 0, 0, 0, 0,
	0, 221, 222, 361, 362, 363, 0, 223, 0, 224,
	0, 0, 0, 0, 225, 364, 0, 365, 0, 0,
	226, 227, 0, 0, 228, 229, 907, 367, 0, 0,
	368, 233, 0, 230, 0, 0, 231, 369, 232, 370,
	371, 372, 373, 374, 0, 375, 0, 0, 234, 235,
	236, 0, 237, 238, 239, 0, 241, 240, 0, 376,
	0, 242, 0, 0, 243, 0, 0, 244, 0, 245,
	246, 247, 249, 377, 248, 0, 250, 251, 253, 252,
	0, 0, 0, 378, 254, 379, 255, 256, 0, 257,
	0, 0, 258, 0, 0, 259, 380, 0, 260, 0,
	381, 261, 262, 263, 264, 265, 0, 266, 382, 267,
	383, 268, 0, 269, 270, 271, 272, 273, 384, 274,
	275, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	281, 284, 285, 286, 287, 0, 288, 0, 289, 290,
	385, 291, 0, 295, 296, 297, 298, 0, 300, 386,
	299, 301, 302, 0, 303, 292, 293, 304, 0, 305,
	387, 388, 306, 0, 313, 307, 308, 294, 309, 312,
	389, 310, 311, 390, 0, 314, 0, 315, 316, 317,
	318, 319, 320, 321, 0, 391, 392, 393, 0, 0,
	322, 323, 394, 395, 0, 324, 325, 326, 327, 0,
	0, 328, 329, 330, 331, 0, 332, 0, 396, 333,
	334, 335, 397, 398, 180, 0, 336, 0, 0, 0,
	0, 337, 338, 339, 340, 341, 0, 0, 0, 0,
	183, 184, 896, 185, 0, 0, 0, 0, 342, 0,
	0, 0, 0, 186, 187, 188, 343, 344, 345, 346,
	189, 347, 348, 0, 190, 349, 350, 191, 192, 0,
	0, 351, 352, 353, 0, 193, 354, 0, 0, 0,
	194, 195, 196, 0, 198, 199, 200, 197, 0, 201,
	0, 202, 203, 0, 0, 204, 205, 206, 0, 0,
	0, 0, 0, 0, 0, 207, 208, 406, 209, 355,
	210, 356, 357, 0, 211, 0, 212, 0, 213, 0,
	0, 214, 215, 0, 216, 0, 0, 0, 358, 217,
	219, 218, 220, 359, 360, 0, 0, 0, 0, 0,
	0, 0, 221, 222, 361, 362, 363, 0, 223, 0,
	224, 0, 0, 0, 0, 225, 364, 0, 365, 0,
	0, 226, 227, 0, 0, 228, 229, 366, 367, 0,
	0, 368, 233, 0, 230, 0, 0, 231, 369, 232,
	370, 371, 372, 373, 374, 0, 375, 0, 0, 234,
	235, 236, 0, 237, 238, 239, 0, 241, 240, 0,
	376, 0, 242, 0, 0, 243, 0, 0, 244, 0,
	245, 246, 247, 249, 377, 248, 0, 250, 251, 253,
	252, 0, 0, 0, 378, 254, 379, 255, 256, 0,
	257, 0, 0, 258, 0, 0, 259, 380, 0, 260,
	0, 381, 261, 262, 263, 264, 265, 0, 266, 382,
	267, 383, 268, 0, 269, 270, 271, 272, 273, 384,
	274, 275, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 281, 284, 285, 286, 287, 0, 288, 0, 289,
	290, 385, 291, 0, 295, 296, 297, 298, 0, 300,
	386, 299, 301, 302, 0, 303, 292, 293, 304, 0,
	305, 387, 388, 306, 0, 313, 307, 308, 294, 309,
	312, 389, 310, 311, 390, 0, 314, 0, 315, 316,
	317, 318, 319, 320, 321, 0, 391, 392, 393, 0,
	0, 322, 323, 394, 395, 0, 324, 325, 326, 327,
	0, 0, 328, 329, 330, 331, 0, 332, 0, 396,
	333, 334, 335, 397, 398, 0, 894, 336, 180, 0,
	0, 0, 337, 338, 339, 340, 341, 0, 0, 0,
	0, 0, 0, 0, 183, 184, 0, 185, 0, 0,
	0, 0, 342, 0, 0, 0, 0, 186, 187, 188,
	343, 344, 345, 346, 189, 347, 348, 0, 190, 349,
	350, 191, 192, 0, 0, 351, 352, 353, 0, 193,
	354, 0, 0, 0, 194, 195, 196, 0, 198, 199,
	200, 197, 0, 201, 0, 202, 203, 0, 0, 204,
	205, 206, 0, 0, 0, 0, 0, 0, 0, 207,
	208, 406, 209, 355, 210, 356, 357, 0, 211, 0,
	212, 0, 213, 0, 0, 214, 215, 0, 216, 0,
	0, 0, 358, 217, 219, 218, 220, 359, 360, 0,
	0, 0, 0, 0, 0, 0, 221, 222, 361, 362,
	363, 0, 223, 0, 224, 0, 0, 0, 0, 225,
	364, 0, 365, 0, 0, 226, 227, 0, 0, 228,
	229, 893, 367, 0, 0, 368, 233, 0, 230, 0,
	0, 231, 369, 232, 370, 371, 372, 373, 374, 0,
	375, 0, 0, 234, 235, 236, 0, 237, 238, 239,
	0, 241, 240, 0, 376, 0, 242, 0, 0, 243,
	0, 0, 244, 0, 245, 246, 247, 249, 377, 248,
	0, 250, 251, 253, 252, 0, 0, 0, 378, 254,
	379, 255, 256, 0, 257, 0, 0, 258, 0, 0,
	259, 380, 0, 260, 0, 381, 261, 262, 263, 264,
	265, 0, 266, 382, 267, 383, 268, 0, 269, 270,
	271, 272, 273, 384, 274, 275, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 281, 284, 285, 286, 287,
	0, 288, 0, 289, 290, 385, 291, 0, 295, 296,
	297, 298, 0, 300, 386, 299, 301, 302, 0, 303,
	292, 293, 304, 0, 305, 387, 388, 306, 0, 313,
	307, 308, 294, 309, 312, 389, 310, 311, 390, 0,
	314, 0, 315, 316, 317, 318, 319, 320, 321, 0,
	391, 392, 393, 0, 0, 322, 323, 394, 395, 0,
	324, 325, 326, 327, 0, 0, 328, 329, 330, 331,
	0, 332, 0, 396, 333, 334, 335, 397, 398, 0,
	890, 336, 180, 0, 0, 0, 337, 338, 339, 340,
	341, 0, 0, 0, 0, 0, 0, 0, 183, 184,
	0, 185, 0, 0, 0, 0, 342, 0, 0, 0,
	0, 186, 187, 188, 343, 344, 345, 346, 189, 347,
	348, 0, 190, 349, 350, 191, 192, 0, 0, 351,
	352, 353, 0, 193, 354, 0, 0, 0, 194, 195,
	196, 0, 198, 199, 200, 197, 0, 201, 0, 202,
	203, 0, 0, 204, 205, 206, 0, 0, 0, 0,
	0, 0, 0, 207, 208, 406, 209, 355, 210, 356,
	357, 0, 211, 0, 212, 0, 213, 0, 0, 214,
	215, 0, 216, 0, 0, 0, 358, 217, 219, 218,
	220, 359, 360, 0, 0, 0, 0, 0, 0, 0,
	221, 222, 361, 362, 363, 0, 223, 0, 224, 0,
	0, 0, 0, 225, 364, 0, 365, 0, 0, 226,
	227, 0, 0, 228, 229, 366, 367, 0, 0, 368,
	233, 0, 230, 0, 0, 231, 369, 232, 370, 371,
	372, 373, 374, 0, 375, 0, 0, 234, 235, 236,
	0, 237, 238, 239, 0, 241, 240, 0, 376, 0,
	242, 0, 0, 243, 0, 0, 244, 0, 245, 246,
	247, 249, 377, 248, 0, 250, 251, 253, 252, 0,
	0, 0, 378, 254, 379, 255, 256, 0, 257, 0,
	0, 258, 0, 0, 259, 380, 0, 260, 0, 381,
	261, 262, 263, 264, 265, 0, 266, 382, 267, 383,
	268, 0, 269, 270, 271, 272, 273, 384, 274, 275,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 281,
	284, 285, 286, 287, 0, 288, 0, 289, 290, 385,
	291, 0, 295, 296, 297, 298, 0, 300, 386, 299,
	301, 302, 0, 303, 292, 293, 304, 0, 305, 387,
	388, 306, 0, 313, 307, 308, 294, 309, 312, 389,
	310, 311, 390, 0, 314, 0, 315, 316, 317, 318,
	319, 320, 321, 0, 391, 392, 393, 0, 0, 322,
	323, 394, 395, 0, 324, 325, 326, 327, 0, 0,
	328, 329, 330, 331, 0, 332, 0, 396, 333, 334,
	335, 397, 398, 0, 875, 336, 180, 0, 0, 0,
	337, 338, 339, 340, 341, 0, 0, 0, 0, 0,
	0, 0, 183, 184, 0, 185, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 186, 187, 188, 343, 344,
	345, 346, 189, 347, 348, 0, 190, 349, 350, 191,
	192, 0, 0, 351, 352, 353, 0, 193, 354, 0,
	0, 0, 194, 195, 196, 0, 198, 199, 200, 197,
	0, 201, 0, 202, 203, 0, 0, 204, 205, 206,
	0, 0, 0, 0, 0, 0, 0, 207, 208, 406,
	209, 355, 210, 356, 357, 0, 211, 0, 212, 0,
	213, 0, 0, 214, 215, 0, 216, 0, 0, 0,
	358, 217, 219, 218, 220, 359, 360, 0, 0, 0,
	0, 0, 0, 0, 221, 222, 361, 362, 363, 0,
	223, 0, 224, 0, 0, 0, 0, 225, 364, 0,
	365, 0, 0, 226, 227, 0, 0, 228, 229, 877,
	367, 0, 0, 368, 233, 0, 230, 0, 0, 231,
	369, 232, 370, 371, 372, 373, 374, 0, 375, 0,
	0, 234, 235, 236, 0, 237, 238, 239, 0, 241,
	240, 0, 376, 0, 242, 0, 0, 243, 0, 0,
	244, 0, 245, 246, 247, 249, 377, 248, 0, 250,
	251, 253, 252, 0, 0, 0, 378, 254, 379, 255,
	256, 0, 257, 0, 0, 258, 0, 0, 259, 380,
	0, 260, 0, 381, 261, 262, 263, 264, 265, 0,
	266, 382, 267, 383, 268, 0, 269, 270, 271, 272,
	273, 384, 274, 275, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 281, 284, 285, 286, 287, 0, 288,
	0, 289, 290, 385, 291, 0, 295, 296, 297, 298,
	0, 300, 386, 299, 301, 302, 0, 303, 292, 293,
	304, 0, 305, 387, 388, 306, 0, 313, 307, 308,
	294, 309, 312, 389, 310, 311, 390, 0, 314, 0,
	315, 316, 317, 318, 319, 320, 321, 0, 391, 392,
	393, 0, 0, 322, 323, 394, 395, 0, 324, 325,
	326, 327, 0, 0, 328, 329, 330, 331, 0, 332,
	0, 396, 333, 334, 335, 397, 398, 0, 765, 336,
	180, 0, 0, 0, 337, 338, 339, 340, 341, 0,
	0, 0, 0, 0, 0, 0, 183, 184, 0, 185,
	0, 0, 0, 0, 342, 0, 0, 0, 0, 186,
	187, 188, 343, 344, 345, 346, 189, 347, 348, 0,
	190, 349, 350, 191, 192, 0, 0, 351, 352, 353,
	0, 193, 354, 0, 0, 0, 194, 195, 196, 0,
	198, 199, 200, 197, 0, 201, 0, 202, 203, 0,
	0, 204, 205, 206, 0, 0, 0, 0, 0, 0,
	0, 207, 208, 406, 209, 355, 210, 356, 357, 0,
	211, 0, 212, 0, 213, 0, 0, 214, 215, 0,
	216, 0, 0, 0, 358, 217, 219, 218, 220, 359,
	360, 0, 0, 0, 0, 0, 0, 0, 221, 222,
	361, 362, 363, 0, 223, 0, 224, 0, 0, 0,
	0, 225, 364, 0, 365, 0, 0, 226, 227, 0,
	0, 228, 229, 767, 367, 0, 0, 368, 233, 0,
	230, 0, 0, 231, 369, 232, 370, 371, 372, 373,
	374, 0, 375, 0, 0, 234, 235, 236, 0, 237,
	238, 239, 0, 241, 240, 0, 376, 0, 242, 0,
	0, 243, 0, 0, 244, 0, 245, 246, 247, 249,
	377, 248, 0, 250, 251, 253, 252, 0, 0, 0,
	378, 254, 379, 255, 256, 0, 257, 0, 0, 258,
	0, 0, 259, 380, 0, 260, 0, 381, 261, 262,
	263, 264, 265, 0, 266, 382, 267, 383, 268, 0,
	269, 270, 271, 272, 273, 384, 274, 275, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 281, 284, 285,
	286, 287, 0, 288, 0, 289, 290, 385, 291, 0,
	295, 296, 297, 298, 0, 300, 386, 299, 301, 302,
	0, 303, 292, 293, 304, 0, 305, 387, 388, 306,
	0, 313, 307, 308, 294, 309, 312, 389, 310, 311,
	390, 0, 314, 0, 315, 316, 317, 318, 319, 320,
	321, 0, 391, 392, 393, 0, 0, 322, 323, 394,
	395, 0, 324, 325, 326, 327, 0, 0, 328, 329,
	330, 331, 0, 332, 0, 396, 333, 334, 335, 397,
	398, 0, 763, 336, 180, 0, 0, 0, 337, 338,
	339, 340, 341, 0, 0, 0, 0, 0, 0, 0,
	183, 184, 0, 185, 0, 0, 0, 0, 342, 0,
	0, 0, 0, 186, 187, 188, 343, 344, 345, 346,
	189, 347, 348, 0, 190, 349, 350, 191, 192, 0,
	0, 351, 352, 353, 0, 193, 354, 0, 0, 0,
	194, 195, 196, 0, 198, 199, 200, 197, 0, 201,
	0, 202, 203, 0, 0, 204, 205, 206, 0, 0,
	0, 0, 0, 0, 0, 207, 208, 406, 209, 355,
	210, 356, 357, 0, 211, 0, 212, 0, 213, 0,
	0, 214, 215, 0, 216, 0, 0, 0, 358, 217,
	219, 218, 220, 359, 360, 0, 0, 0, 0, 0,
	0, 0, 221, 222, 361, 362, 363, 0, 223, 0,
	224, 0, 0, 0, 0, 225, 364, 0, 365, 0,
	0, 226, 227, 0, 0, 228, 229, 366, 367, 0,
	0, 368, 233, 0, 230, 0, 0, 231, 369, 232,
	370, 371, 372, 373, 374, 0, 375, 0, 0, 234,
	235, 236, 0, 237, 238, 239, 0, 241, 240, 0,
	376, 0, 242, 0, 0, 243, 0, 0, 244, 0,
	245, 246, 247, 249, 377, 248, 0, 250, 251, 253,
	252, 0, 0, 0, 378, 254, 379, 255, 256, 0,
	257, 0, 0, 258, 0, 0, 259, 380, 0, 260,
	0, 381, 261, 262, 263, 264, 265, 0, 266, 382,
	267, 383, 268, 0, 269, 270, 271, 272, 273, 384,
	274, 275, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 281, 284, 285, 286, 287, 0, 288, 0, 289,
	290, 385, 291, 0, 295, 296, 297, 298, 0, 300,
	386, 299, 301, 302, 0, 303, 292, 293, 304, 0,
	305, 387, 388, 306, 0, 313, 307, 308, 294, 309,
	312, 389, 310, 311, 390, 0, 314, 0, 315, 316,
	317, 318, 319, 320, 321, 0, 391, 392, 393, 0,
	0, 322, 323, 394, 395, 0, 324, 325, 326, 327,
	0, 0, 328, 329, 330, 331, 0, 332, 0, 396,
	333, 334, 335, 397, 398, 0, 514, 336, 180, 0,
	0, 0, 337, 338, 339, 340, 341, 0, 0, 0,
	0, 0, 0, 0, 183, 184, 0, 185, 0, 0,
	0, 0, 342, 0, 0, 0, 0, 186, 187, 188,
	343, 344, 345, 346, 189, 347, 348, 0, 190, 349,
	350, 191, 192, 0, 0, 351, 352, 353, 0, 505,
	354, 0, 0, 0, 194, 195, 196, 0, 198, 199,
	200, 197, 0, 201, 0, 202, 203, 0, 0, 204,
	205, 206, 0, 0, 0, 0, 0, 0, 0, 207,
	208, 406, 209, 355, 210, 356, 357, 0, 211, 0,
	212, 0, 213, 0, 0, 214, 215, 0, 216, 0,
	0, 0, 358, 217, 219, 218, 220, 359, 360, 0,
	0, 0, 0, 0, 0, 0, 221, 222, 361, 362,
	363, 0, 223, 0, 224, 0, 0, 0, 0, 225,
	364, 0, 365, 0, 0, 226, 227, 0, 0, 228,
	229, 366, 367, 0, 0, 368, 233, 0, 230, 0,
	0, 231, 369, 232, 370, 371, 372, 373, 374, 0,
	375, 0, 0, 234, 235, 236, 0, 237, 238, 239,
	0, 241, 240, 0, 376, 0, 242, 0, 0, 504,
	0, 0, 244, 0, 245, 246, 247, 249, 377, 516,
	0, 250, 251, 253, 252, 0, 0, 0, 378, 254,
	379, 255, 256, 0, 257, 0, 0, 258, 0, 0,
	259, 380, 0, 260, 0, 381, 261, 262, 263, 264,
	265, 0, 266, 382, 267, 383, 268, 0, 269, 270,
	271, 272, 273, 384, 274, 275, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 281, 284, 285, 286, 287,
	0, 288, 0, 289, 290, 506, 291, 0, 295, 296,
	297, 298, 0, 300, 386, 299, 507, 302, 0, 303,
	292, 293, 304, 0, 305, 387, 388, 306, 0, 313,
	307, 308, 294, 309, 312, 389, 310, 311, 390, 0,
	314, 0, 315, 316, 317, 318, 319, 320, 321, 0,
	511, 392, 393, 0, 0, 322, 509, 394, 395, 0,
	324, 325, 326, 327, 0, 0, 328, 329, 330, 331,
	0, 332, 0, 396, 333, 334, 335, 397, 398, 0,
	496, 336, 180, 0, 0, 0, 337, 338, 339, 340,
	341, 0, 0, 0, 0, 0, 0, 0, 183, 184,
	0, 185, 0, 0, 0, 0, 342, 0, 0, 0,
	0, 186, 187, 188, 343, 344, 345, 346, 189, 347,
	348, 0, 190, 349, 350, 191, 192, 0, 0, 351,
	352, 353, 0, 193, 354, 0, 0, 0, 194, 195,
	196, 0, 198, 199, 200, 197, 0, 201, 0, 202,
	203, 0, 0, 204, 205, 206, 0, 0, 0, 0,
	0, 0, 0, 207, 208, 406, 209, 355, 210, 356,
	357, 0, 211, 0, 212, 0, 213, 0, 0, 214,
	215, 0, 216, 0, 0, 0, 358, 217, 219, 218,
	220, 359, 360, 0, 0, 0, 0, 0, 0, 0,
	221, 222, 361, 362, 363, 0, 223, 0, 224, 0,
	0, 0, 0, 225, 364, 0, 365, 0, 0, 226,
	227, 0, 0, 228, 229, 366, 367, 0, 0, 368,
	233, 0, 230, 0, 0, 231, 369, 232, 370, 371,
	372, 373, 374, 0, 375, 0, 0, 234, 235, 236,
	0, 237, 238, 239, 0, 241, 240, 0, 376, 0,
	242, 0, 0, 243, 0, 0, 244, 0, 245, 246,
	247, 249, 377, 248, 0, 250, 251, 253, 252, 0,
	0, 0, 378, 254, 379, 255, 256, 0, 257, 0,
	0, 258, 0, 0, 259, 380, 0, 260, 0, 381,
	261, 262, 263, 264, 265, 0, 266, 382, 267, 383,
	268, 0, 269, 270, 271, 272, 273, 384, 274, 275,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 281,
	284, 285, 286, 287, 0, 288, 0, 289, 290, 385,
	291, 0, 497, 296, 297, 298, 0, 300, 386, 299,
	301, 302, 0, 303, 292, 293, 304, 0, 305, 387,
	388, 306, 0, 313, 307, 308, 294, 309, 312, 389,
	310, 311, 390, 0, 314, 0, 315, 316, 317, 318,
	319, 320, 321, 0, 391, 392, 393, 0, 0, 322,
	323, 394, 395, 0, 324, 325, 326, 327, 0, 0,
	328, 329, 330, 331, 0, 332, 0, 396, 333, 334,
	335, 397, 398, 0, 494, 336, 180, 0, 0, 0,
	337, 338, 339, 340, 341, 0, 0, 0, 0, 0,
	0, 0, 183, 184, 0, 185, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 186, 187, 188, 343, 344,
	345, 346, 189, 347, 348, 0, 190, 349, 350, 191,
	192, 0, 0, 351, 352, 353, 0, 193, 354, 0,
	0, 0, 194, 195, 196, 0, 198, 199, 200, 197,
	0, 201, 0, 202, 203, 0, 0, 204, 205, 206,
	0, 0, 0, 0, 0, 0, 0, 207, 208, 406,
	209, 355, 210, 356, 357, 0, 211, 0, 212, 0,
	213, 0, 0, 214, 215, 0, 216, 0, 0, 0,
	358, 217, 219, 218, 220, 359, 360, 0, 0, 0,
	0, 0, 0, 0, 221, 222, 361, 362, 363, 0,
	223, 0, 224, 0, 0, 0, 0, 225, 364, 0,
	365, 0, 0, 226, 227, 0, 0, 228, 229, 366,
	367, 0, 0, 368, 233, 0, 230, 0, 0, 231,
	369, 232, 370, 371, 372, 373, 374, 0, 375, 0,
	0, 234, 235, 236, 0, 237, 238, 239, 0, 241,
	240, 0, 376, 0, 242, 0, 0, 243, 0, 0,
	244, 0, 245, 246, 247, 249, 377, 248, 0, 250,
	251, 253, 252, 0, 0, 0, 378, 254, 379, 255,
	256, 0, 257, 0, 0, 258, 0, 0, 259, 380,
	0, 260, 0, 381, 261, 262, 263, 264, 265, 0,
	266, 382, 267, 383, 268, 0, 269, 270, 271, 272,
	273, 384, 274, 275, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 281, 284, 285, 286, 287, 0, 288,
	0, 289, 290, 385, 291, 0, 295, 296, 297, 298,
	0, 300, 386, 299, 301, 302, 0, 303, 292, 293,
	304, 0, 305, 387, 388, 306, 0, 313, 307, 308,
	294, 309, 312, 389, 310, 311, 390, 0, 314, 0,
	315, 316, 317, 318, 319, 320, 321, 0, 391, 392,
	393, 0, 0, 322, 323, 394, 395, 0, 324, 325,
	326, 327, 0, 0, 328, 329, 330, 331, 0, 332,
	0, 396, 333, 334, 335, 397, 398, 0, 486, 336,
	180, 0, 0, 0, 337, 338, 339, 340, 341, 0,
	0, 0, 0, 0, 0, 0, 183, 184, 0, 185,
	0, 0, 0, 0, 342, 0, 0, 0, 0, 186,
	187, 188, 343, 344, 345, 346, 189, 347, 348, 0,
	190, 349, 350, 191, 192, 0, 0, 351, 352, 353,
	0, 193, 354, 0, 0, 0, 194, 195, 196, 0,
	198, 199, 200, 197, 0, 201, 0, 202, 203, 0,
	0, 204, 205, 206, 0, 0, 0, 0, 0, 0,
	0, 207, 208, 406, 209, 355, 210, 356, 357, 0,
	211, 0, 212, 0, 213, 0, 0, 214, 215, 0,
	216, 0, 0, 0, 358, 217, 219, 218, 220, 359,
	360, 0, 0, 0, 0, 0, 0, 0, 221, 222,
	361, 362, 363, 0, 223, 0, 224, 0, 0, 0,
	0, 225, 364, 0, 365, 0, 0, 226, 227, 0,
	0, 228, 229, 366, 367, 0, 0, 368, 233, 0,
	230, 0, 0, 231, 369, 232, 370, 371, 372, 373,
	374, 0, 375, 0, 0, 234, 235, 236, 0, 237,
	238, 239, 0, 241, 240, 0, 376, 0, 242, 0,
	0, 243, 0, 0, 244, 0, 245, 246, 247, 249,
	377, 248, 0, 250, 251, 253, 252, 0, 0, 0,
	378, 254, 379, 255, 256, 0, 257, 0, 0, 258,
	0, 0, 259, 380, 0, 260, 0, 381, 261, 262,
	263, 264, 265, 0, 266, 382, 267, 383, 268, 0,
	269, 270, 271, 272, 273, 384, 274, 275, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 281, 284, 285,
	286, 287, 0, 288, 0, 289, 290, 385, 291, 0,
	295, 296, 297, 298, 0, 300, 386, 299, 301, 302,
	0, 303, 292, 293, 304, 0, 305, 387, 388, 306,
	0, 313, 307, 308, 294, 309, 312, 389, 310, 311,
	390, 0, 314, 0, 315, 316, 317, 318, 319, 320,
	321, 0, 391, 392, 393, 0, 0, 322, 323, 394,
	395, 0, 324, 325, 326, 327, 0, 0, 328, 329,
	330, 331, 0, 332, 0, 396, 333, 334, 335, 397,
	398, 0, 441, 336, 180, 0, 0, 0, 337, 338,
	339, 340, 341, 0, 0, 0, 0, 0, 0, 0,
	183, 184, 0, 185, 0, 0, 0, 0, 342, 0,
	0, 0, 0, 186, 187, 188, 343, 344, 345, 346,
	189, 347, 348, 0, 190, 349, 350, 191, 192, 0,
	0, 351, 352, 353, 0, 193, 354, 0, 0, 0,
	194, 195, 196, 0, 198, 199, 200, 197, 0, 201,
	0, 202, 203, 0, 0, 204, 205, 206, 0, 0,
	0, 0, 0, 0, 0, 207, 208, 406, 209, 355,
	210, 356, 357, 0, 211, 0, 212, 0, 213, 0,
	0, 214, 215, 0, 216, 0, 0, 0, 358, 217,
	219, 218, 220, 359, 360, 0, 0, 0, 0, 0,
	0, 0, 221, 222, 361, 362, 363, 0, 223, 0,
	224, 0, 0, 0, 0, 225, 364, 0, 365, 0,
	0, 226, 227, 0, 0, 228, 229, 366, 367, 0,
	0, 368, 233, 0, 230, 0, 0, 231, 369, 232,
	370, 371, 372, 373, 374, 0, 375, 0, 0, 234,
	235, 236, 0, 237, 238, 239, 0, 241, 240, 0,
	376, 0, 242, 0, 0, 243, 0, 0, 244, 0,
	245, 246, 247, 249, 377, 248, 0, 250, 251, 253,
	252, 0, 0, 0, 378, 254, 379, 255, 256, 0,
	257, 0, 0, 258, 0, 0, 259, 380, 0, 260,
	0, 381, 261, 262, 263, 264, 265, 0, 266, 382,
	267, 383, 268, 0, 269, 270, 271, 272, 273, 384,
	274, 275, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 281, 284, 285, 286, 287, 0, 288, 0, 289,
	290, 385, 291, 0, 295, 296, 297, 298, 0, 300,
	386, 299, 301, 302, 0, 303, 292, 293, 304, 0,
	305, 387, 388, 306, 0, 313, 307, 308, 294, 309,
	312, 389, 310, 311, 390, 0, 314, 0, 315, 316,
	317, 318, 319, 320, 321, 0, 391, 392, 393, 0,
	0, 322, 323, 394, 395, 0, 324, 325, 326, 327,
	0, 0, 328, 329, 330, 331, 0, 332, 0, 396,
	333, 334, 335, 397, 398, 180, 0, 336, 0, 0,
	0, 0, 337, 338, 339, 340, 341, 0, 0, 0,
	0, 183, 184, 0, 185, 0, 0, 0, 0, 342,
	0, 0, 0, 0, 186, 187, 188, 343, 344, 345,
	346, 189, 347, 348, 0, 190, 349, 350, 191, 192,
	0, 0, 351, 352, 353, 0, 193, 354, 0, 0,
	0, 194, 195, 196, 0, 198, 199, 200, 197, 0,
	201, 0, 202, 203, 0, 0, 204, 205, 206, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 406, 209,
	355, 210, 356, 357, 0, 211, 0, 212, 0, 213,
	0, 0, 214, 215, 0, 216, 0, 0, 0, 358,
	217, 219, 218, 220, 359, 360, 0, 0, 0, 0,
	0, 0, 0, 221, 222, 361, 362, 363, 0, 223,
	0, 224, 0, 0, 0, 0, 225, 364, 0, 365,
	0, 0, 226, 227, 0, 0, 228, 229, 366, 367,
	0, 0, 368, 233, 0, 230, 0, 0, 231, 369,
	232, 370, 371, 372, 373, 374, 0, 375, 0, 0,
	234, 235, 236, 0, 237, 238, 239, 0, 241, 240,
	0, 376, 0, 242, 0, 0, 243, 0, 0, 244,
	0, 245, 246, 247, 249, 377, 248, 0, 250, 251,
	253, 252, 0, 0, 0, 378, 254, 379, 255, 256,
	0, 257, 0, 0, 258, 0, 0, 259, 380, 0,
	260, 0, 381, 261, 262, 263, 264, 265, 0, 266,
	382, 267, 383, 268, 0, 269, 270, 271, 272, 273,
	384, 274, 275, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 281, 284, 285, 286, 287, 0, 288, 0,
	289, 290, 385, 291, 0, 295, 296, 297, 298, 0,
	300, 386, 299, 301, 302, 0, 303, 292, 293, 304,
	0, 305, 387, 388, 306, 0, 313, 307, 308, 294,
	309, 312, 389, 310, 311, 390, 0, 314, 0, 315,
	316, 317, 318, 319, 320, 321, 0, 391, 392, 393,
	0, 0, 322, 323, 394, 395, 0, 324, 325, 326,
	327, 0, 0, 328, 329, 330, 331, 0, 332, 0,
	396, 333, 334, 335, 397, 398, 180, 0, 336, 0,
	0, 0, 0, 337, 338, 339, 340, 341, 0, 0,
	0, 0, 183, 184, 0, 185, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 186, 187, 188, 343, 344,
	345, 346, 189, 347, 348, 0, 190, 349, 350, 191,
	192, 0, 0, 351, 352, 353, 0, 193, 354, 0,
	0, 0, 194, 195, 196, 0, 198, 199, 200, 197,
	0, 201, 0, 202, 203, 0, 0, 204, 205, 206,
	0, 0, 0, 0, 0, 0, 0, 207, 208, 406,
	209, 355, 210, 356, 357, 0, 211, 0, 212, 0,
	213, 0, 0, 214, 215, 0, 216, 0, 0, 0,
	358, 217, 219, 218, 220, 359, 360, 0, 0, 0,
	0, 0, 0, 0, 221, 222, 361, 362, 363, 0,
	223, 0, 224, 0, 0, 0, 0, 225, 364, 0,
	365, 0, 0, 226, 227, 0, 0, 228, 229, 1928,
	367, 0, 0, 368, 233, 0, 230, 0, 0, 231,
	369, 232, 370, 371, 372, 373, 374, 0, 375, 0,
	0, 234, 235, 236, 0, 237, 238, 239, 0, 241,
	240, 0, 376, 0, 242, 0, 0, 243, 0, 0,
	244, 0, 245, 246, 247, 249, 377, 248, 0, 250,
	251, 253, 252, 0, 0, 0, 378, 254, 379, 255,
	256, 0, 257, 0, 0, 258, 0, 0, 259, 380,
	0, 260, 0, 381, 261, 262, 263, 264, 265, 0,
	266, 382, 267, 383, 268, 0, 269, 270, 271, 272,
	273, 384, 274, 275, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 281, 284, 285, 286, 287, 0, 288,
	0, 289, 290, 385, 291, 0, 295, 296, 297, 298,
	0, 300, 386, 299, 301, 302, 0, 303, 292, 293,
	304, 0, 305, 387, 388, 306, 0, 313, 307, 308,
	294, 309, 312, 389, 310, 311, 390, 0, 314, 0,
	315, 316, 317, 318, 319, 320, 321, 0, 391, 392,
	393, 0, 0, 322, 323, 394, 395, 0, 324, 325,
	326, 327, 0, 0, 328, 329, 330, 331, 0, 332,
	0, 396, 333, 334, 335, 397, 398, 180, 0, 336,
	0, 0, 0, 0, 337, 338, 339, 340, 341, 0,
	0, 0, 0, 183, 184, 0, 185, 0, 0, 0,
	0, 342, 0, 0, 0, 0, 186, 187, 188, 343,
	344, 345, 346, 189, 347, 348, 0, 190, 349, 350,
	191, 192, 0, 0, 351, 352, 353, 0, 193, 354,
	0, 0, 0, 194, 195, 196, 0, 198, 199, 200,
	197, 0, 201, 0, 202, 203, 0, 0, 204, 205,
	206, 0, 0, 0, 0, 0, 0, 0, 207, 208,
	406, 209, 355, 210, 356, 357, 0, 211, 0, 212,
	0, 213, 0, 0, 214, 215, 0, 216, 0, 0,
	0, 358, 217, 219, 218, 220, 359, 360, 0, 0,
	0, 0, 0, 0, 0, 221, 222, 361, 362, 363,
	0, 223, 0, 224, 0, 0, 0, 0, 225, 364,
	0, 365, 0, 0, 226, 227, 0, 0, 228, 229,
	1926, 367, 0, 0, 368, 233, 0, 230, 0, 0,
	231, 369, 232, 370, 371, 372, 373, 374, 0, 375,
	0, 0, 234, 235, 236, 0, 237, 238, 239, 0,
	241, 240, 0, 376, 0, 242, 0, 0, 243, 0,
	0, 244, 0, 245, 246, 247, 249, 377, 248, 0,
	250, 251, 253, 252, 0, 0, 0, 378, 254, 379,
	255, 256, 0, 257, 0, 0, 258, 0, 0, 259,
	380, 0, 260, 0, 381, 261, 262, 263, 264, 265,
	0, 266, 382, 267, 383, 268, 0, 269, 270, 271,
	272, 273, 384, 274, 275, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 281, 284, 285, 286, 287, 0,
	288, 0, 289, 290, 385, 291, 0, 295, 296, 297,
	298, 0, 300, 386, 299, 301, 302, 0, 303, 292,
	293, 304, 0, 305, 387, 388, 306, 0, 313, 307,
	308, 294, 309, 312, 389, 310, 311, 390, 0, 314,
	0, 315, 316, 317, 318, 319, 320, 321, 0, 391,
	392, 393, 0, 0, 322, 323, 394, 395, 0, 324,
	325, 326, 327, 0, 0, 328, 329, 330, 331, 0,
	332, 0, 396, 333, 334, 335, 397, 398, 180, 0,
	336, 0, 0, 0, 0, 337, 338, 339, 340, 341,
	0, 0, 0, 0, 183, 184, 0, 185, 0, 0,
	0, 0, 342, 0, 0, 0, 0, 186, 187, 188,
	343, 344, 345, 346, 189, 347, 348, 0, 190, 349,
	350, 191, 192, 0, 0, 351, 352, 353, 0, 193,
	354, 0, 0, 0, 194, 195, 196, 0, 198, 199,
	200, 197, 0, 201, 0, 202, 203, 0, 0, 204,
	205, 206, 0, 0, 0, 0, 0, 0, 0, 207,
	208, 406, 209, 355, 210, 356, 357, 0, 211, 0,
	212, 0, 213, 0, 0, 214, 215, 0, 216, 0,
	0, 0, 358, 217, 219, 218, 220, 359, 360, 0,
	0, 0, 0, 0, 0, 0, 221, 222, 361, 362,
	363, 0, 223, 0, 224, 0, 0, 0, 0, 225,
	364, 0, 365, 0, 0, 226, 227, 0, 0, 228,
	229, 1915, 367, 0, 0, 368, 233, 0, 230, 0,
	0, 231, 369, 232, 370, 371, 372, 373, 374, 0,
	375, 0, 0, 234, 235, 236, 0, 237, 238, 239,
	0, 241, 240, 0, 376, 0, 242, 0, 0, 243,
	0, 0, 244, 0, 245, 246, 247, 249, 377, 248,
	0, 250, 251, 253, 252, 0, 0, 0, 378, 254,
	379, 255, 256, 0, 257, 0, 0, 258, 0, 0,
	259, 380, 0, 260, 0, 381, 261, 262, 263, 264,
	265, 0, 266, 382, 267, 383, 268, 0, 269, 270,
	271, 272, 273, 384, 274, 275, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 281, 284, 285, 286, 287,
	0, 288, 0, 289, 290, 385, 291, 0, 295, 296,
	297, 298, 0, 300, 386, 299, 301, 302, 0, 303,
	292, 293, 304, 0, 305, 387, 388, 306, 0, 313,
	307, 308, 294, 309, 312, 389, 310, 311, 390, 0,
	314, 0, 315, 316, 317, 318, 319, 320, 321, 0,
	391, 392, 393, 0, 0, 322, 323, 394, 395, 0,
	324, 325, 326, 327, 0, 0, 328, 329, 330, 331,
	0, 332, 0, 396, 333, 334, 335, 397, 398, 180,
	0, 336, 0, 0, 0, 0, 337, 338, 339, 340,
	341, 0, 0, 0, 0, 183, 184, 0, 185, 0,
	0, 0, 0, 342, 0, 0, 0, 0, 186, 187,
	188, 343, 344, 345, 346, 189, 347, 348, 0, 190,
	349, 350, 191, 192, 0, 0, 351, 352, 353, 0,
	193, 354, 0, 0, 0, 194, 195, 196, 0, 198,
	199, 200, 197, 0, 201, 0, 202, 203, 0, 0,
	204, 205, 206, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 406, 209, 355, 210, 356, 357, 0, 211,
	0, 212, 0, 213, 0, 0, 214, 215, 0, 216,
	0, 0, 0, 358, 217, 219, 218, 220, 359, 360,
	0, 0, 0, 0, 0, 0, 0, 221, 222, 361,
	362, 363, 0, 223, 0, 224, 0, 0, 0, 0,
	225, 364, 0, 365, 0, 0, 226, 227, 0, 0,
	228, 229, 366, 367, 0, 0, 368, 233, 0, 230,
	0, 0, 231, 369, 232, 370, 371, 372, 373, 374,
	0, 375, 0, 0, 234, 235, 236, 0, 237, 238,
	239, 0, 241, 240, 0, 376, 0, 242, 0, 0,
	243, 0, 0, 244, 0, 245, 246, 247, 249, 377,
	248, 0, 250, 251, 253, 252, 0, 0, 0, 378,
	254, 379, 255, 256, 0, 257, 0, 0, 258, 0,
	0, 259, 380, 0, 260, 0, 381, 261, 262, 263,
	264, 265, 0, 266, 382, 267, 383, 268, 0, 269,
	270, 271, 272, 273, 384, 274, 275, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 281, 284, 285, 286,
	287, 0, 288, 0, 289, 290, 385, 291, 0, 497,
	296, 297, 298, 0, 300, 386, 299, 301, 302, 0,
	303, 292, 293, 304, 0, 305, 387, 388, 306, 0,
	313, 307, 308, 294, 309, 312, 389, 310, 311, 390,
	0, 314, 0, 315, 316, 317, 318, 319, 320, 321,
	0, 391, 392, 393, 0, 0, 322, 323, 394, 395,
	0, 324, 325, 326, 327, 0, 0, 328, 329, 330,
	331, 0, 332, 0, 396, 333, 334, 335, 397, 398,
	180, 0, 336, 0, 0, 0, 0, 337, 338, 339,
	340, 341, 0, 0, 0, 0, 183, 184, 0, 185,
	0, 0, 0, 0, 342, 0, 1251, 0, 0, 186,
	187, 188, 343, 344, 345, 346, 189, 347, 348, 0,
	190, 349, 350, 191, 192, 0, 0, 351, 352, 353,
	0, 193, 354, 0, 0, 0, 194, 195, 196, 0,
	198, 199, 200, 197, 0, 201, 0, 202, 203, 0,
	0, 204, 205, 206, 0, 0, 0, 0, 0, 0,
	0, 207, 208, 406, 209, 355, 210, 356, 357, 0,
	211, 0, 212, 0, 213, 0, 0, 214, 215, 0,
	216, 0, 0, 0, 358, 217, 219, 218, 220, 359,
	360, 0, 0, 0, 0, 0, 0, 0, 221, 222,
	361, 362, 363, 0, 223, 0, 224, 0, 0, 0,
	0, 225, 364, 0, 365, 0, 0, 226, 227, 0,
	0, 228, 229, 366, 367, 0, 0, 368, 233, 0,
	230, 0, 0, 231, 369, 232, 370, 371, 372, 373,
	374, 0, 375, 0, 0, 234, 235, 236, 0, 237,
	238, 239, 0, 241, 240, 0, 376, 0, 242, 0,
	0, 243, 0, 0, 244, 0, 245, 246, 247, 249,
	377, 248, 0, 250, 251, 253, 252, 0, 0, 0,
	378, 254, 379, 255, 256, 0, 257, 0, 0, 258,
	0, 0, 259, 380, 0, 260, 0, 381, 261, 262,
	263, 264, 265, 0, 266, 382, 267, 383, 268, 0,
	269, 270, 271, 272, 273, 384, 274, 275, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 281, 284, 285,
	286, 287, 0, 288, 0, 289, 290, 385, 291, 0,
	295, 296, 297, 298, 0, 300, 386, 299, 301, 302,
	0, 0, 292, 293, 304, 0, 305, 387, 388, 306,
	0, 313, 307, 308, 294, 309, 312, 389, 310, 311,
	390, 0, 314, 0, 315, 316, 317, 318, 319, 320,
	321, 0, 391, 392, 393, 0, 0, 322, 323, 394,
	395, 0, 324, 325, 326, 327, 0, 0, 328, 329,
	330, 331, 0, 332, 0, 396, 333, 334, 335, 397,
	398, 180, 0, 336, 0, 0, 0, 0, 337, 338,
	339, 340, 341, 0, 0, 0, 0, 183, 184, 0,
	185, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	186, 187, 188, 343, 344, 345, 346, 189, 347, 348,
	0, 190, 349, 350, 191, 192, 0, 0, 351, 352,
	353, 0, 193, 354, 0, 0, 0, 194, 195, 196,
	0, 198, 199, 200, 197, 0, 201, 0, 202, 203,
	0, 0, 204, 205, 206, 0, 0, 0, 0, 0,
	0, 0, 207, 208, 406, 209, 355, 210, 356, 357,
	0, 211, 0, 212, 0, 213, 0, 0, 214, 215,
	0, 216, 0, 0, 0, 358, 217, 219, 218, 220,
	359, 360, 0, 0, 0, 0, 0, 0, 0, 221,
	222, 361, 362, 363, 0, 223, 0, 224, 0, 0,
	0, 0, 225, 364, 0, 365, 0, 0, 226, 227,
	0, 0, 228, 229, 366, 367, 0, 0, 368, 233,
	0, 230, 0, 0, 231, 369, 232, 370, 371, 372,
	373, 374, 0, 375, 0, 0, 234, 235, 236, 0,
	237, 238, 239, 0, 241, 240, 0, 376, 0, 242,
	0, 0, 243, 0, 0, 244, 0, 245, 246, 247,
	249, 377, 248, 0, 250, 251, 253, 252, 0, 0,
	0, 378, 254, 379, 255, 256, 0, 257, 0, 0,
	258, 0, 0, 259, 380, 0, 260, 0, 381, 261,
	262, 263, 264, 265, 0, 266, 382, 267, 383, 268,
	0, 269, 270, 271, 272, 273, 384, 729, 275, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 281, 284,
	285, 286, 287, 0, 288, 0, 289, 290, 385, 291,
	0, 295, 296, 297, 298, 0, 300, 386, 299, 301,
	302, 0, 303, 292, 293, 304, 0, 305, 387, 388,
	306, 0, 313, 307, 308, 294, 309, 312, 389, 310,
	311, 390, 0, 314, 0, 315, 316, 317, 318, 319,
	320, 321, 0, 391, 392, 393, 0, 0, 322, 323,
	394, 395, 0, 324, 325, 326, 327, 0, 0, 328,
	329, 330, 331, 0, 332, 0, 396, 333, 334, 335,
	397, 398, 180, 0, 336, 0, 0, 0, 0, 337,
	338, 339, 340, 341, 0, 0, 0, 0, 183, 184,
	0, 185, 0, 0, 0, 0, 342, 0, 0, 0,
	0, 186, 187, 188, 343, 344, 345, 346, 189, 347,
	348, 0, 190, 349, 350, 191, 192, 0, 0, 351,
	352, 353, 0, 193, 354, 0, 0, 0, 194, 195,
	196, 0, 198, 199, 200, 197, 0, 201, 0, 202,
	203, 0, 0, 204, 205, 206, 0, 0, 0, 0,
	0, 0, 0, 207, 208, 406, 209, 355, 210, 356,
	357, 0, 211, 0, 212, 0, 213, 0, 0, 214,
	215, 0, 216, 0, 0, 0, 358, 217, 219, 218,
	220, 359, 360, 0, 0, 0, 0, 0, 0, 0,
	221, 222, 361, 362, 363, 0, 223, 0, 224, 0,
	0, 0, 0, 225, 364, 0, 365, 0, 0, 226,
	227, 0, 0, 228, 229, 366, 367, 0, 0, 368,
	233, 0, 230, 0, 0, 231, 369, 232, 370, 371,
	372, 373, 374, 0, 375, 0, 0, 234, 235, 236,
	0, 237, 238, 239, 0, 241, 240, 0, 376, 0,
	242, 0, 0, 243, 0, 0, 244, 0, 245, 246,
	247, 249, 377, 248, 0, 250, 251, 253, 252, 0,
	0, 0, 378, 254, 379, 255, 256, 0, 257, 0,
	0, 258, 0, 0, 259, 380, 0, 260, 0, 381,
	261, 262, 0, 264, 265, 0, 266, 382, 267, 383,
	268, 0, 269, 270, 271, 0, 273, 384, 274, 275,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 281,
	284, 285, 286, 287, 0, 288, 0, 289, 290, 385,
	0, 0, 295, 296, 297, 298, 0, 300, 386, 299,
	301, 302, 0, 303, 292, 293, 304, 0, 305, 387,
	388, 306, 0, 313, 307, 308, 294, 309, 312, 389,
	310, 311, 390, 0, 314, 0, 315, 316, 317, 318,
	319, 320, 321, 0, 391, 392, 393, 0, 0, 322,
	323, 394, 395, 0, 324, 325, 326, 327, 0, 0,
	328, 329, 330, 331, 0, 332, 0, 396, 333, 334,
	335, 397, 398, 0, 0, 336, 0, 0, 0, 0,
	337, 338, 339, 340, 341, 1045, 1046, 0, 1075, 1076,
	1077, 1085, 1086, 1087, 0, 0, 0, 0, 0, 0,
	0, 1078, 0, 0, 0, 0, 0, 0, 1048, 0,
	0, 1089, 0, 0, 0, 0, 0, 0, 0, 0,
	1045, 1046, 0, 1075, 1076, 1077, 1085, 1086, 1087, 0,
	0, 0, 1047, 0, 0, 0, 1078, 0, 1067, 0,
	0, 0, 0, 1048, 0, 1064, 1089, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1047, 0, 0,
	0, 0, 0, 1067, 0, 0, 0, 0, 0, 0,
	1064, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1070, 1071, 1072, 1073, 0, 0, 0,
	0, 0, 1053, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 1090, 0, 0, 1070, 1071,
	1072, 1073, 0, 0, 0, 0, 0, 1053, 0, 0,
	0, 0, 0, 1088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 1082,
	1090, 0, 0, 0, 1068, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1088, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1079,
	0, 0, 0, 1080, 0, 0, 0, 0, 0, 1068,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1074, 1079, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1069, 1045,
	1046, 0, 1075, 1076, 1077, 1085, 1086, 1087, 0, 0,
	0, 0, 0, 0, 1083, 1078, 0, 0, 1074, 0,
	0, 0, 1048, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 0, 1069, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1047, 0, 0, 1083,
	0, 0, 1067, 0, 0, 0, 0, 0, 0, 1064,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1081, 0, 0, 1059, 1060, 1066, 1065, 1061,
	1062, 1063, 1084, 0, 1058, 1056, 1057, 1049, 1050, 1051,
	1052, 1054, 1055, 0, 0, 0, 0, 1070, 1071, 1072,
	1073, 1862, 0, 0, 0, 0, 1053, 1081, 0, 0,
	1059, 1060, 1066, 1065, 1061, 1062, 1063, 1084, 0, 1058,
	1056, 1057, 1049, 1050, 1051, 1052, 1054, 1055, 1082, 1090,
	0, 0, 0, 0, 0, 0, 1861, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 0, 0, 0, 1068, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1045,
	1046, 0, 1075, 1076, 1077, 1085, 1086, 1087, 0, 0,
	0, 0, 0, 1079, 0, 1078, 0, 0, 0, 0,
	0, 0, 1048, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1047, 1074, 0, 0,
	0, 0, 1067, 0, 0, 0, 0, 0, 0, 1064,
	0, 0, 1069, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1070, 1071, 1072,
	1073, 0, 0, 0, 0, 0, 1053, 0, 0, 0,
	0, 1045, 1046, 0, 1075, 1076, 1077, 1085, 1086, 1087,
	0, 0, 0, 0, 0, 0, 0, 1078, 1082, 1090,
	0, 0, 0, 0, 1048, 0, 1081, 1089, 0, 1059,
	1060, 1066, 1065, 1061, 1062, 1063, 1084, 1088, 1058, 1056,
	1057, 1049, 1050, 1051, 1052, 1054, 1055, 0, 1047, 0,
	0, 0, 1080, 0, 1067, 1813, 0, 0, 1068, 0,
	0, 1064, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1079, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1070,
	1071, 1072, 1073, 0, 0, 0, 0, 1074, 1053, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1069, 0, 0, 0, 0, 0, 0, 0,
	1082, 1090, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 0, 0, 0,
	1068, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1045, 1046, 0, 1075, 1076, 1077, 1085, 1086, 1087,
	0, 0, 0, 0, 0, 1079, 0, 1078, 0, 0,
	0, 0, 0, 0, 1048, 0, 1081, 1089, 0, 1059,
	1060, 1066, 1065, 1061, 1062, 1063, 1084, 0, 1058, 1056,
	1057, 1049, 1050, 1051, 1052, 1054, 1055, 0, 1047, 1074,
	0, 2471, 0, 0, 1067, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 1069, 0, 0, 1045, 1046, 0,
	1075, 1076, 1077, 1085, 1086, 1087, 0, 0, 0, 0,
	1083, 0, 0, 1078, 0, 0, 0, 0, 0, 0,
	1048, 0, 0, 1089, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1070,
	1071, 1072, 1073, 0, 1047, 0, 0, 0, 1053, 0,
	1067, 0, 0, 0, 0, 0, 0, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1082, 1090, 0, 0, 0, 0, 0, 0, 1081, 0,
	0, 1059, 1060, 1066, 1065, 1061, 1062, 1063, 1084, 1088,
	1058, 1056, 1057, 1049, 1050, 1051, 1052, 1054, 1055, 0,
	0, 0, 0, 2424, 1080, 1070, 1071, 1072, 1073, 0,
	1068, 0, 0, 0, 1053, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1079, 1082, 1090, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1074,
	1080, 0, 0, 0, 0, 0, 1068, 0, 0, 0,
	0, 0, 0, 0, 1069, 0, 0, 1045, 1046, 0,
	1075, 1076, 1077, 1085, 1086, 1087, 0, 0, 0, 0,
	1083, 1079, 0, 1078, 0, 0, 0, 0, 0, 0,
	1048, 0, 0, 1089, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1047, 1074, 0, 0, 0, 0,
	1067, 0, 0, 0, 0, 0, 0, 1064, 0, 0,
	1069, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 1081, 0,
	0, 1059, 1060, 1066, 1065, 1061, 1062, 1063, 1084, 0,
	1058, 1056, 1057, 1049, 1050, 1051, 1052, 1054, 1055, 0,
	0, 0, 0, 2379, 0, 1070, 1071, 1072, 1073, 0,
	0, 0, 0, 0, 1053, 0, 0, 0, 0, 1045,
	1046, 0, 1075, 1076, 1077, 1085, 1086, 1087, 0, 0,
	0, 0, 0, 0, 0, 1078, 1082, 1090, 0, 0,
	0, 0, 1048, 0, 1081, 1089, 0, 1059, 1060, 1066,
	1065, 1061, 1062, 1063, 1084, 1088, 1058, 1056, 1057, 1049,
	1050, 1051, 1052, 1054, 1055, 0, 1047, 0, 0, 2349,
	1080, 0, 1067, 0, 0, 0, 1068, 0, 0, 1064,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1079, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1070, 1071, 1072,
	1073, 0, 0, 0, 0, 1074, 1053, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1069, 0, 0, 0, 0, 0, 0, 0, 1082, 1090,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 0, 0, 0, 1068, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1045,
	1046, 0, 1075, 1076, 1077, 1085, 1086, 1087, 0, 0,
	0, 0, 0, 1079, 0, 1078, 0, 0, 0, 0,
	0, 0, 1048, 0, 1081, 1089, 0, 1059, 1060, 1066,
	1065, 1061, 1062, 1063, 1084, 0, 1058, 1056, 1057, 1049,
	1050, 1051, 1052, 1054, 1055, 0, 1047, 1074, 0, 2344,
	0, 0, 1067, 0, 0, 0, 0, 0, 0, 1064,
	0, 0, 1069, 0, 0, 1045, 1046, 0, 1075, 1076,
	1077, 1085, 1086, 1087, 0, 0, 0, 0, 1083, 0,
	0, 1078, 0, 0, 0, 0, 0, 0, 1048, 0,
	0, 1089, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1070, 1071, 1072,
	1073, 0, 1047, 0, 0, 0, 1053, 0, 1067, 0,
	0, 0, 0, 0, 0, 1064, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 1090,
	0, 0, 0, 0, 0, 0, 1081, 0, 0, 1059,
	1060, 1066, 1065, 1061, 1062, 1063, 1084, 1088, 1058, 1056,
	1057, 1049, 1050, 1051, 1052, 1054, 1055, 0, 0, 0,
	0, 2340, 1080, 1070, 1071, 1072, 1073, 0, 1068, 0,
	0, 0, 1053, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1079, 1082, 1090, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1074, 1080, 0,
	0, 0, 0, 0, 1068, 0, 0, 0, 0, 0,
	0, 0, 1069, 0, 0, 1045, 1046, 0, 1075, 1076,
	1077, 1085, 1086, 1087, 0, 0, 0, 0, 1083, 1079,
	0, 1078, 0, 0, 0, 0, 0, 0, 1048, 0,
	0, 1089, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1047, 1074, 0, 0, 0, 0, 1067, 0,
	0, 0, 0, 0, 0, 1064, 0, 0, 1069, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 0, 1081, 0, 0, 1059,
	1060, 1066, 1065, 1061, 1062, 1063, 1084, 0, 1058, 1056,
	1057, 1049, 1050, 1051, 1052, 1054, 1055, 0, 0, 0,
	0, 2281, 0, 1070, 1071, 1072, 1073, 0, 0, 0,
	0, 0, 1053, 0, 0, 0, 0, 1045, 1046, 0,
	1075, 1076, 1077, 1085, 1086, 1087, 0, 0, 0, 0,
	0, 0, 0, 1078, 1082, 1090, 0, 0, 0, 0,
	1048, 0, 1081, 1089, 0, 1059, 1060, 1066, 1065, 1061,
	1062, 1063, 1084, 1088, 1058, 1056, 1057, 1049, 1050, 1051,
	1052, 1054, 1055, 0, 1047, 0, 0, 2244, 1080, 0,
	1067, 0, 0, 0, 1068, 0, 0, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1079,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1070, 1071, 1072, 1073, 0,
	0, 0, 0, 1074, 1053, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1069, 0,
	0, 0, 0, 0, 0, 0, 1082, 1090, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 0, 0, 0, 1068, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1045, 1046, 0,
	1075, 1076, 1077, 1085, 1086, 1087, 0, 0, 0, 0,
	0, 1079, 0, 1078, 0, 0, 0, 0, 0, 0,
	1048, 0, 1081, 1089, 0, 1059, 1060, 1066, 1065, 1061,
	1062, 1063, 1084, 0, 1058, 1056, 1057, 1049, 1050, 1051,
	1052, 1054, 1055, 0, 1047, 1074, 0, 2243, 0, 0,
	1067, 0, 0, 0, 0, 0, 0, 1064, 0, 0,
	1069, 0, 0, 1045, 1046, 0, 1075, 1076, 1077, 1085,
	1086, 1087, 0, 0, 0, 0, 1083, 0, 0, 1078,
	0, 0, 0, 0, 0, 0, 1048, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1070, 1071, 1072, 1073, 0,
	1047, 0, 0, 0, 1053, 0, 1067, 0, 0, 0,
	0, 0, 0, 1064, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 1090, 0, 0,
	0, 0, 0, 0, 1081, 0, 0, 1059, 1060, 1066,
	1065, 1061, 1062, 1063, 1084, 1088, 1058, 1056, 1057, 1049,
	1050, 1051, 1052, 1054, 1055, 0, 0, 0, 0, 2208,
	1080, 1070, 1071, 1072, 1073, 0, 1068, 0, 0, 0,
	1053, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1079, 1082, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1074, 1080, 0, 0, 0,
	0, 0, 1068, 0, 0, 0, 0, 0, 0, 0,
	1069, 0, 0, 1045, 1046, 0, 1075, 1076, 1077, 1085,
	1086, 1087, 0, 0, 0, 0, 1083, 1079, 0, 1078,
	0, 0, 0, 0, 0, 0, 1048, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1047, 1074, 0, 0, 0, 0, 1067, 0, 0, 0,
	0, 0, 0, 1064, 0, 0, 1069, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 1081, 0, 0, 1059, 1060, 1066,
	1065, 1061, 1062, 1063, 1084, 0, 1058, 1056, 1057, 1049,
	1050, 1051, 1052, 1054, 1055, 0, 0, 0, 0, 2054,
	0, 1070, 1071, 1072, 1073, 0, 0, 0, 0, 0,
	1053, 0, 0, 0, 0, 1045, 1046, 0, 1075, 1076,
	1077, 1085, 1086, 1087, 0, 0, 0, 0, 0, 0,
	0, 1078, 1082, 1090, 0, 0, 0, 0, 1048, 0,
	1081, 1089, 0, 1059, 1060, 1066, 1065, 1061, 1062, 1063,
	1084, 1088, 1058, 1056, 1057, 1049, 1050, 1051, 1052, 1054,
	1055, 0, 1047, 0, 0, 2030, 1080, 0, 1067, 0,
	0, 0, 1068, 0, 0, 1064, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1070, 1071, 1072, 1073, 0, 0, 0,
	0, 1074, 1053, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1069, 0, 0, 0,
	0, 0, 0, 0, 1082, 1090, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 0, 0, 1068, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1045, 1046, 0, 1075, 1076,
	1077, 1085, 1086, 1087, 0, 0, 0, 0, 0, 1079,
	0, 1078, 0, 0, 0, 0, 0, 0, 1048, 0,
	1081, 1089, 0, 1059, 1060, 1066, 1065, 1061, 1062, 1063,
	1084, 0, 1058, 1056, 1057, 1049, 1050, 1051, 1052, 1054,
	1055, 0, 1047, 1074, 0, 1489, 0, 0, 1067, 0,
	0, 0, 0, 0, 0, 1064, 0, 0, 1069, 0,
	0, 1045, 1046, 0, 1075, 1076, 1077, 1085, 1086, 1087,
	0, 0, 0, 0, 1083, 0, 0, 1078, 0, 0,
	0, 0, 0, 0, 1048, 0, 0, 1089, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1070, 1071, 1072, 1073, 0, 1047, 0,
	0, 0, 1053, 2530, 1067, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 1090, 0, 0, 0, 0,
	0, 0, 1081, 0, 0, 1059, 1060, 1066, 1065, 1061,
	1062, 1063, 1084, 1088, 1058, 1056, 1057, 1049, 1050, 1051,
	1052, 1054, 1055, 0, 0, 1783, 0, 0, 1080, 1070,
	1071, 1072, 1073, 0, 1068, 0, 0, 0, 1053, 0,
	1853, 0, 0, 1852, 0, 1045, 1046, 0, 0, 0,
	0, 1085, 1086, 1087, 0, 0, 0, 0, 0, 1079,
	1082, 1090, 0, 0, 0, 0, 0, 0, 1048, 0,
	0, 1089, 0, 0, 0, 2529, 0, 0, 0, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1047, 1074, 1080, 0, 0, 0, 1067, 0,
	1068, 0, 0, 0, 0, 1589, 0, 0, 1069, 0,
	0, 1045, 1046, 0, 1075, 1076, 1077, 1085, 1086, 1087,
	0, 0, 0, 0, 1083, 1079, 0, 1078, 0, 0,
	0, 1588, 0, 0, 1048, 0, 0, 1089, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1070, 1071, 1072, 1073, 0, 1047, 1074,
	0, 0, 1053, 0, 1067, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 1069, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 1090, 0, 0, 0, 0,
	1083, 0, 1081, 0, 0, 1059, 1060, 1066, 1065, 1061,
	1062, 1063, 1084, 0, 1058, 1056, 1057, 1049, 1050, 1051,
	1052, 1054, 1055, 0, 0, 0, 0, 0, 1080, 1070,
	1071, 1072, 1073, 0, 1068, 0, 0, 0, 1053, 0,
	0, 0, 0, 1045, 1046, 0, 1075, 1076, 1077, 1085,
	1086, 1087, 0, 0, 0, 0, 0, 0, 0, 1078,
	1082, 1090, 0, 0, 1756, 0, 1048, 0, 1081, 1089,
	0, 1059, 1060, 1066, 1065, 1061, 1062, 1063, 1084, 1088,
	1058, 1056, 1057, 1049, 1050, 1051, 1052, 1054, 1055, 0,
	1047, 0, 0, 1074, 1080, 0, 1067, 0, 0, 0,
	1068, 0, 0, 1064, 0, 0, 0, 0, 1069, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 1079, 0, 0, 0, 0,
	1757, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1070, 1071, 1072, 1073, 0, 0, 0, 0, 1074,
	1053, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1069, 0, 0, 0, 0, 0,
	0, 0, 1082, 1090, 0, 0, 0, 0, 0, 0,
	1083, 0, 1081, 0, 0, 0, 0, 0, 0, 0,
	0, 1088, 1084, 0, 1058, 1056, 1057, 1049, 1050, 1051,
	1052, 1054, 1055, 0, 0, 0, 1080, 0, 0, 0,
	0, 0, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1045, 1046, 0, 1075, 1076, 1077, 1085,
	1086, 1087, 0, 0, 0, 0, 0, 1079, 0, 1078,
	0, 0, 0, 0, 0, 0, 1048, 0, 1081, 1089,
	0, 1059, 1060, 1066, 1065, 1061, 1062, 1063, 1084, 0,
	1058, 1056, 1057, 1049, 1050, 1051, 1052, 1054, 1055, 0,
	1047, 1074, 0, 0, 0, 0, 1067, 0, 0, 0,
	0, 0, 0, 1064, 0, 0, 1069, 0, 0, 0,
	1045, 1046, 0, 1075, 1076, 1077, 1085, 1086, 1087, 0,
	0, 0, 1083, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 0, 1048, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1070, 1071, 1072, 1073, 0, 0, 1047, 0, 0,
	1053, 0, 0, 1067, 0, 0, 0, 0, 0, 0,
	1064, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1082, 1090, 0, 0, 0, 0, 0, 0,
	1081, 0, 0, 1059, 1060, 1066, 1065, 1061, 1062, 1063,
	1084, 1088, 1058, 1056, 1057, 1049, 1050, 1051, 1052, 1054,
	1055, 0, 0, 0, 0, 0, 1080, 0, 1070, 1071,
	1072, 1073, 1068, 0, 0, 0, 0, 1053, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 585, 1082,
	1090, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1088, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1074, 0, 1080, 0, 0, 0, 0, 0, 1068,
	0, 0, 0, 0, 0, 0, 1069, 0, 0, 0,
	1045, 1046, 0, 1075, 1076, 1077, 1085, 1086, 1087, 0,
	0, 0, 1083, 0, 1079, 0, 1078, 0, 0, 0,
	0, 0, 0, 1048, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1047, 1074, 0,
	0, 0, 0, 1067, 0, 0, 0, 0, 0, 0,
	1064, 0, 0, 1069, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1083,
	1081, 0, 0, 1059, 1060, 1066, 1065, 1061, 1062, 1063,
	1084, 0, 1058, 1056, 1057, 1049, 1050, 1051, 1052, 1054,
	1055, 0, 0, 0, 0, 2034, 0, 0, 1070, 1071,
	1072, 1073, 0, 0, 0, 0, 0, 1053, 0, 0,
	0, 0, 1859, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1082,
	1090, 0, 0, 0, 0, 0, 0, 1081, 0, 0,
	1059, 1060, 1066, 1065, 1061, 1062, 1063, 1084, 1088, 1058,
	1056, 1057, 1049, 1050, 1051, 1052, 1054, 1055, 0, 0,
	0, 0, 0, 1080, 0, 0, 0, 0, 0, 1068,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1045, 1046, 0, 1075, 1076, 1077, 1085, 1086, 1087, 0,
	0, 0, 0, 0, 1079, 0, 1078, 0, 0, 0,
	1854, 0, 0, 1048, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1047, 1074, 0,
	0, 0, 0, 1067, 0, 0, 0, 0, 0, 0,
	1064, 0, 0, 1069, 0, 0, 1045, 1046, 0, 1075,
	1076, 1077, 1085, 1086, 1087, 0, 0, 0, 0, 1083,
	0, 0, 1078, 0, 0, 0, 0, 0, 0, 1048,
	0, 0, 1089, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1070, 1071,
	1072, 1073, 0, 1047, 0, 0, 0, 1053, 0, 1067,
	0, 0, 0, 0, 0, 0, 1064, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1082,
	1090, 0, 0, 0, 0, 0, 0, 1081, 0, 0,
	1059, 1060, 1066, 1065, 1061, 1062, 1063, 1084, 1088, 1058,
	1056, 1057, 1049, 1050, 1051, 1052, 1054, 1055, 0, 0,
	0, 0, 0, 1080, 1070, 1071, 1072, 1073, 0, 1068,
	0, 0, 0, 1053, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1079, 1082, 1090, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1088, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1074, 1080,
	0, 0, 0, 0, 0, 1068, 0, 0, 0, 0,
	0, 0, 0, 1069, 0, 0, 1045, 1046, 0, 1075,
	1076, 1077, 1085, 1086, 1087, 0, 0, 0, 0, 1083,
	1079, 0, 1078, 0, 0, 0, 1812, 0, 0, 1048,
	0, 0, 1089, 1819, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1047, 1074, 0, 0, 0, 0, 1067,
	0, 0, 0, 0, 0, 0, 1064, 0, 0, 1069,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 1081, 0, 0,
	1059, 1060, 1066, 1065, 1061, 1062, 1063, 1084, 0, 1058,
	1056, 1057, 1049, 1050, 1051, 1052, 1054, 1055, 0, 0,
	0, 0, 0, 0, 1070, 1071, 1072, 1073, 0, 0,
	0, 0, 0, 1053, 0, 0, 0, 0, 1045, 1046,
	0, 1075, 1076, 1077, 1085, 1086, 1087, 0, 0, 0,
	0, 0, 0, 0, 1078, 1082, 1090, 0, 0, 0,
	0, 1048, 0, 1081, 1089, 0, 1059, 1060, 1066, 1065,
	1061, 1062, 1063, 1084, 1088, 1058, 1056, 1057, 1049, 1050,
	1051, 1052, 1054, 1055, 0, 1047, 0, 0, 0, 1080,
	0, 1067, 0, 0, 0, 1068, 0, 0, 1064, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1079, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1070, 1071, 1072, 1073,
	0, 0, 0, 0, 1074, 1053, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1069,
	0, 0, 0, 0, 0, 0, 0, 1082, 1090, 0,
	0, 0, 0, 0, 0, 1083, 1045, 1046, 0, 1075,
	1076, 1077, 1085, 1086, 1087, 0, 1088, 0, 0, 0,
	0, 0, 1078, 0, 0, 0, 0, 0, 0, 1048,
	0, 1080, 1089, 0, 0, 0, 0, 1068, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1047, 0, 0, 0, 0, 0, 1067,
	0, 0, 1079, 0, 0, 0, 1064, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 1059, 1060, 1066, 1065,
	1061, 1062, 1063, 1084, 0, 1058, 1056, 1057, 1049, 1050,
	1051, 1052, 1054, 1055, 0, 0, 1074, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1069, 0, 0, 1070, 1071, 1072, 1073, 0, 0,
	0, 0, 0, 1053, 0, 0, 0, 1083, 1045, 1046,
	0, 1075, 1076, 1077, 1085, 1086, 1087, 0, 0, 0,
	0, 0, 0, 0, 0, 1082, 1090, 0, 0, 0,
	0, 1048, 0, 0, 1089, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1088, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1047, 0, 0, 0, 1080,
	0, 1067, 0, 0, 0, 1068, 0, 0, 1064, 0,
	0, 0, 0, 0, 0, 1081, 0, 0, 1059, 1060,
	1066, 1065, 1061, 1062, 1063, 1084, 0, 1058, 1056, 1057,
	1049, 1050, 1051, 1052, 1054, 1055, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1070, 1071, 1072, 1073,
	0, 0, 0, 0, 1074, 1053, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1069,
	0, 0, 0, 0, 0, 0, 0, 1082, 1090, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1088, 0, 0, 0,
	0, 0, 0, 0, 39, 0, 0, 0, 0, 0,
	0, 1080, 0, 0, 0, 40, 128, 1068, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 43, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 44, 1081, 47, 0, 1059, 1060, 1066, 1065,
	1061, 1062, 1063, 1084, 0, 1058, 1056, 1057, 1049, 1050,
	1051, 1052, 1054, 1055, 0, 48, 1074, 0, 0, 50,
	0, 0, 0, 56, 0, 0, 131, 0, 0, 0,
	57, 1069, 127, 58, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 1045, 1046, 59, 1075, 1076, 1077, 1085,
	1086, 1087, 0, 0, 0, 0, 60, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1048, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1047, 0, 0, 0, 0, 0, 1067, 0, 0, 0,
	0, 0, 0, 1064, 0, 1081, 0, 0, 1059, 1060,
	1066, 1065, 1061, 1062, 1063, 1084, 0, 1058, 1056, 1057,
	1049, 1050, 1051, 1052, 1054, 1055, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	0, 0, 0, 62, 0, 0, 0, 0, 0, 0,
	0, 1070, 1071, 1072, 1073, 0, 0, 0, 0, 0,
	1053, 0, 69, 125, 63, 0, 64, 0, 65, 0,
	132, 0, 0, 0, 0, 66, 0, 0, 0, 139,
	0, 0, 1082, 1090, 0, 0, 77, 0, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 1294, 0, 0, 1080, 0, 0, 0,
	0, 0, 1068, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 140, 0, 1302, 1291, 1321, 1282,
	1312, 1311, 133, 0, 1284, 1283, 0, 0, 0, 134,
	1323, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1074, 124, 0, 0, 4, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1069, 0, 1317, 0,
	1309, 1308, 0, 0, 0, 0, 0, 0, 0, 0,
	1307, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1306, 1304, 1305, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1290, 0, 0, 0, 0, 0, 0, 1295, 1293, 1296,
	1297, 1298, 1299, 1300, 0, 1320, 0, 0, 0, 0,
	1081, 0, 0, 1059, 1060, 1066, 1065, 1061, 1062, 1063,
	1084, 0, 1058, 1056, 1057, 1049, 1050, 1051, 1052, 1054,
	1055, 0, 0, 1286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1310, 0, 0, 0, 1292,
	0, 0, 0, 0, 1294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1303, 0,
	0, 0, 1414, 1412, 1413, 1416, 1415, 1302, 1291, 1321,
	1282, 1312, 1311, 0, 0, 1284, 1283, 0, 0, 0,
	0, 1323, 1322, 0, 0, 0, 0, 0, 0, 1287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1301, 1288, 0, 0, 0, 0, 0, 0, 0, 0,
	1325, 0, 535, 0, 561, 0, 0, 0, 0, 1317,
	0, 1309, 1308, 1285, 0, 0, 1318, 1319, 0, 0,
	0, 1307, 540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 538, 0, 0, 0, 1289, 0,
	0, 0, 0, 1324, 1306, 1304, 1305, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 0, 0, 0, 0,
	541, 0, 0, 0, 0, 0, 0, 0, 547, 548,
	0, 1290, 0, 557, 0, 0, 0, 0, 1295, 1293,
	1296, 1297, 1298, 1299, 1300, 0, 1320, 562, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	560, 0, 0, 0, 1286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1310, 0, 0, 0,
	1292, 0, 0, 0, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 544, 545, 0, 0, 0, 0, 1303,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 551, 0, 0, 546, 553, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 550, 0, 0, 0, 0,
	1287, 0, 0, 0, 0, 563, 0, 0, 0, 0,
	0, 1301, 1288, 0, 0, 0, 0, 0, 0, 0,
	0, 1325, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1285, 0, 0, 1318, 1319, 0,
	0, 0, 0, 0, 0, 549, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1289,
	0, 0, 0, 0, 1324, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 554, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 0,
	0, 0, 559, 0, 0, 0, 565, 0, 0, 0,
	0, 552, 556, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 558,
}
var sqlPact = [...]int{

	41941, -1000, -42, -1000, -1000, -1000, 97, -1000, -1000, -1000,
	94, 93, 92, -1000, 87, 86, 85, 84, 82, 79,
	78, 77, 76, 75, 74, -1000, 72, -1000, -1000, -1000,
	-1000, 60, 59, 58, 57, 56, 55, 53, -1000, 1123,
	21335, 48, 46, 1355, 35011, 42, -1000, 996, 25680, 859,
	1054, 41, 35, 33, 32, 31, 917, 34680, 3132, 1413,
	1037, 1549, 34346, 21001, 1544, 1222, 34012, -1000, -1000, 33678,
	30, 29, 28, 27, 26, -1000, -1000, 33344, 25, 20,
	19, 17, 15, 13, 12, 11, 10, 9, 8, 7,
	4, 3, -1000, 1, 0, -1, -1000, 42530, -2, -3,
	-4, 1023, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -6, -10, -11, -13,
	-14, 91, -1000, 887, 354, 2552, 7900, 775, 962, 955,
	934, 923, 971, 36997, 35011, -16, -66, -21, -1000, 1971,
	567, 18604, 41941, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 25346, 25012, 33010,
	32676, 6174, 702, -1000, -45, 21999, 35011, -1000, 99, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 14119, 13773, 466, 99, -1000, -1000, -1000, 32342,
	22689, 32008, 1405, 31674, -1000, -1000, 31340, -1000, -1000, 1647,
	1553, 1551, 24678, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 31009, 30675, 30341, 30007, 29673,
	403, -1000, -1000, -1000, 16879, -1000, -1000, -1000, -1000, -22,
	-1000, -28, -1000, -29, -30, -31, -32, -33, -1000, -34,
	-35, -1000, -36, -37, -1000, -38, -39, 1158, 29339, 1115,
	-1000, -1000, -44, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 35011, -1000, 14809, -1000, 402, -1000, 1540, -1000, 14809,
	-1000, 1108, -1000, -1000, -1000, -1000, -1000, 35011, -1000, -1000,
	-1000, -1000, -1000, -1000, 2093, 1082, 401, 29005, -1000, 1533,
	-1000, 499, 675, -1000, -1000, -1000, 8935, 117, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2146, 22344, 1184,
	1915, 1632, 2092, 1288, 1631, 1614, 1590, 1583, 1580, 2090,
	925, 2089, 1678, 914, 2086, 1573, 1240, 584, 2085, 1538,
	1528, -1000, -1000, -1000, -1000, 827, -1000, -1000, -1000, 27004,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 887, -1000, -1000,
	-1000, 1221, 1780, 1780, 1780, 1936, 200, 181, -1000, 91,
	-1000, 1133, -1000, 1064, -1000, -1000, -1000, -1000, -1000, 41518,
	-1000, -1000, 14809, 14809, 14809, 14809, 14809, 1035, 428, -1000,
	398, 397, 7209, -1000, -1000, 2075, -1000, -1000, -1000, 242,
	-1000, -1000, 14809, 99, -1000, -1000, -1000, -1000, 394, 2081,
	-1000, 583, -1000, -1000, -1000, 508, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1567, 386, 373, 372, -1000,
	371, -1000, -1000, 370, 369, 367, 364, 362, 358, 356,
	353, 352, 350, 347, 346, 345, 343, 341, 969, -1000,
	542, -1000, -1000, 542, 542, -1000, 314, 314, 315, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 314, -1000, -1000,
	-1000, 478, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 333, 813, 1247, -1000, -1000, 1247, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 701, 36335, -47, 35011,
	-1000, 328, -47, -1000, -1000, 326, -1000, 9970, 9970, -1000,
	-1000, -1000, -1000, -1000, 9280, 1428, -1000, 594, -204, 238,
	464, -1000, 17569, 20323, -1000, -1000, 927, 1676, 721, -1000,
	901, 1675, 392, -1000, 999, -1000, 1215, 1674, -135, 1596,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 23020, 21999, -45,
	-56, -1000, -1000, -1000, 5829, 41518, -1000, 41518, -1000, 766,
	19292, 99, -1000, -1000, -1000, -1000, 323, 1253, 511, 1217,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 207,
	-1000, 28671, 511, 1216, -1000, -1000, -1000, 27004, -1000, 35011,
	-1000, 35011, -1000, 794, -1000, 36666, 112, 1673, -1000, -1000,
	112, 1672, -1000, 111, 1670, -1000, -1000, 1056, 1669, -1000,
	-56, 1667, -1000, -1000, 14809, -67, -1000, -1000, -1000, 567,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 28337, 21667, 1083, 503, 41518, 1990, 42450,
	23020, 41518, 21667, -1000, -1000, 35011, -1000, 14809, -1000, 1989,
	1408, -49, -1000, -1000, -1000, -1000, -1000, 1319, 1350, 644,
	755, 8935, 8935, 1731, -1000, 106, 6174, -1000, -1000, -1000,
	-1000, 28003, -1000, -1000, -1000, 1186, 35011, -1000, -1000, 1566,
	-1000, 21667, 35011, -1000, 35011, -1000, 35011, -1000, 35011, -1000,
	35011, -1000, -1000, -1000, -1000, -1000, 374, -1000, 1560, -1000,
	-1000, 35011, -1000, 1296, -1000, -1000, -1000, 27672, 27338, -1000,
	875, 726, -1000, -1000, 113, -1000, -1000, 1221, -1000, 1088,
	1390, 13427, 1339, 14809, 91, -1000, -1000, 91, 91, 8590,
	-1000, -1000, -1000, 35011, -1000, 42239, 42450, 6174, 711, 14809,
	14809, 14809, 14809, 14809, 14809, 14809, 14809, 14809, 14809, 14809,
	14809, 14809, 14809, 14809, 14809, 14809, 14809, 14809, 14809, 14809,
	14809, 14809, 14809, 14809, 14809, 14809, 14809, 14809, 14809, 14809,
	14809, 1294, 14809, 700, 14809, 14809, 14809, 14809, 1341, 1019,
	309, 1081, -1000, 2047, 2047, 2047, 41788, 41788, 294, 428,
	-1000, 14809, -1000, 21, 14809, 181, 39813, -46, 6864, -1000,
	-1000, -1000, 13082, 540, 41518, 99, 4577, -1000, 2074, 741,
	1582, 1430, 322, 494, 489, 482, 479, 14809, 14809, 12737,
	12391, 12045, 15499, 11699, 14809, 7554, 14809, 14809, 14809, 14809,
	11353, 11007, -1000, 318, -1000, -1000, -1000, -1000, 2073, -1000,
	-1000, 2072, -1000, 709, 708, 2071, 1854, 497, -1000, -49,
	-1000, 36335, -1000, 35011, -47, 1982, 35011, -1000, 89, -1000,
	40381, -1000, 89, -70, -1000, 1367, 1365, 18948, 1349, 1015,
	1015, 1015, -1000, 317, 415, 464, 5120, 10661, -1000, 26011,
	1040, 125, 180, 17224, 1428, -1000, 35011, -60, 890, -1000,
	24344, 1762, 1759, 1751, 27004, 1952, 21, 1843, 1521, 694,
	27004, 1771, 691, 1951, 21, 1511, 676, 35011, 6174, 1760,
	462, -1000, 35011, -1000, -1000, -1000, 1509, -73, -1000, -1000,
	24013, 1981, 1662, -1000, 977, -1000, 1661, 1976, 35011, 1102,
	1212, -1000, -1000, 680, 1658, 537, 342, 1967, 342, 19635,
	-1000, 35011, -1000, 35011, -1000, -1000, 35011, -1000, 35011, -1000,
	35011, 35011, -1000, 35011, 35011, -75, 41518, 589, 23682, 674,
	-1000, 566, 24013, 3653, -78, -1000, 764, -1000, -1000, -1000,
	-1000, 234, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 315, 969, 314, 314,
	314, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 478, -1000,
	-1000, 542, 542, 542, -1000, -1000, -117, -1000, 1498, 521,
	-80, 595, -49, -1000, 1247, -1000, 1237, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2079, -1000, 2056, -1000, -1000, 2070, -53, -1000, -53, -1000,
	6174, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 35011, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 202, -1000, -1000,
	-1000, -1000, -1000, -1000, 35011, 35011, 35011, -1000, 27004, -1000,
	-1000, -1000, -1000, 41518, -1000, 348, -1000, -1000, 41518, 819,
	1389, -1000, 1389, -54, -1000, 40503, 1359, 35011, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 493,
	781, 781, 756, 756, 756, 756, 1993, 3193, 385, 2733,
	40315, 40315, 40315, 40315, 40315, 40315, 40315, 40315, 2975, 776,
	776, 2975, 2975, 2975, 2975, 2975, 40315, 40315, 40315, 41788,
	41666, 698, 14809, 14809, 672, 1013, 309, 698, 14809, 698,
	698, 698, 698, -1000, 1425, -1000, -1000, -1000, -1000, 1493,
	308, 15499, 15499, -1000, -1000, -1000, 7209, 15844, -1000, -1000,
	-1000, -1000, 307, 14809, -1000, 39935, -224, 179, -137, -1000,
	14809, 414, -108, -1000, 786, -1000, 14809, -1000, -50, 14809,
	14809, 14809, 177, -1000, 176, -1000, 670, -1000, 667, 666,
	654, -1000, 306, 997, 305, 301, 14809, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 41396, 37919, 175, -1000, 1491,
	-137, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 174, -1000,
	173, -1000, 41206, -137, 172, 4144, -1000, 15499, 15499, 15499,
	7209, 299, 170, -1000, 40191, -1000, 41140, 10315, 10315, 10315,
	166, 40950, 14809, -137, 37700, 37665, 4168, -81, -86, -1000,
	-88, -1000, 2069, -93, 165, 490, 488, 164, 1556, -1000,
	1874, -1000, -1000, 298, -95, 537, 9970, 18259, 6174, -1000,
	537, 9280, -1000, 18948, 18948, 1203, 1342, 18948, -1000, -1000,
	-1000, -1000, 26011, 468, 464, 26011, -1000, 2068, 1358, 162,
	-1000, -1000, -1000, 35011, 297, -1000, 464, 161, 872, 35011,
	35011, 35011, -1000, -1000, 1211, 36004, 1199, 42450, 35011, -1000,
	293, 292, 1356, 1344, 35011, 35011, 35673, 35342, 35011, 905,
	21, -1000, 481, 290, 35011, 858, 477, 35011, 21, -1000,
	289, 35011, 849, -1000, 476, 1414, 1120, -1000, 765, 1487,
	35011, 160, -102, -55, 42450, -1000, -1000, -1000, -1000, -1000,
	35011, 387, 35011, 21, 35011, 23020, 23020, 21, 35011, 1657,
	1686, 447, 35011, 1390, 14809, 952, -1000, 17914, 549, 35011,
	832, 65, -1000, -1000, -1000, 458, 35011, -1000, -1000, 112,
	112, -1000, 111, 1056, -56, -1000, 14809, -1000, -1000, 35011,
	23020, -105, -1000, 570, -1000, 42450, -1000, 427, 652, -1000,
	2062, 483, 23020, 35011, 8935, 8935, -1000, 1380, -1000, -1000,
	861, -1000, 946, -1000, -1000, -1000, -1000, 8935, -1000, -61,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 819, -1000, 14809,
	2059, -1000, -1000, -1000, 8590, -1000, -1000, -1000, 35011, -187,
	14809, 698, 698, 14809, 15499, 15499, -1000, 698, -1000, -1000,
	-1000, -1000, -1000, 1483, 287, 14809, 42450, 4117, 3756, -111,
	-1000, 14809, -57, -1000, 14809, -1000, 39623, -1000, -1000, 426,
	1634, -1000, 14809, 40760, 159, 9625, -1000, 40693, -51, -51,
	-1000, 2078, 1230, 1095, 903, 810, 2058, -1000, 19979, 538,
	1051, 39557, 42239, 42450, -1000, 14809, -1000, -1000, 1481, 14809,
	-1000, 42239, 42450, 15499, 15499, 15499, 15499, 15499, 15499, 15499,
	15499, 15499, 15499, 15499, 15499, 15499, 15499, 15499, 15499, 15499,
	15499, 15499, 1303, 15499, 2044, 2044, 2044, -59, 14809, -1000,
	1545, 1481, 14809, 14809, 42450, 156, 154, 153, -1000, 14809,
	-137, 14809, 14809, 14809, -1000, -1000, -1000, 152, -1000, 2041,
	-1000, -1000, -1000, -1000, 984, -1000, 3653, -1000, 1429, -1000,
	-139, -1000, 1428, -1000, 1429, -1000, -1000, 1203, -1000, 286,
	14809, 18948, -1000, 411, -1000, -119, -1000, 26011, -1000, 410,
	-221, -1000, 456, -1000, 464, 284, 35011, 26011, -1000, -1000,
	-1000, 653, 632, 1624, -1000, 1195, -1000, 555, -1000, 860,
	14809, 16534, 276, 274, 1017, -1000, 1623, 1056, 1622, 1056,
	-1000, -60, 884, -1000, 20667, 14809, -1000, 630, 20667, -1000,
	-1000, 14809, -1000, 622, 20667, 483, 1480, 744, -1000, 752,
	-1000, 1410, -1000, 24013, 273, 35011, 272, -1000, 269, -1000,
	511, -1000, 267, 35011, 1314, 447, 23351, -1000, 511, 832,
	-1000, 41518, -1000, 832, 8245, 1767, -121, -1000, -1000, -1000,
	537, 19635, 18948, 9280, -122, -1000, -1000, -1000, -1000, 41518,
	-61, 1735, 1735, -1000, 2026, -1000, 409, 151, -1000, 26673,
	-1000, -61, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 35011,
	1067, 39367, -1000, 1792, 6174, 1985, 698, 3710, 2693, 14809,
	42450, 42063, -138, 14809, 14809, -1000, 150, 14809, 408, 41518,
	-1000, -1000, -1000, 41518, 14809, 2046, 14809, 149, 148, 146,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 145, -1000,
	-1000, 37328, 14809, 144, -1000, 143, 142, 41518, 1545, 41518,
	-1000, -1000, 546, 546, 791, 791, 791, 791, 2044, 605,
	1062, 1105, 201, 201, 201, 671, 979, 979, 201, 201,
	201, 1464, 1282, 266, 4195, 14809, 141, -1000, -1000, 41518,
	41518, 139, -1000, -1000, -1000, -137, 230, 39245, 39055, -1000,
	138, 6174, 35011, 35011, 135, 1424, 1933, -1000, 18948, 1424,
	-1000, 35011, 41518, -1000, -204, -1000, 2023, -1000, -1000, 1358,
	-1000, 5479, 26011, 35011, -141, -1000, 35011, 35011, 35011, 1621,
	-1000, 2017, -1000, 38989, -143, -1000, 277, 1898, 14809, -1000,
	-1000, 264, 16534, 35011, -1000, 1340, 1426, 587, 35011, -1000,
	35011, -1000, 35011, 35011, 35011, -1000, 263, 99, -146, 35011,
	-1000, -148, 35011, -1000, -1000, 23020, 707, -1000, -1000, 1415,
	-1000, 16534, 262, 35011, 24013, 1961, -1000, 16534, 1101, 1329,
	447, 23351, -1000, 680, -1000, -1000, -64, -1000, 295, 21,
	832, -1000, -69, -1000, 454, 1720, -1000, 1718, 406, -1000,
	-1000, -100, 261, -1000, 452, 451, -1000, -1000, -1000, -1000,
	1792, 14809, 14809, 42063, -154, -1000, 698, 698, -1000, 38799,
	-1000, 41518, -1000, 40693, -1000, -1000, -1000, -1000, 980, -1000,
	38677, -1000, -1000, -1000, -1000, 15499, 1448, 259, 42450, 38487,
	-1000, -1000, 14809, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	523, 14809, 14809, 1428, 523, -156, 464, -1000, -1000, -1000,
	2021, -1000, -157, -1000, -1000, -1000, -1000, 35011, -1000, 35011,
	-1000, 6174, 35011, 1455, 1168, -1000, -1000, 1343, 254, 15499,
	35011, -1000, 970, 16534, 1792, 99, 6174, 1792, 38421, 4577,
	-159, -167, 1134, -1000, 1132, 14809, -1000, 42450, 1056, 1056,
	-1000, 620, 615, 14809, 609, -1000, 592, -1000, -107, 20667,
	993, -168, 16534, -169, 132, 21, -170, 35011, -1000, 447,
	23351, -1000, 1686, 1697, 35011, 1743, -1000, -1000, 253, 250,
	249, -1000, 26342, 26342, 23020, 23020, -1000, 698, 698, -1000,
	-1000, 130, 1051, 1931, -1000, 1086, 15499, 42450, -176, -1000,
	38231, -1000, 35011, 41518, -137, -1000, -1000, 26011, 405, -1000,
	-1000, 1310, -1000, -1000, 35011, 1189, -1000, -1000, 14809, 4195,
	248, 1410, 247, -1000, -1000, -1000, -1000, -1000, -1000, 1898,
	-50, -1000, 867, -1000, -1000, 41518, 1886, -1000, -1000, 35011,
	35011, -51, 243, 237, -1000, 35011, 970, -181, -1000, 1410,
	-1000, 970, 236, 23351, -1000, 1314, 697, -183, 35011, -1000,
	-1000, 6517, 23020, 23020, -1000, -184, -1000, -1000, -1000, 985,
	14809, 1086, -189, -1000, -1000, -116, -1000, 1957, -1000, -1000,
	-1000, -1000, 1608, 38109, 1251, 35011, -1000, 35011, 1792, 128,
	35011, 560, 6174, -1000, -1000, 123, 14809, 14809, 232, 1410,
	970, -1000, 1410, 16534, -1000, 1329, 793, -1000, 537, -1000,
	-190, -191, -1000, 122, 15154, 15154, -137, -1000, 35011, 228,
	1562, -1000, 1089, 1154, 120, -192, -1000, -1000, 207, -1000,
	14809, -1000, 2046, -197, -198, 35011, -1000, 1410, -1000, -209,
	-1000, 19635, -1000, 483, 483, -1000, -1000, -1000, 16189, 1068,
	817, 40125, -1000, -1000, -1000, 35011, -1000, 1100, 1096, 821,
	-1000, -1000, -1000, -1000, -1000, 1251, 41518, -1000, -1000, -210,
	-1000, 970, -182, -1000, -1000, 1996, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1707, -1000, 574, 1031, 1031, 1089, 1047,
	1410, -1000, 14464, -1000, 2007, -1000, -1000, 1270, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2461, 2459, 1583, 1989, 2457, 2456, 2454, 2453, 2451,
	2450, 2448, 2447, 2446, 2445, 2444, 2442, 2440, 2435, 2422,
	2419, 2418, 2417, 2416, 1965, 2412, 1913, 2410, 2408, 2407,
	2403, 2402, 1900, 2399, 2397, 2393, 2388, 1895, 2386, 1798,
	2385, 1795, 2384, 2383, 2381, 2378, 2376, 1791, 2374, 65,
	105, 1788, 2373, 2372, 1786, 1772, 1756, 2369, 1750, 2366,
	2363, 1748, 1744, 2362, 84, 2354, 2352, 2351, 1741, 1737,
	2350, 2349, 2345, 148, 2344, 1727, 2340, 2332, 2331, 2329,
	2328, 2327, 2326, 2324, 2319, 2317, 2316, 2315, 2312, 2310,
	2309, 2307, 2304, 2303, 2302, 154, 2301, 2300, 1610, 1578,
	2298, 2297, 31, 27, 7, 53, 18, 136, 2778, 130,
	2293, 2290, 2289, 2284, 2283, 2282, 26, 94, 95, 2280,
	132, 2278, 2271, 51, 36, 22, 14, 57, 86, 2269,
	2267, 1523, 30, 2266, 2265, 127, 2264, 114, 21, 2061,
	146, 147, 111, 116, 2263, 2260, 2258, 46, 110, 5,
	2256, 2255, 15, 75, 106, 2252, 24, 101, 2249, 2244,
	123, 2243, 52, 88, 1522, 93, 117, 1074, 96, 2240,
	66, 11, 55, 2239, 2238, 153, 37, 2236, 28, 73,
	138, 2226, 43, 152, 121, 62, 125, 129, 2224, 2223,
	2222, 109, 2212, 115, 77, 2211, 2209, 68, 2208, 90,
	131, 2200, 2198, 2197, 83, 2195, 118, 2194, 2193, 151,
	144, 107, 9, 40, 60, 13, 1503, 1476, 126, 92,
	47, 44, 2192, 788, 1752, 1113, 33, 98, 69, 79,
	99, 48, 82, 140, 23, 2190, 2189, 128, 2188, 2187,
	2185, 2184, 2181, 102, 2180, 2179, 25, 2177, 61, 34,
	42, 74, 38, 56, 122, 104, 149, 97, 2176, 71,
	119, 2173, 89, 2171, 2170, 2089, 112, 2161, 2156, 2152,
	2045, 2029, 1249, 978, 2145, 2143, 1026, 1021, 2142, 2140,
	72, 2139, 108, 100, 87, 141, 133, 19, 2137, 113,
	35, 2136, 32, 20, 0, 1816, 959, 2135, 120, 59,
	2134, 2131, 2130, 2126, 17, 6, 4, 3, 8, 2,
	76, 29, 2125, 2120, 124, 80, 54, 2119, 150, 2118,
	2117, 2116, 39, 2115, 12, 2114, 10, 2113, 2111, 16,
	1, 2107, 2105, 137, 2101, 91, 2100, 1981, 2099, 145,
	2098, 2097, 1662, 2096, 50, 103,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 5, 5, 5, 5, 5, 5,
	5, 7, 7, 8, 8, 8, 9, 6, 6, 6,
	6, 6, 11, 11, 12, 20, 15, 22, 10, 18,
	16, 14, 14, 19, 19, 118, 118, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 115, 115, 120, 120, 120, 122, 122, 119,
	119, 114, 114, 24, 24, 62, 62, 105, 55, 55,
	55, 292, 292, 293, 293, 101, 101, 102, 102, 102,
	102, 103, 103, 104, 104, 104, 30, 30, 30, 26,
	26, 26, 26, 26, 27, 27, 28, 28, 31, 31,
	31, 31, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 39, 39, 40, 40, 40, 40, 40,
	40, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 46, 46, 46, 44, 44, 44, 43, 43,
	43, 42, 42, 42, 45, 45, 45, 166, 166, 165,
	165, 169, 169, 47, 47, 47, 47, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 50, 50, 50, 50, 50,
	50, 50, 261, 261, 260, 48, 48, 235, 235, 51,
	51, 192, 192, 52, 52, 52, 52, 52, 53, 53,
	63, 63, 333, 333, 333, 337, 337, 338, 338, 339,
	339, 339, 339, 339, 339, 339, 335, 335, 58, 58,
	58, 58, 59, 59, 59, 60, 60, 100, 100, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 69, 69,
	69, 71, 68, 68, 68, 70, 70, 70, 70, 72,
	72, 73, 73, 73, 73, 73, 74, 74, 286, 284,
	284, 285, 285, 145, 145, 145, 145, 145, 146, 146,
	146, 291, 291, 291, 291, 291, 291, 290, 290, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 87, 87, 87, 95,
	95, 95, 95, 95, 95, 95, 76, 76, 81, 81,
	81, 81, 81, 77, 77, 82, 82, 83, 83, 84,
	84, 84, 84, 84, 84, 78, 78, 78, 78, 86,
	86, 86, 86, 85, 85, 91, 91, 91, 91, 91,
	91, 88, 88, 88, 88, 89, 89, 89, 92, 92,
	92, 92, 79, 79, 80, 80, 93, 93, 94, 94,
	94, 94, 94, 90, 90, 90, 334, 334, 336, 336,
	56, 56, 35, 35, 36, 36, 147, 147, 148, 148,
	214, 214, 214, 214, 149, 149, 121, 121, 121, 213,
	302, 302, 303, 303, 303, 303, 303, 303, 304, 304,
	304, 304, 304, 304, 304, 300, 300, 301, 298, 298,
	299, 299, 299, 299, 340, 340, 212, 212, 152, 152,
	307, 307, 307, 307, 305, 305, 305, 305, 305, 308,
	306, 309, 309, 309, 309, 309, 247, 247, 247, 97,
	97, 37, 37, 37, 127, 127, 38, 38, 34, 34,
	34, 196, 196, 156, 156, 252, 252, 252, 138, 138,
	116, 116, 116, 17, 13, 13, 13, 13, 13, 13,
	23, 23, 21, 21, 197, 197, 198, 198, 57, 57,
	61, 61, 66, 66, 96, 96, 96, 96, 96, 96,
	25, 25, 25, 25, 29, 29, 29, 29, 65, 65,
	342, 342, 134, 134, 134, 134, 135, 135, 209, 209,
	210, 210, 343, 343, 211, 211, 211, 129, 128, 130,
	130, 33, 33, 33, 123, 123, 124, 124, 125, 125,
	126, 126, 344, 344, 54, 54, 54, 99, 99, 141,
	141, 206, 206, 206, 208, 208, 207, 207, 207, 182,
	182, 182, 98, 98, 161, 161, 171, 171, 172, 172,
	258, 173, 173, 64, 64, 108, 108, 106, 106, 106,
	106, 106, 106, 107, 107, 107, 109, 109, 109, 109,
	109, 109, 109, 112, 112, 112, 113, 113, 113, 111,
	111, 315, 315, 315, 318, 318, 314, 316, 316, 317,
	317, 341, 341, 183, 183, 183, 151, 150, 150, 154,
	154, 153, 155, 155, 251, 251, 251, 180, 180, 180,
	180, 201, 201, 199, 199, 200, 200, 202, 202, 203,
	203, 203, 204, 204, 205, 205, 179, 179, 231, 231,
	110, 110, 110, 160, 160, 160, 162, 162, 221, 221,
	221, 222, 222, 220, 220, 220, 220, 253, 253, 253,
	253, 253, 253, 253, 253, 331, 331, 331, 332, 332,
	250, 250, 254, 254, 254, 254, 254, 254, 248, 248,
	248, 248, 249, 249, 259, 259, 186, 186, 186, 186,
	184, 184, 185, 185, 255, 255, 255, 255, 181, 181,
	256, 256, 256, 215, 215, 262, 262, 262, 280, 280,
	159, 159, 159, 263, 263, 263, 263, 263, 263, 263,
	263, 263, 263, 263, 263, 263, 263, 263, 263, 263,
	263, 263, 264, 264, 264, 264, 266, 266, 266, 265,
	265, 265, 265, 265, 265, 265, 265, 265, 265, 265,
	265, 265, 265, 265, 265, 265, 265, 279, 279, 279,
	279, 279, 267, 267, 274, 274, 275, 275, 276, 277,
	268, 268, 269, 269, 270, 271, 278, 278, 278, 278,
	282, 282, 272, 272, 272, 272, 272, 273, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 194, 194, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 225, 225, 225, 225,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 310, 310, 310, 310, 310, 310, 310, 310, 312,
	312, 313, 313, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 319, 319, 320, 320, 322, 322, 323,
	323, 324, 325, 325, 325, 326, 327, 327, 321, 321,
	328, 328, 328, 329, 329, 330, 330, 330, 330, 330,
	237, 237, 238, 239, 245, 245, 245, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 136, 136, 136, 136, 136, 168, 168,
	167, 167, 234, 234, 232, 232, 236, 236, 187, 187,
	281, 281, 281, 281, 281, 281, 281, 188, 188, 188,
	195, 189, 189, 190, 190, 190, 190, 190, 228, 229,
	191, 191, 191, 230, 230, 240, 244, 244, 243, 242,
	242, 241, 241, 218, 218, 219, 219, 217, 216, 176,
	176, 175, 175, 174, 174, 345, 345, 246, 246, 177,
	177, 178, 170, 170, 257, 257, 257, 257, 163, 163,
	143, 143, 164, 164, 139, 139, 142, 142, 140, 140,
	140, 140, 157, 157, 158, 158, 137, 137, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 283,
	283, 283, 233, 131, 131, 131, 132, 132, 133, 133,
	288, 288, 288, 289, 289, 289, 289, 287, 287, 287,
	287, 287, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 3, 1, 1, 1, 1,
	1, 3, 4, 6, 6, 6, 5, 5, 7, 7,
	7, 4, 12, 4, 12, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 3, 3, 3,
	6, 4, 3, 2, 1, 1, 0, 2, 0, 2,
	0, 2, 0, 7, 2, 6, 2, 1, 12, 12,
	2, 1, 1, 1, 3, 3, 0, 3, 1, 3,
	1, 1, 3, 2, 5, 0, 4, 6, 7, 1,
	2, 1, 2, 2, 3, 3, 3, 3, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	3, 1, 2, 7, 3, 2, 2, 2, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 1, 3, 1,
	2, 2, 3, 2, 2, 5, 3, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 1, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 2,
	6, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 6, 6,
	3, 5, 3, 2, 6, 3, 3, 4, 4, 3,
	3, 1, 3, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 1,
	1, 1, 1, 1, 2, 2, 3, 3, 4, 4,
	3, 4, 4, 4, 3, 2, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 2,
	3, 3, 3, 2, 3, 4, 3, 5, 3, 4,
	5, 2, 3, 3, 3, 4, 2, 3, 4, 3,
	3, 3, 4, 4, 4, 4, 2, 3, 7, 7,
	7, 4, 5, 5, 5, 5, 2, 0, 2, 0,
	3, 2, 7, 10, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 3,
	2, 0, 3, 1, 2, 2, 3, 6, 2, 1,
	1, 2, 4, 2, 5, 7, 8, 5, 3, 1,
	4, 6, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	2, 4, 7, 3, 3, 0, 6, 3, 11, 14,
	4, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 8, 10, 8, 10,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	3, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 2, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 0, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 3, 6, 3, 1,
	3, 1, 4, 2, 8, 5, 4, 3, 0, 2,
	2, 0, 8, 3, 2, 0, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 2, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 8, 8, 2, 4, 4, 4, 2,
	2, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 4, 5, 2, 2, 1,
	1, 1, 0, 2, 5, 2, 3, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 2, 3, 3, 2, 0, 1, 3, 3, 5,
	1, 1, 3, 2, 4, 4, 0, 8, 4, 6,
	3, 3, 1, 5, 5, 0, 2, 3, 1, 3,
	2, 0, 3, 4, 5, 4, 5, 4, 5, 2,
	4, 1, 1, 0, 5, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 1, 1,
	2, 3, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 3, 4, 4,
	5, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 2, 1, 3, 1, 1, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 3, 4,
	1, 1, 1, 5, 1, 3, 3, 1, 3, 3,
	1, 3, 3, 1, 1, 3, 3, 1, 1, 6,
	6, 4, 3, 4, 3, 4, 3, 4, 4, 3,
	6, 5, 5, 5, 4, 8, 6, 6, 4, 4,
	3, 4, 3, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 5, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 0,
	1, 3, 1, 3, 3, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 1, 1,
	3, 3, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 2, 3, 1, 1, 1,
	2, 2, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 374, -4, -24, -26, -30, -31,
	-52, -39, -40, -41, -51, -47, -53, -54, -55, -56,
	-48, -62, -61, -63, -66, -64, -57, -58, -67, -75,
	-96, -97, -98, -99, -5, -6, -7, -8, -9, 23,
	34, -27, -28, 47, 71, -37, -32, 73, 94, -317,
	98, -42, -43, -44, -46, -45, 102, 109, 112, 134,
	145, 226, 232, 253, 255, 257, 264, -106, -108, 251,
	-59, -60, -68, -69, -70, -71, -100, 275, -76, -77,
	-78, -79, -80, -81, -82, -83, -84, -85, -86, -87,
	-88, -89, -90, -91, -92, -93, -94, 278, -25, -29,
	-65, 316, -11, -12, -15, -14, -16, -13, -20, -22,
	-19, -21, -23, -17, -18, -10, -33, -34, -35, -36,
	-38, -315, -109, -107, 371, 252, 325, 111, 35, 287,
	61, 105, 259, 341, 348, -112, -110, -111, -113, 268,
	333, 297, 375, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 2, 297, 336, 87,
	153, 237, -333, 2, -164, 297, 87, -140, -131, 364,
	4, -294, -296, 20, 21, 23, 33, 34, 35, 40,
	44, 47, 48, 55, 60, 61, 62, 67, 64, 65,
	66, 69, 71, 72, 75, 76, 77, 85, 86, 88,
	90, 94, 96, 98, 101, 102, 104, 109, 111, 110,
	112, 122, 123, 128, 130, 135, 141, 142, 145, 146,
	154, 157, 159, 152, 169, 170, 171, 173, 174, 175,
	178, 177, 182, 185, 188, 190, 191, 192, 195, 193,
	197, 198, 200, 199, 205, 207, 208, 210, 213, 216,
	219, 222, 223, 224, 225, 226, 228, 230, 232, 234,
	235, 236, 237, 238, 240, 241, 243, 244, 245, 246,
	247, 251, 249, 250, 252, 253, 254, 255, 257, 259,
	260, 262, 276, 277, 288, 264, 265, 266, 267, 271,
	269, 272, 273, 275, 278, 280, 283, 286, 287, 289,
	292, 293, 290, 285, 296, 298, 299, 300, 301, 302,
	303, 304, 311, 312, 316, 317, 318, 319, 322, 323,
	324, 325, 327, 330, 331, 332, 337, 342, 343, 344,
	345, 346, 28, 36, 37, 38, 39, 41, 42, 45,
	46, 51, 52, 53, 56, 89, 91, 92, 108, 113,
	114, 124, 125, 126, 136, 138, 147, 148, 151, 158,
	160, 161, 162, 163, 164, 166, 180, 194, 204, 206,
	217, 221, 229, 231, 239, 261, 270, 281, 282, 291,
	294, 306, 307, 308, 313, 314, 329, 333, 334, 374,
	374, 2, 170, 236, -139, -131, 87, 374, 2, 297,
	326, 336, -196, 87, 321, -131, 232, 22, 2, 96,
	157, 324, 323, 22, 228, 269, 299, 301, 2, 374,
	374, 374, 374, 374, 2, 336, 297, 153, 87, 326,
	-131, 2, -50, 2, 371, -49, -4, -32, -41, -51,
	-47, -24, -26, -37, -39, -55, -54, -56, -58, -62,
	-61, -64, -68, -69, -75, -98, -99, 73, 275, -337,
	2, 22, -338, -339, 73, 102, 134, 268, 157, 96,
	323, 297, 2, 170, 2, -131, 2, -333, 2, 170,
	2, -337, 2, -131, 2, -135, 2, 264, -131, 374,
	374, 374, 374, 374, 185, 55, 261, 272, -73, 312,
	-72, 306, -286, -74, 2, -165, 195, -131, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 2, -95, 272, 34, 55,
	22, 60, 88, 135, 153, 154, 174, 68, 69, 235,
	185, 171, 311, 175, 273, 298, 312, 73, 327, 302,
	110, 4, 87, 195, 274, 306, 374, 374, 374, -341,
	2, 297, 374, 374, 374, 374, 374, -107, -109, -108,
	-153, -154, 320, 165, 107, 215, -106, -108, 2, -315,
	-95, 272, 2, 55, 22, -284, 2, -246, 211, -223,
	93, -225, 362, 363, 357, 201, 347, -237, -227, -240,
	108, 261, 371, -139, -226, 377, 9, -312, -108, 29,
	-238, -239, 49, -131, 7, 8, 5, 6, -137, -264,
	-233, -273, 315, 115, 203, -310, -311, 4, -294, -288,
	-265, -275, -269, -272, 166, 58, 79, 80, 83, 81,
	84, 274, 326, 50, 28, 113, 114, 221, 229, 294,
	313, 314, 147, 204, 148, 56, 136, 180, 101, 37,
	39, 41, 42, 51, 52, 89, 91, 92, 124, 125,
	126, 158, 160, 161, 162, 163, 164, 206, 239, 281,
	291, 307, 308, 334, -295, -276, -277, -270, -271, 74,
	116, 133, 156, 149, 168, 172, 181, 183, 196, 218,
	220, 258, 279, -278, 278, -342, 2, 312, 312, 2,
	-342, 2, -342, 2, -134, 2, 312, 309, -318, 240,
	-314, -131, -318, 374, 374, 376, 374, -150, -151, 2,
	22, 99, -178, 2, 371, -253, 2, 369, -255, -139,
	-108, -254, 371, 212, -3, 2, -255, 147, -139, 2,
	-255, 147, -139, 2, -131, 2, -142, 147, -139, -287,
	4, -294, -296, -295, -297, 58, 22, 24, 25, 26,
	27, 29, 30, 31, 32, 43, 49, 50, 54, 57,
	59, 68, 73, 78, 79, 81, 80, 82, 83, 84,
	93, 95, 97, 99, 100, 103, 105, 107, 115, 117,
	129, 131, 132, 134, 137, 139, 150, 153, 155, 165,
	167, 176, 179, 184, 186, 187, 201, 202, 203, 209,
	211, 212, 214, 215, 227, 233, 242, 256, 268, 274,
	284, 295, 297, 305, 309, 310, 315, 320, 321, 326,
	328, 335, 336, 338, 339, 340, 341, 309, 376, -164,
	-157, -131, -217, -216, 373, -223, 2, -223, 2, 132,
	371, -175, -176, -216, -217, 2, -165, 147, -292, 147,
	2, -290, 9, -289, 5, 4, -294, -296, -295, -165,
	2, 153, -131, 147, 2, -131, 22, 132, 2, 167,
	2, 167, 2, -256, 2, -255, -166, 147, 2, -165,
	-166, 147, 2, -143, 147, 2, -142, -131, 147, 2,
	-157, 147, 2, -192, 371, -261, 2, -260, -289, 333,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 272, 211, 376, -165, -223, -235, 371,
	132, -223, 211, -131, 2, 276, 2, 371, -73, 53,
	312, -210, 2, -211, -128, -129, -130, 169, 234, 238,
	346, 309, 352, 132, -284, -169, 373, -95, 2, -292,
	2, 276, 2, 235, 273, 55, 132, 2, 2, -334,
	2, 211, 132, 2, 132, 2, 132, 2, 132, 2,
	132, 2, 2, 235, 273, 2, 129, 2, 311, 2,
	2, 132, 2, 169, 234, 288, 2, 297, 336, 2,
	132, 132, 346, 2, -181, -255, -153, -154, -180, -199,
	-200, 184, 117, 209, -183, 22, 99, -183, -183, 44,
	372, 372, -95, 276, 2, 10, 11, 57, 33, 362,
	363, 364, 365, 127, 366, 367, 360, 361, 359, 350,
	351, 354, 355, 356, 70, 353, 352, 63, 189, 263,
	118, 119, 120, 121, 248, 13, 14, 15, 26, 214,
	183, 347, 149, 279, 357, 16, 17, 18, 168, 36,
	150, -136, -144, -223, -223, -223, -223, -223, 220, -174,
	-218, 369, -108, 371, 371, -108, -223, -167, 371, 7,
	-108, -232, 369, -241, -223, -175, 371, 5, 371, 5,
	-319, 342, 129, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 231, -282, 337, -282, -282, -266, 371, -266,
	-267, 371, -266, 343, 348, 371, 346, 22, -209, -210,
	-209, 309, -135, 376, -318, -158, 371, -178, -170, -257,
	-223, 364, -170, -177, -246, 74, -186, 172, 196, 133,
	181, 258, 156, 7, -50, -220, 377, 371, 364, -250,
	348, -108, -254, 371, -253, -139, 371, -118, 249, -117,
	21, 23, 102, 331, 108, 285, 303, 111, 265, 249,
	108, 111, 249, 285, 303, 265, 249, 108, 377, 111,
	-292, -140, 376, -287, 364, 289, 372, -163, -139, -176,
	371, -152, 201, -127, -316, 341, 201, -152, 371, -132,
	147, 2, -131, -316, 201, -256, -141, -139, -141, 275,
	-131, 30, -120, 376, 48, 254, 108, -120, 108, -120,
	376, 108, -120, 108, 108, -167, -223, 372, 376, -333,
	-339, 73, 371, 30, -234, -262, -263, -265, -274, -268,
	-272, -273, 40, 46, 45, 304, 194, 270, 282, 329,
	151, 38, 210, 159, 4, 158, 160, 161, 162, 163,
	164, 281, 37, 239, 125, 126, 124, 101, 92, 91,
	206, 42, 41, -276, -277, -270, -271, 89, 307, 308,
	166, 39, 52, 51, 334, 291, -293, -292, -333, -286,
	-167, 30, -210, 2, -343, 376, 182, -146, 188, 200,
	141, 212, 344, -291, 5, 4, -233, -247, 93, 185,
	-273, 8, 363, -283, 7, 362, -285, -284, -285, 77,
	373, -287, -165, 22, 277, 2, -286, -336, 129, -333,
	-286, -286, -286, -286, -286, 272, -50, 129, -131, 182,
	-286, 2, -286, 2, 297, 153, 297, -120, 376, -180,
	-200, -199, -202, -223, 22, -205, 123, 197, -223, -225,
	-107, -107, -107, -155, -251, -223, 233, 153, -286, -280,
	-262, -279, 244, 245, 243, 247, 246, -262, -287, 306,
	-223, -223, -223, -223, -223, -223, -223, -223, -223, -223,
	-223, -223, -223, -223, -223, -223, -223, -223, -223, -223,
	-223, -223, -223, -223, -223, -223, -223, -223, -223, -223,
	-223, -223, 183, 149, 279, 36, 150, -223, 309, -223,
	-223, -223, -223, 193, 201, 203, 315, 115, 322, 99,
	207, -345, 295, 32, -230, -108, 371, -245, 27, 284,
	22, -237, 261, 371, -218, -223, -219, -168, -167, 372,
	376, -168, -236, -232, -244, -243, 338, 372, -167, 335,
	22, 99, 364, 2, 7, -193, 345, 192, 90, 142,
	191, -194, 267, -320, 122, 137, 371, 372, 2, 372,
	2, 372, 2, 372, 2, -223, -223, -187, 2, -281,
	-167, 4, 345, 192, 90, 142, 191, 267, -187, 2,
	-188, 2, -223, -167, -189, -224, -225, 362, 363, 357,
	371, 261, -190, 2, -223, -168, -223, 43, 179, 310,
	-191, -223, 132, -167, -223, -223, -223, -167, -167, 2,
	-167, 2, 371, 7, 7, 306, 306, 7, 64, 65,
	346, -135, -314, 30, -157, -160, 376, 132, 30, 4,
	-160, 376, 372, 172, 172, -253, -186, 172, -184, 218,
	-184, -184, -331, 371, 370, -250, -287, 369, 378, -168,
	2, -249, -248, 30, -131, 216, 372, -139, 376, 309,
	-197, 68, 59, -213, 147, 59, -298, -131, 68, -299,
	54, 321, 233, 131, -197, 68, -197, 68, 68, -255,
	33, -64, 66, 132, 309, -255, 66, 309, 33, -64,
	132, 309, -142, -287, 66, -259, 349, -131, 132, 372,
	376, -147, -157, -148, -131, -214, -213, -300, -301, -298,
	153, 321, 116, 30, 108, 225, 108, 30, 211, 201,
	-123, 300, 108, -215, 339, -206, -64, 371, 93, 30,
	-206, -171, -172, -258, -173, -139, 371, -131, -165, -166,
	-166, -142, -143, -131, -157, 372, 376, -50, -260, 309,
	328, -148, -49, 73, 372, 376, -159, 29, 369, -193,
	371, -259, 376, 132, 352, 309, 372, 312, -211, -145,
	238, 283, 250, 271, 8, 7, 7, 376, -287, -335,
	-131, 272, -50, -139, -142, -139, -255, -203, -283, 371,
	363, -204, 261, 262, 376, -116, 31, 97, 173, -139,
	346, -223, -223, 309, -345, 295, -230, -223, 193, 203,
	315, 115, 322, 99, 207, 132, 371, -224, -224, -167,
	-227, 371, -167, 370, 380, 372, -223, 370, 370, 376,
	-242, -243, 103, -223, -154, 376, -153, -223, -167, -167,
	372, 372, 309, 309, 309, 309, 371, -325, 219, 371,
	371, -223, 30, 376, 372, 132, 372, 372, -195, 227,
	372, 10, 11, 362, 363, 364, 365, 127, 366, 367,
	360, 361, 359, 350, 351, 352, 63, 189, 263, 13,
	14, 15, 168, 150, -224, -224, -224, -167, 371, 372,
	-228, -229, 132, 129, 30, -191, -191, -191, 372, 132,
	-167, 376, 376, 376, 372, 372, 372, 7, 372, 376,
	372, 346, 346, 372, 129, 65, 371, 372, -215, -257,
	-162, 2, -253, -287, -215, -246, -253, -253, -185, 328,
	211, 172, -253, -248, 372, -332, 7, -250, -249, 7,
	-222, -221, 130, 199, 372, -131, 371, -250, 372, -117,
	-139, -131, -131, 201, -213, 147, -122, 201, -262, -131,
	371, 371, 173, 173, -131, -131, 147, -131, 147, -131,
	-131, -118, 249, -64, 346, 371, -139, 249, 346, -131,
	-64, 371, -131, 249, 346, -101, 146, 207, 289, 132,
	-139, 372, 372, 376, -132, 153, -132, -64, -165, -292,
	-292, -64, -139, 108, -124, 104, -344, 352, -131, -201,
	-199, -223, -182, -208, 256, 211, -163, 333, -131, -182,
	-161, 376, 132, 352, -163, -120, -120, -120, -120, -223,
	-335, -292, 372, -262, 369, 370, 7, 7, -104, 341,
	-292, -335, -284, -284, -128, 319, 62, 238, -284, 376,
	-204, -223, -251, -139, 377, -223, -223, -224, -224, 132,
	371, -223, -234, 26, 26, 372, -168, 376, -219, -223,
	372, -232, 105, -223, 305, 372, 335, -154, -154, -154,
	5, 192, 142, 191, -194, 191, -194, -194, 7, -326,
	-131, 371, 339, -153, 372, -280, -262, -223, -228, -223,
	-280, -262, -224, -224, -224, -224, -224, -224, -224, -224,
	-224, -224, -224, -224, -224, -224, -224, -224, -224, -224,
	-224, 99, 201, 207, -224, 376, -168, -229, -228, -223,
	-223, -262, 372, 372, 372, -167, -223, -223, -223, 372,
	7, 237, 87, 297, -49, -179, 137, -259, 376, -179,
	-185, 371, -223, -253, 370, 372, 376, -249, 370, 376,
	379, 352, -250, 371, -157, -248, 309, 309, 108, 201,
	330, -302, -299, -223, -156, -252, -131, -313, 371, -310,
	-311, -137, 371, 371, -115, 102, 275, -198, 108, -120,
	108, -120, 309, -197, 68, -226, -137, -131, -167, 309,
	-226, -167, 309, -226, -104, 132, 296, 289, -149, 152,
	-214, 371, -132, 371, 371, -152, -127, 371, -131, -125,
	178, -344, -290, -316, -182, -182, -170, 202, 67, 372,
	-215, -172, -162, -246, 372, -105, 75, -105, 7, 370,
	372, -103, 213, -102, -131, 5, -131, 212, 372, -116,
	-287, 26, 26, -223, -234, 372, -223, -223, 372, -223,
	370, -223, 5, -223, 372, 372, 372, 372, -327, -131,
	-223, 372, 372, 372, -229, 132, 99, 207, 371, -223,
	372, 372, 376, 372, 372, 372, -287, -131, -139, 372,
	-231, 139, 44, -253, -231, -157, -220, 7, -221, -287,
	369, -249, -157, 372, -131, -131, -213, 108, -303, 68,
	-304, 57, 116, 73, 201, 203, 321, 233, 54, 93,
	242, 372, 372, 376, -138, -175, 57, -138, -223, 371,
	-156, -157, 201, 93, 201, 93, 86, 317, -131, -131,
	-139, -131, -131, 371, 372, -139, 372, -131, -293, 306,
	150, -156, 371, -157, -147, 30, -156, 211, -126, 177,
	-344, -290, -123, -207, 371, 211, -64, -182, 352, 86,
	86, 370, 376, 371, 352, 352, -116, -223, -223, 372,
	372, -154, -321, 224, 372, -224, 132, 371, -234, 372,
	-223, -322, 340, -223, -167, -322, 372, -250, 7, 372,
	-213, -131, -287, -131, 116, 147, 203, 173, 371, -224,
	-139, -212, -340, 72, 293, -252, -116, -287, -116, 372,
	-167, 372, 372, 203, 203, -223, -262, -120, -120, 309,
	309, -167, 309, 309, -226, 222, 372, -156, 372, 372,
	-64, 372, -139, -344, -290, -124, 100, -157, 68, -178,
	-108, 371, 371, 371, -102, -103, -292, -292, 372, -154,
	44, -224, -234, 372, 372, -323, -324, -131, -249, 370,
	-304, -132, 201, -223, -133, 371, -149, 371, -138, -154,
	242, -119, 57, -131, -131, -154, 371, 371, -139, -212,
	372, -149, -212, 371, -290, -125, 323, 202, 372, -131,
	-293, -293, 372, -328, 237, 262, -167, 372, 376, 30,
	108, 372, -307, 190, -131, -157, -116, 372, -139, -114,
	328, -287, 372, -167, -167, 371, -149, -212, -149, -156,
	-126, 275, -215, 372, 372, 372, -329, -330, 36, 318,
	77, -223, -329, -324, -326, 116, -305, -308, -306, 211,
	133, 223, 280, 372, 372, -152, -223, 372, 372, -157,
	-149, 372, -171, -104, -104, -330, 230, 128, 261, 230,
	128, -131, -306, 211, -308, 211, 323, 96, -307, 372,
	-212, -215, 26, -309, 198, 254, 48, 275, -309, -305,
	-121, 48, 254, -149, -330, 20, 203, 93,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 62, 0,
	0, 149, 151, 0, 0, 158, 160, -2, 0, 0,
	0, 181, 183, 185, 187, 189, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 0, 0, 653, -2, 0,
	288, 290, 299, 301, 303, 305, 306, 0, 349, 351,
	353, 355, 357, 359, 361, 363, 365, 367, 369, 371,
	373, 375, 377, 378, 380, 382, 384, 0, 574, 576,
	578, -2, 64, 65, 66, 67, 68, 69, 77, 78,
	79, 80, 71, 73, 74, 76, 162, 164, 166, 168,
	171, 689, -2, 700, 0, 0, 0, 0, -2, 0,
	-2, -2, -2, 0, 0, 666, 668, 670, 672, -2,
	0, 0, -2, 7, 12, 14, 16, 19, 21, 23,
	25, 27, 29, 31, 33, 35, 37, 39, 42, 48,
	50, 52, 55, 57, 59, 61, 63, 0, 0, 0,
	0, 0, 0, 124, 272, 0, 1268, 1192, 1198, 1199,
	1223, 1224, 1225, 1242, 1243, 1244, 1245, 1246, 1247, 1248,
	1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
	1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1269,
	1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279,
	1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289,
	1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299,
	1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309,
	1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319,
	1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329,
	1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339,
	1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349,
	1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359,
	1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369,
	1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379,
	1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389,
	1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399,
	1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409,
	1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419,
	1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429,
	1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439,
	1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449,
	1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 150,
	152, 153, 0, 0, 0, 1194, 1268, 159, 161, 0,
	0, 0, 0, 0, 541, 263, 1328, 265, 267, 0,
	0, 0, 0, 175, 176, 177, 178, 179, 180, 182,
	184, 186, 188, 190, 191, 0, 0, 0, 0, 0,
	262, 260, 213, 214, 0, 245, 246, 247, 248, 249,
	251, 217, 219, 220, 222, 224, 226, 228, 230, 231,
	233, 235, 236, 238, 240, 241, 243, 542, 0, 0,
	269, 275, 276, 277, 279, 280, 281, 282, 283, 284,
	285, 0, 130, 0, 461, 258, 256, 0, 126, 0,
	571, 0, 271, 572, 573, 568, 569, 1355, 597, 289,
	291, 300, 302, 304, -2, -2, 1445, -2, 313, -2,
	321, 1451, 0, 324, 325, 328, -2, 209, 350, 352,
	354, 356, 358, 360, 362, 364, 366, 368, 370, 372,
	374, 376, 379, 381, 383, 385, 386, 0, 0, 0,
	390, 0, -2, -2, 0, 0, 0, 0, 0, -2,
	0, -2, 0, 0, -2, -2, 0, 0, -2, 0,
	0, 389, 391, 392, 393, 0, 575, 577, 579, 0,
	530, 691, 163, 165, 167, 169, 172, -2, 664, 665,
	-2, 0, 695, 695, 695, 0, 0, 665, 663, 0,
	292, 0, 294, 0, 390, 297, 298, 329, 330, 1177,
	1178, 894, 0, 0, 0, 0, 0, 0, 996, 998,
	1418, 1445, 0, 1000, 1001, 0, 1003, 1005, 1006, 0,
	1009, 1010, 1162, 1194, 1208, 1209, 1210, 1211, 0, 0,
	1214, 0, 1216, 1217, 1218, 1064, 1020, -2, -2, 1206,
	822, 823, 824, 825, -2, 1459, 1024, 1027, 1030, 1033,
	1034, 1037, 1038, 0, 1402, 1419, 1420, 1441, 1442, 1450,
	1454, 1455, 1426, 1438, 1427, 1414, 1424, 1436, 1274, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1232, 856, 857, 862, 863, 1460,
	1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470,
	1471, 1472, 1473, 865, 0, 599, 581, 590, 599, 583,
	584, 585, 586, 587, 588, 589, 592, 0, 681, 1334,
	684, 1205, 682, 667, 669, 0, 671, 0, 0, 675,
	697, 696, 730, 731, 0, 679, 680, 690, 746, 784,
	761, 752, 0, 0, 2, 70, 0, 1426, 784, 72,
	0, 1426, 784, 75, 0, 81, 0, 1426, 1197, 0,
	1237, 1238, 1239, 1240, 1241, 1459, 1474, 1475, 1476, 1477,
	1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
	1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497,
	1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507,
	1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
	1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527,
	1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537,
	1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547,
	1548, 1549, 1550, 1551, 1552, 1553, 1554, 0, 0, 273,
	274, 1202, 1200, 1201, 0, 154, 155, 156, 157, 0,
	0, 1195, 1171, 1169, 1170, 170, 509, 1426, -2, 1426,
	533, 131, 132, 347, 348, 1233, 1234, 1235, 1236, 509,
	537, -2, 688, 1426, 613, 264, 266, 0, 174, 0,
	626, 0, 628, 0, 643, 790, 116, 1426, 194, 207,
	116, 1426, 197, 116, 1426, 200, 1190, 116, 1426, 203,
	204, 1426, 206, 259, 0, 0, -2, 252, 254, -2,
	250, 218, 221, 223, 225, 227, 229, 232, 234, 237,
	239, 242, 244, -2, 0, 0, 0, 460, 0, 0,
	0, 570, 0, 596, 307, 0, 310, 0, 312, 1413,
	-2, -2, 316, 600, 604, 605, 606, 0, 0, 0,
	0, 0, 0, 0, 326, 210, 0, 387, 388, 396,
	397, 0, 400, 421, 433, 0, 0, 404, 406, 459,
	408, 0, 0, 410, 0, 412, 0, 414, 0, 416,
	0, 418, 420, 422, 434, 424, 690, 426, 0, 428,
	432, 0, 437, 0, 439, 440, 441, 0, 0, 447,
	0, 0, 394, 395, 116, 788, -2, 0, 659, 709,
	710, 0, 0, 0, 0, 693, 694, 0, 0, 0,
	655, 656, 293, 0, 296, 0, 0, 0, 0, 1097,
	1098, 1099, 1100, 1101, 1102, 1105, 1106, 1103, 1104, 1107,
	1108, 0, 0, 0, 0, 0, 1109, 0, 0, 0,
	0, 0, 0, 0, 0, 1110, 1111, 1112, 0, 0,
	1114, 0, 1116, 0, 0, 0, 0, 0, 0, 1176,
	0, 0, 1113, 899, 900, 901, 933, 934, 0, 997,
	1173, 1166, 999, 0, 1119, -2, 1120, 0, 0, 1002,
	1007, 1008, 1119, 0, 1161, -2, 0, 1213, 0, 891,
	1066, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1142, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 841, 859, 870, 867, 866, 843, 0, 842,
	840, 0, 844, 0, 0, 0, 0, 0, 580, -2,
	582, 0, 594, 0, 683, 0, 0, 732, 735, 1182,
	1186, 1187, 735, 0, 1179, 0, 0, 0, 0, 781,
	781, 781, 779, 755, 0, 761, 0, -2, 785, 773,
	0, -2, 752, 0, 0, 786, 0, 82, 565, 95,
	0, 565, 565, 0, 0, 0, 0, 0, 91, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	775, 1193, 0, 1167, 1168, 146, 0, 0, 1188, 1172,
	467, 0, 0, 531, 0, 687, 0, 0, 0, 0,
	1426, 540, 1226, 615, 0, 794, 0, 629, 0, 0,
	791, 0, 192, 0, 114, 115, 0, 195, 0, 198,
	0, 0, 201, 0, 0, 0, 1120, 690, 0, 0,
	278, 0, 0, 690, 0, 1122, 802, 803, 804, 805,
	806, 891, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 853, 0, 828, 828,
	828, 845, 846, 854, 855, 860, 861, 872, 873, 875,
	877, 871, 871, 871, 868, 869, 775, 133, 0, 0,
	0, 0, -2, 318, 0, 602, 0, 607, 338, 339,
	340, 609, 610, 322, 341, 342, 343, 344, 345, 346,
	0, 526, 0, 528, 1219, 0, 319, 331, 320, 323,
	0, 211, 398, 399, 401, 402, 403, 407, 0, 456,
	409, 411, 413, 415, 417, 425, 429, 690, 435, 438,
	442, 443, 444, 445, 0, 0, 0, 529, 0, 662,
	707, 708, 713, 717, 718, 721, 724, 725, 715, 894,
	676, 677, 678, 701, 702, 552, 0, 0, 295, 895,
	798, 799, 847, 848, 849, 850, 851, 896, 897, 0,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	-2, -2, -2, -2, -2, -2, -2, -2, 920, 921,
	922, 923, 924, 925, 926, 927, -2, -2, -2, 931,
	932, -2, 1115, 1117, 0, 1176, 0, -2, 0, -2,
	-2, -2, -2, 945, 0, 947, 950, 952, 954, 0,
	0, 0, 0, 1175, 964, 1153, 0, 0, 1094, 1095,
	1096, 949, 0, 0, 1174, 1165, 0, 0, 1118, 1004,
	0, 0, 0, 1126, 1160, 1156, 0, 1011, 700, 0,
	0, 0, 0, 1018, 0, 1222, 878, 879, 880, 881,
	882, 883, 892, 1074, 0, 0, 0, 1025, 1026, 1028,
	1029, 1031, 1032, 1035, 1036, 0, 0, 0, 1042, 0,
	1129, -2, -2, -2, -2, -2, -2, -2, 0, 1044,
	0, 1046, 1120, 1139, 0, 0, 967, 0, 0, 0,
	0, 1445, 0, 1049, 1120, 1147, 0, 0, 0, 0,
	0, 1120, 0, 1152, 0, 0, 0, 0, 0, 1060,
	0, 1062, 0, 0, 0, 0, 0, 0, 0, 451,
	0, 593, 685, 0, 0, 794, 0, 0, 0, 1185,
	794, 0, 1181, 0, 0, 0, 0, 0, 776, 780,
	777, 778, 0, 0, 761, 773, 743, 0, 0, 0,
	750, 751, 772, 0, 771, 760, -2, 0, 0, 0,
	0, 0, 564, 97, 1426, 0, 118, 0, 0, 499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 1196, 0, 136, 0, 1203, 0, 0,
	0, 0, 0, 466, 1202, 468, 470, 471, 472, 473,
	1227, 0, 1227, 0, 0, 0, 0, 0, 0, 0,
	617, 623, 0, 712, 0, 641, 631, 0, 0, 0,
	641, 645, 646, 648, 649, 0, 0, 792, 208, 116,
	116, 1191, 116, 116, 205, 261, 0, 215, 253, 0,
	0, 0, 255, 0, 257, 0, 795, 797, 0, 807,
	0, 145, 0, 0, 0, 0, 311, 0, 601, 608,
	0, 335, 0, 337, 527, 1221, 1220, 0, 212, 458,
	286, 427, 430, 453, 454, 455, 789, 0, 719, 0,
	0, 716, 722, 723, 0, 704, 550, 551, 0, 0,
	0, -2, -2, 0, 0, 0, 965, -2, 946, 948,
	951, 953, 955, 0, 0, 0, 0, 0, 0, 0,
	966, 1119, 0, 1163, 1166, -2, 1121, 1124, 1125, 0,
	0, 1157, 0, 0, 0, 0, 699, 700, 700, 700,
	1017, 0, 0, 0, 0, 0, 0, 1019, 0, 0,
	0, 0, 0, 0, 1041, 0, 1043, 1045, 0, 0,
	1047, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 970, 971, 972, 0, 1119, 1048,
	1145, 1146, 0, 0, 0, 0, 0, 0, 1054, 0,
	1151, 0, 0, 0, 1058, 1059, 1061, 0, 826, 0,
	852, 874, 876, 864, 0, 452, 690, 1204, 727, 1183,
	775, 734, 736, 1184, 727, 1180, 763, 0, 765, 0,
	0, 0, 767, 0, 756, 0, 758, 773, 748, 0,
	0, 741, 0, 740, 761, 769, 0, 0, 787, 96,
	554, 0, 0, 0, 99, 1426, 107, 0, 481, 0,
	0, 0, 0, 0, 567, 108, 1426, 116, 1426, 116,
	109, 83, 565, 84, 0, 0, 560, 0, 0, 553,
	85, 0, 562, 0, 0, 145, 0, 0, 147, 0,
	1189, 475, 508, 0, 0, 1227, 0, 464, 509, 534,
	-2, 536, 0, 0, 619, 623, 0, 622, 688, 641,
	711, 793, 624, 641, 0, 0, 0, 633, 630, 627,
	794, 0, 0, 0, 0, 193, 196, 199, 202, 1121,
	268, 0, 0, 1123, 0, 800, 0, 0, 125, 0,
	134, 270, 308, 309, 314, 333, 334, 336, 332, 0,
	0, 0, 703, 552, 0, 898, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 1154, 0, 0, 0, 1165,
	-2, 1127, 1155, 1159, 0, 1012, 0, 0, 0, 0,
	1215, 884, 885, 886, 887, 888, 889, 890, 0, 1072,
	1073, 1077, 0, 0, 1023, 0, 0, 1128, 1138, 1140,
	968, 969, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, -2, -2, -2, 986, 987, 988, -2, -2,
	-2, 0, 0, 0, 1141, 0, 0, 1143, 1144, 1148,
	1149, 0, 1051, 1052, 1053, 1150, 0, 0, 0, 858,
	0, 0, 0, 0, 0, 729, 0, 733, 0, 729,
	764, 0, 783, 766, 746, 757, 0, 754, 744, 0,
	745, 0, 773, 0, 0, 753, 0, 0, 0, 0,
	117, 479, 498, 0, 0, 543, 549, 549, 0, 1021,
	1022, 0, 0, 0, 101, 0, 0, 0, 0, 105,
	0, 111, 0, 0, 0, 90, 0, 0, 0, 0,
	89, 0, 0, 88, 123, 0, 0, 148, 462, 0,
	469, 0, 0, 0, 467, 0, 532, 0, 0, 621,
	623, 0, 614, 615, 173, 625, 639, 640, 638, 0,
	641, 647, 644, 650, 0, 0, 127, 0, 0, 801,
	808, 143, 1318, 141, 138, 140, 287, 714, 720, 705,
	552, 0, 0, -2, 0, 958, -2, -2, 1090, 1121,
	1164, 1158, 1212, 700, 1013, 1015, 1016, 893, 1079, 1076,
	0, 1063, 1039, 1040, 1137, 0, 0, 0, 0, 1121,
	1092, 1050, 0, 1056, 1057, 827, 448, 449, 450, 686,
	1068, 0, 0, 737, 1068, 0, 761, 759, 742, 738,
	0, 749, 0, 770, 556, 558, 98, 0, 480, 0,
	483, 0, 0, 0, 0, 489, 490, 0, 0, 0,
	0, 500, 507, 0, 552, 1207, 0, 552, 0, 0,
	0, 0, 0, 113, 0, 0, 566, 0, 116, 116,
	555, 0, 0, 0, 0, 561, 0, 563, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 611, 623,
	0, 616, 617, 0, 0, 0, 632, 642, 0, 0,
	0, 796, 0, 0, 0, 0, 706, -2, -2, 959,
	1091, 0, 700, 0, 1065, -2, 0, 0, 0, 1093,
	0, 673, 0, 728, 726, 674, 782, 773, 0, 768,
	100, 0, 484, 485, 1227, 0, 488, 491, 0, 493,
	1229, 475, 0, 504, 505, 544, 545, 548, 546, 549,
	700, 502, 0, 102, 103, 112, 120, 104, 110, 0,
	0, 700, 0, 0, 774, 0, 507, 0, 497, 475,
	465, 507, 0, 0, 618, 619, 0, 0, 0, 651,
	652, 0, 0, 0, 142, 0, 137, 139, 1014, 1082,
	0, -2, 0, 994, 1055, 1067, 1069, 0, 747, 739,
	482, 486, 0, 0, 513, 0, 501, 0, 552, 0,
	0, 122, 0, 557, 559, 0, 0, 0, 0, 475,
	507, 463, 475, 0, 620, 621, 0, 635, 794, 637,
	0, 0, 144, 0, 0, 0, 1078, 995, 0, 0,
	0, 492, 518, 0, 0, 0, 547, 1012, 509, 106,
	0, 119, 0, 0, 0, 0, 495, 475, 538, 0,
	612, 0, 636, 145, 145, 1075, 1080, 1083, -2, 1386,
	1265, 0, 1081, 1070, 1071, 0, 494, 514, 515, 0,
	510, 511, 512, 1228, 506, 513, 121, 92, 94, 0,
	496, 507, 794, 128, 129, 0, 1085, 1086, 1087, 1088,
	1089, 487, 516, 0, 517, 0, 0, 0, 518, 478,
	475, 634, 0, 519, 0, 522, 523, 0, 520, 503,
	474, 476, 477, 539, 1084, 521, 524, 525,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 360, 3, 366, 361, 3,
	371, 372, 364, 362, 376, 363, 373, 365, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 380, 375,
	350, 352, 351, 354, 377, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 369, 3, 370, 367, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 378, 359, 379, 357,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 353, 57693, 355, 57694, 356,
	57695, 358, 57696, 368, 57697, 374, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:868
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:874
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:880
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:889
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:891
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:903
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:904
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:905
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:906
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:907
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:908
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:909
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:919
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:920
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:921
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:931
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:932
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return helpWith(sqllex, "ALTER")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:983
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:995
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1018
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1038
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1044
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1050
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1056
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1065
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1074
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1143
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1166
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1176
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1205
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = nil
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = DropCascade
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = DropRestrict
		}
	case 116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = DropDefault
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1238
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1239
		{
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1242
		{
			return unimplemented(sqllex, "alter using")
		}
	case 122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1243
		{
		}
	case 123:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1270
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1296
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.str = "CSV"
		}
	case 128:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1334
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 144:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1403
		{
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1423
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1425
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1436
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1447
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			return helpWith(sqllex, "CREATE")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1465
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1466
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1485
		{
			return helpWith(sqllex, "DELETE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1495
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1496
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1497
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1499
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1505
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1507
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1508
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1509
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1510
		{
			return helpWith(sqllex, "DROP")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1525
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1540
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1563
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1586
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1601
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1652
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1661
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1664
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1666
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1667
		{
			return helpWith(sqllex, "DELETE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1668
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1669
		{
			return helpWith(sqllex, "INSERT")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1670
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1672
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1673
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1678
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1679
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1681
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1682
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1689
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1690
		{ /* SKIP DOC */
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1777
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1797
		{
			return helpWith(sqllex, "GRANT")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1817
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1839
		{
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1895
		{
			return helpWith(sqllex, "RESET")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1896
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1911
		{
			return helpWith(sqllex, "RESET")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1922
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1927
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1930
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1934
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1935
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1936
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1937
		{ /* SKIP DOC */
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1938
		{ /* SKIP DOC */
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1939
		{
			return unimplemented(sqllex, "set local")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1948
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1955
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2005
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2010
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2027
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2030
		{
			return unimplemented(sqllex, "set from current")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2032
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2038
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2042
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = Low
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = Normal
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = High
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2141
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2142
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2143
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2144
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2145
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2146
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2147
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2148
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2149
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2150
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2151
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2152
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2153
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2154
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2156
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2157
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2158
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2160
		{
			return helpWith(sqllex, "SHOW")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2169
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.str = "client_encoding"
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2184
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2195
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2212
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2217
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2228
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2239
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2250
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2261
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2266
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2271
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2282
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2287
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2298
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2317
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2330
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2335
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2353
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2359
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2384
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2388
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2392
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2395
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2406
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2417
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2428
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2432
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2436
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2440
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2444
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2448
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2454
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2458
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2462
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2468
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2496
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2562
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2595
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2599
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.union.val = DropDefault
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2609
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2814
		{
			return unimplemented(sqllex, "match full")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2815
		{
			return unimplemented(sqllex, "match partial")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2816
		{
			return unimplemented(sqllex, "match simple")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2817
		{
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2823
		{
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2824
		{
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2825
		{
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2826
		{
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2827
		{
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2830
		{
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2833
		{
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2836
		{
			return unimplemented(sqllex, "no action")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2839
		{
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2840
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2841
		{
			return unimplemented(sqllex, "action set null")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2842
		{
			return unimplemented(sqllex, "action set default")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2850
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2854
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2867
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2882
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = nil
		}
	case 536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2907
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2947
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2951
		{
			sqlVAL.union.val = true
		}
	case 542:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = false
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2961
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2977
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2978
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2981
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 549:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2982
		{
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = Ascending
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = Descending
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 553:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3022
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3024
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = true
		}
	case 565:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.union.val = false
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3057
		{
		}
	case 567:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3058
		{
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3066
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3069
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3080
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3091
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3095
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3096
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3097
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3115
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3120
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3133
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3138
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3146
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3153
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3156
		{
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3157
		{
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.str = ""
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.str = ""
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3203
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3216
		{
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3218
		{
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = ReadOnly
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = ReadWrite
		}
	case 611:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3282
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.str = ""
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.str = ""
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.str = ""
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.str = ""
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3325
		{
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3326
		{
		}
	case 624:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3350
		{
			return helpWith(sqllex, "INSERT")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3367
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3409
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3413
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3415
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3421
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 642:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3444
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3448
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3449
		{
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3578
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3613
		{
			return helpWith(sqllex, "SELECT")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3614
		{
			return helpWith(sqllex, "VALUES")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3615
		{
			return helpWith(sqllex, "TABLE")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3661
		{
			return helpWith(sqllex, "SELECT")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3705
		{
			return helpWith(sqllex, "TABLE")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3716
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3717
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3718
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3721
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3722
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 686:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3725
		{
			return unimplemented(sqllex, "cte")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3728
		{
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3729
		{
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3732
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3733
		{
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3736
		{
		}
	case 692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3737
		{
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = true
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = false
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = false
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = true
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3760
		{
		}
	case 698:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3761
		{
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3769
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3808
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3832
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3884
		{
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3885
		{
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3888
		{
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3889
		{
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3947
		{
			return helpWith(sqllex, "VALUES")
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3949
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3964
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &From{}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3986
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4004
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4031
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4068
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4093
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = nil
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4134
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4140
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = true
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = false
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.str = astFullJoin
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.str = astLeftJoin
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.str = astRightJoin
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.str = astInnerJoin
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4251
		{
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4252
		{
		}
	case 782:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4338
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4352
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4360
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4384
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 808:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4395
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4445
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4476
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4485
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = nil
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4550
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4560
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4573
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4582
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4602
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4606
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4610
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4614
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4618
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4646
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 864:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4678
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4717
		{
		}
	case 871:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4718
		{
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 874:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 876:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.union.val = year
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = month
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4758
		{
			sqlVAL.union.val = day
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = hour
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = minute
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = month
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4780
		{
			sqlVAL.union.val = hour
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4784
		{
			sqlVAL.union.val = minute
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4788
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4792
		{
			sqlVAL.union.val = minute
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4796
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4800
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 891:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = nil
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = second
		}
	case 893:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4813
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4848
		{
			return unimplemented(sqllex, "at tz")
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4861
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4865
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4925
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5005
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5009
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5013
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5017
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5021
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5029
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5053
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5056
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5058
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5078
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5082
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5122
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5154
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5158
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5162
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5166
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5170
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5182
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5206
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5210
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5214
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5218
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5222
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5226
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5230
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5234
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5238
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5242
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5246
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5290
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5295
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5308
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5312
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5317
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5321
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5348
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5349
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5359
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5362
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5373
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5380
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5389
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5390
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5394
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5403
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5405
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5412
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5414
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5421
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5422
		{
			return unimplemented(sqllex, "current role")
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5431
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5433
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5437
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5441
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5445
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5449
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5452
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5457
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5459
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5462
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5471
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5472
		{
			return unimplemented(sqllex, "treat")
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5474
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5482
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5486
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5490
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5494
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5498
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5502
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5506
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5509
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5511
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5514
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5518
		{
			return unimplemented(sqllex, "within group")
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5519
		{
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5523
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5527
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5544
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5548
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5554
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5562
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5566
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5570
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5577
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5596
		{
			sqlVAL.str = ""
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5602
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5606
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5616
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5617
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5618
		{
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5621
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5622
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5628
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5629
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5630
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5631
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5632
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5643
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5647
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5653
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5659
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5665
		{
			sqlVAL.union.val = Any
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5669
		{
			sqlVAL.union.val = Some
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5673
		{
			sqlVAL.union.val = All
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = Plus
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5679
		{
			sqlVAL.union.val = Minus
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5680
		{
			sqlVAL.union.val = Mult
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5681
		{
			sqlVAL.union.val = Div
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = Mod
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5684
		{
			sqlVAL.union.val = Bitand
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5685
		{
			sqlVAL.union.val = Bitor
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5686
		{
			sqlVAL.union.val = Pow
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5687
		{
			sqlVAL.union.val = Bitxor
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5688
		{
			sqlVAL.union.val = LT
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5689
		{
			sqlVAL.union.val = GT
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = EQ
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5691
		{
			sqlVAL.union.val = LE
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5692
		{
			sqlVAL.union.val = GE
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5693
		{
			sqlVAL.union.val = NE
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5697
		{
			sqlVAL.union.val = Like
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5698
		{
			sqlVAL.union.val = NotLike
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5699
		{
			sqlVAL.union.val = ILike
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5700
		{
			sqlVAL.union.val = NotILike
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5712
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5718
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5722
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5728
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5732
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5738
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5742
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5748
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5752
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5758
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5762
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5792
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5798
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5805
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5809
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5826
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5830
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5834
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5838
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5842
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5848
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5854
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5860
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5864
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5868
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5874
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5878
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5889
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5896
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5900
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5906
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5923
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5929
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5933
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5940
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5958
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5968
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5972
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5978
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5987
		{
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5988
		{
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6003
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6007
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6016
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6032
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6041
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6045
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6049
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6057
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6061
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6067
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6071
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6077
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6081
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6092
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6096
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6102
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6106
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6119
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6123
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6127
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6131
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6137
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6141
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6147
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6150
		{
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6160
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6164
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6171
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6175
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6179
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6183
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6186
		{
			return unimplemented(sqllex, "func const")
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6188
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6192
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6195
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6197
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6201
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6205
		{
			sqlVAL.union.val = DNull
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6212
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6216
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6222
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6257
		{
			sqlVAL.str = ""
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6263
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6267
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
