// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:490
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFIGURATION = 57406
const CONFIGURATIONS = 57407
const CONFIGURE = 57408
const CONFLICT = 57409
const CONSTRAINT = 57410
const CONSTRAINTS = 57411
const CONTAINS = 57412
const COPY = 57413
const COVERING = 57414
const CREATE = 57415
const CROSS = 57416
const CSV = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPERIMENTAL = 57453
const EXPLAIN = 57454
const EXTRACT = 57455
const EXTRACT_DURATION = 57456
const FALSE = 57457
const FAMILY = 57458
const FETCH = 57459
const FETCHVAL = 57460
const FETCHTEXT = 57461
const FETCHVAL_PATH = 57462
const FETCHTEXT_PATH = 57463
const FILTER = 57464
const FIRST = 57465
const FLOAT = 57466
const FLOAT4 = 57467
const FLOAT8 = 57468
const FLOORDIV = 57469
const FOLLOWING = 57470
const FOR = 57471
const FORCE_INDEX = 57472
const FOREIGN = 57473
const FROM = 57474
const FULL = 57475
const GRANT = 57476
const GRANTS = 57477
const GREATEST = 57478
const GROUP = 57479
const GROUPING = 57480
const HAVING = 57481
const HELP = 57482
const HIGH = 57483
const HOUR = 57484
const HAS_SOME = 57485
const HAS_ALL = 57486
const IMPORT = 57487
const INCREMENTAL = 57488
const IF = 57489
const IFNULL = 57490
const ILIKE = 57491
const IN = 57492
const INET = 57493
const INTERLEAVE = 57494
const INDEX = 57495
const INDEXES = 57496
const INITIALLY = 57497
const INNER = 57498
const INSERT = 57499
const INT = 57500
const INT2VECTOR = 57501
const INT2 = 57502
const INT4 = 57503
const INT8 = 57504
const INT64 = 57505
const INTEGER = 57506
const INTERSECT = 57507
const INTERVAL = 57508
const INTO = 57509
const IS = 57510
const ISOLATION = 57511
const JOB = 57512
const JOBS = 57513
const JOIN = 57514
const JSON = 57515
const JSONB = 57516
const KEY = 57517
const KEYS = 57518
const KV = 57519
const LATERAL = 57520
const LC_CTYPE = 57521
const LC_COLLATE = 57522
const LEADING = 57523
const LEAST = 57524
const LEFT = 57525
const LESS = 57526
const LEVEL = 57527
const LIKE = 57528
const LIMIT = 57529
const LIST = 57530
const LOCAL = 57531
const LOCALTIME = 57532
const LOCALTIMESTAMP = 57533
const LOW = 57534
const LSHIFT = 57535
const MATCH = 57536
const MAXVALUE = 57537
const MINUTE = 57538
const MONTH = 57539
const NAN = 57540
const NAME = 57541
const NAMES = 57542
const NATURAL = 57543
const NEXT = 57544
const NO = 57545
const NO_INDEX_JOIN = 57546
const NORMAL = 57547
const NOT = 57548
const NOTHING = 57549
const NULL = 57550
const NULLIF = 57551
const NULLS = 57552
const NUMERIC = 57553
const OF = 57554
const OFF = 57555
const OFFSET = 57556
const OID = 57557
const ON = 57558
const ONLY = 57559
const OPTIONS = 57560
const OR = 57561
const ORDER = 57562
const ORDINALITY = 57563
const OUT = 57564
const OUTER = 57565
const OVER = 57566
const OVERLAPS = 57567
const OVERLAY = 57568
const PARENT = 57569
const PARTIAL = 57570
const PARTITION = 57571
const PASSWORD = 57572
const PAUSE = 57573
const PLACING = 57574
const PLANS = 57575
const POSITION = 57576
const PRECEDING = 57577
const PRECISION = 57578
const PREPARE = 57579
const PRIMARY = 57580
const PRIORITY = 57581
const QUERIES = 57582
const QUERY = 57583
const RANGE = 57584
const READ = 57585
const REAL = 57586
const RECURSIVE = 57587
const REF = 57588
const REFERENCES = 57589
const REGCLASS = 57590
const REGPROC = 57591
const REGPROCEDURE = 57592
const REGNAMESPACE = 57593
const REGTYPE = 57594
const REMOVE_PATH = 57595
const RENAME = 57596
const REPEATABLE = 57597
const RELEASE = 57598
const RESET = 57599
const RESTORE = 57600
const RESTRICT = 57601
const RESUME = 57602
const RETURNING = 57603
const REVOKE = 57604
const RIGHT = 57605
const ROLLBACK = 57606
const ROLLUP = 57607
const ROW = 57608
const ROWS = 57609
const RSHIFT = 57610
const SAVEPOINT = 57611
const SCATTER = 57612
const SCRUB = 57613
const SEARCH = 57614
const SECOND = 57615
const SELECT = 57616
const SEQUENCES = 57617
const SERIAL = 57618
const SERIALIZABLE = 57619
const SESSION = 57620
const SESSIONS = 57621
const SESSION_USER = 57622
const SET = 57623
const SETTING = 57624
const SETTINGS = 57625
const SHOW = 57626
const SIMILAR = 57627
const SIMPLE = 57628
const SMALLINT = 57629
const SMALLSERIAL = 57630
const SNAPSHOT = 57631
const SOME = 57632
const SPLIT = 57633
const SQL = 57634
const START = 57635
const STATUS = 57636
const STDIN = 57637
const STRICT = 57638
const STRING = 57639
const STORE = 57640
const STORING = 57641
const SUBSTRING = 57642
const SYMMETRIC = 57643
const SYSTEM = 57644
const TABLE = 57645
const TABLES = 57646
const TEMP = 57647
const TEMPLATE = 57648
const TEMPORARY = 57649
const TESTING_RANGES = 57650
const TESTING_RELOCATE = 57651
const TEXT = 57652
const THAN = 57653
const THEN = 57654
const TIME = 57655
const TIMESTAMP = 57656
const TIMESTAMPTZ = 57657
const TO = 57658
const TRAILING = 57659
const TRACE = 57660
const TRANSACTION = 57661
const TREAT = 57662
const TRIM = 57663
const TRUE = 57664
const TRUNCATE = 57665
const TYPE = 57666
const UNBOUNDED = 57667
const UNCOMMITTED = 57668
const UNION = 57669
const UNIQUE = 57670
const UNKNOWN = 57671
const UPDATE = 57672
const UPSERT = 57673
const USE = 57674
const USER = 57675
const USERS = 57676
const USING = 57677
const UUID = 57678
const VALID = 57679
const VALIDATE = 57680
const VALUE = 57681
const VALUES = 57682
const VARCHAR = 57683
const VARIADIC = 57684
const VIEW = 57685
const VARYING = 57686
const WHEN = 57687
const WHERE = 57688
const WINDOW = 57689
const WITH = 57690
const WITHIN = 57691
const WITHOUT = 57692
const WRITE = 57693
const YEAR = 57694
const ZONE = 57695
const NOT_LA = 57696
const WITH_LA = 57697
const AS_LA = 57698
const CONTAINED_BY = 57699
const HAS_SOME_KEY = 57700
const HAS_ALL_KEYS = 57701
const POSTFIXOP = 57702
const UMINUS = 57703
const HELPTOKEN = 57704

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6873

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	382, 54,
	-2, 711,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	153, 562,
	-2, 0,
	-1, 64,
	96, 711,
	157, 711,
	330, 711,
	331, 711,
	-2, 0,
	-1, 74,
	1, 673,
	216, 673,
	261, 673,
	377, 673,
	379, 673,
	381, 673,
	382, 673,
	-2, 686,
	-1, 107,
	4, 713,
	20, 713,
	21, 713,
	23, 713,
	28, 713,
	33, 713,
	34, 713,
	35, 713,
	36, 713,
	37, 713,
	38, 713,
	39, 713,
	40, 713,
	41, 713,
	42, 713,
	44, 713,
	45, 713,
	46, 713,
	47, 713,
	48, 713,
	51, 713,
	52, 713,
	53, 713,
	55, 713,
	56, 713,
	60, 713,
	61, 713,
	62, 713,
	64, 713,
	65, 713,
	66, 713,
	67, 713,
	69, 713,
	71, 713,
	72, 713,
	75, 713,
	76, 713,
	77, 713,
	85, 713,
	86, 713,
	87, 713,
	88, 713,
	89, 713,
	90, 713,
	91, 713,
	92, 713,
	94, 713,
	96, 713,
	98, 713,
	101, 713,
	102, 713,
	104, 713,
	108, 713,
	109, 713,
	110, 713,
	111, 713,
	112, 713,
	113, 713,
	114, 713,
	122, 713,
	123, 713,
	124, 713,
	125, 713,
	126, 713,
	128, 713,
	130, 713,
	135, 713,
	136, 713,
	138, 713,
	141, 713,
	142, 713,
	145, 713,
	146, 713,
	147, 713,
	148, 713,
	151, 713,
	152, 713,
	154, 713,
	157, 713,
	158, 713,
	159, 713,
	160, 713,
	161, 713,
	162, 713,
	163, 713,
	164, 713,
	166, 713,
	169, 713,
	170, 713,
	171, 713,
	173, 713,
	174, 713,
	175, 713,
	176, 713,
	177, 713,
	179, 713,
	180, 713,
	182, 713,
	184, 713,
	185, 713,
	188, 713,
	189, 713,
	192, 713,
	194, 713,
	196, 713,
	197, 713,
	198, 713,
	199, 713,
	200, 713,
	202, 713,
	203, 713,
	204, 713,
	205, 713,
	209, 713,
	210, 713,
	211, 713,
	212, 713,
	213, 713,
	215, 713,
	217, 713,
	218, 713,
	221, 713,
	222, 713,
	224, 713,
	226, 713,
	227, 713,
	228, 713,
	229, 713,
	230, 713,
	231, 713,
	233, 713,
	234, 713,
	235, 713,
	236, 713,
	237, 713,
	239, 713,
	240, 713,
	241, 713,
	242, 713,
	243, 713,
	244, 713,
	245, 713,
	246, 713,
	248, 713,
	249, 713,
	250, 713,
	251, 713,
	252, 713,
	254, 713,
	255, 713,
	256, 713,
	257, 713,
	258, 713,
	259, 713,
	260, 713,
	262, 713,
	264, 713,
	265, 713,
	266, 713,
	267, 713,
	269, 713,
	270, 713,
	271, 713,
	272, 713,
	273, 713,
	275, 713,
	276, 713,
	277, 713,
	278, 713,
	279, 713,
	281, 713,
	282, 713,
	283, 713,
	284, 713,
	286, 713,
	287, 713,
	288, 713,
	289, 713,
	291, 713,
	292, 713,
	293, 713,
	294, 713,
	295, 713,
	296, 713,
	297, 713,
	298, 713,
	299, 713,
	300, 713,
	302, 713,
	304, 713,
	305, 713,
	306, 713,
	307, 713,
	308, 713,
	309, 713,
	310, 713,
	311, 713,
	313, 713,
	314, 713,
	315, 713,
	318, 713,
	319, 713,
	320, 713,
	321, 713,
	323, 713,
	324, 713,
	325, 713,
	326, 713,
	329, 713,
	330, 713,
	331, 713,
	332, 713,
	334, 713,
	336, 713,
	337, 713,
	338, 713,
	339, 713,
	340, 713,
	341, 713,
	344, 713,
	349, 713,
	350, 713,
	351, 713,
	352, 713,
	353, 713,
	-2, 0,
	-1, 124,
	1, 676,
	216, 676,
	261, 676,
	377, 676,
	379, 676,
	381, 676,
	382, 676,
	-2, 685,
	-1, 129,
	1, 611,
	169, 611,
	239, 611,
	243, 611,
	381, 611,
	382, 611,
	-2, 0,
	-1, 131,
	1, 611,
	381, 611,
	382, 611,
	-2, 0,
	-1, 132,
	1, 611,
	381, 611,
	382, 611,
	-2, 0,
	-1, 133,
	1, 615,
	381, 615,
	382, 615,
	-2, 0,
	-1, 140,
	4, 719,
	5, 719,
	6, 719,
	7, 719,
	8, 719,
	9, 719,
	20, 719,
	21, 719,
	23, 719,
	28, 719,
	29, 719,
	33, 719,
	34, 719,
	35, 719,
	36, 719,
	37, 719,
	38, 719,
	39, 719,
	40, 719,
	41, 719,
	42, 719,
	44, 719,
	45, 719,
	46, 719,
	47, 719,
	48, 719,
	49, 719,
	50, 719,
	51, 719,
	52, 719,
	53, 719,
	55, 719,
	56, 719,
	58, 719,
	60, 719,
	61, 719,
	62, 719,
	64, 719,
	65, 719,
	66, 719,
	67, 719,
	69, 719,
	71, 719,
	72, 719,
	74, 719,
	75, 719,
	76, 719,
	77, 719,
	79, 719,
	80, 719,
	81, 719,
	83, 719,
	84, 719,
	85, 719,
	86, 719,
	87, 719,
	88, 719,
	89, 719,
	90, 719,
	91, 719,
	92, 719,
	93, 719,
	94, 719,
	96, 719,
	98, 719,
	101, 719,
	102, 719,
	104, 719,
	108, 719,
	109, 719,
	110, 719,
	111, 719,
	112, 719,
	113, 719,
	114, 719,
	115, 719,
	116, 719,
	122, 719,
	123, 719,
	124, 719,
	125, 719,
	126, 719,
	128, 719,
	130, 719,
	133, 719,
	135, 719,
	136, 719,
	138, 719,
	141, 719,
	142, 719,
	145, 719,
	146, 719,
	147, 719,
	148, 719,
	149, 719,
	151, 719,
	152, 719,
	154, 719,
	156, 719,
	157, 719,
	158, 719,
	159, 719,
	160, 719,
	161, 719,
	162, 719,
	163, 719,
	164, 719,
	166, 719,
	168, 719,
	169, 719,
	170, 719,
	171, 719,
	172, 719,
	173, 719,
	174, 719,
	175, 719,
	176, 719,
	177, 719,
	179, 719,
	180, 719,
	182, 719,
	183, 719,
	184, 719,
	185, 719,
	186, 719,
	188, 719,
	189, 719,
	192, 719,
	194, 719,
	195, 719,
	196, 719,
	197, 719,
	198, 719,
	199, 719,
	200, 719,
	201, 719,
	202, 719,
	203, 719,
	204, 719,
	205, 719,
	206, 719,
	208, 719,
	209, 719,
	210, 719,
	211, 719,
	212, 719,
	213, 719,
	215, 719,
	218, 719,
	221, 719,
	222, 719,
	223, 719,
	224, 719,
	225, 719,
	226, 719,
	227, 719,
	228, 719,
	229, 719,
	230, 719,
	231, 719,
	233, 719,
	234, 719,
	235, 719,
	236, 719,
	237, 719,
	239, 719,
	240, 719,
	241, 719,
	242, 719,
	243, 719,
	244, 719,
	245, 719,
	246, 719,
	248, 719,
	249, 719,
	250, 719,
	251, 719,
	252, 719,
	254, 719,
	255, 719,
	256, 719,
	257, 719,
	258, 719,
	259, 719,
	260, 719,
	262, 719,
	263, 719,
	264, 719,
	265, 719,
	266, 719,
	267, 719,
	269, 719,
	270, 719,
	271, 719,
	272, 719,
	273, 719,
	275, 719,
	276, 719,
	277, 719,
	278, 719,
	279, 719,
	280, 719,
	281, 719,
	282, 719,
	283, 719,
	284, 719,
	285, 719,
	286, 719,
	287, 719,
	288, 719,
	289, 719,
	291, 719,
	292, 719,
	293, 719,
	294, 719,
	295, 719,
	296, 719,
	297, 719,
	298, 719,
	299, 719,
	300, 719,
	302, 719,
	304, 719,
	305, 719,
	306, 719,
	307, 719,
	308, 719,
	309, 719,
	310, 719,
	311, 719,
	313, 719,
	314, 719,
	315, 719,
	318, 719,
	319, 719,
	320, 719,
	321, 719,
	322, 719,
	323, 719,
	324, 719,
	325, 719,
	326, 719,
	329, 719,
	330, 719,
	331, 719,
	332, 719,
	333, 719,
	334, 719,
	336, 719,
	337, 719,
	338, 719,
	339, 719,
	340, 719,
	341, 719,
	344, 719,
	349, 719,
	350, 719,
	351, 719,
	352, 719,
	353, 719,
	354, 719,
	364, 719,
	369, 719,
	370, 719,
	371, 719,
	378, 719,
	384, 719,
	-2, 0,
	-1, 143,
	1, 54,
	382, 54,
	-2, 711,
	-1, 515,
	132, 1329,
	316, 1329,
	359, 1329,
	380, 1329,
	-2, 0,
	-1, 516,
	132, 1276,
	316, 1276,
	359, 1276,
	380, 1276,
	-2, 0,
	-1, 518,
	132, 1388,
	316, 1388,
	359, 1388,
	380, 1388,
	-2, 0,
	-1, 520,
	132, 1411,
	316, 1411,
	359, 1411,
	380, 1411,
	-2, 0,
	-1, 527,
	132, 1334,
	316, 1334,
	359, 1334,
	380, 1334,
	-2, 332,
	-1, 553,
	1, 410,
	377, 410,
	379, 410,
	381, 410,
	382, 410,
	-2, 0,
	-1, 554,
	1, 462,
	129, 462,
	377, 462,
	379, 462,
	381, 462,
	382, 462,
	-2, 0,
	-1, 560,
	1, 424,
	377, 424,
	379, 424,
	381, 424,
	382, 424,
	-2, 0,
	-1, 562,
	1, 428,
	377, 428,
	379, 428,
	381, 428,
	382, 428,
	-2, 0,
	-1, 565,
	1, 436,
	377, 436,
	379, 436,
	381, 436,
	382, 436,
	-2, 0,
	-1, 566,
	1, 441,
	377, 441,
	379, 441,
	381, 441,
	382, 441,
	-2, 0,
	-1, 569,
	1, 451,
	377, 451,
	379, 451,
	381, 451,
	382, 451,
	-2, 0,
	-1, 585,
	117, 721,
	129, 721,
	187, 721,
	214, 721,
	-2, 680,
	-1, 588,
	117, 720,
	129, 720,
	187, 720,
	214, 720,
	-2, 677,
	-1, 644,
	378, 1254,
	-2, 1247,
	-1, 645,
	378, 1255,
	-2, 1248,
	-1, 651,
	5, 905,
	378, 905,
	-2, 1463,
	-1, 676,
	5, 864,
	-2, 1432,
	-1, 677,
	5, 899,
	378, 899,
	-2, 1434,
	-1, 678,
	5, 874,
	-2, 1435,
	-1, 679,
	5, 873,
	-2, 1436,
	-1, 680,
	5, 899,
	378, 899,
	-2, 1439,
	-1, 681,
	5, 899,
	378, 899,
	-2, 1440,
	-1, 682,
	5, 900,
	-2, 1443,
	-1, 683,
	5, 856,
	-2, 1444,
	-1, 684,
	5, 856,
	-2, 1445,
	-1, 685,
	5, 881,
	-2, 1449,
	-1, 686,
	5, 866,
	-2, 1450,
	-1, 687,
	5, 867,
	-2, 1451,
	-1, 688,
	5, 857,
	-2, 1457,
	-1, 689,
	5, 858,
	-2, 1458,
	-1, 690,
	5, 859,
	-2, 1459,
	-1, 691,
	5, 860,
	-2, 1460,
	-1, 692,
	5, 861,
	-2, 1461,
	-1, 693,
	5, 862,
	-2, 1462,
	-1, 694,
	5, 856,
	-2, 1469,
	-1, 695,
	5, 865,
	-2, 1474,
	-1, 696,
	5, 863,
	-2, 1477,
	-1, 697,
	5, 897,
	378, 897,
	-2, 1479,
	-1, 698,
	5, 901,
	-2, 1482,
	-1, 699,
	5, 903,
	-2, 1483,
	-1, 700,
	5, 896,
	378, 896,
	-2, 1488,
	-1, 884,
	230, 709,
	-2, 555,
	-1, 888,
	216, 1251,
	-2, 0,
	-1, 923,
	1, 216,
	377, 216,
	379, 216,
	381, 216,
	382, 216,
	-2, 684,
	-1, 930,
	4, 1487,
	10, 1487,
	11, 1487,
	13, 1487,
	14, 1487,
	15, 1487,
	16, 1487,
	17, 1487,
	18, 1487,
	20, 1487,
	21, 1487,
	23, 1487,
	26, 1487,
	28, 1487,
	30, 1487,
	33, 1487,
	34, 1487,
	35, 1487,
	36, 1487,
	37, 1487,
	38, 1487,
	39, 1487,
	40, 1487,
	41, 1487,
	42, 1487,
	44, 1487,
	45, 1487,
	46, 1487,
	47, 1487,
	48, 1487,
	51, 1487,
	52, 1487,
	53, 1487,
	55, 1487,
	56, 1487,
	57, 1487,
	60, 1487,
	61, 1487,
	62, 1487,
	63, 1487,
	64, 1487,
	65, 1487,
	66, 1487,
	67, 1487,
	69, 1487,
	70, 1487,
	71, 1487,
	72, 1487,
	74, 1487,
	75, 1487,
	76, 1487,
	77, 1487,
	85, 1487,
	86, 1487,
	87, 1487,
	88, 1487,
	89, 1487,
	90, 1487,
	91, 1487,
	92, 1487,
	94, 1487,
	96, 1487,
	98, 1487,
	101, 1487,
	102, 1487,
	104, 1487,
	108, 1487,
	109, 1487,
	110, 1487,
	111, 1487,
	112, 1487,
	113, 1487,
	114, 1487,
	118, 1487,
	119, 1487,
	120, 1487,
	121, 1487,
	122, 1487,
	123, 1487,
	124, 1487,
	125, 1487,
	126, 1487,
	127, 1487,
	128, 1487,
	130, 1487,
	133, 1487,
	135, 1487,
	136, 1487,
	138, 1487,
	141, 1487,
	142, 1487,
	145, 1487,
	146, 1487,
	147, 1487,
	148, 1487,
	149, 1487,
	150, 1487,
	151, 1487,
	152, 1487,
	154, 1487,
	156, 1487,
	157, 1487,
	158, 1487,
	159, 1487,
	160, 1487,
	161, 1487,
	162, 1487,
	163, 1487,
	164, 1487,
	166, 1487,
	168, 1487,
	169, 1487,
	170, 1487,
	171, 1487,
	172, 1487,
	173, 1487,
	174, 1487,
	175, 1487,
	176, 1487,
	177, 1487,
	179, 1487,
	180, 1487,
	182, 1487,
	183, 1487,
	184, 1487,
	185, 1487,
	186, 1487,
	188, 1487,
	189, 1487,
	192, 1487,
	193, 1487,
	194, 1487,
	196, 1487,
	197, 1487,
	198, 1487,
	199, 1487,
	200, 1487,
	201, 1487,
	202, 1487,
	203, 1487,
	204, 1487,
	205, 1487,
	209, 1487,
	210, 1487,
	211, 1487,
	212, 1487,
	213, 1487,
	215, 1487,
	218, 1487,
	219, 1487,
	221, 1487,
	222, 1487,
	224, 1487,
	226, 1487,
	227, 1487,
	228, 1487,
	229, 1487,
	230, 1487,
	231, 1487,
	233, 1487,
	234, 1487,
	235, 1487,
	236, 1487,
	237, 1487,
	239, 1487,
	240, 1487,
	241, 1487,
	242, 1487,
	243, 1487,
	244, 1487,
	245, 1487,
	246, 1487,
	248, 1487,
	249, 1487,
	250, 1487,
	251, 1487,
	252, 1487,
	253, 1487,
	254, 1487,
	255, 1487,
	256, 1487,
	257, 1487,
	258, 1487,
	259, 1487,
	260, 1487,
	262, 1487,
	263, 1487,
	264, 1487,
	265, 1487,
	266, 1487,
	267, 1487,
	268, 1487,
	269, 1487,
	270, 1487,
	271, 1487,
	272, 1487,
	273, 1487,
	275, 1487,
	276, 1487,
	277, 1487,
	278, 1487,
	279, 1487,
	281, 1487,
	282, 1487,
	283, 1487,
	284, 1487,
	285, 1487,
	286, 1487,
	287, 1487,
	288, 1487,
	289, 1487,
	291, 1487,
	292, 1487,
	293, 1487,
	294, 1487,
	295, 1487,
	296, 1487,
	297, 1487,
	298, 1487,
	299, 1487,
	300, 1487,
	302, 1487,
	304, 1487,
	305, 1487,
	306, 1487,
	307, 1487,
	308, 1487,
	309, 1487,
	310, 1487,
	311, 1487,
	313, 1487,
	314, 1487,
	315, 1487,
	318, 1487,
	319, 1487,
	320, 1487,
	321, 1487,
	323, 1487,
	324, 1487,
	325, 1487,
	326, 1487,
	329, 1487,
	330, 1487,
	331, 1487,
	332, 1487,
	334, 1487,
	336, 1487,
	337, 1487,
	338, 1487,
	339, 1487,
	340, 1487,
	341, 1487,
	344, 1487,
	349, 1487,
	350, 1487,
	351, 1487,
	352, 1487,
	353, 1487,
	354, 1487,
	355, 1487,
	357, 1487,
	358, 1487,
	359, 1487,
	360, 1487,
	361, 1487,
	362, 1487,
	363, 1487,
	364, 1487,
	366, 1487,
	367, 1487,
	368, 1487,
	369, 1487,
	370, 1487,
	371, 1487,
	372, 1487,
	373, 1487,
	374, 1487,
	376, 1487,
	379, 1487,
	380, 1487,
	383, 1487,
	384, 1487,
	-2, 0,
	-1, 943,
	132, 1388,
	316, 1388,
	359, 1388,
	380, 1388,
	-2, 0,
	-1, 960,
	132, 1411,
	316, 1411,
	359, 1411,
	380, 1411,
	-2, 0,
	-1, 961,
	169, 623,
	239, 623,
	243, 623,
	-2, 320,
	-1, 1033,
	117, 720,
	129, 720,
	187, 720,
	214, 720,
	-2, 681,
	-1, 1114,
	107, 686,
	117, 686,
	129, 686,
	165, 686,
	187, 686,
	214, 686,
	220, 686,
	327, 686,
	-2, 1035,
	-1, 1124,
	378, 1231,
	-2, 1219,
	-1, 1142,
	379, 1148,
	-2, 0,
	-1, 1166,
	169, 623,
	239, 623,
	243, 623,
	-2, 618,
	-1, 1194,
	379, 1148,
	-2, 0,
	-1, 1198,
	107, 686,
	117, 686,
	129, 686,
	165, 686,
	187, 686,
	214, 686,
	220, 686,
	327, 686,
	-2, 787,
	-1, 1339,
	169, 623,
	239, 623,
	243, 623,
	-2, 322,
	-1, 1447,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 940,
	-1, 1448,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 941,
	-1, 1449,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 942,
	-1, 1450,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 943,
	-1, 1451,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 944,
	-1, 1452,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 945,
	-1, 1453,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 946,
	-1, 1454,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 947,
	-1, 1463,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 956,
	-1, 1464,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 957,
	-1, 1465,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 958,
	-1, 1468,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 963,
	-1, 1474,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 965,
	-1, 1476,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 969,
	-1, 1477,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 970,
	-1, 1478,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 971,
	-1, 1479,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 972,
	-1, 1548,
	132, 1159,
	378, 1254,
	-2, 1247,
	-1, 1549,
	132, 1160,
	-2, 1428,
	-1, 1550,
	132, 1161,
	-2, 1333,
	-1, 1551,
	132, 1162,
	-2, 1294,
	-1, 1552,
	132, 1163,
	-2, 1311,
	-1, 1553,
	132, 1164,
	-2, 1332,
	-1, 1554,
	132, 1165,
	-2, 1385,
	-1, 1631,
	1, 788,
	74, 788,
	107, 788,
	117, 788,
	129, 788,
	133, 788,
	137, 788,
	139, 788,
	156, 788,
	165, 788,
	172, 788,
	183, 788,
	187, 788,
	201, 788,
	214, 788,
	216, 788,
	220, 788,
	261, 788,
	263, 788,
	327, 788,
	335, 788,
	346, 788,
	347, 788,
	356, 788,
	377, 788,
	379, 788,
	381, 788,
	382, 788,
	383, 788,
	-2, 787,
	-1, 1778,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 964,
	-1, 1779,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 966,
	-1, 1784,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 967,
	-1, 1802,
	225, 1119,
	-2, 1121,
	-1, 2034,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 968,
	-1, 2039,
	168, 0,
	-2, 984,
	-1, 2048,
	225, 1120,
	-2, 1122,
	-1, 2090,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1011,
	-1, 2091,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1012,
	-1, 2092,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1013,
	-1, 2096,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1017,
	-1, 2097,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1018,
	-1, 2098,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1019,
	-1, 2233,
	168, 0,
	-2, 985,
	-1, 2236,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 988,
	-1, 2237,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 990,
	-1, 2360,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 989,
	-1, 2361,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 991,
	-1, 2368,
	168, 0,
	-2, 1020,
	-1, 2445,
	168, 0,
	-2, 1021,
	-1, 2527,
	36, 0,
	149, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 1431,
	-1, 2612,
	378, 1499,
	-2, 496,
}

const sqlPrivate = 57344

const sqlLast = 43012

var sqlAct = [...]int{

	645, 2595, 2593, 2328, 2327, 2610, 2183, 2609, 2526, 2535,
	1697, 2536, 2576, 2499, 2450, 2537, 2394, 2338, 1238, 1705,
	2067, 1333, 2012, 775, 2193, 635, 2301, 1245, 1491, 1279,
	981, 2287, 2222, 2217, 1694, 2525, 643, 1979, 2215, 878,
	1334, 1772, 182, 2150, 2374, 1676, 1196, 182, 1868, 642,
	1626, 1681, 2149, 1981, 1192, 182, 1917, 2267, 472, 26,
	1677, 1987, 2209, 1896, 182, 1706, 1680, 1175, 1241, 182,
	182, 1644, 1635, 182, 1904, 1867, 182, 589, 1627, 1426,
	620, 1504, 1813, 183, 182, 597, 123, 2120, 1670, 1120,
	1364, 964, 1038, 1503, 1204, 1234, 73, 1751, 457, 1528,
	1206, 1176, 1512, 614, 1577, 1488, 526, 1360, 1404, 754,
	1421, 1402, 454, 913, 963, 1152, 1156, 1678, 1522, 910,
	1699, 903, 1768, 983, 1684, 757, 1183, 1600, 737, 924,
	1201, 1613, 1109, 506, 613, 182, 182, 1039, 1405, 1544,
	1403, 1363, 124, 182, 125, 523, 637, 484, 1166, 1252,
	123, 519, 900, 178, 735, 173, 1165, 1043, 547, 2302,
	1801, 2134, 2329, 41, 2135, 2329, 1698, 1260, 1260, 182,
	182, 182, 182, 777, 593, 593, 44, 182, 182, 1260,
	2625, 2624, 2617, 2572, 2618, 2618, 2618, 1229, 2571, 2570,
	2552, 2547, 1229, 1229, 2300, 1607, 2546, 2543, 1838, 1839,
	1607, 1229, 26, 1996, 1997, 2523, 2522, 2494, 588, 1734,
	1734, 1727, 2489, 2488, 2484, 1193, 1229, 2352, 1229, 603,
	2476, 2032, 2447, 594, 2300, 498, 1727, 2425, 2422, 123,
	2420, 2300, 1229, 2405, 2300, 2404, 1225, 1229, 866, 2300,
	479, 1602, 2382, 2379, 2630, 1280, 1229, 1229, 1838, 1839,
	2362, 1856, 1857, 1858, 1727, 2323, 778, 2616, 2321, 1607,
	1054, 1055, 1607, 2299, 2232, 2280, 586, 2300, 585, 1229,
	1671, 2235, 2208, 751, 66, 1727, 1675, 2203, 762, 766,
	2130, 1675, 1607, 1057, 2131, 772, 598, 2495, 1054, 1055,
	739, 1084, 1085, 1086, 1094, 1095, 1096, 2123, 2043, 2006,
	1734, 1853, 1607, 1969, 1087, 1968, 1893, 1056, 1892, 1229,
	1607, 1057, 1229, 1885, 1098, 1844, 2626, 1886, 1883, 2606,
	1882, 2356, 1607, 1881, 1607, 1258, 1805, 1607, 1671, 1738,
	1726, 2352, 1806, 1607, 1727, 1056, 1719, 1607, 1812, 1674,
	1607, 1076, 1606, 1675, 2123, 1272, 1607, 1601, 1073, 1273,
	741, 2023, 742, 1633, 2103, 1734, 2045, 701, 1229, 1969,
	67, 1771, 1749, 1342, 1170, 1844, 1507, 864, 945, 143,
	2303, 942, 140, 941, 940, 939, 938, 1062, 1261, 1261,
	937, 1854, 936, 935, 934, 933, 127, 69, 932, 70,
	1261, 931, 743, 1361, 740, 579, 1079, 1080, 1081, 1082,
	578, 142, 577, 140, 140, 1062, 1859, 1054, 1055, 545,
	478, 544, 543, 103, 542, 541, 540, 539, 538, 182,
	537, 182, 182, 536, 182, 535, 534, 1091, 1099, 182,
	1057, 1854, 142, 142, 533, 182, 532, 531, 141, 530,
	529, 514, 513, 1077, 512, 511, 1097, 510, 182, 182,
	182, 182, 182, 870, 1056, 1996, 1855, 927, 445, 444,
	443, 442, 441, 40, 1089, 426, 425, 417, 416, 141,
	141, 1077, 415, 414, 41, 129, 126, 134, 134, 182,
	407, 406, 166, 165, 135, 135, 164, 44, 163, 162,
	1541, 1702, 1601, 182, 161, 160, 159, 1088, 158, 1838,
	1839, 131, 1266, 1259, 157, 156, 1855, 126, 126, 182,
	1539, 46, 917, 51, 1395, 155, 154, 153, 1078, 182,
	152, 151, 150, 149, 1062, 882, 148, 147, 886, 146,
	779, 1083, 145, 144, 54, 1367, 976, 1912, 56, 1537,
	928, 2599, 62, 2594, 902, 132, 1078, 1197, 2597, 63,
	927, 122, 64, 594, 906, 906, 1848, 1840, 1841, 1842,
	1843, 1845, 1846, 1092, 1838, 1839, 1535, 1856, 1857, 1858,
	907, 1050, 877, 2542, 65, 2524, 2509, 2504, 1054, 1055,
	925, 182, 1525, 2442, 2423, 66, 2345, 2266, 2265, 2261,
	979, 2260, 2357, 2253, 2252, 1850, 1851, 1852, 2251, 946,
	2247, 1057, 1838, 1839, 1849, 1847, 1848, 1840, 1841, 1842,
	1843, 1845, 1846, 2246, 2245, 2244, 1844, 1853, 974, 1058,
	1059, 1060, 1061, 1063, 1064, 1056, 2238, 2214, 2117, 1971,
	2112, 2111, 1090, 928, 1526, 1068, 1069, 1075, 1074, 1070,
	1071, 1072, 1093, 2110, 1067, 1065, 1066, 1058, 1059, 1060,
	1061, 1063, 1064, 2053, 1505, 1967, 1924, 1128, 1920, 1890,
	1887, 2262, 1875, 1034, 1866, 1838, 1839, 1837, 1033, 961,
	958, 67, 140, 1834, 1833, 1831, 1818, 68, 1817, 1802,
	1631, 1844, 1854, 1050, 1049, 750, 1499, 596, 1527, 1524,
	1029, 1729, 2615, 870, 2619, 1062, 75, 127, 69, 1195,
	70, 142, 71, 875, 133, 1276, 1194, 977, 2604, 72,
	1838, 1839, 2584, 2583, 140, 594, 1121, 1244, 1112, 1844,
	2069, 83, 1859, 2514, 103, 1838, 1839, 2513, 1035, 2512,
	1036, 2479, 2471, 130, 2470, 182, 2461, 182, 141, 2459,
	586, 2435, 585, 142, 2434, 1493, 134, 1854, 2344, 1046,
	1047, 2391, 2370, 135, 2353, 1362, 1767, 1855, 1051, 182,
	182, 1077, 2332, 107, 1766, 1529, 1058, 1059, 1060, 1061,
	1063, 1064, 128, 2320, 2306, 2010, 1701, 2258, 1853, 2191,
	141, 2189, 1844, 2188, 2186, 2158, 2157, 2138, 134, 1181,
	1124, 2126, 2038, 1838, 1839, 135, 1154, 1155, 1500, 1957,
	1951, 1158, 1937, 1936, 1922, 1891, 1865, 1827, 1826, 1823,
	1798, 1161, 1793, 1179, 929, 1157, 1160, 1618, 126, 1589,
	1533, 4, 1855, 1237, 1174, 1173, 1164, 1844, 1150, 1054,
	1055, 1149, 1148, 1147, 1146, 1145, 1078, 1144, 1143, 123,
	1142, 1141, 1844, 1140, 1523, 1139, 1138, 1137, 1136, 1135,
	1134, 1133, 1057, 1132, 1937, 594, 1847, 1848, 1840, 1841,
	1842, 1843, 1845, 1846, 927, 182, 1191, 1540, 1169, 1125,
	1732, 777, 1113, 1112, 957, 949, 1056, 182, 921, 2453,
	2351, 2240, 1167, 2213, 1199, 1195, 2133, 1538, 2129, 182,
	1804, 1171, 1619, 1854, 1230, 182, 1121, 182, 2008, 182,
	1838, 1839, 1110, 182, 1227, 1243, 973, 929, 1854, 1910,
	1844, 1850, 1851, 1852, 1737, 1982, 1536, 1236, 605, 2355,
	1849, 1847, 1848, 1840, 1841, 1842, 1843, 1845, 1846, 1671,
	1197, 2354, 1054, 1055, 1067, 1065, 1066, 1058, 1059, 1060,
	1061, 1063, 1064, 1534, 182, 182, 2348, 928, 2358, 876,
	2136, 927, 1998, 182, 778, 1057, 182, 1736, 1249, 140,
	1032, 1840, 1841, 1842, 1843, 1845, 1846, 1214, 1855, 1162,
	1960, 1027, 1130, 1954, 1163, 1950, 1854, 777, 1889, 1056,
	1888, 1777, 1399, 1855, 970, 2013, 182, 1348, 142, 1054,
	1055, 182, 1242, 1759, 2375, 1698, 182, 182, 1513, 182,
	1368, 182, 2070, 182, 902, 182, 1809, 1153, 703, 2602,
	1277, 2601, 1057, 1525, 1021, 1992, 182, 2145, 1228, 2507,
	2568, 1723, 182, 182, 2567, 141, 1842, 1843, 1845, 1846,
	1127, 182, 1406, 134, 928, 1739, 1056, 2483, 1730, 638,
	135, 2314, 702, 1013, 730, 2416, 2020, 1251, 1254, 1062,
	1207, 1855, 1208, 182, 1022, 2415, 2413, 777, 2412, 2177,
	778, 749, 728, 126, 732, 1526, 1849, 1847, 1848, 1840,
	1841, 1842, 1843, 1845, 1846, 2174, 2142, 2141, 1822, 1821,
	1435, 1849, 1847, 1848, 1840, 1841, 1842, 1843, 1845, 1846,
	971, 1820, 1369, 1275, 1819, 958, 123, 1780, 726, 723,
	1274, 1336, 1054, 1055, 1722, 1666, 1062, 1662, 1335, 1339,
	1659, 1475, 1168, 1637, 1365, 863, 2326, 1353, 1593, 1527,
	1524, 1349, 2169, 1383, 1592, 1057, 1215, 1436, 2613, 1695,
	1393, 1209, 1408, 972, 1030, 2181, 1373, 650, 446, 1645,
	778, 1207, 1377, 1208, 1378, 2009, 1379, 1212, 1380, 1056,
	1381, 1376, 1840, 1841, 1842, 1843, 1845, 1846, 419, 2182,
	2482, 1490, 2396, 1964, 1236, 1213, 581, 1387, 1389, 182,
	1232, 182, 1077, 1400, 182, 1401, 1407, 1352, 1351, 493,
	1361, 1358, 583, 431, 584, 182, 586, 1562, 1417, 586,
	586, 1418, 1419, 1064, 777, 584, 1529, 182, 1425, 871,
	873, 182, 2520, 1508, 182, 1207, 1490, 1208, 182, 594,
	2026, 1510, 182, 1372, 594, 1255, 1648, 1621, 182, 1062,
	1637, 929, 1209, 450, 1572, 182, 777, 1195, 779, 1636,
	182, 167, 1529, 1263, 1598, 572, 1265, 2559, 182, 1620,
	1268, 1501, 1498, 423, 432, 182, 1182, 1078, 1513, 1668,
	1053, 1989, 2060, 602, 2567, 705, 182, 1959, 182, 1638,
	182, 956, 1392, 182, 1846, 182, 1355, 182, 182, 2160,
	182, 182, 1656, 1116, 927, 1523, 1624, 778, 182, 1555,
	1664, 1649, 1651, 1948, 947, 1077, 1209, 1223, 1020, 449,
	951, 1031, 607, 1060, 1061, 1063, 1064, 594, 592, 1596,
	1427, 1434, 1595, 1222, 1007, 1186, 2061, 1605, 929, 778,
	2019, 1700, 1611, 1700, 2464, 1610, 170, 605, 573, 1615,
	1616, 1654, 1026, 1647, 1220, 1953, 1199, 1660, 1189, 1790,
	1216, 1718, 1641, 2295, 779, 2579, 1769, 1770, 1667, 1327,
	1151, 2021, 1221, 1008, 1184, 1788, 1065, 1066, 1058, 1059,
	1060, 1061, 1063, 1064, 1394, 1187, 591, 928, 123, 1012,
	1078, 724, 1356, 2586, 123, 2025, 1712, 1210, 777, 906,
	2167, 906, 2296, 1185, 1205, 1704, 182, 1725, 734, 724,
	1715, 733, 171, 1529, 1713, 1720, 1714, 1716, 1906, 2397,
	2472, 1750, 182, 182, 182, 1724, 182, 925, 1102, 1103,
	1104, 1105, 1106, 1721, 1180, 1731, 1218, 978, 1115, 572,
	1690, 593, 1391, 1646, 779, 725, 724, 434, 433, 1123,
	408, 1260, 1733, 2596, 704, 182, 2027, 602, 1785, 503,
	1782, 574, 1158, 2295, 1161, 1188, 2288, 481, 1786, 448,
	2558, 2539, 1791, 2594, 2473, 1155, 1154, 2286, 2161, 482,
	2366, 778, 2290, 440, 967, 1017, 1740, 482, 1210, 418,
	1066, 1058, 1059, 1060, 1061, 1063, 1064, 582, 986, 451,
	123, 172, 2296, 435, 1990, 1489, 2063, 1634, 1497, 447,
	492, 1742, 1486, 1495, 424, 2291, 2329, 2292, 1472, 420,
	2577, 2419, 573, 1744, 1371, 2289, 1825, 1754, 1484, 421,
	485, 600, 1783, 572, 1614, 1758, 1756, 1905, 485, 1107,
	1763, 575, 1762, 2491, 1630, 1745, 485, 2294, 590, 1989,
	1765, 602, 1210, 490, 968, 1018, 2297, 1743, 969, 486,
	1052, 490, 168, 1340, 1177, 1177, 2540, 486, 2492, 490,
	593, 955, 1362, 1359, 576, 486, 2578, 2557, 2024, 1219,
	2227, 779, 1787, 1529, 601, 994, 2538, 2566, 1041, 1789,
	2564, 487, 2337, 1692, 1182, 952, 944, 1042, 2580, 487,
	1037, 1963, 169, 2407, 2587, 2406, 1271, 487, 1781, 2592,
	1019, 1480, 2256, 779, 489, 2291, 573, 2292, 409, 1481,
	594, 1482, 489, 1811, 2541, 1487, 2389, 2310, 1797, 2313,
	489, 1470, 1473, 182, 777, 574, 2312, 2293, 2456, 182,
	182, 1894, 1337, 182, 1808, 2144, 1900, 2294, 182, 1041,
	1933, 182, 1186, 1186, 1918, 2099, 2297, 1899, 1040, 182,
	1929, 929, 1261, 2059, 1693, 182, 182, 182, 1469, 1250,
	1239, 182, 2500, 1386, 182, 1189, 1189, 1343, 1413, 2605,
	182, 182, 182, 182, 182, 1042, 2194, 1347, 1041, 410,
	182, 1612, 1184, 182, 594, 647, 1913, 182, 175, 1907,
	2339, 1914, 1187, 1187, 501, 2390, 182, 1609, 1923, 1872,
	1873, 1874, 1939, 1938, 436, 575, 182, 778, 182, 1040,
	182, 1185, 1930, 182, 2591, 2257, 1909, 182, 1919, 574,
	967, 488, 182, 1895, 182, 1483, 987, 2293, 1345, 488,
	2309, 182, 1485, 1970, 1949, 1972, 1042, 488, 576, 2311,
	1775, 1346, 1956, 182, 927, 779, 437, 1414, 1040, 1608,
	495, 967, 2100, 1898, 1925, 927, 182, 1471, 2101, 1902,
	1903, 899, 591, 1908, 2223, 988, 1496, 1973, 985, 1947,
	1976, 880, 1188, 1188, 897, 888, 438, 491, 439, 879,
	2184, 605, 605, 2330, 2005, 491, 1994, 1962, 3, 995,
	968, 2387, 1116, 491, 969, 2014, 182, 599, 962, 575,
	1515, 2268, 2121, 1532, 477, 34, 2369, 1016, 2255, 2180,
	1985, 1869, 2037, 1547, 1547, 1560, 1974, 1991, 594, 1580,
	1965, 1832, 2388, 1584, 1585, 1587, 1999, 928, 476, 33,
	475, 30, 576, 474, 79, 473, 78, 1792, 928, 1735,
	2004, 470, 22, 2040, 471, 23, 182, 2016, 2017, 1599,
	1410, 2018, 1415, 2015, 1673, 1665, 1005, 1658, 1422, 1003,
	2022, 1001, 500, 1025, 1024, 865, 950, 1870, 1437, 1438,
	1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448,
	1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458,
	1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468,
	2044, 1474, 2030, 1476, 1477, 1478, 1479, 2028, 1934, 1011,
	722, 1037, 2055, 2056, 2057, 2046, 2049, 1760, 494, 999,
	1502, 469, 28, 468, 20, 1531, 898, 1115, 182, 2073,
	2071, 2076, 760, 1384, 182, 1375, 2105, 1015, 2078, 896,
	2062, 2064, 2065, 182, 182, 1934, 1542, 1543, 34, 1131,
	1559, 868, 1571, 1573, 1578, 1581, 1582, 1583, 2534, 869,
	1226, 2497, 466, 19, 2106, 967, 2284, 2104, 2165, 467,
	18, 2163, 33, 997, 30, 461, 15, 79, 1321, 78,
	991, 779, 2143, 2156, 2132, 22, 1004, 2137, 23, 1002,
	182, 1000, 182, 2007, 2155, 895, 2171, 123, 2125, 182,
	2171, 1978, 927, 2139, 2179, 2122, 2171, 2154, 2124, 1286,
	2119, 1696, 1320, 2190, 1689, 2050, 1270, 182, 182, 2187,
	1269, 1267, 2140, 462, 16, 1980, 2204, 2147, 460, 14,
	1357, 1264, 2196, 1262, 182, 968, 1010, 465, 12, 969,
	1224, 2168, 727, 729, 182, 1217, 777, 182, 182, 998,
	1211, 2170, 2430, 777, 2195, 2175, 2185, 1044, 2128, 2000,
	2001, 2178, 2002, 2003, 1773, 28, 2198, 20, 2568, 2224,
	2199, 2350, 2197, 459, 10, 2349, 2230, 2200, 1366, 464,
	7, 2206, 2205, 1321, 1321, 928, 2210, 2432, 2234, 2211,
	182, 463, 6, 2229, 480, 1427, 2074, 458, 5, 1637,
	746, 929, 1637, 996, 1427, 2079, 19, 1285, 1652, 1653,
	990, 1650, 929, 18, 1286, 1286, 2202, 1320, 1320, 15,
	747, 1669, 1661, 1657, 1761, 894, 1397, 1398, 2466, 778,
	1774, 1054, 1055, 2303, 1045, 989, 778, 2109, 1054, 1055,
	2444, 2418, 1663, 2269, 182, 2254, 1048, 182, 1898, 1655,
	2496, 2381, 2335, 1703, 1057, 1691, 1688, 777, 182, 182,
	1597, 1338, 182, 182, 182, 1278, 502, 16, 1796, 2575,
	2590, 2274, 14, 1838, 1839, 1799, 1054, 1055, 1056, 182,
	2276, 12, 1747, 1746, 182, 1056, 182, 2212, 182, 182,
	182, 2118, 1815, 1816, 2066, 182, 1747, 748, 182, 2304,
	2011, 927, 2271, 2156, 2273, 1915, 1884, 2272, 2278, 182,
	182, 2275, 1285, 1285, 2155, 2283, 927, 10, 1748, 2279,
	1594, 1591, 2325, 7, 1590, 1323, 1521, 2154, 1118, 2242,
	2307, 2058, 2156, 1975, 1128, 6, 1126, 2156, 1023, 2308,
	778, 5, 1864, 2155, 1014, 1009, 2341, 1006, 2155, 1580,
	1580, 1580, 2342, 992, 1877, 2334, 2154, 954, 1341, 2331,
	580, 2154, 2395, 483, 2336, 1374, 993, 1911, 2340, 2333,
	1617, 2490, 2248, 1824, 2270, 2449, 2365, 1530, 1129, 1778,
	1779, 55, 2346, 2152, 928, 1784, 2347, 624, 2285, 2164,
	2146, 2166, 2359, 1683, 1682, 780, 1350, 646, 1546, 928,
	1428, 721, 648, 1283, 649, 182, 1284, 182, 2371, 777,
	182, 1159, 636, 1281, 922, 1707, 1354, 1803, 182, 1494,
	1511, 1807, 1122, 1810, 777, 615, 1814, 628, 627, 1509,
	1323, 1323, 2385, 948, 1916, 1988, 2378, 2343, 1412, 1764,
	2380, 2364, 1409, 1828, 1984, 2162, 2156, 2400, 619, 422,
	1835, 920, 1569, 1561, 1557, 1416, 2383, 2155, 182, 929,
	1028, 927, 1236, 2399, 2398, 182, 2401, 1108, 1708, 975,
	2154, 1995, 2171, 182, 182, 927, 927, 1115, 2156, 182,
	1728, 1172, 1420, 745, 1578, 1578, 1578, 744, 2603, 2155,
	1344, 2428, 778, 1741, 1322, 411, 182, 2433, 1101, 1100,
	2429, 182, 2154, 779, 731, 2421, 2436, 778, 182, 2440,
	779, 1177, 2437, 2427, 2424, 2438, 2439, 1901, 2458, 966,
	2446, 2460, 965, 1240, 1932, 2431, 2585, 2417, 2465, 2159,
	2506, 139, 136, 182, 182, 2455, 2454, 138, 137, 2441,
	182, 1961, 82, 32, 928, 31, 102, 101, 927, 2462,
	2477, 2452, 100, 182, 1563, 927, 927, 2475, 928, 928,
	99, 98, 2478, 2443, 97, 96, 95, 94, 1838, 1839,
	93, 1856, 1857, 1858, 2481, 92, 2486, 2487, 2480, 91,
	182, 90, 182, 89, 88, 182, 87, 777, 86, 85,
	84, 755, 524, 521, 81, 80, 29, 25, 630, 1322,
	1322, 2463, 2515, 106, 24, 2517, 77, 76, 1986, 27,
	2508, 17, 2469, 2516, 779, 2521, 182, 764, 768, 2519,
	774, 1853, 11, 21, 2503, 2156, 60, 61, 59, 58,
	2532, 928, 57, 182, 182, 182, 2155, 2533, 928, 928,
	179, 182, 2502, 2551, 2544, 412, 605, 605, 2531, 2154,
	13, 2113, 2518, 427, 53, 182, 2556, 52, 929, 605,
	2553, 50, 452, 49, 48, 2554, 2555, 496, 179, 2565,
	778, 504, 2563, 929, 509, 47, 2029, 9, 2569, 105,
	2409, 1422, 528, 2221, 2574, 1844, 45, 2033, 8, 2573,
	2034, 43, 42, 2548, 2549, 2550, 104, 118, 115, 2582,
	2588, 2581, 2039, 117, 2589, 114, 116, 120, 119, 112,
	110, 2047, 111, 113, 109, 777, 108, 777, 121, 2051,
	39, 38, 1901, 37, 36, 35, 2173, 2607, 2608, 2614,
	2, 1, 2176, 738, 738, 1282, 0, 0, 2598, 2621,
	2600, 412, 2075, 2620, 2622, 0, 2077, 2623, 2629, 2627,
	2628, 1854, 2631, 0, 0, 0, 0, 0, 0, 0,
	0, 2410, 2411, 0, 0, 0, 779, 412, 412, 770,
	412, 1321, 0, 0, 0, 179, 867, 0, 0, 2107,
	2108, 779, 0, 0, 0, 0, 0, 0, 2114, 2115,
	2116, 0, 0, 0, 0, 0, 1794, 1795, 778, 0,
	778, 0, 1286, 0, 0, 1320, 0, 0, 1321, 0,
	0, 0, 0, 0, 0, 0, 2127, 0, 929, 0,
	0, 0, 0, 0, 0, 0, 1855, 0, 0, 0,
	0, 0, 929, 929, 0, 0, 0, 0, 0, 1286,
	1282, 1282, 1320, 0, 0, 0, 2148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1321, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1861, 1862, 1863, 0, 0, 0, 0, 0,
	0, 0, 0, 768, 0, 0, 0, 1286, 0, 0,
	1320, 0, 0, 0, 0, 0, 0, 0, 774, 1177,
	1285, 1563, 1563, 0, 0, 929, 0, 0, 2207, 0,
	0, 0, 929, 929, 0, 1850, 1851, 1852, 0, 0,
	0, 0, 1321, 0, 1849, 1847, 1848, 1840, 1841, 1842,
	1843, 1845, 1846, 0, 0, 0, 0, 1285, 0, 0,
	0, 625, 74, 0, 779, 0, 0, 2233, 0, 0,
	0, 2236, 2237, 1286, 0, 2239, 1320, 0, 1321, 1321,
	0, 0, 2241, 0, 2243, 0, 0, 1321, 1321, 0,
	0, 0, 0, 0, 0, 0, 0, 1563, 1563, 1563,
	2250, 0, 0, 0, 0, 1285, 0, 0, 0, 1286,
	1286, 0, 1320, 1320, 0, 0, 0, 0, 1286, 1286,
	1321, 1320, 1320, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 2259, 0, 0, 0, 528, 1323, 884,
	528, 0, 889, 0, 0, 0, 0, 892, 0, 768,
	0, 1286, 0, 412, 1320, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2377, 0, 528, 528, 412, 914,
	867, 1285, 0, 0, 0, 1323, 0, 0, 0, 0,
	0, 0, 0, 2305, 0, 587, 0, 0, 595, 0,
	0, 0, 779, 0, 779, 0, 0, 528, 0, 0,
	0, 2403, 0, 0, 756, 74, 0, 1285, 1285, 2035,
	2036, 528, 0, 0, 0, 2414, 1285, 1285, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 953, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 528, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2360, 2361, 0, 0, 0, 0, 0, 2080, 2081,
	2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091,
	2092, 2093, 2094, 2095, 2096, 2097, 2098, 1321, 2102, 1323,
	0, 0, 2373, 0, 0, 0, 0, 0, 2376, 412,
	0, 0, 0, 0, 0, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 1563, 1563, 0, 0, 1286, 0,
	0, 1320, 0, 0, 0, 1323, 1323, 755, 1202, 0,
	0, 0, 0, 0, 1323, 1323, 0, 0, 0, 2493,
	0, 0, 2408, 0, 1322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2510, 2511, 1323, 0, 0,
	0, 0, 0, 1563, 1563, 1563, 1563, 1563, 1563, 1563,
	1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563,
	1563, 1563, 1322, 1563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1285, 0, 0, 0,
	0, 2457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1235, 0, 0, 0, 0,
	0, 0, 0, 509, 0, 738, 0, 0, 1322, 0,
	0, 0, 0, 768, 0, 1253, 0, 1253, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 412, 412, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1322, 1322, 0, 0, 0, 0,
	0, 0, 0, 1322, 1322, 0, 0, 1321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 0,
	0, 2530, 2530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1323, 0, 1322, 2545, 1286, 0,
	0, 1320, 0, 0, 0, 0, 0, 0, 1282, 0,
	0, 0, 0, 0, 0, 0, 0, 2530, 0, 0,
	0, 0, 0, 1321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 40,
	0, 0, 0, 179, 0, 1282, 0, 0, 0, 0,
	41, 0, 0, 0, 1286, 412, 0, 1320, 0, 1396,
	0, 0, 0, 44, 0, 2530, 0, 1248, 0, 0,
	0, 0, 0, 412, 0, 412, 0, 412, 0, 1321,
	0, 1256, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 0, 1282, 2611, 0, 1285, 0, 0, 0,
	0, 0, 0, 0, 0, 2611, 0, 0, 2611, 2611,
	1286, 0, 0, 1320, 0, 0, 0, 0, 62, 587,
	0, 0, 528, 179, 0, 63, 0, 479, 64, 0,
	0, 179, 0, 0, 528, 0, 0, 0, 1111, 0,
	1114, 0, 0, 2368, 0, 0, 0, 0, 1119, 0,
	0, 0, 1285, 0, 0, 0, 0, 0, 0, 1282,
	0, 66, 0, 1322, 528, 0, 0, 0, 0, 528,
	0, 0, 0, 0, 179, 528, 0, 528, 0, 528,
	0, 528, 0, 528, 2392, 0, 1838, 1839, 0, 1856,
	1857, 1858, 0, 0, 1385, 1282, 1282, 0, 0, 0,
	528, 528, 2231, 0, 1282, 1282, 0, 0, 1285, 412,
	0, 0, 0, 755, 1323, 0, 0, 0, 0, 1054,
	1055, 0, 0, 0, 0, 1094, 1095, 1096, 0, 755,
	0, 528, 1632, 0, 0, 0, 0, 1282, 0, 1853,
	768, 0, 1057, 0, 0, 1098, 768, 67, 1563, 0,
	0, 0, 0, 774, 0, 0, 0, 2445, 0, 0,
	0, 0, 0, 0, 0, 0, 1056, 0, 0, 0,
	1323, 0, 1076, 127, 69, 74, 70, 0, 0, 0,
	1198, 0, 0, 0, 1709, 0, 0, 0, 0, 1563,
	140, 0, 0, 0, 1753, 774, 774, 478, 0, 0,
	103, 0, 0, 1844, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	0, 0, 0, 0, 0, 0, 1323, 1079, 1080, 1081,
	1082, 0, 0, 0, 0, 0, 1062, 0, 0, 0,
	0, 0, 0, 0, 1859, 0, 0, 509, 0, 738,
	0, 0, 867, 0, 0, 0, 141, 0, 1091, 1099,
	0, 0, 1563, 412, 134, 0, 0, 0, 0, 1854,
	0, 135, 0, 0, 0, 1629, 0, 0, 0, 412,
	0, 0, 412, 1322, 0, 0, 1642, 0, 0, 0,
	412, 0, 0, 0, 126, 1089, 412, 0, 0, 0,
	0, 0, 1077, 412, 1282, 0, 0, 0, 1672, 0,
	0, 0, 0, 0, 0, 0, 1679, 0, 0, 0,
	1755, 774, 1757, 867, 768, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 412, 0, 1711, 0, 528, 1322,
	0, 528, 0, 528, 1855, 412, 412, 0, 1717, 867,
	0, 0, 0, 1776, 0, 0, 1642, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1078, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1092, 1322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 1850, 1851, 1852, 0, 0, 0, 0,
	0, 0, 1849, 1847, 1848, 1840, 1841, 1842, 1843, 1845,
	1846, 0, 0, 0, 1752, 0, 0, 0, 0, 0,
	0, 0, 0, 1090, 0, 587, 0, 0, 587, 587,
	412, 412, 412, 1093, 412, 1067, 1065, 1066, 1058, 1059,
	1060, 1061, 1063, 1064, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 412, 0, 0, 0, 0, 0, 1054,
	1055, 0, 1084, 1085, 1086, 1094, 1095, 1096, 0, 0,
	0, 1492, 0, 0, 1282, 1087, 0, 0, 0, 0,
	0, 755, 1057, 0, 595, 1098, 0, 755, 755, 1114,
	0, 755, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1056, 0, 0, 0,
	0, 0, 1076, 1926, 0, 0, 0, 0, 0, 1073,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1282, 0, 0, 0, 40, 0, 0, 0, 1952, 0,
	0, 0, 0, 0, 0, 41, 0, 0, 0, 0,
	0, 0, 0, 0, 1966, 0, 756, 0, 44, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 1080, 1081,
	1082, 1977, 1198, 0, 0, 0, 1062, 0, 0, 0,
	1235, 0, 0, 0, 51, 74, 1282, 0, 0, 1235,
	0, 0, 0, 74, 0, 0, 0, 0, 1091, 1099,
	0, 0, 0, 0, 0, 1190, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 0, 1097, 0, 0,
	63, 40, 479, 64, 74, 0, 74, 0, 0, 0,
	0, 412, 41, 0, 0, 1089, 0, 412, 412, 0,
	0, 412, 1077, 0, 74, 44, 1629, 0, 0, 1629,
	74, 0, 0, 0, 2031, 0, 66, 1921, 0, 0,
	0, 0, 0, 412, 1927, 1928, 0, 0, 1088, 1642,
	0, 51, 1935, 0, 0, 0, 0, 0, 1940, 1941,
	1943, 1945, 1946, 0, 0, 0, 0, 0, 412, 0,
	0, 1955, 0, 0, 0, 1958, 0, 0, 0, 0,
	62, 0, 1083, 0, 412, 0, 0, 63, 0, 479,
	64, 0, 0, 0, 1248, 0, 1248, 1078, 528, 0,
	0, 412, 0, 0, 0, 1983, 0, 0, 0, 0,
	412, 0, 1993, 0, 1092, 0, 0, 0, 0, 412,
	0, 0, 67, 66, 0, 0, 0, 0, 0, 0,
	0, 1752, 1054, 1055, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 1752, 0, 0, 0, 127, 69,
	0, 70, 0, 0, 0, 1057, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 755, 0, 0, 1382,
	0, 0, 478, 0, 0, 103, 0, 0, 0, 1056,
	0, 0, 0, 1090, 412, 1076, 1068, 1069, 1075, 1074,
	1070, 1071, 1072, 1093, 142, 1067, 1065, 1066, 1058, 1059,
	1060, 1061, 1063, 1064, 0, 0, 0, 0, 0, 67,
	0, 0, 1880, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 141, 0, 0, 2068, 127, 69, 0, 70, 134,
	1079, 1080, 1081, 1082, 0, 1114, 135, 0, 0, 1062,
	0, 0, 140, 0, 0, 1709, 755, 0, 0, 478,
	0, 0, 103, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 0, 2226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1077, 412, 0, 141, 1114,
	0, 0, 1629, 0, 0, 0, 134, 0, 0, 0,
	0, 867, 1629, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2151, 0, 0, 0,
	0, 0, 0, 0, 756, 0, 126, 0, 0, 2172,
	756, 756, 0, 2172, 756, 0, 0, 0, 0, 2172,
	0, 0, 0, 0, 0, 1083, 0, 0, 1642, 0,
	1248, 0, 755, 0, 0, 0, 0, 2192, 0, 0,
	1078, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 455, 0, 0, 412, 412, 74, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 2218, 40, 0, 0, 2317, 0, 0, 0,
	0, 0, 2220, 2322, 41, 2225, 412, 0, 0, 0,
	74, 0, 0, 74, 0, 0, 0, 44, 0, 0,
	0, 0, 0, 595, 1054, 1055, 0, 1084, 1085, 1086,
	1094, 1095, 1096, 0, 0, 0, 0, 0, 0, 0,
	1087, 0, 0, 51, 0, 0, 0, 1057, 2249, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 1067, 1065,
	1066, 1058, 1059, 1060, 1061, 1063, 1064, 0, 0, 0,
	0, 1056, 62, 0, 0, 0, 0, 1076, 0, 63,
	0, 479, 64, 0, 1073, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 40,
	0, 0, 412, 0, 0, 867, 0, 0, 0, 0,
	41, 0, 0, 0, 0, 66, 1629, 867, 0, 0,
	2281, 2282, 1642, 44, 0, 0, 2393, 0, 0, 0,
	0, 0, 1079, 1080, 1081, 1082, 2151, 867, 0, 0,
	0, 1062, 2315, 0, 2316, 0, 412, 2318, 2319, 51,
	0, 0, 0, 412, 0, 0, 2324, 0, 0, 0,
	0, 0, 0, 1091, 1099, 2151, 2426, 867, 1679, 0,
	2151, 0, 0, 0, 0, 0, 0, 0, 62, 0,
	0, 0, 1097, 0, 0, 63, 0, 479, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1089, 67, 0, 0, 0, 0, 0, 1077, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 66, 0, 0, 0, 0, 0, 127, 69, 756,
	70, 0, 0, 1088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 0, 0, 0, 2474, 0,
	0, 478, 0, 0, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 1642, 0, 2384, 0, 1083, 2386, 0,
	0, 0, 0, 142, 0, 0, 412, 0, 0, 2151,
	0, 0, 1078, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2505, 0, 0, 0, 0, 0, 1092,
	0, 0, 0, 0, 0, 2172, 0, 67, 0, 0,
	141, 2151, 0, 0, 0, 0, 412, 0, 134, 756,
	0, 0, 0, 867, 0, 135, 0, 0, 0, 0,
	0, 2218, 2218, 127, 69, 0, 70, 867, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 456, 1709,
	140, 0, 0, 0, 2451, 0, 0, 478, 0, 1629,
	103, 0, 0, 0, 0, 0, 1248, 0, 1090, 0,
	0, 1068, 1069, 1075, 1074, 1070, 1071, 1072, 1093, 142,
	1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064, 0,
	0, 2467, 2468, 0, 0, 0, 0, 1879, 412, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2485, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 0, 0, 0, 0,
	0, 135, 0, 0, 0, 0, 0, 0, 2501, 0,
	867, 0, 0, 412, 0, 756, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 0, 0, 2151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 867, 867, 867, 0, 0, 0, 0, 0, 412,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2562, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 776, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 782, 186, 783, 784, 785, 786, 347, 787,
	788, 789, 790, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 791, 191, 354, 355, 192, 193, 792,
	793, 356, 357, 358, 794, 194, 359, 795, 781, 796,
	195, 196, 197, 0, 199, 200, 201, 198, 797, 202,
	0, 203, 204, 798, 706, 205, 206, 207, 799, 800,
	802, 801, 803, 804, 805, 208, 209, 413, 210, 360,
	211, 361, 362, 806, 212, 807, 213, 808, 214, 809,
	810, 215, 216, 811, 217, 812, 0, 813, 363, 218,
	220, 219, 221, 364, 365, 814, 707, 815, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 74, 224, 816,
	225, 817, 818, 708, 819, 226, 369, 820, 370, 821,
	1492, 227, 228, 0, 0, 229, 230, 371, 372, 710,
	822, 373, 234, 823, 231, 824, 709, 232, 374, 233,
	375, 376, 377, 378, 379, 825, 380, 826, 711, 235,
	236, 237, 712, 381, 382, 238, 239, 240, 827, 242,
	241, 828, 383, 713, 243, 244, 714, 829, 245, 246,
	830, 831, 247, 0, 248, 715, 249, 250, 252, 384,
	251, 716, 253, 254, 256, 255, 832, 833, 834, 385,
	257, 386, 258, 259, 835, 260, 836, 837, 261, 838,
	839, 262, 387, 717, 263, 718, 388, 264, 265, 266,
	267, 268, 840, 269, 389, 270, 390, 271, 841, 272,
	273, 274, 275, 276, 391, 277, 278, 842, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 843, 291, 719, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 844, 304, 393, 303, 305, 306,
	845, 307, 295, 296, 308, 720, 309, 394, 395, 310,
	846, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 847, 318, 848, 319, 320, 321, 322, 323, 324,
	325, 326, 849, 398, 399, 400, 850, 851, 327, 328,
	401, 402, 852, 329, 330, 331, 332, 853, 854, 333,
	334, 335, 336, 855, 337, 856, 403, 338, 339, 340,
	404, 405, 857, 858, 341, 859, 860, 861, 862, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	776, 0, 0, 0, 0, 0, 1622, 0, 0, 0,
	0, 0, 0, 0, 0, 1623, 184, 185, 782, 186,
	783, 784, 785, 786, 347, 787, 788, 789, 790, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 791,
	191, 354, 355, 192, 193, 792, 793, 356, 357, 358,
	794, 194, 359, 795, 781, 796, 195, 196, 197, 0,
	199, 200, 201, 198, 797, 202, 0, 203, 204, 798,
	706, 205, 206, 207, 799, 800, 802, 801, 803, 804,
	805, 208, 209, 413, 210, 360, 211, 361, 362, 806,
	212, 807, 213, 808, 214, 809, 810, 215, 216, 811,
	217, 812, 0, 813, 363, 218, 220, 219, 221, 364,
	365, 814, 707, 815, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 816, 225, 817, 818, 708,
	819, 226, 369, 820, 370, 821, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 710, 822, 373, 234, 823,
	231, 824, 709, 232, 374, 233, 375, 376, 377, 378,
	379, 825, 380, 826, 711, 235, 236, 237, 712, 381,
	382, 238, 239, 240, 827, 242, 241, 828, 383, 713,
	243, 244, 714, 829, 245, 246, 830, 831, 247, 0,
	248, 715, 249, 250, 252, 384, 251, 716, 253, 254,
	256, 255, 832, 833, 834, 385, 257, 386, 258, 259,
	835, 260, 836, 837, 261, 838, 839, 262, 387, 717,
	263, 718, 388, 264, 265, 266, 267, 268, 840, 269,
	389, 270, 390, 271, 841, 272, 273, 274, 275, 276,
	391, 277, 278, 842, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 843, 291, 719,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	844, 304, 393, 303, 305, 306, 845, 307, 295, 296,
	308, 720, 309, 394, 395, 310, 846, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 847, 318, 848,
	319, 320, 321, 322, 323, 324, 325, 326, 849, 398,
	399, 400, 850, 851, 327, 328, 401, 402, 852, 329,
	330, 331, 332, 853, 854, 333, 334, 335, 336, 855,
	337, 856, 403, 338, 339, 340, 404, 405, 857, 858,
	341, 859, 860, 861, 862, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 776, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2277, 184, 185, 782, 186, 783, 784, 785,
	786, 347, 787, 788, 789, 790, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 791, 191, 354, 355,
	192, 193, 792, 793, 356, 357, 358, 794, 194, 359,
	795, 781, 796, 195, 196, 197, 0, 199, 200, 201,
	198, 797, 202, 0, 203, 204, 798, 706, 205, 206,
	207, 799, 800, 802, 801, 803, 804, 805, 208, 209,
	413, 210, 360, 211, 361, 362, 806, 212, 807, 213,
	808, 214, 809, 810, 215, 216, 811, 217, 812, 0,
	813, 363, 218, 220, 219, 221, 364, 365, 814, 707,
	815, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 816, 225, 817, 818, 708, 819, 226, 369,
	820, 370, 821, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 710, 822, 373, 234, 823, 231, 824, 709,
	232, 374, 233, 375, 376, 377, 378, 379, 825, 380,
	826, 711, 235, 236, 237, 712, 381, 382, 238, 239,
	240, 827, 242, 241, 828, 383, 713, 243, 244, 714,
	829, 245, 246, 830, 831, 247, 0, 248, 715, 249,
	250, 252, 384, 251, 716, 253, 254, 256, 255, 832,
	833, 834, 385, 257, 386, 258, 259, 835, 260, 836,
	837, 261, 838, 839, 262, 387, 717, 263, 718, 388,
	264, 265, 266, 267, 268, 840, 269, 389, 270, 390,
	271, 841, 272, 273, 274, 275, 276, 391, 277, 278,
	842, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 843, 291, 719, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 844, 304, 393,
	303, 305, 306, 845, 307, 295, 296, 308, 720, 309,
	394, 395, 310, 846, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 847, 318, 848, 319, 320, 321,
	322, 323, 324, 325, 326, 849, 398, 399, 400, 850,
	851, 327, 328, 401, 402, 852, 329, 330, 331, 332,
	853, 854, 333, 334, 335, 336, 855, 337, 856, 403,
	338, 339, 340, 404, 405, 857, 858, 341, 859, 860,
	861, 862, 342, 343, 344, 345, 346, 0, 0, 776,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1231, 184, 185, 782, 186, 783,
	784, 785, 786, 347, 787, 788, 789, 790, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 791, 191,
	354, 355, 192, 193, 792, 793, 356, 357, 358, 794,
	194, 359, 795, 781, 796, 195, 196, 197, 0, 199,
	200, 201, 198, 797, 202, 0, 203, 204, 798, 706,
	205, 206, 207, 799, 800, 802, 801, 803, 804, 805,
	208, 209, 413, 210, 360, 211, 361, 362, 806, 212,
	807, 213, 808, 214, 809, 810, 215, 216, 811, 217,
	812, 0, 813, 363, 218, 220, 219, 221, 364, 365,
	814, 707, 815, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 816, 225, 817, 818, 708, 819,
	226, 369, 820, 370, 821, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 710, 822, 373, 234, 823, 231,
	824, 709, 232, 374, 233, 375, 376, 377, 378, 379,
	825, 380, 826, 711, 235, 236, 237, 712, 381, 382,
	238, 239, 240, 827, 242, 241, 828, 383, 713, 243,
	244, 714, 829, 245, 246, 830, 831, 247, 0, 248,
	715, 249, 250, 252, 384, 251, 716, 253, 254, 256,
	255, 832, 833, 834, 385, 257, 386, 258, 259, 835,
	260, 836, 837, 261, 838, 839, 262, 387, 717, 263,
	718, 388, 264, 265, 266, 267, 268, 840, 269, 389,
	270, 390, 271, 841, 272, 273, 274, 275, 276, 391,
	277, 278, 842, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 843, 291, 719, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 844,
	304, 393, 303, 305, 306, 845, 307, 295, 296, 308,
	720, 309, 394, 395, 310, 846, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 847, 318, 848, 319,
	320, 321, 322, 323, 324, 325, 326, 849, 398, 399,
	400, 850, 851, 327, 328, 401, 402, 852, 329, 330,
	331, 332, 853, 854, 333, 334, 335, 336, 855, 337,
	856, 403, 338, 339, 340, 404, 405, 857, 858, 341,
	859, 860, 861, 862, 342, 343, 344, 345, 346, 1520,
	0, 644, 633, 634, 631, 632, 622, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 1517,
	186, 0, 0, 0, 0, 661, 626, 0, 0, 0,
	187, 188, 189, 348, 676, 350, 677, 190, 678, 679,
	0, 191, 354, 355, 192, 193, 629, 660, 680, 681,
	358, 0, 194, 672, 0, 652, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 706, 205, 206, 207, 0, 653, 654, 656, 0,
	655, 657, 208, 209, 413, 210, 682, 211, 683, 684,
	623, 212, 0, 213, 0, 214, 1518, 0, 675, 216,
	0, 217, 0, 0, 0, 616, 218, 220, 219, 221,
	662, 663, 640, 707, 0, 0, 0, 0, 0, 222,
	223, 685, 686, 687, 0, 224, 0, 225, 0, 0,
	708, 0, 226, 673, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 669, 671, 710, 0, 373, 234,
	0, 231, 0, 709, 232, 688, 233, 689, 690, 691,
	692, 693, 0, 651, 0, 711, 235, 236, 237, 712,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 674,
	713, 243, 244, 714, 0, 245, 246, 0, 0, 247,
	0, 248, 715, 249, 250, 252, 384, 251, 716, 253,
	254, 256, 255, 611, 0, 641, 670, 257, 694, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	717, 263, 718, 664, 264, 265, 266, 267, 268, 0,
	269, 665, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 695, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	719, 292, 293, 617, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 658, 307, 295,
	296, 308, 720, 309, 696, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 697, 314, 315, 666, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 698, 699, 0, 0, 327, 328, 667, 668, 639,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	659, 337, 0, 403, 338, 339, 340, 404, 700, 1516,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 612, 596, 0, 644, 633, 634, 631, 632, 622,
	0, 610, 0, 0, 0, 0, 608, 609, 1519, 0,
	184, 185, 0, 186, 0, 618, 1514, 0, 661, 626,
	0, 621, 0, 187, 188, 189, 348, 676, 350, 677,
	190, 678, 679, 0, 191, 354, 355, 192, 193, 629,
	660, 680, 681, 358, 0, 194, 672, 0, 652, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 706, 205, 206, 207, 0, 653,
	654, 656, 0, 655, 657, 208, 209, 413, 210, 682,
	211, 683, 684, 623, 212, 0, 213, 0, 214, 0,
	0, 675, 216, 0, 217, 0, 0, 0, 616, 218,
	220, 219, 221, 662, 663, 640, 707, 0, 0, 0,
	0, 0, 222, 223, 685, 686, 687, 0, 224, 0,
	225, 0, 0, 708, 0, 226, 673, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 669, 671, 710,
	0, 373, 234, 0, 231, 0, 709, 232, 688, 233,
	689, 690, 691, 692, 693, 0, 651, 0, 711, 235,
	236, 237, 712, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 674, 713, 243, 244, 714, 0, 245, 246,
	0, 0, 247, 0, 248, 715, 249, 250, 252, 384,
	251, 716, 253, 254, 256, 255, 611, 0, 641, 670,
	257, 694, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 717, 263, 718, 664, 264, 265, 266,
	267, 268, 0, 269, 665, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 695, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 719, 292, 293, 617, 294, 0, 298,
	299, 300, 301, 302, 140, 304, 393, 303, 305, 306,
	658, 307, 295, 296, 308, 720, 309, 696, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 697, 314, 315,
	666, 0, 318, 142, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 698, 699, 0, 0, 327, 328,
	667, 668, 639, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 659, 337, 0, 403, 338, 339, 340,
	930, 700, 0, 0, 341, 0, 0, 0, 134, 342,
	343, 344, 345, 346, 612, 135, 644, 633, 634, 631,
	632, 622, 0, 0, 610, 0, 0, 0, 0, 608,
	609, 0, 184, 185, 0, 186, 0, 0, 1117, 0,
	661, 626, 0, 0, 621, 187, 188, 189, 348, 676,
	350, 677, 190, 678, 679, 0, 191, 354, 355, 192,
	193, 629, 660, 680, 681, 358, 0, 194, 672, 0,
	652, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 706, 205, 206, 207,
	0, 653, 654, 656, 0, 655, 657, 208, 209, 413,
	210, 682, 211, 683, 684, 623, 212, 0, 213, 0,
	214, 0, 0, 675, 216, 0, 217, 0, 0, 0,
	616, 218, 220, 219, 221, 662, 663, 640, 707, 0,
	0, 0, 0, 0, 222, 223, 685, 686, 687, 0,
	224, 0, 225, 0, 0, 708, 0, 226, 673, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 669,
	671, 710, 0, 373, 234, 0, 231, 0, 709, 232,
	688, 233, 689, 690, 691, 692, 693, 0, 651, 0,
	711, 235, 236, 237, 712, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 674, 713, 243, 244, 714, 0,
	245, 246, 0, 0, 247, 0, 248, 715, 249, 250,
	252, 384, 251, 716, 253, 254, 256, 255, 611, 0,
	641, 670, 257, 694, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 717, 263, 718, 664, 264,
	265, 266, 267, 268, 0, 269, 665, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 695, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 719, 292, 293, 617, 294,
	0, 298, 299, 300, 301, 302, 140, 304, 393, 303,
	305, 306, 658, 307, 295, 296, 308, 720, 309, 696,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 697,
	314, 315, 666, 0, 318, 142, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 698, 699, 0, 0,
	327, 328, 667, 668, 639, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 659, 337, 0, 403, 338,
	339, 340, 930, 700, 0, 0, 341, 0, 0, 0,
	134, 342, 343, 344, 345, 346, 612, 135, 644, 633,
	634, 631, 632, 622, 0, 0, 610, 0, 0, 0,
	0, 608, 609, 0, 184, 185, 0, 186, 0, 0,
	1117, 0, 661, 626, 0, 0, 621, 187, 188, 189,
	348, 676, 350, 677, 190, 678, 679, 1574, 191, 354,
	355, 192, 193, 629, 660, 680, 681, 358, 0, 194,
	672, 0, 652, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 706, 205,
	206, 207, 0, 653, 654, 656, 0, 655, 657, 208,
	209, 413, 210, 682, 211, 683, 684, 623, 212, 0,
	213, 0, 214, 0, 0, 675, 216, 0, 217, 0,
	0, 0, 616, 218, 220, 219, 221, 662, 663, 640,
	707, 0, 0, 0, 0, 0, 222, 223, 685, 686,
	687, 0, 224, 0, 225, 0, 1579, 708, 0, 226,
	673, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 669, 671, 710, 0, 373, 234, 0, 231, 0,
	709, 232, 688, 233, 689, 690, 691, 692, 693, 0,
	651, 0, 711, 235, 236, 237, 712, 381, 382, 238,
	239, 240, 0, 242, 241, 1575, 674, 713, 243, 244,
	714, 0, 245, 246, 0, 0, 247, 0, 248, 715,
	249, 250, 252, 384, 251, 716, 253, 254, 256, 255,
	611, 0, 641, 670, 257, 694, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 717, 263, 718,
	664, 264, 265, 266, 267, 268, 0, 269, 665, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 695, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 719, 292, 293,
	617, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 658, 307, 295, 296, 308, 720,
	309, 696, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 697, 314, 315, 666, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 698, 699,
	0, 1576, 327, 328, 667, 668, 639, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 659, 337, 0,
	403, 338, 339, 340, 404, 700, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 612, 0,
	644, 633, 634, 631, 632, 622, 0, 0, 610, 0,
	0, 0, 0, 608, 609, 0, 184, 185, 0, 186,
	0, 0, 618, 0, 661, 626, 0, 0, 621, 187,
	188, 189, 348, 676, 350, 677, 190, 678, 679, 0,
	191, 354, 355, 192, 193, 629, 660, 680, 681, 358,
	0, 194, 672, 0, 652, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	706, 205, 206, 207, 0, 653, 654, 656, 0, 655,
	657, 208, 209, 413, 210, 682, 211, 683, 684, 623,
	212, 0, 213, 0, 214, 0, 0, 675, 216, 0,
	217, 0, 0, 0, 616, 218, 220, 219, 221, 662,
	663, 640, 707, 0, 0, 0, 0, 0, 222, 223,
	685, 686, 687, 0, 224, 0, 225, 0, 0, 708,
	0, 226, 673, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 669, 671, 710, 0, 373, 234, 0,
	231, 0, 709, 232, 688, 233, 689, 690, 691, 692,
	693, 0, 651, 0, 711, 235, 236, 237, 712, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 674, 713,
	243, 244, 714, 0, 245, 246, 0, 0, 247, 0,
	248, 715, 249, 250, 252, 384, 251, 716, 253, 254,
	256, 255, 611, 2201, 641, 670, 257, 694, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 717,
	263, 718, 664, 264, 265, 266, 267, 268, 0, 269,
	665, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	695, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 719,
	292, 293, 617, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 658, 307, 295, 296,
	308, 720, 309, 696, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 697, 314, 315, 666, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	698, 699, 0, 0, 327, 328, 667, 668, 639, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 659,
	337, 0, 403, 338, 339, 340, 404, 700, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	612, 0, 644, 633, 634, 631, 632, 622, 0, 0,
	610, 0, 0, 0, 0, 608, 609, 1178, 184, 185,
	0, 186, 0, 0, 618, 0, 661, 626, 0, 0,
	621, 187, 188, 189, 348, 676, 350, 677, 190, 678,
	679, 0, 191, 354, 355, 192, 193, 629, 660, 680,
	681, 358, 0, 194, 672, 0, 652, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 706, 205, 206, 207, 0, 653, 654, 656,
	0, 655, 657, 208, 209, 413, 210, 682, 211, 683,
	684, 623, 212, 0, 213, 0, 214, 0, 0, 675,
	216, 0, 217, 0, 0, 0, 616, 218, 220, 219,
	221, 662, 663, 640, 707, 0, 0, 0, 0, 0,
	222, 223, 685, 686, 687, 0, 224, 0, 225, 0,
	0, 708, 0, 226, 673, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 669, 671, 710, 0, 373,
	234, 1424, 231, 0, 709, 232, 688, 233, 689, 690,
	691, 692, 693, 0, 651, 0, 711, 235, 236, 237,
	712, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	674, 713, 243, 244, 714, 0, 245, 246, 0, 0,
	247, 0, 248, 715, 249, 250, 252, 384, 251, 716,
	253, 254, 256, 255, 611, 0, 641, 670, 257, 694,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 717, 263, 718, 664, 264, 265, 266, 267, 268,
	0, 269, 665, 270, 390, 271, 1423, 272, 273, 274,
	275, 276, 695, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 719, 292, 293, 617, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 658, 307,
	295, 296, 308, 720, 309, 696, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 697, 314, 315, 666, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 698, 699, 0, 0, 327, 328, 667, 668,
	639, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 659, 337, 0, 403, 338, 339, 340, 404, 700,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 612, 604, 0, 644, 633, 634, 631, 632,
	622, 0, 610, 0, 0, 0, 0, 608, 609, 0,
	0, 184, 185, 0, 186, 0, 618, 0, 0, 661,
	626, 0, 621, 0, 187, 188, 189, 348, 676, 350,
	677, 190, 678, 679, 0, 191, 354, 355, 192, 193,
	629, 660, 680, 681, 358, 0, 194, 672, 0, 652,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 706, 205, 206, 207, 0,
	653, 654, 656, 0, 655, 657, 208, 209, 413, 210,
	682, 211, 683, 684, 623, 212, 0, 213, 0, 214,
	0, 0, 675, 216, 0, 217, 0, 0, 0, 616,
	218, 220, 219, 221, 662, 663, 640, 707, 0, 0,
	0, 0, 0, 222, 223, 685, 686, 687, 0, 224,
	0, 225, 0, 0, 708, 0, 226, 673, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 669, 671,
	710, 0, 373, 234, 0, 231, 0, 709, 232, 688,
	233, 689, 690, 691, 692, 693, 0, 651, 0, 711,
	235, 236, 237, 712, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 674, 713, 243, 244, 714, 0, 245,
	246, 0, 0, 247, 0, 248, 715, 249, 250, 252,
	384, 251, 716, 253, 254, 256, 255, 611, 0, 641,
	670, 257, 694, 258, 259, 0, 260, 606, 0, 261,
	0, 0, 262, 387, 717, 263, 718, 664, 264, 265,
	266, 267, 268, 0, 269, 665, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 695, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 719, 292, 293, 617, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 658, 307, 295, 296, 308, 720, 309, 696, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 697, 314,
	315, 666, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 698, 699, 0, 0, 327,
	328, 667, 668, 639, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 659, 337, 0, 403, 338, 339,
	340, 404, 700, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 612, 0, 644, 633, 634,
	631, 632, 622, 0, 0, 610, 0, 0, 0, 0,
	608, 609, 0, 184, 185, 0, 186, 0, 0, 618,
	0, 661, 626, 0, 0, 621, 187, 188, 189, 348,
	676, 350, 677, 190, 678, 679, 0, 191, 354, 355,
	192, 193, 629, 660, 680, 681, 358, 0, 194, 672,
	0, 652, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 706, 205, 206,
	207, 0, 653, 654, 656, 0, 655, 657, 208, 209,
	413, 210, 682, 211, 683, 684, 623, 212, 0, 213,
	0, 214, 0, 0, 675, 216, 0, 217, 0, 0,
	0, 616, 218, 220, 219, 221, 662, 663, 640, 707,
	0, 0, 0, 0, 0, 222, 223, 685, 686, 687,
	0, 224, 0, 225, 0, 0, 708, 0, 226, 673,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	669, 671, 710, 0, 373, 234, 0, 231, 0, 709,
	232, 688, 233, 689, 690, 691, 692, 693, 0, 651,
	0, 711, 235, 236, 237, 712, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 674, 713, 243, 244, 714,
	0, 245, 246, 0, 0, 247, 0, 248, 715, 249,
	250, 252, 384, 251, 716, 253, 254, 256, 255, 611,
	0, 641, 670, 257, 694, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 717, 263, 718, 664,
	264, 265, 266, 267, 268, 0, 269, 665, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 695, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 719, 292, 293, 617,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 658, 307, 295, 296, 308, 720, 309,
	696, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	697, 314, 315, 666, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 698, 699, 0,
	0, 327, 328, 667, 668, 639, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 659, 337, 0, 403,
	338, 339, 340, 404, 700, 2054, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 612, 0, 644,
	633, 634, 631, 632, 622, 0, 0, 610, 0, 0,
	0, 0, 608, 609, 0, 184, 185, 0, 186, 0,
	0, 618, 0, 661, 626, 0, 0, 621, 187, 188,
	189, 348, 676, 350, 677, 190, 678, 679, 0, 191,
	354, 355, 192, 193, 629, 660, 680, 681, 358, 0,
	194, 672, 0, 652, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 706,
	205, 206, 207, 0, 653, 654, 656, 0, 655, 657,
	208, 209, 413, 210, 682, 211, 683, 684, 623, 212,
	0, 213, 0, 214, 0, 0, 675, 216, 0, 217,
	0, 0, 0, 616, 218, 220, 219, 221, 662, 663,
	640, 707, 0, 0, 0, 0, 0, 222, 223, 685,
	686, 687, 0, 224, 0, 225, 0, 0, 708, 0,
	226, 673, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 669, 671, 710, 0, 373, 234, 0, 231,
	0, 709, 232, 688, 233, 689, 690, 691, 692, 693,
	0, 651, 0, 711, 235, 236, 237, 712, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 674, 713, 243,
	244, 714, 0, 245, 246, 0, 0, 247, 0, 248,
	715, 249, 250, 252, 384, 251, 716, 253, 254, 256,
	255, 611, 0, 641, 670, 257, 694, 258, 259, 0,
	260, 606, 0, 261, 0, 0, 262, 387, 717, 263,
	718, 664, 264, 265, 266, 267, 268, 0, 269, 665,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 695,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 719, 292,
	293, 617, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 658, 307, 295, 296, 308,
	720, 309, 696, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 697, 314, 315, 666, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 698,
	699, 0, 0, 327, 328, 667, 668, 639, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 659, 337,
	0, 403, 338, 339, 340, 404, 700, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 612,
	0, 644, 633, 634, 631, 632, 622, 0, 0, 610,
	0, 0, 0, 0, 608, 609, 0, 184, 185, 0,
	186, 0, 0, 618, 0, 661, 626, 0, 0, 621,
	187, 188, 189, 348, 676, 350, 677, 190, 678, 679,
	0, 191, 354, 355, 192, 193, 629, 660, 680, 681,
	358, 0, 194, 672, 0, 652, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 706, 205, 206, 207, 0, 653, 654, 656, 0,
	655, 657, 208, 209, 413, 210, 682, 211, 683, 684,
	623, 212, 0, 213, 0, 214, 0, 0, 675, 216,
	0, 217, 0, 0, 0, 616, 218, 220, 219, 221,
	662, 663, 640, 707, 0, 0, 0, 0, 0, 222,
	223, 685, 686, 687, 0, 224, 0, 225, 0, 0,
	708, 0, 226, 673, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 669, 671, 710, 0, 373, 234,
	0, 231, 0, 709, 232, 688, 233, 689, 690, 691,
	692, 693, 0, 651, 0, 711, 235, 236, 237, 712,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 674,
	713, 243, 244, 714, 0, 245, 246, 0, 0, 247,
	0, 248, 715, 249, 250, 252, 384, 251, 716, 253,
	254, 256, 255, 611, 0, 641, 670, 257, 694, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	717, 263, 718, 664, 264, 265, 266, 267, 268, 0,
	269, 665, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 695, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	719, 292, 293, 617, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 658, 307, 295,
	296, 308, 720, 309, 696, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 697, 314, 315, 666, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 698, 699, 0, 0, 327, 328, 667, 668, 639,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	659, 337, 0, 403, 338, 339, 340, 404, 700, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 612, 0, 644, 633, 634, 631, 632, 622, 0,
	0, 610, 0, 0, 0, 0, 608, 609, 1178, 184,
	185, 0, 186, 0, 0, 618, 0, 661, 626, 0,
	0, 621, 187, 188, 189, 348, 676, 350, 677, 190,
	678, 679, 0, 191, 354, 355, 192, 193, 629, 660,
	680, 681, 358, 0, 194, 672, 0, 652, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 706, 205, 206, 207, 0, 653, 654,
	656, 0, 655, 657, 208, 209, 413, 210, 682, 211,
	683, 684, 623, 212, 0, 213, 0, 214, 0, 0,
	675, 216, 0, 217, 0, 0, 0, 616, 218, 220,
	219, 221, 662, 663, 640, 707, 0, 0, 0, 0,
	0, 222, 223, 685, 686, 687, 0, 224, 0, 225,
	0, 1579, 708, 0, 226, 673, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 669, 671, 710, 0,
	373, 234, 0, 231, 0, 709, 232, 688, 233, 689,
	690, 691, 692, 693, 0, 651, 0, 711, 235, 236,
	237, 712, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 674, 713, 243, 244, 714, 0, 245, 246, 0,
	0, 247, 0, 248, 715, 249, 250, 252, 384, 251,
	716, 253, 254, 256, 255, 611, 0, 641, 670, 257,
	694, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 717, 263, 718, 664, 264, 265, 266, 267,
	268, 0, 269, 665, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 695, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 719, 292, 293, 617, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 658,
	307, 295, 296, 308, 720, 309, 696, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 697, 314, 315, 666,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 698, 699, 0, 0, 327, 328, 667,
	668, 639, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 659, 337, 0, 403, 338, 339, 340, 404,
	700, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 612, 1625, 0, 644, 633, 634, 631,
	632, 622, 0, 610, 0, 0, 0, 0, 608, 609,
	0, 0, 184, 185, 0, 186, 0, 618, 0, 0,
	661, 626, 0, 621, 0, 187, 188, 189, 348, 676,
	350, 677, 190, 678, 679, 0, 191, 354, 355, 192,
	193, 629, 660, 680, 681, 358, 0, 194, 672, 0,
	652, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 706, 205, 206, 207,
	0, 653, 654, 656, 0, 655, 657, 208, 209, 413,
	210, 682, 211, 683, 684, 623, 212, 0, 213, 0,
	214, 0, 0, 675, 216, 0, 217, 0, 0, 0,
	616, 218, 220, 219, 221, 662, 663, 640, 707, 0,
	0, 0, 0, 0, 222, 223, 685, 686, 687, 0,
	224, 0, 225, 0, 0, 708, 0, 226, 673, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 669,
	671, 710, 0, 373, 234, 0, 231, 0, 709, 232,
	688, 233, 689, 690, 691, 692, 693, 0, 651, 0,
	711, 235, 236, 237, 712, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 674, 713, 243, 244, 714, 0,
	245, 246, 0, 0, 247, 0, 248, 715, 249, 250,
	252, 384, 251, 716, 253, 254, 256, 255, 611, 0,
	641, 670, 257, 694, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 717, 263, 718, 664, 264,
	265, 266, 267, 268, 0, 269, 665, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 695, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 719, 292, 293, 617, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 658, 307, 295, 296, 308, 720, 309, 696,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 697,
	314, 315, 666, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 698, 699, 0, 0,
	327, 328, 667, 668, 639, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 659, 337, 0, 403, 338,
	339, 340, 404, 700, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 612, 1588, 0, 644,
	633, 634, 631, 632, 622, 0, 610, 0, 0, 0,
	0, 608, 609, 0, 0, 184, 185, 0, 186, 0,
	618, 0, 0, 661, 626, 0, 621, 0, 187, 188,
	189, 348, 676, 350, 677, 190, 678, 679, 0, 191,
	354, 355, 192, 193, 629, 660, 680, 681, 358, 0,
	194, 672, 0, 652, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 706,
	205, 206, 207, 0, 653, 654, 656, 0, 655, 657,
	208, 209, 413, 210, 682, 211, 683, 684, 623, 212,
	0, 213, 0, 214, 0, 0, 675, 216, 0, 217,
	0, 0, 0, 616, 218, 220, 219, 221, 662, 663,
	640, 707, 0, 0, 0, 0, 0, 222, 223, 685,
	686, 687, 0, 224, 0, 225, 0, 0, 708, 0,
	226, 673, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 669, 671, 710, 0, 373, 234, 0, 231,
	0, 709, 232, 688, 233, 689, 690, 691, 692, 693,
	0, 651, 0, 711, 235, 236, 237, 712, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 674, 713, 243,
	244, 714, 0, 245, 246, 0, 0, 247, 0, 248,
	715, 249, 250, 252, 384, 251, 716, 253, 254, 256,
	255, 611, 0, 641, 670, 257, 694, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 717, 263,
	718, 664, 264, 265, 266, 267, 268, 0, 269, 665,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 695,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 719, 292,
	293, 617, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 658, 307, 295, 296, 308,
	720, 309, 696, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 697, 314, 315, 666, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 698,
	699, 0, 0, 327, 328, 667, 668, 639, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 659, 337,
	0, 403, 338, 339, 340, 404, 700, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 612,
	1586, 0, 644, 633, 634, 631, 632, 622, 0, 610,
	0, 0, 0, 0, 608, 609, 0, 0, 184, 185,
	0, 186, 0, 618, 0, 0, 661, 626, 0, 621,
	0, 187, 188, 189, 348, 676, 350, 677, 190, 678,
	679, 0, 191, 354, 355, 192, 193, 629, 660, 680,
	681, 358, 0, 194, 672, 0, 652, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 706, 205, 206, 207, 0, 653, 654, 656,
	0, 655, 657, 208, 209, 413, 210, 682, 211, 683,
	684, 623, 212, 0, 213, 0, 214, 0, 0, 675,
	216, 0, 217, 0, 0, 0, 616, 218, 220, 219,
	221, 662, 663, 640, 707, 0, 0, 0, 0, 0,
	222, 223, 685, 686, 687, 0, 224, 0, 225, 0,
	0, 708, 0, 226, 673, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 669, 671, 710, 0, 373,
	234, 0, 231, 0, 709, 232, 688, 233, 689, 690,
	691, 692, 693, 0, 651, 0, 711, 235, 236, 237,
	712, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	674, 713, 243, 244, 714, 0, 245, 246, 0, 0,
	247, 0, 248, 715, 249, 250, 252, 384, 251, 716,
	253, 254, 256, 255, 611, 0, 641, 670, 257, 694,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 717, 263, 718, 664, 264, 265, 266, 267, 268,
	0, 269, 665, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 695, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 719, 292, 293, 617, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 658, 307,
	295, 296, 308, 720, 309, 696, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 697, 314, 315, 666, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 698, 699, 0, 0, 327, 328, 667, 668,
	639, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 659, 337, 0, 403, 338, 339, 340, 404, 700,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 612, 1570, 0, 644, 633, 634, 631, 632,
	622, 0, 610, 0, 0, 0, 0, 608, 609, 0,
	0, 184, 185, 0, 186, 0, 618, 0, 0, 661,
	626, 0, 621, 0, 187, 188, 189, 348, 676, 350,
	677, 190, 678, 679, 0, 191, 354, 355, 192, 193,
	629, 660, 680, 681, 358, 0, 194, 672, 0, 652,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 706, 205, 206, 207, 0,
	653, 654, 656, 0, 655, 657, 208, 209, 413, 210,
	682, 211, 683, 684, 623, 212, 0, 213, 0, 214,
	0, 0, 675, 216, 0, 217, 0, 0, 0, 616,
	218, 220, 219, 221, 662, 663, 640, 707, 0, 0,
	0, 0, 0, 222, 223, 685, 686, 687, 0, 224,
	0, 225, 0, 0, 708, 0, 226, 673, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 669, 671,
	710, 0, 373, 234, 0, 231, 0, 709, 232, 688,
	233, 689, 690, 691, 692, 693, 0, 651, 0, 711,
	235, 236, 237, 712, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 674, 713, 243, 244, 714, 0, 245,
	246, 0, 0, 247, 0, 248, 715, 249, 250, 252,
	384, 251, 716, 253, 254, 256, 255, 611, 0, 641,
	670, 257, 694, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 717, 263, 718, 664, 264, 265,
	266, 267, 268, 0, 269, 665, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 695, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 719, 292, 293, 617, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 658, 307, 295, 296, 308, 720, 309, 696, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 697, 314,
	315, 666, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 698, 699, 0, 0, 327,
	328, 667, 668, 639, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 659, 337, 0, 403, 338, 339,
	340, 404, 700, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 612, 1558, 0, 644, 633,
	634, 631, 632, 622, 0, 610, 0, 0, 0, 0,
	608, 609, 0, 0, 184, 185, 0, 186, 0, 618,
	0, 0, 661, 626, 0, 621, 0, 187, 188, 189,
	348, 676, 350, 677, 190, 678, 679, 0, 191, 354,
	355, 192, 193, 629, 660, 680, 681, 358, 0, 194,
	672, 0, 652, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 706, 205,
	206, 207, 0, 653, 654, 656, 0, 655, 657, 208,
	209, 413, 210, 682, 211, 683, 684, 623, 212, 0,
	213, 0, 214, 0, 0, 675, 216, 0, 217, 0,
	0, 0, 616, 218, 220, 219, 221, 662, 663, 640,
	707, 0, 0, 0, 0, 0, 222, 223, 685, 686,
	687, 0, 224, 0, 225, 0, 0, 708, 0, 226,
	673, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 669, 671, 710, 0, 373, 234, 0, 231, 0,
	709, 232, 688, 233, 689, 690, 691, 692, 693, 0,
	651, 0, 711, 235, 236, 237, 712, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 674, 713, 243, 244,
	714, 0, 245, 246, 0, 0, 247, 0, 248, 715,
	249, 250, 252, 384, 251, 716, 253, 254, 256, 255,
	611, 0, 641, 670, 257, 694, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 717, 263, 718,
	664, 264, 265, 266, 267, 268, 0, 269, 665, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 695, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 719, 292, 293,
	617, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 658, 307, 295, 296, 308, 720,
	309, 696, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 697, 314, 315, 666, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 698, 699,
	0, 0, 327, 328, 667, 668, 639, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 659, 337, 0,
	403, 338, 339, 340, 404, 700, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 612, 1556,
	0, 1548, 633, 634, 631, 632, 622, 0, 610, 0,
	0, 0, 0, 608, 609, 0, 0, 184, 185, 0,
	186, 0, 618, 0, 0, 661, 626, 0, 621, 0,
	187, 188, 189, 348, 676, 350, 677, 190, 678, 679,
	0, 191, 354, 355, 192, 193, 629, 660, 680, 681,
	358, 0, 194, 672, 0, 652, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 706, 205, 206, 207, 0, 653, 654, 656, 0,
	655, 657, 208, 209, 413, 210, 682, 1551, 683, 684,
	623, 212, 0, 213, 0, 214, 0, 0, 675, 216,
	0, 217, 0, 0, 0, 616, 218, 220, 219, 221,
	662, 663, 640, 707, 0, 0, 0, 0, 0, 222,
	223, 685, 686, 687, 0, 224, 0, 225, 0, 0,
	708, 0, 226, 673, 0, 370, 0, 0, 227, 1552,
	0, 0, 229, 230, 669, 671, 710, 0, 373, 234,
	0, 231, 0, 709, 232, 688, 233, 689, 690, 691,
	692, 693, 0, 651, 0, 711, 235, 236, 237, 712,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 674,
	713, 243, 244, 714, 0, 245, 246, 0, 0, 247,
	0, 248, 715, 1553, 1550, 252, 384, 251, 716, 253,
	254, 256, 255, 611, 0, 641, 670, 257, 694, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	717, 263, 718, 664, 264, 265, 266, 267, 268, 0,
	269, 665, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 695, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	719, 292, 293, 617, 294, 0, 298, 299, 300, 301,
	1554, 0, 304, 393, 303, 305, 306, 658, 307, 295,
	296, 308, 720, 309, 696, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 697, 314, 315, 666, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 698, 699, 0, 0, 327, 328, 667, 668, 639,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	659, 337, 0, 403, 338, 339, 340, 404, 700, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 1549,
	346, 612, 1545, 0, 1548, 633, 634, 631, 632, 622,
	0, 610, 0, 0, 0, 0, 608, 609, 0, 0,
	184, 185, 0, 186, 0, 618, 0, 0, 661, 626,
	0, 621, 0, 187, 188, 189, 348, 676, 350, 677,
	190, 678, 679, 0, 191, 354, 355, 192, 193, 629,
	660, 680, 681, 358, 0, 194, 672, 0, 652, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 706, 205, 206, 207, 0, 653,
	654, 656, 0, 655, 657, 208, 209, 413, 210, 682,
	1551, 683, 684, 623, 212, 0, 213, 0, 214, 0,
	0, 675, 216, 0, 217, 0, 0, 0, 616, 218,
	220, 219, 221, 662, 663, 640, 707, 0, 0, 0,
	0, 0, 222, 223, 685, 686, 687, 0, 224, 0,
	225, 0, 0, 708, 0, 226, 673, 0, 370, 0,
	0, 227, 1552, 0, 0, 229, 230, 669, 671, 710,
	0, 373, 234, 0, 231, 0, 709, 232, 688, 233,
	689, 690, 691, 692, 693, 0, 651, 0, 711, 235,
	236, 237, 712, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 674, 713, 243, 244, 714, 0, 245, 246,
	0, 0, 247, 0, 248, 715, 1553, 1550, 252, 384,
	251, 716, 253, 254, 256, 255, 611, 0, 641, 670,
	257, 694, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 717, 263, 718, 664, 264, 265, 266,
	267, 268, 0, 269, 665, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 695, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 719, 292, 293, 617, 294, 0, 298,
	299, 300, 301, 1554, 0, 304, 393, 303, 305, 306,
	658, 307, 295, 296, 308, 720, 309, 696, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 697, 314, 315,
	666, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 698, 699, 0, 0, 327, 328,
	667, 668, 639, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 659, 337, 0, 403, 338, 339, 340,
	404, 700, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 1549, 346, 612, 0, 644, 633, 634, 631,
	632, 622, 0, 0, 610, 0, 0, 0, 0, 608,
	609, 0, 184, 185, 0, 186, 0, 0, 618, 0,
	661, 626, 0, 0, 621, 187, 188, 189, 348, 676,
	350, 677, 190, 678, 679, 0, 191, 354, 355, 192,
	193, 629, 660, 680, 681, 358, 0, 194, 672, 0,
	652, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 706, 205, 206, 207,
	0, 653, 654, 656, 0, 655, 657, 208, 209, 413,
	210, 682, 211, 683, 684, 623, 212, 0, 213, 0,
	214, 0, 0, 675, 216, 0, 217, 0, 0, 0,
	616, 218, 220, 219, 221, 662, 663, 640, 707, 0,
	0, 0, 0, 0, 222, 223, 685, 686, 687, 0,
	224, 0, 225, 0, 0, 708, 0, 226, 673, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 669,
	671, 710, 0, 373, 234, 0, 231, 0, 709, 232,
	688, 233, 689, 690, 691, 692, 693, 0, 651, 0,
	711, 235, 236, 237, 712, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 674, 713, 243, 244, 714, 0,
	245, 246, 0, 0, 247, 0, 248, 715, 249, 250,
	252, 384, 251, 716, 253, 254, 256, 255, 611, 0,
	641, 670, 257, 694, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 717, 263, 718, 664, 264,
	265, 266, 267, 268, 0, 269, 665, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 695, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 719, 292, 293, 617, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 658, 307, 295, 296, 308, 720, 309, 696,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 697,
	314, 315, 666, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 698, 699, 0, 0,
	327, 328, 667, 668, 639, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 659, 337, 0, 403, 338,
	339, 340, 404, 700, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 612, 0, 644, 633,
	634, 631, 632, 622, 0, 0, 610, 0, 0, 0,
	0, 608, 609, 0, 184, 185, 1411, 186, 1121, 0,
	618, 0, 661, 626, 0, 0, 621, 187, 188, 189,
	348, 676, 350, 677, 190, 678, 679, 0, 191, 354,
	355, 192, 193, 629, 660, 680, 681, 358, 0, 194,
	672, 0, 652, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 706, 205,
	206, 207, 0, 653, 654, 656, 0, 655, 657, 208,
	209, 413, 210, 682, 211, 683, 684, 623, 212, 0,
	213, 0, 214, 0, 0, 675, 216, 0, 217, 0,
	0, 0, 616, 218, 220, 219, 221, 662, 663, 640,
	707, 0, 0, 0, 0, 0, 222, 223, 685, 686,
	687, 0, 224, 0, 225, 0, 0, 708, 0, 226,
	673, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 669, 671, 710, 0, 373, 234, 0, 231, 0,
	709, 232, 688, 233, 689, 690, 691, 692, 693, 0,
	651, 0, 711, 235, 236, 237, 712, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 674, 713, 243, 244,
	714, 0, 245, 246, 0, 0, 247, 0, 248, 715,
	249, 250, 252, 384, 251, 716, 253, 254, 256, 255,
	611, 0, 641, 670, 257, 694, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 717, 263, 718,
	664, 264, 265, 266, 267, 268, 0, 269, 665, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 695, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 719, 292, 293,
	617, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 658, 307, 295, 296, 308, 720,
	309, 696, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 697, 314, 315, 666, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 698, 699,
	0, 0, 327, 328, 667, 668, 639, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 659, 337, 0,
	403, 338, 339, 340, 404, 700, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 612, 874,
	0, 644, 633, 634, 631, 632, 622, 0, 610, 0,
	0, 0, 0, 608, 609, 0, 0, 184, 185, 0,
	186, 0, 618, 0, 0, 661, 626, 0, 621, 0,
	187, 188, 189, 348, 676, 350, 677, 190, 678, 679,
	0, 191, 354, 355, 192, 193, 629, 660, 680, 681,
	358, 0, 194, 672, 0, 652, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 706, 205, 206, 207, 0, 653, 654, 656, 0,
	655, 657, 208, 209, 413, 210, 682, 211, 683, 684,
	623, 212, 0, 213, 0, 214, 0, 0, 675, 216,
	0, 217, 0, 0, 0, 616, 218, 220, 219, 221,
	662, 663, 640, 707, 0, 0, 0, 0, 0, 222,
	223, 685, 686, 687, 0, 224, 0, 225, 0, 0,
	708, 0, 226, 673, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 669, 671, 710, 0, 373, 234,
	0, 231, 0, 709, 232, 688, 233, 689, 690, 691,
	692, 693, 0, 651, 0, 711, 235, 236, 237, 712,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 674,
	713, 243, 244, 714, 0, 245, 246, 0, 0, 247,
	0, 248, 715, 249, 250, 252, 384, 251, 716, 253,
	254, 256, 255, 611, 0, 641, 670, 257, 694, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	717, 263, 718, 664, 264, 265, 266, 267, 268, 0,
	269, 665, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 695, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	719, 292, 293, 617, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 658, 307, 295,
	296, 308, 720, 309, 696, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 697, 314, 315, 666, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 698, 699, 0, 0, 327, 328, 667, 668, 639,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	659, 337, 0, 403, 338, 339, 340, 404, 700, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 612, 872, 0, 644, 633, 634, 631, 632, 622,
	0, 610, 0, 0, 0, 0, 608, 609, 0, 0,
	184, 185, 0, 186, 0, 618, 0, 0, 661, 626,
	0, 621, 0, 187, 188, 189, 348, 676, 350, 677,
	190, 678, 679, 0, 191, 354, 355, 192, 193, 629,
	660, 680, 681, 358, 0, 194, 672, 0, 652, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 706, 205, 206, 207, 0, 653,
	654, 656, 0, 655, 657, 208, 209, 413, 210, 682,
	211, 683, 684, 623, 212, 0, 213, 0, 214, 0,
	0, 675, 216, 0, 217, 0, 0, 0, 616, 218,
	220, 219, 221, 662, 663, 640, 707, 0, 0, 0,
	0, 0, 222, 223, 685, 686, 687, 0, 224, 0,
	225, 0, 0, 708, 0, 226, 673, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 669, 671, 710,
	0, 373, 234, 0, 231, 0, 709, 232, 688, 233,
	689, 690, 691, 692, 693, 0, 651, 0, 711, 235,
	236, 237, 712, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 674, 713, 243, 244, 714, 0, 245, 246,
	0, 0, 247, 0, 248, 715, 249, 250, 252, 384,
	251, 716, 253, 254, 256, 255, 611, 0, 641, 670,
	257, 694, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 717, 263, 718, 664, 264, 265, 266,
	267, 268, 0, 269, 665, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 695, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 719, 292, 293, 617, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	658, 307, 295, 296, 308, 720, 309, 696, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 697, 314, 315,
	666, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 698, 699, 0, 0, 327, 328,
	667, 668, 639, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 659, 337, 0, 403, 338, 339, 340,
	404, 700, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 612, 0, 644, 633, 634, 631,
	632, 622, 0, 0, 610, 0, 0, 0, 0, 608,
	609, 0, 184, 185, 0, 186, 0, 0, 618, 0,
	661, 626, 0, 0, 621, 187, 188, 189, 348, 676,
	350, 677, 190, 678, 679, 0, 191, 354, 355, 192,
	193, 629, 660, 680, 681, 358, 0, 194, 672, 0,
	652, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 706, 205, 206, 207,
	0, 653, 654, 656, 0, 655, 657, 208, 209, 413,
	210, 682, 211, 683, 684, 623, 212, 0, 213, 0,
	214, 0, 0, 675, 216, 0, 217, 0, 0, 0,
	616, 218, 220, 219, 221, 662, 663, 640, 707, 0,
	0, 0, 0, 0, 222, 223, 685, 686, 687, 0,
	224, 0, 225, 0, 0, 708, 0, 226, 673, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 669,
	671, 710, 0, 373, 234, 0, 231, 0, 709, 232,
	688, 233, 689, 690, 691, 692, 693, 0, 651, 0,
	711, 235, 236, 237, 712, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 674, 713, 243, 244, 714, 0,
	245, 246, 0, 0, 247, 0, 248, 2612, 249, 250,
	252, 384, 251, 716, 253, 254, 256, 255, 611, 0,
	641, 670, 257, 694, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 717, 263, 718, 664, 264,
	265, 266, 267, 268, 0, 269, 665, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 695, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 719, 292, 293, 617, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 658, 307, 295, 296, 308, 720, 309, 696,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 697,
	314, 315, 666, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 698, 699, 0, 0,
	327, 328, 667, 668, 639, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 659, 337, 0, 403, 338,
	339, 340, 404, 700, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 612, 0, 644, 633,
	634, 631, 632, 622, 0, 0, 610, 0, 0, 0,
	0, 608, 609, 0, 184, 185, 0, 186, 0, 0,
	618, 0, 661, 626, 0, 0, 621, 187, 188, 189,
	348, 676, 350, 677, 190, 678, 679, 0, 191, 354,
	355, 192, 193, 629, 660, 680, 681, 358, 0, 194,
	672, 0, 652, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 706, 205,
	206, 2529, 0, 653, 654, 656, 0, 655, 657, 208,
	209, 413, 210, 682, 211, 683, 684, 623, 212, 0,
	213, 0, 214, 0, 0, 675, 216, 0, 217, 0,
	0, 0, 616, 218, 220, 219, 221, 662, 663, 640,
	707, 0, 0, 0, 0, 0, 222, 223, 685, 686,
	687, 0, 224, 0, 225, 0, 0, 708, 0, 226,
	673, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 669, 671, 710, 0, 373, 234, 0, 231, 0,
	709, 232, 688, 233, 689, 690, 691, 692, 693, 0,
	651, 0, 711, 235, 236, 237, 712, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 674, 713, 243, 244,
	714, 0, 245, 246, 0, 0, 247, 0, 248, 715,
	249, 250, 252, 384, 251, 716, 253, 254, 256, 255,
	611, 0, 641, 670, 257, 694, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 717, 263, 718,
	664, 264, 265, 266, 267, 268, 0, 269, 665, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 695, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 719, 292, 293,
	617, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 658, 307, 295, 296, 308, 720,
	309, 696, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 697, 314, 315, 666, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 698, 699,
	0, 0, 327, 328, 667, 668, 639, 329, 330, 2528,
	332, 0, 0, 333, 334, 335, 336, 659, 337, 0,
	403, 338, 339, 340, 404, 700, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 612, 0,
	644, 633, 634, 631, 632, 622, 0, 0, 610, 0,
	0, 0, 0, 608, 609, 0, 184, 185, 0, 186,
	0, 0, 618, 0, 661, 626, 0, 0, 621, 187,
	188, 189, 348, 676, 350, 677, 190, 678, 679, 0,
	191, 354, 355, 192, 193, 629, 660, 680, 681, 358,
	0, 194, 672, 0, 652, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	706, 205, 206, 207, 0, 653, 654, 656, 0, 655,
	657, 208, 209, 413, 210, 682, 211, 683, 684, 623,
	212, 0, 213, 0, 214, 0, 0, 675, 216, 0,
	217, 0, 0, 0, 616, 218, 220, 219, 221, 662,
	663, 640, 707, 0, 0, 0, 0, 0, 222, 223,
	685, 686, 687, 0, 224, 0, 225, 0, 0, 708,
	0, 226, 673, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 669, 671, 710, 0, 373, 234, 0,
	231, 0, 709, 232, 688, 233, 689, 690, 691, 692,
	693, 0, 651, 0, 711, 235, 236, 237, 712, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 674, 713,
	243, 244, 714, 0, 245, 246, 0, 0, 247, 0,
	248, 715, 249, 250, 252, 384, 251, 716, 253, 254,
	256, 255, 611, 0, 641, 670, 257, 694, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 717,
	263, 718, 664, 264, 265, 266, 267, 268, 0, 269,
	665, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	695, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 719,
	292, 293, 617, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 658, 307, 295, 296,
	308, 720, 309, 696, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 697, 314, 315, 666, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	698, 699, 0, 0, 327, 328, 667, 668, 639, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 659,
	337, 0, 403, 338, 339, 340, 404, 700, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	612, 0, 644, 633, 634, 631, 632, 622, 0, 0,
	610, 0, 0, 0, 0, 608, 609, 0, 184, 185,
	0, 186, 0, 0, 618, 0, 661, 626, 0, 0,
	621, 187, 188, 189, 2527, 676, 350, 677, 190, 678,
	679, 0, 191, 354, 355, 192, 193, 629, 660, 680,
	681, 358, 0, 194, 672, 0, 652, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 706, 205, 206, 2529, 0, 653, 654, 656,
	0, 655, 657, 208, 209, 413, 210, 682, 211, 683,
	684, 623, 212, 0, 213, 0, 214, 0, 0, 675,
	216, 0, 217, 0, 0, 0, 616, 218, 220, 219,
	221, 662, 663, 640, 707, 0, 0, 0, 0, 0,
	222, 223, 685, 686, 687, 0, 224, 0, 225, 0,
	0, 708, 0, 226, 673, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 669, 671, 710, 0, 373,
	234, 0, 231, 0, 709, 232, 688, 233, 689, 690,
	691, 692, 693, 0, 651, 0, 711, 235, 236, 237,
	712, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	674, 713, 243, 244, 714, 0, 245, 246, 0, 0,
	247, 0, 248, 715, 249, 250, 252, 384, 251, 716,
	253, 254, 256, 255, 611, 0, 641, 670, 257, 694,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 717, 263, 718, 664, 264, 265, 266, 267, 268,
	0, 269, 665, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 695, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 719, 292, 293, 617, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 658, 307,
	295, 296, 308, 720, 309, 696, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 697, 314, 315, 666, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 698, 699, 0, 0, 327, 328, 667, 668,
	639, 329, 330, 2528, 332, 0, 0, 333, 334, 335,
	336, 659, 337, 0, 403, 338, 339, 340, 404, 700,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 612, 0, 644, 633, 634, 631, 632, 622,
	0, 0, 610, 0, 0, 0, 0, 608, 609, 0,
	184, 185, 0, 186, 0, 0, 618, 0, 661, 626,
	0, 0, 621, 187, 188, 189, 348, 676, 350, 677,
	190, 678, 679, 0, 191, 354, 355, 192, 193, 629,
	660, 680, 681, 358, 0, 194, 672, 0, 652, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 706, 205, 206, 207, 0, 653,
	654, 656, 0, 655, 657, 208, 209, 413, 210, 682,
	211, 683, 684, 623, 212, 0, 213, 0, 214, 0,
	0, 675, 216, 0, 217, 0, 0, 0, 616, 218,
	220, 219, 221, 662, 663, 640, 707, 0, 0, 0,
	0, 0, 222, 223, 685, 686, 687, 0, 224, 0,
	225, 0, 0, 708, 0, 226, 673, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 669, 671, 710,
	0, 373, 234, 0, 231, 0, 709, 232, 688, 233,
	689, 690, 691, 692, 693, 0, 651, 0, 711, 235,
	236, 237, 712, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 674, 713, 243, 244, 714, 0, 245, 246,
	0, 0, 247, 0, 248, 715, 249, 250, 252, 384,
	251, 716, 253, 254, 256, 255, 0, 0, 641, 670,
	257, 694, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 717, 263, 718, 664, 264, 265, 266,
	267, 268, 0, 269, 665, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 695, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 719, 292, 293, 1568, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	658, 307, 295, 296, 308, 720, 309, 696, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 697, 314, 315,
	666, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 698, 699, 0, 0, 327, 328,
	667, 668, 639, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 659, 337, 0, 403, 338, 339, 340,
	404, 700, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 644, 633, 634, 631,
	632, 622, 0, 0, 1566, 0, 0, 0, 0, 1564,
	1565, 0, 184, 185, 0, 186, 0, 0, 1567, 0,
	661, 626, 0, 0, 621, 187, 188, 189, 348, 676,
	350, 677, 190, 678, 679, 0, 191, 354, 355, 192,
	193, 0, 660, 680, 681, 358, 0, 194, 672, 0,
	652, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 706, 205, 206, 207,
	0, 653, 654, 656, 0, 655, 657, 208, 209, 413,
	210, 682, 211, 683, 684, 623, 212, 0, 213, 0,
	214, 0, 0, 675, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 662, 663, 640, 707, 0,
	0, 0, 0, 0, 222, 223, 685, 686, 687, 0,
	224, 0, 225, 0, 0, 708, 0, 226, 673, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 669,
	671, 710, 0, 373, 234, 0, 231, 0, 709, 232,
	688, 233, 689, 690, 691, 692, 693, 0, 651, 0,
	711, 235, 236, 237, 712, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 674, 713, 243, 244, 714, 0,
	245, 246, 0, 0, 247, 0, 248, 715, 249, 250,
	252, 384, 251, 716, 253, 254, 256, 255, 0, 0,
	641, 670, 257, 694, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 717, 263, 718, 664, 264,
	265, 266, 267, 268, 0, 269, 665, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 695, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 719, 292, 293, 1568, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 658, 307, 295, 296, 308, 720, 309, 696,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 697,
	314, 315, 666, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 698, 699, 0, 0,
	327, 328, 667, 668, 639, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 659, 337, 0, 403, 338,
	339, 340, 404, 700, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 644, 633,
	634, 631, 632, 622, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	1567, 0, 661, 626, 0, 0, 621, 187, 188, 189,
	0, 676, 350, 677, 190, 678, 679, 0, 191, 354,
	355, 192, 193, 629, 660, 680, 681, 358, 0, 194,
	672, 0, 652, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 706, 205,
	206, 2529, 0, 653, 654, 656, 0, 655, 657, 208,
	209, 413, 210, 682, 211, 683, 684, 623, 212, 0,
	213, 0, 214, 0, 0, 675, 216, 0, 217, 0,
	0, 0, 616, 218, 220, 219, 221, 662, 663, 640,
	707, 0, 0, 0, 0, 0, 222, 223, 685, 686,
	687, 0, 224, 0, 225, 0, 0, 708, 0, 226,
	673, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 669, 671, 0, 0, 373, 234, 0, 231, 0,
	709, 232, 688, 233, 689, 690, 691, 692, 693, 0,
	651, 0, 0, 235, 236, 237, 712, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 674, 713, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 715,
	249, 250, 252, 384, 251, 716, 253, 254, 256, 255,
	611, 0, 641, 670, 257, 694, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 717, 263, 718,
	664, 264, 265, 266, 267, 268, 0, 269, 665, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 695, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 719, 292, 293,
	617, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 658, 307, 295, 296, 308, 0,
	309, 696, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 697, 314, 315, 666, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 698, 699,
	0, 0, 327, 328, 667, 668, 639, 329, 330, 2528,
	332, 0, 0, 333, 334, 335, 336, 659, 337, 0,
	403, 338, 339, 340, 404, 700, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	644, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 608, 609, 0, 184, 185, 0, 186,
	0, 0, 618, 0, 661, 0, 0, 0, 621, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 660, 356, 357, 358,
	0, 194, 672, 0, 652, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	706, 205, 206, 207, 0, 653, 654, 656, 0, 655,
	657, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 662,
	663, 0, 707, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 708,
	0, 226, 673, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 669, 671, 710, 0, 373, 234, 0,
	231, 0, 709, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 711, 235, 236, 237, 712, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 674, 713,
	243, 244, 714, 0, 245, 246, 0, 0, 247, 0,
	248, 715, 249, 250, 252, 384, 251, 716, 253, 254,
	256, 255, 0, 0, 0, 670, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 717,
	263, 718, 664, 264, 265, 266, 267, 268, 0, 269,
	665, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 719,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 658, 307, 295, 296,
	308, 720, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 666, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 667, 668, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 659,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	923, 0, 926, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 2153, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 781, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 706, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 707, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 708, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 710, 0, 373,
	234, 0, 231, 0, 709, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 711, 235, 236, 237,
	712, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 713, 243, 244, 714, 0, 245, 246, 0, 0,
	247, 0, 248, 715, 249, 250, 252, 384, 251, 716,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 717, 263, 718, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 719, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 140, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 720, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 142, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 930, 405,
	0, 0, 341, 0, 0, 0, 134, 342, 343, 344,
	345, 346, 596, 135, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 126, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 759, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 140, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 142, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	930, 405, 0, 0, 341, 0, 0, 0, 134, 342,
	343, 344, 345, 346, 0, 135, 181, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 753, 0, 1200, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 759,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 140, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 142, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 930, 405, 0, 0, 341, 0, 0, 0,
	134, 342, 343, 344, 345, 346, 596, 135, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 753, 0,
	1200, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 140, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 142, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 930, 405, 0, 0, 341, 0,
	0, 0, 134, 342, 343, 344, 345, 346, 1897, 135,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 126, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 759, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	752, 0, 181, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 753, 0, 758, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 759, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 181, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 753, 0, 758, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 759, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 753, 0, 758, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 1233,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 1710, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 181, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 2069,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 644, 633, 634,
	631, 632, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	1203, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	676, 350, 677, 190, 678, 679, 0, 191, 354, 355,
	192, 193, 0, 0, 680, 681, 358, 0, 194, 359,
	0, 781, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 706, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 682, 211, 683, 684, 0, 212, 0, 213,
	0, 214, 0, 0, 675, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 640, 707,
	0, 0, 0, 0, 0, 222, 223, 685, 686, 687,
	0, 224, 0, 225, 0, 0, 708, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 710, 0, 373, 234, 0, 231, 0, 709,
	232, 688, 233, 689, 690, 691, 692, 693, 0, 651,
	0, 711, 235, 236, 237, 712, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 713, 243, 244, 714,
	0, 245, 246, 0, 0, 247, 0, 248, 715, 249,
	250, 252, 384, 251, 716, 253, 254, 256, 255, 0,
	0, 641, 385, 257, 694, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 717, 263, 718, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 695, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 719, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 720, 309,
	696, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	697, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 698, 699, 0,
	0, 327, 328, 401, 402, 639, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 700, 0, 499, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 177, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 176, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 174, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 180, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 177, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 176, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 181, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 180, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 177, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 176, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 181, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 180, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 980, 0, 926,
	984, 0, 0, 0, 982, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 180, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 781, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 706,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 707, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 708, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 710, 0, 373, 234, 0, 231,
	0, 709, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 711, 235, 236, 237, 712, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 713, 243,
	244, 714, 0, 245, 246, 0, 0, 247, 0, 248,
	715, 249, 250, 252, 384, 251, 716, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 717, 263,
	718, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 719, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	720, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 926, 984, 341,
	0, 0, 982, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 781, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 706, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 707,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 708, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 710, 0, 373, 234, 0, 231, 0, 709,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 711, 235, 236, 237, 712, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 713, 243, 244, 714,
	0, 245, 246, 0, 0, 247, 0, 248, 715, 249,
	250, 252, 384, 251, 716, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 717, 263, 718, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 719, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 720, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 926, 984, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 781,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 706, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 707, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 708, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	710, 0, 373, 234, 0, 231, 0, 709, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 711,
	235, 236, 237, 712, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 713, 243, 244, 714, 0, 245,
	246, 0, 0, 247, 0, 248, 715, 249, 250, 252,
	384, 251, 716, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 717, 263, 718, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 719, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 720, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 926, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 781, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 706, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 707, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 708, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 710, 0,
	373, 234, 0, 231, 0, 709, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 711, 235, 236,
	237, 712, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 713, 243, 244, 714, 0, 245, 246, 0,
	0, 247, 0, 248, 715, 249, 250, 252, 384, 251,
	716, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 717, 263, 718, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 719, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 720, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 181, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 1645, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 1643, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 1687, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 1648, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	1685, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 1647, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 1686, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 181,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 1645,
	194, 359, 0, 0, 1640, 195, 196, 197, 0, 199,
	200, 201, 198, 1643, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 1648, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 1639, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 1647, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 1646, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 901, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 759, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 765,
	341, 181, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 767, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 759, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 0,
	761, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 763, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 759, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 430, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 429, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 428, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 181, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 1628, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 181,
	2219, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 181, 2219, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 2216, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 181, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 759, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 1390, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 1388, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 181, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 184, 185, 1370, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 525, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 959, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 527, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 522, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 1247, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	1246, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 525, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 959, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 527, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 522, 399, 400,
	0, 0, 327, 960, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 525, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	516, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 527, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 943, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 522, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 919, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 918, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 916,
	341, 181, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 915, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 0,
	912, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 911, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 909, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 908, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 905, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 904, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 181, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 184, 185,
	893, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 891, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 890, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 887, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 885, 341, 181, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 881, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 883,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 771, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	773, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 769, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 525, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	516, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 515, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 527, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 517, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 518, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 522, 399,
	400, 0, 0, 327, 520, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 507, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 508, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 505,
	341, 181, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 0,
	497, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 453, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 181, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 181,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 1944, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 181, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	1942, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 181, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 1931, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 181, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 508, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 181, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 1257, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 0, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 181,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	736, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 181, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 0, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 0, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	0, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 1054, 1055, 0,
	1084, 1085, 1086, 1094, 1095, 1096, 0, 0, 0, 0,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 0,
	1057, 0, 0, 1098, 0, 0, 0, 0, 0, 0,
	0, 0, 1054, 1055, 0, 1084, 1085, 1086, 1094, 1095,
	1096, 0, 0, 0, 1056, 0, 0, 0, 1087, 0,
	1076, 0, 0, 0, 0, 1057, 0, 1073, 1098, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1056,
	0, 0, 0, 0, 0, 1076, 0, 0, 0, 0,
	0, 0, 1073, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1079, 1080, 1081, 1082, 0,
	0, 0, 0, 0, 1062, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1838,
	1839, 0, 1856, 1857, 1858, 0, 1091, 1099, 0, 0,
	1079, 1080, 1081, 1082, 0, 2042, 0, 0, 0, 1062,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	1054, 1055, 0, 1084, 1085, 1086, 1094, 1095, 1096, 0,
	0, 1091, 1099, 1089, 0, 0, 1087, 0, 0, 0,
	1077, 0, 1853, 1057, 0, 0, 1098, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1088, 1056, 1089, 0,
	0, 0, 0, 1076, 0, 1077, 0, 0, 0, 0,
	1073, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 1088, 0, 0, 0, 0, 1844, 0, 0, 0,
	0, 0, 0, 0, 0, 1078, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1079, 1080,
	1081, 1082, 1092, 0, 0, 1083, 0, 1062, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1859, 0, 0,
	1078, 0, 0, 0, 0, 0, 0, 0, 0, 1091,
	1099, 0, 0, 0, 0, 0, 0, 1092, 0, 0,
	0, 0, 1854, 0, 0, 0, 0, 0, 1097, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1089, 0, 0, 0,
	0, 1090, 0, 1077, 1068, 1069, 1075, 1074, 1070, 1071,
	1072, 1093, 0, 1067, 1065, 1066, 1058, 1059, 1060, 1061,
	1063, 1064, 0, 0, 0, 0, 0, 0, 0, 1088,
	1878, 0, 0, 0, 0, 0, 1090, 0, 0, 1068,
	1069, 1075, 1074, 1070, 1071, 1072, 1093, 1855, 1067, 1065,
	1066, 1058, 1059, 1060, 1061, 1063, 1064, 0, 0, 0,
	0, 0, 0, 1083, 0, 1830, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1078, 0,
	0, 0, 1054, 1055, 0, 1084, 1085, 1086, 1094, 1095,
	1096, 0, 0, 0, 0, 1092, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 1057, 0, 0, 1098, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1056,
	0, 0, 0, 0, 0, 1076, 1850, 1851, 1852, 0,
	0, 0, 1073, 0, 0, 1849, 1847, 1848, 1840, 1841,
	1842, 1843, 1845, 1846, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 1068, 1069, 1075,
	1074, 1070, 1071, 1072, 1093, 0, 1067, 1065, 1066, 1058,
	1059, 1060, 1061, 1063, 1064, 0, 0, 0, 0, 2498,
	1079, 1080, 1081, 1082, 0, 0, 0, 0, 0, 1062,
	0, 0, 0, 0, 1054, 1055, 0, 1084, 1085, 1086,
	1094, 1095, 1096, 0, 0, 0, 0, 0, 0, 0,
	1087, 1091, 1099, 0, 0, 0, 0, 1057, 0, 0,
	1098, 0, 1838, 1839, 0, 1856, 1857, 1858, 0, 0,
	1097, 0, 0, 0, 0, 0, 0, 0, 2041, 0,
	0, 1056, 0, 0, 0, 0, 0, 1076, 1089, 0,
	0, 0, 0, 0, 1073, 1077, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1853, 0, 0, 0, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1079, 1080, 1081, 1082, 0, 0, 0, 0,
	0, 1062, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 0, 0, 1091, 1099, 0, 0, 0, 0, 1844,
	0, 0, 0, 0, 0, 0, 0, 1092, 0, 0,
	0, 0, 1097, 1054, 1055, 0, 1084, 1085, 1086, 1094,
	1095, 1096, 0, 0, 0, 0, 0, 0, 0, 1087,
	1089, 0, 0, 0, 0, 0, 1057, 1077, 0, 1098,
	1859, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1054, 1055, 0, 1084, 1085, 1086, 1094, 1095, 1096,
	1056, 0, 0, 1088, 0, 1854, 1076, 1087, 0, 0,
	0, 0, 0, 1073, 1057, 0, 1090, 1098, 0, 1068,
	1069, 1075, 1074, 1070, 1071, 1072, 1093, 0, 1067, 1065,
	1066, 1058, 1059, 1060, 1061, 1063, 1064, 1083, 1056, 0,
	0, 2448, 0, 0, 1076, 0, 0, 0, 0, 0,
	0, 1073, 1078, 0, 0, 0, 0, 0, 0, 0,
	0, 1079, 1080, 1081, 1082, 0, 0, 0, 0, 1092,
	1062, 0, 1838, 1839, 0, 1856, 1857, 1858, 0, 0,
	1855, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1091, 1099, 0, 0, 0, 0, 0, 1079,
	1080, 1081, 1082, 0, 0, 0, 0, 0, 1062, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1853, 0, 0, 0, 1089,
	1091, 1099, 0, 0, 0, 0, 1077, 0, 1090, 0,
	0, 1068, 1069, 1075, 1074, 1070, 1071, 1072, 1093, 1097,
	1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064, 0,
	0, 0, 1088, 2402, 0, 0, 0, 1089, 0, 1850,
	1851, 1852, 0, 0, 1077, 0, 0, 0, 1849, 1847,
	1848, 1840, 1841, 1842, 1843, 1845, 1846, 0, 0, 1844,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1078, 1860, 0, 0, 0, 0, 1054, 1055, 0,
	1084, 1085, 1086, 1094, 1095, 1096, 0, 0, 1092, 0,
	1859, 0, 0, 1087, 1083, 0, 0, 0, 0, 0,
	1057, 0, 0, 1098, 0, 0, 0, 0, 0, 1078,
	0, 0, 0, 0, 0, 1854, 0, 0, 0, 0,
	0, 0, 0, 0, 1056, 0, 1092, 0, 0, 0,
	1076, 0, 0, 0, 0, 0, 0, 1073, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1090, 0, 0,
	1068, 1069, 1075, 1074, 1070, 1071, 1072, 1093, 0, 1067,
	1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064, 0, 0,
	0, 0, 2372, 0, 0, 1079, 1080, 1081, 1082, 0,
	1855, 0, 0, 0, 1062, 1090, 0, 0, 1068, 1069,
	1075, 1074, 1070, 1071, 1072, 1093, 0, 1067, 1065, 1066,
	1058, 1059, 1060, 1061, 1063, 1064, 1091, 1099, 0, 0,
	2367, 0, 0, 1054, 1055, 0, 1084, 1085, 1086, 1094,
	1095, 1096, 0, 0, 0, 1097, 0, 0, 0, 1087,
	0, 0, 0, 0, 0, 0, 1057, 0, 0, 1098,
	0, 0, 0, 1089, 0, 0, 0, 0, 0, 0,
	1077, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1056, 0, 0, 0, 0, 0, 1076, 0, 0, 1850,
	1851, 1852, 0, 1073, 0, 0, 1088, 0, 1849, 1847,
	1848, 1840, 1841, 1842, 1843, 1845, 1846, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1079, 1080, 1081, 1082, 1078, 0, 0, 0, 0,
	1062, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1054, 1055, 1092, 1084, 1085, 1086, 1094, 1095, 1096, 0,
	0, 0, 1091, 1099, 0, 0, 1087, 0, 0, 0,
	0, 0, 0, 1057, 0, 0, 1098, 0, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1056, 0, 1089,
	0, 0, 0, 1076, 0, 0, 1077, 0, 0, 0,
	1073, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1090, 0, 0, 1068, 1069, 1075, 1074, 1070, 1071,
	1072, 1093, 1088, 1067, 1065, 1066, 1058, 1059, 1060, 1061,
	1063, 1064, 0, 0, 0, 0, 2363, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1079, 1080,
	1081, 1082, 0, 0, 0, 0, 1083, 1062, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1078, 0, 0, 0, 0, 0, 0, 0, 1091,
	1099, 0, 0, 0, 0, 0, 1054, 1055, 1092, 1084,
	1085, 1086, 1094, 1095, 1096, 0, 0, 0, 1097, 0,
	0, 0, 1087, 0, 0, 0, 0, 0, 0, 1057,
	0, 0, 1098, 0, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 1077, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1056, 0, 0, 0, 0, 0, 1076,
	0, 0, 0, 0, 0, 0, 1073, 0, 0, 1088,
	0, 0, 0, 0, 0, 0, 0, 1090, 0, 0,
	1068, 1069, 1075, 1074, 1070, 1071, 1072, 1093, 0, 1067,
	1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064, 0, 0,
	0, 0, 2298, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1079, 1080, 1081, 1082, 1078, 0,
	0, 0, 0, 1062, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1054, 1055, 1092, 1084, 1085, 1086, 1094,
	1095, 1096, 0, 0, 0, 1091, 1099, 0, 0, 1087,
	0, 0, 0, 0, 0, 0, 1057, 0, 0, 1098,
	0, 0, 0, 0, 1097, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1056, 0, 1089, 0, 0, 0, 1076, 0, 0, 1077,
	0, 0, 0, 1073, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 1068, 1069, 1075,
	1074, 1070, 1071, 1072, 1093, 1088, 1067, 1065, 1066, 1058,
	1059, 1060, 1061, 1063, 1064, 0, 0, 0, 0, 2264,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1079, 1080, 1081, 1082, 0, 0, 0, 0, 1083,
	1062, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	0, 0, 1091, 1099, 0, 0, 0, 0, 0, 1054,
	1055, 1092, 1084, 1085, 1086, 1094, 1095, 1096, 0, 0,
	0, 1097, 0, 0, 0, 1087, 0, 0, 0, 0,
	0, 0, 1057, 0, 0, 1098, 0, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 1077, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1056, 0, 0, 0,
	0, 0, 1076, 0, 0, 0, 0, 0, 0, 1073,
	0, 0, 1088, 0, 0, 0, 0, 0, 0, 0,
	1090, 0, 0, 1068, 1069, 1075, 1074, 1070, 1071, 1072,
	1093, 0, 1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063,
	1064, 0, 0, 0, 0, 2263, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 1080, 1081,
	1082, 1078, 0, 0, 0, 0, 1062, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1054, 1055, 1092, 1084,
	1085, 1086, 1094, 1095, 1096, 0, 0, 0, 1091, 1099,
	0, 0, 1087, 0, 0, 0, 0, 0, 0, 1057,
	0, 0, 1098, 0, 0, 0, 0, 1097, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1056, 0, 1089, 0, 0, 0, 1076,
	0, 0, 1077, 0, 0, 0, 1073, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1090, 0, 0,
	1068, 1069, 1075, 1074, 1070, 1071, 1072, 1093, 1088, 1067,
	1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064, 0, 0,
	0, 0, 2228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1079, 1080, 1081, 1082, 0, 0,
	0, 0, 1083, 1062, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1078, 0, 0,
	0, 0, 0, 0, 0, 1091, 1099, 0, 0, 0,
	0, 0, 1054, 1055, 1092, 1084, 1085, 1086, 1094, 1095,
	1096, 0, 0, 0, 1097, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 1057, 0, 0, 1098, 0,
	0, 0, 1089, 0, 0, 0, 0, 0, 0, 1077,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1056,
	0, 0, 0, 0, 0, 1076, 0, 0, 0, 0,
	0, 0, 1073, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 1090, 0, 0, 1068, 1069, 1075, 1074,
	1070, 1071, 1072, 1093, 0, 1067, 1065, 1066, 1058, 1059,
	1060, 1061, 1063, 1064, 0, 0, 0, 0, 2072, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1079, 1080, 1081, 1082, 1078, 0, 0, 0, 0, 1062,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1054,
	1055, 1092, 1084, 1085, 1086, 1094, 1095, 1096, 0, 0,
	0, 1091, 1099, 0, 0, 1087, 0, 0, 0, 0,
	0, 0, 1057, 0, 0, 1098, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1056, 0, 1089, 0,
	0, 0, 1076, 0, 0, 1077, 0, 0, 0, 1073,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1090, 0, 0, 1068, 1069, 1075, 1074, 1070, 1071, 1072,
	1093, 1088, 1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063,
	1064, 0, 0, 0, 0, 2048, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 1080, 1081,
	1082, 0, 0, 0, 0, 1083, 1062, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 0, 0, 0, 0, 0, 0, 0, 1091, 1099,
	0, 0, 0, 0, 0, 1054, 1055, 1092, 1084, 1085,
	1086, 1094, 1095, 1096, 0, 0, 0, 1097, 0, 0,
	0, 1087, 0, 0, 0, 0, 0, 0, 1057, 0,
	0, 1098, 0, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 1077, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1056, 0, 0, 0, 0, 0, 1076, 0,
	0, 0, 0, 0, 0, 1073, 0, 0, 1088, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 1068,
	1069, 1075, 1074, 1070, 1071, 1072, 1093, 0, 1067, 1065,
	1066, 1058, 1059, 1060, 1061, 1063, 1064, 0, 0, 0,
	0, 1506, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1079, 1080, 1081, 1082, 1078, 0, 0,
	0, 0, 1062, 2561, 0, 0, 0, 0, 0, 0,
	0, 0, 1054, 1055, 1092, 1084, 1085, 1086, 1094, 1095,
	1096, 0, 0, 0, 1091, 1099, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 1057, 0, 0, 1098, 0,
	0, 0, 0, 1097, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1056,
	0, 1089, 0, 0, 0, 1076, 0, 0, 1077, 0,
	0, 0, 1073, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1090, 0, 0, 1068, 1069, 1075, 1074,
	1070, 1071, 1072, 1093, 1088, 1067, 1065, 1066, 1058, 1059,
	1060, 1061, 1063, 1064, 0, 0, 1800, 0, 0, 0,
	2560, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1079, 1080, 1081, 1082, 0, 0, 0, 0, 1083, 1062,
	0, 1870, 0, 0, 1869, 0, 0, 0, 0, 0,
	0, 0, 0, 1078, 0, 0, 0, 0, 0, 0,
	0, 1091, 1099, 0, 0, 0, 0, 0, 0, 0,
	1092, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1097, 1054, 1055, 0, 1084, 1085, 1086, 1094, 1095, 1096,
	0, 0, 0, 0, 0, 0, 0, 1087, 1089, 0,
	0, 0, 1773, 0, 1057, 1077, 0, 1098, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1056, 0,
	0, 1088, 0, 0, 1076, 0, 0, 0, 0, 1090,
	0, 1073, 1068, 1069, 1075, 1074, 1070, 1071, 1072, 1093,
	0, 1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064,
	0, 0, 0, 0, 0, 1083, 0, 0, 1774, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 0, 0, 0, 0, 0, 0, 0, 0, 1079,
	1080, 1081, 1082, 0, 0, 0, 0, 1092, 1062, 0,
	0, 0, 1604, 0, 0, 0, 0, 0, 1054, 1055,
	0, 1084, 1085, 1086, 1094, 1095, 1096, 0, 0, 0,
	1091, 1099, 0, 0, 1087, 0, 0, 0, 1603, 0,
	0, 1057, 0, 0, 1098, 0, 0, 0, 0, 1097,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1056, 0, 1089, 0, 0,
	0, 1076, 0, 0, 1077, 0, 1090, 0, 1073, 1068,
	1069, 1075, 1074, 1070, 1071, 1072, 1093, 0, 1067, 1065,
	1066, 1058, 1059, 1060, 1061, 1063, 1064, 0, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1079, 1080, 1081, 1082,
	0, 0, 0, 0, 1083, 1062, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1078,
	0, 0, 0, 0, 0, 0, 0, 1091, 1099, 0,
	0, 0, 0, 0, 0, 0, 1092, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1097, 1054, 1055, 0,
	1084, 1085, 1086, 1094, 1095, 1096, 0, 0, 0, 0,
	0, 0, 0, 1087, 1089, 0, 0, 0, 0, 0,
	1057, 1077, 0, 1098, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1056, 0, 0, 1088, 0, 0,
	1076, 0, 0, 0, 0, 1090, 0, 1073, 1068, 1069,
	1075, 1074, 1070, 1071, 1072, 1093, 0, 1067, 1065, 1066,
	1058, 1059, 1060, 1061, 1063, 1064, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 0, 0, 0, 1079, 1080, 1081, 1082, 0,
	0, 0, 0, 1092, 1062, 0, 0, 0, 0, 1054,
	1055, 0, 1084, 1085, 1086, 1094, 1095, 1096, 0, 0,
	0, 0, 0, 0, 0, 1087, 1091, 1099, 0, 0,
	0, 0, 1057, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1056, 0, 0, 0,
	0, 0, 1076, 1089, 0, 0, 0, 0, 0, 1073,
	1077, 0, 1090, 0, 0, 1068, 1069, 1075, 1074, 1070,
	1071, 1072, 1093, 0, 1067, 1065, 1066, 1058, 1059, 1060,
	1061, 1063, 1064, 0, 0, 0, 1088, 593, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 1080, 1081,
	1082, 0, 0, 0, 0, 0, 1062, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1078, 0, 0, 1091, 1099,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1092, 0, 0, 0, 0, 1097, 1054, 1055,
	0, 1084, 1085, 1086, 1094, 1095, 1096, 0, 0, 0,
	0, 0, 0, 0, 1087, 1089, 0, 0, 0, 0,
	0, 1057, 1077, 0, 1098, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1054, 1055, 0, 1084,
	1085, 1086, 1094, 1095, 1096, 1056, 0, 0, 1088, 0,
	0, 1076, 1087, 0, 0, 0, 1871, 0, 1073, 1057,
	0, 1090, 1098, 0, 1068, 1069, 1075, 1074, 1070, 1071,
	1072, 1093, 0, 1067, 1065, 1066, 1058, 1059, 1060, 1061,
	1063, 1064, 1083, 1056, 0, 0, 0, 0, 0, 1076,
	0, 0, 0, 0, 0, 0, 1073, 1078, 0, 0,
	0, 0, 0, 0, 0, 0, 1079, 1080, 1081, 1082,
	0, 0, 0, 0, 1092, 1062, 0, 0, 0, 0,
	1876, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1091, 1099, 0,
	0, 2052, 0, 0, 1079, 1080, 1081, 1082, 0, 0,
	0, 0, 0, 1062, 0, 0, 1097, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1089, 1091, 1099, 0, 0, 0,
	0, 1077, 0, 1090, 0, 0, 1068, 1069, 1075, 1074,
	1070, 1071, 1072, 1093, 1097, 1067, 1065, 1066, 1058, 1059,
	1060, 1061, 1063, 1064, 0, 0, 0, 1088, 0, 0,
	0, 0, 1089, 0, 0, 0, 0, 0, 0, 1077,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 1054, 1055, 0, 1084, 1085, 1086, 1094, 1095,
	1096, 0, 0, 1092, 0, 0, 0, 0, 1087, 1083,
	0, 0, 0, 0, 0, 1057, 0, 0, 1098, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1056,
	0, 1092, 0, 0, 0, 1076, 0, 0, 0, 0,
	0, 0, 1073, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 0, 1068, 1069, 1075, 1074, 1070,
	1071, 1072, 1093, 0, 1067, 1065, 1066, 1058, 1059, 1060,
	1061, 1063, 1064, 0, 0, 0, 0, 0, 0, 0,
	1079, 1080, 1081, 1082, 0, 0, 0, 0, 0, 1062,
	1090, 0, 0, 1068, 1069, 1075, 1074, 1070, 1071, 1072,
	1093, 0, 1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063,
	1064, 1091, 1099, 0, 0, 0, 0, 0, 1054, 1055,
	0, 1084, 1085, 1086, 1094, 1095, 1096, 0, 0, 0,
	1097, 0, 0, 0, 1087, 0, 0, 0, 1829, 0,
	0, 1057, 0, 0, 1098, 0, 0, 0, 1089, 0,
	0, 0, 0, 0, 0, 1077, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1056, 0, 0, 0, 0,
	0, 1076, 0, 0, 0, 0, 0, 0, 1073, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1836, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1079, 1080, 1081, 1082,
	1078, 0, 0, 0, 0, 1062, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1054, 1055, 1092, 1084, 1085,
	1086, 1094, 1095, 1096, 0, 0, 0, 1091, 1099, 0,
	0, 1087, 0, 0, 0, 0, 0, 0, 1057, 0,
	0, 1098, 0, 0, 0, 0, 1097, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1056, 0, 1089, 0, 0, 0, 1076, 0,
	0, 1077, 0, 0, 0, 1073, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 1068,
	1069, 1075, 1074, 1070, 1071, 1072, 1093, 1088, 1067, 1065,
	1066, 1058, 1059, 1060, 1061, 1063, 1064, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1079, 1080, 1081, 1082, 0, 0, 0,
	0, 1083, 1062, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 0, 0, 1091, 1099, 0, 0, 0, 0,
	0, 1054, 1055, 1092, 1084, 1085, 1086, 1094, 1095, 1096,
	0, 0, 0, 1097, 0, 0, 0, 1087, 0, 0,
	0, 0, 0, 0, 1057, 0, 0, 1098, 0, 0,
	0, 1089, 0, 0, 0, 0, 0, 0, 1077, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1056, 0,
	0, 0, 0, 0, 1076, 0, 0, 0, 0, 0,
	0, 1073, 0, 0, 1088, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 0, 1068, 1069, 1075, 1074, 1070,
	1071, 1072, 1093, 0, 1067, 1065, 1066, 1058, 1059, 1060,
	1061, 1063, 1064, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1079,
	1080, 1081, 1082, 1078, 0, 0, 0, 0, 1062, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1054, 1055,
	1092, 1084, 1085, 1086, 1094, 1095, 1096, 0, 0, 0,
	1091, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1057, 0, 0, 1098, 0, 0, 0, 0, 1097,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1056, 0, 1089, 0, 0,
	0, 1076, 0, 0, 1077, 0, 0, 0, 1073, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1090,
	0, 0, 1068, 1069, 1075, 1074, 1070, 1071, 1072, 1093,
	0, 1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1079, 1080, 1081, 1082,
	0, 0, 0, 0, 1083, 1062, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1078,
	0, 0, 0, 0, 0, 0, 0, 1091, 1099, 0,
	0, 0, 0, 0, 1054, 1055, 1092, 1084, 1085, 1086,
	1094, 1095, 1096, 0, 0, 0, 1097, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1057, 0, 0,
	1098, 0, 0, 0, 1089, 0, 0, 0, 0, 0,
	0, 1077, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1056, 0, 0, 0, 0, 0, 1076, 0, 0,
	0, 0, 0, 0, 1073, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1090, 0, 0, 1068, 1069,
	1075, 1074, 1070, 1071, 1072, 1093, 0, 1067, 1065, 1066,
	1058, 1059, 1060, 1061, 1063, 1064, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1079, 1080, 1081, 1082, 1078, 0, 0, 0,
	0, 1062, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1092, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1091, 1099, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1089, 0, 0, 0, 0, 0, 0, 1077, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 0, 1068, 1069, 1075, 1074, 1070,
	1071, 1072, 1093, 0, 1067, 1065, 1066, 1058, 1059, 1060,
	1061, 1063, 1064, 1301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 1301, 0, 0, 1309, 1298, 1328, 1287,
	1319, 1318, 1078, 0, 1289, 1288, 0, 0, 0, 0,
	1330, 1329, 0, 0, 0, 0, 0, 0, 0, 1092,
	0, 0, 0, 0, 0, 0, 1309, 1298, 1328, 1287,
	1319, 1318, 0, 0, 1289, 1288, 0, 0, 0, 0,
	1330, 1329, 0, 0, 0, 0, 0, 0, 1324, 0,
	1316, 1315, 0, 0, 0, 0, 0, 0, 0, 0,
	1314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1324, 0,
	1316, 1315, 0, 1313, 1311, 1312, 0, 0, 1090, 0,
	1314, 1068, 1069, 1075, 1074, 1070, 1071, 1072, 1093, 0,
	1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064, 0,
	1297, 0, 0, 1313, 1311, 1312, 0, 1302, 1300, 1303,
	1304, 1305, 1306, 1307, 0, 1327, 0, 0, 0, 0,
	0, 0, 1291, 1290, 0, 0, 0, 0, 0, 0,
	1297, 0, 0, 0, 0, 0, 0, 1302, 1300, 1303,
	1304, 1305, 1306, 1307, 0, 1327, 0, 0, 1293, 546,
	0, 572, 1291, 1290, 0, 0, 0, 0, 0, 0,
	1317, 0, 0, 0, 1299, 0, 0, 0, 0, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 1293, 0,
	0, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	1317, 0, 0, 1310, 1299, 0, 0, 1431, 1429, 1430,
	1433, 1432, 550, 0, 0, 0, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 558, 559, 0, 0, 0,
	568, 0, 0, 1310, 0, 1294, 0, 0, 0, 0,
	0, 0, 0, 0, 573, 553, 1308, 1295, 0, 0,
	0, 0, 0, 0, 0, 0, 1332, 0, 0, 0,
	0, 0, 0, 0, 0, 1294, 0, 571, 0, 1292,
	0, 0, 0, 1325, 1326, 0, 1308, 1295, 0, 0,
	0, 0, 0, 0, 0, 0, 1332, 0, 0, 0,
	0, 0, 554, 0, 0, 1296, 0, 0, 0, 1292,
	1331, 0, 0, 1325, 1326, 0, 0, 0, 0, 0,
	555, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1296, 0, 0, 562, 0,
	1331, 0, 0, 557, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 561, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 560, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 565, 575, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 566, 0, 0, 0, 570, 0, 0, 0, 0,
	576, 0, 0, 0, 0, 563, 567, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 569,
}
var sqlPact = [...]int{

	440, -1000, -13, -1000, -1000, -1000, 152, -1000, -1000, -1000,
	-1000, 151, 148, 146, -1000, 145, 142, 141, 140, 139,
	136, 135, 134, 124, 123, 117, -1000, 115, -1000, -1000,
	-1000, -1000, 114, 113, 108, 107, 105, 102, 101, -1000,
	1229, 21575, 100, 99, 1418, -1000, 35527, 92, 91, 87,
	86, 1156, 85, 84, 25659, 1087, 1451, 81, 80, 79,
	78, 77, 1136, 35189, 4470, 1435, 1177, 1728, 34848, 21234,
	1672, 1427, 34507, -1000, -1000, 34166, 66, 64, 63, 61,
	60, -1000, -1000, 33825, 59, 58, 56, 55, 53, 45,
	44, 42, 39, 37, 36, 35, 34, 33, -1000, 31,
	30, 28, -1000, 42677, 21, 19, 14, 1164, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 911, 98, -1000, 1191, 685, 1499, 8571, 1097,
	1096, 1060, 1042, 1062, 37555, 35527, 13, -31, 11, -1000,
	2078, 683, 18788, 440, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 25318, 24977,
	33484, 33143, 6105, 799, -1000, -16, 22253, 35527, -1000, 73,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13860,
	13507, 571, 73, -1000, -1000, -1000, -1000, -1000, 32802, -1000,
	32461, 32120, 1602, 31779, -1000, -1000, -1000, -1000, 31438, -1000,
	-1000, 1973, 1752, 1739, 24636, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 31100, 30759, 30418,
	30077, 29736, 500, -1000, -1000, -1000, 17028, -1000, -1000, -1000,
	-1000, 10, -1000, 7, -1000, 4, 3, 2, 1, -1000,
	-1, -5, -1000, -6, -7, -1000, -8, -10, 29395, 900,
	1350, -1000, -1000, -15, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 35527, -1000, 14916, -1000, 497, -1000, 1714, -1000,
	14916, -1000, 1349, -1000, -1000, -1000, -1000, -1000, 35527, -1000,
	-1000, -1000, -1000, -1000, -1000, 2235, 1259, 496, 29054, -1000,
	1776, -1000, 631, 774, -1000, -1000, -1000, 9275, 156, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1405, 22605,
	1466, 2060, 1958, 2231, 1553, 1951, 1897, 1839, 1837, 1834,
	2225, 1064, 2223, 1887, 1041, 2222, 1785, 1286, 711, 2216,
	1712, 1711, -1000, -1000, -1000, -1000, 969, -1000, -1000, -1000,
	27011, -1000, -1000, 831, 938, 1191, -1000, -1000, -1000, 1441,
	2015, 2015, 2015, 2082, 305, 304, -1000, 98, -1000, 1231,
	-1000, 1248, -1000, -1000, -1000, 41835, -1000, -1000, 14916, 14916,
	14916, 14916, 14916, 1284, 526, -1000, 495, 494, 7162, -1000,
	-1000, 2201, -1000, -1000, -1000, -1000, 340, -1000, -1000, 14916,
	73, -1000, -1000, -1000, -1000, 491, 2211, -1000, 652, -1000,
	-1000, -1000, 623, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1800, 475, 473, 472, -1000, 471, -1000, -1000,
	470, 469, 468, 467, 465, 463, 462, 460, 459, 457,
	456, 455, 454, 453, 450, 1104, -1000, 663, -1000, -1000,
	663, 663, -1000, 437, 437, 438, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 437, -1000, -1000, -1000, 619, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 448, 1285, -1000, -1000, 1285, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 796, 36879, -19, 35527, -1000, 447, -19,
	-1000, -1000, 446, -1000, 9627, 9627, -1000, -1000, -1000, 14916,
	-1000, 1490, -1000, 4048, -169, 328, 575, -1000, 17732, 20542,
	-1000, -1000, 1120, 1922, 856, -1000, 1076, 1917, 514, -1000,
	1295, -1000, 1033, 1912, -148, 1829, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 22943, 22253, -16, -25, -1000, -1000, -1000,
	5753, 41835, -1000, 41835, -1000, 875, 19490, 73, -1000, -1000,
	-1000, -1000, 445, 1434, 644, -1000, 339, -1000, 28713, 644,
	1433, -1000, -1000, -1000, 27011, -1000, 35527, -1000, 35527, -1000,
	934, -1000, 37217, 120, 1905, -1000, -1000, 120, 1903, -1000,
	119, 1893, -1000, -1000, 1373, 1892, -1000, -25, 1888, -1000,
	-1000, 14916, -34, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	683, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 28372, 21914, 1443, 632, 41835, 2115, 42509,
	22943, 41835, 21914, -1000, -1000, 35527, -1000, 14916, -1000, 2111,
	1531, -20, -1000, -1000, -1000, -1000, -1000, 1462, 1516, 770,
	1173, 9275, 9275, 1981, -1000, 155, 6105, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 28031, -1000, -1000, -1000, 1211,
	35527, -1000, -1000, 1786, -1000, 21914, 35527, -1000, 35527, -1000,
	35527, -1000, 35527, -1000, 35527, -1000, -1000, -1000, -1000, -1000,
	3961, -1000, 1784, -1000, -1000, 35527, -1000, 1458, -1000, -1000,
	-1000, 27693, 27352, -1000, 1109, 827, -1000, -1000, 131, -1000,
	35527, 2042, 629, -1000, 1441, 1502, 1762, 702, 1353, 1541,
	13154, 1525, 14916, 98, -1000, -1000, 98, 98, 8218, -1000,
	-1000, -1000, 35527, -1000, 42479, 42509, 6105, 814, 14916, 14916,
	14916, 14916, 14916, 14916, 14916, 14916, 14916, 14916, 14916, 14916,
	14916, 14916, 14916, 14916, 14916, 14916, 14916, 14916, 14916, 14916,
	14916, 14916, 14916, 14916, 14916, 14916, 14916, 14916, 14916, 14916,
	1452, 14916, 795, 14916, 14916, 14916, 14916, 1383, 1174, 367,
	1456, -1000, 2146, 2146, 2146, 42108, 42108, 420, 526, -1000,
	14916, -1000, 130, 14916, 304, 40172, -17, 6810, -1000, -1000,
	-1000, 12802, 653, 41835, 73, 6457, -1000, 2199, 923, 1783,
	1646, 442, 564, 537, 508, 488, 14916, 14916, 12450, 12097,
	11744, 15620, 11391, 14916, 7514, 14916, 14916, 14916, 14916, 11038,
	10685, -1000, 441, -1000, -1000, -1000, -1000, 2197, -1000, -1000,
	2194, -1000, 811, 805, 2193, -1000, -20, -1000, 36879, -1000,
	35527, -19, 2110, 35527, 14916, 109, -1000, 40858, -1000, 109,
	-37, 41835, 1557, 1505, 19139, 1489, 1281, 1281, 1281, -1000,
	439, 515, 575, 5030, 10332, -1000, 25997, 1293, 192, 301,
	17380, 1490, -1000, 35527, -30, 1161, -1000, 24295, 2023, 2020,
	2021, 27011, 2096, 130, 2037, 1705, 794, 27011, 2036, 791,
	2089, 130, 1703, 789, 35527, 6105, 2035, 573, -1000, 35527,
	-1000, -1000, -1000, 1702, -40, -1000, -1000, 23957, 2106, 1886,
	-1000, 1180, -1000, 2105, 35527, 1347, 1428, -1000, -1000, 823,
	1883, 649, 398, 2103, 398, 19840, -1000, 35527, -1000, 35527,
	-1000, -1000, 35527, -1000, 35527, -1000, 35527, 35527, -1000, 35527,
	35527, -43, 4576, 23619, 788, -1000, 686, 23957, 129, -49,
	-1000, 662, -1000, -1000, -1000, -1000, 492, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 438, 1104, 437, 437, 437, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 619, -1000, -1000, 663, 663,
	663, -1000, -1000, -28, -1000, 1687, 598, -50, 716, -20,
	-1000, 1285, -1000, 1238, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2209, -1000, 2155,
	-1000, -1000, 2191, -21, -1000, -21, -1000, 6105, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 35527, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3316, -1000, -1000, -1000, -1000, -1000,
	-1000, 35527, 35527, 35527, -1000, 27011, 645, 1768, -1000, 2039,
	1502, 1762, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	41835, -1000, 386, -1000, -1000, 41835, 1070, 1577, -1000, 1577,
	-22, -1000, 40731, 1545, 35527, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 628, 922, 922, 819,
	819, 819, 819, 2101, 1092, 250, 979, 3509, 3509, 3509,
	3509, 3509, 3509, 3509, 3509, 568, 397, 397, 568, 568,
	568, 568, 568, 3509, 3509, 3509, 42108, 41981, 4192, 14916,
	14916, 781, 1129, 367, 4192, 14916, 4192, 4192, 4192, 4192,
	-1000, 1230, -1000, -1000, -1000, -1000, 1685, 434, 15620, 15620,
	-1000, -1000, -1000, 7162, 15972, -1000, -1000, -1000, -1000, 432,
	14916, -1000, 40299, -227, 300, -101, -1000, 14916, 513, -51,
	-1000, 903, -1000, 14916, -1000, -45, 14916, 14916, 14916, 299,
	-1000, 297, -1000, 778, -1000, 775, 763, 762, -1000, 431,
	1272, 430, 429, 14916, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 41708, 38272, 296, -1000, 1669, -101, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 295, -1000, 294, -1000, 41562,
	-101, 288, 39062, -1000, 15620, 15620, 15620, 7162, 428, 285,
	-1000, 40572, -1000, 41336, 9979, 9979, 9979, 283, 41298, 14916,
	-101, 38237, 4514, 3899, -56, -59, -1000, -61, -1000, 2179,
	-66, 281, 627, 625, 280, -1000, -1000, 427, -71, -73,
	649, 9627, 18436, 6105, -1000, 649, -1000, 14916, 19139, 19139,
	1172, 1497, 19139, -1000, -1000, -1000, -1000, 25997, 530, 575,
	25997, -1000, 2178, 1494, 279, -1000, -1000, -1000, 35527, 426,
	-1000, 575, 277, 1184, 35527, 35527, 35527, -1000, -1000, 1424,
	36541, 1414, 42509, 35527, -1000, 425, 424, 1508, 1507, 35527,
	35527, 36203, 35865, 35527, 1029, 130, -1000, 622, 422, 35527,
	1071, 620, 35527, 130, -1000, 421, 35527, 1003, -1000, 617,
	1621, 1359, -1000, 868, 1668, 35527, 276, -74, -24, 42509,
	-1000, -1000, -1000, -1000, -1000, 35527, 476, 35527, 130, 35527,
	2208, 130, 35527, 1873, 1901, 556, 35527, 1541, 14916, 1258,
	-1000, 18084, 675, 35527, 990, 72, -1000, -1000, -1000, 593,
	35527, -1000, -1000, 120, 120, -1000, 119, 1373, -25, -1000,
	-1000, -1000, 35527, 22943, -80, -1000, -1000, 42509, -1000, 522,
	768, -1000, 2173, 637, 22943, 35527, 9275, 9275, -1000, 1562,
	-1000, -1000, 984, -1000, 1098, -1000, -1000, -1000, -1000, 9275,
	-1000, -32, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1330,
	1123, -1000, -1000, -1000, 1070, -1000, 14916, 2169, -1000, -1000,
	-1000, 8218, -1000, -1000, -1000, 35527, -163, 14916, 4192, 4192,
	14916, 15620, 15620, -1000, 4192, -1000, -1000, -1000, -1000, -1000,
	1660, 414, 14916, 42509, 38812, 38369, -81, -1000, 14916, -27,
	-1000, 14916, -1000, 40026, -1000, -1000, 520, 1890, -1000, 14916,
	41139, 274, 8923, -1000, 41017, -46, -46, -1000, 2206, 1436,
	1110, 1280, 959, 2167, -1000, 20191, 656, 1320, 39899, 42479,
	42509, -1000, 14916, -1000, -1000, 1659, 14916, -1000, 42479, 42509,
	15620, 15620, 15620, 15620, 15620, 15620, 15620, 15620, 15620, 15620,
	15620, 15620, 15620, 15620, 15620, 15620, 15620, 15620, 15620, 1526,
	15620, 2143, 2143, 2143, -29, 14916, -1000, 1718, 1659, 14916,
	14916, 42509, 264, 252, 251, -1000, 14916, -101, 14916, 14916,
	14916, -1000, -1000, -1000, 249, -1000, 2164, -1000, -1000, -1000,
	-1000, 129, -1000, -1000, 1645, -1000, -86, -1000, 1490, -1000,
	1645, 41835, -1000, 1172, -1000, 413, 14916, 19139, -1000, 511,
	-1000, -99, -1000, 25997, -1000, 509, -222, -1000, 591, -1000,
	575, 409, 35527, 25997, -1000, -1000, -1000, 761, 760, 1854,
	-1000, 1409, -1000, 680, -1000, 1085, 14916, 16676, 408, 407,
	1167, -1000, 1843, 1373, 1840, 1373, -1000, -30, 1054, -1000,
	20893, 14916, -1000, 759, 20893, -1000, -1000, 14916, -1000, 743,
	20893, 637, 1657, 833, -1000, 864, -1000, 1608, -1000, 23957,
	406, 35527, 405, -1000, 403, -1000, -1000, 401, 35527, 1476,
	556, 23281, -1000, 644, 990, -1000, 41835, -1000, 990, 7866,
	2029, -102, -1000, -1000, -1000, 649, 19840, 19139, 14916, -107,
	-1000, -1000, -1000, -1000, -32, 1991, 1991, -1000, 2160, -1000,
	506, 248, -1000, 26673, -1000, -32, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 35527, 1591, 6105, 35527, 35527, 1333, 39753,
	-1000, 2013, 6105, 2108, 4192, 3476, 238, 14916, 42509, 42254,
	-108, 14916, 14916, -1000, 247, 14916, 504, 41835, -1000, -1000,
	-1000, 41835, 14916, 2204, 14916, 236, 235, 234, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 221, -1000, -1000, 37893,
	14916, 219, -1000, 215, 214, 41835, 1718, 41835, -1000, -1000,
	655, 655, 890, 890, 890, 890, 2143, 188, 783, 489,
	715, 715, 715, 700, 592, 592, 715, 715, 715, 1656,
	1483, 399, 554, 14916, 212, -1000, -1000, 41835, 41835, 210,
	-1000, -1000, -1000, -101, 278, 39626, 39480, -1000, 209, 208,
	1642, 2079, -1000, 19139, 1642, -1000, 35527, 41835, -1000, -169,
	-1000, 2144, -1000, -1000, 1494, -1000, 5396, 25997, 35527, -114,
	-1000, 35527, 35527, 35527, 1838, -1000, 1379, -1000, 39353, -116,
	-1000, 313, 2056, 14916, -1000, -1000, 396, 16676, 35527, -1000,
	1504, 1513, 717, 35527, -1000, 35527, -1000, 35527, 35527, 35527,
	-1000, 395, 73, -121, 35527, -1000, -124, 35527, -1000, -1000,
	22943, 803, -1000, 1257, 1613, -1000, 16676, 384, 35527, 23957,
	2102, 16676, 1346, 1491, 556, 23281, -1000, 823, -1000, -1000,
	-36, -1000, 370, 130, 990, -1000, -39, 41835, 587, 1969,
	-1000, 1965, 503, -1000, -1000, -52, 376, -1000, 572, 560,
	-1000, -62, -1000, 570, -1000, -1000, -1000, -1000, -1000, -1000,
	2013, 14916, 14916, 42254, -129, -1000, 4192, 4192, -1000, 39207,
	-1000, 41835, -1000, 41017, -1000, -1000, -1000, -1000, 1221, -1000,
	38981, -1000, -1000, -1000, -1000, 15620, 1654, 374, 42509, 38943,
	-1000, -1000, 14916, -1000, -1000, -1000, -1000, 647, 14916, 14916,
	1490, 647, -136, 575, -1000, -1000, -1000, 2124, -1000, -137,
	-1000, -1000, -1000, -1000, 35527, -1000, 35527, -1000, 6105, 35527,
	1655, 1388, -1000, -1000, 1500, 373, 15620, 35527, -1000, 1090,
	16676, 2013, 73, 6105, 2013, 38784, 6457, -144, -146, 1367,
	-1000, 1365, 14916, -1000, 42509, 1373, 1373, -1000, 742, 740,
	14916, 739, -1000, 729, -1000, -83, 20893, -1000, -1000, 2077,
	1264, -149, 16676, -151, 205, 130, -152, 35527, -1000, 556,
	23281, -1000, 1901, 1932, 35527, 1999, -1000, -1000, 367, 366,
	363, -1000, 26335, 26335, 22943, 22943, 1591, -1000, 35527, -1000,
	4192, 4192, -1000, -1000, 204, 1320, 2076, -1000, 2438, 15620,
	42509, -157, -1000, 38662, -1000, 35527, 41835, -101, -1000, -1000,
	25997, 502, -1000, -1000, 1279, -1000, -1000, 35527, 1402, -1000,
	-1000, 14916, 554, 361, 1608, 358, -1000, -1000, -1000, -1000,
	-1000, -1000, 2056, -45, -1000, 1067, -1000, -1000, 41835, 2051,
	-1000, -1000, 35527, 35527, -46, 356, 354, -1000, 1202, 35527,
	1090, -159, -1000, 1608, -1000, 1090, 353, 23281, -1000, 1476,
	830, -165, 35527, -1000, 22943, 22943, -1000, -166, -1000, -1000,
	-1000, -167, -1000, 1271, 14916, 2438, -172, -1000, -1000, -96,
	-1000, 2100, -1000, -1000, -1000, -1000, 1833, 38400, 1448, 35527,
	-1000, 35527, 2013, 198, 35527, 684, 6105, -1000, -1000, 197,
	14916, 14916, 351, 349, 345, 1608, 1090, -1000, 1608, 16676,
	-1000, 1491, 921, -1000, 649, -1000, -173, -174, -1000, -1000,
	196, 15268, 15268, -101, -1000, 35527, 342, 1822, -1000, 1340,
	1308, 194, -182, -1000, -1000, 339, -1000, 14916, -1000, 2204,
	-183, -188, 35527, 35527, 35527, -1000, 1608, -1000, -189, -1000,
	19840, -1000, 637, 637, -1000, -1000, -1000, 16324, 1312, 971,
	40445, -1000, -1000, -1000, 35527, -1000, 1344, 1341, 924, -1000,
	-1000, -1000, -1000, -1000, 1448, 41835, -1000, -1000, -190, -191,
	-196, -1000, 1090, -180, -1000, -1000, 2123, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1952, -1000, 694, 1287, 1287, 1340,
	335, 334, 1315, 1608, -1000, 14564, -1000, 2130, -1000, -1000,
	1486, -1000, -1000, 1214, 1194, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 169, 6105, 162, 6105, -1000, 671, -1000,
	669, 330, 1465, -64, 14212, 817, 314, -126, -1000, -197,
	-1000, 41835, -1000, 316, -1000, 14212, 1214, -1000, 14212, 14212,
	-198, -1000, -1000, -199, -1000, -67, 1194, -139, -1000, -1000,
	1194, -1000,
}
var sqlPgo = [...]int{

	0, 2611, 2610, 1768, 2077, 2605, 2604, 2603, 2601, 2600,
	2598, 2596, 2594, 2593, 2592, 2590, 2589, 2588, 2587, 2586,
	2585, 2583, 2578, 2577, 2071, 2576, 2059, 2572, 2571, 2568,
	2566, 2563, 32, 2559, 2557, 2053, 2555, 2544, 2543, 2541,
	2537, 2534, 2017, 2530, 2008, 2512, 2509, 2508, 2507, 2506,
	2003, 2503, 98, 112, 1955, 2502, 2491, 1949, 1942, 1903,
	2489, 1901, 2487, 2486, 1824, 1821, 2484, 58, 2483, 2477,
	2476, 1815, 1813, 2475, 2474, 2473, 151, 2472, 1810, 2470,
	2469, 2468, 2466, 2464, 2463, 2461, 2459, 2455, 2450, 2447,
	2446, 2445, 2444, 2441, 2440, 2432, 2427, 2426, 158, 2425,
	2423, 1808, 1784, 2422, 2421, 33, 38, 22, 62, 96,
	144, 2821, 142, 2418, 2417, 2412, 2411, 2410, 2409, 41,
	100, 94, 2408, 325, 2406, 2404, 34, 37, 24, 17,
	2403, 91, 2402, 2399, 2478, 27, 2398, 2384, 133, 2379,
	25, 26, 2328, 153, 149, 113, 119, 2378, 2373, 2370,
	45, 117, 6, 4, 3, 2, 1, 2368, 7, 5,
	2367, 2363, 18, 82, 77, 2362, 52, 60, 2361, 2360,
	127, 2351, 63, 95, 1668, 106, 121, 654, 81, 2349,
	67, 19, 65, 2348, 2347, 159, 39, 87, 140, 111,
	2340, 61, 157, 131, 74, 126, 139, 2334, 2333, 2332,
	104, 2331, 118, 99, 2330, 2329, 72, 2325, 92, 137,
	2324, 138, 108, 2322, 2319, 122, 2318, 120, 2317, 2315,
	156, 148, 114, 16, 51, 66, 10, 1759, 1751, 132,
	93, 54, 56, 2314, 789, 1187, 1292, 80, 103, 75,
	48, 28, 57, 89, 146, 29, 2313, 2309, 134, 2308,
	2307, 2305, 2302, 2301, 102, 2300, 2299, 2296, 78, 50,
	46, 110, 43, 130, 125, 109, 152, 101, 2295, 88,
	129, 2294, 245, 2293, 2292, 1665, 116, 2291, 2286, 2284,
	1424, 1255, 1137, 1039, 2283, 2282, 1042, 1008, 2281, 2280,
	79, 2278, 115, 107, 90, 141, 145, 23, 2277, 123,
	30, 2276, 40, 21, 0, 357, 83, 2275, 124, 71,
	2274, 2273, 2270, 2268, 31, 13, 9, 12, 15, 11,
	49, 36, 2267, 2263, 128, 85, 68, 2261, 154, 2258,
	2257, 2256, 44, 2255, 14, 2253, 20, 2252, 2251, 35,
	8, 2250, 2247, 155, 2246, 97, 2245, 2074, 2243, 147,
	2242, 2240, 1890, 2238, 53, 105,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 121, 121, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 118, 118, 123, 123, 123, 125, 125,
	122, 122, 117, 117, 24, 24, 65, 65, 108, 58,
	58, 58, 302, 302, 303, 303, 104, 104, 105, 105,
	105, 105, 106, 106, 107, 107, 107, 34, 34, 34,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 42, 42, 43, 43, 43, 43, 43,
	43, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 49, 49, 49, 47, 47, 47, 46, 46,
	46, 45, 45, 45, 48, 48, 48, 176, 176, 175,
	175, 179, 179, 50, 50, 50, 50, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 53, 53, 53, 53, 53, 53, 53,
	271, 271, 270, 51, 51, 246, 246, 54, 54, 201,
	201, 55, 55, 55, 55, 55, 56, 56, 66, 66,
	343, 343, 343, 347, 347, 348, 348, 349, 349, 349,
	349, 349, 349, 349, 345, 345, 61, 61, 61, 61,
	62, 62, 62, 63, 63, 103, 103, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 29, 30, 30, 31,
	31, 32, 32, 72, 72, 72, 74, 71, 71, 71,
	73, 73, 73, 73, 75, 75, 76, 76, 76, 76,
	76, 77, 77, 296, 294, 294, 295, 295, 148, 148,
	148, 148, 148, 149, 149, 149, 301, 301, 301, 301,
	301, 301, 300, 300, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 90, 90, 90, 98, 98, 98, 98, 98, 98,
	98, 79, 79, 84, 84, 84, 84, 84, 80, 80,
	85, 85, 86, 86, 87, 87, 87, 87, 87, 87,
	81, 81, 81, 81, 89, 89, 89, 89, 88, 88,
	94, 94, 94, 94, 94, 94, 91, 91, 91, 91,
	92, 92, 92, 95, 95, 95, 95, 82, 82, 83,
	83, 96, 96, 97, 97, 97, 97, 97, 93, 93,
	93, 344, 344, 346, 346, 59, 59, 38, 38, 39,
	39, 150, 150, 151, 151, 225, 225, 225, 225, 152,
	152, 124, 124, 124, 153, 153, 154, 154, 155, 155,
	155, 157, 157, 158, 158, 159, 159, 156, 156, 156,
	224, 312, 312, 313, 313, 313, 313, 313, 313, 314,
	314, 314, 314, 314, 314, 314, 310, 310, 311, 308,
	308, 309, 309, 309, 309, 350, 350, 223, 223, 162,
	162, 315, 315, 315, 315, 316, 316, 316, 316, 316,
	319, 318, 317, 317, 317, 317, 317, 257, 257, 257,
	100, 100, 40, 40, 130, 130, 41, 41, 37, 37,
	37, 205, 205, 166, 166, 262, 262, 262, 141, 141,
	119, 119, 119, 17, 13, 13, 13, 13, 13, 13,
	23, 23, 21, 21, 206, 206, 207, 207, 60, 60,
	64, 64, 69, 69, 99, 99, 99, 99, 99, 99,
	25, 25, 25, 25, 33, 33, 33, 33, 68, 68,
	352, 352, 137, 137, 137, 137, 138, 138, 220, 220,
	221, 221, 353, 353, 222, 222, 222, 132, 131, 133,
	133, 36, 36, 36, 126, 126, 127, 127, 128, 128,
	129, 129, 354, 354, 57, 57, 57, 102, 102, 144,
	144, 217, 217, 217, 219, 219, 218, 218, 218, 191,
	191, 191, 101, 101, 171, 171, 181, 181, 182, 182,
	268, 183, 67, 67, 111, 111, 109, 109, 109, 109,
	109, 109, 109, 109, 110, 110, 110, 112, 112, 112,
	112, 112, 112, 112, 115, 115, 115, 116, 116, 116,
	114, 114, 325, 325, 325, 328, 328, 324, 326, 326,
	327, 327, 351, 351, 192, 192, 192, 161, 160, 160,
	164, 164, 163, 165, 165, 261, 261, 261, 189, 189,
	188, 188, 188, 188, 210, 210, 208, 208, 209, 209,
	213, 213, 214, 214, 214, 215, 215, 216, 216, 187,
	187, 242, 242, 212, 212, 211, 113, 113, 113, 170,
	170, 170, 172, 172, 232, 232, 232, 233, 233, 231,
	231, 231, 231, 263, 263, 263, 263, 263, 263, 263,
	263, 341, 341, 341, 342, 342, 260, 260, 264, 264,
	264, 264, 264, 264, 258, 258, 258, 258, 259, 259,
	269, 269, 195, 195, 195, 195, 193, 193, 194, 194,
	265, 265, 265, 265, 190, 190, 266, 266, 266, 226,
	226, 272, 272, 272, 290, 290, 169, 169, 169, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	274, 274, 274, 274, 276, 276, 276, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 289, 289, 289, 289, 289,
	277, 277, 284, 284, 285, 285, 286, 287, 278, 278,
	279, 279, 280, 281, 288, 288, 288, 288, 292, 292,
	282, 282, 282, 282, 282, 283, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	203, 203, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 236, 236, 236, 236, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	320, 320, 320, 320, 320, 320, 320, 320, 322, 322,
	323, 323, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 329, 329, 330, 330, 332, 332, 333, 333,
	334, 335, 335, 335, 336, 337, 337, 331, 331, 338,
	338, 338, 339, 339, 340, 340, 340, 340, 340, 248,
	248, 249, 250, 256, 256, 256, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 139, 139, 139, 139, 139, 178, 178, 177,
	177, 245, 245, 243, 243, 247, 247, 196, 196, 291,
	291, 291, 291, 291, 291, 291, 197, 197, 197, 204,
	198, 198, 199, 199, 199, 199, 199, 239, 240, 200,
	200, 200, 241, 241, 251, 255, 255, 254, 253, 253,
	252, 252, 229, 229, 230, 230, 228, 227, 186, 186,
	185, 185, 184, 184, 355, 355, 180, 180, 267, 267,
	267, 267, 173, 173, 146, 146, 174, 174, 142, 142,
	145, 145, 143, 143, 143, 143, 167, 167, 168, 168,
	140, 140, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 293, 293, 293, 244, 134, 134, 134,
	135, 135, 136, 136, 298, 298, 298, 299, 299, 299,
	299, 297, 297, 297, 297, 297, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 2, 7, 3, 2, 2, 2, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 1, 3, 1,
	2, 2, 3, 2, 2, 5, 3, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	1, 3, 1, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 2, 6, 2,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 1, 2,
	2, 3, 2, 4, 3, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 1, 4, 7, 1,
	3, 2, 4, 6, 6, 3, 5, 3, 2, 6,
	3, 3, 4, 4, 3, 3, 1, 3, 3, 1,
	1, 2, 1, 1, 1, 1, 1, 3, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 3, 3, 1, 1, 1, 1, 1, 2,
	2, 3, 3, 4, 4, 3, 4, 4, 4, 3,
	2, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 2, 3, 3, 3, 2, 3,
	4, 3, 5, 3, 4, 5, 2, 3, 3, 3,
	4, 2, 3, 4, 3, 3, 3, 4, 4, 4,
	4, 2, 3, 7, 7, 7, 4, 5, 5, 5,
	5, 2, 0, 2, 0, 3, 2, 8, 10, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 1, 0, 9, 9, 6, 7,
	5, 3, 5, 1, 3, 1, 1, 10, 11, 9,
	3, 2, 0, 3, 1, 2, 2, 3, 6, 2,
	1, 1, 2, 4, 2, 5, 7, 8, 5, 3,
	1, 4, 6, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 2, 4, 3, 3, 0, 6, 3, 11, 14,
	4, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 8, 10, 8, 10,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	3, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 2, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 0, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 3, 6, 3, 1,
	3, 1, 4, 2, 8, 5, 4, 3, 0, 2,
	2, 0, 8, 3, 2, 0, 1, 3, 1, 1,
	3, 5, 1, 1, 3, 3, 1, 2, 4, 4,
	2, 3, 5, 5, 2, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 8, 8, 2, 4, 4, 4,
	2, 2, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 4, 5, 1, 0,
	2, 2, 1, 1, 1, 0, 2, 5, 2, 3,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 3,
	0, 2, 0, 1, 0, 2, 4, 2, 5, 3,
	2, 0, 1, 3, 3, 5, 1, 1, 3, 2,
	4, 4, 0, 8, 4, 6, 3, 3, 1, 5,
	5, 0, 2, 3, 1, 3, 2, 0, 3, 4,
	5, 4, 5, 4, 5, 2, 4, 1, 1, 0,
	5, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 1, 1, 2, 3, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 3, 4, 4, 5, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 4, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	2, 1, 1, 3, 1, 1, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 3, 4, 1,
	1, 1, 5, 1, 3, 3, 1, 3, 3, 1,
	3, 3, 1, 1, 3, 3, 1, 1, 6, 6,
	4, 3, 4, 3, 4, 3, 4, 4, 3, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 3,
	4, 3, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	5, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	3, 1, 3, 3, 3, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 1, 1, 2, 2, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 381, -4, -24, -26, -29, -34,
	-35, -55, -42, -43, -44, -54, -50, -56, -57, -58,
	-59, -51, -65, -64, -66, -69, -67, -60, -61, -70,
	-78, -99, -100, -101, -102, -5, -6, -7, -8, -9,
	23, 34, -27, -28, 47, -30, 71, -36, -37, -38,
	-39, 73, -40, -41, 94, -327, 98, -45, -46, -47,
	-49, -48, 102, 109, 112, 134, 145, 231, 237, 258,
	260, 262, 269, -109, -111, 256, -62, -63, -71, -72,
	-73, -74, -103, 281, -79, -80, -81, -82, -83, -84,
	-85, -86, -87, -88, -89, -90, -91, -92, -93, -94,
	-95, -96, -97, 284, -25, -33, -68, 323, -11, -12,
	-15, -14, -16, -13, -20, -22, -19, -21, -23, -17,
	-18, -10, 111, -325, -112, -110, 378, 257, 332, 35,
	293, 61, 105, 264, 348, 355, -115, -113, -114, -116,
	274, 340, 303, 382, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 2, 303, 343,
	87, 153, 242, -343, 2, -174, 303, 87, -143, -134,
	371, 4, -304, -306, 20, 21, 23, 33, 34, 35,
	40, 44, 47, 48, 55, 60, 61, 62, 67, 64,
	65, 66, 69, 71, 72, 75, 76, 77, 85, 86,
	88, 90, 94, 96, 98, 101, 102, 104, 109, 111,
	110, 112, 122, 123, 128, 130, 135, 141, 142, 145,
	146, 154, 157, 159, 152, 169, 170, 171, 175, 176,
	177, 180, 179, 184, 185, 188, 189, 192, 194, 196,
	197, 200, 198, 202, 203, 205, 204, 210, 212, 213,
	215, 218, 221, 224, 227, 228, 229, 230, 231, 233,
	235, 237, 239, 240, 241, 242, 243, 245, 246, 248,
	249, 250, 251, 252, 256, 254, 255, 257, 258, 259,
	260, 262, 264, 265, 267, 282, 283, 294, 269, 270,
	271, 272, 273, 277, 275, 278, 279, 281, 284, 286,
	289, 292, 293, 295, 298, 299, 296, 291, 302, 304,
	305, 306, 307, 308, 309, 310, 311, 318, 319, 323,
	324, 325, 326, 329, 330, 331, 332, 334, 337, 338,
	339, 344, 349, 350, 351, 352, 353, 28, 36, 37,
	38, 39, 41, 42, 45, 46, 51, 52, 53, 56,
	89, 91, 92, 108, 113, 114, 124, 125, 126, 136,
	138, 147, 148, 151, 158, 160, 161, 162, 163, 164,
	166, 173, 174, 182, 199, 209, 211, 222, 226, 234,
	236, 244, 266, 276, 287, 288, 297, 300, 313, 314,
	315, 320, 321, 336, 340, 341, 381, 381, 2, 170,
	241, -142, -134, 87, 381, 381, 381, 381, 303, 2,
	333, 343, -205, 87, 328, 381, 381, -134, 237, 22,
	2, 96, 157, 331, 330, 22, 233, 275, 305, 307,
	2, 381, 381, 381, 381, 381, 2, 343, 303, 153,
	87, 333, -134, 2, -53, 2, 378, -52, -4, -35,
	-44, -54, -50, -24, -26, -42, -58, -57, -59, -61,
	-65, -64, -67, -71, -72, -78, -101, -102, 281, 111,
	-347, 2, 22, -348, -349, 73, 102, 134, 274, 157,
	96, 330, 303, 2, 170, 2, -134, 2, -343, 2,
	170, 2, -347, 2, -134, 2, -138, 2, 269, -134,
	381, 381, 381, 381, 381, 189, 55, 266, 278, -76,
	319, -75, 313, -296, -77, 2, -175, 200, -134, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 2, -98, 278, 34,
	55, 22, 60, 88, 135, 153, 154, 176, 68, 69,
	240, 189, 171, 318, 177, 279, 304, 319, 73, 334,
	308, 110, 4, 87, 200, 280, 313, 381, 381, 381,
	-351, 2, 303, 271, 284, -110, -112, -111, -163, -164,
	327, 165, 107, 220, -109, -111, 2, -325, -98, 278,
	2, 55, 22, -294, 2, -234, 216, -236, 369, 370,
	364, 206, 354, -248, -238, -251, 108, 266, 378, -142,
	-237, 384, 9, 93, -322, -111, 29, -249, -250, 49,
	-134, 7, 8, 5, 6, -140, -274, -244, -283, 322,
	115, 208, -320, -321, 4, -304, -298, -275, -285, -279,
	-282, 166, 58, 79, 80, 83, 81, 84, 280, 333,
	50, 28, 113, 114, 226, 234, 300, 320, 321, 147,
	209, 148, 56, 136, 182, 101, 37, 39, 41, 42,
	51, 52, 89, 91, 92, 124, 125, 126, 158, 160,
	161, 162, 163, 164, 211, 244, 287, 297, 314, 315,
	341, -305, -286, -287, -280, -281, 74, 116, 133, 156,
	149, 168, 172, 183, 186, 195, 201, 223, 225, 263,
	285, -288, -352, 2, 319, 319, 2, -352, 2, -352,
	2, -137, 2, 319, 316, -328, 245, -324, -134, -328,
	381, 381, 383, 381, -160, -161, 2, 22, 99, 378,
	2, -263, 2, 376, -265, -142, -111, -264, 378, 217,
	-3, 2, -265, 147, -142, 2, -265, 147, -142, 2,
	-134, 2, -145, 147, -142, -297, 4, -304, -306, -305,
	-307, 58, 22, 24, 25, 26, 27, 29, 30, 31,
	32, 43, 49, 50, 54, 57, 59, 68, 73, 78,
	79, 81, 80, 82, 83, 84, 93, 95, 97, 99,
	100, 103, 105, 107, 115, 117, 129, 131, 132, 134,
	137, 139, 150, 153, 155, 165, 167, 178, 181, 187,
	190, 191, 206, 207, 208, 214, 216, 217, 219, 220,
	232, 238, 247, 261, 274, 280, 290, 301, 303, 312,
	316, 317, 322, 327, 328, 333, 335, 342, 343, 345,
	346, 347, 348, 316, 383, -174, -167, -134, -228, -227,
	380, -234, 2, -234, 2, 132, 378, -185, -186, -227,
	-228, 2, -175, 147, -134, 2, -175, 2, 153, -134,
	147, 2, -134, 22, 132, 2, 167, 2, 167, 2,
	-266, 2, -265, -176, 147, 2, -175, -176, 147, 2,
	-146, 147, 2, -145, -134, 147, 2, -167, 147, 2,
	-201, 378, -271, 2, -270, -299, 4, -304, -306, -305,
	340, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 278, 216, 383, -175, -234, -246, 378,
	132, -234, 216, -134, 2, 282, 2, 378, -76, 53,
	319, -221, 2, -222, -131, -132, -133, 169, 239, 243,
	353, 316, 359, 132, -294, -179, 380, -98, 2, -302,
	2, -300, 9, -299, 5, 282, 2, 240, 279, 55,
	132, 2, 2, -344, 2, 216, 132, 2, 132, 2,
	132, 2, 132, 2, 132, 2, 2, 240, 279, 2,
	129, 2, 318, 2, 2, 132, 2, 169, 239, 294,
	2, 303, 343, 2, 132, 132, 353, 2, -190, -265,
	303, 353, 22, -163, -164, -211, -188, 129, -208, -209,
	187, 117, 214, -192, 22, 99, -192, -192, 44, 379,
	379, -98, 282, 2, 10, 11, 57, 33, 369, 370,
	371, 372, 127, 373, 374, 367, 368, 366, 357, 358,
	361, 362, 363, 70, 360, 359, 63, 193, 268, 118,
	119, 120, 121, 253, 13, 14, 15, 26, 219, 186,
	354, 149, 285, 364, 16, 17, 18, 168, 36, 150,
	-139, -147, -234, -234, -234, -234, -234, 225, -184, -229,
	376, -111, 378, 378, -111, -234, -177, 378, 7, -111,
	-243, 376, -252, -234, -185, 378, 5, 378, 5, -329,
	349, 129, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 236, -292, 344, -292, -292, -276, 378, -276, -277,
	378, -276, 350, 355, 378, -220, -221, -220, 316, -138,
	383, -328, -168, 378, 378, -180, -267, -234, 371, -180,
	-177, -234, 74, -195, 172, 201, 133, 183, 263, 156,
	7, -53, -231, 384, 378, 371, -260, 355, -111, -264,
	378, -263, -142, 378, -121, 254, -120, 21, 23, 102,
	338, 108, 291, 309, 111, 270, 254, 108, 111, 254,
	291, 309, 270, 254, 108, 384, 111, -302, -143, 383,
	-297, 371, 295, 379, -173, -142, -186, 378, -162, 206,
	-130, -326, 348, -162, 378, -135, 147, 2, -134, -326,
	206, -266, -144, -142, -144, 281, -134, 30, -123, 383,
	48, 259, 108, -123, 108, -123, 383, 108, -123, 108,
	108, -177, 379, 383, -343, -349, 73, 378, 30, -245,
	-272, -273, -275, -284, -278, -282, -283, 40, 46, 45,
	174, 173, 310, 199, 276, 288, 336, 151, 38, 215,
	159, 4, 158, 160, 161, 162, 163, 164, 287, 37,
	244, 125, 126, 124, 101, 92, 91, 211, 42, 41,
	-286, -287, -280, -281, 89, 314, 315, 166, 39, 52,
	51, 341, 297, -303, -302, -343, -296, -177, 30, -221,
	2, -353, 383, 185, -149, 192, 205, 141, 217, 351,
	-301, 5, 4, -244, -257, 93, 189, -283, 8, 370,
	-293, 7, 369, -295, -294, -295, 77, 380, -297, -175,
	22, 283, 2, -296, -346, 129, -343, -296, -296, -296,
	-296, -296, 278, -53, 129, -134, 185, -296, 2, -296,
	2, 303, 153, 303, -123, 383, -142, 64, 65, 353,
	-211, -188, -189, -188, -212, -211, 330, -209, -208, -213,
	-234, 22, -216, 123, 202, -234, -236, -110, -110, -110,
	-165, -261, -234, 238, 153, -296, -290, -272, -289, 249,
	250, 248, 252, 251, -272, -297, 313, -234, -234, -234,
	-234, -234, -234, -234, -234, -234, -234, -234, -234, -234,
	-234, -234, -234, -234, -234, -234, -234, -234, -234, -234,
	-234, -234, -234, -234, -234, -234, -234, -234, -234, 186,
	149, 285, 36, 150, -234, 316, -234, -234, -234, -234,
	198, 206, 208, 322, 115, 329, 99, 212, -355, 301,
	32, -241, -111, 378, -256, 27, 290, 22, -248, 266,
	378, -229, -234, -230, -178, -177, 379, 383, -178, -247,
	-243, -255, -254, 345, 379, -177, 342, 22, 99, 371,
	2, 7, -202, 352, 197, 90, 142, 196, -203, 273,
	-330, 122, 137, 378, 379, 2, 379, 2, 379, 2,
	379, 2, -234, -234, -196, 2, -291, -177, 4, 352,
	197, 90, 142, 196, 273, -196, 2, -197, 2, -234,
	-177, -198, -235, -236, 369, 370, 364, 378, 266, -199,
	2, -234, -178, -234, 43, 181, 317, -200, -234, 132,
	-177, -234, -234, -234, -177, -177, 2, -177, 2, 378,
	7, 7, 313, 313, 7, -138, -324, 30, -167, -177,
	-170, 383, 132, 30, 4, -170, 379, 383, 172, 172,
	-263, -195, 172, -193, 223, -193, -193, -341, 378, 377,
	-260, -297, 376, 385, -178, 2, -259, -258, 30, -134,
	221, 379, -142, 383, 316, -206, 68, 59, -224, 147,
	59, -308, -134, 68, -309, 54, 328, 238, 131, -206,
	68, -206, 68, 68, -265, 33, -67, 66, 132, 316,
	-265, 66, 316, 33, -67, 132, 316, -145, -297, 66,
	-269, 356, -134, 132, 379, 383, -150, -167, -151, -134,
	-225, -224, -310, -311, -308, 153, 328, 116, 30, 108,
	230, 30, 216, 206, -126, 306, 108, -226, 346, -217,
	-67, 378, 93, 30, -217, -181, -182, -268, -183, -142,
	378, -134, -175, -176, -176, -145, -146, -134, -167, 379,
	-53, -270, 316, 335, -151, -52, 379, 383, -169, 29,
	376, -202, 378, -269, 383, 132, 359, 316, 379, 319,
	-222, -148, 243, 289, 255, 277, 8, 7, 7, 383,
	-297, -345, -134, 278, -53, -142, -145, -142, -265, 348,
	129, 65, -189, -212, -214, -293, 378, 370, -215, 266,
	267, 383, -119, 31, 97, 175, -142, 353, -234, -234,
	316, -355, 301, -241, -234, 198, 208, 322, 115, 329,
	99, 212, 132, 378, -235, -235, -177, -238, 378, -177,
	377, 387, 379, -234, 377, 377, 383, -253, -254, 103,
	-234, -164, 383, -163, -234, -177, -177, 379, 379, 316,
	316, 316, 316, 378, -335, 224, 378, 378, -234, 30,
	383, 379, 132, 379, 379, -204, 232, 379, 10, 11,
	369, 370, 371, 372, 127, 373, 374, 367, 368, 366,
	357, 358, 359, 63, 193, 268, 13, 14, 15, 168,
	150, -235, -235, -235, -177, 378, 379, -239, -240, 132,
	129, 30, -200, -200, -200, 379, 132, -177, 383, 383,
	383, 379, 379, 379, 7, 379, 383, 379, 353, 353,
	379, 378, 379, 379, -226, -267, -172, 2, -263, -297,
	-226, -234, -263, -263, -194, 335, 216, 172, -263, -258,
	379, -342, 7, -260, -259, 7, -233, -232, 130, 204,
	379, -134, 378, -260, 379, -120, -142, -134, -134, 206,
	-224, 147, -125, 206, -272, -134, 378, 378, 175, 175,
	-134, -134, 147, -134, 147, -134, -134, -121, 254, -67,
	353, 378, -142, 254, 353, -134, -67, 378, -134, 254,
	353, -104, 146, 212, 295, 132, -142, 379, 379, 383,
	-135, 153, -135, -67, -175, 5, -67, -142, 108, -127,
	104, -354, 359, -134, -210, -208, -234, -191, -219, 261,
	216, -173, 340, -134, -191, -171, 383, 132, 359, -173,
	-123, -123, -123, -123, -345, -302, 379, -272, 376, 377,
	7, 7, -107, 348, -302, -345, -294, -294, -131, 326,
	62, 243, -294, 383, 218, 242, 87, 303, -215, -234,
	-261, -142, 384, -234, -234, -235, -235, 132, 378, -234,
	-245, 26, 26, 379, -178, 383, -230, -234, 379, -243,
	105, -234, 312, 379, 342, -164, -164, -164, 5, 197,
	142, 196, -203, 196, -203, -203, 7, -336, -134, 378,
	346, -163, 379, -290, -272, -234, -239, -234, -290, -272,
	-235, -235, -235, -235, -235, -235, -235, -235, -235, -235,
	-235, -235, -235, -235, -235, -235, -235, -235, -235, 99,
	206, 212, -235, 383, -178, -240, -239, -234, -234, -272,
	379, 379, 379, -177, -234, -234, -234, 379, 7, -52,
	-187, 137, -269, 383, -187, -194, 378, -234, -263, 377,
	379, 383, -259, 377, 383, 386, 359, -260, 378, -167,
	-258, 316, 316, 108, 206, 337, -312, -309, -234, -166,
	-262, -134, -323, 378, -320, -321, -140, 378, 378, -118,
	102, 281, -207, 108, -123, 108, -123, 316, -206, 68,
	-237, -140, -134, -177, 316, -237, -177, 316, -237, -107,
	132, 302, 295, -152, 152, -225, 378, -135, 378, 378,
	-162, 378, -134, -128, 180, -354, -300, -326, -191, -191,
	-180, 207, 67, 379, -226, -182, -172, -234, 379, -108,
	75, -108, 7, 377, 379, -106, 218, -105, -134, 5,
	-134, -31, -32, 153, -297, -134, -142, 217, 379, -119,
	-297, 26, 26, -234, -245, 379, -234, -234, 379, -234,
	377, -234, 5, -234, 379, 379, 379, 379, -337, -134,
	-234, 379, 379, 379, -240, 132, 99, 212, 378, -234,
	379, 379, 383, 379, 379, 379, 379, -242, 139, 44,
	-263, -242, -167, -231, 7, -232, -297, 376, -259, -167,
	379, -134, -134, -224, 108, -313, 68, -314, 57, 116,
	73, 206, 208, 328, 238, 54, 93, 247, 379, 379,
	383, -141, -185, 57, -141, -234, 378, -166, -167, 206,
	93, 206, 93, 86, 324, -134, -134, -142, -134, -134,
	378, 379, -142, 379, -134, -303, 313, -153, -154, 229,
	150, -166, 378, -167, -150, 30, -166, 216, -129, 179,
	-354, -300, -126, -218, 378, 216, -67, -191, 359, 86,
	86, 377, 383, 378, 359, 359, 383, 22, 378, -119,
	-234, -234, 379, 379, -164, -331, 229, 379, -235, 132,
	378, -245, 379, -234, -332, 347, -234, -177, -332, 379,
	-260, 7, 379, -224, -134, -297, -134, 116, 147, 208,
	175, 378, -235, -142, -223, -350, 72, 299, -262, -119,
	-297, -119, 379, -177, 379, 379, 208, 208, -234, -272,
	-123, -123, 316, 316, -177, 316, 316, -237, 44, 227,
	379, -166, 379, 379, -67, 379, -142, -354, -300, -127,
	100, -167, 68, -241, 378, 378, -105, -106, -302, -302,
	-32, -167, 379, -164, 44, -235, -245, 379, 379, -333,
	-334, -134, -259, 377, -314, -135, 206, -234, -136, 378,
	-152, 378, -141, -164, 247, -122, 57, -134, -134, -164,
	378, 378, 188, 242, -142, -223, 379, -152, -223, 378,
	-300, -128, 330, 207, 379, -134, -303, -303, 379, 379,
	-338, 242, 267, -177, 379, 383, 30, 108, 379, -315,
	194, -134, -167, -119, 379, -142, -117, 335, -297, 379,
	-177, -177, 378, 378, 378, -152, -223, -152, -166, -129,
	281, -226, 379, 379, 379, -339, -340, 36, 325, 77,
	-234, -339, -334, -336, 116, -316, -319, -318, 216, 133,
	228, 286, 379, 379, -162, -234, 379, 379, -167, -167,
	-167, -152, 379, -181, -107, -107, -340, 235, 128, 266,
	235, 128, -134, -318, 216, -319, 216, 330, 96, -315,
	379, 379, 379, -223, -226, 26, -317, 203, 259, 48,
	281, -317, -316, 378, 378, -124, 48, 259, -152, -340,
	20, 208, 93, -155, 229, -156, 229, 379, -297, 379,
	-297, 340, 340, -157, 378, 184, 383, -154, -153, -158,
	-159, -234, 195, 311, -155, 378, 383, 379, 383, 378,
	-158, -155, -159, -158, 379, 379, 383, -154, -153, -156,
	383, -156,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 306, 0, 159, 161, 163,
	165, -2, 168, 170, 0, 0, 0, 181, 183, 185,
	187, 189, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 672, -2, 0, 286, 288, 297, 299,
	301, 303, 304, 0, 354, 356, 358, 360, 362, 364,
	366, 368, 370, 372, 374, 376, 378, 380, 382, 383,
	385, 387, 389, 0, 594, 596, 598, -2, 65, 66,
	67, 68, 69, 70, 78, 79, 80, 81, 72, 74,
	75, 77, 0, 710, -2, 721, 0, 0, 0, -2,
	0, -2, -2, -2, 0, 0, 687, 689, 691, 693,
	-2, 0, 0, -2, 7, 13, 15, 17, 20, 22,
	24, 26, 28, 30, 32, 34, 36, 38, 40, 43,
	49, 51, 53, 56, 58, 60, 62, 64, 0, 0,
	0, 0, 0, 0, 125, 270, 0, 1292, 1216, 1222,
	1223, 1247, 1248, 1249, 1266, 1267, 1268, 1269, 1270, 1271,
	1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281,
	1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
	1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302,
	1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312,
	1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322,
	1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332,
	1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342,
	1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352,
	1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362,
	1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372,
	1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382,
	1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392,
	1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402,
	1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412,
	1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422,
	1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432,
	1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442,
	1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452,
	1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462,
	1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472,
	1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482,
	1483, 1484, 1485, 1486, 1487, 1488, 151, 153, 154, 0,
	0, 0, 1218, 1292, 160, 162, 164, 166, 0, 172,
	0, 0, 0, 0, 561, 169, 171, 261, 1354, 263,
	265, 0, 0, 0, 0, 175, 176, 177, 178, 179,
	180, 182, 184, 186, 188, 190, 191, 0, 0, 0,
	0, 0, 260, 258, 213, 214, 0, 243, 244, 245,
	246, 247, 249, 217, 219, 220, 222, 224, 226, 228,
	229, 231, 233, 234, 236, 238, 239, 241, 0, 0,
	0, 267, 273, 274, 275, 277, 278, 279, 280, 281,
	282, 283, 0, 131, 0, 466, 256, 254, 0, 127,
	0, 591, 0, 269, 592, 593, 588, 589, 1381, 617,
	287, 289, 298, 300, 302, -2, -2, 1475, -2, 318,
	-2, 326, 1481, 0, 329, 330, 333, -2, 209, 355,
	357, 359, 361, 363, 365, 367, 369, 371, 373, 375,
	377, 379, 381, 384, 386, 388, 390, 391, 0, 0,
	0, 395, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, 0, -2, -2, 0, 0, -2,
	0, 0, 394, 396, 397, 398, 0, 595, 597, 599,
	0, 551, 712, 0, 0, -2, 685, 686, -2, 0,
	716, 716, 716, 0, 0, 686, 684, 0, 290, 0,
	292, 0, 395, 295, 296, 334, 335, 922, 0, 0,
	0, 0, 0, 0, 1024, 1026, 1446, 1475, 0, 1028,
	1029, 0, 1031, 1032, 1034, 1035, 0, 1038, 1039, 1191,
	1218, 1232, 1233, 1234, 1235, 0, 0, 1238, 0, 1240,
	1241, 1242, 1093, 1049, -2, -2, 1230, 850, 851, 852,
	853, -2, 1489, 1053, 1056, 1059, 1062, 1063, 1066, 1067,
	0, 1430, 1447, 1448, 1471, 1472, 1480, 1484, 1485, 1454,
	1468, 1455, 1442, 1452, 1466, 1298, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1256, 884, 885, 890, 891, 1490, 1491, 1492, 1493,
	1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503,
	1504, 893, 619, 601, 610, 619, 603, 604, 605, 606,
	607, 608, 609, 612, 0, 702, 1360, 705, 1229, 703,
	688, 690, 0, 692, 0, 0, 696, 718, 717, 0,
	757, 700, 701, 711, 772, 810, 787, 778, 0, 0,
	2, 71, 0, 1454, 810, 73, 0, 1454, 810, 76,
	0, 82, 0, 1454, 1221, 0, 1261, 1262, 1263, 1264,
	1265, 1489, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512,
	1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522,
	1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
	1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
	1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,
	1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562,
	1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572,
	1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
	1583, 1584, 1585, 0, 0, 271, 272, 1226, 1224, 1225,
	0, 155, 156, 157, 158, 0, 0, 1219, 1200, 1198,
	1199, 167, 530, 1454, -2, 553, 530, 557, -2, 709,
	1454, 633, 262, 264, 0, 174, 0, 646, 0, 648,
	0, 663, 816, 117, 1454, 194, 207, 117, 1454, 197,
	117, 1454, 200, 1214, 117, 1454, 203, 204, 1454, 206,
	257, 0, 0, -2, 250, 252, 1257, 1258, 1259, 1260,
	-2, 248, 218, 221, 223, 225, 227, 230, 232, 235,
	237, 240, 242, -2, 0, 0, 0, 465, 0, 0,
	0, 590, 0, 616, 305, 0, 315, 0, 317, 1441,
	-2, -2, 321, 620, 624, 625, 626, 0, 0, 0,
	0, 0, 0, 0, 331, 210, 0, 392, 393, 401,
	402, 132, 133, 352, 353, 0, 405, 426, 438, 0,
	0, 409, 411, 464, 413, 0, 0, 415, 0, 417,
	0, 419, 0, 421, 0, 423, 425, 427, 439, 429,
	711, 431, 0, 433, 437, 0, 442, 0, 444, 445,
	446, 0, 0, 452, 0, 0, 399, 400, 117, 814,
	0, 0, 0, -2, 0, 729, 754, 0, 732, 733,
	0, 0, 0, 0, 714, 715, 0, 0, 0, 674,
	675, 291, 0, 294, 0, 0, 0, 0, 1126, 1127,
	1128, 1129, 1130, 1131, 1134, 1135, 1132, 1133, 1136, 1137,
	0, 0, 0, 0, 0, 1138, 0, 0, 0, 0,
	0, 0, 0, 0, 1139, 1140, 1141, 0, 0, 1143,
	0, 1145, 0, 0, 0, 0, 0, 0, 1205, 0,
	0, 1142, 927, 928, 929, 961, 962, 0, 1025, 1202,
	1195, 1027, 0, 1148, -2, 1149, 0, 0, 1030, 1036,
	1037, 1148, 0, 1190, -2, 0, 1237, 0, 919, 1095,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1171, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 869, 887, 898, 895, 894, 871, 0, 870, 868,
	0, 872, 0, 0, 0, 600, -2, 602, 0, 614,
	0, 704, 0, 0, 0, 761, 1206, 1210, 1211, 761,
	0, 1149, 0, 0, 0, 0, 807, 807, 807, 805,
	781, 0, 787, 0, -2, 811, 799, 0, -2, 778,
	0, 0, 812, 0, 83, 585, 96, 0, 585, 585,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 801, 1217, 0,
	1196, 1197, 147, 0, 0, 1212, 1201, 472, 0, 0,
	552, 0, 708, 0, 0, 0, 1454, 560, 1250, 635,
	0, 820, 0, 649, 0, 0, 817, 0, 192, 0,
	115, 116, 0, 195, 0, 198, 0, 0, 201, 0,
	0, 0, 711, 0, 0, 276, 0, 0, 711, 0,
	1151, 828, 829, 830, 831, 832, 919, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 857, 858, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 881, 0, 856, 856, 856, 873, 874,
	882, 883, 888, 889, 900, 901, 903, 905, 899, 899,
	899, 896, 897, 801, 134, 0, 0, 0, 0, -2,
	323, 0, 622, 0, 627, 343, 344, 345, 629, 630,
	327, 346, 347, 348, 349, 350, 351, 0, 547, 0,
	549, 1243, 0, 324, 336, 325, 328, 0, 211, 403,
	404, 406, 407, 408, 412, 0, 461, 414, 416, 418,
	420, 422, 430, 434, 711, 440, 443, 447, 448, 449,
	450, 0, 0, 0, 550, 0, 307, 0, 456, 0,
	729, 754, 678, 728, 679, 753, 755, 730, 731, 736,
	740, 741, 744, 747, 748, 738, 922, 697, 698, 699,
	722, 723, 572, 0, 0, 293, 923, 824, 825, 875,
	876, 877, 878, 879, 924, 925, 0, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, -2, -2, -2,
	-2, -2, -2, -2, -2, 948, 949, 950, 951, 952,
	953, 954, 955, -2, -2, -2, 959, 960, -2, 1144,
	1146, 0, 1205, 0, -2, 0, -2, -2, -2, -2,
	973, 0, 975, 978, 980, 982, 0, 0, 0, 0,
	1204, 992, 1182, 0, 0, 1123, 1124, 1125, 977, 0,
	0, 1203, 1194, 0, 0, 1147, 1033, 0, 0, 0,
	1155, 1189, 1185, 0, 1040, 721, 0, 0, 0, 0,
	1047, 0, 1246, 906, 907, 908, 909, 910, 911, 920,
	1103, 0, 0, 0, 1054, 1055, 1057, 1058, 1060, 1061,
	1064, 1065, 0, 0, 0, 1071, 0, 1158, -2, -2,
	-2, -2, -2, -2, -2, 0, 1073, 0, 1075, 1149,
	1168, 0, 0, 995, 0, 0, 0, 0, 1475, 0,
	1078, 1149, 1176, 0, 0, 0, 0, 0, 1149, 0,
	1181, 0, 0, 0, 0, 0, 1089, 0, 1091, 0,
	0, 0, 0, 0, 0, 613, 706, 0, 0, 0,
	820, 0, 0, 0, 1209, 820, 756, 0, 0, 0,
	0, 0, 0, 802, 806, 803, 804, 0, 0, 787,
	799, 769, 0, 0, 0, 776, 777, 798, 0, 797,
	786, -2, 0, 0, 0, 0, 0, 584, 98, 1454,
	0, 119, 0, 0, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 1220, 0,
	137, 0, 1227, 0, 0, 0, 0, 0, 471, 1226,
	473, 475, 476, 477, 478, 1251, 0, 1251, 0, 0,
	0, 0, 0, 0, 637, 643, 0, 735, 0, 661,
	651, 0, 0, 0, 661, 665, 666, 668, 669, 0,
	0, 818, 208, 117, 117, 1215, 117, 117, 205, 259,
	215, 251, 0, 0, 0, 253, 255, 0, 821, 823,
	0, 833, 0, 146, 0, 0, 0, 0, 316, 0,
	621, 628, 0, 340, 0, 342, 548, 1245, 1244, 0,
	212, 463, 284, 432, 435, 458, 459, 460, 815, 0,
	0, 457, 682, 683, 0, 742, 0, 0, 739, 745,
	746, 0, 725, 570, 571, 0, 0, 0, -2, -2,
	0, 0, 0, 993, -2, 974, 976, 979, 981, 983,
	0, 0, 0, 0, 0, 0, 0, 994, 1148, 0,
	1192, 1195, -2, 1150, 1153, 1154, 0, 0, 1186, 0,
	0, 0, 0, 720, 721, 721, 721, 1046, 0, 0,
	0, 0, 0, 0, 1048, 0, 0, 0, 0, 0,
	0, 1070, 0, 1072, 1074, 0, 0, 1076, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 998, 999, 1000, 0, 1148, 1077, 1174, 1175, 0,
	0, 0, 0, 0, 0, 1083, 0, 1180, 0, 0,
	0, 1087, 1088, 1090, 0, 854, 0, 880, 902, 904,
	892, 711, 1228, 758, 750, 1207, 801, 760, 762, 1208,
	750, 1150, 789, 0, 791, 0, 0, 0, 793, 0,
	782, 0, 784, 799, 774, 0, 0, 767, 0, 766,
	787, 795, 0, 0, 813, 97, 574, 0, 0, 0,
	100, 1454, 108, 0, 502, 0, 0, 0, 0, 0,
	587, 109, 1454, 117, 1454, 117, 110, 84, 585, 85,
	0, 0, 580, 0, 0, 573, 86, 0, 582, 0,
	0, 146, 0, 0, 148, 0, 1213, 480, 529, 0,
	0, 1251, 0, 469, 530, 554, 556, 0, 0, 639,
	643, 0, 642, 709, 661, 734, 819, 644, 661, 0,
	0, 0, 653, 650, 647, 820, 0, 0, 0, 0,
	193, 196, 199, 202, 266, 0, 0, 1152, 0, 826,
	0, 0, 126, 0, 135, 268, 313, 314, 319, 338,
	339, 341, 337, 0, 0, 0, 0, 0, 0, 0,
	724, 572, 0, 926, -2, 0, 0, 0, 0, -2,
	0, 0, 0, 1183, 0, 0, 0, 1194, -2, 1156,
	1184, 1188, 0, 1041, 0, 0, 0, 0, 1239, 912,
	913, 914, 915, 916, 917, 918, 0, 1101, 1102, 1106,
	0, 0, 1052, 0, 0, 1157, 1167, 1169, 996, 997,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	-2, -2, -2, 1014, 1015, 1016, -2, -2, -2, 0,
	0, 0, 1170, 0, 0, 1172, 1173, 1177, 1178, 0,
	1080, 1081, 1082, 1179, 0, 0, 0, 886, 0, 0,
	752, 0, 759, 0, 752, 790, 0, 809, 792, 772,
	783, 0, 780, 770, 0, 771, 0, 799, 0, 0,
	779, 0, 0, 0, 0, 118, 500, 519, 0, 0,
	563, 569, 569, 0, 1050, 1051, 0, 0, 0, 102,
	0, 0, 0, 0, 106, 0, 112, 0, 0, 0,
	91, 0, 0, 0, 0, 90, 0, 0, 89, 124,
	0, 0, 149, 485, 0, 474, 0, 0, 0, 472,
	0, 0, 0, 641, 643, 0, 634, 635, 173, 645,
	659, 660, 658, 0, 661, 667, 664, 670, 0, 0,
	128, 0, 0, 827, 834, 144, 1344, 142, 139, 141,
	285, 308, 309, 0, 453, 454, 455, 737, 743, 726,
	572, 0, 0, -2, 0, 986, -2, -2, 1119, 1150,
	1193, 1187, 1236, 721, 1042, 1044, 1045, 921, 1108, 1105,
	0, 1092, 1068, 1069, 1166, 0, 0, 0, 0, 1150,
	1121, 1079, 0, 1085, 1086, 855, 707, 1097, 0, 0,
	763, 1097, 0, 787, 785, 768, 764, 0, 775, 0,
	796, 576, 578, 99, 0, 501, 0, 504, 0, 0,
	0, 0, 510, 511, 0, 0, 0, 0, 521, 528,
	0, 572, 1231, 0, 572, 0, 0, 0, 0, 0,
	114, 0, 0, 586, 0, 117, 117, 575, 0, 0,
	0, 0, 581, 0, 583, 136, 0, 467, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 631, 643,
	0, 636, 637, 0, 0, 0, 652, 662, 0, 0,
	0, 822, 0, 0, 0, 0, 0, 311, 0, 727,
	-2, -2, 987, 1120, 0, 721, 0, 1094, -2, 0,
	0, 0, 1122, 0, 694, 0, 751, 749, 695, 808,
	799, 0, 794, 101, 0, 505, 506, 1251, 0, 509,
	512, 0, 514, 1253, 480, 0, 525, 526, 564, 565,
	568, 566, 569, 721, 523, 0, 103, 104, 113, 121,
	105, 111, 0, 0, 721, 0, 0, 800, 0, 0,
	528, 0, 518, 480, 470, 528, 0, 0, 638, 639,
	0, 0, 0, 671, 0, 0, 143, 0, 138, 140,
	310, 0, 1043, 1111, 0, -2, 0, 1022, 1084, 1096,
	1098, 0, 773, 765, 503, 507, 0, 0, 534, 0,
	522, 0, 572, 0, 0, 123, 0, 577, 579, 0,
	0, 0, 0, 0, 0, 480, 528, 468, 480, 0,
	640, 641, 0, 655, 820, 657, 0, 0, 145, 312,
	0, 0, 0, 1107, 1023, 0, 0, 0, 513, 539,
	0, 0, 0, 567, 1041, 530, 107, 0, 120, 0,
	0, 0, 0, 0, 0, 516, 480, 558, 0, 632,
	0, 656, 146, 146, 1104, 1109, 1112, -2, 1414, 1289,
	0, 1110, 1099, 1100, 0, 515, 535, 536, 0, 531,
	532, 533, 1252, 527, 534, 122, 93, 95, 0, 0,
	0, 517, 528, 820, 129, 130, 0, 1114, 1115, 1116,
	1117, 1118, 508, 537, 0, 538, 0, 0, 0, 539,
	0, 0, 483, 480, 654, 0, 540, 0, 543, 544,
	0, 541, 524, 0, 0, 479, 481, 482, 559, 1113,
	542, 545, 546, 0, 0, 0, 0, 486, 0, 487,
	0, 0, 0, 485, 0, 0, 0, 484, 490, 0,
	493, 495, -2, 0, 488, 0, 0, 491, 0, 0,
	0, 489, 494, 0, 492, 485, 0, 484, 499, 497,
	0, 498,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 367, 3, 373, 368, 3,
	378, 379, 371, 369, 383, 370, 380, 372, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 387, 382,
	357, 359, 358, 361, 384, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 376, 3, 377, 374, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 385, 366, 386, 364,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 360,
	57700, 362, 57701, 363, 57702, 365, 57703, 375, 57704, 381,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:906
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:912
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:918
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:938
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:939
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:940
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:942
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:944
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:970
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:971
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1011
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1022
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1034
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1057
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1083
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1089
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1095
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1104
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1113
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1132
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1136
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1182
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1205
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1215
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1277
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1278
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1281
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1282
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1309
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1335
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1373
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1442
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1475
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1486
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1494
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1495
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1496
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1497
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1499
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1500
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1502
		{
			return helpWith(sqllex, "CREATE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1520
		{
			return helpWith(sqllex, "DELETE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1530
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1531
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1532
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1533
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1534
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1540
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1541
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1542
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1543
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1545
		{
			return helpWith(sqllex, "DROP")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1560
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1575
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1598
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1621
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1636
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1687
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1696
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1699
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			return helpWith(sqllex, "DELETE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1702
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			return helpWith(sqllex, "INSERT")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1707
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1712
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1713
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1724
		{ /* SKIP DOC */
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1752
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1770
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1776
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1811
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1831
		{
			return helpWith(sqllex, "GRANT")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1851
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1873
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1888
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1920
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1929
		{
			return helpWith(sqllex, "RESET")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1930
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1945
		{
			return helpWith(sqllex, "RESET")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1956
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1961
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1964
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1968
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1969
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1970
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1971
		{ /* SKIP DOC */
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1972
		{ /* SKIP DOC */
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1973
		{
			return unimplemented(sqllex, "set local")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2032
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2082
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2087
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2104
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2107
		{
			return unimplemented(sqllex, "set from current")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2119
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = Low
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = Normal
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = High
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2218
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2219
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2220
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2221
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2222
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2223
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2224
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2225
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2226
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2227
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2228
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2229
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2230
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2231
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2233
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2235
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2237
		{
			return helpWith(sqllex, "SHOW")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2246
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.str = "client_encoding"
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2261
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2272
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2289
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2294
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2305
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2316
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2327
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2338
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2343
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2348
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2359
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2364
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2375
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2394
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2407
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2412
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2430
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2453
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2461
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2465
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2469
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2472
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2483
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2494
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2505
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2509
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2513
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2517
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2521
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2525
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2531
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2535
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2539
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2545
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2556
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2573
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2680
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2684
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = DropDefault
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 486:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 489:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 499:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2794
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3001
		{
			return unimplemented(sqllex, "match full")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3002
		{
			return unimplemented(sqllex, "match partial")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3003
		{
			return unimplemented(sqllex, "match simple")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3004
		{
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = NoAction
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = Restrict
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = Cascade
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = SetNull
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = SetDefault
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3090
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3101
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3105
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 555:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 556:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3126
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3166
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = true
		}
	case 562:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = false
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3196
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3197
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3200
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 569:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3201
		{
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = Ascending
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = Descending
		}
	case 572:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3241
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3243
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = true
		}
	case 585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = false
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3276
		{
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3277
		{
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3288
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3299
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3310
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3314
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3315
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3316
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3334
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3339
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3352
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3357
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3365
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3372
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3375
		{
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3376
		{
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.str = ""
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.str = ""
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3422
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3435
		{
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3437
		{
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = ReadOnly
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = ReadWrite
		}
	case 631:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3501
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.str = ""
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.str = ""
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.str = ""
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.str = ""
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3544
		{
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3545
		{
		}
	case 644:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3569
		{
			return helpWith(sqllex, "INSERT")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3580
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3586
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3628
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3632
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3640
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 662:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3663
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3667
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 665:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3668
		{
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: sqlDollar[5].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3795
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3830
		{
			return helpWith(sqllex, "SELECT")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3831
		{
			return helpWith(sqllex, "VALUES")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3832
		{
			return helpWith(sqllex, "TABLE")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3879
		{
			return helpWith(sqllex, "SELECT")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3923
		{
			return helpWith(sqllex, "TABLE")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3934
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3935
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3936
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3939
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3940
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3943
		{
			return unimplemented(sqllex, "cte")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3946
		{
		}
	case 709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3947
		{
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3950
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3951
		{
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3954
		{
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3955
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = true
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = false
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = false
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = true
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3978
		{
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3979
		{
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4033
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4057
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4109
		{
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4110
		{
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4113
		{
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4114
		{
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = false
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = true
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4185
		{
			return helpWith(sqllex, "VALUES")
		}
	case 758:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4187
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4202
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = &From{}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4224
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4242
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4269
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4306
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4331
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = nil
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4372
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4378
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = true
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = false
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4410
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.str = astFullJoin
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.str = astLeftJoin
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.str = astRightJoin
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.str = astInnerJoin
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4489
		{
		}
	case 807:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4490
		{
		}
	case 808:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4560
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4576
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4590
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4598
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4620
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4622
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4625
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4633
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = jsonbColType
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = jsonColType
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4655
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4691
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4722
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4731
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = nil
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4764
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4768
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4772
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4780
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4784
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4788
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4792
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4796
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 881:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4892
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4908
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 892:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4924
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4963
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4964
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 902:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 904:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = year
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = month
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = day
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = hour
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5012
		{
			sqlVAL.union.val = minute
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5016
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = month
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = hour
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = minute
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = minute
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 919:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = nil
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = second
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5059
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5083
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5094
		{
			return unimplemented(sqllex, "at tz")
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5135
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5139
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5143
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5239
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5243
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5255
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5299
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5302
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5304
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5308
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5312
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5316
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5320
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5324
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5328
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5332
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5336
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5344
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5348
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5352
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5356
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5360
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5364
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5368
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5412
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5420
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5432
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5436
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5440
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5444
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5456
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5460
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5472
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5476
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5480
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5484
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5488
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5492
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5496
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5500
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5504
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5517
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5525
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5536
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5541
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5554
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5558
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5562
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5567
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5571
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5575
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5579
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5583
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5591
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5595
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5598
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5599
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5601
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5605
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5609
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5612
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5623
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5630
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5639
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5640
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5644
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5646
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5650
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5653
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5655
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5659
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5662
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5664
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5668
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5671
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5672
		{
			return unimplemented(sqllex, "current role")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5681
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5687
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5691
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5695
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5699
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5702
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5707
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5709
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5712
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5714
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5718
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5721
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5722
		{
			return unimplemented(sqllex, "treat")
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5724
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5728
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5732
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5736
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5740
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5744
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5748
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5752
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5756
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5759
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5761
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5764
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5768
		{
			return unimplemented(sqllex, "within group")
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5769
		{
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5773
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5777
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5794
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5798
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5804
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5812
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5816
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5820
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5827
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5846
		{
			sqlVAL.str = ""
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5852
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5856
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5866
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5867
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5868
		{
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5871
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5872
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5878
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5879
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5880
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5881
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5882
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5893
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5897
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5903
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5909
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5915
		{
			sqlVAL.union.val = Any
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5919
		{
			sqlVAL.union.val = Some
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5923
		{
			sqlVAL.union.val = All
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5928
		{
			sqlVAL.union.val = Plus
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5929
		{
			sqlVAL.union.val = Minus
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5930
		{
			sqlVAL.union.val = Mult
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5931
		{
			sqlVAL.union.val = Div
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5932
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5933
		{
			sqlVAL.union.val = Mod
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5934
		{
			sqlVAL.union.val = Bitand
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5935
		{
			sqlVAL.union.val = Bitor
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5936
		{
			sqlVAL.union.val = Pow
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5937
		{
			sqlVAL.union.val = Bitxor
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.union.val = LT
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5939
		{
			sqlVAL.union.val = GT
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5940
		{
			sqlVAL.union.val = EQ
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5941
		{
			sqlVAL.union.val = LE
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = GE
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5943
		{
			sqlVAL.union.val = NE
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5947
		{
			sqlVAL.union.val = Like
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = NotLike
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5949
		{
			sqlVAL.union.val = ILike
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5950
		{
			sqlVAL.union.val = NotILike
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5968
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5972
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5978
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5988
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6008
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6012
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6034
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6048
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6055
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6059
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6076
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6080
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6084
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6088
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6092
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6098
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6104
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6110
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6114
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6118
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6124
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6128
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6139
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6146
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6150
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6156
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6162
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6166
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6173
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6179
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6183
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6190
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6196
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6202
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6208
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6212
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6218
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6222
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6228
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6232
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6237
		{
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6238
		{
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6242
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6246
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6252
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6261
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6265
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6269
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6277
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6281
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6287
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6291
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6297
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6301
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6312
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6316
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6322
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6326
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6339
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6343
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6347
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6351
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6357
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6361
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6367
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6370
		{
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6380
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6384
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6391
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6395
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6399
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6403
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6406
		{
			return unimplemented(sqllex, "func const")
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6408
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6412
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6415
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6417
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6421
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6425
		{
			sqlVAL.union.val = DNull
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6432
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6436
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6442
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6477
		{
			sqlVAL.str = ""
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6483
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6487
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
