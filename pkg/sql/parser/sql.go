// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:465
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_SCHEMA = 57417
const CURRENT_ROLE = 57418
const CURRENT_TIME = 57419
const CURRENT_TIMESTAMP = 57420
const CURRENT_USER = 57421
const CYCLE = 57422
const DATA = 57423
const DATABASE = 57424
const DATABASES = 57425
const DATE = 57426
const DAY = 57427
const DEC = 57428
const DECIMAL = 57429
const DEFAULT = 57430
const DEALLOCATE = 57431
const DEFERRABLE = 57432
const DELETE = 57433
const DESC = 57434
const DISCARD = 57435
const DISTINCT = 57436
const DO = 57437
const DOUBLE = 57438
const DROP = 57439
const ELSE = 57440
const ENCODING = 57441
const END = 57442
const ESCAPE = 57443
const EXCEPT = 57444
const EXISTS = 57445
const EXECUTE = 57446
const EXPERIMENTAL_FINGERPRINTS = 57447
const EXPLAIN = 57448
const EXTRACT = 57449
const EXTRACT_DURATION = 57450
const FALSE = 57451
const FAMILY = 57452
const FETCH = 57453
const FILTER = 57454
const FIRST = 57455
const FLOAT = 57456
const FLOAT4 = 57457
const FLOAT8 = 57458
const FLOORDIV = 57459
const FOLLOWING = 57460
const FOR = 57461
const FORCE_INDEX = 57462
const FOREIGN = 57463
const FROM = 57464
const FULL = 57465
const GRANT = 57466
const GRANTS = 57467
const GREATEST = 57468
const GROUP = 57469
const GROUPING = 57470
const HAVING = 57471
const HELP = 57472
const HIGH = 57473
const HOUR = 57474
const INCREMENTAL = 57475
const IF = 57476
const IFNULL = 57477
const ILIKE = 57478
const IN = 57479
const INTERLEAVE = 57480
const INDEX = 57481
const INDEXES = 57482
const INITIALLY = 57483
const INNER = 57484
const INSERT = 57485
const INT = 57486
const INT2VECTOR = 57487
const INT2 = 57488
const INT4 = 57489
const INT8 = 57490
const INT64 = 57491
const INTEGER = 57492
const INTERSECT = 57493
const INTERVAL = 57494
const INTO = 57495
const IS = 57496
const ISOLATION = 57497
const JOB = 57498
const JOBS = 57499
const JOIN = 57500
const KEY = 57501
const KEYS = 57502
const KV = 57503
const LATERAL = 57504
const LC_CTYPE = 57505
const LC_COLLATE = 57506
const LEADING = 57507
const LEAST = 57508
const LEFT = 57509
const LEVEL = 57510
const LIKE = 57511
const LIMIT = 57512
const LOCAL = 57513
const LOCALTIME = 57514
const LOCALTIMESTAMP = 57515
const LOW = 57516
const LSHIFT = 57517
const MATCH = 57518
const MINUTE = 57519
const MONTH = 57520
const NAN = 57521
const NAME = 57522
const NAMES = 57523
const NATURAL = 57524
const NEXT = 57525
const NO = 57526
const NO_INDEX_JOIN = 57527
const NORMAL = 57528
const NOT = 57529
const NOTHING = 57530
const NULL = 57531
const NULLIF = 57532
const NULLS = 57533
const NUMERIC = 57534
const OF = 57535
const OFF = 57536
const OFFSET = 57537
const OID = 57538
const ON = 57539
const ONLY = 57540
const OPTIONS = 57541
const OR = 57542
const ORDER = 57543
const ORDINALITY = 57544
const OUT = 57545
const OUTER = 57546
const OVER = 57547
const OVERLAPS = 57548
const OVERLAY = 57549
const PARENT = 57550
const PARTIAL = 57551
const PARTITION = 57552
const PASSWORD = 57553
const PAUSE = 57554
const PLACING = 57555
const PLANS = 57556
const POSITION = 57557
const PRECEDING = 57558
const PRECISION = 57559
const PREPARE = 57560
const PRIMARY = 57561
const PRIORITY = 57562
const QUERIES = 57563
const QUERY = 57564
const RANGE = 57565
const READ = 57566
const REAL = 57567
const RECURSIVE = 57568
const REF = 57569
const REFERENCES = 57570
const REGCLASS = 57571
const REGPROC = 57572
const REGPROCEDURE = 57573
const REGNAMESPACE = 57574
const REGTYPE = 57575
const RENAME = 57576
const REPEATABLE = 57577
const RELEASE = 57578
const RESET = 57579
const RESTORE = 57580
const RESTRICT = 57581
const RESUME = 57582
const RETURNING = 57583
const REVOKE = 57584
const RIGHT = 57585
const ROLLBACK = 57586
const ROLLUP = 57587
const ROW = 57588
const ROWS = 57589
const RSHIFT = 57590
const SAVEPOINT = 57591
const SCATTER = 57592
const SEARCH = 57593
const SECOND = 57594
const SELECT = 57595
const SEQUENCES = 57596
const SERIAL = 57597
const SERIALIZABLE = 57598
const SESSION = 57599
const SESSIONS = 57600
const SESSION_USER = 57601
const SET = 57602
const SETTING = 57603
const SETTINGS = 57604
const SHOW = 57605
const SIMILAR = 57606
const SIMPLE = 57607
const SMALLINT = 57608
const SMALLSERIAL = 57609
const SNAPSHOT = 57610
const SOME = 57611
const SPLIT = 57612
const SQL = 57613
const START = 57614
const STATUS = 57615
const STDIN = 57616
const STRICT = 57617
const STRING = 57618
const STORING = 57619
const SUBSTRING = 57620
const SYMMETRIC = 57621
const SYSTEM = 57622
const TABLE = 57623
const TABLES = 57624
const TEMP = 57625
const TEMPLATE = 57626
const TEMPORARY = 57627
const TESTING_RANGES = 57628
const TESTING_RELOCATE = 57629
const TEXT = 57630
const THEN = 57631
const TIME = 57632
const TIMESTAMP = 57633
const TIMESTAMPTZ = 57634
const TO = 57635
const TRAILING = 57636
const TRACE = 57637
const TRANSACTION = 57638
const TREAT = 57639
const TRIM = 57640
const TRUE = 57641
const TRUNCATE = 57642
const TYPE = 57643
const UNBOUNDED = 57644
const UNCOMMITTED = 57645
const UNION = 57646
const UNIQUE = 57647
const UNKNOWN = 57648
const UPDATE = 57649
const UPSERT = 57650
const USE = 57651
const USER = 57652
const USERS = 57653
const USING = 57654
const UUID = 57655
const VALID = 57656
const VALIDATE = 57657
const VALUE = 57658
const VALUES = 57659
const VARCHAR = 57660
const VARIADIC = 57661
const VIEW = 57662
const VARYING = 57663
const WHEN = 57664
const WHERE = 57665
const WINDOW = 57666
const WITH = 57667
const WITHIN = 57668
const WITHOUT = 57669
const WRITE = 57670
const YEAR = 57671
const ZONE = 57672
const NOT_LA = 57673
const WITH_LA = 57674
const AS_LA = 57675
const POSTFIXOP = 57676
const UMINUS = 57677

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5833

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 32,
	354, 32,
	-2, 496,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 61,
	1, 469,
	197, 469,
	241, 469,
	350, 469,
	352, 469,
	354, 469,
	-2, 479,
	-1, 108,
	1, 472,
	197, 472,
	241, 472,
	350, 472,
	352, 472,
	354, 472,
	-2, 478,
	-1, 120,
	1, 32,
	354, 32,
	-2, 496,
	-1, 506,
	122, 1077,
	293, 1077,
	336, 1077,
	353, 1077,
	-2, 0,
	-1, 517,
	1, 209,
	354, 209,
	-2, 1082,
	-1, 537,
	111, 506,
	170, 506,
	195, 506,
	-2, 475,
	-1, 540,
	111, 505,
	170, 505,
	195, 505,
	-2, 473,
	-1, 693,
	351, 1009,
	-2, 1002,
	-1, 694,
	351, 1010,
	-2, 1003,
	-1, 700,
	5, 676,
	351, 676,
	-2, 1207,
	-1, 725,
	5, 635,
	-2, 1177,
	-1, 726,
	5, 670,
	351, 670,
	-2, 1179,
	-1, 727,
	5, 645,
	-2, 1180,
	-1, 728,
	5, 644,
	-2, 1181,
	-1, 729,
	5, 670,
	351, 670,
	-2, 1184,
	-1, 730,
	5, 670,
	351, 670,
	-2, 1185,
	-1, 731,
	5, 671,
	-2, 1188,
	-1, 732,
	5, 627,
	-2, 1189,
	-1, 733,
	5, 627,
	-2, 1190,
	-1, 734,
	5, 652,
	-2, 1194,
	-1, 735,
	5, 637,
	-2, 1195,
	-1, 736,
	5, 638,
	-2, 1196,
	-1, 737,
	5, 628,
	-2, 1201,
	-1, 738,
	5, 629,
	-2, 1202,
	-1, 739,
	5, 630,
	-2, 1203,
	-1, 740,
	5, 631,
	-2, 1204,
	-1, 741,
	5, 632,
	-2, 1205,
	-1, 742,
	5, 633,
	-2, 1206,
	-1, 743,
	5, 627,
	-2, 1211,
	-1, 744,
	5, 636,
	-2, 1216,
	-1, 745,
	5, 634,
	-2, 1219,
	-1, 746,
	5, 668,
	351, 668,
	-2, 1221,
	-1, 747,
	5, 672,
	-2, 1224,
	-1, 748,
	5, 674,
	-2, 1225,
	-1, 749,
	5, 667,
	351, 667,
	-2, 1230,
	-1, 802,
	111, 505,
	170, 505,
	195, 505,
	-2, 476,
	-1, 961,
	102, 479,
	111, 479,
	151, 479,
	170, 479,
	195, 479,
	201, 479,
	304, 479,
	-2, 795,
	-1, 970,
	351, 986,
	-2, 974,
	-1, 1235,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 711,
	-1, 1236,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 712,
	-1, 1237,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 713,
	-1, 1241,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 717,
	-1, 1242,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 718,
	-1, 1243,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 719,
	-1, 1246,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 724,
	-1, 1252,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 726,
	-1, 1254,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 730,
	-1, 1255,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 731,
	-1, 1256,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 732,
	-1, 1257,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 733,
	-1, 1283,
	206, 868,
	-2, 871,
	-1, 1320,
	122, 908,
	351, 1009,
	-2, 1002,
	-1, 1321,
	122, 909,
	-2, 1173,
	-1, 1322,
	122, 910,
	-2, 1081,
	-1, 1323,
	122, 911,
	-2, 1045,
	-1, 1324,
	122, 912,
	-2, 1062,
	-1, 1325,
	122, 913,
	-2, 1080,
	-1, 1326,
	122, 914,
	-2, 1132,
	-1, 1502,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 725,
	-1, 1503,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 727,
	-1, 1508,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 728,
	-1, 1526,
	206, 867,
	-2, 870,
	-1, 1702,
	102, 479,
	111, 479,
	151, 479,
	170, 479,
	195, 479,
	201, 479,
	304, 479,
	-2, 562,
	-1, 1722,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 729,
	-1, 1727,
	154, 0,
	-2, 745,
	-1, 1737,
	206, 869,
	-2, 872,
	-1, 1779,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 772,
	-1, 1780,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 773,
	-1, 1781,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 774,
	-1, 1785,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 778,
	-1, 1786,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 779,
	-1, 1787,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 780,
	-1, 1893,
	1, 563,
	70, 563,
	102, 563,
	111, 563,
	123, 563,
	127, 563,
	129, 563,
	142, 563,
	151, 563,
	158, 563,
	167, 563,
	170, 563,
	182, 563,
	195, 563,
	197, 563,
	201, 563,
	241, 563,
	243, 563,
	304, 563,
	312, 563,
	323, 563,
	324, 563,
	333, 563,
	350, 563,
	352, 563,
	354, 563,
	355, 563,
	-2, 562,
	-1, 1906,
	154, 0,
	-2, 746,
	-1, 1909,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 749,
	-1, 1910,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 751,
	-1, 2037,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 750,
	-1, 2038,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 752,
	-1, 2045,
	154, 0,
	-2, 781,
	-1, 2126,
	154, 0,
	-2, 782,
	-1, 2207,
	36, 0,
	136, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 1176,
}

const sqlPrivate = 57344

const sqlLast = 31424

var sqlAct = [...]int{

	694, 1813, 2206, 2214, 2064, 2215, 2252, 2179, 2216, 1186,
	1095, 1194, 2205, 1973, 1382, 541, 1756, 2029, 2096, 1889,
	2017, 1888, 1836, 2004, 1416, 1643, 1700, 1944, 1697, 1959,
	610, 670, 684, 692, 1386, 1101, 1645, 129, 129, 1867,
	1011, 129, 556, 625, 60, 1405, 1820, 1998, 129, 1381,
	1592, 1688, 129, 388, 1097, 390, 879, 129, 1394, 1591,
	129, 1349, 691, 129, 1461, 1481, 1430, 1385, 1537, 1214,
	129, 1819, 1012, 372, 23, 1876, 966, 1281, 871, 894,
	1460, 861, 1195, 1683, 1475, 1178, 364, 130, 1147, 1121,
	1412, 1466, 1306, 771, 1149, 1291, 664, 1421, 362, 1085,
	1269, 883, 1266, 1346, 862, 1300, 1389, 559, 880, 957,
	1463, 1317, 565, 770, 663, 129, 129, 560, 637, 129,
	651, 1188, 669, 599, 129, 129, 121, 1169, 805, 997,
	806, 641, 639, 1083, 1001, 108, 804, 380, 494, 616,
	551, 686, 391, 512, 1960, 109, 633, 787, 516, 548,
	107, 887, 125, 597, 810, 546, 786, 510, 1525, 2107,
	545, 498, 2108, 341, 340, 2238, 545, 1698, 876, 912,
	913, 2228, 896, 1187, 1210, 896, 896, 1652, 540, 2227,
	912, 913, 1210, 2225, 1191, 2223, 1958, 1210, 876, 1562,
	1563, 1493, 915, 2201, 23, 899, 876, 2198, 1303, 566,
	876, 497, 107, 915, 2175, 1492, 2165, 1364, 1179, 876,
	2138, 549, 2155, 1958, 1562, 1563, 914, 1580, 1581, 1582,
	2128, 2121, 929, 1364, 876, 2116, 1171, 914, 2115, 607,
	1686, 2103, 1562, 1563, 2104, 1580, 1581, 1582, 514, 2079,
	116, 608, 1958, 538, 2076, 1304, 2075, 876, 1905, 1958,
	1182, 2074, 1529, 537, 876, 912, 913, 1530, 932, 933,
	934, 942, 943, 944, 1686, 1170, 1179, 1577, 118, 601,
	107, 935, 2062, 1428, 568, 1958, 920, 2039, 915, 2020,
	1364, 946, 1210, 1995, 1653, 1577, 1210, 920, 1182, 1994,
	1305, 1302, 1210, 912, 913, 1957, 1568, 1933, 1958, 1792,
	1210, 1734, 914, 1911, 119, 1627, 1210, 1908, 929, 876,
	1364, 1415, 114, 1378, 1210, 1731, 915, 1067, 1210, 115,
	1536, 1568, 1720, 1715, 1626, 1185, 1185, 876, 1609, 1607,
	1606, 1610, 1210, 1210, 930, 1285, 857, 614, 110, 1568,
	914, 1605, 1528, 655, 1210, 930, 129, 1210, 606, 116,
	1526, 129, 1457, 1210, 1578, 876, 750, 129, 129, 129,
	129, 129, 920, 897, 565, 1307, 897, 897, 1370, 1363,
	1209, 1210, 1364, 1210, 1961, 646, 1583, 118, 120, 1578,
	1184, 939, 947, 1185, 1177, 908, 1701, 1176, 909, 620,
	562, 116, 2012, 1089, 785, 2230, 2221, 1578, 2204, 945,
	920, 2186, 2123, 2077, 1938, 1934, 817, 931, 546, 1926,
	1925, 392, 1924, 119, 937, 1920, 1919, 1918, 931, 118,
	930, 114, 1562, 1563, 1492, 1917, 1893, 1579, 115, 1900,
	1866, 1812, 1807, 1802, 1801, 1800, 1742, 867, 1625, 1630,
	1614, 1611, 1301, 1599, 1699, 936, 1590, 1190, 974, 1561,
	1558, 566, 1579, 1557, 1555, 119, 1810, 1542, 930, 1170,
	1541, 634, 1470, 1314, 1368, 1277, 1313, 1312, 567, 817,
	1579, 1562, 1563, 608, 967, 816, 110, 622, 967, 901,
	640, 652, 895, 1093, 1100, 1758, 2176, 624, 2154, 110,
	2153, 644, 2146, 931, 2140, 2136, 129, 2114, 925, 923,
	924, 916, 917, 918, 919, 921, 922, 643, 643, 940,
	129, 924, 916, 917, 918, 919, 921, 922, 565, 1571,
	1572, 1564, 1565, 1566, 1567, 1569, 1570, 129, 129, 1568,
	2229, 931, 129, 129, 129, 2111, 129, 2099, 1574, 1575,
	1576, 2059, 2047, 1573, 1571, 1572, 1564, 1565, 1566, 1567,
	1569, 1570, 2036, 803, 2022, 2106, 1574, 1575, 1576, 1964,
	1956, 1573, 1571, 1572, 1564, 1565, 1566, 1567, 1569, 1570,
	1278, 565, 1931, 867, 1897, 1881, 938, 1834, 1568, 926,
	927, 928, 941, 1899, 925, 923, 924, 916, 917, 918,
	919, 921, 922, 1832, 129, 129, 129, 129, 1831, 129,
	1935, 1830, 1827, 1817, 1726, 566, 802, 1676, 1674, 1631,
	129, 1634, 1589, 823, 565, 129, 1551, 781, 1550, 1547,
	1522, 390, 565, 1517, 129, 916, 917, 918, 919, 921,
	922, 129, 129, 129, 2009, 129, 1271, 866, 792, 912,
	913, 1456, 1002, 1005, 1356, 1311, 1094, 1009, 995, 994,
	608, 1631, 993, 992, 991, 129, 823, 990, 566, 769,
	989, 761, 915, 988, 823, 790, 987, 766, 885, 986,
	620, 985, 984, 983, 877, 982, 981, 980, 788, 822,
	795, 979, 798, 978, 538, 865, 914, 971, 960, 912,
	913, 110, 611, 860, 537, 765, 757, 649, 813, 814,
	1940, 566, 1939, 1913, 849, 1617, 623, 855, 391, 566,
	1882, 906, 915, 546, 1616, 958, 851, 640, 780, 608,
	567, 900, 874, 778, 903, 563, 1411, 852, 1562, 1563,
	963, 821, 868, 2118, 1410, 2109, 914, 2010, 1646, 1903,
	1494, 634, 1179, 1701, 1077, 1076, 884, 562, 557, 1613,
	1157, 1612, 858, 608, 888, 888, 1566, 1567, 1569, 1570,
	129, 1501, 777, 1007, 762, 129, 779, 875, 1008, 1098,
	1155, 1073, 976, 1476, 1999, 912, 913, 886, 1187, 565,
	565, 910, 1759, 998, 889, 1292, 390, 1156, 1533, 1488,
	129, 1850, 845, 911, 973, 2192, 920, 1395, 915, 1809,
	129, 2244, 1988, 1564, 1565, 1566, 1567, 1569, 1570, 1099,
	2120, 1150, 526, 1151, 1371, 525, 520, 521, 840, 1622,
	2094, 381, 914, 2245, 970, 2093, 129, 1064, 1080, 2092,
	129, 846, 129, 129, 129, 129, 129, 129, 2091, 1090,
	1865, 1864, 129, 386, 867, 1432, 129, 129, 1847, 382,
	1846, 1861, 687, 535, 1546, 1104, 1545, 1544, 129, 999,
	1000, 129, 1543, 1504, 1397, 544, 566, 566, 1003, 1454,
	129, 1092, 1453, 391, 567, 1168, 383, 129, 1006, 1451,
	1253, 1213, 920, 789, 613, 679, 1061, 1152, 1896, 778,
	356, 129, 1055, 129, 129, 385, 129, 1360, 1359, 129,
	390, 1074, 129, 129, 1224, 129, 129, 1150, 1062, 1151,
	565, 1081, 1406, 1086, 543, 390, 1066, 1146, 1079, 1078,
	1208, 1332, 126, 126, 1432, 528, 342, 567, 1091, 2119,
	1431, 595, 779, 344, 1708, 1108, 1107, 361, 1138, 1710,
	1106, 2066, 491, 1478, 1145, 496, 538, 357, 496, 538,
	538, 1268, 1268, 1204, 881, 518, 1117, 1127, 1131, 1118,
	1119, 1189, 1396, 1189, 545, 1181, 1275, 764, 1223, 2169,
	567, 1273, 890, 1307, 1125, 2235, 922, 392, 567, 347,
	1482, 1166, 837, 1152, 2250, 1215, 1222, 391, 594, 107,
	351, 1852, 1175, 1174, 1413, 1414, 1681, 566, 896, 1486,
	600, 600, 391, 1063, 342, 384, 1678, 1211, 1164, 126,
	617, 1193, 1292, 1198, 885, 1163, 1695, 1203, 640, 838,
	2255, 640, 1282, 918, 919, 921, 922, 652, 1202, 1286,
	1212, 348, 113, 1294, 1206, 752, 1207, 2143, 751, 2244,
	1303, 912, 913, 1482, 1289, 1319, 1319, 1330, 1438, 1341,
	1205, 643, 531, 643, 1752, 1353, 1354, 1355, 107, 387,
	1621, 1150, 1623, 1151, 915, 1570, 1279, 542, 1128, 378,
	1276, 1132, 1133, 1134, 1135, 1136, 536, 826, 106, 1859,
	2172, 532, 563, 558, 1142, 1143, 1144, 1304, 914, 358,
	390, 533, 842, 996, 129, 129, 1327, 1362, 1401, 699,
	2043, 129, 529, 2051, 2173, 1153, 50, 916, 917, 918,
	919, 921, 922, 51, 827, 52, 381, 825, 360, 1749,
	1672, 955, 1549, 2234, 1367, 129, 1877, 1892, 359, 1307,
	593, 129, 1305, 1302, 545, 567, 567, 1152, 386, 54,
	1250, 1841, 392, 1379, 382, 129, 129, 129, 920, 2217,
	2067, 129, 1709, 2243, 1853, 129, 2253, 843, 1429, 2241,
	107, 1972, 2218, 129, 1750, 1788, 129, 1403, 530, 596,
	831, 383, 129, 390, 1952, 2251, 1161, 391, 1003, 1458,
	1006, 1372, 352, 565, 1469, 1433, 129, 1000, 999, 897,
	385, 129, 1160, 129, 759, 350, 349, 654, 1506, 1267,
	129, 1153, 809, 1474, 1380, 2263, 930, 1307, 1953, 2086,
	844, 2254, 1158, 1274, 129, 1929, 608, 1374, 1439, 1441,
	1409, 2233, 353, 2085, 2057, 823, 1468, 1748, 1376, 1159,
	1446, 628, 2256, 1449, 2180, 546, 342, 808, 1424, 1307,
	1248, 1251, 635, 342, 518, 518, 617, 1420, 2219, 1377,
	774, 354, 1984, 355, 1484, 1471, 392, 1436, 1789, 1490,
	391, 1375, 116, 2133, 1790, 1444, 567, 1425, 640, 1427,
	566, 392, 112, 1247, 1148, 1459, 1455, 608, 1426, 931,
	1072, 1849, 2018, 1496, 1301, 640, 1497, 1498, 608, 107,
	118, 1477, 1487, 1663, 1464, 1452, 807, 1659, 1404, 1105,
	384, 1495, 1514, 1264, 2220, 1987, 2262, 1948, 1480, 1949,
	1535, 1500, 1986, 884, 1930, 775, 546, 1512, 1262, 776,
	1096, 809, 884, 1070, 808, 500, 119, 500, 1141, 1068,
	1837, 1974, 2058, 1520, 114, 1071, 1113, 1636, 1635, 1951,
	1523, 115, 1419, 501, 2007, 501, 1872, 2019, 1954, 1871,
	492, 1983, 1507, 1505, 387, 1153, 490, 774, 1539, 1540,
	110, 543, 1687, 1687, 632, 631, 799, 1814, 1249, 1521,
	129, 923, 924, 916, 917, 918, 919, 921, 922, 565,
	1941, 760, 546, 807, 1473, 2055, 1532, 1509, 1258, 1868,
	1684, 129, 1310, 129, 129, 518, 1259, 1510, 1260, 1588,
	129, 1515, 1265, 502, 129, 502, 1114, 627, 129, 2056,
	1601, 1985, 496, 342, 626, 1691, 1691, 518, 797, 518,
	129, 800, 2046, 1928, 1593, 1950, 1629, 1725, 1632, 1707,
	129, 129, 129, 1556, 1694, 1694, 129, 1615, 657, 1516,
	129, 129, 129, 129, 129, 122, 392, 1596, 1597, 1598,
	1689, 1689, 129, 1479, 129, 129, 1450, 1628, 1447, 1692,
	1692, 1369, 1183, 848, 847, 1620, 566, 1619, 129, 841,
	1660, 836, 1637, 835, 1690, 1690, 1640, 834, 1624, 342,
	342, 854, 342, 833, 600, 832, 829, 630, 621, 2006,
	1562, 1563, 1594, 129, 129, 342, 376, 31, 1139, 1648,
	126, 1716, 503, 3, 503, 1650, 1130, 1511, 1261, 342,
	1628, 977, 546, 1654, 1513, 1263, 342, 342, 342, 1673,
	891, 839, 1675, 1655, 1309, 2213, 1641, 2177, 1691, 392,
	1982, 1857, 1704, 1671, 618, 1693, 1693, 1855, 754, 567,
	126, 619, 1651, 1682, 1848, 1642, 1685, 1694, 1638, 1407,
	129, 1713, 1656, 1705, 1744, 1745, 1746, 1706, 1728, 1703,
	1399, 1696, 1165, 1875, 1711, 375, 30, 1162, 1154, 615,
	370, 27, 1692, 1719, 1718, 1717, 905, 1680, 499, 904,
	504, 902, 504, 1739, 1732, 898, 374, 17, 368, 13,
	1464, 369, 16, 371, 14, 893, 753, 1568, 696, 1644,
	2031, 811, 604, 1735, 2005, 519, 107, 1738, 367, 12,
	1018, 505, 107, 505, 2245, 1198, 1464, 31, 1417, 1765,
	1760, 1088, 2033, 1762, 612, 1443, 1215, 1763, 129, 1714,
	1082, 129, 1767, 2150, 1432, 1215, 1768, 1751, 1753, 1754,
	1442, 1432, 1795, 129, 377, 126, 565, 1440, 1693, 1833,
	518, 1793, 1796, 390, 129, 1578, 373, 10, 1961, 366,
	8, 828, 1803, 2125, 1826, 1825, 1818, 1869, 1799, 912,
	913, 365, 4, 812, 605, 496, 1843, 815, 1448, 1418,
	1445, 1838, 2156, 1970, 1402, 1103, 30, 129, 1839, 1366,
	129, 27, 1828, 1398, 1824, 1815, 522, 523, 1192, 390,
	1167, 129, 1840, 493, 1065, 1010, 1844, 17, 565, 13,
	2248, 518, 16, 2261, 14, 518, 914, 126, 518, 518,
	518, 518, 518, 2200, 1883, 912, 913, 1140, 1579, 12,
	2159, 518, 518, 566, 2015, 567, 1862, 1811, 1863, 1860,
	391, 1808, 1874, 600, 1755, 1894, 617, 1856, 915, 1858,
	823, 1870, 1884, 1915, 1873, 342, 1562, 1563, 819, 129,
	1618, 1887, 1180, 1608, 1895, 1018, 1018, 1907, 1878, 1879,
	912, 913, 914, 819, 818, 1361, 342, 10, 1200, 1201,
	8, 342, 1902, 1358, 342, 1357, 391, 518, 518, 1901,
	518, 617, 4, 1049, 1299, 566, 1048, 964, 820, 2168,
	2030, 1747, 1639, 974, 972, 763, 527, 2065, 379, 1464,
	1129, 830, 1464, 2011, 1880, 2171, 1927, 1921, 1548, 1573,
	1571, 1572, 1564, 1565, 1566, 1567, 1569, 1570, 129, 2095,
	2042, 1308, 129, 129, 975, 48, 1822, 673, 1942, 565,
	1816, 1388, 1965, 1387, 393, 1075, 1968, 129, 129, 129,
	1826, 1825, 1962, 695, 550, 1318, 129, 1017, 129, 1216,
	129, 129, 129, 1826, 1825, 129, 129, 1826, 1825, 1978,
	755, 907, 129, 129, 1975, 697, 129, 1015, 698, 1016,
	1824, 1976, 1969, 1981, 129, 1004, 1977, 685, 1013, 1955,
	650, 129, 1196, 1824, 1272, 1290, 1531, 1824, 968, 665,
	129, 677, 1967, 676, 1287, 2014, 1971, 756, 2016, 2013,
	1485, 1898, 1112, 1408, 2032, 1109, 1854, 534, 1559, 648,
	2023, 1339, 1331, 1328, 791, 870, 566, 956, 2025, 2026,
	1197, 2001, 2041, 784, 2034, 1491, 2002, 2003, 1365, 859,
	2008, 1120, 2024, 603, 129, 602, 390, 129, 1049, 1049,
	1383, 1048, 1048, 782, 1069, 129, 1373, 949, 948, 524,
	2135, 773, 390, 772, 1400, 1662, 2249, 2149, 1851, 2191,
	117, 2117, 2048, 129, 2028, 1472, 565, 68, 29, 342,
	1384, 28, 1991, 129, 2069, 87, 617, 2071, 1997, 1826,
	1825, 1826, 1825, 86, 1464, 1464, 85, 84, 1464, 2053,
	129, 83, 567, 2083, 885, 2068, 82, 81, 129, 392,
	342, 2081, 1017, 1017, 129, 2070, 1422, 2084, 2082, 1824,
	80, 1824, 79, 129, 129, 78, 2073, 2098, 2063, 77,
	342, 342, 342, 391, 129, 2105, 1437, 2112, 2102, 76,
	342, 75, 74, 2113, 2078, 73, 72, 2110, 342, 391,
	71, 342, 129, 70, 515, 392, 129, 342, 2124, 67,
	66, 2088, 65, 566, 567, 64, 2139, 2137, 26, 2089,
	2090, 342, 2101, 22, 21, 20, 342, 2061, 1489, 2144,
	2131, 546, 565, 25, 2145, 342, 24, 18, 2127, 2142,
	15, 2132, 129, 129, 9, 2080, 19, 11, 46, 1422,
	129, 45, 2141, 44, 43, 42, 2148, 41, 7, 39,
	390, 129, 129, 38, 2157, 6, 5, 103, 100, 102,
	99, 101, 104, 96, 2147, 97, 2164, 98, 2160, 2158,
	1464, 2170, 2163, 2167, 95, 1562, 1563, 129, 94, 2182,
	35, 129, 34, 2183, 129, 33, 32, 2188, 2, 1,
	0, 390, 0, 113, 0, 2184, 129, 0, 0, 129,
	0, 0, 2190, 2161, 0, 0, 2185, 0, 0, 566,
	129, 0, 0, 2197, 2196, 0, 2166, 129, 2199, 1826,
	1825, 2203, 2202, 0, 0, 2222, 2211, 2174, 1518, 1519,
	0, 2212, 0, 0, 0, 567, 0, 391, 2224, 106,
	0, 0, 0, 0, 2193, 0, 0, 0, 0, 1824,
	2232, 0, 0, 2231, 129, 2194, 2195, 1018, 2189, 0,
	0, 0, 2242, 0, 2240, 0, 0, 50, 0, 0,
	2247, 0, 2246, 0, 51, 0, 52, 1018, 391, 0,
	0, 0, 1568, 0, 0, 0, 0, 0, 1116, 2259,
	2258, 2260, 2257, 0, 0, 1422, 1585, 1586, 1587, 0,
	54, 0, 0, 0, 0, 0, 2187, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1103, 0, 1103, 1633,
	0, 0, 0, 0, 0, 518, 0, 0, 0, 342,
	1018, 0, 1198, 1647, 0, 0, 1051, 674, 61, 0,
	1578, 0, 392, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 342, 1657, 1658, 392, 0,
	0, 1437, 0, 0, 0, 1664, 1665, 1667, 1669, 1670,
	0, 0, 567, 0, 0, 0, 113, 1677, 0, 1679,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 342, 1050, 0, 1014, 0, 0, 0,
	0, 0, 656, 0, 758, 0, 0, 0, 0, 0,
	1018, 0, 0, 1579, 0, 0, 0, 0, 342, 342,
	0, 0, 106, 116, 0, 0, 0, 1423, 0, 0,
	0, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	1049, 793, 794, 1048, 0, 539, 1018, 1018, 547, 0,
	50, 118, 0, 0, 0, 1018, 1018, 51, 61, 52,
	1049, 0, 0, 1048, 0, 1333, 1952, 1723, 1724, 1945,
	0, 0, 0, 0, 0, 1757, 0, 1943, 567, 0,
	0, 1947, 0, 54, 0, 0, 0, 119, 1018, 0,
	0, 1051, 1051, 0, 0, 114, 0, 0, 0, 0,
	1953, 0, 115, 0, 1017, 0, 392, 1564, 1565, 1566,
	1567, 1569, 1570, 1049, 863, 863, 1048, 0, 0, 0,
	0, 110, 1946, 872, 1017, 0, 1769, 1770, 1771, 1772,
	1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782,
	1783, 1784, 1785, 1786, 1787, 0, 1791, 392, 0, 1050,
	1050, 1014, 1014, 1437, 0, 0, 1103, 1821, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1835, 0,
	950, 951, 952, 953, 954, 0, 0, 1017, 0, 1845,
	962, 0, 0, 0, 0, 1562, 1563, 0, 0, 0,
	969, 0, 0, 1049, 0, 0, 1048, 0, 0, 1948,
	0, 1949, 0, 0, 0, 0, 116, 0, 0, 0,
	1137, 0, 342, 0, 0, 342, 112, 0, 0, 1018,
	0, 0, 0, 0, 0, 0, 1891, 0, 0, 1049,
	1049, 1951, 1048, 1048, 118, 0, 0, 0, 1049, 1049,
	1954, 1048, 1048, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1017, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 1049, 0, 0, 1048, 0, 0, 0, 114, 0,
	0, 0, 0, 0, 1922, 115, 0, 0, 0, 0,
	0, 0, 1568, 1017, 1017, 0, 113, 0, 0, 0,
	0, 547, 1017, 1017, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1950, 0, 1110,
	0, 1115, 0, 0, 0, 0, 0, 1122, 0, 0,
	0, 0, 0, 0, 0, 1017, 0, 0, 0, 0,
	0, 0, 106, 1821, 0, 1333, 1333, 0, 0, 0,
	1578, 0, 0, 617, 0, 0, 1821, 617, 1384, 0,
	1821, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 1979, 1980, 1437, 0, 0, 51, 0, 52,
	0, 1989, 0, 1990, 0, 342, 1992, 1993, 0, 0,
	1996, 342, 0, 0, 0, 0, 0, 342, 342, 0,
	0, 342, 1049, 54, 0, 1048, 0, 0, 0, 1891,
	0, 0, 0, 1333, 1333, 1333, 2021, 0, 0, 0,
	0, 0, 2027, 1579, 1018, 617, 0, 0, 1225, 1226,
	1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236,
	1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246,
	0, 1252, 0, 1254, 1255, 1256, 1257, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 1017, 0, 0, 2052,
	1280, 0, 2054, 0, 0, 0, 0, 0, 0, 0,
	342, 1018, 1821, 0, 1821, 0, 539, 0, 0, 0,
	2045, 0, 0, 1315, 1316, 0, 0, 1329, 342, 1340,
	1342, 1347, 1350, 1351, 1352, 0, 0, 106, 1437, 0,
	0, 0, 0, 0, 0, 2060, 1572, 1564, 1565, 1566,
	1567, 1569, 1570, 0, 0, 2097, 116, 0, 0, 0,
	0, 0, 0, 342, 0, 50, 112, 0, 0, 1891,
	1018, 0, 51, 1051, 52, 0, 0, 0, 617, 1891,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 2122,
	0, 0, 0, 1051, 0, 0, 0, 0, 54, 0,
	0, 0, 0, 0, 0, 0, 0, 2130, 0, 0,
	0, 1103, 0, 0, 1333, 1333, 0, 0, 0, 0,
	119, 0, 0, 0, 0, 0, 0, 0, 114, 0,
	0, 1050, 0, 1014, 959, 115, 961, 1049, 2126, 0,
	1048, 0, 0, 965, 0, 0, 1051, 2151, 2152, 0,
	0, 1050, 0, 1014, 110, 617, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1891, 617, 0, 0,
	0, 0, 0, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
	1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
	1333, 1333, 2181, 1333, 1049, 0, 617, 1048, 0, 342,
	0, 1017, 1821, 0, 1050, 0, 1014, 0, 0, 0,
	0, 2097, 863, 0, 1891, 0, 0, 0, 872, 0,
	0, 116, 0, 0, 0, 342, 1051, 0, 0, 1483,
	0, 112, 617, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 1499, 1049, 0, 0, 1048, 0, 1017, 0,
	0, 0, 1051, 1051, 0, 0, 0, 0, 0, 2239,
	0, 1051, 1051, 0, 0, 0, 0, 0, 539, 0,
	0, 539, 539, 0, 1050, 119, 1014, 0, 0, 1502,
	1503, 0, 0, 114, 0, 1508, 0, 0, 0, 0,
	115, 0, 0, 0, 1051, 0, 0, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1017, 0, 363,
	1050, 1050, 1014, 1014, 0, 0, 0, 1527, 0, 1050,
	1050, 1014, 1014, 0, 1534, 912, 913, 1538, 932, 933,
	934, 942, 943, 944, 0, 0, 0, 0, 0, 0,
	0, 935, 0, 1552, 0, 61, 0, 61, 915, 0,
	0, 946, 1050, 0, 1014, 0, 0, 0, 0, 0,
	0, 0, 0, 1562, 1563, 0, 61, 0, 0, 962,
	0, 0, 914, 0, 0, 1347, 1347, 1347, 929, 0,
	0, 0, 0, 0, 0, 0, 912, 913, 0, 932,
	933, 934, 942, 943, 944, 0, 0, 0, 0, 0,
	0, 0, 935, 0, 0, 1270, 0, 0, 0, 915,
	0, 0, 946, 0, 0, 0, 1577, 0, 0, 0,
	0, 0, 0, 0, 0, 1051, 0, 0, 0, 0,
	0, 0, 920, 914, 0, 0, 0, 0, 0, 929,
	0, 0, 1649, 0, 0, 0, 0, 1122, 0, 0,
	0, 939, 947, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 945,
	1568, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1050, 937, 1014, 0, 0, 0, 0,
	930, 0, 0, 920, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 939, 947, 863, 936, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 872, 1333, 1578, 0,
	945, 0, 0, 1721, 0, 0, 1722, 0, 0, 0,
	0, 0, 0, 0, 0, 937, 0, 0, 1727, 0,
	0, 930, 1333, 0, 0, 0, 0, 1736, 0, 0,
	0, 912, 913, 931, 0, 1740, 0, 0, 1499, 0,
	0, 0, 0, 0, 0, 0, 936, 0, 0, 940,
	0, 0, 0, 0, 915, 0, 0, 0, 1764, 0,
	0, 0, 1766, 0, 0, 0, 0, 61, 0, 0,
	0, 1579, 0, 0, 0, 0, 0, 0, 914, 0,
	0, 0, 0, 0, 61, 0, 0, 61, 0, 0,
	0, 0, 0, 0, 931, 1797, 1798, 0, 0, 1465,
	1051, 0, 0, 0, 1804, 1805, 1806, 0, 0, 0,
	940, 0, 0, 0, 0, 1333, 938, 0, 547, 926,
	927, 928, 941, 0, 925, 923, 924, 916, 917, 918,
	919, 921, 922, 0, 0, 0, 1829, 0, 920, 0,
	1604, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1051, 1050, 0,
	1014, 0, 1573, 1571, 1572, 1564, 1565, 1566, 1567, 1569,
	1570, 0, 0, 0, 0, 0, 0, 938, 0, 1270,
	926, 927, 928, 941, 0, 925, 923, 924, 916, 917,
	918, 919, 921, 922, 0, 0, 930, 0, 0, 961,
	0, 1603, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1050, 1051, 1014, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1906, 0, 0,
	0, 1909, 1910, 0, 0, 0, 1912, 0, 0, 0,
	0, 0, 0, 1914, 0, 1916, 0, 0, 0, 0,
	0, 0, 912, 913, 0, 932, 933, 934, 942, 943,
	944, 1923, 0, 0, 0, 961, 0, 0, 935, 931,
	0, 0, 0, 0, 1050, 915, 1014, 0, 946, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1932, 0, 0, 0, 0, 914,
	0, 0, 0, 0, 0, 929, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1963, 61, 0, 0, 0,
	61, 0, 0, 0, 1562, 1563, 0, 1580, 1581, 1582,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1904, 0, 0, 0, 0, 0, 0, 0, 0, 920,
	925, 923, 924, 916, 917, 918, 919, 921, 922, 0,
	2000, 0, 0, 61, 0, 0, 61, 0, 939, 947,
	0, 0, 0, 0, 61, 0, 0, 1577, 0, 0,
	61, 0, 0, 0, 0, 1702, 945, 912, 913, 0,
	932, 933, 934, 942, 943, 944, 2037, 2038, 0, 0,
	0, 937, 0, 935, 0, 0, 0, 930, 0, 0,
	915, 1465, 0, 946, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2050, 0, 0,
	0, 1568, 936, 0, 914, 0, 0, 0, 912, 913,
	929, 932, 933, 934, 942, 943, 944, 0, 0, 0,
	0, 0, 0, 0, 935, 0, 0, 0, 0, 0,
	0, 915, 0, 0, 946, 0, 0, 0, 1583, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2087, 0,
	931, 0, 0, 0, 0, 914, 0, 0, 0, 1578,
	0, 929, 0, 0, 920, 0, 940, 0, 2100, 0,
	0, 0, 0, 912, 913, 0, 932, 933, 934, 942,
	943, 944, 0, 939, 947, 0, 0, 0, 0, 935,
	0, 0, 0, 0, 0, 0, 915, 0, 872, 946,
	0, 945, 0, 0, 0, 0, 0, 0, 1562, 1563,
	0, 1580, 1581, 1582, 0, 920, 937, 0, 0, 0,
	914, 2134, 930, 0, 1730, 0, 929, 0, 0, 0,
	0, 0, 1579, 938, 939, 947, 926, 927, 928, 941,
	0, 925, 923, 924, 916, 917, 918, 919, 921, 922,
	0, 0, 945, 0, 0, 0, 0, 1602, 0, 0,
	0, 1577, 0, 0, 0, 0, 0, 937, 0, 0,
	0, 0, 0, 930, 1465, 0, 0, 1465, 0, 0,
	920, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 931, 0, 0, 936, 939,
	947, 0, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 940, 0, 0, 0, 1568, 0, 945, 1574, 1575,
	1576, 0, 0, 1573, 1571, 1572, 1564, 1565, 1566, 1567,
	1569, 1570, 937, 0, 2210, 2210, 0, 0, 930, 0,
	0, 0, 0, 0, 0, 0, 931, 0, 0, 0,
	0, 0, 1583, 0, 2226, 0, 0, 0, 0, 0,
	0, 0, 940, 936, 0, 0, 0, 0, 0, 2210,
	0, 0, 0, 1578, 0, 0, 0, 0, 938, 0,
	0, 926, 927, 928, 941, 0, 925, 923, 924, 916,
	917, 918, 919, 921, 922, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2210, 931, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 940, 0, 938,
	0, 0, 926, 927, 928, 941, 0, 925, 923, 924,
	916, 917, 918, 919, 921, 922, 1579, 0, 0, 0,
	0, 0, 0, 1554, 0, 0, 0, 0, 0, 1465,
	1465, 0, 0, 1465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2035, 0, 0, 938, 0, 0, 926, 927, 928,
	941, 0, 925, 923, 924, 916, 917, 918, 919, 921,
	922, 0, 0, 0, 0, 2178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1574, 1575, 1576, 0, 0, 1573, 1571, 1572,
	1564, 1565, 1566, 1567, 1569, 1570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 389,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 961, 131, 132, 408, 133, 409,
	410, 411, 412, 284, 413, 414, 415, 416, 134, 135,
	136, 285, 286, 287, 288, 137, 289, 290, 417, 138,
	291, 292, 139, 140, 418, 419, 293, 294, 295, 420,
	141, 296, 421, 394, 422, 142, 143, 144, 0, 145,
	423, 146, 147, 148, 424, 395, 149, 150, 425, 426,
	428, 427, 429, 430, 431, 151, 152, 343, 153, 297,
	154, 298, 299, 432, 155, 433, 156, 434, 157, 435,
	436, 158, 159, 437, 160, 438, 0, 439, 300, 161,
	162, 163, 301, 302, 440, 441, 442, 164, 165, 303,
	304, 305, 0, 166, 443, 167, 444, 445, 396, 446,
	168, 306, 447, 307, 448, 169, 170, 171, 172, 308,
	309, 398, 449, 176, 450, 173, 451, 397, 174, 310,
	175, 311, 312, 313, 314, 315, 452, 316, 453, 399,
	177, 178, 179, 400, 180, 181, 182, 454, 184, 183,
	455, 317, 401, 185, 402, 456, 186, 457, 458, 187,
	0, 188, 189, 190, 192, 318, 191, 403, 193, 194,
	196, 195, 459, 460, 461, 319, 197, 320, 198, 199,
	462, 200, 463, 464, 201, 465, 466, 202, 321, 404,
	203, 405, 322, 204, 205, 206, 207, 208, 467, 209,
	323, 210, 324, 211, 468, 212, 213, 214, 215, 216,
	325, 217, 218, 469, 219, 220, 221, 222, 223, 225,
	226, 224, 227, 228, 229, 230, 470, 231, 406, 232,
	233, 326, 234, 0, 238, 239, 240, 241, 471, 243,
	327, 242, 244, 245, 472, 246, 235, 236, 247, 407,
	248, 328, 329, 249, 473, 255, 250, 251, 237, 252,
	254, 330, 253, 331, 474, 256, 475, 257, 258, 259,
	260, 261, 262, 263, 476, 332, 333, 334, 477, 478,
	264, 265, 335, 336, 479, 266, 267, 268, 269, 480,
	481, 270, 271, 272, 273, 482, 274, 483, 337, 275,
	276, 277, 338, 339, 484, 485, 278, 486, 487, 488,
	489, 279, 280, 281, 282, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 389, 0, 0,
	0, 0, 0, 0, 1885, 0, 0, 0, 0, 0,
	0, 0, 1886, 131, 132, 408, 133, 409, 410, 411,
	412, 284, 413, 414, 415, 416, 134, 135, 136, 285,
	286, 287, 288, 137, 289, 290, 417, 138, 291, 292,
	139, 140, 418, 419, 293, 294, 295, 420, 141, 296,
	421, 394, 422, 142, 143, 144, 0, 145, 423, 146,
	147, 148, 424, 395, 149, 150, 425, 426, 428, 427,
	429, 430, 431, 151, 152, 343, 153, 297, 154, 298,
	299, 432, 155, 433, 156, 434, 157, 435, 436, 158,
	159, 437, 160, 438, 0, 439, 300, 161, 162, 163,
	301, 302, 440, 441, 442, 164, 165, 303, 304, 305,
	0, 166, 443, 167, 444, 445, 396, 446, 168, 306,
	447, 307, 448, 169, 170, 171, 172, 308, 309, 398,
	449, 176, 450, 173, 451, 397, 174, 310, 175, 311,
	312, 313, 314, 315, 452, 316, 453, 399, 177, 178,
	179, 400, 180, 181, 182, 454, 184, 183, 455, 317,
	401, 185, 402, 456, 186, 457, 458, 187, 0, 188,
	189, 190, 192, 318, 191, 403, 193, 194, 196, 195,
	459, 460, 461, 319, 197, 320, 198, 199, 462, 200,
	463, 464, 201, 465, 466, 202, 321, 404, 203, 405,
	322, 204, 205, 206, 207, 208, 467, 209, 323, 210,
	324, 211, 468, 212, 213, 214, 215, 216, 325, 217,
	218, 469, 219, 220, 221, 222, 223, 225, 226, 224,
	227, 228, 229, 230, 470, 231, 406, 232, 233, 326,
	234, 0, 238, 239, 240, 241, 471, 243, 327, 242,
	244, 245, 472, 246, 235, 236, 247, 407, 248, 328,
	329, 249, 473, 255, 250, 251, 237, 252, 254, 330,
	253, 331, 474, 256, 475, 257, 258, 259, 260, 261,
	262, 263, 476, 332, 333, 334, 477, 478, 264, 265,
	335, 336, 479, 266, 267, 268, 269, 480, 481, 270,
	271, 272, 273, 482, 274, 483, 337, 275, 276, 277,
	338, 339, 484, 485, 278, 486, 487, 488, 489, 279,
	280, 281, 282, 283, 0, 0, 0, 389, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2162, 131, 132, 408, 133, 409, 410, 411,
	412, 284, 413, 414, 415, 416, 134, 135, 136, 285,
	286, 287, 288, 137, 289, 290, 417, 138, 291, 292,
	139, 140, 418, 419, 293, 294, 295, 420, 141, 296,
	421, 394, 422, 142, 143, 144, 0, 145, 423, 146,
	147, 148, 424, 395, 149, 150, 425, 426, 428, 427,
	429, 430, 431, 151, 152, 343, 153, 297, 154, 298,
	299, 432, 155, 433, 156, 434, 157, 435, 436, 158,
	159, 437, 160, 438, 0, 439, 300, 161, 162, 163,
	301, 302, 440, 441, 442, 164, 165, 303, 304, 305,
	0, 166, 443, 167, 444, 445, 396, 446, 168, 306,
	447, 307, 448, 169, 170, 171, 172, 308, 309, 398,
	449, 176, 450, 173, 451, 397, 174, 310, 175, 311,
	312, 313, 314, 315, 452, 316, 453, 399, 177, 178,
	179, 400, 180, 181, 182, 454, 184, 183, 455, 317,
	401, 185, 402, 456, 186, 457, 458, 187, 0, 188,
	189, 190, 192, 318, 191, 403, 193, 194, 196, 195,
	459, 460, 461, 319, 197, 320, 198, 199, 462, 200,
	463, 464, 201, 465, 466, 202, 321, 404, 203, 405,
	322, 204, 205, 206, 207, 208, 467, 209, 323, 210,
	324, 211, 468, 212, 213, 214, 215, 216, 325, 217,
	218, 469, 219, 220, 221, 222, 223, 225, 226, 224,
	227, 228, 229, 230, 470, 231, 406, 232, 233, 326,
	234, 0, 238, 239, 240, 241, 471, 243, 327, 242,
	244, 245, 472, 246, 235, 236, 247, 407, 248, 328,
	329, 249, 473, 255, 250, 251, 237, 252, 254, 330,
	253, 331, 474, 256, 475, 257, 258, 259, 260, 261,
	262, 263, 476, 332, 333, 334, 477, 478, 264, 265,
	335, 336, 479, 266, 267, 268, 269, 480, 481, 270,
	271, 272, 273, 482, 274, 483, 337, 275, 276, 277,
	338, 339, 484, 485, 278, 486, 487, 488, 489, 279,
	280, 281, 282, 283, 389, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 878, 0, 0,
	131, 132, 408, 133, 409, 410, 411, 412, 284, 413,
	414, 415, 416, 134, 135, 136, 285, 286, 287, 288,
	137, 289, 290, 417, 138, 291, 292, 139, 140, 418,
	419, 293, 294, 295, 420, 141, 296, 421, 394, 422,
	142, 143, 144, 0, 145, 423, 146, 147, 148, 424,
	395, 149, 150, 425, 426, 428, 427, 429, 430, 431,
	151, 152, 343, 153, 297, 154, 298, 299, 432, 155,
	433, 156, 434, 157, 435, 436, 158, 159, 437, 160,
	438, 0, 439, 300, 161, 162, 163, 301, 302, 440,
	441, 442, 164, 165, 303, 304, 305, 0, 166, 443,
	167, 444, 445, 396, 446, 168, 306, 447, 307, 448,
	169, 170, 171, 172, 308, 309, 398, 449, 176, 450,
	173, 451, 397, 174, 310, 175, 311, 312, 313, 314,
	315, 452, 316, 453, 399, 177, 178, 179, 400, 180,
	181, 182, 454, 184, 183, 455, 317, 401, 185, 402,
	456, 186, 457, 458, 187, 0, 188, 189, 190, 192,
	318, 191, 403, 193, 194, 196, 195, 459, 460, 461,
	319, 197, 320, 198, 199, 462, 200, 463, 464, 201,
	465, 466, 202, 321, 404, 203, 405, 322, 204, 205,
	206, 207, 208, 467, 209, 323, 210, 324, 211, 468,
	212, 213, 214, 215, 216, 325, 217, 218, 469, 219,
	220, 221, 222, 223, 225, 226, 224, 227, 228, 229,
	230, 470, 231, 406, 232, 233, 326, 234, 0, 238,
	239, 240, 241, 471, 243, 327, 242, 244, 245, 472,
	246, 235, 236, 247, 407, 248, 328, 329, 249, 473,
	255, 250, 251, 237, 252, 254, 330, 253, 331, 474,
	256, 475, 257, 258, 259, 260, 261, 262, 263, 476,
	332, 333, 334, 477, 478, 264, 265, 335, 336, 479,
	266, 267, 268, 269, 480, 481, 270, 271, 272, 273,
	482, 274, 483, 337, 275, 276, 277, 338, 339, 484,
	485, 278, 486, 487, 488, 489, 279, 280, 281, 282,
	283, 693, 682, 683, 680, 681, 672, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 132, 0,
	133, 0, 0, 0, 0, 710, 675, 0, 0, 0,
	134, 135, 136, 285, 725, 287, 726, 137, 727, 728,
	0, 138, 291, 292, 139, 140, 678, 709, 729, 730,
	295, 0, 141, 721, 0, 701, 0, 142, 143, 144,
	0, 145, 0, 146, 147, 148, 0, 395, 149, 150,
	0, 702, 703, 705, 0, 704, 706, 151, 152, 343,
	153, 731, 154, 732, 733, 873, 155, 0, 156, 0,
	157, 0, 0, 724, 159, 0, 160, 0, 0, 0,
	666, 161, 162, 163, 711, 712, 689, 0, 0, 164,
	165, 734, 735, 736, 0, 166, 0, 167, 0, 0,
	396, 0, 168, 722, 0, 307, 0, 169, 170, 171,
	172, 718, 720, 398, 0, 176, 0, 173, 0, 397,
	174, 737, 175, 738, 739, 740, 741, 742, 0, 700,
	0, 399, 177, 178, 179, 400, 180, 181, 182, 0,
	184, 183, 0, 723, 401, 185, 402, 0, 186, 0,
	0, 187, 0, 188, 189, 190, 192, 318, 191, 403,
	193, 194, 196, 195, 661, 0, 690, 719, 197, 743,
	198, 199, 0, 200, 0, 0, 201, 0, 0, 202,
	321, 404, 203, 405, 713, 204, 205, 206, 207, 208,
	0, 209, 714, 210, 324, 211, 0, 212, 213, 214,
	215, 216, 744, 217, 218, 0, 219, 220, 221, 222,
	223, 225, 226, 224, 227, 228, 229, 230, 0, 231,
	406, 232, 233, 667, 234, 0, 238, 239, 240, 241,
	116, 243, 327, 242, 244, 245, 707, 246, 235, 236,
	247, 407, 248, 745, 329, 249, 0, 255, 250, 251,
	237, 252, 254, 746, 253, 715, 0, 256, 118, 257,
	258, 259, 260, 261, 262, 263, 0, 332, 747, 748,
	0, 0, 264, 265, 716, 717, 688, 266, 267, 268,
	269, 0, 0, 270, 271, 272, 273, 708, 274, 0,
	337, 275, 276, 277, 653, 749, 0, 0, 278, 0,
	0, 0, 114, 279, 280, 281, 282, 283, 662, 115,
	0, 0, 0, 0, 660, 0, 0, 0, 0, 658,
	659, 693, 682, 683, 680, 681, 672, 0, 668, 0,
	0, 0, 0, 671, 0, 0, 0, 131, 132, 1296,
	133, 0, 0, 0, 0, 710, 675, 0, 0, 0,
	134, 135, 136, 285, 725, 287, 726, 137, 727, 728,
	0, 138, 291, 292, 139, 140, 678, 709, 729, 730,
	295, 0, 141, 721, 0, 701, 0, 142, 143, 144,
	0, 145, 0, 146, 147, 148, 0, 395, 149, 150,
	0, 702, 703, 705, 0, 704, 706, 151, 152, 343,
	153, 731, 154, 732, 733, 0, 155, 0, 156, 0,
	157, 1297, 0, 724, 159, 0, 160, 0, 0, 0,
	666, 161, 162, 163, 711, 712, 689, 0, 0, 164,
	165, 734, 735, 736, 0, 166, 0, 167, 0, 0,
	396, 0, 168, 722, 0, 307, 0, 169, 170, 171,
	172, 718, 720, 398, 0, 176, 0, 173, 0, 397,
	174, 737, 175, 738, 739, 740, 741, 742, 0, 700,
	0, 399, 177, 178, 179, 400, 180, 181, 182, 0,
	184, 183, 0, 723, 401, 185, 402, 0, 186, 0,
	0, 187, 0, 188, 189, 190, 192, 318, 191, 403,
	193, 194, 196, 195, 661, 0, 690, 719, 197, 743,
	198, 199, 0, 200, 0, 0, 201, 0, 0, 202,
	321, 404, 203, 405, 713, 204, 205, 206, 207, 208,
	0, 209, 714, 210, 324, 211, 0, 212, 213, 214,
	215, 216, 744, 217, 218, 0, 219, 220, 221, 222,
	223, 225, 226, 224, 227, 228, 229, 230, 0, 231,
	406, 232, 233, 667, 234, 0, 238, 239, 240, 241,
	0, 243, 327, 242, 244, 245, 707, 246, 235, 236,
	247, 407, 248, 745, 329, 249, 0, 255, 250, 251,
	237, 252, 254, 746, 253, 715, 0, 256, 0, 257,
	258, 259, 260, 261, 262, 263, 0, 332, 747, 748,
	0, 0, 264, 265, 716, 717, 688, 266, 267, 268,
	269, 0, 0, 270, 271, 272, 273, 708, 274, 0,
	337, 275, 276, 277, 338, 749, 1295, 0, 278, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 662, 0,
	0, 0, 0, 0, 660, 0, 0, 0, 0, 658,
	659, 1298, 693, 682, 683, 680, 681, 672, 668, 1293,
	0, 0, 0, 671, 0, 0, 0, 0, 131, 132,
	0, 133, 0, 0, 0, 0, 710, 675, 0, 0,
	0, 134, 135, 136, 285, 725, 287, 726, 137, 727,
	728, 0, 138, 291, 292, 139, 140, 678, 709, 729,
	730, 295, 0, 141, 721, 0, 701, 0, 142, 143,
	144, 0, 145, 0, 146, 147, 148, 0, 395, 149,
	150, 0, 702, 703, 705, 0, 704, 706, 151, 152,
	343, 153, 731, 154, 732, 733, 0, 155, 0, 156,
	0, 157, 0, 0, 724, 159, 0, 160, 0, 0,
	0, 666, 161, 162, 163, 711, 712, 689, 0, 0,
	164, 165, 734, 735, 736, 0, 166, 0, 167, 0,
	0, 396, 0, 168, 722, 0, 307, 0, 169, 170,
	171, 172, 718, 720, 398, 0, 176, 0, 173, 0,
	397, 174, 737, 175, 738, 739, 740, 741, 742, 0,
	700, 0, 399, 177, 178, 179, 400, 180, 181, 182,
	0, 184, 183, 0, 723, 401, 185, 402, 0, 186,
	0, 0, 187, 0, 188, 189, 190, 192, 318, 191,
	403, 193, 194, 196, 195, 661, 0, 690, 719, 197,
	743, 198, 199, 0, 200, 0, 0, 201, 0, 0,
	202, 321, 404, 203, 405, 713, 204, 205, 206, 207,
	208, 0, 209, 714, 210, 324, 211, 0, 212, 213,
	214, 215, 216, 744, 217, 218, 0, 219, 220, 221,
	222, 223, 225, 226, 224, 227, 228, 229, 230, 0,
	231, 406, 232, 233, 667, 234, 0, 238, 239, 240,
	241, 116, 243, 327, 242, 244, 245, 707, 246, 235,
	236, 247, 407, 248, 745, 329, 249, 0, 255, 250,
	251, 237, 252, 254, 746, 253, 715, 0, 256, 118,
	257, 258, 259, 260, 261, 262, 263, 0, 332, 747,
	748, 0, 0, 264, 265, 716, 717, 688, 266, 267,
	268, 269, 0, 0, 270, 271, 272, 273, 708, 274,
	0, 337, 275, 276, 277, 653, 749, 0, 0, 278,
	0, 0, 0, 114, 279, 280, 281, 282, 283, 662,
	115, 0, 0, 0, 0, 660, 0, 0, 0, 0,
	658, 659, 693, 682, 683, 680, 681, 672, 0, 668,
	0, 0, 0, 0, 671, 0, 0, 0, 131, 132,
	0, 133, 0, 0, 0, 0, 710, 675, 0, 0,
	0, 134, 135, 136, 285, 725, 287, 726, 137, 727,
	728, 1343, 138, 291, 292, 139, 140, 678, 709, 729,
	730, 295, 0, 141, 721, 0, 701, 0, 142, 143,
	144, 0, 145, 0, 146, 147, 148, 0, 395, 149,
	150, 0, 702, 703, 705, 0, 704, 706, 151, 152,
	343, 153, 731, 154, 732, 733, 0, 155, 0, 156,
	0, 157, 0, 0, 724, 159, 0, 160, 0, 0,
	0, 666, 161, 162, 163, 711, 712, 689, 0, 0,
	164, 165, 734, 735, 736, 0, 166, 0, 167, 0,
	1348, 396, 0, 168, 722, 0, 307, 0, 169, 170,
	171, 172, 718, 720, 398, 0, 176, 0, 173, 0,
	397, 174, 737, 175, 738, 739, 740, 741, 742, 0,
	700, 0, 399, 177, 178, 179, 400, 180, 181, 182,
	0, 184, 183, 1344, 723, 401, 185, 402, 0, 186,
	0, 0, 187, 0, 188, 189, 190, 192, 318, 191,
	403, 193, 194, 196, 195, 661, 0, 690, 719, 197,
	743, 198, 199, 0, 200, 0, 0, 201, 0, 0,
	202, 321, 404, 203, 405, 713, 204, 205, 206, 207,
	208, 0, 209, 714, 210, 324, 211, 0, 212, 213,
	214, 215, 216, 744, 217, 218, 0, 219, 220, 221,
	222, 223, 225, 226, 224, 227, 228, 229, 230, 0,
	231, 406, 232, 233, 667, 234, 0, 238, 239, 240,
	241, 0, 243, 327, 242, 244, 245, 707, 246, 235,
	236, 247, 407, 248, 745, 329, 249, 0, 255, 250,
	251, 237, 252, 254, 746, 253, 715, 0, 256, 0,
	257, 258, 259, 260, 261, 262, 263, 0, 332, 747,
	748, 0, 1345, 264, 265, 716, 717, 688, 266, 267,
	268, 269, 0, 0, 270, 271, 272, 273, 708, 274,
	0, 337, 275, 276, 277, 338, 749, 0, 0, 278,
	0, 0, 0, 0, 279, 280, 281, 282, 283, 662,
	0, 0, 0, 0, 0, 660, 0, 0, 0, 0,
	658, 659, 693, 682, 683, 680, 681, 672, 0, 668,
	0, 0, 0, 0, 671, 0, 0, 0, 131, 132,
	0, 133, 0, 0, 0, 0, 710, 675, 0, 0,
	0, 134, 135, 136, 285, 725, 287, 726, 137, 727,
	728, 0, 138, 291, 292, 139, 140, 678, 709, 729,
	730, 295, 0, 141, 721, 0, 701, 0, 142, 143,
	144, 0, 145, 0, 146, 147, 148, 0, 395, 149,
	150, 0, 702, 703, 705, 0, 704, 706, 151, 152,
	343, 153, 731, 154, 732, 733, 0, 155, 0, 156,
	0, 157, 0, 0, 724, 159, 0, 160, 0, 0,
	0, 666, 161, 162, 163, 711, 712, 689, 0, 0,
	164, 165, 734, 735, 736, 0, 166, 0, 167, 0,
	0, 396, 0, 168, 722, 0, 307, 0, 169, 170,
	171, 172, 718, 720, 398, 0, 176, 0, 173, 0,
	397, 174, 737, 175, 738, 739, 740, 741, 742, 0,
	700, 0, 399, 177, 178, 179, 400, 180, 181, 182,
	0, 184, 183, 0, 723, 401, 185, 402, 0, 186,
	0, 0, 187, 0, 188, 189, 190, 192, 318, 191,
	403, 193, 194, 196, 195, 661, 1712, 690, 719, 197,
	743, 198, 199, 0, 200, 0, 0, 201, 0, 0,
	202, 321, 404, 203, 405, 713, 204, 205, 206, 207,
	208, 0, 209, 714, 210, 324, 211, 0, 212, 213,
	214, 215, 216, 744, 217, 218, 0, 219, 220, 221,
	222, 223, 225, 226, 224, 227, 228, 229, 230, 0,
	231, 406, 232, 233, 667, 234, 0, 238, 239, 240,
	241, 0, 243, 327, 242, 244, 245, 707, 246, 235,
	236, 247, 407, 248, 745, 329, 249, 0, 255, 250,
	251, 237, 252, 254, 746, 253, 715, 0, 256, 0,
	257, 258, 259, 260, 261, 262, 263, 0, 332, 747,
	748, 0, 0, 264, 265, 716, 717, 688, 266, 267,
	268, 269, 0, 0, 270, 271, 272, 273, 708, 274,
	0, 337, 275, 276, 277, 338, 749, 0, 0, 278,
	0, 0, 0, 0, 279, 280, 281, 282, 283, 662,
	0, 0, 0, 0, 0, 660, 0, 0, 0, 0,
	658, 659, 864, 693, 682, 683, 680, 681, 672, 668,
	0, 0, 0, 0, 671, 0, 0, 0, 0, 131,
	132, 0, 133, 0, 0, 0, 0, 710, 675, 0,
	0, 0, 134, 135, 136, 285, 725, 287, 726, 137,
	727, 728, 0, 138, 291, 292, 139, 140, 678, 709,
	729, 730, 295, 0, 141, 721, 0, 701, 0, 142,
	143, 144, 0, 145, 0, 146, 147, 148, 0, 395,
	149, 150, 0, 702, 703, 705, 0, 704, 706, 151,
	152, 343, 153, 731, 154, 732, 733, 0, 155, 0,
	156, 0, 157, 0, 0, 724, 159, 0, 160, 0,
	0, 0, 666, 161, 162, 163, 711, 712, 689, 0,
	0, 164, 165, 734, 735, 736, 0, 166, 0, 167,
	0, 0, 396, 0, 168, 722, 0, 307, 0, 169,
	170, 171, 172, 718, 720, 398, 0, 176, 1124, 173,
	0, 397, 174, 737, 175, 738, 739, 740, 741, 742,
	0, 700, 0, 399, 177, 178, 179, 400, 180, 181,
	182, 0, 184, 183, 0, 723, 401, 185, 402, 0,
	186, 0, 0, 187, 0, 188, 189, 190, 192, 318,
	191, 403, 193, 194, 196, 195, 661, 0, 690, 719,
	197, 743, 198, 199, 0, 200, 0, 0, 201, 0,
	0, 202, 321, 404, 203, 405, 713, 204, 205, 206,
	207, 208, 0, 209, 714, 210, 324, 211, 1123, 212,
	213, 214, 215, 216, 744, 217, 218, 0, 219, 220,
	221, 222, 223, 225, 226, 224, 227, 228, 229, 230,
	0, 231, 406, 232, 233, 667, 234, 0, 238, 239,
	240, 241, 0, 243, 327, 242, 244, 245, 707, 246,
	235, 236, 247, 407, 248, 745, 329, 249, 0, 255,
	250, 251, 237, 252, 254, 746, 253, 715, 0, 256,
	0, 257, 258, 259, 260, 261, 262, 263, 0, 332,
	747, 748, 0, 0, 264, 265, 716, 717, 688, 266,
	267, 268, 269, 0, 0, 270, 271, 272, 273, 708,
	274, 0, 337, 275, 276, 277, 338, 749, 0, 0,
	278, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	662, 0, 0, 0, 0, 0, 660, 0, 0, 0,
	0, 658, 659, 693, 682, 683, 680, 681, 672, 0,
	668, 0, 0, 0, 0, 671, 0, 0, 0, 131,
	132, 0, 133, 0, 0, 0, 0, 710, 675, 0,
	0, 0, 134, 135, 136, 285, 725, 287, 726, 137,
	727, 728, 0, 138, 291, 292, 139, 140, 678, 709,
	729, 730, 295, 0, 141, 721, 0, 701, 0, 142,
	143, 144, 0, 145, 0, 146, 147, 148, 0, 395,
	149, 150, 0, 702, 703, 705, 0, 704, 706, 151,
	152, 343, 153, 731, 154, 732, 733, 0, 155, 0,
	156, 0, 157, 0, 0, 724, 159, 0, 160, 0,
	0, 0, 666, 161, 162, 163, 711, 712, 689, 0,
	0, 164, 165, 734, 735, 736, 0, 166, 0, 167,
	0, 0, 396, 0, 168, 722, 0, 307, 0, 169,
	170, 171, 172, 718, 720, 398, 0, 176, 0, 173,
	0, 397, 174, 737, 175, 738, 739, 740, 741, 742,
	0, 700, 0, 399, 177, 178, 179, 400, 180, 181,
	182, 0, 184, 183, 0, 723, 401, 185, 402, 0,
	186, 0, 0, 187, 0, 188, 189, 190, 192, 318,
	191, 403, 193, 194, 196, 195, 661, 0, 690, 719,
	197, 743, 198, 199, 0, 200, 0, 0, 201, 0,
	0, 202, 321, 404, 203, 405, 713, 204, 205, 206,
	207, 208, 0, 209, 714, 210, 324, 211, 0, 212,
	213, 214, 215, 216, 744, 217, 218, 0, 219, 220,
	221, 222, 223, 225, 226, 224, 227, 228, 229, 230,
	0, 231, 406, 232, 233, 667, 234, 0, 238, 239,
	240, 241, 0, 243, 327, 242, 244, 245, 707, 246,
	235, 236, 247, 407, 248, 745, 329, 249, 0, 255,
	250, 251, 237, 252, 254, 746, 253, 715, 0, 256,
	0, 257, 258, 259, 260, 261, 262, 263, 0, 332,
	747, 748, 0, 0, 264, 265, 716, 717, 688, 266,
	267, 268, 269, 0, 0, 270, 271, 272, 273, 708,
	274, 0, 337, 275, 276, 277, 338, 749, 0, 0,
	278, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	662, 0, 0, 0, 0, 0, 660, 0, 0, 0,
	0, 658, 659, 0, 0, 0, 0, 0, 967, 1288,
	668, 0, 0, 0, 0, 671, 693, 682, 683, 680,
	681, 672, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 132, 0, 133, 0, 0, 0, 0,
	710, 675, 0, 0, 0, 134, 135, 136, 285, 725,
	287, 726, 137, 727, 728, 0, 138, 291, 292, 139,
	140, 678, 709, 729, 730, 295, 0, 141, 721, 0,
	701, 0, 142, 143, 144, 0, 145, 0, 146, 147,
	148, 0, 395, 149, 150, 0, 702, 703, 705, 0,
	704, 706, 151, 152, 343, 153, 731, 154, 732, 733,
	0, 155, 0, 156, 0, 157, 0, 0, 724, 159,
	0, 160, 0, 0, 0, 666, 161, 162, 163, 711,
	712, 689, 0, 0, 164, 165, 734, 735, 736, 0,
	166, 0, 167, 0, 0, 396, 0, 168, 722, 0,
	307, 0, 169, 170, 171, 172, 718, 720, 398, 0,
	176, 0, 173, 0, 397, 174, 737, 175, 738, 739,
	740, 741, 742, 0, 700, 0, 399, 177, 178, 179,
	400, 180, 181, 182, 0, 184, 183, 0, 723, 401,
	185, 402, 0, 186, 0, 0, 187, 0, 188, 189,
	190, 192, 318, 191, 403, 193, 194, 196, 195, 661,
	0, 690, 719, 197, 743, 198, 199, 0, 200, 0,
	0, 201, 0, 0, 202, 321, 404, 203, 405, 713,
	204, 205, 206, 207, 208, 0, 209, 714, 210, 324,
	211, 0, 212, 213, 214, 215, 216, 744, 217, 218,
	0, 219, 220, 221, 222, 223, 225, 226, 224, 227,
	228, 229, 230, 0, 231, 406, 232, 233, 667, 234,
	0, 238, 239, 240, 241, 0, 243, 327, 242, 244,
	245, 707, 246, 235, 236, 247, 407, 248, 745, 329,
	249, 0, 255, 250, 251, 237, 252, 254, 746, 253,
	715, 0, 256, 0, 257, 258, 259, 260, 261, 262,
	263, 0, 332, 747, 748, 0, 0, 264, 265, 716,
	717, 688, 266, 267, 268, 269, 0, 0, 270, 271,
	272, 273, 708, 274, 0, 337, 275, 276, 277, 338,
	749, 0, 0, 278, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 662, 0, 0, 0, 0, 0, 660,
	0, 0, 0, 0, 658, 659, 693, 682, 683, 680,
	681, 672, 0, 668, 1794, 0, 0, 0, 671, 0,
	0, 0, 131, 132, 0, 133, 0, 0, 0, 0,
	710, 675, 0, 0, 0, 134, 135, 136, 285, 725,
	287, 726, 137, 727, 728, 0, 138, 291, 292, 139,
	140, 678, 709, 729, 730, 295, 0, 141, 721, 0,
	701, 0, 142, 143, 144, 0, 145, 0, 146, 147,
	148, 0, 395, 149, 150, 0, 702, 703, 705, 0,
	704, 706, 151, 152, 343, 153, 731, 154, 732, 733,
	0, 155, 0, 156, 0, 157, 0, 0, 724, 159,
	0, 160, 0, 0, 0, 666, 161, 162, 163, 711,
	712, 689, 0, 0, 164, 165, 734, 735, 736, 0,
	166, 0, 167, 0, 0, 396, 0, 168, 722, 0,
	307, 0, 169, 170, 171, 172, 718, 720, 398, 0,
	176, 0, 173, 0, 397, 174, 737, 175, 738, 739,
	740, 741, 742, 0, 700, 0, 399, 177, 178, 179,
	400, 180, 181, 182, 0, 184, 183, 0, 723, 401,
	185, 402, 0, 186, 0, 0, 187, 0, 188, 189,
	190, 192, 318, 191, 403, 193, 194, 196, 195, 661,
	0, 690, 719, 197, 743, 198, 199, 0, 200, 0,
	0, 201, 0, 0, 202, 321, 404, 203, 405, 713,
	204, 205, 206, 207, 208, 0, 209, 714, 210, 324,
	211, 0, 212, 213, 214, 215, 216, 744, 217, 218,
	0, 219, 220, 221, 222, 223, 225, 226, 224, 227,
	228, 229, 230, 0, 231, 406, 232, 233, 667, 234,
	0, 238, 239, 240, 241, 0, 243, 327, 242, 244,
	245, 707, 246, 235, 236, 247, 407, 248, 745, 329,
	249, 0, 255, 250, 251, 237, 252, 254, 746, 253,
	715, 0, 256, 0, 257, 258, 259, 260, 261, 262,
	263, 0, 332, 747, 748, 0, 0, 264, 265, 716,
	717, 688, 266, 267, 268, 269, 0, 0, 270, 271,
	272, 273, 708, 274, 0, 337, 275, 276, 277, 338,
	749, 1743, 0, 278, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 662, 0, 0, 0, 0, 0, 660,
	0, 0, 0, 0, 658, 659, 693, 682, 683, 680,
	681, 672, 0, 668, 0, 0, 0, 0, 671, 0,
	0, 0, 131, 132, 0, 133, 0, 0, 0, 0,
	710, 675, 0, 0, 0, 134, 135, 136, 285, 725,
	287, 726, 137, 727, 728, 0, 138, 291, 292, 139,
	140, 678, 709, 729, 730, 295, 0, 141, 721, 0,
	701, 0, 142, 143, 144, 0, 145, 0, 146, 147,
	148, 0, 395, 149, 150, 0, 702, 703, 705, 0,
	704, 706, 151, 152, 343, 153, 731, 154, 732, 733,
	0, 155, 0, 156, 0, 157, 0, 0, 724, 159,
	0, 160, 0, 0, 0, 666, 161, 162, 163, 711,
	712, 689, 0, 0, 164, 165, 734, 735, 736, 0,
	166, 0, 167, 0, 0, 396, 0, 168, 722, 0,
	307, 0, 169, 170, 171, 172, 718, 720, 398, 0,
	176, 0, 173, 0, 397, 174, 737, 175, 738, 739,
	740, 741, 742, 0, 700, 0, 399, 177, 178, 179,
	400, 180, 181, 182, 0, 184, 183, 0, 723, 401,
	185, 402, 0, 186, 0, 0, 187, 0, 188, 189,
	190, 192, 318, 191, 403, 193, 194, 196, 195, 661,
	0, 690, 719, 197, 743, 198, 199, 0, 200, 0,
	0, 201, 0, 0, 202, 321, 404, 203, 405, 713,
	204, 205, 206, 207, 208, 0, 209, 714, 210, 324,
	211, 0, 212, 213, 214, 215, 216, 744, 217, 218,
	0, 219, 220, 221, 222, 223, 225, 226, 224, 227,
	228, 229, 230, 0, 231, 406, 232, 233, 667, 234,
	0, 238, 239, 240, 241, 0, 243, 327, 242, 244,
	245, 707, 246, 235, 236, 247, 407, 248, 745, 329,
	249, 0, 255, 250, 251, 237, 252, 254, 746, 253,
	715, 0, 256, 0, 257, 258, 259, 260, 261, 262,
	263, 0, 332, 747, 748, 0, 0, 264, 265, 716,
	717, 688, 266, 267, 268, 269, 0, 0, 270, 271,
	272, 273, 708, 274, 0, 337, 275, 276, 277, 338,
	749, 0, 0, 278, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 662, 0, 0, 0, 0, 0, 660,
	0, 0, 0, 0, 658, 659, 693, 682, 683, 680,
	681, 672, 0, 668, 1733, 0, 0, 0, 671, 0,
	0, 0, 131, 132, 0, 133, 0, 0, 0, 0,
	710, 675, 0, 0, 0, 134, 135, 136, 285, 725,
	287, 726, 137, 727, 728, 0, 138, 291, 292, 139,
	140, 678, 709, 729, 730, 295, 0, 141, 721, 0,
	701, 0, 142, 143, 144, 0, 145, 0, 146, 147,
	148, 0, 395, 149, 150, 0, 702, 703, 705, 0,
	704, 706, 151, 152, 343, 153, 731, 154, 732, 733,
	873, 155, 0, 156, 0, 157, 0, 0, 724, 159,
	0, 160, 0, 0, 0, 666, 161, 162, 163, 711,
	712, 689, 0, 0, 164, 165, 734, 735, 736, 0,
	166, 0, 167, 0, 0, 396, 0, 168, 722, 0,
	307, 0, 169, 170, 171, 172, 718, 720, 398, 0,
	176, 0, 173, 0, 397, 174, 737, 175, 738, 739,
	740, 741, 742, 0, 700, 0, 399, 177, 178, 179,
	400, 180, 181, 182, 0, 184, 183, 0, 723, 401,
	185, 402, 0, 186, 0, 0, 187, 0, 188, 189,
	190, 192, 318, 191, 403, 193, 194, 196, 195, 661,
	0, 690, 719, 197, 743, 198, 199, 0, 200, 0,
	0, 201, 0, 0, 202, 321, 404, 203, 405, 713,
	204, 205, 206, 207, 208, 0, 209, 714, 210, 324,
	211, 0, 212, 213, 214, 215, 216, 744, 217, 218,
	0, 219, 220, 221, 222, 223, 225, 226, 224, 227,
	228, 229, 230, 0, 231, 406, 232, 233, 667, 234,
	0, 238, 239, 240, 241, 0, 243, 327, 242, 244,
	245, 707, 246, 235, 236, 247, 407, 248, 745, 329,
	249, 0, 255, 250, 251, 237, 252, 254, 746, 253,
	715, 0, 256, 0, 257, 258, 259, 260, 261, 262,
	263, 0, 332, 747, 748, 0, 0, 264, 265, 716,
	717, 688, 266, 267, 268, 269, 0, 0, 270, 271,
	272, 273, 708, 274, 0, 337, 275, 276, 277, 338,
	749, 0, 0, 278, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 662, 0, 0, 0, 0, 0, 660,
	0, 0, 0, 0, 658, 659, 693, 682, 683, 680,
	681, 672, 0, 668, 0, 0, 0, 0, 671, 0,
	0, 0, 131, 132, 0, 133, 0, 0, 0, 0,
	710, 675, 0, 0, 0, 134, 135, 136, 285, 725,
	287, 726, 137, 727, 728, 0, 138, 291, 292, 139,
	140, 678, 709, 729, 730, 295, 0, 141, 721, 0,
	701, 0, 142, 143, 144, 0, 145, 0, 146, 147,
	148, 0, 395, 149, 150, 0, 702, 703, 705, 0,
	704, 706, 151, 152, 343, 153, 731, 154, 732, 733,
	0, 155, 0, 156, 0, 157, 0, 0, 724, 159,
	0, 160, 0, 0, 0, 666, 161, 162, 163, 711,
	712, 689, 0, 0, 164, 165, 734, 735, 736, 0,
	166, 0, 167, 0, 1348, 396, 0, 168, 722, 0,
	307, 0, 169, 170, 171, 172, 718, 720, 398, 0,
	176, 0, 173, 0, 397, 174, 737, 175, 738, 739,
	740, 741, 742, 0, 700, 0, 399, 177, 178, 179,
	400, 180, 181, 182, 0, 184, 183, 0, 723, 401,
	185, 402, 0, 186, 0, 0, 187, 0, 188, 189,
	190, 192, 318, 191, 403, 193, 194, 196, 195, 661,
	0, 690, 719, 197, 743, 198, 199, 0, 200, 0,
	0, 201, 0, 0, 202, 321, 404, 203, 405, 713,
	204, 205, 206, 207, 208, 0, 209, 714, 210, 324,
	211, 0, 212, 213, 214, 215, 216, 744, 217, 218,
	0, 219, 220, 221, 222, 223, 225, 226, 224, 227,
	228, 229, 230, 0, 231, 406, 232, 233, 667, 234,
	0, 238, 239, 240, 241, 0, 243, 327, 242, 244,
	245, 707, 246, 235, 236, 247, 407, 248, 745, 329,
	249, 0, 255, 250, 251, 237, 252, 254, 746, 253,
	715, 0, 256, 0, 257, 258, 259, 260, 261, 262,
	263, 0, 332, 747, 748, 0, 0, 264, 265, 716,
	717, 688, 266, 267, 268, 269, 0, 0, 270, 271,
	272, 273, 708, 274, 0, 337, 275, 276, 277, 338,
	749, 0, 0, 278, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 662, 0, 0, 0, 0, 0, 660,
	0, 0, 0, 0, 658, 659, 693, 682, 683, 680,
	681, 672, 0, 668, 0, 0, 0, 0, 671, 0,
	0, 0, 131, 132, 0, 133, 0, 0, 0, 0,
	710, 675, 0, 0, 0, 134, 135, 136, 285, 725,
	287, 726, 137, 727, 728, 0, 138, 291, 292, 139,
	140, 678, 709, 729, 730, 295, 0, 141, 721, 0,
	701, 0, 142, 143, 144, 0, 145, 0, 146, 147,
	148, 0, 395, 149, 150, 0, 702, 703, 705, 0,
	704, 706, 151, 152, 343, 153, 731, 154, 732, 733,
	0, 155, 0, 156, 0, 157, 0, 0, 724, 159,
	0, 160, 0, 0, 0, 666, 161, 162, 163, 711,
	712, 689, 0, 0, 164, 165, 734, 735, 736, 0,
	166, 0, 167, 0, 0, 396, 0, 168, 722, 0,
	307, 0, 169, 170, 171, 172, 718, 720, 398, 0,
	176, 0, 173, 0, 397, 174, 737, 175, 738, 739,
	740, 741, 742, 0, 700, 0, 399, 177, 178, 179,
	400, 180, 181, 182, 0, 184, 183, 0, 723, 401,
	185, 402, 0, 186, 0, 0, 187, 0, 188, 189,
	190, 192, 318, 191, 403, 193, 194, 196, 195, 661,
	0, 690, 719, 197, 743, 198, 199, 0, 200, 0,
	0, 201, 0, 0, 202, 321, 404, 203, 405, 713,
	204, 205, 206, 207, 208, 0, 209, 714, 210, 324,
	211, 0, 212, 213, 214, 215, 216, 744, 217, 218,
	0, 219, 220, 221, 222, 223, 225, 226, 224, 227,
	228, 229, 230, 0, 231, 406, 232, 233, 667, 234,
	0, 238, 239, 240, 241, 0, 243, 327, 242, 244,
	245, 707, 246, 235, 236, 247, 407, 248, 745, 329,
	249, 0, 255, 250, 251, 237, 252, 254, 746, 253,
	715, 0, 256, 0, 257, 258, 259, 260, 261, 262,
	263, 0, 332, 747, 748, 0, 0, 264, 265, 716,
	717, 688, 266, 267, 268, 269, 0, 0, 270, 271,
	272, 273, 708, 274, 0, 337, 275, 276, 277, 338,
	749, 0, 0, 278, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 662, 0, 0, 0, 0, 0, 660,
	0, 0, 0, 0, 658, 659, 864, 693, 682, 683,
	680, 681, 672, 668, 0, 0, 0, 0, 671, 0,
	0, 0, 0, 131, 132, 0, 133, 0, 0, 0,
	0, 710, 675, 0, 0, 0, 134, 135, 136, 285,
	725, 287, 726, 137, 727, 728, 0, 138, 291, 292,
	139, 140, 678, 709, 729, 730, 295, 0, 141, 721,
	0, 701, 0, 142, 143, 144, 0, 145, 0, 146,
	147, 148, 0, 395, 149, 150, 0, 702, 703, 705,
	0, 704, 706, 151, 152, 343, 153, 731, 154, 732,
	733, 0, 155, 0, 156, 0, 157, 0, 0, 724,
	159, 0, 160, 0, 0, 0, 666, 161, 162, 163,
	711, 712, 689, 0, 0, 164, 165, 734, 735, 736,
	0, 166, 0, 167, 0, 0, 396, 0, 168, 722,
	0, 307, 0, 169, 170, 171, 172, 718, 720, 398,
	0, 176, 0, 173, 0, 397, 174, 737, 175, 738,
	739, 740, 741, 742, 0, 700, 0, 399, 177, 178,
	179, 400, 180, 181, 182, 0, 184, 183, 0, 723,
	401, 185, 402, 0, 186, 0, 0, 187, 0, 188,
	189, 190, 192, 318, 191, 403, 193, 194, 196, 195,
	661, 0, 690, 719, 197, 743, 198, 199, 0, 200,
	0, 0, 201, 0, 0, 202, 321, 404, 203, 405,
	713, 204, 205, 206, 207, 208, 0, 209, 714, 210,
	324, 211, 0, 212, 213, 214, 215, 216, 744, 217,
	218, 0, 219, 220, 221, 222, 223, 225, 226, 224,
	227, 228, 229, 230, 0, 231, 406, 232, 233, 667,
	234, 0, 238, 239, 240, 241, 0, 243, 327, 242,
	244, 245, 707, 246, 235, 236, 247, 407, 248, 745,
	329, 249, 0, 255, 250, 251, 237, 252, 254, 746,
	253, 715, 0, 256, 0, 257, 258, 259, 260, 261,
	262, 263, 0, 332, 747, 748, 0, 0, 264, 265,
	716, 717, 688, 266, 267, 268, 269, 0, 0, 270,
	271, 272, 273, 708, 274, 0, 337, 275, 276, 277,
	338, 749, 0, 0, 278, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 662, 0, 0, 0, 0, 0,
	660, 0, 0, 0, 0, 658, 659, 693, 682, 683,
	680, 681, 672, 0, 668, 1283, 0, 0, 0, 671,
	0, 0, 0, 131, 132, 1111, 133, 0, 0, 0,
	0, 710, 675, 0, 0, 0, 134, 135, 136, 285,
	725, 287, 726, 137, 727, 728, 0, 138, 291, 292,
	139, 140, 678, 709, 729, 730, 295, 0, 141, 721,
	0, 701, 0, 142, 143, 144, 0, 145, 0, 146,
	147, 148, 0, 395, 149, 150, 0, 702, 703, 705,
	0, 704, 706, 151, 152, 343, 153, 731, 154, 732,
	733, 0, 155, 0, 156, 0, 157, 0, 0, 724,
	159, 0, 160, 0, 0, 0, 666, 161, 162, 163,
	711, 712, 689, 0, 0, 164, 165, 734, 735, 736,
	0, 166, 0, 167, 0, 0, 396, 0, 168, 722,
	0, 307, 0, 169, 170, 171, 172, 718, 720, 398,
	0, 176, 0, 173, 0, 397, 174, 737, 175, 738,
	739, 740, 741, 742, 0, 700, 0, 399, 177, 178,
	179, 400, 180, 181, 182, 0, 184, 183, 0, 723,
	401, 185, 402, 0, 186, 0, 0, 187, 0, 188,
	189, 190, 192, 318, 191, 403, 193, 194, 196, 195,
	661, 0, 690, 719, 197, 743, 198, 199, 0, 200,
	0, 0, 201, 0, 0, 202, 321, 404, 203, 405,
	713, 204, 205, 206, 207, 208, 0, 209, 714, 210,
	324, 211, 0, 212, 213, 214, 215, 216, 744, 217,
	218, 0, 219, 220, 221, 222, 223, 225, 226, 224,
	227, 228, 229, 230, 0, 231, 406, 232, 233, 667,
	234, 0, 238, 239, 240, 241, 0, 243, 327, 242,
	244, 245, 707, 246, 235, 236, 247, 407, 248, 745,
	329, 249, 0, 255, 250, 251, 237, 252, 254, 746,
	253, 715, 0, 256, 0, 257, 258, 259, 260, 261,
	262, 263, 0, 332, 747, 748, 0, 0, 264, 265,
	716, 717, 688, 266, 267, 268, 269, 0, 0, 270,
	271, 272, 273, 708, 274, 0, 337, 275, 276, 277,
	338, 749, 0, 0, 278, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 662, 0, 0, 0, 0, 0,
	660, 0, 0, 0, 0, 658, 659, 693, 682, 683,
	680, 681, 672, 0, 668, 0, 0, 0, 0, 671,
	0, 0, 0, 131, 132, 0, 133, 0, 0, 0,
	0, 710, 675, 0, 0, 0, 134, 135, 136, 285,
	725, 287, 726, 137, 727, 728, 0, 138, 291, 292,
	139, 140, 678, 709, 729, 730, 295, 0, 141, 721,
	0, 701, 0, 142, 143, 144, 0, 145, 0, 146,
	147, 148, 0, 395, 149, 2209, 0, 702, 703, 705,
	0, 704, 706, 151, 152, 343, 153, 731, 154, 732,
	733, 0, 155, 0, 156, 0, 157, 0, 0, 724,
	159, 0, 160, 0, 0, 0, 666, 161, 162, 163,
	711, 712, 689, 0, 0, 164, 165, 734, 735, 736,
	0, 166, 0, 167, 0, 0, 396, 0, 168, 722,
	0, 307, 0, 169, 170, 171, 172, 718, 720, 398,
	0, 176, 0, 173, 0, 397, 174, 737, 175, 738,
	739, 740, 741, 742, 0, 700, 0, 399, 177, 178,
	179, 400, 180, 181, 182, 0, 184, 183, 0, 723,
	401, 185, 402, 0, 186, 0, 0, 187, 0, 188,
	189, 190, 192, 318, 191, 403, 193, 194, 196, 195,
	661, 0, 690, 719, 197, 743, 198, 199, 0, 200,
	0, 0, 201, 0, 0, 202, 321, 404, 203, 405,
	713, 204, 205, 206, 207, 208, 0, 209, 714, 210,
	324, 211, 0, 212, 213, 214, 215, 216, 744, 217,
	218, 0, 219, 220, 221, 222, 223, 225, 226, 224,
	227, 228, 229, 230, 0, 231, 406, 232, 233, 667,
	234, 0, 238, 239, 240, 241, 0, 243, 327, 242,
	244, 245, 707, 246, 235, 236, 247, 407, 248, 745,
	329, 249, 0, 255, 250, 251, 237, 252, 254, 746,
	253, 715, 0, 256, 0, 257, 258, 259, 260, 261,
	262, 263, 0, 332, 747, 748, 0, 0, 264, 265,
	716, 717, 688, 266, 267, 2208, 269, 0, 0, 270,
	271, 272, 273, 708, 274, 0, 337, 275, 276, 277,
	338, 749, 0, 0, 278, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 662, 0, 0, 0, 0, 0,
	660, 0, 0, 0, 0, 658, 659, 693, 682, 683,
	680, 681, 672, 0, 668, 0, 0, 0, 0, 671,
	0, 0, 0, 131, 132, 0, 133, 0, 0, 0,
	0, 710, 675, 0, 0, 0, 134, 135, 136, 285,
	725, 287, 726, 137, 727, 728, 0, 138, 291, 292,
	139, 140, 678, 709, 729, 730, 295, 0, 141, 721,
	0, 701, 0, 142, 143, 144, 0, 145, 0, 146,
	147, 148, 0, 395, 149, 150, 0, 702, 703, 705,
	0, 704, 706, 151, 152, 343, 153, 731, 154, 732,
	733, 0, 155, 0, 156, 0, 157, 0, 0, 724,
	159, 0, 160, 0, 0, 0, 666, 161, 162, 163,
	711, 712, 689, 0, 0, 164, 165, 734, 735, 736,
	0, 166, 0, 167, 0, 0, 396, 0, 168, 722,
	0, 307, 0, 169, 170, 171, 172, 718, 720, 398,
	0, 176, 0, 173, 0, 397, 174, 737, 175, 738,
	739, 740, 741, 742, 0, 700, 0, 399, 177, 178,
	179, 400, 180, 181, 182, 0, 184, 183, 0, 723,
	401, 185, 402, 0, 186, 0, 0, 187, 0, 188,
	189, 190, 192, 318, 191, 403, 193, 194, 196, 195,
	661, 0, 690, 719, 197, 743, 198, 199, 0, 200,
	0, 0, 201, 0, 0, 202, 321, 404, 203, 405,
	713, 204, 205, 206, 207, 208, 0, 209, 714, 210,
	324, 211, 0, 212, 213, 214, 215, 216, 744, 217,
	218, 0, 219, 220, 221, 222, 223, 225, 226, 224,
	227, 228, 229, 230, 0, 231, 406, 232, 233, 667,
	234, 0, 238, 239, 240, 241, 0, 243, 327, 242,
	244, 245, 707, 246, 235, 236, 247, 407, 248, 745,
	329, 249, 0, 255, 250, 251, 237, 252, 254, 746,
	253, 715, 0, 256, 0, 257, 258, 259, 260, 261,
	262, 263, 0, 332, 747, 748, 0, 0, 264, 265,
	716, 717, 688, 266, 267, 268, 269, 0, 0, 270,
	271, 272, 273, 708, 274, 0, 337, 275, 276, 277,
	338, 749, 0, 0, 278, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 662, 0, 0, 0, 0, 0,
	660, 0, 0, 0, 0, 658, 659, 693, 682, 683,
	680, 681, 672, 0, 668, 0, 0, 0, 0, 671,
	0, 0, 0, 131, 132, 0, 133, 0, 0, 0,
	0, 710, 675, 0, 0, 0, 134, 135, 136, 2207,
	725, 287, 726, 137, 727, 728, 0, 138, 291, 292,
	139, 140, 678, 709, 729, 730, 295, 0, 141, 721,
	0, 701, 0, 142, 143, 144, 0, 145, 0, 146,
	147, 148, 0, 395, 149, 2209, 0, 702, 703, 705,
	0, 704, 706, 151, 152, 343, 153, 731, 154, 732,
	733, 0, 155, 0, 156, 0, 157, 0, 0, 724,
	159, 0, 160, 0, 0, 0, 666, 161, 162, 163,
	711, 712, 689, 0, 0, 164, 165, 734, 735, 736,
	0, 166, 0, 167, 0, 0, 396, 0, 168, 722,
	0, 307, 0, 169, 170, 171, 172, 718, 720, 398,
	0, 176, 0, 173, 0, 397, 174, 737, 175, 738,
	739, 740, 741, 742, 0, 700, 0, 399, 177, 178,
	179, 400, 180, 181, 182, 0, 184, 183, 0, 723,
	401, 185, 402, 0, 186, 0, 0, 187, 0, 188,
	189, 190, 192, 318, 191, 403, 193, 194, 196, 195,
	661, 0, 690, 719, 197, 743, 198, 199, 0, 200,
	0, 0, 201, 0, 0, 202, 321, 404, 203, 405,
	713, 204, 205, 206, 207, 208, 0, 209, 714, 210,
	324, 211, 0, 212, 213, 214, 215, 216, 744, 217,
	218, 0, 219, 220, 221, 222, 223, 225, 226, 224,
	227, 228, 229, 230, 0, 231, 406, 232, 233, 667,
	234, 0, 238, 239, 240, 241, 0, 243, 327, 242,
	244, 245, 707, 246, 235, 236, 247, 407, 248, 745,
	329, 249, 0, 255, 250, 251, 237, 252, 254, 746,
	253, 715, 0, 256, 0, 257, 258, 259, 260, 261,
	262, 263, 0, 332, 747, 748, 0, 0, 264, 265,
	716, 717, 688, 266, 267, 2208, 269, 0, 0, 270,
	271, 272, 273, 708, 274, 0, 337, 275, 276, 277,
	338, 749, 0, 0, 278, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 662, 0, 0, 0, 0, 0,
	660, 0, 0, 0, 0, 658, 659, 1320, 682, 683,
	680, 681, 672, 0, 668, 0, 0, 0, 0, 671,
	0, 0, 0, 131, 132, 0, 133, 0, 0, 0,
	0, 710, 675, 0, 0, 0, 134, 135, 136, 285,
	725, 287, 726, 137, 727, 728, 0, 138, 291, 292,
	139, 140, 678, 709, 729, 730, 295, 0, 141, 721,
	0, 701, 0, 142, 143, 144, 0, 145, 0, 146,
	147, 148, 0, 395, 149, 150, 0, 702, 703, 705,
	0, 704, 706, 151, 152, 343, 153, 731, 1323, 732,
	733, 0, 155, 0, 156, 0, 157, 0, 0, 724,
	159, 0, 160, 0, 0, 0, 666, 161, 162, 163,
	711, 712, 689, 0, 0, 164, 165, 734, 735, 736,
	0, 166, 0, 167, 0, 0, 396, 0, 168, 722,
	0, 307, 0, 169, 170, 1324, 172, 718, 720, 398,
	0, 176, 0, 173, 0, 397, 174, 737, 175, 738,
	739, 740, 741, 742, 0, 700, 0, 399, 177, 178,
	179, 400, 180, 181, 182, 0, 184, 183, 0, 723,
	401, 185, 402, 0, 186, 0, 0, 187, 0, 188,
	1325, 1322, 192, 318, 191, 403, 193, 194, 196, 195,
	661, 0, 690, 719, 197, 743, 198, 199, 0, 200,
	0, 0, 201, 0, 0, 202, 321, 404, 203, 405,
	713, 204, 205, 206, 207, 208, 0, 209, 714, 210,
	324, 211, 0, 212, 213, 214, 215, 216, 744, 217,
	218, 0, 219, 220, 221, 222, 223, 225, 226, 224,
	227, 228, 229, 230, 0, 231, 406, 232, 233, 667,
	234, 0, 238, 239, 240, 1326, 0, 243, 327, 242,
	244, 245, 707, 246, 235, 236, 247, 407, 248, 745,
	329, 249, 0, 255, 250, 251, 237, 252, 254, 746,
	253, 715, 0, 256, 0, 257, 258, 259, 260, 261,
	262, 263, 0, 332, 747, 748, 0, 0, 264, 265,
	716, 717, 688, 266, 267, 268, 269, 0, 0, 270,
	271, 272, 273, 708, 274, 0, 337, 275, 276, 277,
	338, 749, 0, 0, 278, 0, 0, 0, 0, 279,
	280, 281, 1321, 283, 662, 0, 0, 0, 0, 0,
	660, 0, 0, 0, 0, 658, 659, 693, 682, 683,
	680, 681, 672, 0, 668, 0, 0, 0, 0, 671,
	0, 0, 0, 131, 132, 0, 133, 0, 0, 0,
	0, 710, 675, 0, 0, 0, 134, 135, 136, 285,
	725, 287, 726, 137, 727, 728, 0, 138, 291, 292,
	139, 140, 678, 709, 729, 730, 295, 0, 141, 721,
	0, 701, 0, 142, 143, 144, 0, 145, 0, 146,
	147, 148, 0, 395, 149, 150, 0, 702, 703, 705,
	0, 704, 706, 151, 152, 343, 153, 731, 154, 732,
	733, 0, 155, 0, 156, 0, 157, 0, 0, 724,
	159, 0, 160, 0, 0, 0, 666, 161, 162, 163,
	711, 712, 689, 0, 0, 164, 165, 734, 735, 736,
	0, 166, 0, 167, 0, 0, 396, 0, 168, 722,
	0, 307, 0, 169, 170, 171, 172, 718, 720, 398,
	0, 176, 0, 173, 0, 397, 174, 737, 175, 738,
	739, 740, 741, 742, 0, 700, 0, 399, 177, 178,
	179, 400, 180, 181, 182, 0, 184, 183, 0, 723,
	401, 185, 402, 0, 186, 0, 0, 187, 0, 188,
	189, 190, 192, 318, 191, 403, 193, 194, 196, 195,
	0, 0, 690, 719, 197, 743, 198, 199, 0, 200,
	0, 0, 201, 0, 0, 202, 321, 404, 203, 405,
	713, 204, 205, 206, 207, 208, 0, 209, 714, 210,
	324, 211, 0, 212, 213, 214, 215, 216, 744, 217,
	218, 0, 219, 220, 221, 222, 223, 225, 226, 224,
	227, 228, 229, 230, 0, 231, 406, 232, 233, 1338,
	234, 0, 238, 239, 240, 241, 0, 243, 327, 242,
	244, 245, 707, 246, 235, 236, 247, 407, 248, 745,
	329, 249, 0, 255, 250, 251, 237, 252, 254, 746,
	253, 715, 0, 256, 0, 257, 258, 259, 260, 261,
	262, 263, 0, 332, 747, 748, 0, 0, 264, 265,
	716, 717, 688, 266, 267, 268, 269, 0, 0, 270,
	271, 272, 273, 708, 274, 0, 337, 275, 276, 277,
	338, 749, 0, 0, 278, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 0, 0, 0, 0, 0,
	1336, 0, 0, 0, 0, 1334, 1335, 693, 682, 683,
	680, 681, 672, 0, 1337, 0, 0, 0, 0, 671,
	0, 0, 0, 131, 132, 0, 133, 0, 0, 0,
	0, 710, 675, 0, 0, 0, 134, 135, 136, 285,
	725, 287, 726, 137, 727, 728, 0, 138, 291, 292,
	139, 140, 0, 709, 729, 730, 295, 0, 141, 721,
	0, 701, 0, 142, 143, 144, 0, 145, 0, 146,
	147, 148, 0, 395, 149, 150, 0, 702, 703, 705,
	0, 704, 706, 151, 152, 343, 153, 731, 154, 732,
	733, 0, 155, 0, 156, 0, 157, 0, 0, 724,
	159, 0, 160, 0, 0, 0, 300, 161, 162, 163,
	711, 712, 689, 0, 0, 164, 165, 734, 735, 736,
	0, 166, 0, 167, 0, 0, 396, 0, 168, 722,
	0, 307, 0, 169, 170, 171, 172, 718, 720, 398,
	0, 176, 0, 173, 0, 397, 174, 737, 175, 738,
	739, 740, 741, 742, 0, 700, 0, 399, 177, 178,
	179, 400, 180, 181, 182, 0, 184, 183, 0, 723,
	401, 185, 402, 0, 186, 0, 0, 187, 0, 188,
	189, 190, 192, 318, 191, 403, 193, 194, 196, 195,
	0, 0, 690, 719, 197, 743, 198, 199, 0, 200,
	0, 0, 201, 0, 0, 202, 321, 404, 203, 405,
	713, 204, 205, 206, 207, 208, 0, 209, 714, 210,
	324, 211, 0, 212, 213, 214, 215, 216, 744, 217,
	218, 0, 219, 220, 221, 222, 223, 225, 226, 224,
	227, 228, 229, 230, 0, 231, 406, 232, 233, 1338,
	234, 0, 238, 239, 240, 241, 0, 243, 327, 242,
	244, 245, 707, 246, 235, 236, 247, 407, 248, 745,
	329, 249, 0, 255, 250, 251, 237, 252, 254, 746,
	253, 715, 0, 256, 0, 257, 258, 259, 260, 261,
	262, 263, 0, 332, 747, 748, 0, 0, 264, 265,
	716, 717, 688, 266, 267, 268, 269, 0, 0, 270,
	271, 272, 273, 708, 274, 0, 337, 275, 276, 277,
	338, 749, 0, 0, 278, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 0, 693, 682, 683, 680,
	681, 672, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 132, 1337, 133, 0, 0, 0, 671,
	710, 675, 0, 0, 0, 134, 135, 136, 0, 725,
	287, 726, 137, 727, 728, 0, 138, 291, 292, 139,
	140, 678, 709, 729, 730, 295, 0, 141, 721, 0,
	701, 0, 142, 143, 144, 0, 145, 0, 146, 147,
	148, 0, 395, 149, 2209, 0, 702, 703, 705, 0,
	704, 706, 151, 152, 343, 153, 731, 154, 732, 733,
	0, 155, 0, 156, 0, 157, 0, 0, 724, 159,
	0, 160, 0, 0, 0, 666, 161, 162, 163, 711,
	712, 689, 0, 0, 164, 165, 734, 735, 736, 0,
	166, 0, 167, 0, 0, 396, 0, 168, 722, 0,
	307, 0, 169, 170, 171, 172, 718, 720, 0, 0,
	176, 0, 173, 0, 397, 174, 737, 175, 738, 739,
	740, 741, 742, 0, 700, 0, 0, 177, 178, 179,
	400, 180, 181, 182, 0, 184, 183, 0, 723, 401,
	185, 0, 0, 186, 0, 0, 187, 0, 188, 189,
	190, 192, 318, 191, 403, 193, 194, 196, 195, 661,
	0, 690, 719, 197, 743, 198, 199, 0, 200, 0,
	0, 201, 0, 0, 202, 321, 404, 203, 405, 713,
	204, 205, 206, 207, 208, 0, 209, 714, 210, 324,
	211, 0, 212, 213, 214, 215, 216, 744, 217, 218,
	0, 219, 220, 221, 222, 223, 225, 226, 224, 227,
	228, 229, 230, 0, 231, 406, 232, 233, 667, 234,
	0, 238, 239, 240, 241, 0, 243, 327, 242, 244,
	245, 707, 246, 235, 236, 247, 0, 248, 745, 329,
	249, 0, 255, 250, 251, 237, 252, 254, 746, 253,
	715, 0, 256, 0, 257, 258, 259, 260, 261, 262,
	263, 0, 332, 747, 748, 0, 0, 264, 265, 716,
	717, 688, 266, 267, 2208, 269, 0, 0, 270, 271,
	272, 273, 708, 274, 0, 337, 275, 276, 277, 338,
	749, 0, 0, 278, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 693, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 658, 659, 0, 0, 0, 131,
	132, 0, 133, 668, 0, 0, 0, 710, 671, 0,
	0, 0, 134, 135, 136, 285, 286, 287, 288, 137,
	289, 290, 0, 138, 291, 292, 139, 140, 0, 709,
	293, 294, 295, 0, 141, 721, 0, 701, 0, 142,
	143, 144, 0, 145, 0, 146, 147, 148, 0, 395,
	149, 150, 0, 702, 703, 705, 0, 704, 706, 151,
	152, 343, 153, 297, 154, 298, 299, 0, 155, 0,
	156, 0, 157, 0, 0, 158, 159, 0, 160, 0,
	0, 0, 300, 161, 162, 163, 711, 712, 0, 0,
	0, 164, 165, 303, 304, 305, 0, 166, 0, 167,
	0, 0, 396, 0, 168, 722, 0, 307, 0, 169,
	170, 171, 172, 718, 720, 398, 0, 176, 0, 173,
	0, 397, 174, 310, 175, 311, 312, 313, 314, 315,
	0, 316, 0, 399, 177, 178, 179, 400, 180, 181,
	182, 0, 184, 183, 0, 723, 401, 185, 402, 0,
	186, 0, 0, 187, 0, 188, 189, 190, 192, 318,
	191, 403, 193, 194, 196, 195, 0, 0, 0, 719,
	197, 320, 198, 199, 0, 200, 0, 0, 201, 0,
	0, 202, 321, 404, 203, 405, 713, 204, 205, 206,
	207, 208, 0, 209, 714, 210, 324, 211, 0, 212,
	213, 214, 215, 216, 325, 217, 218, 0, 219, 220,
	221, 222, 223, 225, 226, 224, 227, 228, 229, 230,
	0, 231, 406, 232, 233, 326, 234, 0, 238, 239,
	240, 241, 0, 243, 327, 242, 244, 245, 707, 246,
	235, 236, 247, 407, 248, 328, 329, 249, 0, 255,
	250, 251, 237, 252, 254, 330, 253, 715, 0, 256,
	0, 257, 258, 259, 260, 261, 262, 263, 0, 332,
	333, 334, 0, 0, 264, 265, 716, 717, 0, 266,
	267, 268, 269, 0, 0, 270, 271, 272, 273, 708,
	274, 0, 337, 275, 276, 277, 338, 339, 0, 0,
	278, 0, 564, 0, 0, 279, 280, 281, 282, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 132,
	0, 133, 0, 0, 0, 0, 284, 0, 0, 0,
	1823, 134, 135, 136, 285, 286, 287, 288, 137, 289,
	290, 0, 138, 291, 292, 139, 140, 0, 0, 293,
	294, 295, 0, 141, 296, 0, 394, 0, 142, 143,
	144, 0, 145, 0, 146, 147, 148, 0, 395, 149,
	150, 0, 0, 0, 0, 0, 0, 0, 151, 152,
	343, 153, 297, 154, 298, 299, 0, 155, 0, 156,
	0, 157, 0, 0, 158, 159, 0, 160, 0, 0,
	0, 300, 161, 162, 163, 301, 302, 0, 0, 0,
	164, 165, 303, 304, 305, 0, 166, 0, 167, 0,
	0, 396, 0, 168, 306, 0, 307, 0, 169, 170,
	171, 172, 308, 309, 398, 0, 176, 0, 173, 0,
	397, 174, 310, 175, 311, 312, 313, 314, 315, 0,
	316, 0, 399, 177, 178, 179, 400, 180, 181, 182,
	0, 184, 183, 0, 317, 401, 185, 402, 0, 186,
	0, 0, 187, 0, 188, 189, 190, 192, 318, 191,
	403, 193, 194, 196, 195, 0, 0, 0, 319, 197,
	320, 198, 199, 0, 200, 0, 0, 201, 0, 0,
	202, 321, 404, 203, 405, 322, 204, 205, 206, 207,
	208, 0, 209, 323, 210, 324, 211, 0, 212, 213,
	214, 215, 216, 325, 217, 218, 0, 219, 220, 221,
	222, 223, 225, 226, 224, 227, 228, 229, 230, 0,
	231, 406, 232, 233, 326, 234, 0, 238, 239, 240,
	241, 116, 243, 327, 242, 244, 245, 0, 246, 235,
	236, 247, 407, 248, 328, 329, 249, 0, 255, 250,
	251, 237, 252, 254, 330, 253, 331, 0, 256, 118,
	257, 258, 259, 260, 261, 262, 263, 0, 332, 333,
	334, 0, 0, 264, 265, 335, 336, 0, 266, 267,
	268, 269, 0, 0, 270, 271, 272, 273, 0, 274,
	0, 337, 275, 276, 277, 653, 339, 0, 0, 278,
	0, 0, 0, 114, 279, 280, 281, 282, 283, 0,
	115, 564, 561, 0, 562, 557, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 132, 110,
	133, 0, 0, 0, 0, 284, 0, 0, 0, 0,
	134, 135, 136, 285, 286, 287, 288, 137, 289, 290,
	0, 138, 291, 292, 139, 140, 0, 0, 293, 294,
	295, 0, 141, 296, 0, 394, 0, 142, 143, 144,
	0, 145, 0, 146, 147, 148, 0, 395, 149, 150,
	0, 0, 0, 0, 0, 0, 0, 151, 152, 343,
	153, 297, 154, 298, 299, 1087, 155, 0, 156, 0,
	157, 0, 0, 158, 159, 0, 160, 0, 0, 0,
	300, 161, 162, 163, 301, 302, 554, 0, 0, 164,
	165, 303, 304, 305, 0, 166, 0, 167, 0, 0,
	396, 0, 168, 306, 0, 307, 0, 169, 170, 171,
	172, 308, 309, 398, 0, 176, 0, 173, 0, 397,
	174, 310, 175, 311, 312, 313, 314, 315, 0, 316,
	0, 399, 177, 178, 179, 400, 180, 181, 182, 0,
	184, 183, 0, 317, 401, 185, 402, 0, 186, 0,
	0, 187, 0, 188, 189, 190, 192, 318, 191, 403,
	193, 194, 196, 195, 0, 0, 0, 319, 197, 320,
	198, 199, 0, 200, 555, 0, 201, 0, 0, 202,
	321, 404, 203, 405, 322, 204, 205, 206, 207, 208,
	0, 209, 323, 210, 324, 211, 0, 212, 213, 214,
	215, 216, 325, 217, 218, 0, 219, 220, 221, 222,
	223, 225, 226, 224, 227, 228, 229, 230, 0, 231,
	406, 232, 233, 326, 234, 0, 238, 239, 240, 241,
	0, 243, 327, 242, 244, 245, 0, 246, 235, 236,
	247, 407, 248, 328, 329, 249, 0, 255, 250, 251,
	237, 252, 254, 330, 253, 331, 0, 256, 0, 257,
	258, 259, 260, 261, 262, 263, 0, 332, 333, 334,
	0, 0, 264, 265, 335, 336, 553, 266, 267, 268,
	269, 0, 0, 270, 271, 272, 273, 0, 274, 0,
	337, 275, 276, 277, 338, 339, 0, 0, 278, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 564, 561,
	0, 562, 557, 552, 0, 0, 0, 0, 0, 563,
	558, 0, 0, 0, 131, 132, 0, 133, 0, 0,
	0, 0, 284, 0, 0, 0, 0, 134, 135, 136,
	285, 286, 287, 288, 137, 289, 290, 0, 138, 291,
	292, 139, 140, 0, 0, 293, 294, 295, 0, 141,
	296, 0, 394, 0, 142, 143, 144, 0, 145, 0,
	146, 147, 148, 0, 395, 149, 150, 0, 0, 0,
	0, 0, 0, 0, 151, 152, 343, 153, 297, 154,
	298, 299, 1084, 155, 0, 156, 0, 157, 0, 0,
	158, 159, 0, 160, 0, 0, 0, 300, 161, 162,
	163, 301, 302, 554, 0, 0, 164, 165, 303, 304,
	305, 0, 166, 0, 167, 0, 0, 396, 0, 168,
	306, 0, 307, 0, 169, 170, 171, 172, 308, 309,
	398, 0, 176, 0, 173, 0, 397, 174, 310, 175,
	311, 312, 313, 314, 315, 0, 316, 0, 399, 177,
	178, 179, 400, 180, 181, 182, 0, 184, 183, 0,
	317, 401, 185, 402, 0, 186, 0, 0, 187, 0,
	188, 189, 190, 192, 318, 191, 403, 193, 194, 196,
	195, 0, 0, 0, 319, 197, 320, 198, 199, 0,
	200, 555, 0, 201, 0, 0, 202, 321, 404, 203,
	405, 322, 204, 205, 206, 207, 208, 0, 209, 323,
	210, 324, 211, 0, 212, 213, 214, 215, 216, 325,
	217, 218, 0, 219, 220, 221, 222, 223, 225, 226,
	224, 227, 228, 229, 230, 0, 231, 406, 232, 233,
	326, 234, 0, 238, 239, 240, 241, 0, 243, 327,
	242, 244, 245, 0, 246, 235, 236, 247, 407, 248,
	328, 329, 249, 0, 255, 250, 251, 237, 252, 254,
	330, 253, 331, 0, 256, 0, 257, 258, 259, 260,
	261, 262, 263, 0, 332, 333, 334, 0, 0, 264,
	265, 335, 336, 553, 266, 267, 268, 269, 0, 0,
	270, 271, 272, 273, 0, 274, 0, 337, 275, 276,
	277, 338, 339, 0, 0, 278, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 564, 561, 0, 562, 557,
	552, 0, 0, 0, 0, 0, 563, 558, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 394,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 395, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 783,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	554, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 396, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 308, 309, 398, 0, 176,
	0, 173, 0, 397, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 399, 177, 178, 179, 400,
	180, 181, 182, 0, 184, 183, 0, 317, 401, 185,
	402, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 403, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 555, 0,
	201, 0, 0, 202, 321, 404, 203, 405, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 406, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 407, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	553, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	0, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 564, 561, 0, 562, 557, 552, 0, 0,
	0, 0, 0, 563, 558, 0, 0, 0, 131, 132,
	0, 133, 0, 0, 0, 0, 284, 0, 0, 0,
	0, 134, 135, 136, 285, 286, 287, 288, 137, 289,
	290, 0, 138, 291, 292, 139, 140, 0, 0, 293,
	294, 295, 0, 141, 296, 0, 394, 0, 142, 143,
	144, 0, 145, 0, 146, 147, 148, 0, 395, 149,
	150, 0, 0, 0, 0, 0, 0, 0, 151, 152,
	343, 153, 297, 154, 298, 299, 0, 155, 0, 156,
	0, 157, 0, 0, 158, 159, 0, 160, 0, 0,
	0, 300, 161, 162, 163, 301, 302, 554, 0, 0,
	164, 165, 303, 304, 305, 0, 166, 0, 167, 0,
	0, 396, 0, 168, 306, 0, 307, 0, 169, 170,
	171, 172, 308, 309, 398, 0, 176, 0, 173, 0,
	397, 174, 310, 175, 311, 312, 313, 314, 315, 0,
	316, 0, 399, 177, 178, 179, 400, 180, 181, 182,
	0, 184, 183, 0, 317, 401, 185, 402, 0, 186,
	0, 0, 187, 0, 188, 189, 190, 192, 318, 191,
	403, 193, 194, 196, 195, 0, 0, 0, 319, 197,
	320, 198, 199, 0, 200, 555, 0, 201, 0, 0,
	202, 321, 404, 203, 405, 322, 204, 205, 206, 207,
	208, 0, 209, 323, 210, 324, 211, 0, 212, 213,
	214, 215, 216, 325, 217, 218, 0, 219, 220, 221,
	222, 223, 225, 226, 224, 227, 228, 229, 230, 0,
	231, 406, 232, 233, 326, 234, 0, 238, 239, 240,
	241, 0, 243, 327, 242, 244, 245, 0, 246, 235,
	236, 247, 407, 248, 328, 329, 249, 0, 255, 250,
	251, 237, 252, 254, 330, 253, 331, 0, 256, 0,
	257, 258, 259, 260, 261, 262, 263, 0, 332, 333,
	334, 0, 0, 264, 265, 335, 336, 553, 266, 267,
	268, 269, 0, 0, 270, 271, 272, 273, 0, 274,
	0, 337, 275, 276, 277, 338, 339, 0, 128, 278,
	0, 0, 0, 0, 279, 280, 281, 282, 283, 0,
	0, 0, 0, 0, 131, 132, 0, 133, 0, 0,
	563, 558, 284, 0, 0, 0, 0, 134, 135, 136,
	285, 286, 287, 288, 137, 289, 290, 0, 138, 291,
	292, 139, 140, 0, 0, 293, 294, 295, 0, 141,
	296, 0, 0, 0, 142, 143, 144, 0, 145, 0,
	146, 147, 148, 0, 0, 149, 150, 0, 0, 0,
	0, 0, 0, 0, 151, 152, 343, 153, 297, 154,
	298, 299, 0, 155, 0, 156, 0, 157, 0, 0,
	158, 159, 0, 160, 0, 0, 0, 300, 161, 162,
	163, 301, 302, 0, 0, 0, 164, 165, 303, 304,
	305, 0, 166, 0, 167, 0, 0, 0, 0, 168,
	306, 0, 307, 0, 169, 170, 171, 172, 308, 309,
	0, 0, 176, 0, 173, 0, 0, 174, 310, 175,
	311, 312, 313, 314, 315, 0, 316, 0, 0, 177,
	178, 179, 0, 180, 181, 182, 0, 184, 183, 0,
	317, 0, 185, 0, 0, 186, 0, 0, 187, 0,
	188, 189, 190, 192, 318, 191, 0, 193, 194, 196,
	195, 0, 0, 0, 319, 197, 320, 198, 199, 0,
	200, 0, 609, 201, 0, 0, 202, 321, 0, 203,
	0, 322, 204, 205, 206, 207, 208, 0, 209, 323,
	210, 324, 211, 0, 212, 213, 214, 215, 216, 325,
	217, 218, 0, 219, 220, 221, 222, 223, 225, 226,
	224, 227, 228, 229, 230, 0, 231, 0, 232, 233,
	326, 234, 0, 238, 239, 240, 241, 116, 243, 327,
	242, 244, 245, 0, 246, 235, 236, 247, 0, 248,
	328, 329, 249, 0, 255, 250, 251, 237, 252, 254,
	330, 253, 331, 0, 256, 118, 257, 258, 259, 260,
	261, 262, 263, 0, 332, 333, 334, 0, 0, 264,
	265, 335, 336, 0, 266, 267, 268, 269, 0, 0,
	270, 271, 272, 273, 0, 274, 0, 337, 275, 276,
	277, 653, 339, 0, 0, 278, 0, 128, 0, 114,
	279, 280, 281, 282, 283, 0, 115, 0, 0, 0,
	0, 0, 0, 131, 132, 0, 133, 0, 0, 0,
	0, 284, 0, 1462, 0, 1467, 134, 135, 136, 285,
	286, 287, 288, 137, 289, 290, 0, 138, 291, 292,
	139, 140, 0, 0, 293, 294, 295, 0, 141, 296,
	0, 0, 0, 142, 143, 144, 0, 145, 0, 146,
	147, 148, 0, 0, 149, 150, 0, 0, 0, 0,
	0, 0, 0, 151, 152, 343, 153, 297, 154, 298,
	299, 0, 155, 0, 156, 0, 157, 0, 0, 158,
	159, 0, 160, 0, 0, 0, 300, 161, 162, 163,
	301, 302, 0, 0, 0, 164, 165, 303, 304, 305,
	0, 166, 0, 167, 0, 0, 0, 0, 168, 306,
	0, 307, 0, 169, 170, 171, 172, 308, 309, 0,
	0, 176, 0, 173, 0, 0, 174, 310, 175, 311,
	312, 313, 314, 315, 0, 316, 0, 0, 177, 178,
	179, 0, 180, 181, 182, 0, 184, 183, 0, 317,
	0, 185, 0, 0, 186, 0, 0, 187, 0, 188,
	189, 190, 192, 318, 191, 0, 193, 194, 196, 195,
	0, 0, 0, 319, 197, 320, 198, 199, 0, 200,
	0, 0, 201, 0, 0, 202, 321, 0, 203, 0,
	322, 204, 205, 206, 207, 208, 0, 209, 323, 210,
	324, 211, 0, 212, 213, 214, 215, 216, 325, 217,
	218, 0, 219, 220, 221, 222, 223, 225, 226, 224,
	227, 228, 229, 230, 0, 231, 0, 232, 233, 326,
	234, 0, 238, 239, 240, 241, 116, 243, 327, 242,
	244, 245, 0, 246, 235, 236, 247, 0, 248, 328,
	329, 249, 0, 255, 250, 251, 237, 252, 254, 330,
	253, 331, 0, 256, 118, 257, 258, 259, 260, 261,
	262, 263, 0, 332, 333, 334, 0, 0, 264, 265,
	335, 336, 0, 266, 267, 268, 269, 0, 0, 270,
	271, 272, 273, 0, 274, 0, 337, 275, 276, 277,
	653, 339, 0, 0, 278, 0, 128, 0, 114, 279,
	280, 281, 282, 283, 0, 115, 0, 0, 0, 0,
	0, 0, 131, 132, 0, 133, 0, 0, 0, 0,
	284, 0, 0, 0, 110, 134, 135, 136, 285, 286,
	287, 288, 137, 289, 290, 0, 138, 291, 292, 139,
	140, 0, 0, 293, 294, 295, 0, 141, 296, 0,
	0, 0, 142, 143, 144, 0, 145, 0, 146, 147,
	148, 0, 0, 149, 150, 0, 0, 0, 0, 0,
	0, 0, 151, 152, 343, 153, 297, 154, 298, 299,
	0, 155, 0, 156, 0, 157, 0, 0, 158, 159,
	0, 160, 0, 0, 0, 300, 161, 162, 163, 301,
	302, 0, 0, 0, 164, 165, 303, 304, 305, 0,
	166, 0, 167, 0, 0, 0, 0, 168, 306, 0,
	307, 0, 169, 170, 171, 172, 308, 309, 0, 0,
	176, 0, 173, 0, 0, 174, 310, 175, 311, 312,
	313, 314, 315, 0, 316, 0, 0, 177, 178, 179,
	0, 180, 181, 182, 0, 184, 183, 0, 317, 0,
	185, 0, 0, 186, 0, 0, 187, 0, 188, 189,
	190, 192, 318, 191, 0, 193, 194, 196, 195, 0,
	0, 0, 319, 197, 320, 198, 199, 0, 200, 0,
	609, 201, 0, 0, 202, 321, 0, 203, 0, 322,
	204, 205, 206, 207, 208, 0, 209, 323, 210, 324,
	211, 0, 212, 213, 214, 215, 216, 325, 217, 218,
	0, 219, 220, 221, 222, 223, 225, 226, 224, 227,
	228, 229, 230, 0, 231, 0, 232, 233, 326, 234,
	0, 238, 239, 240, 241, 0, 243, 327, 242, 244,
	245, 0, 246, 235, 236, 247, 0, 248, 328, 329,
	249, 0, 255, 250, 251, 237, 252, 254, 330, 253,
	331, 0, 256, 0, 257, 258, 259, 260, 261, 262,
	263, 0, 332, 333, 334, 0, 0, 264, 265, 335,
	336, 0, 266, 267, 268, 269, 0, 0, 270, 271,
	272, 273, 0, 274, 0, 337, 275, 276, 277, 338,
	339, 0, 0, 278, 0, 128, 0, 0, 279, 280,
	281, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 1462, 0, 1467, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 308, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	0, 0, 278, 0, 0, 128, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 882, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 308, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	0, 0, 278, 0, 128, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 132, 0, 133, 0, 0, 0, 0, 284, 0,
	0, 0, 1199, 134, 135, 136, 285, 286, 287, 288,
	137, 289, 290, 0, 138, 291, 292, 139, 140, 0,
	0, 293, 294, 295, 0, 141, 296, 0, 0, 0,
	142, 143, 144, 0, 145, 0, 146, 147, 148, 0,
	0, 149, 150, 0, 0, 0, 0, 0, 0, 0,
	151, 152, 343, 153, 297, 154, 298, 299, 0, 155,
	0, 156, 0, 157, 0, 0, 158, 159, 0, 160,
	0, 0, 0, 300, 161, 162, 163, 301, 302, 0,
	0, 0, 164, 165, 303, 304, 305, 0, 166, 0,
	167, 0, 0, 0, 0, 168, 306, 0, 307, 0,
	169, 170, 171, 172, 308, 309, 0, 0, 176, 0,
	173, 0, 0, 174, 310, 175, 311, 312, 313, 314,
	315, 0, 316, 0, 0, 177, 178, 179, 0, 180,
	181, 182, 0, 184, 183, 0, 317, 0, 185, 0,
	0, 186, 0, 0, 187, 0, 188, 189, 190, 192,
	318, 191, 0, 193, 194, 196, 195, 0, 0, 0,
	319, 197, 320, 198, 199, 0, 200, 0, 0, 201,
	0, 0, 202, 321, 0, 203, 0, 322, 204, 205,
	206, 207, 208, 0, 209, 323, 210, 324, 211, 0,
	212, 213, 214, 215, 216, 325, 217, 218, 0, 219,
	220, 221, 222, 223, 225, 226, 224, 227, 228, 229,
	230, 0, 231, 0, 232, 233, 326, 234, 0, 238,
	239, 240, 241, 0, 243, 327, 242, 244, 245, 0,
	246, 235, 236, 247, 0, 248, 328, 329, 249, 0,
	255, 250, 251, 237, 252, 254, 330, 253, 331, 0,
	256, 0, 257, 258, 259, 260, 261, 262, 263, 0,
	332, 333, 334, 0, 0, 264, 265, 335, 336, 0,
	266, 267, 268, 269, 0, 0, 270, 271, 272, 273,
	0, 274, 0, 337, 275, 276, 277, 338, 339, 0,
	0, 278, 0, 128, 0, 0, 279, 280, 281, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	132, 0, 133, 0, 0, 0, 0, 284, 0, 0,
	0, 1758, 134, 135, 136, 285, 286, 287, 288, 137,
	289, 290, 0, 138, 291, 292, 139, 140, 0, 0,
	293, 294, 295, 0, 141, 296, 0, 0, 0, 142,
	143, 144, 0, 145, 0, 146, 147, 148, 0, 0,
	149, 150, 0, 0, 0, 0, 0, 0, 0, 151,
	152, 343, 153, 297, 154, 298, 299, 0, 155, 0,
	156, 0, 157, 0, 0, 158, 159, 0, 160, 0,
	0, 0, 300, 161, 162, 163, 301, 302, 0, 0,
	0, 164, 165, 303, 304, 305, 0, 166, 0, 167,
	0, 0, 0, 0, 168, 306, 0, 307, 0, 169,
	170, 171, 172, 308, 309, 0, 0, 176, 0, 173,
	0, 0, 174, 310, 175, 311, 312, 313, 314, 315,
	0, 316, 0, 0, 177, 178, 179, 0, 180, 181,
	182, 0, 184, 183, 0, 317, 0, 185, 0, 0,
	186, 0, 0, 187, 0, 188, 189, 190, 192, 318,
	191, 0, 193, 194, 196, 195, 0, 0, 0, 319,
	197, 320, 198, 199, 0, 200, 0, 0, 201, 0,
	0, 202, 321, 0, 203, 0, 322, 204, 205, 206,
	207, 208, 0, 209, 323, 210, 324, 211, 0, 212,
	213, 214, 215, 216, 325, 217, 218, 0, 219, 220,
	221, 222, 223, 225, 226, 224, 227, 228, 229, 230,
	0, 231, 0, 232, 233, 326, 234, 0, 238, 239,
	240, 241, 0, 243, 327, 242, 244, 245, 0, 246,
	235, 236, 247, 0, 248, 328, 329, 249, 0, 255,
	250, 251, 237, 252, 254, 330, 253, 331, 0, 256,
	0, 257, 258, 259, 260, 261, 262, 263, 0, 332,
	333, 334, 0, 0, 264, 265, 335, 336, 0, 266,
	267, 268, 269, 0, 0, 270, 271, 272, 273, 0,
	274, 0, 337, 275, 276, 277, 338, 339, 0, 0,
	278, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	693, 682, 683, 680, 681, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 132, 0, 133,
	869, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 725, 287, 726, 137, 727, 728, 0,
	138, 291, 292, 139, 140, 0, 0, 729, 730, 295,
	0, 141, 296, 0, 394, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 395, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	731, 154, 732, 733, 0, 155, 0, 156, 0, 157,
	0, 0, 724, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 689, 0, 0, 164, 165,
	734, 735, 736, 0, 166, 0, 167, 0, 0, 396,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	308, 309, 398, 0, 176, 0, 173, 0, 397, 174,
	737, 175, 738, 739, 740, 741, 742, 0, 700, 0,
	399, 177, 178, 179, 400, 180, 181, 182, 0, 184,
	183, 0, 317, 401, 185, 402, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 403, 193,
	194, 196, 195, 0, 0, 690, 319, 197, 743, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	404, 203, 405, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 744, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 406,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	407, 248, 745, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 746, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 747, 748, 0,
	0, 264, 265, 335, 336, 688, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 749, 564, 561, 278, 0, 0,
	824, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 394,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 395, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 396, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 308, 309, 398, 0, 176,
	0, 173, 0, 397, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 399, 177, 178, 179, 400,
	180, 181, 182, 0, 184, 183, 0, 317, 401, 185,
	402, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 403, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 404, 203, 405, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 406, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 407, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 124, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	308, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 123, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 564, 561, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	127, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 394,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 395, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 396, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 308, 309, 398, 0, 176,
	0, 173, 0, 397, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 399, 177, 178, 179, 400,
	180, 181, 182, 0, 184, 183, 0, 317, 401, 185,
	402, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 403, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 404, 203, 405, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 406, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 407, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	308, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 564, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	127, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 394,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 395, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 396, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 308, 309, 398, 0, 176,
	0, 173, 0, 397, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 399, 177, 178, 179, 400,
	180, 181, 182, 0, 184, 183, 0, 317, 401, 185,
	402, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 403, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 404, 203, 405, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 406, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 407, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	1395, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 1393, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 1392, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 1397, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	308, 309, 0, 0, 176, 1390, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 1396, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 1391, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 1395, 141, 296, 0, 0,
	1435, 142, 143, 144, 0, 145, 1393, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 1397, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 1434, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	1396, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 1438, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 1890, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	308, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 308, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 609,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 1126, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	308, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 856, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 609,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	850, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 609, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 629, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 308, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 346, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	308, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 345, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 308, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	1668, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 1666, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	1661, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 1102, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	308, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 495, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 892, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 308, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 0, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	853, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 801, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	796, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 767, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 308, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 517, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 513, 333, 334, 0, 0, 264, 768, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	647, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 645, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	642, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 638, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	636, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 308, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 598, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 507, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	308, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 506, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 517, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 508, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 509, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 513, 333, 334, 0,
	0, 264, 511, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 308, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 0, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 0, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 0, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	0, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 912, 913, 0, 932, 933, 934, 942, 943,
	944, 0, 0, 0, 0, 0, 0, 0, 935, 0,
	0, 0, 0, 0, 0, 915, 0, 0, 946, 0,
	912, 913, 0, 932, 933, 934, 942, 943, 944, 0,
	0, 0, 0, 0, 0, 0, 935, 0, 0, 914,
	0, 0, 0, 915, 0, 929, 946, 0, 912, 913,
	0, 932, 933, 934, 942, 943, 944, 0, 0, 0,
	0, 0, 0, 0, 935, 0, 0, 914, 0, 0,
	0, 915, 0, 929, 946, 0, 0, 912, 913, 0,
	932, 933, 934, 942, 943, 944, 0, 0, 0, 0,
	0, 0, 0, 935, 0, 914, 0, 0, 0, 920,
	915, 929, 0, 946, 0, 912, 913, 0, 932, 933,
	934, 942, 943, 944, 0, 0, 0, 0, 939, 947,
	0, 935, 0, 0, 914, 0, 0, 920, 915, 0,
	929, 946, 0, 0, 0, 0, 945, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 939, 947, 0, 0,
	0, 937, 914, 0, 0, 920, 0, 930, 929, 0,
	0, 0, 0, 0, 945, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 939, 947, 0, 0, 0, 937,
	0, 0, 936, 0, 920, 930, 0, 0, 0, 0,
	0, 0, 945, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 939, 947, 0, 0, 937, 0, 0,
	936, 0, 920, 930, 0, 0, 0, 0, 0, 0,
	0, 945, 0, 0, 0, 0, 0, 0, 0, 0,
	931, 939, 947, 0, 0, 0, 937, 0, 936, 0,
	0, 0, 930, 0, 0, 0, 940, 0, 0, 945,
	0, 0, 0, 0, 0, 0, 0, 0, 931, 0,
	0, 0, 0, 0, 937, 0, 0, 936, 0, 0,
	930, 0, 0, 0, 940, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 931, 0, 0, 0,
	0, 0, 0, 0, 0, 936, 0, 0, 0, 0,
	0, 0, 940, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 938, 0, 931, 926, 927, 928, 941,
	0, 925, 923, 924, 916, 917, 918, 919, 921, 922,
	0, 940, 0, 0, 2129, 0, 0, 0, 0, 0,
	0, 938, 0, 931, 926, 927, 928, 941, 0, 925,
	923, 924, 916, 917, 918, 919, 921, 922, 0, 940,
	0, 0, 2072, 0, 0, 0, 0, 0, 0, 938,
	0, 0, 926, 927, 928, 941, 0, 925, 923, 924,
	916, 917, 918, 919, 921, 922, 0, 0, 0, 0,
	2049, 0, 0, 0, 0, 0, 0, 0, 938, 0,
	0, 926, 927, 928, 941, 0, 925, 923, 924, 916,
	917, 918, 919, 921, 922, 0, 0, 0, 0, 2044,
	0, 0, 0, 0, 0, 0, 938, 0, 0, 926,
	927, 928, 941, 0, 925, 923, 924, 916, 917, 918,
	919, 921, 922, 0, 0, 912, 913, 2040, 932, 933,
	934, 942, 943, 944, 0, 0, 0, 0, 0, 0,
	0, 935, 0, 0, 0, 0, 0, 0, 915, 0,
	0, 946, 0, 912, 913, 0, 932, 933, 934, 942,
	943, 944, 0, 0, 0, 0, 0, 0, 0, 935,
	0, 0, 914, 0, 0, 0, 915, 0, 929, 946,
	0, 912, 913, 0, 932, 933, 934, 942, 943, 944,
	0, 0, 0, 0, 0, 0, 0, 935, 0, 0,
	914, 0, 0, 0, 915, 0, 929, 946, 0, 0,
	912, 913, 0, 932, 933, 934, 942, 943, 944, 0,
	0, 0, 0, 0, 0, 0, 935, 0, 914, 0,
	0, 0, 920, 915, 929, 0, 946, 0, 912, 913,
	0, 932, 933, 934, 942, 943, 944, 0, 0, 0,
	0, 939, 947, 0, 935, 0, 0, 914, 0, 0,
	920, 915, 0, 929, 946, 0, 0, 0, 0, 945,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 939,
	947, 0, 0, 0, 937, 914, 0, 0, 920, 0,
	930, 929, 0, 0, 0, 0, 0, 945, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 939, 947, 0,
	0, 0, 937, 0, 0, 936, 0, 920, 930, 0,
	0, 0, 0, 0, 0, 945, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 939, 947, 0, 0,
	937, 0, 0, 936, 0, 920, 930, 0, 0, 0,
	0, 0, 0, 0, 945, 0, 0, 0, 0, 0,
	0, 0, 0, 931, 939, 947, 0, 0, 0, 937,
	0, 936, 0, 0, 0, 930, 0, 0, 0, 940,
	0, 0, 945, 0, 0, 0, 0, 0, 0, 0,
	0, 931, 0, 0, 0, 0, 0, 937, 0, 0,
	936, 0, 0, 930, 0, 0, 0, 940, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 931,
	0, 0, 0, 0, 0, 0, 0, 0, 936, 0,
	0, 0, 0, 0, 0, 940, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 938, 0, 931, 926,
	927, 928, 941, 0, 925, 923, 924, 916, 917, 918,
	919, 921, 922, 0, 940, 0, 0, 1966, 0, 0,
	0, 0, 0, 0, 938, 0, 931, 926, 927, 928,
	941, 0, 925, 923, 924, 916, 917, 918, 919, 921,
	922, 0, 940, 0, 0, 1937, 0, 0, 0, 0,
	0, 0, 938, 0, 0, 926, 927, 928, 941, 0,
	925, 923, 924, 916, 917, 918, 919, 921, 922, 0,
	0, 0, 0, 1936, 0, 0, 0, 0, 0, 0,
	0, 938, 0, 0, 926, 927, 928, 941, 0, 925,
	923, 924, 916, 917, 918, 919, 921, 922, 0, 0,
	0, 0, 1842, 0, 0, 0, 0, 0, 0, 938,
	0, 0, 926, 927, 928, 941, 0, 925, 923, 924,
	916, 917, 918, 919, 921, 922, 0, 0, 912, 913,
	1761, 932, 933, 934, 942, 943, 944, 0, 0, 0,
	0, 0, 0, 0, 935, 0, 0, 0, 0, 0,
	0, 915, 0, 0, 946, 0, 912, 913, 0, 932,
	933, 934, 942, 943, 944, 0, 0, 0, 0, 0,
	0, 0, 935, 0, 0, 914, 0, 0, 0, 915,
	0, 929, 946, 0, 912, 913, 0, 932, 933, 934,
	942, 943, 944, 0, 0, 0, 0, 0, 0, 0,
	935, 0, 0, 914, 0, 0, 0, 915, 0, 929,
	946, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 914, 0, 0, 0, 920, 0, 929, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 939, 947, 0, 0, 0, 0,
	0, 0, 0, 920, 0, 0, 0, 0, 0, 0,
	0, 0, 945, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 939, 947, 0, 0, 0, 937, 0, 0,
	0, 920, 0, 930, 0, 0, 0, 0, 0, 0,
	945, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	939, 947, 0, 0, 0, 937, 0, 0, 936, 0,
	0, 930, 0, 0, 0, 0, 0, 0, 945, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 937, 0, 0, 936, 0, 0, 930,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 113, 931, 0, 0, 0,
	0, 0, 0, 0, 936, 0, 36, 88, 0, 0,
	0, 0, 940, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 931, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 40,
	940, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 931, 0, 0, 0, 0, 0, 0, 0,
	0, 47, 0, 0, 0, 49, 0, 0, 940, 50,
	0, 0, 91, 0, 0, 0, 51, 0, 52, 938,
	0, 0, 926, 927, 928, 941, 0, 925, 923, 924,
	916, 917, 918, 919, 921, 922, 53, 0, 0, 0,
	1737, 0, 54, 0, 0, 0, 0, 938, 0, 0,
	926, 927, 928, 941, 0, 925, 923, 924, 916, 917,
	918, 919, 921, 922, 0, 0, 0, 0, 1284, 1562,
	1563, 0, 1580, 1581, 1582, 938, 0, 0, 926, 927,
	928, 941, 0, 925, 923, 924, 916, 917, 918, 919,
	921, 922, 912, 913, 1524, 932, 933, 934, 942, 943,
	944, 0, 0, 0, 0, 0, 0, 0, 935, 0,
	0, 0, 0, 0, 0, 915, 0, 0, 946, 0,
	0, 0, 1577, 0, 55, 0, 0, 0, 0, 0,
	56, 0, 0, 0, 0, 0, 0, 0, 0, 914,
	0, 0, 0, 0, 0, 929, 0, 0, 62, 63,
	37, 0, 57, 0, 58, 0, 92, 0, 0, 0,
	0, 59, 0, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 112, 1568, 0, 0, 0,
	0, 0, 1562, 1563, 89, 1580, 1581, 1582, 0, 0,
	0, 0, 0, 118, 0, 0, 1584, 0, 1729, 920,
	2237, 912, 913, 0, 932, 933, 934, 942, 943, 944,
	0, 0, 93, 1583, 0, 0, 0, 935, 939, 947,
	0, 111, 0, 0, 915, 0, 0, 946, 0, 119,
	0, 0, 0, 0, 1578, 1577, 945, 114, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 914, 0,
	0, 937, 0, 0, 929, 0, 0, 930, 0, 0,
	0, 0, 0, 110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 936, 0, 0, 0, 0, 0, 0, 1568,
	0, 0, 0, 0, 0, 0, 0, 0, 2236, 0,
	0, 0, 0, 0, 0, 0, 0, 1579, 920, 0,
	1594, 0, 0, 1593, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1583, 939, 947, 0,
	931, 0, 0, 912, 913, 0, 932, 933, 934, 942,
	943, 944, 0, 0, 0, 945, 940, 1578, 0, 935,
	0, 0, 0, 0, 1417, 0, 915, 0, 0, 946,
	937, 0, 0, 0, 0, 0, 930, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	914, 0, 0, 0, 0, 0, 929, 0, 0, 0,
	0, 936, 0, 1574, 1575, 1576, 0, 0, 1573, 1571,
	1572, 1564, 1565, 1566, 1567, 1569, 1570, 0, 0, 0,
	0, 0, 0, 938, 0, 1418, 926, 927, 928, 941,
	1579, 925, 923, 924, 916, 917, 918, 919, 921, 922,
	0, 0, 0, 0, 0, 1173, 0, 0, 0, 931,
	920, 912, 913, 0, 932, 933, 934, 942, 943, 944,
	0, 0, 0, 0, 0, 940, 0, 935, 0, 939,
	947, 1172, 0, 0, 915, 0, 0, 946, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 945, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 914, 0,
	0, 0, 937, 0, 929, 0, 0, 0, 930, 0,
	0, 0, 0, 0, 0, 0, 1574, 1575, 1576, 0,
	0, 1573, 1571, 1572, 1564, 1565, 1566, 1567, 1569, 1570,
	0, 0, 938, 936, 0, 926, 927, 928, 941, 0,
	925, 923, 924, 916, 917, 918, 919, 921, 922, 0,
	0, 0, 0, 0, 0, 0, 912, 913, 920, 932,
	933, 934, 942, 943, 944, 0, 0, 0, 0, 0,
	0, 0, 935, 0, 0, 0, 0, 939, 947, 915,
	0, 931, 946, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 945, 0, 940, 0, 0,
	0, 1562, 1563, 914, 1580, 1581, 1582, 0, 0, 929,
	937, 0, 0, 0, 0, 0, 930, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 936, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1577, 0, 0, 0, 0, 0,
	0, 0, 0, 920, 938, 0, 0, 926, 927, 928,
	941, 0, 925, 923, 924, 916, 917, 918, 919, 921,
	922, 0, 939, 947, 0, 0, 0, 0, 0, 931,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	945, 0, 0, 0, 0, 940, 912, 913, 1568, 932,
	933, 934, 942, 943, 944, 937, 0, 0, 0, 0,
	0, 930, 935, 0, 0, 0, 0, 0, 0, 915,
	0, 0, 946, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1583, 936, 545, 0, 0,
	0, 0, 0, 914, 0, 0, 0, 0, 0, 929,
	0, 0, 0, 0, 0, 0, 1578, 0, 0, 0,
	0, 0, 938, 0, 0, 926, 927, 928, 941, 0,
	925, 923, 924, 916, 917, 918, 919, 921, 922, 0,
	0, 0, 0, 0, 931, 0, 912, 913, 0, 932,
	933, 934, 942, 943, 944, 0, 0, 0, 0, 0,
	940, 0, 935, 920, 0, 0, 0, 0, 0, 915,
	0, 0, 946, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 939, 947, 0, 0, 0, 0, 0, 1579,
	0, 0, 0, 914, 0, 0, 0, 0, 0, 929,
	945, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 937, 0, 0, 0, 0,
	0, 930, 0, 0, 0, 0, 0, 938, 0, 0,
	926, 927, 928, 941, 0, 925, 923, 924, 916, 917,
	918, 919, 921, 922, 0, 0, 936, 0, 0, 0,
	0, 0, 0, 920, 0, 0, 0, 0, 1600, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 939, 947, 0, 1574, 1575, 1576, 0, 0,
	1573, 1571, 1572, 1564, 1565, 1566, 1567, 1569, 1570, 0,
	945, 0, 0, 0, 931, 0, 912, 913, 0, 932,
	933, 934, 942, 943, 944, 937, 0, 0, 0, 0,
	940, 930, 935, 0, 0, 0, 1595, 0, 0, 915,
	0, 0, 946, 0, 0, 912, 913, 0, 932, 933,
	934, 942, 943, 944, 0, 1741, 936, 0, 0, 0,
	0, 935, 0, 914, 0, 0, 0, 0, 915, 929,
	0, 946, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 914, 0, 0, 0, 0, 938, 929, 0,
	926, 927, 928, 941, 931, 925, 923, 924, 916, 917,
	918, 919, 921, 922, 0, 0, 0, 0, 0, 0,
	940, 0, 0, 920, 0, 0, 0, 0, 0, 0,
	912, 913, 0, 932, 933, 934, 942, 943, 944, 0,
	0, 0, 939, 947, 0, 0, 935, 0, 0, 0,
	1553, 0, 920, 915, 0, 0, 946, 0, 0, 0,
	945, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 939, 947, 0, 0, 937, 0, 914, 0, 0,
	0, 930, 0, 929, 0, 0, 0, 938, 0, 945,
	926, 927, 928, 941, 0, 925, 923, 924, 916, 917,
	918, 919, 921, 922, 937, 0, 936, 0, 0, 0,
	930, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 936, 0, 920, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1560, 0,
	0, 0, 0, 0, 931, 0, 939, 947, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	940, 0, 0, 0, 945, 0, 0, 0, 0, 0,
	0, 0, 0, 931, 0, 0, 0, 0, 0, 937,
	0, 0, 0, 0, 0, 930, 0, 0, 0, 940,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 912,
	913, 0, 932, 933, 934, 942, 943, 944, 0, 0,
	936, 0, 0, 0, 0, 935, 0, 0, 0, 0,
	0, 0, 915, 0, 0, 946, 0, 938, 0, 0,
	926, 927, 928, 941, 0, 925, 923, 924, 916, 917,
	918, 919, 921, 922, 0, 0, 914, 0, 0, 0,
	0, 0, 929, 0, 0, 0, 938, 0, 931, 926,
	927, 928, 941, 0, 925, 923, 924, 916, 917, 918,
	919, 921, 922, 0, 940, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 912, 913, 0, 932, 933, 934,
	942, 943, 944, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 920, 915, 0, 0,
	946, 0, 912, 913, 0, 932, 933, 934, 942, 943,
	944, 0, 0, 0, 0, 939, 947, 0, 0, 0,
	0, 914, 0, 0, 0, 915, 0, 929, 946, 0,
	0, 938, 0, 945, 926, 927, 928, 941, 0, 925,
	923, 924, 916, 917, 918, 919, 921, 922, 937, 914,
	0, 0, 0, 0, 930, 929, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 936,
	0, 920, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	939, 947, 0, 0, 0, 0, 0, 0, 0, 920,
	0, 0, 0, 0, 0, 0, 0, 0, 945, 0,
	0, 0, 0, 0, 912, 913, 0, 931, 939, 947,
	942, 943, 944, 937, 0, 0, 0, 0, 0, 930,
	0, 0, 0, 940, 0, 0, 0, 915, 0, 0,
	946, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 937, 0, 0, 0, 0, 0, 930, 0, 0,
	0, 914, 0, 0, 0, 0, 0, 929, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	938, 0, 931, 926, 927, 928, 941, 0, 925, 923,
	924, 916, 917, 918, 919, 921, 922, 0, 940, 0,
	0, 920, 0, 0, 0, 0, 0, 0, 0, 0,
	931, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	939, 947, 0, 0, 0, 0, 940, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 937, 0, 0, 0, 0, 0, 930,
	0, 0, 0, 0, 0, 938, 0, 0, 926, 927,
	928, 941, 0, 925, 923, 924, 916, 917, 918, 919,
	921, 922, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 938, 0, 0, 926, 927, 928, 941,
	0, 925, 923, 924, 916, 917, 918, 919, 921, 922,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1037, 1027, 1056, 1019, 1047,
	1046, 0, 931, 1021, 1020, 0, 0, 0, 0, 1058,
	1057, 0, 0, 0, 0, 0, 0, 0, 940, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1052, 0, 1044, 1043, 0, 0, 0, 0,
	0, 0, 0, 0, 1042, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1041, 1039, 1040, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 938, 0, 0, 0, 0,
	0, 941, 0, 925, 923, 924, 916, 917, 918, 919,
	921, 922, 1030, 1029, 1031, 1032, 1033, 1034, 1035, 0,
	1055, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1037, 1027, 1056, 1019, 1047, 1046, 0, 0, 1021, 1020,
	0, 0, 0, 0, 1058, 1057, 0, 0, 1023, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1045, 0, 0, 0, 1028, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1052, 0, 1044,
	1043, 0, 0, 0, 0, 0, 0, 0, 0, 1042,
	0, 0, 0, 1038, 0, 0, 500, 1219, 1217, 1218,
	1221, 1220, 0, 0, 0, 0, 0, 1041, 1039, 1040,
	0, 0, 0, 0, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 1024, 0, 0, 570, 0, 0, 0,
	0, 0, 0, 0, 1036, 1025, 0, 1030, 1029, 1031,
	1032, 1033, 1034, 1035, 1060, 1055, 0, 571, 0, 0,
	0, 0, 573, 0, 0, 0, 1022, 579, 580, 1053,
	1054, 589, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1023, 502, 574, 0, 0, 0, 0,
	0, 1026, 0, 0, 0, 1045, 1059, 0, 0, 1028,
	0, 0, 0, 0, 0, 0, 0, 592, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 575, 1038, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 576, 577, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1024, 583,
	0, 0, 578, 585, 0, 0, 0, 0, 0, 1036,
	1025, 0, 0, 582, 0, 0, 0, 0, 0, 1060,
	0, 0, 0, 503, 0, 0, 0, 0, 0, 0,
	0, 1022, 0, 0, 1053, 1054, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1026, 0, 0, 0,
	0, 1059, 0, 581, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 569,
	586, 504, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 0, 0, 0, 591, 0,
	0, 0, 505, 0, 0, 0, 0, 584, 588, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590,
}
var sqlPact = [...]int{

	29142, -1000, 24, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 17926, 17926, -1000, -1000,
	22021, -1000, -1000, -1000, -1000, -1000, -1000, 21706, 888, 968,
	808, 22021, 2798, 1047, 5310, 1200, 22021, 1194, 1047, 23596,
	-1000, -1000, 23596, 1321, -1000, -1000, -1000, -1000, -1000, 27376,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 520, 521,
	520, 520, 519, 644, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 946, 771, 138, -1000, 763,
	-13, 14738, 31112, 849, 27061, 22021, 1580, -7, 20131, 341,
	29142, 591, -18, 18556, 22021, -1000, 36, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1366, 355, 36, -1000, -1000, 21391, -1000, 1365, 1212, 1211,
	20131, -1000, -1000, -1000, -1000, -1000, 26746, 26431, 26116, 25801,
	25486, 346, -1000, 13428, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1000, -1000, -12,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11093, 345, 11093, 997, -1000, 22021, -1000, -1000, -1000, 1323,
	-1000, -1000, -1000, -1000, -1000, 434, 1803, 706, 344, 25171,
	-1000, 1095, -1000, 432, 596, -1000, -1000, 14411, 41, 1095,
	-1000, 1095, -1000, -1000, -1000, 590, 23596, 20131, -1000, 11093,
	11093, 24856, 22021, 22021, 1227, 24541, -1000, 763, -1000, -1000,
	-1000, 1126, 1579, 1579, 1579, 1633, 123, 117, 138, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1766, -1000,
	-1000, -1000, -1000, 1791, -1000, -1000, -1000, -1000, -1000, 1323,
	17611, 856, 1606, 1364, -1000, 973, 1363, 1361, 1355, 1351,
	1349, -1000, 761, -1000, 1402, 523, -1000, 1347, 937, 511,
	-1000, 1342, 1341, 21076, 24226, 22021, 20761, -19, 22021, -1000,
	342, -19, 9732, 9732, -1000, -1000, 341, -1000, 229, 16969,
	-1000, 9052, -1000, 17611, 18556, -18, -46, -1000, -1000, -1000,
	4983, 17611, 680, 16011, 36, -1000, -1000, -1000, -1000, -1000,
	20131, 22021, 22021, 712, 23911, -1000, 1492, 127, 1482, -1000,
	-161, 124, 1478, -1000, 124, 1476, -46, 1473, -1000, 11093,
	33, -1000, -1000, 341, 17926, 752, 30449, -1000, 11093, 11093,
	11093, 11093, 11093, 915, 366, -1000, 340, 337, 6318, -1000,
	-1000, 1790, -1000, -1000, -1000, 125, -1000, -1000, 11093, 36,
	-1000, -1000, -1000, -1000, 336, 1799, -1000, 443, -1000, -1000,
	-1000, 446, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1392, 332, 330, 326, -1000, -1000, -1000, -1000, 325,
	324, 322, 321, 320, 318, 315, 312, 309, 306, 303,
	302, 301, 298, 297, 876, -1000, 462, -1000, -1000, 462,
	462, -1000, 291, 291, 292, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 291, -1000, -1000, -1000, 436, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 296, 1675, 31013, 30449, 17926,
	-1000, -1000, -1000, -1000, 22021, 11093, -1000, 1674, 1095, -38,
	-1000, -1000, -1000, -1000, 1161, 1149, 573, 740, 14084, 13757,
	1549, -1000, -1000, -1000, 40, 5310, -1000, -38, -1000, 23596,
	-1000, 128, -1000, 30449, 30449, 295, 1133, 444, 133, 23281,
	444, 1112, -1000, 1126, -1000, 1007, 1213, 10413, 1223, 11093,
	138, -1000, -1000, 138, 138, 7339, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 20446, -1000, -1000, 695, 22021,
	1387, 17926, 22021, 22021, 22021, 22021, 22021, -1000, -1000, 2313,
	1379, 22021, 1160, -1000, -1000, 22021, 22021, 805, 636, 1040,
	1465, 500, 942, 1464, 781, 774, 1459, 22021, -19, 1670,
	22021, 104, -1000, 29661, -1000, 104, -1000, -1000, -1000, 22021,
	32, -1000, 30449, -1000, 409, -1000, 22021, -1000, -1000, -67,
	-1000, -1000, 1340, 28, -1000, -1000, 455, 96, 1668, 96,
	16331, -1000, 22021, 22021, -1000, 22021, -1000, -1000, 22021, 5310,
	-1000, 22021, 22021, -1000, 22021, 22021, 18, 30449, 2633, 18871,
	588, -1000, 30888, 31013, 5310, 614, 11093, 11093, 11093, 11093,
	11093, 11093, 11093, 11093, 11093, 11093, 11093, 11093, 11093, 11093,
	11093, 11093, 11093, 11093, 11093, 11093, 11093, 11093, 1104, 11093,
	587, 11093, 11093, 11093, 11093, 1209, 920, 285, 944, -1000,
	1760, 1760, 1760, 30534, 30534, 219, 366, -1000, 11093, -1000,
	10073, 117, 28946, -20, -1000, -1000, -1000, 7679, 463, 30449,
	36, 5977, -1000, 1787, 955, 1412, 1265, 294, 115, 114,
	111, 11093, 11093, 11773, 11773, 11093, 12113, 11093, 11093, 6658,
	11093, 11093, 11093, 11093, 11093, 11093, -1000, 293, -1000, -1000,
	-1000, -1000, 1778, -1000, -1000, 1776, -1000, 608, 607, 1768,
	-13, 17, -1000, 1660, -1000, -1000, -1000, -1000, 113, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 292, 876, 291, 291, 291, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 436, -1000, -1000, 462, 462, 462, -1000,
	-1000, 1339, -1000, 430, 16, 518, -38, 1095, 993, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1798, -42, -1000, -1000, -42, -1000, -1000, 5310,
	-1000, -1000, -1000, 20131, 19186, 1663, 1457, 887, -1000, 1654,
	22021, 970, 1111, -1000, 628, 1446, -1000, -1000, -1000, -1000,
	30449, -1000, 383, -1000, -1000, 30449, 748, 1210, -1000, 1210,
	-44, -1000, 29553, 1183, 22021, -1000, -1000, -1000, -1000, -1000,
	22021, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2130,
	-1000, -1000, -1000, -1000, 22021, 22021, 22021, -82, 865, -1000,
	19501, 1582, 1575, 1560, 20131, 1647, -13, 1336, 1645, -13,
	1334, 586, 22021, 579, 576, 20131, -1000, 290, 0, 455,
	9732, 15692, 5310, -1000, 455, 110, 9052, -1000, 1251, 1010,
	-1000, 448, 17611, 669, 1331, 22021, 739, 11093, 802, -1000,
	15373, 472, 22021, 739, 69, -1000, -1000, -1000, 404, 22021,
	-1000, -1000, -1000, 127, -1000, -1000, 124, 124, -46, -1000,
	11093, -1000, -1000, 22021, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 431, 679, 679, 629, 629, 629,
	629, 1715, 170, 283, 1031, 30684, 30684, 30684, 3391, 765,
	765, 30684, 30684, 30684, 30534, 3757, 159, 11093, 11093, 570,
	919, 285, 159, 11093, 159, 159, 159, 159, -1000, 1208,
	-1000, -1000, -1000, -1000, 1317, 272, 12113, 12113, -1000, -1000,
	-1000, 6318, 12453, -1000, -1000, -1000, -1000, 269, 11093, -1000,
	28974, -201, -2, -1000, -1000, 11093, -8, -98, -1000, -1000,
	690, -1000, 11093, -1000, -35, 11093, 11093, 11093, 108, 105,
	-1000, 569, -1000, 564, 563, 561, -1000, 268, 917, 267,
	265, 11093, -1000, -1000, -1000, 30270, 3808, 102, 1311, -168,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 101, 98, 30185,
	-168, 97, 29289, -1000, 12113, 12113, 12113, 6318, 261, 94,
	29421, -168, 30156, 9392, 9392, 9392, 91, 30006, 11093, -168,
	3612, 3216, 3155, -11, -22, -23, 1756, -24, 89, 421,
	419, 88, -1000, -1000, 31013, 365, 356, -1000, 1753, 22021,
	-1000, 1202, -1000, -1000, 757, -1000, 838, -1000, 14738, -1000,
	-1000, 86, -28, -50, 31013, -1000, -1000, -1000, -1000, -1000,
	22021, 300, 22021, 22021, -1000, 260, 1179, 1178, -13, 22021,
	-1000, 1797, -13, 22021, 1442, 1500, 402, 22021, 748, -1000,
	11093, 1751, -1000, -1000, -1000, 7339, -1000, -1000, -1000, 22021,
	-179, -71, -1000, -1000, -1000, -1000, -1000, 409, 790, 22021,
	22021, 22021, -1000, -1000, 1110, 22966, 1106, 31013, 258, 22021,
	22021, 22651, 22336, 22021, 886, -13, -1000, 257, -13, -1000,
	256, 22021, 772, 22021, 22021, 762, -13, -1000, 1263, -1000,
	-125, 1293, 1009, -189, 93, 411, -1000, 15054, -1000, 1263,
	-1000, -1000, 448, 1307, 654, -1000, 953, -1000, -1000, 665,
	-1000, -1000, 6998, 30449, -1000, 739, 1565, -29, -1000, -1000,
	-1000, 455, 16331, 15692, 9052, -30, -1000, -1000, -1000, 30449,
	-71, 11093, 159, 159, 11093, 12113, 12113, -1000, 159, -1000,
	-1000, -1000, -1000, -1000, 1305, 253, 11093, 31013, 29402, 3908,
	-37, -1000, 8712, -54, -1000, 11093, -1000, 28918, -1000, -1000,
	129, 1483, -1000, 11093, 29916, 84, 8372, -1000, 29766, -41,
	-41, -1000, 1796, 1049, 987, 877, 721, 1737, -1000, 16650,
	459, 933, 28578, 30888, 31013, -1000, 11093, -1000, -1000, 1302,
	11093, -1000, 30888, 31013, 12113, 12113, 12113, 12113, 12113, 12113,
	12113, 12113, 12113, 12113, 12113, 12113, 12113, 12113, 12113, 12113,
	12113, 12113, 12113, 1071, 12113, 1746, 1746, 1746, -56, 8032,
	-1000, 1373, 1302, 11093, 11093, 31013, 83, 82, 81, -1000,
	11093, -168, 11093, 11093, 11093, -1000, -1000, -1000, 80, -1000,
	1734, -1000, -1000, -1000, -1000, -1000, 449, 1730, 79, -71,
	-1000, -1000, -1000, -1000, -1000, 1229, -1000, 19186, -1000, 252,
	22021, 13109, 251, 743, 11093, 250, 247, -1000, 242, -1000,
	-1000, 226, 22021, 1166, 402, 18241, -1000, 444, 943, 28550,
	-1000, 1587, 5310, 22021, -1000, -1000, -1000, 557, 555, 1441,
	-1000, 1094, -1000, 477, 894, -1000, 1434, 950, 1428, 950,
	-1000, -82, 786, -1000, 11093, -1000, 11093, -1000, 548, -1000,
	-1000, 547, 78, 1260, 1623, -1000, 15692, 1191, 1188, 15692,
	1405, 922, 922, 922, -1000, 224, 360, 411, 4315, 11093,
	19816, 925, 54, 74, 1293, 1260, -1000, 17611, 598, 223,
	-1000, -90, -1000, -1000, 232, -13, 739, -1000, -91, -1000,
	403, 1659, 159, 3694, 222, 11093, 31013, 30562, -45, 11093,
	11093, -1000, -49, -1000, 11093, 353, 30449, -1000, -1000, -1000,
	30449, 11093, 1748, 11093, 73, 65, 64, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 63, -1000, -1000, 27691, 11093,
	60, -1000, 58, 57, 30449, 1373, 30449, -1000, -1000, 412,
	412, 718, 718, 718, 718, 1746, 2535, 2125, 179, 3193,
	3193, 3193, 1480, 461, 461, 3193, 3193, 3193, 1301, 1121,
	221, 29811, 11093, -55, -1000, -1000, -1000, 30449, 30449, 53,
	-1000, -1000, -1000, -168, 245, 28521, 28493, -1000, 52, -1000,
	352, 350, -1000, -1000, 1243, -1000, 2372, 13109, 209, -57,
	-1000, 317, 1601, 11093, -1000, -1000, 208, 22021, -1000, 28465,
	13109, 22021, 19186, 1653, 13109, 964, 1168, 402, 18241, -1000,
	628, -1000, -1000, -1000, 1587, -1000, 22021, 22021, 22021, 1427,
	-1000, -1000, 1164, 1224, 501, 22021, -1000, 22021, -1000, 22021,
	22021, 22021, -63, -69, 22021, 22021, -1000, 450, 11093, 11093,
	1293, 15692, 15692, 1292, 1186, 15692, -1000, -1000, -1000, -1000,
	284, 385, 411, 19816, -1000, 1727, 1162, -73, -1000, -1000,
	22021, 203, -1000, 411, 450, -105, 17296, 1795, 1505, 22021,
	1557, -1000, -1000, 201, 11093, 11093, 30562, -75, -1000, 159,
	159, -1000, 28125, -1000, 30449, -1000, 29766, -1000, -1000, -1000,
	-1000, 890, -1000, 28097, -1000, -1000, -1000, -1000, 12113, 1300,
	191, 31013, 28068, -1000, -1000, 11093, -1000, -1000, -1000, -1000,
	-1000, 895, -1000, 22021, -1000, 5310, 22021, 1275, 1035, -1000,
	-1000, 1173, 190, 12113, 22021, -80, 13109, 873, 13109, 1587,
	36, 5310, 1587, 28040, 5977, -101, -1000, -106, -108, 51,
	-13, -113, 22021, -1000, 402, 18241, -1000, 1500, -1000, -1000,
	-1000, -1000, 22021, 1034, -1000, 1020, 11093, -1000, 31013, 950,
	950, -1000, 545, 536, 532, 527, -1000, -1000, -1000, 22021,
	30449, -168, -1000, 1292, -1000, 186, 11093, 15692, -1000, -189,
	-1000, -121, -1000, 19816, -1000, 205, -196, -1000, 399, -1000,
	411, 184, 22021, 19816, -1000, -1000, 146, 36, -127, -1000,
	397, 622, -131, 22021, -1000, -1000, 5637, 159, 159, -1000,
	-1000, 50, 933, 1619, -1000, 204, 12113, 31013, -132, -1000,
	28012, 22021, 1120, -1000, -1000, 22021, 1076, -1000, -1000, 11093,
	29811, 144, 873, -142, 1229, 143, -1000, -1000, -1000, -1000,
	-1000, -1000, 1601, -35, -1000, -1000, 809, 1229, -1000, 873,
	141, 18241, -1000, 1166, -1000, -1000, -1000, 30449, 1576, -1000,
	-1000, 22021, 22021, 139, 137, -143, -1000, 1652, -1000, 22021,
	30449, -1000, 411, -1000, 1723, -1000, -1000, 1162, -1000, 4653,
	19816, 22021, -146, -1000, 11093, 1795, -1000, -1000, 1794, 709,
	-1000, 455, -1000, -1000, 857, 11093, 204, -148, -1000, -1000,
	135, -1000, -1000, 1424, 3873, 1058, 22021, 1229, 873, -1000,
	22021, 1587, 49, 22021, -1000, 1229, 13109, -1000, 1168, 483,
	5310, -1000, -1000, 11093, 11093, 22021, 134, -155, 19816, -1000,
	-1000, -1000, 1716, -1000, -159, -1000, -41, -1000, -1000, 16331,
	-1000, 46, 11433, 11433, -168, -1000, 22021, 1415, -1000, 952,
	1039, 44, -1000, 1229, -167, -1000, -1000, 133, -1000, -169,
	-1000, -1000, 11093, -1000, -173, -181, -1000, -1000, -1000, -1000,
	180, -1000, 43, -150, -1000, -1000, -1000, 12782, 1005, 729,
	29312, -1000, -187, 22021, -1000, 962, 956, 732, -1000, -1000,
	-1000, -1000, -1000, -1000, 1058, 873, 30449, -1000, -1000, -1000,
	1748, -1000, 1684, -1000, -1000, -1000, -1000, -1000, 936, -1000,
	-1000, 1523, -1000, 494, 972, 972, 952, 1229, 10753, -1000,
	-1000, -1000, -1000, 1693, -1000, -1000, 1117, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2149, 2148, 1503, 1671, 2146, 2145, 2142, 2140, 2138,
	2134, 2127, 2125, 2123, 2122, 2121, 2120, 2119, 2118, 2117,
	2116, 2115, 2113, 2109, 2108, 1659, 2107, 2105, 2104, 2103,
	2101, 2098, 1656, 2097, 1608, 1593, 1591, 2096, 86, 98,
	1588, 2094, 2090, 1586, 2087, 2086, 2083, 2075, 2074, 73,
	2073, 2068, 2065, 2062, 2060, 2059, 143, 157, 2054, 1570,
	2053, 2050, 2046, 2045, 2042, 2041, 2039, 2029, 2025, 2022,
	2020, 2007, 2006, 2001, 1997, 1996, 1993, 1985, 161, 1981,
	1978, 1565, 1496, 1977, 1975, 17, 1974, 84, 1971, 44,
	145, 2297, 135, 1970, 1969, 1968, 24, 94, 88, 1967,
	79, 1966, 1965, 45, 25, 22, 13, 1964, 93, 1963,
	1961, 885, 35, 1960, 1959, 138, 1958, 32, 29, 122,
	152, 151, 132, 118, 1957, 1956, 1954, 1953, 49, 1950,
	1, 1945, 1943, 10, 68, 15, 1941, 71, 14, 1939,
	1938, 127, 1935, 80, 101, 1445, 148, 131, 61, 1933,
	81, 11, 82, 1930, 1927, 144, 43, 1925, 30, 83,
	136, 1924, 65, 154, 75, 23, 51, 111, 1923, 1922,
	1921, 103, 1919, 105, 92, 1918, 1917, 66, 1916, 128,
	130, 1915, 1913, 90, 1912, 121, 1911, 1910, 156, 147,
	113, 4, 34, 67, 9, 1414, 1407, 109, 77, 28,
	20, 1908, 1871, 921, 1438, 31, 96, 59, 50, 100,
	39, 76, 141, 40, 1907, 1904, 114, 1903, 1901, 1899,
	1898, 1896, 95, 1895, 1894, 78, 140, 19, 21, 26,
	89, 46, 64, 91, 110, 146, 104, 1892, 85, 120,
	1890, 72, 1888, 1887, 1598, 134, 1885, 1879, 1878, 1596,
	1538, 1099, 852, 1877, 1875, 1038, 1035, 1870, 1859, 69,
	1855, 129, 107, 1854, 133, 238, 53, 1853, 117, 42,
	99, 1845, 108, 56, 0, 356, 87, 1844, 106, 58,
	1843, 1841, 1840, 1838, 27, 3, 8, 7, 5, 6,
	62, 33, 1837, 1836, 123, 149, 54, 1835, 153, 1834,
	1831, 1830, 47, 1829, 18, 1818, 16, 1817, 1815, 12,
	2, 1814, 1813, 126, 1811, 97, 1810, 1644, 1808, 137,
	1807, 1806, 1605, 36, 102,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 4, 4, 5, 5, 5,
	5, 5, 7, 8, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 98, 98,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 95, 95, 100, 100, 100,
	102, 102, 99, 99, 94, 94, 20, 20, 272, 272,
	273, 273, 84, 84, 88, 88, 85, 86, 86, 87,
	87, 24, 24, 24, 21, 21, 22, 23, 25, 25,
	25, 25, 25, 25, 32, 33, 33, 33, 33, 33,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	147, 147, 146, 146, 149, 149, 35, 35, 38, 38,
	38, 38, 38, 39, 39, 39, 39, 39, 39, 39,
	39, 240, 240, 239, 37, 214, 214, 40, 172, 172,
	41, 41, 41, 41, 42, 48, 313, 313, 313, 317,
	317, 318, 318, 319, 319, 319, 319, 319, 319, 319,
	315, 315, 46, 46, 83, 51, 51, 51, 51, 51,
	51, 53, 55, 52, 52, 52, 54, 54, 56, 56,
	56, 56, 57, 57, 57, 57, 58, 58, 127, 127,
	265, 264, 264, 270, 270, 270, 125, 125, 125, 125,
	125, 126, 126, 126, 263, 263, 263, 263, 271, 271,
	271, 271, 271, 271, 269, 269, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 71, 71, 78, 78, 78, 78,
	78, 78, 60, 65, 65, 65, 61, 66, 67, 68,
	68, 68, 62, 62, 70, 70, 70, 69, 75, 75,
	75, 75, 72, 72, 72, 73, 73, 76, 76, 76,
	63, 64, 77, 74, 74, 74, 36, 314, 314, 316,
	316, 44, 28, 28, 29, 29, 128, 128, 129, 129,
	193, 193, 193, 193, 130, 130, 101, 101, 101, 192,
	282, 282, 283, 283, 283, 283, 283, 283, 284, 284,
	284, 284, 284, 284, 284, 280, 280, 281, 278, 278,
	279, 279, 279, 279, 320, 320, 191, 191, 133, 133,
	287, 287, 287, 287, 285, 285, 285, 285, 285, 288,
	286, 289, 289, 289, 289, 289, 226, 226, 226, 80,
	30, 107, 107, 31, 27, 27, 176, 176, 137, 137,
	231, 231, 231, 118, 118, 96, 96, 96, 14, 11,
	11, 11, 11, 11, 11, 19, 19, 17, 17, 177,
	177, 178, 178, 45, 47, 50, 79, 79, 79, 79,
	79, 322, 322, 114, 114, 114, 114, 115, 115, 188,
	188, 189, 189, 190, 190, 190, 109, 108, 110, 110,
	26, 26, 103, 103, 104, 104, 105, 105, 106, 106,
	323, 323, 43, 43, 82, 121, 121, 185, 185, 185,
	187, 187, 186, 186, 186, 162, 162, 162, 81, 142,
	142, 151, 151, 152, 152, 237, 153, 153, 49, 49,
	91, 91, 89, 89, 89, 89, 89, 89, 90, 90,
	92, 92, 92, 92, 92, 92, 92, 295, 295, 295,
	298, 298, 294, 296, 296, 297, 297, 321, 321, 163,
	163, 163, 132, 131, 131, 135, 135, 134, 136, 136,
	230, 230, 230, 160, 160, 160, 160, 179, 179, 180,
	180, 181, 181, 182, 182, 182, 183, 183, 184, 184,
	159, 159, 210, 210, 93, 93, 141, 141, 143, 143,
	200, 200, 200, 201, 201, 199, 199, 199, 199, 232,
	232, 232, 232, 232, 232, 232, 311, 311, 311, 312,
	312, 229, 229, 233, 233, 233, 233, 233, 233, 227,
	227, 227, 227, 228, 228, 238, 238, 166, 166, 166,
	166, 164, 164, 165, 165, 234, 234, 234, 234, 161,
	161, 235, 235, 235, 194, 194, 241, 241, 241, 259,
	259, 140, 140, 140, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 243, 243, 243, 243, 245, 245, 245, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 258, 258, 258, 258,
	258, 246, 246, 253, 253, 254, 254, 255, 256, 247,
	247, 248, 248, 249, 250, 257, 257, 257, 257, 261,
	261, 251, 251, 251, 251, 251, 252, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 174, 174, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 204, 204, 204, 204, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	290, 290, 290, 290, 290, 290, 290, 292, 292, 293,
	293, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	299, 299, 300, 300, 302, 302, 303, 303, 304, 305,
	305, 305, 306, 307, 307, 301, 301, 308, 308, 308,
	309, 309, 310, 310, 310, 310, 310, 216, 216, 216,
	217, 217, 218, 224, 224, 224, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 116, 116, 116, 116, 116, 148, 148, 213,
	213, 211, 211, 211, 215, 215, 167, 167, 260, 260,
	260, 260, 260, 260, 260, 168, 168, 168, 175, 169,
	169, 170, 170, 170, 170, 170, 170, 207, 208, 171,
	171, 171, 209, 209, 219, 223, 223, 222, 221, 221,
	220, 220, 197, 197, 198, 198, 196, 195, 156, 156,
	155, 155, 154, 154, 324, 324, 225, 225, 157, 157,
	158, 150, 150, 236, 236, 236, 236, 144, 144, 123,
	123, 145, 145, 119, 119, 122, 122, 120, 120, 120,
	120, 138, 138, 139, 139, 117, 117, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 262, 262,
	262, 212, 111, 111, 111, 112, 112, 113, 113, 267,
	267, 267, 268, 268, 268, 268, 266, 266, 266, 266,
	266, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 6, 1, 1,
	1, 3, 3, 0, 2, 0, 2, 1, 3, 5,
	0, 4, 6, 7, 1, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 6, 2, 2, 2, 2, 2,
	3, 5, 4, 6, 4, 6, 4, 6, 3, 5,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 5, 3, 0, 3, 3, 0,
	2, 3, 2, 3, 6, 6, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 3, 2, 1, 1, 1, 1, 1,
	3, 4, 5, 3, 2, 6, 3, 4, 3, 3,
	3, 3, 1, 3, 3, 1, 2, 2, 1, 0,
	1, 1, 3, 1, 1, 1, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 3, 1, 1, 1, 1,
	1, 2, 3, 4, 4, 4, 4, 2, 4, 4,
	4, 4, 4, 4, 2, 3, 3, 2, 4, 5,
	4, 5, 2, 3, 3, 4, 2, 4, 3, 3,
	4, 4, 2, 5, 5, 6, 2, 2, 0, 2,
	0, 3, 7, 10, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 3,
	2, 0, 3, 1, 2, 2, 3, 6, 2, 1,
	1, 2, 4, 2, 5, 7, 8, 5, 3, 1,
	4, 6, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	5, 2, 0, 6, 11, 14, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 8, 10, 8, 10, 6, 8, 6, 8, 1,
	0, 2, 0, 2, 3, 2, 3, 3, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	0, 1, 3, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 6, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 2, 0, 8, 2,
	0, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 2, 4, 4, 4, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 4, 5, 2, 2, 1, 1, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 2, 3, 3, 0, 1, 3,
	3, 5, 1, 1, 3, 2, 4, 4, 0, 7,
	4, 6, 3, 1, 5, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 4, 1, 1,
	1, 5, 1, 3, 1, 3, 1, 3, 1, 1,
	1, 1, 6, 6, 4, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 3, 1,
	3, 3, 3, 2, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -21, -24, -25, -41,
	-32, -33, -34, -40, -35, -42, -36, -43, -44, -37,
	-47, -48, -50, -49, -45, -46, -51, -59, -79, -80,
	-81, -82, -5, -6, -7, -8, 34, 238, -22, -23,
	67, -26, -27, -28, -29, -30, -31, 89, -297, 93,
	97, 104, 106, 124, 130, 212, 218, 240, 242, 249,
	-89, -91, 236, 237, -52, -53, -54, -55, -83, 260,
	-60, -61, -62, -63, -64, -65, -66, -67, -68, -69,
	-70, -71, -72, -73, -74, -75, -76, -77, 35, 272,
	61, 100, 244, 300, -9, -10, -13, -12, -11, -16,
	-18, -15, -17, -19, -14, 47, 69, -295, -92, -90,
	351, 309, 263, 23, 325, 332, 253, -93, 281, 317,
	354, -313, -145, 281, 82, -120, -111, 344, 4, -274,
	-276, 20, 21, 23, 33, 34, 35, 40, 44, 47,
	48, 55, 60, 61, 62, 64, 66, 67, 68, 71,
	72, 80, 81, 83, 85, 89, 91, 93, 96, 97,
	99, 104, 105, 106, 112, 113, 118, 120, 125, 130,
	131, 132, 133, 140, 143, 145, 138, 155, 156, 157,
	159, 160, 161, 164, 163, 168, 171, 174, 176, 177,
	178, 181, 179, 183, 184, 186, 185, 191, 193, 194,
	196, 199, 202, 205, 208, 209, 210, 211, 212, 214,
	216, 218, 220, 221, 222, 223, 224, 226, 227, 229,
	230, 231, 232, 233, 236, 234, 235, 237, 238, 239,
	240, 242, 244, 245, 247, 261, 262, 273, 249, 250,
	251, 252, 256, 254, 257, 258, 260, 263, 265, 268,
	271, 272, 274, 277, 275, 270, 280, 282, 283, 284,
	285, 286, 287, 288, 295, 296, 300, 301, 302, 303,
	306, 307, 308, 309, 311, 314, 315, 316, 321, 326,
	327, 328, 329, 330, 28, 36, 37, 38, 39, 41,
	42, 45, 46, 51, 52, 53, 56, 84, 86, 87,
	103, 107, 108, 114, 115, 116, 126, 128, 134, 135,
	144, 146, 147, 148, 149, 150, 152, 166, 180, 190,
	192, 203, 207, 215, 217, 225, 246, 255, 266, 267,
	276, 278, 290, 291, 292, 297, 298, 313, 317, 318,
	-313, -119, -111, 82, -111, 218, 22, 91, 143, 308,
	307, 22, 214, 254, 283, 285, 82, 139, 281, 320,
	310, -111, -39, 351, -38, -4, -25, -34, -40, -36,
	-59, -35, -49, -32, -43, -81, -82, -317, 22, -318,
	-319, 69, 97, 124, 253, 143, 91, 307, -266, 4,
	-274, -276, -275, -277, 58, 70, 123, 142, 136, 154,
	158, 167, 169, 182, 204, 206, 243, 264, 22, 24,
	25, 26, 27, 29, 30, 31, 32, 43, 49, 50,
	54, 57, 59, 65, 69, 73, 74, 76, 75, 77,
	78, 79, 88, 90, 92, 94, 95, 98, 100, 102,
	109, 110, 111, 119, 121, 122, 124, 127, 129, 137,
	139, 141, 151, 153, 162, 165, 170, 172, 173, 187,
	188, 189, 195, 197, 198, 200, 201, 213, 219, 228,
	241, 253, 259, 269, 279, 281, 289, 293, 294, 299,
	304, 305, 310, 312, 319, 320, 322, 323, 324, 325,
	156, -111, 156, -317, -115, 249, -111, -115, -78, 257,
	4, 22, 82, 181, 259, 290, 171, 55, 246, 257,
	-57, 296, -56, 290, -265, -58, -146, 181, -111, -322,
	296, 296, -322, -322, -114, 296, 293, -321, 281, 156,
	222, 281, 310, 320, -176, 82, 305, -90, -92, -91,
	-134, -135, 304, 151, 102, 201, -89, -91, -295, -270,
	-263, -226, 9, 299, 109, 197, -269, 8, 343, -262,
	-268, 5, 7, 342, 4, -274, -276, -275, -78, 257,
	34, 55, 22, 60, 83, 125, 139, 140, 160, 65,
	66, 221, 171, 157, 295, 161, 258, 282, 296, 69,
	311, 286, 105, 281, 139, 82, 320, -298, 226, -294,
	-111, -298, -131, -132, 22, 94, 355, -234, -119, 198,
	-158, 351, -3, 293, 355, -145, -138, -111, -196, -195,
	353, 122, 122, 351, -155, -156, -195, -196, -111, 22,
	122, 153, 153, -235, -234, -111, 134, -123, 134, -122,
	-119, -147, 134, -146, -147, 134, -138, 134, -172, 351,
	-240, -239, -268, 317, 197, 355, -202, -204, 342, 343,
	337, 187, 331, -216, -206, -219, 103, 246, 351, -119,
	-205, 356, 9, -292, -91, 29, -217, -218, 49, -111,
	7, 8, 5, 6, -117, -243, -212, -252, 299, 109,
	189, -290, -291, 4, -274, -267, -244, -254, -248, -251,
	152, 58, 74, 75, 78, 76, 79, 259, 310, 50,
	28, 107, 108, 207, 215, 278, 297, 298, 134, 190,
	135, 56, 126, 166, 96, 37, 39, 41, 42, 51,
	52, 84, 86, 87, 114, 115, 116, 144, 146, 147,
	148, 149, 150, 192, 225, 266, 276, 291, 292, 318,
	-275, -255, -256, -249, -250, -257, -214, 351, -202, 197,
	-111, -78, 330, 2, 261, 351, -57, 53, 296, -189,
	-190, -108, -109, -110, 155, 220, 224, 330, 293, 336,
	122, -270, -127, 88, -149, 353, -188, -189, -188, 293,
	-115, -161, -234, -202, -202, -146, 134, -111, -146, 139,
	-111, 134, -134, -135, -160, -179, -180, 170, 111, 195,
	-163, 22, 94, -163, -163, 44, 352, 352, 8, 7,
	7, -78, -272, -269, 9, 261, 221, 258, 55, 122,
	-314, 197, 122, 122, 122, 122, 122, 221, 258, 119,
	295, 122, 155, 220, 273, 281, 320, 122, 122, -234,
	134, -119, -122, 134, -111, -234, 134, 355, -298, -139,
	351, -150, -236, -202, 344, -150, -158, 344, -119, 351,
	-157, -225, -202, 88, -272, -120, 355, -266, 344, -273,
	-272, 274, 352, -144, -119, -156, -235, -121, -119, -121,
	260, -111, 30, 103, -100, 355, 48, 239, 103, 356,
	-100, 355, 103, -100, 103, 103, -148, -202, 352, 355,
	-313, -319, 10, 11, 57, 33, 342, 343, 344, 345,
	117, 346, 347, 340, 341, 339, 334, 335, 336, 63,
	175, 248, 13, 14, 15, 26, 200, 169, 331, 136,
	264, 337, 16, 17, 18, 154, 36, 137, -116, -124,
	-202, -202, -202, -202, -202, 206, -154, -197, 349, -91,
	351, -91, -202, -148, 7, -91, -211, 349, -220, -202,
	-155, 351, 5, 351, 5, -299, 326, 119, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 217, -261, 321, -261,
	-261, -245, 351, -245, -246, 351, -245, 327, 332, 351,
	30, -213, -241, -242, -244, -253, -247, -251, -252, 40,
	46, 45, 288, 180, 255, 267, 313, 38, 196, 145,
	144, 146, 147, 148, 149, 150, 266, 37, 225, 115,
	116, 114, 96, 87, 86, 192, 42, 41, -255, -256,
	-249, -250, 84, 291, 292, 152, 39, 52, 51, 318,
	276, -313, -56, -265, -148, 30, -189, 355, 168, -126,
	174, 186, 131, 198, 328, -271, 5, 4, -212, -226,
	88, 171, -252, -264, 88, -270, -264, 88, 72, 353,
	-266, -115, -100, 355, 351, -133, 187, -296, 325, -133,
	351, -112, 134, -111, -296, 187, -160, -180, -179, -181,
	-202, 22, -184, 113, 183, -202, -204, -90, -90, -90,
	-136, -230, -202, 219, 139, -146, 22, 262, -265, -316,
	119, -313, -265, -265, -265, -265, -265, 257, -39, 119,
	-111, 168, -265, -265, 281, 139, 281, -98, 234, -97,
	21, 23, 97, 315, 103, 270, 287, 250, 270, 287,
	250, 234, 103, 234, 234, 103, -294, 30, -138, -141,
	355, 122, 30, 4, -141, -119, 355, 352, -238, 333,
	-111, -238, 355, 122, 352, 355, -194, 323, -185, -49,
	351, 88, 30, -185, -151, -152, -237, -153, -119, 351,
	-111, -111, -122, -123, -266, -146, -147, -147, -138, 352,
	355, -39, -239, 293, -259, -241, -258, 230, 231, 229,
	233, 232, -241, -266, 290, -202, -202, -202, -202, -202,
	-202, -202, -202, -202, -202, -202, -202, -202, -202, -202,
	-202, -202, -202, -202, -202, -202, -202, 169, 136, 264,
	36, 137, -202, 293, -202, -202, -202, -202, 179, 187,
	189, 299, 109, 306, 94, 193, -324, 279, 32, -209,
	-91, 351, -224, 27, 269, 22, -216, 246, 351, -197,
	-202, -198, -148, 352, 352, 355, -148, -215, 350, -211,
	-223, -222, 322, 352, -148, 319, 22, 94, 344, 7,
	-173, 329, 178, 85, 132, 177, -174, 252, -300, 112,
	127, 351, 352, 352, 352, -202, -202, -167, -260, -148,
	4, 329, 178, 85, 132, 177, 252, -167, -168, -202,
	-148, -169, -203, -204, 342, 343, 337, 351, 246, -170,
	-202, -148, -202, 43, 165, 294, -171, -202, 122, -148,
	-202, -202, -202, -148, -148, -148, 351, 7, 7, 290,
	290, 7, -38, 352, 355, -140, 29, -173, 351, 122,
	352, 296, -190, -125, 224, 268, 235, 256, 355, -266,
	-234, -128, -138, -129, -111, -193, -192, -280, -281, -278,
	139, 305, 110, 65, -279, 54, 219, 121, 30, 103,
	-107, 211, 30, 197, 187, -103, 284, 103, -182, -262,
	351, 343, -183, 246, 247, 355, -96, 31, 92, 159,
	-119, -315, -111, 257, -39, -119, -122, -119, 355, 293,
	-177, 65, 59, -192, 134, 59, -278, -111, 305, -177,
	65, -177, 65, 65, -234, 33, -49, 122, 33, -49,
	122, 293, -122, 293, 293, -234, 351, 352, -194, -236,
	-143, -232, 349, -234, -119, -91, -233, 351, -266, -194,
	352, -225, -84, 133, 193, -87, 325, -272, 274, 122,
	-119, -162, 241, -202, -162, -187, 197, -144, 317, -111,
	-162, -142, 355, 122, 336, -144, -100, -100, -100, -202,
	-315, 330, -202, -202, 293, -324, 279, -209, -202, 179,
	189, 299, 109, 306, 94, 193, 122, 351, -203, -203,
	-148, -206, 351, -148, 350, 359, 352, -202, 350, 350,
	355, -221, -222, 98, -202, -135, 355, -134, -202, -148,
	-148, 352, 352, 293, 293, 293, 293, 351, -305, 205,
	351, 351, -202, 30, 355, 352, 122, 352, 352, -175,
	213, 352, 10, 11, 342, 343, 344, 345, 117, 346,
	347, 340, 341, 339, 334, 335, 336, 63, 175, 248,
	13, 14, 15, 154, 137, -203, -203, -203, -148, 351,
	352, -207, -208, 122, 119, 30, -171, -171, -171, 352,
	122, -148, 355, 355, 355, 352, 352, 352, 7, 352,
	355, 352, 330, 330, 352, -241, 349, 349, 7, -315,
	-108, 303, 62, 224, -270, 352, 352, 355, -241, -112,
	139, 351, -112, -111, 351, 159, 159, -49, -146, 5,
	-49, -119, 103, -104, 99, -323, 336, -111, -183, -202,
	-230, -119, 356, 355, -238, -97, -119, -111, -111, 187,
	-192, 134, -102, 187, -111, -111, 134, -111, 134, -111,
	-111, -98, 234, -49, 351, -49, 351, -111, 234, -111,
	-119, 234, -38, -159, 127, -238, 355, 70, -166, 158,
	182, 123, 167, 243, 142, 7, -39, -199, 356, 351,
	-229, 332, -91, -233, -232, -159, -87, 122, 280, 199,
	274, -150, 188, -162, 64, 352, -194, -152, -143, -225,
	352, -202, -202, -203, -203, 122, 351, -202, -213, 26,
	26, 352, -148, 352, 355, -198, -202, 352, -211, 100,
	-202, 289, 352, 319, -135, -135, -135, 5, 178, 132,
	177, -174, 177, -174, -174, 7, -306, -111, 351, 323,
	-134, 352, -259, -241, -202, -207, -202, -259, -241, -203,
	-203, -203, -203, -203, -203, -203, -203, -203, -203, -203,
	-203, -203, -203, -203, -203, -203, -203, -203, 94, 187,
	193, -203, 355, -148, 352, -208, -207, -202, -202, -241,
	352, 352, 352, -148, -202, -202, -202, 352, 7, 350,
	7, 7, 352, -130, 138, -193, -282, 351, -112, -137,
	-231, -111, -293, 351, -290, -291, -117, 351, -279, -202,
	351, 351, 351, -133, 351, -111, -105, 164, -323, -269,
	-296, 198, 352, -96, -266, -111, 293, 293, 103, 187,
	314, -95, 97, 260, -178, 103, -100, 103, -100, 293,
	-177, 65, -148, -148, 293, 293, 352, -210, 129, 44,
	-232, 158, 158, -232, -166, 158, -164, 204, -164, -164,
	-311, 351, 350, -229, -266, 349, 357, -148, -228, -227,
	30, -111, 202, 352, -210, -273, 290, 351, -186, 351,
	197, -49, -162, 336, 26, 26, -202, -213, 352, -202,
	-202, 352, -202, 350, -202, 5, -202, 352, 352, 352,
	352, -307, -111, -202, 352, 352, 352, -208, 122, 94,
	193, 351, -202, 352, 352, 355, 352, 352, 352, 350,
	350, 137, -283, 65, -284, 57, 110, 69, 187, 189,
	305, 219, 54, 88, 228, -137, 351, 352, 355, -118,
	-155, 57, -118, -202, 351, -138, 352, -137, -138, -128,
	30, -137, 197, -106, 163, -323, -269, -103, -96, -111,
	-111, -192, 103, 187, 88, 187, 88, 81, 301, -111,
	-111, -119, -111, -111, 352, 352, -111, -119, -302, 324,
	-202, -148, -232, -232, -165, 312, 197, 158, -232, 350,
	352, -312, 7, -229, -228, 7, -201, -200, 120, 185,
	352, -111, 351, -229, -302, -205, -117, -111, -86, -85,
	5, 95, -138, 65, -158, -91, 351, -202, -202, 352,
	352, -135, -301, 210, 352, -203, 122, 351, -213, 352,
	-202, 208, -111, -266, -111, 110, 134, 189, 159, 351,
	-203, -119, 352, -137, -191, -320, 68, 277, -231, -96,
	-266, -96, 352, -148, 352, 352, 352, 352, -49, 352,
	-119, -323, -269, -104, -192, 189, 189, -202, -241, -100,
	-100, 293, 293, 293, 293, -303, -304, -111, -165, 351,
	-202, -232, -199, 352, 355, -228, 350, 355, 358, 336,
	-229, 351, -138, -227, 351, 355, 352, -88, 336, 307,
	188, 352, -111, 352, -135, 44, -203, -213, 352, 352,
	-111, -284, -112, 187, -202, -113, 351, -191, 352, -130,
	351, -118, -135, 228, -130, -191, 351, -269, -105, -99,
	57, -111, -111, 351, 351, 355, 30, -138, -229, 7,
	-200, -266, 349, -228, -138, 352, -148, -85, 5, 260,
	-194, -308, 223, 247, -148, 352, 351, 103, 352, -287,
	176, -111, -130, -191, -138, -96, 352, -119, -130, -137,
	-106, -94, 312, -266, -148, -148, -304, -306, 352, -227,
	7, 352, -135, -151, 352, -309, -310, 36, 302, 72,
	-202, -309, -138, 110, -285, -288, -286, 197, 123, 209,
	265, 352, -130, 352, -133, 352, -202, 352, 352, 350,
	352, -194, -310, 216, 118, 246, 216, 118, 352, -111,
	-286, 197, -288, 197, 307, 91, -287, -191, 26, -101,
	48, 239, -289, 184, 239, 48, 260, -289, -285, -130,
	-310, 20, 189, 88,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 33, 34, 35, 36, 0, 0, 104, 105,
	0, 108, 109, 110, 111, 112, 113, 0, 0, 0,
	0, 0, 496, 0, 0, 0, 0, 0, 0, 0,
	468, -2, 0, 0, 185, 186, 187, 188, 189, 0,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 412, 0,
	412, 412, 416, 498, 37, 38, 39, 40, 41, 44,
	45, 46, 47, 42, 43, 0, 377, 495, -2, 506,
	0, 0, 0, 0, 0, 0, 504, 482, 0, 0,
	-2, 0, 166, 0, 1043, 971, 977, 978, 1002, 1003,
	1004, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
	1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130,
	1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
	1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
	1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
	1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
	1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230,
	0, 0, 973, 1043, 160, 1102, 162, 0, 0, 0,
	0, 115, 116, 117, 118, 119, 0, 0, 0, 0,
	0, 159, 136, 0, 143, 144, 145, 146, 147, 148,
	149, 150, 138, 139, 140, 141, 142, 0, 169, 170,
	171, 173, 174, 175, 176, 177, 178, 179, 296, 1016,
	1017, 1018, 1019, 1020, 1231, 1232, 1233, 1234, 1235, 1236,
	1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246,
	1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256,
	1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266,
	1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276,
	1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286,
	1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296,
	1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306,
	1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316,
	1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326,
	0, 156, 0, 0, 405, 1129, 418, 403, 182, 0,
	256, 257, 258, 259, 260, 0, -2, 1031, 1217, 1135,
	194, 1156, 202, 1223, 0, 205, 210, -2, 132, 420,
	411, 420, 408, 409, 410, 413, 0, 0, 497, 0,
	0, 0, 0, 0, 0, 0, 376, -2, 478, 479,
	-2, 0, 501, 501, 501, 0, 0, 479, 0, 184,
	213, 214, 215, 224, 225, 226, 227, 366, 0, 368,
	234, 235, 998, 0, 1012, 1013, 1014, 1015, 254, 0,
	0, 0, 257, 0, 267, 298, 0, 0, 0, 0,
	0, 274, 0, 277, 0, 0, 282, 286, 0, 0,
	292, 0, 0, 0, 0, 0, 0, 487, 1108, 490,
	984, 488, 0, 0, 503, 502, 0, 483, 585, 0,
	534, 0, 2, 0, 0, 167, 168, 981, 979, 980,
	0, 0, 0, 0, 974, 950, 948, 949, 161, 163,
	0, 0, 0, 0, 591, 120, 1199, 79, 1199, 969,
	976, 79, 1199, 130, 79, 1199, 128, 1199, 157, 0,
	0, 151, 153, 1229, 0, 0, 301, 693, 0, 0,
	0, 0, 0, 0, 785, 787, 1191, 1217, 0, 789,
	790, 0, 792, 794, 795, 0, 798, 799, 941, 973,
	987, 988, 989, 990, 0, 0, 993, 0, 995, 996,
	997, 841, 808, -2, -2, 985, 621, 622, 623, 624,
	-2, 1231, 812, 814, 816, 818, 819, 820, 821, 0,
	1175, 1192, 1193, 1213, 1214, 1222, 1226, 1227, 1199, 1210,
	1200, 1187, 1197, 1208, 1049, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1011, 655, 656, 661, 662, 664, 0, 0, 404, 0,
	417, 183, 261, 190, 0, 0, 193, 1186, 1156, 196,
	421, 423, 424, 425, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 208, 133, 0, 406, 419, 407, 0,
	415, 79, 589, 106, 107, 349, 1199, 494, 349, 1006,
	494, 1199, -2, 0, 474, 515, 516, 0, 0, 0,
	0, 499, 500, 0, 0, 0, 470, 471, 367, 1000,
	999, 255, 262, 88, 89, 0, 275, 283, 0, 0,
	300, 0, 0, 0, 0, 0, 0, 276, 284, 496,
	0, 0, 0, 288, 289, 0, 0, 0, 0, 0,
	1199, 585, 0, 1199, 0, 0, 1199, 0, 489, 0,
	0, 537, 961, 965, 966, 537, 535, 586, 587, 0,
	0, 958, 956, 957, 576, 972, 0, 946, 947, 576,
	90, 101, 0, 0, 967, 951, 595, 0, 445, 0,
	0, 592, 0, 0, 122, 0, 77, 78, 0, 0,
	124, 0, 0, 126, 0, 0, 0, 897, 496, 0,
	0, 172, 0, 0, 0, 0, 876, 877, 878, 879,
	880, 881, 884, 885, 882, 883, 886, 887, 888, 0,
	0, 0, 889, 890, 891, 0, 0, 893, 0, 895,
	0, 0, 0, 0, 0, 0, 955, 0, 0, 892,
	698, 699, 700, 722, 723, 0, 786, 952, 945, 788,
	0, -2, 897, 0, 791, 796, 797, 0, 0, 940,
	-2, 0, 992, 0, 690, 843, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 920, 926, 0, 0,
	0, 0, 0, 0, 0, 0, 640, 658, 669, 666,
	665, 642, 0, 641, 639, 0, 643, 0, 0, 0,
	496, 0, 899, 603, 604, 605, 606, 607, 690, 610,
	611, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	638, 652, 0, 627, 627, 627, 644, 645, 653, 654,
	659, 660, 671, 672, 674, 676, 670, 670, 670, 667,
	668, 0, 191, 0, 0, 0, 197, 0, 0, 426,
	221, 222, 223, 428, 429, 203, 228, 229, 230, 231,
	232, 233, 0, 198, 200, 211, 199, 201, 204, 0,
	134, 414, 369, 0, 307, 0, 0, 372, 493, 0,
	0, 0, 1199, 1005, 433, 0, 477, 513, 514, 517,
	521, 522, 525, 528, 529, 519, 693, 484, 485, 486,
	507, 508, 387, 0, 0, 263, 264, 265, 266, 268,
	0, 297, 269, 270, 271, 272, 273, 278, 280, 496,
	285, 287, 290, 291, 0, 0, 0, 48, 400, 58,
	0, 400, 400, 0, 0, 0, 0, 54, 0, 0,
	56, 0, 0, 0, 0, 0, 491, 0, 0, 595,
	0, 0, 0, 964, 595, 0, 0, 960, 93, 0,
	982, 100, 0, 0, 0, 0, 457, 0, 457, 447,
	0, 0, 0, 457, 460, 461, 463, 464, 0, 0,
	593, 121, 970, 79, 975, 131, 79, 79, 129, 158,
	0, 137, 152, 0, 694, 599, 600, 646, 647, 648,
	649, 650, 695, 696, 0, 701, 702, 703, 704, 705,
	706, 707, 708, 709, 710, -2, -2, -2, 714, 715,
	716, -2, -2, -2, 720, 721, -2, 894, 896, 0,
	955, 0, -2, 0, -2, -2, -2, -2, 734, 0,
	736, 739, 741, 743, 0, 0, 0, 0, 954, 753,
	932, 0, 0, 873, 874, 875, 738, 0, 0, 953,
	944, 0, 0, -2, 793, 0, 0, 0, 903, 904,
	939, 935, 0, 800, 506, 0, 0, 0, 0, 0,
	1001, 677, 678, 679, 680, 681, 682, 691, 851, 0,
	0, 0, 813, 815, 817, 0, 0, 0, 0, 907,
	-2, -2, -2, -2, -2, -2, -2, 0, 0, 897,
	917, 0, 0, 756, 0, 0, 0, 0, 1217, 0,
	897, 925, 0, 0, 0, 0, 0, 897, 0, 931,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 155, 0, 596, 598, 608, 0, 0,
	192, 0, 422, 427, 0, 218, 0, 220, 0, 135,
	590, 0, 0, 306, 981, 308, 310, 311, 312, 313,
	1006, 0, 1006, 0, 339, 0, 0, 0, 0, 0,
	370, 0, 0, 0, 0, 435, 441, 0, 0, 523,
	0, 0, 520, 526, 527, 0, 510, 385, 386, 0,
	0, 299, 180, 279, 281, 293, 294, 576, 0, 0,
	0, 0, 399, 60, 1199, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 53,
	0, 0, 0, 0, 0, 0, 496, 983, 531, 962,
	576, 538, 496, 548, 585, 562, 553, 0, 963, 531,
	588, 959, 100, 0, 0, 87, 0, 91, 102, 0,
	968, 114, 0, 594, 442, 457, 0, 0, 449, 446,
	444, 595, 0, 0, 0, 0, 123, 125, 127, 898,
	164, 0, -2, -2, 0, 0, 0, 754, -2, 735,
	737, 740, 742, 744, 0, 0, 0, 0, 0, 0,
	0, 755, 0, 0, 942, 945, -2, 898, 901, 902,
	0, 0, 936, 0, 0, 0, 0, 505, 506, 506,
	506, 806, 0, 0, 0, 0, 0, 0, 807, 0,
	0, 0, 0, 0, 0, 824, 0, 825, 826, 0,
	0, 827, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 759, 760, 761, 0, 0,
	828, 923, 924, 0, 0, 0, 0, 0, 0, 833,
	0, 930, 0, 0, 0, 837, 838, 839, 0, 625,
	0, 651, 673, 675, 663, 900, 0, 0, 0, 165,
	195, 216, 217, 219, 212, 315, 348, 0, 321, 0,
	1006, 0, 0, 0, 0, 0, 0, 304, 349, 371,
	373, 0, 0, 437, 441, 0, 440, 494, 0, 0,
	509, 387, 0, 0, 295, 59, 389, 0, 0, 0,
	62, 1199, 70, 0, 402, 71, 1199, 79, 1199, 79,
	72, 49, 400, 50, 0, 51, 0, 397, 0, 388,
	395, 0, 0, 533, 0, 536, 0, 0, 0, 0,
	0, 582, 582, 582, 580, 556, 0, 562, 0, 0,
	574, 0, -2, 553, 0, 533, 86, 0, 0, 0,
	103, 455, 456, 443, 454, 0, 457, 462, 459, 465,
	0, 697, -2, 0, 0, 0, 0, -2, 0, 0,
	0, 933, 0, 868, 0, 0, 944, -2, 905, 934,
	938, 0, 801, 0, 0, 0, 0, 994, 683, 684,
	685, 686, 687, 688, 689, 0, 849, 850, 854, 0,
	0, 811, 0, 0, 906, 916, 918, 757, 758, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, -2,
	-2, -2, 775, 776, 777, -2, -2, -2, 0, 0,
	0, 919, 0, 0, 871, 921, 922, 927, 928, 0,
	830, 831, 832, 929, 0, 0, 0, 657, 0, 601,
	0, 0, 609, 302, 0, 309, 319, 0, 0, 0,
	378, 384, 384, 0, 809, 810, 0, 0, 338, 0,
	0, 0, 307, 0, 0, 0, 439, 441, 0, 432,
	433, 518, 524, 511, 387, 181, 0, 0, 0, 0,
	80, 64, 0, 0, 0, 0, 68, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 492, 845, 0, 0,
	539, 0, 0, 0, 0, 0, 577, 581, 578, 579,
	0, 0, 562, 574, 545, 0, 0, 0, 552, 573,
	0, 572, 561, -2, 845, 92, 0, 0, 0, 0,
	0, 448, 458, 0, 0, 0, -2, 0, 747, -2,
	-2, 867, 898, 943, 937, 991, 506, 802, 804, 805,
	692, 856, 853, 0, 840, 822, 823, 915, 0, 0,
	0, 0, 898, 870, 829, 0, 835, 836, 626, 602,
	597, 0, 320, 0, 323, 0, 0, 0, 0, 329,
	330, 0, 0, 0, 0, 0, 0, 347, 0, 387,
	986, 0, 387, 0, 0, 0, 340, 0, 0, 0,
	0, 0, 0, 430, 441, 0, 434, 435, 512, 391,
	393, 61, 0, 0, 76, 0, 0, 401, 0, 79,
	79, 390, 0, 0, 0, 0, 398, 396, 480, 0,
	532, 530, 564, 0, 566, 0, 0, 0, 568, 548,
	557, 0, 559, 574, 550, 0, 0, 543, 0, 542,
	562, 570, 0, 0, 481, 575, 0, 0, 0, 97,
	95, 0, 0, 0, 466, 467, 0, -2, -2, 748,
	869, 0, 506, 0, 842, -2, 0, 0, 0, 872,
	0, 0, 0, 324, 325, 1006, 0, 328, 331, 0,
	333, 1008, 347, 0, 315, 0, 344, 345, 379, 380,
	383, 381, 384, 506, 337, 342, 0, 315, 305, 347,
	0, 0, 436, 437, 63, 65, 66, 75, 83, 67,
	73, 0, 0, 0, 0, 844, 846, 0, 565, 0,
	584, 567, 562, 558, 0, 555, 546, 0, 547, 0,
	574, 0, 0, 554, 0, 0, 99, 96, 0, 0,
	451, 595, 453, 803, 859, 0, -2, 0, 783, 834,
	0, 322, 326, 0, 0, 353, 0, 315, 347, 341,
	0, 387, 0, 0, 303, 315, 0, 438, 439, 85,
	0, 392, 394, 0, 0, 0, 0, 0, 0, 560,
	544, 540, 0, 551, 0, 571, 506, 98, 94, 0,
	452, 0, 0, 0, 855, 784, 0, 0, 332, 358,
	0, 0, 335, 315, 0, 382, 801, 349, 374, 0,
	431, 69, 0, 82, 0, 0, 847, 848, 583, 549,
	0, 569, 0, 595, 852, 857, 860, -2, 1159, 1040,
	0, 858, 0, 0, 334, 354, 355, 0, 350, 351,
	352, 1007, 336, 346, 353, 347, 84, 55, 57, 541,
	0, 450, 0, 862, 863, 864, 865, 866, 318, 327,
	356, 0, 357, 0, 0, 0, 358, 315, 0, 314,
	316, 317, 359, 0, 362, 363, 0, 360, 343, 375,
	861, 361, 364, 365,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 340, 3, 346, 341, 3,
	351, 352, 344, 342, 355, 343, 353, 345, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 359, 354,
	334, 336, 335, 3, 356, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 349, 3, 350, 347, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 357, 339, 358, 337,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 338, 57677, 348, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:849
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:855
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:861
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 32:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 48:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:943
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:949
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:955
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:961
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:967
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:971
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:977
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:981
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:987
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1013
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1027
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1050
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1060
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = nil
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = DropCascade
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = DropRestrict
		}
	case 79:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = DropDefault
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 81:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1122
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 83:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1123
		{
		}
	case 84:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1126
		{
			return unimplemented(sqllex, "alter using")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1127
		{
		}
	case 86:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 93:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1171
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 95:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.str = ""
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1200
		{
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1223
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1229
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1245
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1255
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1256
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1257
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1258
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1370
		{ /* SKIP DOC */
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 159:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1486
		{
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1555
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1566
		{ /* SKIP DOC */
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1567
		{ /* SKIP DOC */
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1568
		{
			return unimplemented(sqllex, "set local")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1633
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1636
		{
			return unimplemented(sqllex, "set from current")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1643
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1647
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1653
		{
		}
	case 209:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1655
		{
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = Low
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = Normal
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = High
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1755
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.str = "client_encoding"
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1931
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1935
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1939
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1963
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1967
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1971
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1983
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2005
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2061
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2076
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2080
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = DropDefault
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2090
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2253
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2276
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2295
		{
			return unimplemented(sqllex, "match full")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2296
		{
			return unimplemented(sqllex, "match partial")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2297
		{
			return unimplemented(sqllex, "match simple")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2298
		{
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2304
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2305
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2306
		{
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2307
		{
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2308
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2311
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2314
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2317
		{
			return unimplemented(sqllex, "no action")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2320
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2321
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2322
		{
			return unimplemented(sqllex, "action set null")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2323
		{
			return unimplemented(sqllex, "action set default")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2355
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2359
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 373:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.union.val = true
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = false
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2430
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2431
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2434
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2435
		{
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = Ascending
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = Descending
		}
	case 387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 388:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2459
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2475
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2477
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = true
		}
	case 400:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = false
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2510
		{
		}
	case 402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2511
		{
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2522
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2551
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2560
		{
		}
	case 412:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2561
		{
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.str = ""
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.str = ""
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2607
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = ReadOnly
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = ReadWrite
		}
	case 430:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2663
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 433:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.str = ""
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.str = ""
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.str = ""
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.str = ""
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2715
		{
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2716
		{
		}
	case 442:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2758
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2782
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2786
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2794
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 458:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2816
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2817
		{
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3044
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3045
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3046
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3049
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3050
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3053
		{
			return unimplemented(sqllex, "cte")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3056
		{
		}
	case 494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3057
		{
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3060
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3061
		{
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3064
		{
		}
	case 498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3065
		{
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = true
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = false
		}
	case 501:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = false
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = true
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3088
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3089
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3136
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3156
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3208
		{
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3209
		{
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3212
		{
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3213
		{
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3267
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &From{}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3303
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3321
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3348
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 549:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3365
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = nil
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3423
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3429
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = true
		}
	case 562:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = false
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.str = astFullJoin
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.str = astLeftJoin
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.str = astRightJoin
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.str = astInnerJoin
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3540
		{
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3541
		{
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3580
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3627
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3640
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3641
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3655
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3664
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3727
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3736
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = nil
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3769
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3801
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3897
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3929
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3968
		{
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3969
		{
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = year
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4005
		{
			sqlVAL.union.val = month
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = day
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = hour
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = minute
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = month
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = hour
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = minute
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = minute
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = nil
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = second
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4064
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4099
		{
			return unimplemented(sqllex, "at tz")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4267
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4333
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4506
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4552
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4559
		{
			return unimplemented(sqllex, "variadic")
		}
	case 803:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4560
		{
			return unimplemented(sqllex, "variadic")
		}
	case 804:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4583
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4590
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4599
		{
			return unimplemented(sqllex, "func_application")
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4600
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4604
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4606
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4610
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4614
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4618
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4622
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4626
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4629
		{
			return unimplemented(sqllex, "current role")
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4630
		{
			return unimplemented(sqllex, "current user")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4631
		{
			return unimplemented(sqllex, "session user")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4632
		{
			return unimplemented(sqllex, "user")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4638
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4642
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4661
		{
			return unimplemented(sqllex, "treat")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4705
		{
			return unimplemented(sqllex, "within group")
		}
	case 841:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4706
		{
		}
	case 842:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 843:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = Window(nil)
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4741
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4749
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4753
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4757
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 852:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4764
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.str = ""
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4803
		{
			return unimplemented(sqllex, "frame range")
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4804
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4805
		{
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4808
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 861:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4809
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4815
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4816
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4817
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4818
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4819
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 867:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4830
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4834
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4844
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = Any
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = Some
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = All
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = Plus
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = Minus
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = Mult
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = Div
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = FloorDiv
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = Mod
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = Bitand
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = Bitor
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = Pow
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = Bitxor
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = LT
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = GT
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = EQ
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = LE
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = GE
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = NE
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = Like
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = NotLike
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = ILike
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = NotILike
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4920
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 915:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 926:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 937:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 941:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5125
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5129
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5136
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5148
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5154
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5158
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5168
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5183
		{
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5184
		{
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5212
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5218
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5222
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5228
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5237
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5245
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5253
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5257
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5273
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5288
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5292
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5298
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5302
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5343
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 984:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5346
		{
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5356
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5360
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5367
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5375
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5379
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5382
		{
			return unimplemented(sqllex, "func const")
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5384
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5388
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 994:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5391
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5393
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5397
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5401
		{
			sqlVAL.union.val = DNull
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5412
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5418
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5453
		{
			sqlVAL.str = ""
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5459
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5463
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
