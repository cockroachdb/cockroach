// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:47

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *TableNameWithIndex {
	tn := u.val.(TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() TableNameWithIndex {
	return u.val.(TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:498
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ACTION = lex.ACTION
const ADD = lex.ADD
const ALL = lex.ALL
const ALL_EXISTENCE = lex.ALL_EXISTENCE
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPLAIN = lex.EXPLAIN
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HELP = lex.HELP
const HIGH = lex.HIGH
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const INET = lex.INET
const INTERLEAVE = lex.INTERLEAVE
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const IS = lex.IS
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const ON = lex.ON
const ONLY = lex.ONLY
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SOME_EXISTENCE = lex.SOME_EXISTENCE
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALL_EXISTENCE",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SOME_EXISTENCE",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6957

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	381, 54,
	-2, 734,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	152, 583,
	-2, 0,
	-1, 54,
	97, 734,
	156, 734,
	331, 734,
	332, 734,
	-2, 0,
	-1, 64,
	1, 696,
	215, 696,
	261, 696,
	376, 696,
	378, 696,
	380, 696,
	381, 696,
	-2, 709,
	-1, 97,
	4, 736,
	20, 736,
	21, 736,
	24, 736,
	29, 736,
	34, 736,
	35, 736,
	36, 736,
	37, 736,
	38, 736,
	39, 736,
	40, 736,
	41, 736,
	42, 736,
	43, 736,
	45, 736,
	46, 736,
	47, 736,
	48, 736,
	49, 736,
	52, 736,
	53, 736,
	54, 736,
	56, 736,
	57, 736,
	61, 736,
	62, 736,
	63, 736,
	65, 736,
	66, 736,
	67, 736,
	68, 736,
	70, 736,
	72, 736,
	73, 736,
	76, 736,
	77, 736,
	78, 736,
	86, 736,
	87, 736,
	88, 736,
	89, 736,
	90, 736,
	91, 736,
	92, 736,
	93, 736,
	95, 736,
	97, 736,
	99, 736,
	102, 736,
	103, 736,
	105, 736,
	109, 736,
	110, 736,
	111, 736,
	112, 736,
	113, 736,
	114, 736,
	115, 736,
	123, 736,
	124, 736,
	125, 736,
	126, 736,
	127, 736,
	129, 736,
	131, 736,
	136, 736,
	137, 736,
	139, 736,
	142, 736,
	143, 736,
	144, 736,
	145, 736,
	146, 736,
	147, 736,
	150, 736,
	151, 736,
	153, 736,
	156, 736,
	157, 736,
	158, 736,
	159, 736,
	160, 736,
	161, 736,
	162, 736,
	163, 736,
	165, 736,
	168, 736,
	169, 736,
	170, 736,
	172, 736,
	173, 736,
	174, 736,
	175, 736,
	176, 736,
	178, 736,
	179, 736,
	181, 736,
	183, 736,
	184, 736,
	187, 736,
	188, 736,
	191, 736,
	193, 736,
	195, 736,
	196, 736,
	197, 736,
	198, 736,
	199, 736,
	201, 736,
	202, 736,
	203, 736,
	204, 736,
	208, 736,
	209, 736,
	210, 736,
	211, 736,
	212, 736,
	214, 736,
	216, 736,
	217, 736,
	220, 736,
	221, 736,
	223, 736,
	225, 736,
	226, 736,
	227, 736,
	228, 736,
	229, 736,
	230, 736,
	231, 736,
	233, 736,
	234, 736,
	235, 736,
	236, 736,
	237, 736,
	239, 736,
	240, 736,
	241, 736,
	242, 736,
	243, 736,
	244, 736,
	245, 736,
	246, 736,
	248, 736,
	249, 736,
	250, 736,
	251, 736,
	252, 736,
	254, 736,
	255, 736,
	256, 736,
	257, 736,
	258, 736,
	259, 736,
	260, 736,
	262, 736,
	264, 736,
	265, 736,
	266, 736,
	267, 736,
	269, 736,
	270, 736,
	271, 736,
	272, 736,
	273, 736,
	275, 736,
	276, 736,
	277, 736,
	278, 736,
	279, 736,
	281, 736,
	282, 736,
	283, 736,
	284, 736,
	286, 736,
	287, 736,
	288, 736,
	289, 736,
	292, 736,
	293, 736,
	294, 736,
	295, 736,
	296, 736,
	297, 736,
	298, 736,
	299, 736,
	300, 736,
	301, 736,
	303, 736,
	305, 736,
	306, 736,
	307, 736,
	308, 736,
	309, 736,
	310, 736,
	311, 736,
	312, 736,
	314, 736,
	315, 736,
	316, 736,
	319, 736,
	320, 736,
	321, 736,
	322, 736,
	324, 736,
	325, 736,
	326, 736,
	327, 736,
	330, 736,
	331, 736,
	332, 736,
	333, 736,
	335, 736,
	337, 736,
	338, 736,
	339, 736,
	340, 736,
	341, 736,
	342, 736,
	345, 736,
	350, 736,
	351, 736,
	352, 736,
	353, 736,
	354, 736,
	-2, 0,
	-1, 115,
	1, 699,
	215, 699,
	261, 699,
	376, 699,
	378, 699,
	380, 699,
	381, 699,
	-2, 708,
	-1, 120,
	1, 634,
	168, 634,
	239, 634,
	243, 634,
	380, 634,
	381, 634,
	-2, 0,
	-1, 122,
	1, 634,
	380, 634,
	381, 634,
	-2, 0,
	-1, 123,
	1, 634,
	380, 634,
	381, 634,
	-2, 0,
	-1, 124,
	1, 638,
	380, 638,
	381, 638,
	-2, 0,
	-1, 146,
	4, 742,
	5, 742,
	6, 742,
	7, 742,
	8, 742,
	9, 742,
	20, 742,
	21, 742,
	24, 742,
	29, 742,
	30, 742,
	34, 742,
	35, 742,
	36, 742,
	37, 742,
	38, 742,
	39, 742,
	40, 742,
	41, 742,
	42, 742,
	43, 742,
	45, 742,
	46, 742,
	47, 742,
	48, 742,
	49, 742,
	50, 742,
	51, 742,
	52, 742,
	53, 742,
	54, 742,
	56, 742,
	57, 742,
	59, 742,
	61, 742,
	62, 742,
	63, 742,
	65, 742,
	66, 742,
	67, 742,
	68, 742,
	70, 742,
	72, 742,
	73, 742,
	75, 742,
	76, 742,
	77, 742,
	78, 742,
	80, 742,
	81, 742,
	82, 742,
	84, 742,
	85, 742,
	86, 742,
	87, 742,
	88, 742,
	89, 742,
	90, 742,
	91, 742,
	92, 742,
	93, 742,
	94, 742,
	95, 742,
	97, 742,
	99, 742,
	102, 742,
	103, 742,
	105, 742,
	109, 742,
	110, 742,
	111, 742,
	112, 742,
	113, 742,
	114, 742,
	115, 742,
	116, 742,
	117, 742,
	123, 742,
	124, 742,
	125, 742,
	126, 742,
	127, 742,
	129, 742,
	131, 742,
	134, 742,
	136, 742,
	137, 742,
	139, 742,
	142, 742,
	143, 742,
	144, 742,
	145, 742,
	146, 742,
	147, 742,
	148, 742,
	150, 742,
	151, 742,
	153, 742,
	155, 742,
	156, 742,
	157, 742,
	158, 742,
	159, 742,
	160, 742,
	161, 742,
	162, 742,
	163, 742,
	165, 742,
	167, 742,
	168, 742,
	169, 742,
	170, 742,
	171, 742,
	172, 742,
	173, 742,
	174, 742,
	175, 742,
	176, 742,
	178, 742,
	179, 742,
	181, 742,
	182, 742,
	183, 742,
	184, 742,
	185, 742,
	187, 742,
	188, 742,
	191, 742,
	193, 742,
	194, 742,
	195, 742,
	196, 742,
	197, 742,
	198, 742,
	199, 742,
	200, 742,
	201, 742,
	202, 742,
	203, 742,
	204, 742,
	205, 742,
	207, 742,
	208, 742,
	209, 742,
	210, 742,
	211, 742,
	212, 742,
	214, 742,
	217, 742,
	220, 742,
	221, 742,
	222, 742,
	223, 742,
	224, 742,
	225, 742,
	226, 742,
	227, 742,
	228, 742,
	229, 742,
	230, 742,
	231, 742,
	233, 742,
	234, 742,
	235, 742,
	236, 742,
	237, 742,
	239, 742,
	240, 742,
	241, 742,
	242, 742,
	243, 742,
	244, 742,
	245, 742,
	246, 742,
	248, 742,
	249, 742,
	250, 742,
	251, 742,
	252, 742,
	254, 742,
	255, 742,
	256, 742,
	257, 742,
	258, 742,
	259, 742,
	260, 742,
	262, 742,
	263, 742,
	264, 742,
	265, 742,
	266, 742,
	267, 742,
	269, 742,
	270, 742,
	271, 742,
	272, 742,
	273, 742,
	275, 742,
	276, 742,
	277, 742,
	278, 742,
	279, 742,
	280, 742,
	281, 742,
	282, 742,
	283, 742,
	284, 742,
	285, 742,
	286, 742,
	287, 742,
	288, 742,
	289, 742,
	292, 742,
	293, 742,
	294, 742,
	295, 742,
	296, 742,
	297, 742,
	298, 742,
	299, 742,
	300, 742,
	301, 742,
	303, 742,
	305, 742,
	306, 742,
	307, 742,
	308, 742,
	309, 742,
	310, 742,
	311, 742,
	312, 742,
	314, 742,
	315, 742,
	316, 742,
	319, 742,
	320, 742,
	321, 742,
	322, 742,
	323, 742,
	324, 742,
	325, 742,
	326, 742,
	327, 742,
	330, 742,
	331, 742,
	332, 742,
	333, 742,
	334, 742,
	335, 742,
	337, 742,
	338, 742,
	339, 742,
	340, 742,
	341, 742,
	342, 742,
	345, 742,
	350, 742,
	351, 742,
	352, 742,
	353, 742,
	354, 742,
	355, 742,
	363, 742,
	368, 742,
	369, 742,
	370, 742,
	377, 742,
	383, 742,
	-2, 0,
	-1, 149,
	1, 54,
	381, 54,
	-2, 734,
	-1, 517,
	133, 1354,
	317, 1354,
	360, 1354,
	379, 1354,
	-2, 0,
	-1, 518,
	133, 1301,
	317, 1301,
	360, 1301,
	379, 1301,
	-2, 0,
	-1, 520,
	133, 1414,
	317, 1414,
	360, 1414,
	379, 1414,
	-2, 0,
	-1, 522,
	133, 1437,
	317, 1437,
	360, 1437,
	379, 1437,
	-2, 0,
	-1, 529,
	133, 1359,
	317, 1359,
	360, 1359,
	379, 1359,
	-2, 348,
	-1, 555,
	1, 426,
	376, 426,
	378, 426,
	380, 426,
	381, 426,
	-2, 0,
	-1, 556,
	1, 479,
	130, 479,
	376, 479,
	378, 479,
	380, 479,
	381, 479,
	-2, 0,
	-1, 562,
	1, 440,
	376, 440,
	378, 440,
	380, 440,
	381, 440,
	-2, 0,
	-1, 564,
	1, 444,
	376, 444,
	378, 444,
	380, 444,
	381, 444,
	-2, 0,
	-1, 567,
	1, 452,
	376, 452,
	378, 452,
	380, 452,
	381, 452,
	-2, 0,
	-1, 568,
	1, 457,
	376, 457,
	378, 457,
	380, 457,
	381, 457,
	-2, 0,
	-1, 571,
	1, 467,
	376, 467,
	378, 467,
	380, 467,
	381, 467,
	-2, 0,
	-1, 596,
	118, 744,
	130, 744,
	186, 744,
	213, 744,
	-2, 703,
	-1, 603,
	118, 743,
	130, 743,
	186, 743,
	213, 743,
	-2, 700,
	-1, 659,
	377, 1279,
	-2, 1272,
	-1, 660,
	377, 1280,
	-2, 1273,
	-1, 666,
	5, 928,
	377, 928,
	-2, 1489,
	-1, 691,
	5, 887,
	-2, 1458,
	-1, 692,
	5, 922,
	377, 922,
	-2, 1460,
	-1, 693,
	5, 897,
	-2, 1461,
	-1, 694,
	5, 896,
	-2, 1462,
	-1, 695,
	5, 922,
	377, 922,
	-2, 1465,
	-1, 696,
	5, 922,
	377, 922,
	-2, 1466,
	-1, 697,
	5, 923,
	-2, 1469,
	-1, 698,
	5, 879,
	-2, 1470,
	-1, 699,
	5, 879,
	-2, 1471,
	-1, 700,
	5, 904,
	-2, 1475,
	-1, 701,
	5, 889,
	-2, 1476,
	-1, 702,
	5, 890,
	-2, 1477,
	-1, 703,
	5, 880,
	-2, 1483,
	-1, 704,
	5, 881,
	-2, 1484,
	-1, 705,
	5, 882,
	-2, 1485,
	-1, 706,
	5, 883,
	-2, 1486,
	-1, 707,
	5, 884,
	-2, 1487,
	-1, 708,
	5, 885,
	-2, 1488,
	-1, 709,
	5, 879,
	-2, 1495,
	-1, 710,
	5, 888,
	-2, 1500,
	-1, 711,
	5, 886,
	-2, 1503,
	-1, 712,
	5, 920,
	377, 920,
	-2, 1505,
	-1, 713,
	5, 924,
	-2, 1508,
	-1, 714,
	5, 926,
	-2, 1509,
	-1, 715,
	5, 919,
	377, 919,
	-2, 1514,
	-1, 779,
	112, 503,
	-2, 833,
	-1, 910,
	229, 732,
	-2, 576,
	-1, 915,
	215, 1276,
	-2, 0,
	-1, 951,
	1, 225,
	376, 225,
	378, 225,
	380, 225,
	381, 225,
	-2, 707,
	-1, 954,
	4, 1513,
	10, 1513,
	11, 1513,
	13, 1513,
	14, 1513,
	15, 1513,
	16, 1513,
	17, 1513,
	18, 1513,
	20, 1513,
	21, 1513,
	23, 1513,
	24, 1513,
	27, 1513,
	29, 1513,
	31, 1513,
	34, 1513,
	35, 1513,
	36, 1513,
	37, 1513,
	38, 1513,
	39, 1513,
	40, 1513,
	41, 1513,
	42, 1513,
	43, 1513,
	45, 1513,
	46, 1513,
	47, 1513,
	48, 1513,
	49, 1513,
	52, 1513,
	53, 1513,
	54, 1513,
	56, 1513,
	57, 1513,
	58, 1513,
	61, 1513,
	62, 1513,
	63, 1513,
	64, 1513,
	65, 1513,
	66, 1513,
	67, 1513,
	68, 1513,
	70, 1513,
	71, 1513,
	72, 1513,
	73, 1513,
	75, 1513,
	76, 1513,
	77, 1513,
	78, 1513,
	86, 1513,
	87, 1513,
	88, 1513,
	89, 1513,
	90, 1513,
	91, 1513,
	92, 1513,
	93, 1513,
	95, 1513,
	97, 1513,
	99, 1513,
	102, 1513,
	103, 1513,
	105, 1513,
	109, 1513,
	110, 1513,
	111, 1513,
	112, 1513,
	113, 1513,
	114, 1513,
	115, 1513,
	119, 1513,
	120, 1513,
	121, 1513,
	122, 1513,
	123, 1513,
	124, 1513,
	125, 1513,
	126, 1513,
	127, 1513,
	128, 1513,
	129, 1513,
	131, 1513,
	134, 1513,
	136, 1513,
	137, 1513,
	139, 1513,
	142, 1513,
	143, 1513,
	144, 1513,
	145, 1513,
	146, 1513,
	147, 1513,
	148, 1513,
	149, 1513,
	150, 1513,
	151, 1513,
	153, 1513,
	155, 1513,
	156, 1513,
	157, 1513,
	158, 1513,
	159, 1513,
	160, 1513,
	161, 1513,
	162, 1513,
	163, 1513,
	165, 1513,
	167, 1513,
	168, 1513,
	169, 1513,
	170, 1513,
	171, 1513,
	172, 1513,
	173, 1513,
	174, 1513,
	175, 1513,
	176, 1513,
	178, 1513,
	179, 1513,
	181, 1513,
	182, 1513,
	183, 1513,
	184, 1513,
	185, 1513,
	187, 1513,
	188, 1513,
	191, 1513,
	192, 1513,
	193, 1513,
	195, 1513,
	196, 1513,
	197, 1513,
	198, 1513,
	199, 1513,
	200, 1513,
	201, 1513,
	202, 1513,
	203, 1513,
	204, 1513,
	208, 1513,
	209, 1513,
	210, 1513,
	211, 1513,
	212, 1513,
	214, 1513,
	217, 1513,
	218, 1513,
	220, 1513,
	221, 1513,
	223, 1513,
	225, 1513,
	226, 1513,
	227, 1513,
	228, 1513,
	229, 1513,
	230, 1513,
	231, 1513,
	233, 1513,
	234, 1513,
	235, 1513,
	236, 1513,
	237, 1513,
	239, 1513,
	240, 1513,
	241, 1513,
	242, 1513,
	243, 1513,
	244, 1513,
	245, 1513,
	246, 1513,
	248, 1513,
	249, 1513,
	250, 1513,
	251, 1513,
	252, 1513,
	253, 1513,
	254, 1513,
	255, 1513,
	256, 1513,
	257, 1513,
	258, 1513,
	259, 1513,
	260, 1513,
	262, 1513,
	263, 1513,
	264, 1513,
	265, 1513,
	266, 1513,
	267, 1513,
	268, 1513,
	269, 1513,
	270, 1513,
	271, 1513,
	272, 1513,
	273, 1513,
	275, 1513,
	276, 1513,
	277, 1513,
	278, 1513,
	279, 1513,
	281, 1513,
	282, 1513,
	283, 1513,
	284, 1513,
	285, 1513,
	286, 1513,
	287, 1513,
	288, 1513,
	289, 1513,
	291, 1513,
	292, 1513,
	293, 1513,
	294, 1513,
	295, 1513,
	296, 1513,
	297, 1513,
	298, 1513,
	299, 1513,
	300, 1513,
	301, 1513,
	303, 1513,
	305, 1513,
	306, 1513,
	307, 1513,
	308, 1513,
	309, 1513,
	310, 1513,
	311, 1513,
	312, 1513,
	314, 1513,
	315, 1513,
	316, 1513,
	319, 1513,
	320, 1513,
	321, 1513,
	322, 1513,
	324, 1513,
	325, 1513,
	326, 1513,
	327, 1513,
	330, 1513,
	331, 1513,
	332, 1513,
	333, 1513,
	335, 1513,
	337, 1513,
	338, 1513,
	339, 1513,
	340, 1513,
	341, 1513,
	342, 1513,
	345, 1513,
	350, 1513,
	351, 1513,
	352, 1513,
	353, 1513,
	354, 1513,
	355, 1513,
	356, 1513,
	358, 1513,
	359, 1513,
	360, 1513,
	361, 1513,
	362, 1513,
	363, 1513,
	365, 1513,
	366, 1513,
	367, 1513,
	368, 1513,
	369, 1513,
	370, 1513,
	371, 1513,
	372, 1513,
	373, 1513,
	375, 1513,
	378, 1513,
	379, 1513,
	382, 1513,
	383, 1513,
	-2, 0,
	-1, 970,
	133, 1414,
	317, 1414,
	360, 1414,
	379, 1414,
	-2, 0,
	-1, 987,
	133, 1437,
	317, 1437,
	360, 1437,
	379, 1437,
	-2, 0,
	-1, 988,
	168, 646,
	239, 646,
	243, 646,
	-2, 336,
	-1, 1056,
	118, 743,
	130, 743,
	186, 743,
	213, 743,
	-2, 704,
	-1, 1137,
	108, 709,
	118, 709,
	130, 709,
	164, 709,
	186, 709,
	213, 709,
	219, 709,
	328, 709,
	-2, 1058,
	-1, 1148,
	377, 1254,
	-2, 1242,
	-1, 1166,
	378, 1171,
	-2, 0,
	-1, 1190,
	168, 646,
	239, 646,
	243, 646,
	-2, 641,
	-1, 1218,
	378, 1171,
	-2, 0,
	-1, 1222,
	108, 709,
	118, 709,
	130, 709,
	164, 709,
	186, 709,
	213, 709,
	219, 709,
	328, 709,
	-2, 810,
	-1, 1369,
	168, 646,
	239, 646,
	243, 646,
	-2, 338,
	-1, 1477,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 963,
	-1, 1478,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 964,
	-1, 1479,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 965,
	-1, 1480,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 966,
	-1, 1481,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 967,
	-1, 1482,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 968,
	-1, 1483,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 969,
	-1, 1484,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 970,
	-1, 1493,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 979,
	-1, 1494,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 980,
	-1, 1495,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 981,
	-1, 1498,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 986,
	-1, 1504,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 988,
	-1, 1506,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 992,
	-1, 1507,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 993,
	-1, 1508,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 994,
	-1, 1509,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 995,
	-1, 1578,
	133, 1182,
	377, 1279,
	-2, 1272,
	-1, 1579,
	133, 1183,
	-2, 1454,
	-1, 1580,
	133, 1184,
	-2, 1358,
	-1, 1581,
	133, 1185,
	-2, 1319,
	-1, 1582,
	133, 1186,
	-2, 1336,
	-1, 1583,
	133, 1187,
	-2, 1357,
	-1, 1584,
	133, 1188,
	-2, 1411,
	-1, 1661,
	1, 811,
	75, 811,
	108, 811,
	118, 811,
	130, 811,
	134, 811,
	138, 811,
	140, 811,
	155, 811,
	164, 811,
	171, 811,
	182, 811,
	186, 811,
	200, 811,
	213, 811,
	215, 811,
	219, 811,
	261, 811,
	263, 811,
	328, 811,
	336, 811,
	347, 811,
	348, 811,
	357, 811,
	376, 811,
	378, 811,
	380, 811,
	381, 811,
	382, 811,
	-2, 810,
	-1, 1816,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 987,
	-1, 1817,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 989,
	-1, 1822,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 990,
	-1, 1840,
	224, 1142,
	-2, 1144,
	-1, 2017,
	229, 732,
	-2, 576,
	-1, 2076,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 991,
	-1, 2081,
	167, 0,
	-2, 1007,
	-1, 2090,
	224, 1143,
	-2, 1145,
	-1, 2132,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1035,
	-1, 2133,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1036,
	-1, 2134,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1037,
	-1, 2138,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1041,
	-1, 2139,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1042,
	-1, 2140,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1043,
	-1, 2280,
	167, 0,
	-2, 1008,
	-1, 2283,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1011,
	-1, 2284,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1013,
	-1, 2412,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1012,
	-1, 2413,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1014,
	-1, 2420,
	167, 0,
	-2, 1044,
	-1, 2497,
	167, 0,
	-2, 1045,
	-1, 2579,
	37, 0,
	148, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1457,
	-1, 2662,
	377, 1525,
	-2, 516,
}

const sqlPrivate = 57344

const sqlLast = 44072

var sqlAct = [...]int{

	660, 2647, 2659, 2378, 1240, 2660, 2645, 2628, 2377, 2587,
	2588, 2578, 2551, 1732, 2589, 1740, 2227, 2446, 1267, 2109,
	2388, 2502, 2054, 944, 658, 2577, 2238, 657, 2191, 1275,
	1810, 2348, 2267, 2334, 2262, 1310, 1521, 2260, 947, 186,
	2023, 1656, 904, 2021, 186, 1715, 2192, 787, 186, 1141,
	2426, 1729, 2029, 1238, 186, 1710, 2254, 1216, 1906, 186,
	186, 1955, 1934, 186, 1741, 802, 186, 1199, 471, 26,
	2314, 1270, 1269, 940, 186, 1714, 1942, 1665, 636, 650,
	1674, 2162, 1711, 1451, 1806, 1657, 1394, 453, 1704, 1905,
	1851, 1220, 612, 110, 991, 604, 1789, 1263, 1311, 1061,
	1456, 1607, 1144, 1533, 1228, 1534, 1230, 1518, 1200, 1390,
	1558, 63, 1542, 1434, 528, 1432, 990, 450, 769, 1176,
	1180, 1552, 1712, 789, 930, 952, 1734, 937, 1718, 1643,
	772, 1630, 1574, 1207, 628, 752, 115, 1132, 508, 525,
	1062, 186, 186, 1225, 1393, 177, 116, 110, 652, 186,
	1435, 1190, 1433, 1282, 486, 927, 182, 521, 750, 1189,
	2349, 549, 1066, 2176, 1839, 2379, 2177, 2675, 1290, 1290,
	1290, 2668, 186, 186, 792, 186, 186, 804, 2379, 2674,
	2667, 186, 186, 2668, 2668, 1733, 2624, 2623, 2622, 2604,
	1258, 1258, 1258, 2347, 2599, 2598, 2595, 2575, 1637, 1637,
	1258, 1300, 608, 1217, 2574, 500, 618, 603, 1300, 2546,
	2541, 2540, 785, 1766, 1258, 2402, 2039, 2536, 26, 2528,
	2038, 1258, 608, 2347, 2499, 2074, 2477, 2474, 1766, 609,
	2347, 1258, 2472, 2457, 2456, 1705, 2347, 1258, 2347, 1876,
	1877, 2434, 110, 1632, 2431, 1258, 2414, 597, 1258, 799,
	1766, 2373, 2368, 1705, 2346, 1637, 1637, 596, 2347, 2327,
	2165, 2282, 2253, 1258, 892, 1766, 1709, 2248, 653, 2172,
	2085, 1709, 2048, 2173, 1637, 2009, 2010, 1843, 1300, 1258,
	613, 1077, 1078, 1844, 1107, 1108, 1109, 1117, 1118, 1119,
	777, 781, 766, 1891, 1095, 1931, 1254, 1930, 1110, 1637,
	754, 1258, 1923, 1921, 2680, 1080, 1924, 1637, 1121, 1876,
	1877, 1920, 1894, 1895, 1896, 1637, 1919, 1776, 1765, 2676,
	1637, 1637, 1766, 1077, 1078, 2666, 2279, 1755, 1637, 1079,
	1737, 1637, 2656, 1708, 1636, 1099, 1303, 1709, 1637, 756,
	1304, 757, 1096, 2547, 1300, 2406, 2402, 1080, 2165, 1631,
	2064, 1663, 2145, 2087, 2010, 1809, 1787, 1882, 1372, 1194,
	1077, 1078, 1537, 1891, 1258, 1637, 1117, 1118, 1119, 890,
	972, 1079, 149, 2350, 969, 968, 146, 1288, 1291, 1291,
	1291, 967, 146, 896, 1080, 1850, 966, 1121, 965, 964,
	1102, 1103, 1104, 1105, 963, 962, 961, 960, 959, 1085,
	958, 1391, 957, 956, 955, 758, 148, 755, 1079, 1535,
	602, 601, 148, 600, 1099, 599, 595, 594, 593, 1114,
	1122, 1892, 186, 792, 186, 592, 186, 1882, 591, 186,
	588, 587, 586, 585, 611, 186, 581, 580, 1120, 1876,
	1877, 1085, 579, 147, 186, 186, 186, 186, 792, 147,
	547, 140, 546, 792, 545, 544, 1112, 543, 141, 542,
	541, 910, 540, 1100, 539, 2038, 1897, 1555, 538, 1102,
	1103, 1104, 1105, 537, 536, 1876, 1877, 535, 1085, 117,
	534, 186, 1571, 533, 532, 117, 531, 516, 1397, 1111,
	1003, 1892, 1631, 515, 514, 186, 513, 1893, 1114, 1122,
	1142, 1296, 1289, 1425, 512, 1100, 441, 1077, 1078, 419,
	146, 186, 412, 411, 169, 168, 167, 166, 165, 1556,
	164, 186, 163, 162, 1106, 161, 160, 159, 158, 157,
	156, 1080, 155, 154, 153, 1112, 908, 152, 913, 1101,
	148, 151, 1100, 150, 1221, 1876, 1877, 1241, 2651, 1569,
	2649, 1567, 792, 929, 2594, 1079, 1115, 1882, 933, 933,
	1565, 2576, 1094, 2562, 609, 2556, 1073, 1893, 2494, 934,
	2475, 1557, 1554, 2395, 2313, 2312, 953, 147, 903, 2407,
	2308, 1101, 2307, 186, 2300, 140, 2299, 2298, 2294, 2293,
	1006, 2292, 141, 1882, 1887, 1885, 1886, 1878, 1879, 1880,
	1881, 1883, 1884, 1106, 2291, 2285, 2259, 765, 2159, 973,
	2154, 2153, 2152, 1736, 2012, 2095, 1001, 2008, 1101, 1962,
	1958, 1892, 1928, 1925, 1913, 1085, 1113, 1904, 1875, 1091,
	1092, 1098, 1097, 1093, 1116, 1115, 1090, 1088, 1089, 1081,
	1082, 1083, 1084, 1086, 1087, 1872, 1871, 1869, 1856, 1559,
	1855, 1840, 1661, 2309, 1073, 1529, 1307, 1888, 1889, 1890,
	1145, 1072, 1135, 1882, 1887, 1885, 1886, 1878, 1879, 1880,
	1881, 1883, 1884, 901, 988, 2669, 1768, 2654, 985, 1088,
	1089, 1081, 1082, 1083, 1084, 1086, 1087, 1056, 1219, 1100,
	1077, 1078, 1057, 2636, 896, 1218, 2665, 1893, 2635, 1152,
	1274, 1052, 2111, 1077, 1078, 1113, 146, 2566, 2565, 2564,
	2531, 2523, 1004, 1116, 1080, 1090, 1088, 1089, 1081, 1082,
	1083, 1084, 1086, 1087, 2521, 2513, 2511, 1080, 2487, 1553,
	2486, 1523, 1077, 1078, 2443, 2394, 148, 2422, 1079, 2403,
	2382, 1876, 1877, 478, 2371, 2353, 609, 2305, 2236, 597,
	186, 1079, 186, 1771, 38, 1058, 1080, 1059, 2233, 596,
	2232, 2230, 1392, 1805, 2200, 1101, 1530, 41, 2199, 1069,
	1070, 1804, 2180, 147, 186, 186, 1074, 2168, 2080, 2052,
	1079, 140, 1998, 1989, 1975, 1974, 1099, 1960, 141, 1929,
	1903, 1865, 1864, 477, 1887, 1885, 1886, 1878, 1879, 1880,
	1881, 1883, 1884, 1861, 1836, 1831, 1148, 1181, 1085, 117,
	1184, 1648, 1619, 1563, 1266, 1178, 1179, 1198, 1214, 1205,
	1182, 1085, 479, 1197, 1188, 1077, 1078, 1174, 1203, 53,
	1185, 481, 54, 1878, 1879, 1880, 1881, 1883, 1884, 1975,
	1173, 1102, 1103, 1104, 1105, 1172, 1171, 1170, 1169, 1080,
	1085, 1168, 1167, 1250, 1166, 1165, 1164, 2505, 1570, 1882,
	1163, 110, 1162, 56, 1089, 1081, 1082, 1083, 1084, 1086,
	1087, 1948, 1100, 1079, 1145, 1161, 718, 1160, 1159, 1158,
	1157, 1156, 1149, 1136, 1135, 609, 1215, 984, 1193, 976,
	792, 186, 949, 2401, 2287, 2258, 2175, 804, 2171, 1842,
	1191, 1649, 2050, 186, 1223, 1880, 1881, 1883, 1884, 1133,
	1195, 1219, 1775, 2024, 1100, 2405, 186, 902, 1876, 1877,
	2404, 2398, 186, 1892, 186, 1568, 186, 1566, 1256, 622,
	186, 1241, 1273, 2178, 2408, 2040, 1564, 1555, 1186, 620,
	1705, 1221, 2219, 1187, 1055, 2212, 1265, 1050, 1101, 57,
	2001, 1000, 1994, 1927, 1926, 1774, 1815, 1429, 997, 1308,
	1154, 2055, 1259, 1271, 1993, 1797, 1244, 2427, 1733, 1378,
	2112, 186, 186, 1239, 1543, 1106, 118, 59, 792, 60,
	186, 425, 764, 186, 1847, 1177, 2652, 1044, 1279, 1556,
	1101, 2650, 2034, 146, 2187, 1236, 2559, 1791, 1759, 1893,
	480, 1364, 447, 93, 804, 422, 173, 2620, 2619, 186,
	1436, 1077, 1078, 1237, 186, 2535, 2361, 174, 2061, 186,
	186, 1769, 186, 148, 186, 1777, 186, 1045, 186, 1876,
	1877, 2468, 1894, 1895, 1896, 1080, 2663, 2466, 745, 186,
	929, 1557, 1554, 2465, 1139, 186, 186, 1257, 1081, 1082,
	1083, 1084, 1086, 1087, 186, 2464, 2221, 431, 1036, 1079,
	147, 1081, 1082, 1083, 1084, 1086, 1087, 2214, 140, 1398,
	2376, 1151, 2184, 1219, 2183, 141, 186, 1281, 1860, 1284,
	804, 175, 1859, 1891, 1858, 747, 505, 1090, 1088, 1089,
	1081, 1082, 1083, 1084, 1086, 1087, 117, 1885, 1886, 1878,
	1879, 1880, 1881, 1883, 1884, 1379, 484, 1857, 1818, 743,
	1382, 1381, 1758, 1391, 1388, 741, 432, 1305, 1700, 1559,
	738, 1695, 1366, 1399, 717, 1365, 110, 1306, 985, 1085,
	1231, 1690, 1730, 1232, 420, 998, 1505, 1192, 889, 1369,
	2534, 1623, 1622, 1466, 1395, 1465, 1383, 1882, 2051, 607,
	2225, 1413, 1422, 1403, 1423, 1053, 1077, 1078, 487, 1407,
	2226, 1408, 1438, 1409, 1406, 1410, 1520, 1411, 1898, 2005,
	1261, 176, 2448, 1520, 1204, 583, 1457, 1464, 999, 1231,
	1080, 492, 1232, 495, 1417, 1419, 1897, 488, 1087, 1402,
	1527, 1265, 2572, 186, 1285, 186, 1525, 421, 186, 1553,
	1385, 590, 1437, 597, 1079, 606, 597, 597, 1430, 186,
	1431, 1892, 1233, 1447, 1667, 1455, 1448, 1449, 804, 489,
	425, 186, 426, 2211, 1559, 186, 1543, 422, 186, 1076,
	2591, 1620, 186, 171, 897, 899, 186, 423, 1624, 2105,
	491, 2619, 804, 589, 186, 1317, 792, 609, 1540, 446,
	1231, 1538, 609, 1232, 186, 804, 590, 1675, 170, 186,
	608, 1233, 442, 173, 1030, 1528, 1387, 186, 665, 1531,
	2611, 1358, 1602, 172, 1085, 186, 1054, 1668, 983, 2031,
	1628, 1884, 2060, 1651, 1693, 2000, 186, 1893, 186, 2543,
	186, 434, 433, 186, 1386, 186, 1585, 186, 186, 1049,
	186, 792, 792, 1031, 1421, 792, 1686, 1689, 1650, 186,
	1679, 1681, 1293, 445, 2544, 1295, 974, 1559, 1697, 1298,
	1702, 2202, 978, 2592, 1654, 1754, 1991, 1701, 2638, 1592,
	1626, 1625, 1233, 1290, 1678, 1635, 609, 2342, 1100, 1753,
	1246, 1645, 1646, 1641, 174, 1242, 1317, 1317, 446, 620,
	2516, 1735, 1640, 1735, 1684, 1223, 739, 1667, 490, 1302,
	1671, 1206, 1691, 1986, 2102, 2062, 1666, 2032, 1043, 605,
	1750, 1083, 1084, 1086, 1087, 1035, 2343, 1888, 1889, 1890,
	1807, 1808, 2593, 1009, 1887, 1885, 1886, 1878, 1879, 1880,
	1881, 1883, 1884, 1175, 1367, 2524, 110, 1761, 804, 2449,
	749, 2215, 110, 748, 1747, 2268, 186, 933, 175, 933,
	1241, 1739, 445, 2031, 1101, 493, 2103, 1748, 2610, 1749,
	1210, 1756, 186, 186, 186, 1751, 186, 739, 953, 1424,
	1757, 1760, 483, 740, 1724, 1820, 421, 2418, 739, 1770,
	1677, 1213, 1519, 1125, 1126, 1127, 1128, 1129, 1234, 1692,
	2525, 413, 484, 1772, 1138, 186, 1516, 1208, 1526, 2379,
	2471, 426, 2067, 1788, 1147, 444, 422, 1182, 1211, 1185,
	1401, 2209, 1514, 1130, 1392, 1389, 423, 584, 1863, 1644,
	1179, 1178, 1247, 1229, 2269, 494, 1209, 2338, 1778, 2339,
	1005, 1780, 574, 1660, 1559, 447, 1794, 1234, 176, 2203,
	608, 1944, 2631, 1782, 487, 443, 1828, 110, 1502, 1075,
	617, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087,
	2341, 615, 1826, 574, 2609, 1783, 2069, 492, 2065, 2344,
	2274, 1676, 1792, 488, 1040, 2590, 440, 1781, 2639, 1017,
	1821, 617, 2618, 1291, 1796, 1801, 1800, 2616, 487, 1212,
	1139, 2387, 1803, 1510, 994, 1727, 435, 979, 982, 1545,
	171, 1511, 971, 1512, 444, 489, 720, 1517, 1234, 2004,
	1065, 492, 1577, 1577, 1590, 616, 575, 488, 1610, 1201,
	1201, 2508, 1614, 1615, 1617, 2459, 491, 719, 2186, 2141,
	173, 2458, 2303, 2101, 447, 2441, 1377, 1971, 2644, 2360,
	172, 1967, 1064, 1823, 443, 1041, 2359, 575, 1629, 489,
	1819, 2340, 2357, 1824, 1664, 1370, 2066, 1829, 414, 1500,
	1503, 1010, 1943, 2342, 1728, 995, 2335, 1280, 1272, 996,
	491, 1241, 1268, 186, 804, 609, 2552, 2333, 989, 186,
	186, 1849, 2337, 186, 1932, 1375, 1064, 1956, 186, 1938,
	1443, 186, 1416, 1373, 1846, 2629, 1499, 1252, 1376, 186,
	1011, 1042, 2343, 1008, 2655, 186, 186, 186, 179, 1922,
	1063, 186, 2239, 1251, 186, 906, 905, 1064, 2068, 1513,
	186, 186, 186, 186, 186, 2336, 1515, 576, 2389, 1060,
	415, 186, 1952, 792, 2142, 1248, 186, 1065, 1950, 1937,
	2143, 804, 1953, 2304, 490, 2442, 1910, 1911, 1912, 609,
	186, 2643, 2630, 1249, 1063, 1977, 1968, 2358, 576, 1957,
	186, 1210, 186, 2356, 186, 792, 792, 1444, 186, 1825,
	1976, 1992, 186, 1947, 2632, 1813, 1827, 186, 1945, 186,
	1933, 1951, 1213, 1639, 1638, 1063, 186, 994, 490, 2011,
	606, 2013, 1018, 1961, 1987, 915, 1501, 2228, 1642, 186,
	792, 493, 2003, 2016, 2017, 1996, 1999, 436, 577, 1211,
	1963, 1972, 1065, 2338, 186, 2339, 1936, 503, 2380, 2315,
	2163, 994, 1940, 1941, 497, 3, 1946, 2439, 1562, 1985,
	2421, 2014, 2036, 2302, 2224, 2018, 1907, 614, 2047, 577,
	2079, 926, 578, 1908, 994, 493, 2341, 2006, 924, 437,
	662, 574, 1972, 1870, 186, 2344, 2440, 1830, 620, 620,
	1773, 1707, 1699, 476, 34, 1688, 1048, 1047, 1039, 617,
	977, 1060, 2027, 578, 2033, 475, 33, 1798, 2015, 1414,
	438, 1405, 439, 2041, 474, 30, 1155, 1561, 609, 891,
	1212, 2586, 995, 1352, 1698, 2046, 996, 1687, 1255, 894,
	895, 2057, 2058, 2549, 186, 2049, 2331, 2082, 1028, 2207,
	2056, 2205, 2059, 1026, 2063, 995, 473, 69, 2185, 996,
	472, 68, 2020, 1440, 1034, 1445, 1731, 2070, 469, 22,
	1725, 1452, 1723, 2072, 1301, 575, 1024, 2340, 470, 23,
	1022, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475,
	1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485,
	1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495,
	1496, 1497, 1498, 1834, 1504, 775, 1506, 1507, 1508, 1509,
	1837, 1317, 2086, 2088, 502, 187, 186, 2091, 2097, 2098,
	2099, 496, 186, 1532, 1352, 1352, 2113, 1853, 1854, 1038,
	1138, 186, 186, 2118, 2147, 925, 1457, 2116, 2115, 2104,
	2106, 2107, 923, 34, 2160, 1457, 2121, 2120, 468, 28,
	1572, 1573, 1317, 1020, 1589, 33, 1601, 1603, 1608, 1611,
	1612, 1613, 1299, 2174, 30, 1446, 2148, 467, 20, 1027,
	2197, 465, 19, 2196, 1025, 1297, 576, 1902, 2151, 2146,
	1014, 186, 1033, 186, 1610, 1610, 1610, 2161, 2167, 1915,
	2166, 186, 110, 2164, 792, 2223, 69, 1023, 922, 1294,
	68, 1021, 466, 18, 2234, 1317, 1292, 1253, 22, 186,
	186, 1245, 2231, 2181, 457, 15, 1243, 2182, 23, 1235,
	2179, 2249, 737, 2092, 2189, 2198, 186, 458, 16, 464,
	51, 2022, 2482, 2240, 2210, 186, 1067, 804, 186, 186,
	186, 2241, 761, 2216, 2217, 804, 2620, 2400, 2399, 2243,
	2222, 2217, 1396, 2244, 1811, 2255, 2229, 577, 2484, 2170,
	2235, 1683, 762, 1206, 645, 1593, 2247, 2242, 1997, 2245,
	1317, 1351, 2251, 2250, 2276, 2256, 456, 50, 1667, 1667,
	463, 12, 186, 1988, 1019, 2518, 2281, 1682, 1680, 793,
	1703, 578, 805, 462, 44, 1694, 2042, 2043, 28, 2044,
	2045, 1799, 2270, 183, 455, 45, 1317, 1317, 417, 2350,
	2277, 1013, 427, 2273, 1068, 1317, 1317, 20, 448, 1012,
	1812, 19, 1210, 498, 183, 461, 7, 506, 482, 921,
	511, 460, 6, 459, 36, 2496, 186, 1696, 530, 186,
	763, 454, 35, 1213, 2470, 742, 744, 2301, 1317, 804,
	186, 186, 18, 1936, 186, 186, 186, 1427, 1428, 1208,
	2316, 1077, 1078, 1071, 15, 1685, 2548, 2385, 1738, 1726,
	1211, 186, 1351, 1351, 1722, 1627, 186, 16, 186, 51,
	186, 186, 186, 1368, 1309, 186, 792, 2627, 1209, 2642,
	504, 2325, 804, 2321, 2197, 792, 2351, 2196, 2354, 2320,
	1142, 2330, 2257, 186, 186, 753, 753, 2318, 2322, 1079,
	2108, 792, 1785, 417, 2323, 1316, 1876, 1877, 2375, 1077,
	1078, 2319, 1785, 1784, 2370, 2197, 50, 2053, 2196, 2381,
	12, 2197, 1786, 2326, 2196, 2386, 417, 417, 1621, 797,
	417, 1551, 2289, 44, 2100, 183, 893, 1152, 1150, 2198,
	2390, 1212, 1046, 2355, 45, 1037, 1032, 2374, 2391, 2384,
	1029, 2367, 2217, 1015, 2392, 981, 1371, 582, 2372, 2217,
	2447, 485, 2397, 1404, 1016, 7, 1077, 1078, 2411, 2317,
	2198, 6, 1949, 36, 1647, 2383, 2198, 2396, 2542, 1816,
	1817, 35, 2295, 1862, 2155, 1822, 2409, 2410, 2501, 2417,
	1080, 1560, 186, 1153, 186, 48, 804, 186, 2194, 639,
	2332, 2423, 2188, 1717, 1835, 186, 1316, 1316, 1716, 1317,
	807, 804, 1380, 661, 1079, 1876, 1877, 1841, 1576, 2206,
	1458, 2208, 736, 1848, 663, 1314, 1852, 664, 793, 2430,
	1315, 1183, 2197, 651, 2433, 2196, 1312, 2435, 950, 2451,
	1742, 1384, 2453, 1866, 1524, 1541, 2416, 1845, 186, 1146,
	631, 792, 1265, 793, 2450, 186, 643, 642, 793, 2213,
	1539, 2437, 975, 186, 186, 792, 792, 2197, 2220, 186,
	2196, 2473, 2432, 630, 1954, 2030, 2452, 1138, 2393, 1442,
	1802, 1439, 2026, 2204, 1608, 1608, 1608, 2198, 186, 424,
	2479, 1873, 948, 186, 1599, 2485, 2481, 2488, 2480, 2492,
	186, 2489, 1591, 2490, 2491, 1587, 1051, 1131, 1593, 1593,
	1743, 1201, 1002, 2037, 2476, 2469, 2217, 1939, 2498, 1767,
	2461, 1196, 2198, 2512, 1450, 186, 186, 760, 759, 2507,
	2506, 2653, 186, 1882, 2504, 1374, 1779, 2483, 1124, 1123,
	792, 746, 2510, 993, 992, 186, 2514, 792, 792, 1970,
	2527, 2493, 2529, 2637, 2517, 2530, 2201, 793, 2558, 145,
	142, 144, 143, 2002, 72, 32, 31, 92, 2533, 91,
	2538, 2539, 186, 2495, 186, 90, 530, 186, 530, 804,
	916, 89, 88, 919, 1593, 1593, 1593, 2532, 87, 417,
	86, 85, 84, 83, 82, 81, 80, 1892, 530, 530,
	417, 941, 79, 1354, 2567, 2555, 2568, 2569, 186, 1352,
	2573, 2515, 78, 2028, 2571, 77, 2197, 76, 75, 2196,
	2570, 74, 526, 2522, 1353, 186, 186, 186, 2585, 2584,
	2583, 523, 71, 186, 1317, 530, 2596, 70, 29, 25,
	96, 24, 67, 66, 2560, 2603, 27, 186, 2605, 530,
	1352, 2608, 1876, 1877, 620, 620, 2554, 2606, 2607, 17,
	2617, 11, 21, 2615, 114, 980, 113, 620, 112, 2621,
	111, 2198, 14, 1893, 13, 530, 109, 108, 107, 2626,
	106, 105, 2625, 10, 2071, 9, 95, 2266, 2633, 1452,
	1317, 2634, 42, 8, 40, 2075, 39, 94, 2076, 2641,
	2646, 2648, 2640, 1352, 1354, 1354, 136, 2600, 2601, 2602,
	2081, 135, 132, 134, 131, 133, 103, 2657, 635, 2089,
	138, 2646, 2658, 2664, 137, 1353, 1353, 2093, 2670, 129,
	1939, 2646, 2673, 2671, 2672, 127, 128, 417, 2679, 2677,
	130, 2648, 2681, 126, 2678, 2648, 125, 139, 102, 101,
	2117, 1317, 100, 99, 2119, 98, 5, 2, 1, 0,
	0, 0, 416, 0, 0, 0, 0, 0, 1352, 0,
	1882, 0, 1886, 1878, 1879, 1880, 1881, 1883, 1884, 0,
	716, 0, 0, 0, 0, 0, 2429, 2149, 2150, 0,
	0, 0, 0, 0, 0, 0, 2156, 2157, 2158, 0,
	2462, 2463, 0, 0, 1352, 1352, 0, 0, 0, 1593,
	1593, 0, 0, 1352, 1352, 0, 0, 0, 0, 0,
	0, 0, 0, 2455, 2169, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1892, 0, 0, 0, 0, 0,
	0, 2467, 0, 0, 0, 0, 1352, 1313, 0, 0,
	0, 0, 0, 0, 2190, 0, 0, 1351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 770, 1593, 1593,
	1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
	1593, 1593, 1593, 1593, 1593, 1593, 1593, 0, 1593, 0,
	779, 783, 0, 0, 801, 793, 0, 0, 1351, 0,
	0, 0, 805, 0, 511, 0, 753, 0, 1832, 1833,
	1893, 1201, 0, 0, 0, 0, 0, 0, 0, 0,
	2252, 0, 0, 0, 0, 0, 0, 0, 417, 417,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1313, 1313,
	0, 1351, 0, 0, 794, 0, 0, 806, 0, 2280,
	0, 0, 0, 2283, 2284, 0, 2545, 2286, 0, 0,
	0, 0, 0, 0, 2288, 0, 2290, 0, 0, 0,
	0, 0, 0, 793, 1899, 1900, 1901, 0, 0, 0,
	0, 2561, 2297, 2563, 0, 0, 0, 0, 0, 0,
	0, 1316, 0, 0, 0, 0, 0, 0, 0, 805,
	1878, 1879, 1880, 1881, 1883, 1884, 1351, 1352, 0, 0,
	0, 0, 0, 0, 0, 2306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1316, 0, 0, 183, 0, 0, 0, 0,
	0, 0, 1351, 1351, 0, 0, 0, 417, 0, 0,
	0, 1351, 1351, 0, 0, 0, 0, 0, 0, 0,
	1278, 0, 0, 0, 0, 2352, 417, 0, 417, 0,
	417, 0, 0, 0, 1286, 805, 0, 0, 0, 0,
	0, 0, 0, 0, 1351, 1316, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 530, 183, 0, 0, 0,
	0, 0, 0, 0, 183, 0, 0, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 783, 0, 0, 0, 0, 2412, 2413,
	1316, 0, 0, 530, 801, 0, 0, 0, 530, 0,
	0, 0, 0, 183, 530, 0, 530, 0, 530, 0,
	530, 0, 530, 0, 0, 0, 0, 0, 0, 2425,
	0, 0, 0, 1415, 0, 2428, 1316, 1316, 0, 530,
	530, 0, 0, 794, 0, 1316, 1316, 0, 417, 2077,
	2078, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 805, 0, 0, 0, 0, 794, 0,
	530, 0, 0, 794, 0, 0, 0, 0, 1316, 2460,
	0, 0, 1352, 0, 0, 0, 0, 805, 0, 0,
	0, 793, 0, 0, 0, 0, 0, 0, 0, 0,
	805, 0, 0, 0, 0, 1351, 0, 0, 2122, 2123,
	2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133,
	2134, 2135, 2136, 2137, 2138, 2139, 2140, 0, 2144, 0,
	0, 0, 1593, 0, 0, 0, 0, 0, 1352, 1354,
	0, 783, 0, 0, 0, 0, 793, 793, 0, 0,
	793, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1353, 0, 0, 2509, 0, 0, 0, 0, 0, 0,
	0, 0, 794, 1593, 0, 0, 0, 0, 0, 0,
	1354, 0, 0, 0, 0, 0, 0, 511, 0, 753,
	0, 0, 893, 0, 0, 0, 0, 0, 0, 1352,
	0, 1353, 0, 417, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1659, 0, 0, 0, 417,
	0, 0, 417, 0, 0, 0, 1672, 0, 0, 0,
	417, 0, 0, 1354, 0, 0, 0, 0, 417, 0,
	0, 0, 0, 805, 0, 0, 0, 0, 417, 1316,
	0, 1593, 0, 1706, 1353, 0, 0, 0, 0, 0,
	0, 1713, 0, 2582, 2582, 0, 0, 0, 0, 893,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2597,
	417, 0, 1746, 0, 530, 0, 0, 530, 0, 530,
	0, 417, 417, 0, 1752, 0, 0, 0, 1354, 2582,
	0, 0, 0, 1672, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1353,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1351, 0, 770, 1226, 1354, 1354, 0, 0, 0, 0,
	0, 0, 0, 1354, 1354, 0, 0, 2582, 0, 0,
	0, 0, 0, 0, 0, 1353, 1353, 0, 0, 0,
	0, 0, 0, 0, 1353, 1353, 0, 0, 0, 0,
	0, 0, 0, 0, 2661, 0, 1354, 0, 0, 0,
	0, 0, 0, 1313, 0, 2661, 1351, 0, 2661, 2661,
	0, 0, 0, 0, 0, 0, 0, 1353, 0, 0,
	1790, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 417, 417, 417, 0,
	417, 0, 0, 0, 1313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 640, 64, 0, 0, 1351, 0, 417,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1264, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1316, 0, 0, 1313, 0, 805,
	783, 0, 1283, 0, 1283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	794, 0, 0, 0, 0, 0, 0, 806, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1316, 0, 2420, 0, 0, 0, 0, 0, 793, 0,
	0, 0, 1313, 0, 0, 0, 805, 1354, 0, 0,
	0, 0, 0, 0, 598, 0, 0, 0, 0, 0,
	0, 610, 0, 0, 0, 0, 0, 0, 1353, 0,
	793, 793, 0, 2444, 0, 0, 0, 0, 1313, 1313,
	0, 0, 0, 0, 0, 0, 0, 1313, 1313, 0,
	0, 1316, 771, 64, 0, 0, 0, 0, 794, 0,
	0, 0, 0, 1876, 1877, 793, 1894, 1895, 1896, 0,
	0, 0, 1426, 0, 0, 0, 0, 0, 0, 0,
	1313, 0, 0, 0, 806, 0, 0, 417, 0, 0,
	0, 0, 0, 417, 417, 0, 0, 417, 0, 0,
	0, 0, 1659, 0, 0, 1659, 0, 0, 0, 0,
	0, 2497, 0, 1959, 0, 0, 0, 1891, 0, 417,
	1965, 1966, 0, 0, 0, 1672, 0, 0, 1973, 0,
	0, 0, 0, 0, 1978, 1979, 1981, 1983, 1984, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	1995, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	806, 0, 0, 0, 417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1278, 0, 1278, 0, 530, 0,
	0, 1882, 417, 0, 0, 0, 2025, 0, 0, 0,
	0, 417, 0, 2035, 0, 0, 0, 0, 0, 0,
	417, 0, 1077, 1078, 0, 1107, 1108, 1109, 1117, 1118,
	1119, 0, 0, 1790, 0, 1095, 0, 0, 0, 1110,
	1897, 0, 0, 0, 0, 0, 1080, 770, 1790, 1121,
	0, 0, 1354, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 770, 0, 1892, 1662, 0, 0, 0,
	1079, 1313, 0, 1353, 783, 1762, 1099, 0, 0, 0,
	0, 0, 783, 1096, 0, 0, 38, 0, 417, 0,
	0, 0, 801, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 0, 0, 0, 0, 0, 0, 1354, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 806, 0,
	0, 0, 0, 0, 1744, 1763, 0, 0, 0, 1353,
	0, 1102, 1103, 1104, 1105, 801, 801, 0, 2110, 0,
	1085, 1893, 806, 0, 0, 0, 794, 0, 0, 793,
	0, 0, 0, 0, 1764, 806, 0, 0, 0, 0,
	1114, 1122, 0, 481, 0, 0, 0, 0, 0, 1354,
	0, 0, 0, 0, 0, 0, 610, 0, 0, 1120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1353, 0, 805, 0, 0, 56, 0, 1112, 0, 0,
	805, 794, 794, 0, 1100, 794, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 0, 0, 0, 1659, 0, 0, 0,
	1111, 1888, 1889, 1890, 0, 893, 1659, 0, 1887, 1885,
	1886, 1878, 1879, 1880, 1881, 1883, 1884, 0, 0, 0,
	2193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1793, 801, 1795, 0, 783, 1106, 0, 0, 0, 2218,
	0, 0, 0, 0, 0, 0, 2218, 0, 0, 0,
	1101, 57, 0, 0, 0, 1672, 0, 1278, 0, 0,
	0, 0, 0, 1814, 0, 2237, 1313, 1115, 806, 0,
	0, 0, 0, 1094, 805, 0, 0, 0, 118, 59,
	0, 60, 0, 417, 417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 0, 0, 0, 0,
	2263, 0, 480, 0, 0, 93, 598, 0, 0, 2265,
	0, 793, 2271, 417, 417, 0, 0, 805, 0, 0,
	793, 0, 1313, 0, 0, 148, 1134, 0, 1137, 0,
	0, 0, 0, 0, 0, 1143, 793, 1113, 0, 0,
	1091, 1092, 1098, 1097, 1093, 1116, 0, 1090, 1088, 1089,
	1081, 1082, 1083, 1084, 1086, 1087, 2296, 0, 0, 0,
	0, 0, 147, 0, 1918, 0, 0, 0, 0, 0,
	140, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 1313, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 893, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1659, 893, 0, 0, 2328, 2329,
	1672, 805, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 770, 0, 0, 2193, 893, 805, 770, 770, 0,
	2362, 770, 2363, 0, 417, 2365, 2366, 2218, 0, 417,
	0, 0, 64, 0, 2218, 0, 0, 1222, 0, 0,
	0, 0, 0, 1964, 0, 2193, 0, 893, 1713, 0,
	0, 2193, 0, 0, 0, 0, 793, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1990,
	793, 793, 0, 0, 806, 0, 0, 1077, 1078, 0,
	1107, 1108, 1109, 1117, 1118, 1119, 0, 0, 2007, 0,
	1095, 0, 0, 0, 1110, 0, 0, 0, 0, 0,
	0, 1080, 0, 0, 1121, 0, 2019, 0, 0, 0,
	0, 0, 0, 0, 0, 1264, 0, 0, 0, 0,
	0, 0, 0, 0, 1264, 1079, 0, 0, 0, 0,
	0, 1099, 0, 794, 0, 0, 0, 0, 1096, 0,
	0, 806, 0, 0, 0, 793, 1672, 0, 2436, 0,
	0, 2438, 793, 793, 0, 0, 0, 0, 0, 417,
	0, 0, 2193, 0, 0, 794, 794, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 805, 0, 1102, 1103, 1104, 1105,
	0, 2218, 2073, 0, 0, 1085, 0, 2193, 0, 0,
	794, 0, 417, 0, 0, 0, 0, 0, 0, 893,
	0, 0, 0, 0, 0, 1114, 1122, 2263, 2263, 0,
	0, 0, 0, 893, 0, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 1120, 0, 38, 0, 0, 0,
	0, 0, 2503, 0, 0, 0, 0, 1659, 0, 41,
	0, 0, 1112, 0, 1278, 0, 0, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 477, 0, 0, 0, 2519,
	2520, 0, 0, 0, 0, 1111, 417, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 2537,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 0,
	0, 53, 0, 481, 54, 0, 0, 0, 0, 0,
	1106, 0, 0, 0, 770, 0, 2553, 0, 893, 0,
	598, 417, 0, 598, 598, 1101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 2193, 0, 0, 0,
	0, 0, 1115, 0, 0, 0, 0, 1142, 1094, 0,
	0, 0, 2503, 0, 0, 0, 0, 0, 0, 0,
	451, 0, 0, 0, 478, 0, 0, 0, 0, 893,
	893, 893, 0, 0, 0, 38, 1522, 417, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 0, 41, 610,
	0, 2614, 0, 38, 1137, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 1744, 770, 0,
	0, 0, 1113, 0, 477, 1091, 1092, 1098, 1097, 1093,
	1116, 57, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086,
	1087, 0, 477, 0, 0, 0, 0, 2272, 801, 1917,
	0, 0, 0, 479, 0, 0, 0, 0, 118, 59,
	53, 60, 481, 54, 794, 0, 0, 0, 0, 0,
	0, 479, 771, 0, 0, 146, 0, 0, 53, 1412,
	481, 54, 480, 0, 0, 93, 0, 0, 1222, 0,
	0, 0, 0, 0, 56, 0, 0, 0, 0, 0,
	0, 64, 0, 0, 0, 148, 0, 806, 0, 0,
	0, 0, 56, 64, 0, 806, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1077, 1078,
	0, 1107, 1108, 1109, 1117, 1118, 1119, 0, 0, 0,
	0, 1095, 147, 0, 770, 1110, 64, 0, 64, 0,
	140, 0, 1080, 0, 0, 1121, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 0,
	0, 0, 0, 64, 0, 0, 1079, 0, 117, 0,
	57, 0, 1099, 0, 0, 0, 0, 0, 2364, 1096,
	0, 478, 0, 2369, 0, 0, 0, 0, 57, 0,
	0, 0, 38, 0, 0, 0, 0, 118, 59, 0,
	60, 0, 0, 0, 0, 41, 0, 1876, 1877, 806,
	1894, 1895, 1896, 0, 146, 118, 59, 0, 60, 0,
	0, 480, 0, 0, 93, 0, 0, 1102, 1103, 1104,
	1105, 477, 146, 0, 0, 0, 1085, 0, 0, 480,
	0, 0, 93, 0, 148, 0, 794, 0, 0, 0,
	0, 0, 806, 0, 0, 794, 1114, 1122, 0, 0,
	479, 1891, 148, 0, 0, 0, 0, 53, 64, 481,
	54, 794, 0, 0, 0, 1120, 0, 0, 0, 0,
	0, 147, 0, 0, 0, 0, 0, 0, 0, 140,
	0, 0, 0, 1112, 0, 0, 141, 0, 0, 147,
	1100, 56, 0, 0, 0, 0, 0, 140, 0, 0,
	0, 0, 0, 2445, 141, 0, 0, 117, 0, 0,
	0, 0, 0, 0, 0, 1882, 1111, 0, 0, 0,
	0, 0, 0, 0, 0, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2478, 1522, 0, 0,
	0, 1106, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 1137, 0, 0,
	0, 806, 0, 0, 0, 0, 0, 57, 0, 1892,
	0, 0, 0, 1115, 0, 0, 0, 0, 0, 1094,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 59, 0, 60, 0, 0,
	0, 794, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 0, 0, 0, 794, 794, 0, 480, 0,
	2526, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1137, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 148, 0, 1113, 0, 1893, 1091, 1092, 1098, 1097,
	1093, 1116, 0, 1090, 1088, 1089, 1081, 1082, 1083, 1084,
	1086, 1087, 0, 0, 0, 2557, 771, 0, 0, 0,
	1916, 0, 771, 771, 0, 0, 771, 0, 147, 0,
	0, 0, 0, 0, 0, 0, 140, 0, 0, 0,
	794, 0, 0, 141, 0, 0, 0, 794, 794, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 0, 0, 64,
	0, 1744, 0, 0, 0, 0, 0, 0, 0, 806,
	64, 0, 0, 0, 0, 1888, 1889, 1890, 0, 0,
	0, 0, 1887, 1885, 1886, 1878, 1879, 1880, 1881, 1883,
	1884, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	64, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	610, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1550, 0, 659, 648, 649, 646, 647, 638, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 1547, 0, 190, 0, 0, 0, 0, 676, 641,
	0, 0, 0, 191, 192, 193, 353, 691, 355, 692,
	194, 693, 694, 0, 195, 359, 360, 196, 197, 644,
	675, 695, 696, 363, 0, 198, 687, 0, 667, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 721, 209, 210, 211, 0, 668,
	669, 671, 0, 670, 672, 212, 213, 418, 214, 697,
	215, 698, 699, 629, 216, 0, 217, 0, 218, 1548,
	0, 690, 220, 0, 221, 0, 0, 0, 632, 222,
	224, 223, 225, 677, 678, 655, 722, 0, 0, 0,
	0, 0, 226, 227, 700, 701, 702, 0, 228, 0,
	229, 0, 0, 723, 0, 230, 688, 0, 375, 0,
	0, 231, 232, 233, 234, 684, 686, 725, 0, 378,
	238, 0, 235, 0, 724, 236, 703, 237, 704, 705,
	706, 707, 708, 64, 666, 0, 726, 239, 240, 241,
	727, 386, 387, 242, 243, 244, 0, 246, 245, 771,
	689, 728, 247, 248, 729, 0, 249, 250, 0, 0,
	251, 0, 252, 730, 253, 254, 256, 389, 255, 731,
	257, 258, 260, 259, 626, 0, 656, 685, 261, 709,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 732, 267, 733, 679, 268, 269, 270, 271, 272,
	273, 0, 274, 680, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 710, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 734, 297, 298, 633, 299, 0, 303, 304,
	305, 306, 307, 771, 309, 398, 308, 310, 311, 673,
	312, 300, 301, 313, 735, 314, 711, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 712, 319, 320,
	681, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 713, 714, 0, 0, 332, 333,
	682, 683, 654, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 674, 342, 0, 408, 343, 344, 345,
	409, 715, 1546, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 627, 0, 0, 0, 0, 0,
	0, 0, 625, 0, 0, 0, 0, 623, 624, 1549,
	0, 0, 0, 0, 0, 0, 634, 1544, 0, 0,
	0, 0, 637, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 771,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 803, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 808, 0, 190, 809, 810, 811, 812,
	352, 813, 814, 815, 816, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 817, 195, 359, 360, 196,
	197, 818, 819, 361, 362, 363, 820, 198, 364, 821,
	795, 822, 199, 200, 201, 0, 203, 204, 205, 202,
	823, 206, 0, 207, 208, 824, 721, 209, 210, 211,
	825, 826, 828, 827, 829, 830, 831, 212, 213, 418,
	214, 365, 215, 366, 367, 832, 216, 833, 217, 834,
	218, 835, 836, 219, 220, 837, 221, 838, 0, 839,
	368, 222, 224, 223, 225, 369, 370, 840, 722, 841,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 64,
	228, 842, 229, 843, 844, 723, 845, 230, 374, 846,
	375, 847, 1522, 231, 232, 233, 234, 376, 377, 725,
	848, 378, 238, 849, 235, 850, 724, 236, 379, 237,
	380, 381, 382, 383, 384, 851, 385, 852, 726, 239,
	240, 241, 727, 386, 387, 242, 243, 244, 853, 246,
	245, 854, 388, 728, 247, 248, 729, 855, 249, 250,
	856, 857, 251, 0, 252, 730, 253, 254, 256, 389,
	255, 731, 257, 258, 260, 259, 858, 859, 860, 390,
	261, 391, 262, 263, 861, 264, 862, 863, 265, 864,
	865, 266, 392, 732, 267, 733, 393, 268, 269, 270,
	271, 272, 273, 866, 274, 394, 275, 395, 276, 867,
	277, 278, 279, 280, 281, 396, 282, 283, 868, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 869, 296, 734, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 870, 309, 398, 308, 310,
	311, 871, 312, 300, 301, 313, 735, 314, 399, 400,
	315, 872, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 873, 323, 874, 324, 325, 326, 327,
	328, 329, 330, 331, 875, 403, 404, 405, 876, 877,
	332, 333, 406, 407, 878, 334, 335, 336, 337, 879,
	880, 338, 339, 340, 341, 881, 342, 882, 408, 343,
	344, 345, 409, 410, 883, 884, 346, 885, 886, 887,
	888, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 803, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1652, 0, 0, 0,
	0, 0, 188, 189, 808, 1653, 190, 809, 810, 811,
	812, 352, 813, 814, 815, 816, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 817, 195, 359, 360,
	196, 197, 818, 819, 361, 362, 363, 820, 198, 364,
	821, 795, 822, 199, 200, 201, 0, 203, 204, 205,
	202, 823, 206, 0, 207, 208, 824, 721, 209, 210,
	211, 825, 826, 828, 827, 829, 830, 831, 212, 213,
	418, 214, 365, 215, 366, 367, 832, 216, 833, 217,
	834, 218, 835, 836, 219, 220, 837, 221, 838, 0,
	839, 368, 222, 224, 223, 225, 369, 370, 840, 722,
	841, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 842, 229, 843, 844, 723, 845, 230, 374,
	846, 375, 847, 0, 231, 232, 233, 234, 376, 377,
	725, 848, 378, 238, 849, 235, 850, 724, 236, 379,
	237, 380, 381, 382, 383, 384, 851, 385, 852, 726,
	239, 240, 241, 727, 386, 387, 242, 243, 244, 853,
	246, 245, 854, 388, 728, 247, 248, 729, 855, 249,
	250, 856, 857, 251, 0, 252, 730, 253, 254, 256,
	389, 255, 731, 257, 258, 260, 259, 858, 859, 860,
	390, 261, 391, 262, 263, 861, 264, 862, 863, 265,
	864, 865, 266, 392, 732, 267, 733, 393, 268, 269,
	270, 271, 272, 273, 866, 274, 394, 275, 395, 276,
	867, 277, 278, 279, 280, 281, 396, 282, 283, 868,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 869, 296, 734, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 870, 309, 398, 308,
	310, 311, 871, 312, 300, 301, 313, 735, 314, 399,
	400, 315, 872, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 873, 323, 874, 324, 325, 326,
	327, 328, 329, 330, 331, 875, 403, 404, 405, 876,
	877, 332, 333, 406, 407, 878, 334, 335, 336, 337,
	879, 880, 338, 339, 340, 341, 881, 342, 882, 408,
	343, 344, 345, 409, 410, 883, 884, 346, 885, 886,
	887, 888, 347, 348, 349, 350, 351, 0, 803, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 808, 2324, 190, 809,
	810, 811, 812, 352, 813, 814, 815, 816, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 817, 195,
	359, 360, 196, 197, 818, 819, 361, 362, 363, 820,
	198, 364, 821, 795, 822, 199, 200, 201, 0, 203,
	204, 205, 202, 823, 206, 0, 207, 208, 824, 721,
	209, 210, 211, 825, 826, 828, 827, 829, 830, 831,
	212, 213, 418, 214, 365, 215, 366, 367, 832, 216,
	833, 217, 834, 218, 835, 836, 219, 220, 837, 221,
	838, 0, 839, 368, 222, 224, 223, 225, 369, 370,
	840, 722, 841, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 842, 229, 843, 844, 723, 845,
	230, 374, 846, 375, 847, 0, 231, 232, 233, 234,
	376, 377, 725, 848, 378, 238, 849, 235, 850, 724,
	236, 379, 237, 380, 381, 382, 383, 384, 851, 385,
	852, 726, 239, 240, 241, 727, 386, 387, 242, 243,
	244, 853, 246, 245, 854, 388, 728, 247, 248, 729,
	855, 249, 250, 856, 857, 251, 0, 252, 730, 253,
	254, 256, 389, 255, 731, 257, 258, 260, 259, 858,
	859, 860, 390, 261, 391, 262, 263, 861, 264, 862,
	863, 265, 864, 865, 266, 392, 732, 267, 733, 393,
	268, 269, 270, 271, 272, 273, 866, 274, 394, 275,
	395, 276, 867, 277, 278, 279, 280, 281, 396, 282,
	283, 868, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 869, 296, 734, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 870, 309,
	398, 308, 310, 311, 871, 312, 300, 301, 313, 735,
	314, 399, 400, 315, 872, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 873, 323, 874, 324,
	325, 326, 327, 328, 329, 330, 331, 875, 403, 404,
	405, 876, 877, 332, 333, 406, 407, 878, 334, 335,
	336, 337, 879, 880, 338, 339, 340, 341, 881, 342,
	882, 408, 343, 344, 345, 409, 410, 883, 884, 346,
	885, 886, 887, 888, 347, 348, 349, 350, 351, 803,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1260, 188, 189, 808, 0, 190,
	809, 810, 811, 812, 352, 813, 814, 815, 816, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 817,
	195, 359, 360, 196, 197, 818, 819, 361, 362, 363,
	820, 198, 364, 821, 795, 822, 199, 200, 201, 0,
	203, 204, 205, 202, 823, 206, 0, 207, 208, 824,
	721, 209, 210, 211, 825, 826, 828, 827, 829, 830,
	831, 212, 213, 418, 214, 365, 215, 366, 367, 832,
	216, 833, 217, 834, 218, 835, 836, 219, 220, 837,
	221, 838, 0, 839, 368, 222, 224, 223, 225, 369,
	370, 840, 722, 841, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 842, 229, 843, 844, 723,
	845, 230, 374, 846, 375, 847, 0, 231, 232, 233,
	234, 376, 377, 725, 848, 378, 238, 849, 235, 850,
	724, 236, 379, 237, 380, 381, 382, 383, 384, 851,
	385, 852, 726, 239, 240, 241, 727, 386, 387, 242,
	243, 244, 853, 246, 245, 854, 388, 728, 247, 248,
	729, 855, 249, 250, 856, 857, 251, 0, 252, 730,
	253, 254, 256, 389, 255, 731, 257, 258, 260, 259,
	858, 859, 860, 390, 261, 391, 262, 263, 861, 264,
	862, 863, 265, 864, 865, 266, 392, 732, 267, 733,
	393, 268, 269, 270, 271, 272, 273, 866, 274, 394,
	275, 395, 276, 867, 277, 278, 279, 280, 281, 396,
	282, 283, 868, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 869, 296, 734, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 870,
	309, 398, 308, 310, 311, 871, 312, 300, 301, 313,
	735, 314, 399, 400, 315, 872, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 873, 323, 874,
	324, 325, 326, 327, 328, 329, 330, 331, 875, 403,
	404, 405, 876, 877, 332, 333, 406, 407, 878, 334,
	335, 336, 337, 879, 880, 338, 339, 340, 341, 881,
	342, 882, 408, 343, 344, 345, 409, 410, 883, 884,
	346, 885, 886, 887, 888, 347, 348, 349, 350, 351,
	611, 0, 659, 648, 649, 646, 647, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 676, 641, 0,
	0, 0, 191, 192, 193, 353, 691, 355, 692, 194,
	693, 694, 0, 195, 359, 360, 196, 197, 644, 675,
	695, 696, 363, 0, 198, 687, 0, 667, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 721, 209, 210, 211, 0, 668, 669,
	671, 0, 670, 672, 212, 213, 418, 214, 697, 215,
	698, 699, 629, 216, 0, 217, 0, 218, 0, 0,
	690, 220, 0, 221, 0, 0, 0, 632, 222, 224,
	223, 225, 677, 678, 655, 722, 0, 0, 0, 0,
	0, 226, 227, 700, 701, 702, 0, 228, 0, 229,
	0, 0, 723, 0, 230, 688, 0, 375, 0, 0,
	231, 232, 233, 234, 684, 686, 725, 0, 378, 238,
	0, 235, 0, 724, 236, 703, 237, 704, 705, 706,
	707, 708, 0, 666, 0, 726, 239, 240, 241, 727,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 689,
	728, 247, 248, 729, 0, 249, 250, 0, 0, 251,
	0, 252, 730, 253, 254, 256, 389, 255, 731, 257,
	258, 260, 259, 626, 0, 656, 685, 261, 709, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	732, 267, 733, 679, 268, 269, 270, 271, 272, 273,
	0, 274, 680, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 710, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 734, 297, 298, 633, 299, 0, 303, 304, 305,
	306, 307, 146, 309, 398, 308, 310, 311, 673, 312,
	300, 301, 313, 735, 314, 711, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 712, 319, 320, 681,
	0, 323, 148, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 713, 714, 0, 0, 332, 333, 682,
	683, 654, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 674, 342, 0, 408, 343, 344, 345, 954,
	715, 0, 0, 346, 0, 0, 0, 140, 347, 348,
	349, 350, 351, 627, 141, 0, 0, 0, 0, 0,
	0, 625, 0, 0, 0, 0, 623, 624, 659, 648,
	649, 646, 647, 638, 0, 1140, 0, 0, 0, 0,
	0, 637, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 676, 641, 0, 0, 0, 191, 192,
	193, 353, 691, 355, 692, 194, 693, 694, 0, 195,
	359, 360, 196, 197, 644, 675, 695, 696, 363, 0,
	198, 687, 0, 667, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 721,
	209, 210, 211, 0, 668, 669, 671, 0, 670, 672,
	212, 213, 418, 214, 697, 215, 698, 699, 629, 216,
	0, 217, 0, 218, 0, 0, 690, 220, 0, 221,
	0, 0, 0, 632, 222, 224, 223, 225, 677, 678,
	655, 722, 0, 0, 0, 0, 0, 226, 227, 700,
	701, 702, 0, 228, 0, 229, 0, 0, 723, 0,
	230, 688, 0, 375, 0, 0, 231, 232, 233, 234,
	684, 686, 725, 0, 378, 238, 0, 235, 0, 724,
	236, 703, 237, 704, 705, 706, 707, 708, 0, 666,
	0, 726, 239, 240, 241, 727, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 689, 728, 247, 248, 729,
	0, 249, 250, 0, 0, 251, 0, 252, 730, 253,
	254, 256, 389, 255, 731, 257, 258, 260, 259, 626,
	0, 656, 685, 261, 709, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 732, 267, 733, 679,
	268, 269, 270, 271, 272, 273, 0, 274, 680, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 710, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 734, 297, 298,
	633, 299, 0, 303, 304, 305, 306, 307, 146, 309,
	398, 308, 310, 311, 673, 312, 300, 301, 313, 735,
	314, 711, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 712, 319, 320, 681, 0, 323, 148, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 713,
	714, 0, 0, 332, 333, 682, 683, 654, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 674, 342,
	0, 408, 343, 344, 345, 954, 715, 0, 0, 346,
	0, 0, 0, 140, 347, 348, 349, 350, 351, 627,
	141, 0, 0, 0, 0, 0, 0, 625, 0, 0,
	0, 0, 623, 624, 659, 648, 649, 646, 647, 638,
	0, 1140, 0, 0, 0, 0, 0, 637, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 676,
	641, 0, 0, 0, 191, 192, 193, 353, 691, 355,
	692, 194, 693, 694, 1604, 195, 359, 360, 196, 197,
	644, 675, 695, 696, 363, 0, 198, 687, 0, 667,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 721, 209, 210, 211, 0,
	668, 669, 671, 0, 670, 672, 212, 213, 418, 214,
	697, 215, 698, 699, 629, 216, 0, 217, 0, 218,
	0, 0, 690, 220, 0, 221, 0, 0, 0, 632,
	222, 224, 223, 225, 677, 678, 655, 722, 0, 0,
	0, 0, 0, 226, 227, 700, 701, 702, 0, 228,
	0, 229, 0, 1609, 723, 0, 230, 688, 0, 375,
	0, 0, 231, 232, 233, 234, 684, 686, 725, 0,
	378, 238, 0, 235, 0, 724, 236, 703, 237, 704,
	705, 706, 707, 708, 0, 666, 0, 726, 239, 240,
	241, 727, 386, 387, 242, 243, 244, 0, 246, 245,
	1605, 689, 728, 247, 248, 729, 0, 249, 250, 0,
	0, 251, 0, 252, 730, 253, 254, 256, 389, 255,
	731, 257, 258, 260, 259, 626, 0, 656, 685, 261,
	709, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 732, 267, 733, 679, 268, 269, 270, 271,
	272, 273, 0, 274, 680, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 710, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 734, 297, 298, 633, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	673, 312, 300, 301, 313, 735, 314, 711, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 712, 319,
	320, 681, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 713, 714, 0, 1606, 332,
	333, 682, 683, 654, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 674, 342, 0, 408, 343, 344,
	345, 409, 715, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 627, 659, 648, 649, 646,
	647, 638, 0, 625, 0, 0, 0, 0, 623, 624,
	0, 0, 188, 189, 0, 0, 190, 634, 0, 0,
	0, 676, 641, 637, 0, 0, 191, 192, 193, 353,
	691, 355, 692, 194, 693, 694, 0, 195, 359, 360,
	196, 197, 644, 675, 695, 696, 363, 0, 198, 687,
	0, 667, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 721, 209, 210,
	211, 0, 668, 669, 671, 0, 670, 672, 212, 213,
	418, 214, 697, 215, 698, 699, 629, 216, 0, 217,
	0, 218, 0, 0, 690, 220, 0, 221, 0, 0,
	0, 632, 222, 224, 223, 225, 677, 678, 655, 722,
	0, 0, 0, 0, 0, 226, 227, 700, 701, 702,
	0, 228, 0, 229, 0, 0, 723, 0, 230, 688,
	0, 375, 0, 0, 231, 232, 233, 234, 684, 686,
	725, 0, 378, 238, 0, 235, 0, 724, 236, 703,
	237, 704, 705, 706, 707, 708, 0, 666, 0, 726,
	239, 240, 241, 727, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 689, 728, 247, 248, 729, 0, 249,
	250, 0, 0, 251, 0, 252, 730, 253, 254, 256,
	389, 255, 731, 257, 258, 260, 259, 626, 2246, 656,
	685, 261, 709, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 732, 267, 733, 679, 268, 269,
	270, 271, 272, 273, 0, 274, 680, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 710, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 734, 297, 298, 633, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 673, 312, 300, 301, 313, 735, 314, 711,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	712, 319, 320, 681, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 713, 714, 0,
	0, 332, 333, 682, 683, 654, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 674, 342, 0, 408,
	343, 344, 345, 409, 715, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 627, 659, 648,
	649, 646, 647, 638, 0, 625, 0, 0, 0, 0,
	623, 624, 1202, 0, 188, 189, 0, 0, 190, 634,
	0, 0, 0, 676, 641, 637, 0, 0, 191, 192,
	193, 353, 691, 355, 692, 194, 693, 694, 0, 195,
	359, 360, 196, 197, 644, 675, 695, 696, 363, 0,
	198, 687, 0, 667, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 721,
	209, 210, 211, 0, 668, 669, 671, 0, 670, 672,
	212, 213, 418, 214, 697, 215, 698, 699, 629, 216,
	0, 217, 0, 218, 0, 0, 690, 220, 0, 221,
	0, 0, 0, 632, 222, 224, 223, 225, 677, 678,
	655, 722, 0, 0, 0, 0, 0, 226, 227, 700,
	701, 702, 0, 228, 0, 229, 0, 0, 723, 0,
	230, 688, 0, 375, 0, 0, 231, 232, 233, 234,
	684, 686, 725, 0, 378, 238, 1454, 235, 0, 724,
	236, 703, 237, 704, 705, 706, 707, 708, 0, 666,
	0, 726, 239, 240, 241, 727, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 689, 728, 247, 248, 729,
	0, 249, 250, 0, 0, 251, 0, 252, 730, 253,
	254, 256, 389, 255, 731, 257, 258, 260, 259, 626,
	0, 656, 685, 261, 709, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 732, 267, 733, 679,
	268, 269, 270, 271, 272, 273, 0, 274, 680, 275,
	395, 276, 1453, 277, 278, 279, 280, 281, 710, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 734, 297, 298,
	633, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 673, 312, 300, 301, 313, 735,
	314, 711, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 712, 319, 320, 681, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 713,
	714, 0, 0, 332, 333, 682, 683, 654, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 674, 342,
	0, 408, 343, 344, 345, 409, 715, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 627,
	0, 0, 0, 0, 0, 0, 0, 625, 0, 0,
	0, 0, 623, 624, 0, 0, 0, 0, 0, 0,
	0, 634, 0, 0, 0, 0, 619, 637, 659, 648,
	649, 646, 647, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 676, 641, 0, 0, 0, 191, 192,
	193, 353, 691, 355, 692, 194, 693, 694, 0, 195,
	359, 360, 196, 197, 644, 675, 695, 696, 363, 0,
	198, 687, 0, 667, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 721,
	209, 210, 211, 0, 668, 669, 671, 0, 670, 672,
	212, 213, 418, 214, 697, 215, 698, 699, 629, 216,
	0, 217, 0, 218, 0, 0, 690, 220, 0, 221,
	0, 0, 0, 632, 222, 224, 223, 225, 677, 678,
	655, 722, 0, 0, 0, 0, 0, 226, 227, 700,
	701, 702, 0, 228, 0, 229, 0, 0, 723, 0,
	230, 688, 0, 375, 0, 0, 231, 232, 233, 234,
	684, 686, 725, 0, 378, 238, 0, 235, 0, 724,
	236, 703, 237, 704, 705, 706, 707, 708, 0, 666,
	0, 726, 239, 240, 241, 727, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 689, 728, 247, 248, 729,
	0, 249, 250, 0, 0, 251, 0, 252, 730, 253,
	254, 256, 389, 255, 731, 257, 258, 260, 259, 626,
	0, 656, 685, 261, 709, 262, 263, 0, 264, 621,
	0, 265, 0, 0, 266, 392, 732, 267, 733, 679,
	268, 269, 270, 271, 272, 273, 0, 274, 680, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 710, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 734, 297, 298,
	633, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 673, 312, 300, 301, 313, 735,
	314, 711, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 712, 319, 320, 681, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 713,
	714, 0, 0, 332, 333, 682, 683, 654, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 674, 342,
	0, 408, 343, 344, 345, 409, 715, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 627,
	659, 648, 649, 646, 647, 638, 0, 625, 0, 0,
	0, 0, 623, 624, 0, 0, 188, 189, 0, 0,
	190, 634, 0, 0, 0, 676, 641, 637, 0, 0,
	191, 192, 193, 353, 691, 355, 692, 194, 693, 694,
	0, 195, 359, 360, 196, 197, 644, 675, 695, 696,
	363, 0, 198, 687, 0, 667, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 721, 209, 210, 211, 0, 668, 669, 671, 0,
	670, 672, 212, 213, 418, 214, 697, 215, 698, 699,
	629, 216, 0, 217, 0, 218, 0, 0, 690, 220,
	0, 221, 0, 0, 0, 632, 222, 224, 223, 225,
	677, 678, 655, 722, 0, 0, 0, 0, 0, 226,
	227, 700, 701, 702, 0, 228, 0, 229, 0, 0,
	723, 0, 230, 688, 0, 375, 0, 0, 231, 232,
	233, 234, 684, 686, 725, 0, 378, 238, 0, 235,
	0, 724, 236, 703, 237, 704, 705, 706, 707, 708,
	0, 666, 0, 726, 239, 240, 241, 727, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 689, 728, 247,
	248, 729, 0, 249, 250, 0, 0, 251, 0, 252,
	730, 253, 254, 256, 389, 255, 731, 257, 258, 260,
	259, 626, 0, 656, 685, 261, 709, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 732, 267,
	733, 679, 268, 269, 270, 271, 272, 273, 0, 274,
	680, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	710, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 734,
	297, 298, 633, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 673, 312, 300, 301,
	313, 735, 314, 711, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 712, 319, 320, 681, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 713, 714, 0, 0, 332, 333, 682, 683, 654,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	674, 342, 0, 408, 343, 344, 345, 409, 715, 2096,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 627, 659, 648, 649, 646, 647, 638, 0, 625,
	0, 0, 0, 0, 623, 624, 0, 0, 188, 189,
	0, 0, 190, 634, 0, 0, 0, 676, 641, 637,
	0, 0, 191, 192, 193, 353, 691, 355, 692, 194,
	693, 694, 0, 195, 359, 360, 196, 197, 644, 675,
	695, 696, 363, 0, 198, 687, 0, 667, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 721, 209, 210, 211, 0, 668, 669,
	671, 0, 670, 672, 212, 213, 418, 214, 697, 215,
	698, 699, 629, 216, 0, 217, 0, 218, 0, 0,
	690, 220, 0, 221, 0, 0, 0, 632, 222, 224,
	223, 225, 677, 678, 655, 722, 0, 0, 0, 0,
	0, 226, 227, 700, 701, 702, 0, 228, 0, 229,
	0, 0, 723, 0, 230, 688, 0, 375, 0, 0,
	231, 232, 233, 234, 684, 686, 725, 0, 378, 238,
	0, 235, 0, 724, 236, 703, 237, 704, 705, 706,
	707, 708, 0, 666, 0, 726, 239, 240, 241, 727,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 689,
	728, 247, 248, 729, 0, 249, 250, 0, 0, 251,
	0, 252, 730, 253, 254, 256, 389, 255, 731, 257,
	258, 260, 259, 626, 0, 656, 685, 261, 709, 262,
	263, 0, 264, 621, 0, 265, 0, 0, 266, 392,
	732, 267, 733, 679, 268, 269, 270, 271, 272, 273,
	0, 274, 680, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 710, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 734, 297, 298, 633, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 673, 312,
	300, 301, 313, 735, 314, 711, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 712, 319, 320, 681,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 713, 714, 0, 0, 332, 333, 682,
	683, 654, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 674, 342, 0, 408, 343, 344, 345, 409,
	715, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 627, 659, 648, 649, 646, 647, 638,
	0, 625, 0, 0, 0, 0, 623, 624, 0, 0,
	188, 189, 0, 0, 190, 634, 0, 0, 0, 676,
	641, 637, 0, 0, 191, 192, 193, 353, 691, 355,
	692, 194, 693, 694, 0, 195, 359, 360, 196, 197,
	644, 675, 695, 696, 363, 0, 198, 687, 0, 667,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 721, 209, 210, 211, 0,
	668, 669, 671, 0, 670, 672, 212, 213, 418, 214,
	697, 215, 698, 699, 629, 216, 0, 217, 0, 218,
	0, 0, 690, 220, 0, 221, 0, 0, 0, 632,
	222, 224, 223, 225, 677, 678, 655, 722, 0, 0,
	0, 0, 0, 226, 227, 700, 701, 702, 0, 228,
	0, 229, 0, 0, 723, 0, 230, 688, 0, 375,
	0, 0, 231, 232, 233, 234, 684, 686, 725, 0,
	378, 238, 0, 235, 0, 724, 236, 703, 237, 704,
	705, 706, 707, 708, 0, 666, 0, 726, 239, 240,
	241, 727, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 689, 728, 247, 248, 729, 0, 249, 250, 0,
	0, 251, 0, 252, 730, 253, 254, 256, 389, 255,
	731, 257, 258, 260, 259, 626, 0, 656, 685, 261,
	709, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 732, 267, 733, 679, 268, 269, 270, 271,
	272, 273, 0, 274, 680, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 710, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 734, 297, 298, 633, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	673, 312, 300, 301, 313, 735, 314, 711, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 712, 319,
	320, 681, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 713, 714, 0, 0, 332,
	333, 682, 683, 654, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 674, 342, 0, 408, 343, 344,
	345, 409, 715, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 627, 659, 648, 649, 646,
	647, 638, 0, 625, 0, 0, 0, 0, 623, 624,
	1202, 0, 188, 189, 0, 0, 190, 634, 0, 0,
	0, 676, 641, 637, 0, 0, 191, 192, 193, 353,
	691, 355, 692, 194, 693, 694, 0, 195, 359, 360,
	196, 197, 644, 675, 695, 696, 363, 0, 198, 687,
	0, 667, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 721, 209, 210,
	211, 0, 668, 669, 671, 0, 670, 672, 212, 213,
	418, 214, 697, 215, 698, 699, 629, 216, 0, 217,
	0, 218, 0, 0, 690, 220, 0, 221, 0, 0,
	0, 632, 222, 224, 223, 225, 677, 678, 655, 722,
	0, 0, 0, 0, 0, 226, 227, 700, 701, 702,
	0, 228, 0, 229, 0, 1609, 723, 0, 230, 688,
	0, 375, 0, 0, 231, 232, 233, 234, 684, 686,
	725, 0, 378, 238, 0, 235, 0, 724, 236, 703,
	237, 704, 705, 706, 707, 708, 0, 666, 0, 726,
	239, 240, 241, 727, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 689, 728, 247, 248, 729, 0, 249,
	250, 0, 0, 251, 0, 252, 730, 253, 254, 256,
	389, 255, 731, 257, 258, 260, 259, 626, 0, 656,
	685, 261, 709, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 732, 267, 733, 679, 268, 269,
	270, 271, 272, 273, 0, 274, 680, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 710, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 734, 297, 298, 633, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 673, 312, 300, 301, 313, 735, 314, 711,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	712, 319, 320, 681, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 713, 714, 0,
	0, 332, 333, 682, 683, 654, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 674, 342, 0, 408,
	343, 344, 345, 409, 715, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 627, 0, 0,
	0, 0, 0, 0, 0, 625, 0, 0, 0, 0,
	623, 624, 0, 0, 0, 0, 0, 0, 0, 634,
	0, 0, 0, 0, 1655, 637, 659, 648, 649, 646,
	647, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 676, 641, 0, 0, 0, 191, 192, 193, 353,
	691, 355, 692, 194, 693, 694, 0, 195, 359, 360,
	196, 197, 644, 675, 695, 696, 363, 0, 198, 687,
	0, 667, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 721, 209, 210,
	211, 0, 668, 669, 671, 0, 670, 672, 212, 213,
	418, 214, 697, 215, 698, 699, 629, 216, 0, 217,
	0, 218, 0, 0, 690, 220, 0, 221, 0, 0,
	0, 632, 222, 224, 223, 225, 677, 678, 655, 722,
	0, 0, 0, 0, 0, 226, 227, 700, 701, 702,
	0, 228, 0, 229, 0, 0, 723, 0, 230, 688,
	0, 375, 0, 0, 231, 232, 233, 234, 684, 686,
	725, 0, 378, 238, 0, 235, 0, 724, 236, 703,
	237, 704, 705, 706, 707, 708, 0, 666, 0, 726,
	239, 240, 241, 727, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 689, 728, 247, 248, 729, 0, 249,
	250, 0, 0, 251, 0, 252, 730, 253, 254, 256,
	389, 255, 731, 257, 258, 260, 259, 626, 0, 656,
	685, 261, 709, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 732, 267, 733, 679, 268, 269,
	270, 271, 272, 273, 0, 274, 680, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 710, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 734, 297, 298, 633, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 673, 312, 300, 301, 313, 735, 314, 711,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	712, 319, 320, 681, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 713, 714, 0,
	0, 332, 333, 682, 683, 654, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 674, 342, 0, 408,
	343, 344, 345, 409, 715, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 627, 0, 0,
	0, 0, 0, 0, 0, 625, 0, 0, 0, 0,
	623, 624, 0, 0, 0, 0, 0, 0, 0, 634,
	0, 0, 0, 0, 1618, 637, 659, 648, 649, 646,
	647, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 676, 641, 0, 0, 0, 191, 192, 193, 353,
	691, 355, 692, 194, 693, 694, 0, 195, 359, 360,
	196, 197, 644, 675, 695, 696, 363, 0, 198, 687,
	0, 667, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 721, 209, 210,
	211, 0, 668, 669, 671, 0, 670, 672, 212, 213,
	418, 214, 697, 215, 698, 699, 629, 216, 0, 217,
	0, 218, 0, 0, 690, 220, 0, 221, 0, 0,
	0, 632, 222, 224, 223, 225, 677, 678, 655, 722,
	0, 0, 0, 0, 0, 226, 227, 700, 701, 702,
	0, 228, 0, 229, 0, 0, 723, 0, 230, 688,
	0, 375, 0, 0, 231, 232, 233, 234, 684, 686,
	725, 0, 378, 238, 0, 235, 0, 724, 236, 703,
	237, 704, 705, 706, 707, 708, 0, 666, 0, 726,
	239, 240, 241, 727, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 689, 728, 247, 248, 729, 0, 249,
	250, 0, 0, 251, 0, 252, 730, 253, 254, 256,
	389, 255, 731, 257, 258, 260, 259, 626, 0, 656,
	685, 261, 709, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 732, 267, 733, 679, 268, 269,
	270, 271, 272, 273, 0, 274, 680, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 710, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 734, 297, 298, 633, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 673, 312, 300, 301, 313, 735, 314, 711,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	712, 319, 320, 681, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 713, 714, 0,
	0, 332, 333, 682, 683, 654, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 674, 342, 0, 408,
	343, 344, 345, 409, 715, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 627, 0, 0,
	0, 0, 0, 0, 0, 625, 0, 0, 0, 0,
	623, 624, 0, 0, 0, 0, 0, 0, 0, 634,
	0, 0, 0, 0, 1616, 637, 659, 648, 649, 646,
	647, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 676, 641, 0, 0, 0, 191, 192, 193, 353,
	691, 355, 692, 194, 693, 694, 0, 195, 359, 360,
	196, 197, 644, 675, 695, 696, 363, 0, 198, 687,
	0, 667, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 721, 209, 210,
	211, 0, 668, 669, 671, 0, 670, 672, 212, 213,
	418, 214, 697, 215, 698, 699, 629, 216, 0, 217,
	0, 218, 0, 0, 690, 220, 0, 221, 0, 0,
	0, 632, 222, 224, 223, 225, 677, 678, 655, 722,
	0, 0, 0, 0, 0, 226, 227, 700, 701, 702,
	0, 228, 0, 229, 0, 0, 723, 0, 230, 688,
	0, 375, 0, 0, 231, 232, 233, 234, 684, 686,
	725, 0, 378, 238, 0, 235, 0, 724, 236, 703,
	237, 704, 705, 706, 707, 708, 0, 666, 0, 726,
	239, 240, 241, 727, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 689, 728, 247, 248, 729, 0, 249,
	250, 0, 0, 251, 0, 252, 730, 253, 254, 256,
	389, 255, 731, 257, 258, 260, 259, 626, 0, 656,
	685, 261, 709, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 732, 267, 733, 679, 268, 269,
	270, 271, 272, 273, 0, 274, 680, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 710, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 734, 297, 298, 633, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 673, 312, 300, 301, 313, 735, 314, 711,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	712, 319, 320, 681, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 713, 714, 0,
	0, 332, 333, 682, 683, 654, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 674, 342, 0, 408,
	343, 344, 345, 409, 715, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 627, 0, 0,
	0, 0, 0, 0, 0, 625, 0, 0, 0, 0,
	623, 624, 0, 0, 0, 0, 0, 0, 0, 634,
	0, 0, 0, 0, 1600, 637, 659, 648, 649, 646,
	647, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 676, 641, 0, 0, 0, 191, 192, 193, 353,
	691, 355, 692, 194, 693, 694, 0, 195, 359, 360,
	196, 197, 644, 675, 695, 696, 363, 0, 198, 687,
	0, 667, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 721, 209, 210,
	211, 0, 668, 669, 671, 0, 670, 672, 212, 213,
	418, 214, 697, 215, 698, 699, 629, 216, 0, 217,
	0, 218, 0, 0, 690, 220, 0, 221, 0, 0,
	0, 632, 222, 224, 223, 225, 677, 678, 655, 722,
	0, 0, 0, 0, 0, 226, 227, 700, 701, 702,
	0, 228, 0, 229, 0, 0, 723, 0, 230, 688,
	0, 375, 0, 0, 231, 232, 233, 234, 684, 686,
	725, 0, 378, 238, 0, 235, 0, 724, 236, 703,
	237, 704, 705, 706, 707, 708, 0, 666, 0, 726,
	239, 240, 241, 727, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 689, 728, 247, 248, 729, 0, 249,
	250, 0, 0, 251, 0, 252, 730, 253, 254, 256,
	389, 255, 731, 257, 258, 260, 259, 626, 0, 656,
	685, 261, 709, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 732, 267, 733, 679, 268, 269,
	270, 271, 272, 273, 0, 274, 680, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 710, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 734, 297, 298, 633, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 673, 312, 300, 301, 313, 735, 314, 711,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	712, 319, 320, 681, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 713, 714, 0,
	0, 332, 333, 682, 683, 654, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 674, 342, 0, 408,
	343, 344, 345, 409, 715, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 627, 0, 0,
	0, 0, 0, 0, 0, 625, 0, 0, 0, 0,
	623, 624, 0, 0, 0, 0, 0, 0, 0, 634,
	0, 0, 0, 0, 1588, 637, 659, 648, 649, 646,
	647, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 676, 641, 0, 0, 0, 191, 192, 193, 353,
	691, 355, 692, 194, 693, 694, 0, 195, 359, 360,
	196, 197, 644, 675, 695, 696, 363, 0, 198, 687,
	0, 667, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 721, 209, 210,
	211, 0, 668, 669, 671, 0, 670, 672, 212, 213,
	418, 214, 697, 215, 698, 699, 629, 216, 0, 217,
	0, 218, 0, 0, 690, 220, 0, 221, 0, 0,
	0, 632, 222, 224, 223, 225, 677, 678, 655, 722,
	0, 0, 0, 0, 0, 226, 227, 700, 701, 702,
	0, 228, 0, 229, 0, 0, 723, 0, 230, 688,
	0, 375, 0, 0, 231, 232, 233, 234, 684, 686,
	725, 0, 378, 238, 0, 235, 0, 724, 236, 703,
	237, 704, 705, 706, 707, 708, 0, 666, 0, 726,
	239, 240, 241, 727, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 689, 728, 247, 248, 729, 0, 249,
	250, 0, 0, 251, 0, 252, 730, 253, 254, 256,
	389, 255, 731, 257, 258, 260, 259, 626, 0, 656,
	685, 261, 709, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 732, 267, 733, 679, 268, 269,
	270, 271, 272, 273, 0, 274, 680, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 710, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 734, 297, 298, 633, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 673, 312, 300, 301, 313, 735, 314, 711,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	712, 319, 320, 681, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 713, 714, 0,
	0, 332, 333, 682, 683, 654, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 674, 342, 0, 408,
	343, 344, 345, 409, 715, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 627, 0, 0,
	0, 0, 0, 0, 0, 625, 0, 0, 0, 0,
	623, 624, 0, 0, 0, 0, 0, 0, 0, 634,
	0, 0, 0, 0, 1586, 637, 1578, 648, 649, 646,
	647, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 676, 641, 0, 0, 0, 191, 192, 193, 353,
	691, 355, 692, 194, 693, 694, 0, 195, 359, 360,
	196, 197, 644, 675, 695, 696, 363, 0, 198, 687,
	0, 667, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 721, 209, 210,
	211, 0, 668, 669, 671, 0, 670, 672, 212, 213,
	418, 214, 697, 1581, 698, 699, 629, 216, 0, 217,
	0, 218, 0, 0, 690, 220, 0, 221, 0, 0,
	0, 632, 222, 224, 223, 225, 677, 678, 655, 722,
	0, 0, 0, 0, 0, 226, 227, 700, 701, 702,
	0, 228, 0, 229, 0, 0, 723, 0, 230, 688,
	0, 375, 0, 0, 231, 1582, 233, 234, 684, 686,
	725, 0, 378, 238, 0, 235, 0, 724, 236, 703,
	237, 704, 705, 706, 707, 708, 0, 666, 0, 726,
	239, 240, 241, 727, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 689, 728, 247, 248, 729, 0, 249,
	250, 0, 0, 251, 0, 252, 730, 1583, 1580, 256,
	389, 255, 731, 257, 258, 260, 259, 626, 0, 656,
	685, 261, 709, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 732, 267, 733, 679, 268, 269,
	270, 271, 272, 273, 0, 274, 680, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 710, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 734, 297, 298, 633, 299,
	0, 303, 304, 305, 306, 1584, 0, 309, 398, 308,
	310, 311, 673, 312, 300, 301, 313, 735, 314, 711,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	712, 319, 320, 681, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 713, 714, 0,
	0, 332, 333, 682, 683, 654, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 674, 342, 0, 408,
	343, 344, 345, 409, 715, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 1579, 351, 627, 0, 0,
	0, 0, 0, 0, 0, 625, 0, 0, 0, 0,
	623, 624, 0, 0, 0, 0, 0, 0, 0, 634,
	0, 0, 0, 0, 1575, 637, 1578, 648, 649, 646,
	647, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 676, 641, 0, 0, 0, 191, 192, 193, 353,
	691, 355, 692, 194, 693, 694, 0, 195, 359, 360,
	196, 197, 644, 675, 695, 696, 363, 0, 198, 687,
	0, 667, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 721, 209, 210,
	211, 0, 668, 669, 671, 0, 670, 672, 212, 213,
	418, 214, 697, 1581, 698, 699, 629, 216, 0, 217,
	0, 218, 0, 0, 690, 220, 0, 221, 0, 0,
	0, 632, 222, 224, 223, 225, 677, 678, 655, 722,
	0, 0, 0, 0, 0, 226, 227, 700, 701, 702,
	0, 228, 0, 229, 0, 0, 723, 0, 230, 688,
	0, 375, 0, 0, 231, 1582, 233, 234, 684, 686,
	725, 0, 378, 238, 0, 235, 0, 724, 236, 703,
	237, 704, 705, 706, 707, 708, 0, 666, 0, 726,
	239, 240, 241, 727, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 689, 728, 247, 248, 729, 0, 249,
	250, 0, 0, 251, 0, 252, 730, 1583, 1580, 256,
	389, 255, 731, 257, 258, 260, 259, 626, 0, 656,
	685, 261, 709, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 732, 267, 733, 679, 268, 269,
	270, 271, 272, 273, 0, 274, 680, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 710, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 734, 297, 298, 633, 299,
	0, 303, 304, 305, 306, 1584, 0, 309, 398, 308,
	310, 311, 673, 312, 300, 301, 313, 735, 314, 711,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	712, 319, 320, 681, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 713, 714, 0,
	0, 332, 333, 682, 683, 654, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 674, 342, 0, 408,
	343, 344, 345, 409, 715, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 1579, 351, 627, 659, 648,
	649, 646, 647, 638, 0, 625, 0, 0, 0, 0,
	623, 624, 0, 0, 188, 189, 0, 0, 190, 634,
	0, 0, 0, 676, 641, 637, 0, 0, 191, 192,
	193, 353, 691, 355, 692, 194, 693, 694, 0, 195,
	359, 360, 196, 197, 644, 675, 695, 696, 363, 0,
	198, 687, 0, 667, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 721,
	209, 210, 211, 0, 668, 669, 671, 0, 670, 672,
	212, 213, 418, 214, 697, 215, 698, 699, 629, 216,
	0, 217, 0, 218, 0, 0, 690, 220, 0, 221,
	0, 0, 0, 632, 222, 224, 223, 225, 677, 678,
	655, 722, 0, 0, 0, 0, 0, 226, 227, 700,
	701, 702, 0, 228, 0, 229, 0, 0, 723, 0,
	230, 688, 0, 375, 0, 0, 231, 232, 233, 234,
	684, 686, 725, 0, 378, 238, 0, 235, 0, 724,
	236, 703, 237, 704, 705, 706, 707, 708, 0, 666,
	0, 726, 239, 240, 241, 727, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 689, 728, 247, 248, 729,
	0, 249, 250, 0, 0, 251, 0, 252, 730, 253,
	254, 256, 389, 255, 731, 257, 258, 260, 259, 626,
	0, 656, 685, 261, 709, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 732, 267, 733, 679,
	268, 269, 270, 271, 272, 273, 0, 274, 680, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 710, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 734, 297, 298,
	633, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 673, 312, 300, 301, 313, 735,
	314, 711, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 712, 319, 320, 681, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 713,
	714, 0, 0, 332, 333, 682, 683, 654, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 674, 342,
	0, 408, 343, 344, 345, 409, 715, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 627,
	659, 648, 649, 646, 647, 638, 0, 625, 0, 0,
	0, 0, 623, 624, 0, 0, 188, 189, 1441, 1145,
	190, 634, 0, 0, 0, 676, 641, 637, 0, 0,
	191, 192, 193, 353, 691, 355, 692, 194, 693, 694,
	0, 195, 359, 360, 196, 197, 644, 675, 695, 696,
	363, 0, 198, 687, 0, 667, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 721, 209, 210, 211, 0, 668, 669, 671, 0,
	670, 672, 212, 213, 418, 214, 697, 215, 698, 699,
	629, 216, 0, 217, 0, 218, 0, 0, 690, 220,
	0, 221, 0, 0, 0, 632, 222, 224, 223, 225,
	677, 678, 655, 722, 0, 0, 0, 0, 0, 226,
	227, 700, 701, 702, 0, 228, 0, 229, 0, 0,
	723, 0, 230, 688, 0, 375, 0, 0, 231, 232,
	233, 234, 684, 686, 725, 0, 378, 238, 0, 235,
	0, 724, 236, 703, 237, 704, 705, 706, 707, 708,
	0, 666, 0, 726, 239, 240, 241, 727, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 689, 728, 247,
	248, 729, 0, 249, 250, 0, 0, 251, 0, 252,
	730, 253, 254, 256, 389, 255, 731, 257, 258, 260,
	259, 626, 0, 656, 685, 261, 709, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 732, 267,
	733, 679, 268, 269, 270, 271, 272, 273, 0, 274,
	680, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	710, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 734,
	297, 298, 633, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 673, 312, 300, 301,
	313, 735, 314, 711, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 712, 319, 320, 681, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 713, 714, 0, 0, 332, 333, 682, 683, 654,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	674, 342, 0, 408, 343, 344, 345, 409, 715, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 627, 0, 0, 0, 0, 0, 0, 0, 625,
	0, 0, 0, 0, 623, 624, 0, 0, 0, 0,
	0, 0, 0, 634, 0, 0, 0, 0, 900, 637,
	659, 648, 649, 646, 647, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 676, 641, 0, 0, 0,
	191, 192, 193, 353, 691, 355, 692, 194, 693, 694,
	0, 195, 359, 360, 196, 197, 644, 675, 695, 696,
	363, 0, 198, 687, 0, 667, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 721, 209, 210, 211, 0, 668, 669, 671, 0,
	670, 672, 212, 213, 418, 214, 697, 215, 698, 699,
	629, 216, 0, 217, 0, 218, 0, 0, 690, 220,
	0, 221, 0, 0, 0, 632, 222, 224, 223, 225,
	677, 678, 655, 722, 0, 0, 0, 0, 0, 226,
	227, 700, 701, 702, 0, 228, 0, 229, 0, 0,
	723, 0, 230, 688, 0, 375, 0, 0, 231, 232,
	233, 234, 684, 686, 725, 0, 378, 238, 0, 235,
	0, 724, 236, 703, 237, 704, 705, 706, 707, 708,
	0, 666, 0, 726, 239, 240, 241, 727, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 689, 728, 247,
	248, 729, 0, 249, 250, 0, 0, 251, 0, 252,
	730, 253, 254, 256, 389, 255, 731, 257, 258, 260,
	259, 626, 0, 656, 685, 261, 709, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 732, 267,
	733, 679, 268, 269, 270, 271, 272, 273, 0, 274,
	680, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	710, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 734,
	297, 298, 633, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 673, 312, 300, 301,
	313, 735, 314, 711, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 712, 319, 320, 681, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 713, 714, 0, 0, 332, 333, 682, 683, 654,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	674, 342, 0, 408, 343, 344, 345, 409, 715, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 627, 0, 0, 0, 0, 0, 0, 0, 625,
	0, 0, 0, 0, 623, 624, 0, 0, 0, 0,
	0, 0, 0, 634, 0, 0, 0, 0, 898, 637,
	659, 648, 649, 646, 647, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 676, 641, 0, 0, 0,
	191, 192, 193, 353, 691, 355, 692, 194, 693, 694,
	0, 195, 359, 360, 196, 197, 644, 675, 695, 696,
	363, 0, 198, 687, 0, 667, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 721, 209, 210, 211, 0, 668, 669, 671, 0,
	670, 672, 212, 213, 418, 214, 697, 215, 698, 699,
	629, 216, 0, 217, 0, 218, 0, 0, 690, 220,
	0, 221, 0, 0, 0, 632, 222, 224, 223, 225,
	677, 678, 655, 722, 0, 0, 0, 0, 0, 226,
	227, 700, 701, 702, 0, 228, 0, 229, 0, 0,
	723, 0, 230, 688, 0, 375, 0, 0, 231, 232,
	233, 234, 684, 686, 725, 0, 378, 238, 0, 235,
	0, 724, 236, 703, 237, 704, 705, 706, 707, 708,
	0, 666, 0, 726, 239, 240, 241, 727, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 689, 728, 247,
	248, 729, 0, 249, 250, 0, 0, 251, 0, 252,
	730, 253, 254, 256, 389, 255, 731, 257, 258, 260,
	259, 626, 0, 656, 685, 261, 709, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 732, 267,
	733, 679, 268, 269, 270, 271, 272, 273, 0, 274,
	680, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	710, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 734,
	297, 298, 633, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 673, 312, 300, 301,
	313, 735, 314, 711, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 712, 319, 320, 681, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 713, 714, 0, 0, 332, 333, 682, 683, 654,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	674, 342, 0, 408, 343, 344, 345, 409, 715, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 627, 659, 648, 649, 646, 647, 638, 0, 625,
	0, 0, 0, 0, 623, 624, 0, 0, 188, 189,
	0, 0, 190, 634, 0, 0, 0, 676, 641, 637,
	0, 0, 191, 192, 193, 353, 691, 355, 692, 194,
	693, 694, 0, 195, 359, 360, 196, 197, 644, 675,
	695, 696, 363, 0, 198, 687, 0, 667, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 721, 209, 210, 211, 0, 668, 669,
	671, 0, 670, 672, 212, 213, 418, 214, 697, 215,
	698, 699, 629, 216, 0, 217, 0, 218, 0, 0,
	690, 220, 0, 221, 0, 0, 0, 632, 222, 224,
	223, 225, 677, 678, 655, 722, 0, 0, 0, 0,
	0, 226, 227, 700, 701, 702, 0, 228, 0, 229,
	0, 0, 723, 0, 230, 688, 0, 375, 0, 0,
	231, 232, 233, 234, 684, 686, 725, 0, 378, 238,
	0, 235, 0, 724, 236, 703, 237, 704, 705, 706,
	707, 708, 0, 666, 0, 726, 239, 240, 241, 727,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 689,
	728, 247, 248, 729, 0, 249, 250, 0, 0, 251,
	0, 252, 2662, 253, 254, 256, 389, 255, 731, 257,
	258, 260, 259, 626, 0, 656, 685, 261, 709, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	732, 267, 733, 679, 268, 269, 270, 271, 272, 273,
	0, 274, 680, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 710, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 734, 297, 298, 633, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 673, 312,
	300, 301, 313, 735, 314, 711, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 712, 319, 320, 681,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 713, 714, 0, 0, 332, 333, 682,
	683, 654, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 674, 342, 0, 408, 343, 344, 345, 409,
	715, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 627, 659, 648, 649, 646, 647, 638,
	0, 625, 0, 0, 0, 0, 623, 624, 0, 0,
	188, 189, 0, 0, 190, 634, 0, 0, 0, 676,
	641, 637, 0, 0, 191, 192, 193, 353, 691, 355,
	692, 194, 693, 694, 0, 195, 359, 360, 196, 197,
	644, 675, 695, 696, 363, 0, 198, 687, 0, 667,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 721, 209, 210, 2581, 0,
	668, 669, 671, 0, 670, 672, 212, 213, 418, 214,
	697, 215, 698, 699, 629, 216, 0, 217, 0, 218,
	0, 0, 690, 220, 0, 221, 0, 0, 0, 632,
	222, 224, 223, 225, 677, 678, 655, 722, 0, 0,
	0, 0, 0, 226, 227, 700, 701, 702, 0, 228,
	0, 229, 0, 0, 723, 0, 230, 688, 0, 375,
	0, 0, 231, 232, 233, 234, 684, 686, 725, 0,
	378, 238, 0, 235, 0, 724, 236, 703, 237, 704,
	705, 706, 707, 708, 0, 666, 0, 726, 239, 240,
	241, 727, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 689, 728, 247, 248, 729, 0, 249, 250, 0,
	0, 251, 0, 252, 730, 253, 254, 256, 389, 255,
	731, 257, 258, 260, 259, 626, 0, 656, 685, 261,
	709, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 732, 267, 733, 679, 268, 269, 270, 271,
	272, 273, 0, 274, 680, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 710, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 734, 297, 298, 633, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	673, 312, 300, 301, 313, 735, 314, 711, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 712, 319,
	320, 681, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 713, 714, 0, 0, 332,
	333, 682, 683, 654, 334, 335, 2580, 337, 0, 0,
	338, 339, 340, 341, 674, 342, 0, 408, 343, 344,
	345, 409, 715, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 627, 659, 648, 649, 646,
	647, 638, 0, 625, 0, 0, 0, 0, 623, 624,
	0, 0, 188, 189, 0, 0, 190, 634, 0, 0,
	0, 676, 641, 637, 0, 0, 191, 192, 193, 353,
	691, 355, 692, 194, 693, 694, 0, 195, 359, 360,
	196, 197, 644, 675, 695, 696, 363, 0, 198, 687,
	0, 667, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 721, 209, 210,
	211, 0, 668, 669, 671, 0, 670, 672, 212, 213,
	418, 214, 697, 215, 698, 699, 629, 216, 0, 217,
	0, 218, 0, 0, 690, 220, 0, 221, 0, 0,
	0, 632, 222, 224, 223, 225, 677, 678, 655, 722,
	0, 0, 0, 0, 0, 226, 227, 700, 701, 702,
	0, 228, 0, 229, 0, 0, 723, 0, 230, 688,
	0, 375, 0, 0, 231, 232, 233, 234, 684, 686,
	725, 0, 378, 238, 0, 235, 0, 724, 236, 703,
	237, 704, 705, 706, 707, 708, 0, 666, 0, 726,
	239, 240, 241, 727, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 689, 728, 247, 248, 729, 0, 249,
	250, 0, 0, 251, 0, 252, 730, 253, 254, 256,
	389, 255, 731, 257, 258, 260, 259, 626, 0, 656,
	685, 261, 709, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 732, 267, 733, 679, 268, 269,
	270, 271, 272, 273, 0, 274, 680, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 710, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 734, 297, 298, 633, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 673, 312, 300, 301, 313, 735, 314, 711,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	712, 319, 320, 681, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 713, 714, 0,
	0, 332, 333, 682, 683, 654, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 674, 342, 0, 408,
	343, 344, 345, 409, 715, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 627, 659, 648,
	649, 646, 647, 638, 0, 625, 0, 0, 0, 0,
	623, 624, 0, 0, 188, 189, 0, 0, 190, 634,
	0, 0, 0, 676, 641, 637, 0, 0, 191, 192,
	193, 2579, 691, 355, 692, 194, 693, 694, 0, 195,
	359, 360, 196, 197, 644, 675, 695, 696, 363, 0,
	198, 687, 0, 667, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 721,
	209, 210, 2581, 0, 668, 669, 671, 0, 670, 672,
	212, 213, 418, 214, 697, 215, 698, 699, 629, 216,
	0, 217, 0, 218, 0, 0, 690, 220, 0, 221,
	0, 0, 0, 632, 222, 224, 223, 225, 677, 678,
	655, 722, 0, 0, 0, 0, 0, 226, 227, 700,
	701, 702, 0, 228, 0, 229, 0, 0, 723, 0,
	230, 688, 0, 375, 0, 0, 231, 232, 233, 234,
	684, 686, 725, 0, 378, 238, 0, 235, 0, 724,
	236, 703, 237, 704, 705, 706, 707, 708, 0, 666,
	0, 726, 239, 240, 241, 727, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 689, 728, 247, 248, 729,
	0, 249, 250, 0, 0, 251, 0, 252, 730, 253,
	254, 256, 389, 255, 731, 257, 258, 260, 259, 626,
	0, 656, 685, 261, 709, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 732, 267, 733, 679,
	268, 269, 270, 271, 272, 273, 0, 274, 680, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 710, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 734, 297, 298,
	633, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 673, 312, 300, 301, 313, 735,
	314, 711, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 712, 319, 320, 681, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 713,
	714, 0, 0, 332, 333, 682, 683, 654, 334, 335,
	2580, 337, 0, 0, 338, 339, 340, 341, 674, 342,
	0, 408, 343, 344, 345, 409, 715, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 627,
	659, 648, 649, 646, 647, 638, 0, 625, 0, 0,
	0, 0, 623, 624, 0, 0, 188, 189, 0, 0,
	190, 634, 0, 0, 0, 676, 641, 637, 0, 0,
	191, 192, 193, 353, 691, 355, 692, 194, 693, 694,
	0, 195, 359, 360, 196, 197, 644, 675, 695, 696,
	363, 0, 198, 687, 0, 667, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 721, 209, 210, 211, 0, 668, 669, 671, 0,
	670, 672, 212, 213, 418, 214, 697, 215, 698, 699,
	0, 216, 0, 217, 0, 218, 0, 0, 690, 220,
	0, 221, 0, 0, 0, 632, 222, 224, 223, 225,
	677, 678, 655, 722, 0, 0, 0, 0, 0, 226,
	227, 700, 701, 702, 0, 228, 0, 229, 0, 0,
	723, 0, 230, 688, 0, 375, 0, 0, 231, 232,
	233, 234, 684, 686, 725, 0, 378, 238, 0, 235,
	0, 724, 236, 703, 237, 704, 705, 706, 707, 708,
	0, 666, 0, 726, 239, 240, 241, 727, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 689, 728, 247,
	248, 729, 0, 249, 250, 0, 0, 251, 0, 252,
	730, 253, 254, 256, 389, 255, 731, 257, 258, 260,
	259, 0, 0, 656, 685, 261, 709, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 732, 267,
	733, 679, 268, 269, 270, 271, 272, 273, 0, 274,
	680, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	710, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 734,
	297, 298, 1598, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 673, 312, 300, 301,
	313, 735, 314, 711, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 712, 319, 320, 681, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 713, 714, 0, 0, 332, 333, 682, 683, 654,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	674, 342, 0, 408, 343, 344, 345, 409, 715, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 659, 648, 649, 646, 647, 638, 0, 0, 1596,
	0, 0, 0, 0, 1594, 1595, 0, 188, 189, 0,
	0, 190, 0, 1597, 0, 0, 676, 641, 0, 637,
	0, 191, 192, 193, 0, 691, 355, 692, 194, 693,
	694, 0, 195, 359, 360, 196, 197, 644, 675, 695,
	696, 363, 0, 198, 687, 0, 667, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 721, 209, 210, 2581, 0, 668, 669, 671,
	0, 670, 672, 212, 213, 418, 214, 697, 215, 698,
	699, 629, 216, 0, 217, 0, 218, 0, 0, 690,
	220, 0, 221, 0, 0, 0, 632, 222, 224, 223,
	225, 677, 678, 655, 722, 0, 0, 0, 0, 0,
	226, 227, 700, 701, 702, 0, 228, 0, 229, 0,
	0, 723, 0, 230, 688, 0, 375, 0, 0, 231,
	232, 233, 234, 684, 686, 0, 0, 378, 238, 0,
	235, 0, 724, 236, 703, 237, 704, 705, 706, 707,
	708, 0, 666, 0, 0, 239, 240, 241, 727, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 689, 728,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 730, 253, 254, 256, 389, 255, 731, 257, 258,
	260, 259, 626, 0, 656, 685, 261, 709, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 732,
	267, 733, 679, 268, 269, 270, 271, 272, 273, 0,
	274, 680, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 710, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	734, 297, 298, 633, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 673, 312, 300,
	301, 313, 0, 314, 711, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 712, 319, 320, 681, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 713, 714, 0, 0, 332, 333, 682, 683,
	654, 334, 335, 2580, 337, 0, 0, 338, 339, 340,
	341, 674, 342, 0, 408, 343, 344, 345, 409, 715,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 659, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 623, 624, 0, 188, 189,
	0, 0, 190, 0, 634, 0, 0, 676, 0, 0,
	637, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 675,
	361, 362, 363, 0, 198, 687, 0, 667, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 721, 209, 210, 211, 0, 668, 669,
	671, 0, 670, 672, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 677, 678, 0, 722, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 723, 0, 230, 688, 0, 375, 0, 0,
	231, 232, 233, 234, 684, 686, 725, 0, 378, 238,
	0, 235, 0, 724, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 726, 239, 240, 241, 727,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 689,
	728, 247, 248, 729, 0, 249, 250, 0, 0, 251,
	0, 252, 730, 253, 254, 256, 389, 255, 731, 257,
	258, 260, 259, 0, 0, 0, 685, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	732, 267, 733, 679, 268, 269, 270, 271, 272, 273,
	0, 274, 680, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 734, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 673, 312,
	300, 301, 313, 735, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 681,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 682,
	683, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 674, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 0, 346, 951, 0, 791, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 2195, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 795, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 721, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 722,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 723, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 376, 377,
	725, 0, 378, 238, 0, 235, 0, 724, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 726,
	239, 240, 241, 727, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 728, 247, 248, 729, 0, 249,
	250, 0, 0, 251, 0, 252, 730, 253, 254, 256,
	389, 255, 731, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 732, 267, 733, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 734, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 146, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 735, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 148, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 954, 410, 0, 0, 346, 611, 0,
	185, 140, 347, 348, 349, 350, 351, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 117,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 376, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 774, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	146, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	148, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 954, 410, 0,
	0, 346, 0, 0, 185, 140, 347, 348, 349, 350,
	351, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 768, 0, 1224, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 774, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 146, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 148, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 954, 410, 0, 0, 346, 611, 0, 185, 140,
	347, 348, 349, 350, 351, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 768, 0, 1224, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	376, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 146, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 148, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 954, 410, 0, 0, 346,
	1935, 0, 185, 140, 347, 348, 349, 350, 351, 0,
	141, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 117, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 774, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 0, 346, 767, 0, 185, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 768, 0, 773, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 376, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 774, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 0, 346, 0, 0,
	185, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 768, 0, 773,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 376, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 774, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	0, 346, 0, 0, 185, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 768, 0, 773, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 0, 346, 0, 0, 0, 185,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 1262, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 0,
	346, 0, 0, 185, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 1745, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 0, 346, 0, 0, 185, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 2111, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 376,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 659, 648,
	649, 646, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	1227, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 691, 355, 692, 194, 693, 694, 0, 195,
	359, 360, 196, 197, 0, 0, 695, 696, 363, 0,
	198, 364, 0, 795, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 721,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 697, 215, 698, 699, 0, 216,
	0, 217, 0, 218, 0, 0, 690, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	655, 722, 0, 0, 0, 0, 0, 226, 227, 700,
	701, 702, 0, 228, 0, 229, 0, 0, 723, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	376, 377, 725, 0, 378, 238, 0, 235, 0, 724,
	236, 703, 237, 704, 705, 706, 707, 708, 0, 666,
	0, 726, 239, 240, 241, 727, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 728, 247, 248, 729,
	0, 249, 250, 0, 0, 251, 0, 252, 730, 253,
	254, 256, 389, 255, 731, 257, 258, 260, 259, 0,
	0, 656, 390, 261, 709, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 732, 267, 733, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 710, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 734, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 735,
	314, 711, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 712, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 713,
	714, 0, 0, 332, 333, 406, 407, 654, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 715, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 1007,
	0, 791, 790, 0, 0, 0, 788, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 795, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 721, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 722, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 723, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 376, 377, 725, 0, 378, 238, 0,
	235, 0, 724, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 726, 239, 240, 241, 727, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 728,
	247, 248, 729, 0, 249, 250, 0, 0, 251, 0,
	252, 730, 253, 254, 256, 389, 255, 731, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 732,
	267, 733, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	734, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 735, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 946, 0, 791, 790, 0, 0, 0, 788,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 795,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 721, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 722, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 723, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 945, 377, 725, 0,
	378, 238, 0, 235, 0, 724, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 726, 239, 240,
	241, 727, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 728, 247, 248, 729, 0, 249, 250, 0,
	0, 251, 0, 252, 730, 253, 254, 256, 389, 255,
	731, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 732, 267, 733, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 734, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 735, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 912, 0, 791, 790, 0,
	0, 0, 788, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 795, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 721, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	722, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 723, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 911,
	377, 725, 0, 378, 238, 0, 235, 0, 724, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	726, 239, 240, 241, 727, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 728, 247, 248, 729, 0,
	249, 250, 0, 0, 251, 0, 252, 730, 253, 254,
	256, 389, 255, 731, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 732, 267, 733, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 734, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 735, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 784, 0,
	791, 790, 0, 0, 0, 788, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 795, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 721, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 722, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	723, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 786, 377, 725, 0, 378, 238, 0, 235,
	0, 724, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 726, 239, 240, 241, 727, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 728, 247,
	248, 729, 0, 249, 250, 0, 0, 251, 0, 252,
	730, 253, 254, 256, 389, 255, 731, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 732, 267,
	733, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 734,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 735, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	501, 346, 185, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 181, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 180, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 178, 346, 185, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 184, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 181, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 180, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 791, 790, 346, 0, 0, 788, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	184, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 795, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 721, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 722, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 723, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 725, 0, 378,
	238, 0, 235, 0, 724, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 726, 239, 240, 241,
	727, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 728, 247, 248, 729, 0, 249, 250, 0, 0,
	251, 0, 252, 730, 253, 254, 256, 389, 255, 731,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 732, 267, 733, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 734, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 735, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 185, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 181, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 180, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 791, 790, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 184, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 795, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 721, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 722, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 723, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 376, 377, 725, 0, 378, 238, 0,
	235, 0, 724, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 726, 239, 240, 241, 727, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 728,
	247, 248, 729, 0, 249, 250, 0, 0, 251, 0,
	252, 730, 253, 254, 256, 389, 255, 731, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 732,
	267, 733, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	734, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 735, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	185, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 376, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 791,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 184, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 795, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	721, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 722, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 723,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 725, 0, 378, 238, 0, 235, 0,
	724, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 726, 239, 240, 241, 727, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 728, 247, 248,
	729, 0, 249, 250, 0, 0, 251, 0, 252, 730,
	253, 254, 256, 389, 255, 731, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 732, 267, 733,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 734, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	735, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 185, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 1675,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 1673, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 1721, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 1678, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	376, 377, 0, 0, 378, 238, 1719, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 1677, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 1720, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 185, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 1675, 198,
	364, 0, 0, 1670, 199, 200, 201, 0, 203, 204,
	205, 202, 1673, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 1678, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 1669,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 1677, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 1676, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 928, 346, 185,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 774, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 780,
	346, 185, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 782, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 774, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 776, 346, 185, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 778, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 774, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 430, 346, 185, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 429, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 376, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 428, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 185, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 1658, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 185, 2264, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 185, 2264, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 2261, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 185, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 376, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 774, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 1420, 346, 185, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 1418, 346, 185, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 376, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 185, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	188, 189, 1400, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 527, 346, 185, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 986, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 376, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 529, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 524, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 1277, 346, 185, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	1276, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 527, 346,
	185, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	986, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 376, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 529, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	524, 404, 405, 0, 0, 332, 987, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	527, 346, 185, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 518, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 529, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 970, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 524, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 943, 346, 185, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 942, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 939, 346, 185, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 938, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 936, 346, 185, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	935, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 932, 346,
	185, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 931, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 185,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 188, 189, 920, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 918,
	346, 185, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 917, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 914, 346, 185, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 907, 346, 185, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 909, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 798, 346, 185, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 800,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 796, 346, 185,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 527,
	346, 185, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 518, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 376, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 517, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 529, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 519, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 520, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 524, 404, 405, 0, 0, 332, 522, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 509, 346, 185, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 510, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 507, 346, 185, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 376, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 499, 346, 185, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 376,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 449, 346, 185,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 185, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	376, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 185, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 1982,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 185, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 1980, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 185, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 1969, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 185, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 510,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 185, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	1287, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	0, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 185, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 751, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 185, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 376, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 0, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 0,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 397, 0, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 1077, 1078, 0, 1107, 1108, 1109, 1117, 1118,
	1119, 0, 0, 0, 0, 1095, 0, 0, 0, 1110,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 1121,
	0, 0, 0, 0, 1876, 1877, 0, 1894, 1895, 1896,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1079, 2278, 0, 0, 1077, 1078, 1099, 1107, 1108, 1109,
	1117, 1118, 1119, 1096, 0, 0, 0, 1095, 0, 0,
	0, 1110, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 1121, 0, 0, 0, 0, 0, 0, 1891, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1079, 0, 0, 0, 0, 0, 1099, 0,
	0, 1102, 1103, 1104, 1105, 1096, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1114, 1122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1882, 0, 0, 0, 0, 0, 0, 1120,
	0, 0, 0, 1102, 1103, 1104, 1105, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 1112, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 1897, 1114, 1122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1111, 1120, 0, 0, 0, 0, 1892, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 0,
	0, 0, 0, 0, 0, 1106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1101, 0, 1111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1115, 0, 0,
	0, 0, 0, 1094, 0, 0, 0, 0, 0, 0,
	0, 0, 1893, 0, 0, 0, 0, 1106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1101, 0, 0, 0, 0, 0, 0, 1077,
	1078, 0, 1107, 1108, 1109, 1117, 1118, 1119, 0, 1115,
	0, 0, 1095, 0, 0, 1094, 1110, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 1121, 1113, 0, 0,
	1091, 1092, 1098, 1097, 1093, 1116, 0, 1090, 1088, 1089,
	1081, 1082, 1083, 1084, 1086, 1087, 0, 1079, 0, 0,
	0, 0, 0, 1099, 1868, 0, 0, 0, 0, 0,
	1096, 0, 1888, 1889, 1890, 0, 0, 0, 0, 1887,
	1885, 1886, 1878, 1879, 1880, 1881, 1883, 1884, 0, 1113,
	0, 0, 1091, 1092, 1098, 1097, 1093, 1116, 0, 1090,
	1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087, 0, 0,
	0, 0, 2550, 0, 0, 0, 0, 0, 1102, 1103,
	1104, 1105, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 1077, 1078, 0, 1107, 1108, 1109, 1117, 1118,
	1119, 0, 0, 0, 0, 1095, 0, 1114, 1122, 1110,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 1121,
	0, 0, 0, 0, 0, 0, 1120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1079, 0, 0, 0, 1112, 0, 1099, 0, 0, 0,
	0, 1100, 0, 1096, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1102, 1103, 1104, 1105, 0, 0, 0, 0, 0,
	1085, 0, 1106, 0, 0, 1876, 1877, 0, 1894, 1895,
	1896, 0, 0, 0, 0, 0, 0, 1101, 0, 0,
	1114, 1122, 2084, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1115, 0, 0, 0, 0, 1120,
	1094, 1077, 1078, 0, 1107, 1108, 1109, 1117, 1118, 1119,
	0, 0, 0, 0, 1095, 0, 0, 1112, 1110, 1891,
	0, 0, 0, 0, 1100, 1080, 0, 0, 1121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1079,
	1111, 0, 0, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 1096, 0, 1113, 0, 0, 1091, 1092, 1098,
	1097, 1093, 1116, 0, 1090, 1088, 1089, 1081, 1082, 1083,
	1084, 1086, 1087, 1882, 0, 1106, 0, 2500, 0, 1876,
	1877, 0, 1894, 1895, 1896, 0, 0, 0, 0, 0,
	1101, 0, 0, 0, 0, 0, 2083, 0, 0, 0,
	1102, 1103, 1104, 1105, 0, 0, 0, 1115, 0, 1085,
	0, 0, 1897, 1094, 1077, 1078, 0, 1107, 1108, 1109,
	1117, 1118, 1119, 0, 0, 0, 0, 1095, 0, 1114,
	1122, 1110, 0, 1891, 0, 0, 0, 1892, 1080, 0,
	0, 1121, 0, 0, 0, 0, 0, 0, 1120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1079, 0, 0, 0, 1112, 0, 1099, 0,
	0, 0, 0, 1100, 0, 1096, 0, 1113, 0, 0,
	1091, 1092, 1098, 1097, 1093, 1116, 0, 1090, 1088, 1089,
	1081, 1082, 1083, 1084, 1086, 1087, 0, 1882, 0, 1111,
	2454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1893, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 1103, 1104, 1105, 0, 0, 0,
	0, 0, 1085, 0, 1106, 0, 1897, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	0, 0, 1114, 1122, 0, 0, 0, 0, 0, 0,
	0, 1892, 0, 0, 0, 0, 1115, 0, 0, 0,
	0, 1120, 1094, 1077, 1078, 0, 1107, 1108, 1109, 1117,
	1118, 1119, 0, 0, 0, 0, 1095, 0, 0, 1112,
	1110, 0, 0, 0, 0, 0, 1100, 1080, 0, 0,
	1121, 0, 0, 1888, 1889, 1890, 0, 0, 0, 0,
	1887, 1885, 1886, 1878, 1879, 1880, 1881, 1883, 1884, 0,
	0, 1079, 1111, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 1096, 0, 1113, 1893, 0, 1091,
	1092, 1098, 1097, 1093, 1116, 0, 1090, 1088, 1089, 1081,
	1082, 1083, 1084, 1086, 1087, 0, 0, 1106, 0, 2424,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1102, 1103, 1104, 1105, 0, 0, 0, 1115,
	0, 1085, 0, 0, 0, 1094, 1077, 1078, 0, 1107,
	1108, 1109, 1117, 1118, 1119, 0, 0, 0, 0, 1095,
	0, 1114, 1122, 1110, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 1121, 0, 0, 0, 1888, 1889, 1890,
	1120, 0, 0, 0, 1887, 1885, 1886, 1878, 1879, 1880,
	1881, 1883, 1884, 0, 1079, 0, 0, 0, 1112, 0,
	1099, 0, 0, 0, 0, 1100, 0, 1096, 0, 1113,
	0, 0, 1091, 1092, 1098, 1097, 1093, 1116, 0, 1090,
	1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087, 0, 0,
	0, 1111, 2419, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 1103, 1104, 1105, 0,
	0, 0, 0, 0, 1085, 0, 1106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 0, 0, 1114, 1122, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1115, 0,
	0, 0, 0, 1120, 1094, 1077, 1078, 0, 1107, 1108,
	1109, 1117, 1118, 1119, 0, 0, 0, 0, 1095, 0,
	0, 1112, 1110, 0, 0, 0, 0, 0, 1100, 1080,
	0, 0, 1121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1079, 1111, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 1096, 0, 1113, 0,
	0, 1091, 1092, 1098, 1097, 1093, 1116, 0, 1090, 1088,
	1089, 1081, 1082, 1083, 1084, 1086, 1087, 0, 0, 1106,
	0, 2415, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1102, 1103, 1104, 1105, 0, 0,
	0, 1115, 0, 1085, 0, 0, 0, 1094, 1077, 1078,
	0, 1107, 1108, 1109, 1117, 1118, 1119, 0, 0, 0,
	0, 1095, 0, 1114, 1122, 1110, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 1121, 0, 0, 0, 0,
	0, 0, 1120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1079, 0, 0, 0,
	1112, 0, 1099, 0, 0, 0, 0, 1100, 0, 1096,
	0, 1113, 0, 0, 1091, 1092, 1098, 1097, 1093, 1116,
	0, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087,
	0, 0, 0, 1111, 2345, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1102, 1103, 1104,
	1105, 0, 0, 0, 0, 0, 1085, 0, 1106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 0, 0, 1114, 1122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1115, 0, 0, 0, 0, 1120, 1094, 1077, 1078, 0,
	1107, 1108, 1109, 1117, 1118, 1119, 0, 0, 0, 0,
	1095, 0, 0, 1112, 1110, 0, 0, 0, 0, 0,
	1100, 1080, 0, 0, 1121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1079, 1111, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 1096, 0,
	1113, 0, 0, 1091, 1092, 1098, 1097, 1093, 1116, 0,
	1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087, 0,
	0, 1106, 0, 2311, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1102, 1103, 1104, 1105,
	0, 0, 0, 1115, 0, 1085, 0, 0, 0, 1094,
	1077, 1078, 0, 1107, 1108, 1109, 1117, 1118, 1119, 0,
	0, 0, 0, 1095, 0, 1114, 1122, 1110, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 1121, 0, 0,
	0, 0, 0, 0, 1120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1079, 0,
	0, 0, 1112, 0, 1099, 0, 0, 0, 0, 1100,
	0, 1096, 0, 1113, 0, 0, 1091, 1092, 1098, 1097,
	1093, 1116, 0, 1090, 1088, 1089, 1081, 1082, 1083, 1084,
	1086, 1087, 0, 0, 0, 1111, 2310, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1102,
	1103, 1104, 1105, 0, 0, 0, 0, 0, 1085, 0,
	1106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 0, 0, 1114, 1122,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1115, 0, 0, 0, 0, 1120, 1094, 1077,
	1078, 0, 1107, 1108, 1109, 1117, 1118, 1119, 0, 0,
	0, 0, 1095, 0, 0, 1112, 1110, 0, 0, 0,
	0, 0, 1100, 1080, 0, 0, 1121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 1111, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	1096, 0, 1113, 0, 0, 1091, 1092, 1098, 1097, 1093,
	1116, 0, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086,
	1087, 0, 0, 1106, 0, 2275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1102, 1103,
	1104, 1105, 0, 0, 0, 1115, 0, 1085, 0, 0,
	0, 1094, 1077, 1078, 0, 1107, 1108, 1109, 1117, 1118,
	1119, 0, 0, 0, 0, 1095, 0, 1114, 1122, 1110,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 1121,
	0, 0, 0, 0, 0, 0, 1120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1079, 0, 0, 0, 1112, 0, 1099, 0, 0, 0,
	0, 1100, 0, 1096, 0, 1113, 0, 0, 1091, 1092,
	1098, 1097, 1093, 1116, 0, 1090, 1088, 1089, 1081, 1082,
	1083, 1084, 1086, 1087, 0, 0, 0, 1111, 2114, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1102, 1103, 1104, 1105, 0, 0, 0, 0, 0,
	1085, 0, 1106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1101, 0, 0,
	1114, 1122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1115, 0, 0, 0, 0, 1120,
	1094, 1077, 1078, 0, 1107, 1108, 1109, 1117, 1118, 1119,
	0, 0, 0, 0, 1095, 0, 0, 1112, 1110, 0,
	0, 0, 0, 0, 1100, 1080, 0, 0, 1121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1079,
	1111, 0, 0, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 1096, 0, 1113, 0, 0, 1091, 1092, 1098,
	1097, 1093, 1116, 0, 1090, 1088, 1089, 1081, 1082, 1083,
	1084, 1086, 1087, 0, 0, 1106, 0, 2090, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1102, 1103, 1104, 1105, 0, 0, 0, 1115, 0, 1085,
	0, 0, 0, 1094, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1114,
	1122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1112, 0, 0, 0,
	0, 0, 0, 1100, 0, 0, 0, 1113, 0, 0,
	1091, 1092, 1098, 1097, 1093, 1116, 0, 1090, 1088, 1089,
	1081, 1082, 1083, 1084, 1086, 1087, 0, 0, 0, 1111,
	1536, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	1077, 1078, 0, 1107, 1108, 1109, 1117, 1118, 1119, 0,
	0, 0, 0, 1095, 0, 0, 1115, 1110, 0, 0,
	0, 0, 1094, 0, 1080, 0, 0, 1121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1079, 0,
	0, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 1096, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1113, 0, 0, 1091,
	1092, 1098, 1097, 1093, 1116, 0, 1090, 1088, 1089, 1081,
	1082, 1083, 1084, 1086, 1087, 0, 0, 1838, 0, 1102,
	1103, 1104, 1105, 0, 0, 0, 0, 0, 1085, 2613,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1077,
	1078, 0, 1107, 1108, 1109, 1117, 1118, 1119, 1114, 1122,
	0, 0, 1095, 0, 0, 0, 1110, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 1121, 1120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1112, 0, 1079, 0, 0,
	0, 0, 1100, 1099, 0, 0, 0, 0, 0, 0,
	1096, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2612, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1102, 1103,
	1104, 1105, 0, 1106, 0, 0, 0, 1085, 0, 1908,
	0, 0, 1907, 0, 0, 0, 0, 0, 1101, 0,
	0, 0, 0, 0, 0, 0, 0, 1114, 1122, 0,
	0, 0, 0, 0, 0, 1115, 0, 0, 0, 0,
	0, 1094, 0, 0, 0, 0, 1120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1112, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 0, 0, 0, 0, 0, 1077,
	1078, 0, 1107, 1108, 1109, 1117, 1118, 1119, 0, 0,
	0, 0, 1095, 0, 0, 0, 1110, 1111, 0, 0,
	0, 1811, 0, 1080, 0, 1113, 1121, 0, 1091, 1092,
	1098, 1097, 1093, 1116, 0, 1090, 1088, 1089, 1081, 1082,
	1083, 1084, 1086, 1087, 0, 0, 0, 1079, 0, 0,
	0, 0, 1106, 1099, 0, 0, 0, 0, 0, 0,
	1096, 0, 0, 0, 0, 0, 0, 1101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1115, 0, 0, 1812, 0, 0,
	1094, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1102, 1103,
	1104, 1105, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 1634, 0, 0, 0, 0, 0, 1077, 1078,
	0, 1107, 1108, 1109, 1117, 1118, 1119, 1114, 1122, 0,
	0, 1095, 0, 0, 0, 1110, 0, 0, 0, 1633,
	0, 0, 1080, 0, 1113, 1121, 1120, 1091, 1092, 1098,
	1097, 1093, 1116, 0, 1090, 1088, 1089, 1081, 1082, 1083,
	1084, 1086, 1087, 0, 1112, 0, 1079, 0, 0, 0,
	0, 1100, 1099, 0, 0, 0, 0, 0, 0, 1096,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1102, 1103, 1104,
	1105, 0, 1106, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1101, 0, 0,
	0, 0, 0, 0, 0, 0, 1114, 1122, 0, 0,
	0, 0, 0, 0, 1115, 0, 0, 0, 0, 0,
	1094, 0, 0, 0, 0, 1120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1112, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 0, 0, 1077, 1078,
	0, 1107, 1108, 1109, 1117, 1118, 1119, 0, 0, 0,
	0, 1095, 0, 0, 0, 1110, 1111, 0, 0, 0,
	0, 0, 1080, 0, 1113, 1121, 0, 1091, 1092, 1098,
	1097, 1093, 1116, 0, 1090, 1088, 1089, 1081, 1082, 1083,
	1084, 1086, 1087, 0, 0, 0, 1079, 0, 0, 0,
	0, 1106, 1099, 0, 0, 0, 0, 0, 0, 1096,
	0, 0, 0, 0, 0, 0, 1101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1115, 0, 0, 0, 1077, 1078, 1094,
	1107, 1108, 1109, 1117, 1118, 1119, 0, 0, 0, 0,
	1095, 0, 0, 0, 1110, 0, 0, 1102, 1103, 1104,
	1105, 1080, 0, 0, 1121, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1079, 1114, 1122, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 1096, 0,
	0, 0, 0, 1113, 0, 1120, 1091, 1092, 1098, 1097,
	1093, 1116, 0, 1090, 1088, 1089, 1081, 1082, 1083, 1084,
	1086, 1087, 0, 1112, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1102, 1103, 1104, 1105,
	0, 0, 0, 0, 0, 1085, 1111, 608, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1114, 1122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1106, 0, 0, 1120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 0, 0, 0,
	0, 0, 1112, 0, 0, 0, 0, 0, 0, 1100,
	0, 0, 0, 1115, 0, 0, 0, 1077, 1078, 1094,
	1107, 1108, 1109, 1117, 1118, 1119, 0, 0, 0, 0,
	1095, 0, 0, 0, 1110, 1111, 0, 0, 0, 0,
	0, 1080, 0, 0, 1121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1079, 0, 0, 0, 0,
	1106, 1099, 0, 0, 0, 0, 0, 0, 1096, 0,
	0, 0, 0, 1113, 0, 1101, 1091, 1092, 1098, 1097,
	1093, 1116, 0, 1090, 1088, 1089, 1081, 1082, 1083, 1084,
	1086, 1087, 1115, 0, 0, 0, 0, 0, 1094, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1102, 1103, 1104, 1105,
	2094, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	1914, 0, 0, 0, 0, 0, 1077, 1078, 0, 1107,
	1108, 1109, 1117, 1118, 1119, 1114, 1122, 0, 0, 1095,
	0, 0, 0, 1110, 0, 0, 0, 1909, 0, 0,
	1080, 0, 1113, 1121, 1120, 1091, 1092, 1098, 1097, 1093,
	1116, 0, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086,
	1087, 0, 1112, 0, 1079, 0, 0, 0, 0, 1100,
	1099, 0, 0, 0, 0, 0, 0, 1096, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 1103, 1104, 1105, 0,
	1106, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 0, 0, 0, 0,
	0, 0, 0, 0, 1114, 1122, 0, 0, 0, 0,
	0, 0, 1115, 0, 0, 0, 0, 0, 1094, 0,
	0, 0, 0, 1120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1112, 0, 0, 0, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 0, 1077, 1078, 0, 1107,
	1108, 1109, 1117, 1118, 1119, 0, 0, 0, 0, 1095,
	0, 0, 0, 1110, 1111, 0, 0, 0, 0, 0,
	1080, 0, 1113, 1121, 0, 1091, 1092, 1098, 1097, 1093,
	1116, 0, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086,
	1087, 0, 0, 0, 1079, 0, 0, 0, 0, 1106,
	1099, 0, 0, 0, 0, 0, 0, 1096, 0, 0,
	0, 0, 0, 0, 1101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1115, 0, 0, 0, 0, 0, 1094, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 1103, 1104, 1105, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1077, 1078, 0, 1107, 1108,
	1109, 1117, 1118, 1119, 1114, 1122, 0, 0, 1095, 0,
	0, 0, 1110, 0, 0, 0, 1867, 0, 0, 1080,
	0, 1113, 1121, 1120, 1091, 1092, 1098, 1097, 1093, 1116,
	0, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087,
	0, 1112, 0, 1079, 0, 0, 0, 0, 1100, 1099,
	0, 0, 0, 0, 0, 0, 1096, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1874, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1102, 1103, 1104, 1105, 0, 1106,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 0, 0, 0, 0, 0,
	0, 0, 0, 1114, 1122, 0, 0, 0, 0, 0,
	0, 1115, 0, 0, 0, 0, 0, 1094, 0, 0,
	0, 0, 1120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1112, 0, 0, 0, 0, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 0, 1077, 1078, 0, 1107, 1108,
	1109, 1117, 1118, 1119, 0, 0, 0, 0, 1095, 0,
	0, 0, 1110, 1111, 0, 0, 0, 0, 0, 1080,
	0, 1113, 1121, 0, 1091, 1092, 1098, 1097, 1093, 1116,
	0, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087,
	0, 0, 0, 1079, 0, 0, 0, 0, 1106, 1099,
	0, 0, 0, 0, 0, 0, 1096, 0, 0, 0,
	0, 0, 0, 1101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1115, 0, 0, 0, 1077, 1078, 1094, 1107, 1108, 1109,
	1117, 1118, 1119, 0, 0, 0, 0, 1095, 0, 0,
	0, 1110, 0, 0, 1102, 1103, 1104, 1105, 1080, 0,
	0, 1121, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1079, 1114, 1122, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 1096, 0, 0, 0, 0,
	1113, 0, 1120, 1091, 1092, 1098, 1097, 1093, 1116, 0,
	1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087, 0,
	1112, 0, 0, 0, 0, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 1103, 1104, 1105, 0, 0, 0,
	0, 0, 1085, 1111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1114, 1122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1106, 0,
	0, 1120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 0, 0, 0, 0, 0, 1112,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 0,
	1115, 0, 0, 0, 1077, 1078, 1094, 1107, 1108, 1109,
	1117, 1118, 1119, 0, 0, 0, 0, 1095, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 1121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1079, 0, 0, 0, 0, 1106, 1099, 0,
	0, 0, 0, 0, 0, 1096, 0, 0, 0, 0,
	1113, 0, 1101, 1091, 1092, 1098, 1097, 1093, 1116, 0,
	1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087, 1115,
	0, 0, 0, 0, 0, 1094, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 1103, 1104, 1105, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1114, 1122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1113,
	0, 1120, 1091, 1092, 1098, 1097, 1093, 1116, 0, 1090,
	1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087, 37, 1112,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 38,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 0, 0, 0, 1077, 1078, 0,
	1107, 1108, 1109, 1117, 1118, 1119, 122, 0, 0, 0,
	1095, 0, 0, 0, 0, 0, 43, 0, 46, 0,
	0, 1080, 0, 0, 1121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1106, 0, 47,
	0, 0, 0, 49, 0, 1079, 0, 52, 0, 0,
	123, 1099, 1101, 0, 53, 0, 104, 54, 1096, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1115,
	0, 0, 0, 0, 0, 1094, 0, 0, 0, 55,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1102, 1103, 1104, 1105,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1114, 1122, 0, 0, 1113,
	0, 0, 1091, 1092, 1098, 1097, 1093, 1116, 0, 1090,
	1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1112, 0, 57, 0, 0, 0, 0, 1100,
	0, 58, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	65, 118, 59, 0, 60, 0, 61, 0, 124, 0,
	0, 0, 0, 62, 0, 1332, 0, 0, 146, 0,
	0, 0, 0, 0, 0, 73, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	1106, 0, 0, 0, 0, 0, 0, 0, 148, 1340,
	1329, 1359, 1318, 1350, 1349, 1101, 0, 1320, 1319, 0,
	0, 0, 0, 1361, 1360, 0, 0, 0, 97, 0,
	0, 0, 1115, 0, 0, 0, 0, 119, 1094, 0,
	0, 0, 0, 0, 0, 147, 0, 0, 0, 0,
	0, 0, 0, 140, 0, 0, 0, 0, 0, 0,
	141, 1355, 0, 1347, 1346, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 4, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1344, 1342, 1343, 0,
	0, 0, 1113, 0, 0, 1091, 1092, 1098, 1097, 1093,
	1116, 0, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086,
	1087, 1328, 0, 0, 0, 0, 0, 0, 1333, 1331,
	1334, 1335, 1336, 1337, 1338, 0, 1358, 0, 0, 0,
	0, 0, 0, 1322, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1348, 0, 0, 0, 1330, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1340, 1329, 1359, 1318, 1350, 1349, 0, 0,
	1320, 1319, 0, 0, 0, 1341, 1361, 1360, 0, 1461,
	1459, 1460, 1463, 1462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1325, 548, 0,
	574, 0, 0, 0, 1355, 0, 1347, 1346, 1339, 1326,
	0, 0, 0, 0, 0, 0, 1345, 0, 553, 1363,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 551, 1323, 0, 0, 0, 1356, 1357, 0, 1344,
	1342, 1343, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 552, 0, 0, 0, 0, 554, 1327, 0,
	0, 0, 0, 1362, 1328, 560, 561, 0, 0, 0,
	570, 1333, 1331, 1334, 1335, 1336, 1337, 1338, 0, 1358,
	0, 0, 0, 0, 575, 555, 1322, 1321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 573, 0, 0,
	0, 0, 1324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1348, 0, 0, 0, 1330, 0,
	0, 0, 556, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 557, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 1341, 0,
	0, 0, 0, 0, 0, 0, 564, 0, 0, 0,
	0, 559, 566, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 563, 0, 0, 0, 0, 0,
	1325, 0, 0, 0, 0, 576, 0, 0, 0, 0,
	0, 1339, 1326, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1363, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 0, 0, 1356,
	1357, 0, 0, 0, 0, 0, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1327, 0, 0, 0, 0, 1362, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 550, 567, 577, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 0, 0, 0, 572, 0, 0, 0, 0,
	578, 0, 0, 0, 0, 565, 569, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 571,
}
var sqlPact = [...]int{

	43194, -1000, -9, -1000, -1000, -1000, 163, -1000, -1000, -1000,
	-1000, 161, 157, 154, -1000, 153, 152, 150, 149, 148,
	147, 146, 145, 143, 142, 140, -1000, 138, -1000, -1000,
	-1000, -1000, 137, 136, 135, -1000, 134, 1256, 23260, 133,
	132, 1449, -1000, 36214, 129, -1000, 1132, 27001, 960, 1534,
	-1000, 126, 1260, 35875, 4648, 1430, 1181, 1782, 35533, 22918,
	1775, 1084, 35191, -1000, -1000, 34849, 124, 116, 114, 113,
	107, -1000, -1000, 34507, 106, 104, 103, 100, 97, 94,
	93, 88, 84, 82, 80, 79, 77, 75, -1000, 74,
	72, 70, -1000, 43736, 62, 57, 56, 1173, 53, 52,
	51, 50, -1000, -1000, 972, 48, 45, 38, 37, 36,
	108, 35, 33, 31, 30, -1000, 1041, 432, 1519, 9034,
	1118, 1113, 1107, 1036, 1083, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	38248, 36214, 27, -41, 25, -1000, 2070, 605, 19092, 43194,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 26659, 26317, 22576, 34165, 33823, 6865, 821, -1000, -13,
	24616, 36214, -1000, 4, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14566, 14186, 540, 4, -1000, -1000,
	-1000, 33481, 22223, 33139, 1603, 32797, -1000, -1000, 32455, -1000,
	-1000, 2026, 1806, 1799, 25975, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 32116, 31774, 31432, 31090, 21870, 515, -1000,
	-1000, -1000, 17372, -1000, -1000, -1000, -1000, 24, -1000, 23,
	22, -1000, 20, 18, 17, 16, 15, 14, -1000, 9,
	8, -1000, 6, 1, -1000, -5, -6, 893, 929, 1161,
	30748, 917, 1347, -1000, -1000, -12, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 36214, -1000, 15622, -1000, 512, -1000,
	1697, -1000, 15622, -1000, 1342, -1000, -1000, -1000, -1000, -1000,
	36214, -1000, -1000, -1000, -1000, -1000, -1000, 2293, 1276, 510,
	30406, -1000, 1636, -1000, 604, 818, -1000, -1000, -1000, 9738,
	111, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1488, 21517, 1381, 2093, 2008, 2291, 1537, 1981, 1898, 1894,
	1871, 1866, 2288, 1024, 2284, 1882, 1056, 2283, 1826, 1366,
	683, 2280, 1694, 1693, -1000, -1000, -1000, -1000, 945, -1000,
	-1000, -1000, 28357, -1000, -1000, -1000, -1000, -1000, -1000, 851,
	922, -1000, -1000, -1000, -1000, -1000, 1041, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1559, 2044, 2044, 2044, 2148, 283,
	276, -1000, 108, -1000, 1807, -1000, 1227, -1000, -1000, -1000,
	42755, -1000, -1000, 15622, 15622, 15622, 15622, 15622, 1249, -1000,
	534, -1000, 507, 506, 7584, -1000, -1000, 2223, -1000, -1000,
	-1000, 285, -1000, -1000, 15622, 4, -1000, -1000, -1000, -1000,
	505, 2273, -1000, 694, -1000, -1000, -1000, 610, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1716, 504, 503,
	502, -1000, 501, -1000, -1000, 500, 498, 485, 483, 479,
	478, 477, 475, 474, 471, 470, 469, 468, 463, 450,
	1157, -1000, 640, -1000, -1000, 640, 640, -1000, 430, 430,
	433, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 430,
	-1000, -1000, -1000, 587, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 447, 1386, -1000, -1000,
	1386, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 820, 37570,
	-23, 36214, -1000, 446, -23, -1000, -1000, 440, -1000, 10090,
	10090, -1000, -1000, -1000, 15622, -1000, 2018, -1000, 4630, -180,
	318, 585, -1000, 18060, 20813, -1000, -1000, 1229, 1940, 703,
	-1000, 1091, 1937, 541, -1000, 617, 1932, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1228, -1000, 1403,
	1928, -87, 1746, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 23599,
	24616, -13, -18, -1000, -1000, -1000, 6514, 42755, -1000, 42755,
	-1000, 874, 19780, 4, -1000, -1000, -1000, -1000, 437, 1427,
	614, 1423, -1000, 323, -1000, 30064, 614, 1422, -1000, -1000,
	-1000, 28357, -1000, 36214, -1000, 36214, -1000, 913, -1000, 37909,
	120, 1927, -1000, -1000, 120, 1920, -1000, 119, 1896, -1000,
	-1000, 1284, 1883, -1000, -38, 1785, -1000, -1000, -1000, 15622,
	-42, -1000, -1000, -1000, 605, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	29722, 23938, 1474, 582, 42755, 2183, 43654, 23599, 42755, 23938,
	-1000, -1000, 36214, -1000, 15622, -1000, 2182, 1613, -24, -1000,
	-1000, -1000, -1000, -1000, 1469, 1454, 753, 1106, 9738, 9738,
	2004, -1000, 109, 6865, -1000, -1000, -1000, -1000, 29380, -1000,
	-1000, -1000, 1187, 36214, -1000, -1000, 1711, -1000, 23938, 36214,
	-1000, 36214, -1000, 36214, -1000, 36214, -1000, 36214, -1000, -1000,
	-1000, -1000, -1000, 4481, -1000, 1709, -1000, -1000, 36214, -1000,
	1468, -1000, -1000, -1000, 29041, 28699, -1000, 1000, 850, -1000,
	-1000, 121, -1000, 36214, 2122, 603, -1000, 1559, 1484, 1701,
	679, 1357, 1528, 13806, 1526, 15622, 108, -1000, -1000, 108,
	108, 8654, -1000, -1000, -1000, 36214, -1000, 43461, 43654, 6865,
	829, 15622, 15622, 15622, 15622, 15622, 15622, 15622, 15622, 15622,
	15622, 15622, 15622, 15622, 15622, 15622, 15622, 15622, 15622, 15622,
	15622, 15622, 15622, 15622, 15622, 15622, 15622, 15622, 15622, 15622,
	15622, 15622, 15622, 1471, 15622, 819, 15622, 15622, 15622, 15622,
	1356, 1140, 354, 1168, -1000, 2239, 2239, 2239, 43034, 43034,
	389, 534, -1000, 15622, -1000, 102, 15622, 276, 40782, -20,
	7218, -1000, -1000, -1000, -1000, 13454, 628, 42755, 4, 5309,
	-1000, 2264, 846, 1724, 1650, 436, 558, 549, 547, 480,
	15622, 15622, 13102, 12722, 12342, 16326, 11962, 15622, 7950, 15622,
	15622, 15622, 15622, 11582, 11202, -1000, 435, -1000, -1000, -1000,
	-1000, 2223, -1000, -1000, 2261, -1000, 828, 827, 2223, -1000,
	-24, -1000, 37570, -1000, 36214, -23, 2174, 36214, 15622, 110,
	-1000, 41648, -1000, 110, -44, 42755, 1573, 1572, 19436, 1587,
	1257, 1257, 1257, -1000, 434, 525, 585, 5801, 10822, -1000,
	27340, 1273, 188, 274, 17716, 2018, -1000, 36214, -31, 1297,
	-1000, 25633, 2049, 2048, 2022, 28357, 2161, 102, 1745, 1692,
	-1000, 6865, 814, 28357, 1220, 23599, 2058, 804, 2133, 102,
	1742, 1689, 801, 36214, 6865, 2053, 583, -1000, 36214, -1000,
	-1000, -1000, 1688, -45, -1000, -1000, 25294, 2173, 1783, -1000,
	1205, -1000, 1781, 2168, 36214, 1340, 1419, -1000, -1000, 825,
	1777, 621, 236, 2167, 236, 20125, -1000, 36214, -1000, 36214,
	-1000, -1000, 36214, -1000, 36214, -1000, 36214, 36214, -1000, 36214,
	23599, 23599, -51, 4847, 24955, 795, -1000, 662, 25294, 3871,
	-60, -1000, 646, -1000, -1000, -1000, -1000, 376, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 433, 1157, 430, 430, 430, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 587, -1000, -1000, 640,
	640, 640, -1000, -1000, -104, 1687, 595, -61, 705, -24,
	-1000, 1386, -1000, 1248, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2272, -1000, 2245,
	-1000, -1000, 2255, -26, -1000, -26, -1000, 6865, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 36214, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 719, -1000, -1000, -1000, -1000, -1000,
	-1000, 36214, 36214, 36214, -1000, 28357, 616, 1707, -1000, 2065,
	1484, 1701, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	42755, -1000, 394, -1000, -1000, 42755, 1114, 1586, -1000, 1586,
	-27, -1000, 41519, 1561, 36214, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 602, 1001, 1001, 815,
	815, 815, 815, 2296, 497, 680, 313, 350, 350, 350,
	350, 350, 350, 350, 350, 1146, 693, 693, 1146, 1146,
	1146, 1146, 1146, 350, 350, 350, 43034, 42844, 722, 15622,
	15622, 791, 1133, 354, 722, 15622, 722, 722, 722, 722,
	-1000, 1406, -1000, -1000, -1000, -1000, 1684, 428, 16326, 16326,
	-1000, -1000, -1000, 7584, 15622, -1000, -1000, -1000, -1000, 427,
	15622, -1000, 40941, -222, 273, -54, -1000, 15622, 523, -99,
	-1000, 880, -1000, 15622, -1000, 3, 15622, 15622, 15622, 272,
	-1000, 270, -1000, 790, -1000, 767, 765, 761, -1000, 426,
	1255, 415, 414, 15622, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 42565, 38932, 269, -1000, 1680, -54, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 268, -1000, 267, -1000, 42436,
	-54, 250, 1019, -1000, 16326, 16326, 16326, 7584, 413, 249,
	-1000, 41329, -1000, 42246, 10442, 10442, 10442, 246, 42117, 15622,
	-54, 4798, 4347, 3832, -62, -67, -1000, -75, -1000, 2223,
	-76, 245, 600, 599, 244, -1000, -1000, 412, -81, -83,
	621, 10090, 18748, 6865, -1000, 621, -1000, 15622, 19436, 19436,
	1286, 1567, 19436, -1000, -1000, -1000, -1000, 27340, 493, 585,
	27340, -1000, 2223, 1516, 242, -1000, -1000, -1000, 36214, 410,
	-1000, 585, 241, 1158, 36214, 36214, 36214, -1000, -1000, 1396,
	37231, 1392, 43654, 36214, -1000, 408, 407, 1556, 1541, 36214,
	36214, 36892, 36553, 36214, 1109, 102, -1000, 2046, 406, -1000,
	36214, 1072, 23599, 615, 598, 36214, 102, -1000, 2031, 405,
	6865, 1031, -1000, 596, 1617, 1358, -1000, 873, 1674, 36214,
	239, -103, -28, 43654, -1000, -1000, -1000, -1000, -1000, 36214,
	462, 36214, 102, 36214, 23599, 23599, 102, 36214, 1773, 1956,
	553, 36214, 1528, 15622, 1152, -1000, 18404, 651, 36214, 1018,
	83, -1000, -1000, -1000, 575, 36214, -1000, -1000, 120, 120,
	-1000, 119, 1284, -1000, -38, -1000, -1000, -1000, 36214, 23599,
	-106, -1000, 672, 671, 668, -1000, 43654, -1000, 527, 772,
	-1000, 2250, 612, 36214, 9738, 9738, -1000, 1579, -1000, -1000,
	955, -1000, 1122, -1000, -1000, -1000, -1000, 9738, -1000, -32,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1311, 1374, -1000,
	-1000, -1000, 1114, -1000, 15622, 2235, -1000, -1000, -1000, 8654,
	-1000, -1000, -1000, 36214, -158, 15622, 722, 722, 15622, 16326,
	16326, -1000, 722, -1000, -1000, -1000, -1000, -1000, 1667, 401,
	15622, 43654, 39619, 39495, -108, 1146, 15622, -29, -1000, 15622,
	-1000, 40659, -1000, -1000, 499, 1947, -1000, 15622, 41927, 237,
	9386, -1000, 41838, -17, -17, -1000, 2269, 1397, 1221, 1044,
	951, 2233, -1000, 20469, 623, 1281, 40500, 43461, 43654, -1000,
	15622, -1000, -1000, 1663, 15622, -1000, 43461, 43654, 16326, 16326,
	16326, 16326, 16326, 16326, 16326, 16326, 16326, 16326, 16326, 16326,
	16326, 16326, 16326, 16326, 16326, 16326, 16326, 1489, 16326, 2236,
	2236, 2236, -30, 15622, -1000, 1673, 1663, 15622, 15622, 43654,
	234, 233, 232, -1000, 15622, -54, 15622, 15622, 15622, -1000,
	-1000, -1000, 230, -1000, 2223, -1000, -1000, -1000, -1000, 3871,
	-1000, -1000, 1642, -1000, -122, -1000, 2018, -1000, 1642, 42755,
	-1000, 1286, -1000, 400, 15622, 19436, -1000, 522, -1000, -109,
	-1000, 27340, -1000, 520, -219, -1000, 573, -1000, 585, 395,
	36214, 27340, -1000, -1000, -1000, 757, 755, 1769, -1000, 1383,
	-1000, 656, -1000, 1202, 15622, 17028, 391, 387, 1218, -1000,
	1762, 1284, 1760, 1284, -1000, -31, 1154, -1000, 591, 15622,
	-1000, 750, -1000, 1172, 21164, -1000, -1000, 588, 15622, -1000,
	739, 21164, 612, 1661, 847, -1000, 864, -1000, 1606, -1000,
	25294, 384, 36214, 383, -1000, 381, -1000, 614, -1000, 371,
	36214, 1493, 553, 24277, -1000, 614, 1018, -1000, 42755, -1000,
	1018, 8302, 2028, -111, -1000, -1000, -1000, 621, 20125, 19436,
	15622, -116, -1000, -1000, -1000, -1000, -32, 2009, 2009, -1000,
	2225, -1000, 519, 228, -1000, 28018, -32, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 36214, 1253, 6865, 36214, 36214, 36214,
	1314, 40377, -1000, 2052, 6865, 2181, 722, 38964, 299, 15622,
	43654, 43237, -117, 15622, 15622, -1000, 227, 15622, 518, 42755,
	-1000, -1000, -1000, 42755, 15622, 2267, 15622, 226, 213, 211,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 210, -1000,
	-1000, 38587, 15622, 209, -1000, 208, 206, 42755, 1673, 42755,
	-1000, -1000, 535, 535, 908, 908, 908, 908, 2236, 2345,
	2582, 731, 229, 229, 229, 429, 465, 465, 229, 229,
	229, 1660, 1492, 370, 3693, 15622, 204, -1000, -1000, 42755,
	42755, 202, -1000, -1000, -1000, -54, 271, 40218, 40095, -1000,
	197, 196, 1639, 2145, -1000, 19436, 1639, -1000, 36214, 42755,
	-1000, -180, -1000, 2223, -1000, -1000, 1516, -1000, 6162, 27340,
	36214, -119, -1000, 36214, 36214, 36214, 1757, -1000, 1568, -1000,
	39936, -124, -1000, 315, 2081, 15622, -1000, -1000, 368, 17028,
	36214, -1000, 1518, 1512, 691, 36214, -1000, 36214, -1000, 36214,
	36214, 36214, 21164, -126, 36214, 23599, -1000, 367, 4, 21164,
	-127, 6865, -1000, -1000, 23599, 756, -1000, 1231, 1629, -1000,
	17028, 363, 36214, 25294, 2166, -1000, 17028, 1336, 1510, 553,
	24277, -1000, 825, -1000, -1000, -33, -1000, 358, 102, 1018,
	-1000, -34, 42755, 561, 1991, -1000, 1990, 517, -1000, -1000,
	-36, 362, -1000, 560, 555, -1000, -37, -1000, 557, -1000,
	-1000, -1000, 1182, 1182, -1000, -1000, -1000, 2052, 15622, 15622,
	43237, -132, -1000, 722, 722, -1000, 39813, -1000, 42755, -1000,
	41838, -1000, -1000, -1000, -1000, 1209, -1000, 39654, -1000, -1000,
	-1000, -1000, 16326, 1657, 360, 43654, 39531, -1000, -1000, 15622,
	-1000, -1000, -1000, -1000, 619, 15622, 15622, 2018, 619, -134,
	585, -1000, -1000, -1000, 2223, -1000, -137, -1000, -1000, -1000,
	-1000, 36214, -1000, 36214, -1000, 6865, 36214, 1670, 1388, -1000,
	-1000, 1531, 357, 16326, 36214, -1000, 1099, 17028, 2052, 4,
	6865, 2052, 39372, 5309, -144, -145, 1384, -1000, 1378, 15622,
	-1000, 43654, 1284, 1284, -1000, 738, 726, -1000, 720, -1000,
	-1000, 15622, -1000, 714, -1000, -38, 21164, -1000, -1000, 2129,
	1234, -146, 17028, -151, 192, 102, -152, 36214, -1000, 553,
	24277, -1000, 1956, 1961, 36214, 2019, -1000, -1000, 354, 353,
	351, -1000, 27679, 27679, 23599, 23599, 1253, -1000, 36214, -1000,
	-1000, -1000, 722, 722, -1000, -1000, 190, 1281, 2120, -1000,
	4887, 16326, 43654, -154, -1000, 39249, -1000, 36214, 42755, -54,
	-1000, -1000, 27340, 481, -1000, -1000, 1282, -1000, -1000, 36214,
	1376, -1000, -1000, 15622, 3693, 349, 1606, 348, -1000, -1000,
	-1000, -1000, -1000, -1000, 2081, 3, -1000, 1103, -1000, -1000,
	42755, 2057, -1000, -1000, 36214, 36214, 347, -17, 334, -1000,
	1208, 36214, 1099, -159, -1000, 1606, -1000, 1099, 333, 24277,
	-1000, 1493, 809, -161, 36214, -1000, 23599, 23599, -1000, -167,
	-1000, -1000, -1000, -168, -1000, 1047, 15622, 4887, -169, -1000,
	-1000, -39, -1000, 2165, -1000, -1000, -1000, -1000, 1754, 38984,
	1443, 36214, -1000, 36214, 2052, 187, 36214, 660, 6865, -1000,
	-1000, 15622, 185, 15622, 332, 331, 330, 1606, 1099, -1000,
	1606, 17028, -1000, 1510, 911, -1000, 621, -1000, -174, -181,
	-1000, -1000, 183, 15974, 15974, -54, -1000, 36214, 325, 1734,
	-1000, 1320, 1096, 176, -182, -1000, -1000, 323, -1000, 15622,
	-1000, -183, 2267, -184, 36214, 36214, 36214, -1000, 1606, -1000,
	-189, -1000, 20125, -1000, 612, 612, -1000, -1000, -1000, 16677,
	1289, 1004, 41200, -1000, -1000, -1000, 36214, -1000, 1332, 1327,
	910, -1000, -1000, -1000, -1000, -1000, 1443, 42755, -1000, -1000,
	-190, -191, -192, -1000, 1099, -162, -1000, -1000, 2190, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1979, -1000, 677, 1453,
	1453, 1320, 321, 316, 1279, 1606, -1000, 15270, -1000, 2199,
	-1000, -1000, 1504, -1000, -1000, 1182, 1182, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 172, 650, 170, 645, -1000,
	300, -1000, 1481, -50, 14918, 724, 319, -57, -1000, -198,
	-1000, 42755, -1000, 298, -1000, 14918, 1182, -1000, 14918, 14918,
	-199, -1000, -1000, -211, -1000, -63, 1182, -78, -1000, -1000,
	1182, -1000,
}
var sqlPgo = [...]int{

	0, 2698, 2697, 1785, 2696, 2171, 2695, 2693, 2692, 2689,
	2163, 2688, 2687, 2686, 2683, 2680, 2676, 2675, 2669, 2664,
	2660, 2656, 2655, 2654, 2653, 2652, 2651, 2646, 2161, 2637,
	2155, 2636, 2634, 2633, 2632, 2627, 32, 2626, 2625, 2623,
	2134, 2621, 2620, 2618, 2617, 2123, 2616, 2110, 2614, 2612,
	2106, 2610, 2608, 2606, 2059, 2604, 2057, 2602, 87, 117,
	2044, 2601, 2599, 2032, 2001, 1997, 2586, 1978, 2583, 2582,
	1898, 1888, 2581, 68, 2580, 2579, 2578, 1880, 1876, 2577,
	2572, 2571, 157, 2562, 1844, 2561, 2558, 2557, 2555, 2552,
	2542, 2536, 2535, 2534, 2533, 2532, 2531, 2530, 2528, 2522,
	2521, 2515, 2509, 2507, 161, 2506, 2505, 1835, 1823, 2504,
	2503, 34, 37, 22, 56, 111, 146, 3543, 136, 2502,
	2501, 2500, 2499, 2498, 2496, 30, 106, 104, 2494, 377,
	2493, 2489, 51, 43, 26, 20, 72, 94, 2484, 2483,
	2094, 29, 2482, 2481, 138, 2479, 79, 31, 2658, 156,
	153, 73, 127, 2478, 2476, 2475, 55, 122, 16, 8,
	3, 4, 53, 6, 1, 2471, 2, 5, 2468, 2467,
	18, 90, 95, 2464, 28, 82, 2461, 2459, 131, 2453,
	62, 97, 1668, 114, 124, 409, 105, 2452, 67, 15,
	64, 2450, 2447, 160, 42, 81, 152, 115, 2446, 52,
	162, 129, 76, 133, 132, 2445, 2442, 2434, 101, 2432,
	121, 110, 2431, 2429, 77, 2423, 99, 140, 2422, 150,
	113, 2421, 2420, 84, 2419, 126, 2418, 2415, 159, 151,
	116, 17, 45, 75, 13, 1676, 1675, 137, 103, 57,
	61, 2414, 819, 1329, 929, 78, 2413, 89, 58, 36,
	70, 102, 148, 35, 2402, 2400, 134, 2397, 2396, 2390,
	2389, 2387, 112, 2385, 2384, 2381, 85, 41, 91, 83,
	46, 143, 130, 118, 155, 108, 2380, 88, 125, 2378,
	98, 2376, 2373, 1810, 120, 2371, 2370, 2367, 1587, 1566,
	1268, 268, 2365, 2364, 1124, 876, 2362, 2360, 100, 2358,
	119, 109, 2358, 49, 86, 144, 139, 65, 2353, 123,
	47, 2352, 38, 23, 0, 2720, 1945, 2350, 128, 80,
	2348, 2343, 2342, 2340, 33, 12, 9, 7, 14, 10,
	27, 24, 2339, 2338, 135, 92, 71, 2335, 158, 2333,
	2331, 2329, 50, 2328, 21, 2323, 19, 2322, 2318, 25,
	11, 2314, 2312, 145, 2304, 96, 2303, 2158, 2301, 154,
	2300, 2297, 2052, 2296, 40, 107,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 6, 6,
	6, 6, 6, 6, 6, 8, 8, 10, 10, 9,
	9, 9, 11, 7, 7, 7, 7, 7, 7, 13,
	13, 14, 23, 17, 25, 12, 20, 18, 26, 16,
	16, 22, 22, 127, 127, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	124, 124, 129, 129, 129, 131, 131, 128, 128, 123,
	123, 28, 28, 71, 71, 114, 64, 64, 64, 312,
	312, 313, 313, 110, 110, 111, 111, 111, 111, 112,
	112, 113, 113, 113, 38, 38, 38, 30, 30, 30,
	30, 30, 31, 31, 32, 32, 39, 39, 39, 39,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 47, 47, 48, 48, 48, 48, 48, 48, 49,
	49, 49, 49, 50, 50, 50, 50, 50, 50, 50,
	50, 55, 55, 55, 53, 53, 53, 52, 52, 52,
	51, 51, 51, 54, 54, 54, 184, 184, 183, 183,
	187, 187, 56, 56, 56, 56, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 59, 59,
	59, 59, 59, 59, 59, 279, 279, 278, 57, 57,
	254, 254, 60, 60, 209, 209, 61, 61, 61, 61,
	61, 62, 62, 72, 72, 353, 353, 353, 357, 357,
	358, 358, 359, 359, 359, 359, 359, 359, 359, 355,
	355, 67, 67, 67, 67, 68, 68, 68, 69, 69,
	109, 109, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 33, 34, 34, 35, 35, 36, 36, 36, 78,
	78, 78, 80, 77, 77, 77, 79, 79, 79, 79,
	81, 81, 82, 82, 82, 82, 82, 83, 83, 306,
	304, 304, 305, 305, 154, 154, 154, 154, 154, 155,
	155, 155, 311, 311, 311, 311, 311, 311, 310, 310,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 96, 96, 96,
	104, 104, 104, 104, 104, 104, 104, 85, 85, 90,
	90, 90, 90, 90, 86, 86, 91, 91, 92, 92,
	93, 93, 93, 93, 93, 93, 87, 87, 87, 87,
	95, 95, 95, 95, 94, 94, 100, 100, 100, 100,
	100, 100, 97, 97, 97, 97, 98, 98, 98, 101,
	101, 101, 101, 88, 88, 89, 89, 102, 102, 103,
	103, 103, 103, 103, 103, 99, 99, 99, 354, 354,
	356, 356, 65, 65, 43, 43, 44, 44, 156, 156,
	157, 157, 233, 233, 233, 233, 158, 158, 130, 130,
	130, 161, 162, 162, 159, 159, 160, 160, 163, 163,
	163, 165, 165, 166, 166, 167, 167, 164, 164, 164,
	232, 322, 322, 323, 323, 323, 323, 323, 323, 324,
	324, 324, 324, 324, 324, 324, 320, 320, 321, 318,
	318, 319, 319, 319, 319, 360, 360, 231, 231, 170,
	170, 325, 325, 325, 325, 326, 326, 326, 326, 326,
	329, 328, 327, 327, 327, 327, 327, 265, 265, 265,
	106, 106, 45, 45, 45, 136, 136, 46, 46, 42,
	42, 42, 213, 213, 174, 174, 270, 270, 270, 147,
	147, 125, 125, 125, 19, 21, 21, 15, 15, 15,
	15, 15, 15, 27, 27, 24, 24, 214, 214, 215,
	215, 66, 66, 70, 70, 75, 75, 105, 105, 105,
	105, 105, 105, 29, 29, 29, 29, 37, 37, 37,
	37, 74, 74, 362, 362, 143, 143, 143, 143, 144,
	144, 228, 228, 229, 229, 363, 363, 230, 230, 230,
	138, 137, 139, 139, 41, 41, 41, 132, 132, 133,
	133, 134, 134, 135, 135, 364, 364, 63, 63, 63,
	108, 108, 150, 150, 225, 225, 225, 227, 227, 226,
	226, 226, 199, 199, 199, 107, 107, 179, 179, 189,
	189, 190, 190, 276, 191, 73, 73, 117, 117, 115,
	115, 115, 115, 115, 115, 115, 115, 116, 116, 116,
	118, 118, 118, 118, 118, 118, 118, 121, 121, 121,
	122, 122, 122, 120, 120, 335, 335, 335, 338, 338,
	334, 336, 336, 337, 337, 361, 361, 200, 200, 200,
	169, 168, 168, 172, 172, 171, 173, 173, 269, 269,
	269, 197, 197, 196, 196, 196, 196, 218, 218, 216,
	216, 217, 217, 221, 221, 222, 222, 222, 223, 223,
	224, 224, 195, 195, 250, 250, 220, 220, 219, 119,
	119, 119, 178, 178, 178, 180, 180, 240, 240, 240,
	241, 241, 239, 239, 239, 239, 271, 271, 271, 271,
	271, 271, 271, 271, 351, 351, 351, 352, 352, 268,
	268, 272, 272, 272, 272, 272, 272, 266, 266, 266,
	266, 267, 267, 277, 277, 203, 203, 203, 203, 201,
	201, 202, 202, 273, 273, 273, 273, 198, 198, 274,
	274, 274, 234, 234, 280, 280, 280, 298, 298, 177,
	177, 177, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 282, 282, 282, 282, 284, 284, 284,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 297, 297,
	297, 297, 297, 285, 285, 292, 292, 293, 293, 294,
	295, 286, 286, 287, 287, 288, 289, 296, 296, 296,
	296, 300, 300, 290, 290, 290, 290, 290, 291, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 211, 211, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 244, 244,
	244, 244, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 330, 330, 330, 330, 330, 330, 330,
	330, 332, 332, 333, 333, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 339, 339, 340, 340, 342,
	342, 343, 343, 344, 345, 345, 345, 346, 347, 347,
	341, 341, 348, 348, 348, 349, 349, 350, 350, 350,
	350, 350, 256, 256, 257, 258, 264, 264, 264, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 145, 145, 145, 145, 145,
	186, 186, 185, 185, 253, 253, 251, 251, 255, 255,
	204, 204, 299, 299, 299, 299, 299, 299, 299, 205,
	205, 205, 212, 206, 206, 207, 207, 207, 207, 207,
	247, 248, 208, 208, 208, 249, 249, 259, 263, 263,
	262, 261, 261, 260, 260, 237, 237, 238, 238, 236,
	235, 194, 194, 193, 193, 192, 192, 365, 365, 188,
	188, 275, 275, 275, 275, 181, 181, 152, 152, 182,
	182, 148, 148, 151, 151, 149, 149, 149, 149, 175,
	175, 176, 176, 146, 146, 245, 245, 245, 245, 245,
	245, 245, 245, 245, 245, 245, 301, 301, 301, 302,
	303, 252, 140, 140, 140, 141, 141, 142, 142, 308,
	308, 308, 309, 309, 309, 309, 307, 307, 307, 307,
	307, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 3, 4,
	6, 6, 6, 5, 5, 7, 7, 8, 8, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 6, 6, 4, 8, 3, 3, 3, 6, 4,
	3, 2, 1, 1, 0, 2, 0, 2, 0, 2,
	0, 7, 2, 6, 2, 1, 12, 12, 2, 1,
	1, 1, 3, 3, 0, 3, 1, 3, 1, 1,
	3, 2, 5, 0, 4, 6, 7, 1, 2, 1,
	2, 2, 3, 3, 3, 3, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 3, 1,
	2, 7, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 1, 3, 1, 2,
	2, 3, 2, 2, 5, 3, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 1, 3, 1, 5, 2,
	3, 0, 3, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 2, 6, 2, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 2, 1, 2, 2, 3, 2, 4, 3,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	3, 1, 4, 7, 1, 3, 2, 4, 1, 6,
	6, 3, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 3, 1, 3, 3, 1, 1, 2, 1, 1,
	1, 1, 1, 3, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 3, 3, 4,
	4, 3, 4, 4, 4, 3, 2, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	2, 3, 3, 3, 2, 3, 4, 3, 5, 3,
	4, 5, 2, 3, 3, 3, 4, 2, 3, 4,
	3, 3, 3, 4, 4, 4, 4, 2, 3, 7,
	7, 8, 8, 4, 5, 5, 5, 5, 2, 0,
	2, 0, 3, 2, 8, 10, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 1, 1,
	0, 2, 1, 0, 1, 0, 9, 9, 5, 6,
	4, 3, 5, 1, 3, 1, 1, 9, 10, 8,
	3, 2, 0, 3, 1, 2, 2, 3, 6, 2,
	1, 1, 2, 4, 2, 5, 7, 8, 5, 3,
	1, 4, 6, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 2, 4, 7, 3, 3, 0, 6, 3, 11,
	14, 4, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 2, 0, 8, 3, 2, 0, 1,
	3, 1, 1, 3, 5, 1, 1, 3, 3, 1,
	2, 4, 4, 2, 3, 5, 5, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 1, 0, 2, 2, 1, 1, 1, 0, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 1, 0, 2, 4,
	2, 5, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 8, 4, 6, 3,
	3, 1, 5, 5, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 2,
	3, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 2, 1, 3, 1, 1, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	3, 4, 1, 1, 1, 5, 1, 3, 3, 1,
	3, 3, 1, 3, 3, 1, 1, 3, 3, 1,
	1, 6, 6, 4, 3, 4, 3, 4, 3, 4,
	4, 3, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 3, 4, 3, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 5, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 0, 1, 3, 1, 3, 3, 3, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 2,
	2, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 1, 2, 3, 1, 1, 1, 2, 2, 1,
	3, 3, 0, 1, 2, 1, 1, 1, 1, 6,
	2, 1, 5, 1, 1, 1, 1, 2, 2, 1,
	1, 3, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 380, -4, -28, -30, -33, -38,
	-39, -61, -47, -48, -49, -60, -56, -62, -63, -64,
	-65, -57, -71, -70, -72, -75, -73, -66, -67, -76,
	-84, -105, -106, -107, -108, -5, -10, 24, 35, -31,
	-32, 48, -34, 72, -45, -40, 74, 95, -337, 99,
	-50, -54, 103, 110, 113, 135, 144, 230, 237, 258,
	260, 262, 269, -115, -117, 256, -68, -69, -77, -78,
	-79, -80, -109, 281, -85, -86, -87, -88, -89, -90,
	-91, -92, -93, -94, -95, -96, -97, -98, -99, -100,
	-101, -102, -103, 284, -29, -37, -74, 324, -6, -7,
	-8, -9, -11, -21, 112, -41, -42, -43, -44, -46,
	-335, -51, -52, -53, -55, -118, -116, 377, 257, 333,
	36, 294, 62, 106, 264, -13, -14, -17, -16, -18,
	-15, -23, -25, -22, -24, -26, -27, -19, -20, -12,
	349, 356, -121, -119, -120, -122, 274, 341, 304, 381,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	2, 304, 344, 334, 88, 152, 242, -353, 2, -182,
	304, 88, -149, -140, 370, 4, -314, -316, 20, 21,
	24, 34, 35, 36, 41, 45, 48, 49, 56, 61,
	62, 63, 68, 65, 66, 67, 70, 72, 73, 76,
	77, 78, 86, 87, 89, 91, 95, 97, 99, 102,
	103, 105, 110, 112, 111, 113, 123, 124, 129, 131,
	136, 142, 143, 144, 145, 153, 156, 158, 151, 168,
	169, 170, 174, 175, 176, 179, 178, 183, 184, 187,
	188, 191, 193, 195, 196, 199, 197, 201, 202, 204,
	203, 209, 211, 212, 214, 217, 220, 223, 226, 227,
	228, 229, 230, 231, 233, 235, 237, 239, 240, 241,
	242, 243, 245, 246, 248, 249, 250, 251, 252, 256,
	254, 255, 257, 258, 259, 260, 262, 264, 265, 267,
	282, 283, 295, 269, 270, 271, 272, 273, 277, 275,
	278, 279, 281, 284, 286, 289, 293, 294, 296, 299,
	300, 297, 292, 303, 305, 306, 307, 308, 309, 310,
	311, 312, 319, 320, 324, 325, 326, 327, 330, 331,
	332, 333, 335, 338, 339, 340, 345, 350, 351, 352,
	353, 354, 29, 37, 38, 39, 40, 42, 43, 46,
	47, 52, 53, 54, 57, 90, 92, 93, 109, 114,
	115, 125, 126, 127, 137, 139, 146, 147, 150, 157,
	159, 160, 161, 162, 163, 165, 172, 173, 181, 198,
	208, 210, 221, 225, 234, 236, 244, 266, 276, 287,
	288, 298, 301, 314, 315, 316, 321, 322, 337, 341,
	342, 380, 380, 2, 169, 241, -148, -140, 88, 380,
	2, 304, 334, 344, -213, 88, 329, -140, 237, 22,
	2, 97, 156, 332, 331, 22, 233, 275, 306, 308,
	2, 380, 2, 344, 304, 152, 88, 334, -140, 2,
	-59, 2, 377, -58, -5, -40, -50, -60, -56, -10,
	-28, -30, -45, -47, -54, -64, -63, -65, -67, -71,
	-70, -73, -77, -78, -84, -107, -108, 74, 24, 103,
	281, 112, -357, 2, 22, -358, -359, 74, 103, 135,
	274, 156, 97, 331, 304, 2, 169, 2, -140, 2,
	-353, 2, 169, 2, -357, 2, -140, 2, -144, 2,
	269, -140, 380, 380, 380, 380, 380, 188, 56, 266,
	278, -82, 320, -81, 314, -306, -83, 2, -183, 199,
	-140, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 2, -104,
	278, 35, 56, 22, 61, 89, 136, 152, 153, 175,
	69, 70, 240, 188, 170, 319, 176, 279, 305, 320,
	74, 335, 309, 111, 4, 88, 199, 280, 314, 380,
	380, 380, -361, 2, 304, 380, 380, 380, 380, 271,
	284, 380, 380, 380, 380, 380, -116, -118, -117, 380,
	380, 380, 380, -171, -172, 328, 164, 108, 219, -115,
	-117, 2, -335, -104, 278, 2, 56, 22, -304, 2,
	-242, 215, -244, 368, 369, 363, 205, 355, -256, 94,
	-246, -259, 109, 266, 377, -148, -245, 383, 9, -332,
	-117, 30, -257, -258, 50, -140, 7, 8, 5, 6,
	-146, -282, -252, -291, 323, 116, 207, -330, -331, 4,
	-314, -308, -283, -293, -287, -290, 165, 59, 80, 81,
	84, 82, 85, 280, 334, 51, 29, 114, 115, 225,
	234, 301, 321, 322, 146, 208, 147, 57, 137, 181,
	102, 38, 40, 42, 43, 52, 53, 90, 92, 93,
	125, 126, 127, 157, 159, 160, 161, 162, 163, 210,
	244, 287, 298, 315, 316, 342, -315, -294, -295, -288,
	-289, 75, 117, 134, 155, 148, 167, 171, 182, 185,
	194, 200, 222, 224, 263, 285, -296, -362, 2, 320,
	320, 2, -362, 2, -362, 2, -143, 2, 320, 317,
	-338, 245, -334, -140, -338, 380, 380, 382, 380, -168,
	-169, 2, 22, 100, 377, 2, -271, 2, 375, -273,
	-148, -117, -272, 377, 216, -3, 2, -273, 146, -148,
	2, -273, 146, -148, 2, -312, 146, -310, 9, -309,
	5, 4, -314, -316, -315, 59, 2, -140, 2, -151,
	146, -148, -307, 4, -314, -316, -315, -317, 22, 25,
	26, 27, 28, 30, 31, 32, 33, 44, 50, 51,
	55, 58, 60, 69, 74, 79, 80, 82, 81, 83,
	84, 85, 94, 96, 98, 100, 101, 104, 106, 108,
	116, 118, 130, 132, 133, 135, 138, 140, 149, 152,
	154, 164, 166, 177, 180, 186, 189, 190, 205, 206,
	207, 213, 215, 216, 218, 219, 232, 238, 247, 261,
	274, 280, 290, 302, 304, 313, 317, 318, 323, 328,
	329, 334, 336, 343, 344, 346, 347, 348, 349, 317,
	382, -182, -175, -140, -236, -235, 379, -242, 2, -242,
	2, 133, 377, -193, -194, -235, -236, 2, -183, 146,
	-312, 146, 2, -183, 2, 152, -140, 146, 2, -140,
	22, 133, 2, 166, 2, 166, 2, -274, 2, -273,
	-184, 146, 2, -183, -184, 146, 2, -152, 146, 2,
	-151, -140, 146, 2, -313, 146, 2, -312, -209, 377,
	-279, 2, -278, -309, 341, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	278, 215, 382, -183, -242, -254, 377, 133, -242, 215,
	-140, 2, 282, 2, 377, -82, 54, 320, -229, 2,
	-230, -137, -138, -139, 168, 239, 243, 354, 317, 360,
	133, -304, -187, 379, -104, 2, -312, 2, 282, 2,
	240, 279, 56, 133, 2, 2, -354, 2, 215, 133,
	2, 133, 2, 133, 2, 133, 2, 133, 2, 2,
	240, 279, 2, 130, 2, 319, 2, 2, 133, 2,
	168, 239, 295, 2, 304, 344, 2, 133, 133, 354,
	2, -198, -273, 304, 354, 22, -171, -172, -219, -196,
	130, -216, -217, 186, 118, 213, -200, 22, 100, -200,
	-200, 45, 378, 378, -104, 282, 2, 10, 11, 58,
	34, 368, 369, 370, 371, 128, 372, 373, 366, 367,
	365, 358, 359, 362, 291, 23, 71, 361, 360, 64,
	192, 268, 119, 120, 121, 122, 253, 13, 14, 15,
	27, 218, 185, 355, 148, 285, 363, 16, 17, 18,
	167, 37, 149, -145, -153, -242, -242, -242, -242, -242,
	224, -192, -237, 375, -117, 377, 377, -117, -242, -185,
	377, -303, 7, -117, -251, 375, -260, -242, -193, 377,
	5, 377, 5, -339, 350, 130, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 236, -300, 345, -300, -300,
	-284, 377, -284, -285, 377, -284, 351, 356, 377, -228,
	-229, -228, 317, -144, 382, -338, -176, 377, 377, -188,
	-275, -242, 370, -188, -185, -242, 75, -203, 171, 200,
	134, 182, 263, 155, -303, -59, -239, 383, 377, 370,
	-268, 356, -117, -272, 377, -271, -148, 377, -127, 254,
	-126, 21, 24, 103, 339, 109, 292, 310, -162, 270,
	-161, 228, 254, 109, 349, 109, 112, 254, 292, 310,
	-162, 270, 254, 109, 383, 112, -312, -149, 382, -307,
	370, 296, 378, -181, -148, -194, 377, -170, 205, -136,
	-336, 349, 205, -170, 377, -141, 146, 2, -140, -336,
	205, -274, -150, -148, -150, 281, -140, 31, -129, 382,
	49, 259, 109, -129, 109, -129, 382, 109, -129, 109,
	382, 109, -185, 378, 382, -353, -359, 74, 377, 31,
	-253, -280, -281, -283, -292, -286, -290, -291, 41, 47,
	46, 173, 172, 311, 198, 276, 288, 337, 150, 39,
	214, 158, 4, 157, 159, 160, 161, 162, 163, 287,
	38, 244, 126, 127, 125, 102, 93, 92, 210, 43,
	42, -294, -295, -288, -289, 90, 315, 316, 165, 40,
	53, 52, 342, 298, -313, -353, -306, -185, 31, -229,
	2, -363, 382, 184, -155, 191, 204, 142, 216, 352,
	-311, 5, 4, -252, -265, 94, 188, -291, 8, 369,
	-301, 7, 368, -305, -304, -305, 78, 379, -307, -183,
	22, 283, 2, -306, -356, 130, -353, -306, -306, -306,
	-306, -306, 278, -59, 130, -140, 184, -306, 2, -306,
	2, 304, 152, 304, -129, 382, -148, 65, 66, 354,
	-219, -196, -197, -196, -220, -219, 331, -217, -216, -221,
	-242, 22, -224, 124, 201, -242, -244, -116, -116, -116,
	-173, -269, -242, 238, 152, -306, -298, -280, -297, 249,
	250, 248, 252, 251, -280, -307, 314, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, 185,
	148, 285, 37, 149, -242, 317, -242, -242, -242, -242,
	197, 205, 207, 323, 116, 330, 100, 211, -365, 302,
	33, -249, -117, 377, -264, 28, 290, 22, -256, 266,
	377, -237, -242, -238, -186, -185, 378, 382, -186, -255,
	-251, -263, -262, 346, 378, -185, 343, 22, 100, 370,
	2, 7, -210, 353, 196, 91, 143, 195, -211, 273,
	-340, 123, 138, 377, 378, 2, 378, 2, 378, 2,
	378, 2, -242, -242, -204, 2, -299, -185, 4, 353,
	196, 91, 143, 195, 273, -204, 2, -205, 2, -242,
	-185, -206, -243, -244, 368, 369, 363, 377, 266, -207,
	2, -242, -186, -242, 44, 180, 318, -208, -242, 133,
	-185, -242, -242, -242, -185, -185, 2, -185, 2, 377,
	-303, 7, 314, 314, -303, -144, -334, 31, -175, -185,
	-178, 382, 133, 31, 4, -178, 378, 382, 171, 171,
	-271, -203, 171, -201, 222, -201, -201, -351, 377, 376,
	-268, -307, 375, 384, -186, 2, -267, -266, 31, -140,
	220, 378, -148, 382, 317, -214, 69, 60, -232, 146,
	60, -318, -140, 69, -319, 55, 329, 238, 132, -214,
	69, -214, 69, 69, -273, 34, -73, 112, 133, -307,
	317, -273, 229, -312, 67, 317, 34, -73, 112, 133,
	317, -151, -307, 67, -277, 357, -140, 133, 378, 382,
	-156, -175, -157, -140, -233, -232, -320, -321, -318, 152,
	329, 117, 31, 109, 229, 109, 31, 215, 205, -132,
	307, 109, -234, 347, -225, -73, 377, 94, 31, -225,
	-189, -190, -276, -191, -148, 377, -140, -183, -184, -184,
	-151, -152, -140, -312, -313, 378, -59, -278, 317, 336,
	-157, -58, 24, 74, 103, 378, 382, -177, 30, 375,
	-210, 377, -277, 133, 360, 317, 378, 320, -230, -154,
	243, 289, 255, 277, 8, 7, 7, 382, -307, -355,
	-140, 278, -59, -148, -151, -148, -273, 349, 130, 66,
	-197, -220, -222, -301, 377, 369, -223, 266, 267, 382,
	-125, 32, 98, 174, -148, 354, -242, -242, 317, -365,
	302, -249, -242, 197, 207, 323, 116, 330, 100, 211,
	133, 377, -243, -243, -185, -242, 377, -185, 376, 386,
	378, -242, 376, 376, 382, -261, -262, 104, -242, -172,
	382, -171, -242, -185, -185, 378, 378, 317, 317, 317,
	317, 377, -345, 223, 377, 377, -242, 31, 382, 378,
	133, 378, 378, -212, 232, 378, 10, 11, 368, 369,
	370, 371, 128, 372, 373, 366, 367, 365, 358, 359,
	360, 64, 192, 268, 13, 14, 15, 167, 149, -243,
	-243, -243, -185, 377, 378, -247, -248, 133, 130, 31,
	-208, -208, -208, 378, 133, -185, 382, 382, 382, 378,
	378, 378, -303, 378, 382, 378, 354, 354, 378, 377,
	378, 378, -234, -275, -180, 2, -271, -307, -234, -242,
	-271, -271, -202, 336, 215, 171, -271, -266, 378, -352,
	-303, -268, -267, -303, -241, -240, 131, 203, 378, -140,
	377, -268, 378, -126, -148, -140, -140, 205, -232, 146,
	-131, 205, -280, -140, 377, 377, 174, 174, -140, -140,
	146, -140, 146, -140, -140, -127, 254, -73, 67, 377,
	-148, 254, -312, 349, 354, -140, -73, 67, 377, -307,
	254, 354, -110, 145, 211, 296, 133, -148, 378, 378,
	382, -141, 152, -141, -73, -183, -312, -312, -73, -148,
	109, -133, 105, -364, 360, -140, -218, -216, -242, -199,
	-227, 261, 215, -181, 341, -140, -199, -179, 382, 133,
	360, -181, -129, -129, -129, -129, -355, -312, 378, -280,
	375, 376, 7, 7, -113, 349, -355, -304, -304, -137,
	327, 63, 243, -304, 382, 217, 242, 88, 304, 152,
	-223, -242, -269, -148, 383, -242, -242, -243, -243, 133,
	377, -242, -253, 27, 27, 378, -186, 382, -238, -242,
	378, -251, 106, -242, 313, 378, 343, -172, -172, -172,
	5, 196, 143, 195, -211, 195, -211, -211, 7, -346,
	-140, 377, 347, -171, 378, -298, -280, -242, -247, -242,
	-298, -280, -243, -243, -243, -243, -243, -243, -243, -243,
	-243, -243, -243, -243, -243, -243, -243, -243, -243, -243,
	-243, 100, 205, 211, -243, 382, -186, -248, -247, -242,
	-242, -280, 378, 378, 378, -185, -242, -242, -242, 378,
	-303, -58, -195, 138, -277, 382, -195, -202, 377, -242,
	-271, 376, 378, 382, -267, 376, 382, 385, 360, -268,
	377, -175, -266, 317, 317, 109, 205, 338, -322, -319,
	-242, -174, -270, -140, -333, 377, -330, -331, -146, 377,
	377, -124, 103, 281, -215, 109, -129, 109, -129, 317,
	-214, 69, 354, -185, 317, 229, -245, -146, -140, 354,
	-185, 317, -245, -113, 133, 303, 296, -158, 151, -233,
	377, -141, 377, 377, -170, -136, 377, -140, -134, 179,
	-364, -310, -336, -199, -199, -188, 206, 68, 378, -234,
	-190, -180, -242, 378, -114, 76, -114, 7, 376, 378,
	-112, 217, -111, -140, 5, -140, -35, -36, 152, 231,
	-307, -140, -148, -151, 216, 378, -125, -307, 27, 27,
	-242, -253, 378, -242, -242, 378, -242, 376, -242, 5,
	-242, 378, 378, 378, 378, -347, -140, -242, 378, 378,
	378, -248, 133, 100, 211, 377, -242, 378, 378, 382,
	378, 378, 378, 378, -250, 140, 45, -271, -250, -175,
	-239, -303, -240, -307, 375, -267, -175, 378, -140, -140,
	-232, 109, -323, 69, -324, 58, 117, 74, 205, 207,
	329, 238, 55, 94, 247, 378, 378, 382, -147, -193,
	58, -147, -242, 377, -174, -175, 205, 94, 205, 94,
	87, 325, -140, -140, -148, -140, -140, -245, 378, -148,
	-312, 377, -245, 378, -307, -313, 314, -159, -160, 228,
	149, -174, 377, -175, -156, 31, -174, 215, -135, 178,
	-364, -310, -132, -226, 377, 215, -73, -199, 360, 87,
	87, 376, 382, 377, 360, 360, 382, 22, 377, -162,
	-162, -125, -242, -242, 378, 378, -172, -341, 228, 378,
	-243, 133, 377, -253, 378, -242, -342, 348, -242, -185,
	-342, 378, -268, -303, 378, -232, -140, -307, -140, 117,
	146, 207, 174, 377, -243, -148, -231, -360, 73, 300,
	-270, -125, -307, -125, 378, -185, 378, 378, 207, 207,
	-242, -280, -129, -129, 317, 317, 317, -185, 317, -245,
	45, 226, 378, -174, 378, 378, -73, 378, -148, -364,
	-310, -133, 101, -175, 69, -249, 377, 377, -111, -112,
	-312, -312, -36, -175, 378, -172, 45, -243, -253, 378,
	378, -343, -344, -140, -267, 376, -324, -141, 205, -242,
	-142, 377, -158, 377, -147, -172, 247, -128, 58, -140,
	-140, 377, -172, 377, 187, 242, -148, -231, 378, -158,
	-231, 377, -310, -134, 331, 206, 378, -140, -313, -313,
	378, 378, -348, 242, 267, -185, 378, 382, 31, 109,
	378, -325, 193, -140, -175, -125, 378, -148, -123, 336,
	-307, -185, 378, -185, 377, 377, 377, -158, -231, -158,
	-174, -135, 281, -234, 378, 378, 378, -349, -350, 37,
	326, 78, -242, -349, -344, -346, 117, -326, -329, -328,
	215, 134, 227, 286, 378, 378, -170, -242, 378, 378,
	-175, -175, -175, -158, 378, -189, -113, -113, -350, 235,
	129, 266, 235, 129, -140, -328, 215, -329, 215, 331,
	97, -325, 378, 378, 378, -231, -234, 27, -327, 202,
	259, 49, 281, -327, -326, 377, 377, -130, 49, 259,
	-158, -350, 20, 207, 94, -163, -161, -164, -161, 378,
	341, 378, 341, -165, 377, 183, 382, -160, -159, -166,
	-167, -242, 194, 312, -163, 377, 382, 378, 382, 377,
	-166, -163, -167, -166, 378, 378, 382, -160, -159, -164,
	382, -164,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 56, 0, 0, 157,
	159, 0, 321, 0, 166, 168, -2, 0, 0, 0,
	189, 190, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 695, -2, 0, 301, 303, 312, 314,
	316, 318, 319, 0, 370, 372, 374, 376, 378, 380,
	382, 384, 386, 388, 390, 392, 394, 396, 398, 399,
	401, 403, 405, 0, 617, 619, 621, -2, 59, 61,
	63, 65, 67, 77, 0, 170, 172, 174, 176, 179,
	733, 193, 195, 197, 199, -2, 744, 0, 0, 0,
	-2, 0, -2, -2, -2, 68, 69, 70, 71, 72,
	73, 83, 84, 85, 86, 87, 75, 79, 80, 82,
	0, 0, 710, 712, 714, 716, -2, 0, 0, -2,
	7, 13, 15, 17, 20, 22, 24, 26, 28, 30,
	32, 34, 36, 38, 40, 43, 49, 51, 53, 57,
	58, 0, 0, 0, 0, 0, 0, 0, 132, 285,
	0, 1317, 1239, 1245, 1246, 1272, 1273, 1274, 1291, 1292,
	1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302,
	1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312,
	1313, 1314, 1315, 1316, 1318, 1319, 1320, 1321, 1322, 1323,
	1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
	1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
	1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,
	1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
	1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
	1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
	1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
	1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403,
	1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
	1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423,
	1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433,
	1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443,
	1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453,
	1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463,
	1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
	1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483,
	1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493,
	1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503,
	1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513,
	1514, 158, 160, 161, 0, 0, 0, 1241, 1317, 167,
	169, 0, 0, 0, 0, 0, 582, 276, 1380, 278,
	280, 0, 0, 0, 0, 183, 184, 185, 186, 187,
	188, 191, 192, 0, 0, 0, 0, 0, 275, 273,
	222, 223, 0, 258, 259, 260, 261, 262, 264, 226,
	228, 230, 231, 233, 235, 237, 239, 241, 243, 244,
	246, 248, 249, 251, 253, 254, 256, 583, 0, 0,
	0, 0, 0, 282, 288, 289, 290, 292, 293, 294,
	295, 296, 297, 298, 0, 138, 0, 483, 271, 269,
	0, 134, 0, 614, 0, 284, 615, 616, 611, 612,
	1407, 640, 302, 304, 313, 315, 317, -2, -2, 1501,
	-2, 334, -2, 342, 1507, 0, 345, 346, 349, -2,
	218, 371, 373, 375, 377, 379, 381, 383, 385, 387,
	389, 391, 393, 395, 397, 400, 402, 404, 406, 407,
	0, 0, 0, 411, 0, -2, -2, 0, 0, 0,
	0, 0, -2, 0, -2, 0, 0, -2, -2, 0,
	0, -2, 0, 0, 410, 412, 413, 414, 0, 618,
	620, 622, 0, 571, 735, 60, 62, 64, 66, 0,
	0, 171, 173, 175, 177, 180, -2, 708, 709, 194,
	196, 198, 200, -2, 0, 739, 739, 739, 0, 0,
	709, 707, 0, 305, 0, 307, 0, 411, 310, 311,
	350, 351, 945, 0, 0, 0, 0, 0, 0, 1018,
	1048, 1050, 1472, 1501, 0, 1052, 1053, 0, 1055, 1057,
	1058, 0, 1061, 1062, 1214, 1241, 1255, 1256, 1257, 1258,
	0, 0, 1261, 0, 1263, 1264, 1265, 1116, 1072, -2,
	-2, 1253, 873, 874, 875, 876, -2, 1515, 1076, 1079,
	1082, 1085, 1086, 1089, 1090, 0, 1456, 1473, 1474, 1497,
	1498, 1506, 1510, 1511, 1480, 1494, 1481, 1468, 1478, 1492,
	1323, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1281, 907, 908, 913,
	914, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524,
	1525, 1526, 1527, 1528, 1529, 1530, 916, 642, 624, 633,
	642, 626, 627, 628, 629, 630, 631, 632, 635, 0,
	725, 1386, 728, 1252, 726, 711, 713, 0, 715, 0,
	0, 719, 741, 740, 0, 780, 723, 724, 734, 795,
	833, 810, 801, 0, 0, 2, 74, 0, 1480, -2,
	76, 0, 1480, 833, 78, 0, 1480, 139, 140, 368,
	369, 1282, 1283, 1284, 1285, 1515, 81, 0, 88, 503,
	1480, 1244, 0, 1286, 1287, 1288, 1289, 1290, 1531, 1532,
	1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
	1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,
	1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562,
	1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572,
	1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
	1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592,
	1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602,
	1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 0,
	0, 286, 287, 1249, 1247, 1248, 0, 162, 163, 164,
	165, 0, 0, 1242, 1223, 1221, 1222, 178, 550, 1480,
	-2, 1480, 574, 550, 578, -2, 732, 1480, 656, 277,
	279, 0, 182, 0, 669, 0, 671, 0, 686, 839,
	124, 1480, 203, 216, 124, 1480, 206, 124, 1480, 209,
	1237, 124, 1480, 212, 213, 1480, 215, 141, 272, 0,
	0, -2, 265, 267, -2, 263, 227, 229, 232, 234,
	236, 238, 240, 242, 245, 247, 250, 252, 255, 257,
	-2, 0, 0, 0, 482, 0, 0, 0, 613, 0,
	639, 320, 0, 331, 0, 333, 1467, -2, -2, 337,
	643, 647, 648, 649, 0, 0, 0, 0, 0, 0,
	0, 347, 219, 0, 408, 409, 417, 418, 0, 421,
	442, 454, 0, 0, 425, 427, 481, 429, 0, 0,
	431, 0, 433, 0, 435, 0, 437, 0, 439, 441,
	443, 455, 445, 734, 447, 0, 449, 453, 0, 458,
	0, 460, 461, 462, 0, 0, 468, 0, 0, 415,
	416, 124, 837, 0, 0, 0, -2, 0, 752, 777,
	0, 755, 756, 0, 0, 0, 0, 737, 738, 0,
	0, 0, 697, 698, 306, 0, 309, 0, 0, 0,
	0, 1149, 1150, 1151, 1152, 1153, 1154, 1157, 1158, 1155,
	1156, 1159, 1160, 0, 0, 0, 0, 0, 1161, 0,
	0, 0, 0, 0, 0, 0, 0, 1162, 1163, 1164,
	0, 0, 1166, 0, 1168, 0, 0, 0, 0, 0,
	0, 1228, 0, 0, 1165, 950, 951, 952, 984, 985,
	0, 1049, 1225, 1218, 1051, 0, 1171, -2, 1172, 0,
	0, 1054, 1270, 1059, 1060, 1171, 0, 1213, -2, 0,
	1260, 0, 942, 1118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1194, -2, 0, 0, 0,
	0, 0, 0, 0, 0, 892, 910, 921, 918, 917,
	894, 0, 893, 891, 0, 895, 0, 0, 0, 623,
	-2, 625, 0, 637, 0, 727, 0, 0, 0, 784,
	1229, 1233, 1234, 784, 0, 1172, 0, 0, 0, 0,
	830, 830, 830, 828, 804, 0, 810, 0, -2, 834,
	822, 0, -2, 801, 0, 0, 835, 0, 89, 608,
	103, 0, 608, 608, 0, 0, 0, 0, 0, 99,
	502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 824, 1240, 0, 1219,
	1220, 154, 0, 0, 1235, 1224, 489, 0, 0, 572,
	0, 731, 0, 0, 0, 0, 1480, 581, 1275, 658,
	0, 843, 0, 672, 0, 0, 840, 0, 201, 0,
	122, 123, 0, 204, 0, 207, 0, 0, 210, 0,
	0, 0, 0, 734, 0, 0, 291, 0, 0, 734,
	0, 1174, 851, 852, 853, 854, 855, 942, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 904, 0, 879, 879, 879, 896,
	897, 905, 906, 911, 912, 923, 924, 926, 928, 922,
	922, 922, 919, 920, 824, 0, 0, 0, 0, -2,
	339, 0, 645, 0, 650, 359, 360, 361, 652, 653,
	343, 362, 363, 364, 365, 366, 367, 0, 567, 0,
	569, 1266, 0, 340, 352, 341, 344, 0, 220, 419,
	420, 422, 423, 424, 428, 0, 478, 430, 432, 434,
	436, 438, 446, 450, 734, 456, 459, 463, 464, 465,
	466, 0, 0, 0, 570, 0, 322, 0, 473, 0,
	752, 777, 701, 751, 702, 776, 778, 753, 754, 759,
	763, 764, 767, 770, 771, 761, 945, 720, 721, 722,
	745, 746, 593, 0, 0, 308, 946, 847, 848, 898,
	899, 900, 901, 902, 947, 948, 0, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, -2, -2, -2,
	-2, -2, -2, -2, -2, 971, 972, 973, 974, 975,
	976, 977, 978, -2, -2, -2, 982, 983, -2, 1167,
	1169, 0, 1228, 0, -2, 0, -2, -2, -2, -2,
	996, 0, 998, 1001, 1003, 1005, 0, 0, 0, 0,
	1227, 1015, 1205, 0, 0, 1146, 1147, 1148, 1000, 0,
	0, 1226, 1217, 0, 0, 1170, 1056, 0, 0, 0,
	1178, 1212, 1208, 0, 1063, 744, 0, 0, 0, 0,
	1070, 0, 1271, 929, 930, 931, 932, 933, 934, 943,
	1126, 0, 0, 0, 1077, 1078, 1080, 1081, 1083, 1084,
	1087, 1088, 0, 0, 0, 1094, 0, 1181, -2, -2,
	-2, -2, -2, -2, -2, 0, 1096, 0, 1098, 1172,
	1191, 0, 0, 1019, 0, 0, 0, 0, 1501, 0,
	1101, 1172, 1199, 0, 0, 0, 0, 0, 1172, 0,
	1204, 0, 0, 0, 0, 0, 1112, 0, 1114, 0,
	0, 0, 0, 0, 0, 636, 729, 0, 0, 0,
	843, 0, 0, 0, 1232, 843, 779, 0, 0, 0,
	0, 0, 0, 825, 829, 826, 827, 0, 0, 810,
	822, 792, 0, 0, 0, 799, 800, 821, 0, 820,
	809, -2, 0, 0, 0, 0, 0, 607, 105, 1480,
	0, 126, 0, 0, 540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 501,
	0, 0, 0, 0, 0, 0, 0, 94, 0, 0,
	0, 0, 1243, 0, 144, 0, 1250, 0, 0, 0,
	0, 0, 488, 1249, 490, 492, 493, 494, 495, 1276,
	0, 1276, 0, 0, 0, 0, 0, 0, 0, 660,
	666, 0, 758, 0, 684, 674, 0, 0, 0, 684,
	688, 689, 691, 692, 0, 0, 841, 217, 124, 124,
	1238, 124, 124, 142, 214, 274, 224, 266, 0, 0,
	0, 268, 0, 0, 0, 270, 0, 844, 846, 0,
	856, 0, 153, 0, 0, 0, 332, 0, 644, 651,
	0, 356, 0, 358, 568, 1268, 1267, 0, 221, 480,
	299, 448, 451, 475, 476, 477, 838, 0, 0, 474,
	705, 706, 0, 765, 0, 0, 762, 768, 769, 0,
	748, 591, 592, 0, 0, 0, -2, -2, 0, 0,
	0, 1016, -2, 997, 999, 1002, 1004, 1006, 0, 0,
	0, 0, 0, 0, 0, 1017, 1171, 0, 1215, 1218,
	-2, 1173, 1176, 1177, 0, 0, 1209, 0, 0, 0,
	0, 743, 744, 744, 744, 1069, 0, 0, 0, 0,
	0, 0, 1071, 0, 0, 0, 0, 0, 0, 1093,
	0, 1095, 1097, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1022,
	1023, 1024, 0, 1171, 1100, 1197, 1198, 0, 0, 0,
	0, 0, 0, 1106, 0, 1203, 0, 0, 0, 1110,
	1111, 1113, 0, 877, 0, 903, 925, 927, 915, 734,
	1251, 781, 773, 1230, 824, 783, 785, 1231, 773, 1173,
	812, 0, 814, 0, 0, 0, 816, 0, 805, 0,
	807, 822, 797, 0, 0, 790, 0, 789, 810, 818,
	0, 0, 836, 104, 597, 0, 0, 0, 107, 1480,
	115, 0, 522, 0, 0, 0, 0, 0, 610, 116,
	1480, 124, 1480, 124, 117, 90, 608, 91, 0, 0,
	603, 0, 595, 0, 0, 594, 92, 0, 0, 605,
	0, 0, 153, 0, 0, 155, 0, 1236, 497, 549,
	0, 0, 1276, 0, 486, 550, 575, -2, 577, 0,
	0, 662, 666, 0, 665, 732, 684, 757, 842, 667,
	684, 0, 0, 0, 676, 673, 670, 843, 0, 0,
	0, 0, 202, 205, 208, 211, 281, 0, 0, 1175,
	0, 849, 0, 0, 133, 0, 283, 329, 330, 335,
	354, 355, 357, 353, 0, 0, 0, 0, 0, 0,
	0, 0, 747, 593, 0, 949, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 1206, 0, 0, 0, 1217,
	-2, 1179, 1207, 1211, 0, 1064, 0, 0, 0, 0,
	1262, 935, 936, 937, 938, 939, 940, 941, 0, 1124,
	1125, 1129, 0, 0, 1075, 0, 0, 1180, 1190, 1192,
	1020, 1021, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, -2, -2, -2, 1038, 1039, 1040, -2, -2,
	-2, 0, 0, 0, 1193, 0, 0, 1195, 1196, 1200,
	1201, 0, 1103, 1104, 1105, 1202, 0, 0, 0, 909,
	0, 0, 775, 0, 782, 0, 775, 813, 0, 832,
	815, 795, 806, 0, 803, 793, 0, 794, 0, 822,
	0, 0, 802, 0, 0, 0, 0, 125, 520, 539,
	0, 0, 584, 590, 590, 0, 1073, 1074, 0, 0,
	0, 109, 0, 0, 0, 0, 113, 0, 119, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 95, 131, 0, 0, 156, 505, 0, 491,
	0, 0, 0, 489, 0, 573, 0, 0, 664, 666,
	0, 657, 658, 181, 668, 682, 683, 681, 0, 684,
	690, 687, 693, 0, 0, 135, 0, 0, 850, 857,
	151, 1369, 149, 146, 148, 300, 323, 324, 0, 328,
	469, 470, 503, 503, 760, 766, 749, 593, 0, 0,
	-2, 0, 1009, -2, -2, 1142, 1173, 1216, 1210, 1259,
	744, 1065, 1067, 1068, 944, 1131, 1128, 0, 1115, 1091,
	1092, 1189, 0, 0, 0, 0, 1173, 1144, 1102, 0,
	1108, 1109, 878, 730, 1120, 0, 0, 786, 1120, 0,
	810, 808, 791, 787, 0, 798, 0, 819, 599, 601,
	106, 0, 521, 0, 524, 0, 0, 0, 0, 530,
	531, 0, 0, 0, 0, 541, 548, 0, 593, 1254,
	0, 593, 0, 0, 0, 0, 0, 121, 0, 0,
	609, 0, 124, 124, 598, 0, 0, 97, 0, 604,
	596, 0, 98, 0, 606, 143, 0, 484, 504, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 654, 666,
	0, 659, 660, 0, 0, 0, 675, 685, 0, 0,
	0, 845, 0, 0, 0, 0, 0, 326, 0, 471,
	472, 750, -2, -2, 1010, 1143, 0, 744, 0, 1117,
	-2, 0, 0, 0, 1145, 0, 717, 0, 774, 772,
	718, 831, 822, 0, 817, 108, 0, 525, 526, 1276,
	0, 529, 532, 0, 534, 1278, 497, 0, 545, 546,
	585, 586, 589, 587, 590, 744, 543, 0, 110, 111,
	120, 128, 112, 118, 0, 0, 0, 744, 0, 823,
	0, 0, 548, 0, 538, 497, 487, 548, 0, 0,
	661, 662, 0, 0, 0, 694, 0, 0, 150, 0,
	145, 147, 325, 0, 1066, 1134, 0, -2, 0, 1046,
	1107, 1119, 1121, 0, 796, 788, 523, 527, 0, 0,
	554, 0, 542, 0, 593, 0, 0, 130, 0, 600,
	602, 0, 0, 0, 0, 0, 0, 497, 548, 485,
	497, 0, 663, 664, 0, 678, 843, 680, 0, 0,
	152, 327, 0, 0, 0, 1130, 1047, 0, 0, 0,
	533, 559, 0, 0, 0, 588, 1064, 550, 114, 0,
	127, 0, 0, 0, 0, 0, 0, 536, 497, 579,
	0, 655, 0, 679, 153, 153, 1127, 1132, 1135, -2,
	1440, 1314, 0, 1133, 1122, 1123, 0, 535, 555, 556,
	0, 551, 552, 553, 1277, 547, 554, 129, 100, 102,
	0, 0, 0, 537, 548, 843, 136, 137, 0, 1137,
	1138, 1139, 1140, 1141, 528, 557, 0, 558, 0, 0,
	0, 559, 0, 0, 500, 497, 677, 0, 560, 0,
	563, 564, 0, 561, 544, 0, 0, 496, 498, 499,
	580, 1136, 562, 565, 566, 0, 0, 0, 0, 506,
	0, 507, 0, 505, 0, 0, 0, 504, 510, 0,
	513, 515, -2, 0, 508, 0, 0, 511, 0, 0,
	0, 509, 514, 0, 512, 505, 0, 504, 519, 517,
	0, 518,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 366, 3, 372, 367, 3,
	377, 378, 370, 368, 382, 369, 379, 371, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 386, 381,
	358, 360, 359, 362, 383, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 375, 3, 376, 373, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 384, 365, 385, 363,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 361, 57701, 364, 57702, 374, 57703, 380, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:925
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:931
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:937
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:946
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:964
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:965
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:966
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:967
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:977
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:978
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:979
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:990
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:991
		{
			return helpWith(sqllex, "ALTER")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:994
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:995
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:996
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:997
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1034
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1045
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1054
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1066
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1090
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1116
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1122
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1128
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1137
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1146
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{
					TableOrIndex: TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableName()},
					Partition:    Name(sqlDollar[4].str),
				},
				YAMLConfig: sqlDollar[8].union.expr(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1158
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
					Partition:    Name(sqlDollar[4].str),
				},
				YAMLConfig: sqlDollar[8].union.expr(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1230
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1253
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1263
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = nil
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = DropCascade
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = DropRestrict
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = DropDefault
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1325
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1326
		{
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1329
		{
			return unimplemented(sqllex, "alter using")
		}
	case 130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1330
		{
		}
	case 131:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1357
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.str = "CSV"
		}
	case 136:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1490
		{
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1510
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1511
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1512
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1523
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1534
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1542
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			return helpWith(sqllex, "CREATE")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1548
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1549
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1550
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1552
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1553
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1572
		{
			return helpWith(sqllex, "DELETE")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1582
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1583
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1584
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1585
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1586
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1593
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1594
		{
			return helpWith(sqllex, "DROP")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1597
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1598
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1599
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1600
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1615
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1630
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1653
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1676
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1691
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1739
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1751
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1755
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1757
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1758
		{
			return helpWith(sqllex, "DELETE")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1759
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1760
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1761
		{
			return helpWith(sqllex, "INSERT")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1762
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1764
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1765
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1771
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1773
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1774
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1781
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1782
		{ /* SKIP DOC */
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1810
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1834
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1889
		{
			return helpWith(sqllex, "GRANT")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1909
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1928
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1931
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1978
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			return helpWith(sqllex, "RESET")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1988
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2003
		{
			return helpWith(sqllex, "RESET")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2014
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2019
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2022
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2026
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2027
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2028
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2029
		{ /* SKIP DOC */
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2030
		{ /* SKIP DOC */
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2031
		{
			return unimplemented(sqllex, "set local")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &ScrubOptionPhysical{}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2095
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2145
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2150
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2158
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2167
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2170
		{
			return unimplemented(sqllex, "set from current")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2172
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2178
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2182
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = Low
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = Normal
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = High
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2253
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2281
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2282
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2283
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2284
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2285
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2286
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2287
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2288
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2289
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2290
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2291
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2292
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2293
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2294
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2296
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2297
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2298
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2300
		{
			return helpWith(sqllex, "SHOW")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2309
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.str = "client_encoding"
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2324
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2335
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2352
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2357
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2368
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2379
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2390
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2401
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2406
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2411
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2422
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2427
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2438
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2457
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2470
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2475
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2493
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2516
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2524
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2528
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2532
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2535
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2546
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2557
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2568
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2572
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[7].str)}}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2576
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2580
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{
				TableOrIndex: TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableName()},
				Partition:    Name(sqlDollar[8].str),
			}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2587
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
				Partition:    Name(sqlDollar[8].str),
			}}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2594
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2598
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2604
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2608
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2612
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2646
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2753
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2757
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = DropDefault
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 503:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.str = ""
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   UnrestrictedName(sqlDollar[1].str),
				Tuples: sqlDollar[3].union.tuples(),
			}}, sqlDollar[5].union.listPartitions()...)
		}
	case 509:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuples:       sqlDollar[3].union.tuples(),
				Subpartition: sqlDollar[4].union.partitionBy(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuples:       sqlDollar[3].union.tuples(),
				Subpartition: sqlDollar[4].union.partitionBy(),
			}}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2832
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  UnrestrictedName(sqlDollar[1].str),
				Tuple: &Tuple{Exprs: sqlDollar[6].union.exprs()},
			}}, sqlDollar[9].union.rangePartitions()...)
		}
	case 518:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuple:        &Tuple{Exprs: sqlDollar[6].union.exprs()},
				Subpartition: sqlDollar[8].union.partitionBy(),
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuple:        &Tuple{Exprs: sqlDollar[6].union.exprs()},
				Subpartition: sqlDollar[8].union.partitionBy(),
			}}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2880
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2939
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2951
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3087
		{
			return unimplemented(sqllex, "match full")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3088
		{
			return unimplemented(sqllex, "match partial")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3089
		{
			return unimplemented(sqllex, "match simple")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3090
		{
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = NoAction
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = Restrict
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = Cascade
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = SetNull
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = SetDefault
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3176
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3191
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = nil
		}
	case 577:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3216
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3256
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = true
		}
	case 583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = false
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3286
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3287
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3290
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3291
		{
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = Ascending
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = Descending
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 594:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3342
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3344
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = true
		}
	case 608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = false
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3377
		{
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3378
		{
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3389
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3400
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3411
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3415
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3416
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3417
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3435
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3440
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3453
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3458
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3466
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3473
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3476
		{
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3477
		{
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.str = ""
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.str = ""
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3523
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3536
		{
		}
	case 646:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3538
		{
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = ReadOnly
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = ReadWrite
		}
	case 654:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3602
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.str = ""
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.str = ""
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.str = ""
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3636
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.str = ""
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3645
		{
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3646
		{
		}
	case 667:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3670
		{
			return helpWith(sqllex, "INSERT")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3687
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3729
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3733
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3741
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 685:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3764
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3768
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3769
		{
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: sqlDollar[5].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3896
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3931
		{
			return helpWith(sqllex, "SELECT")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3932
		{
			return helpWith(sqllex, "VALUES")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3933
		{
			return helpWith(sqllex, "TABLE")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3980
		{
			return helpWith(sqllex, "SELECT")
		}
	case 720:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4024
		{
			return helpWith(sqllex, "TABLE")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4035
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4036
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4037
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4040
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4041
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4044
		{
			return unimplemented(sqllex, "cte")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4047
		{
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4048
		{
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4051
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4052
		{
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4055
		{
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4056
		{
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = true
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = false
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = false
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = true
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4079
		{
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4080
		{
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[4].str)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4134
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4158
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4210
		{
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4211
		{
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4214
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4215
		{
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = false
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = true
		}
	case 779:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4286
		{
			return helpWith(sqllex, "VALUES")
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4288
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4303
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = &From{}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4325
		{
			/* SKIP DOC */
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(sqlDollar[4].union.int64())}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4341
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[2].str)}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(sqlDollar[3].union.int64())}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 796:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4403
		{
			/* SKIP DOC */
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4423
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = nil
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = []ColumnID{ColumnID(sqlDollar[1].union.int64())}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(sqlDollar[3].union.int64()))
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = true
		}
	case 810:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = false
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4549
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4553
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.str = astFullJoin
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.str = astLeftJoin
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.str = astRightJoin
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.str = astInnerJoin
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4577
		{
		}
	case 830:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4578
		{
		}
	case 831:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4593
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4599
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4638
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4642
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 843:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4664
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4678
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4686
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4710
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 857:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4721
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = jsonbColType
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = jsonColType
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4779
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = &DecimalColType{Prec: int(sqlDollar[2].union.int64())}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = &DecimalColType{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = nil
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4849
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4853
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4861
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4865
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4869
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4925
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 904:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4965
		{
			bit, err := newIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 915:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5027
		{
		}
	case 922:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5028
		{
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 927:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = year
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = month
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5068
		{
			sqlVAL.union.val = day
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = hour
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = minute
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = month
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = hour
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = minute
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = minute
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 942:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = nil
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = second
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5123
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5158
		{
			return unimplemented(sqllex, "at tz")
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Existence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SomeExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: AllExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5239
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5243
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5255
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5299
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5303
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5307
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5335
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5339
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5343
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5359
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5363
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5366
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5368
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5372
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5376
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5380
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5384
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5388
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5392
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5412
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5420
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5432
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5449
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5472
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5476
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5480
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5484
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5488
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5492
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5496
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5500
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5504
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5508
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5512
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5516
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5520
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5524
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5528
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5532
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5536
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5540
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5544
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5548
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5552
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5556
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5560
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5564
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5568
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5572
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5585
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5593
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5604
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5609
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5618
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5622
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5627
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5631
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5635
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5639
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5643
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5651
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5655
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5658
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5659
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5661
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5665
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5669
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5672
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5683
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5699
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5700
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5704
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5706
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5710
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5713
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5715
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5719
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5722
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5724
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5728
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5731
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5732
		{
			return unimplemented(sqllex, "current role")
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5734
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5738
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5741
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5743
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5747
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5751
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5755
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5759
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5762
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5764
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5767
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5769
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5772
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5774
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5781
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5782
		{
			return unimplemented(sqllex, "treat")
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5792
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5800
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5804
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5808
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5812
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5816
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5819
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5821
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5824
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5828
		{
			return unimplemented(sqllex, "within group")
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5829
		{
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5833
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5837
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5844
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5848
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5854
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5858
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5864
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5872
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5876
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5880
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5887
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5906
		{
			sqlVAL.str = ""
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5926
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5927
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5928
		{
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5931
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5932
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5938
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5939
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5940
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5941
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5942
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5953
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5957
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5963
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5969
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5975
		{
			sqlVAL.union.val = Any
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5979
		{
			sqlVAL.union.val = Some
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5983
		{
			sqlVAL.union.val = All
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5988
		{
			sqlVAL.union.val = Plus
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5989
		{
			sqlVAL.union.val = Minus
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5990
		{
			sqlVAL.union.val = Mult
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5991
		{
			sqlVAL.union.val = Div
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5993
		{
			sqlVAL.union.val = Mod
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5994
		{
			sqlVAL.union.val = Bitand
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5995
		{
			sqlVAL.union.val = Bitor
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5996
		{
			sqlVAL.union.val = Pow
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = Bitxor
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = LT
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5999
		{
			sqlVAL.union.val = GT
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6000
		{
			sqlVAL.union.val = EQ
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6001
		{
			sqlVAL.union.val = LE
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = GE
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6003
		{
			sqlVAL.union.val = NE
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6007
		{
			sqlVAL.union.val = Like
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6008
		{
			sqlVAL.union.val = NotLike
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6009
		{
			sqlVAL.union.val = ILike
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6010
		{
			sqlVAL.union.val = NotILike
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6028
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6032
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6048
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6052
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6058
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6062
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6068
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6072
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6094
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6098
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6102
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6108
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6115
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6119
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6136
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6140
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6144
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6148
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6152
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6158
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6164
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6170
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6174
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6178
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6184
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6188
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6199
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6206
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6210
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6216
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6222
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6226
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6233
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6239
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6243
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6250
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6256
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6262
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6268
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6272
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6278
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6282
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6288
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6292
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6297
		{
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6298
		{
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6302
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6306
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6312
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6321
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[2].str)}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6325
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6329
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6337
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6341
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6347
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6351
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6357
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6361
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6372
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6376
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6382
		{
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6386
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6399
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6403
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6407
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6411
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6417
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6421
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6427
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6430
		{
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6440
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6444
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6451
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6455
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6459
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6463
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6466
		{
			return unimplemented(sqllex, "func const")
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6468
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6472
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6475
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6477
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6481
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6485
		{
			sqlVAL.union.val = DNull
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6492
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6496
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6503
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6514
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6524
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6559
		{
			sqlVAL.str = ""
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6565
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6569
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
