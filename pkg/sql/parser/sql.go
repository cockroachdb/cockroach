// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line gen/sql.y:18
package parser

import __yyfmt__ "fmt"

//line gen/sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line gen/sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line gen/sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const GRANT = 57467
const GRANTS = 57468
const GREATEST = 57469
const GROUP = 57470
const GROUPING = 57471
const HAVING = 57472
const HELP = 57473
const HIGH = 57474
const HOUR = 57475
const IMPORT = 57476
const INCREMENTAL = 57477
const IF = 57478
const IFNULL = 57479
const ILIKE = 57480
const IN = 57481
const INTERLEAVE = 57482
const INDEX = 57483
const INDEXES = 57484
const INITIALLY = 57485
const INNER = 57486
const INSERT = 57487
const INT = 57488
const INT2VECTOR = 57489
const INT2 = 57490
const INT4 = 57491
const INT8 = 57492
const INT64 = 57493
const INTEGER = 57494
const INTERSECT = 57495
const INTERVAL = 57496
const INTO = 57497
const IS = 57498
const ISOLATION = 57499
const JOB = 57500
const JOBS = 57501
const JOIN = 57502
const KEY = 57503
const KEYS = 57504
const KV = 57505
const LATERAL = 57506
const LC_CTYPE = 57507
const LC_COLLATE = 57508
const LEADING = 57509
const LEAST = 57510
const LEFT = 57511
const LEVEL = 57512
const LIKE = 57513
const LIMIT = 57514
const LOCAL = 57515
const LOCALTIME = 57516
const LOCALTIMESTAMP = 57517
const LOW = 57518
const LSHIFT = 57519
const MATCH = 57520
const MINUTE = 57521
const MONTH = 57522
const NAN = 57523
const NAME = 57524
const NAMES = 57525
const NATURAL = 57526
const NEXT = 57527
const NO = 57528
const NO_INDEX_JOIN = 57529
const NORMAL = 57530
const NOT = 57531
const NOTHING = 57532
const NULL = 57533
const NULLIF = 57534
const NULLS = 57535
const NUMERIC = 57536
const OF = 57537
const OFF = 57538
const OFFSET = 57539
const OID = 57540
const ON = 57541
const ONLY = 57542
const OPTIONS = 57543
const OR = 57544
const ORDER = 57545
const ORDINALITY = 57546
const OUT = 57547
const OUTER = 57548
const OVER = 57549
const OVERLAPS = 57550
const OVERLAY = 57551
const PARENT = 57552
const PARTIAL = 57553
const PARTITION = 57554
const PASSWORD = 57555
const PAUSE = 57556
const PLACING = 57557
const PLANS = 57558
const POSITION = 57559
const PRECEDING = 57560
const PRECISION = 57561
const PREPARE = 57562
const PRIMARY = 57563
const PRIORITY = 57564
const QUERIES = 57565
const QUERY = 57566
const RANGE = 57567
const READ = 57568
const REAL = 57569
const RECURSIVE = 57570
const REF = 57571
const REFERENCES = 57572
const REGCLASS = 57573
const REGPROC = 57574
const REGPROCEDURE = 57575
const REGNAMESPACE = 57576
const REGTYPE = 57577
const RENAME = 57578
const REPEATABLE = 57579
const RELEASE = 57580
const RESET = 57581
const RESTORE = 57582
const RESTRICT = 57583
const RESUME = 57584
const RETURNING = 57585
const REVOKE = 57586
const RIGHT = 57587
const ROLLBACK = 57588
const ROLLUP = 57589
const ROW = 57590
const ROWS = 57591
const RSHIFT = 57592
const SAVEPOINT = 57593
const SCATTER = 57594
const SEARCH = 57595
const SECOND = 57596
const SELECT = 57597
const SEQUENCES = 57598
const SERIAL = 57599
const SERIALIZABLE = 57600
const SESSION = 57601
const SESSIONS = 57602
const SESSION_USER = 57603
const SET = 57604
const SETTING = 57605
const SETTINGS = 57606
const SHOW = 57607
const SIMILAR = 57608
const SIMPLE = 57609
const SMALLINT = 57610
const SMALLSERIAL = 57611
const SNAPSHOT = 57612
const SOME = 57613
const SPLIT = 57614
const SQL = 57615
const START = 57616
const STATUS = 57617
const STDIN = 57618
const STRICT = 57619
const STRING = 57620
const STORE = 57621
const STORING = 57622
const SUBSTRING = 57623
const SYMMETRIC = 57624
const SYSTEM = 57625
const TABLE = 57626
const TABLES = 57627
const TEMP = 57628
const TEMPLATE = 57629
const TEMPORARY = 57630
const TESTING_RANGES = 57631
const TESTING_RELOCATE = 57632
const TEXT = 57633
const THEN = 57634
const TIME = 57635
const TIMESTAMP = 57636
const TIMESTAMPTZ = 57637
const TO = 57638
const TRAILING = 57639
const TRACE = 57640
const TRANSACTION = 57641
const TREAT = 57642
const TRIM = 57643
const TRUE = 57644
const TRUNCATE = 57645
const TYPE = 57646
const UNBOUNDED = 57647
const UNCOMMITTED = 57648
const UNION = 57649
const UNIQUE = 57650
const UNKNOWN = 57651
const UPDATE = 57652
const UPSERT = 57653
const USE = 57654
const USER = 57655
const USERS = 57656
const USING = 57657
const UUID = 57658
const VALID = 57659
const VALIDATE = 57660
const VALUE = 57661
const VALUES = 57662
const VARCHAR = 57663
const VARIADIC = 57664
const VIEW = 57665
const VARYING = 57666
const WHEN = 57667
const WHERE = 57668
const WINDOW = 57669
const WITH = 57670
const WITHIN = 57671
const WITHOUT = 57672
const WRITE = 57673
const YEAR = 57674
const ZONE = 57675
const NOT_LA = 57676
const WITH_LA = 57677
const AS_LA = 57678
const POSTFIXOP = 57679
const UMINUS = 57680
const HELPTOKEN = 57681

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line gen/sql.y:6476

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	358, 54,
	-2, 660,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	141, 514,
	-2, 0,
	-1, 61,
	92, 660,
	145, 660,
	310, 660,
	311, 660,
	-2, 0,
	-1, 72,
	103, 635,
	112, 635,
	153, 635,
	172, 635,
	197, 635,
	203, 635,
	307, 635,
	-2, 624,
	-1, 103,
	4, 662,
	20, 662,
	21, 662,
	23, 662,
	28, 662,
	33, 662,
	34, 662,
	35, 662,
	36, 662,
	37, 662,
	38, 662,
	39, 662,
	40, 662,
	41, 662,
	42, 662,
	44, 662,
	45, 662,
	46, 662,
	47, 662,
	48, 662,
	51, 662,
	52, 662,
	53, 662,
	55, 662,
	56, 662,
	60, 662,
	61, 662,
	62, 662,
	64, 662,
	66, 662,
	67, 662,
	68, 662,
	71, 662,
	72, 662,
	73, 662,
	81, 662,
	82, 662,
	83, 662,
	84, 662,
	85, 662,
	86, 662,
	87, 662,
	88, 662,
	90, 662,
	92, 662,
	94, 662,
	97, 662,
	98, 662,
	100, 662,
	104, 662,
	105, 662,
	106, 662,
	107, 662,
	108, 662,
	109, 662,
	113, 662,
	114, 662,
	115, 662,
	116, 662,
	117, 662,
	119, 662,
	121, 662,
	126, 662,
	127, 662,
	129, 662,
	131, 662,
	132, 662,
	133, 662,
	134, 662,
	135, 662,
	136, 662,
	137, 662,
	140, 662,
	142, 662,
	145, 662,
	146, 662,
	147, 662,
	148, 662,
	149, 662,
	150, 662,
	151, 662,
	152, 662,
	154, 662,
	157, 662,
	158, 662,
	159, 662,
	161, 662,
	162, 662,
	163, 662,
	165, 662,
	166, 662,
	168, 662,
	170, 662,
	173, 662,
	176, 662,
	178, 662,
	179, 662,
	180, 662,
	181, 662,
	182, 662,
	183, 662,
	185, 662,
	186, 662,
	187, 662,
	188, 662,
	192, 662,
	193, 662,
	194, 662,
	195, 662,
	196, 662,
	198, 662,
	200, 662,
	201, 662,
	204, 662,
	205, 662,
	207, 662,
	209, 662,
	210, 662,
	211, 662,
	212, 662,
	213, 662,
	214, 662,
	216, 662,
	217, 662,
	218, 662,
	219, 662,
	220, 662,
	222, 662,
	223, 662,
	224, 662,
	225, 662,
	226, 662,
	227, 662,
	228, 662,
	229, 662,
	231, 662,
	232, 662,
	233, 662,
	234, 662,
	235, 662,
	236, 662,
	237, 662,
	238, 662,
	239, 662,
	240, 662,
	241, 662,
	242, 662,
	244, 662,
	246, 662,
	247, 662,
	248, 662,
	249, 662,
	251, 662,
	252, 662,
	253, 662,
	254, 662,
	256, 662,
	257, 662,
	258, 662,
	259, 662,
	260, 662,
	262, 662,
	263, 662,
	264, 662,
	265, 662,
	267, 662,
	268, 662,
	269, 662,
	270, 662,
	272, 662,
	273, 662,
	274, 662,
	275, 662,
	276, 662,
	277, 662,
	278, 662,
	279, 662,
	280, 662,
	281, 662,
	283, 662,
	285, 662,
	286, 662,
	287, 662,
	288, 662,
	289, 662,
	290, 662,
	291, 662,
	293, 662,
	294, 662,
	295, 662,
	298, 662,
	299, 662,
	300, 662,
	301, 662,
	303, 662,
	304, 662,
	305, 662,
	306, 662,
	309, 662,
	310, 662,
	311, 662,
	312, 662,
	314, 662,
	316, 662,
	317, 662,
	318, 662,
	319, 662,
	320, 662,
	321, 662,
	324, 662,
	329, 662,
	330, 662,
	331, 662,
	332, 662,
	333, 662,
	-2, 0,
	-1, 116,
	103, 634,
	112, 634,
	153, 634,
	172, 634,
	197, 634,
	203, 634,
	307, 634,
	-2, 627,
	-1, 120,
	1, 563,
	157, 563,
	222, 563,
	226, 563,
	357, 563,
	358, 563,
	-2, 0,
	-1, 122,
	1, 563,
	357, 563,
	358, 563,
	-2, 0,
	-1, 123,
	1, 563,
	357, 563,
	358, 563,
	-2, 0,
	-1, 124,
	1, 567,
	357, 567,
	358, 567,
	-2, 0,
	-1, 131,
	4, 668,
	5, 668,
	6, 668,
	7, 668,
	8, 668,
	9, 668,
	20, 668,
	21, 668,
	23, 668,
	28, 668,
	29, 668,
	33, 668,
	34, 668,
	35, 668,
	36, 668,
	37, 668,
	38, 668,
	39, 668,
	40, 668,
	41, 668,
	42, 668,
	44, 668,
	45, 668,
	46, 668,
	47, 668,
	48, 668,
	49, 668,
	50, 668,
	51, 668,
	52, 668,
	53, 668,
	55, 668,
	56, 668,
	58, 668,
	60, 668,
	61, 668,
	62, 668,
	64, 668,
	66, 668,
	67, 668,
	68, 668,
	70, 668,
	71, 668,
	72, 668,
	73, 668,
	75, 668,
	76, 668,
	77, 668,
	79, 668,
	80, 668,
	81, 668,
	82, 668,
	83, 668,
	84, 668,
	85, 668,
	86, 668,
	87, 668,
	88, 668,
	90, 668,
	92, 668,
	94, 668,
	97, 668,
	98, 668,
	100, 668,
	104, 668,
	105, 668,
	106, 668,
	107, 668,
	108, 668,
	109, 668,
	110, 668,
	113, 668,
	114, 668,
	115, 668,
	116, 668,
	117, 668,
	119, 668,
	121, 668,
	124, 668,
	126, 668,
	127, 668,
	129, 668,
	131, 668,
	132, 668,
	133, 668,
	134, 668,
	135, 668,
	136, 668,
	137, 668,
	138, 668,
	140, 668,
	142, 668,
	144, 668,
	145, 668,
	146, 668,
	147, 668,
	148, 668,
	149, 668,
	150, 668,
	151, 668,
	152, 668,
	154, 668,
	156, 668,
	157, 668,
	158, 668,
	159, 668,
	160, 668,
	161, 668,
	162, 668,
	163, 668,
	165, 668,
	166, 668,
	168, 668,
	169, 668,
	170, 668,
	171, 668,
	173, 668,
	176, 668,
	178, 668,
	179, 668,
	180, 668,
	181, 668,
	182, 668,
	183, 668,
	184, 668,
	185, 668,
	186, 668,
	187, 668,
	188, 668,
	189, 668,
	191, 668,
	192, 668,
	193, 668,
	194, 668,
	195, 668,
	196, 668,
	198, 668,
	201, 668,
	204, 668,
	205, 668,
	206, 668,
	207, 668,
	208, 668,
	209, 668,
	210, 668,
	211, 668,
	212, 668,
	213, 668,
	214, 668,
	216, 668,
	217, 668,
	218, 668,
	219, 668,
	220, 668,
	222, 668,
	223, 668,
	224, 668,
	225, 668,
	226, 668,
	227, 668,
	228, 668,
	229, 668,
	231, 668,
	232, 668,
	233, 668,
	234, 668,
	235, 668,
	236, 668,
	237, 668,
	238, 668,
	239, 668,
	240, 668,
	241, 668,
	242, 668,
	244, 668,
	245, 668,
	246, 668,
	247, 668,
	248, 668,
	249, 668,
	251, 668,
	252, 668,
	253, 668,
	254, 668,
	256, 668,
	257, 668,
	258, 668,
	259, 668,
	260, 668,
	261, 668,
	262, 668,
	263, 668,
	264, 668,
	265, 668,
	266, 668,
	267, 668,
	268, 668,
	269, 668,
	270, 668,
	272, 668,
	273, 668,
	274, 668,
	275, 668,
	276, 668,
	277, 668,
	278, 668,
	279, 668,
	280, 668,
	281, 668,
	283, 668,
	285, 668,
	286, 668,
	287, 668,
	288, 668,
	289, 668,
	290, 668,
	291, 668,
	293, 668,
	294, 668,
	295, 668,
	298, 668,
	299, 668,
	300, 668,
	301, 668,
	302, 668,
	303, 668,
	304, 668,
	305, 668,
	306, 668,
	309, 668,
	310, 668,
	311, 668,
	312, 668,
	313, 668,
	314, 668,
	316, 668,
	317, 668,
	318, 668,
	319, 668,
	320, 668,
	321, 668,
	324, 668,
	329, 668,
	330, 668,
	331, 668,
	332, 668,
	333, 668,
	334, 668,
	340, 668,
	345, 668,
	346, 668,
	347, 668,
	354, 668,
	360, 668,
	-2, 0,
	-1, 134,
	1, 54,
	358, 54,
	-2, 660,
	-1, 595,
	123, 1256,
	296, 1256,
	339, 1256,
	356, 1256,
	-2, 0,
	-1, 596,
	123, 1208,
	296, 1208,
	339, 1208,
	356, 1208,
	-2, 0,
	-1, 598,
	123, 1314,
	296, 1314,
	339, 1314,
	356, 1314,
	-2, 0,
	-1, 600,
	123, 1336,
	296, 1336,
	339, 1336,
	356, 1336,
	-2, 0,
	-1, 607,
	1, 300,
	357, 300,
	358, 300,
	-2, 1261,
	-1, 633,
	1, 382,
	353, 382,
	355, 382,
	357, 382,
	358, 382,
	-2, 0,
	-1, 634,
	1, 430,
	120, 430,
	353, 430,
	355, 430,
	357, 430,
	358, 430,
	-2, 0,
	-1, 640,
	1, 396,
	353, 396,
	355, 396,
	357, 396,
	358, 396,
	-2, 0,
	-1, 642,
	1, 400,
	353, 400,
	355, 400,
	357, 400,
	358, 400,
	-2, 0,
	-1, 645,
	1, 408,
	353, 408,
	355, 408,
	357, 408,
	358, 408,
	-2, 0,
	-1, 646,
	1, 413,
	353, 413,
	355, 413,
	357, 413,
	358, 413,
	-2, 0,
	-1, 649,
	1, 423,
	353, 423,
	355, 423,
	357, 423,
	358, 423,
	-2, 0,
	-1, 658,
	112, 670,
	172, 670,
	197, 670,
	-2, 630,
	-1, 661,
	112, 669,
	172, 669,
	197, 669,
	-2, 628,
	-1, 791,
	354, 1186,
	-2, 1179,
	-1, 792,
	354, 1187,
	-2, 1180,
	-1, 798,
	5, 843,
	354, 843,
	-2, 1387,
	-1, 823,
	5, 802,
	-2, 1357,
	-1, 824,
	5, 837,
	354, 837,
	-2, 1359,
	-1, 825,
	5, 812,
	-2, 1360,
	-1, 826,
	5, 811,
	-2, 1361,
	-1, 827,
	5, 837,
	354, 837,
	-2, 1364,
	-1, 828,
	5, 837,
	354, 837,
	-2, 1365,
	-1, 829,
	5, 838,
	-2, 1368,
	-1, 830,
	5, 794,
	-2, 1369,
	-1, 831,
	5, 794,
	-2, 1370,
	-1, 832,
	5, 819,
	-2, 1374,
	-1, 833,
	5, 804,
	-2, 1375,
	-1, 834,
	5, 805,
	-2, 1376,
	-1, 835,
	5, 795,
	-2, 1381,
	-1, 836,
	5, 796,
	-2, 1382,
	-1, 837,
	5, 797,
	-2, 1383,
	-1, 838,
	5, 798,
	-2, 1384,
	-1, 839,
	5, 799,
	-2, 1385,
	-1, 840,
	5, 800,
	-2, 1386,
	-1, 841,
	5, 794,
	-2, 1391,
	-1, 842,
	5, 803,
	-2, 1396,
	-1, 843,
	5, 801,
	-2, 1399,
	-1, 844,
	5, 835,
	354, 835,
	-2, 1401,
	-1, 845,
	5, 839,
	-2, 1404,
	-1, 846,
	5, 841,
	-2, 1405,
	-1, 847,
	5, 834,
	354, 834,
	-2, 1410,
	-1, 865,
	213, 658,
	-2, 507,
	-1, 869,
	199, 1183,
	-2, 0,
	-1, 904,
	1, 209,
	353, 209,
	355, 209,
	357, 209,
	358, 209,
	-2, 633,
	-1, 907,
	4, 1409,
	10, 1409,
	11, 1409,
	13, 1409,
	14, 1409,
	15, 1409,
	16, 1409,
	17, 1409,
	18, 1409,
	20, 1409,
	21, 1409,
	23, 1409,
	26, 1409,
	28, 1409,
	30, 1409,
	33, 1409,
	34, 1409,
	35, 1409,
	36, 1409,
	37, 1409,
	38, 1409,
	39, 1409,
	40, 1409,
	41, 1409,
	42, 1409,
	44, 1409,
	45, 1409,
	46, 1409,
	47, 1409,
	48, 1409,
	51, 1409,
	52, 1409,
	53, 1409,
	55, 1409,
	56, 1409,
	57, 1409,
	60, 1409,
	61, 1409,
	62, 1409,
	63, 1409,
	64, 1409,
	66, 1409,
	67, 1409,
	68, 1409,
	70, 1409,
	71, 1409,
	72, 1409,
	73, 1409,
	81, 1409,
	82, 1409,
	83, 1409,
	84, 1409,
	85, 1409,
	86, 1409,
	87, 1409,
	88, 1409,
	90, 1409,
	92, 1409,
	94, 1409,
	97, 1409,
	98, 1409,
	100, 1409,
	104, 1409,
	105, 1409,
	106, 1409,
	107, 1409,
	108, 1409,
	109, 1409,
	113, 1409,
	114, 1409,
	115, 1409,
	116, 1409,
	117, 1409,
	118, 1409,
	119, 1409,
	121, 1409,
	124, 1409,
	126, 1409,
	127, 1409,
	129, 1409,
	131, 1409,
	132, 1409,
	133, 1409,
	134, 1409,
	135, 1409,
	136, 1409,
	137, 1409,
	138, 1409,
	139, 1409,
	140, 1409,
	142, 1409,
	144, 1409,
	145, 1409,
	146, 1409,
	147, 1409,
	148, 1409,
	149, 1409,
	150, 1409,
	151, 1409,
	152, 1409,
	154, 1409,
	156, 1409,
	157, 1409,
	158, 1409,
	159, 1409,
	160, 1409,
	161, 1409,
	162, 1409,
	163, 1409,
	165, 1409,
	166, 1409,
	168, 1409,
	169, 1409,
	170, 1409,
	171, 1409,
	173, 1409,
	176, 1409,
	177, 1409,
	178, 1409,
	179, 1409,
	180, 1409,
	181, 1409,
	182, 1409,
	183, 1409,
	184, 1409,
	185, 1409,
	186, 1409,
	187, 1409,
	188, 1409,
	192, 1409,
	193, 1409,
	194, 1409,
	195, 1409,
	196, 1409,
	198, 1409,
	201, 1409,
	202, 1409,
	204, 1409,
	205, 1409,
	207, 1409,
	209, 1409,
	210, 1409,
	211, 1409,
	212, 1409,
	213, 1409,
	214, 1409,
	216, 1409,
	217, 1409,
	218, 1409,
	219, 1409,
	220, 1409,
	222, 1409,
	223, 1409,
	224, 1409,
	225, 1409,
	226, 1409,
	227, 1409,
	228, 1409,
	229, 1409,
	231, 1409,
	232, 1409,
	233, 1409,
	234, 1409,
	235, 1409,
	236, 1409,
	237, 1409,
	238, 1409,
	239, 1409,
	240, 1409,
	241, 1409,
	242, 1409,
	244, 1409,
	245, 1409,
	246, 1409,
	247, 1409,
	248, 1409,
	249, 1409,
	250, 1409,
	251, 1409,
	252, 1409,
	253, 1409,
	254, 1409,
	256, 1409,
	257, 1409,
	258, 1409,
	259, 1409,
	260, 1409,
	262, 1409,
	263, 1409,
	264, 1409,
	265, 1409,
	266, 1409,
	267, 1409,
	268, 1409,
	269, 1409,
	270, 1409,
	272, 1409,
	273, 1409,
	274, 1409,
	275, 1409,
	276, 1409,
	277, 1409,
	278, 1409,
	279, 1409,
	280, 1409,
	281, 1409,
	283, 1409,
	285, 1409,
	286, 1409,
	287, 1409,
	288, 1409,
	289, 1409,
	290, 1409,
	291, 1409,
	293, 1409,
	294, 1409,
	295, 1409,
	298, 1409,
	299, 1409,
	300, 1409,
	301, 1409,
	303, 1409,
	304, 1409,
	305, 1409,
	306, 1409,
	309, 1409,
	310, 1409,
	311, 1409,
	312, 1409,
	314, 1409,
	316, 1409,
	317, 1409,
	318, 1409,
	319, 1409,
	320, 1409,
	321, 1409,
	324, 1409,
	329, 1409,
	330, 1409,
	331, 1409,
	332, 1409,
	333, 1409,
	334, 1409,
	335, 1409,
	337, 1409,
	338, 1409,
	339, 1409,
	340, 1409,
	342, 1409,
	343, 1409,
	344, 1409,
	345, 1409,
	346, 1409,
	347, 1409,
	348, 1409,
	349, 1409,
	350, 1409,
	352, 1409,
	355, 1409,
	356, 1409,
	359, 1409,
	360, 1409,
	-2, 0,
	-1, 932,
	123, 1336,
	296, 1336,
	339, 1336,
	356, 1336,
	-2, 0,
	-1, 1000,
	112, 669,
	172, 669,
	197, 669,
	-2, 631,
	-1, 1054,
	103, 635,
	112, 635,
	153, 635,
	172, 635,
	197, 635,
	203, 635,
	307, 635,
	-2, 729,
	-1, 1135,
	103, 635,
	112, 635,
	153, 635,
	172, 635,
	197, 635,
	203, 635,
	307, 635,
	-2, 962,
	-1, 1145,
	354, 1163,
	-2, 1151,
	-1, 1162,
	355, 1103,
	-2, 0,
	-1, 1396,
	1, 730,
	70, 730,
	103, 730,
	112, 730,
	124, 730,
	128, 730,
	130, 730,
	144, 730,
	153, 730,
	160, 730,
	169, 730,
	172, 730,
	184, 730,
	197, 730,
	199, 730,
	203, 730,
	243, 730,
	245, 730,
	307, 730,
	315, 730,
	326, 730,
	327, 730,
	336, 730,
	353, 730,
	355, 730,
	357, 730,
	358, 730,
	359, 730,
	-2, 729,
	-1, 1456,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 878,
	-1, 1457,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 879,
	-1, 1458,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 880,
	-1, 1462,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 884,
	-1, 1463,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 885,
	-1, 1464,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 886,
	-1, 1467,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 891,
	-1, 1473,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 893,
	-1, 1475,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 897,
	-1, 1476,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 898,
	-1, 1477,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 899,
	-1, 1478,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 900,
	-1, 1504,
	208, 1045,
	-2, 1048,
	-1, 1546,
	123, 1085,
	354, 1186,
	-2, 1179,
	-1, 1547,
	123, 1086,
	-2, 1353,
	-1, 1548,
	123, 1087,
	-2, 1260,
	-1, 1549,
	123, 1088,
	-2, 1223,
	-1, 1550,
	123, 1089,
	-2, 1240,
	-1, 1551,
	123, 1090,
	-2, 1259,
	-1, 1552,
	123, 1091,
	-2, 1311,
	-1, 1758,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 892,
	-1, 1759,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 894,
	-1, 1764,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 895,
	-1, 1782,
	208, 1044,
	-2, 1047,
	-1, 1993,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 896,
	-1, 1998,
	156, 0,
	-2, 912,
	-1, 2008,
	208, 1046,
	-2, 1049,
	-1, 2050,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 939,
	-1, 2051,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 940,
	-1, 2052,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 941,
	-1, 2056,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 945,
	-1, 2057,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 946,
	-1, 2058,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 947,
	-1, 2184,
	156, 0,
	-2, 913,
	-1, 2187,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 916,
	-1, 2188,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 918,
	-1, 2289,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 917,
	-1, 2290,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 919,
	-1, 2297,
	156, 0,
	-2, 948,
	-1, 2352,
	156, 0,
	-2, 949,
	-1, 2423,
	36, 0,
	138, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 1356,
}

const sqlPrivate = 57344

const sqlLast = 41503

var sqlAct = [...]int{

	792, 2422, 2081, 2406, 2375, 2452, 1617, 2407, 1918, 2264,
	2408, 2421, 1625, 662, 1191, 2027, 2225, 2091, 2327, 1198,
	71, 2143, 2157, 1597, 1232, 2114, 1886, 1391, 768, 1283,
	1964, 1048, 2112, 2244, 1683, 1601, 955, 1282, 718, 1965,
	173, 1888, 782, 1052, 173, 1891, 790, 859, 1713, 1233,
	1596, 2106, 173, 2123, 1614, 1035, 1029, 1057, 1848, 789,
	1626, 173, 1847, 1600, 465, 1692, 1793, 173, 173, 1528,
	1502, 173, 1211, 1435, 173, 1400, 1392, 445, 25, 1194,
	1935, 173, 1700, 1409, 438, 1357, 1309, 936, 1432, 1141,
	1679, 1667, 1187, 463, 1060, 1512, 762, 1490, 670, 115,
	1487, 1062, 1575, 682, 935, 606, 1030, 435, 894, 724,
	1172, 1522, 1598, 891, 1176, 1542, 761, 683, 905, 884,
	688, 1619, 1130, 1378, 1604, 579, 173, 173, 727, 1039,
	1365, 706, 1003, 116, 173, 1004, 1002, 603, 601, 667,
	1307, 674, 1020, 784, 1205, 164, 455, 2158, 117, 169,
	881, 1008, 1019, 704, 583, 599, 679, 1781, 1049, 1933,
	115, 173, 173, 173, 173, 1213, 1618, 1949, 173, 173,
	1950, 666, 1213, 2449, 2430, 1213, 2418, 1082, 2156, 2417,
	1640, 666, 2414, 1640, 661, 38, 1082, 1903, 1079, 2402,
	2401, 721, 748, 1655, 1655, 1640, 2392, 2370, 2366, 1902,
	1648, 2239, 1082, 2358, 2354, 2309, 671, 2156, 1648, 2156,
	2306, 2304, 25, 571, 1082, 2156, 2291, 2275, 2274, 2252,
	1648, 1082, 2156, 1082, 1818, 1819, 2249, 1836, 1837, 1838,
	1082, 48, 2211, 115, 2189, 2186, 1640, 2178, 1640, 1648,
	2183, 1640, 2176, 2155, 2136, 1433, 1640, 2156, 1082, 659,
	1433, 2105, 2100, 2002, 627, 1595, 1595, 1640, 1945, 1912,
	59, 785, 1946, 1876, 658, 1367, 2371, 60, 1938, 61,
	732, 736, 742, 1655, 1875, 131, 1655, 1833, 1082, 1865,
	708, 2239, 38, 1866, 1938, 99, 1863, 1862, 1085, 1086,
	1640, 1640, 1861, 63, 1785, 1784, 1640, 1366, 1782, 1716,
	1786, 1640, 1640, 1640, 133, 1689, 1657, 1578, 1647, 1082,
	1640, 1088, 1648, 1927, 1818, 1819, 1639, 1836, 1837, 1838,
	1640, 1594, 1372, 2063, 2005, 1595, 1371, 1640, 48, 1225,
	2182, 1398, 1824, 1226, 710, 1087, 711, 1792, 1622, 1082,
	132, 1876, 1682, 1665, 1291, 1506, 1085, 1086, 125, 1105,
	1106, 1107, 1115, 1116, 1117, 126, 1024, 59, 1214, 746,
	914, 134, 1108, 2159, 60, 1214, 61, 1833, 1214, 1088,
	1839, 912, 1119, 911, 118, 910, 909, 1197, 908, 712,
	131, 1085, 1086, 709, 1105, 1106, 1107, 1115, 1116, 1117,
	63, 1834, 654, 1087, 653, 685, 1093, 1108, 652, 1102,
	173, 625, 173, 173, 1088, 173, 624, 1119, 623, 133,
	173, 622, 621, 620, 619, 618, 173, 131, 617, 616,
	615, 1669, 1824, 1902, 1085, 1086, 614, 99, 1087, 173,
	173, 173, 173, 173, 1102, 613, 612, 611, 688, 610,
	609, 594, 593, 592, 426, 132, 133, 1088, 425, 424,
	423, 422, 407, 406, 1093, 1103, 898, 398, 667, 397,
	1839, 396, 1818, 1819, 1835, 1836, 1837, 1838, 395, 388,
	387, 1087, 1085, 1086, 1112, 1120, 1219, 1102, 158, 118,
	157, 1834, 132, 1212, 1539, 156, 1341, 155, 669, 1093,
	125, 154, 1118, 153, 152, 1088, 151, 126, 150, 1525,
	149, 1366, 148, 147, 131, 863, 146, 1110, 867, 1112,
	1120, 145, 144, 1103, 131, 1833, 118, 143, 1328, 1087,
	142, 141, 140, 139, 99, 883, 138, 1118, 1104, 137,
	136, 135, 1093, 133, 887, 887, 131, 752, 1109, 1708,
	1313, 858, 1110, 133, 1537, 1535, 1526, 1053, 1103, 888,
	950, 1830, 1831, 1832, 1835, 906, 1829, 1827, 1828, 1820,
	1821, 1822, 1823, 1825, 1826, 133, 173, 1015, 2442, 132,
	1824, 2420, 2413, 1109, 2380, 2349, 2307, 125, 2216, 132,
	1093, 2232, 173, 2212, 126, 2204, 1104, 125, 2203, 2202,
	2198, 1103, 1527, 1524, 126, 1818, 1819, 2197, 2196, 173,
	2195, 132, 1113, 1621, 174, 2122, 2111, 2078, 688, 125,
	2073, 2072, 2071, 118, 1229, 2013, 126, 1878, 1874, 1870,
	1867, 1104, 1097, 1089, 1090, 1091, 1092, 1094, 1095, 1834,
	688, 1855, 1846, 1149, 1817, 118, 856, 1113, 1814, 1813,
	1811, 1830, 1831, 1832, 679, 1798, 1829, 1827, 1828, 1820,
	1821, 1822, 1823, 1825, 1826, 1797, 173, 1720, 1015, 953,
	1498, 719, 752, 1396, 1104, 1085, 1086, 1529, 466, 850,
	1111, 915, 1001, 1099, 1100, 1101, 1114, 1014, 1098, 1096,
	1097, 1089, 1090, 1091, 1092, 1094, 1095, 1142, 1088, 1133,
	1142, 2029, 1051, 2393, 946, 2213, 2361, 1818, 1819, 1050,
	2348, 2347, 1835, 1824, 173, 1111, 173, 2346, 1099, 1100,
	1101, 1114, 1087, 1098, 1096, 1097, 1089, 1090, 1091, 1092,
	1094, 1095, 2338, 2336, 689, 1000, 2374, 2321, 2320, 173,
	173, 2319, 2299, 686, 1678, 2261, 2231, 2240, 2219, 923,
	2209, 131, 1677, 933, 2162, 1523, 688, 173, 2089, 667,
	1028, 2087, 2086, 465, 930, 2084, 1098, 1096, 1097, 1089,
	1090, 1091, 1092, 1094, 1095, 999, 1499, 1653, 1650, 1997,
	133, 1033, 1973, 1093, 1972, 1080, 1953, 1941, 1845, 1807,
	1085, 1086, 1806, 951, 1916, 1818, 1819, 667, 1803, 1830,
	1831, 1832, 1778, 1773, 1829, 1827, 1828, 1820, 1821, 1822,
	1823, 1825, 1826, 1088, 659, 1824, 132, 1089, 1090, 1091,
	1092, 1094, 1095, 1492, 125, 1751, 1011, 1012, 1746, 658,
	1733, 126, 115, 1732, 1718, 1085, 1086, 1087, 1688, 1023,
	1733, 1047, 1103, 1177, 1180, 1587, 2330, 1538, 1533, 1383,
	118, 1190, 1184, 1170, 1169, 1168, 1083, 1021, 1088, 1167,
	1166, 1165, 1164, 1163, 1162, 1161, 1160, 1055, 173, 1025,
	1159, 1158, 1157, 1156, 1834, 1155, 1154, 857, 1153, 1146,
	173, 1134, 1087, 1133, 720, 1027, 173, 929, 173, 918,
	173, 902, 1196, 2238, 173, 945, 2191, 1706, 1093, 2110,
	1948, 1944, 1384, 1824, 1051, 1889, 1081, 1536, 1534, 1230,
	1818, 1819, 1914, 1131, 2242, 1104, 1189, 2241, 2235, 943,
	1951, 1904, 1433, 1182, 173, 1053, 925, 1869, 1183, 1868,
	688, 1070, 173, 1757, 942, 1145, 1151, 1919, 173, 1195,
	1820, 1821, 1822, 1823, 1825, 1826, 2245, 1835, 1174, 1175,
	1618, 1068, 2030, 1789, 688, 688, 1178, 1103, 1513, 1173,
	1202, 465, 944, 1898, 1818, 1819, 1181, 993, 173, 1069,
	1960, 1216, 2383, 173, 1218, 1297, 1644, 2439, 173, 173,
	1063, 173, 1064, 173, 2440, 173, 2170, 173, 1658, 699,
	679, 679, 1148, 2365, 1410, 883, 1924, 701, 173, 2285,
	2284, 2283, 2282, 1988, 173, 173, 994, 1098, 1096, 1097,
	1089, 1090, 1091, 1092, 1094, 1095, 1986, 1833, 697, 1957,
	1063, 695, 1064, 720, 692, 1956, 1051, 412, 1802, 1801,
	1104, 1402, 1800, 173, 1207, 173, 1204, 1984, 173, 1829,
	1827, 1828, 1820, 1821, 1822, 1823, 1825, 1826, 1799, 1760,
	985, 173, 689, 1402, 1314, 159, 1643, 1065, 1474, 1401,
	465, 1364, 1413, 173, 1429, 665, 1425, 173, 943, 1227,
	173, 1228, 1824, 1315, 173, 1286, 1285, 1284, 173, 1423,
	413, 1340, 1022, 173, 1137, 1289, 745, 667, 2181, 173,
	465, 115, 400, 173, 1303, 1310, 1302, 1065, 465, 1591,
	1329, 1651, 1385, 1590, 1445, 1615, 1298, 1339, 1375, 1403,
	1319, 944, 1063, 2364, 1064, 664, 1323, 1991, 1324, 656,
	1325, 2080, 1326, 1322, 1327, 1089, 1090, 1091, 1092, 1094,
	1095, 1834, 1822, 1823, 1825, 1826, 162, 1338, 566, 755,
	1915, 1333, 1335, 1871, 777, 1436, 1443, 1344, 1342, 1343,
	1414, 1416, 659, 1386, 1185, 659, 659, 1421, 1361, 1318,
	1560, 1412, 979, 1427, 667, 666, 1362, 1353, 2266, 667,
	1354, 1355, 1489, 404, 1370, 1095, 2399, 1380, 1381, 1513,
	1208, 1376, 1489, 1431, 170, 1529, 427, 1419, 393, 1065,
	1239, 1444, 1424, 576, 163, 1055, 408, 1430, 1406, 980,
	1077, 173, 2439, 1189, 1835, 433, 1975, 2023, 173, 2446,
	928, 569, 170, 453, 1306, 577, 1076, 1896, 582, 173,
	1223, 173, 689, 173, 1892, 608, 173, 1753, 173, 1525,
	173, 173, 173, 173, 2389, 1744, 1074, 688, 1748, 849,
	1923, 173, 1510, 2410, 689, 415, 414, 1287, 1411, 1073,
	1826, 1818, 1819, 992, 1075, 1497, 1638, 924, 2390, 1071,
	456, 1892, 1500, 2341, 1085, 1086, 2461, 431, 1982, 663,
	707, 707, 1680, 1681, 2445, 1925, 1526, 1066, 393, 1171,
	1337, 1610, 1529, 461, 958, 1553, 693, 1088, 2295, 457,
	1399, 703, 2303, 1620, 702, 1620, 1829, 1827, 1828, 1820,
	1821, 1822, 1823, 1825, 1826, 393, 393, 740, 393, 1213,
	2020, 1087, 170, 749, 1496, 693, 458, 1066, 694, 1494,
	767, 693, 1527, 1524, 465, 430, 1646, 1061, 1632, 1128,
	2411, 887, 173, 887, 115, 1805, 460, 160, 1635, 1624,
	115, 1379, 389, 1641, 1636, 1633, 984, 1634, 173, 173,
	173, 1395, 173, 1645, 906, 1642, 2021, 1239, 1239, 1824,
	689, 1652, 1301, 1300, 392, 685, 680, 466, 1389, 666,
	1976, 173, 1093, 2444, 399, 2118, 161, 2409, 173, 465,
	2267, 1654, 1690, 1007, 173, 173, 2412, 1696, 173, 1178,
	2207, 1181, 2438, 173, 2436, 2151, 173, 1529, 405, 1175,
	1174, 657, 2224, 401, 173, 1612, 1659, 1756, 989, 1066,
	173, 173, 173, 402, 921, 2455, 173, 1666, 1834, 173,
	565, 1317, 1762, 1710, 1290, 173, 173, 173, 173, 173,
	2152, 1529, 1488, 1471, 173, 1694, 173, 1697, 1709, 115,
	173, 1698, 1699, 966, 913, 1704, 459, 1304, 1670, 2277,
	1719, 1726, 1503, 2276, 725, 1770, 1137, 1672, 2259, 2462,
	1507, 1674, 1676, 2333, 1515, 2466, 1959, 1730, 429, 1705,
	1768, 927, 1695, 990, 1661, 1523, 1545, 1545, 1558, 1729,
	1570, 734, 738, 1691, 744, 1663, 1582, 1583, 1585, 1725,
	2208, 1835, 939, 2166, 1296, 1613, 456, 432, 390, 1203,
	1192, 462, 1214, 1714, 2019, 959, 1664, 428, 1745, 421,
	1721, 2376, 1276, 1332, 1750, 2059, 1292, 861, 1662, 461,
	2092, 1046, 797, 667, 1743, 457, 991, 2260, 1485, 416,
	2147, 1305, 2148, 2226, 689, 1469, 1472, 38, 1294, 1791,
	860, 1765, 960, 1483, 608, 957, 865, 608, 1735, 870,
	1295, 1766, 458, 2453, 873, 1771, 1734, 940, 689, 689,
	393, 941, 2150, 1495, 391, 466, 1006, 2465, 1468, 1715,
	1006, 2153, 460, 608, 608, 393, 895, 749, 1686, 939,
	1763, 166, 1761, 48, 1827, 1828, 1820, 1821, 1822, 1823,
	1825, 1826, 1703, 2165, 1349, 1374, 667, 1373, 1270, 1038,
	1777, 1091, 1092, 1094, 1095, 574, 173, 939, 2454, 2060,
	664, 452, 59, 934, 1479, 2061, 173, 1788, 173, 60,
	173, 61, 1480, 173, 1481, 568, 1005, 173, 1486, 2456,
	1005, 453, 173, 869, 173, 1877, 1042, 1879, 2082, 2169,
	967, 173, 2217, 2257, 940, 63, 2168, 2124, 941, 2149,
	1755, 1007, 667, 1042, 173, 688, 1045, 2298, 1936, 1730,
	880, 878, 1767, 1470, 466, 1350, 688, 173, 2258, 1769,
	450, 33, 1377, 1045, 1532, 1894, 688, 3, 456, 1239,
	1900, 1043, 459, 988, 1911, 1852, 1853, 1854, 750, 1040,
	2206, 848, 449, 32, 466, 1920, 1880, 173, 1043, 1883,
	977, 461, 466, 686, 681, 446, 29, 457, 1913, 1849,
	608, 751, 679, 1041, 173, 691, 1906, 1907, 1996, 1908,
	173, 448, 17, 417, 1897, 1881, 922, 1990, 1702, 173,
	173, 442, 13, 1905, 458, 1482, 738, 462, 1818, 1819,
	444, 16, 1484, 608, 975, 1910, 2167, 1947, 1872, 747,
	1812, 744, 1954, 1772, 460, 467, 1922, 1044, 1921, 443,
	14, 573, 1926, 418, 586, 1270, 1270, 1656, 939, 131,
	1952, 1943, 1928, 1989, 1044, 1593, 1929, 973, 1931, 99,
	852, 567, 587, 1934, 1428, 1422, 1971, 1939, 441, 12,
	1970, 1937, 1940, 419, 971, 420, 851, 115, 133, 997,
	393, 447, 10, 1969, 987, 33, 1955, 996, 1999, 794,
	1776, 690, 730, 879, 877, 919, 173, 1779, 2015, 2016,
	2017, 976, 1979, 983, 1981, 1962, 969, 32, 1850, 1330,
	1983, 440, 8, 940, 132, 1795, 1796, 941, 696, 698,
	29, 689, 125, 588, 1701, 1321, 1824, 1152, 582, 126,
	707, 963, 585, 1531, 586, 2405, 17, 439, 4, 2373,
	876, 2140, 2006, 1980, 459, 974, 13, 1978, 118, 1436,
	2034, 1239, 587, 393, 393, 16, 1958, 1885, 1436, 2039,
	2022, 2024, 2025, 1844, 2031, 1616, 2009, 173, 2036, 173,
	1609, 170, 1222, 2033, 14, 1857, 173, 1221, 972, 688,
	1220, 1217, 2038, 1215, 1078, 1834, 2088, 1072, 2085, 1067,
	2010, 2070, 1887, 173, 173, 970, 2066, 715, 2101, 462,
	1239, 2067, 2314, 12, 2440, 1009, 1684, 2237, 466, 2236,
	173, 2107, 1312, 588, 1402, 2094, 10, 716, 173, 2093,
	1417, 982, 451, 589, 465, 2316, 1418, 968, 1402, 173,
	2083, 2098, 173, 2343, 1415, 2099, 2159, 961, 2351, 2096,
	2125, 1013, 465, 173, 173, 1426, 8, 173, 173, 173,
	2104, 1694, 962, 2102, 2108, 2128, 738, 2120, 1835, 2103,
	2095, 875, 1420, 466, 173, 2372, 2129, 2135, 1685, 173,
	2134, 173, 4, 173, 173, 173, 2222, 173, 1010, 173,
	2160, 688, 393, 2127, 2139, 1623, 2126, 2164, 2131, 1611,
	717, 1608, 575, 2163, 1201, 1363, 1085, 1086, 1085, 1086,
	393, 590, 393, 1288, 393, 1971, 1231, 2459, 1209, 1970,
	2464, 2193, 2185, 589, 1818, 1819, 2251, 2121, 2180, 1088,
	173, 2130, 1969, 1085, 1086, 1239, 1017, 1016, 1224, 725,
	1058, 2109, 2079, 591, 2026, 2132, 1017, 1917, 170, 1864,
	1711, 1592, 1038, 1087, 1985, 1087, 170, 1589, 1588, 1987,
	1521, 1139, 608, 1820, 1821, 1822, 1823, 1825, 1826, 1018,
	2018, 1239, 1239, 1882, 1149, 1147, 995, 1270, 986, 981,
	1239, 1239, 978, 964, 926, 655, 2003, 173, 173, 2265,
	454, 1320, 608, 965, 688, 2205, 1707, 608, 1382, 584,
	2388, 590, 170, 608, 2199, 608, 1042, 608, 1804, 608,
	2220, 608, 2326, 1239, 2294, 2218, 1530, 1150, 52, 690,
	2223, 1967, 1331, 771, 2141, 1961, 1045, 1971, 608, 608,
	2228, 1970, 1971, 591, 2227, 1603, 1970, 1352, 2221, 1602,
	468, 173, 1040, 173, 1969, 465, 173, 2234, 1269, 1969,
	2229, 1043, 1299, 2064, 173, 793, 2243, 582, 673, 707,
	465, 2248, 749, 1544, 2074, 1437, 1041, 853, 1188, 795,
	1236, 796, 1237, 2250, 1179, 393, 2253, 783, 2233, 1234,
	903, 1627, 1493, 1511, 1787, 1143, 738, 1394, 1206, 763,
	1206, 393, 2269, 775, 393, 2271, 2268, 774, 1407, 1971,
	1508, 917, 393, 1970, 1712, 1895, 1189, 393, 2293, 2230,
	2286, 1348, 1675, 393, 1345, 1977, 1969, 1434, 403, 1815,
	2279, 901, 1567, 1559, 2287, 173, 1555, 1044, 688, 998,
	1034, 1129, 173, 1628, 2300, 949, 1901, 1649, 2255, 1026,
	173, 173, 688, 688, 2280, 2281, 173, 1356, 714, 689,
	2305, 173, 713, 2270, 947, 2315, 2313, 1293, 173, 1239,
	689, 1660, 1971, 1122, 2312, 2322, 1970, 2337, 2311, 1270,
	689, 2324, 2325, 2323, 2317, 1121, 2331, 2332, 2329, 1969,
	700, 2335, 938, 173, 173, 937, 1193, 2340, 1728, 690,
	2460, 1561, 2342, 1974, 2382, 2339, 130, 127, 129, 128,
	2308, 1754, 79, 952, 173, 586, 31, 30, 2350, 98,
	2359, 690, 688, 97, 2357, 1269, 1269, 173, 1270, 2360,
	96, 688, 688, 587, 2353, 1599, 95, 94, 93, 92,
	91, 2363, 749, 90, 89, 88, 87, 173, 86, 173,
	667, 85, 173, 393, 465, 1631, 84, 608, 2362, 83,
	608, 725, 608, 82, 393, 393, 1637, 749, 2368, 2369,
	2394, 81, 2378, 2396, 604, 1407, 78, 725, 2395, 77,
	1397, 76, 173, 2400, 2379, 75, 28, 24, 738, 102,
	2398, 23, 21, 738, 588, 22, 27, 26, 2404, 744,
	2403, 19, 2397, 18, 173, 15, 2415, 9, 2429, 20,
	173, 2419, 2427, 57, 1971, 58, 173, 56, 1970, 55,
	2432, 2433, 2431, 54, 11, 50, 2437, 2428, 2435, 49,
	2441, 1969, 47, 46, 45, 2443, 44, 690, 7, 753,
	854, 1238, 1239, 2247, 467, 101, 41, 2384, 2451, 40,
	2450, 6, 100, 1270, 5, 2458, 2457, 1818, 1819, 113,
	110, 112, 109, 2463, 111, 114, 1668, 106, 107, 108,
	105, 2467, 104, 37, 36, 35, 34, 2, 1, 0,
	2273, 1239, 393, 393, 393, 436, 393, 0, 0, 1270,
	1270, 0, 0, 0, 589, 0, 772, 72, 1270, 1270,
	0, 0, 0, 689, 0, 393, 38, 0, 0, 0,
	0, 0, 393, 0, 0, 0, 0, 0, 393, 393,
	0, 0, 393, 0, 0, 0, 0, 1394, 0, 1629,
	1394, 1270, 0, 0, 0, 0, 0, 0, 1717, 0,
	744, 744, 0, 0, 393, 1723, 1724, 0, 466, 0,
	1407, 0, 48, 1731, 0, 0, 0, 0, 72, 1736,
	1737, 1739, 1741, 1742, 0, 1824, 466, 0, 393, 0,
	1749, 1239, 590, 0, 1752, 0, 0, 0, 0, 0,
	0, 59, 2151, 0, 0, 2144, 0, 0, 60, 0,
	61, 0, 0, 2142, 0, 0, 0, 2146, 0, 0,
	0, 0, 0, 0, 591, 689, 0, 0, 1238, 1238,
	0, 690, 660, 0, 63, 668, 916, 2152, 0, 0,
	0, 0, 920, 0, 1834, 0, 0, 1561, 1561, 0,
	726, 72, 0, 0, 0, 690, 690, 0, 0, 2145,
	0, 0, 467, 0, 0, 0, 0, 1269, 1774, 1775,
	0, 0, 0, 0, 0, 0, 0, 0, 1671, 744,
	1673, 0, 738, 0, 2385, 2386, 2387, 0, 0, 2391,
	0, 0, 0, 0, 0, 0, 0, 1270, 0, 0,
	0, 1687, 0, 0, 0, 0, 0, 0, 725, 0,
	0, 0, 0, 0, 725, 725, 0, 1835, 725, 1272,
	0, 0, 1561, 1561, 1561, 0, 1085, 1086, 689, 0,
	0, 0, 0, 0, 0, 1271, 0, 2147, 0, 2148,
	1722, 0, 0, 1841, 1842, 1843, 0, 0, 1235, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	393, 467, 0, 0, 1747, 0, 0, 0, 99, 2150,
	1201, 0, 1201, 1087, 608, 0, 0, 393, 2153, 466,
	0, 1890, 1031, 1031, 0, 0, 393, 133, 1899, 1036,
	0, 467, 0, 0, 466, 393, 1085, 1086, 0, 467,
	0, 0, 1115, 1116, 1117, 0, 0, 0, 1668, 0,
	0, 1828, 1820, 1821, 1822, 1823, 1825, 1826, 0, 1088,
	0, 1668, 1119, 132, 0, 1123, 1124, 1125, 1126, 1127,
	0, 125, 0, 0, 1093, 1136, 0, 0, 126, 0,
	0, 0, 0, 1087, 0, 1144, 0, 0, 0, 1102,
	0, 393, 0, 0, 0, 0, 2149, 437, 0, 1269,
	0, 0, 689, 0, 0, 0, 0, 0, 393, 0,
	1270, 0, 0, 0, 1394, 0, 689, 689, 0, 0,
	0, 0, 0, 749, 1394, 0, 1272, 1272, 0, 0,
	0, 0, 0, 1103, 0, 0, 0, 0, 1966, 0,
	0, 0, 1271, 1271, 1093, 0, 0, 0, 1269, 1270,
	0, 0, 0, 0, 0, 1235, 1235, 0, 0, 0,
	0, 1561, 1561, 0, 1112, 1120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1873, 0, 690, 0,
	0, 0, 1994, 1995, 0, 0, 689, 0, 0, 0,
	1238, 0, 0, 1884, 668, 689, 689, 1110, 0, 0,
	0, 0, 1188, 1103, 0, 0, 1104, 0, 0, 0,
	2028, 1188, 0, 0, 0, 0, 0, 0, 466, 0,
	1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
	1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1270,
	1561, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048,
	2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058,
	0, 2062, 0, 0, 0, 467, 0, 1932, 0, 0,
	0, 0, 0, 1269, 0, 0, 1104, 0, 0, 0,
	0, 1407, 0, 1201, 725, 0, 0, 0, 0, 0,
	2090, 0, 1113, 0, 0, 0, 0, 0, 0, 1096,
	1097, 1089, 1090, 1091, 1092, 1094, 1095, 393, 393, 1269,
	1269, 0, 0, 0, 1346, 0, 1351, 0, 1269, 1269,
	467, 0, 1358, 0, 2115, 0, 0, 0, 0, 0,
	0, 0, 2117, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 393, 0, 0, 749, 0, 0, 0,
	0, 1269, 0, 0, 0, 0, 0, 1394, 749, 0,
	1111, 2137, 2138, 1407, 0, 0, 1114, 0, 1098, 1096,
	1097, 1089, 1090, 1091, 1092, 1094, 1095, 1966, 749, 0,
	0, 0, 1238, 2171, 0, 2172, 0, 393, 2174, 2175,
	0, 393, 0, 2179, 0, 0, 0, 0, 1446, 1447,
	1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457,
	1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467,
	0, 1473, 0, 1475, 1476, 1477, 1478, 660, 0, 0,
	0, 1238, 38, 0, 2200, 0, 0, 0, 0, 0,
	1501, 0, 0, 0, 0, 0, 0, 1136, 1272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1271, 1540, 1541, 0, 0, 1557,
	0, 1569, 1571, 1576, 1579, 1580, 1581, 1235, 48, 0,
	72, 0, 0, 1629, 725, 1054, 0, 0, 0, 1966,
	0, 749, 1599, 0, 1966, 0, 0, 1269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 0,
	0, 0, 0, 0, 60, 0, 61, 0, 0, 725,
	0, 1132, 0, 1135, 0, 0, 0, 0, 0, 0,
	1140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	63, 0, 0, 0, 0, 1407, 0, 2254, 0, 0,
	2256, 0, 1561, 0, 0, 0, 1238, 0, 393, 0,
	0, 1966, 0, 2173, 0, 0, 0, 2177, 0, 0,
	0, 0, 0, 2262, 0, 0, 0, 0, 1818, 1819,
	0, 1836, 1837, 1838, 0, 0, 2288, 0, 0, 0,
	0, 0, 1238, 1238, 2001, 0, 690, 0, 0, 0,
	0, 1238, 1238, 0, 0, 0, 1561, 690, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 690, 0, 0,
	0, 0, 0, 0, 1966, 0, 0, 2297, 0, 393,
	0, 1833, 0, 0, 1238, 0, 749, 0, 0, 0,
	1272, 0, 0, 0, 2115, 2115, 0, 0, 0, 0,
	2328, 0, 0, 0, 0, 1394, 1271, 0, 0, 0,
	0, 0, 1201, 0, 131, 0, 0, 0, 0, 1235,
	1269, 0, 0, 0, 99, 1031, 0, 0, 0, 0,
	1036, 0, 0, 0, 0, 0, 1824, 2344, 2345, 1272,
	0, 0, 0, 133, 0, 0, 0, 0, 1561, 0,
	0, 0, 0, 0, 0, 1271, 0, 0, 393, 1269,
	0, 0, 0, 0, 0, 0, 0, 0, 1235, 2352,
	0, 2367, 0, 0, 1839, 0, 0, 0, 0, 132,
	0, 0, 0, 0, 2263, 0, 0, 125, 0, 72,
	0, 2377, 0, 749, 126, 1834, 393, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 660, 1966, 0, 660, 660,
	0, 0, 0, 0, 0, 0, 2328, 1758, 1759, 0,
	1238, 0, 0, 1764, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 726, 749, 1269,
	0, 0, 0, 0, 393, 2310, 0, 0, 0, 0,
	2434, 0, 0, 1054, 1272, 1783, 0, 0, 1835, 0,
	0, 0, 1790, 0, 0, 1794, 72, 0, 0, 0,
	1271, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	690, 0, 1808, 1235, 0, 0, 0, 0, 0, 0,
	1272, 1272, 0, 0, 0, 0, 0, 0, 0, 1272,
	1272, 0, 0, 0, 0, 0, 1271, 1271, 0, 0,
	0, 0, 0, 0, 1136, 1271, 1271, 1491, 0, 1235,
	1235, 1576, 1576, 1576, 2356, 467, 0, 0, 1235, 1235,
	668, 0, 1272, 0, 0, 1135, 0, 0, 0, 0,
	0, 0, 0, 467, 0, 1830, 1831, 1832, 1271, 0,
	1829, 1827, 1828, 1820, 1821, 1822, 1823, 1825, 1826, 0,
	0, 1235, 2381, 0, 0, 0, 0, 1893, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 690, 0, 0, 0, 0, 0, 0, 1909,
	0, 0, 0, 1238, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1629, 0, 72, 0, 0, 0, 1930, 0, 72, 0,
	0, 1358, 1238, 0, 0, 0, 0, 1818, 1819, 0,
	1836, 1837, 1838, 0, 0, 0, 0, 0, 0, 0,
	0, 1942, 0, 2000, 0, 1818, 1819, 0, 1836, 1837,
	1838, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1272, 0,
	0, 1963, 0, 0, 0, 690, 0, 0, 0, 0,
	1833, 0, 0, 0, 1271, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1992, 1235, 1833, 1993,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1998, 1238, 0, 0, 0, 0, 72, 0, 0,
	2007, 0, 0, 0, 0, 0, 467, 0, 2011, 0,
	0, 1909, 0, 0, 0, 1824, 0, 0, 0, 0,
	0, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2035, 0, 1824, 726, 2037, 0, 0, 0, 0,
	726, 726, 0, 0, 726, 0, 0, 0, 0, 0,
	0, 0, 0, 1839, 1840, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2068, 2069,
	0, 1839, 0, 0, 1834, 0, 0, 2075, 2076, 2077,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 690,
	0, 0, 1834, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 690, 690, 0, 0, 0, 0, 1085,
	1086, 1031, 1105, 1106, 1107, 1115, 1116, 1117, 0, 0,
	0, 1272, 0, 1036, 0, 1108, 0, 0, 0, 0,
	0, 0, 1088, 0, 0, 1119, 0, 1271, 0, 1491,
	0, 0, 0, 0, 0, 0, 0, 1835, 0, 0,
	1235, 0, 0, 0, 0, 0, 1087, 0, 0, 1135,
	1272, 0, 1102, 0, 0, 1835, 0, 0, 0, 0,
	0, 0, 0, 690, 0, 0, 1271, 0, 0, 0,
	0, 0, 690, 690, 0, 0, 0, 2161, 0, 1235,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2184, 0, 1093, 0, 2187,
	2188, 0, 0, 0, 2190, 0, 0, 0, 0, 0,
	0, 2192, 1135, 2194, 1830, 1831, 1832, 1112, 1120, 1829,
	1827, 1828, 1820, 1821, 1822, 1823, 1825, 1826, 0, 2201,
	1272, 0, 1830, 1831, 1832, 1118, 0, 1829, 1827, 1828,
	1820, 1821, 1822, 1823, 1825, 1826, 1271, 0, 0, 0,
	1110, 0, 0, 0, 0, 72, 1103, 0, 72, 1235,
	0, 0, 2210, 0, 0, 0, 0, 0, 668, 1085,
	1086, 0, 1105, 1106, 1107, 1115, 1116, 1117, 0, 0,
	0, 1109, 0, 0, 0, 1108, 0, 0, 0, 0,
	0, 0, 1088, 0, 0, 1119, 0, 0, 0, 0,
	1818, 1819, 0, 1836, 1837, 1838, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1087, 0, 0, 0,
	0, 0, 1102, 2246, 0, 0, 0, 0, 0, 1104,
	0, 0, 0, 0, 0, 72, 1085, 1086, 0, 1105,
	1106, 1107, 1115, 1116, 1117, 1113, 0, 0, 0, 0,
	726, 0, 1108, 1833, 0, 0, 0, 0, 0, 1088,
	0, 0, 1119, 0, 0, 0, 0, 2278, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1093, 0, 0,
	0, 2289, 2290, 1087, 0, 0, 0, 0, 0, 1102,
	0, 0, 0, 0, 0, 0, 0, 1112, 1120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1824, 0,
	0, 0, 2302, 1111, 0, 1118, 1099, 1100, 1101, 1114,
	0, 1098, 1096, 1097, 1089, 1090, 1091, 1092, 1094, 1095,
	1110, 0, 0, 0, 0, 0, 1103, 0, 1860, 0,
	0, 0, 0, 0, 1093, 0, 1839, 0, 0, 1085,
	1086, 0, 1105, 1106, 1107, 1115, 1116, 1117, 0, 0,
	2334, 1109, 0, 0, 1112, 1120, 0, 1834, 0, 0,
	0, 0, 1088, 0, 0, 1119, 0, 0, 0, 0,
	0, 0, 1118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1087, 1110, 0, 0,
	0, 0, 1102, 1103, 0, 0, 0, 0, 0, 1104,
	0, 0, 0, 0, 0, 0, 1085, 1086, 1036, 1105,
	1106, 1107, 1115, 1116, 1117, 1113, 0, 0, 1109, 0,
	0, 0, 1108, 0, 0, 0, 0, 0, 0, 1088,
	1835, 0, 1119, 0, 0, 0, 0, 0, 0, 0,
	726, 0, 0, 0, 0, 0, 0, 1093, 0, 0,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 1102,
	0, 0, 0, 0, 0, 0, 1104, 1112, 1120, 0,
	0, 0, 2416, 0, 0, 726, 0, 0, 2426, 2426,
	0, 0, 1113, 1111, 0, 1118, 1099, 1100, 1101, 1114,
	0, 1098, 1096, 1097, 1089, 1090, 1091, 1092, 1094, 1095,
	1110, 0, 0, 0, 0, 0, 1103, 0, 1859, 0,
	0, 0, 2426, 0, 1093, 0, 0, 1830, 1831, 1832,
	0, 0, 1829, 1827, 1828, 1820, 1821, 1822, 1823, 1825,
	1826, 0, 0, 0, 1112, 1120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2426, 0,
	1111, 0, 1118, 1099, 1100, 1101, 1114, 0, 1098, 1096,
	1097, 1089, 1090, 1091, 1092, 1094, 1095, 1110, 0, 0,
	0, 0, 0, 1103, 0, 1858, 0, 0, 0, 1104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1113, 0, 0, 1109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 1111, 0, 0, 1099, 1100, 1101, 1114,
	0, 1098, 1096, 1097, 1089, 1090, 1091, 1092, 1094, 1095,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1111, 0, 0, 1099, 1100, 1101, 1114, 0, 1098, 1096,
	1097, 1089, 1090, 1091, 1092, 1094, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 1810, 0, 0, 464, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2318, 0, 175, 176, 483, 177, 484, 485,
	486, 487, 331, 488, 489, 490, 491, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 492, 182, 338,
	339, 183, 184, 493, 494, 340, 341, 342, 495, 185,
	343, 496, 469, 497, 186, 187, 188, 0, 189, 498,
	190, 191, 192, 499, 470, 193, 194, 195, 500, 501,
	503, 502, 504, 505, 506, 196, 197, 394, 198, 344,
	199, 345, 346, 507, 200, 508, 201, 509, 202, 510,
	511, 203, 204, 512, 205, 513, 1135, 514, 347, 206,
	207, 208, 348, 349, 515, 516, 517, 209, 210, 350,
	351, 352, 0, 211, 518, 212, 519, 520, 471, 521,
	213, 353, 522, 354, 523, 214, 215, 216, 217, 218,
	355, 356, 473, 524, 222, 525, 219, 526, 472, 220,
	357, 221, 358, 359, 360, 361, 362, 527, 363, 528,
	474, 223, 224, 225, 475, 226, 227, 228, 529, 230,
	229, 530, 364, 476, 231, 477, 531, 232, 532, 533,
	233, 0, 234, 235, 236, 238, 365, 237, 478, 239,
	240, 242, 241, 534, 535, 536, 366, 243, 367, 244,
	245, 537, 246, 538, 539, 247, 540, 541, 248, 368,
	479, 249, 480, 369, 250, 251, 252, 253, 254, 542,
	255, 370, 256, 371, 257, 543, 258, 259, 260, 261,
	262, 372, 263, 264, 544, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 545, 277, 481,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 546,
	289, 374, 288, 290, 291, 547, 292, 281, 282, 293,
	482, 294, 375, 376, 295, 548, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 549, 303, 550, 304,
	305, 306, 307, 308, 309, 310, 551, 379, 380, 381,
	552, 553, 311, 312, 382, 383, 554, 313, 314, 315,
	316, 555, 556, 317, 318, 319, 320, 557, 321, 558,
	384, 322, 323, 324, 385, 386, 559, 560, 325, 561,
	562, 563, 564, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 0, 1387, 0, 0, 0,
	0, 0, 0, 0, 0, 1388, 175, 176, 483, 177,
	484, 485, 486, 487, 331, 488, 489, 490, 491, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 492,
	182, 338, 339, 183, 184, 493, 494, 340, 341, 342,
	495, 185, 343, 496, 469, 497, 186, 187, 188, 0,
	189, 498, 190, 191, 192, 499, 470, 193, 194, 195,
	500, 501, 503, 502, 504, 505, 506, 196, 197, 394,
	198, 344, 199, 345, 346, 507, 200, 508, 201, 509,
	202, 510, 511, 203, 204, 512, 205, 513, 0, 514,
	347, 206, 207, 208, 348, 349, 515, 516, 517, 209,
	210, 350, 351, 352, 0, 211, 518, 212, 519, 520,
	471, 521, 213, 353, 522, 354, 523, 214, 215, 216,
	217, 218, 355, 356, 473, 524, 222, 525, 219, 526,
	472, 220, 357, 221, 358, 359, 360, 361, 362, 527,
	363, 528, 474, 223, 224, 225, 475, 226, 227, 228,
	529, 230, 229, 530, 364, 476, 231, 477, 531, 232,
	532, 533, 233, 0, 234, 235, 236, 238, 365, 237,
	478, 239, 240, 242, 241, 534, 535, 536, 366, 243,
	367, 244, 245, 537, 246, 538, 539, 247, 540, 541,
	248, 368, 479, 249, 480, 369, 250, 251, 252, 253,
	254, 542, 255, 370, 256, 371, 257, 543, 258, 259,
	260, 261, 262, 372, 263, 264, 544, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 545,
	277, 481, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 546, 289, 374, 288, 290, 291, 547, 292, 281,
	282, 293, 482, 294, 375, 376, 295, 548, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 549, 303,
	550, 304, 305, 306, 307, 308, 309, 310, 551, 379,
	380, 381, 552, 553, 311, 312, 382, 383, 554, 313,
	314, 315, 316, 555, 556, 317, 318, 319, 320, 557,
	321, 558, 384, 322, 323, 324, 385, 386, 559, 560,
	325, 561, 562, 563, 564, 326, 327, 328, 329, 330,
	0, 0, 0, 464, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2133, 175,
	176, 483, 177, 484, 485, 486, 487, 331, 488, 489,
	490, 491, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 492, 182, 338, 339, 183, 184, 493, 494,
	340, 341, 342, 495, 185, 343, 496, 469, 497, 186,
	187, 188, 0, 189, 498, 190, 191, 192, 499, 470,
	193, 194, 195, 500, 501, 503, 502, 504, 505, 506,
	196, 197, 394, 198, 344, 199, 345, 346, 507, 200,
	508, 201, 509, 202, 510, 511, 203, 204, 512, 205,
	513, 0, 514, 347, 206, 207, 208, 348, 349, 515,
	516, 517, 209, 210, 350, 351, 352, 0, 211, 518,
	212, 519, 520, 471, 521, 213, 353, 522, 354, 523,
	214, 215, 216, 217, 218, 355, 356, 473, 524, 222,
	525, 219, 526, 472, 220, 357, 221, 358, 359, 360,
	361, 362, 527, 363, 528, 474, 223, 224, 225, 475,
	226, 227, 228, 529, 230, 229, 530, 364, 476, 231,
	477, 531, 232, 532, 533, 233, 0, 234, 235, 236,
	238, 365, 237, 478, 239, 240, 242, 241, 534, 535,
	536, 366, 243, 367, 244, 245, 537, 246, 538, 539,
	247, 540, 541, 248, 368, 479, 249, 480, 369, 250,
	251, 252, 253, 254, 542, 255, 370, 256, 371, 257,
	543, 258, 259, 260, 261, 262, 372, 263, 264, 544,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 545, 277, 481, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 546, 289, 374, 288, 290, 291,
	547, 292, 281, 282, 293, 482, 294, 375, 376, 295,
	548, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 549, 303, 550, 304, 305, 306, 307, 308, 309,
	310, 551, 379, 380, 381, 552, 553, 311, 312, 382,
	383, 554, 313, 314, 315, 316, 555, 556, 317, 318,
	319, 320, 557, 321, 558, 384, 322, 323, 324, 385,
	386, 559, 560, 325, 561, 562, 563, 564, 326, 327,
	328, 329, 330, 464, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1084, 0, 0, 175,
	176, 483, 177, 484, 485, 486, 487, 331, 488, 489,
	490, 491, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 492, 182, 338, 339, 183, 184, 493, 494,
	340, 341, 342, 495, 185, 343, 496, 469, 497, 186,
	187, 188, 0, 189, 498, 190, 191, 192, 499, 470,
	193, 194, 195, 500, 501, 503, 502, 504, 505, 506,
	196, 197, 394, 198, 344, 199, 345, 346, 507, 200,
	508, 201, 509, 202, 510, 511, 203, 204, 512, 205,
	513, 0, 514, 347, 206, 207, 208, 348, 349, 515,
	516, 517, 209, 210, 350, 351, 352, 0, 211, 518,
	212, 519, 520, 471, 521, 213, 353, 522, 354, 523,
	214, 215, 216, 217, 218, 355, 356, 473, 524, 222,
	525, 219, 526, 472, 220, 357, 221, 358, 359, 360,
	361, 362, 527, 363, 528, 474, 223, 224, 225, 475,
	226, 227, 228, 529, 230, 229, 530, 364, 476, 231,
	477, 531, 232, 532, 533, 233, 0, 234, 235, 236,
	238, 365, 237, 478, 239, 240, 242, 241, 534, 535,
	536, 366, 243, 367, 244, 245, 537, 246, 538, 539,
	247, 540, 541, 248, 368, 479, 249, 480, 369, 250,
	251, 252, 253, 254, 542, 255, 370, 256, 371, 257,
	543, 258, 259, 260, 261, 262, 372, 263, 264, 544,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 545, 277, 481, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 546, 289, 374, 288, 290, 291,
	547, 292, 281, 282, 293, 482, 294, 375, 376, 295,
	548, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 549, 303, 550, 304, 305, 306, 307, 308, 309,
	310, 551, 379, 380, 381, 552, 553, 311, 312, 382,
	383, 554, 313, 314, 315, 316, 555, 556, 317, 318,
	319, 320, 557, 321, 558, 384, 322, 323, 324, 385,
	386, 559, 560, 325, 561, 562, 563, 564, 326, 327,
	328, 329, 330, 1520, 0, 791, 780, 781, 778, 779,
	770, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 1517, 177, 0, 0, 0, 0, 808,
	773, 0, 0, 0, 178, 179, 180, 332, 823, 334,
	824, 181, 825, 826, 0, 182, 338, 339, 183, 184,
	776, 807, 827, 828, 342, 0, 185, 819, 0, 799,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 470, 193, 194, 195, 0, 800, 801, 803, 0,
	802, 804, 196, 197, 394, 198, 829, 199, 830, 831,
	0, 200, 0, 201, 0, 202, 1518, 0, 822, 204,
	0, 205, 0, 0, 0, 764, 206, 207, 208, 809,
	810, 787, 0, 0, 209, 210, 832, 833, 834, 0,
	211, 0, 212, 0, 0, 471, 0, 213, 820, 0,
	354, 0, 214, 215, 216, 217, 218, 816, 818, 473,
	0, 222, 0, 219, 0, 472, 220, 835, 221, 836,
	837, 838, 839, 840, 0, 798, 0, 474, 223, 224,
	225, 475, 226, 227, 228, 0, 230, 229, 0, 821,
	476, 231, 477, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 478, 239, 240, 242, 241,
	759, 0, 788, 817, 243, 841, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 479, 249, 480,
	811, 250, 251, 252, 253, 254, 0, 255, 812, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 842, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 481, 278, 279, 765,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 805, 292, 281, 282, 293, 482, 294, 843,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 844,
	299, 300, 813, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 845, 846, 0, 0, 311,
	312, 814, 815, 786, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 806, 321, 0, 384, 322, 323,
	324, 385, 847, 1516, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 760, 0, 0, 0, 0,
	0, 758, 0, 0, 0, 0, 756, 757, 1519, 791,
	780, 781, 778, 779, 770, 766, 1514, 0, 0, 0,
	0, 769, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 808, 773, 0, 0, 0, 178, 179,
	180, 332, 823, 334, 824, 181, 825, 826, 0, 182,
	338, 339, 183, 184, 776, 807, 827, 828, 342, 0,
	185, 819, 0, 799, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 470, 193, 194, 195, 0,
	800, 801, 803, 0, 802, 804, 196, 197, 394, 198,
	829, 199, 830, 831, 1037, 200, 0, 201, 0, 202,
	0, 0, 822, 204, 0, 205, 0, 0, 0, 764,
	206, 207, 208, 809, 810, 787, 0, 0, 209, 210,
	832, 833, 834, 0, 211, 0, 212, 0, 0, 471,
	0, 213, 820, 0, 354, 0, 214, 215, 216, 217,
	218, 816, 818, 473, 0, 222, 0, 219, 0, 472,
	220, 835, 221, 836, 837, 838, 839, 840, 0, 798,
	0, 474, 223, 224, 225, 475, 226, 227, 228, 0,
	230, 229, 0, 821, 476, 231, 477, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 478,
	239, 240, 242, 241, 759, 0, 788, 817, 243, 841,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 479, 249, 480, 811, 250, 251, 252, 253, 254,
	0, 255, 812, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 842, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	481, 278, 279, 765, 280, 0, 284, 285, 286, 287,
	131, 289, 374, 288, 290, 291, 805, 292, 281, 282,
	293, 482, 294, 843, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 844, 299, 300, 813, 0, 303, 133,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 845,
	846, 0, 0, 311, 312, 814, 815, 786, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 806, 321,
	0, 384, 322, 323, 324, 907, 847, 0, 0, 325,
	0, 0, 0, 125, 326, 327, 328, 329, 330, 760,
	126, 0, 0, 0, 0, 758, 0, 0, 0, 0,
	756, 757, 0, 0, 0, 0, 0, 0, 0, 1138,
	0, 0, 0, 0, 669, 769, 791, 780, 781, 778,
	779, 770, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	808, 773, 0, 0, 0, 178, 179, 180, 332, 823,
	334, 824, 181, 825, 826, 0, 182, 338, 339, 183,
	184, 776, 807, 827, 828, 342, 0, 185, 819, 0,
	799, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 470, 193, 194, 195, 0, 800, 801, 803,
	0, 802, 804, 196, 197, 394, 198, 829, 199, 830,
	831, 0, 200, 0, 201, 0, 202, 0, 0, 822,
	204, 0, 205, 0, 0, 0, 764, 206, 207, 208,
	809, 810, 787, 0, 0, 209, 210, 832, 833, 834,
	0, 211, 0, 212, 0, 0, 471, 0, 213, 820,
	0, 354, 0, 214, 215, 216, 217, 218, 816, 818,
	473, 0, 222, 0, 219, 0, 472, 220, 835, 221,
	836, 837, 838, 839, 840, 0, 798, 0, 474, 223,
	224, 225, 475, 226, 227, 228, 0, 230, 229, 0,
	821, 476, 231, 477, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 478, 239, 240, 242,
	241, 759, 0, 788, 817, 243, 841, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 479, 249,
	480, 811, 250, 251, 252, 253, 254, 0, 255, 812,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 842,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 481, 278, 279,
	765, 280, 0, 284, 285, 286, 287, 131, 289, 374,
	288, 290, 291, 805, 292, 281, 282, 293, 482, 294,
	843, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	844, 299, 300, 813, 0, 303, 133, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 845, 846, 0, 0,
	311, 312, 814, 815, 786, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 806, 321, 0, 384, 322,
	323, 324, 907, 847, 0, 0, 325, 0, 0, 0,
	125, 326, 327, 328, 329, 330, 760, 126, 0, 0,
	0, 0, 758, 0, 0, 0, 0, 756, 757, 791,
	780, 781, 778, 779, 770, 0, 1138, 0, 0, 0,
	0, 0, 769, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 808, 773, 0, 0, 0, 178, 179,
	180, 332, 823, 334, 824, 181, 825, 826, 0, 182,
	338, 339, 183, 184, 776, 807, 827, 828, 342, 0,
	185, 819, 0, 799, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 470, 193, 194, 195, 0,
	800, 801, 803, 0, 802, 804, 196, 197, 394, 198,
	829, 199, 830, 831, 0, 200, 0, 201, 0, 202,
	0, 0, 822, 204, 0, 205, 0, 0, 0, 764,
	206, 207, 208, 809, 810, 787, 0, 0, 209, 210,
	832, 833, 834, 0, 211, 0, 212, 0, 0, 471,
	0, 213, 820, 0, 354, 0, 214, 215, 216, 217,
	218, 816, 818, 473, 0, 222, 0, 219, 0, 472,
	220, 835, 221, 836, 837, 838, 839, 840, 0, 798,
	0, 474, 223, 224, 225, 475, 226, 227, 228, 0,
	230, 229, 0, 821, 476, 231, 477, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 478,
	239, 240, 242, 241, 759, 0, 788, 817, 243, 841,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 479, 249, 480, 811, 250, 251, 252, 253, 254,
	0, 255, 812, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 842, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	481, 278, 279, 765, 280, 0, 284, 285, 286, 287,
	131, 289, 374, 288, 290, 291, 805, 292, 281, 282,
	293, 482, 294, 843, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 844, 299, 300, 813, 0, 303, 133,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 845,
	846, 0, 0, 311, 312, 814, 815, 786, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 806, 321,
	0, 384, 322, 323, 324, 907, 847, 0, 0, 325,
	0, 0, 0, 125, 326, 327, 328, 329, 330, 760,
	126, 0, 0, 0, 0, 758, 0, 0, 0, 0,
	756, 757, 791, 780, 781, 778, 779, 770, 0, 1138,
	0, 0, 0, 0, 0, 769, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 808, 773, 0, 0,
	0, 178, 179, 180, 332, 823, 334, 824, 181, 825,
	826, 1572, 182, 338, 339, 183, 184, 776, 807, 827,
	828, 342, 0, 185, 819, 0, 799, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 470, 193,
	194, 195, 0, 800, 801, 803, 0, 802, 804, 196,
	197, 394, 198, 829, 199, 830, 831, 0, 200, 0,
	201, 0, 202, 0, 0, 822, 204, 0, 205, 0,
	0, 0, 764, 206, 207, 208, 809, 810, 787, 0,
	0, 209, 210, 832, 833, 834, 0, 211, 0, 212,
	0, 1577, 471, 0, 213, 820, 0, 354, 0, 214,
	215, 216, 217, 218, 816, 818, 473, 0, 222, 0,
	219, 0, 472, 220, 835, 221, 836, 837, 838, 839,
	840, 0, 798, 0, 474, 223, 224, 225, 475, 226,
	227, 228, 0, 230, 229, 1573, 821, 476, 231, 477,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 478, 239, 240, 242, 241, 759, 0, 788,
	817, 243, 841, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 479, 249, 480, 811, 250, 251,
	252, 253, 254, 0, 255, 812, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 842, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 481, 278, 279, 765, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 805,
	292, 281, 282, 293, 482, 294, 843, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 844, 299, 300, 813,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 845, 846, 0, 1574, 311, 312, 814, 815,
	786, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 806, 321, 0, 384, 322, 323, 324, 385, 847,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 760, 0, 0, 0, 0, 0, 758, 0,
	0, 0, 0, 756, 757, 791, 780, 781, 778, 779,
	770, 0, 766, 0, 0, 0, 0, 0, 769, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 808,
	773, 0, 0, 0, 178, 179, 180, 332, 823, 334,
	824, 181, 825, 826, 0, 182, 338, 339, 183, 184,
	776, 807, 827, 828, 342, 0, 185, 819, 0, 799,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 470, 193, 194, 195, 0, 800, 801, 803, 0,
	802, 804, 196, 197, 394, 198, 829, 199, 830, 831,
	0, 200, 0, 201, 0, 202, 0, 0, 822, 204,
	0, 205, 0, 0, 0, 764, 206, 207, 208, 809,
	810, 787, 0, 0, 209, 210, 832, 833, 834, 0,
	211, 0, 212, 0, 0, 471, 0, 213, 820, 0,
	354, 0, 214, 215, 216, 217, 218, 816, 818, 473,
	0, 222, 0, 219, 0, 472, 220, 835, 221, 836,
	837, 838, 839, 840, 0, 798, 0, 474, 223, 224,
	225, 475, 226, 227, 228, 0, 230, 229, 0, 821,
	476, 231, 477, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 478, 239, 240, 242, 241,
	759, 2097, 788, 817, 243, 841, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 479, 249, 480,
	811, 250, 251, 252, 253, 254, 0, 255, 812, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 842, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 481, 278, 279, 765,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 805, 292, 281, 282, 293, 482, 294, 843,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 844,
	299, 300, 813, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 845, 846, 0, 0, 311,
	312, 814, 815, 786, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 806, 321, 0, 384, 322, 323,
	324, 385, 847, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 760, 0, 0, 0, 0,
	0, 758, 0, 0, 0, 0, 756, 757, 1032, 791,
	780, 781, 778, 779, 770, 766, 0, 0, 0, 0,
	0, 769, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 808, 773, 0, 0, 0, 178, 179,
	180, 332, 823, 334, 824, 181, 825, 826, 0, 182,
	338, 339, 183, 184, 776, 807, 827, 828, 342, 0,
	185, 819, 0, 799, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 470, 193, 194, 195, 0,
	800, 801, 803, 0, 802, 804, 196, 197, 394, 198,
	829, 199, 830, 831, 0, 200, 0, 201, 0, 202,
	0, 0, 822, 204, 0, 205, 0, 0, 0, 764,
	206, 207, 208, 809, 810, 787, 0, 0, 209, 210,
	832, 833, 834, 0, 211, 0, 212, 0, 0, 471,
	0, 213, 820, 0, 354, 0, 214, 215, 216, 217,
	218, 816, 818, 473, 0, 222, 1360, 219, 0, 472,
	220, 835, 221, 836, 837, 838, 839, 840, 0, 798,
	0, 474, 223, 224, 225, 475, 226, 227, 228, 0,
	230, 229, 0, 821, 476, 231, 477, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 478,
	239, 240, 242, 241, 759, 0, 788, 817, 243, 841,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 479, 249, 480, 811, 250, 251, 252, 253, 254,
	0, 255, 812, 256, 371, 257, 1359, 258, 259, 260,
	261, 262, 842, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	481, 278, 279, 765, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 805, 292, 281, 282,
	293, 482, 294, 843, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 844, 299, 300, 813, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 845,
	846, 0, 0, 311, 312, 814, 815, 786, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 806, 321,
	0, 384, 322, 323, 324, 385, 847, 0, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 760,
	0, 0, 0, 0, 0, 758, 0, 0, 0, 0,
	756, 757, 791, 780, 781, 778, 779, 770, 0, 766,
	0, 0, 0, 0, 0, 769, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 808, 773, 0, 0,
	0, 178, 179, 180, 332, 823, 334, 824, 181, 825,
	826, 0, 182, 338, 339, 183, 184, 776, 807, 827,
	828, 342, 0, 185, 819, 0, 799, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 470, 193,
	194, 195, 0, 800, 801, 803, 0, 802, 804, 196,
	197, 394, 198, 829, 199, 830, 831, 0, 200, 0,
	201, 0, 202, 0, 0, 822, 204, 0, 205, 0,
	0, 0, 764, 206, 207, 208, 809, 810, 787, 0,
	0, 209, 210, 832, 833, 834, 0, 211, 0, 212,
	0, 0, 471, 0, 213, 820, 0, 354, 0, 214,
	215, 216, 217, 218, 816, 818, 473, 0, 222, 0,
	219, 0, 472, 220, 835, 221, 836, 837, 838, 839,
	840, 0, 798, 0, 474, 223, 224, 225, 475, 226,
	227, 228, 0, 230, 229, 0, 821, 476, 231, 477,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 478, 239, 240, 242, 241, 759, 0, 788,
	817, 243, 841, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 479, 249, 480, 811, 250, 251,
	252, 253, 254, 0, 255, 812, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 842, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 481, 278, 279, 765, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 805,
	292, 281, 282, 293, 482, 294, 843, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 844, 299, 300, 813,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 845, 846, 0, 0, 311, 312, 814, 815,
	786, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 806, 321, 0, 384, 322, 323, 324, 385, 847,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 760, 0, 0, 0, 0, 0, 758, 0,
	0, 0, 0, 756, 757, 0, 0, 0, 0, 0,
	1142, 1509, 766, 0, 0, 0, 0, 0, 769, 791,
	780, 781, 778, 779, 770, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 808, 773, 0, 0, 0, 178, 179,
	180, 332, 823, 334, 824, 181, 825, 826, 0, 182,
	338, 339, 183, 184, 776, 807, 827, 828, 342, 0,
	185, 819, 0, 799, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 470, 193, 194, 195, 0,
	800, 801, 803, 0, 802, 804, 196, 197, 394, 198,
	829, 199, 830, 831, 1037, 200, 0, 201, 0, 202,
	0, 0, 822, 204, 0, 205, 0, 0, 0, 764,
	206, 207, 208, 809, 810, 787, 0, 0, 209, 210,
	832, 833, 834, 0, 211, 0, 212, 0, 0, 471,
	0, 213, 820, 0, 354, 0, 214, 215, 216, 217,
	218, 816, 818, 473, 0, 222, 0, 219, 0, 472,
	220, 835, 221, 836, 837, 838, 839, 840, 0, 798,
	0, 474, 223, 224, 225, 475, 226, 227, 228, 0,
	230, 229, 0, 821, 476, 231, 477, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 478,
	239, 240, 242, 241, 759, 0, 788, 817, 243, 841,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 479, 249, 480, 811, 250, 251, 252, 253, 254,
	0, 255, 812, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 842, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	481, 278, 279, 765, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 805, 292, 281, 282,
	293, 482, 294, 843, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 844, 299, 300, 813, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 845,
	846, 0, 0, 311, 312, 814, 815, 786, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 806, 321,
	0, 384, 322, 323, 324, 385, 847, 0, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 760,
	0, 0, 0, 0, 0, 758, 0, 0, 0, 0,
	756, 757, 791, 780, 781, 778, 779, 770, 0, 766,
	0, 0, 0, 0, 0, 769, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 808, 773, 0, 0,
	0, 178, 179, 180, 332, 823, 334, 824, 181, 825,
	826, 0, 182, 338, 339, 183, 184, 776, 807, 827,
	828, 342, 0, 185, 819, 0, 799, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 470, 193,
	194, 195, 0, 800, 801, 803, 0, 802, 804, 196,
	197, 394, 198, 829, 199, 830, 831, 0, 200, 0,
	201, 0, 202, 0, 0, 822, 204, 0, 205, 0,
	0, 0, 764, 206, 207, 208, 809, 810, 787, 0,
	0, 209, 210, 832, 833, 834, 0, 211, 0, 212,
	0, 0, 471, 0, 213, 820, 0, 354, 0, 214,
	215, 216, 217, 218, 816, 818, 473, 0, 222, 0,
	219, 0, 472, 220, 835, 221, 836, 837, 838, 839,
	840, 0, 798, 0, 474, 223, 224, 225, 475, 226,
	227, 228, 0, 230, 229, 0, 821, 476, 231, 477,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 478, 239, 240, 242, 241, 759, 0, 788,
	817, 243, 841, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 479, 249, 480, 811, 250, 251,
	252, 253, 254, 0, 255, 812, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 842, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 481, 278, 279, 765, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 805,
	292, 281, 282, 293, 482, 294, 843, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 844, 299, 300, 813,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 845, 846, 0, 0, 311, 312, 814, 815,
	786, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 806, 321, 0, 384, 322, 323, 324, 385, 847,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 760, 0, 0, 0, 0, 0, 758, 0,
	0, 0, 0, 756, 757, 791, 780, 781, 778, 779,
	770, 0, 766, 2065, 0, 0, 0, 0, 769, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 808,
	773, 0, 0, 0, 178, 179, 180, 332, 823, 334,
	824, 181, 825, 826, 0, 182, 338, 339, 183, 184,
	776, 807, 827, 828, 342, 0, 185, 819, 0, 799,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 470, 193, 194, 195, 0, 800, 801, 803, 0,
	802, 804, 196, 197, 394, 198, 829, 199, 830, 831,
	0, 200, 0, 201, 0, 202, 0, 0, 822, 204,
	0, 205, 0, 0, 0, 764, 206, 207, 208, 809,
	810, 787, 0, 0, 209, 210, 832, 833, 834, 0,
	211, 0, 212, 0, 0, 471, 0, 213, 820, 0,
	354, 0, 214, 215, 216, 217, 218, 816, 818, 473,
	0, 222, 0, 219, 0, 472, 220, 835, 221, 836,
	837, 838, 839, 840, 0, 798, 0, 474, 223, 224,
	225, 475, 226, 227, 228, 0, 230, 229, 0, 821,
	476, 231, 477, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 478, 239, 240, 242, 241,
	759, 0, 788, 817, 243, 841, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 479, 249, 480,
	811, 250, 251, 252, 253, 254, 0, 255, 812, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 842, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 481, 278, 279, 765,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 805, 292, 281, 282, 293, 482, 294, 843,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 844,
	299, 300, 813, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 845, 846, 0, 0, 311,
	312, 814, 815, 786, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 806, 321, 0, 384, 322, 323,
	324, 385, 847, 2014, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 760, 0, 0, 0, 0,
	0, 758, 0, 0, 0, 0, 756, 757, 791, 780,
	781, 778, 779, 770, 0, 766, 0, 0, 0, 0,
	0, 769, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 808, 773, 0, 0, 0, 178, 179, 180,
	332, 823, 334, 824, 181, 825, 826, 0, 182, 338,
	339, 183, 184, 776, 807, 827, 828, 342, 0, 185,
	819, 0, 799, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 470, 193, 194, 195, 0, 800,
	801, 803, 0, 802, 804, 196, 197, 394, 198, 829,
	199, 830, 831, 0, 200, 0, 201, 0, 202, 0,
	0, 822, 204, 0, 205, 0, 0, 0, 764, 206,
	207, 208, 809, 810, 787, 0, 0, 209, 210, 832,
	833, 834, 0, 211, 0, 212, 0, 0, 471, 0,
	213, 820, 0, 354, 0, 214, 215, 216, 217, 218,
	816, 818, 473, 0, 222, 0, 219, 0, 472, 220,
	835, 221, 836, 837, 838, 839, 840, 0, 798, 0,
	474, 223, 224, 225, 475, 226, 227, 228, 0, 230,
	229, 0, 821, 476, 231, 477, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 478, 239,
	240, 242, 241, 759, 0, 788, 817, 243, 841, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	479, 249, 480, 811, 250, 251, 252, 253, 254, 0,
	255, 812, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 842, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 481,
	278, 279, 765, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 805, 292, 281, 282, 293,
	482, 294, 843, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 844, 299, 300, 813, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 845, 846,
	0, 0, 311, 312, 814, 815, 786, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 806, 321, 0,
	384, 322, 323, 324, 385, 847, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 760, 0,
	0, 0, 0, 0, 758, 0, 0, 0, 0, 756,
	757, 791, 780, 781, 778, 779, 770, 0, 766, 2004,
	0, 0, 0, 0, 769, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 808, 773, 0, 0, 0,
	178, 179, 180, 332, 823, 334, 824, 181, 825, 826,
	0, 182, 338, 339, 183, 184, 776, 807, 827, 828,
	342, 0, 185, 819, 0, 799, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 470, 193, 194,
	195, 0, 800, 801, 803, 0, 802, 804, 196, 197,
	394, 198, 829, 199, 830, 831, 0, 200, 0, 201,
	0, 202, 0, 0, 822, 204, 0, 205, 0, 0,
	0, 764, 206, 207, 208, 809, 810, 787, 0, 0,
	209, 210, 832, 833, 834, 0, 211, 0, 212, 0,
	1577, 471, 0, 213, 820, 0, 354, 0, 214, 215,
	216, 217, 218, 816, 818, 473, 0, 222, 0, 219,
	0, 472, 220, 835, 221, 836, 837, 838, 839, 840,
	0, 798, 0, 474, 223, 224, 225, 475, 226, 227,
	228, 0, 230, 229, 0, 821, 476, 231, 477, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 478, 239, 240, 242, 241, 759, 0, 788, 817,
	243, 841, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 479, 249, 480, 811, 250, 251, 252,
	253, 254, 0, 255, 812, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 842, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 481, 278, 279, 765, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 805, 292,
	281, 282, 293, 482, 294, 843, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 844, 299, 300, 813, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 845, 846, 0, 0, 311, 312, 814, 815, 786,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	806, 321, 0, 384, 322, 323, 324, 385, 847, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 760, 0, 0, 0, 0, 0, 758, 0, 0,
	0, 0, 756, 757, 791, 780, 781, 778, 779, 770,
	0, 766, 0, 0, 0, 0, 0, 769, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 808, 773,
	0, 0, 0, 178, 179, 180, 332, 823, 334, 824,
	181, 825, 826, 0, 182, 338, 339, 183, 184, 776,
	807, 827, 828, 342, 0, 185, 819, 0, 799, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	470, 193, 194, 195, 0, 800, 801, 803, 0, 802,
	804, 196, 197, 394, 198, 829, 199, 830, 831, 0,
	200, 0, 201, 0, 202, 0, 0, 822, 204, 0,
	205, 0, 0, 0, 764, 206, 207, 208, 809, 810,
	787, 0, 0, 209, 210, 832, 833, 834, 0, 211,
	0, 212, 0, 0, 471, 0, 213, 820, 0, 354,
	0, 214, 215, 216, 217, 218, 816, 818, 473, 0,
	222, 0, 219, 0, 472, 220, 835, 221, 836, 837,
	838, 839, 840, 0, 798, 0, 474, 223, 224, 225,
	475, 226, 227, 228, 0, 230, 229, 0, 821, 476,
	231, 477, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 478, 239, 240, 242, 241, 759,
	0, 788, 817, 243, 841, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 479, 249, 480, 811,
	250, 251, 252, 253, 254, 0, 255, 812, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 842, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 481, 278, 279, 765, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 805, 292, 281, 282, 293, 482, 294, 843, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 844, 299,
	300, 813, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 845, 846, 0, 0, 311, 312,
	814, 815, 786, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 806, 321, 0, 384, 322, 323, 324,
	385, 847, 0, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 760, 0, 0, 0, 0, 0,
	758, 0, 0, 0, 0, 756, 757, 1032, 0, 0,
	0, 0, 0, 0, 766, 0, 0, 0, 0, 1586,
	769, 791, 780, 781, 778, 779, 770, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 808, 773, 0, 0, 0,
	178, 179, 180, 332, 823, 334, 824, 181, 825, 826,
	0, 182, 338, 339, 183, 184, 776, 807, 827, 828,
	342, 0, 185, 819, 0, 799, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 470, 193, 194,
	195, 0, 800, 801, 803, 0, 802, 804, 196, 197,
	394, 198, 829, 199, 830, 831, 0, 200, 0, 201,
	0, 202, 0, 0, 822, 204, 0, 205, 0, 0,
	0, 764, 206, 207, 208, 809, 810, 787, 0, 0,
	209, 210, 832, 833, 834, 0, 211, 0, 212, 0,
	0, 471, 0, 213, 820, 0, 354, 0, 214, 215,
	216, 217, 218, 816, 818, 473, 0, 222, 0, 219,
	0, 472, 220, 835, 221, 836, 837, 838, 839, 840,
	0, 798, 0, 474, 223, 224, 225, 475, 226, 227,
	228, 0, 230, 229, 0, 821, 476, 231, 477, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 478, 239, 240, 242, 241, 759, 0, 788, 817,
	243, 841, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 479, 249, 480, 811, 250, 251, 252,
	253, 254, 0, 255, 812, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 842, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 481, 278, 279, 765, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 805, 292,
	281, 282, 293, 482, 294, 843, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 844, 299, 300, 813, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 845, 846, 0, 0, 311, 312, 814, 815, 786,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	806, 321, 0, 384, 322, 323, 324, 385, 847, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 760, 0, 0, 0, 0, 0, 758, 0, 0,
	0, 0, 756, 757, 0, 0, 0, 0, 0, 0,
	0, 766, 0, 0, 0, 0, 1584, 769, 791, 780,
	781, 778, 779, 770, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 808, 773, 0, 0, 0, 178, 179, 180,
	332, 823, 334, 824, 181, 825, 826, 0, 182, 338,
	339, 183, 184, 776, 807, 827, 828, 342, 0, 185,
	819, 0, 799, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 470, 193, 194, 195, 0, 800,
	801, 803, 0, 802, 804, 196, 197, 394, 198, 829,
	199, 830, 831, 0, 200, 0, 201, 0, 202, 0,
	0, 822, 204, 0, 205, 0, 0, 0, 764, 206,
	207, 208, 809, 810, 787, 0, 0, 209, 210, 832,
	833, 834, 0, 211, 0, 212, 0, 0, 471, 0,
	213, 820, 0, 354, 0, 214, 215, 216, 217, 218,
	816, 818, 473, 0, 222, 0, 219, 0, 472, 220,
	835, 221, 836, 837, 838, 839, 840, 0, 798, 0,
	474, 223, 224, 225, 475, 226, 227, 228, 0, 230,
	229, 0, 821, 476, 231, 477, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 478, 239,
	240, 242, 241, 759, 0, 788, 817, 243, 841, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	479, 249, 480, 811, 250, 251, 252, 253, 254, 0,
	255, 812, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 842, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 481,
	278, 279, 765, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 805, 292, 281, 282, 293,
	482, 294, 843, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 844, 299, 300, 813, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 845, 846,
	0, 0, 311, 312, 814, 815, 786, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 806, 321, 0,
	384, 322, 323, 324, 385, 847, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 760, 0,
	0, 0, 0, 0, 758, 0, 0, 0, 0, 756,
	757, 0, 0, 0, 0, 0, 0, 0, 766, 0,
	0, 0, 0, 1568, 769, 791, 780, 781, 778, 779,
	770, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 808,
	773, 0, 0, 0, 178, 179, 180, 332, 823, 334,
	824, 181, 825, 826, 0, 182, 338, 339, 183, 184,
	776, 807, 827, 828, 342, 0, 185, 819, 0, 799,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 470, 193, 194, 195, 0, 800, 801, 803, 0,
	802, 804, 196, 197, 394, 198, 829, 199, 830, 831,
	0, 200, 0, 201, 0, 202, 0, 0, 822, 204,
	0, 205, 0, 0, 0, 764, 206, 207, 208, 809,
	810, 787, 0, 0, 209, 210, 832, 833, 834, 0,
	211, 0, 212, 0, 0, 471, 0, 213, 820, 0,
	354, 0, 214, 215, 216, 217, 218, 816, 818, 473,
	0, 222, 0, 219, 0, 472, 220, 835, 221, 836,
	837, 838, 839, 840, 0, 798, 0, 474, 223, 224,
	225, 475, 226, 227, 228, 0, 230, 229, 0, 821,
	476, 231, 477, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 478, 239, 240, 242, 241,
	759, 0, 788, 817, 243, 841, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 479, 249, 480,
	811, 250, 251, 252, 253, 254, 0, 255, 812, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 842, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 481, 278, 279, 765,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 805, 292, 281, 282, 293, 482, 294, 843,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 844,
	299, 300, 813, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 845, 846, 0, 0, 311,
	312, 814, 815, 786, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 806, 321, 0, 384, 322, 323,
	324, 385, 847, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 760, 0, 0, 0, 0,
	0, 758, 0, 0, 0, 0, 756, 757, 0, 0,
	0, 0, 0, 0, 0, 766, 0, 0, 0, 0,
	1556, 769, 791, 780, 781, 778, 779, 770, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 808, 773, 0, 0,
	0, 178, 179, 180, 332, 823, 334, 824, 181, 825,
	826, 0, 182, 338, 339, 183, 184, 776, 807, 827,
	828, 342, 0, 185, 819, 0, 799, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 470, 193,
	194, 195, 0, 800, 801, 803, 0, 802, 804, 196,
	197, 394, 198, 829, 199, 830, 831, 0, 200, 0,
	201, 0, 202, 0, 0, 822, 204, 0, 205, 0,
	0, 0, 764, 206, 207, 208, 809, 810, 787, 0,
	0, 209, 210, 832, 833, 834, 0, 211, 0, 212,
	0, 0, 471, 0, 213, 820, 0, 354, 0, 214,
	215, 216, 217, 218, 816, 818, 473, 0, 222, 0,
	219, 0, 472, 220, 835, 221, 836, 837, 838, 839,
	840, 0, 798, 0, 474, 223, 224, 225, 475, 226,
	227, 228, 0, 230, 229, 0, 821, 476, 231, 477,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 478, 239, 240, 242, 241, 759, 0, 788,
	817, 243, 841, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 479, 249, 480, 811, 250, 251,
	252, 253, 254, 0, 255, 812, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 842, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 481, 278, 279, 765, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 805,
	292, 281, 282, 293, 482, 294, 843, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 844, 299, 300, 813,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 845, 846, 0, 0, 311, 312, 814, 815,
	786, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 806, 321, 0, 384, 322, 323, 324, 385, 847,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 760, 0, 0, 0, 0, 0, 758, 0,
	0, 0, 0, 756, 757, 0, 0, 0, 0, 0,
	0, 0, 766, 0, 0, 0, 0, 1554, 769, 1546,
	780, 781, 778, 779, 770, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 808, 773, 0, 0, 0, 178, 179,
	180, 332, 823, 334, 824, 181, 825, 826, 0, 182,
	338, 339, 183, 184, 776, 807, 827, 828, 342, 0,
	185, 819, 0, 799, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 470, 193, 194, 195, 0,
	800, 801, 803, 0, 802, 804, 196, 197, 394, 198,
	829, 1549, 830, 831, 0, 200, 0, 201, 0, 202,
	0, 0, 822, 204, 0, 205, 0, 0, 0, 764,
	206, 207, 208, 809, 810, 787, 0, 0, 209, 210,
	832, 833, 834, 0, 211, 0, 212, 0, 0, 471,
	0, 213, 820, 0, 354, 0, 214, 215, 1550, 217,
	218, 816, 818, 473, 0, 222, 0, 219, 0, 472,
	220, 835, 221, 836, 837, 838, 839, 840, 0, 798,
	0, 474, 223, 224, 225, 475, 226, 227, 228, 0,
	230, 229, 0, 821, 476, 231, 477, 0, 232, 0,
	0, 233, 0, 234, 1551, 1548, 238, 365, 237, 478,
	239, 240, 242, 241, 759, 0, 788, 817, 243, 841,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 479, 249, 480, 811, 250, 251, 252, 253, 254,
	0, 255, 812, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 842, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	481, 278, 279, 765, 280, 0, 284, 285, 286, 1552,
	0, 289, 374, 288, 290, 291, 805, 292, 281, 282,
	293, 482, 294, 843, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 844, 299, 300, 813, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 845,
	846, 0, 0, 311, 312, 814, 815, 786, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 806, 321,
	0, 384, 322, 323, 324, 385, 847, 0, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 1547, 330, 760,
	0, 0, 0, 0, 0, 758, 0, 0, 0, 0,
	756, 757, 0, 0, 0, 0, 0, 0, 0, 766,
	0, 0, 0, 0, 1543, 769, 1546, 780, 781, 778,
	779, 770, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	808, 773, 0, 0, 0, 178, 179, 180, 332, 823,
	334, 824, 181, 825, 826, 0, 182, 338, 339, 183,
	184, 776, 807, 827, 828, 342, 0, 185, 819, 0,
	799, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 470, 193, 194, 195, 0, 800, 801, 803,
	0, 802, 804, 196, 197, 394, 198, 829, 1549, 830,
	831, 0, 200, 0, 201, 0, 202, 0, 0, 822,
	204, 0, 205, 0, 0, 0, 764, 206, 207, 208,
	809, 810, 787, 0, 0, 209, 210, 832, 833, 834,
	0, 211, 0, 212, 0, 0, 471, 0, 213, 820,
	0, 354, 0, 214, 215, 1550, 217, 218, 816, 818,
	473, 0, 222, 0, 219, 0, 472, 220, 835, 221,
	836, 837, 838, 839, 840, 0, 798, 0, 474, 223,
	224, 225, 475, 226, 227, 228, 0, 230, 229, 0,
	821, 476, 231, 477, 0, 232, 0, 0, 233, 0,
	234, 1551, 1548, 238, 365, 237, 478, 239, 240, 242,
	241, 759, 0, 788, 817, 243, 841, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 479, 249,
	480, 811, 250, 251, 252, 253, 254, 0, 255, 812,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 842,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 481, 278, 279,
	765, 280, 0, 284, 285, 286, 1552, 0, 289, 374,
	288, 290, 291, 805, 292, 281, 282, 293, 482, 294,
	843, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	844, 299, 300, 813, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 845, 846, 0, 0,
	311, 312, 814, 815, 786, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 806, 321, 0, 384, 322,
	323, 324, 385, 847, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 1547, 330, 760, 0, 0, 0,
	0, 0, 758, 0, 0, 0, 0, 756, 757, 791,
	780, 781, 778, 779, 770, 0, 766, 0, 0, 0,
	0, 0, 769, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 808, 773, 0, 0, 0, 178, 179,
	180, 332, 823, 334, 824, 181, 825, 826, 0, 182,
	338, 339, 183, 184, 776, 807, 827, 828, 342, 0,
	185, 819, 0, 799, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 470, 193, 194, 195, 0,
	800, 801, 803, 0, 802, 804, 196, 197, 394, 198,
	829, 199, 830, 831, 0, 200, 0, 201, 0, 202,
	0, 0, 822, 204, 0, 205, 0, 0, 0, 764,
	206, 207, 208, 809, 810, 787, 0, 0, 209, 210,
	832, 833, 834, 0, 211, 0, 212, 0, 0, 471,
	0, 213, 820, 0, 354, 0, 214, 215, 216, 217,
	218, 816, 818, 473, 0, 222, 0, 219, 0, 472,
	220, 835, 221, 836, 837, 838, 839, 840, 0, 798,
	0, 474, 223, 224, 225, 475, 226, 227, 228, 0,
	230, 229, 0, 821, 476, 231, 477, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 478,
	239, 240, 242, 241, 759, 0, 788, 817, 243, 841,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 479, 249, 480, 811, 250, 251, 252, 253, 254,
	0, 255, 812, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 842, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	481, 278, 279, 765, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 805, 292, 281, 282,
	293, 482, 294, 843, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 844, 299, 300, 813, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 845,
	846, 0, 0, 311, 312, 814, 815, 786, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 806, 321,
	0, 384, 322, 323, 324, 385, 847, 0, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 760,
	0, 0, 0, 0, 0, 758, 0, 0, 0, 0,
	756, 757, 0, 0, 0, 0, 0, 0, 0, 766,
	1504, 0, 0, 0, 1390, 769, 791, 780, 781, 778,
	779, 770, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	808, 773, 0, 0, 0, 178, 179, 180, 332, 823,
	334, 824, 181, 825, 826, 0, 182, 338, 339, 183,
	184, 776, 807, 827, 828, 342, 0, 185, 819, 0,
	799, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 470, 193, 194, 195, 0, 800, 801, 803,
	0, 802, 804, 196, 197, 394, 198, 829, 199, 830,
	831, 0, 200, 0, 201, 0, 202, 0, 0, 822,
	204, 0, 205, 0, 0, 0, 764, 206, 207, 208,
	809, 810, 787, 0, 0, 209, 210, 832, 833, 834,
	0, 211, 0, 212, 0, 0, 471, 0, 213, 820,
	0, 354, 0, 214, 215, 216, 217, 218, 816, 818,
	473, 0, 222, 0, 219, 0, 472, 220, 835, 221,
	836, 837, 838, 839, 840, 0, 798, 0, 474, 223,
	224, 225, 475, 226, 227, 228, 0, 230, 229, 0,
	821, 476, 231, 477, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 478, 239, 240, 242,
	241, 759, 0, 788, 817, 243, 841, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 479, 249,
	480, 811, 250, 251, 252, 253, 254, 0, 255, 812,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 842,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 481, 278, 279,
	765, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 805, 292, 281, 282, 293, 482, 294,
	843, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	844, 299, 300, 813, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 845, 846, 0, 0,
	311, 312, 814, 815, 786, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 806, 321, 0, 384, 322,
	323, 324, 385, 847, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 760, 0, 0, 0,
	0, 0, 758, 0, 0, 0, 0, 756, 757, 791,
	780, 781, 778, 779, 770, 0, 766, 0, 0, 0,
	0, 0, 769, 0, 0, 175, 176, 1347, 177, 0,
	0, 0, 0, 808, 773, 0, 0, 0, 178, 179,
	180, 332, 823, 334, 824, 181, 825, 826, 0, 182,
	338, 339, 183, 184, 776, 807, 827, 828, 342, 0,
	185, 819, 0, 799, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 470, 193, 194, 195, 0,
	800, 801, 803, 0, 802, 804, 196, 197, 394, 198,
	829, 199, 830, 831, 0, 200, 0, 201, 0, 202,
	0, 0, 822, 204, 0, 205, 0, 0, 0, 764,
	206, 207, 208, 809, 810, 787, 0, 0, 209, 210,
	832, 833, 834, 0, 211, 0, 212, 0, 0, 471,
	0, 213, 820, 0, 354, 0, 214, 215, 216, 217,
	218, 816, 818, 473, 0, 222, 0, 219, 0, 472,
	220, 835, 221, 836, 837, 838, 839, 840, 0, 798,
	0, 474, 223, 224, 225, 475, 226, 227, 228, 0,
	230, 229, 0, 821, 476, 231, 477, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 478,
	239, 240, 242, 241, 759, 0, 788, 817, 243, 841,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 479, 249, 480, 811, 250, 251, 252, 253, 254,
	0, 255, 812, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 842, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	481, 278, 279, 765, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 805, 292, 281, 282,
	293, 482, 294, 843, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 844, 299, 300, 813, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 845,
	846, 0, 0, 311, 312, 814, 815, 786, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 806, 321,
	0, 384, 322, 323, 324, 385, 847, 0, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 760,
	0, 0, 0, 0, 0, 758, 0, 0, 0, 0,
	756, 757, 0, 0, 0, 0, 0, 0, 0, 766,
	0, 0, 0, 0, 855, 769, 791, 780, 781, 778,
	779, 770, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	808, 773, 0, 0, 0, 178, 179, 180, 332, 823,
	334, 824, 181, 825, 826, 0, 182, 338, 339, 183,
	184, 776, 807, 827, 828, 342, 0, 185, 819, 0,
	799, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 470, 193, 194, 195, 0, 800, 801, 803,
	0, 802, 804, 196, 197, 394, 198, 829, 199, 830,
	831, 0, 200, 0, 201, 0, 202, 0, 0, 822,
	204, 0, 205, 0, 0, 0, 764, 206, 207, 208,
	809, 810, 787, 0, 0, 209, 210, 832, 833, 834,
	0, 211, 0, 212, 0, 0, 471, 0, 213, 820,
	0, 354, 0, 214, 215, 216, 217, 218, 816, 818,
	473, 0, 222, 0, 219, 0, 472, 220, 835, 221,
	836, 837, 838, 839, 840, 0, 798, 0, 474, 223,
	224, 225, 475, 226, 227, 228, 0, 230, 229, 0,
	821, 476, 231, 477, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 478, 239, 240, 242,
	241, 759, 0, 788, 817, 243, 841, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 479, 249,
	480, 811, 250, 251, 252, 253, 254, 0, 255, 812,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 842,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 481, 278, 279,
	765, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 805, 292, 281, 282, 293, 482, 294,
	843, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	844, 299, 300, 813, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 845, 846, 0, 0,
	311, 312, 814, 815, 786, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 806, 321, 0, 384, 322,
	323, 324, 385, 847, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 760, 0, 0, 0,
	0, 0, 758, 0, 0, 0, 0, 756, 757, 0,
	0, 0, 0, 0, 0, 0, 766, 0, 0, 0,
	0, 754, 769, 791, 780, 781, 778, 779, 770, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 808, 773, 0,
	0, 0, 178, 179, 180, 332, 823, 334, 824, 181,
	825, 826, 0, 182, 338, 339, 183, 184, 776, 807,
	827, 828, 342, 0, 185, 819, 0, 799, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 470,
	193, 194, 195, 0, 800, 801, 803, 0, 802, 804,
	196, 197, 394, 198, 829, 199, 830, 831, 0, 200,
	0, 201, 0, 202, 0, 0, 822, 204, 0, 205,
	0, 0, 0, 764, 206, 207, 208, 809, 810, 787,
	0, 0, 209, 210, 832, 833, 834, 0, 211, 0,
	212, 0, 0, 471, 0, 213, 820, 0, 354, 0,
	214, 215, 216, 217, 218, 816, 818, 473, 0, 222,
	0, 219, 0, 472, 220, 835, 221, 836, 837, 838,
	839, 840, 0, 798, 0, 474, 223, 224, 225, 475,
	226, 227, 228, 0, 230, 229, 0, 821, 476, 231,
	477, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 478, 239, 240, 242, 241, 759, 0,
	788, 817, 243, 841, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 479, 249, 480, 811, 250,
	251, 252, 253, 254, 0, 255, 812, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 842, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 481, 278, 279, 765, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	805, 292, 281, 282, 293, 482, 294, 843, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 844, 299, 300,
	813, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 845, 846, 0, 0, 311, 312, 814,
	815, 786, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 806, 321, 0, 384, 322, 323, 324, 385,
	847, 0, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 760, 0, 0, 0, 0, 0, 758,
	0, 0, 0, 0, 756, 757, 791, 780, 781, 778,
	779, 770, 0, 766, 0, 0, 0, 0, 0, 769,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	808, 773, 0, 0, 0, 178, 179, 180, 332, 823,
	334, 824, 181, 825, 826, 0, 182, 338, 339, 183,
	184, 776, 807, 827, 828, 342, 0, 185, 819, 0,
	799, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 470, 193, 194, 2425, 0, 800, 801, 803,
	0, 802, 804, 196, 197, 394, 198, 829, 199, 830,
	831, 0, 200, 0, 201, 0, 202, 0, 0, 822,
	204, 0, 205, 0, 0, 0, 764, 206, 207, 208,
	809, 810, 787, 0, 0, 209, 210, 832, 833, 834,
	0, 211, 0, 212, 0, 0, 471, 0, 213, 820,
	0, 354, 0, 214, 215, 216, 217, 218, 816, 818,
	473, 0, 222, 0, 219, 0, 472, 220, 835, 221,
	836, 837, 838, 839, 840, 0, 798, 0, 474, 223,
	224, 225, 475, 226, 227, 228, 0, 230, 229, 0,
	821, 476, 231, 477, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 478, 239, 240, 242,
	241, 759, 0, 788, 817, 243, 841, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 479, 249,
	480, 811, 250, 251, 252, 253, 254, 0, 255, 812,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 842,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 481, 278, 279,
	765, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 805, 292, 281, 282, 293, 482, 294,
	843, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	844, 299, 300, 813, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 845, 846, 0, 0,
	311, 312, 814, 815, 786, 313, 314, 2424, 316, 0,
	0, 317, 318, 319, 320, 806, 321, 0, 384, 322,
	323, 324, 385, 847, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 760, 0, 0, 0,
	0, 0, 758, 0, 0, 0, 0, 756, 757, 791,
	780, 781, 778, 779, 770, 0, 766, 0, 0, 0,
	0, 0, 769, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 808, 773, 0, 0, 0, 178, 179,
	180, 2423, 823, 334, 824, 181, 825, 826, 0, 182,
	338, 339, 183, 184, 776, 807, 827, 828, 342, 0,
	185, 819, 0, 799, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 470, 193, 194, 2425, 0,
	800, 801, 803, 0, 802, 804, 196, 197, 394, 198,
	829, 199, 830, 831, 0, 200, 0, 201, 0, 202,
	0, 0, 822, 204, 0, 205, 0, 0, 0, 764,
	206, 207, 208, 809, 810, 787, 0, 0, 209, 210,
	832, 833, 834, 0, 211, 0, 212, 0, 0, 471,
	0, 213, 820, 0, 354, 0, 214, 215, 216, 217,
	218, 816, 818, 473, 0, 222, 0, 219, 0, 472,
	220, 835, 221, 836, 837, 838, 839, 840, 0, 798,
	0, 474, 223, 224, 225, 475, 226, 227, 228, 0,
	230, 229, 0, 821, 476, 231, 477, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 478,
	239, 240, 242, 241, 759, 0, 788, 817, 243, 841,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 479, 249, 480, 811, 250, 251, 252, 253, 254,
	0, 255, 812, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 842, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	481, 278, 279, 765, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 805, 292, 281, 282,
	293, 482, 294, 843, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 844, 299, 300, 813, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 845,
	846, 0, 0, 311, 312, 814, 815, 786, 313, 314,
	2424, 316, 0, 0, 317, 318, 319, 320, 806, 321,
	0, 384, 322, 323, 324, 385, 847, 0, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 760,
	0, 0, 0, 0, 0, 758, 0, 0, 0, 0,
	756, 757, 791, 780, 781, 778, 779, 770, 0, 766,
	0, 0, 0, 0, 0, 769, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 808, 773, 0, 0,
	0, 178, 179, 180, 332, 823, 334, 824, 181, 825,
	826, 0, 182, 338, 339, 183, 184, 776, 807, 827,
	828, 342, 0, 185, 819, 0, 799, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 470, 193,
	194, 195, 0, 800, 801, 803, 0, 802, 804, 196,
	197, 394, 198, 829, 199, 830, 831, 0, 200, 0,
	201, 0, 202, 0, 0, 822, 204, 0, 205, 0,
	0, 0, 764, 206, 207, 208, 809, 810, 787, 0,
	0, 209, 210, 832, 833, 834, 0, 211, 0, 212,
	0, 0, 471, 0, 213, 820, 0, 354, 0, 214,
	215, 216, 217, 218, 816, 818, 473, 0, 222, 0,
	219, 0, 472, 220, 835, 221, 836, 837, 838, 839,
	840, 0, 798, 0, 474, 223, 224, 225, 475, 226,
	227, 228, 0, 230, 229, 0, 821, 476, 231, 477,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 478, 239, 240, 242, 241, 759, 0, 788,
	817, 243, 841, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 479, 249, 480, 811, 250, 251,
	252, 253, 254, 0, 255, 812, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 842, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 481, 278, 279, 765, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 805,
	292, 281, 282, 293, 482, 294, 843, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 844, 299, 300, 813,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 845, 846, 0, 0, 311, 312, 814, 815,
	786, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 806, 321, 0, 384, 322, 323, 324, 385, 847,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 760, 0, 0, 0, 0, 0, 758, 0,
	0, 0, 0, 756, 757, 791, 780, 781, 778, 779,
	770, 0, 766, 0, 0, 0, 0, 0, 769, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 808,
	773, 0, 0, 0, 178, 179, 180, 332, 823, 334,
	824, 181, 825, 826, 0, 182, 338, 339, 183, 184,
	776, 807, 827, 828, 342, 0, 185, 819, 0, 799,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 470, 193, 194, 195, 0, 800, 801, 803, 0,
	802, 804, 196, 197, 394, 198, 829, 199, 830, 831,
	0, 200, 0, 201, 0, 202, 0, 0, 822, 204,
	0, 205, 0, 0, 0, 764, 206, 207, 208, 809,
	810, 787, 0, 0, 209, 210, 832, 833, 834, 0,
	211, 0, 212, 0, 0, 471, 0, 213, 820, 0,
	354, 0, 214, 215, 216, 217, 218, 816, 818, 473,
	0, 222, 0, 219, 0, 472, 220, 835, 221, 836,
	837, 838, 839, 840, 0, 798, 0, 474, 223, 224,
	225, 475, 226, 227, 228, 0, 230, 229, 0, 821,
	476, 231, 477, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 478, 239, 240, 242, 241,
	0, 0, 788, 817, 243, 841, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 479, 249, 480,
	811, 250, 251, 252, 253, 254, 0, 255, 812, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 842, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 481, 278, 279, 1566,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 805, 292, 281, 282, 293, 482, 294, 843,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 844,
	299, 300, 813, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 845, 846, 0, 0, 311,
	312, 814, 815, 786, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 806, 321, 0, 384, 322, 323,
	324, 385, 847, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 791, 780, 781, 778, 779,
	770, 1564, 0, 0, 0, 0, 1562, 1563, 0, 0,
	0, 175, 176, 0, 177, 1565, 0, 0, 0, 808,
	773, 769, 0, 0, 178, 179, 180, 332, 823, 334,
	824, 181, 825, 826, 0, 182, 338, 339, 183, 184,
	0, 807, 827, 828, 342, 0, 185, 819, 0, 799,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 470, 193, 194, 195, 0, 800, 801, 803, 0,
	802, 804, 196, 197, 394, 198, 829, 199, 830, 831,
	0, 200, 0, 201, 0, 202, 0, 0, 822, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 809,
	810, 787, 0, 0, 209, 210, 832, 833, 834, 0,
	211, 0, 212, 0, 0, 471, 0, 213, 820, 0,
	354, 0, 214, 215, 216, 217, 218, 816, 818, 473,
	0, 222, 0, 219, 0, 472, 220, 835, 221, 836,
	837, 838, 839, 840, 0, 798, 0, 474, 223, 224,
	225, 475, 226, 227, 228, 0, 230, 229, 0, 821,
	476, 231, 477, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 478, 239, 240, 242, 241,
	0, 0, 788, 817, 243, 841, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 479, 249, 480,
	811, 250, 251, 252, 253, 254, 0, 255, 812, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 842, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 481, 278, 279, 1566,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 805, 292, 281, 282, 293, 482, 294, 843,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 844,
	299, 300, 813, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 845, 846, 0, 0, 311,
	312, 814, 815, 786, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 806, 321, 0, 384, 322, 323,
	324, 385, 847, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 791, 780, 781, 778, 779,
	770, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 1565, 0, 0, 0, 808,
	773, 769, 0, 0, 178, 179, 180, 0, 823, 334,
	824, 181, 825, 826, 0, 182, 338, 339, 183, 184,
	776, 807, 827, 828, 342, 0, 185, 819, 0, 799,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 470, 193, 194, 2425, 0, 800, 801, 803, 0,
	802, 804, 196, 197, 394, 198, 829, 199, 830, 831,
	0, 200, 0, 201, 0, 202, 0, 0, 822, 204,
	0, 205, 0, 0, 0, 764, 206, 207, 208, 809,
	810, 787, 0, 0, 209, 210, 832, 833, 834, 0,
	211, 0, 212, 0, 0, 471, 0, 213, 820, 0,
	354, 0, 214, 215, 216, 217, 218, 816, 818, 0,
	0, 222, 0, 219, 0, 472, 220, 835, 221, 836,
	837, 838, 839, 840, 0, 798, 0, 0, 223, 224,
	225, 475, 226, 227, 228, 0, 230, 229, 0, 821,
	476, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 478, 239, 240, 242, 241,
	759, 0, 788, 817, 243, 841, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 479, 249, 480,
	811, 250, 251, 252, 253, 254, 0, 255, 812, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 842, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 481, 278, 279, 765,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 805, 292, 281, 282, 293, 0, 294, 843,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 844,
	299, 300, 813, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 845, 846, 0, 0, 311,
	312, 814, 815, 786, 313, 314, 2424, 316, 0, 0,
	317, 318, 319, 320, 806, 321, 0, 384, 322, 323,
	324, 385, 847, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 791, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 756, 757, 0, 0,
	0, 175, 176, 0, 177, 766, 0, 0, 0, 808,
	0, 769, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 807, 340, 341, 342, 0, 185, 819, 0, 799,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 470, 193, 194, 195, 0, 800, 801, 803, 0,
	802, 804, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 809,
	810, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 471, 0, 213, 820, 0,
	354, 0, 214, 215, 216, 217, 218, 816, 818, 473,
	0, 222, 0, 219, 0, 472, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 474, 223, 224,
	225, 475, 226, 227, 228, 0, 230, 229, 0, 821,
	476, 231, 477, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 478, 239, 240, 242, 241,
	0, 0, 0, 817, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 479, 249, 480,
	811, 250, 251, 252, 253, 254, 0, 255, 812, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 481, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 805, 292, 281, 282, 293, 482, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 813, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 814, 815, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 806, 321, 0, 384, 322, 323,
	324, 385, 386, 0, 0, 325, 904, 0, 687, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 1968, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 469, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 470, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 471, 0,
	213, 353, 0, 354, 0, 214, 215, 216, 217, 218,
	355, 356, 473, 0, 222, 0, 219, 0, 472, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	474, 223, 224, 225, 475, 226, 227, 228, 0, 230,
	229, 0, 364, 476, 231, 477, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 478, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	479, 249, 480, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 481,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 131,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	482, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 133, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 907, 386, 0, 0, 325, 0,
	0, 0, 125, 326, 327, 328, 329, 330, 0, 126,
	687, 684, 0, 685, 680, 675, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 118, 177,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 0,
	182, 338, 339, 183, 184, 0, 0, 340, 341, 342,
	0, 185, 343, 0, 469, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 470, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 344, 199, 345, 346, 1311, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	347, 206, 207, 208, 348, 349, 677, 0, 0, 209,
	210, 350, 351, 352, 0, 211, 0, 212, 0, 0,
	471, 0, 213, 353, 0, 354, 0, 214, 215, 216,
	217, 218, 355, 356, 473, 0, 222, 0, 219, 0,
	472, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 474, 223, 224, 225, 475, 226, 227, 228,
	0, 230, 229, 0, 364, 476, 231, 477, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	478, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 678, 0, 247, 0, 0,
	248, 368, 479, 249, 480, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 481, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 482, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 676, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 0, 0,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	687, 684, 0, 685, 680, 675, 0, 0, 0, 0,
	0, 686, 681, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 0,
	182, 338, 339, 183, 184, 0, 0, 340, 341, 342,
	0, 185, 343, 0, 469, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 470, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 344, 199, 345, 346, 1308, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	347, 206, 207, 208, 348, 349, 677, 0, 0, 209,
	210, 350, 351, 352, 0, 211, 0, 212, 0, 0,
	471, 0, 213, 353, 0, 354, 0, 214, 215, 216,
	217, 218, 355, 356, 473, 0, 222, 0, 219, 0,
	472, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 474, 223, 224, 225, 475, 226, 227, 228,
	0, 230, 229, 0, 364, 476, 231, 477, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	478, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 678, 0, 247, 0, 0,
	248, 368, 479, 249, 480, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 481, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 482, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 676, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 0, 0,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	687, 684, 0, 685, 680, 675, 0, 0, 0, 0,
	0, 686, 681, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 0,
	182, 338, 339, 183, 184, 0, 0, 340, 341, 342,
	0, 185, 343, 0, 469, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 470, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 344, 199, 345, 346, 948, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	347, 206, 207, 208, 348, 349, 677, 0, 0, 209,
	210, 350, 351, 352, 0, 211, 0, 212, 0, 0,
	471, 0, 213, 353, 0, 354, 0, 214, 215, 216,
	217, 218, 355, 356, 473, 0, 222, 0, 219, 0,
	472, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 474, 223, 224, 225, 475, 226, 227, 228,
	0, 230, 229, 0, 364, 476, 231, 477, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	478, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 678, 0, 247, 0, 0,
	248, 368, 479, 249, 480, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 481, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 482, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 676, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 0, 0,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	672, 0, 687, 684, 0, 685, 680, 675, 0, 0,
	0, 686, 681, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 0, 182, 338, 339, 183, 184, 0, 0, 340,
	341, 342, 0, 185, 343, 0, 469, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 470, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 344, 199, 345, 346, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 348, 349, 677, 0,
	0, 209, 210, 350, 351, 352, 0, 211, 0, 212,
	0, 0, 471, 0, 213, 353, 0, 354, 0, 214,
	215, 216, 217, 218, 355, 356, 473, 0, 222, 0,
	219, 0, 472, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 474, 223, 224, 225, 475, 226,
	227, 228, 0, 230, 229, 0, 364, 476, 231, 477,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 478, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 678, 0, 247,
	0, 0, 248, 368, 479, 249, 480, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 481, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 482, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	676, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 687, 684, 0, 685, 680, 675, 0, 0,
	0, 0, 0, 686, 681, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 0, 182, 338, 339, 183, 184, 0, 0, 340,
	341, 342, 0, 185, 343, 0, 469, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 470, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 344, 199, 345, 346, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 348, 349, 677, 0,
	0, 209, 210, 350, 351, 352, 0, 211, 0, 212,
	0, 0, 471, 0, 213, 353, 0, 354, 0, 214,
	215, 216, 217, 218, 355, 356, 473, 0, 222, 0,
	219, 0, 472, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 474, 223, 224, 225, 475, 226,
	227, 228, 0, 230, 229, 0, 364, 476, 231, 477,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 478, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 678, 0, 247,
	0, 0, 248, 368, 479, 249, 480, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 481, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 482, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	676, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 669, 325, 172, 0, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 686, 681, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 729,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 131, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 133, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 907,
	386, 0, 0, 325, 0, 172, 0, 125, 326, 327,
	328, 329, 330, 0, 126, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 723, 0, 1056, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 355, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 729, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 131, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 133, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 907, 386, 0, 0, 325, 669, 0, 172, 125,
	326, 327, 328, 329, 330, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 723, 0, 1056, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 214, 215, 216, 217, 218,
	355, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 131,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 133, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 907, 386, 0, 0, 325, 1693,
	0, 172, 125, 326, 327, 328, 329, 330, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 118, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 729, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	0, 325, 722, 0, 172, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 723,
	0, 728, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 353, 0, 354,
	0, 214, 215, 216, 217, 218, 355, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	729, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 0, 0, 325, 0, 172, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	331, 0, 723, 0, 728, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 0, 182, 338, 339, 183,
	184, 0, 0, 340, 341, 342, 0, 185, 343, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 344, 199, 345,
	346, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 347, 206, 207, 208,
	348, 349, 0, 0, 0, 209, 210, 350, 351, 352,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 353,
	0, 354, 0, 214, 215, 216, 217, 218, 355, 356,
	0, 0, 222, 0, 219, 0, 0, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 223,
	224, 225, 0, 226, 227, 228, 0, 230, 229, 0,
	364, 0, 231, 0, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 0, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 729, 247, 0, 0, 248, 368, 0, 249,
	0, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 0, 325, 0, 172, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 723, 0, 728, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 214, 215, 216, 217, 218,
	355, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 0, 325, 0,
	0, 172, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 1186,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	0, 325, 0, 172, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 1630, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 0, 0, 325, 0, 172, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 2029, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 355, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 791, 780, 781, 778, 779,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 1059, 0, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 823, 334,
	824, 181, 825, 826, 0, 182, 338, 339, 183, 184,
	0, 0, 827, 828, 342, 0, 185, 343, 0, 469,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 470, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 829, 199, 830, 831,
	0, 200, 0, 201, 0, 202, 0, 0, 822, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 787, 0, 0, 209, 210, 832, 833, 834, 0,
	211, 0, 212, 0, 0, 471, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 355, 356, 473,
	0, 222, 0, 219, 0, 472, 220, 835, 221, 836,
	837, 838, 839, 840, 0, 798, 0, 474, 223, 224,
	225, 475, 226, 227, 228, 0, 230, 229, 0, 364,
	476, 231, 477, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 478, 239, 240, 242, 241,
	0, 0, 788, 366, 243, 841, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 479, 249, 480,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 842, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 481, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 482, 294, 843,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 844,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 845, 846, 0, 0, 311,
	312, 382, 383, 786, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 847, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 954, 0, 687, 684, 0,
	0, 0, 956, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 469, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 470, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 471, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 473, 0, 222, 0, 219, 0, 472, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 474,
	223, 224, 225, 475, 226, 227, 228, 0, 230, 229,
	0, 364, 476, 231, 477, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 478, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 479,
	249, 480, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 481, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 482,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 572, 325, 172, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 168, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 214, 215, 216, 217, 218,
	355, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 167, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 165, 325, 172,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 171, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 168, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 167,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 687, 684, 325,
	0, 0, 956, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 171, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 469, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 470, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 471, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 473, 0, 222, 0, 219, 0, 472, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 474,
	223, 224, 225, 475, 226, 227, 228, 0, 230, 229,
	0, 364, 476, 231, 477, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 478, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 479,
	249, 480, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 481, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 482,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 172, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 168, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 355, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 167, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 687, 684, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 171, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 469, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 470,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 471, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 473, 0, 222,
	0, 219, 0, 472, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 474, 223, 224, 225, 475,
	226, 227, 228, 0, 230, 229, 0, 364, 476, 231,
	477, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 478, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 479, 249, 480, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 481, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 482, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 172, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 687,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 171, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 469, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 470, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 471,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 473, 0, 222, 0, 219, 0, 472,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 474, 223, 224, 225, 475, 226, 227, 228, 0,
	230, 229, 0, 364, 476, 231, 477, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 478,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 479, 249, 480, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	481, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 482, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 172, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 1410, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 1408, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 1607, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 1413, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 1605, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 1412, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 1606, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 172, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 1410, 185, 343, 0, 0,
	1405, 186, 187, 188, 0, 189, 1408, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 1413, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 1404, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 1412, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 1411,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 0, 882, 325, 172, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 0, 182, 338, 339, 183,
	184, 0, 0, 340, 341, 342, 0, 185, 343, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 344, 199, 345,
	346, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 347, 206, 207, 208,
	348, 349, 0, 0, 0, 209, 210, 350, 351, 352,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 353,
	0, 354, 0, 214, 215, 216, 217, 218, 355, 356,
	0, 0, 222, 0, 219, 0, 0, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 223,
	224, 225, 0, 226, 227, 228, 0, 230, 229, 0,
	364, 0, 231, 0, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 0, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 729, 247, 0, 0, 248, 368, 0, 249,
	0, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 735, 325, 172, 0, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 737,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 729, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 731, 325, 172, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 214, 215, 216, 217, 218,
	733, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 729, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 411, 325, 172,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 410, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 409, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 172, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 1393, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 172, 2116, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 355, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 172, 2116, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	2113, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 172, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 729, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	1336, 325, 172, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 0, 182, 338, 339, 183, 184, 0, 0, 340,
	341, 342, 0, 185, 343, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 344, 199, 345, 346, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 348, 349, 0, 0,
	0, 209, 210, 350, 351, 352, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 353, 0, 354, 0, 214,
	215, 216, 217, 218, 355, 356, 0, 0, 222, 0,
	219, 0, 0, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 364, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 1334, 325, 172, 0, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 172, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 175, 176, 1316,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	1200, 325, 172, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 0, 182, 338, 339, 183, 184, 0, 0, 340,
	341, 342, 0, 185, 343, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 344, 199, 345, 346, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 348, 349, 0, 0,
	0, 209, 210, 350, 351, 352, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 353, 0, 354, 0, 214,
	215, 216, 217, 218, 1199, 356, 0, 0, 222, 0,
	219, 0, 0, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 364, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 605, 325, 172, 0, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 931, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 607, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 602, 380, 381, 0, 0, 311, 932, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 0, 900, 325, 172, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 353, 0, 354,
	0, 214, 215, 216, 217, 218, 899, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 0, 897, 325, 172, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 896, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 0, 893, 325, 172, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 0, 182, 338, 339, 183,
	184, 0, 0, 340, 341, 342, 0, 185, 343, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 344, 199, 345,
	346, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 347, 206, 207, 208,
	348, 349, 0, 0, 0, 209, 210, 350, 351, 352,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 353,
	0, 354, 0, 214, 215, 216, 217, 218, 892, 356,
	0, 0, 222, 0, 219, 0, 0, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 223,
	224, 225, 0, 226, 227, 228, 0, 230, 229, 0,
	364, 0, 231, 0, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 0, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 0, 249,
	0, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 890, 325, 172, 0, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 889,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 886, 325, 172, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 214, 215, 216, 217, 218,
	885, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 172, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 175, 176, 874, 177, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 0, 182, 338, 339, 183,
	184, 0, 0, 340, 341, 342, 0, 185, 343, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 344, 199, 345,
	346, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 347, 206, 207, 208,
	348, 349, 0, 0, 0, 209, 210, 350, 351, 352,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 353,
	0, 354, 0, 214, 215, 216, 217, 218, 355, 356,
	0, 0, 222, 0, 219, 0, 0, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 223,
	224, 225, 0, 226, 227, 228, 0, 230, 229, 0,
	364, 0, 231, 0, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 0, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 0, 249,
	0, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 872, 325, 172, 0, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 871,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 868, 325, 172, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 214, 215, 216, 217, 218,
	355, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 866, 325, 172,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 0, 862, 325,
	172, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 0,
	182, 338, 339, 183, 184, 0, 0, 340, 341, 342,
	0, 185, 343, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 344, 199, 345, 346, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	347, 206, 207, 208, 348, 349, 0, 0, 0, 209,
	210, 350, 351, 352, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 353, 0, 354, 0, 214, 215, 216,
	217, 218, 864, 356, 0, 0, 222, 0, 219, 0,
	0, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 223, 224, 225, 0, 226, 227, 228,
	0, 230, 229, 0, 364, 0, 231, 0, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 0, 249, 0, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 0, 741,
	325, 172, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 743, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	739, 325, 172, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 0, 182, 338, 339, 183, 184, 0, 0, 340,
	341, 342, 0, 185, 343, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 344, 199, 345, 346, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 348, 349, 0, 0,
	0, 209, 210, 350, 351, 352, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 353, 0, 354, 0, 214,
	215, 216, 217, 218, 355, 356, 0, 0, 222, 0,
	219, 0, 0, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 364, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 605, 325, 172, 0, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 596, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 595, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 607, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 597, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 598, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 602, 380, 381, 0, 0, 311, 600, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 0, 580, 325, 172, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 353, 0, 354,
	0, 214, 215, 216, 217, 218, 355, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 581, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 0, 578, 325, 172, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 355, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 0, 570, 325, 172, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 0, 182, 338, 339, 183,
	184, 0, 0, 340, 341, 342, 0, 185, 343, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 344, 199, 345,
	346, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 347, 206, 207, 208,
	348, 349, 0, 0, 0, 209, 210, 350, 351, 352,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 353,
	0, 354, 0, 214, 215, 216, 217, 218, 355, 356,
	0, 0, 222, 0, 219, 0, 0, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 223,
	224, 225, 0, 226, 227, 228, 0, 230, 229, 0,
	364, 0, 231, 0, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 0, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 0, 249,
	0, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 434, 325, 172, 0, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 172, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 355, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 172, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 1740, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 172, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 1738, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 172,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 1727, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 172, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 581, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 172, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 1210, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 355, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 0, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 172, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 705, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 172, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 0,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 0, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 0, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 1085, 1086, 0, 1105, 1106, 1107, 1115, 1116, 1117,
	0, 0, 0, 0, 0, 0, 0, 1108, 0, 0,
	0, 0, 0, 0, 1088, 0, 0, 1119, 0, 1085,
	1086, 0, 1105, 1106, 1107, 1115, 1116, 1117, 0, 0,
	0, 0, 0, 0, 0, 1108, 0, 0, 1087, 0,
	0, 0, 1088, 0, 1102, 1119, 0, 1085, 1086, 0,
	1105, 1106, 1107, 1115, 1116, 1117, 0, 0, 0, 0,
	0, 0, 0, 1108, 0, 0, 1087, 0, 0, 0,
	1088, 0, 1102, 1119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1087, 0, 0, 0, 0, 1093,
	1102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	1120, 0, 0, 0, 0, 0, 0, 1093, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1112, 1120, 0,
	0, 0, 1110, 0, 0, 1093, 0, 0, 1103, 0,
	0, 0, 0, 0, 0, 1118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1112, 1120, 0, 0, 0,
	1110, 0, 0, 1109, 0, 0, 1103, 0, 0, 0,
	0, 0, 0, 1118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1110, 0,
	0, 1109, 0, 0, 1103, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1104, 0, 0, 0, 0, 0, 0, 0, 1109,
	0, 0, 0, 0, 0, 0, 0, 1113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1104,
	1085, 1086, 0, 1105, 1106, 1107, 1115, 1116, 1117, 0,
	0, 0, 0, 0, 0, 1113, 1108, 0, 0, 0,
	0, 0, 0, 1088, 0, 0, 1119, 1104, 1085, 1086,
	0, 1105, 1106, 1107, 1115, 1116, 1117, 0, 0, 0,
	0, 0, 0, 1113, 1108, 0, 0, 1087, 0, 0,
	0, 1088, 0, 1102, 1119, 1111, 0, 0, 1099, 1100,
	1101, 1114, 0, 1098, 1096, 1097, 1089, 1090, 1091, 1092,
	1094, 1095, 0, 0, 0, 1087, 2355, 0, 0, 0,
	0, 1102, 0, 1111, 0, 0, 1099, 1100, 1101, 1114,
	0, 1098, 1096, 1097, 1089, 1090, 1091, 1092, 1094, 1095,
	0, 0, 0, 0, 2301, 0, 0, 0, 1093, 0,
	0, 1111, 0, 0, 1099, 1100, 1101, 1114, 0, 1098,
	1096, 1097, 1089, 1090, 1091, 1092, 1094, 1095, 1112, 1120,
	0, 0, 2296, 0, 0, 0, 1093, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1112, 1120, 0, 0,
	0, 1110, 0, 0, 0, 0, 0, 1103, 0, 0,
	0, 0, 0, 0, 1118, 0, 0, 0, 0, 0,
	1085, 1086, 0, 1105, 1106, 1107, 1115, 1116, 1117, 1110,
	0, 0, 1109, 0, 0, 1103, 1108, 0, 0, 0,
	0, 0, 0, 1088, 0, 0, 1119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1109, 0, 0, 0, 0, 0, 0, 1087, 0, 0,
	0, 0, 0, 1102, 0, 0, 0, 0, 0, 0,
	1104, 0, 0, 0, 0, 0, 1085, 1086, 0, 1105,
	1106, 1107, 1115, 1116, 1117, 0, 1113, 0, 0, 0,
	0, 0, 1108, 0, 0, 0, 0, 0, 1104, 1088,
	0, 0, 1119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1113, 0, 0, 0, 1093, 0,
	0, 0, 0, 1087, 0, 0, 0, 1085, 1086, 1102,
	1105, 1106, 1107, 1115, 1116, 1117, 0, 0, 1112, 1120,
	0, 0, 0, 1108, 0, 0, 0, 0, 0, 0,
	1088, 0, 0, 1119, 1111, 0, 1118, 1099, 1100, 1101,
	1114, 0, 1098, 1096, 1097, 1089, 1090, 1091, 1092, 1094,
	1095, 1110, 0, 0, 1087, 2292, 0, 1103, 0, 0,
	1102, 0, 1111, 0, 1093, 1099, 1100, 1101, 1114, 0,
	1098, 1096, 1097, 1089, 1090, 1091, 1092, 1094, 1095, 0,
	0, 0, 1109, 2272, 1112, 1120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1093, 0, 1110, 0, 0,
	0, 0, 0, 1103, 0, 0, 0, 0, 0, 0,
	1104, 0, 0, 0, 0, 1112, 1120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1113, 0, 1109, 0,
	0, 0, 0, 1118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1110, 0,
	0, 0, 0, 0, 1103, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 1109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 0, 1111, 0, 0, 1099, 1100, 1101,
	1114, 0, 1098, 1096, 1097, 1089, 1090, 1091, 1092, 1094,
	1095, 0, 0, 0, 0, 2215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1104, 0, 0,
	1085, 1086, 0, 1105, 1106, 1107, 1115, 1116, 1117, 0,
	0, 0, 0, 1113, 0, 0, 1108, 0, 0, 0,
	0, 0, 0, 1088, 0, 0, 1119, 0, 0, 0,
	1111, 0, 0, 1099, 1100, 1101, 1114, 0, 1098, 1096,
	1097, 1089, 1090, 1091, 1092, 1094, 1095, 1087, 0, 0,
	0, 2214, 0, 1102, 1085, 1086, 0, 1105, 1106, 1107,
	1115, 1116, 1117, 0, 0, 0, 0, 0, 0, 0,
	1108, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	1119, 1111, 0, 0, 1099, 1100, 1101, 1114, 0, 1098,
	1096, 1097, 1089, 1090, 1091, 1092, 1094, 1095, 0, 0,
	0, 1087, 2154, 0, 0, 0, 0, 1102, 1093, 0,
	0, 0, 0, 0, 0, 0, 1085, 1086, 0, 1105,
	1106, 1107, 1115, 1116, 1117, 0, 0, 0, 1112, 1120,
	0, 0, 1108, 0, 0, 0, 0, 0, 0, 1088,
	0, 0, 1119, 0, 0, 0, 1118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1110, 1093, 1087, 0, 0, 0, 1103, 0, 1102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1112, 1120, 0, 0, 0, 0, 0, 0,
	0, 0, 1109, 0, 0, 0, 0, 0, 0, 0,
	1118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1110, 0, 0, 0, 0,
	0, 1103, 0, 0, 1093, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1104, 0, 0, 0, 1112, 1120, 1109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1113, 0, 0, 0,
	0, 0, 1118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1110, 0, 0,
	0, 0, 0, 1103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1104, 0, 1085, 1086, 0, 1105,
	1106, 1107, 1115, 1116, 1117, 0, 0, 0, 1109, 0,
	1113, 0, 1108, 0, 0, 0, 0, 0, 0, 1088,
	0, 0, 1119, 0, 1111, 0, 0, 1099, 1100, 1101,
	1114, 0, 1098, 1096, 1097, 1089, 1090, 1091, 1092, 1094,
	1095, 0, 0, 1087, 0, 2119, 0, 0, 0, 1102,
	0, 0, 0, 0, 1085, 1086, 1104, 1105, 1106, 1107,
	1115, 1116, 1117, 0, 0, 0, 0, 0, 0, 0,
	1108, 0, 1113, 0, 0, 0, 0, 1088, 1111, 0,
	1119, 1099, 1100, 1101, 1114, 0, 1098, 1096, 1097, 1089,
	1090, 1091, 1092, 1094, 1095, 0, 0, 0, 0, 2032,
	0, 1087, 0, 0, 1093, 0, 0, 1102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1112, 1120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1111, 0, 1118, 1099, 1100, 1101, 1114, 0, 1098, 1096,
	1097, 1089, 1090, 1091, 1092, 1094, 1095, 1110, 0, 0,
	0, 2008, 1093, 1103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1112, 1120, 0, 0, 0, 0, 1109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1118, 0, 0, 0, 0, 38, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1110, 39, 120, 0, 0,
	0, 1103, 0, 0, 0, 0, 0, 0, 0, 42,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 0,
	0, 0, 0, 122, 0, 0, 1109, 0, 0, 43,
	0, 48, 1113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 0, 53, 0, 0, 0,
	59, 0, 0, 123, 0, 0, 0, 60, 0, 61,
	0, 0, 0, 0, 1104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 0,
	1113, 0, 0, 63, 0, 0, 64, 0, 0, 0,
	1111, 0, 0, 1099, 1100, 1101, 1114, 0, 1098, 1096,
	1097, 1089, 1090, 1091, 1092, 1094, 1095, 0, 0, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 1086, 0, 1105, 1106, 1107, 1115, 1116, 1117,
	0, 0, 0, 0, 0, 0, 0, 1108, 0, 0,
	0, 0, 0, 0, 1088, 0, 0, 1119, 1111, 0,
	0, 1099, 1100, 1101, 1114, 0, 1098, 1096, 1097, 1089,
	1090, 1091, 1092, 1094, 1095, 0, 65, 1780, 1087, 0,
	0, 0, 66, 0, 1102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 74, 67, 0, 68, 0, 69, 0, 124, 0,
	0, 0, 0, 70, 0, 0, 0, 131, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 0, 1093,
	2448, 0, 0, 0, 0, 0, 133, 1085, 1086, 0,
	1105, 1106, 1107, 1115, 1116, 1117, 0, 0, 0, 1112,
	1120, 0, 0, 1108, 0, 103, 0, 0, 0, 0,
	1088, 0, 0, 1119, 119, 0, 0, 1118, 0, 0,
	0, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 1110, 0, 1087, 0, 0, 126, 1103, 0,
	1102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 1109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2447,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1093, 0, 1850, 0, 0,
	1849, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1104, 0, 0, 0, 1112, 1120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 0, 0,
	0, 0, 0, 1118, 0, 0, 1085, 1086, 0, 1105,
	1106, 1107, 1115, 1116, 1117, 0, 0, 0, 1110, 0,
	0, 0, 1108, 0, 1103, 0, 0, 1684, 0, 1088,
	0, 0, 1119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1109,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 1102,
	0, 0, 0, 0, 0, 1111, 0, 0, 1099, 1100,
	1101, 1114, 0, 1098, 1096, 1097, 1089, 1090, 1091, 1092,
	1094, 1095, 0, 0, 0, 0, 0, 0, 0, 1685,
	0, 0, 0, 0, 0, 0, 0, 1104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1113, 1093, 1369, 0, 0, 0, 0,
	0, 1085, 1086, 0, 1105, 1106, 1107, 1115, 1116, 1117,
	0, 0, 0, 0, 1112, 1120, 0, 1108, 0, 0,
	0, 1368, 0, 0, 1088, 0, 0, 1119, 0, 0,
	0, 0, 1118, 0, 0, 0, 1085, 1086, 0, 1105,
	1106, 1107, 1115, 1116, 1117, 0, 0, 1110, 1087, 0,
	0, 0, 1108, 1103, 1102, 0, 0, 0, 0, 1088,
	0, 1111, 1119, 0, 1099, 1100, 1101, 1114, 0, 1098,
	1096, 1097, 1089, 1090, 1091, 1092, 1094, 1095, 1109, 0,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 1102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1093,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 1112,
	1120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 0, 1093, 0, 0, 1118, 0, 0,
	0, 1085, 1086, 0, 1105, 1106, 1107, 1115, 1116, 1117,
	0, 0, 1110, 0, 1112, 1120, 0, 1108, 1103, 0,
	0, 0, 0, 0, 1088, 0, 0, 1119, 0, 0,
	0, 0, 1118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1109, 0, 0, 0, 1110, 1087, 0,
	0, 0, 0, 1103, 1102, 0, 0, 0, 0, 0,
	1111, 0, 0, 1099, 1100, 1101, 1114, 0, 1098, 1096,
	1097, 1089, 1090, 1091, 1092, 1094, 1095, 0, 1109, 666,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 0, 1093,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 1112,
	1120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 0, 0, 0, 0, 1118, 0, 0,
	1085, 1086, 0, 1105, 1106, 1107, 1115, 1116, 1117, 0,
	0, 0, 1110, 0, 0, 0, 1108, 0, 1103, 0,
	0, 0, 0, 1088, 0, 1111, 1119, 0, 1099, 1100,
	1101, 1114, 0, 1098, 1096, 1097, 1089, 1090, 1091, 1092,
	1094, 1095, 0, 1109, 0, 0, 0, 1087, 0, 0,
	0, 0, 0, 1102, 0, 0, 0, 0, 0, 0,
	1111, 0, 0, 1099, 1100, 1101, 1114, 0, 1098, 1096,
	1097, 1089, 1090, 1091, 1092, 1094, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 1093, 0,
	0, 0, 0, 1856, 0, 1085, 1086, 0, 1105, 1106,
	1107, 1115, 1116, 1117, 0, 0, 0, 0, 1112, 1120,
	0, 1108, 0, 2012, 0, 1851, 0, 0, 1088, 0,
	0, 1119, 0, 0, 0, 0, 1118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1110, 1087, 0, 0, 0, 0, 1103, 1102, 0,
	0, 0, 0, 0, 0, 1111, 0, 0, 1099, 1100,
	1101, 1114, 0, 1098, 1096, 1097, 1089, 1090, 1091, 1092,
	1094, 1095, 1109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1093, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1104, 0, 0, 1112, 1120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1113, 0, 0, 0,
	0, 1118, 0, 0, 1085, 1086, 0, 1105, 1106, 1107,
	1115, 1116, 1117, 0, 0, 0, 1110, 0, 0, 0,
	1108, 0, 1103, 0, 0, 0, 0, 1088, 0, 0,
	1119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1109, 0, 0,
	0, 1087, 0, 0, 0, 0, 0, 1102, 0, 0,
	0, 0, 0, 0, 1111, 0, 0, 1099, 1100, 1101,
	1114, 0, 1098, 1096, 1097, 1089, 1090, 1091, 1092, 1094,
	1095, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1113, 1093, 0, 0, 0, 0, 0, 0, 1085,
	1086, 0, 1105, 1106, 1107, 1115, 1116, 1117, 0, 0,
	0, 0, 1112, 1120, 0, 1108, 0, 0, 0, 1809,
	0, 0, 1088, 0, 0, 1119, 0, 0, 0, 0,
	1118, 0, 0, 0, 1085, 1086, 0, 1105, 1106, 1107,
	1115, 1116, 1117, 0, 0, 1110, 1087, 0, 0, 0,
	1108, 1103, 1102, 0, 0, 0, 0, 1088, 0, 1111,
	1119, 0, 1099, 1100, 1101, 1114, 0, 1098, 1096, 1097,
	1089, 1090, 1091, 1092, 1094, 1095, 1109, 0, 0, 0,
	0, 1087, 0, 0, 0, 0, 0, 1102, 0, 1816,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1093, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1104, 0, 0, 1112, 1120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1113, 0, 1093, 0, 0, 1118, 0, 0, 0, 1085,
	1086, 0, 1105, 1106, 1107, 1115, 1116, 1117, 0, 0,
	1110, 0, 1112, 1120, 0, 1108, 1103, 0, 0, 0,
	0, 0, 1088, 0, 0, 1119, 0, 0, 0, 0,
	1118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1109, 0, 0, 0, 1110, 1087, 0, 0, 0,
	0, 1103, 1102, 0, 0, 0, 0, 0, 1111, 0,
	0, 1099, 1100, 1101, 1114, 0, 1098, 1096, 1097, 1089,
	1090, 1091, 1092, 1094, 1095, 0, 1109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1113, 0, 1093, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1104, 0, 0, 1112, 1120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1113, 0, 0, 0, 0, 1118, 1085, 1086, 0, 1105,
	1106, 1107, 1115, 1116, 1117, 0, 0, 0, 0, 0,
	1110, 0, 0, 0, 0, 0, 1103, 0, 0, 1088,
	0, 0, 1119, 1111, 0, 0, 1099, 1100, 1101, 1114,
	0, 1098, 1096, 1097, 1089, 1090, 1091, 1092, 1094, 1095,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 1102,
	0, 0, 0, 0, 0, 0, 0, 0, 1111, 0,
	0, 1099, 1100, 1101, 1114, 0, 1098, 1096, 1097, 1089,
	1090, 1091, 1092, 1094, 1095, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1093, 1113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1112, 1120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1258, 1248, 1277,
	1240, 1268, 1267, 0, 0, 1242, 1241, 1110, 0, 0,
	0, 1279, 1278, 1103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1111, 0, 0, 1099, 1100, 1101, 1114,
	0, 1098, 1096, 1097, 1089, 1090, 1091, 1092, 1094, 1095,
	0, 0, 0, 0, 0, 1273, 0, 1265, 1264, 0,
	0, 0, 0, 0, 0, 0, 0, 1263, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1262, 1260, 1261, 0, 0,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 1258,
	1248, 1277, 1240, 1268, 1267, 0, 0, 1242, 1241, 0,
	0, 0, 1113, 1279, 1278, 0, 1251, 1250, 1252, 1253,
	1254, 1255, 1256, 0, 1276, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1273, 0, 1265,
	1264, 0, 1244, 0, 0, 0, 0, 0, 0, 1263,
	0, 0, 0, 0, 1266, 0, 0, 0, 1249, 0,
	0, 0, 0, 0, 0, 0, 0, 1262, 1260, 1261,
	1111, 0, 0, 1099, 1100, 1101, 1114, 0, 1098, 1096,
	1097, 1089, 1090, 1091, 1092, 1094, 1095, 1259, 0, 0,
	0, 1440, 1438, 1439, 1442, 1441, 0, 0, 1251, 1250,
	1252, 1253, 1254, 1255, 1256, 0, 1276, 0, 0, 0,
	626, 0, 586, 0, 0, 0, 0, 1245, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1257, 1246,
	631, 0, 0, 0, 1244, 0, 0, 0, 1281, 0,
	0, 0, 629, 0, 0, 0, 1266, 0, 0, 0,
	1249, 1243, 0, 0, 1274, 1275, 0, 0, 0, 0,
	0, 0, 0, 630, 0, 0, 0, 0, 632, 0,
	0, 0, 0, 638, 639, 0, 1247, 648, 0, 1259,
	0, 1280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 588, 633, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1245,
	0, 0, 0, 0, 651, 0, 0, 0, 0, 0,
	1257, 1246, 0, 0, 0, 0, 0, 0, 0, 0,
	1281, 0, 0, 0, 634, 0, 0, 0, 0, 0,
	0, 0, 0, 1243, 0, 0, 1274, 1275, 0, 635,
	636, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 642, 1247, 0,
	637, 644, 0, 1280, 0, 0, 0, 0, 0, 0,
	0, 641, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 589, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 640, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 628, 645, 590,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 646, 0, 0, 0, 650, 0, 0,
	0, 591, 0, 0, 0, 0, 643, 647, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 649,
}
var sqlPact = [...]int{

	39302, -1000, 3, -1000, -1000, 174, -1000, -1000, -1000, 173,
	172, 169, -1000, 166, 165, 164, -1000, 163, 160, 155,
	154, 149, 146, 145, 143, -1000, 141, 139, -1000, -1000,
	-1000, 137, 136, 134, 130, 128, 123, 121, 1043, 23295,
	113, 112, 1330, 35451, 111, 104, 102, 100, 1080, 96,
	95, 26805, 925, 1497, 94, 93, 92, 91, 87, 1174,
	35133, 2473, 1599, 5709, 1126, 1613, 34812, 22974, 1593, 1181,
	34491, -1000, -1000, 34170, 1840, 86, 85, 84, -1000, -1000,
	33849, 83, 82, 80, 79, 78, 69, 63, 62, 61,
	58, 57, 56, 55, 54, -1000, 51, 49, 44, 41188,
	41, 37, 35, 1107, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 125, -1000, 952, 486, 18438,
	1012, 1009, 1006, 977, 985, 37359, 35451, 26, -23, 22,
	-1000, 1905, 659, 20380, 39302, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	26484, 26163, 33528, 33207, 780, -1000, 0, 24567, 35451, -1000,
	181, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	14429, 14072, 513, 181, -1000, -1000, -1000, -1000, -1000, 32886,
	-1000, 32565, 32244, 1482, 31923, -1000, -1000, -1000, -1000, 31602,
	-1000, -1000, 1848, 1649, 1648, 25842, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 31284, 30963,
	30642, 30321, 30000, 527, -1000, -1000, -1000, 17114, -1000, -1000,
	-1000, -1000, 21, -1000, -1000, -1000, -1000, 19, 18, 16,
	14, 1235, -1000, -1000, 1, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 35451, -1000, 15458, -1000, 525,
	-1000, 1682, -1000, 15458, -1000, 1205, -1000, -1000, -1000, -1000,
	-1000, 35451, -1000, -1000, 1750, -1000, -1000, -1000, -1000, -1000,
	-1000, 914, -1000, -1000, -1000, 2082, 1198, 523, 29679, -1000,
	1601, -1000, 591, 762, -1000, -1000, -1000, 18106, 194, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2301, 22653,
	1272, 1892, 1839, 2081, 1431, 1814, 1782, 1765, 1732, 1688,
	2080, 929, 2077, 1811, 1038, 2076, 1671, 1241, 673, 2074,
	1674, 1666, -1000, -1000, -1000, 28077, -1000, -1000, 952, -1000,
	-1000, -1000, 1444, 1893, 1893, 1893, 1907, 322, 303, -1000,
	125, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2029, -1000, -1000, -1000, -1000, 2062, -1000, -1000, -1000,
	-1000, 1325, -1000, -1000, 1325, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 776, 36723, -3, 35451, -1000, 521, -3, -1000,
	-1000, 520, -1000, 10530, 10530, -1000, -1000, -1000, -1000, -1000,
	8815, 1982, -1000, 1504, -202, 345, 580, -1000, 19411, 21991,
	-1000, -1000, 1081, 1795, 669, -1000, 1013, 1793, 547, -1000,
	1003, -1000, 954, 1790, -172, 23613, 24567, 0, -20, -1000,
	-1000, -1000, 5379, 40554, -1000, -1000, 15458, 15458, 15458, 15458,
	15458, 1111, 551, -1000, 519, 517, 7085, -1000, -1000, 2054,
	-1000, -1000, -1000, 335, -1000, -1000, 15458, 181, -1000, -1000,
	-1000, -1000, 515, 2070, -1000, 628, -1000, -1000, -1000, 597,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1717,
	514, 512, 511, -1000, -1000, -1000, -1000, 509, 508, 507,
	506, 502, 501, 500, 499, 498, 497, 496, 495, 491,
	490, 489, 1050, -1000, 625, -1000, -1000, 625, 625, -1000,
	479, 479, 480, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 479, -1000, -1000, -1000, 583, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 488, 40554, -1000, 868, 21024, 181, -1000,
	-1000, -1000, -1000, 487, 1301, 601, -1000, 23, -1000, 29358,
	601, 1300, -1000, -1000, -1000, 28077, -1000, 35451, -1000, 35451,
	-1000, 908, -1000, 37041, 124, 1789, -1000, -1000, 124, 1787,
	-1000, 117, 1786, -1000, -1000, -1000, 1783, -1000, -20, 1778,
	-1000, -1000, 15458, -26, -1000, -1000, -1000, 659, -1000, -1000,
	-1000, -1000, -1000, 23931, 1417, 545, 40554, 1986, 41032, 23613,
	40554, 23931, -1000, -1000, -1000, -1000, -1000, 35451, -1000, 15458,
	-1000, 1983, 1412, -15, -1000, -1000, -1000, -1000, -1000, 1336,
	1352, 765, 1348, 17776, 17446, 1849, -1000, -1000, -1000, 184,
	5709, -1000, -1000, -1000, -1000, -1000, -1000, 29037, -1000, -1000,
	-1000, 1147, 35451, -1000, -1000, 1715, -1000, 23931, 35451, -1000,
	35451, -1000, 35451, -1000, 35451, -1000, 35451, -1000, -1000, -1000,
	-1000, -1000, 259, -1000, 1699, -1000, -1000, 35451, -1000, 1333,
	-1000, -1000, -1000, 28719, 28398, -1000, 986, 813, 127, -1000,
	-1000, 1444, -1000, 1176, 1448, 13715, 1470, 15458, 125, -1000,
	-1000, 125, 125, 8115, -1000, -1000, -1000, -1000, -1000, -1000,
	-15, -1000, 36723, -1000, 35451, -3, 1975, 35451, -1000, 142,
	-1000, 39841, -1000, 142, -33, -1000, 40554, -1000, 1427, 1425,
	20702, 1502, 1125, 1125, 1125, -1000, 485, 539, 580, 4704,
	13372, -1000, 27123, 1137, 212, 308, 19089, 1982, -1000, 35451,
	-28, 984, -1000, 25521, 1879, 1865, 1871, 28077, 1939, 281,
	1652, 773, 28077, 760, 1922, 281, 1651, 758, 35451, 5709,
	576, -1000, 35451, -1000, -1000, 40940, 41032, 5709, 801, 15458,
	15458, 15458, 15458, 15458, 15458, 15458, 15458, 15458, 15458, 15458,
	15458, 15458, 15458, 15458, 15458, 15458, 15458, 15458, 15458, 15458,
	15458, 1387, 15458, 752, 15458, 15458, 15458, 15458, 1423, 1140,
	459, 1282, -1000, 2023, 2023, 2023, 4279, 4279, 412, 551,
	-1000, 15458, -1000, 281, 13015, 303, 39106, -14, 6742, -1000,
	-1000, -1000, 8458, 623, 40554, 181, 6041, -1000, 2053, 1133,
	1730, 1536, 484, 543, 542, 482, 15458, 15458, 12672, 12315,
	11958, 15801, 11601, 15458, 7428, 15458, 15458, 15458, 15458, 11244,
	10887, -1000, 481, -1000, -1000, -1000, -1000, 2051, -1000, -1000,
	2050, -1000, 800, 796, 2044, -1000, 1642, -34, -1000, -1000,
	25203, 1971, 1776, -1000, 1058, -1000, 1969, 35451, 1196, 1296,
	-1000, -1000, 808, 1771, 614, 249, 1965, 249, 21347, -1000,
	35451, -1000, 35451, -1000, -1000, 35451, -1000, 35451, -1000, 35451,
	35451, 35451, 35451, -39, 40554, 3139, 24885, 750, -1000, 651,
	25203, 20, -47, -1000, 739, -1000, -1000, -1000, -1000, 413,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 480, 1050, 479, 479, 479, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 583, -1000, -1000, 625, 625, 625,
	-1000, -1000, -86, -1000, 1634, -1000, 613, -49, 679, -15,
	-1000, 1325, 1238, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2069, -16, -1000, -1000,
	-16, -1000, -1000, 5709, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 35451, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	162, -1000, -1000, -1000, -1000, -1000, -1000, 35451, 35451, 35451,
	-1000, 28077, -1000, -1000, -1000, -1000, 40554, -1000, 388, -1000,
	-1000, 40554, 1014, 1447, -1000, 1447, -17, -1000, 39726, 1407,
	35451, -1000, -1000, 474, -50, 614, 10530, 20057, 5709, -1000,
	614, 8815, -1000, 20702, 20702, 1519, 1422, 20702, -1000, -1000,
	-1000, -1000, 27123, 532, 580, 27123, -1000, 2043, 1372, -56,
	-1000, -1000, -1000, 35451, 470, -1000, 580, 302, 949, 35451,
	35451, 35451, -1000, -1000, 1290, 36405, 1280, 41032, 35451, -1000,
	469, 466, 1385, 1377, 35451, 35451, 36087, 35769, 35451, 989,
	281, -1000, 464, 35451, 992, 35451, 281, -1000, 461, 35451,
	981, -1000, 1505, 1202, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 590, 1244, 1244, 815, 815,
	815, 815, 1996, 278, 770, 2686, 2756, 2756, 2756, 655,
	462, 462, 2756, 2756, 2756, 4279, 40669, 414, 15458, 15458,
	743, 1130, 459, 414, 15458, 414, 414, 414, 414, -1000,
	1350, -1000, -1000, -1000, -1000, 1620, 439, 15801, 15801, -1000,
	-1000, -1000, 7085, 16131, -1000, -1000, -1000, -1000, 438, 15458,
	-1000, 39164, -206, -57, -1000, -1000, 15458, -58, -59, -1000,
	-1000, 844, -1000, 15458, -1000, -22, 15458, 15458, 15458, 300,
	-1000, 290, -1000, 742, -1000, 726, 723, 722, -1000, 434,
	1118, 428, 425, 15458, -1000, -1000, -1000, -1000, -1000, -1000,
	40519, 4346, 285, -1000, 1617, -164, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 284, -1000, 283, -1000, 40404, -164, 279,
	3735, -1000, 15801, 15801, 15801, 7085, 424, 277, -1000, 39577,
	-164, 40255, 10187, 10187, 10187, 276, 40140, 15458, -164, 4166,
	4099, 3919, -63, -68, -1000, -69, -1000, 2042, -76, 265,
	586, 584, 264, 857, 1615, 35451, 263, -81, -18, 41032,
	-1000, -1000, -1000, -1000, -1000, 35451, 476, 35451, 281, 35451,
	2068, 281, 35451, 1763, 1802, 556, 35451, 971, 15458, 1008,
	-1000, 19734, 633, 35451, 971, 64, -1000, -1000, -1000, 572,
	35451, -1000, -1000, 124, 124, -1000, 117, -1000, -20, -1000,
	15458, -1000, -1000, 35451, 23613, -96, -1000, -1000, 41032, -1000,
	550, 777, -1000, 2040, 599, 23613, 35451, -1000, 1440, -1000,
	-1000, 924, -1000, 1039, -1000, 18768, -1000, -46, -1000, -1000,
	-1000, -1000, -1000, 576, -1000, 1014, -1000, 15458, 2039, -1000,
	-1000, -1000, 8115, -1000, -1000, -1000, 35451, -201, 20, -1000,
	1520, -1000, -91, -1000, 1982, -1000, 1520, -1000, -1000, 1519,
	-1000, 423, 15458, 20702, -1000, 538, -1000, -97, -1000, 27123,
	-1000, 537, -192, -1000, 571, -1000, 580, 422, 35451, 27123,
	-1000, -1000, -1000, 719, 713, 1762, -1000, 1267, -1000, 643,
	-1000, 930, 15458, 16791, 420, 418, 1098, -1000, 1753, 1251,
	1749, 1251, -1000, -28, 962, -1000, 15458, -1000, 710, -1000,
	-1000, 15458, -1000, 697, 599, 1594, 824, 15458, 414, 414,
	15458, 15801, 15801, -1000, 414, -1000, -1000, -1000, -1000, -1000,
	1585, 415, 15458, 41032, 3717, 3298, -102, -1000, 9844, -35,
	-1000, 15458, -1000, 38926, -1000, -1000, 338, 1799, -1000, 15458,
	39991, 260, 9501, -1000, 39876, -32, -32, -1000, 2065, 1314,
	1167, 1018, 921, 2037, -1000, 21669, 616, 1156, 38864, 40940,
	41032, -1000, 15458, -1000, -1000, 1576, 15458, -1000, 40940, 41032,
	15801, 15801, 15801, 15801, 15801, 15801, 15801, 15801, 15801, 15801,
	15801, 15801, 15801, 15801, 15801, 15801, 15801, 15801, 15801, 1410,
	15801, 2014, 2014, 2014, -36, 9158, -1000, 1698, 1576, 15458,
	15458, 41032, 257, 256, 255, -1000, 15458, -164, 15458, 15458,
	15458, -1000, -1000, -1000, 252, -1000, 2035, -1000, -1000, -1000,
	-1000, -1000, 835, -1000, 1488, -1000, 25203, 401, 35451, 398,
	-1000, 397, -1000, -1000, 394, 35451, 1344, 556, 24249, -1000,
	601, -1000, 7771, 40554, -1000, 971, 1881, -103, -1000, -1000,
	-1000, 614, 21347, 20702, 8815, -104, -1000, -1000, -1000, 40554,
	-46, 1850, 1850, -1000, 2034, -1000, 536, 251, -1000, 27759,
	-1000, -46, -1000, -1000, -1000, -1000, -1000, 35451, -1000, 1165,
	38810, -1000, 1885, 5709, 250, 1507, 1906, -1000, 20702, 1507,
	-1000, 35451, 40554, -1000, -202, -1000, 2024, -1000, -1000, 1372,
	-1000, 5046, 27123, 35451, -111, -1000, 35451, 35451, 35451, 1747,
	-1000, 2518, -1000, 38567, -112, -1000, 306, 1889, 15458, -1000,
	-1000, 390, 16791, 35451, -1000, 1394, 1547, 672, 35451, -1000,
	35451, -1000, 35451, 35451, 35451, -113, 35451, -118, 35451, -1000,
	23613, 785, 1998, 414, 304, 214, 15458, 41032, 40816, -120,
	15458, 15458, -1000, -121, -1000, 15458, 533, 40554, -1000, -1000,
	-1000, 40554, 15458, 2016, 15458, 245, 243, 242, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 235, -1000, -1000, 37677,
	15458, 234, -1000, 233, 230, 40554, 1698, 40554, -1000, -1000,
	775, 775, 890, 890, 890, 890, 2014, 2437, 1718, 1231,
	944, 944, 944, 687, 585, 585, 944, 944, 944, 1557,
	1285, 386, 4130, 15458, -123, -1000, -1000, -1000, 40554, 40554,
	228, -1000, -1000, -1000, -164, 336, 38516, 38450, -1000, 223,
	-1000, -1000, 1493, -1000, 16791, 384, 35451, 25203, 1956, 16791,
	1193, 1358, 556, 24249, -1000, 808, -62, -1000, -1000, 382,
	281, 971, -1000, -75, -1000, 569, 1837, -1000, 1835, 530,
	-1000, -1000, -78, 383, -1000, 568, 565, -1000, -1000, -1000,
	-1000, 1885, -1000, 609, 15458, 15458, 1982, 609, -129, 580,
	-1000, -1000, -1000, 2019, -1000, -136, -1000, -1000, -1000, -1000,
	35451, -1000, 35451, -1000, 5709, 35451, 1522, 1257, -1000, -1000,
	1356, 381, 15801, 35451, -1000, 1090, 16791, 1885, 181, 5709,
	1885, 38298, 6041, -137, -138, 1252, -1000, 1248, 15458, -1000,
	41032, 1251, 1251, -1000, 696, 695, 694, -1000, 693, -1000,
	-83, 22321, 15458, 15458, 40816, -139, -1000, 414, 414, -1000,
	38270, -1000, 40554, -1000, 39876, -1000, -1000, -1000, -1000, 1066,
	-1000, 38057, -1000, -1000, -1000, -1000, 15801, 1524, 378, 41032,
	38029, -1000, -1000, 15458, -1000, -1000, -1000, 1072, -144, 16791,
	-145, 221, 281, -150, 35451, -1000, 556, 24249, -1000, 1802,
	1816, 35451, 1870, -1000, -1000, 377, 374, 373, -1000, 27441,
	27441, 23613, 23613, -1000, -1000, 35451, 40554, -164, -1000, -1000,
	27123, 483, -1000, -1000, 1331, -1000, -1000, 35451, 1264, -1000,
	-1000, 15458, 4130, 369, 1488, 368, -1000, -1000, -1000, -1000,
	-1000, -1000, 1889, -22, -1000, 1023, -1000, -1000, 40554, 1886,
	-1000, -1000, 35451, 35451, 353, 347, -1000, 346, 181, 414,
	414, -1000, -1000, 220, 1156, 1904, -1000, 452, 15801, 41032,
	-151, -1000, 38001, 35451, 1090, -152, -1000, 1488, -1000, 1090,
	342, 24249, -1000, 1344, 793, -157, 35451, -1000, -1000, 6385,
	23613, 23613, -1000, -158, -1000, -1000, -93, -1000, 1945, -1000,
	-1000, -1000, -1000, 1745, 371, 1323, 35451, -1000, 35451, 1885,
	219, 35451, 647, 5709, -1000, -1000, 15458, 15458, 15458, -1000,
	999, 15458, 452, -159, -1000, -1000, 339, 1488, 1090, -1000,
	1488, 16791, -1000, 1358, 904, -1000, 614, -1000, -165, -166,
	-1000, 35451, 337, 1734, -1000, 1168, 1109, 217, -173, -1000,
	-1000, 23, -1000, 15458, -1000, -176, -179, -32, 216, 15115,
	15115, -164, -1000, 35451, -1000, 1488, -1000, -181, -1000, 21347,
	-1000, 599, 599, -1000, -1000, 35451, -1000, 1185, 1183, 882,
	-1000, -1000, -1000, -1000, -1000, 1323, 40554, -1000, -1000, 213,
	-1000, -1000, -1000, 16461, 1145, 951, 39461, -1000, -182, -1000,
	1090, -160, -1000, -1000, -1000, -1000, 1822, -1000, 657, 1357,
	1357, 1168, 2016, 1991, -1000, -1000, -1000, -1000, -1000, 1208,
	1488, -1000, -1000, 2000, -1000, -1000, 1366, -1000, -1000, 14772,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2468, 2467, 1667, 1847, 2466, 2465, 2464, 2463, 2462,
	2460, 2459, 2458, 2457, 2455, 2454, 2452, 2451, 2450, 2449,
	2444, 2442, 2441, 2439, 2436, 2435, 2428, 1821, 2426, 2424,
	2423, 2422, 2419, 2415, 1791, 2414, 1778, 2413, 2409, 2407,
	2405, 2403, 1749, 1730, 2399, 84, 107, 1721, 2397, 2395,
	1711, 2393, 2391, 2387, 2386, 2385, 2382, 2381, 77, 2379,
	2377, 2376, 2375, 2371, 2369, 2366, 138, 155, 2364, 1695,
	2361, 2353, 2349, 2346, 2341, 2338, 2336, 2335, 2334, 2333,
	2330, 2329, 2328, 2327, 2326, 2320, 2313, 2309, 154, 2307,
	2306, 1682, 1660, 2302, 2301, 25, 32, 8, 51, 20,
	148, 2486, 133, 2299, 2298, 2297, 2296, 2294, 2293, 34,
	101, 94, 2292, 72, 2290, 2288, 54, 26, 17, 16,
	2286, 87, 2285, 2282, 1134, 19, 2281, 2280, 125, 2275,
	42, 22, 1310, 149, 144, 108, 113, 2263, 2261, 2257,
	2254, 50, 112, 2, 2252, 2248, 14, 66, 13, 2247,
	30, 23, 2239, 2237, 130, 2236, 65, 92, 1571, 105,
	119, 307, 2235, 56, 12, 60, 2233, 2231, 147, 47,
	2230, 38, 80, 136, 2229, 45, 151, 123, 82, 129,
	115, 2226, 2223, 2222, 102, 2221, 111, 69, 2219, 2218,
	75, 2215, 132, 135, 2214, 2212, 90, 2211, 121, 2209,
	2205, 152, 142, 104, 9, 35, 63, 6, 1530, 1507,
	122, 70, 31, 48, 2204, 2038, 1150, 1129, 28, 96,
	62, 58, 97, 53, 89, 143, 24, 2201, 2200, 116,
	2197, 2193, 2189, 2185, 2184, 95, 2183, 2182, 55, 141,
	76, 27, 43, 85, 39, 57, 128, 109, 150, 106,
	2181, 88, 118, 2180, 49, 2179, 2177, 1799, 114, 2174,
	2172, 2171, 1786, 1770, 1512, 261, 2170, 2169, 1229, 669,
	2167, 2165, 73, 2163, 110, 103, 2158, 140, 137, 93,
	2155, 117, 36, 86, 2152, 29, 37, 0, 1681, 604,
	2140, 124, 83, 2139, 2135, 2125, 2124, 21, 3, 10,
	4, 7, 5, 59, 46, 2123, 2121, 131, 98, 79,
	2118, 153, 2117, 2116, 2114, 33, 2112, 18, 2108, 15,
	2104, 2100, 11, 1, 2098, 2096, 145, 2093, 91, 2091,
	1932, 2090, 146, 2089, 2085, 1705, 41, 100,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 5, 5, 5, 5, 5, 5,
	7, 7, 8, 8, 6, 6, 6, 6, 6, 9,
	9, 10, 16, 13, 18, 12, 12, 15, 15, 111,
	111, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 108, 108, 113, 113,
	113, 115, 115, 112, 112, 107, 107, 20, 20, 56,
	56, 98, 51, 51, 51, 285, 285, 286, 286, 94,
	94, 95, 95, 95, 95, 96, 96, 97, 97, 97,
	26, 26, 26, 22, 22, 22, 22, 22, 23, 23,
	24, 24, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 34, 34, 35, 35,
	35, 35, 35, 35, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 41, 41, 41, 39, 39,
	39, 38, 38, 38, 37, 37, 37, 40, 40, 40,
	160, 160, 159, 159, 162, 162, 42, 42, 42, 42,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	46, 46, 46, 46, 46, 46, 46, 46, 253, 253,
	252, 44, 44, 227, 227, 47, 47, 185, 185, 48,
	48, 48, 48, 48, 49, 49, 57, 57, 326, 326,
	326, 330, 330, 331, 331, 332, 332, 332, 332, 332,
	332, 332, 328, 328, 54, 54, 54, 93, 93, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 63, 63,
	65, 62, 62, 62, 64, 64, 64, 64, 66, 66,
	66, 66, 67, 67, 67, 67, 67, 68, 68, 140,
	140, 278, 277, 277, 283, 283, 283, 138, 138, 138,
	138, 138, 139, 139, 139, 276, 276, 276, 276, 284,
	284, 284, 284, 284, 284, 282, 282, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 81, 81, 81, 88, 88, 88, 88,
	88, 88, 88, 70, 70, 75, 75, 75, 75, 75,
	71, 71, 76, 76, 77, 77, 78, 78, 78, 78,
	78, 78, 72, 72, 72, 72, 80, 80, 80, 80,
	79, 79, 85, 85, 85, 85, 85, 85, 82, 82,
	82, 82, 83, 83, 83, 86, 86, 86, 86, 73,
	73, 74, 74, 87, 87, 84, 84, 84, 43, 327,
	327, 329, 329, 52, 52, 30, 30, 31, 31, 141,
	141, 142, 142, 206, 206, 206, 206, 143, 143, 114,
	114, 114, 205, 295, 295, 296, 296, 296, 296, 296,
	296, 297, 297, 297, 297, 297, 297, 297, 293, 293,
	294, 291, 291, 292, 292, 292, 292, 333, 333, 204,
	204, 146, 146, 300, 300, 300, 300, 298, 298, 298,
	298, 298, 301, 299, 302, 302, 302, 302, 302, 239,
	239, 239, 90, 90, 32, 32, 120, 120, 33, 33,
	29, 29, 29, 189, 189, 150, 150, 244, 244, 244,
	131, 131, 109, 109, 109, 14, 11, 11, 11, 11,
	11, 11, 19, 19, 17, 17, 190, 190, 191, 191,
	53, 53, 55, 55, 60, 60, 89, 89, 89, 89,
	89, 89, 21, 21, 21, 21, 25, 25, 25, 25,
	59, 59, 335, 335, 127, 127, 127, 127, 128, 128,
	201, 201, 202, 202, 203, 203, 203, 122, 121, 123,
	123, 28, 28, 28, 116, 116, 117, 117, 118, 118,
	119, 119, 336, 336, 50, 50, 50, 92, 92, 134,
	134, 198, 198, 198, 200, 200, 199, 199, 199, 175,
	175, 175, 91, 91, 155, 155, 164, 164, 165, 165,
	250, 166, 166, 58, 58, 101, 101, 99, 99, 99,
	99, 99, 99, 100, 100, 100, 102, 102, 102, 102,
	102, 102, 102, 105, 105, 105, 106, 106, 106, 104,
	104, 308, 308, 308, 311, 311, 307, 309, 309, 310,
	310, 334, 334, 176, 176, 176, 145, 144, 144, 148,
	148, 147, 149, 149, 243, 243, 243, 173, 173, 173,
	173, 192, 192, 193, 193, 194, 194, 195, 195, 195,
	196, 196, 197, 197, 172, 172, 223, 223, 103, 103,
	103, 154, 154, 154, 156, 156, 213, 213, 213, 214,
	214, 212, 212, 212, 212, 245, 245, 245, 245, 245,
	245, 245, 245, 324, 324, 324, 325, 325, 242, 242,
	246, 246, 246, 246, 246, 246, 240, 240, 240, 240,
	241, 241, 251, 251, 179, 179, 179, 179, 177, 177,
	178, 178, 247, 247, 247, 247, 174, 174, 248, 248,
	248, 207, 207, 254, 254, 254, 272, 272, 153, 153,
	153, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 256, 256,
	256, 256, 258, 258, 258, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 271, 271, 271, 271, 271, 259, 259,
	266, 266, 267, 267, 268, 269, 260, 260, 261, 261,
	262, 263, 270, 270, 270, 270, 274, 274, 264, 264,
	264, 264, 264, 265, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 187, 187,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 217, 217, 217, 217, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 303, 303, 303,
	303, 303, 303, 303, 303, 305, 305, 306, 306, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 312, 312, 313,
	313, 315, 315, 316, 316, 317, 318, 318, 318, 319,
	320, 320, 314, 314, 321, 321, 321, 322, 322, 323,
	323, 323, 323, 323, 229, 229, 229, 230, 230, 231,
	237, 237, 237, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 129,
	129, 129, 129, 129, 161, 161, 226, 226, 224, 224,
	224, 228, 228, 180, 180, 273, 273, 273, 273, 273,
	273, 273, 181, 181, 181, 188, 182, 182, 183, 183,
	183, 183, 183, 183, 220, 221, 184, 184, 184, 222,
	222, 232, 236, 236, 235, 234, 234, 233, 233, 210,
	210, 211, 211, 209, 208, 169, 169, 168, 168, 167,
	167, 337, 337, 238, 238, 170, 170, 171, 163, 163,
	249, 249, 249, 249, 157, 157, 136, 136, 158, 158,
	132, 132, 135, 135, 133, 133, 133, 133, 151, 151,
	152, 152, 130, 130, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 275, 275, 275, 225, 124,
	124, 124, 125, 125, 126, 126, 280, 280, 280, 281,
	281, 281, 281, 279, 279, 279, 279, 279, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 1, 1, 1, 3, 4,
	6, 6, 6, 5, 5, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 7, 2, 6,
	2, 1, 12, 12, 2, 1, 1, 1, 3, 3,
	0, 3, 1, 3, 1, 1, 3, 2, 5, 0,
	4, 6, 7, 1, 2, 1, 2, 2, 3, 3,
	3, 3, 1, 2, 1, 2, 1, 2, 1, 2,
	3, 1, 2, 1, 2, 2, 6, 3, 2, 2,
	2, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 2, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 3, 5, 3,
	1, 3, 1, 2, 2, 3, 2, 2, 5, 3,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 3,
	1, 5, 2, 3, 0, 3, 2, 3, 0, 2,
	3, 2, 3, 2, 6, 2, 6, 2, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 2, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 4, 3,
	5, 3, 2, 6, 3, 3, 4, 4, 3, 3,
	3, 3, 1, 3, 3, 1, 1, 2, 2, 1,
	0, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 2, 2, 3, 3, 1, 1, 1, 1,
	1, 2, 2, 3, 3, 4, 4, 3, 4, 4,
	4, 3, 2, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 2, 3, 3, 3,
	2, 3, 4, 3, 5, 3, 4, 5, 2, 3,
	3, 3, 4, 2, 3, 4, 3, 3, 3, 4,
	4, 4, 4, 2, 3, 5, 5, 6, 2, 2,
	0, 2, 0, 3, 2, 7, 10, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 1, 8, 0, 1,
	1, 0, 3, 2, 0, 3, 1, 2, 2, 3,
	6, 2, 1, 1, 2, 4, 2, 5, 7, 8,
	5, 3, 1, 4, 6, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 2, 4, 3, 3, 0, 6, 3,
	11, 14, 4, 1, 0, 1, 3, 3, 3, 5,
	2, 0, 1, 1, 0, 6, 6, 8, 8, 10,
	8, 10, 6, 8, 6, 8, 1, 0, 2, 0,
	2, 2, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 2, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 0, 1, 3, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 3, 6, 3, 1,
	3, 1, 4, 2, 8, 5, 4, 3, 0, 2,
	2, 0, 8, 3, 2, 0, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 2, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 8, 8, 2, 4, 4, 4, 2,
	2, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 4, 5, 2, 2, 1,
	1, 2, 5, 2, 3, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 3, 0, 2, 0, 2, 2,
	3, 3, 2, 0, 1, 3, 3, 5, 1, 1,
	3, 2, 4, 4, 0, 8, 4, 6, 3, 3,
	1, 5, 5, 0, 2, 3, 1, 3, 2, 0,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 5, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 1, 1, 2, 3,
	0, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 4, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 2, 1,
	3, 1, 1, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 3, 4, 1, 1, 1, 5,
	1, 3, 3, 1, 3, 3, 1, 3, 3, 1,
	1, 1, 1, 6, 6, 4, 3, 4, 3, 4,
	3, 4, 4, 3, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 3, 5, 4, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 3, 1, 3, 3, 3,
	2, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 2, 2, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 1, 1, 2, 2, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -26, -27, -48,
	-34, -35, -36, -47, -42, -49, -43, -50, -51, -52,
	-44, -56, -55, -57, -60, -58, -53, -54, -61, -69,
	-89, -90, -91, -92, -5, -6, -7, -8, 23, 34,
	-23, -24, 47, 67, -28, -29, -30, -31, 69, -32,
	-33, 90, -310, 94, -37, -38, -39, -41, -40, 98,
	105, 107, 125, 131, 134, 214, 220, 240, 242, 244,
	251, -99, -101, 238, 239, -62, -63, -64, -65, -93,
	262, -70, -71, -72, -73, -74, -75, -76, -77, -78,
	-79, -80, -81, -82, -83, -84, -85, -86, -87, 265,
	-21, -25, -59, 303, -9, -10, -13, -12, -11, -16,
	-18, -15, -17, -19, -14, -308, -102, -100, 354, 312,
	35, 274, 61, 101, 246, 328, 335, -105, -103, -104,
	-106, 255, 320, 284, 358, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 2,
	284, 323, 83, 141, -326, 2, -158, 284, 83, -133,
	-124, 347, 4, -287, -289, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 55, 60, 61, 62, 64,
	66, 67, 68, 71, 72, 73, 81, 82, 84, 86,
	90, 92, 94, 97, 98, 100, 105, 106, 107, 113,
	114, 119, 121, 126, 131, 132, 133, 134, 135, 142,
	145, 147, 140, 157, 158, 159, 161, 162, 163, 166,
	165, 170, 173, 176, 178, 179, 180, 183, 181, 185,
	186, 188, 187, 193, 195, 196, 198, 201, 204, 207,
	210, 211, 212, 213, 214, 216, 218, 220, 222, 223,
	224, 225, 226, 228, 229, 231, 232, 233, 234, 235,
	238, 236, 237, 239, 240, 241, 242, 244, 246, 247,
	249, 263, 264, 275, 251, 252, 253, 254, 258, 256,
	259, 260, 262, 265, 267, 270, 273, 274, 276, 279,
	280, 277, 272, 283, 285, 286, 287, 288, 289, 290,
	291, 298, 299, 303, 304, 305, 306, 309, 310, 311,
	312, 314, 317, 318, 319, 324, 329, 330, 331, 332,
	333, 28, 36, 37, 38, 39, 41, 42, 45, 46,
	51, 52, 53, 56, 85, 87, 88, 104, 108, 109,
	115, 116, 117, 127, 129, 136, 137, 146, 148, 149,
	150, 151, 152, 154, 168, 182, 192, 194, 205, 209,
	217, 219, 227, 248, 257, 268, 269, 278, 281, 293,
	294, 295, 300, 301, 316, 320, 321, 357, 357, 2,
	158, 224, -132, -124, 83, 357, 357, 357, 357, 284,
	2, 313, 323, -189, 83, 308, 357, 357, -124, 220,
	22, 2, 92, 145, 311, 310, 22, 216, 256, 286,
	288, 2, 357, 357, 357, 357, 357, 2, 323, 284,
	141, 83, 313, -124, 2, -46, 2, 354, -45, -4,
	-27, -36, -47, -42, -43, -58, -69, -34, -50, -91,
	-92, -330, 2, 22, -331, -332, 69, 98, 125, 255,
	145, 92, 310, -279, 4, -287, -289, -288, -290, 58,
	70, 124, 144, 138, 156, 160, 169, 171, 184, 206,
	208, 245, 266, 22, 24, 25, 26, 27, 29, 30,
	31, 32, 43, 49, 50, 54, 57, 59, 65, 69,
	74, 75, 77, 76, 78, 79, 80, 89, 91, 93,
	95, 96, 99, 101, 103, 110, 111, 112, 120, 122,
	123, 125, 128, 130, 139, 141, 143, 153, 155, 164,
	167, 172, 174, 175, 189, 190, 191, 197, 199, 200,
	202, 203, 215, 221, 230, 243, 255, 261, 271, 282,
	284, 292, 296, 297, 302, 307, 308, 313, 315, 322,
	323, 325, 326, 327, 328, 284, 2, 158, 2, -124,
	2, -326, 2, 158, 2, -330, 2, -124, 2, -128,
	2, 251, -124, -88, 259, 2, 4, 22, 83, 183,
	261, 293, 357, 357, 357, 173, 55, 248, 259, -67,
	299, -66, 293, -278, -68, 2, -159, 183, -124, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 2, -88, 259, 34,
	55, 22, 60, 84, 126, 141, 142, 162, 65, 66,
	223, 173, 159, 298, 163, 260, 285, 299, 69, 314,
	289, 106, 357, 357, 357, -334, 2, 284, -100, -102,
	-101, -147, -148, 307, 153, 103, 203, -99, -101, 2,
	-308, -283, 2, -276, -239, 9, 302, 110, 199, -282,
	8, 346, -275, -281, 5, 7, 345, 4, -287, -289,
	-288, -335, 2, 299, 299, 2, -335, 2, -335, 2,
	-127, 2, 299, 296, -311, 228, -307, -124, -311, 357,
	357, 359, 357, -144, -145, 2, 22, 95, -171, 2,
	354, -245, 2, 352, -247, -132, -101, -246, 354, 200,
	-3, 2, -247, 136, -132, 2, -247, 136, -132, 2,
	-124, 2, -135, 136, -132, 296, 359, -158, -151, -124,
	-209, -208, 356, -215, 2, -217, 345, 346, 340, 189,
	334, -229, -219, -232, 104, 248, 354, -132, -218, 360,
	9, -305, -101, 29, -230, -231, 49, -124, 7, 8,
	5, 6, -130, -256, -225, -265, 302, 110, 191, -303,
	-304, 4, -287, -280, -257, -267, -261, -264, 154, 58,
	75, 76, 79, 77, 80, 261, 313, 50, 28, 108,
	109, 209, 217, 281, 300, 301, 136, 192, 137, 56,
	127, 168, 97, 37, 39, 41, 42, 51, 52, 85,
	87, 88, 115, 116, 117, 146, 148, 149, 150, 151,
	152, 194, 227, 268, 278, 294, 295, 321, -288, -268,
	-269, -262, -263, -270, -215, 2, 123, 354, -168, -169,
	-208, -209, 2, -159, 136, -124, 2, -159, 2, 141,
	-124, 136, 2, -124, 22, 123, 2, 155, 2, 155,
	2, -248, 2, -247, -160, 136, 2, -159, -160, 136,
	2, -136, 136, 2, -135, -124, 136, 2, -151, 136,
	2, -185, 354, -253, 2, -252, -281, 320, 357, 357,
	357, 357, 357, 199, 359, -159, -215, -227, 354, 123,
	-215, 199, -124, -88, 333, 2, 2, 263, 2, 354,
	-67, 53, 299, -202, 2, -203, -121, -122, -123, 157,
	222, 226, 333, 296, 339, 123, -283, -140, 89, -162,
	356, -88, 2, -285, 2, -282, 9, 263, 2, 223,
	260, 55, 123, 2, 2, -327, 2, 199, 123, 2,
	123, 2, 123, 2, 123, 2, 123, 2, 2, 223,
	260, 2, 120, 2, 298, 2, 2, 123, 2, 157,
	222, 275, 2, 284, 323, 2, 123, 123, -174, -247,
	-147, -148, -173, -192, -193, 172, 112, 197, -176, 22,
	95, -176, -176, 44, 355, 355, 8, 7, 7, -201,
	-202, -201, 296, -128, 359, -311, -152, 354, -171, -163,
	-249, -215, 347, -163, -170, -238, -215, 89, 70, -179,
	160, 184, 124, 169, 245, 144, 7, -46, -212, 360,
	354, 347, -242, 335, -101, -246, 354, -245, -132, 354,
	-111, 236, -110, 21, 23, 98, 318, 104, 272, 290,
	252, 236, 104, 236, 272, 290, 252, 236, 104, 360,
	-285, -133, 359, -279, 347, 10, 11, 57, 33, 345,
	346, 347, 348, 118, 349, 350, 343, 344, 342, 337,
	338, 339, 63, 177, 250, 13, 14, 15, 26, 202,
	171, 334, 138, 266, 340, 16, 17, 18, 156, 36,
	139, -129, -137, -215, -215, -215, -215, -215, 208, -167,
	-210, 352, -101, 354, 354, -101, -215, -161, 354, 7,
	-101, -224, 352, -233, -215, -168, 354, 5, 354, 5,
	-312, 329, 120, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 219, -274, 324, -274, -274, -258, 354, -258, -259,
	354, -258, 330, 335, 354, 276, 355, -157, -132, -169,
	354, -146, 189, -120, -309, 328, -146, 354, -125, 136,
	2, -124, -309, 189, -248, -134, -132, -134, 262, -124,
	30, -113, 359, 48, 241, 104, -113, 104, -113, 359,
	104, 104, 104, -161, -215, 355, 359, -326, -332, 69,
	354, 30, -226, -254, -255, -257, -266, -260, -264, -265,
	40, 46, 45, 291, 182, 257, 269, 316, 38, 198,
	147, 146, 148, 149, 150, 151, 152, 268, 37, 227,
	116, 117, 115, 97, 88, 87, 194, 42, 41, -268,
	-269, -262, -263, 85, 294, 295, 154, 39, 52, 51,
	321, 278, -286, -285, -326, -66, -278, -161, 30, -202,
	2, 359, 170, -139, 176, 188, 132, 200, 331, -284,
	5, 4, -225, -239, 89, 173, -265, -277, 89, -283,
	-277, 89, 73, 356, -279, -159, 22, 264, 2, -278,
	-329, 120, -326, -278, -278, -278, -278, -278, 259, -46,
	120, -124, 170, -278, 2, -278, 2, 284, 141, 284,
	-113, 359, -173, -193, -192, -194, -215, 22, -197, 114,
	185, -215, -217, -100, -100, -100, -149, -243, -215, 221,
	141, -128, -307, 30, -151, -154, 359, 123, 30, 4,
	-154, 359, 355, 160, 160, -245, -179, 160, -177, 206,
	-177, -177, -324, 354, 353, -242, -279, 352, 361, -161,
	2, -241, -240, 30, -124, 204, 355, -132, 359, 296,
	-190, 65, 59, -205, 136, 59, -291, -124, 65, -292,
	54, 308, 221, 122, -190, 65, -190, 65, 65, -247,
	33, -58, 123, 296, -247, 296, 33, -58, 123, 296,
	-135, -279, -251, 336, -124, -272, -254, -271, 232, 233,
	231, 235, 234, -254, -279, 293, -215, -215, -215, -215,
	-215, -215, -215, -215, -215, -215, -215, -215, -215, -215,
	-215, -215, -215, -215, -215, -215, -215, -215, 171, 138,
	266, 36, 139, -215, 296, -215, -215, -215, -215, 181,
	189, 191, 302, 110, 309, 95, 195, -337, 282, 32,
	-222, -101, 354, -237, 27, 271, 22, -229, 248, 354,
	-210, -215, -211, -161, 355, 355, 359, -161, -228, 353,
	-224, -236, -235, 325, 355, -161, 322, 22, 95, 347,
	2, 7, -186, 332, 180, 86, 133, 179, -187, 254,
	-313, 113, 128, 354, 355, 2, 355, 2, 355, 2,
	-215, -215, -180, 2, -273, -161, 4, 332, 180, 86,
	133, 179, 254, -180, 2, -181, 2, -215, -161, -182,
	-216, -217, 345, 346, 340, 354, 248, -183, 2, -215,
	-161, -215, 43, 167, 297, -184, -215, 123, -161, -215,
	-215, -215, -161, -161, 2, -161, 2, 354, 7, 7,
	293, 293, 7, 123, 355, 359, -141, -151, -142, -124,
	-206, -205, -293, -294, -291, 141, 308, 111, 30, 104,
	213, 30, 199, 189, -116, 287, 104, -207, 326, -198,
	-58, 354, 89, 30, -198, -164, -165, -250, -166, -132,
	354, -124, -159, -160, -160, -135, -136, -124, -151, 355,
	359, -46, -252, 296, 315, -142, -45, 355, 359, -153,
	29, 352, -186, 354, -251, 359, 123, 355, 299, -203,
	-138, 226, 270, 237, 258, 359, -279, -328, -124, 259,
	-46, -132, -135, -132, -247, -195, -275, 354, 346, -196,
	248, 249, 359, -109, 31, 93, 161, -132, 354, 355,
	-207, -249, -156, 2, -245, -279, -207, -238, -245, -245,
	-178, 315, 199, 160, -245, -240, 355, -325, 7, -242,
	-241, 7, -214, -213, 121, 187, 355, -124, 354, -242,
	355, -110, -132, -124, -124, 189, -205, 136, -115, 189,
	-254, -124, 354, 354, 161, 161, -124, -124, 136, -124,
	136, -124, -124, -111, 236, -58, 354, -132, 236, -124,
	-58, 354, -124, 236, -94, 135, 195, 333, -215, -215,
	296, -337, 282, -222, -215, 181, 191, 302, 110, 309,
	95, 195, 123, 354, -216, -216, -161, -219, 354, -161,
	353, 363, 355, -215, 353, 353, 359, -234, -235, 99,
	-215, -148, 359, -147, -215, -161, -161, 355, 355, 296,
	296, 296, 296, 354, -318, 207, 354, 354, -215, 30,
	359, 355, 123, 355, 355, -188, 215, 355, 10, 11,
	345, 346, 347, 348, 118, 349, 350, 343, 344, 342,
	337, 338, 339, 63, 177, 250, 13, 14, 15, 156,
	139, -216, -216, -216, -161, 354, 355, -220, -221, 123,
	120, 30, -184, -184, -184, 355, 123, -161, 359, 359,
	359, 355, 355, 355, 7, 355, 359, 355, 333, 333,
	355, 276, 123, -132, 355, 355, 359, -125, 141, -125,
	-58, -159, 5, -58, -132, 104, -117, 100, -336, 339,
	-124, -175, 243, -215, -175, -200, 199, -157, 320, -124,
	-175, -155, 359, 123, 339, -157, -113, -113, -113, -215,
	-328, -285, 355, -254, 352, 353, 7, 7, -97, 328,
	-285, -328, -121, 306, 62, 226, -283, 359, -251, -196,
	-215, -243, -132, 360, -45, -172, 128, -251, 359, -172,
	-178, 354, -215, -245, 353, 355, 359, -241, 353, 359,
	362, 339, -242, 354, -151, -240, 296, 296, 104, 189,
	317, -295, -292, -215, -150, -244, -124, -306, 354, -303,
	-304, -130, 354, 354, -108, 98, 262, -191, 104, -113,
	104, -113, 296, -190, 65, -161, 296, -161, 296, -97,
	123, 283, -215, -215, -216, -216, 123, 354, -215, -226,
	26, 26, 355, -161, 355, 359, -211, -215, 355, -224,
	101, -215, 292, 355, 322, -148, -148, -148, 5, 180,
	133, 179, -187, 179, -187, -187, 7, -319, -124, 354,
	326, -147, 355, -272, -254, -215, -220, -215, -272, -254,
	-216, -216, -216, -216, -216, -216, -216, -216, -216, -216,
	-216, -216, -216, -216, -216, -216, -216, -216, -216, 95,
	189, 195, -216, 359, -161, 355, -221, -220, -215, -215,
	-254, 355, 355, 355, -161, -215, -215, -215, 355, 7,
	276, -143, 140, -206, 354, -125, 354, 354, -146, 354,
	-124, -118, 166, -336, -282, -309, -163, 190, -175, 64,
	355, -207, -165, -156, -238, 355, -98, 71, -98, 7,
	353, 355, -96, 201, -95, -124, 5, -124, 200, 355,
	-109, -279, 355, -223, 130, 44, -245, -223, -151, -212,
	7, -213, -279, 352, -241, -151, 355, -124, -124, -205,
	104, -296, 65, -297, 57, 111, 69, 189, 191, 308,
	221, 54, 89, 230, 355, 355, 359, -131, -168, 57,
	-131, -215, 354, -150, -151, 189, 89, 189, 89, 82,
	304, -124, -124, -132, -124, -124, 355, -132, 355, -124,
	-286, 293, 26, 26, -215, -226, 355, -215, -215, 355,
	-215, 353, -215, 5, -215, 355, 355, 355, 355, -320,
	-124, -215, 355, 355, 355, -221, 123, 95, 195, 354,
	-215, 355, 355, 359, 355, 355, 355, 139, -150, 354,
	-151, -141, 30, -150, 199, -119, 165, -336, -282, -116,
	-199, 354, 199, -58, -175, 339, 82, 82, 353, 359,
	354, 339, 339, -109, -315, 327, -215, -161, -315, 355,
	-242, 7, 355, -205, -124, -279, -124, 111, 136, 191,
	161, 354, -216, -132, -204, -333, 68, 280, -244, -109,
	-279, -109, 355, -161, 355, 355, 191, 191, -215, -254,
	-113, -113, 296, 296, 296, 296, -218, -130, -124, -215,
	-215, 355, 355, -148, -314, 212, 355, -216, 123, 354,
	-226, 355, -215, 210, 355, -150, 355, 355, -58, 355,
	-132, -336, -282, -117, 96, -151, 65, -171, -101, 354,
	354, 354, -95, -96, -285, -285, -316, -317, -124, -241,
	353, -297, -125, 189, -215, -126, 354, -143, 354, -131,
	-148, 230, -112, 57, -124, -124, 354, 354, 354, 355,
	-148, 44, -216, -226, 355, 355, -132, -204, 355, -143,
	-204, 354, -282, -118, 310, 190, 355, -124, -286, -286,
	355, 359, 30, 104, 355, -300, 178, -124, -151, -109,
	355, -132, -107, 315, -279, -161, -161, -161, -321, 225,
	249, -161, 355, 354, -143, -204, -143, -150, -119, 262,
	-207, 355, 355, -317, -319, 111, -298, -301, -299, 199,
	124, 211, 267, 355, 355, -146, -215, 355, 355, -148,
	355, -322, -323, 36, 305, 73, -215, -322, -151, -143,
	355, -164, -97, -97, -124, -299, 199, -301, 199, 310,
	92, -300, 355, -323, 218, 119, 248, 218, 119, 355,
	-204, -207, -302, 186, 241, 48, 262, -302, -298, 26,
	-114, 48, 241, -143, 20, 191, 89, -323,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 7, 8, 9, 10,
	12, 14, 16, 17, 19, 21, 23, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 45, 46,
	47, 48, 50, 52, 55, 57, 59, 61, 0, 0,
	143, 145, 0, 0, 152, 154, 156, 158, -2, 161,
	163, 0, 0, 0, 174, 176, 178, 180, 182, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 623, -2, 0, 0, 269, 271, 273, 275, 276,
	0, 327, 329, 331, 333, 335, 337, 339, 341, 343,
	345, 347, 349, 351, 353, 355, 356, 358, 360, 0,
	546, 548, 550, -2, 64, 65, 66, 67, 68, 74,
	75, 76, 77, 70, 72, 659, -2, 670, 0, 0,
	-2, 0, -2, -2, -2, 0, 0, 636, 638, 640,
	642, -2, 0, 0, -2, 6, 11, 13, 15, 18,
	20, 22, 25, 27, 29, 31, 33, 35, 37, 39,
	42, 44, 49, 51, 53, 56, 58, 60, 62, 63,
	0, 0, 0, 0, 0, 118, 248, 0, 1221, 1148,
	1154, 1155, 1179, 1180, 1181, 1198, 1199, 1200, 1201, 1202,
	1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
	1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223,
	1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233,
	1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243,
	1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253,
	1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263,
	1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273,
	1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
	1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
	1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
	1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
	1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
	1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
	1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
	1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,
	1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
	1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
	1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
	1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
	1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403,
	1404, 1405, 1406, 1407, 1408, 1409, 1410, 144, 146, 147,
	0, 0, 0, 1150, 1221, 153, 155, 157, 159, 0,
	165, 0, 0, 0, 0, 513, 162, 164, 239, 1281,
	241, 243, 0, 0, 0, 0, 168, 169, 170, 171,
	172, 173, 175, 177, 179, 181, 183, 184, 0, 0,
	0, 0, 0, 238, 236, 206, 207, 0, 220, 221,
	222, 223, 224, 226, 227, 210, 211, 212, 214, 216,
	218, 0, 245, 251, 252, 253, 255, 256, 257, 258,
	259, 260, 261, 428, 1193, 1194, 1195, 1196, 1197, 1411,
	1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421,
	1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431,
	1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441,
	1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451,
	1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461,
	1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471,
	1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481,
	1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491,
	1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501,
	1502, 1503, 1504, 1505, 1506, 0, 124, 0, 434, 234,
	232, 0, 120, 0, 543, 0, 247, 544, 545, 540,
	541, 1308, 569, 264, 0, 266, 366, 367, 368, 369,
	370, 0, 270, 272, 274, -2, -2, 1397, -2, 282,
	-2, 292, 1403, 0, 295, 296, 301, -2, 202, 328,
	330, 332, 334, 336, 338, 340, 342, 344, 346, 348,
	350, 352, 354, 357, 359, 361, 362, 363, 0, 0,
	0, 367, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, 0, -2, -2, 0, 0, -2,
	0, 0, 547, 549, 551, 0, 503, 661, -2, 634,
	635, -2, 0, 665, 665, 665, 0, 0, 635, 633,
	0, 267, 268, 304, 305, 306, 315, 316, 317, 318,
	499, 0, 501, 325, 326, 1175, 0, 1189, 1190, 1191,
	1192, 571, 553, 562, 571, 555, 556, 557, 558, 559,
	560, 561, 564, 0, 651, 1287, 654, 1161, 652, 637,
	639, 0, 641, 0, 0, 645, 667, 666, 698, 699,
	0, 649, 650, 660, 714, 752, 729, 720, 0, 0,
	2, 69, 0, 1379, 752, 71, 0, 1379, 752, 73,
	0, 78, 0, 1379, 1153, 0, 0, 249, 250, 1158,
	1156, 1157, 0, 148, 149, 860, 0, 0, 0, 0,
	0, 0, 952, 954, 1371, 1397, 0, 956, 957, 0,
	959, 961, 962, 0, 965, 966, 1118, 1150, 1164, 1165,
	1166, 1167, 0, 0, 1170, 0, 1172, 1173, 1174, 1018,
	976, -2, -2, 1162, 788, 789, 790, 791, -2, 1411,
	980, 983, 986, 989, 990, 991, 992, 0, 1355, 1372,
	1373, 1393, 1394, 1402, 1406, 1407, 1379, 1390, 1380, 1367,
	1377, 1388, 1227, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1188, 822,
	823, 828, 829, 831, 150, 151, 0, 0, 1151, 1127,
	1125, 1126, 160, 482, 1379, -2, 505, 482, 509, -2,
	658, 1379, 583, 240, 242, 0, 167, 0, 596, 0,
	598, 0, 613, 758, 110, 1379, 187, 200, 110, 1379,
	190, 110, 1379, 193, 1146, 194, 1379, 196, 197, 1379,
	199, 235, 0, 0, -2, 228, 230, -2, 225, 213,
	215, 217, 219, 0, 0, 0, 433, 0, 0, 0,
	542, 0, 568, 265, 371, 372, 277, 0, 279, 0,
	281, 1366, -2, 284, 285, 572, 574, 575, 576, 0,
	0, 0, 0, 0, 0, 0, 297, 298, 299, 203,
	0, 364, 365, 373, 374, 125, 126, 0, 377, 398,
	410, 0, 0, 381, 383, 432, 385, 0, 0, 387,
	0, 389, 0, 391, 0, 393, 0, 395, 397, 399,
	411, 401, 660, 403, 0, 405, 409, 0, 414, 0,
	416, 417, 418, 0, 0, 424, 0, 0, 110, 756,
	-2, 0, 629, 679, 680, 0, 0, 0, 0, 663,
	664, 0, 0, 0, 625, 626, 500, 1177, 1176, 552,
	570, 554, 0, 566, 0, 653, 0, 0, 700, 703,
	1138, 1142, 1143, 703, 0, 1135, 1133, 1134, 0, 0,
	0, 0, 749, 749, 749, 747, 723, 0, 729, 0,
	0, 753, 741, 0, -2, 720, 0, 0, 754, 0,
	79, 537, 89, 0, 537, 537, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	743, 1149, 0, 1123, 1124, 0, 0, 0, 0, 1053,
	1054, 1055, 1056, 1057, 1058, 1061, 1062, 1059, 1060, 1063,
	1064, 1065, 0, 0, 0, 1066, 1067, 1068, 0, 0,
	1070, 0, 1072, 0, 0, 0, 0, 0, 0, 1132,
	0, 0, 1069, 865, 866, 867, 889, 890, 0, 953,
	1129, 1122, 955, 0, 0, -2, 1074, 0, 0, 958,
	963, 964, 0, 0, 1117, -2, 0, 1169, 0, 857,
	1020, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1097, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 807, 825, 836, 833, 832, 809, 0, 808, 806,
	0, 810, 0, 0, 0, 140, 0, 0, 1144, 1128,
	440, 0, 0, 504, 0, 657, 0, 0, 0, 1379,
	512, 1182, 585, 0, 762, 0, 599, 0, 0, 759,
	0, 185, 0, 108, 109, 0, 188, 0, 191, 0,
	0, 0, 0, 0, 1074, 660, 0, 0, 254, 0,
	0, 660, 0, 1076, 770, 771, 772, 773, 774, 857,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 795, 796, 797, 798, 799, 800, 801, 802, 803,
	804, 805, 819, 0, 794, 794, 794, 811, 812, 820,
	821, 826, 827, 838, 839, 841, 843, 837, 837, 837,
	834, 835, 743, 127, 0, 278, 0, 0, 0, 286,
	287, 0, 0, 577, 312, 313, 314, 579, 580, 293,
	319, 320, 321, 322, 323, 324, 0, 288, 290, 302,
	289, 291, 294, 0, 204, 375, 376, 378, 379, 380,
	384, 0, 429, 386, 388, 390, 392, 394, 402, 406,
	660, 412, 415, 419, 420, 421, 422, 0, 0, 0,
	502, 0, 632, 677, 678, 681, 685, 686, 689, 692,
	693, 683, 860, 646, 647, 648, 671, 672, 524, 0,
	0, 565, 655, 0, 0, 762, 0, 0, 0, 1141,
	762, 0, 1137, 0, 0, 0, 0, 0, 744, 748,
	745, 746, 0, 0, 729, 741, 711, 0, 0, 0,
	718, 719, 740, 0, 739, 728, -2, 0, 0, 0,
	0, 0, 536, 91, 1379, 0, 112, 0, 0, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 1152, 130, 0, 1159, 861, 766, 767, 813, 814,
	815, 816, 817, 862, 863, 0, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, -2, -2, -2, 881,
	882, 883, -2, -2, -2, 887, 888, -2, 1071, 1073,
	0, 1132, 0, -2, 0, -2, -2, -2, -2, 901,
	0, 903, 906, 908, 910, 0, 0, 0, 0, 1131,
	920, 1109, 0, 0, 1050, 1051, 1052, 905, 0, 0,
	1130, 1121, 0, 0, -2, 960, 0, 0, 0, 1080,
	1081, 1116, 1112, 0, 967, 670, 0, 0, 0, 0,
	974, 0, 1178, 844, 845, 846, 847, 848, 849, 858,
	1028, 0, 0, 0, 981, 982, 984, 985, 987, 988,
	0, 0, 0, 996, 0, 1084, -2, -2, -2, -2,
	-2, -2, -2, 0, 998, 0, 1000, 1074, 1094, 0,
	0, 923, 0, 0, 0, 0, 1397, 0, 1003, 1074,
	1102, 0, 0, 0, 0, 0, 1074, 0, 1108, 0,
	0, 0, 0, 0, 1014, 0, 1016, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 439, 1158,
	441, 443, 444, 445, 446, 1183, 0, 1183, 0, 0,
	0, 0, 0, 0, 587, 593, 0, 611, 0, 611,
	601, 0, 0, 0, 611, 615, 616, 618, 619, 0,
	0, 760, 201, 110, 110, 1147, 110, 195, 198, 237,
	0, 208, 229, 0, 0, 0, 231, 233, 0, 763,
	765, 0, 775, 0, 139, 0, 0, 280, 0, 573,
	578, 0, 309, 0, 311, 0, 205, 431, 262, 404,
	407, 425, 426, 743, 757, 0, 687, 0, 0, 684,
	690, 691, 0, 674, 522, 523, 0, 0, 660, 1160,
	695, 1139, 743, 702, 704, 1140, 695, 1136, 731, 0,
	733, 0, 0, 0, 735, 0, 724, 0, 726, 741,
	716, 0, 0, 709, 0, 708, 729, 737, 0, 0,
	755, 90, 526, 0, 0, 0, 93, 1379, 101, 0,
	454, 0, 0, 0, 0, 0, 539, 102, 1379, 110,
	1379, 110, 103, 80, 537, 81, 0, 532, 0, 525,
	82, 0, 534, 0, 139, 0, 0, 0, -2, -2,
	0, 0, 0, 921, -2, 902, 904, 907, 909, 911,
	0, 0, 0, 0, 0, 0, 0, 922, 0, 0,
	1119, 1122, -2, 1075, 1078, 1079, 0, 0, 1113, 0,
	0, 0, 0, 669, 670, 670, 670, 973, 0, 0,
	0, 0, 0, 0, 975, 0, 0, 0, 0, 0,
	0, 995, 0, 997, 999, 0, 0, 1001, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 926, 927, 928, 0, 0, 1002, 1100, 1101, 0,
	0, 0, 0, 0, 0, 1008, 0, 1107, 0, 0,
	0, 1012, 1013, 1015, 0, 792, 0, 818, 840, 842,
	830, 141, 0, 1145, 448, 481, 0, 0, 1183, 0,
	437, 482, 506, 508, 0, 0, 589, 593, 0, 592,
	658, 166, 0, 761, 594, 611, 0, 0, 603, 600,
	597, 762, 0, 0, 0, 0, 186, 189, 192, 1075,
	244, 0, 0, 1077, 0, 768, 0, 0, 119, 0,
	128, 246, 283, 307, 308, 310, 303, 0, 427, 0,
	0, 673, 524, 0, 0, 697, 0, 701, 0, 697,
	732, 0, 751, 734, 714, 725, 0, 722, 712, 0,
	713, 0, 741, 0, 0, 721, 0, 0, 0, 0,
	111, 452, 471, 0, 0, 515, 521, 521, 0, 977,
	978, 0, 0, 0, 95, 0, 0, 0, 0, 99,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 864, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 1110, 0, 1045, 0, 0, 1121, -2, 1082,
	1111, 1115, 0, 968, 0, 0, 0, 0, 1171, 850,
	851, 852, 853, 854, 855, 856, 0, 1026, 1027, 1031,
	0, 0, 979, 0, 0, 1083, 1093, 1095, 924, 925,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	-2, -2, -2, 942, 943, 944, -2, -2, -2, 0,
	0, 0, 1096, 0, 0, 1048, 1098, 1099, 1104, 1105,
	0, 1005, 1006, 1007, 1106, 0, 0, 0, 824, 0,
	142, 435, 0, 442, 0, 0, 0, 440, 0, 0,
	0, 591, 593, 0, 584, 585, 609, 610, 595, 608,
	0, 611, 617, 614, 620, 0, 0, 121, 0, 0,
	769, 776, 137, 1271, 135, 132, 134, 263, 682, 688,
	675, 524, 656, 1022, 0, 0, 705, 1022, 0, 729,
	727, 710, 706, 0, 717, 0, 738, 528, 530, 92,
	0, 453, 0, 456, 0, 0, 0, 0, 462, 463,
	0, 0, 0, 0, 473, 480, 0, 524, 1163, 0,
	524, 0, 0, 0, 0, 0, 107, 0, 0, 538,
	0, 110, 110, 527, 0, 0, 0, 533, 0, 535,
	129, 0, 0, 0, -2, 0, 914, -2, -2, 1044,
	1075, 1120, 1114, 1168, 670, 969, 971, 972, 859, 1033,
	1030, 0, 1017, 993, 994, 1092, 0, 0, 0, 0,
	1075, 1047, 1004, 0, 1010, 1011, 793, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 593, 0, 586, 587,
	0, 0, 0, 602, 612, 0, 0, 0, 764, 0,
	0, 0, 0, 676, 643, 0, 696, 694, 644, 750,
	741, 0, 736, 94, 0, 457, 458, 1183, 0, 461,
	464, 0, 466, 1185, 448, 0, 477, 478, 516, 517,
	520, 518, 521, 670, 475, 0, 96, 97, 106, 114,
	98, 104, 0, 0, 0, 0, 742, 0, 0, -2,
	-2, 915, 1046, 0, 670, 0, 1019, -2, 0, 0,
	0, 1049, 0, 0, 480, 0, 470, 448, 438, 480,
	0, 0, 588, 589, 0, 0, 0, 621, 622, 0,
	0, 0, 136, 0, 131, 133, 1021, 1023, 0, 715,
	707, 455, 459, 0, 0, 486, 0, 474, 0, 524,
	0, 0, 116, 0, 529, 531, 0, 0, 0, 970,
	1036, 0, -2, 0, 950, 1009, 0, 448, 480, 436,
	448, 0, 590, 591, 0, 605, 762, 607, 0, 0,
	138, 0, 0, 0, 465, 491, 0, 0, 0, 519,
	968, 482, 100, 0, 113, 0, 0, 670, 0, 0,
	0, 1032, 951, 0, 468, 448, 510, 0, 582, 0,
	606, 139, 139, 1024, 1025, 0, 467, 487, 488, 0,
	483, 484, 485, 1184, 479, 486, 115, 86, 88, 0,
	1029, 1034, 1037, -2, 1339, 1218, 0, 1035, 0, 469,
	480, 762, 122, 123, 460, 489, 0, 490, 0, 0,
	0, 491, 0, 0, 1039, 1040, 1041, 1042, 1043, 451,
	448, 604, 492, 0, 495, 496, 0, 493, 476, 0,
	447, 449, 450, 511, 494, 497, 498, 1038,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 343, 3, 349, 344, 3,
	354, 355, 347, 345, 359, 346, 356, 348, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 363, 358,
	337, 339, 338, 3, 360, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 352, 3, 353, 350, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 361, 342, 362, 340,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 341,
	57680, 351, 57681, 357, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:862
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:868
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:874
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 6:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:884
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:888
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:889
		{
			return helpWith(sqllex, "DELETE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:890
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 18:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:892
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:893
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:894
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:896
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:897
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:898
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:899
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:900
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:901
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:902
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:903
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:905
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:908
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:909
		{
			return helpWith(sqllex, "RESET")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:913
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:914
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:915
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:917
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:925
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:926
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:927
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:928
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:929
		{
			return helpWith(sqllex, "ALTER")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:964
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:975
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:986
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1006
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:1010
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:1014
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:1020
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:1026
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:1032
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:1038
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:1044
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line gen/sql.y:1048
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:1054
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line gen/sql.y:1058
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1064
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1068
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1075
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:1080
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1085
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:1090
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:1095
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:1100
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:1104
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:1107
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:1117
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line gen/sql.y:1127
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1130
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1137
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1140
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:1147
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:1156
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1166
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1170
		{
			sqlVAL.union.val = nil
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1176
		{
			sqlVAL.union.val = DropCascade
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1180
		{
			sqlVAL.union.val = DropRestrict
		}
	case 110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:1184
		{
			sqlVAL.union.val = DropDefault
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1190
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:1194
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1199
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:1200
		{
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1203
		{
			return unimplemented(sqllex, "alter using")
		}
	case 116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:1204
		{
		}
	case 117:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line gen/sql.y:1228
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1231
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:1254
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1257
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1261
		{
			sqlVAL.str = "CSV"
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line gen/sql.y:1288
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line gen/sql.y:1292
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1295
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1299
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1303
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1309
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1313
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1319
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:1323
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1329
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1333
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1337
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1341
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1347
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1351
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1357
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:1361
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:1364
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:1368
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:1372
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line gen/sql.y:1376
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1384
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1385
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1386
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1394
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1397
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1405
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1408
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1416
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1417
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1418
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1419
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1421
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1422
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1423
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1424
		{
			return helpWith(sqllex, "CREATE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:1432
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1435
		{
			return helpWith(sqllex, "DELETE")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1442
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1445
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1446
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1447
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1448
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1449
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1455
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1456
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1457
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1458
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1459
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1460
		{
			return helpWith(sqllex, "DROP")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:1468
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:1472
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1475
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:1483
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:1487
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1490
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:1498
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:1506
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1513
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1521
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:1525
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1528
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1536
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:1540
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1543
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1547
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1551
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1557
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1561
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1567
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1571
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1591
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1594
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:1596
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1603
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1607
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1611
		{
			return helpWith(sqllex, "DELETE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1612
		{
			return helpWith(sqllex, "INSERT")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1613
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1614
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1621
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1622
		{ /* SKIP DOC */
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1627
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1631
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 231:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:1644
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1651
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1655
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:1659
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1669
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1675
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1681
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:1685
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1695
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1699
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1703
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1707
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1710
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:1727
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1730
		{
			return helpWith(sqllex, "GRANT")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:1747
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1750
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1754
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1758
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1762
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1769
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1772
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1776
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1780
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1787
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1791
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1795
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1799
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1803
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1807
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1811
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1819
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1823
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1833
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1837
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1840
		{
			return helpWith(sqllex, "RESET")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1845
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1848
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1852
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1853
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1854
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1855
		{ /* SKIP DOC */
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1856
		{ /* SKIP DOC */
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1857
		{
			return unimplemented(sqllex, "set local")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:1866
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1870
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:1876
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1891
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1895
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:1900
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1917
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1920
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:1922
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:1925
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1929
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1933
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1937
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1941
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1950
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1953
		{
			return unimplemented(sqllex, "set from current")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1955
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1961
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1965
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1971
		{
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:1973
		{
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1980
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:1984
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:1992
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:1998
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2002
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2006
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2010
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2014
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2020
		{
			sqlVAL.union.val = Low
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2024
		{
			sqlVAL.union.val = Normal
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2028
		{
			sqlVAL.union.val = High
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2034
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2038
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2042
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2049
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2060
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2064
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2068
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2073
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2077
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2092
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2093
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2094
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2095
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2096
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2097
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2098
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2099
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2100
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2101
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2102
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2103
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2104
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2105
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2107
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2108
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2109
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2110
		{
			return helpWith(sqllex, "SHOW")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2117
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2118
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2119
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2130
		{
			sqlVAL.str = "client_encoding"
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2133
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2134
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2142
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2145
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2155
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2159
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2162
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2164
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2167
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2175
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2178
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2186
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2189
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2197
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2200
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2208
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2211
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2213
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2216
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2218
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2221
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2229
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2232
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2234
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2237
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2245
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2248
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2250
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2254
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2264
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2267
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2277
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2280
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:2282
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2285
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2287
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:2291
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2300
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2303
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2305
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2309
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2319
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2323
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2326
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2334
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2338
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2342
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2345
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2353
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2356
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2364
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2367
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2375
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2378
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:2382
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:2386
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:2390
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2396
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2402
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:2407
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2413
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:2417
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2427
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2430
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line gen/sql.y:2465
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line gen/sql.y:2469
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:2475
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line gen/sql.y:2479
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:2486
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2492
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2496
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2502
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2508
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line gen/sql.y:2514
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:2522
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2529
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2533
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:2537
		{
			sqlVAL.union.val = DropDefault
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2543
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2554
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:2558
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2564
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2568
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2572
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2576
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2580
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:2584
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2602
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2606
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2610
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2614
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2618
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2622
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:2626
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line gen/sql.y:2635
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line gen/sql.y:2644
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:2657
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2669
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2674
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2680
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:2686
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:2696
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line gen/sql.y:2706
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2729
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:2733
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2739
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:2743
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2748
		{
			return unimplemented(sqllex, "match full")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2749
		{
			return unimplemented(sqllex, "match partial")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2750
		{
			return unimplemented(sqllex, "match simple")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:2751
		{
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2757
		{
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2758
		{
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2759
		{
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2760
		{
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:2761
		{
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2764
		{
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2767
		{
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2770
		{
			return unimplemented(sqllex, "no action")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2773
		{
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2774
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2775
		{
			return unimplemented(sqllex, "action set null")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2776
		{
			return unimplemented(sqllex, "action set default")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2780
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2784
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2788
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2798
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2801
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2809
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2812
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2816
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:2820
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:2830
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2837
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line gen/sql.y:2855
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line gen/sql.y:2866
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:2877
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2881
		{
			sqlVAL.union.val = true
		}
	case 514:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:2885
		{
			sqlVAL.union.val = false
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2891
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2895
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2904
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:2907
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:2908
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2911
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 521:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:2912
		{
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2916
		{
			sqlVAL.union.val = Ascending
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2920
		{
			sqlVAL.union.val = Descending
		}
	case 524:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:2924
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 525:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:2930
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:2936
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line gen/sql.y:2940
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line gen/sql.y:2944
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line gen/sql.y:2948
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line gen/sql.y:2952
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line gen/sql.y:2954
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:2958
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line gen/sql.y:2962
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:2968
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line gen/sql.y:2972
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:2978
		{
			sqlVAL.union.val = true
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:2982
		{
			sqlVAL.union.val = false
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2987
		{
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:2988
		{
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2996
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:2999
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3007
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3010
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3018
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3021
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3025
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3026
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3027
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3042
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3045
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3047
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3050
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3060
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3063
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3065
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3068
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3076
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3083
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3086
		{
		}
	case 563:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:3087
		{
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3091
		{
			sqlVAL.str = ""
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3095
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3099
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 567:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:3103
		{
			sqlVAL.str = ""
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3109
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3113
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3119
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:3123
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3129
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3133
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3143
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3147
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3151
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3157
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3163
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3169
		{
			sqlVAL.union.val = ReadOnly
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3173
		{
			sqlVAL.union.val = ReadWrite
		}
	case 581:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line gen/sql.y:3183
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line gen/sql.y:3193
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3203
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3207
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:3211
		{
			sqlVAL.str = ""
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3217
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:3221
		{
			sqlVAL.str = ""
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3227
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:3231
		{
			sqlVAL.str = ""
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3237
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:3241
		{
			sqlVAL.str = ""
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3246
		{
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:3247
		{
		}
	case 594:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:3259
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line gen/sql.y:3265
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3271
		{
			return helpWith(sqllex, "INSERT")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:3282
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3288
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3292
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3300
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3306
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:3310
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3314
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line gen/sql.y:3320
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:3324
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:3330
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3334
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:3336
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3342
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3347
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:3351
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 612:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line gen/sql.y:3362
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3365
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3369
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:3370
		{
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3374
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3378
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3388
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:3400
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:3404
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3447
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3453
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3457
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3472
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3476
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3480
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3484
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3488
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:3492
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3499
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3534
		{
			return helpWith(sqllex, "SELECT")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3535
		{
			return helpWith(sqllex, "VALUES")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3536
		{
			return helpWith(sqllex, "TABLE")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line gen/sql.y:3558
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line gen/sql.y:3571
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3582
		{
			return helpWith(sqllex, "SELECT")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:3586
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:3595
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:3604
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3619
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3626
		{
			return helpWith(sqllex, "TABLE")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3637
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3638
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3639
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3642
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3643
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:3646
		{
			return unimplemented(sqllex, "cte")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3649
		{
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:3650
		{
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3653
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:3654
		{
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3657
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:3658
		{
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3662
		{
			sqlVAL.union.val = true
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3666
		{
			sqlVAL.union.val = false
		}
	case 665:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:3670
		{
			sqlVAL.union.val = false
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3676
		{
			sqlVAL.union.val = true
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3681
		{
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:3682
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3686
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:3690
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3696
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3702
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3706
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3712
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:3716
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:3720
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3729
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3738
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3749
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:3758
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3764
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3771
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3778
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3787
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3791
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:3795
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3801
		{
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3802
		{
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3805
		{
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3806
		{
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3828
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:3832
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3838
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:3842
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3861
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3864
		{
			return helpWith(sqllex, "VALUES")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3866
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3878
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3881
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:3883
		{
			sqlVAL.union.val = &From{}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3889
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3893
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3899
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:3903
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3910
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:3916
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:3921
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:3944
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:3948
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:3954
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:3958
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line gen/sql.y:3985
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:4003
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:4007
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4010
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4012
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4016
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:4020
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:4040
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:4045
		{
			sqlVAL.union.val = nil
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4046
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4047
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4051
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4057
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4065
		{
			sqlVAL.union.val = true
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:4069
		{
			sqlVAL.union.val = false
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4089
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:4093
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:4097
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:4101
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:4105
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:4109
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:4115
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4119
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:4123
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4127
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:4134
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:4140
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:4144
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4150
		{
			sqlVAL.str = astFullJoin
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4154
		{
			sqlVAL.str = astLeftJoin
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4158
		{
			sqlVAL.str = astRightJoin
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4162
		{
			sqlVAL.str = astInnerJoin
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4168
		{
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:4169
		{
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:4180
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4184
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4190
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4194
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4198
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:4202
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4208
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4212
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4225
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4229
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4233
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4239
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:4243
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4255
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:4268
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4269
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4273
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4277
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4284
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4285
		{
			return unimplementedWithIssue(sqllex, 17156)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:4286
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:4294
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4296
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4300
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4304
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4308
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4312
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4316
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4320
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4324
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4328
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4332
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4336
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4357
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:4366
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:4380
		{
			sqlVAL.union.val = nil
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4387
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4391
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4395
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4399
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4403
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4407
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4411
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4415
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4419
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4423
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4427
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4431
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4441
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4445
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4454
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4463
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4472
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4476
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4483
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4487
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4491
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4495
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4499
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4505
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:4509
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:4527
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4543
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 830:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:4559
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4575
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4581
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4585
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4589
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4593
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4598
		{
		}
	case 837:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:4599
		{
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4604
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4608
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:4612
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4616
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 842:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:4620
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4625
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4631
		{
			sqlVAL.union.val = year
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4635
		{
			sqlVAL.union.val = month
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4639
		{
			sqlVAL.union.val = day
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4643
		{
			sqlVAL.union.val = hour
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4647
		{
			sqlVAL.union.val = minute
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4651
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4657
		{
			sqlVAL.union.val = month
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4661
		{
			sqlVAL.union.val = hour
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4665
		{
			sqlVAL.union.val = minute
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4669
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4673
		{
			sqlVAL.union.val = minute
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4677
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4681
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 857:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:4685
		{
			sqlVAL.union.val = nil
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:4691
		{
			sqlVAL.union.val = second
		}
	case 859:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:4694
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4718
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4722
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4726
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:4729
		{
			return unimplemented(sqllex, "at tz")
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4738
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4742
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4746
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4750
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4754
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4758
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4762
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4766
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4770
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4774
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4778
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4782
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4786
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4790
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4794
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4798
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4802
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4806
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4810
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4814
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4818
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4822
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4826
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4830
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4834
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4838
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4842
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:4846
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4850
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:4854
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:4858
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:4862
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4866
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4870
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4874
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4878
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4882
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:4886
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4890
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:4894
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4897
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4899
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:4903
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4907
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:4911
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4915
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:4919
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:4923
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:4927
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:4931
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line gen/sql.y:4935
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:4939
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line gen/sql.y:4943
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:4947
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line gen/sql.y:4951
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4955
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:4959
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:4963
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4991
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:4995
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:4999
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5003
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5007
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5011
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5015
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5019
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5023
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5027
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5031
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5035
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5039
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5043
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5047
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5051
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5055
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5059
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5063
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5067
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5071
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5075
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5079
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5083
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:5087
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:5091
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:5095
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line gen/sql.y:5099
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5112
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5120
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5131
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5136
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5149
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5153
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5158
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5162
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5166
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5170
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5174
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5182
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:5186
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:5189
		{
			return unimplemented(sqllex, "variadic")
		}
	case 970:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line gen/sql.y:5190
		{
			return unimplemented(sqllex, "variadic")
		}
	case 971:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:5192
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:5196
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:5200
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5203
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 975:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:5214
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5221
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5230
		{
			return unimplemented(sqllex, "func_application")
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5231
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 979:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:5235
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5237
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5241
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5244
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5246
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5250
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5253
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5255
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5259
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5262
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5263
		{
			return unimplemented(sqllex, "current role")
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5264
		{
			return unimplemented(sqllex, "current user")
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5265
		{
			return unimplemented(sqllex, "session user")
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5266
		{
			return unimplemented(sqllex, "user")
		}
	case 993:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:5268
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:5272
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:5276
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5279
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 997:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:5281
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5284
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 999:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:5286
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5289
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:5291
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:5295
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5298
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:5299
		{
			return unimplemented(sqllex, "treat")
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:5301
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:5305
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:5309
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:5313
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line gen/sql.y:5317
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:5321
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:5325
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:5329
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:5333
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5336
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:5338
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5341
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:5345
		{
			return unimplemented(sqllex, "within group")
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:5346
		{
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:5350
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:5354
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5361
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:5365
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5371
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5375
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5381
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5389
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5393
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:5397
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:5404
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:5423
		{
			sqlVAL.str = ""
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5429
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:5433
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5443
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5444
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:5445
		{
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5448
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:5449
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5455
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5456
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5457
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5458
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5459
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:5470
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5474
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:5478
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:5484
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5488
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:5494
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5500
		{
			sqlVAL.union.val = Any
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5504
		{
			sqlVAL.union.val = Some
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5508
		{
			sqlVAL.union.val = All
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5513
		{
			sqlVAL.union.val = Plus
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5514
		{
			sqlVAL.union.val = Minus
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5515
		{
			sqlVAL.union.val = Mult
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5516
		{
			sqlVAL.union.val = Div
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5517
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5518
		{
			sqlVAL.union.val = Mod
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5519
		{
			sqlVAL.union.val = Bitand
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5520
		{
			sqlVAL.union.val = Bitor
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5521
		{
			sqlVAL.union.val = Pow
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5522
		{
			sqlVAL.union.val = Bitxor
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5523
		{
			sqlVAL.union.val = LT
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5524
		{
			sqlVAL.union.val = GT
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5525
		{
			sqlVAL.union.val = EQ
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5526
		{
			sqlVAL.union.val = LE
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5527
		{
			sqlVAL.union.val = GE
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5528
		{
			sqlVAL.union.val = NE
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5532
		{
			sqlVAL.union.val = Like
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5533
		{
			sqlVAL.union.val = NotLike
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5534
		{
			sqlVAL.union.val = ILike
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5535
		{
			sqlVAL.union.val = NotILike
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5546
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5550
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5556
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5560
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5566
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5570
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5574
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5580
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5584
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5590
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5594
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:5616
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5620
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5624
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5630
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5637
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:5641
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5658
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5662
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5666
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5670
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5674
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:5678
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5684
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5690
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5696
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5700
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5704
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5710
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5714
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:5725
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5732
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5736
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line gen/sql.y:5742
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5748
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:5752
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:5759
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5765
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:5769
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:5776
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5782
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5788
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5794
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5798
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5804
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5808
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5814
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5818
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5823
		{
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:5824
		{
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5833
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5839
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5843
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5852
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5858
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5862
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5868
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5877
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5881
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5885
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5893
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5897
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5903
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5907
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5913
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5928
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5932
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5938
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5942
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5955
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5959
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5963
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:5967
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5973
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5977
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:5983
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:5986
		{
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:5996
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:6000
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:6007
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:6011
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:6015
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:6019
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line gen/sql.y:6022
		{
			return unimplemented(sqllex, "func const")
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:6024
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:6028
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line gen/sql.y:6031
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:6033
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:6037
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line gen/sql.y:6041
		{
			sqlVAL.union.val = DNull
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:6048
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line gen/sql.y:6052
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:6058
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:6093
		{
			sqlVAL.str = ""
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line gen/sql.y:6099
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line gen/sql.y:6103
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
