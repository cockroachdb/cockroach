// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:490
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFIGURATION = 57406
const CONFIGURATIONS = 57407
const CONFIGURE = 57408
const CONFLICT = 57409
const CONSTRAINT = 57410
const CONSTRAINTS = 57411
const CONTAINS = 57412
const COPY = 57413
const COVERING = 57414
const CREATE = 57415
const CROSS = 57416
const CSV = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPERIMENTAL = 57453
const EXPLAIN = 57454
const EXTRACT = 57455
const EXTRACT_DURATION = 57456
const FALSE = 57457
const FAMILY = 57458
const FETCH = 57459
const FETCHVAL = 57460
const FETCHTEXT = 57461
const FETCHVAL_PATH = 57462
const FETCHTEXT_PATH = 57463
const FILTER = 57464
const FIRST = 57465
const FLOAT = 57466
const FLOAT4 = 57467
const FLOAT8 = 57468
const FLOORDIV = 57469
const FOLLOWING = 57470
const FOR = 57471
const FORCE_INDEX = 57472
const FOREIGN = 57473
const FROM = 57474
const FULL = 57475
const GRANT = 57476
const GRANTS = 57477
const GREATEST = 57478
const GROUP = 57479
const GROUPING = 57480
const HAVING = 57481
const HELP = 57482
const HIGH = 57483
const HOUR = 57484
const HAS_SOME = 57485
const HAS_ALL = 57486
const IMPORT = 57487
const INCREMENTAL = 57488
const IF = 57489
const IFNULL = 57490
const ILIKE = 57491
const IN = 57492
const INET = 57493
const INTERLEAVE = 57494
const INDEX = 57495
const INDEXES = 57496
const INITIALLY = 57497
const INNER = 57498
const INSERT = 57499
const INT = 57500
const INT2VECTOR = 57501
const INT2 = 57502
const INT4 = 57503
const INT8 = 57504
const INT64 = 57505
const INTEGER = 57506
const INTERSECT = 57507
const INTERVAL = 57508
const INTO = 57509
const IS = 57510
const ISOLATION = 57511
const JOB = 57512
const JOBS = 57513
const JOIN = 57514
const JSON = 57515
const JSONB = 57516
const KEY = 57517
const KEYS = 57518
const KV = 57519
const LATERAL = 57520
const LC_CTYPE = 57521
const LC_COLLATE = 57522
const LEADING = 57523
const LEAST = 57524
const LEFT = 57525
const LESS = 57526
const LEVEL = 57527
const LIKE = 57528
const LIMIT = 57529
const LIST = 57530
const LOCAL = 57531
const LOCALTIME = 57532
const LOCALTIMESTAMP = 57533
const LOW = 57534
const LSHIFT = 57535
const MATCH = 57536
const MAXVALUE = 57537
const MINUTE = 57538
const MONTH = 57539
const NAN = 57540
const NAME = 57541
const NAMES = 57542
const NATURAL = 57543
const NEXT = 57544
const NO = 57545
const NO_INDEX_JOIN = 57546
const NORMAL = 57547
const NOT = 57548
const NOTHING = 57549
const NULL = 57550
const NULLIF = 57551
const NULLS = 57552
const NUMERIC = 57553
const OF = 57554
const OFF = 57555
const OFFSET = 57556
const OID = 57557
const ON = 57558
const ONLY = 57559
const OPTIONS = 57560
const OR = 57561
const ORDER = 57562
const ORDINALITY = 57563
const OUT = 57564
const OUTER = 57565
const OVER = 57566
const OVERLAPS = 57567
const OVERLAY = 57568
const PARENT = 57569
const PARTIAL = 57570
const PARTITION = 57571
const PASSWORD = 57572
const PAUSE = 57573
const PLACING = 57574
const PLANS = 57575
const POSITION = 57576
const PRECEDING = 57577
const PRECISION = 57578
const PREPARE = 57579
const PRIMARY = 57580
const PRIORITY = 57581
const QUERIES = 57582
const QUERY = 57583
const RANGE = 57584
const READ = 57585
const REAL = 57586
const RECURSIVE = 57587
const REF = 57588
const REFERENCES = 57589
const REGCLASS = 57590
const REGPROC = 57591
const REGPROCEDURE = 57592
const REGNAMESPACE = 57593
const REGTYPE = 57594
const REMOVE_PATH = 57595
const RENAME = 57596
const REPEATABLE = 57597
const RELEASE = 57598
const RESET = 57599
const RESTORE = 57600
const RESTRICT = 57601
const RESUME = 57602
const RETURNING = 57603
const REVOKE = 57604
const RIGHT = 57605
const ROLLBACK = 57606
const ROLLUP = 57607
const ROW = 57608
const ROWS = 57609
const RSHIFT = 57610
const SAVEPOINT = 57611
const SCATTER = 57612
const SCRUB = 57613
const SEARCH = 57614
const SECOND = 57615
const SELECT = 57616
const SEQUENCES = 57617
const SERIAL = 57618
const SERIALIZABLE = 57619
const SESSION = 57620
const SESSIONS = 57621
const SESSION_USER = 57622
const SET = 57623
const SETTING = 57624
const SETTINGS = 57625
const SHOW = 57626
const SIMILAR = 57627
const SIMPLE = 57628
const SMALLINT = 57629
const SMALLSERIAL = 57630
const SNAPSHOT = 57631
const SOME = 57632
const SPLIT = 57633
const SQL = 57634
const START = 57635
const STATUS = 57636
const STDIN = 57637
const STRICT = 57638
const STRING = 57639
const STORE = 57640
const STORING = 57641
const SUBSTRING = 57642
const SYMMETRIC = 57643
const SYSTEM = 57644
const TABLE = 57645
const TABLES = 57646
const TEMP = 57647
const TEMPLATE = 57648
const TEMPORARY = 57649
const TESTING_RANGES = 57650
const TESTING_RELOCATE = 57651
const TEXT = 57652
const THAN = 57653
const THEN = 57654
const TIME = 57655
const TIMESTAMP = 57656
const TIMESTAMPTZ = 57657
const TO = 57658
const TRAILING = 57659
const TRACE = 57660
const TRANSACTION = 57661
const TREAT = 57662
const TRIM = 57663
const TRUE = 57664
const TRUNCATE = 57665
const TYPE = 57666
const UNBOUNDED = 57667
const UNCOMMITTED = 57668
const UNION = 57669
const UNIQUE = 57670
const UNKNOWN = 57671
const UPDATE = 57672
const UPSERT = 57673
const USE = 57674
const USER = 57675
const USERS = 57676
const USING = 57677
const UUID = 57678
const VALID = 57679
const VALIDATE = 57680
const VALUE = 57681
const VALUES = 57682
const VARCHAR = 57683
const VARIADIC = 57684
const VIEW = 57685
const VARYING = 57686
const WHEN = 57687
const WHERE = 57688
const WINDOW = 57689
const WITH = 57690
const WITHIN = 57691
const WITHOUT = 57692
const WRITE = 57693
const YEAR = 57694
const ZONE = 57695
const NOT_LA = 57696
const WITH_LA = 57697
const AS_LA = 57698
const CONTAINED_BY = 57699
const HAS_SOME_KEY = 57700
const HAS_ALL_KEYS = 57701
const POSTFIXOP = 57702
const UMINUS = 57703
const HELPTOKEN = 57704

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6880

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	382, 54,
	-2, 710,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	153, 562,
	-2, 0,
	-1, 64,
	96, 710,
	157, 710,
	330, 710,
	331, 710,
	-2, 0,
	-1, 74,
	107, 685,
	117, 685,
	165, 685,
	187, 685,
	214, 685,
	220, 685,
	327, 685,
	-2, 674,
	-1, 107,
	4, 712,
	20, 712,
	21, 712,
	23, 712,
	28, 712,
	33, 712,
	34, 712,
	35, 712,
	36, 712,
	37, 712,
	38, 712,
	39, 712,
	40, 712,
	41, 712,
	42, 712,
	44, 712,
	45, 712,
	46, 712,
	47, 712,
	48, 712,
	51, 712,
	52, 712,
	53, 712,
	55, 712,
	56, 712,
	60, 712,
	61, 712,
	62, 712,
	64, 712,
	65, 712,
	66, 712,
	67, 712,
	69, 712,
	71, 712,
	72, 712,
	75, 712,
	76, 712,
	77, 712,
	85, 712,
	86, 712,
	87, 712,
	88, 712,
	89, 712,
	90, 712,
	91, 712,
	92, 712,
	94, 712,
	96, 712,
	98, 712,
	101, 712,
	102, 712,
	104, 712,
	108, 712,
	109, 712,
	110, 712,
	111, 712,
	112, 712,
	113, 712,
	114, 712,
	122, 712,
	123, 712,
	124, 712,
	125, 712,
	126, 712,
	128, 712,
	130, 712,
	135, 712,
	136, 712,
	138, 712,
	141, 712,
	142, 712,
	145, 712,
	146, 712,
	147, 712,
	148, 712,
	151, 712,
	152, 712,
	154, 712,
	157, 712,
	158, 712,
	159, 712,
	160, 712,
	161, 712,
	162, 712,
	163, 712,
	164, 712,
	166, 712,
	169, 712,
	170, 712,
	171, 712,
	173, 712,
	174, 712,
	175, 712,
	176, 712,
	177, 712,
	179, 712,
	180, 712,
	182, 712,
	184, 712,
	185, 712,
	188, 712,
	189, 712,
	192, 712,
	194, 712,
	196, 712,
	197, 712,
	198, 712,
	199, 712,
	200, 712,
	202, 712,
	203, 712,
	204, 712,
	205, 712,
	209, 712,
	210, 712,
	211, 712,
	212, 712,
	213, 712,
	215, 712,
	217, 712,
	218, 712,
	221, 712,
	222, 712,
	224, 712,
	226, 712,
	227, 712,
	228, 712,
	229, 712,
	230, 712,
	231, 712,
	233, 712,
	234, 712,
	235, 712,
	236, 712,
	237, 712,
	239, 712,
	240, 712,
	241, 712,
	242, 712,
	243, 712,
	244, 712,
	245, 712,
	246, 712,
	248, 712,
	249, 712,
	250, 712,
	251, 712,
	252, 712,
	254, 712,
	255, 712,
	256, 712,
	257, 712,
	258, 712,
	259, 712,
	260, 712,
	262, 712,
	264, 712,
	265, 712,
	266, 712,
	267, 712,
	269, 712,
	270, 712,
	271, 712,
	272, 712,
	273, 712,
	275, 712,
	276, 712,
	277, 712,
	278, 712,
	279, 712,
	281, 712,
	282, 712,
	283, 712,
	284, 712,
	286, 712,
	287, 712,
	288, 712,
	289, 712,
	291, 712,
	292, 712,
	293, 712,
	294, 712,
	295, 712,
	296, 712,
	297, 712,
	298, 712,
	299, 712,
	300, 712,
	302, 712,
	304, 712,
	305, 712,
	306, 712,
	307, 712,
	308, 712,
	309, 712,
	310, 712,
	311, 712,
	313, 712,
	314, 712,
	315, 712,
	318, 712,
	319, 712,
	320, 712,
	321, 712,
	323, 712,
	324, 712,
	325, 712,
	326, 712,
	329, 712,
	330, 712,
	331, 712,
	332, 712,
	334, 712,
	336, 712,
	337, 712,
	338, 712,
	339, 712,
	340, 712,
	341, 712,
	344, 712,
	349, 712,
	350, 712,
	351, 712,
	352, 712,
	353, 712,
	-2, 0,
	-1, 124,
	107, 684,
	117, 684,
	165, 684,
	187, 684,
	214, 684,
	220, 684,
	327, 684,
	-2, 677,
	-1, 129,
	1, 611,
	169, 611,
	239, 611,
	243, 611,
	381, 611,
	382, 611,
	-2, 0,
	-1, 131,
	1, 611,
	381, 611,
	382, 611,
	-2, 0,
	-1, 132,
	1, 611,
	381, 611,
	382, 611,
	-2, 0,
	-1, 133,
	1, 615,
	381, 615,
	382, 615,
	-2, 0,
	-1, 140,
	4, 718,
	5, 718,
	6, 718,
	7, 718,
	8, 718,
	9, 718,
	20, 718,
	21, 718,
	23, 718,
	28, 718,
	29, 718,
	33, 718,
	34, 718,
	35, 718,
	36, 718,
	37, 718,
	38, 718,
	39, 718,
	40, 718,
	41, 718,
	42, 718,
	44, 718,
	45, 718,
	46, 718,
	47, 718,
	48, 718,
	49, 718,
	50, 718,
	51, 718,
	52, 718,
	53, 718,
	55, 718,
	56, 718,
	58, 718,
	60, 718,
	61, 718,
	62, 718,
	64, 718,
	65, 718,
	66, 718,
	67, 718,
	69, 718,
	71, 718,
	72, 718,
	74, 718,
	75, 718,
	76, 718,
	77, 718,
	79, 718,
	80, 718,
	81, 718,
	83, 718,
	84, 718,
	85, 718,
	86, 718,
	87, 718,
	88, 718,
	89, 718,
	90, 718,
	91, 718,
	92, 718,
	94, 718,
	96, 718,
	98, 718,
	101, 718,
	102, 718,
	104, 718,
	108, 718,
	109, 718,
	110, 718,
	111, 718,
	112, 718,
	113, 718,
	114, 718,
	115, 718,
	116, 718,
	122, 718,
	123, 718,
	124, 718,
	125, 718,
	126, 718,
	128, 718,
	130, 718,
	133, 718,
	135, 718,
	136, 718,
	138, 718,
	141, 718,
	142, 718,
	145, 718,
	146, 718,
	147, 718,
	148, 718,
	149, 718,
	151, 718,
	152, 718,
	154, 718,
	156, 718,
	157, 718,
	158, 718,
	159, 718,
	160, 718,
	161, 718,
	162, 718,
	163, 718,
	164, 718,
	166, 718,
	168, 718,
	169, 718,
	170, 718,
	171, 718,
	172, 718,
	173, 718,
	174, 718,
	175, 718,
	176, 718,
	177, 718,
	179, 718,
	180, 718,
	182, 718,
	183, 718,
	184, 718,
	185, 718,
	186, 718,
	188, 718,
	189, 718,
	192, 718,
	194, 718,
	195, 718,
	196, 718,
	197, 718,
	198, 718,
	199, 718,
	200, 718,
	201, 718,
	202, 718,
	203, 718,
	204, 718,
	205, 718,
	206, 718,
	208, 718,
	209, 718,
	210, 718,
	211, 718,
	212, 718,
	213, 718,
	215, 718,
	218, 718,
	221, 718,
	222, 718,
	223, 718,
	224, 718,
	225, 718,
	226, 718,
	227, 718,
	228, 718,
	229, 718,
	230, 718,
	231, 718,
	233, 718,
	234, 718,
	235, 718,
	236, 718,
	237, 718,
	239, 718,
	240, 718,
	241, 718,
	242, 718,
	243, 718,
	244, 718,
	245, 718,
	246, 718,
	248, 718,
	249, 718,
	250, 718,
	251, 718,
	252, 718,
	254, 718,
	255, 718,
	256, 718,
	257, 718,
	258, 718,
	259, 718,
	260, 718,
	262, 718,
	263, 718,
	264, 718,
	265, 718,
	266, 718,
	267, 718,
	269, 718,
	270, 718,
	271, 718,
	272, 718,
	273, 718,
	275, 718,
	276, 718,
	277, 718,
	278, 718,
	279, 718,
	280, 718,
	281, 718,
	282, 718,
	283, 718,
	284, 718,
	285, 718,
	286, 718,
	287, 718,
	288, 718,
	289, 718,
	291, 718,
	292, 718,
	293, 718,
	294, 718,
	295, 718,
	296, 718,
	297, 718,
	298, 718,
	299, 718,
	300, 718,
	302, 718,
	304, 718,
	305, 718,
	306, 718,
	307, 718,
	308, 718,
	309, 718,
	310, 718,
	311, 718,
	313, 718,
	314, 718,
	315, 718,
	318, 718,
	319, 718,
	320, 718,
	321, 718,
	322, 718,
	323, 718,
	324, 718,
	325, 718,
	326, 718,
	329, 718,
	330, 718,
	331, 718,
	332, 718,
	333, 718,
	334, 718,
	336, 718,
	337, 718,
	338, 718,
	339, 718,
	340, 718,
	341, 718,
	344, 718,
	349, 718,
	350, 718,
	351, 718,
	352, 718,
	353, 718,
	354, 718,
	364, 718,
	369, 718,
	370, 718,
	371, 718,
	378, 718,
	384, 718,
	-2, 0,
	-1, 143,
	1, 54,
	382, 54,
	-2, 710,
	-1, 515,
	132, 1327,
	316, 1327,
	359, 1327,
	380, 1327,
	-2, 0,
	-1, 516,
	132, 1274,
	316, 1274,
	359, 1274,
	380, 1274,
	-2, 0,
	-1, 518,
	132, 1386,
	316, 1386,
	359, 1386,
	380, 1386,
	-2, 0,
	-1, 520,
	132, 1409,
	316, 1409,
	359, 1409,
	380, 1409,
	-2, 0,
	-1, 527,
	132, 1332,
	316, 1332,
	359, 1332,
	380, 1332,
	-2, 331,
	-1, 553,
	1, 409,
	377, 409,
	379, 409,
	381, 409,
	382, 409,
	-2, 0,
	-1, 554,
	1, 461,
	129, 461,
	377, 461,
	379, 461,
	381, 461,
	382, 461,
	-2, 0,
	-1, 560,
	1, 423,
	377, 423,
	379, 423,
	381, 423,
	382, 423,
	-2, 0,
	-1, 562,
	1, 427,
	377, 427,
	379, 427,
	381, 427,
	382, 427,
	-2, 0,
	-1, 565,
	1, 435,
	377, 435,
	379, 435,
	381, 435,
	382, 435,
	-2, 0,
	-1, 566,
	1, 440,
	377, 440,
	379, 440,
	381, 440,
	382, 440,
	-2, 0,
	-1, 569,
	1, 450,
	377, 450,
	379, 450,
	381, 450,
	382, 450,
	-2, 0,
	-1, 585,
	117, 720,
	187, 720,
	214, 720,
	-2, 680,
	-1, 588,
	117, 719,
	187, 719,
	214, 719,
	-2, 678,
	-1, 645,
	378, 1252,
	-2, 1245,
	-1, 646,
	378, 1253,
	-2, 1246,
	-1, 652,
	5, 899,
	378, 899,
	-2, 1461,
	-1, 677,
	5, 858,
	-2, 1430,
	-1, 678,
	5, 893,
	378, 893,
	-2, 1432,
	-1, 679,
	5, 868,
	-2, 1433,
	-1, 680,
	5, 867,
	-2, 1434,
	-1, 681,
	5, 893,
	378, 893,
	-2, 1437,
	-1, 682,
	5, 893,
	378, 893,
	-2, 1438,
	-1, 683,
	5, 894,
	-2, 1441,
	-1, 684,
	5, 850,
	-2, 1442,
	-1, 685,
	5, 850,
	-2, 1443,
	-1, 686,
	5, 875,
	-2, 1447,
	-1, 687,
	5, 860,
	-2, 1448,
	-1, 688,
	5, 861,
	-2, 1449,
	-1, 689,
	5, 851,
	-2, 1455,
	-1, 690,
	5, 852,
	-2, 1456,
	-1, 691,
	5, 853,
	-2, 1457,
	-1, 692,
	5, 854,
	-2, 1458,
	-1, 693,
	5, 855,
	-2, 1459,
	-1, 694,
	5, 856,
	-2, 1460,
	-1, 695,
	5, 850,
	-2, 1467,
	-1, 696,
	5, 859,
	-2, 1472,
	-1, 697,
	5, 857,
	-2, 1475,
	-1, 698,
	5, 891,
	378, 891,
	-2, 1477,
	-1, 699,
	5, 895,
	-2, 1480,
	-1, 700,
	5, 897,
	-2, 1481,
	-1, 701,
	5, 890,
	378, 890,
	-2, 1486,
	-1, 886,
	230, 708,
	-2, 555,
	-1, 890,
	216, 1249,
	-2, 0,
	-1, 925,
	1, 216,
	377, 216,
	379, 216,
	381, 216,
	382, 216,
	-2, 683,
	-1, 932,
	4, 1485,
	10, 1485,
	11, 1485,
	13, 1485,
	14, 1485,
	15, 1485,
	16, 1485,
	17, 1485,
	18, 1485,
	20, 1485,
	21, 1485,
	23, 1485,
	26, 1485,
	28, 1485,
	30, 1485,
	33, 1485,
	34, 1485,
	35, 1485,
	36, 1485,
	37, 1485,
	38, 1485,
	39, 1485,
	40, 1485,
	41, 1485,
	42, 1485,
	44, 1485,
	45, 1485,
	46, 1485,
	47, 1485,
	48, 1485,
	51, 1485,
	52, 1485,
	53, 1485,
	55, 1485,
	56, 1485,
	57, 1485,
	60, 1485,
	61, 1485,
	62, 1485,
	63, 1485,
	64, 1485,
	65, 1485,
	66, 1485,
	67, 1485,
	69, 1485,
	70, 1485,
	71, 1485,
	72, 1485,
	74, 1485,
	75, 1485,
	76, 1485,
	77, 1485,
	85, 1485,
	86, 1485,
	87, 1485,
	88, 1485,
	89, 1485,
	90, 1485,
	91, 1485,
	92, 1485,
	94, 1485,
	96, 1485,
	98, 1485,
	101, 1485,
	102, 1485,
	104, 1485,
	108, 1485,
	109, 1485,
	110, 1485,
	111, 1485,
	112, 1485,
	113, 1485,
	114, 1485,
	118, 1485,
	119, 1485,
	120, 1485,
	121, 1485,
	122, 1485,
	123, 1485,
	124, 1485,
	125, 1485,
	126, 1485,
	127, 1485,
	128, 1485,
	130, 1485,
	133, 1485,
	135, 1485,
	136, 1485,
	138, 1485,
	141, 1485,
	142, 1485,
	145, 1485,
	146, 1485,
	147, 1485,
	148, 1485,
	149, 1485,
	150, 1485,
	151, 1485,
	152, 1485,
	154, 1485,
	156, 1485,
	157, 1485,
	158, 1485,
	159, 1485,
	160, 1485,
	161, 1485,
	162, 1485,
	163, 1485,
	164, 1485,
	166, 1485,
	168, 1485,
	169, 1485,
	170, 1485,
	171, 1485,
	172, 1485,
	173, 1485,
	174, 1485,
	175, 1485,
	176, 1485,
	177, 1485,
	179, 1485,
	180, 1485,
	182, 1485,
	183, 1485,
	184, 1485,
	185, 1485,
	186, 1485,
	188, 1485,
	189, 1485,
	192, 1485,
	193, 1485,
	194, 1485,
	196, 1485,
	197, 1485,
	198, 1485,
	199, 1485,
	200, 1485,
	201, 1485,
	202, 1485,
	203, 1485,
	204, 1485,
	205, 1485,
	209, 1485,
	210, 1485,
	211, 1485,
	212, 1485,
	213, 1485,
	215, 1485,
	218, 1485,
	219, 1485,
	221, 1485,
	222, 1485,
	224, 1485,
	226, 1485,
	227, 1485,
	228, 1485,
	229, 1485,
	230, 1485,
	231, 1485,
	233, 1485,
	234, 1485,
	235, 1485,
	236, 1485,
	237, 1485,
	239, 1485,
	240, 1485,
	241, 1485,
	242, 1485,
	243, 1485,
	244, 1485,
	245, 1485,
	246, 1485,
	248, 1485,
	249, 1485,
	250, 1485,
	251, 1485,
	252, 1485,
	253, 1485,
	254, 1485,
	255, 1485,
	256, 1485,
	257, 1485,
	258, 1485,
	259, 1485,
	260, 1485,
	262, 1485,
	263, 1485,
	264, 1485,
	265, 1485,
	266, 1485,
	267, 1485,
	268, 1485,
	269, 1485,
	270, 1485,
	271, 1485,
	272, 1485,
	273, 1485,
	275, 1485,
	276, 1485,
	277, 1485,
	278, 1485,
	279, 1485,
	281, 1485,
	282, 1485,
	283, 1485,
	284, 1485,
	285, 1485,
	286, 1485,
	287, 1485,
	288, 1485,
	289, 1485,
	291, 1485,
	292, 1485,
	293, 1485,
	294, 1485,
	295, 1485,
	296, 1485,
	297, 1485,
	298, 1485,
	299, 1485,
	300, 1485,
	302, 1485,
	304, 1485,
	305, 1485,
	306, 1485,
	307, 1485,
	308, 1485,
	309, 1485,
	310, 1485,
	311, 1485,
	313, 1485,
	314, 1485,
	315, 1485,
	318, 1485,
	319, 1485,
	320, 1485,
	321, 1485,
	323, 1485,
	324, 1485,
	325, 1485,
	326, 1485,
	329, 1485,
	330, 1485,
	331, 1485,
	332, 1485,
	334, 1485,
	336, 1485,
	337, 1485,
	338, 1485,
	339, 1485,
	340, 1485,
	341, 1485,
	344, 1485,
	349, 1485,
	350, 1485,
	351, 1485,
	352, 1485,
	353, 1485,
	354, 1485,
	355, 1485,
	357, 1485,
	358, 1485,
	359, 1485,
	360, 1485,
	361, 1485,
	362, 1485,
	363, 1485,
	364, 1485,
	366, 1485,
	367, 1485,
	368, 1485,
	369, 1485,
	370, 1485,
	371, 1485,
	372, 1485,
	373, 1485,
	374, 1485,
	376, 1485,
	379, 1485,
	380, 1485,
	383, 1485,
	384, 1485,
	-2, 0,
	-1, 945,
	132, 1386,
	316, 1386,
	359, 1386,
	380, 1386,
	-2, 0,
	-1, 962,
	132, 1409,
	316, 1409,
	359, 1409,
	380, 1409,
	-2, 0,
	-1, 963,
	169, 623,
	239, 623,
	243, 623,
	-2, 319,
	-1, 1035,
	117, 719,
	187, 719,
	214, 719,
	-2, 681,
	-1, 1114,
	107, 685,
	117, 685,
	165, 685,
	187, 685,
	214, 685,
	220, 685,
	327, 685,
	-2, 1028,
	-1, 1124,
	378, 1229,
	-2, 1217,
	-1, 1142,
	379, 1141,
	-2, 0,
	-1, 1166,
	169, 623,
	239, 623,
	243, 623,
	-2, 618,
	-1, 1194,
	379, 1141,
	-2, 0,
	-1, 1198,
	107, 685,
	117, 685,
	165, 685,
	187, 685,
	214, 685,
	220, 685,
	327, 685,
	-2, 781,
	-1, 1340,
	169, 623,
	239, 623,
	243, 623,
	-2, 321,
	-1, 1442,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 934,
	-1, 1443,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 935,
	-1, 1444,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 936,
	-1, 1445,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 937,
	-1, 1446,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 938,
	-1, 1447,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 939,
	-1, 1448,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 940,
	-1, 1449,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 941,
	-1, 1458,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 950,
	-1, 1459,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 951,
	-1, 1460,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 952,
	-1, 1463,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 957,
	-1, 1469,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 959,
	-1, 1471,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 963,
	-1, 1472,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 964,
	-1, 1473,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 965,
	-1, 1474,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 966,
	-1, 1543,
	132, 1152,
	378, 1252,
	-2, 1245,
	-1, 1544,
	132, 1153,
	-2, 1426,
	-1, 1545,
	132, 1154,
	-2, 1331,
	-1, 1546,
	132, 1155,
	-2, 1292,
	-1, 1547,
	132, 1156,
	-2, 1309,
	-1, 1548,
	132, 1157,
	-2, 1330,
	-1, 1549,
	132, 1158,
	-2, 1383,
	-1, 1625,
	1, 782,
	74, 782,
	107, 782,
	117, 782,
	133, 782,
	137, 782,
	139, 782,
	156, 782,
	165, 782,
	172, 782,
	183, 782,
	187, 782,
	201, 782,
	214, 782,
	216, 782,
	220, 782,
	261, 782,
	263, 782,
	327, 782,
	335, 782,
	346, 782,
	347, 782,
	356, 782,
	377, 782,
	379, 782,
	381, 782,
	382, 782,
	383, 782,
	-2, 781,
	-1, 1771,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 958,
	-1, 1772,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 960,
	-1, 1777,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 961,
	-1, 1795,
	225, 1112,
	-2, 1114,
	-1, 2029,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 962,
	-1, 2034,
	168, 0,
	-2, 978,
	-1, 2043,
	225, 1113,
	-2, 1115,
	-1, 2085,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1005,
	-1, 2086,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1006,
	-1, 2087,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1007,
	-1, 2091,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1011,
	-1, 2092,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1012,
	-1, 2093,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1013,
	-1, 2226,
	168, 0,
	-2, 979,
	-1, 2229,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 982,
	-1, 2230,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 984,
	-1, 2351,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 983,
	-1, 2352,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 985,
	-1, 2359,
	168, 0,
	-2, 1014,
	-1, 2436,
	168, 0,
	-2, 1015,
	-1, 2517,
	36, 0,
	149, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 1429,
	-1, 2603,
	378, 1497,
	-2, 496,
}

const sqlPrivate = 57344

const sqlLast = 44209

var sqlAct = [...]int{

	646, 2585, 2599, 2321, 2320, 2600, 2583, 2178, 2516, 2525,
	2489, 2566, 2526, 1691, 2527, 2385, 2005, 1699, 2331, 1238,
	2062, 183, 2441, 2515, 2188, 605, 644, 1245, 73, 1335,
	2212, 750, 2280, 2210, 880, 1334, 2365, 2018, 1620, 609,
	589, 1765, 182, 777, 1909, 1971, 1196, 182, 2294, 2145,
	1888, 622, 2260, 1192, 2204, 182, 1861, 1700, 1241, 1280,
	1638, 983, 1674, 1175, 182, 1621, 1675, 1688, 1629, 182,
	182, 1896, 1664, 182, 1670, 2115, 182, 1258, 457, 1973,
	597, 123, 1806, 1860, 182, 472, 26, 1421, 1416, 1761,
	1365, 966, 1979, 1746, 1120, 1038, 1201, 1498, 1206, 1176,
	1204, 1486, 1234, 1572, 1507, 616, 1523, 1483, 1361, 965,
	1499, 756, 915, 643, 454, 1152, 1156, 1517, 1678, 1672,
	1693, 985, 1607, 759, 926, 506, 526, 1183, 2144, 1594,
	738, 1109, 912, 1539, 615, 182, 182, 1039, 905, 124,
	1671, 1037, 173, 182, 125, 123, 1364, 638, 1166, 1252,
	484, 902, 178, 519, 736, 594, 1165, 547, 1043, 2295,
	2129, 1794, 1260, 2130, 1692, 1260, 1260, 593, 2322, 182,
	182, 182, 182, 779, 593, 2616, 2615, 182, 182, 2609,
	2609, 2608, 2322, 2562, 2561, 2609, 2560, 1229, 1229, 2542,
	1229, 2537, 2536, 2293, 780, 1714, 1714, 2621, 2533, 2513,
	2512, 1988, 1229, 1729, 1729, 2607, 1831, 1832, 588, 1849,
	1850, 1851, 498, 2484, 2479, 1193, 2475, 1722, 2345, 603,
	1229, 2467, 2438, 2027, 123, 2293, 1722, 1281, 2416, 26,
	2413, 2411, 2293, 1500, 1229, 2293, 2396, 2395, 2373, 753,
	1229, 2293, 1229, 1989, 1596, 2370, 1225, 1054, 1055, 1229,
	1084, 1085, 1086, 1094, 1095, 1096, 636, 2353, 2316, 1846,
	2314, 1722, 1714, 586, 1714, 2292, 1665, 2273, 585, 2293,
	1057, 1229, 2228, 1098, 2203, 2198, 1722, 1714, 1669, 1669,
	764, 768, 1054, 1055, 774, 598, 2485, 2125, 2038, 1798,
	740, 2126, 1714, 2118, 1056, 1799, 1729, 1999, 1054, 1055,
	1076, 1961, 1960, 2345, 1885, 1057, 1229, 1073, 1229, 1878,
	1876, 1875, 1874, 1879, 1714, 1714, 1714, 1665, 868, 2118,
	1733, 1057, 2617, 1837, 1714, 1595, 2216, 1054, 1055, 1056,
	1714, 742, 2016, 743, 1721, 1076, 2596, 1805, 1722, 1713,
	1627, 2098, 1668, 1714, 1729, 1056, 1669, 1601, 1273, 2040,
	1057, 1600, 1274, 1229, 1961, 1079, 1080, 1081, 1082, 1054,
	1055, 1764, 1744, 1343, 1062, 1094, 1095, 1096, 702, 1170,
	1502, 866, 947, 1261, 1056, 143, 1261, 1261, 2296, 140,
	944, 943, 1057, 942, 941, 1098, 1091, 1099, 940, 1847,
	1079, 1080, 1081, 1082, 939, 938, 1362, 937, 936, 1062,
	935, 934, 933, 744, 741, 1097, 1056, 579, 142, 578,
	577, 545, 1076, 544, 543, 1062, 542, 541, 540, 182,
	539, 182, 182, 1089, 182, 538, 537, 41, 536, 182,
	1077, 535, 534, 533, 532, 182, 531, 1520, 530, 529,
	44, 514, 513, 512, 1062, 141, 511, 510, 182, 182,
	182, 182, 182, 445, 596, 444, 523, 929, 443, 1054,
	1055, 442, 441, 426, 1848, 1077, 425, 1079, 1080, 1081,
	1082, 417, 416, 415, 414, 407, 1062, 406, 930, 182,
	166, 1077, 1057, 126, 1696, 594, 1904, 165, 164, 1521,
	1083, 163, 1536, 182, 1988, 1595, 162, 1266, 1091, 1099,
	1259, 1396, 161, 160, 479, 1078, 1056, 159, 158, 182,
	1077, 157, 156, 1054, 1055, 155, 154, 153, 152, 182,
	151, 150, 1092, 149, 148, 1083, 147, 146, 145, 144,
	872, 1368, 1534, 1197, 1532, 1089, 1057, 978, 66, 2589,
	1078, 781, 1077, 1522, 1519, 884, 904, 1530, 888, 2584,
	929, 2587, 2532, 1843, 1844, 1845, 1078, 1050, 2514, 2499,
	1056, 2494, 1842, 1840, 1841, 1833, 1834, 1835, 1836, 1838,
	1839, 930, 879, 2433, 908, 908, 1062, 2414, 927, 981,
	2259, 182, 2258, 2338, 2254, 1078, 2253, 909, 2246, 2245,
	2244, 1090, 919, 2240, 1068, 1069, 1075, 1074, 1070, 1071,
	1072, 1093, 1083, 1067, 1065, 1066, 1058, 1059, 1060, 1061,
	1063, 1064, 2239, 2238, 2237, 2231, 1963, 1078, 976, 948,
	1524, 2209, 2112, 2107, 67, 2106, 1036, 2105, 2048, 1959,
	1062, 1916, 1912, 1883, 1092, 1880, 1868, 1859, 1067, 1065,
	1066, 1058, 1059, 1060, 1061, 1063, 1064, 1830, 1827, 594,
	127, 69, 1826, 70, 1067, 1065, 1066, 1058, 1059, 1060,
	1061, 1063, 1064, 1824, 1811, 140, 1810, 140, 1035, 963,
	1795, 1625, 960, 1050, 478, 1277, 1494, 103, 1128, 1831,
	1832, 1049, 1849, 1850, 1851, 1066, 1058, 1059, 1060, 1061,
	1063, 1064, 1031, 877, 142, 2225, 142, 1195, 2606, 1518,
	751, 872, 2610, 1090, 1194, 2594, 979, 1831, 1832, 2574,
	1849, 1850, 1851, 1093, 2573, 1067, 1065, 1066, 1058, 1059,
	1060, 1061, 1063, 1064, 1244, 1727, 140, 140, 1121, 2064,
	1112, 141, 1846, 141, 2504, 2503, 182, 586, 182, 134,
	2502, 134, 585, 1831, 1832, 2337, 135, 2470, 135, 2462,
	1046, 1047, 2461, 2452, 2450, 142, 142, 1051, 1363, 1760,
	1846, 182, 182, 2428, 2427, 2426, 2382, 1759, 2361, 1695,
	2346, 126, 2325, 2313, 2299, 1174, 2251, 2186, 1181, 2184,
	2183, 2181, 2153, 2152, 2133, 2121, 1831, 1832, 1495, 594,
	2033, 1124, 141, 141, 1949, 1943, 1837, 1154, 1155, 1929,
	134, 134, 1158, 1054, 1055, 2003, 1928, 135, 135, 1914,
	1179, 1884, 1161, 1858, 1820, 1819, 1816, 1791, 1058, 1059,
	1060, 1061, 1063, 1064, 1837, 931, 1057, 1195, 1786, 1488,
	126, 126, 1157, 1160, 1054, 1055, 123, 1852, 1612, 1584,
	1528, 1929, 1237, 752, 1173, 1164, 1150, 1853, 1149, 1148,
	1056, 1147, 1146, 1145, 1116, 1144, 1143, 1057, 1902, 1142,
	1837, 1169, 1847, 1141, 1140, 1852, 929, 182, 2444, 1535,
	1191, 1139, 1138, 779, 1060, 1061, 1063, 1064, 1137, 182,
	1136, 1056, 1135, 1167, 1199, 1134, 1133, 930, 1132, 1125,
	1847, 182, 1171, 1113, 780, 1227, 1112, 182, 959, 182,
	951, 182, 923, 1837, 2344, 182, 2233, 1724, 1243, 1533,
	2208, 1531, 2128, 2124, 1236, 1797, 1230, 1613, 931, 1121,
	1062, 1831, 1832, 2001, 1529, 1110, 975, 1732, 1974, 2348,
	2347, 2341, 1353, 1352, 2131, 1362, 1359, 1848, 1990, 878,
	1162, 1665, 1197, 1349, 1029, 1163, 182, 182, 1952, 1034,
	1249, 1946, 1942, 929, 1882, 182, 1831, 1832, 182, 1881,
	1770, 1400, 972, 1130, 2006, 1848, 1242, 1754, 2366, 1692,
	1731, 2065, 1508, 1153, 930, 1802, 2592, 1023, 2591, 779,
	1278, 1984, 2140, 2497, 1718, 431, 1077, 1263, 182, 2558,
	1265, 2557, 1214, 182, 1268, 2474, 2307, 1734, 182, 182,
	780, 182, 419, 182, 2407, 182, 1015, 182, 904, 2406,
	2404, 2403, 2013, 731, 1207, 729, 1208, 1024, 182, 1228,
	639, 1356, 1369, 592, 182, 182, 1843, 1844, 1845, 727,
	2172, 733, 724, 182, 2169, 1842, 1840, 1841, 1833, 1834,
	1835, 1836, 1838, 1839, 2137, 2136, 432, 1815, 1251, 1631,
	1254, 1127, 1814, 182, 1843, 1844, 1845, 779, 2164, 1813,
	1639, 1078, 1812, 1842, 1840, 1841, 1833, 1834, 1835, 1836,
	1838, 1839, 1773, 1837, 1717, 1660, 752, 1350, 780, 1631,
	1656, 591, 1411, 1653, 1470, 704, 1168, 423, 1630, 1275,
	865, 2319, 703, 123, 1328, 1209, 1588, 1336, 1276, 960,
	1430, 2604, 1833, 1834, 1835, 1836, 1838, 1839, 1395, 1587,
	973, 1340, 1431, 1689, 1370, 167, 581, 1357, 2473, 1394,
	1354, 1366, 1393, 1032, 1207, 2176, 1208, 1384, 493, 1831,
	1832, 2177, 1849, 1850, 1851, 1403, 593, 1642, 1956, 1847,
	1377, 594, 446, 2387, 1520, 2224, 594, 1835, 1836, 1838,
	1839, 1215, 1223, 974, 1485, 1232, 1373, 1271, 584, 1236,
	2155, 1272, 1058, 1059, 1060, 1061, 1063, 1064, 1222, 182,
	1485, 182, 1212, 2510, 182, 2002, 1402, 1255, 1401, 1524,
	2549, 1558, 1846, 586, 1981, 182, 586, 586, 1412, 1220,
	1213, 1413, 1414, 1338, 779, 1951, 1521, 182, 1064, 2481,
	170, 182, 1762, 1763, 182, 1209, 1945, 1221, 182, 2529,
	2021, 1207, 182, 1208, 1848, 780, 1505, 1508, 182, 434,
	433, 2569, 988, 2557, 2482, 182, 779, 450, 1492, 594,
	182, 2058, 1503, 1490, 931, 1022, 583, 1615, 182, 1614,
	1496, 781, 1493, 590, 1641, 182, 1837, 780, 1216, 584,
	1522, 1519, 1195, 1567, 1725, 1982, 182, 1053, 182, 958,
	182, 1557, 2455, 182, 2014, 182, 171, 182, 182, 1662,
	182, 182, 1392, 1550, 1632, 929, 2012, 1643, 1645, 182,
	1033, 1604, 1422, 1429, 1341, 1839, 2288, 1852, 2463, 1151,
	607, 1218, 1209, 449, 1590, 1028, 930, 1363, 1360, 1650,
	1981, 1591, 1009, 418, 2530, 1618, 2162, 1658, 1524, 1599,
	1609, 1610, 1847, 1605, 1593, 1833, 1834, 1835, 1836, 1838,
	1839, 931, 1014, 1648, 1199, 2289, 1635, 1524, 424, 1654,
	725, 1210, 725, 420, 1640, 2548, 1628, 1661, 1694, 2156,
	1694, 1010, 2464, 421, 2586, 735, 726, 781, 734, 725,
	1684, 1116, 1831, 1832, 123, 172, 2576, 1940, 1720, 1510,
	123, 440, 2531, 2584, 2357, 2020, 1260, 1107, 2322, 779,
	2388, 2410, 1542, 1542, 1555, 1698, 2567, 182, 1575, 1709,
	1818, 435, 1579, 1580, 1582, 1608, 1706, 1848, 1715, 908,
	780, 908, 1624, 182, 182, 182, 927, 182, 1719, 1716,
	1710, 1707, 1019, 1708, 503, 1726, 1518, 1728, 593, 2220,
	2528, 1712, 1745, 2055, 1337, 2556, 168, 582, 2554, 1737,
	182, 2330, 964, 1775, 482, 781, 2022, 969, 996, 492,
	1686, 1739, 2568, 1158, 1219, 1161, 1182, 1372, 2284, 1484,
	2285, 1210, 2547, 448, 1205, 954, 1155, 1154, 1481, 1374,
	946, 969, 1735, 1740, 2570, 1378, 169, 1379, 1042, 1380,
	989, 1381, 1955, 1382, 1479, 1738, 123, 2056, 1467, 1837,
	2287, 1041, 1020, 451, 2249, 485, 1843, 1844, 1845, 2290,
	1388, 1390, 485, 447, 408, 1842, 1840, 1841, 1833, 1834,
	1835, 1836, 1838, 1839, 2582, 1186, 1491, 970, 490, 990,
	1749, 971, 987, 1186, 486, 490, 1751, 2398, 1753, 1420,
	2397, 486, 2380, 2447, 2094, 1783, 1758, 594, 1189, 2139,
	1925, 970, 1921, 1558, 1558, 971, 1189, 1021, 1210, 1348,
	1687, 1781, 1250, 651, 1184, 1847, 487, 1052, 2303, 957,
	1239, 1040, 1606, 487, 1524, 1187, 706, 1475, 1910, 2306,
	2054, 1804, 2490, 1187, 1387, 1476, 2305, 1477, 1344, 489,
	2286, 1482, 781, 1185, 2595, 2189, 489, 2577, 1042, 1041,
	1776, 873, 875, 1054, 1055, 1774, 2332, 1261, 1898, 1408,
	1346, 1465, 1468, 882, 881, 2381, 1931, 2250, 175, 969,
	501, 594, 436, 1347, 781, 1790, 1057, 182, 779, 1558,
	1558, 1558, 1930, 182, 182, 1768, 1899, 182, 1886, 2581,
	1848, 1801, 182, 1892, 1778, 182, 1603, 969, 1464, 780,
	1056, 2095, 1911, 182, 1779, 1188, 1893, 2096, 1784, 182,
	182, 182, 1602, 1188, 437, 182, 901, 572, 182, 1040,
	591, 1891, 997, 931, 182, 182, 182, 182, 182, 495,
	2019, 2302, 409, 1906, 182, 602, 949, 182, 1409, 970,
	1905, 182, 953, 971, 438, 980, 439, 572, 890, 2304,
	182, 1478, 1915, 1865, 1866, 1867, 488, 1901, 1480, 899,
	182, 2179, 182, 488, 182, 602, 2323, 182, 1954, 607,
	1062, 182, 2261, 1890, 2378, 1887, 182, 1897, 182, 1894,
	1895, 1922, 2116, 1900, 1527, 182, 2360, 1962, 3, 1964,
	1841, 1833, 1834, 1835, 1836, 1838, 1839, 1466, 182, 929,
	573, 1018, 1789, 410, 594, 2379, 1917, 477, 34, 1792,
	929, 182, 491, 2248, 1182, 1941, 2175, 781, 1780, 491,
	930, 1862, 600, 1948, 572, 1782, 1808, 1809, 1998, 1939,
	573, 930, 476, 33, 475, 30, 1077, 2032, 500, 2007,
	474, 79, 602, 870, 871, 867, 1863, 1007, 1965, 182,
	1957, 1968, 1102, 1103, 1104, 1105, 1106, 1825, 1785, 1005,
	473, 78, 1115, 470, 22, 1992, 1993, 1977, 1994, 1995,
	1730, 1986, 1123, 1186, 1667, 601, 1857, 1659, 1983, 1652,
	705, 900, 1027, 1575, 1575, 1575, 648, 1991, 1870, 1526,
	1966, 1997, 1026, 952, 1558, 1558, 1189, 494, 1755, 182,
	1385, 723, 2009, 2010, 2008, 1003, 2011, 573, 1001, 471,
	23, 1078, 1184, 574, 1376, 2015, 469, 28, 468, 20,
	466, 19, 1131, 1187, 898, 999, 2035, 2023, 2050, 2051,
	2052, 1017, 762, 2025, 2524, 467, 18, 993, 461, 15,
	1226, 1185, 897, 574, 1926, 2487, 462, 16, 460, 14,
	1013, 34, 2277, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
	1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
	1558, 1558, 2041, 1558, 2044, 2160, 33, 1006, 30, 2158,
	182, 1926, 2039, 2066, 79, 2138, 182, 1177, 1177, 1004,
	2068, 1970, 2071, 575, 607, 182, 182, 2100, 1690, 2073,
	2057, 2059, 2060, 1188, 78, 1683, 1270, 22, 465, 12,
	1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064, 459, 10,
	574, 464, 7, 575, 2127, 2101, 576, 463, 6, 1269,
	2000, 458, 5, 728, 730, 1002, 2150, 1267, 1000, 2132,
	1264, 2117, 182, 2114, 182, 123, 781, 2120, 2119, 2099,
	2174, 182, 1287, 23, 929, 998, 576, 1262, 1224, 1217,
	28, 2135, 20, 1211, 19, 2045, 2185, 992, 2142, 182,
	182, 2182, 896, 1358, 2165, 930, 2123, 1012, 2170, 18,
	1972, 2199, 15, 2421, 2173, 747, 1044, 182, 1766, 2163,
	16, 2558, 14, 2159, 2343, 2161, 2202, 182, 599, 2342,
	575, 779, 182, 182, 2180, 748, 1367, 2205, 779, 480,
	1631, 2423, 1631, 1647, 2192, 2191, 2197, 1322, 1663, 1646,
	2201, 1644, 780, 2149, 1321, 2195, 2200, 1655, 1651, 780,
	1422, 2069, 2190, 576, 2206, 2134, 1398, 1399, 1756, 1422,
	2074, 1054, 1055, 2457, 2217, 182, 1054, 1055, 2222, 2193,
	2296, 2223, 12, 2194, 1767, 1287, 1287, 991, 2435, 2409,
	2262, 1048, 10, 1045, 1057, 7, 1890, 931, 1657, 2486,
	1649, 6, 2104, 2227, 2328, 5, 1697, 1685, 931, 1682,
	1592, 502, 749, 2108, 1339, 1279, 2565, 2580, 1056, 1831,
	1832, 1054, 1055, 1056, 1742, 1741, 2372, 2267, 2207, 182,
	2113, 2061, 182, 1742, 2004, 1907, 1877, 1743, 2247, 1589,
	1586, 1585, 779, 182, 182, 607, 607, 182, 182, 182,
	1322, 1322, 1516, 1118, 2235, 2053, 1967, 1321, 1321, 1128,
	1126, 1025, 1016, 780, 182, 1011, 1008, 994, 956, 182,
	1342, 182, 580, 182, 182, 182, 2386, 483, 1375, 995,
	182, 2271, 2264, 182, 2268, 2269, 929, 2168, 2266, 2150,
	1903, 1611, 2480, 2171, 182, 182, 2151, 2241, 1817, 2440,
	2356, 929, 1525, 1129, 55, 2147, 2297, 930, 625, 2166,
	2278, 2141, 1405, 2166, 1410, 2276, 1677, 1676, 2150, 2166,
	1417, 2318, 930, 2150, 782, 2263, 1351, 647, 1541, 1423,
	1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441,
	1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451,
	1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461,
	1462, 1463, 2334, 1469, 2349, 1471, 1472, 1473, 1474, 2327,
	2335, 722, 2265, 649, 1284, 2350, 2149, 650, 1285, 2333,
	1159, 637, 1497, 1282, 2272, 924, 1701, 2355, 182, 1115,
	182, 2300, 779, 182, 2339, 1355, 1489, 1506, 1558, 1800,
	631, 182, 2340, 1122, 2301, 2149, 617, 779, 1537, 1538,
	2149, 2369, 1554, 780, 1566, 1568, 1573, 1576, 1577, 1578,
	2324, 2362, 629, 2371, 628, 2329, 1504, 950, 780, 1908,
	2150, 1980, 2336, 1407, 2326, 2376, 1757, 1404, 1976, 1558,
	1236, 182, 179, 2157, 929, 422, 2390, 412, 182, 2392,
	2391, 1828, 931, 2389, 2374, 427, 182, 182, 929, 929,
	922, 1564, 2150, 1556, 452, 930, 1552, 1030, 1180, 496,
	179, 1108, 1702, 504, 977, 1987, 509, 182, 1723, 930,
	930, 2408, 182, 2424, 528, 1172, 2429, 2431, 2432, 182,
	2430, 2420, 1415, 746, 745, 2593, 2401, 2402, 1345, 781,
	1736, 1101, 1100, 2451, 732, 2419, 781, 2434, 2449, 968,
	1558, 967, 1240, 1924, 182, 182, 2446, 2149, 2445, 2151,
	2443, 182, 2418, 2575, 2415, 2456, 2154, 1831, 1832, 929,
	2496, 2437, 2468, 139, 182, 739, 739, 2466, 929, 929,
	136, 138, 2469, 412, 137, 2454, 1953, 82, 2151, 2149,
	930, 32, 2453, 2151, 31, 2472, 2460, 102, 101, 930,
	930, 182, 1181, 182, 2412, 594, 182, 100, 779, 412,
	412, 772, 412, 2477, 2478, 99, 98, 179, 869, 97,
	1846, 96, 95, 94, 2505, 93, 92, 2507, 2422, 780,
	2471, 91, 90, 2506, 89, 1286, 182, 88, 87, 2511,
	86, 2509, 481, 85, 84, 2493, 2368, 2150, 1324, 524,
	781, 2498, 521, 182, 182, 182, 2521, 2523, 2522, 81,
	80, 182, 482, 29, 2541, 2534, 25, 106, 24, 77,
	76, 27, 17, 11, 21, 182, 2546, 60, 2543, 2544,
	2545, 61, 59, 2394, 1837, 2400, 58, 57, 13, 53,
	2555, 2553, 52, 50, 931, 2559, 49, 2405, 48, 47,
	2151, 9, 105, 2017, 45, 8, 43, 2564, 2563, 931,
	42, 104, 118, 485, 115, 117, 114, 116, 120, 2572,
	2571, 2578, 119, 112, 2579, 110, 2166, 111, 113, 109,
	1831, 1832, 2151, 108, 2149, 779, 490, 779, 1286, 1286,
	121, 39, 486, 2492, 38, 37, 36, 2597, 2598, 2508,
	1847, 1324, 1324, 2605, 35, 2, 780, 1, 780, 2611,
	0, 0, 0, 2614, 2612, 2613, 0, 0, 0, 2620,
	2618, 2619, 0, 2622, 487, 0, 1771, 1772, 2588, 0,
	2590, 0, 1777, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2538, 2539, 2540, 0, 489, 2288, 0,
	781, 2281, 0, 0, 0, 0, 0, 1287, 0, 0,
	0, 0, 2279, 0, 1796, 781, 0, 2283, 0, 2483,
	1803, 0, 0, 1807, 0, 1848, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2289, 0, 0,
	1821, 0, 0, 0, 1287, 2500, 2501, 1837, 0, 0,
	0, 0, 931, 0, 0, 0, 0, 1831, 1832, 528,
	2282, 886, 528, 0, 891, 0, 931, 931, 0, 894,
	0, 0, 1322, 0, 1115, 412, 0, 2151, 0, 1321,
	0, 1573, 1573, 1573, 0, 0, 0, 0, 528, 528,
	412, 916, 869, 1287, 0, 1787, 1788, 0, 0, 0,
	0, 0, 1323, 0, 0, 0, 0, 1177, 1283, 1322,
	0, 40, 607, 1847, 488, 0, 1321, 0, 0, 528,
	0, 0, 41, 1842, 1840, 1841, 1833, 1834, 1835, 1836,
	1838, 1839, 0, 528, 0, 44, 0, 931, 0, 0,
	0, 0, 0, 0, 0, 0, 931, 931, 0, 955,
	2284, 0, 2285, 0, 0, 0, 0, 1287, 1322, 528,
	0, 51, 0, 0, 0, 1321, 0, 0, 0, 0,
	491, 1854, 1855, 1856, 1837, 0, 781, 0, 0, 0,
	0, 0, 2287, 0, 0, 621, 0, 0, 1848, 0,
	62, 2290, 0, 1287, 1287, 0, 0, 63, 0, 479,
	64, 0, 1287, 1287, 1978, 1323, 1323, 0, 0, 0,
	0, 1283, 1283, 0, 0, 0, 0, 0, 0, 0,
	0, 412, 1322, 0, 0, 0, 1996, 0, 0, 1321,
	0, 0, 411, 66, 0, 1287, 0, 0, 0, 0,
	1847, 0, 0, 607, 607, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 607, 0, 1322, 1322,
	0, 0, 0, 0, 0, 1321, 1321, 1322, 1322, 0,
	0, 2024, 2286, 0, 1321, 1321, 1417, 0, 0, 0,
	0, 0, 2028, 0, 0, 2029, 1842, 1840, 1841, 1833,
	1834, 1835, 1836, 1838, 1839, 0, 0, 2034, 0, 0,
	1322, 0, 0, 781, 0, 781, 2042, 1321, 0, 0,
	0, 0, 0, 0, 2046, 1848, 0, 1996, 0, 67,
	0, 0, 0, 0, 0, 0, 0, 0, 757, 0,
	0, 0, 0, 0, 0, 0, 0, 2070, 0, 0,
	0, 2072, 0, 626, 74, 127, 69, 0, 70, 0,
	0, 0, 0, 0, 766, 770, 0, 776, 0, 0,
	0, 0, 140, 0, 0, 0, 1748, 0, 0, 478,
	0, 0, 103, 0, 2102, 2103, 509, 0, 739, 0,
	0, 0, 0, 2109, 2110, 2111, 2030, 2031, 0, 0,
	0, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 412, 412, 0, 1287, 0, 0, 0, 74, 0,
	2122, 0, 0, 0, 1840, 1841, 1833, 1834, 1835, 1836,
	1838, 1839, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 0, 0,
	2143, 0, 0, 135, 0, 2075, 2076, 2077, 2078, 2079,
	2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
	2090, 2091, 2092, 2093, 0, 2097, 126, 587, 0, 1322,
	595, 0, 0, 0, 0, 0, 1321, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 758, 74, 0, 0,
	0, 0, 0, 1177, 0, 0, 0, 0, 0, 0,
	0, 0, 607, 0, 40, 0, 0, 179, 0, 0,
	0, 0, 0, 0, 0, 41, 0, 0, 0, 412,
	1286, 0, 0, 0, 0, 0, 0, 0, 44, 0,
	0, 1248, 0, 1324, 0, 0, 0, 412, 0, 412,
	0, 412, 0, 0, 2226, 1256, 0, 0, 2229, 2230,
	0, 0, 2232, 0, 51, 0, 0, 1286, 0, 2234,
	0, 2236, 0, 0, 0, 0, 0, 0, 0, 0,
	1324, 0, 0, 0, 0, 0, 0, 2243, 0, 0,
	0, 0, 0, 62, 0, 0, 528, 179, 0, 0,
	63, 0, 479, 64, 0, 179, 0, 0, 528, 0,
	0, 0, 0, 0, 0, 0, 1286, 0, 0, 0,
	2252, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	770, 0, 1287, 0, 0, 0, 66, 0, 528, 0,
	0, 0, 0, 528, 0, 776, 0, 0, 179, 528,
	0, 528, 0, 528, 0, 528, 0, 528, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1386, 0,
	2298, 0, 0, 0, 528, 528, 0, 0, 0, 0,
	1286, 0, 0, 412, 0, 0, 0, 0, 1287, 0,
	0, 0, 0, 1324, 0, 0, 0, 1322, 0, 0,
	0, 0, 0, 528, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1286, 1286, 0, 0,
	0, 0, 67, 0, 0, 1286, 1286, 0, 0, 1324,
	1324, 0, 0, 0, 0, 0, 0, 0, 1324, 1324,
	0, 0, 1287, 0, 0, 0, 2351, 2352, 127, 69,
	0, 70, 0, 1322, 0, 0, 0, 0, 1286, 0,
	1321, 0, 0, 0, 0, 140, 0, 0, 0, 1383,
	0, 1324, 478, 0, 0, 103, 770, 2364, 0, 0,
	0, 0, 0, 2367, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 0, 0, 1323, 0, 0,
	0, 0, 0, 1283, 0, 0, 0, 1322, 0, 0,
	595, 0, 0, 0, 1321, 0, 0, 0, 0, 509,
	0, 739, 0, 0, 869, 0, 0, 2399, 0, 0,
	0, 141, 0, 1190, 1323, 412, 0, 0, 0, 134,
	1283, 0, 0, 0, 0, 0, 135, 1623, 0, 40,
	0, 412, 0, 0, 412, 0, 0, 0, 1636, 0,
	41, 0, 412, 0, 0, 0, 0, 0, 412, 126,
	2359, 0, 0, 44, 0, 412, 0, 0, 0, 0,
	1666, 0, 0, 1323, 0, 0, 0, 0, 1673, 1283,
	0, 0, 0, 0, 0, 869, 0, 0, 0, 51,
	0, 0, 0, 0, 2448, 0, 412, 0, 1705, 0,
	528, 2383, 0, 528, 0, 528, 0, 412, 412, 0,
	1711, 869, 0, 0, 0, 0, 0, 1286, 62, 1636,
	0, 0, 0, 0, 0, 63, 0, 479, 64, 0,
	1324, 0, 0, 0, 0, 0, 0, 1323, 607, 0,
	0, 587, 0, 1283, 0, 455, 757, 1202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 66, 1111, 0, 1114, 0, 40, 0, 0, 0,
	0, 1119, 2436, 1323, 1323, 0, 0, 41, 0, 1283,
	1283, 0, 1323, 1323, 0, 0, 0, 0, 1283, 1283,
	44, 0, 0, 2520, 2520, 0, 0, 0, 0, 0,
	0, 0, 0, 1831, 1832, 0, 1849, 1850, 1851, 2535,
	0, 0, 0, 0, 0, 1323, 51, 1747, 0, 2037,
	0, 1283, 0, 0, 0, 0, 0, 0, 0, 2520,
	0, 0, 0, 412, 412, 412, 0, 412, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 67, 0, 0,
	0, 0, 63, 0, 479, 64, 1846, 0, 1831, 1832,
	412, 1849, 1850, 1851, 1235, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 69, 0, 70, 2520, 0, 0,
	0, 0, 770, 0, 1253, 0, 1253, 0, 66, 0,
	140, 0, 0, 0, 0, 0, 0, 478, 0, 74,
	103, 0, 0, 0, 1198, 0, 2601, 0, 0, 0,
	0, 1846, 0, 0, 0, 0, 0, 0, 2601, 142,
	1837, 2601, 2601, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1324, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 1852, 0, 0, 134, 0, 0, 0, 0, 0,
	0, 135, 0, 0, 67, 1837, 0, 0, 0, 0,
	0, 0, 0, 0, 1323, 0, 1847, 0, 0, 0,
	1283, 1286, 0, 0, 126, 0, 0, 0, 0, 0,
	127, 69, 0, 70, 1324, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1852, 140, 1397, 0,
	0, 0, 0, 0, 478, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 412, 0, 0,
	0, 1847, 0, 412, 412, 1286, 142, 412, 0, 0,
	0, 0, 1623, 0, 0, 1623, 0, 0, 1324, 0,
	0, 1848, 0, 1913, 0, 0, 0, 0, 0, 412,
	1919, 1920, 0, 0, 0, 1636, 0, 0, 1927, 0,
	0, 0, 0, 141, 1932, 1933, 1935, 1937, 1938, 0,
	0, 134, 0, 0, 412, 0, 0, 1947, 135, 0,
	0, 1950, 0, 0, 0, 0, 0, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 1848, 0, 0, 0,
	1248, 456, 1248, 0, 528, 0, 0, 412, 0, 0,
	0, 1975, 0, 0, 0, 0, 412, 0, 1985, 0,
	0, 0, 0, 0, 0, 412, 0, 0, 0, 0,
	1843, 1844, 1845, 0, 0, 0, 74, 0, 1747, 1842,
	1840, 1841, 1833, 1834, 1835, 1836, 1838, 1839, 0, 0,
	757, 1747, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 757, 587, 0, 1626,
	587, 587, 0, 0, 0, 0, 0, 770, 0, 0,
	40, 0, 1323, 770, 0, 1843, 1844, 1845, 1283, 412,
	776, 41, 129, 0, 1842, 1840, 1841, 1833, 1834, 1835,
	1836, 1838, 1839, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 1703, 0, 1487, 0, 0, 0, 0, 46, 0,
	51, 0, 776, 776, 0, 0, 595, 0, 1323, 2063,
	0, 1114, 0, 0, 1283, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 0, 56, 0, 0, 0, 62,
	0, 0, 132, 0, 0, 0, 63, 0, 122, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 65, 1323, 0, 0, 0, 0, 0, 1283, 0,
	0, 0, 66, 0, 0, 0, 0, 0, 758, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	412, 0, 0, 0, 1198, 0, 1623, 0, 0, 0,
	0, 0, 0, 0, 0, 869, 1623, 74, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	2146, 0, 0, 0, 0, 0, 0, 0, 1750, 776,
	1752, 0, 770, 2167, 0, 0, 0, 2167, 0, 0,
	0, 0, 0, 2167, 0, 0, 74, 0, 74, 0,
	0, 0, 1636, 0, 1248, 1769, 0, 0, 67, 0,
	0, 2187, 0, 0, 68, 0, 0, 74, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 412,
	412, 0, 0, 75, 127, 69, 0, 70, 0, 71,
	0, 133, 40, 0, 0, 0, 72, 2213, 0, 0,
	0, 140, 0, 41, 0, 0, 0, 2215, 83, 0,
	0, 103, 2218, 412, 0, 0, 44, 0, 0, 0,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 2242, 0, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 62, 0, 0, 0, 134, 0, 0, 63, 74,
	479, 64, 135, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 4, 412,
	0, 0, 869, 0, 66, 0, 0, 0, 0, 0,
	0, 0, 0, 1623, 869, 0, 0, 2274, 2275, 1636,
	0, 0, 757, 0, 0, 0, 0, 0, 757, 757,
	0, 0, 757, 2146, 869, 0, 0, 0, 0, 2308,
	0, 2309, 0, 412, 2311, 2312, 0, 0, 0, 0,
	412, 0, 1487, 2317, 1918, 0, 0, 0, 0, 0,
	0, 0, 2146, 0, 869, 1673, 0, 2146, 0, 0,
	0, 0, 1114, 0, 0, 0, 0, 0, 0, 1944,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	67, 0, 0, 0, 0, 1958, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1969, 0, 0, 0, 127, 69, 0, 70,
	0, 1235, 0, 0, 0, 0, 0, 0, 0, 0,
	1235, 0, 0, 140, 0, 0, 0, 0, 0, 0,
	478, 0, 0, 103, 0, 0, 1114, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1636, 0,
	2375, 0, 142, 2377, 0, 0, 0, 0, 0, 0,
	0, 412, 0, 0, 2146, 0, 0, 0, 0, 0,
	758, 0, 0, 0, 0, 0, 758, 758, 0, 0,
	758, 0, 0, 0, 2026, 0, 0, 0, 0, 141,
	2167, 0, 0, 0, 0, 0, 2146, 134, 0, 0,
	0, 412, 0, 0, 135, 0, 0, 0, 869, 0,
	0, 0, 0, 0, 0, 0, 2213, 2213, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 126, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 2442, 0, 0,
	0, 0, 1623, 0, 0, 0, 0, 0, 0, 1248,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 74,
	1054, 1055, 0, 1084, 1085, 1086, 1094, 1095, 1096, 595,
	0, 0, 0, 0, 2458, 2459, 1087, 0, 0, 0,
	0, 412, 0, 1057, 0, 0, 1098, 0, 0, 0,
	0, 0, 0, 0, 2476, 0, 0, 0, 1831, 1832,
	0, 1849, 1850, 1851, 0, 0, 0, 1056, 0, 0,
	0, 0, 0, 1076, 2036, 757, 0, 0, 0, 0,
	1073, 2491, 0, 869, 0, 0, 412, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1846, 0, 0, 0, 0, 2442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1079, 1080,
	1081, 1082, 0, 869, 869, 869, 0, 1062, 0, 0,
	0, 412, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2552, 0, 0, 0, 1091,
	1099, 0, 0, 0, 1703, 757, 1054, 1055, 0, 1084,
	1085, 1086, 1094, 1095, 1096, 1837, 0, 0, 1097, 0,
	0, 0, 1087, 0, 0, 0, 0, 0, 0, 1057,
	0, 0, 1098, 0, 0, 0, 1089, 0, 2219, 0,
	0, 0, 0, 1077, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1056, 0, 0, 1852, 0, 74, 1076,
	0, 0, 0, 0, 0, 0, 1073, 0, 0, 1088,
	0, 0, 0, 758, 0, 0, 0, 0, 0, 0,
	0, 1847, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1079, 1080, 1081, 1082, 1078, 0,
	0, 0, 0, 1062, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 757, 1092, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1091, 1099, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1848, 0, 0, 0,
	0, 0, 0, 758, 1097, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2310, 0,
	0, 0, 1089, 0, 0, 2315, 0, 0, 0, 1077,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 1068, 1069, 1075,
	1074, 1070, 1071, 1072, 1093, 1088, 1067, 1065, 1066, 1058,
	1059, 1060, 1061, 1063, 1064, 0, 0, 0, 0, 0,
	0, 0, 0, 2255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1843, 1844, 1845, 0, 1083,
	0, 0, 0, 0, 1842, 1840, 1841, 1833, 1834, 1835,
	1836, 1838, 1839, 0, 1078, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1092, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 758, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2384, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2417, 0, 0, 0,
	1090, 0, 0, 1068, 1069, 1075, 1074, 1070, 1071, 1072,
	1093, 0, 1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063,
	1064, 0, 74, 0, 0, 0, 0, 0, 0, 1873,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1703, 0, 0, 0,
	0, 0, 0, 0, 778, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 784, 186, 785, 786, 787, 788, 347, 789,
	790, 791, 792, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 793, 191, 354, 355, 192, 193, 794,
	795, 356, 357, 358, 796, 194, 359, 797, 783, 798,
	195, 196, 197, 0, 199, 200, 201, 198, 799, 202,
	1114, 203, 204, 800, 707, 205, 206, 207, 801, 802,
	804, 803, 805, 806, 807, 208, 209, 413, 210, 360,
	211, 361, 362, 808, 212, 809, 213, 810, 214, 811,
	812, 215, 216, 813, 217, 814, 0, 815, 363, 218,
	220, 219, 221, 364, 365, 816, 708, 817, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 818,
	225, 819, 820, 709, 821, 226, 369, 822, 370, 823,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 711,
	824, 373, 234, 825, 231, 826, 710, 232, 374, 233,
	375, 376, 377, 378, 379, 827, 380, 828, 712, 235,
	236, 237, 713, 381, 382, 238, 239, 240, 829, 242,
	241, 830, 383, 714, 243, 244, 715, 831, 245, 246,
	832, 833, 247, 0, 248, 716, 249, 250, 252, 384,
	251, 717, 253, 254, 256, 255, 834, 835, 836, 385,
	257, 386, 258, 259, 837, 260, 838, 839, 261, 840,
	841, 262, 387, 718, 263, 719, 388, 264, 265, 266,
	267, 268, 842, 269, 389, 270, 390, 271, 843, 272,
	273, 274, 275, 276, 391, 277, 278, 844, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 845, 291, 720, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 846, 304, 393, 303, 305, 306,
	847, 307, 295, 296, 308, 721, 309, 394, 395, 310,
	848, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 849, 318, 850, 319, 320, 321, 322, 323, 324,
	325, 326, 851, 398, 399, 400, 852, 853, 327, 328,
	401, 402, 854, 329, 330, 331, 332, 855, 856, 333,
	334, 335, 336, 857, 337, 858, 403, 338, 339, 340,
	404, 405, 859, 860, 341, 861, 862, 863, 864, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	778, 0, 0, 0, 0, 0, 1616, 0, 0, 0,
	0, 0, 0, 0, 0, 1617, 184, 185, 784, 186,
	785, 786, 787, 788, 347, 789, 790, 791, 792, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 793,
	191, 354, 355, 192, 193, 794, 795, 356, 357, 358,
	796, 194, 359, 797, 783, 798, 195, 196, 197, 0,
	199, 200, 201, 198, 799, 202, 0, 203, 204, 800,
	707, 205, 206, 207, 801, 802, 804, 803, 805, 806,
	807, 208, 209, 413, 210, 360, 211, 361, 362, 808,
	212, 809, 213, 810, 214, 811, 812, 215, 216, 813,
	217, 814, 0, 815, 363, 218, 220, 219, 221, 364,
	365, 816, 708, 817, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 818, 225, 819, 820, 709,
	821, 226, 369, 822, 370, 823, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 711, 824, 373, 234, 825,
	231, 826, 710, 232, 374, 233, 375, 376, 377, 378,
	379, 827, 380, 828, 712, 235, 236, 237, 713, 381,
	382, 238, 239, 240, 829, 242, 241, 830, 383, 714,
	243, 244, 715, 831, 245, 246, 832, 833, 247, 0,
	248, 716, 249, 250, 252, 384, 251, 717, 253, 254,
	256, 255, 834, 835, 836, 385, 257, 386, 258, 259,
	837, 260, 838, 839, 261, 840, 841, 262, 387, 718,
	263, 719, 388, 264, 265, 266, 267, 268, 842, 269,
	389, 270, 390, 271, 843, 272, 273, 274, 275, 276,
	391, 277, 278, 844, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 845, 291, 720,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	846, 304, 393, 303, 305, 306, 847, 307, 295, 296,
	308, 721, 309, 394, 395, 310, 848, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 849, 318, 850,
	319, 320, 321, 322, 323, 324, 325, 326, 851, 398,
	399, 400, 852, 853, 327, 328, 401, 402, 854, 329,
	330, 331, 332, 855, 856, 333, 334, 335, 336, 857,
	337, 858, 403, 338, 339, 340, 404, 405, 859, 860,
	341, 861, 862, 863, 864, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 778, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2270, 184, 185, 784, 186, 785, 786, 787,
	788, 347, 789, 790, 791, 792, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 793, 191, 354, 355,
	192, 193, 794, 795, 356, 357, 358, 796, 194, 359,
	797, 783, 798, 195, 196, 197, 0, 199, 200, 201,
	198, 799, 202, 0, 203, 204, 800, 707, 205, 206,
	207, 801, 802, 804, 803, 805, 806, 807, 208, 209,
	413, 210, 360, 211, 361, 362, 808, 212, 809, 213,
	810, 214, 811, 812, 215, 216, 813, 217, 814, 0,
	815, 363, 218, 220, 219, 221, 364, 365, 816, 708,
	817, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 818, 225, 819, 820, 709, 821, 226, 369,
	822, 370, 823, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 711, 824, 373, 234, 825, 231, 826, 710,
	232, 374, 233, 375, 376, 377, 378, 379, 827, 380,
	828, 712, 235, 236, 237, 713, 381, 382, 238, 239,
	240, 829, 242, 241, 830, 383, 714, 243, 244, 715,
	831, 245, 246, 832, 833, 247, 0, 248, 716, 249,
	250, 252, 384, 251, 717, 253, 254, 256, 255, 834,
	835, 836, 385, 257, 386, 258, 259, 837, 260, 838,
	839, 261, 840, 841, 262, 387, 718, 263, 719, 388,
	264, 265, 266, 267, 268, 842, 269, 389, 270, 390,
	271, 843, 272, 273, 274, 275, 276, 391, 277, 278,
	844, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 845, 291, 720, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 846, 304, 393,
	303, 305, 306, 847, 307, 295, 296, 308, 721, 309,
	394, 395, 310, 848, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 849, 318, 850, 319, 320, 321,
	322, 323, 324, 325, 326, 851, 398, 399, 400, 852,
	853, 327, 328, 401, 402, 854, 329, 330, 331, 332,
	855, 856, 333, 334, 335, 336, 857, 337, 858, 403,
	338, 339, 340, 404, 405, 859, 860, 341, 861, 862,
	863, 864, 342, 343, 344, 345, 346, 0, 0, 778,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1231, 184, 185, 784, 186, 785,
	786, 787, 788, 347, 789, 790, 791, 792, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 793, 191,
	354, 355, 192, 193, 794, 795, 356, 357, 358, 796,
	194, 359, 797, 783, 798, 195, 196, 197, 0, 199,
	200, 201, 198, 799, 202, 0, 203, 204, 800, 707,
	205, 206, 207, 801, 802, 804, 803, 805, 806, 807,
	208, 209, 413, 210, 360, 211, 361, 362, 808, 212,
	809, 213, 810, 214, 811, 812, 215, 216, 813, 217,
	814, 0, 815, 363, 218, 220, 219, 221, 364, 365,
	816, 708, 817, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 818, 225, 819, 820, 709, 821,
	226, 369, 822, 370, 823, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 711, 824, 373, 234, 825, 231,
	826, 710, 232, 374, 233, 375, 376, 377, 378, 379,
	827, 380, 828, 712, 235, 236, 237, 713, 381, 382,
	238, 239, 240, 829, 242, 241, 830, 383, 714, 243,
	244, 715, 831, 245, 246, 832, 833, 247, 0, 248,
	716, 249, 250, 252, 384, 251, 717, 253, 254, 256,
	255, 834, 835, 836, 385, 257, 386, 258, 259, 837,
	260, 838, 839, 261, 840, 841, 262, 387, 718, 263,
	719, 388, 264, 265, 266, 267, 268, 842, 269, 389,
	270, 390, 271, 843, 272, 273, 274, 275, 276, 391,
	277, 278, 844, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 845, 291, 720, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 846,
	304, 393, 303, 305, 306, 847, 307, 295, 296, 308,
	721, 309, 394, 395, 310, 848, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 849, 318, 850, 319,
	320, 321, 322, 323, 324, 325, 326, 851, 398, 399,
	400, 852, 853, 327, 328, 401, 402, 854, 329, 330,
	331, 332, 855, 856, 333, 334, 335, 336, 857, 337,
	858, 403, 338, 339, 340, 404, 405, 859, 860, 341,
	861, 862, 863, 864, 342, 343, 344, 345, 346, 1515,
	0, 645, 634, 635, 632, 633, 624, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 1512,
	186, 0, 0, 0, 0, 662, 627, 0, 0, 0,
	187, 188, 189, 348, 677, 350, 678, 190, 679, 680,
	0, 191, 354, 355, 192, 193, 630, 661, 681, 682,
	358, 0, 194, 673, 0, 653, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 707, 205, 206, 207, 0, 654, 655, 657, 0,
	656, 658, 208, 209, 413, 210, 683, 211, 684, 685,
	0, 212, 0, 213, 0, 214, 1513, 0, 676, 216,
	0, 217, 0, 0, 0, 618, 218, 220, 219, 221,
	663, 664, 641, 708, 0, 0, 0, 0, 0, 222,
	223, 686, 687, 688, 0, 224, 0, 225, 0, 0,
	709, 0, 226, 674, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 670, 672, 711, 0, 373, 234,
	0, 231, 0, 710, 232, 689, 233, 690, 691, 692,
	693, 694, 0, 652, 0, 712, 235, 236, 237, 713,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 675,
	714, 243, 244, 715, 0, 245, 246, 0, 0, 247,
	0, 248, 716, 249, 250, 252, 384, 251, 717, 253,
	254, 256, 255, 613, 0, 642, 671, 257, 695, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	718, 263, 719, 665, 264, 265, 266, 267, 268, 0,
	269, 666, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 696, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	720, 292, 293, 619, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 659, 307, 295,
	296, 308, 721, 309, 697, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 698, 314, 315, 667, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 699, 700, 0, 0, 327, 328, 668, 669, 640,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	660, 337, 0, 403, 338, 339, 340, 404, 701, 1511,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 614, 0, 645, 634, 635, 632, 633, 624, 0,
	0, 612, 0, 0, 0, 0, 610, 611, 1514, 184,
	185, 0, 186, 0, 0, 620, 1509, 662, 627, 0,
	0, 623, 187, 188, 189, 348, 677, 350, 678, 190,
	679, 680, 0, 191, 354, 355, 192, 193, 630, 661,
	681, 682, 358, 0, 194, 673, 0, 653, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 707, 205, 206, 207, 0, 654, 655,
	657, 0, 656, 658, 208, 209, 413, 210, 683, 211,
	684, 685, 608, 212, 0, 213, 0, 214, 0, 0,
	676, 216, 0, 217, 0, 0, 0, 618, 218, 220,
	219, 221, 663, 664, 641, 708, 0, 0, 0, 0,
	0, 222, 223, 686, 687, 688, 0, 224, 0, 225,
	0, 0, 709, 0, 226, 674, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 670, 672, 711, 0,
	373, 234, 0, 231, 0, 710, 232, 689, 233, 690,
	691, 692, 693, 694, 0, 652, 0, 712, 235, 236,
	237, 713, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 675, 714, 243, 244, 715, 0, 245, 246, 0,
	0, 247, 0, 248, 716, 249, 250, 252, 384, 251,
	717, 253, 254, 256, 255, 613, 0, 642, 671, 257,
	695, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 718, 263, 719, 665, 264, 265, 266, 267,
	268, 0, 269, 666, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 696, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 720, 292, 293, 619, 294, 0, 298, 299,
	300, 301, 302, 140, 304, 393, 303, 305, 306, 659,
	307, 295, 296, 308, 721, 309, 697, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 698, 314, 315, 667,
	0, 318, 142, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 699, 700, 0, 0, 327, 328, 668,
	669, 640, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 660, 337, 0, 403, 338, 339, 340, 932,
	701, 0, 0, 341, 0, 0, 0, 134, 342, 343,
	344, 345, 346, 614, 135, 596, 0, 645, 634, 635,
	632, 633, 624, 612, 0, 0, 0, 0, 610, 611,
	0, 0, 0, 184, 185, 0, 186, 1117, 0, 0,
	0, 662, 627, 623, 0, 0, 187, 188, 189, 348,
	677, 350, 678, 190, 679, 680, 0, 191, 354, 355,
	192, 193, 630, 661, 681, 682, 358, 0, 194, 673,
	0, 653, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 707, 205, 206,
	207, 0, 654, 655, 657, 0, 656, 658, 208, 209,
	413, 210, 683, 211, 684, 685, 0, 212, 0, 213,
	0, 214, 0, 0, 676, 216, 0, 217, 0, 0,
	0, 618, 218, 220, 219, 221, 663, 664, 641, 708,
	0, 0, 0, 0, 0, 222, 223, 686, 687, 688,
	0, 224, 0, 225, 0, 0, 709, 0, 226, 674,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	670, 672, 711, 0, 373, 234, 0, 231, 0, 710,
	232, 689, 233, 690, 691, 692, 693, 694, 0, 652,
	0, 712, 235, 236, 237, 713, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 675, 714, 243, 244, 715,
	0, 245, 246, 0, 0, 247, 0, 248, 716, 249,
	250, 252, 384, 251, 717, 253, 254, 256, 255, 613,
	0, 642, 671, 257, 695, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 718, 263, 719, 665,
	264, 265, 266, 267, 268, 0, 269, 666, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 696, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 720, 292, 293, 619,
	294, 0, 298, 299, 300, 301, 302, 140, 304, 393,
	303, 305, 306, 659, 307, 295, 296, 308, 721, 309,
	697, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	698, 314, 315, 667, 0, 318, 142, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 699, 700, 0,
	0, 327, 328, 668, 669, 640, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 660, 337, 0, 403,
	338, 339, 340, 932, 701, 0, 0, 341, 0, 0,
	0, 134, 342, 343, 344, 345, 346, 614, 135, 645,
	634, 635, 632, 633, 624, 0, 0, 612, 0, 0,
	0, 0, 610, 611, 0, 184, 185, 0, 186, 0,
	0, 1117, 0, 662, 627, 0, 0, 623, 187, 188,
	189, 348, 677, 350, 678, 190, 679, 680, 0, 191,
	354, 355, 192, 193, 630, 661, 681, 682, 358, 0,
	194, 673, 0, 653, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 707,
	205, 206, 207, 0, 654, 655, 657, 0, 656, 658,
	208, 209, 413, 210, 683, 211, 684, 685, 0, 212,
	0, 213, 0, 214, 0, 0, 676, 216, 0, 217,
	0, 0, 0, 618, 218, 220, 219, 221, 663, 664,
	641, 708, 0, 0, 0, 0, 0, 222, 223, 686,
	687, 688, 0, 224, 0, 225, 0, 0, 709, 0,
	226, 674, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 670, 672, 711, 0, 373, 234, 0, 231,
	0, 710, 232, 689, 233, 690, 691, 692, 693, 694,
	0, 652, 0, 712, 235, 236, 237, 713, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 675, 714, 243,
	244, 715, 0, 245, 246, 0, 0, 247, 0, 248,
	716, 249, 250, 252, 384, 251, 717, 253, 254, 256,
	255, 613, 0, 642, 671, 257, 695, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 718, 263,
	719, 665, 264, 265, 266, 267, 268, 0, 269, 666,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 696,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 720, 292,
	293, 619, 294, 0, 298, 299, 300, 301, 302, 140,
	304, 393, 303, 305, 306, 659, 307, 295, 296, 308,
	721, 309, 697, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 698, 314, 315, 667, 0, 318, 142, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 699,
	700, 0, 0, 327, 328, 668, 669, 640, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 660, 337,
	0, 403, 338, 339, 340, 932, 701, 0, 0, 341,
	0, 0, 0, 134, 342, 343, 344, 345, 346, 614,
	135, 645, 634, 635, 632, 633, 624, 0, 0, 612,
	0, 0, 0, 0, 610, 611, 0, 184, 185, 0,
	186, 0, 0, 1117, 0, 662, 627, 0, 0, 623,
	187, 188, 189, 348, 677, 350, 678, 190, 679, 680,
	1569, 191, 354, 355, 192, 193, 630, 661, 681, 682,
	358, 0, 194, 673, 0, 653, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 707, 205, 206, 207, 0, 654, 655, 657, 0,
	656, 658, 208, 209, 413, 210, 683, 211, 684, 685,
	0, 212, 0, 213, 0, 214, 0, 0, 676, 216,
	0, 217, 0, 0, 0, 618, 218, 220, 219, 221,
	663, 664, 641, 708, 0, 0, 0, 0, 0, 222,
	223, 686, 687, 688, 0, 224, 0, 225, 0, 1574,
	709, 0, 226, 674, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 670, 672, 711, 0, 373, 234,
	0, 231, 0, 710, 232, 689, 233, 690, 691, 692,
	693, 694, 0, 652, 0, 712, 235, 236, 237, 713,
	381, 382, 238, 239, 240, 0, 242, 241, 1570, 675,
	714, 243, 244, 715, 0, 245, 246, 0, 0, 247,
	0, 248, 716, 249, 250, 252, 384, 251, 717, 253,
	254, 256, 255, 613, 0, 642, 671, 257, 695, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	718, 263, 719, 665, 264, 265, 266, 267, 268, 0,
	269, 666, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 696, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	720, 292, 293, 619, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 659, 307, 295,
	296, 308, 721, 309, 697, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 698, 314, 315, 667, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 699, 700, 0, 1571, 327, 328, 668, 669, 640,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	660, 337, 0, 403, 338, 339, 340, 404, 701, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 614, 604, 0, 645, 634, 635, 632, 633, 624,
	0, 612, 0, 0, 0, 0, 610, 611, 0, 0,
	184, 185, 0, 186, 0, 620, 0, 0, 662, 627,
	0, 623, 0, 187, 188, 189, 348, 677, 350, 678,
	190, 679, 680, 0, 191, 354, 355, 192, 193, 630,
	661, 681, 682, 358, 0, 194, 673, 0, 653, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 707, 205, 206, 207, 0, 654,
	655, 657, 0, 656, 658, 208, 209, 413, 210, 683,
	211, 684, 685, 608, 212, 0, 213, 0, 214, 0,
	0, 676, 216, 0, 217, 0, 0, 0, 618, 218,
	220, 219, 221, 663, 664, 641, 708, 0, 0, 0,
	0, 0, 222, 223, 686, 687, 688, 0, 224, 0,
	225, 0, 0, 709, 0, 226, 674, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 670, 672, 711,
	0, 373, 234, 0, 231, 0, 710, 232, 689, 233,
	690, 691, 692, 693, 694, 0, 652, 0, 712, 235,
	236, 237, 713, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 675, 714, 243, 244, 715, 0, 245, 246,
	0, 0, 247, 0, 248, 716, 249, 250, 252, 384,
	251, 717, 253, 254, 256, 255, 613, 0, 642, 671,
	257, 695, 258, 259, 0, 260, 606, 0, 261, 0,
	0, 262, 387, 718, 263, 719, 665, 264, 265, 266,
	267, 268, 0, 269, 666, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 696, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 720, 292, 293, 619, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	659, 307, 295, 296, 308, 721, 309, 697, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 698, 314, 315,
	667, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 699, 700, 0, 0, 327, 328,
	668, 669, 640, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 660, 337, 0, 403, 338, 339, 340,
	404, 701, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 614, 0, 645, 634, 635, 632,
	633, 624, 0, 0, 612, 0, 0, 0, 0, 610,
	611, 0, 184, 185, 0, 186, 0, 0, 620, 0,
	662, 627, 0, 0, 623, 187, 188, 189, 348, 677,
	350, 678, 190, 679, 680, 0, 191, 354, 355, 192,
	193, 630, 661, 681, 682, 358, 0, 194, 673, 0,
	653, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 707, 205, 206, 207,
	0, 654, 655, 657, 0, 656, 658, 208, 209, 413,
	210, 683, 211, 684, 685, 0, 212, 0, 213, 0,
	214, 0, 0, 676, 216, 0, 217, 0, 0, 0,
	618, 218, 220, 219, 221, 663, 664, 641, 708, 0,
	0, 0, 0, 0, 222, 223, 686, 687, 688, 0,
	224, 0, 225, 0, 0, 709, 0, 226, 674, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 670,
	672, 711, 0, 373, 234, 0, 231, 0, 710, 232,
	689, 233, 690, 691, 692, 693, 694, 0, 652, 0,
	712, 235, 236, 237, 713, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 675, 714, 243, 244, 715, 0,
	245, 246, 0, 0, 247, 0, 248, 716, 249, 250,
	252, 384, 251, 717, 253, 254, 256, 255, 613, 2196,
	642, 671, 257, 695, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 718, 263, 719, 665, 264,
	265, 266, 267, 268, 0, 269, 666, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 696, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 720, 292, 293, 619, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 659, 307, 295, 296, 308, 721, 309, 697,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 698,
	314, 315, 667, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 699, 700, 0, 0,
	327, 328, 668, 669, 640, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 660, 337, 0, 403, 338,
	339, 340, 404, 701, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 614, 0, 645, 634,
	635, 632, 633, 624, 0, 0, 612, 0, 0, 0,
	0, 610, 611, 1178, 184, 185, 0, 186, 0, 0,
	620, 0, 662, 627, 0, 0, 623, 187, 188, 189,
	348, 677, 350, 678, 190, 679, 680, 0, 191, 354,
	355, 192, 193, 630, 661, 681, 682, 358, 0, 194,
	673, 0, 653, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 707, 205,
	206, 207, 0, 654, 655, 657, 0, 656, 658, 208,
	209, 413, 210, 683, 211, 684, 685, 0, 212, 0,
	213, 0, 214, 0, 0, 676, 216, 0, 217, 0,
	0, 0, 618, 218, 220, 219, 221, 663, 664, 641,
	708, 0, 0, 0, 0, 0, 222, 223, 686, 687,
	688, 0, 224, 0, 225, 0, 0, 709, 0, 226,
	674, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 670, 672, 711, 0, 373, 234, 1419, 231, 0,
	710, 232, 689, 233, 690, 691, 692, 693, 694, 0,
	652, 0, 712, 235, 236, 237, 713, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 675, 714, 243, 244,
	715, 0, 245, 246, 0, 0, 247, 0, 248, 716,
	249, 250, 252, 384, 251, 717, 253, 254, 256, 255,
	613, 0, 642, 671, 257, 695, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 718, 263, 719,
	665, 264, 265, 266, 267, 268, 0, 269, 666, 270,
	390, 271, 1418, 272, 273, 274, 275, 276, 696, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 720, 292, 293,
	619, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 659, 307, 295, 296, 308, 721,
	309, 697, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 698, 314, 315, 667, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 699, 700,
	0, 0, 327, 328, 668, 669, 640, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 660, 337, 0,
	403, 338, 339, 340, 404, 701, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 614, 0,
	645, 634, 635, 632, 633, 624, 0, 0, 612, 0,
	0, 0, 0, 610, 611, 0, 184, 185, 0, 186,
	0, 0, 620, 0, 662, 627, 0, 0, 623, 187,
	188, 189, 348, 677, 350, 678, 190, 679, 680, 0,
	191, 354, 355, 192, 193, 630, 661, 681, 682, 358,
	0, 194, 673, 0, 653, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	707, 205, 206, 207, 0, 654, 655, 657, 0, 656,
	658, 208, 209, 413, 210, 683, 211, 684, 685, 608,
	212, 0, 213, 0, 214, 0, 0, 676, 216, 0,
	217, 0, 0, 0, 618, 218, 220, 219, 221, 663,
	664, 641, 708, 0, 0, 0, 0, 0, 222, 223,
	686, 687, 688, 0, 224, 0, 225, 0, 0, 709,
	0, 226, 674, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 670, 672, 711, 0, 373, 234, 0,
	231, 0, 710, 232, 689, 233, 690, 691, 692, 693,
	694, 0, 652, 0, 712, 235, 236, 237, 713, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 675, 714,
	243, 244, 715, 0, 245, 246, 0, 0, 247, 0,
	248, 716, 249, 250, 252, 384, 251, 717, 253, 254,
	256, 255, 613, 0, 642, 671, 257, 695, 258, 259,
	0, 260, 606, 0, 261, 0, 0, 262, 387, 718,
	263, 719, 665, 264, 265, 266, 267, 268, 0, 269,
	666, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	696, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 720,
	292, 293, 619, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 659, 307, 295, 296,
	308, 721, 309, 697, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 698, 314, 315, 667, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	699, 700, 0, 0, 327, 328, 668, 669, 640, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 660,
	337, 0, 403, 338, 339, 340, 404, 701, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	614, 0, 645, 634, 635, 632, 633, 624, 0, 0,
	612, 0, 0, 0, 0, 610, 611, 0, 184, 185,
	0, 186, 0, 0, 620, 0, 662, 627, 0, 0,
	623, 187, 188, 189, 348, 677, 350, 678, 190, 679,
	680, 0, 191, 354, 355, 192, 193, 630, 661, 681,
	682, 358, 0, 194, 673, 0, 653, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 707, 205, 206, 207, 0, 654, 655, 657,
	0, 656, 658, 208, 209, 413, 210, 683, 211, 684,
	685, 2602, 212, 0, 213, 0, 214, 0, 0, 676,
	216, 0, 217, 0, 0, 0, 618, 218, 220, 219,
	221, 663, 664, 641, 708, 0, 0, 0, 0, 0,
	222, 223, 686, 687, 688, 0, 224, 0, 225, 0,
	0, 709, 0, 226, 674, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 670, 672, 711, 0, 373,
	234, 0, 231, 0, 710, 232, 689, 233, 690, 691,
	692, 693, 694, 0, 652, 0, 712, 235, 236, 237,
	713, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	675, 714, 243, 244, 715, 0, 245, 246, 0, 0,
	247, 0, 248, 2603, 249, 250, 252, 384, 251, 717,
	253, 254, 256, 255, 613, 0, 642, 671, 257, 695,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 718, 263, 719, 665, 264, 265, 266, 267, 268,
	0, 269, 666, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 696, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 720, 292, 293, 619, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 659, 307,
	295, 296, 308, 721, 309, 697, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 698, 314, 315, 667, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 699, 700, 0, 0, 327, 328, 668, 669,
	640, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 660, 337, 0, 403, 338, 339, 340, 404, 701,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 614, 0, 645, 634, 635, 632, 633, 624,
	0, 0, 612, 0, 0, 0, 0, 610, 611, 0,
	184, 185, 0, 186, 0, 0, 620, 0, 662, 627,
	0, 0, 623, 187, 188, 189, 348, 677, 350, 678,
	190, 679, 680, 0, 191, 354, 355, 192, 193, 630,
	661, 681, 682, 358, 0, 194, 673, 0, 653, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 707, 205, 206, 207, 0, 654,
	655, 657, 0, 656, 658, 208, 209, 413, 210, 683,
	211, 684, 685, 608, 212, 0, 213, 0, 214, 0,
	0, 676, 216, 0, 217, 0, 0, 0, 618, 218,
	220, 219, 221, 663, 664, 641, 708, 0, 0, 0,
	0, 0, 222, 223, 686, 687, 688, 0, 224, 0,
	225, 0, 0, 709, 0, 226, 674, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 670, 672, 711,
	0, 373, 234, 0, 231, 0, 710, 232, 689, 233,
	690, 691, 692, 693, 694, 0, 652, 0, 712, 235,
	236, 237, 713, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 675, 714, 243, 244, 715, 0, 245, 246,
	0, 0, 247, 0, 248, 716, 249, 250, 252, 384,
	251, 717, 253, 254, 256, 255, 613, 0, 642, 671,
	257, 695, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 718, 263, 719, 665, 264, 265, 266,
	267, 268, 0, 269, 666, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 696, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 720, 292, 293, 619, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	659, 307, 295, 296, 308, 721, 309, 697, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 698, 314, 315,
	667, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 699, 700, 0, 0, 327, 328,
	668, 669, 640, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 660, 337, 0, 403, 338, 339, 340,
	404, 701, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 614, 0, 645, 634, 635, 632,
	633, 624, 0, 0, 612, 0, 0, 0, 0, 610,
	611, 0, 184, 185, 0, 186, 0, 0, 620, 0,
	662, 627, 0, 0, 623, 187, 188, 189, 348, 677,
	350, 678, 190, 679, 680, 0, 191, 354, 355, 192,
	193, 630, 661, 681, 682, 358, 0, 194, 673, 0,
	653, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 707, 205, 206, 207,
	0, 654, 655, 657, 0, 656, 658, 208, 209, 413,
	210, 683, 211, 684, 685, 0, 212, 0, 213, 0,
	214, 0, 0, 676, 216, 0, 217, 0, 0, 0,
	618, 218, 220, 219, 221, 663, 664, 641, 708, 0,
	0, 0, 0, 0, 222, 223, 686, 687, 688, 0,
	224, 0, 225, 0, 0, 709, 0, 226, 674, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 670,
	672, 711, 0, 373, 234, 0, 231, 0, 710, 232,
	689, 233, 690, 691, 692, 693, 694, 0, 652, 0,
	712, 235, 236, 237, 713, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 675, 714, 243, 244, 715, 0,
	245, 246, 0, 0, 247, 0, 248, 716, 249, 250,
	252, 384, 251, 717, 253, 254, 256, 255, 613, 0,
	642, 671, 257, 695, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 718, 263, 719, 665, 264,
	265, 266, 267, 268, 0, 269, 666, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 696, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 720, 292, 293, 619, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 659, 307, 295, 296, 308, 721, 309, 697,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 698,
	314, 315, 667, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 699, 700, 0, 0,
	327, 328, 668, 669, 640, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 660, 337, 0, 403, 338,
	339, 340, 404, 701, 2049, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 614, 0, 645, 634,
	635, 632, 633, 624, 0, 0, 612, 0, 0, 0,
	0, 610, 611, 0, 184, 185, 0, 186, 0, 0,
	620, 0, 662, 627, 0, 0, 623, 187, 188, 189,
	348, 677, 350, 678, 190, 679, 680, 0, 191, 354,
	355, 192, 193, 630, 661, 681, 682, 358, 0, 194,
	673, 0, 653, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 707, 205,
	206, 207, 0, 654, 655, 657, 0, 656, 658, 208,
	209, 413, 210, 683, 211, 684, 685, 0, 212, 0,
	213, 0, 214, 0, 0, 676, 216, 0, 217, 0,
	0, 0, 618, 218, 220, 219, 221, 663, 664, 641,
	708, 0, 0, 0, 0, 0, 222, 223, 686, 687,
	688, 0, 224, 0, 225, 0, 0, 709, 0, 226,
	674, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 670, 672, 711, 0, 373, 234, 0, 231, 0,
	710, 232, 689, 233, 690, 691, 692, 693, 694, 0,
	652, 0, 712, 235, 236, 237, 713, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 675, 714, 243, 244,
	715, 0, 245, 246, 0, 0, 247, 0, 248, 716,
	249, 250, 252, 384, 251, 717, 253, 254, 256, 255,
	613, 0, 642, 671, 257, 695, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 718, 263, 719,
	665, 264, 265, 266, 267, 268, 0, 269, 666, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 696, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 720, 292, 293,
	619, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 659, 307, 295, 296, 308, 721,
	309, 697, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 698, 314, 315, 667, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 699, 700,
	0, 0, 327, 328, 668, 669, 640, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 660, 337, 0,
	403, 338, 339, 340, 404, 701, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 614, 0,
	645, 634, 635, 632, 633, 624, 0, 0, 612, 0,
	0, 0, 0, 610, 611, 1178, 184, 185, 0, 186,
	0, 0, 620, 0, 662, 627, 0, 0, 623, 187,
	188, 189, 348, 677, 350, 678, 190, 679, 680, 0,
	191, 354, 355, 192, 193, 630, 661, 681, 682, 358,
	0, 194, 673, 0, 653, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	707, 205, 206, 207, 0, 654, 655, 657, 0, 656,
	658, 208, 209, 413, 210, 683, 211, 684, 685, 0,
	212, 0, 213, 0, 214, 0, 0, 676, 216, 0,
	217, 0, 0, 0, 618, 218, 220, 219, 221, 663,
	664, 641, 708, 0, 0, 0, 0, 0, 222, 223,
	686, 687, 688, 0, 224, 0, 225, 0, 1574, 709,
	0, 226, 674, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 670, 672, 711, 0, 373, 234, 0,
	231, 0, 710, 232, 689, 233, 690, 691, 692, 693,
	694, 0, 652, 0, 712, 235, 236, 237, 713, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 675, 714,
	243, 244, 715, 0, 245, 246, 0, 0, 247, 0,
	248, 716, 249, 250, 252, 384, 251, 717, 253, 254,
	256, 255, 613, 0, 642, 671, 257, 695, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 718,
	263, 719, 665, 264, 265, 266, 267, 268, 0, 269,
	666, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	696, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 720,
	292, 293, 619, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 659, 307, 295, 296,
	308, 721, 309, 697, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 698, 314, 315, 667, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	699, 700, 0, 0, 327, 328, 668, 669, 640, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 660,
	337, 0, 403, 338, 339, 340, 404, 701, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	614, 1619, 0, 645, 634, 635, 632, 633, 624, 0,
	612, 0, 0, 0, 0, 610, 611, 0, 0, 184,
	185, 0, 186, 0, 620, 0, 0, 662, 627, 0,
	623, 0, 187, 188, 189, 348, 677, 350, 678, 190,
	679, 680, 0, 191, 354, 355, 192, 193, 630, 661,
	681, 682, 358, 0, 194, 673, 0, 653, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 707, 205, 206, 207, 0, 654, 655,
	657, 0, 656, 658, 208, 209, 413, 210, 683, 211,
	684, 685, 0, 212, 0, 213, 0, 214, 0, 0,
	676, 216, 0, 217, 0, 0, 0, 618, 218, 220,
	219, 221, 663, 664, 641, 708, 0, 0, 0, 0,
	0, 222, 223, 686, 687, 688, 0, 224, 0, 225,
	0, 0, 709, 0, 226, 674, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 670, 672, 711, 0,
	373, 234, 0, 231, 0, 710, 232, 689, 233, 690,
	691, 692, 693, 694, 0, 652, 0, 712, 235, 236,
	237, 713, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 675, 714, 243, 244, 715, 0, 245, 246, 0,
	0, 247, 0, 248, 716, 249, 250, 252, 384, 251,
	717, 253, 254, 256, 255, 613, 0, 642, 671, 257,
	695, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 718, 263, 719, 665, 264, 265, 266, 267,
	268, 0, 269, 666, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 696, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 720, 292, 293, 619, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 659,
	307, 295, 296, 308, 721, 309, 697, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 698, 314, 315, 667,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 699, 700, 0, 0, 327, 328, 668,
	669, 640, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 660, 337, 0, 403, 338, 339, 340, 404,
	701, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 614, 1583, 0, 645, 634, 635, 632,
	633, 624, 0, 612, 0, 0, 0, 0, 610, 611,
	0, 0, 184, 185, 0, 186, 0, 620, 0, 0,
	662, 627, 0, 623, 0, 187, 188, 189, 348, 677,
	350, 678, 190, 679, 680, 0, 191, 354, 355, 192,
	193, 630, 661, 681, 682, 358, 0, 194, 673, 0,
	653, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 707, 205, 206, 207,
	0, 654, 655, 657, 0, 656, 658, 208, 209, 413,
	210, 683, 211, 684, 685, 0, 212, 0, 213, 0,
	214, 0, 0, 676, 216, 0, 217, 0, 0, 0,
	618, 218, 220, 219, 221, 663, 664, 641, 708, 0,
	0, 0, 0, 0, 222, 223, 686, 687, 688, 0,
	224, 0, 225, 0, 0, 709, 0, 226, 674, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 670,
	672, 711, 0, 373, 234, 0, 231, 0, 710, 232,
	689, 233, 690, 691, 692, 693, 694, 0, 652, 0,
	712, 235, 236, 237, 713, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 675, 714, 243, 244, 715, 0,
	245, 246, 0, 0, 247, 0, 248, 716, 249, 250,
	252, 384, 251, 717, 253, 254, 256, 255, 613, 0,
	642, 671, 257, 695, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 718, 263, 719, 665, 264,
	265, 266, 267, 268, 0, 269, 666, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 696, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 720, 292, 293, 619, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 659, 307, 295, 296, 308, 721, 309, 697,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 698,
	314, 315, 667, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 699, 700, 0, 0,
	327, 328, 668, 669, 640, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 660, 337, 0, 403, 338,
	339, 340, 404, 701, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 614, 1581, 0, 645,
	634, 635, 632, 633, 624, 0, 612, 0, 0, 0,
	0, 610, 611, 0, 0, 184, 185, 0, 186, 0,
	620, 0, 0, 662, 627, 0, 623, 0, 187, 188,
	189, 348, 677, 350, 678, 190, 679, 680, 0, 191,
	354, 355, 192, 193, 630, 661, 681, 682, 358, 0,
	194, 673, 0, 653, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 707,
	205, 206, 207, 0, 654, 655, 657, 0, 656, 658,
	208, 209, 413, 210, 683, 211, 684, 685, 0, 212,
	0, 213, 0, 214, 0, 0, 676, 216, 0, 217,
	0, 0, 0, 618, 218, 220, 219, 221, 663, 664,
	641, 708, 0, 0, 0, 0, 0, 222, 223, 686,
	687, 688, 0, 224, 0, 225, 0, 0, 709, 0,
	226, 674, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 670, 672, 711, 0, 373, 234, 0, 231,
	0, 710, 232, 689, 233, 690, 691, 692, 693, 694,
	0, 652, 0, 712, 235, 236, 237, 713, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 675, 714, 243,
	244, 715, 0, 245, 246, 0, 0, 247, 0, 248,
	716, 249, 250, 252, 384, 251, 717, 253, 254, 256,
	255, 613, 0, 642, 671, 257, 695, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 718, 263,
	719, 665, 264, 265, 266, 267, 268, 0, 269, 666,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 696,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 720, 292,
	293, 619, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 659, 307, 295, 296, 308,
	721, 309, 697, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 698, 314, 315, 667, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 699,
	700, 0, 0, 327, 328, 668, 669, 640, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 660, 337,
	0, 403, 338, 339, 340, 404, 701, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 614,
	1565, 0, 645, 634, 635, 632, 633, 624, 0, 612,
	0, 0, 0, 0, 610, 611, 0, 0, 184, 185,
	0, 186, 0, 620, 0, 0, 662, 627, 0, 623,
	0, 187, 188, 189, 348, 677, 350, 678, 190, 679,
	680, 0, 191, 354, 355, 192, 193, 630, 661, 681,
	682, 358, 0, 194, 673, 0, 653, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 707, 205, 206, 207, 0, 654, 655, 657,
	0, 656, 658, 208, 209, 413, 210, 683, 211, 684,
	685, 0, 212, 0, 213, 0, 214, 0, 0, 676,
	216, 0, 217, 0, 0, 0, 618, 218, 220, 219,
	221, 663, 664, 641, 708, 0, 0, 0, 0, 0,
	222, 223, 686, 687, 688, 0, 224, 0, 225, 0,
	0, 709, 0, 226, 674, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 670, 672, 711, 0, 373,
	234, 0, 231, 0, 710, 232, 689, 233, 690, 691,
	692, 693, 694, 0, 652, 0, 712, 235, 236, 237,
	713, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	675, 714, 243, 244, 715, 0, 245, 246, 0, 0,
	247, 0, 248, 716, 249, 250, 252, 384, 251, 717,
	253, 254, 256, 255, 613, 0, 642, 671, 257, 695,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 718, 263, 719, 665, 264, 265, 266, 267, 268,
	0, 269, 666, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 696, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 720, 292, 293, 619, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 659, 307,
	295, 296, 308, 721, 309, 697, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 698, 314, 315, 667, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 699, 700, 0, 0, 327, 328, 668, 669,
	640, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 660, 337, 0, 403, 338, 339, 340, 404, 701,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 614, 1553, 0, 645, 634, 635, 632, 633,
	624, 0, 612, 0, 0, 0, 0, 610, 611, 0,
	0, 184, 185, 0, 186, 0, 620, 0, 0, 662,
	627, 0, 623, 0, 187, 188, 189, 348, 677, 350,
	678, 190, 679, 680, 0, 191, 354, 355, 192, 193,
	630, 661, 681, 682, 358, 0, 194, 673, 0, 653,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 707, 205, 206, 207, 0,
	654, 655, 657, 0, 656, 658, 208, 209, 413, 210,
	683, 211, 684, 685, 0, 212, 0, 213, 0, 214,
	0, 0, 676, 216, 0, 217, 0, 0, 0, 618,
	218, 220, 219, 221, 663, 664, 641, 708, 0, 0,
	0, 0, 0, 222, 223, 686, 687, 688, 0, 224,
	0, 225, 0, 0, 709, 0, 226, 674, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 670, 672,
	711, 0, 373, 234, 0, 231, 0, 710, 232, 689,
	233, 690, 691, 692, 693, 694, 0, 652, 0, 712,
	235, 236, 237, 713, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 675, 714, 243, 244, 715, 0, 245,
	246, 0, 0, 247, 0, 248, 716, 249, 250, 252,
	384, 251, 717, 253, 254, 256, 255, 613, 0, 642,
	671, 257, 695, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 718, 263, 719, 665, 264, 265,
	266, 267, 268, 0, 269, 666, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 696, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 720, 292, 293, 619, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 659, 307, 295, 296, 308, 721, 309, 697, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 698, 314,
	315, 667, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 699, 700, 0, 0, 327,
	328, 668, 669, 640, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 660, 337, 0, 403, 338, 339,
	340, 404, 701, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 614, 1551, 0, 1543, 634,
	635, 632, 633, 624, 0, 612, 0, 0, 0, 0,
	610, 611, 0, 0, 184, 185, 0, 186, 0, 620,
	0, 0, 662, 627, 0, 623, 0, 187, 188, 189,
	348, 677, 350, 678, 190, 679, 680, 0, 191, 354,
	355, 192, 193, 630, 661, 681, 682, 358, 0, 194,
	673, 0, 653, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 707, 205,
	206, 207, 0, 654, 655, 657, 0, 656, 658, 208,
	209, 413, 210, 683, 1546, 684, 685, 0, 212, 0,
	213, 0, 214, 0, 0, 676, 216, 0, 217, 0,
	0, 0, 618, 218, 220, 219, 221, 663, 664, 641,
	708, 0, 0, 0, 0, 0, 222, 223, 686, 687,
	688, 0, 224, 0, 225, 0, 0, 709, 0, 226,
	674, 0, 370, 0, 0, 227, 1547, 0, 0, 229,
	230, 670, 672, 711, 0, 373, 234, 0, 231, 0,
	710, 232, 689, 233, 690, 691, 692, 693, 694, 0,
	652, 0, 712, 235, 236, 237, 713, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 675, 714, 243, 244,
	715, 0, 245, 246, 0, 0, 247, 0, 248, 716,
	1548, 1545, 252, 384, 251, 717, 253, 254, 256, 255,
	613, 0, 642, 671, 257, 695, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 718, 263, 719,
	665, 264, 265, 266, 267, 268, 0, 269, 666, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 696, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 720, 292, 293,
	619, 294, 0, 298, 299, 300, 301, 1549, 0, 304,
	393, 303, 305, 306, 659, 307, 295, 296, 308, 721,
	309, 697, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 698, 314, 315, 667, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 699, 700,
	0, 0, 327, 328, 668, 669, 640, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 660, 337, 0,
	403, 338, 339, 340, 404, 701, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 1544, 346, 614, 1540,
	0, 1543, 634, 635, 632, 633, 624, 0, 612, 0,
	0, 0, 0, 610, 611, 0, 0, 184, 185, 0,
	186, 0, 620, 0, 0, 662, 627, 0, 623, 0,
	187, 188, 189, 348, 677, 350, 678, 190, 679, 680,
	0, 191, 354, 355, 192, 193, 630, 661, 681, 682,
	358, 0, 194, 673, 0, 653, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 707, 205, 206, 207, 0, 654, 655, 657, 0,
	656, 658, 208, 209, 413, 210, 683, 1546, 684, 685,
	0, 212, 0, 213, 0, 214, 0, 0, 676, 216,
	0, 217, 0, 0, 0, 618, 218, 220, 219, 221,
	663, 664, 641, 708, 0, 0, 0, 0, 0, 222,
	223, 686, 687, 688, 0, 224, 0, 225, 0, 0,
	709, 0, 226, 674, 0, 370, 0, 0, 227, 1547,
	0, 0, 229, 230, 670, 672, 711, 0, 373, 234,
	0, 231, 0, 710, 232, 689, 233, 690, 691, 692,
	693, 694, 0, 652, 0, 712, 235, 236, 237, 713,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 675,
	714, 243, 244, 715, 0, 245, 246, 0, 0, 247,
	0, 248, 716, 1548, 1545, 252, 384, 251, 717, 253,
	254, 256, 255, 613, 0, 642, 671, 257, 695, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	718, 263, 719, 665, 264, 265, 266, 267, 268, 0,
	269, 666, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 696, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	720, 292, 293, 619, 294, 0, 298, 299, 300, 301,
	1549, 0, 304, 393, 303, 305, 306, 659, 307, 295,
	296, 308, 721, 309, 697, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 698, 314, 315, 667, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 699, 700, 0, 0, 327, 328, 668, 669, 640,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	660, 337, 0, 403, 338, 339, 340, 404, 701, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 1544,
	346, 614, 0, 645, 634, 635, 632, 633, 624, 0,
	0, 612, 0, 0, 0, 0, 610, 611, 0, 184,
	185, 0, 186, 0, 0, 620, 0, 662, 627, 0,
	0, 623, 187, 188, 189, 348, 677, 350, 678, 190,
	679, 680, 0, 191, 354, 355, 192, 193, 630, 661,
	681, 682, 358, 0, 194, 673, 0, 653, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 707, 205, 206, 207, 0, 654, 655,
	657, 0, 656, 658, 208, 209, 413, 210, 683, 211,
	684, 685, 0, 212, 0, 213, 0, 214, 0, 0,
	676, 216, 0, 217, 0, 0, 0, 618, 218, 220,
	219, 221, 663, 664, 641, 708, 0, 0, 0, 0,
	0, 222, 223, 686, 687, 688, 0, 224, 0, 225,
	0, 0, 709, 0, 226, 674, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 670, 672, 711, 0,
	373, 234, 0, 231, 0, 710, 232, 689, 233, 690,
	691, 692, 693, 694, 0, 652, 0, 712, 235, 236,
	237, 713, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 675, 714, 243, 244, 715, 0, 245, 246, 0,
	0, 247, 0, 248, 716, 249, 250, 252, 384, 251,
	717, 253, 254, 256, 255, 613, 0, 642, 671, 257,
	695, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 718, 263, 719, 665, 264, 265, 266, 267,
	268, 0, 269, 666, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 696, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 720, 292, 293, 619, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 659,
	307, 295, 296, 308, 721, 309, 697, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 698, 314, 315, 667,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 699, 700, 0, 0, 327, 328, 668,
	669, 640, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 660, 337, 0, 403, 338, 339, 340, 404,
	701, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 614, 0, 645, 634, 635, 632, 633,
	624, 0, 0, 612, 0, 0, 0, 0, 610, 611,
	0, 184, 185, 1406, 186, 1121, 0, 620, 0, 662,
	627, 0, 0, 623, 187, 188, 189, 348, 677, 350,
	678, 190, 679, 680, 0, 191, 354, 355, 192, 193,
	630, 661, 681, 682, 358, 0, 194, 673, 0, 653,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 707, 205, 206, 207, 0,
	654, 655, 657, 0, 656, 658, 208, 209, 413, 210,
	683, 211, 684, 685, 0, 212, 0, 213, 0, 214,
	0, 0, 676, 216, 0, 217, 0, 0, 0, 618,
	218, 220, 219, 221, 663, 664, 641, 708, 0, 0,
	0, 0, 0, 222, 223, 686, 687, 688, 0, 224,
	0, 225, 0, 0, 709, 0, 226, 674, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 670, 672,
	711, 0, 373, 234, 0, 231, 0, 710, 232, 689,
	233, 690, 691, 692, 693, 694, 0, 652, 0, 712,
	235, 236, 237, 713, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 675, 714, 243, 244, 715, 0, 245,
	246, 0, 0, 247, 0, 248, 716, 249, 250, 252,
	384, 251, 717, 253, 254, 256, 255, 613, 0, 642,
	671, 257, 695, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 718, 263, 719, 665, 264, 265,
	266, 267, 268, 0, 269, 666, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 696, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 720, 292, 293, 619, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 659, 307, 295, 296, 308, 721, 309, 697, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 698, 314,
	315, 667, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 699, 700, 0, 0, 327,
	328, 668, 669, 640, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 660, 337, 0, 403, 338, 339,
	340, 404, 701, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 614, 876, 0, 645, 634,
	635, 632, 633, 624, 0, 612, 0, 0, 0, 0,
	610, 611, 0, 0, 184, 185, 0, 186, 0, 620,
	0, 0, 662, 627, 0, 623, 0, 187, 188, 189,
	348, 677, 350, 678, 190, 679, 680, 0, 191, 354,
	355, 192, 193, 630, 661, 681, 682, 358, 0, 194,
	673, 0, 653, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 707, 205,
	206, 207, 0, 654, 655, 657, 0, 656, 658, 208,
	209, 413, 210, 683, 211, 684, 685, 0, 212, 0,
	213, 0, 214, 0, 0, 676, 216, 0, 217, 0,
	0, 0, 618, 218, 220, 219, 221, 663, 664, 641,
	708, 0, 0, 0, 0, 0, 222, 223, 686, 687,
	688, 0, 224, 0, 225, 0, 0, 709, 0, 226,
	674, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 670, 672, 711, 0, 373, 234, 0, 231, 0,
	710, 232, 689, 233, 690, 691, 692, 693, 694, 0,
	652, 0, 712, 235, 236, 237, 713, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 675, 714, 243, 244,
	715, 0, 245, 246, 0, 0, 247, 0, 248, 716,
	249, 250, 252, 384, 251, 717, 253, 254, 256, 255,
	613, 0, 642, 671, 257, 695, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 718, 263, 719,
	665, 264, 265, 266, 267, 268, 0, 269, 666, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 696, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 720, 292, 293,
	619, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 659, 307, 295, 296, 308, 721,
	309, 697, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 698, 314, 315, 667, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 699, 700,
	0, 0, 327, 328, 668, 669, 640, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 660, 337, 0,
	403, 338, 339, 340, 404, 701, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 614, 874,
	0, 645, 634, 635, 632, 633, 624, 0, 612, 0,
	0, 0, 0, 610, 611, 0, 0, 184, 185, 0,
	186, 0, 620, 0, 0, 662, 627, 0, 623, 0,
	187, 188, 189, 348, 677, 350, 678, 190, 679, 680,
	0, 191, 354, 355, 192, 193, 630, 661, 681, 682,
	358, 0, 194, 673, 0, 653, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 707, 205, 206, 207, 0, 654, 655, 657, 0,
	656, 658, 208, 209, 413, 210, 683, 211, 684, 685,
	0, 212, 0, 213, 0, 214, 0, 0, 676, 216,
	0, 217, 0, 0, 0, 618, 218, 220, 219, 221,
	663, 664, 641, 708, 0, 0, 0, 0, 0, 222,
	223, 686, 687, 688, 0, 224, 0, 225, 0, 0,
	709, 0, 226, 674, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 670, 672, 711, 0, 373, 234,
	0, 231, 0, 710, 232, 689, 233, 690, 691, 692,
	693, 694, 0, 652, 0, 712, 235, 236, 237, 713,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 675,
	714, 243, 244, 715, 0, 245, 246, 0, 0, 247,
	0, 248, 716, 249, 250, 252, 384, 251, 717, 253,
	254, 256, 255, 613, 0, 642, 671, 257, 695, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	718, 263, 719, 665, 264, 265, 266, 267, 268, 0,
	269, 666, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 696, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	720, 292, 293, 619, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 659, 307, 295,
	296, 308, 721, 309, 697, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 698, 314, 315, 667, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 699, 700, 0, 0, 327, 328, 668, 669, 640,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	660, 337, 0, 403, 338, 339, 340, 404, 701, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 614, 0, 645, 634, 635, 632, 633, 624, 0,
	0, 612, 0, 0, 0, 0, 610, 611, 0, 184,
	185, 0, 186, 0, 0, 620, 0, 662, 627, 0,
	0, 623, 187, 188, 189, 348, 677, 350, 678, 190,
	679, 680, 0, 191, 354, 355, 192, 193, 630, 661,
	681, 682, 358, 0, 194, 673, 0, 653, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 707, 205, 206, 2519, 0, 654, 655,
	657, 0, 656, 658, 208, 209, 413, 210, 683, 211,
	684, 685, 0, 212, 0, 213, 0, 214, 0, 0,
	676, 216, 0, 217, 0, 0, 0, 618, 218, 220,
	219, 221, 663, 664, 641, 708, 0, 0, 0, 0,
	0, 222, 223, 686, 687, 688, 0, 224, 0, 225,
	0, 0, 709, 0, 226, 674, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 670, 672, 711, 0,
	373, 234, 0, 231, 0, 710, 232, 689, 233, 690,
	691, 692, 693, 694, 0, 652, 0, 712, 235, 236,
	237, 713, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 675, 714, 243, 244, 715, 0, 245, 246, 0,
	0, 247, 0, 248, 716, 249, 250, 252, 384, 251,
	717, 253, 254, 256, 255, 613, 0, 642, 671, 257,
	695, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 718, 263, 719, 665, 264, 265, 266, 267,
	268, 0, 269, 666, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 696, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 720, 292, 293, 619, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 659,
	307, 295, 296, 308, 721, 309, 697, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 698, 314, 315, 667,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 699, 700, 0, 0, 327, 328, 668,
	669, 640, 329, 330, 2518, 332, 0, 0, 333, 334,
	335, 336, 660, 337, 0, 403, 338, 339, 340, 404,
	701, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 614, 0, 645, 634, 635, 632, 633,
	624, 0, 0, 612, 0, 0, 0, 0, 610, 611,
	0, 184, 185, 0, 186, 0, 0, 620, 0, 662,
	627, 0, 0, 623, 187, 188, 189, 348, 677, 350,
	678, 190, 679, 680, 0, 191, 354, 355, 192, 193,
	630, 661, 681, 682, 358, 0, 194, 673, 0, 653,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 707, 205, 206, 207, 0,
	654, 655, 657, 0, 656, 658, 208, 209, 413, 210,
	683, 211, 684, 685, 0, 212, 0, 213, 0, 214,
	0, 0, 676, 216, 0, 217, 0, 0, 0, 618,
	218, 220, 219, 221, 663, 664, 641, 708, 0, 0,
	0, 0, 0, 222, 223, 686, 687, 688, 0, 224,
	0, 225, 0, 0, 709, 0, 226, 674, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 670, 672,
	711, 0, 373, 234, 0, 231, 0, 710, 232, 689,
	233, 690, 691, 692, 693, 694, 0, 652, 0, 712,
	235, 236, 237, 713, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 675, 714, 243, 244, 715, 0, 245,
	246, 0, 0, 247, 0, 248, 716, 249, 250, 252,
	384, 251, 717, 253, 254, 256, 255, 613, 0, 642,
	671, 257, 695, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 718, 263, 719, 665, 264, 265,
	266, 267, 268, 0, 269, 666, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 696, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 720, 292, 293, 619, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 659, 307, 295, 296, 308, 721, 309, 697, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 698, 314,
	315, 667, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 699, 700, 0, 0, 327,
	328, 668, 669, 640, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 660, 337, 0, 403, 338, 339,
	340, 404, 701, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 614, 0, 645, 634, 635,
	632, 633, 624, 0, 0, 612, 0, 0, 0, 0,
	610, 611, 0, 184, 185, 0, 186, 0, 0, 620,
	0, 662, 627, 0, 0, 623, 187, 188, 189, 2517,
	677, 350, 678, 190, 679, 680, 0, 191, 354, 355,
	192, 193, 630, 661, 681, 682, 358, 0, 194, 673,
	0, 653, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 707, 205, 206,
	2519, 0, 654, 655, 657, 0, 656, 658, 208, 209,
	413, 210, 683, 211, 684, 685, 0, 212, 0, 213,
	0, 214, 0, 0, 676, 216, 0, 217, 0, 0,
	0, 618, 218, 220, 219, 221, 663, 664, 641, 708,
	0, 0, 0, 0, 0, 222, 223, 686, 687, 688,
	0, 224, 0, 225, 0, 0, 709, 0, 226, 674,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	670, 672, 711, 0, 373, 234, 0, 231, 0, 710,
	232, 689, 233, 690, 691, 692, 693, 694, 0, 652,
	0, 712, 235, 236, 237, 713, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 675, 714, 243, 244, 715,
	0, 245, 246, 0, 0, 247, 0, 248, 716, 249,
	250, 252, 384, 251, 717, 253, 254, 256, 255, 613,
	0, 642, 671, 257, 695, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 718, 263, 719, 665,
	264, 265, 266, 267, 268, 0, 269, 666, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 696, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 720, 292, 293, 619,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 659, 307, 295, 296, 308, 721, 309,
	697, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	698, 314, 315, 667, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 699, 700, 0,
	0, 327, 328, 668, 669, 640, 329, 330, 2518, 332,
	0, 0, 333, 334, 335, 336, 660, 337, 0, 403,
	338, 339, 340, 404, 701, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 614, 0, 645,
	634, 635, 632, 633, 624, 0, 0, 612, 0, 0,
	0, 0, 610, 611, 0, 184, 185, 0, 186, 0,
	0, 620, 0, 662, 627, 0, 0, 623, 187, 188,
	189, 348, 677, 350, 678, 190, 679, 680, 0, 191,
	354, 355, 192, 193, 630, 661, 681, 682, 358, 0,
	194, 673, 0, 653, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 707,
	205, 206, 207, 0, 654, 655, 657, 0, 656, 658,
	208, 209, 413, 210, 683, 211, 684, 685, 0, 212,
	0, 213, 0, 214, 0, 0, 676, 216, 0, 217,
	0, 0, 0, 618, 218, 220, 219, 221, 663, 664,
	641, 708, 0, 0, 0, 0, 0, 222, 223, 686,
	687, 688, 0, 224, 0, 225, 0, 0, 709, 0,
	226, 674, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 670, 672, 711, 0, 373, 234, 0, 231,
	0, 710, 232, 689, 233, 690, 691, 692, 693, 694,
	0, 652, 0, 712, 235, 236, 237, 713, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 675, 714, 243,
	244, 715, 0, 245, 246, 0, 0, 247, 0, 248,
	716, 249, 250, 252, 384, 251, 717, 253, 254, 256,
	255, 0, 0, 642, 671, 257, 695, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 718, 263,
	719, 665, 264, 265, 266, 267, 268, 0, 269, 666,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 696,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 720, 292,
	293, 1563, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 659, 307, 295, 296, 308,
	721, 309, 697, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 698, 314, 315, 667, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 699,
	700, 0, 0, 327, 328, 668, 669, 640, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 660, 337,
	0, 403, 338, 339, 340, 404, 701, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 645, 634, 635, 632, 633, 624, 0, 0, 1561,
	0, 0, 0, 0, 1559, 1560, 0, 184, 185, 0,
	186, 0, 0, 1562, 0, 662, 627, 0, 0, 623,
	187, 188, 189, 348, 677, 350, 678, 190, 679, 680,
	0, 191, 354, 355, 192, 193, 0, 661, 681, 682,
	358, 0, 194, 673, 0, 653, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 707, 205, 206, 207, 0, 654, 655, 657, 0,
	656, 658, 208, 209, 413, 210, 683, 211, 684, 685,
	0, 212, 0, 213, 0, 214, 0, 0, 676, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	663, 664, 641, 708, 0, 0, 0, 0, 0, 222,
	223, 686, 687, 688, 0, 224, 0, 225, 0, 0,
	709, 0, 226, 674, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 670, 672, 711, 0, 373, 234,
	0, 231, 0, 710, 232, 689, 233, 690, 691, 692,
	693, 694, 0, 652, 0, 712, 235, 236, 237, 713,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 675,
	714, 243, 244, 715, 0, 245, 246, 0, 0, 247,
	0, 248, 716, 249, 250, 252, 384, 251, 717, 253,
	254, 256, 255, 0, 0, 642, 671, 257, 695, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	718, 263, 719, 665, 264, 265, 266, 267, 268, 0,
	269, 666, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 696, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	720, 292, 293, 1563, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 659, 307, 295,
	296, 308, 721, 309, 697, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 698, 314, 315, 667, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 699, 700, 0, 0, 327, 328, 668, 669, 640,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	660, 337, 0, 403, 338, 339, 340, 404, 701, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 645, 634, 635, 632, 633, 624, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 1562, 0, 662, 627, 0,
	0, 623, 187, 188, 189, 0, 677, 350, 678, 190,
	679, 680, 0, 191, 354, 355, 192, 193, 630, 661,
	681, 682, 358, 0, 194, 673, 0, 653, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 707, 205, 206, 2519, 0, 654, 655,
	657, 0, 656, 658, 208, 209, 413, 210, 683, 211,
	684, 685, 0, 212, 0, 213, 0, 214, 0, 0,
	676, 216, 0, 217, 0, 0, 0, 618, 218, 220,
	219, 221, 663, 664, 641, 708, 0, 0, 0, 0,
	0, 222, 223, 686, 687, 688, 0, 224, 0, 225,
	0, 0, 709, 0, 226, 674, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 670, 672, 0, 0,
	373, 234, 0, 231, 0, 710, 232, 689, 233, 690,
	691, 692, 693, 694, 0, 652, 0, 0, 235, 236,
	237, 713, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 675, 714, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 716, 249, 250, 252, 384, 251,
	717, 253, 254, 256, 255, 613, 0, 642, 671, 257,
	695, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 718, 263, 719, 665, 264, 265, 266, 267,
	268, 0, 269, 666, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 696, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 720, 292, 293, 619, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 659,
	307, 295, 296, 308, 0, 309, 697, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 698, 314, 315, 667,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 699, 700, 0, 0, 327, 328, 668,
	669, 640, 329, 330, 2518, 332, 0, 0, 333, 334,
	335, 336, 660, 337, 0, 403, 338, 339, 340, 404,
	701, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 645, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 610, 611,
	0, 184, 185, 0, 186, 0, 0, 620, 0, 662,
	0, 0, 0, 623, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 661, 356, 357, 358, 0, 194, 673, 0, 653,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 707, 205, 206, 207, 0,
	654, 655, 657, 0, 656, 658, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 663, 664, 0, 708, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 709, 0, 226, 674, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 670, 672,
	711, 0, 373, 234, 0, 231, 0, 710, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 712,
	235, 236, 237, 713, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 675, 714, 243, 244, 715, 0, 245,
	246, 0, 0, 247, 0, 248, 716, 249, 250, 252,
	384, 251, 717, 253, 254, 256, 255, 0, 0, 0,
	671, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 718, 263, 719, 665, 264, 265,
	266, 267, 268, 0, 269, 666, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 720, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 659, 307, 295, 296, 308, 721, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 667, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 668, 669, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 660, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 925, 0, 928, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 2148,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 783, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 707, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 708,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 709, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 711, 0, 373, 234, 0, 231, 0, 710,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 712, 235, 236, 237, 713, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 714, 243, 244, 715,
	0, 245, 246, 0, 0, 247, 0, 248, 716, 249,
	250, 252, 384, 251, 717, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 718, 263, 719, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 720, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 140, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 721, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 142, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 932, 405, 0, 0, 341, 0, 0,
	0, 134, 342, 343, 344, 345, 346, 596, 135, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 126, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 761, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 140,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 142, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 932, 405, 0, 0, 341,
	0, 0, 0, 134, 342, 343, 344, 345, 346, 0,
	135, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 755, 0, 1200, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 761, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 140, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	142, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 932, 405, 0,
	0, 341, 0, 0, 0, 134, 342, 343, 344, 345,
	346, 596, 135, 181, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 755, 0, 1200, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 140, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 142, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 932,
	405, 0, 0, 341, 0, 0, 0, 134, 342, 343,
	344, 345, 346, 1889, 135, 181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 126, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 761, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 754, 0, 181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 755, 0, 760,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	761, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 755,
	0, 760, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 761, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	755, 0, 760, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 1233, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 1704, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 2064, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 645, 634, 635, 632, 633, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 1203, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 677, 350, 678, 190, 679,
	680, 0, 191, 354, 355, 192, 193, 0, 0, 681,
	682, 358, 0, 194, 359, 0, 783, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 707, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 683, 211, 684,
	685, 0, 212, 0, 213, 0, 214, 0, 0, 676,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 641, 708, 0, 0, 0, 0, 0,
	222, 223, 686, 687, 688, 0, 224, 0, 225, 0,
	0, 709, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 711, 0, 373,
	234, 0, 231, 0, 710, 232, 689, 233, 690, 691,
	692, 693, 694, 0, 652, 0, 712, 235, 236, 237,
	713, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 714, 243, 244, 715, 0, 245, 246, 0, 0,
	247, 0, 248, 716, 249, 250, 252, 384, 251, 717,
	253, 254, 256, 255, 0, 0, 642, 385, 257, 695,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 718, 263, 719, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 696, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 720, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 721, 309, 697, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 698, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 699, 700, 0, 0, 327, 328, 401, 402,
	640, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 701,
	0, 499, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 177, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 176, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 174, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	180, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 177, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 176, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 181, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 180, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 177, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 176, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 181, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	180, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 982, 0, 928, 986, 0, 0, 0, 984,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 180,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 783, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 707, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 708, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 709, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 711,
	0, 373, 234, 0, 231, 0, 710, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 712, 235,
	236, 237, 713, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 714, 243, 244, 715, 0, 245, 246,
	0, 0, 247, 0, 248, 716, 249, 250, 252, 384,
	251, 717, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 718, 263, 719, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 720, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 721, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 928, 986, 341, 0, 0, 984, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 783, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 707, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 708, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 709, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 711, 0, 373,
	234, 0, 231, 0, 710, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 712, 235, 236, 237,
	713, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 714, 243, 244, 715, 0, 245, 246, 0, 0,
	247, 0, 248, 716, 249, 250, 252, 384, 251, 717,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 718, 263, 719, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 720, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 721, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	928, 986, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 783, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	707, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 708, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 709,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 711, 0, 373, 234, 0,
	231, 0, 710, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 712, 235, 236, 237, 713, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 714,
	243, 244, 715, 0, 245, 246, 0, 0, 247, 0,
	248, 716, 249, 250, 252, 384, 251, 717, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 718,
	263, 719, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 720,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 721, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 928, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 783, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 707, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	708, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 709, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 711, 0, 373, 234, 0, 231, 0,
	710, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 712, 235, 236, 237, 713, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 714, 243, 244,
	715, 0, 245, 246, 0, 0, 247, 0, 248, 716,
	249, 250, 252, 384, 251, 717, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 718, 263, 719,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 720, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 721,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 181, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 1639, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	1637, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 1681, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 1642, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 0, 0, 373, 234, 1679, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	1641, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	1680, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 181, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 1639, 194, 359, 0, 0, 1634,
	195, 196, 197, 0, 199, 200, 201, 198, 1637, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 1642, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 1633, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 1641, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 1640, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 903, 341, 181, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 761, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 767, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 769,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 761,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 763, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	765, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	761, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 430, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 429, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 428, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 181, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 1622, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 181, 2214, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 181, 2214, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 2211, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	181, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 761, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 1391,
	341, 181, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 0,
	1389, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	181, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 184, 185, 1371, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 525,
	341, 181, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	961, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 527, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	522, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 0,
	1247, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 1246, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 525, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 961, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 527,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 522, 399, 400, 0, 0, 327, 962, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 525, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 516, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	527, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 945, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 522, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 921, 341, 181, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 920, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 918, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 917,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 914, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	913, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 911, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 910, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 907, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 906, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 181, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 184, 185, 895, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 893, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 892, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 889, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 887, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 883,
	341, 181, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 885, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 0,
	773, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 775, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 771, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 525, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 516, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 515,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	527, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 517, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 518, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 522, 399, 400, 0, 0, 327, 520,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 507, 341, 181, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	508, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 505, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 497, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 453, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 181, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 181, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 1936, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 181, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 1934, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	181, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 1923, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 181, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 508, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 181, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 1257, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 0, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 181, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 737, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 181, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 0, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	0, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 0, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 1054, 1055, 0, 1084, 1085, 1086, 1094, 1095,
	1096, 0, 0, 0, 0, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 1057, 0, 0, 1098, 0,
	0, 0, 0, 0, 0, 0, 0, 1054, 1055, 0,
	1084, 1085, 1086, 1094, 1095, 1096, 0, 0, 0, 1056,
	0, 0, 0, 1087, 0, 1076, 0, 0, 0, 0,
	1057, 0, 1073, 1098, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1056, 0, 0, 0, 0, 0,
	1076, 0, 0, 0, 0, 0, 0, 1073, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1079, 1080, 1081, 1082, 0, 0, 0, 0, 0, 1062,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1091, 1099, 0, 0, 1079, 1080, 1081, 1082, 0,
	0, 0, 0, 0, 1062, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 1054, 1055, 0, 1084, 1085,
	1086, 1094, 1095, 1096, 0, 0, 1091, 1099, 1089, 0,
	0, 1087, 0, 0, 0, 1077, 0, 0, 1057, 0,
	0, 1098, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1088, 1056, 1089, 0, 0, 0, 0, 1076, 0,
	1077, 0, 0, 0, 0, 1073, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1079, 1080, 1081, 1082, 1092, 0, 0,
	1083, 0, 1062, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1078, 0, 0, 0, 0,
	0, 0, 0, 0, 1091, 1099, 0, 0, 0, 0,
	0, 0, 1092, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1097, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1089, 0, 0, 0, 0, 1090, 0, 1077, 1068,
	1069, 1075, 1074, 1070, 1071, 1072, 1093, 0, 1067, 1065,
	1066, 1058, 1059, 1060, 1061, 1063, 1064, 0, 0, 0,
	0, 0, 0, 0, 1088, 1872, 0, 0, 0, 0,
	0, 1090, 0, 0, 1068, 1069, 1075, 1074, 1070, 1071,
	1072, 1093, 0, 1067, 1065, 1066, 1058, 1059, 1060, 1061,
	1063, 1064, 0, 0, 0, 0, 0, 0, 1083, 0,
	1871, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1078, 0, 1054, 1055, 0, 1084, 1085,
	1086, 1094, 1095, 1096, 0, 0, 0, 0, 0, 0,
	1092, 1087, 0, 0, 0, 0, 0, 0, 1057, 0,
	0, 1098, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1056, 0, 0, 0, 0, 0, 1076, 0,
	0, 0, 0, 0, 0, 1073, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1090,
	0, 0, 1068, 1069, 1075, 1074, 1070, 1071, 1072, 1093,
	0, 1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064,
	0, 0, 0, 1079, 1080, 1081, 1082, 0, 1823, 0,
	0, 0, 1062, 0, 0, 0, 0, 1054, 1055, 0,
	1084, 1085, 1086, 1094, 1095, 1096, 0, 0, 0, 0,
	0, 0, 0, 1087, 1091, 1099, 0, 0, 0, 0,
	1057, 0, 0, 1098, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1097, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1056, 0, 0, 0, 0, 0,
	1076, 1089, 0, 0, 0, 0, 0, 1073, 1077, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1088, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1079, 1080, 1081, 1082, 0,
	0, 0, 0, 0, 1062, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1078, 0, 0, 1091, 1099, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1092, 0, 0, 0, 0, 1097, 1054, 1055, 0, 1084,
	1085, 1086, 1094, 1095, 1096, 0, 0, 0, 0, 0,
	0, 0, 1087, 1089, 0, 0, 0, 0, 0, 1057,
	1077, 0, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1054, 1055, 0, 1084, 1085, 1086,
	1094, 1095, 1096, 1056, 0, 0, 1088, 0, 0, 1076,
	1087, 0, 0, 0, 0, 0, 1073, 1057, 0, 1090,
	1098, 0, 1068, 1069, 1075, 1074, 1070, 1071, 1072, 1093,
	0, 1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064,
	1083, 1056, 0, 0, 2488, 0, 0, 1076, 0, 0,
	0, 0, 0, 0, 1073, 1078, 0, 0, 0, 0,
	0, 0, 0, 0, 1079, 1080, 1081, 1082, 0, 0,
	0, 0, 1092, 1062, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1091, 1099, 0, 0, 0,
	0, 0, 1079, 1080, 1081, 1082, 0, 0, 0, 0,
	0, 1062, 0, 0, 1097, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 1091, 1099, 0, 0, 0, 0, 1077,
	0, 1090, 0, 0, 1068, 1069, 1075, 1074, 1070, 1071,
	1072, 1093, 1097, 1067, 1065, 1066, 1058, 1059, 1060, 1061,
	1063, 1064, 0, 0, 0, 1088, 2439, 0, 0, 0,
	1089, 0, 0, 0, 0, 0, 0, 1077, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 1088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	1054, 1055, 0, 1084, 1085, 1086, 1094, 1095, 1096, 0,
	0, 1092, 0, 0, 0, 0, 1087, 1083, 0, 0,
	0, 0, 0, 1057, 0, 0, 1098, 0, 0, 0,
	0, 0, 1078, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1056, 0, 1092,
	0, 0, 0, 1076, 0, 0, 0, 0, 0, 0,
	1073, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1090, 0, 0, 1068, 1069, 1075, 1074, 1070, 1071, 1072,
	1093, 0, 1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063,
	1064, 0, 0, 0, 0, 2393, 0, 0, 1079, 1080,
	1081, 1082, 0, 0, 0, 0, 0, 1062, 1090, 0,
	0, 1068, 1069, 1075, 1074, 1070, 1071, 1072, 1093, 0,
	1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064, 1091,
	1099, 0, 0, 2363, 0, 0, 1054, 1055, 0, 1084,
	1085, 1086, 1094, 1095, 1096, 0, 0, 0, 1097, 0,
	0, 0, 1087, 0, 0, 0, 0, 0, 0, 1057,
	0, 0, 1098, 0, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 1077, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1056, 0, 0, 0, 0, 0, 1076,
	0, 0, 0, 0, 0, 0, 1073, 0, 0, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1079, 1080, 1081, 1082, 1078, 0,
	0, 0, 0, 1062, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1054, 1055, 1092, 1084, 1085, 1086, 1094,
	1095, 1096, 0, 0, 0, 1091, 1099, 0, 0, 1087,
	0, 0, 0, 0, 0, 0, 1057, 0, 0, 1098,
	0, 0, 0, 0, 1097, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1056, 0, 1089, 0, 0, 0, 1076, 0, 0, 1077,
	0, 0, 0, 1073, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 1068, 1069, 1075,
	1074, 1070, 1071, 1072, 1093, 1088, 1067, 1065, 1066, 1058,
	1059, 1060, 1061, 1063, 1064, 0, 0, 0, 0, 2358,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1079, 1080, 1081, 1082, 0, 0, 0, 0, 1083,
	1062, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	0, 0, 1091, 1099, 0, 0, 0, 0, 0, 1054,
	1055, 1092, 1084, 1085, 1086, 1094, 1095, 1096, 0, 0,
	0, 1097, 0, 0, 0, 1087, 0, 0, 0, 0,
	0, 0, 1057, 0, 0, 1098, 0, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 1077, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1056, 0, 0, 0,
	0, 0, 1076, 0, 0, 0, 0, 0, 0, 1073,
	0, 0, 1088, 0, 0, 0, 0, 0, 0, 0,
	1090, 0, 0, 1068, 1069, 1075, 1074, 1070, 1071, 1072,
	1093, 0, 1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063,
	1064, 0, 0, 0, 0, 2354, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 1080, 1081,
	1082, 1078, 0, 0, 0, 0, 1062, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1054, 1055, 1092, 1084,
	1085, 1086, 1094, 1095, 1096, 0, 0, 0, 1091, 1099,
	0, 0, 1087, 0, 0, 0, 0, 0, 0, 1057,
	0, 0, 1098, 0, 0, 0, 0, 1097, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1056, 0, 1089, 0, 0, 0, 1076,
	0, 0, 1077, 0, 0, 0, 1073, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1090, 0, 0,
	1068, 1069, 1075, 1074, 1070, 1071, 1072, 1093, 1088, 1067,
	1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064, 0, 0,
	0, 0, 2291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1079, 1080, 1081, 1082, 0, 0,
	0, 0, 1083, 1062, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1078, 0, 0,
	0, 0, 0, 0, 0, 1091, 1099, 0, 0, 0,
	0, 0, 1054, 1055, 1092, 1084, 1085, 1086, 1094, 1095,
	1096, 0, 0, 0, 1097, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 1057, 0, 0, 1098, 0,
	0, 0, 1089, 0, 0, 0, 0, 0, 0, 1077,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1056,
	0, 0, 0, 0, 0, 1076, 0, 0, 0, 0,
	0, 0, 1073, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 1090, 0, 0, 1068, 1069, 1075, 1074,
	1070, 1071, 1072, 1093, 0, 1067, 1065, 1066, 1058, 1059,
	1060, 1061, 1063, 1064, 0, 0, 0, 0, 2257, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1079, 1080, 1081, 1082, 1078, 0, 0, 0, 0, 1062,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1054,
	1055, 1092, 1084, 1085, 1086, 1094, 1095, 1096, 0, 0,
	0, 1091, 1099, 0, 0, 1087, 0, 0, 0, 0,
	0, 0, 1057, 0, 0, 1098, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1056, 0, 1089, 0,
	0, 0, 1076, 0, 0, 1077, 0, 0, 0, 1073,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1090, 0, 0, 1068, 1069, 1075, 1074, 1070, 1071, 1072,
	1093, 1088, 1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063,
	1064, 0, 0, 0, 0, 2256, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 1080, 1081,
	1082, 0, 0, 0, 0, 1083, 1062, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 0, 0, 0, 0, 0, 0, 0, 1091, 1099,
	0, 0, 0, 0, 0, 1054, 1055, 1092, 1084, 1085,
	1086, 1094, 1095, 1096, 0, 0, 0, 1097, 0, 0,
	0, 1087, 0, 0, 0, 0, 0, 0, 1057, 0,
	0, 1098, 0, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 1077, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1056, 0, 0, 0, 0, 0, 1076, 0,
	0, 0, 0, 0, 0, 1073, 0, 0, 1088, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 1068,
	1069, 1075, 1074, 1070, 1071, 1072, 1093, 0, 1067, 1065,
	1066, 1058, 1059, 1060, 1061, 1063, 1064, 0, 0, 0,
	0, 2221, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1079, 1080, 1081, 1082, 1078, 0, 0,
	0, 0, 1062, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1054, 1055, 1092, 1084, 1085, 1086, 1094, 1095,
	1096, 0, 0, 0, 1091, 1099, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 1057, 0, 0, 1098, 0,
	0, 0, 0, 1097, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1056,
	0, 1089, 0, 0, 0, 1076, 0, 0, 1077, 0,
	0, 0, 1073, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1090, 0, 0, 1068, 1069, 1075, 1074,
	1070, 1071, 1072, 1093, 1088, 1067, 1065, 1066, 1058, 1059,
	1060, 1061, 1063, 1064, 0, 0, 0, 0, 2067, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1079, 1080, 1081, 1082, 0, 0, 0, 0, 1083, 1062,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1078, 0, 0, 0, 0, 0, 0,
	0, 1091, 1099, 0, 0, 0, 0, 0, 1054, 1055,
	1092, 1084, 1085, 1086, 1094, 1095, 1096, 0, 0, 0,
	1097, 0, 0, 0, 1087, 0, 0, 0, 0, 0,
	0, 1057, 0, 0, 1098, 0, 0, 0, 1089, 0,
	0, 0, 0, 0, 0, 1077, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1056, 0, 0, 0, 0,
	0, 1076, 0, 0, 0, 0, 0, 0, 1073, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 1090,
	0, 0, 1068, 1069, 1075, 1074, 1070, 1071, 1072, 1093,
	0, 1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064,
	0, 0, 0, 0, 2043, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1079, 1080, 1081, 1082,
	1078, 0, 0, 0, 0, 1062, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1092, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1091, 1099, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1089, 0, 0, 0, 0, 0,
	0, 1077, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 1068,
	1069, 1075, 1074, 1070, 1071, 1072, 1093, 1088, 1067, 1065,
	1066, 1058, 1059, 1060, 1061, 1063, 1064, 0, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1078, 0, 1054, 1055,
	0, 1084, 1085, 1086, 1094, 1095, 1096, 0, 0, 0,
	0, 0, 0, 1092, 1087, 0, 0, 0, 0, 0,
	0, 1057, 0, 0, 1098, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1056, 0, 0, 0, 0,
	0, 1076, 0, 0, 0, 0, 0, 0, 1073, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 0, 1068, 1069, 1075, 1074, 1070,
	1071, 1072, 1093, 0, 1067, 1065, 1066, 1058, 1059, 1060,
	1061, 1063, 1064, 0, 0, 1793, 1079, 1080, 1081, 1082,
	0, 0, 0, 0, 0, 1062, 2551, 0, 0, 0,
	1054, 1055, 0, 1084, 1085, 1086, 1094, 1095, 1096, 0,
	0, 0, 0, 0, 0, 0, 1087, 1091, 1099, 0,
	0, 0, 0, 1057, 0, 0, 1098, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1056, 0, 0,
	0, 0, 0, 1076, 1089, 0, 0, 0, 0, 0,
	1073, 1077, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2550, 0, 0, 0, 0, 1079, 1080,
	1081, 1082, 0, 0, 0, 0, 0, 1062, 0, 1863,
	0, 1083, 1862, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1078, 0, 0, 1091,
	1099, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1092, 0, 0, 0, 0, 1097, 1054,
	1055, 0, 1084, 1085, 1086, 1094, 1095, 1096, 0, 0,
	0, 0, 0, 0, 0, 1087, 1089, 0, 0, 0,
	1766, 0, 1057, 1077, 0, 1098, 0, 0, 0, 0,
	0, 1598, 0, 0, 0, 0, 0, 1054, 1055, 0,
	1084, 1085, 1086, 1094, 1095, 1096, 1056, 0, 0, 1088,
	0, 0, 1076, 1087, 0, 0, 0, 1597, 0, 1073,
	1057, 0, 1090, 1098, 0, 1068, 1069, 1075, 1074, 1070,
	1071, 1072, 1093, 0, 1067, 1065, 1066, 1058, 1059, 1060,
	1061, 1063, 1064, 1083, 1056, 0, 1767, 0, 0, 0,
	1076, 0, 0, 0, 0, 0, 0, 1073, 1078, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 1080, 1081,
	1082, 0, 0, 0, 0, 1092, 1062, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1091, 1099,
	0, 0, 0, 0, 0, 1079, 1080, 1081, 1082, 0,
	0, 0, 0, 0, 1062, 0, 0, 1097, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1089, 1091, 1099, 0, 0,
	0, 0, 1077, 0, 1090, 0, 0, 1068, 1069, 1075,
	1074, 1070, 1071, 1072, 1093, 1097, 1067, 1065, 1066, 1058,
	1059, 1060, 1061, 1063, 1064, 0, 0, 0, 1088, 0,
	0, 0, 0, 1089, 0, 0, 0, 0, 0, 0,
	1077, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1078, 0, 0,
	0, 0, 0, 1054, 1055, 0, 1084, 1085, 1086, 1094,
	1095, 1096, 0, 0, 1092, 0, 0, 0, 0, 1087,
	1083, 0, 0, 0, 0, 0, 1057, 0, 0, 1098,
	0, 0, 0, 0, 0, 1078, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1056, 0, 1092, 0, 0, 0, 1076, 0, 0, 0,
	0, 0, 0, 1073, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1090, 0, 0, 1068, 1069, 1075, 1074,
	1070, 1071, 1072, 1093, 0, 1067, 1065, 1066, 1058, 1059,
	1060, 1061, 1063, 1064, 0, 0, 0, 0, 0, 0,
	0, 1079, 1080, 1081, 1082, 0, 0, 0, 0, 0,
	1062, 1090, 0, 0, 1068, 1069, 1075, 1074, 1070, 1071,
	1072, 1093, 0, 1067, 1065, 1066, 1058, 1059, 1060, 1061,
	1063, 1064, 1091, 1099, 0, 0, 0, 0, 0, 1054,
	1055, 0, 1084, 1085, 1086, 1094, 1095, 1096, 0, 0,
	0, 1097, 0, 0, 0, 1087, 0, 0, 0, 0,
	0, 0, 1057, 0, 0, 1098, 0, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 1077, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1056, 0, 0, 0,
	0, 0, 1076, 0, 0, 0, 0, 0, 0, 1073,
	0, 0, 1088, 593, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 1080, 1081,
	1082, 1078, 0, 0, 0, 0, 1062, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1054, 1055, 1092, 1084,
	1085, 1086, 1094, 1095, 1096, 0, 0, 0, 1091, 1099,
	0, 0, 1087, 0, 0, 0, 0, 0, 0, 1057,
	0, 0, 1098, 0, 0, 0, 0, 1097, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1056, 0, 1089, 0, 0, 0, 1076,
	0, 0, 1077, 0, 0, 0, 1073, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1090, 0, 0,
	1068, 1069, 1075, 1074, 1070, 1071, 1072, 1093, 1088, 1067,
	1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1079, 1080, 1081, 1082, 0, 0,
	0, 0, 1083, 1062, 0, 0, 0, 0, 1869, 0,
	0, 0, 0, 0, 0, 0, 0, 1078, 0, 0,
	0, 0, 0, 0, 0, 1091, 1099, 0, 0, 0,
	0, 0, 1054, 1055, 1092, 1084, 1085, 1086, 1094, 1095,
	1096, 0, 0, 0, 1097, 0, 0, 0, 1087, 0,
	0, 0, 1864, 0, 0, 1057, 0, 0, 1098, 0,
	0, 2047, 1089, 0, 0, 0, 0, 0, 0, 1077,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1056,
	0, 0, 0, 0, 0, 1076, 0, 0, 0, 0,
	0, 0, 1073, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 1090, 0, 0, 1068, 1069, 1075, 1074,
	1070, 1071, 1072, 1093, 0, 1067, 1065, 1066, 1058, 1059,
	1060, 1061, 1063, 1064, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1079, 1080, 1081, 1082, 1078, 0, 0, 0, 0, 1062,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1092, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1091, 1099, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1089, 0,
	0, 0, 0, 0, 0, 1077, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1090, 0, 0, 1068, 1069, 1075, 1074, 1070, 1071, 1072,
	1093, 1088, 1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063,
	1064, 0, 0, 0, 0, 0, 0, 0, 1054, 1055,
	0, 1084, 1085, 1086, 1094, 1095, 1096, 0, 0, 0,
	0, 0, 0, 0, 1087, 1083, 0, 0, 0, 0,
	0, 1057, 0, 0, 1098, 0, 0, 0, 0, 0,
	1078, 0, 0, 1054, 1055, 0, 1084, 1085, 1086, 1094,
	1095, 1096, 0, 0, 0, 1056, 0, 1092, 0, 1087,
	0, 1076, 0, 1822, 0, 0, 1057, 0, 1073, 1098,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1056, 0, 0, 0, 0, 0, 1076, 0, 0, 0,
	0, 0, 0, 1073, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1079, 1080, 1081, 1082,
	0, 0, 0, 0, 0, 1062, 1090, 0, 0, 1068,
	1069, 1075, 1074, 1070, 1071, 1072, 1093, 0, 1067, 1065,
	1066, 1058, 1059, 1060, 1061, 1063, 1064, 1091, 1099, 0,
	0, 1079, 1080, 1081, 1082, 0, 0, 0, 0, 0,
	1062, 0, 0, 0, 0, 0, 1097, 0, 0, 0,
	0, 1054, 1055, 0, 1084, 1085, 1086, 1094, 1095, 1096,
	0, 0, 1091, 1099, 1089, 0, 0, 1087, 0, 0,
	0, 1077, 0, 0, 1057, 0, 0, 1098, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 1056, 1089,
	0, 0, 0, 0, 1076, 0, 1077, 0, 0, 0,
	1829, 1073, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 1088, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1079,
	1080, 1081, 1082, 1092, 0, 0, 1083, 0, 1062, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1078, 0, 0, 0, 0, 0, 0, 0, 0,
	1091, 1099, 0, 0, 0, 0, 0, 0, 1092, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1097,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 0, 0,
	0, 0, 1090, 0, 1077, 1068, 1069, 1075, 1074, 1070,
	1071, 1072, 1093, 0, 1067, 1065, 1066, 1058, 1059, 1060,
	1061, 1063, 1064, 0, 0, 0, 0, 0, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 1090, 0, 0,
	1068, 1069, 1075, 1074, 1070, 1071, 1072, 1093, 0, 1067,
	1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1078,
	0, 1054, 1055, 0, 1084, 1085, 1086, 1094, 1095, 1096,
	0, 0, 0, 0, 0, 0, 1092, 1087, 0, 0,
	0, 0, 0, 0, 1057, 0, 0, 1098, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1056, 0,
	0, 0, 0, 0, 1076, 0, 0, 0, 0, 0,
	0, 1073, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1090, 0, 0, 1068, 1069,
	1075, 1074, 1070, 1071, 1072, 1093, 0, 1067, 1065, 1066,
	1058, 1059, 1060, 1061, 1063, 1064, 0, 0, 0, 1079,
	1080, 1081, 1082, 0, 0, 0, 0, 0, 1062, 0,
	0, 0, 0, 1054, 1055, 0, 1084, 1085, 1086, 1094,
	1095, 1096, 0, 0, 0, 0, 0, 0, 0, 0,
	1091, 1099, 0, 0, 0, 0, 1057, 0, 0, 1098,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1097,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1056, 0, 0, 0, 0, 0, 1076, 1089, 0, 0,
	0, 0, 0, 1073, 1077, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1079, 1080, 1081, 1082, 0, 0, 0, 0, 0,
	1062, 0, 0, 0, 1083, 0, 0, 0, 0, 1302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1078,
	0, 0, 1091, 1099, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1092, 0, 0, 0,
	0, 0, 1310, 1299, 1329, 1288, 1320, 1319, 0, 0,
	1290, 1289, 0, 0, 0, 0, 1331, 1330, 0, 1089,
	0, 0, 0, 0, 0, 0, 1077, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1325, 0, 1317, 1316, 0, 0,
	0, 0, 0, 0, 0, 1090, 1315, 0, 1068, 1069,
	1075, 1074, 1070, 1071, 1072, 1093, 0, 1067, 1065, 1066,
	1058, 1059, 1060, 1061, 1063, 1064, 1083, 0, 0, 1314,
	1312, 1313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1078, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1298, 0, 1092, 0,
	0, 0, 0, 1303, 1301, 1304, 1305, 1306, 1307, 1308,
	0, 1328, 0, 0, 0, 0, 0, 0, 1292, 1291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1318, 0, 0, 0,
	1300, 0, 0, 0, 0, 0, 0, 1090, 0, 1302,
	1068, 1069, 1075, 1074, 1070, 1071, 1072, 1093, 0, 1067,
	1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064, 0, 1311,
	0, 0, 0, 1426, 1424, 1425, 1428, 1427, 0, 0,
	0, 0, 1310, 1299, 1329, 1288, 1320, 1319, 0, 0,
	1290, 1289, 0, 0, 0, 0, 1331, 1330, 0, 0,
	0, 1295, 0, 0, 0, 0, 546, 0, 572, 0,
	0, 0, 1309, 1296, 0, 0, 0, 0, 0, 0,
	0, 0, 1333, 0, 0, 0, 551, 0, 0, 0,
	0, 0, 0, 0, 1325, 1293, 1317, 1316, 549, 1326,
	1327, 0, 0, 0, 0, 0, 1315, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 550,
	0, 1297, 0, 0, 552, 0, 1332, 0, 0, 1314,
	1312, 1313, 558, 559, 0, 0, 0, 568, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 573, 553, 0, 0, 0, 1298, 0, 0, 0,
	0, 0, 0, 1303, 1301, 1304, 1305, 1306, 1307, 1308,
	0, 1328, 0, 0, 571, 0, 0, 0, 1292, 1291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 554,
	0, 0, 0, 0, 1294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1318, 555, 556, 0,
	1300, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 0, 0, 0, 0,
	557, 564, 0, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 561, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 574, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1309, 1296, 0, 0, 0, 0, 0, 0,
	0, 0, 1333, 0, 560, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1293, 0, 0, 0, 1326,
	1327, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1297, 548, 565, 575, 0, 1332, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 566, 0,
	0, 0, 570, 0, 0, 0, 0, 576, 0, 0,
	0, 0, 563, 567, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 569,
}
var sqlPact = [...]int{

	4027, -1000, -7, -1000, -1000, -1000, 148, -1000, -1000, -1000,
	-1000, 147, 146, 145, -1000, 143, 142, 140, 139, 137,
	136, 135, 134, 131, 130, 127, -1000, 126, -1000, -1000,
	-1000, -1000, 122, 121, 115, 110, 107, 106, 99, -1000,
	1113, 22600, 96, 94, 1482, -1000, 36552, 93, 92, 91,
	90, 1000, 85, 82, 26684, 889, 1359, 81, 80, 77,
	74, 72, 1140, 36214, 3593, 2490, 1126, 1647, 35873, 22259,
	1588, 1402, 35532, -1000, -1000, 35191, 66, 65, 62, 61,
	60, -1000, -1000, 34850, 58, 57, 55, 53, 52, 51,
	50, 47, 45, 44, 39, 37, 36, 35, -1000, 33,
	32, 30, -1000, 43874, 29, 28, 26, 1114, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 965, 105, -1000, 916, 452, 1740, 8540, 1030,
	1027, 1013, 1011, 1029, 38580, 36552, 23, -50, 22, -1000,
	2003, 698, 19813, 4027, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26343, 26002,
	34509, 34168, 6425, 774, -1000, -12, 23278, 36552, -1000, 150,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15237,
	14884, 561, 150, -1000, -1000, -1000, -1000, -1000, 33827, -1000,
	33486, 33145, 1515, 32804, -1000, -1000, -1000, -1000, 32463, -1000,
	-1000, 1860, 1677, 1634, 25661, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 32125, 31784, 31443,
	31102, 30761, 524, -1000, -1000, -1000, 18053, -1000, -1000, -1000,
	-1000, 21, -1000, 20, -1000, 19, 17, 16, 14, -1000,
	13, 7, -1000, 3, 2, -1000, 0, -1, 30420, 874,
	1234, -1000, -1000, -11, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 36552, -1000, 15941, -1000, 522, -1000, 1681, -1000,
	15941, -1000, 1229, -1000, -1000, -1000, -1000, -1000, 36552, -1000,
	-1000, -1000, -1000, -1000, -1000, 2156, 1257, 520, 30079, -1000,
	1420, -1000, 609, 794, -1000, -1000, -1000, 9596, 157, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1663, 23630,
	1220, 2022, 1855, 2155, 1426, 1843, 1826, 1823, 1777, 1765,
	2154, 1062, 2153, 1868, 1004, 2150, 1719, 1233, 674, 2149,
	1680, 1670, -1000, -1000, -1000, -1000, 942, -1000, -1000, -1000,
	28036, -1000, -1000, 820, 927, 916, -1000, -1000, -1000, 1354,
	1984, 1984, 1984, 2037, 302, 294, -1000, 105, -1000, 1633,
	-1000, 1255, -1000, -1000, -1000, -1000, -1000, 43081, -1000, -1000,
	15941, 15941, 15941, 15941, 15941, 1142, 549, -1000, 518, 515,
	7835, -1000, -1000, 2136, -1000, -1000, -1000, 352, -1000, -1000,
	15941, 150, -1000, -1000, -1000, -1000, 511, 2145, -1000, 673,
	-1000, -1000, -1000, 614, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1713, 510, 508, 507, -1000, 504, -1000,
	-1000, 502, 500, 494, 493, 486, 485, 481, 478, 477,
	475, 474, 473, 471, 470, 468, 1053, -1000, 629, -1000,
	-1000, 629, 629, -1000, 454, 454, 455, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 454, -1000, -1000, -1000, 590,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 467, 1258, -1000, -1000, 1258, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 770, 37904, -14, 36552, -1000, 466,
	-14, -1000, -1000, 465, -1000, 11004, 11004, -1000, -1000, -1000,
	-1000, -1000, 10300, 1660, -1000, 3466, -169, 326, 587, -1000,
	18757, 21567, -1000, -1000, 1190, 1875, 881, -1000, 994, 1871,
	456, -1000, 1180, -1000, 898, 1870, -138, 1749, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 23968, 23278, -12, -30, -1000,
	-1000, -1000, 6073, 43081, -1000, 43081, -1000, 860, 20515, 150,
	-1000, -1000, -1000, -1000, 464, 1334, 618, -1000, 346, -1000,
	29738, 618, 1326, -1000, -1000, -1000, 28036, -1000, 36552, -1000,
	36552, -1000, 896, -1000, 38242, 117, 1869, -1000, -1000, 117,
	1852, -1000, 114, 1849, -1000, -1000, 1318, 1841, -1000, -30,
	1818, -1000, -1000, 15941, -31, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 698, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 29397, 22939, 1409, 602, 43081,
	2075, 43815, 23968, 43081, 22939, -1000, -1000, 36552, -1000, 15941,
	-1000, 2074, 1282, -20, -1000, -1000, -1000, -1000, -1000, 1373,
	1388, 726, 928, 9596, 9596, 1949, -1000, 151, 6425, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 29056, -1000, -1000,
	-1000, 1154, 36552, -1000, -1000, 1705, -1000, 22939, 36552, -1000,
	36552, -1000, 36552, -1000, 36552, -1000, 36552, -1000, -1000, -1000,
	-1000, -1000, 3131, -1000, 1691, -1000, -1000, 36552, -1000, 1369,
	-1000, -1000, -1000, 28718, 28377, -1000, 969, 816, -1000, -1000,
	118, -1000, 36552, 1992, 608, -1000, 1354, -1000, 1244, 1452,
	14531, 1456, 15941, 105, -1000, -1000, 105, 105, 9244, -1000,
	-1000, -1000, 36552, -1000, 43595, 43815, 6425, 799, 15941, 15941,
	15941, 15941, 15941, 15941, 15941, 15941, 15941, 15941, 15941, 15941,
	15941, 15941, 15941, 15941, 15941, 15941, 15941, 15941, 15941, 15941,
	15941, 15941, 15941, 15941, 15941, 15941, 15941, 15941, 15941, 15941,
	1432, 15941, 768, 15941, 15941, 15941, 15941, 1349, 1138, 451,
	1206, -1000, 2101, 2101, 2101, 237, 237, 410, 549, -1000,
	15941, -1000, 453, 15941, 294, 41322, -13, 7483, -1000, -1000,
	-1000, 14179, 627, 43081, 150, 6777, -1000, 2135, 1054, 1687,
	1567, 462, 545, 532, 530, 490, 15941, 15941, 13827, 13474,
	13121, 16645, 12768, 15941, 8187, 15941, 15941, 15941, 15941, 12415,
	12062, -1000, 461, -1000, -1000, -1000, -1000, 2124, -1000, -1000,
	2123, -1000, 796, 783, 2122, -1000, -20, -1000, 37904, -1000,
	36552, -14, 2070, 36552, -1000, 112, -1000, 42047, -1000, 112,
	-32, -1000, 1460, 1444, 20164, 1370, 1162, 1162, 1162, -1000,
	460, 540, 587, 5350, 11709, -1000, 27022, 1171, 178, 292,
	18405, 1660, -1000, 36552, -43, 1020, -1000, 25320, 1973, 1971,
	1965, 28036, 2057, 453, 1982, 1667, 767, 28036, 1981, 764,
	2055, 453, 1665, 759, 36552, 6425, 1972, 585, -1000, 36552,
	-1000, -1000, -1000, 1662, -37, -1000, -1000, 24982, 2069, 1817,
	-1000, 1120, -1000, 2067, 36552, 1214, 1324, -1000, -1000, 807,
	1810, 623, 391, 2066, 391, 20865, -1000, 36552, -1000, 36552,
	-1000, -1000, 36552, -1000, 36552, -1000, 36552, 36552, -1000, 36552,
	36552, -40, 43081, 4269, 24644, 758, -1000, 649, 24982, 393,
	-45, -1000, 878, -1000, -1000, -1000, -1000, 347, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 455, 1053, 454, 454, 454, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 590, -1000, -1000, 629,
	629, 629, -1000, -1000, -39, -1000, 1658, 611, -59, 678,
	-20, -1000, 1258, -1000, 1176, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2144, -1000,
	2107, -1000, -1000, 2120, -21, -1000, -21, -1000, 6425, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 36552, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2738, -1000, -1000, -1000, -1000,
	-1000, -1000, 36552, 36552, 36552, -1000, 28036, 619, 1689, -1000,
	1993, -1000, -1000, -1000, -1000, 43081, -1000, 389, -1000, -1000,
	43081, 936, 1475, -1000, 1475, -22, -1000, 42009, 1430, 36552,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 607, 503, 503, 824, 824, 824, 824, 2051, 317,
	793, 1563, 349, 349, 349, 349, 349, 349, 349, 349,
	288, 449, 449, 288, 288, 288, 288, 288, 349, 349,
	349, 237, 43341, 272, 15941, 15941, 756, 1122, 451, 272,
	15941, 272, 272, 272, 272, -1000, 1416, -1000, -1000, -1000,
	-1000, 1646, 450, 16645, 16645, -1000, -1000, -1000, 7835, 16997,
	-1000, -1000, -1000, -1000, 439, 15941, -1000, 41468, -226, 291,
	-106, -1000, 15941, 538, -88, -1000, 872, -1000, 15941, -1000,
	-46, 15941, 15941, 15941, 287, -1000, 285, -1000, 746, -1000,
	743, 736, 731, -1000, 438, 1156, 437, 436, 15941, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 42953, 39425, 284,
	-1000, 1645, -106, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	273, -1000, 269, -1000, 42918, -106, 268, 697, -1000, 16645,
	16645, 16645, 7835, 435, 258, -1000, 41850, -1000, 42692, 11356,
	11356, 11356, 257, 42546, 15941, -106, 39297, 39262, 4816, -67,
	-68, -1000, -69, -1000, 2119, -70, 256, 606, 601, 254,
	-1000, -1000, 433, -75, 623, 11004, 19461, 6425, -1000, 623,
	10300, -1000, 20164, 20164, 1362, 1434, 20164, -1000, -1000, -1000,
	-1000, 27022, 479, 587, 27022, -1000, 2118, 1418, 253, -1000,
	-1000, -1000, 36552, 431, -1000, 587, 252, 993, 36552, 36552,
	36552, -1000, -1000, 1316, 37566, 1314, 43815, 36552, -1000, 428,
	421, 1427, 1411, 36552, 36552, 37228, 36890, 36552, 1103, 453,
	-1000, 599, 417, 36552, 952, 598, 36552, 453, -1000, 416,
	36552, 941, -1000, 595, 1542, 1250, -1000, 843, 1638, 36552,
	250, -77, -29, 43815, -1000, -1000, -1000, -1000, -1000, 36552,
	463, 36552, 453, 36552, 2141, 453, 36552, 1803, 1896, 569,
	36552, 1452, 15941, 1039, -1000, 19109, 641, 36552, 923, 111,
	-1000, -1000, -1000, 579, 36552, -1000, -1000, 117, 117, -1000,
	114, 1318, -30, -1000, 15941, -1000, -1000, 36552, 23968, -82,
	-1000, -1000, 43815, -1000, 547, 798, -1000, 2117, 616, 23968,
	36552, 9596, 9596, -1000, 1448, -1000, -1000, 950, -1000, 1021,
	-1000, -1000, -1000, -1000, 9596, -1000, -51, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1497, 1123, -1000, 936, -1000, 15941,
	2116, -1000, -1000, -1000, 9244, -1000, -1000, -1000, 36552, -161,
	15941, 272, 272, 15941, 16645, 16645, -1000, 272, -1000, -1000,
	-1000, -1000, -1000, 1625, 412, 15941, 43815, 4708, 3643, -91,
	-1000, 15941, -34, -1000, 15941, -1000, 41195, -1000, -1000, 543,
	1880, -1000, 15941, 42419, 249, 10652, -1000, 42273, -53, -53,
	-1000, 2140, 1353, 1271, 1035, 906, 2114, -1000, 21216, 625,
	1188, 41049, 43595, 43815, -1000, 15941, -1000, -1000, 1609, 15941,
	-1000, 43595, 43815, 16645, 16645, 16645, 16645, 16645, 16645, 16645,
	16645, 16645, 16645, 16645, 16645, 16645, 16645, 16645, 16645, 16645,
	16645, 16645, 1415, 16645, 2099, 2099, 2099, -42, 15941, -1000,
	1637, 1609, 15941, 15941, 43815, 248, 246, 244, -1000, 15941,
	-106, 15941, 15941, 15941, -1000, -1000, -1000, 243, -1000, 2113,
	-1000, -1000, -1000, -1000, 393, -1000, 1565, -1000, -90, -1000,
	1660, -1000, 1565, -1000, -1000, 1362, -1000, 407, 15941, 20164,
	-1000, 536, -1000, -92, -1000, 27022, -1000, 535, -223, -1000,
	575, -1000, 587, 406, 36552, 27022, -1000, -1000, -1000, 729,
	728, 1797, -1000, 1313, -1000, 645, -1000, 1006, 15941, 17701,
	405, 404, 1058, -1000, 1791, 1318, 1787, 1318, -1000, -43,
	990, -1000, 21918, 15941, -1000, 718, 21918, -1000, -1000, 15941,
	-1000, 714, 21918, 616, 1604, 823, -1000, 836, -1000, 1529,
	-1000, 24982, 403, 36552, 402, -1000, 401, -1000, -1000, 399,
	36552, 1385, 569, 24306, -1000, 618, 923, -1000, 43081, -1000,
	923, 8892, 1969, -104, -1000, -1000, -1000, 623, 20865, 20164,
	10300, -105, -1000, -1000, -1000, -1000, 43081, -51, 1952, 1952,
	-1000, 2111, -1000, 533, 242, -1000, 27698, -1000, -51, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 36552, -57, -1000, -1000,
	6425, 36552, 36552, 1192, 40922, -1000, 1977, 6425, 2056, 272,
	1119, 669, 15941, 43815, 43463, -107, 15941, 15941, -1000, 236,
	15941, 529, 43081, -1000, -1000, -1000, 43081, 15941, 2139, 15941,
	235, 234, 233, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 214, -1000, -1000, 38918, 15941, 211, -1000, 210, 209,
	43081, 1637, 43081, -1000, -1000, 776, 776, 911, 911, 911,
	911, 2099, 1342, 946, 2697, 2407, 2407, 2407, 2570, 733,
	733, 2407, 2407, 2407, 1601, 1375, 398, 3698, 15941, 207,
	-1000, -1000, 43081, 43081, 205, -1000, -1000, -1000, -106, 4670,
	40776, 40649, -1000, 203, 201, 1553, 2036, -1000, 20164, 1553,
	-1000, 36552, 43081, -1000, -169, -1000, 2110, -1000, -1000, 1418,
	-1000, 5716, 27022, 36552, -112, -1000, 36552, 36552, 36552, 1764,
	-1000, 2594, -1000, 40503, -114, -1000, 321, 2013, 15941, -1000,
	-1000, 396, 17701, 36552, -1000, 1445, 1463, 672, 36552, -1000,
	36552, -1000, 36552, 36552, 36552, -1000, 395, 150, -119, 36552,
	-1000, -121, 36552, -1000, -1000, 23968, 778, -1000, 1139, 1536,
	-1000, 17701, 394, 36552, 24982, 2064, 17701, 1205, 1397, 569,
	24306, -1000, 807, -1000, -1000, -58, -1000, 367, 453, 923,
	-1000, -64, -1000, 572, 1933, -1000, 1928, 527, -1000, -1000,
	-80, 392, -1000, 571, 570, -1000, 1497, -1000, -1000, -1000,
	-1000, -1000, -1000, 1977, 15941, 15941, 43463, -122, -1000, 272,
	272, -1000, 40376, -1000, 43081, -1000, 42273, -1000, -1000, -1000,
	-1000, 1135, -1000, 40230, -1000, -1000, -1000, -1000, 16645, 1574,
	390, 43815, 40004, -1000, -1000, 15941, -1000, -1000, -1000, -1000,
	621, 15941, 15941, 1660, 621, -134, 587, -1000, -1000, -1000,
	2109, -1000, -141, -1000, -1000, -1000, -1000, 36552, -1000, 36552,
	-1000, 6425, 36552, 1578, 1304, -1000, -1000, 1410, 388, 16645,
	36552, -1000, 1071, 17701, 1977, 150, 6425, 1977, 39966, 6777,
	-142, -143, 1302, -1000, 1299, 15941, -1000, 43815, 1318, 1318,
	-1000, 695, 694, 15941, 693, -1000, 688, -1000, -87, 21918,
	-1000, -1000, 2035, 1144, -148, 17701, -149, 198, 453, -151,
	36552, -1000, 569, 24306, -1000, 1896, 1903, 36552, 1963, -1000,
	-1000, 387, 386, 385, -1000, 27360, 27360, 23968, 23968, -1000,
	-1000, 272, 272, -1000, -1000, 194, 1188, 2034, -1000, 196,
	16645, 43815, -157, -1000, 39807, -1000, 36552, 43081, -106, -1000,
	-1000, 27022, 491, -1000, -1000, 1232, -1000, -1000, 36552, 1307,
	-1000, -1000, 15941, 3698, 376, 1529, 375, -1000, -1000, -1000,
	-1000, -1000, -1000, 2013, -46, -1000, 1015, -1000, -1000, 43081,
	2006, -1000, -1000, 36552, 36552, -53, 374, 371, -1000, 1100,
	36552, 1071, -158, -1000, 1529, -1000, 1071, 369, 24306, -1000,
	1385, 788, -163, 36552, -1000, -1000, 7129, 23968, 23968, -1000,
	-165, -1000, -1000, -1000, 957, 15941, 196, -166, -1000, -1000,
	-97, -1000, 2059, -1000, -1000, -1000, -1000, 1757, 39685, 1358,
	36552, -1000, 36552, 1977, 182, 36552, 648, 6425, -1000, -1000,
	180, 15941, 15941, 362, 357, 356, 1529, 1071, -1000, 1529,
	17701, -1000, 1397, 892, -1000, 623, -1000, -179, -180, -1000,
	179, 16293, 16293, -106, -1000, 36552, 351, 1738, -1000, 1194,
	1076, 173, -181, -1000, -1000, 346, -1000, 15941, -1000, 2139,
	-187, -188, 36552, 36552, 36552, -1000, 1529, -1000, -190, -1000,
	20865, -1000, 616, 616, -1000, -1000, -1000, 17349, 1207, 914,
	41728, -1000, -1000, -1000, 36552, -1000, 1202, 1199, 893, -1000,
	-1000, -1000, -1000, -1000, 1358, 43081, -1000, -1000, -193, -195,
	-196, -1000, 1071, -182, -1000, -1000, 2080, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1915, -1000, 661, 1173, 1173, 1194,
	336, 331, 1308, 1529, -1000, 15589, -1000, 2087, -1000, -1000,
	1401, -1000, -1000, 1134, 1115, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 172, 6425, 160, 6425, -1000, 638, -1000,
	636, 327, 1380, -47, 9948, 790, 320, -178, -1000, -198,
	-1000, 43081, -1000, -1000, 324, -1000, 9948, 1134, -1000, 9948,
	9948, -203, -1000, -1000, -204, -1000, -61, 1115, -186, -1000,
	-1000, 1115, -1000,
}
var sqlPgo = [...]int{

	0, 2607, 2605, 1708, 1951, 2604, 2596, 2595, 2594, 2591,
	2590, 2583, 2579, 2578, 2577, 2575, 2573, 2572, 2568, 2567,
	2566, 2565, 2564, 2562, 1947, 2561, 1941, 2560, 2556, 2555,
	2554, 2553, 37, 2552, 2551, 1938, 2549, 2548, 2546, 2543,
	2542, 2539, 1928, 2538, 1868, 2537, 2536, 2532, 2531, 2527,
	1866, 2524, 78, 114, 1858, 2523, 2522, 1855, 1840, 1838,
	2521, 1836, 2520, 2519, 1829, 1783, 2518, 85, 2517, 2516,
	2513, 1780, 1760, 2510, 2509, 2502, 153, 2499, 1754, 2494,
	2493, 2490, 2488, 2487, 2484, 2482, 2481, 2476, 2475, 2473,
	2472, 2471, 2469, 2466, 2465, 2457, 2448, 2447, 157, 2444,
	2441, 1752, 1727, 2437, 2436, 30, 33, 16, 54, 28,
	144, 2993, 139, 2434, 2431, 2430, 2423, 2420, 2416, 41,
	98, 100, 2415, 77, 2413, 2403, 67, 45, 24, 18,
	2402, 91, 2401, 2399, 2290, 27, 2398, 2394, 125, 2392,
	256, 48, 2835, 152, 149, 112, 132, 2391, 2390, 2388,
	74, 119, 7, 4, 3, 6, 1, 2385, 2, 5,
	2384, 2383, 19, 82, 40, 2382, 128, 140, 2375, 2368,
	129, 2365, 50, 102, 1588, 126, 138, 233, 110, 2364,
	63, 17, 57, 2362, 2361, 159, 34, 2358, 31, 75,
	141, 2357, 92, 158, 122, 71, 127, 133, 2356, 2353,
	2351, 103, 2350, 117, 106, 2341, 2335, 68, 2333, 95,
	137, 2328, 2327, 2326, 89, 2323, 120, 2322, 2321, 156,
	148, 109, 15, 66, 62, 13, 1584, 1583, 131, 97,
	53, 44, 2319, 1161, 1261, 39, 51, 105, 83, 56,
	101, 52, 94, 147, 59, 2317, 2316, 134, 2314, 2312,
	2296, 2293, 2289, 104, 2287, 2286, 25, 2285, 65, 38,
	46, 88, 49, 96, 123, 111, 151, 99, 2276, 72,
	124, 2275, 227, 2273, 2271, 1806, 116, 2270, 2268, 2267,
	1800, 1546, 1533, 1020, 2264, 2263, 1092, 1085, 2261, 2219,
	87, 2218, 115, 108, 90, 146, 456, 43, 2217, 121,
	61, 2216, 29, 35, 0, 368, 21, 2214, 118, 60,
	2207, 2206, 2201, 2200, 32, 10, 9, 11, 14, 12,
	113, 26, 2198, 2195, 130, 80, 58, 2194, 154, 2193,
	2192, 2190, 36, 2189, 22, 2188, 20, 2187, 2182, 23,
	8, 2181, 2180, 142, 2169, 93, 2168, 2029, 2167, 150,
	2166, 2162, 1821, 2160, 79, 107,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 121, 121, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 118, 118, 123, 123, 123, 125, 125,
	122, 122, 117, 117, 24, 24, 65, 65, 108, 58,
	58, 58, 302, 302, 303, 303, 104, 104, 105, 105,
	105, 105, 106, 106, 107, 107, 107, 34, 34, 34,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 42, 42, 43, 43, 43, 43, 43,
	43, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 49, 49, 49, 47, 47, 47, 46, 46,
	46, 45, 45, 45, 48, 48, 48, 176, 176, 175,
	175, 179, 179, 50, 50, 50, 50, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 53, 53, 53, 53, 53, 53, 53,
	271, 271, 270, 51, 51, 245, 245, 54, 54, 202,
	202, 55, 55, 55, 55, 55, 56, 56, 66, 66,
	343, 343, 343, 347, 347, 348, 348, 349, 349, 349,
	349, 349, 349, 349, 345, 345, 61, 61, 61, 61,
	62, 62, 62, 63, 63, 103, 103, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 29, 30, 30, 31,
	31, 32, 72, 72, 72, 74, 71, 71, 71, 73,
	73, 73, 73, 75, 75, 76, 76, 76, 76, 76,
	77, 77, 296, 294, 294, 295, 295, 148, 148, 148,
	148, 148, 149, 149, 149, 301, 301, 301, 301, 301,
	301, 300, 300, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	90, 90, 90, 98, 98, 98, 98, 98, 98, 98,
	79, 79, 84, 84, 84, 84, 84, 80, 80, 85,
	85, 86, 86, 87, 87, 87, 87, 87, 87, 81,
	81, 81, 81, 89, 89, 89, 89, 88, 88, 94,
	94, 94, 94, 94, 94, 91, 91, 91, 91, 92,
	92, 92, 95, 95, 95, 95, 82, 82, 83, 83,
	96, 96, 97, 97, 97, 97, 97, 93, 93, 93,
	344, 344, 346, 346, 59, 59, 38, 38, 39, 39,
	150, 150, 151, 151, 224, 224, 224, 224, 152, 152,
	124, 124, 124, 153, 153, 154, 154, 155, 155, 155,
	157, 157, 158, 158, 159, 159, 159, 156, 156, 156,
	223, 312, 312, 313, 313, 313, 313, 313, 313, 314,
	314, 314, 314, 314, 314, 314, 310, 310, 311, 308,
	308, 309, 309, 309, 309, 350, 350, 222, 222, 162,
	162, 315, 315, 315, 315, 316, 316, 316, 316, 316,
	319, 318, 317, 317, 317, 317, 317, 257, 257, 257,
	100, 100, 40, 40, 130, 130, 41, 41, 37, 37,
	37, 206, 206, 166, 166, 262, 262, 262, 141, 141,
	119, 119, 119, 17, 13, 13, 13, 13, 13, 13,
	23, 23, 21, 21, 207, 207, 208, 208, 60, 60,
	64, 64, 69, 69, 99, 99, 99, 99, 99, 99,
	25, 25, 25, 25, 33, 33, 33, 33, 68, 68,
	352, 352, 137, 137, 137, 137, 138, 138, 219, 219,
	220, 220, 353, 353, 221, 221, 221, 132, 131, 133,
	133, 36, 36, 36, 126, 126, 127, 127, 128, 128,
	129, 129, 354, 354, 57, 57, 57, 102, 102, 144,
	144, 216, 216, 216, 218, 218, 217, 217, 217, 192,
	192, 192, 101, 101, 171, 171, 181, 181, 182, 182,
	268, 183, 183, 67, 67, 111, 111, 109, 109, 109,
	109, 109, 109, 110, 110, 110, 112, 112, 112, 112,
	112, 112, 112, 115, 115, 115, 116, 116, 116, 114,
	114, 325, 325, 325, 328, 328, 324, 326, 326, 327,
	327, 351, 351, 193, 193, 193, 161, 160, 160, 164,
	164, 163, 165, 165, 261, 261, 261, 190, 190, 190,
	190, 211, 211, 209, 209, 210, 210, 212, 212, 213,
	213, 213, 214, 214, 215, 215, 189, 189, 241, 241,
	113, 113, 113, 170, 170, 170, 172, 172, 231, 231,
	231, 232, 232, 230, 230, 230, 230, 263, 263, 263,
	263, 263, 263, 263, 263, 341, 341, 341, 342, 342,
	260, 260, 264, 264, 264, 264, 264, 264, 258, 258,
	258, 258, 259, 259, 269, 269, 196, 196, 196, 196,
	194, 194, 195, 195, 265, 265, 265, 265, 191, 191,
	266, 266, 266, 225, 225, 272, 272, 272, 290, 290,
	169, 169, 169, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 274, 274, 274, 274, 276, 276,
	276, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 275, 275, 275, 289,
	289, 289, 289, 289, 277, 277, 284, 284, 285, 285,
	286, 287, 278, 278, 279, 279, 280, 281, 288, 288,
	288, 288, 292, 292, 282, 282, 282, 282, 282, 283,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 204, 204, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 235, 235,
	235, 235, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 320, 320, 320, 320, 320, 320, 320,
	320, 322, 322, 323, 323, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 329, 329, 330, 330, 332,
	332, 333, 333, 334, 335, 335, 335, 336, 337, 337,
	331, 331, 338, 338, 338, 339, 339, 340, 340, 340,
	340, 340, 247, 247, 248, 249, 255, 255, 255, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 139, 139, 139, 139, 139,
	178, 178, 177, 177, 244, 244, 242, 242, 246, 246,
	197, 197, 291, 291, 291, 291, 291, 291, 291, 198,
	198, 198, 205, 199, 199, 200, 200, 200, 200, 200,
	238, 239, 201, 201, 201, 240, 240, 250, 254, 254,
	253, 252, 252, 251, 251, 228, 228, 229, 229, 227,
	226, 186, 186, 185, 185, 184, 184, 355, 355, 256,
	256, 187, 187, 188, 180, 180, 267, 267, 267, 267,
	173, 173, 146, 146, 174, 174, 142, 142, 145, 145,
	143, 143, 143, 143, 167, 167, 168, 168, 140, 140,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 293, 293, 293, 243, 134, 134, 134, 135, 135,
	136, 136, 298, 298, 298, 299, 299, 299, 299, 297,
	297, 297, 297, 297, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 2, 7, 3, 2, 2, 2, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 1, 3, 1,
	2, 2, 3, 2, 2, 5, 3, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	1, 3, 1, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 2, 6, 2,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 1, 2,
	2, 3, 2, 4, 3, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 1, 4, 6, 1,
	3, 1, 6, 6, 3, 5, 3, 2, 6, 3,
	3, 4, 4, 3, 3, 1, 3, 3, 1, 1,
	2, 1, 1, 1, 1, 1, 3, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	2, 3, 3, 1, 1, 1, 1, 1, 2, 2,
	3, 3, 4, 4, 3, 4, 4, 4, 3, 2,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 2, 3, 3, 3, 2, 3, 4,
	3, 5, 3, 4, 5, 2, 3, 3, 3, 4,
	2, 3, 4, 3, 3, 3, 4, 4, 4, 4,
	2, 3, 7, 7, 7, 4, 5, 5, 5, 5,
	2, 0, 2, 0, 3, 2, 8, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 1, 0, 9, 9, 6, 7, 5,
	3, 5, 1, 3, 1, 1, 1, 10, 11, 9,
	3, 2, 0, 3, 1, 2, 2, 3, 6, 2,
	1, 1, 2, 4, 2, 5, 7, 8, 5, 3,
	1, 4, 6, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 2, 4, 3, 3, 0, 6, 3, 11, 14,
	4, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 8, 10, 8, 10,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	3, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 2, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 0, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 3, 6, 3, 1,
	3, 1, 4, 2, 8, 5, 4, 3, 0, 2,
	2, 0, 8, 3, 2, 0, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 2, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 8, 8, 2, 4, 4, 4, 2,
	2, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 4, 5, 2, 2, 1,
	1, 1, 0, 2, 5, 2, 3, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 2, 3, 3, 2, 0, 1, 3, 3, 5,
	1, 1, 3, 2, 4, 4, 0, 8, 4, 6,
	3, 3, 1, 5, 5, 0, 2, 3, 1, 3,
	2, 0, 3, 4, 5, 4, 5, 4, 5, 2,
	4, 1, 1, 0, 5, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 1, 1,
	2, 3, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	5, 2, 1, 1, 1, 1, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 3,
	4, 4, 5, 3, 3, 3, 3, 3, 4, 3,
	4, 3, 3, 4, 3, 4, 3, 4, 5, 6,
	6, 7, 6, 7, 6, 7, 3, 4, 4, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 2, 1, 3, 1, 1, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	3, 4, 1, 1, 1, 5, 1, 3, 3, 1,
	3, 3, 1, 3, 3, 1, 1, 3, 3, 1,
	1, 6, 6, 4, 3, 4, 3, 4, 3, 4,
	4, 3, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 3, 4, 3, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 5, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 0, 1, 3, 1, 3, 3, 3, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 2,
	2, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	1, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	1, 1, 2, 2, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 381, -4, -24, -26, -29, -34,
	-35, -55, -42, -43, -44, -54, -50, -56, -57, -58,
	-59, -51, -65, -64, -66, -69, -67, -60, -61, -70,
	-78, -99, -100, -101, -102, -5, -6, -7, -8, -9,
	23, 34, -27, -28, 47, -30, 71, -36, -37, -38,
	-39, 73, -40, -41, 94, -327, 98, -45, -46, -47,
	-49, -48, 102, 109, 112, 134, 145, 231, 237, 258,
	260, 262, 269, -109, -111, 256, -62, -63, -71, -72,
	-73, -74, -103, 281, -79, -80, -81, -82, -83, -84,
	-85, -86, -87, -88, -89, -90, -91, -92, -93, -94,
	-95, -96, -97, 284, -25, -33, -68, 323, -11, -12,
	-15, -14, -16, -13, -20, -22, -19, -21, -23, -17,
	-18, -10, 111, -325, -112, -110, 378, 257, 332, 35,
	293, 61, 105, 264, 348, 355, -115, -113, -114, -116,
	274, 340, 303, 382, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 2, 303, 343,
	87, 153, 242, -343, 2, -174, 303, 87, -143, -134,
	371, 4, -304, -306, 20, 21, 23, 33, 34, 35,
	40, 44, 47, 48, 55, 60, 61, 62, 67, 64,
	65, 66, 69, 71, 72, 75, 76, 77, 85, 86,
	88, 90, 94, 96, 98, 101, 102, 104, 109, 111,
	110, 112, 122, 123, 128, 130, 135, 141, 142, 145,
	146, 154, 157, 159, 152, 169, 170, 171, 175, 176,
	177, 180, 179, 184, 185, 188, 189, 192, 194, 196,
	197, 200, 198, 202, 203, 205, 204, 210, 212, 213,
	215, 218, 221, 224, 227, 228, 229, 230, 231, 233,
	235, 237, 239, 240, 241, 242, 243, 245, 246, 248,
	249, 250, 251, 252, 256, 254, 255, 257, 258, 259,
	260, 262, 264, 265, 267, 282, 283, 294, 269, 270,
	271, 272, 273, 277, 275, 278, 279, 281, 284, 286,
	289, 292, 293, 295, 298, 299, 296, 291, 302, 304,
	305, 306, 307, 308, 309, 310, 311, 318, 319, 323,
	324, 325, 326, 329, 330, 331, 332, 334, 337, 338,
	339, 344, 349, 350, 351, 352, 353, 28, 36, 37,
	38, 39, 41, 42, 45, 46, 51, 52, 53, 56,
	89, 91, 92, 108, 113, 114, 124, 125, 126, 136,
	138, 147, 148, 151, 158, 160, 161, 162, 163, 164,
	166, 173, 174, 182, 199, 209, 211, 222, 226, 234,
	236, 244, 266, 276, 287, 288, 297, 300, 313, 314,
	315, 320, 321, 336, 340, 341, 381, 381, 2, 170,
	241, -142, -134, 87, 381, 381, 381, 381, 303, 2,
	333, 343, -206, 87, 328, 381, 381, -134, 237, 22,
	2, 96, 157, 331, 330, 22, 233, 275, 305, 307,
	2, 381, 381, 381, 381, 381, 2, 343, 303, 153,
	87, 333, -134, 2, -53, 2, 378, -52, -4, -35,
	-44, -54, -50, -24, -26, -42, -58, -57, -59, -61,
	-65, -64, -67, -71, -72, -78, -101, -102, 281, 111,
	-347, 2, 22, -348, -349, 73, 102, 134, 274, 157,
	96, 330, 303, 2, 170, 2, -134, 2, -343, 2,
	170, 2, -347, 2, -134, 2, -138, 2, 269, -134,
	381, 381, 381, 381, 381, 189, 55, 266, 278, -76,
	319, -75, 313, -296, -77, 2, -175, 200, -134, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 2, -98, 278, 34,
	55, 22, 60, 88, 135, 153, 154, 176, 68, 69,
	240, 189, 171, 318, 177, 279, 304, 319, 73, 334,
	308, 110, 4, 87, 200, 280, 313, 381, 381, 381,
	-351, 2, 303, 271, 284, -110, -112, -111, -163, -164,
	327, 165, 107, 220, -109, -111, 2, -325, -98, 278,
	2, 55, 22, -294, 2, -256, 216, -233, 93, -235,
	369, 370, 364, 206, 354, -247, -237, -250, 108, 266,
	378, -142, -236, 384, 9, -322, -111, 29, -248, -249,
	49, -134, 7, 8, 5, 6, -140, -274, -243, -283,
	322, 115, 208, -320, -321, 4, -304, -298, -275, -285,
	-279, -282, 166, 58, 79, 80, 83, 81, 84, 280,
	333, 50, 28, 113, 114, 226, 234, 300, 320, 321,
	147, 209, 148, 56, 136, 182, 101, 37, 39, 41,
	42, 51, 52, 89, 91, 92, 124, 125, 126, 158,
	160, 161, 162, 163, 164, 211, 244, 287, 297, 314,
	315, 341, -305, -286, -287, -280, -281, 74, 116, 133,
	156, 149, 168, 172, 183, 186, 195, 201, 223, 225,
	263, 285, -288, -352, 2, 319, 319, 2, -352, 2,
	-352, 2, -137, 2, 319, 316, -328, 245, -324, -134,
	-328, 381, 381, 383, 381, -160, -161, 2, 22, 99,
	-188, 2, 378, -263, 2, 376, -265, -142, -111, -264,
	378, 217, -3, 2, -265, 147, -142, 2, -265, 147,
	-142, 2, -134, 2, -145, 147, -142, -297, 4, -304,
	-306, -305, -307, 58, 22, 24, 25, 26, 27, 29,
	30, 31, 32, 43, 49, 50, 54, 57, 59, 68,
	73, 78, 79, 81, 80, 82, 83, 84, 93, 95,
	97, 99, 100, 103, 105, 107, 115, 117, 129, 131,
	132, 134, 137, 139, 150, 153, 155, 165, 167, 178,
	181, 187, 190, 191, 206, 207, 208, 214, 216, 217,
	219, 220, 232, 238, 247, 261, 274, 280, 290, 301,
	303, 312, 316, 317, 322, 327, 328, 333, 335, 342,
	343, 345, 346, 347, 348, 316, 383, -174, -167, -134,
	-227, -226, 380, -233, 2, -233, 2, 132, 378, -185,
	-186, -226, -227, 2, -175, 147, -134, 2, -175, 2,
	153, -134, 147, 2, -134, 22, 132, 2, 167, 2,
	167, 2, -266, 2, -265, -176, 147, 2, -175, -176,
	147, 2, -146, 147, 2, -145, -134, 147, 2, -167,
	147, 2, -202, 378, -271, 2, -270, -299, 4, -304,
	-306, -305, 340, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 278, 216, 383, -175, -233,
	-245, 378, 132, -233, 216, -134, 2, 282, 2, 378,
	-76, 53, 319, -220, 2, -221, -131, -132, -133, 169,
	239, 243, 353, 316, 359, 132, -294, -179, 380, -98,
	2, -302, 2, -300, 9, -299, 5, 282, 2, 240,
	279, 55, 132, 2, 2, -344, 2, 216, 132, 2,
	132, 2, 132, 2, 132, 2, 132, 2, 2, 240,
	279, 2, 129, 2, 318, 2, 2, 132, 2, 169,
	239, 294, 2, 303, 343, 2, 132, 132, 353, 2,
	-191, -265, 303, 353, 22, -163, -164, -190, -209, -210,
	187, 117, 214, -193, 22, 99, -193, -193, 44, 379,
	379, -98, 282, 2, 10, 11, 57, 33, 369, 370,
	371, 372, 127, 373, 374, 367, 368, 366, 357, 358,
	361, 362, 363, 70, 360, 359, 63, 193, 268, 118,
	119, 120, 121, 253, 13, 14, 15, 26, 219, 186,
	354, 149, 285, 364, 16, 17, 18, 168, 36, 150,
	-139, -147, -233, -233, -233, -233, -233, 225, -184, -228,
	376, -111, 378, 378, -111, -233, -177, 378, 7, -111,
	-242, 376, -251, -233, -185, 378, 5, 378, 5, -329,
	349, 129, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 236, -292, 344, -292, -292, -276, 378, -276, -277,
	378, -276, 350, 355, 378, -219, -220, -219, 316, -138,
	383, -328, -168, 378, -188, -180, -267, -233, 371, -180,
	-187, -256, 74, -196, 172, 201, 133, 183, 263, 156,
	7, -53, -230, 384, 378, 371, -260, 355, -111, -264,
	378, -263, -142, 378, -121, 254, -120, 21, 23, 102,
	338, 108, 291, 309, 111, 270, 254, 108, 111, 254,
	291, 309, 270, 254, 108, 384, 111, -302, -143, 383,
	-297, 371, 295, 379, -173, -142, -186, 378, -162, 206,
	-130, -326, 348, -162, 378, -135, 147, 2, -134, -326,
	206, -266, -144, -142, -144, 281, -134, 30, -123, 383,
	48, 259, 108, -123, 108, -123, 383, 108, -123, 108,
	108, -177, -233, 379, 383, -343, -349, 73, 378, 30,
	-244, -272, -273, -275, -284, -278, -282, -283, 40, 46,
	45, 174, 173, 310, 199, 276, 288, 336, 151, 38,
	215, 159, 4, 158, 160, 161, 162, 163, 164, 287,
	37, 244, 125, 126, 124, 101, 92, 91, 211, 42,
	41, -286, -287, -280, -281, 89, 314, 315, 166, 39,
	52, 51, 341, 297, -303, -302, -343, -296, -177, 30,
	-220, 2, -353, 383, 185, -149, 192, 205, 141, 217,
	351, -301, 5, 4, -243, -257, 93, 189, -283, 8,
	370, -293, 7, 369, -295, -294, -295, 77, 380, -297,
	-175, 22, 283, 2, -296, -346, 129, -343, -296, -296,
	-296, -296, -296, 278, -53, 129, -134, 185, -296, 2,
	-296, 2, 303, 153, 303, -123, 383, -142, 64, 65,
	353, -190, -210, -209, -212, -233, 22, -215, 123, 202,
	-233, -235, -110, -110, -110, -165, -261, -233, 238, 153,
	-296, -290, -272, -289, 249, 250, 248, 252, 251, -272,
	-297, 313, -233, -233, -233, -233, -233, -233, -233, -233,
	-233, -233, -233, -233, -233, -233, -233, -233, -233, -233,
	-233, -233, -233, -233, -233, -233, -233, -233, -233, -233,
	-233, -233, -233, -233, 186, 149, 285, 36, 150, -233,
	316, -233, -233, -233, -233, 198, 206, 208, 322, 115,
	329, 99, 212, -355, 301, 32, -240, -111, 378, -255,
	27, 290, 22, -247, 266, 378, -228, -233, -229, -178,
	-177, 379, 383, -178, -246, -242, -254, -253, 345, 379,
	-177, 342, 22, 99, 371, 2, 7, -203, 352, 197,
	90, 142, 196, -204, 273, -330, 122, 137, 378, 379,
	2, 379, 2, 379, 2, 379, 2, -233, -233, -197,
	2, -291, -177, 4, 352, 197, 90, 142, 196, 273,
	-197, 2, -198, 2, -233, -177, -199, -234, -235, 369,
	370, 364, 378, 266, -200, 2, -233, -178, -233, 43,
	181, 317, -201, -233, 132, -177, -233, -233, -233, -177,
	-177, 2, -177, 2, 378, 7, 7, 313, 313, 7,
	-138, -324, 30, -167, -170, 383, 132, 30, 4, -170,
	383, 379, 172, 172, -263, -196, 172, -194, 223, -194,
	-194, -341, 378, 377, -260, -297, 376, 385, -178, 2,
	-259, -258, 30, -134, 221, 379, -142, 383, 316, -207,
	68, 59, -223, 147, 59, -308, -134, 68, -309, 54,
	328, 238, 131, -207, 68, -207, 68, 68, -265, 33,
	-67, 66, 132, 316, -265, 66, 316, 33, -67, 132,
	316, -145, -297, 66, -269, 356, -134, 132, 379, 383,
	-150, -167, -151, -134, -224, -223, -310, -311, -308, 153,
	328, 116, 30, 108, 230, 30, 216, 206, -126, 306,
	108, -225, 346, -216, -67, 378, 93, 30, -216, -181,
	-182, -268, -183, -142, 378, -134, -175, -176, -176, -145,
	-146, -134, -167, 379, 383, -53, -270, 316, 335, -151,
	-52, 379, 383, -169, 29, 376, -203, 378, -269, 383,
	132, 359, 316, 379, 319, -221, -148, 243, 289, 255,
	277, 8, 7, 7, 383, -297, -345, -134, 278, -53,
	-142, -145, -142, -265, 348, 129, 65, -213, -293, 378,
	370, -214, 266, 267, 383, -119, 31, 97, 175, -142,
	353, -233, -233, 316, -355, 301, -240, -233, 198, 208,
	322, 115, 329, 99, 212, 132, 378, -234, -234, -177,
	-237, 378, -177, 377, 387, 379, -233, 377, 377, 383,
	-252, -253, 103, -233, -164, 383, -163, -233, -177, -177,
	379, 379, 316, 316, 316, 316, 378, -335, 224, 378,
	378, -233, 30, 383, 379, 132, 379, 379, -205, 232,
	379, 10, 11, 369, 370, 371, 372, 127, 373, 374,
	367, 368, 366, 357, 358, 359, 63, 193, 268, 13,
	14, 15, 168, 150, -234, -234, -234, -177, 378, 379,
	-238, -239, 132, 129, 30, -201, -201, -201, 379, 132,
	-177, 383, 383, 383, 379, 379, 379, 7, 379, 383,
	379, 353, 353, 379, 378, 379, -225, -267, -172, 2,
	-263, -297, -225, -256, -263, -263, -195, 335, 216, 172,
	-263, -258, 379, -342, 7, -260, -259, 7, -232, -231,
	130, 204, 379, -134, 378, -260, 379, -120, -142, -134,
	-134, 206, -223, 147, -125, 206, -272, -134, 378, 378,
	175, 175, -134, -134, 147, -134, 147, -134, -134, -121,
	254, -67, 353, 378, -142, 254, 353, -134, -67, 378,
	-134, 254, 353, -104, 146, 212, 295, 132, -142, 379,
	379, 383, -135, 153, -135, -67, -175, 5, -67, -142,
	108, -127, 104, -354, 359, -134, -211, -209, -233, -192,
	-218, 261, 216, -173, 340, -134, -192, -171, 383, 132,
	359, -173, -123, -123, -123, -123, -233, -345, -302, 379,
	-272, 376, 377, 7, 7, -107, 348, -302, -345, -294,
	-294, -131, 326, 62, 243, -294, 383, -31, -32, 153,
	242, 87, 303, -214, -233, -261, -142, 384, -233, -233,
	-234, -234, 132, 378, -233, -244, 26, 26, 379, -178,
	383, -229, -233, 379, -242, 105, -233, 312, 379, 342,
	-164, -164, -164, 5, 197, 142, 196, -204, 196, -204,
	-204, 7, -336, -134, 378, 346, -163, 379, -290, -272,
	-233, -238, -233, -290, -272, -234, -234, -234, -234, -234,
	-234, -234, -234, -234, -234, -234, -234, -234, -234, -234,
	-234, -234, -234, -234, 99, 206, 212, -234, 383, -178,
	-239, -238, -233, -233, -272, 379, 379, 379, -177, -233,
	-233, -233, 379, 7, -52, -189, 137, -269, 383, -189,
	-195, 378, -233, -263, 377, 379, 383, -259, 377, 383,
	386, 359, -260, 378, -167, -258, 316, 316, 108, 206,
	337, -312, -309, -233, -166, -262, -134, -323, 378, -320,
	-321, -140, 378, 378, -118, 102, 281, -208, 108, -123,
	108, -123, 316, -207, 68, -236, -140, -134, -177, 316,
	-236, -177, 316, -236, -107, 132, 302, 295, -152, 152,
	-224, 378, -135, 378, 378, -162, 378, -134, -128, 180,
	-354, -300, -326, -192, -192, -180, 207, 67, 379, -225,
	-182, -172, -256, 379, -108, 75, -108, 7, 377, 379,
	-106, 218, -105, -134, 5, -134, 383, -297, -134, -142,
	217, 379, -119, -297, 26, 26, -233, -244, 379, -233,
	-233, 379, -233, 377, -233, 5, -233, 379, 379, 379,
	379, -337, -134, -233, 379, 379, 379, -239, 132, 99,
	212, 378, -233, 379, 379, 383, 379, 379, 379, 379,
	-241, 139, 44, -263, -241, -167, -230, 7, -231, -297,
	376, -259, -167, 379, -134, -134, -223, 108, -313, 68,
	-314, 57, 116, 73, 206, 208, 328, 238, 54, 93,
	247, 379, 379, 383, -141, -185, 57, -141, -233, 378,
	-166, -167, 206, 93, 206, 93, 86, 324, -134, -134,
	-142, -134, -134, 378, 379, -142, 379, -134, -303, 313,
	-153, -154, 229, 150, -166, 378, -167, -150, 30, -166,
	216, -129, 179, -354, -300, -126, -217, 378, 216, -67,
	-192, 359, 86, 86, 377, 383, 378, 359, 359, -32,
	-119, -233, -233, 379, 379, -164, -331, 229, 379, -234,
	132, 378, -244, 379, -233, -332, 347, -233, -177, -332,
	379, -260, 7, 379, -223, -134, -297, -134, 116, 147,
	208, 175, 378, -234, -142, -222, -350, 72, 299, -262,
	-119, -297, -119, 379, -177, 379, 379, 208, 208, -233,
	-272, -123, -123, 316, 316, -177, 316, 316, -236, 44,
	227, 379, -166, 379, 379, -67, 379, -142, -354, -300,
	-127, 100, -167, 68, -188, -111, 378, 378, 378, -105,
	-106, -302, -302, 379, -164, 44, -234, -244, 379, 379,
	-333, -334, -134, -259, 377, -314, -135, 206, -233, -136,
	378, -152, 378, -141, -164, 247, -122, 57, -134, -134,
	-164, 378, 378, 188, 242, -142, -222, 379, -152, -222,
	378, -300, -128, 330, 207, 379, -134, -303, -303, 379,
	-338, 242, 267, -177, 379, 383, 30, 108, 379, -315,
	194, -134, -167, -119, 379, -142, -117, 335, -297, 379,
	-177, -177, 378, 378, 378, -152, -222, -152, -166, -129,
	281, -225, 379, 379, 379, -339, -340, 36, 325, 77,
	-233, -339, -334, -336, 116, -316, -319, -318, 216, 133,
	228, 286, 379, 379, -162, -233, 379, 379, -167, -167,
	-167, -152, 379, -181, -107, -107, -340, 235, 128, 266,
	235, 128, -134, -318, 216, -319, 216, 330, 96, -315,
	379, 379, 379, -222, -225, 26, -317, 203, 259, 48,
	281, -317, -316, 378, 378, -124, 48, 259, -152, -340,
	20, 208, 93, -155, 229, -156, 229, 379, -297, 379,
	-297, 340, 340, -157, 378, 184, 383, -154, -153, -158,
	-159, -233, 93, 195, 311, -155, 378, 383, 379, 383,
	378, -158, -155, -159, -158, 379, 379, 383, -154, -153,
	-156, 383, -156,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 306, 0, 159, 161, 163,
	165, -2, 168, 170, 0, 0, 0, 181, 183, 185,
	187, 189, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 673, -2, 0, 286, 288, 297, 299,
	301, 303, 304, 0, 353, 355, 357, 359, 361, 363,
	365, 367, 369, 371, 373, 375, 377, 379, 381, 382,
	384, 386, 388, 0, 594, 596, 598, -2, 65, 66,
	67, 68, 69, 70, 78, 79, 80, 81, 72, 74,
	75, 77, 0, 709, -2, 720, 0, 0, 0, -2,
	0, -2, -2, -2, 0, 0, 686, 688, 690, 692,
	-2, 0, 0, -2, 7, 13, 15, 17, 20, 22,
	24, 26, 28, 30, 32, 34, 36, 38, 40, 43,
	49, 51, 53, 56, 58, 60, 62, 64, 0, 0,
	0, 0, 0, 0, 125, 270, 0, 1290, 1214, 1220,
	1221, 1245, 1246, 1247, 1264, 1265, 1266, 1267, 1268, 1269,
	1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279,
	1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289,
	1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300,
	1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310,
	1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320,
	1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330,
	1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340,
	1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350,
	1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360,
	1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370,
	1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380,
	1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390,
	1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400,
	1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410,
	1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420,
	1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430,
	1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440,
	1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450,
	1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460,
	1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470,
	1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480,
	1481, 1482, 1483, 1484, 1485, 1486, 151, 153, 154, 0,
	0, 0, 1216, 1290, 160, 162, 164, 166, 0, 172,
	0, 0, 0, 0, 561, 169, 171, 261, 1352, 263,
	265, 0, 0, 0, 0, 175, 176, 177, 178, 179,
	180, 182, 184, 186, 188, 190, 191, 0, 0, 0,
	0, 0, 260, 258, 213, 214, 0, 243, 244, 245,
	246, 247, 249, 217, 219, 220, 222, 224, 226, 228,
	229, 231, 233, 234, 236, 238, 239, 241, 0, 0,
	0, 267, 273, 274, 275, 277, 278, 279, 280, 281,
	282, 283, 0, 131, 0, 465, 256, 254, 0, 127,
	0, 591, 0, 269, 592, 593, 588, 589, 1379, 617,
	287, 289, 298, 300, 302, -2, -2, 1473, -2, 317,
	-2, 325, 1479, 0, 328, 329, 332, -2, 209, 354,
	356, 358, 360, 362, 364, 366, 368, 370, 372, 374,
	376, 378, 380, 383, 385, 387, 389, 390, 0, 0,
	0, 394, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, 0, -2, -2, 0, 0, -2,
	0, 0, 393, 395, 396, 397, 0, 595, 597, 599,
	0, 551, 711, 0, 0, -2, 684, 685, -2, 0,
	715, 715, 715, 0, 0, 685, 683, 0, 290, 0,
	292, 0, 394, 295, 296, 333, 334, 1199, 1200, 916,
	0, 0, 0, 0, 0, 0, 1018, 1020, 1444, 1473,
	0, 1022, 1023, 0, 1025, 1027, 1028, 0, 1031, 1032,
	1184, 1216, 1230, 1231, 1232, 1233, 0, 0, 1236, 0,
	1238, 1239, 1240, 1086, 1042, -2, -2, 1228, 844, 845,
	846, 847, -2, 1487, 1046, 1049, 1052, 1055, 1056, 1059,
	1060, 0, 1428, 1445, 1446, 1469, 1470, 1478, 1482, 1483,
	1452, 1466, 1453, 1440, 1450, 1464, 1296, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1254, 878, 879, 884, 885, 1488, 1489, 1490,
	1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500,
	1501, 1502, 887, 619, 601, 610, 619, 603, 604, 605,
	606, 607, 608, 609, 612, 0, 701, 1358, 704, 1227,
	702, 687, 689, 0, 691, 0, 0, 695, 717, 716,
	750, 751, 0, 699, 700, 710, 766, 804, 781, 772,
	0, 0, 2, 71, 0, 1452, 804, 73, 0, 1452,
	804, 76, 0, 82, 0, 1452, 1219, 0, 1259, 1260,
	1261, 1262, 1263, 1487, 1503, 1504, 1505, 1506, 1507, 1508,
	1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518,
	1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528,
	1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538,
	1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548,
	1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558,
	1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568,
	1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578,
	1579, 1580, 1581, 1582, 1583, 0, 0, 271, 272, 1224,
	1222, 1223, 0, 155, 156, 157, 158, 0, 0, 1217,
	1193, 1191, 1192, 167, 530, 1452, -2, 553, 530, 557,
	-2, 708, 1452, 633, 262, 264, 0, 174, 0, 646,
	0, 648, 0, 663, 810, 117, 1452, 194, 207, 117,
	1452, 197, 117, 1452, 200, 1212, 117, 1452, 203, 204,
	1452, 206, 257, 0, 0, -2, 250, 252, 1255, 1256,
	1257, 1258, -2, 248, 218, 221, 223, 225, 227, 230,
	232, 235, 237, 240, 242, -2, 0, 0, 0, 464,
	0, 0, 0, 590, 0, 616, 305, 0, 314, 0,
	316, 1439, -2, -2, 320, 620, 624, 625, 626, 0,
	0, 0, 0, 0, 0, 0, 330, 210, 0, 391,
	392, 400, 401, 132, 133, 351, 352, 0, 404, 425,
	437, 0, 0, 408, 410, 463, 412, 0, 0, 414,
	0, 416, 0, 418, 0, 420, 0, 422, 424, 426,
	438, 428, 710, 430, 0, 432, 436, 0, 441, 0,
	443, 444, 445, 0, 0, 451, 0, 0, 398, 399,
	117, 808, 0, 0, 0, -2, 0, 679, 729, 730,
	0, 0, 0, 0, 713, 714, 0, 0, 0, 675,
	676, 291, 0, 294, 0, 0, 0, 0, 1119, 1120,
	1121, 1122, 1123, 1124, 1127, 1128, 1125, 1126, 1129, 1130,
	0, 0, 0, 0, 0, 1131, 0, 0, 0, 0,
	0, 0, 0, 0, 1132, 1133, 1134, 0, 0, 1136,
	0, 1138, 0, 0, 0, 0, 0, 0, 1198, 0,
	0, 1135, 921, 922, 923, 955, 956, 0, 1019, 1195,
	1188, 1021, 0, 1141, -2, 1142, 0, 0, 1024, 1029,
	1030, 1141, 0, 1183, -2, 0, 1235, 0, 913, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1164, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 863, 881, 892, 889, 888, 865, 0, 864, 862,
	0, 866, 0, 0, 0, 600, -2, 602, 0, 614,
	0, 703, 0, 0, 752, 755, 1204, 1208, 1209, 755,
	0, 1201, 0, 0, 0, 0, 801, 801, 801, 799,
	775, 0, 781, 0, -2, 805, 793, 0, -2, 772,
	0, 0, 806, 0, 83, 585, 96, 0, 585, 585,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 795, 1215, 0,
	1189, 1190, 147, 0, 0, 1210, 1194, 471, 0, 0,
	552, 0, 707, 0, 0, 0, 1452, 560, 1248, 635,
	0, 814, 0, 649, 0, 0, 811, 0, 192, 0,
	115, 116, 0, 195, 0, 198, 0, 0, 201, 0,
	0, 0, 1142, 710, 0, 0, 276, 0, 0, 710,
	0, 1144, 822, 823, 824, 825, 826, 913, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 875, 0, 850, 850, 850, 867,
	868, 876, 877, 882, 883, 894, 895, 897, 899, 893,
	893, 893, 890, 891, 795, 134, 0, 0, 0, 0,
	-2, 322, 0, 622, 0, 627, 342, 343, 344, 629,
	630, 326, 345, 346, 347, 348, 349, 350, 0, 547,
	0, 549, 1241, 0, 323, 335, 324, 327, 0, 211,
	402, 403, 405, 406, 407, 411, 0, 460, 413, 415,
	417, 419, 421, 429, 433, 710, 439, 442, 446, 447,
	448, 449, 0, 0, 0, 550, 0, 307, 0, 455,
	0, 682, 727, 728, 733, 737, 738, 741, 744, 745,
	735, 916, 696, 697, 698, 721, 722, 572, 0, 0,
	293, 917, 818, 819, 869, 870, 871, 872, 873, 918,
	919, 0, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, -2, -2, -2, -2, -2, -2, -2, -2,
	942, 943, 944, 945, 946, 947, 948, 949, -2, -2,
	-2, 953, 954, -2, 1137, 1139, 0, 1198, 0, -2,
	0, -2, -2, -2, -2, 967, 0, 969, 972, 974,
	976, 0, 0, 0, 0, 1197, 986, 1175, 0, 0,
	1116, 1117, 1118, 971, 0, 0, 1196, 1187, 0, 0,
	1140, 1026, 0, 0, 0, 1148, 1182, 1178, 0, 1033,
	720, 0, 0, 0, 0, 1040, 0, 1244, 900, 901,
	902, 903, 904, 905, 914, 1096, 0, 0, 0, 1047,
	1048, 1050, 1051, 1053, 1054, 1057, 1058, 0, 0, 0,
	1064, 0, 1151, -2, -2, -2, -2, -2, -2, -2,
	0, 1066, 0, 1068, 1142, 1161, 0, 0, 989, 0,
	0, 0, 0, 1473, 0, 1071, 1142, 1169, 0, 0,
	0, 0, 0, 1142, 0, 1174, 0, 0, 0, 0,
	0, 1082, 0, 1084, 0, 0, 0, 0, 0, 0,
	613, 705, 0, 0, 814, 0, 0, 0, 1207, 814,
	0, 1203, 0, 0, 0, 0, 0, 796, 800, 797,
	798, 0, 0, 781, 793, 763, 0, 0, 0, 770,
	771, 792, 0, 791, 780, -2, 0, 0, 0, 0,
	0, 584, 98, 1452, 0, 119, 0, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	0, 0, 1218, 0, 137, 0, 1225, 0, 0, 0,
	0, 0, 470, 1224, 472, 474, 475, 476, 477, 1249,
	0, 1249, 0, 0, 0, 0, 0, 0, 637, 643,
	0, 732, 0, 661, 651, 0, 0, 0, 661, 665,
	666, 668, 669, 0, 0, 812, 208, 117, 117, 1213,
	117, 117, 205, 259, 0, 215, 251, 0, 0, 0,
	253, 255, 0, 815, 817, 0, 827, 0, 146, 0,
	0, 0, 0, 315, 0, 621, 628, 0, 339, 0,
	341, 548, 1243, 1242, 0, 212, 462, 284, 431, 434,
	457, 458, 459, 809, 0, 0, 456, 0, 739, 0,
	0, 736, 742, 743, 0, 724, 570, 571, 0, 0,
	0, -2, -2, 0, 0, 0, 987, -2, 968, 970,
	973, 975, 977, 0, 0, 0, 0, 0, 0, 0,
	988, 1141, 0, 1185, 1188, -2, 1143, 1146, 1147, 0,
	0, 1179, 0, 0, 0, 0, 719, 720, 720, 720,
	1039, 0, 0, 0, 0, 0, 0, 1041, 0, 0,
	0, 0, 0, 0, 1063, 0, 1065, 1067, 0, 0,
	1069, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 992, 993, 994, 0, 1141, 1070,
	1167, 1168, 0, 0, 0, 0, 0, 0, 1076, 0,
	1173, 0, 0, 0, 1080, 1081, 1083, 0, 848, 0,
	874, 896, 898, 886, 710, 1226, 747, 1205, 795, 754,
	756, 1206, 747, 1202, 783, 0, 785, 0, 0, 0,
	787, 0, 776, 0, 778, 793, 768, 0, 0, 761,
	0, 760, 781, 789, 0, 0, 807, 97, 574, 0,
	0, 0, 100, 1452, 108, 0, 502, 0, 0, 0,
	0, 0, 587, 109, 1452, 117, 1452, 117, 110, 84,
	585, 85, 0, 0, 580, 0, 0, 573, 86, 0,
	582, 0, 0, 146, 0, 0, 148, 0, 1211, 479,
	529, 0, 0, 1249, 0, 468, 530, 554, 556, 0,
	0, 639, 643, 0, 642, 708, 661, 731, 813, 644,
	661, 0, 0, 0, 653, 650, 647, 814, 0, 0,
	0, 0, 193, 196, 199, 202, 1143, 266, 0, 0,
	1145, 0, 820, 0, 0, 126, 0, 135, 268, 312,
	313, 318, 337, 338, 340, 336, 0, 308, 309, 311,
	0, 0, 0, 0, 0, 723, 572, 0, 920, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 1176, 0,
	0, 0, 1187, -2, 1149, 1177, 1181, 0, 1034, 0,
	0, 0, 0, 1237, 906, 907, 908, 909, 910, 911,
	912, 0, 1094, 1095, 1099, 0, 0, 1045, 0, 0,
	1150, 1160, 1162, 990, 991, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, -2, -2, -2, 1008, 1009,
	1010, -2, -2, -2, 0, 0, 0, 1163, 0, 0,
	1165, 1166, 1170, 1171, 0, 1073, 1074, 1075, 1172, 0,
	0, 0, 880, 0, 0, 749, 0, 753, 0, 749,
	784, 0, 803, 786, 766, 777, 0, 774, 764, 0,
	765, 0, 793, 0, 0, 773, 0, 0, 0, 0,
	118, 500, 519, 0, 0, 563, 569, 569, 0, 1043,
	1044, 0, 0, 0, 102, 0, 0, 0, 0, 106,
	0, 112, 0, 0, 0, 91, 0, 0, 0, 0,
	90, 0, 0, 89, 124, 0, 0, 149, 484, 0,
	473, 0, 0, 0, 471, 0, 0, 0, 641, 643,
	0, 634, 635, 173, 645, 659, 660, 658, 0, 661,
	667, 664, 670, 0, 0, 128, 0, 0, 821, 828,
	144, 1342, 142, 139, 141, 285, 0, 452, 453, 454,
	734, 740, 725, 572, 0, 0, -2, 0, 980, -2,
	-2, 1112, 1143, 1186, 1180, 1234, 720, 1035, 1037, 1038,
	915, 1101, 1098, 0, 1085, 1061, 1062, 1159, 0, 0,
	0, 0, 1143, 1114, 1072, 0, 1078, 1079, 849, 706,
	1090, 0, 0, 757, 1090, 0, 781, 779, 762, 758,
	0, 769, 0, 790, 576, 578, 99, 0, 501, 0,
	504, 0, 0, 0, 0, 510, 511, 0, 0, 0,
	0, 521, 528, 0, 572, 1229, 0, 572, 0, 0,
	0, 0, 0, 114, 0, 0, 586, 0, 117, 117,
	575, 0, 0, 0, 0, 581, 0, 583, 136, 0,
	466, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 631, 643, 0, 636, 637, 0, 0, 0, 652,
	662, 0, 0, 0, 816, 0, 0, 0, 0, 310,
	726, -2, -2, 981, 1113, 0, 720, 0, 1087, -2,
	0, 0, 0, 1115, 0, 693, 0, 748, 746, 694,
	802, 793, 0, 788, 101, 0, 505, 506, 1249, 0,
	509, 512, 0, 514, 1251, 479, 0, 525, 526, 564,
	565, 568, 566, 569, 720, 523, 0, 103, 104, 113,
	121, 105, 111, 0, 0, 720, 0, 0, 794, 0,
	0, 528, 0, 518, 479, 469, 528, 0, 0, 638,
	639, 0, 0, 0, 671, 672, 0, 0, 0, 143,
	0, 138, 140, 1036, 1104, 0, -2, 0, 1016, 1077,
	1089, 1091, 0, 767, 759, 503, 507, 0, 0, 534,
	0, 522, 0, 572, 0, 0, 123, 0, 577, 579,
	0, 0, 0, 0, 0, 0, 479, 528, 467, 479,
	0, 640, 641, 0, 655, 814, 657, 0, 0, 145,
	0, 0, 0, 1100, 1017, 0, 0, 0, 513, 539,
	0, 0, 0, 567, 1034, 530, 107, 0, 120, 0,
	0, 0, 0, 0, 0, 516, 479, 558, 0, 632,
	0, 656, 146, 146, 1097, 1102, 1105, -2, 1412, 1287,
	0, 1103, 1092, 1093, 0, 515, 535, 536, 0, 531,
	532, 533, 1250, 527, 534, 122, 93, 95, 0, 0,
	0, 517, 528, 814, 129, 130, 0, 1107, 1108, 1109,
	1110, 1111, 508, 537, 0, 538, 0, 0, 0, 539,
	0, 0, 482, 479, 654, 0, 540, 0, 543, 544,
	0, 541, 524, 0, 0, 478, 480, 481, 559, 1106,
	542, 545, 546, 0, 0, 0, 0, 485, 0, 486,
	0, 0, 0, 484, 0, 0, 0, 483, 489, 0,
	492, 494, 495, -2, 0, 487, 0, 0, 490, 0,
	0, 0, 488, 493, 0, 491, 484, 0, 483, 499,
	497, 0, 498,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 367, 3, 373, 368, 3,
	378, 379, 371, 369, 383, 370, 380, 372, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 387, 382,
	357, 359, 358, 361, 384, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 376, 3, 377, 374, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 385, 366, 386, 364,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 360,
	57700, 362, 57701, 363, 57702, 365, 57703, 375, 57704, 381,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:907
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:913
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:919
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:928
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:930
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:939
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:940
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:942
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:944
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:971
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:976
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1012
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1023
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1035
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1058
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1084
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1090
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1096
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1105
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1114
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1183
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1206
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1216
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1235
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1245
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1278
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1279
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1282
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1283
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1310
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1336
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1374
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1443
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1476
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1487
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1495
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1496
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1497
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1500
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1502
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1503
		{
			return helpWith(sqllex, "CREATE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1521
		{
			return helpWith(sqllex, "DELETE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1531
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1532
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1533
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1534
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1535
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1541
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1542
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1543
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1545
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1546
		{
			return helpWith(sqllex, "DROP")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1561
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1576
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1599
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1622
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1637
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1688
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1697
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1700
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1702
		{
			return helpWith(sqllex, "DELETE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			return helpWith(sqllex, "INSERT")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1707
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1713
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1724
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1725
		{ /* SKIP DOC */
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1753
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1757
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1777
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1812
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1832
		{
			return helpWith(sqllex, "GRANT")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1852
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1874
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1930
		{
			return helpWith(sqllex, "RESET")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1931
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1946
		{
			return helpWith(sqllex, "RESET")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1957
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1962
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1965
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1969
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1970
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1971
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1972
		{ /* SKIP DOC */
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1973
		{ /* SKIP DOC */
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1974
		{
			return unimplemented(sqllex, "set local")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[6].union.scrubOptions()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2028
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2078
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2083
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2100
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2103
		{
			return unimplemented(sqllex, "set from current")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2105
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2115
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = Low
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = Normal
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = High
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2214
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2215
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2216
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2217
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2218
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2219
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2220
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2221
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2222
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2223
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2224
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2225
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2226
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2227
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2229
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2230
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2231
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2233
		{
			return helpWith(sqllex, "SHOW")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2242
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2253
		{
			sqlVAL.str = "client_encoding"
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2257
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2268
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2285
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2290
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2301
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2312
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2323
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2334
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2355
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2360
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2368
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2371
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2390
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2403
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2408
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2410
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2426
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2442
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2449
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2457
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2461
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2465
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2468
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2479
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2490
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2501
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2505
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2509
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2513
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2517
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2521
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2527
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2531
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2535
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2541
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 461:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2546
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2556
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2569
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2676
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2680
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = DropDefault
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 485:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2713
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 488:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 489:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = PartitionDefault{}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 499:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2794
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3001
		{
			return unimplemented(sqllex, "match full")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3002
		{
			return unimplemented(sqllex, "match partial")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3003
		{
			return unimplemented(sqllex, "match simple")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3004
		{
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = NoAction
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = Restrict
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = Cascade
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = SetNull
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = SetDefault
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3090
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3101
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3105
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 555:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 556:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3126
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3166
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = true
		}
	case 562:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = false
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3196
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3197
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3200
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 569:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3201
		{
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = Ascending
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = Descending
		}
	case 572:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3241
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3243
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = true
		}
	case 585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = false
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3276
		{
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3277
		{
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3288
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3299
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3310
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3314
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3315
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3316
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3334
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3339
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3352
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3357
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3365
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3372
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3375
		{
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3376
		{
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.str = ""
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.str = ""
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3422
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3435
		{
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3437
		{
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = ReadOnly
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = ReadWrite
		}
	case 631:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3501
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.str = ""
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.str = ""
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.str = ""
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.str = ""
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3544
		{
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3545
		{
		}
	case 644:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3569
		{
			return helpWith(sqllex, "INSERT")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3580
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3586
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3628
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3632
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3640
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 662:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3663
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3667
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 665:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3668
		{
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3797
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3832
		{
			return helpWith(sqllex, "SELECT")
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3833
		{
			return helpWith(sqllex, "VALUES")
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3834
		{
			return helpWith(sqllex, "TABLE")
		}
	case 693:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3880
		{
			return helpWith(sqllex, "SELECT")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3924
		{
			return helpWith(sqllex, "TABLE")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3935
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3936
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3937
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3940
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3941
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3944
		{
			return unimplemented(sqllex, "cte")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3947
		{
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3948
		{
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3951
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3952
		{
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3955
		{
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3956
		{
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = true
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = false
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = false
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = true
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3979
		{
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3980
		{
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4027
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4051
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4103
		{
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4104
		{
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4107
		{
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4108
		{
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4166
		{
			return helpWith(sqllex, "VALUES")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4168
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4183
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = &From{}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4205
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4223
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4250
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4287
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4312
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = nil
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4353
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4359
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = true
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = false
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4395
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.str = astFullJoin
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.str = astLeftJoin
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.str = astRightJoin
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.str = astInnerJoin
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4470
		{
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4471
		{
		}
	case 802:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4557
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4571
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4579
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4590
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4594
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4603
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4606
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 828:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4614
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4616
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4620
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = jsonbColType
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = jsonColType
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4672
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4703
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4712
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = nil
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4749
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4753
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4757
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4761
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4769
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4777
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4791
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4800
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4822
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 875:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4873
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 886:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4905
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4944
		{
		}
	case 893:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4945
		{
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 896:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 898:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = year
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = month
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = day
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = hour
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = minute
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5003
		{
			sqlVAL.union.val = month
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5007
		{
			sqlVAL.union.val = hour
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = minute
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = minute
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = nil
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = second
		}
	case 915:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5040
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5068
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5075
		{
			return unimplemented(sqllex, "at tz")
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5116
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5128
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5132
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5136
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5148
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5152
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5156
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5160
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5168
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5172
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5180
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5184
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5188
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5192
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5196
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5200
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5204
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5208
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5212
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5216
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5224
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5228
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5232
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5236
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5240
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5244
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5248
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5252
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5256
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5260
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5264
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5268
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5272
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5276
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5280
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5283
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5289
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5293
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5309
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5313
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5317
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5321
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5349
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5389
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5393
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5397
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5401
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5405
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5421
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5425
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5429
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5433
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5437
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5441
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5445
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5449
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5453
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5457
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5461
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5465
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5469
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5473
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5477
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5481
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5485
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5498
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5506
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5517
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5522
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5535
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5539
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5544
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5548
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5552
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5556
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5560
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5568
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5572
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5575
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5576
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5578
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5582
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5586
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5589
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5600
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5607
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5616
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5617
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5621
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5623
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5627
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5630
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5632
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5636
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5639
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5641
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5645
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5648
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5649
		{
			return unimplemented(sqllex, "current role")
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5651
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5655
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5658
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5660
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5664
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5668
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5672
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5676
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5679
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5681
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5684
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5686
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5689
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5691
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5695
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5698
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5699
		{
			return unimplemented(sqllex, "treat")
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5701
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5705
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5709
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5713
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5717
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5721
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5725
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5729
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5733
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5736
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5738
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5741
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5745
		{
			return unimplemented(sqllex, "within group")
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5746
		{
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5750
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5754
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5761
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5765
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5771
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5775
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5781
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5789
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5793
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5797
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5804
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5823
		{
			sqlVAL.str = ""
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5829
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5833
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5843
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5844
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5845
		{
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5848
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5849
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5855
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5856
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5857
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5858
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5859
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5870
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5874
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5880
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5886
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5892
		{
			sqlVAL.union.val = Any
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5896
		{
			sqlVAL.union.val = Some
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5900
		{
			sqlVAL.union.val = All
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5905
		{
			sqlVAL.union.val = Plus
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5906
		{
			sqlVAL.union.val = Minus
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5907
		{
			sqlVAL.union.val = Mult
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5908
		{
			sqlVAL.union.val = Div
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5909
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5910
		{
			sqlVAL.union.val = Mod
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5911
		{
			sqlVAL.union.val = Bitand
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = Bitor
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5913
		{
			sqlVAL.union.val = Pow
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5914
		{
			sqlVAL.union.val = Bitxor
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5915
		{
			sqlVAL.union.val = LT
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = GT
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5917
		{
			sqlVAL.union.val = EQ
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5918
		{
			sqlVAL.union.val = LE
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5919
		{
			sqlVAL.union.val = GE
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5920
		{
			sqlVAL.union.val = NE
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5924
		{
			sqlVAL.union.val = Like
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5925
		{
			sqlVAL.union.val = NotLike
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5926
		{
			sqlVAL.union.val = ILike
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5927
		{
			sqlVAL.union.val = NotILike
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5939
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5945
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5949
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5955
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5959
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5965
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5969
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5975
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5979
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5985
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5989
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6011
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6015
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6019
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6025
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6032
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6036
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6053
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6057
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6061
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6065
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6069
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6075
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6081
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6087
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6091
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6095
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6101
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6105
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6116
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6123
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6127
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6133
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6139
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6143
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6150
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6156
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6160
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6167
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6173
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6179
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6185
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6189
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6195
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6199
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6205
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6209
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6214
		{
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6215
		{
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6224
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6230
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6234
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6243
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6249
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6253
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6259
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6268
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6272
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6276
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6284
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6288
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6294
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6298
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6304
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6308
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6319
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6323
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6329
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6333
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6346
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6350
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6354
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6358
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6364
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6368
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6374
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6377
		{
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6387
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6391
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6398
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6402
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6406
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6410
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6413
		{
			return unimplemented(sqllex, "func const")
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6415
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6419
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6422
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6424
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6428
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6432
		{
			sqlVAL.union.val = DNull
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6439
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6443
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6449
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6484
		{
			sqlVAL.str = ""
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6490
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6494
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
